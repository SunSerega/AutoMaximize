


# CLMemorySegment:OffsetDef
mem_offset указывает отступ от начала области памяти, в байтах

# CLMemorySegment:OffsetLenDef
%CLMemorySegment:OffsetDef%
len указывает кол-во задействованных в операции байт

# CLMemorySegment:OffsetFillLenDef
%CLMemorySegment:OffsetDef%
fill_byte_len указывает кол-во заливаемых байт










# CLMemorySegment[%.,CCQ.Then%]WriteData(CommandQueue<IntPtr>)
# CLMemorySegment[%.,CCQ.Then%]WriteData(pointer)
Заполняет всю область памяти данными, находящимися по указанному адресу в RAM
# CLMemorySegment[%.,CCQ.Then%]ReadData(CommandQueue<IntPtr>)
# CLMemorySegment[%.,CCQ.Then%]ReadData(pointer)
Читает всё содержимое области памяти в RAM, по указанному адресу

# CLMemorySegment[%.,CCQ.Then%]WriteData(CommandQueue<IntPtr>, CommandQueue<integer>, CommandQueue<integer>)
# CLMemorySegment[%.,CCQ.Then%]WriteData(pointer, CommandQueue<integer>, CommandQueue<integer>)
Заполняет часть области памяти данными, находящимися по указанному адресу в RAM
%CLMemorySegment:OffsetLenDef%
# CLMemorySegment[%.,CCQ.Then%]ReadData(CommandQueue<IntPtr>, CommandQueue<integer>, CommandQueue<integer>)
# CLMemorySegment[%.,CCQ.Then%]ReadData(pointer, CommandQueue<integer>, CommandQueue<integer>)
Читает часть содержимого области памяти в RAM, по указанному адресу
%CLMemorySegment:OffsetLenDef%

# CLMemorySegment[%.,CCQ.Then%]WriteData(CommandQueue<NativeMemoryArea>, CommandQueue<integer>)
Записывает данные указанной области памяти RAM в данную область памяти OpenCL
%CLMemorySegment:OffsetDef%
# CLMemorySegment[%.,CCQ.Then%]ReadData(CommandQueue<NativeMemoryArea>, CommandQueue<integer>)
Читает достаточно данных данной области памяти OpenCL чтобы заполнить всю указанную область памяти RAM
%CLMemorySegment:OffsetDef%



# CLMemorySegment:FillData:PatternLen
Берёт последовательность из pattern_len байт из RAM по указанному адресу и заполняет её копиями
# CLMemorySegment:FillData:Area
Берёт последовательность байт указанной области памяти RAM и заполняет её копиями

# CLMemorySegment[%.,CCQ.Then%]FillData(CommandQueue<IntPtr>, CommandQueue<integer>)
# CLMemorySegment[%.,CCQ.Then%]FillData(pointer, CommandQueue<integer>)
%CLMemorySegment:FillData:PatternLen% всю область памяти
# CLMemorySegment[%.,CCQ.Then%]FillData(CommandQueue<IntPtr>, CommandQueue<integer>, CommandQueue<integer>, CommandQueue<integer>)
# CLMemorySegment[%.,CCQ.Then%]FillData(pointer, CommandQueue<integer>, CommandQueue<integer>, CommandQueue<integer>)
%CLMemorySegment:FillData:PatternLen% часть области памяти
%CLMemorySegment:OffsetFillLenDef%

# CLMemorySegment[%.,CCQ.Then%]FillData(CommandQueue<NativeMemoryArea>)
%CLMemorySegment:FillData:Area% всю данную область памяти OpenCL
# CLMemorySegment[%.,CCQ.Then%]FillData(CommandQueue<NativeMemoryArea>, CommandQueue<integer>, CommandQueue<integer>)
%CLMemorySegment:FillData:Area% часть данной области памяти OpenCL
%CLMemorySegment:OffsetFillLenDef%










# CLMemorySegment[%.,CCQ.Then%]WriteValue<TRecord>(TRecord)
# CLMemorySegment[%.,CCQ.Then%]WriteValue<TRecord>(CommandQueue<TRecord>)
# CLMemorySegment[%.,CCQ.Then%]WriteNativeValue<TRecord>(NativeValue<TRecord>)
# CLMemorySegment[%.,CCQ.Then%]WriteNativeValue<TRecord>(CommandQueue<NativeValue<TRecord>>)
Записывает указанное значение размерного типа в начало области памяти

# CLMemorySegment[%.,CCQ.Then%]ReadNativeValue<TRecord>(NativeValue<TRecord>)
# CLMemorySegment[%.,CCQ.Then%]ReadNativeValue<TRecord>(CommandQueue<NativeValue<TRecord>>)
Читает значение размерного типа из начала области памяти в указанное значение

# CLMemorySegment[%.,CCQ.Then%]WriteValue<TRecord>(TRecord, CommandQueue<integer>)
# CLMemorySegment[%.,CCQ.Then%]WriteValue<TRecord>(CommandQueue<TRecord>, CommandQueue<integer>)
# CLMemorySegment[%.,CCQ.Then%]WriteNativeValue<TRecord>(NativeValue<TRecord>, CommandQueue<integer>)
# CLMemorySegment[%.,CCQ.Then%]WriteNativeValue<TRecord>(CommandQueue<NativeValue<TRecord>>, CommandQueue<integer>)
Записывает указанное значение размерного типа в область памяти
%CLMemorySegment:OffsetDef%

# CLMemorySegment[%.,CCQ.Then%]ReadNativeValue<TRecord>(NativeValue<TRecord>, CommandQueue<integer>)
# CLMemorySegment[%.,CCQ.Then%]ReadNativeValue<TRecord>(CommandQueue<NativeValue<TRecord>>, CommandQueue<integer>)
Читает значение размерного типа из области памяти в указанное значение
%CLMemorySegment:OffsetDef%



# CLMemorySegment[%.,CCQ.Then%]FillValue<TRecord>(TRecord)
# CLMemorySegment[%.,CCQ.Then%]FillValue<TRecord>(CommandQueue<TRecord>)
# CLMemorySegment[%.,CCQ.Then%]FillNativeValue<TRecord>(NativeValue<TRecord>)
# CLMemorySegment[%.,CCQ.Then%]FillNativeValue<TRecord>(CommandQueue<NativeValue<TRecord>>)
Заполняет всю область памяти копиями указанного значения размерного типа

# CLMemorySegment[%.,CCQ.Then%]FillValue<TRecord>(TRecord, CommandQueue<integer>, CommandQueue<integer>)
# CLMemorySegment[%.,CCQ.Then%]FillValue<TRecord>(CommandQueue<TRecord>, CommandQueue<integer>, CommandQueue<integer>)
# CLMemorySegment[%.,CCQ.Then%]FillNativeValue<TRecord>(NativeValue<TRecord>, CommandQueue<integer>, CommandQueue<integer>)
# CLMemorySegment[%.,CCQ.Then%]FillNativeValue<TRecord>(CommandQueue<NativeValue<TRecord>>, CommandQueue<integer>, CommandQueue<integer>)
Заполняет часть области памяти копиями указанного значения размерного типа
%CLMemorySegment:OffsetFillLenDef%



# CLMemorySegment[%.,CCQ.Then%]GetValue<TRecord>
Читает значение указанного размерного типа из начала области памяти

# CLMemorySegment[%.,CCQ.Then%]GetValue<TRecord>(CommandQueue<integer>)
Читает значение указанного размерного типа из области памяти
%CLMemorySegment:OffsetDef%










# CLMemorySegment:ArrIndCountDef
a_ind(-ы) указывают индекс первого задействованного элемента массива
el_count указывает кол-во задействованных элементов массива

# CLMemorySegment:ArrMultiIndWarning
==================================================
ВНИМАНИЕ! У многомерных массивов элементы распологаются так же как у одномерных, разделение на строки виртуально
Это значит что, к примеру, чтение 4 элементов 2-х мерного массива начиная с индекса [0,1] прочитает элементы [0,1], [0,2], [1,0], [1,1]
Для чтения частей из нескольких строк массива - делайте несколько операций чтения, по 1 на строку



# CLMemorySegment[%.,CCQ.Then%]WriteArray1<TRecord>([% array of TRecord , CommandQueue<array of TRecord> %])
# CLMemorySegment[%.,CCQ.Then%]WriteArray2<TRecord>([% array[\,] of TRecord , CommandQueue<array[\,] of TRecord> %])
# CLMemorySegment[%.,CCQ.Then%]WriteArray3<TRecord>([% array[\,\,] of TRecord , CommandQueue<array[\,\,] of TRecord> %])
# CLMemorySegment[%.,CCQ.Then%]WriteNativeArray<TRecord>(NativeArray<TRecord>)
# CLMemorySegment[%.,CCQ.Then%]WriteNativeArray<TRecord>(CommandQueue<NativeArray<TRecord>>)
Записывает весь массив в начало области памяти

# CLMemorySegment[%.,CCQ.Then%]ReadArray1<TRecord>([% array of TRecord , CommandQueue<array of TRecord> %])
# CLMemorySegment[%.,CCQ.Then%]ReadArray2<TRecord>([% array[\,] of TRecord , CommandQueue<array[\,] of TRecord> %])
# CLMemorySegment[%.,CCQ.Then%]ReadArray3<TRecord>([% array[\,\,] of TRecord , CommandQueue<array[\,\,] of TRecord> %])
# CLMemorySegment[%.,CCQ.Then%]ReadNativeArray<TRecord>(NativeArray<TRecord>)
# CLMemorySegment[%.,CCQ.Then%]ReadNativeArray<TRecord>(CommandQueue<NativeArray<TRecord>>)
Заполняет весь массив байбами из начала области памяти

# CLMemorySegment:WriteArraySegment
# CLMemorySegment[%.,CCQ.Then%]WriteArraySegment<TRecord>(ArraySegment<TRecord>, CommandQueue<integer>)
Записывает указанный участок массива в область памяти
%CLMemorySegment:OffsetDef%
# CLMemorySegment:ReadArraySegment
# CLMemorySegment[%.,CCQ.Then%]ReadArraySegment<TRecord>(ArraySegment<TRecord>, CommandQueue<integer>)
Читает данные из области памяти в указанный участок массива
%CLMemorySegment:OffsetDef%

# CLMemorySegment:WriteArrayInds
# CLMemorySegment[%.,CCQ.Then%]WriteArray1<TRecord>([% array of TRecord , CommandQueue<array of TRecord> %], CommandQueue<integer>, CommandQueue<integer>, CommandQueue<integer>)
# CLMemorySegment[%.,CCQ.Then%]WriteNativeArray<TRecord>(NativeArray<TRecord>, CommandQueue<integer>, CommandQueue<integer>, CommandQueue<integer>)
# CLMemorySegment[%.,CCQ.Then%]WriteNativeArray<TRecord>(CommandQueue<NativeArray<TRecord>>, CommandQueue<integer>, CommandQueue<integer>, CommandQueue<integer>)
%CLMemorySegment:WriteArraySegment%
%CLMemorySegment:ArrIndCountDef%
# CLMemorySegment:ReadArrayInds
# CLMemorySegment[%.,CCQ.Then%]ReadArray1<TRecord>([% array of TRecord , CommandQueue<array of TRecord> %], CommandQueue<integer>, CommandQueue<integer>, CommandQueue<integer>)
# CLMemorySegment[%.,CCQ.Then%]ReadNativeArray<TRecord>(NativeArray<TRecord>, CommandQueue<integer>, CommandQueue<integer>, CommandQueue<integer>)
# CLMemorySegment[%.,CCQ.Then%]ReadNativeArray<TRecord>(CommandQueue<NativeArray<TRecord>>, CommandQueue<integer>, CommandQueue<integer>, CommandQueue<integer>)
%CLMemorySegment:ReadArraySegment%
%CLMemorySegment:ArrIndCountDef%

# CLMemorySegment[%.,CCQ.Then%]WriteArray2<TRecord>([% array[\,] of TRecord , CommandQueue<array[\,] of TRecord> %], CommandQueue<integer>, CommandQueue<integer>, CommandQueue<integer>, CommandQueue<integer>)
# CLMemorySegment[%.,CCQ.Then%]WriteArray3<TRecord>([% array[\,\,] of TRecord , CommandQueue<array[\,\,] of TRecord> %], CommandQueue<integer>, CommandQueue<integer>, CommandQueue<integer>, CommandQueue<integer>, CommandQueue<integer>)
%CLMemorySegment:WriteArrayInds%
%CLMemorySegment:ArrMultiIndWarning%
# CLMemorySegment[%.,CCQ.Then%]ReadArray2<TRecord>([% array[\,] of TRecord , CommandQueue<array[\,] of TRecord> %], CommandQueue<integer>, CommandQueue<integer>, CommandQueue<integer>, CommandQueue<integer>)
# CLMemorySegment[%.,CCQ.Then%]ReadArray3<TRecord>([% array[\,\,] of TRecord , CommandQueue<array[\,\,] of TRecord> %], CommandQueue<integer>, CommandQueue<integer>, CommandQueue<integer>, CommandQueue<integer>, CommandQueue<integer>)
%CLMemorySegment:ReadArrayInds%
%CLMemorySegment:ArrMultiIndWarning%



# CLMemorySegment[%.,CCQ.Then%]FillArray1<TRecord>(array of TRecord)
# CLMemorySegment[%.,CCQ.Then%]FillArray2<TRecord>(array[,] of TRecord)
# CLMemorySegment[%.,CCQ.Then%]FillArray3<TRecord>(array[,,] of TRecord)
# CLMemorySegment[%.,CCQ.Then%]FillArray1<TRecord>(CommandQueue<array of TRecord>)
# CLMemorySegment[%.,CCQ.Then%]FillArray2<TRecord>(CommandQueue<array[,] of TRecord>)
# CLMemorySegment[%.,CCQ.Then%]FillArray3<TRecord>(CommandQueue<array[,,] of TRecord>)
# CLMemorySegment[%.,CCQ.Then%]FillNativeArray<TRecord>(NativeArray<TRecord>)
# CLMemorySegment[%.,CCQ.Then%]FillNativeArray<TRecord>(CommandQueue<NativeArray<TRecord>>)
Заполняет область памяти копиями указанного массива

# CLMemorySegment:FillArraySegment
# CLMemorySegment[%.,CCQ.Then%]FillArraySegment<TRecord>(ArraySegment<TRecord>)
Заполняет область памяти копиями указанного участка массива
# CLMemorySegment[%.,CCQ.Then%]FillArraySegment<TRecord>(ArraySegment<TRecord>, CommandQueue<integer>, CommandQueue<integer>)
%CLMemorySegment:FillArraySegment%
%CLMemorySegment:OffsetFillLenDef%

# CLMemorySegment:FillArrayInds
# CLMemorySegment[%.,CCQ.Then%]FillArray1<TRecord>(array of TRecord, CommandQueue<integer>, CommandQueue<integer>, CommandQueue<integer>, CommandQueue<integer>)
# CLMemorySegment[%.,CCQ.Then%]FillArray1<TRecord>(CommandQueue<array of TRecord>, CommandQueue<integer>, CommandQueue<integer>, CommandQueue<integer>, CommandQueue<integer>)
# CLMemorySegment[%.,CCQ.Then%]FillNativeArray<TRecord>(NativeArray<TRecord>, CommandQueue<integer>, CommandQueue<integer>, CommandQueue<integer>, CommandQueue<integer>)
# CLMemorySegment[%.,CCQ.Then%]FillNativeArray<TRecord>(CommandQueue<NativeArray<TRecord>>, CommandQueue<integer>, CommandQueue<integer>, CommandQueue<integer>, CommandQueue<integer>)
%CLMemorySegment:FillArraySegment%
%CLMemorySegment:ArrIndCountDef%
%CLMemorySegment:OffsetFillLenDef%

# CLMemorySegment[%.,CCQ.Then%]FillArray2<TRecord>(array[,] of TRecord, CommandQueue<integer>, CommandQueue<integer>, CommandQueue<integer>, CommandQueue<integer>, CommandQueue<integer>)
# CLMemorySegment[%.,CCQ.Then%]FillArray3<TRecord>(array[,,] of TRecord, CommandQueue<integer>, CommandQueue<integer>, CommandQueue<integer>, CommandQueue<integer>, CommandQueue<integer>, CommandQueue<integer>)
# CLMemorySegment[%.,CCQ.Then%]FillArray2<TRecord>(CommandQueue<array[,] of TRecord>, CommandQueue<integer>, CommandQueue<integer>, CommandQueue<integer>, CommandQueue<integer>, CommandQueue<integer>)
# CLMemorySegment[%.,CCQ.Then%]FillArray3<TRecord>(CommandQueue<array[,,] of TRecord>, CommandQueue<integer>, CommandQueue<integer>, CommandQueue<integer>, CommandQueue<integer>, CommandQueue<integer>, CommandQueue<integer>)
%CLMemorySegment:FillArrayInds%
%CLMemorySegment:ArrMultiIndWarning%



# CLMemorySegment[%.,CCQ.Then%]GetArray<TRecord>
Создаёт массив с максимальным возможным кол-вом элементов и заполняет его содержимым области памяти

# CLMemorySegment[%.,CCQ.Then%]GetArray<TRecord>(CommandQueue<integer>)
# CLMemorySegment[%.,CCQ.Then%]GetArray2<TRecord>(CommandQueue<integer>, CommandQueue<integer>)
# CLMemorySegment[%.,CCQ.Then%]GetArray3<TRecord>(CommandQueue<integer>, CommandQueue<integer>, CommandQueue<integer>)
Создаёт массив с указанным кол-вом элементов и копирует в него содержимое из начала области памяти










# CLMemorySegment:Copy:To
Копирует данные из данной области памяти в mem
# CLMemorySegment:Copy:From
Копирует данные из mem в данную область памяти

# CLMemorySegment[%.,CCQ.Then%]Copy[%dir:From,To%](CommandQueue<CLMemorySegment>)
%CLMemorySegment:Copy:{%dir%}%
Если области памяти имеют разный размер - в качестве объёма данных берётся размер меньшей области

# CLMemorySegment[%.,CCQ.Then%]Copy[%dir:From,To%](CommandQueue<CLMemorySegment>, CommandQueue<integer>, CommandQueue<integer>, CommandQueue<integer>)
%CLMemorySegment:Copy:{%dir%}%
from_offset указывает отступ в байтах от начала области памяти, из которой копируют
to_offset указывает отступ в байтах от начала области памяти, в которую копируют
len указывает кол-во копируемых байт


