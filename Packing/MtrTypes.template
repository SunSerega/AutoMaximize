
  +AHsAJA-region Mtr+AH0-
  
  Mtr2x2f +AD0- record
    public val00, val10: single+ADs-
    public val01, val11: single+ADs-
    
    public constructor(val00, val01, val10, val11: single)+ADs-
    begin
      self.val00 :+AD0- val00+ADs-
      self.val01 :+AD0- val01+ADs-
      self.val10 :+AD0- val10+ADs-
      self.val11 :+AD0- val11+ADs-
    end+ADs-
    
    private function GetValAt(y,x: integer): single+ADs-
    begin
      if cardinal(x) +AD4- 1 then raise new IndexOutOfRangeException('+BBgEPQQ0BDUEOgRB- +ACI-X+ACI- +BDQEPgQ7BDYENQQ9- +BDgEPAQ1BEIETA- +BDcEPQQwBEcENQQ9BDgENQ- 0..1')+ADs-
      if cardinal(y) +AD4- 1 then raise new IndexOutOfRangeException('+BBgEPQQ0BDUEOgRB- +ACI-Y+ACI- +BDQEPgQ7BDYENQQ9- +BDgEPAQ1BEIETA- +BDcEPQQwBEcENQQ9BDgENQ- 0..1')+ADs-
      var ptr: +AF4-single :+AD0- pointer(new IntPtr(+AEA-self) +- (x+ACo-2 +- y) +ACo- 4 )+ADs-
      Result :+AD0- ptr+AF4AOw-
    end+ADs-
    private procedure SetValAt(y,x: integer+ADs- val: single)+ADs-
    begin
      if cardinal(x) +AD4- 1 then raise new IndexOutOfRangeException('+BBgEPQQ0BDUEOgRB- +ACI-X+ACI- +BDQEPgQ7BDYENQQ9- +BDgEPAQ1BEIETA- +BDcEPQQwBEcENQQ9BDgENQ- 0..1')+ADs-
      if cardinal(y) +AD4- 1 then raise new IndexOutOfRangeException('+BBgEPQQ0BDUEOgRB- +ACI-Y+ACI- +BDQEPgQ7BDYENQQ9- +BDgEPAQ1BEIETA- +BDcEPQQwBEcENQQ9BDgENQ- 0..1')+ADs-
      var ptr: +AF4-single :+AD0- pointer(new IntPtr(+AEA-self) +- (x+ACo-2 +- y) +ACo- 4 )+ADs-
      ptr+AF4- :+AD0- val+ADs-
    end+ADs-
    public property val+AFs-y,x: integer+AF0-: single read GetValAt write SetValAt+ADs- default+ADs-
    
    public static property Identity: Mtr2x2f read new Mtr2x2f(1.0, 0.0, 0.0, 1.0)+ADs-
    
    public property Row0: Vec2f read new Vec2f(self.val00, self.val01) write begin self.val00 :+AD0- value.val0+ADs- self.val01 :+AD0- value.val1+ADs- end+ADs-
    public property Row1: Vec2f read new Vec2f(self.val10, self.val11) write begin self.val10 :+AD0- value.val0+ADs- self.val11 :+AD0- value.val1+ADs- end+ADs-
    public property Row+AFs-y: integer+AF0-: Vec2f read y+AD0-0?Row0:y+AD0-1?Row1:Arr+ACYAPA-Vec2f+AD4AWw-y+AF0- write
    case y of
      0: Row0 :+AD0- value+ADs-
      1: Row1 :+AD0- value+ADs-
      else raise new IndexOutOfRangeException('+BB0EPgQ8BDUEQA- +BEEEQgRABD4ERwQ6BDg- +BDQEPgQ7BDYENQQ9- +BDgEPAQ1BEIETA- +BDcEPQQwBEcENQQ9BDgENQ- 0..1')+ADs-
    end+ADs-
    
    public property Col0: Vec2f read new Vec2f(self.val00, self.val10) write begin self.val00 :+AD0- value.val0+ADs- self.val10 :+AD0- value.val1+ADs- end+ADs-
    public property Col1: Vec2f read new Vec2f(self.val01, self.val11) write begin self.val01 :+AD0- value.val0+ADs- self.val11 :+AD0- value.val1+ADs- end+ADs-
    public property Col+AFs-x: integer+AF0-: Vec2f read x+AD0-0?Col0:x+AD0-1?Col1:Arr+ACYAPA-Vec2f+AD4AWw-x+AF0- write
    case x of
      0: Col0 :+AD0- value+ADs-
      1: Col1 :+AD0- value+ADs-
      else raise new IndexOutOfRangeException('+BB0EPgQ8BDUEQA- +BEEEQgQ+BDsEMQRGBDA- +BDQEPgQ7BDYENQQ9- +BDgEPAQ1BEIETA- +BDcEPQQwBEcENQQ9BDgENQ- 0..1')+ADs-
    end+ADs-
    
    public property ColPtr0: +AF4-Vec2f read pointer(IntPtr(pointer(+AEA-self)) +- 0)+ADs-
    public property ColPtr1: +AF4-Vec2f read pointer(IntPtr(pointer(+AEA-self)) +- 8)+ADs-
    public property ColPtr+AFs-x: integer+AF0-: +AF4-Vec2f read pointer(IntPtr(pointer(+AEA-self)) +- x+ACo-8)+ADs-
    
    public static function Scale(k: double): Mtr2x2f :+AD0- new Mtr2x2f(k, 0.0, 0.0, k)+ADs-
    
    public static function Traslate(X: single): Mtr2x2f :+AD0- new Mtr2x2f(1.0, X, 0.0, 1.0)+ADs-
    public static function TraslateTransposed(X: single): Mtr2x2f :+AD0- new Mtr2x2f(1.0, 0.0, X, 1.0)+ADs-
    
    public static function RotateXYcw(rot: double): Mtr2x2f+ADs-
    begin
      var sr: single :+AD0- Sin(rot)+ADs-
      var cr: single :+AD0- Cos(rot)+ADs-
      Result :+AD0- new Mtr2x2f(
         cr, +-sr,
        -sr,  cr
      )+ADs-
    end+ADs-
    public static function RotateXYccw(rot: double): Mtr2x2f+ADs-
    begin
      var sr: single :+AD0- Sin(rot)+ADs-
      var cr: single :+AD0- Cos(rot)+ADs-
      Result :+AD0- new Mtr2x2f(
         cr, -sr,
        +-sr,  cr
      )+ADs-
    end+ADs-
    
    public function ToString: string+ADs- override+ADs-
    begin
      var res :+AD0- new StringBuilder+ADs-
      
      var ElStrs :+AD0- new string+AFs-2,2+AF0AOw-
      for var y :+AD0- 0 to 2-1 do
        for var x :+AD0- 0 to 2-1 do
          ElStrs+AFs-y,x+AF0- :+AD0- (Sign(val+AFs-y,x+AF0-)+AD0--1?'-':'+-') +- Abs(val+AFs-y,x+AF0-).ToString('f2')+ADs-
      var MtrElTextW :+AD0- ElStrs.OfType+ACYAPA-string+AD4-.Max(s-+AD4-s.Length)+ADs-
      var PrintlnMtrW :+AD0- MtrElTextW+ACo-2 +- 4+ADs- // +-2+ACo-(Width-1) +- 2+ADs-
      
      res +-+AD0- '+JQw-'+ADs-
      res.Append(+ACM-32, PrintlnMtrW)+ADs-
      res +-+AD0- '+JRA-'+ACM-10+ADs-
      res +-+AD0- '+JQI- '+ADs-
      res +-+AD0- ElStrs+AFs-0,0+AF0-.PadLeft(MtrElTextW)+ADs-
      res +-+AD0- ', '+ADs-
      res +-+AD0- ElStrs+AFs-0,1+AF0-.PadLeft(MtrElTextW)+ADs-
      res +-+AD0- ' +JQI-'+ACM-10+ADs-
      res +-+AD0- '+JQI- '+ADs-
      res +-+AD0- ElStrs+AFs-1,0+AF0-.PadLeft(MtrElTextW)+ADs-
      res +-+AD0- ', '+ADs-
      res +-+AD0- ElStrs+AFs-1,1+AF0-.PadLeft(MtrElTextW)+ADs-
      res +-+AD0- ' +JQI-'+ACM-10+ADs-
      res +-+AD0- '+JRQ-'+ADs-
      res.Append(+ACM-32, PrintlnMtrW)+ADs-
      res +-+AD0- '+JRg-'+ADs-
      
      Result :+AD0- res.ToString+ADs-
    end+ADs-
    
    public function Println: Mtr2x2f+ADs-
    begin
      Writeln(self.ToString)+ADs-
      Result :+AD0- self+ADs-
    end+ADs-
    
    public static function operator+ACo-(m: Mtr2x2f+ADs- v: Vec2f): Vec2f :+AD0- new Vec2f(m.val00+ACo-v.val0+-m.val01+ACo-v.val1, m.val10+ACo-v.val0+-m.val11+ACo-v.val1)+ADs-
    public static function operator+ACo-(v: Vec2f+ADs- m: Mtr2x2f): Vec2f :+AD0- new Vec2f(m.val00+ACo-v.val0+-m.val10+ACo-v.val1, m.val01+ACo-v.val0+-m.val11+ACo-v.val1)+ADs-
    
  end+ADs-
  Mtr2f +AD0- Mtr2x2f+ADs-
  
  Mtr3x3f +AD0- record
    public val00, val10, val20: single+ADs-
    public val01, val11, val21: single+ADs-
    public val02, val12, val22: single+ADs-
    
    public constructor(val00, val01, val02, val10, val11, val12, val20, val21, val22: single)+ADs-
    begin
      self.val00 :+AD0- val00+ADs-
      self.val01 :+AD0- val01+ADs-
      self.val02 :+AD0- val02+ADs-
      self.val10 :+AD0- val10+ADs-
      self.val11 :+AD0- val11+ADs-
      self.val12 :+AD0- val12+ADs-
      self.val20 :+AD0- val20+ADs-
      self.val21 :+AD0- val21+ADs-
      self.val22 :+AD0- val22+ADs-
    end+ADs-
    
    private function GetValAt(y,x: integer): single+ADs-
    begin
      if cardinal(x) +AD4- 2 then raise new IndexOutOfRangeException('+BBgEPQQ0BDUEOgRB- +ACI-X+ACI- +BDQEPgQ7BDYENQQ9- +BDgEPAQ1BEIETA- +BDcEPQQwBEcENQQ9BDgENQ- 0..2')+ADs-
      if cardinal(y) +AD4- 2 then raise new IndexOutOfRangeException('+BBgEPQQ0BDUEOgRB- +ACI-Y+ACI- +BDQEPgQ7BDYENQQ9- +BDgEPAQ1BEIETA- +BDcEPQQwBEcENQQ9BDgENQ- 0..2')+ADs-
      var ptr: +AF4-single :+AD0- pointer(new IntPtr(+AEA-self) +- (x+ACo-3 +- y) +ACo- 4 )+ADs-
      Result :+AD0- ptr+AF4AOw-
    end+ADs-
    private procedure SetValAt(y,x: integer+ADs- val: single)+ADs-
    begin
      if cardinal(x) +AD4- 2 then raise new IndexOutOfRangeException('+BBgEPQQ0BDUEOgRB- +ACI-X+ACI- +BDQEPgQ7BDYENQQ9- +BDgEPAQ1BEIETA- +BDcEPQQwBEcENQQ9BDgENQ- 0..2')+ADs-
      if cardinal(y) +AD4- 2 then raise new IndexOutOfRangeException('+BBgEPQQ0BDUEOgRB- +ACI-Y+ACI- +BDQEPgQ7BDYENQQ9- +BDgEPAQ1BEIETA- +BDcEPQQwBEcENQQ9BDgENQ- 0..2')+ADs-
      var ptr: +AF4-single :+AD0- pointer(new IntPtr(+AEA-self) +- (x+ACo-3 +- y) +ACo- 4 )+ADs-
      ptr+AF4- :+AD0- val+ADs-
    end+ADs-
    public property val+AFs-y,x: integer+AF0-: single read GetValAt write SetValAt+ADs- default+ADs-
    
    public static property Identity: Mtr3x3f read new Mtr3x3f(1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0)+ADs-
    
    public property Row0: Vec3f read new Vec3f(self.val00, self.val01, self.val02) write begin self.val00 :+AD0- value.val0+ADs- self.val01 :+AD0- value.val1+ADs- self.val02 :+AD0- value.val2+ADs- end+ADs-
    public property Row1: Vec3f read new Vec3f(self.val10, self.val11, self.val12) write begin self.val10 :+AD0- value.val0+ADs- self.val11 :+AD0- value.val1+ADs- self.val12 :+AD0- value.val2+ADs- end+ADs-
    public property Row2: Vec3f read new Vec3f(self.val20, self.val21, self.val22) write begin self.val20 :+AD0- value.val0+ADs- self.val21 :+AD0- value.val1+ADs- self.val22 :+AD0- value.val2+ADs- end+ADs-
    public property Row+AFs-y: integer+AF0-: Vec3f read y+AD0-0?Row0:y+AD0-1?Row1:y+AD0-2?Row2:Arr+ACYAPA-Vec3f+AD4AWw-y+AF0- write
    case y of
      0: Row0 :+AD0- value+ADs-
      1: Row1 :+AD0- value+ADs-
      2: Row2 :+AD0- value+ADs-
      else raise new IndexOutOfRangeException('+BB0EPgQ8BDUEQA- +BEEEQgRABD4ERwQ6BDg- +BDQEPgQ7BDYENQQ9- +BDgEPAQ1BEIETA- +BDcEPQQwBEcENQQ9BDgENQ- 0..2')+ADs-
    end+ADs-
    
    public property Col0: Vec3f read new Vec3f(self.val00, self.val10, self.val20) write begin self.val00 :+AD0- value.val0+ADs- self.val10 :+AD0- value.val1+ADs- self.val20 :+AD0- value.val2+ADs- end+ADs-
    public property Col1: Vec3f read new Vec3f(self.val01, self.val11, self.val21) write begin self.val01 :+AD0- value.val0+ADs- self.val11 :+AD0- value.val1+ADs- self.val21 :+AD0- value.val2+ADs- end+ADs-
    public property Col2: Vec3f read new Vec3f(self.val02, self.val12, self.val22) write begin self.val02 :+AD0- value.val0+ADs- self.val12 :+AD0- value.val1+ADs- self.val22 :+AD0- value.val2+ADs- end+ADs-
    public property Col+AFs-x: integer+AF0-: Vec3f read x+AD0-0?Col0:x+AD0-1?Col1:x+AD0-2?Col2:Arr+ACYAPA-Vec3f+AD4AWw-x+AF0- write
    case x of
      0: Col0 :+AD0- value+ADs-
      1: Col1 :+AD0- value+ADs-
      2: Col2 :+AD0- value+ADs-
      else raise new IndexOutOfRangeException('+BB0EPgQ8BDUEQA- +BEEEQgQ+BDsEMQRGBDA- +BDQEPgQ7BDYENQQ9- +BDgEPAQ1BEIETA- +BDcEPQQwBEcENQQ9BDgENQ- 0..2')+ADs-
    end+ADs-
    
    public property ColPtr0: +AF4-Vec3f read pointer(IntPtr(pointer(+AEA-self)) +- 0)+ADs-
    public property ColPtr1: +AF4-Vec3f read pointer(IntPtr(pointer(+AEA-self)) +- 12)+ADs-
    public property ColPtr2: +AF4-Vec3f read pointer(IntPtr(pointer(+AEA-self)) +- 24)+ADs-
    public property ColPtr+AFs-x: integer+AF0-: +AF4-Vec3f read pointer(IntPtr(pointer(+AEA-self)) +- x+ACo-12)+ADs-
    
    public static function Scale(k: double): Mtr3x3f :+AD0- new Mtr3x3f(k, 0.0, 0.0, 0.0, k, 0.0, 0.0, 0.0, k)+ADs-
    
    public static function Traslate(X, Y: single): Mtr3x3f :+AD0- new Mtr3x3f(1.0, 0.0, X, 0.0, 1.0, Y, 0.0, 0.0, 1.0)+ADs-
    public static function TraslateTransposed(X, Y: single): Mtr3x3f :+AD0- new Mtr3x3f(1.0, 0.0, 0.0, 0.0, 1.0, 0.0, X, Y, 1.0)+ADs-
    
    public static function RotateXYcw(rot: double): Mtr3x3f+ADs-
    begin
      var sr: single :+AD0- Sin(rot)+ADs-
      var cr: single :+AD0- Cos(rot)+ADs-
      Result :+AD0- new Mtr3x3f(
         cr, +-sr, 0.0,
        -sr,  cr, 0.0,
        0.0, 0.0, 1.0
      )+ADs-
    end+ADs-
    public static function RotateXYccw(rot: double): Mtr3x3f+ADs-
    begin
      var sr: single :+AD0- Sin(rot)+ADs-
      var cr: single :+AD0- Cos(rot)+ADs-
      Result :+AD0- new Mtr3x3f(
         cr, -sr, 0.0,
        +-sr,  cr, 0.0,
        0.0, 0.0, 1.0
      )+ADs-
    end+ADs-
    
    public static function RotateYZcw(rot: double): Mtr3x3f+ADs-
    begin
      var sr: single :+AD0- Sin(rot)+ADs-
      var cr: single :+AD0- Cos(rot)+ADs-
      Result :+AD0- new Mtr3x3f(
        1.0, 0.0, 0.0,
        0.0,  cr, +-sr,
        0.0, -sr,  cr
      )+ADs-
    end+ADs-
    public static function RotateYZccw(rot: double): Mtr3x3f+ADs-
    begin
      var sr: single :+AD0- Sin(rot)+ADs-
      var cr: single :+AD0- Cos(rot)+ADs-
      Result :+AD0- new Mtr3x3f(
        1.0, 0.0, 0.0,
        0.0,  cr, -sr,
        0.0, +-sr,  cr
      )+ADs-
    end+ADs-
    
    public static function RotateZXcw(rot: double): Mtr3x3f+ADs-
    begin
      var sr: single :+AD0- Sin(rot)+ADs-
      var cr: single :+AD0- Cos(rot)+ADs-
      Result :+AD0- new Mtr3x3f(
         cr, 0.0, -sr,
        0.0, 1.0, 0.0,
        +-sr, 0.0,  cr
      )+ADs-
    end+ADs-
    public static function RotateZXccw(rot: double): Mtr3x3f+ADs-
    begin
      var sr: single :+AD0- Sin(rot)+ADs-
      var cr: single :+AD0- Cos(rot)+ADs-
      Result :+AD0- new Mtr3x3f(
         cr, 0.0, +-sr,
        0.0, 1.0, 0.0,
        -sr, 0.0,  cr
      )+ADs-
    end+ADs-
    
    public static function Rotate3Dcw(u: Vec3f+ADs- rot: double): Mtr3x3f+ADs-
    begin
      var k1 :+AD0- Sin(rot)+ADs-
      var k2 :+AD0- 2+ACo-Sqr(Sin(rot/2))+ADs-
      
      Result.val00 :+AD0- 1 +- k2+ACo-( -u.val2+ACo-u.val2 - u.val1+ACo-u.val1 )+ADs-
      Result.val01 :+AD0- k1+ACo-u.val2 +- k2+ACo-( u.val1+ACo-u.val0 )+ADs-
      Result.val02 :+AD0- -k1+ACo-u.val1 +- k2+ACo-( u.val2+ACo-u.val0 )+ADs-
      Result.val10 :+AD0- -k1+ACo-u.val2 +- k2+ACo-( u.val0+ACo-u.val1 )+ADs-
      Result.val11 :+AD0- 1 +- k2+ACo-( -u.val2+ACo-u.val2 - u.val0+ACo-u.val0 )+ADs-
      Result.val12 :+AD0- k1+ACo-u.val0 +- k2+ACo-( u.val2+ACo-u.val1 )+ADs-
      Result.val20 :+AD0- k1+ACo-u.val1 +- k2+ACo-( u.val0+ACo-u.val2 )+ADs-
      Result.val21 :+AD0- -k1+ACo-u.val0 +- k2+ACo-( u.val1+ACo-u.val2 )+ADs-
      Result.val22 :+AD0- 1 +- k2+ACo-( -u.val1+ACo-u.val1 - u.val0+ACo-u.val0 )+ADs-
      
    end+ADs-
    
    public static function Rotate3Dccw(u: Vec3f+ADs- rot: double): Mtr3x3f+ADs-
    begin
      var k1 :+AD0- Sin(rot)+ADs-
      var k2 :+AD0- 2+ACo-Sqr(Sin(rot/2))+ADs-
      
      Result.val00 :+AD0- 1 +- k2+ACo-( -u.val2+ACo-u.val2 - u.val1+ACo-u.val1 )+ADs-
      Result.val01 :+AD0- -k1+ACo-u.val2 +- k2+ACo-( u.val1+ACo-u.val0 )+ADs-
      Result.val02 :+AD0- k1+ACo-u.val1 +- k2+ACo-( u.val2+ACo-u.val0 )+ADs-
      Result.val10 :+AD0- k1+ACo-u.val2 +- k2+ACo-( u.val0+ACo-u.val1 )+ADs-
      Result.val11 :+AD0- 1 +- k2+ACo-( -u.val2+ACo-u.val2 - u.val0+ACo-u.val0 )+ADs-
      Result.val12 :+AD0- -k1+ACo-u.val0 +- k2+ACo-( u.val2+ACo-u.val1 )+ADs-
      Result.val20 :+AD0- -k1+ACo-u.val1 +- k2+ACo-( u.val0+ACo-u.val2 )+ADs-
      Result.val21 :+AD0- k1+ACo-u.val0 +- k2+ACo-( u.val1+ACo-u.val2 )+ADs-
      Result.val22 :+AD0- 1 +- k2+ACo-( -u.val1+ACo-u.val1 - u.val0+ACo-u.val0 )+ADs-
      
    end+ADs-
    
    public function ToString: string+ADs- override+ADs-
    begin
      var res :+AD0- new StringBuilder+ADs-
      
      var ElStrs :+AD0- new string+AFs-3,3+AF0AOw-
      for var y :+AD0- 0 to 3-1 do
        for var x :+AD0- 0 to 3-1 do
          ElStrs+AFs-y,x+AF0- :+AD0- (Sign(val+AFs-y,x+AF0-)+AD0--1?'-':'+-') +- Abs(val+AFs-y,x+AF0-).ToString('f2')+ADs-
      var MtrElTextW :+AD0- ElStrs.OfType+ACYAPA-string+AD4-.Max(s-+AD4-s.Length)+ADs-
      var PrintlnMtrW :+AD0- MtrElTextW+ACo-3 +- 6+ADs- // +-2+ACo-(Width-1) +- 2+ADs-
      
      res +-+AD0- '+JQw-'+ADs-
      res.Append(+ACM-32, PrintlnMtrW)+ADs-
      res +-+AD0- '+JRA-'+ACM-10+ADs-
      res +-+AD0- '+JQI- '+ADs-
      res +-+AD0- ElStrs+AFs-0,0+AF0-.PadLeft(MtrElTextW)+ADs-
      res +-+AD0- ', '+ADs-
      res +-+AD0- ElStrs+AFs-0,1+AF0-.PadLeft(MtrElTextW)+ADs-
      res +-+AD0- ', '+ADs-
      res +-+AD0- ElStrs+AFs-0,2+AF0-.PadLeft(MtrElTextW)+ADs-
      res +-+AD0- ' +JQI-'+ACM-10+ADs-
      res +-+AD0- '+JQI- '+ADs-
      res +-+AD0- ElStrs+AFs-1,0+AF0-.PadLeft(MtrElTextW)+ADs-
      res +-+AD0- ', '+ADs-
      res +-+AD0- ElStrs+AFs-1,1+AF0-.PadLeft(MtrElTextW)+ADs-
      res +-+AD0- ', '+ADs-
      res +-+AD0- ElStrs+AFs-1,2+AF0-.PadLeft(MtrElTextW)+ADs-
      res +-+AD0- ' +JQI-'+ACM-10+ADs-
      res +-+AD0- '+JQI- '+ADs-
      res +-+AD0- ElStrs+AFs-2,0+AF0-.PadLeft(MtrElTextW)+ADs-
      res +-+AD0- ', '+ADs-
      res +-+AD0- ElStrs+AFs-2,1+AF0-.PadLeft(MtrElTextW)+ADs-
      res +-+AD0- ', '+ADs-
      res +-+AD0- ElStrs+AFs-2,2+AF0-.PadLeft(MtrElTextW)+ADs-
      res +-+AD0- ' +JQI-'+ACM-10+ADs-
      res +-+AD0- '+JRQ-'+ADs-
      res.Append(+ACM-32, PrintlnMtrW)+ADs-
      res +-+AD0- '+JRg-'+ADs-
      
      Result :+AD0- res.ToString+ADs-
    end+ADs-
    
    public function Println: Mtr3x3f+ADs-
    begin
      Writeln(self.ToString)+ADs-
      Result :+AD0- self+ADs-
    end+ADs-
    
    public static function operator+ACo-(m: Mtr3x3f+ADs- v: Vec3f): Vec3f :+AD0- new Vec3f(m.val00+ACo-v.val0+-m.val01+ACo-v.val1+-m.val02+ACo-v.val2, m.val10+ACo-v.val0+-m.val11+ACo-v.val1+-m.val12+ACo-v.val2, m.val20+ACo-v.val0+-m.val21+ACo-v.val1+-m.val22+ACo-v.val2)+ADs-
    public static function operator+ACo-(v: Vec3f+ADs- m: Mtr3x3f): Vec3f :+AD0- new Vec3f(m.val00+ACo-v.val0+-m.val10+ACo-v.val1+-m.val20+ACo-v.val2, m.val01+ACo-v.val0+-m.val11+ACo-v.val1+-m.val21+ACo-v.val2, m.val02+ACo-v.val0+-m.val12+ACo-v.val1+-m.val22+ACo-v.val2)+ADs-
    
    public static function operator implicit(m: Mtr2x2f): Mtr3x3f :+AD0- new Mtr3x3f(m.val00, m.val01, 0.0, m.val10, m.val11, 0.0, 0.0, 0.0, 0.0)+ADs-
    public static function operator implicit(m: Mtr3x3f): Mtr2x2f :+AD0- new Mtr2x2f(m.val00, m.val01, m.val10, m.val11)+ADs-
    
  end+ADs-
  Mtr3f +AD0- Mtr3x3f+ADs-
  
  Mtr4x4f +AD0- record
    public val00, val10, val20, val30: single+ADs-
    public val01, val11, val21, val31: single+ADs-
    public val02, val12, val22, val32: single+ADs-
    public val03, val13, val23, val33: single+ADs-
    
    public constructor(val00, val01, val02, val03, val10, val11, val12, val13, val20, val21, val22, val23, val30, val31, val32, val33: single)+ADs-
    begin
      self.val00 :+AD0- val00+ADs-
      self.val01 :+AD0- val01+ADs-
      self.val02 :+AD0- val02+ADs-
      self.val03 :+AD0- val03+ADs-
      self.val10 :+AD0- val10+ADs-
      self.val11 :+AD0- val11+ADs-
      self.val12 :+AD0- val12+ADs-
      self.val13 :+AD0- val13+ADs-
      self.val20 :+AD0- val20+ADs-
      self.val21 :+AD0- val21+ADs-
      self.val22 :+AD0- val22+ADs-
      self.val23 :+AD0- val23+ADs-
      self.val30 :+AD0- val30+ADs-
      self.val31 :+AD0- val31+ADs-
      self.val32 :+AD0- val32+ADs-
      self.val33 :+AD0- val33+ADs-
    end+ADs-
    
    private function GetValAt(y,x: integer): single+ADs-
    begin
      if cardinal(x) +AD4- 3 then raise new IndexOutOfRangeException('+BBgEPQQ0BDUEOgRB- +ACI-X+ACI- +BDQEPgQ7BDYENQQ9- +BDgEPAQ1BEIETA- +BDcEPQQwBEcENQQ9BDgENQ- 0..3')+ADs-
      if cardinal(y) +AD4- 3 then raise new IndexOutOfRangeException('+BBgEPQQ0BDUEOgRB- +ACI-Y+ACI- +BDQEPgQ7BDYENQQ9- +BDgEPAQ1BEIETA- +BDcEPQQwBEcENQQ9BDgENQ- 0..3')+ADs-
      var ptr: +AF4-single :+AD0- pointer(new IntPtr(+AEA-self) +- (x+ACo-4 +- y) +ACo- 4 )+ADs-
      Result :+AD0- ptr+AF4AOw-
    end+ADs-
    private procedure SetValAt(y,x: integer+ADs- val: single)+ADs-
    begin
      if cardinal(x) +AD4- 3 then raise new IndexOutOfRangeException('+BBgEPQQ0BDUEOgRB- +ACI-X+ACI- +BDQEPgQ7BDYENQQ9- +BDgEPAQ1BEIETA- +BDcEPQQwBEcENQQ9BDgENQ- 0..3')+ADs-
      if cardinal(y) +AD4- 3 then raise new IndexOutOfRangeException('+BBgEPQQ0BDUEOgRB- +ACI-Y+ACI- +BDQEPgQ7BDYENQQ9- +BDgEPAQ1BEIETA- +BDcEPQQwBEcENQQ9BDgENQ- 0..3')+ADs-
      var ptr: +AF4-single :+AD0- pointer(new IntPtr(+AEA-self) +- (x+ACo-4 +- y) +ACo- 4 )+ADs-
      ptr+AF4- :+AD0- val+ADs-
    end+ADs-
    public property val+AFs-y,x: integer+AF0-: single read GetValAt write SetValAt+ADs- default+ADs-
    
    public static property Identity: Mtr4x4f read new Mtr4x4f(1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0)+ADs-
    
    public property Row0: Vec4f read new Vec4f(self.val00, self.val01, self.val02, self.val03) write begin self.val00 :+AD0- value.val0+ADs- self.val01 :+AD0- value.val1+ADs- self.val02 :+AD0- value.val2+ADs- self.val03 :+AD0- value.val3+ADs- end+ADs-
    public property Row1: Vec4f read new Vec4f(self.val10, self.val11, self.val12, self.val13) write begin self.val10 :+AD0- value.val0+ADs- self.val11 :+AD0- value.val1+ADs- self.val12 :+AD0- value.val2+ADs- self.val13 :+AD0- value.val3+ADs- end+ADs-
    public property Row2: Vec4f read new Vec4f(self.val20, self.val21, self.val22, self.val23) write begin self.val20 :+AD0- value.val0+ADs- self.val21 :+AD0- value.val1+ADs- self.val22 :+AD0- value.val2+ADs- self.val23 :+AD0- value.val3+ADs- end+ADs-
    public property Row3: Vec4f read new Vec4f(self.val30, self.val31, self.val32, self.val33) write begin self.val30 :+AD0- value.val0+ADs- self.val31 :+AD0- value.val1+ADs- self.val32 :+AD0- value.val2+ADs- self.val33 :+AD0- value.val3+ADs- end+ADs-
    public property Row+AFs-y: integer+AF0-: Vec4f read y+AD0-0?Row0:y+AD0-1?Row1:y+AD0-2?Row2:y+AD0-3?Row3:Arr+ACYAPA-Vec4f+AD4AWw-y+AF0- write
    case y of
      0: Row0 :+AD0- value+ADs-
      1: Row1 :+AD0- value+ADs-
      2: Row2 :+AD0- value+ADs-
      3: Row3 :+AD0- value+ADs-
      else raise new IndexOutOfRangeException('+BB0EPgQ8BDUEQA- +BEEEQgRABD4ERwQ6BDg- +BDQEPgQ7BDYENQQ9- +BDgEPAQ1BEIETA- +BDcEPQQwBEcENQQ9BDgENQ- 0..3')+ADs-
    end+ADs-
    
    public property Col0: Vec4f read new Vec4f(self.val00, self.val10, self.val20, self.val30) write begin self.val00 :+AD0- value.val0+ADs- self.val10 :+AD0- value.val1+ADs- self.val20 :+AD0- value.val2+ADs- self.val30 :+AD0- value.val3+ADs- end+ADs-
    public property Col1: Vec4f read new Vec4f(self.val01, self.val11, self.val21, self.val31) write begin self.val01 :+AD0- value.val0+ADs- self.val11 :+AD0- value.val1+ADs- self.val21 :+AD0- value.val2+ADs- self.val31 :+AD0- value.val3+ADs- end+ADs-
    public property Col2: Vec4f read new Vec4f(self.val02, self.val12, self.val22, self.val32) write begin self.val02 :+AD0- value.val0+ADs- self.val12 :+AD0- value.val1+ADs- self.val22 :+AD0- value.val2+ADs- self.val32 :+AD0- value.val3+ADs- end+ADs-
    public property Col3: Vec4f read new Vec4f(self.val03, self.val13, self.val23, self.val33) write begin self.val03 :+AD0- value.val0+ADs- self.val13 :+AD0- value.val1+ADs- self.val23 :+AD0- value.val2+ADs- self.val33 :+AD0- value.val3+ADs- end+ADs-
    public property Col+AFs-x: integer+AF0-: Vec4f read x+AD0-0?Col0:x+AD0-1?Col1:x+AD0-2?Col2:x+AD0-3?Col3:Arr+ACYAPA-Vec4f+AD4AWw-x+AF0- write
    case x of
      0: Col0 :+AD0- value+ADs-
      1: Col1 :+AD0- value+ADs-
      2: Col2 :+AD0- value+ADs-
      3: Col3 :+AD0- value+ADs-
      else raise new IndexOutOfRangeException('+BB0EPgQ8BDUEQA- +BEEEQgQ+BDsEMQRGBDA- +BDQEPgQ7BDYENQQ9- +BDgEPAQ1BEIETA- +BDcEPQQwBEcENQQ9BDgENQ- 0..3')+ADs-
    end+ADs-
    
    public property ColPtr0: +AF4-Vec4f read pointer(IntPtr(pointer(+AEA-self)) +- 0)+ADs-
    public property ColPtr1: +AF4-Vec4f read pointer(IntPtr(pointer(+AEA-self)) +- 16)+ADs-
    public property ColPtr2: +AF4-Vec4f read pointer(IntPtr(pointer(+AEA-self)) +- 32)+ADs-
    public property ColPtr3: +AF4-Vec4f read pointer(IntPtr(pointer(+AEA-self)) +- 48)+ADs-
    public property ColPtr+AFs-x: integer+AF0-: +AF4-Vec4f read pointer(IntPtr(pointer(+AEA-self)) +- x+ACo-16)+ADs-
    
    public static function Scale(k: double): Mtr4x4f :+AD0- new Mtr4x4f(k, 0.0, 0.0, 0.0, 0.0, k, 0.0, 0.0, 0.0, 0.0, k, 0.0, 0.0, 0.0, 0.0, k)+ADs-
    
    public static function Traslate(X, Y, Z: single): Mtr4x4f :+AD0- new Mtr4x4f(1.0, 0.0, 0.0, X, 0.0, 1.0, 0.0, Y, 0.0, 0.0, 1.0, Z, 0.0, 0.0, 0.0, 1.0)+ADs-
    public static function TraslateTransposed(X, Y, Z: single): Mtr4x4f :+AD0- new Mtr4x4f(1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, X, Y, Z, 1.0)+ADs-
    
    public static function RotateXYcw(rot: double): Mtr4x4f+ADs-
    begin
      var sr: single :+AD0- Sin(rot)+ADs-
      var cr: single :+AD0- Cos(rot)+ADs-
      Result :+AD0- new Mtr4x4f(
         cr, +-sr, 0.0, 0.0,
        -sr,  cr, 0.0, 0.0,
        0.0, 0.0, 1.0, 0.0,
        0.0, 0.0, 0.0, 1.0
      )+ADs-
    end+ADs-
    public static function RotateXYccw(rot: double): Mtr4x4f+ADs-
    begin
      var sr: single :+AD0- Sin(rot)+ADs-
      var cr: single :+AD0- Cos(rot)+ADs-
      Result :+AD0- new Mtr4x4f(
         cr, -sr, 0.0, 0.0,
        +-sr,  cr, 0.0, 0.0,
        0.0, 0.0, 1.0, 0.0,
        0.0, 0.0, 0.0, 1.0
      )+ADs-
    end+ADs-
    
    public static function RotateYZcw(rot: double): Mtr4x4f+ADs-
    begin
      var sr: single :+AD0- Sin(rot)+ADs-
      var cr: single :+AD0- Cos(rot)+ADs-
      Result :+AD0- new Mtr4x4f(
        1.0, 0.0, 0.0, 0.0,
        0.0,  cr, +-sr, 0.0,
        0.0, -sr,  cr, 0.0,
        0.0, 0.0, 0.0, 1.0
      )+ADs-
    end+ADs-
    public static function RotateYZccw(rot: double): Mtr4x4f+ADs-
    begin
      var sr: single :+AD0- Sin(rot)+ADs-
      var cr: single :+AD0- Cos(rot)+ADs-
      Result :+AD0- new Mtr4x4f(
        1.0, 0.0, 0.0, 0.0,
        0.0,  cr, -sr, 0.0,
        0.0, +-sr,  cr, 0.0,
        0.0, 0.0, 0.0, 1.0
      )+ADs-
    end+ADs-
    
    public static function RotateZXcw(rot: double): Mtr4x4f+ADs-
    begin
      var sr: single :+AD0- Sin(rot)+ADs-
      var cr: single :+AD0- Cos(rot)+ADs-
      Result :+AD0- new Mtr4x4f(
         cr, 0.0, -sr, 0.0,
        0.0, 1.0, 0.0, 0.0,
        +-sr, 0.0,  cr, 0.0,
        0.0, 0.0, 0.0, 1.0
      )+ADs-
    end+ADs-
    public static function RotateZXccw(rot: double): Mtr4x4f+ADs-
    begin
      var sr: single :+AD0- Sin(rot)+ADs-
      var cr: single :+AD0- Cos(rot)+ADs-
      Result :+AD0- new Mtr4x4f(
         cr, 0.0, +-sr, 0.0,
        0.0, 1.0, 0.0, 0.0,
        -sr, 0.0,  cr, 0.0,
        0.0, 0.0, 0.0, 1.0
      )+ADs-
    end+ADs-
    
    public static function Rotate3Dcw(u: Vec3f+ADs- rot: double): Mtr4x4f+ADs-
    begin
      var k1 :+AD0- Sin(rot)+ADs-
      var k2 :+AD0- 2+ACo-Sqr(Sin(rot/2))+ADs-
      
      Result.val00 :+AD0- 1 +- k2+ACo-( -u.val2+ACo-u.val2 - u.val1+ACo-u.val1 )+ADs-
      Result.val01 :+AD0- k1+ACo-u.val2 +- k2+ACo-( u.val1+ACo-u.val0 )+ADs-
      Result.val02 :+AD0- -k1+ACo-u.val1 +- k2+ACo-( u.val2+ACo-u.val0 )+ADs-
      Result.val10 :+AD0- -k1+ACo-u.val2 +- k2+ACo-( u.val0+ACo-u.val1 )+ADs-
      Result.val11 :+AD0- 1 +- k2+ACo-( -u.val2+ACo-u.val2 - u.val0+ACo-u.val0 )+ADs-
      Result.val12 :+AD0- k1+ACo-u.val0 +- k2+ACo-( u.val2+ACo-u.val1 )+ADs-
      Result.val20 :+AD0- k1+ACo-u.val1 +- k2+ACo-( u.val0+ACo-u.val2 )+ADs-
      Result.val21 :+AD0- -k1+ACo-u.val0 +- k2+ACo-( u.val1+ACo-u.val2 )+ADs-
      Result.val22 :+AD0- 1 +- k2+ACo-( -u.val1+ACo-u.val1 - u.val0+ACo-u.val0 )+ADs-
      
      Result.val33 :+AD0- 1+ADs-
    end+ADs-
    
    public static function Rotate3Dccw(u: Vec3f+ADs- rot: double): Mtr4x4f+ADs-
    begin
      var k1 :+AD0- Sin(rot)+ADs-
      var k2 :+AD0- 2+ACo-Sqr(Sin(rot/2))+ADs-
      
      Result.val00 :+AD0- 1 +- k2+ACo-( -u.val2+ACo-u.val2 - u.val1+ACo-u.val1 )+ADs-
      Result.val01 :+AD0- -k1+ACo-u.val2 +- k2+ACo-( u.val1+ACo-u.val0 )+ADs-
      Result.val02 :+AD0- k1+ACo-u.val1 +- k2+ACo-( u.val2+ACo-u.val0 )+ADs-
      Result.val10 :+AD0- k1+ACo-u.val2 +- k2+ACo-( u.val0+ACo-u.val1 )+ADs-
      Result.val11 :+AD0- 1 +- k2+ACo-( -u.val2+ACo-u.val2 - u.val0+ACo-u.val0 )+ADs-
      Result.val12 :+AD0- -k1+ACo-u.val0 +- k2+ACo-( u.val2+ACo-u.val1 )+ADs-
      Result.val20 :+AD0- -k1+ACo-u.val1 +- k2+ACo-( u.val0+ACo-u.val2 )+ADs-
      Result.val21 :+AD0- k1+ACo-u.val0 +- k2+ACo-( u.val1+ACo-u.val2 )+ADs-
      Result.val22 :+AD0- 1 +- k2+ACo-( -u.val1+ACo-u.val1 - u.val0+ACo-u.val0 )+ADs-
      
      Result.val33 :+AD0- 1+ADs-
    end+ADs-
    
    public function ToString: string+ADs- override+ADs-
    begin
      var res :+AD0- new StringBuilder+ADs-
      
      var ElStrs :+AD0- new string+AFs-4,4+AF0AOw-
      for var y :+AD0- 0 to 4-1 do
        for var x :+AD0- 0 to 4-1 do
          ElStrs+AFs-y,x+AF0- :+AD0- (Sign(val+AFs-y,x+AF0-)+AD0--1?'-':'+-') +- Abs(val+AFs-y,x+AF0-).ToString('f2')+ADs-
      var MtrElTextW :+AD0- ElStrs.OfType+ACYAPA-string+AD4-.Max(s-+AD4-s.Length)+ADs-
      var PrintlnMtrW :+AD0- MtrElTextW+ACo-4 +- 8+ADs- // +-2+ACo-(Width-1) +- 2+ADs-
      
      res +-+AD0- '+JQw-'+ADs-
      res.Append(+ACM-32, PrintlnMtrW)+ADs-
      res +-+AD0- '+JRA-'+ACM-10+ADs-
      res +-+AD0- '+JQI- '+ADs-
      res +-+AD0- ElStrs+AFs-0,0+AF0-.PadLeft(MtrElTextW)+ADs-
      res +-+AD0- ', '+ADs-
      res +-+AD0- ElStrs+AFs-0,1+AF0-.PadLeft(MtrElTextW)+ADs-
      res +-+AD0- ', '+ADs-
      res +-+AD0- ElStrs+AFs-0,2+AF0-.PadLeft(MtrElTextW)+ADs-
      res +-+AD0- ', '+ADs-
      res +-+AD0- ElStrs+AFs-0,3+AF0-.PadLeft(MtrElTextW)+ADs-
      res +-+AD0- ' +JQI-'+ACM-10+ADs-
      res +-+AD0- '+JQI- '+ADs-
      res +-+AD0- ElStrs+AFs-1,0+AF0-.PadLeft(MtrElTextW)+ADs-
      res +-+AD0- ', '+ADs-
      res +-+AD0- ElStrs+AFs-1,1+AF0-.PadLeft(MtrElTextW)+ADs-
      res +-+AD0- ', '+ADs-
      res +-+AD0- ElStrs+AFs-1,2+AF0-.PadLeft(MtrElTextW)+ADs-
      res +-+AD0- ', '+ADs-
      res +-+AD0- ElStrs+AFs-1,3+AF0-.PadLeft(MtrElTextW)+ADs-
      res +-+AD0- ' +JQI-'+ACM-10+ADs-
      res +-+AD0- '+JQI- '+ADs-
      res +-+AD0- ElStrs+AFs-2,0+AF0-.PadLeft(MtrElTextW)+ADs-
      res +-+AD0- ', '+ADs-
      res +-+AD0- ElStrs+AFs-2,1+AF0-.PadLeft(MtrElTextW)+ADs-
      res +-+AD0- ', '+ADs-
      res +-+AD0- ElStrs+AFs-2,2+AF0-.PadLeft(MtrElTextW)+ADs-
      res +-+AD0- ', '+ADs-
      res +-+AD0- ElStrs+AFs-2,3+AF0-.PadLeft(MtrElTextW)+ADs-
      res +-+AD0- ' +JQI-'+ACM-10+ADs-
      res +-+AD0- '+JQI- '+ADs-
      res +-+AD0- ElStrs+AFs-3,0+AF0-.PadLeft(MtrElTextW)+ADs-
      res +-+AD0- ', '+ADs-
      res +-+AD0- ElStrs+AFs-3,1+AF0-.PadLeft(MtrElTextW)+ADs-
      res +-+AD0- ', '+ADs-
      res +-+AD0- ElStrs+AFs-3,2+AF0-.PadLeft(MtrElTextW)+ADs-
      res +-+AD0- ', '+ADs-
      res +-+AD0- ElStrs+AFs-3,3+AF0-.PadLeft(MtrElTextW)+ADs-
      res +-+AD0- ' +JQI-'+ACM-10+ADs-
      res +-+AD0- '+JRQ-'+ADs-
      res.Append(+ACM-32, PrintlnMtrW)+ADs-
      res +-+AD0- '+JRg-'+ADs-
      
      Result :+AD0- res.ToString+ADs-
    end+ADs-
    
    public function Println: Mtr4x4f+ADs-
    begin
      Writeln(self.ToString)+ADs-
      Result :+AD0- self+ADs-
    end+ADs-
    
    public static function operator+ACo-(m: Mtr4x4f+ADs- v: Vec4f): Vec4f :+AD0- new Vec4f(m.val00+ACo-v.val0+-m.val01+ACo-v.val1+-m.val02+ACo-v.val2+-m.val03+ACo-v.val3, m.val10+ACo-v.val0+-m.val11+ACo-v.val1+-m.val12+ACo-v.val2+-m.val13+ACo-v.val3, m.val20+ACo-v.val0+-m.val21+ACo-v.val1+-m.val22+ACo-v.val2+-m.val23+ACo-v.val3, m.val30+ACo-v.val0+-m.val31+ACo-v.val1+-m.val32+ACo-v.val2+-m.val33+ACo-v.val3)+ADs-
    public static function operator+ACo-(v: Vec4f+ADs- m: Mtr4x4f): Vec4f :+AD0- new Vec4f(m.val00+ACo-v.val0+-m.val10+ACo-v.val1+-m.val20+ACo-v.val2+-m.val30+ACo-v.val3, m.val01+ACo-v.val0+-m.val11+ACo-v.val1+-m.val21+ACo-v.val2+-m.val31+ACo-v.val3, m.val02+ACo-v.val0+-m.val12+ACo-v.val1+-m.val22+ACo-v.val2+-m.val32+ACo-v.val3, m.val03+ACo-v.val0+-m.val13+ACo-v.val1+-m.val23+ACo-v.val2+-m.val33+ACo-v.val3)+ADs-
    
    public static function operator implicit(m: Mtr2x2f): Mtr4x4f :+AD0- new Mtr4x4f(m.val00, m.val01, 0.0, 0.0, m.val10, m.val11, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)+ADs-
    public static function operator implicit(m: Mtr4x4f): Mtr2x2f :+AD0- new Mtr2x2f(m.val00, m.val01, m.val10, m.val11)+ADs-
    
    public static function operator implicit(m: Mtr3x3f): Mtr4x4f :+AD0- new Mtr4x4f(m.val00, m.val01, m.val02, 0.0, m.val10, m.val11, m.val12, 0.0, m.val20, m.val21, m.val22, 0.0, 0.0, 0.0, 0.0, 0.0)+ADs-
    public static function operator implicit(m: Mtr4x4f): Mtr3x3f :+AD0- new Mtr3x3f(m.val00, m.val01, m.val02, m.val10, m.val11, m.val12, m.val20, m.val21, m.val22)+ADs-
    
  end+ADs-
  Mtr4f +AD0- Mtr4x4f+ADs-
  
  Mtr2x3f +AD0- record
    public val00, val10: single+ADs-
    public val01, val11: single+ADs-
    public val02, val12: single+ADs-
    
    public constructor(val00, val01, val02, val10, val11, val12: single)+ADs-
    begin
      self.val00 :+AD0- val00+ADs-
      self.val01 :+AD0- val01+ADs-
      self.val02 :+AD0- val02+ADs-
      self.val10 :+AD0- val10+ADs-
      self.val11 :+AD0- val11+ADs-
      self.val12 :+AD0- val12+ADs-
    end+ADs-
    
    private function GetValAt(y,x: integer): single+ADs-
    begin
      if cardinal(x) +AD4- 2 then raise new IndexOutOfRangeException('+BBgEPQQ0BDUEOgRB- +ACI-X+ACI- +BDQEPgQ7BDYENQQ9- +BDgEPAQ1BEIETA- +BDcEPQQwBEcENQQ9BDgENQ- 0..2')+ADs-
      if cardinal(y) +AD4- 1 then raise new IndexOutOfRangeException('+BBgEPQQ0BDUEOgRB- +ACI-Y+ACI- +BDQEPgQ7BDYENQQ9- +BDgEPAQ1BEIETA- +BDcEPQQwBEcENQQ9BDgENQ- 0..1')+ADs-
      var ptr: +AF4-single :+AD0- pointer(new IntPtr(+AEA-self) +- (x+ACo-2 +- y) +ACo- 4 )+ADs-
      Result :+AD0- ptr+AF4AOw-
    end+ADs-
    private procedure SetValAt(y,x: integer+ADs- val: single)+ADs-
    begin
      if cardinal(x) +AD4- 2 then raise new IndexOutOfRangeException('+BBgEPQQ0BDUEOgRB- +ACI-X+ACI- +BDQEPgQ7BDYENQQ9- +BDgEPAQ1BEIETA- +BDcEPQQwBEcENQQ9BDgENQ- 0..2')+ADs-
      if cardinal(y) +AD4- 1 then raise new IndexOutOfRangeException('+BBgEPQQ0BDUEOgRB- +ACI-Y+ACI- +BDQEPgQ7BDYENQQ9- +BDgEPAQ1BEIETA- +BDcEPQQwBEcENQQ9BDgENQ- 0..1')+ADs-
      var ptr: +AF4-single :+AD0- pointer(new IntPtr(+AEA-self) +- (x+ACo-2 +- y) +ACo- 4 )+ADs-
      ptr+AF4- :+AD0- val+ADs-
    end+ADs-
    public property val+AFs-y,x: integer+AF0-: single read GetValAt write SetValAt+ADs- default+ADs-
    
    public static property Identity: Mtr2x3f read new Mtr2x3f(1.0, 0.0, 0.0, 0.0, 1.0, 0.0)+ADs-
    
    public property Row0: Vec3f read new Vec3f(self.val00, self.val01, self.val02) write begin self.val00 :+AD0- value.val0+ADs- self.val01 :+AD0- value.val1+ADs- self.val02 :+AD0- value.val2+ADs- end+ADs-
    public property Row1: Vec3f read new Vec3f(self.val10, self.val11, self.val12) write begin self.val10 :+AD0- value.val0+ADs- self.val11 :+AD0- value.val1+ADs- self.val12 :+AD0- value.val2+ADs- end+ADs-
    public property Row+AFs-y: integer+AF0-: Vec3f read y+AD0-0?Row0:y+AD0-1?Row1:Arr+ACYAPA-Vec3f+AD4AWw-y+AF0- write
    case y of
      0: Row0 :+AD0- value+ADs-
      1: Row1 :+AD0- value+ADs-
      else raise new IndexOutOfRangeException('+BB0EPgQ8BDUEQA- +BEEEQgRABD4ERwQ6BDg- +BDQEPgQ7BDYENQQ9- +BDgEPAQ1BEIETA- +BDcEPQQwBEcENQQ9BDgENQ- 0..1')+ADs-
    end+ADs-
    
    public property Col0: Vec2f read new Vec2f(self.val00, self.val10) write begin self.val00 :+AD0- value.val0+ADs- self.val10 :+AD0- value.val1+ADs- end+ADs-
    public property Col1: Vec2f read new Vec2f(self.val01, self.val11) write begin self.val01 :+AD0- value.val0+ADs- self.val11 :+AD0- value.val1+ADs- end+ADs-
    public property Col2: Vec2f read new Vec2f(self.val02, self.val12) write begin self.val02 :+AD0- value.val0+ADs- self.val12 :+AD0- value.val1+ADs- end+ADs-
    public property Col+AFs-x: integer+AF0-: Vec2f read x+AD0-0?Col0:x+AD0-1?Col1:x+AD0-2?Col2:Arr+ACYAPA-Vec2f+AD4AWw-x+AF0- write
    case x of
      0: Col0 :+AD0- value+ADs-
      1: Col1 :+AD0- value+ADs-
      2: Col2 :+AD0- value+ADs-
      else raise new IndexOutOfRangeException('+BB0EPgQ8BDUEQA- +BEEEQgQ+BDsEMQRGBDA- +BDQEPgQ7BDYENQQ9- +BDgEPAQ1BEIETA- +BDcEPQQwBEcENQQ9BDgENQ- 0..2')+ADs-
    end+ADs-
    
    public property ColPtr0: +AF4-Vec3f read pointer(IntPtr(pointer(+AEA-self)) +- 0)+ADs-
    public property ColPtr1: +AF4-Vec3f read pointer(IntPtr(pointer(+AEA-self)) +- 8)+ADs-
    public property ColPtr+AFs-x: integer+AF0-: +AF4-Vec3f read pointer(IntPtr(pointer(+AEA-self)) +- x+ACo-8)+ADs-
    
    public static function Scale(k: double): Mtr2x3f :+AD0- new Mtr2x3f(k, 0.0, 0.0, 0.0, k, 0.0)+ADs-
    
    public static function Traslate(X, Y: single): Mtr2x3f :+AD0- new Mtr2x3f(1.0, 0.0, X, 0.0, 1.0, Y)+ADs-
    public static function TraslateTransposed(X: single): Mtr2x3f :+AD0- new Mtr2x3f(1.0, 0.0, 0.0, X, 1.0, 0.0)+ADs-
    
    public static function RotateXYcw(rot: double): Mtr2x3f+ADs-
    begin
      var sr: single :+AD0- Sin(rot)+ADs-
      var cr: single :+AD0- Cos(rot)+ADs-
      Result :+AD0- new Mtr2x3f(
         cr, +-sr, 0.0,
        -sr,  cr, 0.0
      )+ADs-
    end+ADs-
    public static function RotateXYccw(rot: double): Mtr2x3f+ADs-
    begin
      var sr: single :+AD0- Sin(rot)+ADs-
      var cr: single :+AD0- Cos(rot)+ADs-
      Result :+AD0- new Mtr2x3f(
         cr, -sr, 0.0,
        +-sr,  cr, 0.0
      )+ADs-
    end+ADs-
    
    public function ToString: string+ADs- override+ADs-
    begin
      var res :+AD0- new StringBuilder+ADs-
      
      var ElStrs :+AD0- new string+AFs-2,3+AF0AOw-
      for var y :+AD0- 0 to 2-1 do
        for var x :+AD0- 0 to 3-1 do
          ElStrs+AFs-y,x+AF0- :+AD0- (Sign(val+AFs-y,x+AF0-)+AD0--1?'-':'+-') +- Abs(val+AFs-y,x+AF0-).ToString('f2')+ADs-
      var MtrElTextW :+AD0- ElStrs.OfType+ACYAPA-string+AD4-.Max(s-+AD4-s.Length)+ADs-
      var PrintlnMtrW :+AD0- MtrElTextW+ACo-3 +- 6+ADs- // +-2+ACo-(Width-1) +- 2+ADs-
      
      res +-+AD0- '+JQw-'+ADs-
      res.Append(+ACM-32, PrintlnMtrW)+ADs-
      res +-+AD0- '+JRA-'+ACM-10+ADs-
      res +-+AD0- '+JQI- '+ADs-
      res +-+AD0- ElStrs+AFs-0,0+AF0-.PadLeft(MtrElTextW)+ADs-
      res +-+AD0- ', '+ADs-
      res +-+AD0- ElStrs+AFs-0,1+AF0-.PadLeft(MtrElTextW)+ADs-
      res +-+AD0- ', '+ADs-
      res +-+AD0- ElStrs+AFs-0,2+AF0-.PadLeft(MtrElTextW)+ADs-
      res +-+AD0- ' +JQI-'+ACM-10+ADs-
      res +-+AD0- '+JQI- '+ADs-
      res +-+AD0- ElStrs+AFs-1,0+AF0-.PadLeft(MtrElTextW)+ADs-
      res +-+AD0- ', '+ADs-
      res +-+AD0- ElStrs+AFs-1,1+AF0-.PadLeft(MtrElTextW)+ADs-
      res +-+AD0- ', '+ADs-
      res +-+AD0- ElStrs+AFs-1,2+AF0-.PadLeft(MtrElTextW)+ADs-
      res +-+AD0- ' +JQI-'+ACM-10+ADs-
      res +-+AD0- '+JRQ-'+ADs-
      res.Append(+ACM-32, PrintlnMtrW)+ADs-
      res +-+AD0- '+JRg-'+ADs-
      
      Result :+AD0- res.ToString+ADs-
    end+ADs-
    
    public function Println: Mtr2x3f+ADs-
    begin
      Writeln(self.ToString)+ADs-
      Result :+AD0- self+ADs-
    end+ADs-
    
    public static function operator+ACo-(m: Mtr2x3f+ADs- v: Vec3f): Vec2f :+AD0- new Vec2f(m.val00+ACo-v.val0+-m.val01+ACo-v.val1+-m.val02+ACo-v.val2, m.val10+ACo-v.val0+-m.val11+ACo-v.val1+-m.val12+ACo-v.val2)+ADs-
    public static function operator+ACo-(v: Vec2f+ADs- m: Mtr2x3f): Vec3f :+AD0- new Vec3f(m.val00+ACo-v.val0+-m.val10+ACo-v.val1, m.val01+ACo-v.val0+-m.val11+ACo-v.val1, m.val02+ACo-v.val0+-m.val12+ACo-v.val1)+ADs-
    
    public static function operator implicit(m: Mtr2x2f): Mtr2x3f :+AD0- new Mtr2x3f(m.val00, m.val01, 0.0, m.val10, m.val11, 0.0)+ADs-
    public static function operator implicit(m: Mtr2x3f): Mtr2x2f :+AD0- new Mtr2x2f(m.val00, m.val01, m.val10, m.val11)+ADs-
    
    public static function operator implicit(m: Mtr3x3f): Mtr2x3f :+AD0- new Mtr2x3f(m.val00, m.val01, m.val02, m.val10, m.val11, m.val12)+ADs-
    public static function operator implicit(m: Mtr2x3f): Mtr3x3f :+AD0- new Mtr3x3f(m.val00, m.val01, m.val02, m.val10, m.val11, m.val12, 0.0, 0.0, 0.0)+ADs-
    
    public static function operator implicit(m: Mtr4x4f): Mtr2x3f :+AD0- new Mtr2x3f(m.val00, m.val01, m.val02, m.val10, m.val11, m.val12)+ADs-
    public static function operator implicit(m: Mtr2x3f): Mtr4x4f :+AD0- new Mtr4x4f(m.val00, m.val01, m.val02, 0.0, m.val10, m.val11, m.val12, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)+ADs-
    
  end+ADs-
  
  Mtr3x2f +AD0- record
    public val00, val10, val20: single+ADs-
    public val01, val11, val21: single+ADs-
    
    public constructor(val00, val01, val10, val11, val20, val21: single)+ADs-
    begin
      self.val00 :+AD0- val00+ADs-
      self.val01 :+AD0- val01+ADs-
      self.val10 :+AD0- val10+ADs-
      self.val11 :+AD0- val11+ADs-
      self.val20 :+AD0- val20+ADs-
      self.val21 :+AD0- val21+ADs-
    end+ADs-
    
    private function GetValAt(y,x: integer): single+ADs-
    begin
      if cardinal(x) +AD4- 1 then raise new IndexOutOfRangeException('+BBgEPQQ0BDUEOgRB- +ACI-X+ACI- +BDQEPgQ7BDYENQQ9- +BDgEPAQ1BEIETA- +BDcEPQQwBEcENQQ9BDgENQ- 0..1')+ADs-
      if cardinal(y) +AD4- 2 then raise new IndexOutOfRangeException('+BBgEPQQ0BDUEOgRB- +ACI-Y+ACI- +BDQEPgQ7BDYENQQ9- +BDgEPAQ1BEIETA- +BDcEPQQwBEcENQQ9BDgENQ- 0..2')+ADs-
      var ptr: +AF4-single :+AD0- pointer(new IntPtr(+AEA-self) +- (x+ACo-3 +- y) +ACo- 4 )+ADs-
      Result :+AD0- ptr+AF4AOw-
    end+ADs-
    private procedure SetValAt(y,x: integer+ADs- val: single)+ADs-
    begin
      if cardinal(x) +AD4- 1 then raise new IndexOutOfRangeException('+BBgEPQQ0BDUEOgRB- +ACI-X+ACI- +BDQEPgQ7BDYENQQ9- +BDgEPAQ1BEIETA- +BDcEPQQwBEcENQQ9BDgENQ- 0..1')+ADs-
      if cardinal(y) +AD4- 2 then raise new IndexOutOfRangeException('+BBgEPQQ0BDUEOgRB- +ACI-Y+ACI- +BDQEPgQ7BDYENQQ9- +BDgEPAQ1BEIETA- +BDcEPQQwBEcENQQ9BDgENQ- 0..2')+ADs-
      var ptr: +AF4-single :+AD0- pointer(new IntPtr(+AEA-self) +- (x+ACo-3 +- y) +ACo- 4 )+ADs-
      ptr+AF4- :+AD0- val+ADs-
    end+ADs-
    public property val+AFs-y,x: integer+AF0-: single read GetValAt write SetValAt+ADs- default+ADs-
    
    public static property Identity: Mtr3x2f read new Mtr3x2f(1.0, 0.0, 0.0, 1.0, 0.0, 0.0)+ADs-
    
    public property Row0: Vec2f read new Vec2f(self.val00, self.val01) write begin self.val00 :+AD0- value.val0+ADs- self.val01 :+AD0- value.val1+ADs- end+ADs-
    public property Row1: Vec2f read new Vec2f(self.val10, self.val11) write begin self.val10 :+AD0- value.val0+ADs- self.val11 :+AD0- value.val1+ADs- end+ADs-
    public property Row2: Vec2f read new Vec2f(self.val20, self.val21) write begin self.val20 :+AD0- value.val0+ADs- self.val21 :+AD0- value.val1+ADs- end+ADs-
    public property Row+AFs-y: integer+AF0-: Vec2f read y+AD0-0?Row0:y+AD0-1?Row1:y+AD0-2?Row2:Arr+ACYAPA-Vec2f+AD4AWw-y+AF0- write
    case y of
      0: Row0 :+AD0- value+ADs-
      1: Row1 :+AD0- value+ADs-
      2: Row2 :+AD0- value+ADs-
      else raise new IndexOutOfRangeException('+BB0EPgQ8BDUEQA- +BEEEQgRABD4ERwQ6BDg- +BDQEPgQ7BDYENQQ9- +BDgEPAQ1BEIETA- +BDcEPQQwBEcENQQ9BDgENQ- 0..2')+ADs-
    end+ADs-
    
    public property Col0: Vec3f read new Vec3f(self.val00, self.val10, self.val20) write begin self.val00 :+AD0- value.val0+ADs- self.val10 :+AD0- value.val1+ADs- self.val20 :+AD0- value.val2+ADs- end+ADs-
    public property Col1: Vec3f read new Vec3f(self.val01, self.val11, self.val21) write begin self.val01 :+AD0- value.val0+ADs- self.val11 :+AD0- value.val1+ADs- self.val21 :+AD0- value.val2+ADs- end+ADs-
    public property Col+AFs-x: integer+AF0-: Vec3f read x+AD0-0?Col0:x+AD0-1?Col1:Arr+ACYAPA-Vec3f+AD4AWw-x+AF0- write
    case x of
      0: Col0 :+AD0- value+ADs-
      1: Col1 :+AD0- value+ADs-
      else raise new IndexOutOfRangeException('+BB0EPgQ8BDUEQA- +BEEEQgQ+BDsEMQRGBDA- +BDQEPgQ7BDYENQQ9- +BDgEPAQ1BEIETA- +BDcEPQQwBEcENQQ9BDgENQ- 0..1')+ADs-
    end+ADs-
    
    public property ColPtr0: +AF4-Vec2f read pointer(IntPtr(pointer(+AEA-self)) +- 0)+ADs-
    public property ColPtr1: +AF4-Vec2f read pointer(IntPtr(pointer(+AEA-self)) +- 12)+ADs-
    public property ColPtr2: +AF4-Vec2f read pointer(IntPtr(pointer(+AEA-self)) +- 24)+ADs-
    public property ColPtr+AFs-x: integer+AF0-: +AF4-Vec2f read pointer(IntPtr(pointer(+AEA-self)) +- x+ACo-12)+ADs-
    
    public static function Scale(k: double): Mtr3x2f :+AD0- new Mtr3x2f(k, 0.0, 0.0, k, 0.0, 0.0)+ADs-
    
    public static function Traslate(X: single): Mtr3x2f :+AD0- new Mtr3x2f(1.0, X, 0.0, 1.0, 0.0, 0.0)+ADs-
    public static function TraslateTransposed(X, Y: single): Mtr3x2f :+AD0- new Mtr3x2f(1.0, 0.0, 0.0, 1.0, X, Y)+ADs-
    
    public static function RotateXYcw(rot: double): Mtr3x2f+ADs-
    begin
      var sr: single :+AD0- Sin(rot)+ADs-
      var cr: single :+AD0- Cos(rot)+ADs-
      Result :+AD0- new Mtr3x2f(
         cr, +-sr,
        -sr,  cr,
        0.0, 0.0
      )+ADs-
    end+ADs-
    public static function RotateXYccw(rot: double): Mtr3x2f+ADs-
    begin
      var sr: single :+AD0- Sin(rot)+ADs-
      var cr: single :+AD0- Cos(rot)+ADs-
      Result :+AD0- new Mtr3x2f(
         cr, -sr,
        +-sr,  cr,
        0.0, 0.0
      )+ADs-
    end+ADs-
    
    public function ToString: string+ADs- override+ADs-
    begin
      var res :+AD0- new StringBuilder+ADs-
      
      var ElStrs :+AD0- new string+AFs-3,2+AF0AOw-
      for var y :+AD0- 0 to 3-1 do
        for var x :+AD0- 0 to 2-1 do
          ElStrs+AFs-y,x+AF0- :+AD0- (Sign(val+AFs-y,x+AF0-)+AD0--1?'-':'+-') +- Abs(val+AFs-y,x+AF0-).ToString('f2')+ADs-
      var MtrElTextW :+AD0- ElStrs.OfType+ACYAPA-string+AD4-.Max(s-+AD4-s.Length)+ADs-
      var PrintlnMtrW :+AD0- MtrElTextW+ACo-2 +- 4+ADs- // +-2+ACo-(Width-1) +- 2+ADs-
      
      res +-+AD0- '+JQw-'+ADs-
      res.Append(+ACM-32, PrintlnMtrW)+ADs-
      res +-+AD0- '+JRA-'+ACM-10+ADs-
      res +-+AD0- '+JQI- '+ADs-
      res +-+AD0- ElStrs+AFs-0,0+AF0-.PadLeft(MtrElTextW)+ADs-
      res +-+AD0- ', '+ADs-
      res +-+AD0- ElStrs+AFs-0,1+AF0-.PadLeft(MtrElTextW)+ADs-
      res +-+AD0- ' +JQI-'+ACM-10+ADs-
      res +-+AD0- '+JQI- '+ADs-
      res +-+AD0- ElStrs+AFs-1,0+AF0-.PadLeft(MtrElTextW)+ADs-
      res +-+AD0- ', '+ADs-
      res +-+AD0- ElStrs+AFs-1,1+AF0-.PadLeft(MtrElTextW)+ADs-
      res +-+AD0- ' +JQI-'+ACM-10+ADs-
      res +-+AD0- '+JQI- '+ADs-
      res +-+AD0- ElStrs+AFs-2,0+AF0-.PadLeft(MtrElTextW)+ADs-
      res +-+AD0- ', '+ADs-
      res +-+AD0- ElStrs+AFs-2,1+AF0-.PadLeft(MtrElTextW)+ADs-
      res +-+AD0- ' +JQI-'+ACM-10+ADs-
      res +-+AD0- '+JRQ-'+ADs-
      res.Append(+ACM-32, PrintlnMtrW)+ADs-
      res +-+AD0- '+JRg-'+ADs-
      
      Result :+AD0- res.ToString+ADs-
    end+ADs-
    
    public function Println: Mtr3x2f+ADs-
    begin
      Writeln(self.ToString)+ADs-
      Result :+AD0- self+ADs-
    end+ADs-
    
    public static function operator+ACo-(m: Mtr3x2f+ADs- v: Vec2f): Vec3f :+AD0- new Vec3f(m.val00+ACo-v.val0+-m.val01+ACo-v.val1, m.val10+ACo-v.val0+-m.val11+ACo-v.val1, m.val20+ACo-v.val0+-m.val21+ACo-v.val1)+ADs-
    public static function operator+ACo-(v: Vec3f+ADs- m: Mtr3x2f): Vec2f :+AD0- new Vec2f(m.val00+ACo-v.val0+-m.val10+ACo-v.val1+-m.val20+ACo-v.val2, m.val01+ACo-v.val0+-m.val11+ACo-v.val1+-m.val21+ACo-v.val2)+ADs-
    
    public static function operator implicit(m: Mtr2x2f): Mtr3x2f :+AD0- new Mtr3x2f(m.val00, m.val01, m.val10, m.val11, 0.0, 0.0)+ADs-
    public static function operator implicit(m: Mtr3x2f): Mtr2x2f :+AD0- new Mtr2x2f(m.val00, m.val01, m.val10, m.val11)+ADs-
    
    public static function operator implicit(m: Mtr3x3f): Mtr3x2f :+AD0- new Mtr3x2f(m.val00, m.val01, m.val10, m.val11, m.val20, m.val21)+ADs-
    public static function operator implicit(m: Mtr3x2f): Mtr3x3f :+AD0- new Mtr3x3f(m.val00, m.val01, 0.0, m.val10, m.val11, 0.0, m.val20, m.val21, 0.0)+ADs-
    
    public static function operator implicit(m: Mtr4x4f): Mtr3x2f :+AD0- new Mtr3x2f(m.val00, m.val01, m.val10, m.val11, m.val20, m.val21)+ADs-
    public static function operator implicit(m: Mtr3x2f): Mtr4x4f :+AD0- new Mtr4x4f(m.val00, m.val01, 0.0, 0.0, m.val10, m.val11, 0.0, 0.0, m.val20, m.val21, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)+ADs-
    
    public static function operator implicit(m: Mtr2x3f): Mtr3x2f :+AD0- new Mtr3x2f(m.val00, m.val01, m.val10, m.val11, 0.0, 0.0)+ADs-
    public static function operator implicit(m: Mtr3x2f): Mtr2x3f :+AD0- new Mtr2x3f(m.val00, m.val01, 0.0, m.val10, m.val11, 0.0)+ADs-
    
  end+ADs-
  
  Mtr2x4f +AD0- record
    public val00, val10: single+ADs-
    public val01, val11: single+ADs-
    public val02, val12: single+ADs-
    public val03, val13: single+ADs-
    
    public constructor(val00, val01, val02, val03, val10, val11, val12, val13: single)+ADs-
    begin
      self.val00 :+AD0- val00+ADs-
      self.val01 :+AD0- val01+ADs-
      self.val02 :+AD0- val02+ADs-
      self.val03 :+AD0- val03+ADs-
      self.val10 :+AD0- val10+ADs-
      self.val11 :+AD0- val11+ADs-
      self.val12 :+AD0- val12+ADs-
      self.val13 :+AD0- val13+ADs-
    end+ADs-
    
    private function GetValAt(y,x: integer): single+ADs-
    begin
      if cardinal(x) +AD4- 3 then raise new IndexOutOfRangeException('+BBgEPQQ0BDUEOgRB- +ACI-X+ACI- +BDQEPgQ7BDYENQQ9- +BDgEPAQ1BEIETA- +BDcEPQQwBEcENQQ9BDgENQ- 0..3')+ADs-
      if cardinal(y) +AD4- 1 then raise new IndexOutOfRangeException('+BBgEPQQ0BDUEOgRB- +ACI-Y+ACI- +BDQEPgQ7BDYENQQ9- +BDgEPAQ1BEIETA- +BDcEPQQwBEcENQQ9BDgENQ- 0..1')+ADs-
      var ptr: +AF4-single :+AD0- pointer(new IntPtr(+AEA-self) +- (x+ACo-2 +- y) +ACo- 4 )+ADs-
      Result :+AD0- ptr+AF4AOw-
    end+ADs-
    private procedure SetValAt(y,x: integer+ADs- val: single)+ADs-
    begin
      if cardinal(x) +AD4- 3 then raise new IndexOutOfRangeException('+BBgEPQQ0BDUEOgRB- +ACI-X+ACI- +BDQEPgQ7BDYENQQ9- +BDgEPAQ1BEIETA- +BDcEPQQwBEcENQQ9BDgENQ- 0..3')+ADs-
      if cardinal(y) +AD4- 1 then raise new IndexOutOfRangeException('+BBgEPQQ0BDUEOgRB- +ACI-Y+ACI- +BDQEPgQ7BDYENQQ9- +BDgEPAQ1BEIETA- +BDcEPQQwBEcENQQ9BDgENQ- 0..1')+ADs-
      var ptr: +AF4-single :+AD0- pointer(new IntPtr(+AEA-self) +- (x+ACo-2 +- y) +ACo- 4 )+ADs-
      ptr+AF4- :+AD0- val+ADs-
    end+ADs-
    public property val+AFs-y,x: integer+AF0-: single read GetValAt write SetValAt+ADs- default+ADs-
    
    public static property Identity: Mtr2x4f read new Mtr2x4f(1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0)+ADs-
    
    public property Row0: Vec4f read new Vec4f(self.val00, self.val01, self.val02, self.val03) write begin self.val00 :+AD0- value.val0+ADs- self.val01 :+AD0- value.val1+ADs- self.val02 :+AD0- value.val2+ADs- self.val03 :+AD0- value.val3+ADs- end+ADs-
    public property Row1: Vec4f read new Vec4f(self.val10, self.val11, self.val12, self.val13) write begin self.val10 :+AD0- value.val0+ADs- self.val11 :+AD0- value.val1+ADs- self.val12 :+AD0- value.val2+ADs- self.val13 :+AD0- value.val3+ADs- end+ADs-
    public property Row+AFs-y: integer+AF0-: Vec4f read y+AD0-0?Row0:y+AD0-1?Row1:Arr+ACYAPA-Vec4f+AD4AWw-y+AF0- write
    case y of
      0: Row0 :+AD0- value+ADs-
      1: Row1 :+AD0- value+ADs-
      else raise new IndexOutOfRangeException('+BB0EPgQ8BDUEQA- +BEEEQgRABD4ERwQ6BDg- +BDQEPgQ7BDYENQQ9- +BDgEPAQ1BEIETA- +BDcEPQQwBEcENQQ9BDgENQ- 0..1')+ADs-
    end+ADs-
    
    public property Col0: Vec2f read new Vec2f(self.val00, self.val10) write begin self.val00 :+AD0- value.val0+ADs- self.val10 :+AD0- value.val1+ADs- end+ADs-
    public property Col1: Vec2f read new Vec2f(self.val01, self.val11) write begin self.val01 :+AD0- value.val0+ADs- self.val11 :+AD0- value.val1+ADs- end+ADs-
    public property Col2: Vec2f read new Vec2f(self.val02, self.val12) write begin self.val02 :+AD0- value.val0+ADs- self.val12 :+AD0- value.val1+ADs- end+ADs-
    public property Col3: Vec2f read new Vec2f(self.val03, self.val13) write begin self.val03 :+AD0- value.val0+ADs- self.val13 :+AD0- value.val1+ADs- end+ADs-
    public property Col+AFs-x: integer+AF0-: Vec2f read x+AD0-0?Col0:x+AD0-1?Col1:x+AD0-2?Col2:x+AD0-3?Col3:Arr+ACYAPA-Vec2f+AD4AWw-x+AF0- write
    case x of
      0: Col0 :+AD0- value+ADs-
      1: Col1 :+AD0- value+ADs-
      2: Col2 :+AD0- value+ADs-
      3: Col3 :+AD0- value+ADs-
      else raise new IndexOutOfRangeException('+BB0EPgQ8BDUEQA- +BEEEQgQ+BDsEMQRGBDA- +BDQEPgQ7BDYENQQ9- +BDgEPAQ1BEIETA- +BDcEPQQwBEcENQQ9BDgENQ- 0..3')+ADs-
    end+ADs-
    
    public property ColPtr0: +AF4-Vec4f read pointer(IntPtr(pointer(+AEA-self)) +- 0)+ADs-
    public property ColPtr1: +AF4-Vec4f read pointer(IntPtr(pointer(+AEA-self)) +- 8)+ADs-
    public property ColPtr+AFs-x: integer+AF0-: +AF4-Vec4f read pointer(IntPtr(pointer(+AEA-self)) +- x+ACo-8)+ADs-
    
    public static function Scale(k: double): Mtr2x4f :+AD0- new Mtr2x4f(k, 0.0, 0.0, 0.0, 0.0, k, 0.0, 0.0)+ADs-
    
    public static function Traslate(X, Y: single): Mtr2x4f :+AD0- new Mtr2x4f(1.0, 0.0, 0.0, X, 0.0, 1.0, 0.0, Y)+ADs-
    public static function TraslateTransposed(X: single): Mtr2x4f :+AD0- new Mtr2x4f(1.0, 0.0, 0.0, 0.0, X, 1.0, 0.0, 0.0)+ADs-
    
    public static function RotateXYcw(rot: double): Mtr2x4f+ADs-
    begin
      var sr: single :+AD0- Sin(rot)+ADs-
      var cr: single :+AD0- Cos(rot)+ADs-
      Result :+AD0- new Mtr2x4f(
         cr, +-sr, 0.0, 0.0,
        -sr,  cr, 0.0, 0.0
      )+ADs-
    end+ADs-
    public static function RotateXYccw(rot: double): Mtr2x4f+ADs-
    begin
      var sr: single :+AD0- Sin(rot)+ADs-
      var cr: single :+AD0- Cos(rot)+ADs-
      Result :+AD0- new Mtr2x4f(
         cr, -sr, 0.0, 0.0,
        +-sr,  cr, 0.0, 0.0
      )+ADs-
    end+ADs-
    
    public function ToString: string+ADs- override+ADs-
    begin
      var res :+AD0- new StringBuilder+ADs-
      
      var ElStrs :+AD0- new string+AFs-2,4+AF0AOw-
      for var y :+AD0- 0 to 2-1 do
        for var x :+AD0- 0 to 4-1 do
          ElStrs+AFs-y,x+AF0- :+AD0- (Sign(val+AFs-y,x+AF0-)+AD0--1?'-':'+-') +- Abs(val+AFs-y,x+AF0-).ToString('f2')+ADs-
      var MtrElTextW :+AD0- ElStrs.OfType+ACYAPA-string+AD4-.Max(s-+AD4-s.Length)+ADs-
      var PrintlnMtrW :+AD0- MtrElTextW+ACo-4 +- 8+ADs- // +-2+ACo-(Width-1) +- 2+ADs-
      
      res +-+AD0- '+JQw-'+ADs-
      res.Append(+ACM-32, PrintlnMtrW)+ADs-
      res +-+AD0- '+JRA-'+ACM-10+ADs-
      res +-+AD0- '+JQI- '+ADs-
      res +-+AD0- ElStrs+AFs-0,0+AF0-.PadLeft(MtrElTextW)+ADs-
      res +-+AD0- ', '+ADs-
      res +-+AD0- ElStrs+AFs-0,1+AF0-.PadLeft(MtrElTextW)+ADs-
      res +-+AD0- ', '+ADs-
      res +-+AD0- ElStrs+AFs-0,2+AF0-.PadLeft(MtrElTextW)+ADs-
      res +-+AD0- ', '+ADs-
      res +-+AD0- ElStrs+AFs-0,3+AF0-.PadLeft(MtrElTextW)+ADs-
      res +-+AD0- ' +JQI-'+ACM-10+ADs-
      res +-+AD0- '+JQI- '+ADs-
      res +-+AD0- ElStrs+AFs-1,0+AF0-.PadLeft(MtrElTextW)+ADs-
      res +-+AD0- ', '+ADs-
      res +-+AD0- ElStrs+AFs-1,1+AF0-.PadLeft(MtrElTextW)+ADs-
      res +-+AD0- ', '+ADs-
      res +-+AD0- ElStrs+AFs-1,2+AF0-.PadLeft(MtrElTextW)+ADs-
      res +-+AD0- ', '+ADs-
      res +-+AD0- ElStrs+AFs-1,3+AF0-.PadLeft(MtrElTextW)+ADs-
      res +-+AD0- ' +JQI-'+ACM-10+ADs-
      res +-+AD0- '+JRQ-'+ADs-
      res.Append(+ACM-32, PrintlnMtrW)+ADs-
      res +-+AD0- '+JRg-'+ADs-
      
      Result :+AD0- res.ToString+ADs-
    end+ADs-
    
    public function Println: Mtr2x4f+ADs-
    begin
      Writeln(self.ToString)+ADs-
      Result :+AD0- self+ADs-
    end+ADs-
    
    public static function operator+ACo-(m: Mtr2x4f+ADs- v: Vec4f): Vec2f :+AD0- new Vec2f(m.val00+ACo-v.val0+-m.val01+ACo-v.val1+-m.val02+ACo-v.val2+-m.val03+ACo-v.val3, m.val10+ACo-v.val0+-m.val11+ACo-v.val1+-m.val12+ACo-v.val2+-m.val13+ACo-v.val3)+ADs-
    public static function operator+ACo-(v: Vec2f+ADs- m: Mtr2x4f): Vec4f :+AD0- new Vec4f(m.val00+ACo-v.val0+-m.val10+ACo-v.val1, m.val01+ACo-v.val0+-m.val11+ACo-v.val1, m.val02+ACo-v.val0+-m.val12+ACo-v.val1, m.val03+ACo-v.val0+-m.val13+ACo-v.val1)+ADs-
    
    public static function operator implicit(m: Mtr2x2f): Mtr2x4f :+AD0- new Mtr2x4f(m.val00, m.val01, 0.0, 0.0, m.val10, m.val11, 0.0, 0.0)+ADs-
    public static function operator implicit(m: Mtr2x4f): Mtr2x2f :+AD0- new Mtr2x2f(m.val00, m.val01, m.val10, m.val11)+ADs-
    
    public static function operator implicit(m: Mtr3x3f): Mtr2x4f :+AD0- new Mtr2x4f(m.val00, m.val01, m.val02, 0.0, m.val10, m.val11, m.val12, 0.0)+ADs-
    public static function operator implicit(m: Mtr2x4f): Mtr3x3f :+AD0- new Mtr3x3f(m.val00, m.val01, m.val02, m.val10, m.val11, m.val12, 0.0, 0.0, 0.0)+ADs-
    
    public static function operator implicit(m: Mtr4x4f): Mtr2x4f :+AD0- new Mtr2x4f(m.val00, m.val01, m.val02, m.val03, m.val10, m.val11, m.val12, m.val13)+ADs-
    public static function operator implicit(m: Mtr2x4f): Mtr4x4f :+AD0- new Mtr4x4f(m.val00, m.val01, m.val02, m.val03, m.val10, m.val11, m.val12, m.val13, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)+ADs-
    
    public static function operator implicit(m: Mtr2x3f): Mtr2x4f :+AD0- new Mtr2x4f(m.val00, m.val01, m.val02, 0.0, m.val10, m.val11, m.val12, 0.0)+ADs-
    public static function operator implicit(m: Mtr2x4f): Mtr2x3f :+AD0- new Mtr2x3f(m.val00, m.val01, m.val02, m.val10, m.val11, m.val12)+ADs-
    
    public static function operator implicit(m: Mtr3x2f): Mtr2x4f :+AD0- new Mtr2x4f(m.val00, m.val01, 0.0, 0.0, m.val10, m.val11, 0.0, 0.0)+ADs-
    public static function operator implicit(m: Mtr2x4f): Mtr3x2f :+AD0- new Mtr3x2f(m.val00, m.val01, m.val10, m.val11, 0.0, 0.0)+ADs-
    
  end+ADs-
  
  Mtr4x2f +AD0- record
    public val00, val10, val20, val30: single+ADs-
    public val01, val11, val21, val31: single+ADs-
    
    public constructor(val00, val01, val10, val11, val20, val21, val30, val31: single)+ADs-
    begin
      self.val00 :+AD0- val00+ADs-
      self.val01 :+AD0- val01+ADs-
      self.val10 :+AD0- val10+ADs-
      self.val11 :+AD0- val11+ADs-
      self.val20 :+AD0- val20+ADs-
      self.val21 :+AD0- val21+ADs-
      self.val30 :+AD0- val30+ADs-
      self.val31 :+AD0- val31+ADs-
    end+ADs-
    
    private function GetValAt(y,x: integer): single+ADs-
    begin
      if cardinal(x) +AD4- 1 then raise new IndexOutOfRangeException('+BBgEPQQ0BDUEOgRB- +ACI-X+ACI- +BDQEPgQ7BDYENQQ9- +BDgEPAQ1BEIETA- +BDcEPQQwBEcENQQ9BDgENQ- 0..1')+ADs-
      if cardinal(y) +AD4- 3 then raise new IndexOutOfRangeException('+BBgEPQQ0BDUEOgRB- +ACI-Y+ACI- +BDQEPgQ7BDYENQQ9- +BDgEPAQ1BEIETA- +BDcEPQQwBEcENQQ9BDgENQ- 0..3')+ADs-
      var ptr: +AF4-single :+AD0- pointer(new IntPtr(+AEA-self) +- (x+ACo-4 +- y) +ACo- 4 )+ADs-
      Result :+AD0- ptr+AF4AOw-
    end+ADs-
    private procedure SetValAt(y,x: integer+ADs- val: single)+ADs-
    begin
      if cardinal(x) +AD4- 1 then raise new IndexOutOfRangeException('+BBgEPQQ0BDUEOgRB- +ACI-X+ACI- +BDQEPgQ7BDYENQQ9- +BDgEPAQ1BEIETA- +BDcEPQQwBEcENQQ9BDgENQ- 0..1')+ADs-
      if cardinal(y) +AD4- 3 then raise new IndexOutOfRangeException('+BBgEPQQ0BDUEOgRB- +ACI-Y+ACI- +BDQEPgQ7BDYENQQ9- +BDgEPAQ1BEIETA- +BDcEPQQwBEcENQQ9BDgENQ- 0..3')+ADs-
      var ptr: +AF4-single :+AD0- pointer(new IntPtr(+AEA-self) +- (x+ACo-4 +- y) +ACo- 4 )+ADs-
      ptr+AF4- :+AD0- val+ADs-
    end+ADs-
    public property val+AFs-y,x: integer+AF0-: single read GetValAt write SetValAt+ADs- default+ADs-
    
    public static property Identity: Mtr4x2f read new Mtr4x2f(1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0)+ADs-
    
    public property Row0: Vec2f read new Vec2f(self.val00, self.val01) write begin self.val00 :+AD0- value.val0+ADs- self.val01 :+AD0- value.val1+ADs- end+ADs-
    public property Row1: Vec2f read new Vec2f(self.val10, self.val11) write begin self.val10 :+AD0- value.val0+ADs- self.val11 :+AD0- value.val1+ADs- end+ADs-
    public property Row2: Vec2f read new Vec2f(self.val20, self.val21) write begin self.val20 :+AD0- value.val0+ADs- self.val21 :+AD0- value.val1+ADs- end+ADs-
    public property Row3: Vec2f read new Vec2f(self.val30, self.val31) write begin self.val30 :+AD0- value.val0+ADs- self.val31 :+AD0- value.val1+ADs- end+ADs-
    public property Row+AFs-y: integer+AF0-: Vec2f read y+AD0-0?Row0:y+AD0-1?Row1:y+AD0-2?Row2:y+AD0-3?Row3:Arr+ACYAPA-Vec2f+AD4AWw-y+AF0- write
    case y of
      0: Row0 :+AD0- value+ADs-
      1: Row1 :+AD0- value+ADs-
      2: Row2 :+AD0- value+ADs-
      3: Row3 :+AD0- value+ADs-
      else raise new IndexOutOfRangeException('+BB0EPgQ8BDUEQA- +BEEEQgRABD4ERwQ6BDg- +BDQEPgQ7BDYENQQ9- +BDgEPAQ1BEIETA- +BDcEPQQwBEcENQQ9BDgENQ- 0..3')+ADs-
    end+ADs-
    
    public property Col0: Vec4f read new Vec4f(self.val00, self.val10, self.val20, self.val30) write begin self.val00 :+AD0- value.val0+ADs- self.val10 :+AD0- value.val1+ADs- self.val20 :+AD0- value.val2+ADs- self.val30 :+AD0- value.val3+ADs- end+ADs-
    public property Col1: Vec4f read new Vec4f(self.val01, self.val11, self.val21, self.val31) write begin self.val01 :+AD0- value.val0+ADs- self.val11 :+AD0- value.val1+ADs- self.val21 :+AD0- value.val2+ADs- self.val31 :+AD0- value.val3+ADs- end+ADs-
    public property Col+AFs-x: integer+AF0-: Vec4f read x+AD0-0?Col0:x+AD0-1?Col1:Arr+ACYAPA-Vec4f+AD4AWw-x+AF0- write
    case x of
      0: Col0 :+AD0- value+ADs-
      1: Col1 :+AD0- value+ADs-
      else raise new IndexOutOfRangeException('+BB0EPgQ8BDUEQA- +BEEEQgQ+BDsEMQRGBDA- +BDQEPgQ7BDYENQQ9- +BDgEPAQ1BEIETA- +BDcEPQQwBEcENQQ9BDgENQ- 0..1')+ADs-
    end+ADs-
    
    public property ColPtr0: +AF4-Vec2f read pointer(IntPtr(pointer(+AEA-self)) +- 0)+ADs-
    public property ColPtr1: +AF4-Vec2f read pointer(IntPtr(pointer(+AEA-self)) +- 16)+ADs-
    public property ColPtr2: +AF4-Vec2f read pointer(IntPtr(pointer(+AEA-self)) +- 32)+ADs-
    public property ColPtr3: +AF4-Vec2f read pointer(IntPtr(pointer(+AEA-self)) +- 48)+ADs-
    public property ColPtr+AFs-x: integer+AF0-: +AF4-Vec2f read pointer(IntPtr(pointer(+AEA-self)) +- x+ACo-16)+ADs-
    
    public static function Scale(k: double): Mtr4x2f :+AD0- new Mtr4x2f(k, 0.0, 0.0, k, 0.0, 0.0, 0.0, 0.0)+ADs-
    
    public static function Traslate(X: single): Mtr4x2f :+AD0- new Mtr4x2f(1.0, X, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0)+ADs-
    public static function TraslateTransposed(X, Y: single): Mtr4x2f :+AD0- new Mtr4x2f(1.0, 0.0, 0.0, 1.0, 0.0, 0.0, X, Y)+ADs-
    
    public static function RotateXYcw(rot: double): Mtr4x2f+ADs-
    begin
      var sr: single :+AD0- Sin(rot)+ADs-
      var cr: single :+AD0- Cos(rot)+ADs-
      Result :+AD0- new Mtr4x2f(
         cr, +-sr,
        -sr,  cr,
        0.0, 0.0,
        0.0, 0.0
      )+ADs-
    end+ADs-
    public static function RotateXYccw(rot: double): Mtr4x2f+ADs-
    begin
      var sr: single :+AD0- Sin(rot)+ADs-
      var cr: single :+AD0- Cos(rot)+ADs-
      Result :+AD0- new Mtr4x2f(
         cr, -sr,
        +-sr,  cr,
        0.0, 0.0,
        0.0, 0.0
      )+ADs-
    end+ADs-
    
    public function ToString: string+ADs- override+ADs-
    begin
      var res :+AD0- new StringBuilder+ADs-
      
      var ElStrs :+AD0- new string+AFs-4,2+AF0AOw-
      for var y :+AD0- 0 to 4-1 do
        for var x :+AD0- 0 to 2-1 do
          ElStrs+AFs-y,x+AF0- :+AD0- (Sign(val+AFs-y,x+AF0-)+AD0--1?'-':'+-') +- Abs(val+AFs-y,x+AF0-).ToString('f2')+ADs-
      var MtrElTextW :+AD0- ElStrs.OfType+ACYAPA-string+AD4-.Max(s-+AD4-s.Length)+ADs-
      var PrintlnMtrW :+AD0- MtrElTextW+ACo-2 +- 4+ADs- // +-2+ACo-(Width-1) +- 2+ADs-
      
      res +-+AD0- '+JQw-'+ADs-
      res.Append(+ACM-32, PrintlnMtrW)+ADs-
      res +-+AD0- '+JRA-'+ACM-10+ADs-
      res +-+AD0- '+JQI- '+ADs-
      res +-+AD0- ElStrs+AFs-0,0+AF0-.PadLeft(MtrElTextW)+ADs-
      res +-+AD0- ', '+ADs-
      res +-+AD0- ElStrs+AFs-0,1+AF0-.PadLeft(MtrElTextW)+ADs-
      res +-+AD0- ' +JQI-'+ACM-10+ADs-
      res +-+AD0- '+JQI- '+ADs-
      res +-+AD0- ElStrs+AFs-1,0+AF0-.PadLeft(MtrElTextW)+ADs-
      res +-+AD0- ', '+ADs-
      res +-+AD0- ElStrs+AFs-1,1+AF0-.PadLeft(MtrElTextW)+ADs-
      res +-+AD0- ' +JQI-'+ACM-10+ADs-
      res +-+AD0- '+JQI- '+ADs-
      res +-+AD0- ElStrs+AFs-2,0+AF0-.PadLeft(MtrElTextW)+ADs-
      res +-+AD0- ', '+ADs-
      res +-+AD0- ElStrs+AFs-2,1+AF0-.PadLeft(MtrElTextW)+ADs-
      res +-+AD0- ' +JQI-'+ACM-10+ADs-
      res +-+AD0- '+JQI- '+ADs-
      res +-+AD0- ElStrs+AFs-3,0+AF0-.PadLeft(MtrElTextW)+ADs-
      res +-+AD0- ', '+ADs-
      res +-+AD0- ElStrs+AFs-3,1+AF0-.PadLeft(MtrElTextW)+ADs-
      res +-+AD0- ' +JQI-'+ACM-10+ADs-
      res +-+AD0- '+JRQ-'+ADs-
      res.Append(+ACM-32, PrintlnMtrW)+ADs-
      res +-+AD0- '+JRg-'+ADs-
      
      Result :+AD0- res.ToString+ADs-
    end+ADs-
    
    public function Println: Mtr4x2f+ADs-
    begin
      Writeln(self.ToString)+ADs-
      Result :+AD0- self+ADs-
    end+ADs-
    
    public static function operator+ACo-(m: Mtr4x2f+ADs- v: Vec2f): Vec4f :+AD0- new Vec4f(m.val00+ACo-v.val0+-m.val01+ACo-v.val1, m.val10+ACo-v.val0+-m.val11+ACo-v.val1, m.val20+ACo-v.val0+-m.val21+ACo-v.val1, m.val30+ACo-v.val0+-m.val31+ACo-v.val1)+ADs-
    public static function operator+ACo-(v: Vec4f+ADs- m: Mtr4x2f): Vec2f :+AD0- new Vec2f(m.val00+ACo-v.val0+-m.val10+ACo-v.val1+-m.val20+ACo-v.val2+-m.val30+ACo-v.val3, m.val01+ACo-v.val0+-m.val11+ACo-v.val1+-m.val21+ACo-v.val2+-m.val31+ACo-v.val3)+ADs-
    
    public static function operator implicit(m: Mtr2x2f): Mtr4x2f :+AD0- new Mtr4x2f(m.val00, m.val01, m.val10, m.val11, 0.0, 0.0, 0.0, 0.0)+ADs-
    public static function operator implicit(m: Mtr4x2f): Mtr2x2f :+AD0- new Mtr2x2f(m.val00, m.val01, m.val10, m.val11)+ADs-
    
    public static function operator implicit(m: Mtr3x3f): Mtr4x2f :+AD0- new Mtr4x2f(m.val00, m.val01, m.val10, m.val11, m.val20, m.val21, 0.0, 0.0)+ADs-
    public static function operator implicit(m: Mtr4x2f): Mtr3x3f :+AD0- new Mtr3x3f(m.val00, m.val01, 0.0, m.val10, m.val11, 0.0, m.val20, m.val21, 0.0)+ADs-
    
    public static function operator implicit(m: Mtr4x4f): Mtr4x2f :+AD0- new Mtr4x2f(m.val00, m.val01, m.val10, m.val11, m.val20, m.val21, m.val30, m.val31)+ADs-
    public static function operator implicit(m: Mtr4x2f): Mtr4x4f :+AD0- new Mtr4x4f(m.val00, m.val01, 0.0, 0.0, m.val10, m.val11, 0.0, 0.0, m.val20, m.val21, 0.0, 0.0, m.val30, m.val31, 0.0, 0.0)+ADs-
    
    public static function operator implicit(m: Mtr2x3f): Mtr4x2f :+AD0- new Mtr4x2f(m.val00, m.val01, m.val10, m.val11, 0.0, 0.0, 0.0, 0.0)+ADs-
    public static function operator implicit(m: Mtr4x2f): Mtr2x3f :+AD0- new Mtr2x3f(m.val00, m.val01, 0.0, m.val10, m.val11, 0.0)+ADs-
    
    public static function operator implicit(m: Mtr3x2f): Mtr4x2f :+AD0- new Mtr4x2f(m.val00, m.val01, m.val10, m.val11, m.val20, m.val21, 0.0, 0.0)+ADs-
    public static function operator implicit(m: Mtr4x2f): Mtr3x2f :+AD0- new Mtr3x2f(m.val00, m.val01, m.val10, m.val11, m.val20, m.val21)+ADs-
    
    public static function operator implicit(m: Mtr2x4f): Mtr4x2f :+AD0- new Mtr4x2f(m.val00, m.val01, m.val10, m.val11, 0.0, 0.0, 0.0, 0.0)+ADs-
    public static function operator implicit(m: Mtr4x2f): Mtr2x4f :+AD0- new Mtr2x4f(m.val00, m.val01, 0.0, 0.0, m.val10, m.val11, 0.0, 0.0)+ADs-
    
  end+ADs-
  
  Mtr3x4f +AD0- record
    public val00, val10, val20: single+ADs-
    public val01, val11, val21: single+ADs-
    public val02, val12, val22: single+ADs-
    public val03, val13, val23: single+ADs-
    
    public constructor(val00, val01, val02, val03, val10, val11, val12, val13, val20, val21, val22, val23: single)+ADs-
    begin
      self.val00 :+AD0- val00+ADs-
      self.val01 :+AD0- val01+ADs-
      self.val02 :+AD0- val02+ADs-
      self.val03 :+AD0- val03+ADs-
      self.val10 :+AD0- val10+ADs-
      self.val11 :+AD0- val11+ADs-
      self.val12 :+AD0- val12+ADs-
      self.val13 :+AD0- val13+ADs-
      self.val20 :+AD0- val20+ADs-
      self.val21 :+AD0- val21+ADs-
      self.val22 :+AD0- val22+ADs-
      self.val23 :+AD0- val23+ADs-
    end+ADs-
    
    private function GetValAt(y,x: integer): single+ADs-
    begin
      if cardinal(x) +AD4- 3 then raise new IndexOutOfRangeException('+BBgEPQQ0BDUEOgRB- +ACI-X+ACI- +BDQEPgQ7BDYENQQ9- +BDgEPAQ1BEIETA- +BDcEPQQwBEcENQQ9BDgENQ- 0..3')+ADs-
      if cardinal(y) +AD4- 2 then raise new IndexOutOfRangeException('+BBgEPQQ0BDUEOgRB- +ACI-Y+ACI- +BDQEPgQ7BDYENQQ9- +BDgEPAQ1BEIETA- +BDcEPQQwBEcENQQ9BDgENQ- 0..2')+ADs-
      var ptr: +AF4-single :+AD0- pointer(new IntPtr(+AEA-self) +- (x+ACo-3 +- y) +ACo- 4 )+ADs-
      Result :+AD0- ptr+AF4AOw-
    end+ADs-
    private procedure SetValAt(y,x: integer+ADs- val: single)+ADs-
    begin
      if cardinal(x) +AD4- 3 then raise new IndexOutOfRangeException('+BBgEPQQ0BDUEOgRB- +ACI-X+ACI- +BDQEPgQ7BDYENQQ9- +BDgEPAQ1BEIETA- +BDcEPQQwBEcENQQ9BDgENQ- 0..3')+ADs-
      if cardinal(y) +AD4- 2 then raise new IndexOutOfRangeException('+BBgEPQQ0BDUEOgRB- +ACI-Y+ACI- +BDQEPgQ7BDYENQQ9- +BDgEPAQ1BEIETA- +BDcEPQQwBEcENQQ9BDgENQ- 0..2')+ADs-
      var ptr: +AF4-single :+AD0- pointer(new IntPtr(+AEA-self) +- (x+ACo-3 +- y) +ACo- 4 )+ADs-
      ptr+AF4- :+AD0- val+ADs-
    end+ADs-
    public property val+AFs-y,x: integer+AF0-: single read GetValAt write SetValAt+ADs- default+ADs-
    
    public static property Identity: Mtr3x4f read new Mtr3x4f(1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0)+ADs-
    
    public property Row0: Vec4f read new Vec4f(self.val00, self.val01, self.val02, self.val03) write begin self.val00 :+AD0- value.val0+ADs- self.val01 :+AD0- value.val1+ADs- self.val02 :+AD0- value.val2+ADs- self.val03 :+AD0- value.val3+ADs- end+ADs-
    public property Row1: Vec4f read new Vec4f(self.val10, self.val11, self.val12, self.val13) write begin self.val10 :+AD0- value.val0+ADs- self.val11 :+AD0- value.val1+ADs- self.val12 :+AD0- value.val2+ADs- self.val13 :+AD0- value.val3+ADs- end+ADs-
    public property Row2: Vec4f read new Vec4f(self.val20, self.val21, self.val22, self.val23) write begin self.val20 :+AD0- value.val0+ADs- self.val21 :+AD0- value.val1+ADs- self.val22 :+AD0- value.val2+ADs- self.val23 :+AD0- value.val3+ADs- end+ADs-
    public property Row+AFs-y: integer+AF0-: Vec4f read y+AD0-0?Row0:y+AD0-1?Row1:y+AD0-2?Row2:Arr+ACYAPA-Vec4f+AD4AWw-y+AF0- write
    case y of
      0: Row0 :+AD0- value+ADs-
      1: Row1 :+AD0- value+ADs-
      2: Row2 :+AD0- value+ADs-
      else raise new IndexOutOfRangeException('+BB0EPgQ8BDUEQA- +BEEEQgRABD4ERwQ6BDg- +BDQEPgQ7BDYENQQ9- +BDgEPAQ1BEIETA- +BDcEPQQwBEcENQQ9BDgENQ- 0..2')+ADs-
    end+ADs-
    
    public property Col0: Vec3f read new Vec3f(self.val00, self.val10, self.val20) write begin self.val00 :+AD0- value.val0+ADs- self.val10 :+AD0- value.val1+ADs- self.val20 :+AD0- value.val2+ADs- end+ADs-
    public property Col1: Vec3f read new Vec3f(self.val01, self.val11, self.val21) write begin self.val01 :+AD0- value.val0+ADs- self.val11 :+AD0- value.val1+ADs- self.val21 :+AD0- value.val2+ADs- end+ADs-
    public property Col2: Vec3f read new Vec3f(self.val02, self.val12, self.val22) write begin self.val02 :+AD0- value.val0+ADs- self.val12 :+AD0- value.val1+ADs- self.val22 :+AD0- value.val2+ADs- end+ADs-
    public property Col3: Vec3f read new Vec3f(self.val03, self.val13, self.val23) write begin self.val03 :+AD0- value.val0+ADs- self.val13 :+AD0- value.val1+ADs- self.val23 :+AD0- value.val2+ADs- end+ADs-
    public property Col+AFs-x: integer+AF0-: Vec3f read x+AD0-0?Col0:x+AD0-1?Col1:x+AD0-2?Col2:x+AD0-3?Col3:Arr+ACYAPA-Vec3f+AD4AWw-x+AF0- write
    case x of
      0: Col0 :+AD0- value+ADs-
      1: Col1 :+AD0- value+ADs-
      2: Col2 :+AD0- value+ADs-
      3: Col3 :+AD0- value+ADs-
      else raise new IndexOutOfRangeException('+BB0EPgQ8BDUEQA- +BEEEQgQ+BDsEMQRGBDA- +BDQEPgQ7BDYENQQ9- +BDgEPAQ1BEIETA- +BDcEPQQwBEcENQQ9BDgENQ- 0..3')+ADs-
    end+ADs-
    
    public property ColPtr0: +AF4-Vec4f read pointer(IntPtr(pointer(+AEA-self)) +- 0)+ADs-
    public property ColPtr1: +AF4-Vec4f read pointer(IntPtr(pointer(+AEA-self)) +- 12)+ADs-
    public property ColPtr2: +AF4-Vec4f read pointer(IntPtr(pointer(+AEA-self)) +- 24)+ADs-
    public property ColPtr+AFs-x: integer+AF0-: +AF4-Vec4f read pointer(IntPtr(pointer(+AEA-self)) +- x+ACo-12)+ADs-
    
    public static function Scale(k: double): Mtr3x4f :+AD0- new Mtr3x4f(k, 0.0, 0.0, 0.0, 0.0, k, 0.0, 0.0, 0.0, 0.0, k, 0.0)+ADs-
    
    public static function Traslate(X, Y, Z: single): Mtr3x4f :+AD0- new Mtr3x4f(1.0, 0.0, 0.0, X, 0.0, 1.0, 0.0, Y, 0.0, 0.0, 1.0, Z)+ADs-
    public static function TraslateTransposed(X, Y: single): Mtr3x4f :+AD0- new Mtr3x4f(1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, X, Y, 1.0, 0.0)+ADs-
    
    public static function RotateXYcw(rot: double): Mtr3x4f+ADs-
    begin
      var sr: single :+AD0- Sin(rot)+ADs-
      var cr: single :+AD0- Cos(rot)+ADs-
      Result :+AD0- new Mtr3x4f(
         cr, +-sr, 0.0, 0.0,
        -sr,  cr, 0.0, 0.0,
        0.0, 0.0, 1.0, 0.0
      )+ADs-
    end+ADs-
    public static function RotateXYccw(rot: double): Mtr3x4f+ADs-
    begin
      var sr: single :+AD0- Sin(rot)+ADs-
      var cr: single :+AD0- Cos(rot)+ADs-
      Result :+AD0- new Mtr3x4f(
         cr, -sr, 0.0, 0.0,
        +-sr,  cr, 0.0, 0.0,
        0.0, 0.0, 1.0, 0.0
      )+ADs-
    end+ADs-
    
    public static function RotateYZcw(rot: double): Mtr3x4f+ADs-
    begin
      var sr: single :+AD0- Sin(rot)+ADs-
      var cr: single :+AD0- Cos(rot)+ADs-
      Result :+AD0- new Mtr3x4f(
        1.0, 0.0, 0.0, 0.0,
        0.0,  cr, +-sr, 0.0,
        0.0, -sr,  cr, 0.0
      )+ADs-
    end+ADs-
    public static function RotateYZccw(rot: double): Mtr3x4f+ADs-
    begin
      var sr: single :+AD0- Sin(rot)+ADs-
      var cr: single :+AD0- Cos(rot)+ADs-
      Result :+AD0- new Mtr3x4f(
        1.0, 0.0, 0.0, 0.0,
        0.0,  cr, -sr, 0.0,
        0.0, +-sr,  cr, 0.0
      )+ADs-
    end+ADs-
    
    public static function RotateZXcw(rot: double): Mtr3x4f+ADs-
    begin
      var sr: single :+AD0- Sin(rot)+ADs-
      var cr: single :+AD0- Cos(rot)+ADs-
      Result :+AD0- new Mtr3x4f(
         cr, 0.0, -sr, 0.0,
        0.0, 1.0, 0.0, 0.0,
        +-sr, 0.0,  cr, 0.0
      )+ADs-
    end+ADs-
    public static function RotateZXccw(rot: double): Mtr3x4f+ADs-
    begin
      var sr: single :+AD0- Sin(rot)+ADs-
      var cr: single :+AD0- Cos(rot)+ADs-
      Result :+AD0- new Mtr3x4f(
         cr, 0.0, +-sr, 0.0,
        0.0, 1.0, 0.0, 0.0,
        -sr, 0.0,  cr, 0.0
      )+ADs-
    end+ADs-
    
    public static function Rotate3Dcw(u: Vec3f+ADs- rot: double): Mtr3x4f+ADs-
    begin
      var k1 :+AD0- Sin(rot)+ADs-
      var k2 :+AD0- 2+ACo-Sqr(Sin(rot/2))+ADs-
      
      Result.val00 :+AD0- 1 +- k2+ACo-( -u.val2+ACo-u.val2 - u.val1+ACo-u.val1 )+ADs-
      Result.val01 :+AD0- k1+ACo-u.val2 +- k2+ACo-( u.val1+ACo-u.val0 )+ADs-
      Result.val02 :+AD0- -k1+ACo-u.val1 +- k2+ACo-( u.val2+ACo-u.val0 )+ADs-
      Result.val10 :+AD0- -k1+ACo-u.val2 +- k2+ACo-( u.val0+ACo-u.val1 )+ADs-
      Result.val11 :+AD0- 1 +- k2+ACo-( -u.val2+ACo-u.val2 - u.val0+ACo-u.val0 )+ADs-
      Result.val12 :+AD0- k1+ACo-u.val0 +- k2+ACo-( u.val2+ACo-u.val1 )+ADs-
      Result.val20 :+AD0- k1+ACo-u.val1 +- k2+ACo-( u.val0+ACo-u.val2 )+ADs-
      Result.val21 :+AD0- -k1+ACo-u.val0 +- k2+ACo-( u.val1+ACo-u.val2 )+ADs-
      Result.val22 :+AD0- 1 +- k2+ACo-( -u.val1+ACo-u.val1 - u.val0+ACo-u.val0 )+ADs-
      
    end+ADs-
    
    public static function Rotate3Dccw(u: Vec3f+ADs- rot: double): Mtr3x4f+ADs-
    begin
      var k1 :+AD0- Sin(rot)+ADs-
      var k2 :+AD0- 2+ACo-Sqr(Sin(rot/2))+ADs-
      
      Result.val00 :+AD0- 1 +- k2+ACo-( -u.val2+ACo-u.val2 - u.val1+ACo-u.val1 )+ADs-
      Result.val01 :+AD0- -k1+ACo-u.val2 +- k2+ACo-( u.val1+ACo-u.val0 )+ADs-
      Result.val02 :+AD0- k1+ACo-u.val1 +- k2+ACo-( u.val2+ACo-u.val0 )+ADs-
      Result.val10 :+AD0- k1+ACo-u.val2 +- k2+ACo-( u.val0+ACo-u.val1 )+ADs-
      Result.val11 :+AD0- 1 +- k2+ACo-( -u.val2+ACo-u.val2 - u.val0+ACo-u.val0 )+ADs-
      Result.val12 :+AD0- -k1+ACo-u.val0 +- k2+ACo-( u.val2+ACo-u.val1 )+ADs-
      Result.val20 :+AD0- -k1+ACo-u.val1 +- k2+ACo-( u.val0+ACo-u.val2 )+ADs-
      Result.val21 :+AD0- k1+ACo-u.val0 +- k2+ACo-( u.val1+ACo-u.val2 )+ADs-
      Result.val22 :+AD0- 1 +- k2+ACo-( -u.val1+ACo-u.val1 - u.val0+ACo-u.val0 )+ADs-
      
    end+ADs-
    
    public function ToString: string+ADs- override+ADs-
    begin
      var res :+AD0- new StringBuilder+ADs-
      
      var ElStrs :+AD0- new string+AFs-3,4+AF0AOw-
      for var y :+AD0- 0 to 3-1 do
        for var x :+AD0- 0 to 4-1 do
          ElStrs+AFs-y,x+AF0- :+AD0- (Sign(val+AFs-y,x+AF0-)+AD0--1?'-':'+-') +- Abs(val+AFs-y,x+AF0-).ToString('f2')+ADs-
      var MtrElTextW :+AD0- ElStrs.OfType+ACYAPA-string+AD4-.Max(s-+AD4-s.Length)+ADs-
      var PrintlnMtrW :+AD0- MtrElTextW+ACo-4 +- 8+ADs- // +-2+ACo-(Width-1) +- 2+ADs-
      
      res +-+AD0- '+JQw-'+ADs-
      res.Append(+ACM-32, PrintlnMtrW)+ADs-
      res +-+AD0- '+JRA-'+ACM-10+ADs-
      res +-+AD0- '+JQI- '+ADs-
      res +-+AD0- ElStrs+AFs-0,0+AF0-.PadLeft(MtrElTextW)+ADs-
      res +-+AD0- ', '+ADs-
      res +-+AD0- ElStrs+AFs-0,1+AF0-.PadLeft(MtrElTextW)+ADs-
      res +-+AD0- ', '+ADs-
      res +-+AD0- ElStrs+AFs-0,2+AF0-.PadLeft(MtrElTextW)+ADs-
      res +-+AD0- ', '+ADs-
      res +-+AD0- ElStrs+AFs-0,3+AF0-.PadLeft(MtrElTextW)+ADs-
      res +-+AD0- ' +JQI-'+ACM-10+ADs-
      res +-+AD0- '+JQI- '+ADs-
      res +-+AD0- ElStrs+AFs-1,0+AF0-.PadLeft(MtrElTextW)+ADs-
      res +-+AD0- ', '+ADs-
      res +-+AD0- ElStrs+AFs-1,1+AF0-.PadLeft(MtrElTextW)+ADs-
      res +-+AD0- ', '+ADs-
      res +-+AD0- ElStrs+AFs-1,2+AF0-.PadLeft(MtrElTextW)+ADs-
      res +-+AD0- ', '+ADs-
      res +-+AD0- ElStrs+AFs-1,3+AF0-.PadLeft(MtrElTextW)+ADs-
      res +-+AD0- ' +JQI-'+ACM-10+ADs-
      res +-+AD0- '+JQI- '+ADs-
      res +-+AD0- ElStrs+AFs-2,0+AF0-.PadLeft(MtrElTextW)+ADs-
      res +-+AD0- ', '+ADs-
      res +-+AD0- ElStrs+AFs-2,1+AF0-.PadLeft(MtrElTextW)+ADs-
      res +-+AD0- ', '+ADs-
      res +-+AD0- ElStrs+AFs-2,2+AF0-.PadLeft(MtrElTextW)+ADs-
      res +-+AD0- ', '+ADs-
      res +-+AD0- ElStrs+AFs-2,3+AF0-.PadLeft(MtrElTextW)+ADs-
      res +-+AD0- ' +JQI-'+ACM-10+ADs-
      res +-+AD0- '+JRQ-'+ADs-
      res.Append(+ACM-32, PrintlnMtrW)+ADs-
      res +-+AD0- '+JRg-'+ADs-
      
      Result :+AD0- res.ToString+ADs-
    end+ADs-
    
    public function Println: Mtr3x4f+ADs-
    begin
      Writeln(self.ToString)+ADs-
      Result :+AD0- self+ADs-
    end+ADs-
    
    public static function operator+ACo-(m: Mtr3x4f+ADs- v: Vec4f): Vec3f :+AD0- new Vec3f(m.val00+ACo-v.val0+-m.val01+ACo-v.val1+-m.val02+ACo-v.val2+-m.val03+ACo-v.val3, m.val10+ACo-v.val0+-m.val11+ACo-v.val1+-m.val12+ACo-v.val2+-m.val13+ACo-v.val3, m.val20+ACo-v.val0+-m.val21+ACo-v.val1+-m.val22+ACo-v.val2+-m.val23+ACo-v.val3)+ADs-
    public static function operator+ACo-(v: Vec3f+ADs- m: Mtr3x4f): Vec4f :+AD0- new Vec4f(m.val00+ACo-v.val0+-m.val10+ACo-v.val1+-m.val20+ACo-v.val2, m.val01+ACo-v.val0+-m.val11+ACo-v.val1+-m.val21+ACo-v.val2, m.val02+ACo-v.val0+-m.val12+ACo-v.val1+-m.val22+ACo-v.val2, m.val03+ACo-v.val0+-m.val13+ACo-v.val1+-m.val23+ACo-v.val2)+ADs-
    
    public static function operator implicit(m: Mtr2x2f): Mtr3x4f :+AD0- new Mtr3x4f(m.val00, m.val01, 0.0, 0.0, m.val10, m.val11, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)+ADs-
    public static function operator implicit(m: Mtr3x4f): Mtr2x2f :+AD0- new Mtr2x2f(m.val00, m.val01, m.val10, m.val11)+ADs-
    
    public static function operator implicit(m: Mtr3x3f): Mtr3x4f :+AD0- new Mtr3x4f(m.val00, m.val01, m.val02, 0.0, m.val10, m.val11, m.val12, 0.0, m.val20, m.val21, m.val22, 0.0)+ADs-
    public static function operator implicit(m: Mtr3x4f): Mtr3x3f :+AD0- new Mtr3x3f(m.val00, m.val01, m.val02, m.val10, m.val11, m.val12, m.val20, m.val21, m.val22)+ADs-
    
    public static function operator implicit(m: Mtr4x4f): Mtr3x4f :+AD0- new Mtr3x4f(m.val00, m.val01, m.val02, m.val03, m.val10, m.val11, m.val12, m.val13, m.val20, m.val21, m.val22, m.val23)+ADs-
    public static function operator implicit(m: Mtr3x4f): Mtr4x4f :+AD0- new Mtr4x4f(m.val00, m.val01, m.val02, m.val03, m.val10, m.val11, m.val12, m.val13, m.val20, m.val21, m.val22, m.val23, 0.0, 0.0, 0.0, 0.0)+ADs-
    
    public static function operator implicit(m: Mtr2x3f): Mtr3x4f :+AD0- new Mtr3x4f(m.val00, m.val01, m.val02, 0.0, m.val10, m.val11, m.val12, 0.0, 0.0, 0.0, 0.0, 0.0)+ADs-
    public static function operator implicit(m: Mtr3x4f): Mtr2x3f :+AD0- new Mtr2x3f(m.val00, m.val01, m.val02, m.val10, m.val11, m.val12)+ADs-
    
    public static function operator implicit(m: Mtr3x2f): Mtr3x4f :+AD0- new Mtr3x4f(m.val00, m.val01, 0.0, 0.0, m.val10, m.val11, 0.0, 0.0, m.val20, m.val21, 0.0, 0.0)+ADs-
    public static function operator implicit(m: Mtr3x4f): Mtr3x2f :+AD0- new Mtr3x2f(m.val00, m.val01, m.val10, m.val11, m.val20, m.val21)+ADs-
    
    public static function operator implicit(m: Mtr2x4f): Mtr3x4f :+AD0- new Mtr3x4f(m.val00, m.val01, m.val02, m.val03, m.val10, m.val11, m.val12, m.val13, 0.0, 0.0, 0.0, 0.0)+ADs-
    public static function operator implicit(m: Mtr3x4f): Mtr2x4f :+AD0- new Mtr2x4f(m.val00, m.val01, m.val02, m.val03, m.val10, m.val11, m.val12, m.val13)+ADs-
    
    public static function operator implicit(m: Mtr4x2f): Mtr3x4f :+AD0- new Mtr3x4f(m.val00, m.val01, 0.0, 0.0, m.val10, m.val11, 0.0, 0.0, m.val20, m.val21, 0.0, 0.0)+ADs-
    public static function operator implicit(m: Mtr3x4f): Mtr4x2f :+AD0- new Mtr4x2f(m.val00, m.val01, m.val10, m.val11, m.val20, m.val21, 0.0, 0.0)+ADs-
    
  end+ADs-
  
  Mtr4x3f +AD0- record
    public val00, val10, val20, val30: single+ADs-
    public val01, val11, val21, val31: single+ADs-
    public val02, val12, val22, val32: single+ADs-
    
    public constructor(val00, val01, val02, val10, val11, val12, val20, val21, val22, val30, val31, val32: single)+ADs-
    begin
      self.val00 :+AD0- val00+ADs-
      self.val01 :+AD0- val01+ADs-
      self.val02 :+AD0- val02+ADs-
      self.val10 :+AD0- val10+ADs-
      self.val11 :+AD0- val11+ADs-
      self.val12 :+AD0- val12+ADs-
      self.val20 :+AD0- val20+ADs-
      self.val21 :+AD0- val21+ADs-
      self.val22 :+AD0- val22+ADs-
      self.val30 :+AD0- val30+ADs-
      self.val31 :+AD0- val31+ADs-
      self.val32 :+AD0- val32+ADs-
    end+ADs-
    
    private function GetValAt(y,x: integer): single+ADs-
    begin
      if cardinal(x) +AD4- 2 then raise new IndexOutOfRangeException('+BBgEPQQ0BDUEOgRB- +ACI-X+ACI- +BDQEPgQ7BDYENQQ9- +BDgEPAQ1BEIETA- +BDcEPQQwBEcENQQ9BDgENQ- 0..2')+ADs-
      if cardinal(y) +AD4- 3 then raise new IndexOutOfRangeException('+BBgEPQQ0BDUEOgRB- +ACI-Y+ACI- +BDQEPgQ7BDYENQQ9- +BDgEPAQ1BEIETA- +BDcEPQQwBEcENQQ9BDgENQ- 0..3')+ADs-
      var ptr: +AF4-single :+AD0- pointer(new IntPtr(+AEA-self) +- (x+ACo-4 +- y) +ACo- 4 )+ADs-
      Result :+AD0- ptr+AF4AOw-
    end+ADs-
    private procedure SetValAt(y,x: integer+ADs- val: single)+ADs-
    begin
      if cardinal(x) +AD4- 2 then raise new IndexOutOfRangeException('+BBgEPQQ0BDUEOgRB- +ACI-X+ACI- +BDQEPgQ7BDYENQQ9- +BDgEPAQ1BEIETA- +BDcEPQQwBEcENQQ9BDgENQ- 0..2')+ADs-
      if cardinal(y) +AD4- 3 then raise new IndexOutOfRangeException('+BBgEPQQ0BDUEOgRB- +ACI-Y+ACI- +BDQEPgQ7BDYENQQ9- +BDgEPAQ1BEIETA- +BDcEPQQwBEcENQQ9BDgENQ- 0..3')+ADs-
      var ptr: +AF4-single :+AD0- pointer(new IntPtr(+AEA-self) +- (x+ACo-4 +- y) +ACo- 4 )+ADs-
      ptr+AF4- :+AD0- val+ADs-
    end+ADs-
    public property val+AFs-y,x: integer+AF0-: single read GetValAt write SetValAt+ADs- default+ADs-
    
    public static property Identity: Mtr4x3f read new Mtr4x3f(1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0)+ADs-
    
    public property Row0: Vec3f read new Vec3f(self.val00, self.val01, self.val02) write begin self.val00 :+AD0- value.val0+ADs- self.val01 :+AD0- value.val1+ADs- self.val02 :+AD0- value.val2+ADs- end+ADs-
    public property Row1: Vec3f read new Vec3f(self.val10, self.val11, self.val12) write begin self.val10 :+AD0- value.val0+ADs- self.val11 :+AD0- value.val1+ADs- self.val12 :+AD0- value.val2+ADs- end+ADs-
    public property Row2: Vec3f read new Vec3f(self.val20, self.val21, self.val22) write begin self.val20 :+AD0- value.val0+ADs- self.val21 :+AD0- value.val1+ADs- self.val22 :+AD0- value.val2+ADs- end+ADs-
    public property Row3: Vec3f read new Vec3f(self.val30, self.val31, self.val32) write begin self.val30 :+AD0- value.val0+ADs- self.val31 :+AD0- value.val1+ADs- self.val32 :+AD0- value.val2+ADs- end+ADs-
    public property Row+AFs-y: integer+AF0-: Vec3f read y+AD0-0?Row0:y+AD0-1?Row1:y+AD0-2?Row2:y+AD0-3?Row3:Arr+ACYAPA-Vec3f+AD4AWw-y+AF0- write
    case y of
      0: Row0 :+AD0- value+ADs-
      1: Row1 :+AD0- value+ADs-
      2: Row2 :+AD0- value+ADs-
      3: Row3 :+AD0- value+ADs-
      else raise new IndexOutOfRangeException('+BB0EPgQ8BDUEQA- +BEEEQgRABD4ERwQ6BDg- +BDQEPgQ7BDYENQQ9- +BDgEPAQ1BEIETA- +BDcEPQQwBEcENQQ9BDgENQ- 0..3')+ADs-
    end+ADs-
    
    public property Col0: Vec4f read new Vec4f(self.val00, self.val10, self.val20, self.val30) write begin self.val00 :+AD0- value.val0+ADs- self.val10 :+AD0- value.val1+ADs- self.val20 :+AD0- value.val2+ADs- self.val30 :+AD0- value.val3+ADs- end+ADs-
    public property Col1: Vec4f read new Vec4f(self.val01, self.val11, self.val21, self.val31) write begin self.val01 :+AD0- value.val0+ADs- self.val11 :+AD0- value.val1+ADs- self.val21 :+AD0- value.val2+ADs- self.val31 :+AD0- value.val3+ADs- end+ADs-
    public property Col2: Vec4f read new Vec4f(self.val02, self.val12, self.val22, self.val32) write begin self.val02 :+AD0- value.val0+ADs- self.val12 :+AD0- value.val1+ADs- self.val22 :+AD0- value.val2+ADs- self.val32 :+AD0- value.val3+ADs- end+ADs-
    public property Col+AFs-x: integer+AF0-: Vec4f read x+AD0-0?Col0:x+AD0-1?Col1:x+AD0-2?Col2:Arr+ACYAPA-Vec4f+AD4AWw-x+AF0- write
    case x of
      0: Col0 :+AD0- value+ADs-
      1: Col1 :+AD0- value+ADs-
      2: Col2 :+AD0- value+ADs-
      else raise new IndexOutOfRangeException('+BB0EPgQ8BDUEQA- +BEEEQgQ+BDsEMQRGBDA- +BDQEPgQ7BDYENQQ9- +BDgEPAQ1BEIETA- +BDcEPQQwBEcENQQ9BDgENQ- 0..2')+ADs-
    end+ADs-
    
    public property ColPtr0: +AF4-Vec3f read pointer(IntPtr(pointer(+AEA-self)) +- 0)+ADs-
    public property ColPtr1: +AF4-Vec3f read pointer(IntPtr(pointer(+AEA-self)) +- 16)+ADs-
    public property ColPtr2: +AF4-Vec3f read pointer(IntPtr(pointer(+AEA-self)) +- 32)+ADs-
    public property ColPtr3: +AF4-Vec3f read pointer(IntPtr(pointer(+AEA-self)) +- 48)+ADs-
    public property ColPtr+AFs-x: integer+AF0-: +AF4-Vec3f read pointer(IntPtr(pointer(+AEA-self)) +- x+ACo-16)+ADs-
    
    public static function Scale(k: double): Mtr4x3f :+AD0- new Mtr4x3f(k, 0.0, 0.0, 0.0, k, 0.0, 0.0, 0.0, k, 0.0, 0.0, 0.0)+ADs-
    
    public static function Traslate(X, Y: single): Mtr4x3f :+AD0- new Mtr4x3f(1.0, 0.0, X, 0.0, 1.0, Y, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0)+ADs-
    public static function TraslateTransposed(X, Y, Z: single): Mtr4x3f :+AD0- new Mtr4x3f(1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, X, Y, Z)+ADs-
    
    public static function RotateXYcw(rot: double): Mtr4x3f+ADs-
    begin
      var sr: single :+AD0- Sin(rot)+ADs-
      var cr: single :+AD0- Cos(rot)+ADs-
      Result :+AD0- new Mtr4x3f(
         cr, +-sr, 0.0,
        -sr,  cr, 0.0,
        0.0, 0.0, 1.0,
        0.0, 0.0, 0.0
      )+ADs-
    end+ADs-
    public static function RotateXYccw(rot: double): Mtr4x3f+ADs-
    begin
      var sr: single :+AD0- Sin(rot)+ADs-
      var cr: single :+AD0- Cos(rot)+ADs-
      Result :+AD0- new Mtr4x3f(
         cr, -sr, 0.0,
        +-sr,  cr, 0.0,
        0.0, 0.0, 1.0,
        0.0, 0.0, 0.0
      )+ADs-
    end+ADs-
    
    public static function RotateYZcw(rot: double): Mtr4x3f+ADs-
    begin
      var sr: single :+AD0- Sin(rot)+ADs-
      var cr: single :+AD0- Cos(rot)+ADs-
      Result :+AD0- new Mtr4x3f(
        1.0, 0.0, 0.0,
        0.0,  cr, +-sr,
        0.0, -sr,  cr,
        0.0, 0.0, 0.0
      )+ADs-
    end+ADs-
    public static function RotateYZccw(rot: double): Mtr4x3f+ADs-
    begin
      var sr: single :+AD0- Sin(rot)+ADs-
      var cr: single :+AD0- Cos(rot)+ADs-
      Result :+AD0- new Mtr4x3f(
        1.0, 0.0, 0.0,
        0.0,  cr, -sr,
        0.0, +-sr,  cr,
        0.0, 0.0, 0.0
      )+ADs-
    end+ADs-
    
    public static function RotateZXcw(rot: double): Mtr4x3f+ADs-
    begin
      var sr: single :+AD0- Sin(rot)+ADs-
      var cr: single :+AD0- Cos(rot)+ADs-
      Result :+AD0- new Mtr4x3f(
         cr, 0.0, -sr,
        0.0, 1.0, 0.0,
        +-sr, 0.0,  cr,
        0.0, 0.0, 0.0
      )+ADs-
    end+ADs-
    public static function RotateZXccw(rot: double): Mtr4x3f+ADs-
    begin
      var sr: single :+AD0- Sin(rot)+ADs-
      var cr: single :+AD0- Cos(rot)+ADs-
      Result :+AD0- new Mtr4x3f(
         cr, 0.0, +-sr,
        0.0, 1.0, 0.0,
        -sr, 0.0,  cr,
        0.0, 0.0, 0.0
      )+ADs-
    end+ADs-
    
    public static function Rotate3Dcw(u: Vec3f+ADs- rot: double): Mtr4x3f+ADs-
    begin
      var k1 :+AD0- Sin(rot)+ADs-
      var k2 :+AD0- 2+ACo-Sqr(Sin(rot/2))+ADs-
      
      Result.val00 :+AD0- 1 +- k2+ACo-( -u.val2+ACo-u.val2 - u.val1+ACo-u.val1 )+ADs-
      Result.val01 :+AD0- k1+ACo-u.val2 +- k2+ACo-( u.val1+ACo-u.val0 )+ADs-
      Result.val02 :+AD0- -k1+ACo-u.val1 +- k2+ACo-( u.val2+ACo-u.val0 )+ADs-
      Result.val10 :+AD0- -k1+ACo-u.val2 +- k2+ACo-( u.val0+ACo-u.val1 )+ADs-
      Result.val11 :+AD0- 1 +- k2+ACo-( -u.val2+ACo-u.val2 - u.val0+ACo-u.val0 )+ADs-
      Result.val12 :+AD0- k1+ACo-u.val0 +- k2+ACo-( u.val2+ACo-u.val1 )+ADs-
      Result.val20 :+AD0- k1+ACo-u.val1 +- k2+ACo-( u.val0+ACo-u.val2 )+ADs-
      Result.val21 :+AD0- -k1+ACo-u.val0 +- k2+ACo-( u.val1+ACo-u.val2 )+ADs-
      Result.val22 :+AD0- 1 +- k2+ACo-( -u.val1+ACo-u.val1 - u.val0+ACo-u.val0 )+ADs-
      
    end+ADs-
    
    public static function Rotate3Dccw(u: Vec3f+ADs- rot: double): Mtr4x3f+ADs-
    begin
      var k1 :+AD0- Sin(rot)+ADs-
      var k2 :+AD0- 2+ACo-Sqr(Sin(rot/2))+ADs-
      
      Result.val00 :+AD0- 1 +- k2+ACo-( -u.val2+ACo-u.val2 - u.val1+ACo-u.val1 )+ADs-
      Result.val01 :+AD0- -k1+ACo-u.val2 +- k2+ACo-( u.val1+ACo-u.val0 )+ADs-
      Result.val02 :+AD0- k1+ACo-u.val1 +- k2+ACo-( u.val2+ACo-u.val0 )+ADs-
      Result.val10 :+AD0- k1+ACo-u.val2 +- k2+ACo-( u.val0+ACo-u.val1 )+ADs-
      Result.val11 :+AD0- 1 +- k2+ACo-( -u.val2+ACo-u.val2 - u.val0+ACo-u.val0 )+ADs-
      Result.val12 :+AD0- -k1+ACo-u.val0 +- k2+ACo-( u.val2+ACo-u.val1 )+ADs-
      Result.val20 :+AD0- -k1+ACo-u.val1 +- k2+ACo-( u.val0+ACo-u.val2 )+ADs-
      Result.val21 :+AD0- k1+ACo-u.val0 +- k2+ACo-( u.val1+ACo-u.val2 )+ADs-
      Result.val22 :+AD0- 1 +- k2+ACo-( -u.val1+ACo-u.val1 - u.val0+ACo-u.val0 )+ADs-
      
    end+ADs-
    
    public function ToString: string+ADs- override+ADs-
    begin
      var res :+AD0- new StringBuilder+ADs-
      
      var ElStrs :+AD0- new string+AFs-4,3+AF0AOw-
      for var y :+AD0- 0 to 4-1 do
        for var x :+AD0- 0 to 3-1 do
          ElStrs+AFs-y,x+AF0- :+AD0- (Sign(val+AFs-y,x+AF0-)+AD0--1?'-':'+-') +- Abs(val+AFs-y,x+AF0-).ToString('f2')+ADs-
      var MtrElTextW :+AD0- ElStrs.OfType+ACYAPA-string+AD4-.Max(s-+AD4-s.Length)+ADs-
      var PrintlnMtrW :+AD0- MtrElTextW+ACo-3 +- 6+ADs- // +-2+ACo-(Width-1) +- 2+ADs-
      
      res +-+AD0- '+JQw-'+ADs-
      res.Append(+ACM-32, PrintlnMtrW)+ADs-
      res +-+AD0- '+JRA-'+ACM-10+ADs-
      res +-+AD0- '+JQI- '+ADs-
      res +-+AD0- ElStrs+AFs-0,0+AF0-.PadLeft(MtrElTextW)+ADs-
      res +-+AD0- ', '+ADs-
      res +-+AD0- ElStrs+AFs-0,1+AF0-.PadLeft(MtrElTextW)+ADs-
      res +-+AD0- ', '+ADs-
      res +-+AD0- ElStrs+AFs-0,2+AF0-.PadLeft(MtrElTextW)+ADs-
      res +-+AD0- ' +JQI-'+ACM-10+ADs-
      res +-+AD0- '+JQI- '+ADs-
      res +-+AD0- ElStrs+AFs-1,0+AF0-.PadLeft(MtrElTextW)+ADs-
      res +-+AD0- ', '+ADs-
      res +-+AD0- ElStrs+AFs-1,1+AF0-.PadLeft(MtrElTextW)+ADs-
      res +-+AD0- ', '+ADs-
      res +-+AD0- ElStrs+AFs-1,2+AF0-.PadLeft(MtrElTextW)+ADs-
      res +-+AD0- ' +JQI-'+ACM-10+ADs-
      res +-+AD0- '+JQI- '+ADs-
      res +-+AD0- ElStrs+AFs-2,0+AF0-.PadLeft(MtrElTextW)+ADs-
      res +-+AD0- ', '+ADs-
      res +-+AD0- ElStrs+AFs-2,1+AF0-.PadLeft(MtrElTextW)+ADs-
      res +-+AD0- ', '+ADs-
      res +-+AD0- ElStrs+AFs-2,2+AF0-.PadLeft(MtrElTextW)+ADs-
      res +-+AD0- ' +JQI-'+ACM-10+ADs-
      res +-+AD0- '+JQI- '+ADs-
      res +-+AD0- ElStrs+AFs-3,0+AF0-.PadLeft(MtrElTextW)+ADs-
      res +-+AD0- ', '+ADs-
      res +-+AD0- ElStrs+AFs-3,1+AF0-.PadLeft(MtrElTextW)+ADs-
      res +-+AD0- ', '+ADs-
      res +-+AD0- ElStrs+AFs-3,2+AF0-.PadLeft(MtrElTextW)+ADs-
      res +-+AD0- ' +JQI-'+ACM-10+ADs-
      res +-+AD0- '+JRQ-'+ADs-
      res.Append(+ACM-32, PrintlnMtrW)+ADs-
      res +-+AD0- '+JRg-'+ADs-
      
      Result :+AD0- res.ToString+ADs-
    end+ADs-
    
    public function Println: Mtr4x3f+ADs-
    begin
      Writeln(self.ToString)+ADs-
      Result :+AD0- self+ADs-
    end+ADs-
    
    public static function operator+ACo-(m: Mtr4x3f+ADs- v: Vec3f): Vec4f :+AD0- new Vec4f(m.val00+ACo-v.val0+-m.val01+ACo-v.val1+-m.val02+ACo-v.val2, m.val10+ACo-v.val0+-m.val11+ACo-v.val1+-m.val12+ACo-v.val2, m.val20+ACo-v.val0+-m.val21+ACo-v.val1+-m.val22+ACo-v.val2, m.val30+ACo-v.val0+-m.val31+ACo-v.val1+-m.val32+ACo-v.val2)+ADs-
    public static function operator+ACo-(v: Vec4f+ADs- m: Mtr4x3f): Vec3f :+AD0- new Vec3f(m.val00+ACo-v.val0+-m.val10+ACo-v.val1+-m.val20+ACo-v.val2+-m.val30+ACo-v.val3, m.val01+ACo-v.val0+-m.val11+ACo-v.val1+-m.val21+ACo-v.val2+-m.val31+ACo-v.val3, m.val02+ACo-v.val0+-m.val12+ACo-v.val1+-m.val22+ACo-v.val2+-m.val32+ACo-v.val3)+ADs-
    
    public static function operator implicit(m: Mtr2x2f): Mtr4x3f :+AD0- new Mtr4x3f(m.val00, m.val01, 0.0, m.val10, m.val11, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)+ADs-
    public static function operator implicit(m: Mtr4x3f): Mtr2x2f :+AD0- new Mtr2x2f(m.val00, m.val01, m.val10, m.val11)+ADs-
    
    public static function operator implicit(m: Mtr3x3f): Mtr4x3f :+AD0- new Mtr4x3f(m.val00, m.val01, m.val02, m.val10, m.val11, m.val12, m.val20, m.val21, m.val22, 0.0, 0.0, 0.0)+ADs-
    public static function operator implicit(m: Mtr4x3f): Mtr3x3f :+AD0- new Mtr3x3f(m.val00, m.val01, m.val02, m.val10, m.val11, m.val12, m.val20, m.val21, m.val22)+ADs-
    
    public static function operator implicit(m: Mtr4x4f): Mtr4x3f :+AD0- new Mtr4x3f(m.val00, m.val01, m.val02, m.val10, m.val11, m.val12, m.val20, m.val21, m.val22, m.val30, m.val31, m.val32)+ADs-
    public static function operator implicit(m: Mtr4x3f): Mtr4x4f :+AD0- new Mtr4x4f(m.val00, m.val01, m.val02, 0.0, m.val10, m.val11, m.val12, 0.0, m.val20, m.val21, m.val22, 0.0, m.val30, m.val31, m.val32, 0.0)+ADs-
    
    public static function operator implicit(m: Mtr2x3f): Mtr4x3f :+AD0- new Mtr4x3f(m.val00, m.val01, m.val02, m.val10, m.val11, m.val12, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)+ADs-
    public static function operator implicit(m: Mtr4x3f): Mtr2x3f :+AD0- new Mtr2x3f(m.val00, m.val01, m.val02, m.val10, m.val11, m.val12)+ADs-
    
    public static function operator implicit(m: Mtr3x2f): Mtr4x3f :+AD0- new Mtr4x3f(m.val00, m.val01, 0.0, m.val10, m.val11, 0.0, m.val20, m.val21, 0.0, 0.0, 0.0, 0.0)+ADs-
    public static function operator implicit(m: Mtr4x3f): Mtr3x2f :+AD0- new Mtr3x2f(m.val00, m.val01, m.val10, m.val11, m.val20, m.val21)+ADs-
    
    public static function operator implicit(m: Mtr2x4f): Mtr4x3f :+AD0- new Mtr4x3f(m.val00, m.val01, m.val02, m.val10, m.val11, m.val12, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)+ADs-
    public static function operator implicit(m: Mtr4x3f): Mtr2x4f :+AD0- new Mtr2x4f(m.val00, m.val01, m.val02, 0.0, m.val10, m.val11, m.val12, 0.0)+ADs-
    
    public static function operator implicit(m: Mtr4x2f): Mtr4x3f :+AD0- new Mtr4x3f(m.val00, m.val01, 0.0, m.val10, m.val11, 0.0, m.val20, m.val21, 0.0, m.val30, m.val31, 0.0)+ADs-
    public static function operator implicit(m: Mtr4x3f): Mtr4x2f :+AD0- new Mtr4x2f(m.val00, m.val01, m.val10, m.val11, m.val20, m.val21, m.val30, m.val31)+ADs-
    
    public static function operator implicit(m: Mtr3x4f): Mtr4x3f :+AD0- new Mtr4x3f(m.val00, m.val01, m.val02, m.val10, m.val11, m.val12, m.val20, m.val21, m.val22, 0.0, 0.0, 0.0)+ADs-
    public static function operator implicit(m: Mtr4x3f): Mtr3x4f :+AD0- new Mtr3x4f(m.val00, m.val01, m.val02, 0.0, m.val10, m.val11, m.val12, 0.0, m.val20, m.val21, m.val22, 0.0)+ADs-
    
  end+ADs-
  
  Mtr2x2d +AD0- record
    public val00, val10: double+ADs-
    public val01, val11: double+ADs-
    
    public constructor(val00, val01, val10, val11: double)+ADs-
    begin
      self.val00 :+AD0- val00+ADs-
      self.val01 :+AD0- val01+ADs-
      self.val10 :+AD0- val10+ADs-
      self.val11 :+AD0- val11+ADs-
    end+ADs-
    
    private function GetValAt(y,x: integer): double+ADs-
    begin
      if cardinal(x) +AD4- 1 then raise new IndexOutOfRangeException('+BBgEPQQ0BDUEOgRB- +ACI-X+ACI- +BDQEPgQ7BDYENQQ9- +BDgEPAQ1BEIETA- +BDcEPQQwBEcENQQ9BDgENQ- 0..1')+ADs-
      if cardinal(y) +AD4- 1 then raise new IndexOutOfRangeException('+BBgEPQQ0BDUEOgRB- +ACI-Y+ACI- +BDQEPgQ7BDYENQQ9- +BDgEPAQ1BEIETA- +BDcEPQQwBEcENQQ9BDgENQ- 0..1')+ADs-
      var ptr: +AF4-double :+AD0- pointer(new IntPtr(+AEA-self) +- (x+ACo-2 +- y) +ACo- 8 )+ADs-
      Result :+AD0- ptr+AF4AOw-
    end+ADs-
    private procedure SetValAt(y,x: integer+ADs- val: double)+ADs-
    begin
      if cardinal(x) +AD4- 1 then raise new IndexOutOfRangeException('+BBgEPQQ0BDUEOgRB- +ACI-X+ACI- +BDQEPgQ7BDYENQQ9- +BDgEPAQ1BEIETA- +BDcEPQQwBEcENQQ9BDgENQ- 0..1')+ADs-
      if cardinal(y) +AD4- 1 then raise new IndexOutOfRangeException('+BBgEPQQ0BDUEOgRB- +ACI-Y+ACI- +BDQEPgQ7BDYENQQ9- +BDgEPAQ1BEIETA- +BDcEPQQwBEcENQQ9BDgENQ- 0..1')+ADs-
      var ptr: +AF4-double :+AD0- pointer(new IntPtr(+AEA-self) +- (x+ACo-2 +- y) +ACo- 8 )+ADs-
      ptr+AF4- :+AD0- val+ADs-
    end+ADs-
    public property val+AFs-y,x: integer+AF0-: double read GetValAt write SetValAt+ADs- default+ADs-
    
    public static property Identity: Mtr2x2d read new Mtr2x2d(1.0, 0.0, 0.0, 1.0)+ADs-
    
    public property Row0: Vec2d read new Vec2d(self.val00, self.val01) write begin self.val00 :+AD0- value.val0+ADs- self.val01 :+AD0- value.val1+ADs- end+ADs-
    public property Row1: Vec2d read new Vec2d(self.val10, self.val11) write begin self.val10 :+AD0- value.val0+ADs- self.val11 :+AD0- value.val1+ADs- end+ADs-
    public property Row+AFs-y: integer+AF0-: Vec2d read y+AD0-0?Row0:y+AD0-1?Row1:Arr+ACYAPA-Vec2d+AD4AWw-y+AF0- write
    case y of
      0: Row0 :+AD0- value+ADs-
      1: Row1 :+AD0- value+ADs-
      else raise new IndexOutOfRangeException('+BB0EPgQ8BDUEQA- +BEEEQgRABD4ERwQ6BDg- +BDQEPgQ7BDYENQQ9- +BDgEPAQ1BEIETA- +BDcEPQQwBEcENQQ9BDgENQ- 0..1')+ADs-
    end+ADs-
    
    public property Col0: Vec2d read new Vec2d(self.val00, self.val10) write begin self.val00 :+AD0- value.val0+ADs- self.val10 :+AD0- value.val1+ADs- end+ADs-
    public property Col1: Vec2d read new Vec2d(self.val01, self.val11) write begin self.val01 :+AD0- value.val0+ADs- self.val11 :+AD0- value.val1+ADs- end+ADs-
    public property Col+AFs-x: integer+AF0-: Vec2d read x+AD0-0?Col0:x+AD0-1?Col1:Arr+ACYAPA-Vec2d+AD4AWw-x+AF0- write
    case x of
      0: Col0 :+AD0- value+ADs-
      1: Col1 :+AD0- value+ADs-
      else raise new IndexOutOfRangeException('+BB0EPgQ8BDUEQA- +BEEEQgQ+BDsEMQRGBDA- +BDQEPgQ7BDYENQQ9- +BDgEPAQ1BEIETA- +BDcEPQQwBEcENQQ9BDgENQ- 0..1')+ADs-
    end+ADs-
    
    public property ColPtr0: +AF4-Vec2d read pointer(IntPtr(pointer(+AEA-self)) +- 0)+ADs-
    public property ColPtr1: +AF4-Vec2d read pointer(IntPtr(pointer(+AEA-self)) +- 16)+ADs-
    public property ColPtr+AFs-x: integer+AF0-: +AF4-Vec2d read pointer(IntPtr(pointer(+AEA-self)) +- x+ACo-16)+ADs-
    
    public static function Scale(k: double): Mtr2x2d :+AD0- new Mtr2x2d(k, 0.0, 0.0, k)+ADs-
    
    public static function Traslate(X: double): Mtr2x2d :+AD0- new Mtr2x2d(1.0, X, 0.0, 1.0)+ADs-
    public static function TraslateTransposed(X: double): Mtr2x2d :+AD0- new Mtr2x2d(1.0, 0.0, X, 1.0)+ADs-
    
    public static function RotateXYcw(rot: double): Mtr2x2d+ADs-
    begin
      var sr: double :+AD0- Sin(rot)+ADs-
      var cr: double :+AD0- Cos(rot)+ADs-
      Result :+AD0- new Mtr2x2d(
         cr, +-sr,
        -sr,  cr
      )+ADs-
    end+ADs-
    public static function RotateXYccw(rot: double): Mtr2x2d+ADs-
    begin
      var sr: double :+AD0- Sin(rot)+ADs-
      var cr: double :+AD0- Cos(rot)+ADs-
      Result :+AD0- new Mtr2x2d(
         cr, -sr,
        +-sr,  cr
      )+ADs-
    end+ADs-
    
    public function ToString: string+ADs- override+ADs-
    begin
      var res :+AD0- new StringBuilder+ADs-
      
      var ElStrs :+AD0- new string+AFs-2,2+AF0AOw-
      for var y :+AD0- 0 to 2-1 do
        for var x :+AD0- 0 to 2-1 do
          ElStrs+AFs-y,x+AF0- :+AD0- (Sign(val+AFs-y,x+AF0-)+AD0--1?'-':'+-') +- Abs(val+AFs-y,x+AF0-).ToString('f2')+ADs-
      var MtrElTextW :+AD0- ElStrs.OfType+ACYAPA-string+AD4-.Max(s-+AD4-s.Length)+ADs-
      var PrintlnMtrW :+AD0- MtrElTextW+ACo-2 +- 4+ADs- // +-2+ACo-(Width-1) +- 2+ADs-
      
      res +-+AD0- '+JQw-'+ADs-
      res.Append(+ACM-32, PrintlnMtrW)+ADs-
      res +-+AD0- '+JRA-'+ACM-10+ADs-
      res +-+AD0- '+JQI- '+ADs-
      res +-+AD0- ElStrs+AFs-0,0+AF0-.PadLeft(MtrElTextW)+ADs-
      res +-+AD0- ', '+ADs-
      res +-+AD0- ElStrs+AFs-0,1+AF0-.PadLeft(MtrElTextW)+ADs-
      res +-+AD0- ' +JQI-'+ACM-10+ADs-
      res +-+AD0- '+JQI- '+ADs-
      res +-+AD0- ElStrs+AFs-1,0+AF0-.PadLeft(MtrElTextW)+ADs-
      res +-+AD0- ', '+ADs-
      res +-+AD0- ElStrs+AFs-1,1+AF0-.PadLeft(MtrElTextW)+ADs-
      res +-+AD0- ' +JQI-'+ACM-10+ADs-
      res +-+AD0- '+JRQ-'+ADs-
      res.Append(+ACM-32, PrintlnMtrW)+ADs-
      res +-+AD0- '+JRg-'+ADs-
      
      Result :+AD0- res.ToString+ADs-
    end+ADs-
    
    public function Println: Mtr2x2d+ADs-
    begin
      Writeln(self.ToString)+ADs-
      Result :+AD0- self+ADs-
    end+ADs-
    
    public static function operator+ACo-(m: Mtr2x2d+ADs- v: Vec2d): Vec2d :+AD0- new Vec2d(m.val00+ACo-v.val0+-m.val01+ACo-v.val1, m.val10+ACo-v.val0+-m.val11+ACo-v.val1)+ADs-
    public static function operator+ACo-(v: Vec2d+ADs- m: Mtr2x2d): Vec2d :+AD0- new Vec2d(m.val00+ACo-v.val0+-m.val10+ACo-v.val1, m.val01+ACo-v.val0+-m.val11+ACo-v.val1)+ADs-
    
    public static function operator implicit(m: Mtr2x2f): Mtr2x2d :+AD0- new Mtr2x2d(m.val00, m.val01, m.val10, m.val11)+ADs-
    public static function operator implicit(m: Mtr2x2d): Mtr2x2f :+AD0- new Mtr2x2f(m.val00, m.val01, m.val10, m.val11)+ADs-
    
    public static function operator implicit(m: Mtr3x3f): Mtr2x2d :+AD0- new Mtr2x2d(m.val00, m.val01, m.val10, m.val11)+ADs-
    public static function operator implicit(m: Mtr2x2d): Mtr3x3f :+AD0- new Mtr3x3f(m.val00, m.val01, 0.0, m.val10, m.val11, 0.0, 0.0, 0.0, 0.0)+ADs-
    
    public static function operator implicit(m: Mtr4x4f): Mtr2x2d :+AD0- new Mtr2x2d(m.val00, m.val01, m.val10, m.val11)+ADs-
    public static function operator implicit(m: Mtr2x2d): Mtr4x4f :+AD0- new Mtr4x4f(m.val00, m.val01, 0.0, 0.0, m.val10, m.val11, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)+ADs-
    
    public static function operator implicit(m: Mtr2x3f): Mtr2x2d :+AD0- new Mtr2x2d(m.val00, m.val01, m.val10, m.val11)+ADs-
    public static function operator implicit(m: Mtr2x2d): Mtr2x3f :+AD0- new Mtr2x3f(m.val00, m.val01, 0.0, m.val10, m.val11, 0.0)+ADs-
    
    public static function operator implicit(m: Mtr3x2f): Mtr2x2d :+AD0- new Mtr2x2d(m.val00, m.val01, m.val10, m.val11)+ADs-
    public static function operator implicit(m: Mtr2x2d): Mtr3x2f :+AD0- new Mtr3x2f(m.val00, m.val01, m.val10, m.val11, 0.0, 0.0)+ADs-
    
    public static function operator implicit(m: Mtr2x4f): Mtr2x2d :+AD0- new Mtr2x2d(m.val00, m.val01, m.val10, m.val11)+ADs-
    public static function operator implicit(m: Mtr2x2d): Mtr2x4f :+AD0- new Mtr2x4f(m.val00, m.val01, 0.0, 0.0, m.val10, m.val11, 0.0, 0.0)+ADs-
    
    public static function operator implicit(m: Mtr4x2f): Mtr2x2d :+AD0- new Mtr2x2d(m.val00, m.val01, m.val10, m.val11)+ADs-
    public static function operator implicit(m: Mtr2x2d): Mtr4x2f :+AD0- new Mtr4x2f(m.val00, m.val01, m.val10, m.val11, 0.0, 0.0, 0.0, 0.0)+ADs-
    
    public static function operator implicit(m: Mtr3x4f): Mtr2x2d :+AD0- new Mtr2x2d(m.val00, m.val01, m.val10, m.val11)+ADs-
    public static function operator implicit(m: Mtr2x2d): Mtr3x4f :+AD0- new Mtr3x4f(m.val00, m.val01, 0.0, 0.0, m.val10, m.val11, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)+ADs-
    
    public static function operator implicit(m: Mtr4x3f): Mtr2x2d :+AD0- new Mtr2x2d(m.val00, m.val01, m.val10, m.val11)+ADs-
    public static function operator implicit(m: Mtr2x2d): Mtr4x3f :+AD0- new Mtr4x3f(m.val00, m.val01, 0.0, m.val10, m.val11, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)+ADs-
    
  end+ADs-
  Mtr2d +AD0- Mtr2x2d+ADs-
  
  Mtr3x3d +AD0- record
    public val00, val10, val20: double+ADs-
    public val01, val11, val21: double+ADs-
    public val02, val12, val22: double+ADs-
    
    public constructor(val00, val01, val02, val10, val11, val12, val20, val21, val22: double)+ADs-
    begin
      self.val00 :+AD0- val00+ADs-
      self.val01 :+AD0- val01+ADs-
      self.val02 :+AD0- val02+ADs-
      self.val10 :+AD0- val10+ADs-
      self.val11 :+AD0- val11+ADs-
      self.val12 :+AD0- val12+ADs-
      self.val20 :+AD0- val20+ADs-
      self.val21 :+AD0- val21+ADs-
      self.val22 :+AD0- val22+ADs-
    end+ADs-
    
    private function GetValAt(y,x: integer): double+ADs-
    begin
      if cardinal(x) +AD4- 2 then raise new IndexOutOfRangeException('+BBgEPQQ0BDUEOgRB- +ACI-X+ACI- +BDQEPgQ7BDYENQQ9- +BDgEPAQ1BEIETA- +BDcEPQQwBEcENQQ9BDgENQ- 0..2')+ADs-
      if cardinal(y) +AD4- 2 then raise new IndexOutOfRangeException('+BBgEPQQ0BDUEOgRB- +ACI-Y+ACI- +BDQEPgQ7BDYENQQ9- +BDgEPAQ1BEIETA- +BDcEPQQwBEcENQQ9BDgENQ- 0..2')+ADs-
      var ptr: +AF4-double :+AD0- pointer(new IntPtr(+AEA-self) +- (x+ACo-3 +- y) +ACo- 8 )+ADs-
      Result :+AD0- ptr+AF4AOw-
    end+ADs-
    private procedure SetValAt(y,x: integer+ADs- val: double)+ADs-
    begin
      if cardinal(x) +AD4- 2 then raise new IndexOutOfRangeException('+BBgEPQQ0BDUEOgRB- +ACI-X+ACI- +BDQEPgQ7BDYENQQ9- +BDgEPAQ1BEIETA- +BDcEPQQwBEcENQQ9BDgENQ- 0..2')+ADs-
      if cardinal(y) +AD4- 2 then raise new IndexOutOfRangeException('+BBgEPQQ0BDUEOgRB- +ACI-Y+ACI- +BDQEPgQ7BDYENQQ9- +BDgEPAQ1BEIETA- +BDcEPQQwBEcENQQ9BDgENQ- 0..2')+ADs-
      var ptr: +AF4-double :+AD0- pointer(new IntPtr(+AEA-self) +- (x+ACo-3 +- y) +ACo- 8 )+ADs-
      ptr+AF4- :+AD0- val+ADs-
    end+ADs-
    public property val+AFs-y,x: integer+AF0-: double read GetValAt write SetValAt+ADs- default+ADs-
    
    public static property Identity: Mtr3x3d read new Mtr3x3d(1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0)+ADs-
    
    public property Row0: Vec3d read new Vec3d(self.val00, self.val01, self.val02) write begin self.val00 :+AD0- value.val0+ADs- self.val01 :+AD0- value.val1+ADs- self.val02 :+AD0- value.val2+ADs- end+ADs-
    public property Row1: Vec3d read new Vec3d(self.val10, self.val11, self.val12) write begin self.val10 :+AD0- value.val0+ADs- self.val11 :+AD0- value.val1+ADs- self.val12 :+AD0- value.val2+ADs- end+ADs-
    public property Row2: Vec3d read new Vec3d(self.val20, self.val21, self.val22) write begin self.val20 :+AD0- value.val0+ADs- self.val21 :+AD0- value.val1+ADs- self.val22 :+AD0- value.val2+ADs- end+ADs-
    public property Row+AFs-y: integer+AF0-: Vec3d read y+AD0-0?Row0:y+AD0-1?Row1:y+AD0-2?Row2:Arr+ACYAPA-Vec3d+AD4AWw-y+AF0- write
    case y of
      0: Row0 :+AD0- value+ADs-
      1: Row1 :+AD0- value+ADs-
      2: Row2 :+AD0- value+ADs-
      else raise new IndexOutOfRangeException('+BB0EPgQ8BDUEQA- +BEEEQgRABD4ERwQ6BDg- +BDQEPgQ7BDYENQQ9- +BDgEPAQ1BEIETA- +BDcEPQQwBEcENQQ9BDgENQ- 0..2')+ADs-
    end+ADs-
    
    public property Col0: Vec3d read new Vec3d(self.val00, self.val10, self.val20) write begin self.val00 :+AD0- value.val0+ADs- self.val10 :+AD0- value.val1+ADs- self.val20 :+AD0- value.val2+ADs- end+ADs-
    public property Col1: Vec3d read new Vec3d(self.val01, self.val11, self.val21) write begin self.val01 :+AD0- value.val0+ADs- self.val11 :+AD0- value.val1+ADs- self.val21 :+AD0- value.val2+ADs- end+ADs-
    public property Col2: Vec3d read new Vec3d(self.val02, self.val12, self.val22) write begin self.val02 :+AD0- value.val0+ADs- self.val12 :+AD0- value.val1+ADs- self.val22 :+AD0- value.val2+ADs- end+ADs-
    public property Col+AFs-x: integer+AF0-: Vec3d read x+AD0-0?Col0:x+AD0-1?Col1:x+AD0-2?Col2:Arr+ACYAPA-Vec3d+AD4AWw-x+AF0- write
    case x of
      0: Col0 :+AD0- value+ADs-
      1: Col1 :+AD0- value+ADs-
      2: Col2 :+AD0- value+ADs-
      else raise new IndexOutOfRangeException('+BB0EPgQ8BDUEQA- +BEEEQgQ+BDsEMQRGBDA- +BDQEPgQ7BDYENQQ9- +BDgEPAQ1BEIETA- +BDcEPQQwBEcENQQ9BDgENQ- 0..2')+ADs-
    end+ADs-
    
    public property ColPtr0: +AF4-Vec3d read pointer(IntPtr(pointer(+AEA-self)) +- 0)+ADs-
    public property ColPtr1: +AF4-Vec3d read pointer(IntPtr(pointer(+AEA-self)) +- 24)+ADs-
    public property ColPtr2: +AF4-Vec3d read pointer(IntPtr(pointer(+AEA-self)) +- 48)+ADs-
    public property ColPtr+AFs-x: integer+AF0-: +AF4-Vec3d read pointer(IntPtr(pointer(+AEA-self)) +- x+ACo-24)+ADs-
    
    public static function Scale(k: double): Mtr3x3d :+AD0- new Mtr3x3d(k, 0.0, 0.0, 0.0, k, 0.0, 0.0, 0.0, k)+ADs-
    
    public static function Traslate(X, Y: double): Mtr3x3d :+AD0- new Mtr3x3d(1.0, 0.0, X, 0.0, 1.0, Y, 0.0, 0.0, 1.0)+ADs-
    public static function TraslateTransposed(X, Y: double): Mtr3x3d :+AD0- new Mtr3x3d(1.0, 0.0, 0.0, 0.0, 1.0, 0.0, X, Y, 1.0)+ADs-
    
    public static function RotateXYcw(rot: double): Mtr3x3d+ADs-
    begin
      var sr: double :+AD0- Sin(rot)+ADs-
      var cr: double :+AD0- Cos(rot)+ADs-
      Result :+AD0- new Mtr3x3d(
         cr, +-sr, 0.0,
        -sr,  cr, 0.0,
        0.0, 0.0, 1.0
      )+ADs-
    end+ADs-
    public static function RotateXYccw(rot: double): Mtr3x3d+ADs-
    begin
      var sr: double :+AD0- Sin(rot)+ADs-
      var cr: double :+AD0- Cos(rot)+ADs-
      Result :+AD0- new Mtr3x3d(
         cr, -sr, 0.0,
        +-sr,  cr, 0.0,
        0.0, 0.0, 1.0
      )+ADs-
    end+ADs-
    
    public static function RotateYZcw(rot: double): Mtr3x3d+ADs-
    begin
      var sr: double :+AD0- Sin(rot)+ADs-
      var cr: double :+AD0- Cos(rot)+ADs-
      Result :+AD0- new Mtr3x3d(
        1.0, 0.0, 0.0,
        0.0,  cr, +-sr,
        0.0, -sr,  cr
      )+ADs-
    end+ADs-
    public static function RotateYZccw(rot: double): Mtr3x3d+ADs-
    begin
      var sr: double :+AD0- Sin(rot)+ADs-
      var cr: double :+AD0- Cos(rot)+ADs-
      Result :+AD0- new Mtr3x3d(
        1.0, 0.0, 0.0,
        0.0,  cr, -sr,
        0.0, +-sr,  cr
      )+ADs-
    end+ADs-
    
    public static function RotateZXcw(rot: double): Mtr3x3d+ADs-
    begin
      var sr: double :+AD0- Sin(rot)+ADs-
      var cr: double :+AD0- Cos(rot)+ADs-
      Result :+AD0- new Mtr3x3d(
         cr, 0.0, -sr,
        0.0, 1.0, 0.0,
        +-sr, 0.0,  cr
      )+ADs-
    end+ADs-
    public static function RotateZXccw(rot: double): Mtr3x3d+ADs-
    begin
      var sr: double :+AD0- Sin(rot)+ADs-
      var cr: double :+AD0- Cos(rot)+ADs-
      Result :+AD0- new Mtr3x3d(
         cr, 0.0, +-sr,
        0.0, 1.0, 0.0,
        -sr, 0.0,  cr
      )+ADs-
    end+ADs-
    
    public static function Rotate3Dcw(u: Vec3d+ADs- rot: double): Mtr3x3d+ADs-
    begin
      var k1 :+AD0- Sin(rot)+ADs-
      var k2 :+AD0- 2+ACo-Sqr(Sin(rot/2))+ADs-
      
      Result.val00 :+AD0- 1 +- k2+ACo-( -u.val2+ACo-u.val2 - u.val1+ACo-u.val1 )+ADs-
      Result.val01 :+AD0- k1+ACo-u.val2 +- k2+ACo-( u.val1+ACo-u.val0 )+ADs-
      Result.val02 :+AD0- -k1+ACo-u.val1 +- k2+ACo-( u.val2+ACo-u.val0 )+ADs-
      Result.val10 :+AD0- -k1+ACo-u.val2 +- k2+ACo-( u.val0+ACo-u.val1 )+ADs-
      Result.val11 :+AD0- 1 +- k2+ACo-( -u.val2+ACo-u.val2 - u.val0+ACo-u.val0 )+ADs-
      Result.val12 :+AD0- k1+ACo-u.val0 +- k2+ACo-( u.val2+ACo-u.val1 )+ADs-
      Result.val20 :+AD0- k1+ACo-u.val1 +- k2+ACo-( u.val0+ACo-u.val2 )+ADs-
      Result.val21 :+AD0- -k1+ACo-u.val0 +- k2+ACo-( u.val1+ACo-u.val2 )+ADs-
      Result.val22 :+AD0- 1 +- k2+ACo-( -u.val1+ACo-u.val1 - u.val0+ACo-u.val0 )+ADs-
      
    end+ADs-
    
    public static function Rotate3Dccw(u: Vec3d+ADs- rot: double): Mtr3x3d+ADs-
    begin
      var k1 :+AD0- Sin(rot)+ADs-
      var k2 :+AD0- 2+ACo-Sqr(Sin(rot/2))+ADs-
      
      Result.val00 :+AD0- 1 +- k2+ACo-( -u.val2+ACo-u.val2 - u.val1+ACo-u.val1 )+ADs-
      Result.val01 :+AD0- -k1+ACo-u.val2 +- k2+ACo-( u.val1+ACo-u.val0 )+ADs-
      Result.val02 :+AD0- k1+ACo-u.val1 +- k2+ACo-( u.val2+ACo-u.val0 )+ADs-
      Result.val10 :+AD0- k1+ACo-u.val2 +- k2+ACo-( u.val0+ACo-u.val1 )+ADs-
      Result.val11 :+AD0- 1 +- k2+ACo-( -u.val2+ACo-u.val2 - u.val0+ACo-u.val0 )+ADs-
      Result.val12 :+AD0- -k1+ACo-u.val0 +- k2+ACo-( u.val2+ACo-u.val1 )+ADs-
      Result.val20 :+AD0- -k1+ACo-u.val1 +- k2+ACo-( u.val0+ACo-u.val2 )+ADs-
      Result.val21 :+AD0- k1+ACo-u.val0 +- k2+ACo-( u.val1+ACo-u.val2 )+ADs-
      Result.val22 :+AD0- 1 +- k2+ACo-( -u.val1+ACo-u.val1 - u.val0+ACo-u.val0 )+ADs-
      
    end+ADs-
    
    public function ToString: string+ADs- override+ADs-
    begin
      var res :+AD0- new StringBuilder+ADs-
      
      var ElStrs :+AD0- new string+AFs-3,3+AF0AOw-
      for var y :+AD0- 0 to 3-1 do
        for var x :+AD0- 0 to 3-1 do
          ElStrs+AFs-y,x+AF0- :+AD0- (Sign(val+AFs-y,x+AF0-)+AD0--1?'-':'+-') +- Abs(val+AFs-y,x+AF0-).ToString('f2')+ADs-
      var MtrElTextW :+AD0- ElStrs.OfType+ACYAPA-string+AD4-.Max(s-+AD4-s.Length)+ADs-
      var PrintlnMtrW :+AD0- MtrElTextW+ACo-3 +- 6+ADs- // +-2+ACo-(Width-1) +- 2+ADs-
      
      res +-+AD0- '+JQw-'+ADs-
      res.Append(+ACM-32, PrintlnMtrW)+ADs-
      res +-+AD0- '+JRA-'+ACM-10+ADs-
      res +-+AD0- '+JQI- '+ADs-
      res +-+AD0- ElStrs+AFs-0,0+AF0-.PadLeft(MtrElTextW)+ADs-
      res +-+AD0- ', '+ADs-
      res +-+AD0- ElStrs+AFs-0,1+AF0-.PadLeft(MtrElTextW)+ADs-
      res +-+AD0- ', '+ADs-
      res +-+AD0- ElStrs+AFs-0,2+AF0-.PadLeft(MtrElTextW)+ADs-
      res +-+AD0- ' +JQI-'+ACM-10+ADs-
      res +-+AD0- '+JQI- '+ADs-
      res +-+AD0- ElStrs+AFs-1,0+AF0-.PadLeft(MtrElTextW)+ADs-
      res +-+AD0- ', '+ADs-
      res +-+AD0- ElStrs+AFs-1,1+AF0-.PadLeft(MtrElTextW)+ADs-
      res +-+AD0- ', '+ADs-
      res +-+AD0- ElStrs+AFs-1,2+AF0-.PadLeft(MtrElTextW)+ADs-
      res +-+AD0- ' +JQI-'+ACM-10+ADs-
      res +-+AD0- '+JQI- '+ADs-
      res +-+AD0- ElStrs+AFs-2,0+AF0-.PadLeft(MtrElTextW)+ADs-
      res +-+AD0- ', '+ADs-
      res +-+AD0- ElStrs+AFs-2,1+AF0-.PadLeft(MtrElTextW)+ADs-
      res +-+AD0- ', '+ADs-
      res +-+AD0- ElStrs+AFs-2,2+AF0-.PadLeft(MtrElTextW)+ADs-
      res +-+AD0- ' +JQI-'+ACM-10+ADs-
      res +-+AD0- '+JRQ-'+ADs-
      res.Append(+ACM-32, PrintlnMtrW)+ADs-
      res +-+AD0- '+JRg-'+ADs-
      
      Result :+AD0- res.ToString+ADs-
    end+ADs-
    
    public function Println: Mtr3x3d+ADs-
    begin
      Writeln(self.ToString)+ADs-
      Result :+AD0- self+ADs-
    end+ADs-
    
    public static function operator+ACo-(m: Mtr3x3d+ADs- v: Vec3d): Vec3d :+AD0- new Vec3d(m.val00+ACo-v.val0+-m.val01+ACo-v.val1+-m.val02+ACo-v.val2, m.val10+ACo-v.val0+-m.val11+ACo-v.val1+-m.val12+ACo-v.val2, m.val20+ACo-v.val0+-m.val21+ACo-v.val1+-m.val22+ACo-v.val2)+ADs-
    public static function operator+ACo-(v: Vec3d+ADs- m: Mtr3x3d): Vec3d :+AD0- new Vec3d(m.val00+ACo-v.val0+-m.val10+ACo-v.val1+-m.val20+ACo-v.val2, m.val01+ACo-v.val0+-m.val11+ACo-v.val1+-m.val21+ACo-v.val2, m.val02+ACo-v.val0+-m.val12+ACo-v.val1+-m.val22+ACo-v.val2)+ADs-
    
    public static function operator implicit(m: Mtr2x2f): Mtr3x3d :+AD0- new Mtr3x3d(m.val00, m.val01, 0.0, m.val10, m.val11, 0.0, 0.0, 0.0, 0.0)+ADs-
    public static function operator implicit(m: Mtr3x3d): Mtr2x2f :+AD0- new Mtr2x2f(m.val00, m.val01, m.val10, m.val11)+ADs-
    
    public static function operator implicit(m: Mtr3x3f): Mtr3x3d :+AD0- new Mtr3x3d(m.val00, m.val01, m.val02, m.val10, m.val11, m.val12, m.val20, m.val21, m.val22)+ADs-
    public static function operator implicit(m: Mtr3x3d): Mtr3x3f :+AD0- new Mtr3x3f(m.val00, m.val01, m.val02, m.val10, m.val11, m.val12, m.val20, m.val21, m.val22)+ADs-
    
    public static function operator implicit(m: Mtr4x4f): Mtr3x3d :+AD0- new Mtr3x3d(m.val00, m.val01, m.val02, m.val10, m.val11, m.val12, m.val20, m.val21, m.val22)+ADs-
    public static function operator implicit(m: Mtr3x3d): Mtr4x4f :+AD0- new Mtr4x4f(m.val00, m.val01, m.val02, 0.0, m.val10, m.val11, m.val12, 0.0, m.val20, m.val21, m.val22, 0.0, 0.0, 0.0, 0.0, 0.0)+ADs-
    
    public static function operator implicit(m: Mtr2x3f): Mtr3x3d :+AD0- new Mtr3x3d(m.val00, m.val01, m.val02, m.val10, m.val11, m.val12, 0.0, 0.0, 0.0)+ADs-
    public static function operator implicit(m: Mtr3x3d): Mtr2x3f :+AD0- new Mtr2x3f(m.val00, m.val01, m.val02, m.val10, m.val11, m.val12)+ADs-
    
    public static function operator implicit(m: Mtr3x2f): Mtr3x3d :+AD0- new Mtr3x3d(m.val00, m.val01, 0.0, m.val10, m.val11, 0.0, m.val20, m.val21, 0.0)+ADs-
    public static function operator implicit(m: Mtr3x3d): Mtr3x2f :+AD0- new Mtr3x2f(m.val00, m.val01, m.val10, m.val11, m.val20, m.val21)+ADs-
    
    public static function operator implicit(m: Mtr2x4f): Mtr3x3d :+AD0- new Mtr3x3d(m.val00, m.val01, m.val02, m.val10, m.val11, m.val12, 0.0, 0.0, 0.0)+ADs-
    public static function operator implicit(m: Mtr3x3d): Mtr2x4f :+AD0- new Mtr2x4f(m.val00, m.val01, m.val02, 0.0, m.val10, m.val11, m.val12, 0.0)+ADs-
    
    public static function operator implicit(m: Mtr4x2f): Mtr3x3d :+AD0- new Mtr3x3d(m.val00, m.val01, 0.0, m.val10, m.val11, 0.0, m.val20, m.val21, 0.0)+ADs-
    public static function operator implicit(m: Mtr3x3d): Mtr4x2f :+AD0- new Mtr4x2f(m.val00, m.val01, m.val10, m.val11, m.val20, m.val21, 0.0, 0.0)+ADs-
    
    public static function operator implicit(m: Mtr3x4f): Mtr3x3d :+AD0- new Mtr3x3d(m.val00, m.val01, m.val02, m.val10, m.val11, m.val12, m.val20, m.val21, m.val22)+ADs-
    public static function operator implicit(m: Mtr3x3d): Mtr3x4f :+AD0- new Mtr3x4f(m.val00, m.val01, m.val02, 0.0, m.val10, m.val11, m.val12, 0.0, m.val20, m.val21, m.val22, 0.0)+ADs-
    
    public static function operator implicit(m: Mtr4x3f): Mtr3x3d :+AD0- new Mtr3x3d(m.val00, m.val01, m.val02, m.val10, m.val11, m.val12, m.val20, m.val21, m.val22)+ADs-
    public static function operator implicit(m: Mtr3x3d): Mtr4x3f :+AD0- new Mtr4x3f(m.val00, m.val01, m.val02, m.val10, m.val11, m.val12, m.val20, m.val21, m.val22, 0.0, 0.0, 0.0)+ADs-
    
    public static function operator implicit(m: Mtr2x2d): Mtr3x3d :+AD0- new Mtr3x3d(m.val00, m.val01, 0.0, m.val10, m.val11, 0.0, 0.0, 0.0, 0.0)+ADs-
    public static function operator implicit(m: Mtr3x3d): Mtr2x2d :+AD0- new Mtr2x2d(m.val00, m.val01, m.val10, m.val11)+ADs-
    
  end+ADs-
  Mtr3d +AD0- Mtr3x3d+ADs-
  
  Mtr4x4d +AD0- record
    public val00, val10, val20, val30: double+ADs-
    public val01, val11, val21, val31: double+ADs-
    public val02, val12, val22, val32: double+ADs-
    public val03, val13, val23, val33: double+ADs-
    
    public constructor(val00, val01, val02, val03, val10, val11, val12, val13, val20, val21, val22, val23, val30, val31, val32, val33: double)+ADs-
    begin
      self.val00 :+AD0- val00+ADs-
      self.val01 :+AD0- val01+ADs-
      self.val02 :+AD0- val02+ADs-
      self.val03 :+AD0- val03+ADs-
      self.val10 :+AD0- val10+ADs-
      self.val11 :+AD0- val11+ADs-
      self.val12 :+AD0- val12+ADs-
      self.val13 :+AD0- val13+ADs-
      self.val20 :+AD0- val20+ADs-
      self.val21 :+AD0- val21+ADs-
      self.val22 :+AD0- val22+ADs-
      self.val23 :+AD0- val23+ADs-
      self.val30 :+AD0- val30+ADs-
      self.val31 :+AD0- val31+ADs-
      self.val32 :+AD0- val32+ADs-
      self.val33 :+AD0- val33+ADs-
    end+ADs-
    
    private function GetValAt(y,x: integer): double+ADs-
    begin
      if cardinal(x) +AD4- 3 then raise new IndexOutOfRangeException('+BBgEPQQ0BDUEOgRB- +ACI-X+ACI- +BDQEPgQ7BDYENQQ9- +BDgEPAQ1BEIETA- +BDcEPQQwBEcENQQ9BDgENQ- 0..3')+ADs-
      if cardinal(y) +AD4- 3 then raise new IndexOutOfRangeException('+BBgEPQQ0BDUEOgRB- +ACI-Y+ACI- +BDQEPgQ7BDYENQQ9- +BDgEPAQ1BEIETA- +BDcEPQQwBEcENQQ9BDgENQ- 0..3')+ADs-
      var ptr: +AF4-double :+AD0- pointer(new IntPtr(+AEA-self) +- (x+ACo-4 +- y) +ACo- 8 )+ADs-
      Result :+AD0- ptr+AF4AOw-
    end+ADs-
    private procedure SetValAt(y,x: integer+ADs- val: double)+ADs-
    begin
      if cardinal(x) +AD4- 3 then raise new IndexOutOfRangeException('+BBgEPQQ0BDUEOgRB- +ACI-X+ACI- +BDQEPgQ7BDYENQQ9- +BDgEPAQ1BEIETA- +BDcEPQQwBEcENQQ9BDgENQ- 0..3')+ADs-
      if cardinal(y) +AD4- 3 then raise new IndexOutOfRangeException('+BBgEPQQ0BDUEOgRB- +ACI-Y+ACI- +BDQEPgQ7BDYENQQ9- +BDgEPAQ1BEIETA- +BDcEPQQwBEcENQQ9BDgENQ- 0..3')+ADs-
      var ptr: +AF4-double :+AD0- pointer(new IntPtr(+AEA-self) +- (x+ACo-4 +- y) +ACo- 8 )+ADs-
      ptr+AF4- :+AD0- val+ADs-
    end+ADs-
    public property val+AFs-y,x: integer+AF0-: double read GetValAt write SetValAt+ADs- default+ADs-
    
    public static property Identity: Mtr4x4d read new Mtr4x4d(1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0)+ADs-
    
    public property Row0: Vec4d read new Vec4d(self.val00, self.val01, self.val02, self.val03) write begin self.val00 :+AD0- value.val0+ADs- self.val01 :+AD0- value.val1+ADs- self.val02 :+AD0- value.val2+ADs- self.val03 :+AD0- value.val3+ADs- end+ADs-
    public property Row1: Vec4d read new Vec4d(self.val10, self.val11, self.val12, self.val13) write begin self.val10 :+AD0- value.val0+ADs- self.val11 :+AD0- value.val1+ADs- self.val12 :+AD0- value.val2+ADs- self.val13 :+AD0- value.val3+ADs- end+ADs-
    public property Row2: Vec4d read new Vec4d(self.val20, self.val21, self.val22, self.val23) write begin self.val20 :+AD0- value.val0+ADs- self.val21 :+AD0- value.val1+ADs- self.val22 :+AD0- value.val2+ADs- self.val23 :+AD0- value.val3+ADs- end+ADs-
    public property Row3: Vec4d read new Vec4d(self.val30, self.val31, self.val32, self.val33) write begin self.val30 :+AD0- value.val0+ADs- self.val31 :+AD0- value.val1+ADs- self.val32 :+AD0- value.val2+ADs- self.val33 :+AD0- value.val3+ADs- end+ADs-
    public property Row+AFs-y: integer+AF0-: Vec4d read y+AD0-0?Row0:y+AD0-1?Row1:y+AD0-2?Row2:y+AD0-3?Row3:Arr+ACYAPA-Vec4d+AD4AWw-y+AF0- write
    case y of
      0: Row0 :+AD0- value+ADs-
      1: Row1 :+AD0- value+ADs-
      2: Row2 :+AD0- value+ADs-
      3: Row3 :+AD0- value+ADs-
      else raise new IndexOutOfRangeException('+BB0EPgQ8BDUEQA- +BEEEQgRABD4ERwQ6BDg- +BDQEPgQ7BDYENQQ9- +BDgEPAQ1BEIETA- +BDcEPQQwBEcENQQ9BDgENQ- 0..3')+ADs-
    end+ADs-
    
    public property Col0: Vec4d read new Vec4d(self.val00, self.val10, self.val20, self.val30) write begin self.val00 :+AD0- value.val0+ADs- self.val10 :+AD0- value.val1+ADs- self.val20 :+AD0- value.val2+ADs- self.val30 :+AD0- value.val3+ADs- end+ADs-
    public property Col1: Vec4d read new Vec4d(self.val01, self.val11, self.val21, self.val31) write begin self.val01 :+AD0- value.val0+ADs- self.val11 :+AD0- value.val1+ADs- self.val21 :+AD0- value.val2+ADs- self.val31 :+AD0- value.val3+ADs- end+ADs-
    public property Col2: Vec4d read new Vec4d(self.val02, self.val12, self.val22, self.val32) write begin self.val02 :+AD0- value.val0+ADs- self.val12 :+AD0- value.val1+ADs- self.val22 :+AD0- value.val2+ADs- self.val32 :+AD0- value.val3+ADs- end+ADs-
    public property Col3: Vec4d read new Vec4d(self.val03, self.val13, self.val23, self.val33) write begin self.val03 :+AD0- value.val0+ADs- self.val13 :+AD0- value.val1+ADs- self.val23 :+AD0- value.val2+ADs- self.val33 :+AD0- value.val3+ADs- end+ADs-
    public property Col+AFs-x: integer+AF0-: Vec4d read x+AD0-0?Col0:x+AD0-1?Col1:x+AD0-2?Col2:x+AD0-3?Col3:Arr+ACYAPA-Vec4d+AD4AWw-x+AF0- write
    case x of
      0: Col0 :+AD0- value+ADs-
      1: Col1 :+AD0- value+ADs-
      2: Col2 :+AD0- value+ADs-
      3: Col3 :+AD0- value+ADs-
      else raise new IndexOutOfRangeException('+BB0EPgQ8BDUEQA- +BEEEQgQ+BDsEMQRGBDA- +BDQEPgQ7BDYENQQ9- +BDgEPAQ1BEIETA- +BDcEPQQwBEcENQQ9BDgENQ- 0..3')+ADs-
    end+ADs-
    
    public property ColPtr0: +AF4-Vec4d read pointer(IntPtr(pointer(+AEA-self)) +- 0)+ADs-
    public property ColPtr1: +AF4-Vec4d read pointer(IntPtr(pointer(+AEA-self)) +- 32)+ADs-
    public property ColPtr2: +AF4-Vec4d read pointer(IntPtr(pointer(+AEA-self)) +- 64)+ADs-
    public property ColPtr3: +AF4-Vec4d read pointer(IntPtr(pointer(+AEA-self)) +- 96)+ADs-
    public property ColPtr+AFs-x: integer+AF0-: +AF4-Vec4d read pointer(IntPtr(pointer(+AEA-self)) +- x+ACo-32)+ADs-
    
    public static function Scale(k: double): Mtr4x4d :+AD0- new Mtr4x4d(k, 0.0, 0.0, 0.0, 0.0, k, 0.0, 0.0, 0.0, 0.0, k, 0.0, 0.0, 0.0, 0.0, k)+ADs-
    
    public static function Traslate(X, Y, Z: double): Mtr4x4d :+AD0- new Mtr4x4d(1.0, 0.0, 0.0, X, 0.0, 1.0, 0.0, Y, 0.0, 0.0, 1.0, Z, 0.0, 0.0, 0.0, 1.0)+ADs-
    public static function TraslateTransposed(X, Y, Z: double): Mtr4x4d :+AD0- new Mtr4x4d(1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, X, Y, Z, 1.0)+ADs-
    
    public static function RotateXYcw(rot: double): Mtr4x4d+ADs-
    begin
      var sr: double :+AD0- Sin(rot)+ADs-
      var cr: double :+AD0- Cos(rot)+ADs-
      Result :+AD0- new Mtr4x4d(
         cr, +-sr, 0.0, 0.0,
        -sr,  cr, 0.0, 0.0,
        0.0, 0.0, 1.0, 0.0,
        0.0, 0.0, 0.0, 1.0
      )+ADs-
    end+ADs-
    public static function RotateXYccw(rot: double): Mtr4x4d+ADs-
    begin
      var sr: double :+AD0- Sin(rot)+ADs-
      var cr: double :+AD0- Cos(rot)+ADs-
      Result :+AD0- new Mtr4x4d(
         cr, -sr, 0.0, 0.0,
        +-sr,  cr, 0.0, 0.0,
        0.0, 0.0, 1.0, 0.0,
        0.0, 0.0, 0.0, 1.0
      )+ADs-
    end+ADs-
    
    public static function RotateYZcw(rot: double): Mtr4x4d+ADs-
    begin
      var sr: double :+AD0- Sin(rot)+ADs-
      var cr: double :+AD0- Cos(rot)+ADs-
      Result :+AD0- new Mtr4x4d(
        1.0, 0.0, 0.0, 0.0,
        0.0,  cr, +-sr, 0.0,
        0.0, -sr,  cr, 0.0,
        0.0, 0.0, 0.0, 1.0
      )+ADs-
    end+ADs-
    public static function RotateYZccw(rot: double): Mtr4x4d+ADs-
    begin
      var sr: double :+AD0- Sin(rot)+ADs-
      var cr: double :+AD0- Cos(rot)+ADs-
      Result :+AD0- new Mtr4x4d(
        1.0, 0.0, 0.0, 0.0,
        0.0,  cr, -sr, 0.0,
        0.0, +-sr,  cr, 0.0,
        0.0, 0.0, 0.0, 1.0
      )+ADs-
    end+ADs-
    
    public static function RotateZXcw(rot: double): Mtr4x4d+ADs-
    begin
      var sr: double :+AD0- Sin(rot)+ADs-
      var cr: double :+AD0- Cos(rot)+ADs-
      Result :+AD0- new Mtr4x4d(
         cr, 0.0, -sr, 0.0,
        0.0, 1.0, 0.0, 0.0,
        +-sr, 0.0,  cr, 0.0,
        0.0, 0.0, 0.0, 1.0
      )+ADs-
    end+ADs-
    public static function RotateZXccw(rot: double): Mtr4x4d+ADs-
    begin
      var sr: double :+AD0- Sin(rot)+ADs-
      var cr: double :+AD0- Cos(rot)+ADs-
      Result :+AD0- new Mtr4x4d(
         cr, 0.0, +-sr, 0.0,
        0.0, 1.0, 0.0, 0.0,
        -sr, 0.0,  cr, 0.0,
        0.0, 0.0, 0.0, 1.0
      )+ADs-
    end+ADs-
    
    public static function Rotate3Dcw(u: Vec3d+ADs- rot: double): Mtr4x4d+ADs-
    begin
      var k1 :+AD0- Sin(rot)+ADs-
      var k2 :+AD0- 2+ACo-Sqr(Sin(rot/2))+ADs-
      
      Result.val00 :+AD0- 1 +- k2+ACo-( -u.val2+ACo-u.val2 - u.val1+ACo-u.val1 )+ADs-
      Result.val01 :+AD0- k1+ACo-u.val2 +- k2+ACo-( u.val1+ACo-u.val0 )+ADs-
      Result.val02 :+AD0- -k1+ACo-u.val1 +- k2+ACo-( u.val2+ACo-u.val0 )+ADs-
      Result.val10 :+AD0- -k1+ACo-u.val2 +- k2+ACo-( u.val0+ACo-u.val1 )+ADs-
      Result.val11 :+AD0- 1 +- k2+ACo-( -u.val2+ACo-u.val2 - u.val0+ACo-u.val0 )+ADs-
      Result.val12 :+AD0- k1+ACo-u.val0 +- k2+ACo-( u.val2+ACo-u.val1 )+ADs-
      Result.val20 :+AD0- k1+ACo-u.val1 +- k2+ACo-( u.val0+ACo-u.val2 )+ADs-
      Result.val21 :+AD0- -k1+ACo-u.val0 +- k2+ACo-( u.val1+ACo-u.val2 )+ADs-
      Result.val22 :+AD0- 1 +- k2+ACo-( -u.val1+ACo-u.val1 - u.val0+ACo-u.val0 )+ADs-
      
      Result.val33 :+AD0- 1+ADs-
    end+ADs-
    
    public static function Rotate3Dccw(u: Vec3d+ADs- rot: double): Mtr4x4d+ADs-
    begin
      var k1 :+AD0- Sin(rot)+ADs-
      var k2 :+AD0- 2+ACo-Sqr(Sin(rot/2))+ADs-
      
      Result.val00 :+AD0- 1 +- k2+ACo-( -u.val2+ACo-u.val2 - u.val1+ACo-u.val1 )+ADs-
      Result.val01 :+AD0- -k1+ACo-u.val2 +- k2+ACo-( u.val1+ACo-u.val0 )+ADs-
      Result.val02 :+AD0- k1+ACo-u.val1 +- k2+ACo-( u.val2+ACo-u.val0 )+ADs-
      Result.val10 :+AD0- k1+ACo-u.val2 +- k2+ACo-( u.val0+ACo-u.val1 )+ADs-
      Result.val11 :+AD0- 1 +- k2+ACo-( -u.val2+ACo-u.val2 - u.val0+ACo-u.val0 )+ADs-
      Result.val12 :+AD0- -k1+ACo-u.val0 +- k2+ACo-( u.val2+ACo-u.val1 )+ADs-
      Result.val20 :+AD0- -k1+ACo-u.val1 +- k2+ACo-( u.val0+ACo-u.val2 )+ADs-
      Result.val21 :+AD0- k1+ACo-u.val0 +- k2+ACo-( u.val1+ACo-u.val2 )+ADs-
      Result.val22 :+AD0- 1 +- k2+ACo-( -u.val1+ACo-u.val1 - u.val0+ACo-u.val0 )+ADs-
      
      Result.val33 :+AD0- 1+ADs-
    end+ADs-
    
    public function ToString: string+ADs- override+ADs-
    begin
      var res :+AD0- new StringBuilder+ADs-
      
      var ElStrs :+AD0- new string+AFs-4,4+AF0AOw-
      for var y :+AD0- 0 to 4-1 do
        for var x :+AD0- 0 to 4-1 do
          ElStrs+AFs-y,x+AF0- :+AD0- (Sign(val+AFs-y,x+AF0-)+AD0--1?'-':'+-') +- Abs(val+AFs-y,x+AF0-).ToString('f2')+ADs-
      var MtrElTextW :+AD0- ElStrs.OfType+ACYAPA-string+AD4-.Max(s-+AD4-s.Length)+ADs-
      var PrintlnMtrW :+AD0- MtrElTextW+ACo-4 +- 8+ADs- // +-2+ACo-(Width-1) +- 2+ADs-
      
      res +-+AD0- '+JQw-'+ADs-
      res.Append(+ACM-32, PrintlnMtrW)+ADs-
      res +-+AD0- '+JRA-'+ACM-10+ADs-
      res +-+AD0- '+JQI- '+ADs-
      res +-+AD0- ElStrs+AFs-0,0+AF0-.PadLeft(MtrElTextW)+ADs-
      res +-+AD0- ', '+ADs-
      res +-+AD0- ElStrs+AFs-0,1+AF0-.PadLeft(MtrElTextW)+ADs-
      res +-+AD0- ', '+ADs-
      res +-+AD0- ElStrs+AFs-0,2+AF0-.PadLeft(MtrElTextW)+ADs-
      res +-+AD0- ', '+ADs-
      res +-+AD0- ElStrs+AFs-0,3+AF0-.PadLeft(MtrElTextW)+ADs-
      res +-+AD0- ' +JQI-'+ACM-10+ADs-
      res +-+AD0- '+JQI- '+ADs-
      res +-+AD0- ElStrs+AFs-1,0+AF0-.PadLeft(MtrElTextW)+ADs-
      res +-+AD0- ', '+ADs-
      res +-+AD0- ElStrs+AFs-1,1+AF0-.PadLeft(MtrElTextW)+ADs-
      res +-+AD0- ', '+ADs-
      res +-+AD0- ElStrs+AFs-1,2+AF0-.PadLeft(MtrElTextW)+ADs-
      res +-+AD0- ', '+ADs-
      res +-+AD0- ElStrs+AFs-1,3+AF0-.PadLeft(MtrElTextW)+ADs-
      res +-+AD0- ' +JQI-'+ACM-10+ADs-
      res +-+AD0- '+JQI- '+ADs-
      res +-+AD0- ElStrs+AFs-2,0+AF0-.PadLeft(MtrElTextW)+ADs-
      res +-+AD0- ', '+ADs-
      res +-+AD0- ElStrs+AFs-2,1+AF0-.PadLeft(MtrElTextW)+ADs-
      res +-+AD0- ', '+ADs-
      res +-+AD0- ElStrs+AFs-2,2+AF0-.PadLeft(MtrElTextW)+ADs-
      res +-+AD0- ', '+ADs-
      res +-+AD0- ElStrs+AFs-2,3+AF0-.PadLeft(MtrElTextW)+ADs-
      res +-+AD0- ' +JQI-'+ACM-10+ADs-
      res +-+AD0- '+JQI- '+ADs-
      res +-+AD0- ElStrs+AFs-3,0+AF0-.PadLeft(MtrElTextW)+ADs-
      res +-+AD0- ', '+ADs-
      res +-+AD0- ElStrs+AFs-3,1+AF0-.PadLeft(MtrElTextW)+ADs-
      res +-+AD0- ', '+ADs-
      res +-+AD0- ElStrs+AFs-3,2+AF0-.PadLeft(MtrElTextW)+ADs-
      res +-+AD0- ', '+ADs-
      res +-+AD0- ElStrs+AFs-3,3+AF0-.PadLeft(MtrElTextW)+ADs-
      res +-+AD0- ' +JQI-'+ACM-10+ADs-
      res +-+AD0- '+JRQ-'+ADs-
      res.Append(+ACM-32, PrintlnMtrW)+ADs-
      res +-+AD0- '+JRg-'+ADs-
      
      Result :+AD0- res.ToString+ADs-
    end+ADs-
    
    public function Println: Mtr4x4d+ADs-
    begin
      Writeln(self.ToString)+ADs-
      Result :+AD0- self+ADs-
    end+ADs-
    
    public static function operator+ACo-(m: Mtr4x4d+ADs- v: Vec4d): Vec4d :+AD0- new Vec4d(m.val00+ACo-v.val0+-m.val01+ACo-v.val1+-m.val02+ACo-v.val2+-m.val03+ACo-v.val3, m.val10+ACo-v.val0+-m.val11+ACo-v.val1+-m.val12+ACo-v.val2+-m.val13+ACo-v.val3, m.val20+ACo-v.val0+-m.val21+ACo-v.val1+-m.val22+ACo-v.val2+-m.val23+ACo-v.val3, m.val30+ACo-v.val0+-m.val31+ACo-v.val1+-m.val32+ACo-v.val2+-m.val33+ACo-v.val3)+ADs-
    public static function operator+ACo-(v: Vec4d+ADs- m: Mtr4x4d): Vec4d :+AD0- new Vec4d(m.val00+ACo-v.val0+-m.val10+ACo-v.val1+-m.val20+ACo-v.val2+-m.val30+ACo-v.val3, m.val01+ACo-v.val0+-m.val11+ACo-v.val1+-m.val21+ACo-v.val2+-m.val31+ACo-v.val3, m.val02+ACo-v.val0+-m.val12+ACo-v.val1+-m.val22+ACo-v.val2+-m.val32+ACo-v.val3, m.val03+ACo-v.val0+-m.val13+ACo-v.val1+-m.val23+ACo-v.val2+-m.val33+ACo-v.val3)+ADs-
    
    public static function operator implicit(m: Mtr2x2f): Mtr4x4d :+AD0- new Mtr4x4d(m.val00, m.val01, 0.0, 0.0, m.val10, m.val11, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)+ADs-
    public static function operator implicit(m: Mtr4x4d): Mtr2x2f :+AD0- new Mtr2x2f(m.val00, m.val01, m.val10, m.val11)+ADs-
    
    public static function operator implicit(m: Mtr3x3f): Mtr4x4d :+AD0- new Mtr4x4d(m.val00, m.val01, m.val02, 0.0, m.val10, m.val11, m.val12, 0.0, m.val20, m.val21, m.val22, 0.0, 0.0, 0.0, 0.0, 0.0)+ADs-
    public static function operator implicit(m: Mtr4x4d): Mtr3x3f :+AD0- new Mtr3x3f(m.val00, m.val01, m.val02, m.val10, m.val11, m.val12, m.val20, m.val21, m.val22)+ADs-
    
    public static function operator implicit(m: Mtr4x4f): Mtr4x4d :+AD0- new Mtr4x4d(m.val00, m.val01, m.val02, m.val03, m.val10, m.val11, m.val12, m.val13, m.val20, m.val21, m.val22, m.val23, m.val30, m.val31, m.val32, m.val33)+ADs-
    public static function operator implicit(m: Mtr4x4d): Mtr4x4f :+AD0- new Mtr4x4f(m.val00, m.val01, m.val02, m.val03, m.val10, m.val11, m.val12, m.val13, m.val20, m.val21, m.val22, m.val23, m.val30, m.val31, m.val32, m.val33)+ADs-
    
    public static function operator implicit(m: Mtr2x3f): Mtr4x4d :+AD0- new Mtr4x4d(m.val00, m.val01, m.val02, 0.0, m.val10, m.val11, m.val12, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)+ADs-
    public static function operator implicit(m: Mtr4x4d): Mtr2x3f :+AD0- new Mtr2x3f(m.val00, m.val01, m.val02, m.val10, m.val11, m.val12)+ADs-
    
    public static function operator implicit(m: Mtr3x2f): Mtr4x4d :+AD0- new Mtr4x4d(m.val00, m.val01, 0.0, 0.0, m.val10, m.val11, 0.0, 0.0, m.val20, m.val21, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)+ADs-
    public static function operator implicit(m: Mtr4x4d): Mtr3x2f :+AD0- new Mtr3x2f(m.val00, m.val01, m.val10, m.val11, m.val20, m.val21)+ADs-
    
    public static function operator implicit(m: Mtr2x4f): Mtr4x4d :+AD0- new Mtr4x4d(m.val00, m.val01, m.val02, m.val03, m.val10, m.val11, m.val12, m.val13, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)+ADs-
    public static function operator implicit(m: Mtr4x4d): Mtr2x4f :+AD0- new Mtr2x4f(m.val00, m.val01, m.val02, m.val03, m.val10, m.val11, m.val12, m.val13)+ADs-
    
    public static function operator implicit(m: Mtr4x2f): Mtr4x4d :+AD0- new Mtr4x4d(m.val00, m.val01, 0.0, 0.0, m.val10, m.val11, 0.0, 0.0, m.val20, m.val21, 0.0, 0.0, m.val30, m.val31, 0.0, 0.0)+ADs-
    public static function operator implicit(m: Mtr4x4d): Mtr4x2f :+AD0- new Mtr4x2f(m.val00, m.val01, m.val10, m.val11, m.val20, m.val21, m.val30, m.val31)+ADs-
    
    public static function operator implicit(m: Mtr3x4f): Mtr4x4d :+AD0- new Mtr4x4d(m.val00, m.val01, m.val02, m.val03, m.val10, m.val11, m.val12, m.val13, m.val20, m.val21, m.val22, m.val23, 0.0, 0.0, 0.0, 0.0)+ADs-
    public static function operator implicit(m: Mtr4x4d): Mtr3x4f :+AD0- new Mtr3x4f(m.val00, m.val01, m.val02, m.val03, m.val10, m.val11, m.val12, m.val13, m.val20, m.val21, m.val22, m.val23)+ADs-
    
    public static function operator implicit(m: Mtr4x3f): Mtr4x4d :+AD0- new Mtr4x4d(m.val00, m.val01, m.val02, 0.0, m.val10, m.val11, m.val12, 0.0, m.val20, m.val21, m.val22, 0.0, m.val30, m.val31, m.val32, 0.0)+ADs-
    public static function operator implicit(m: Mtr4x4d): Mtr4x3f :+AD0- new Mtr4x3f(m.val00, m.val01, m.val02, m.val10, m.val11, m.val12, m.val20, m.val21, m.val22, m.val30, m.val31, m.val32)+ADs-
    
    public static function operator implicit(m: Mtr2x2d): Mtr4x4d :+AD0- new Mtr4x4d(m.val00, m.val01, 0.0, 0.0, m.val10, m.val11, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)+ADs-
    public static function operator implicit(m: Mtr4x4d): Mtr2x2d :+AD0- new Mtr2x2d(m.val00, m.val01, m.val10, m.val11)+ADs-
    
    public static function operator implicit(m: Mtr3x3d): Mtr4x4d :+AD0- new Mtr4x4d(m.val00, m.val01, m.val02, 0.0, m.val10, m.val11, m.val12, 0.0, m.val20, m.val21, m.val22, 0.0, 0.0, 0.0, 0.0, 0.0)+ADs-
    public static function operator implicit(m: Mtr4x4d): Mtr3x3d :+AD0- new Mtr3x3d(m.val00, m.val01, m.val02, m.val10, m.val11, m.val12, m.val20, m.val21, m.val22)+ADs-
    
  end+ADs-
  Mtr4d +AD0- Mtr4x4d+ADs-
  
  Mtr2x3d +AD0- record
    public val00, val10: double+ADs-
    public val01, val11: double+ADs-
    public val02, val12: double+ADs-
    
    public constructor(val00, val01, val02, val10, val11, val12: double)+ADs-
    begin
      self.val00 :+AD0- val00+ADs-
      self.val01 :+AD0- val01+ADs-
      self.val02 :+AD0- val02+ADs-
      self.val10 :+AD0- val10+ADs-
      self.val11 :+AD0- val11+ADs-
      self.val12 :+AD0- val12+ADs-
    end+ADs-
    
    private function GetValAt(y,x: integer): double+ADs-
    begin
      if cardinal(x) +AD4- 2 then raise new IndexOutOfRangeException('+BBgEPQQ0BDUEOgRB- +ACI-X+ACI- +BDQEPgQ7BDYENQQ9- +BDgEPAQ1BEIETA- +BDcEPQQwBEcENQQ9BDgENQ- 0..2')+ADs-
      if cardinal(y) +AD4- 1 then raise new IndexOutOfRangeException('+BBgEPQQ0BDUEOgRB- +ACI-Y+ACI- +BDQEPgQ7BDYENQQ9- +BDgEPAQ1BEIETA- +BDcEPQQwBEcENQQ9BDgENQ- 0..1')+ADs-
      var ptr: +AF4-double :+AD0- pointer(new IntPtr(+AEA-self) +- (x+ACo-2 +- y) +ACo- 8 )+ADs-
      Result :+AD0- ptr+AF4AOw-
    end+ADs-
    private procedure SetValAt(y,x: integer+ADs- val: double)+ADs-
    begin
      if cardinal(x) +AD4- 2 then raise new IndexOutOfRangeException('+BBgEPQQ0BDUEOgRB- +ACI-X+ACI- +BDQEPgQ7BDYENQQ9- +BDgEPAQ1BEIETA- +BDcEPQQwBEcENQQ9BDgENQ- 0..2')+ADs-
      if cardinal(y) +AD4- 1 then raise new IndexOutOfRangeException('+BBgEPQQ0BDUEOgRB- +ACI-Y+ACI- +BDQEPgQ7BDYENQQ9- +BDgEPAQ1BEIETA- +BDcEPQQwBEcENQQ9BDgENQ- 0..1')+ADs-
      var ptr: +AF4-double :+AD0- pointer(new IntPtr(+AEA-self) +- (x+ACo-2 +- y) +ACo- 8 )+ADs-
      ptr+AF4- :+AD0- val+ADs-
    end+ADs-
    public property val+AFs-y,x: integer+AF0-: double read GetValAt write SetValAt+ADs- default+ADs-
    
    public static property Identity: Mtr2x3d read new Mtr2x3d(1.0, 0.0, 0.0, 0.0, 1.0, 0.0)+ADs-
    
    public property Row0: Vec3d read new Vec3d(self.val00, self.val01, self.val02) write begin self.val00 :+AD0- value.val0+ADs- self.val01 :+AD0- value.val1+ADs- self.val02 :+AD0- value.val2+ADs- end+ADs-
    public property Row1: Vec3d read new Vec3d(self.val10, self.val11, self.val12) write begin self.val10 :+AD0- value.val0+ADs- self.val11 :+AD0- value.val1+ADs- self.val12 :+AD0- value.val2+ADs- end+ADs-
    public property Row+AFs-y: integer+AF0-: Vec3d read y+AD0-0?Row0:y+AD0-1?Row1:Arr+ACYAPA-Vec3d+AD4AWw-y+AF0- write
    case y of
      0: Row0 :+AD0- value+ADs-
      1: Row1 :+AD0- value+ADs-
      else raise new IndexOutOfRangeException('+BB0EPgQ8BDUEQA- +BEEEQgRABD4ERwQ6BDg- +BDQEPgQ7BDYENQQ9- +BDgEPAQ1BEIETA- +BDcEPQQwBEcENQQ9BDgENQ- 0..1')+ADs-
    end+ADs-
    
    public property Col0: Vec2d read new Vec2d(self.val00, self.val10) write begin self.val00 :+AD0- value.val0+ADs- self.val10 :+AD0- value.val1+ADs- end+ADs-
    public property Col1: Vec2d read new Vec2d(self.val01, self.val11) write begin self.val01 :+AD0- value.val0+ADs- self.val11 :+AD0- value.val1+ADs- end+ADs-
    public property Col2: Vec2d read new Vec2d(self.val02, self.val12) write begin self.val02 :+AD0- value.val0+ADs- self.val12 :+AD0- value.val1+ADs- end+ADs-
    public property Col+AFs-x: integer+AF0-: Vec2d read x+AD0-0?Col0:x+AD0-1?Col1:x+AD0-2?Col2:Arr+ACYAPA-Vec2d+AD4AWw-x+AF0- write
    case x of
      0: Col0 :+AD0- value+ADs-
      1: Col1 :+AD0- value+ADs-
      2: Col2 :+AD0- value+ADs-
      else raise new IndexOutOfRangeException('+BB0EPgQ8BDUEQA- +BEEEQgQ+BDsEMQRGBDA- +BDQEPgQ7BDYENQQ9- +BDgEPAQ1BEIETA- +BDcEPQQwBEcENQQ9BDgENQ- 0..2')+ADs-
    end+ADs-
    
    public property ColPtr0: +AF4-Vec3d read pointer(IntPtr(pointer(+AEA-self)) +- 0)+ADs-
    public property ColPtr1: +AF4-Vec3d read pointer(IntPtr(pointer(+AEA-self)) +- 16)+ADs-
    public property ColPtr+AFs-x: integer+AF0-: +AF4-Vec3d read pointer(IntPtr(pointer(+AEA-self)) +- x+ACo-16)+ADs-
    
    public static function Scale(k: double): Mtr2x3d :+AD0- new Mtr2x3d(k, 0.0, 0.0, 0.0, k, 0.0)+ADs-
    
    public static function Traslate(X, Y: double): Mtr2x3d :+AD0- new Mtr2x3d(1.0, 0.0, X, 0.0, 1.0, Y)+ADs-
    public static function TraslateTransposed(X: double): Mtr2x3d :+AD0- new Mtr2x3d(1.0, 0.0, 0.0, X, 1.0, 0.0)+ADs-
    
    public static function RotateXYcw(rot: double): Mtr2x3d+ADs-
    begin
      var sr: double :+AD0- Sin(rot)+ADs-
      var cr: double :+AD0- Cos(rot)+ADs-
      Result :+AD0- new Mtr2x3d(
         cr, +-sr, 0.0,
        -sr,  cr, 0.0
      )+ADs-
    end+ADs-
    public static function RotateXYccw(rot: double): Mtr2x3d+ADs-
    begin
      var sr: double :+AD0- Sin(rot)+ADs-
      var cr: double :+AD0- Cos(rot)+ADs-
      Result :+AD0- new Mtr2x3d(
         cr, -sr, 0.0,
        +-sr,  cr, 0.0
      )+ADs-
    end+ADs-
    
    public function ToString: string+ADs- override+ADs-
    begin
      var res :+AD0- new StringBuilder+ADs-
      
      var ElStrs :+AD0- new string+AFs-2,3+AF0AOw-
      for var y :+AD0- 0 to 2-1 do
        for var x :+AD0- 0 to 3-1 do
          ElStrs+AFs-y,x+AF0- :+AD0- (Sign(val+AFs-y,x+AF0-)+AD0--1?'-':'+-') +- Abs(val+AFs-y,x+AF0-).ToString('f2')+ADs-
      var MtrElTextW :+AD0- ElStrs.OfType+ACYAPA-string+AD4-.Max(s-+AD4-s.Length)+ADs-
      var PrintlnMtrW :+AD0- MtrElTextW+ACo-3 +- 6+ADs- // +-2+ACo-(Width-1) +- 2+ADs-
      
      res +-+AD0- '+JQw-'+ADs-
      res.Append(+ACM-32, PrintlnMtrW)+ADs-
      res +-+AD0- '+JRA-'+ACM-10+ADs-
      res +-+AD0- '+JQI- '+ADs-
      res +-+AD0- ElStrs+AFs-0,0+AF0-.PadLeft(MtrElTextW)+ADs-
      res +-+AD0- ', '+ADs-
      res +-+AD0- ElStrs+AFs-0,1+AF0-.PadLeft(MtrElTextW)+ADs-
      res +-+AD0- ', '+ADs-
      res +-+AD0- ElStrs+AFs-0,2+AF0-.PadLeft(MtrElTextW)+ADs-
      res +-+AD0- ' +JQI-'+ACM-10+ADs-
      res +-+AD0- '+JQI- '+ADs-
      res +-+AD0- ElStrs+AFs-1,0+AF0-.PadLeft(MtrElTextW)+ADs-
      res +-+AD0- ', '+ADs-
      res +-+AD0- ElStrs+AFs-1,1+AF0-.PadLeft(MtrElTextW)+ADs-
      res +-+AD0- ', '+ADs-
      res +-+AD0- ElStrs+AFs-1,2+AF0-.PadLeft(MtrElTextW)+ADs-
      res +-+AD0- ' +JQI-'+ACM-10+ADs-
      res +-+AD0- '+JRQ-'+ADs-
      res.Append(+ACM-32, PrintlnMtrW)+ADs-
      res +-+AD0- '+JRg-'+ADs-
      
      Result :+AD0- res.ToString+ADs-
    end+ADs-
    
    public function Println: Mtr2x3d+ADs-
    begin
      Writeln(self.ToString)+ADs-
      Result :+AD0- self+ADs-
    end+ADs-
    
    public static function operator+ACo-(m: Mtr2x3d+ADs- v: Vec3d): Vec2d :+AD0- new Vec2d(m.val00+ACo-v.val0+-m.val01+ACo-v.val1+-m.val02+ACo-v.val2, m.val10+ACo-v.val0+-m.val11+ACo-v.val1+-m.val12+ACo-v.val2)+ADs-
    public static function operator+ACo-(v: Vec2d+ADs- m: Mtr2x3d): Vec3d :+AD0- new Vec3d(m.val00+ACo-v.val0+-m.val10+ACo-v.val1, m.val01+ACo-v.val0+-m.val11+ACo-v.val1, m.val02+ACo-v.val0+-m.val12+ACo-v.val1)+ADs-
    
    public static function operator implicit(m: Mtr2x2f): Mtr2x3d :+AD0- new Mtr2x3d(m.val00, m.val01, 0.0, m.val10, m.val11, 0.0)+ADs-
    public static function operator implicit(m: Mtr2x3d): Mtr2x2f :+AD0- new Mtr2x2f(m.val00, m.val01, m.val10, m.val11)+ADs-
    
    public static function operator implicit(m: Mtr3x3f): Mtr2x3d :+AD0- new Mtr2x3d(m.val00, m.val01, m.val02, m.val10, m.val11, m.val12)+ADs-
    public static function operator implicit(m: Mtr2x3d): Mtr3x3f :+AD0- new Mtr3x3f(m.val00, m.val01, m.val02, m.val10, m.val11, m.val12, 0.0, 0.0, 0.0)+ADs-
    
    public static function operator implicit(m: Mtr4x4f): Mtr2x3d :+AD0- new Mtr2x3d(m.val00, m.val01, m.val02, m.val10, m.val11, m.val12)+ADs-
    public static function operator implicit(m: Mtr2x3d): Mtr4x4f :+AD0- new Mtr4x4f(m.val00, m.val01, m.val02, 0.0, m.val10, m.val11, m.val12, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)+ADs-
    
    public static function operator implicit(m: Mtr2x3f): Mtr2x3d :+AD0- new Mtr2x3d(m.val00, m.val01, m.val02, m.val10, m.val11, m.val12)+ADs-
    public static function operator implicit(m: Mtr2x3d): Mtr2x3f :+AD0- new Mtr2x3f(m.val00, m.val01, m.val02, m.val10, m.val11, m.val12)+ADs-
    
    public static function operator implicit(m: Mtr3x2f): Mtr2x3d :+AD0- new Mtr2x3d(m.val00, m.val01, 0.0, m.val10, m.val11, 0.0)+ADs-
    public static function operator implicit(m: Mtr2x3d): Mtr3x2f :+AD0- new Mtr3x2f(m.val00, m.val01, m.val10, m.val11, 0.0, 0.0)+ADs-
    
    public static function operator implicit(m: Mtr2x4f): Mtr2x3d :+AD0- new Mtr2x3d(m.val00, m.val01, m.val02, m.val10, m.val11, m.val12)+ADs-
    public static function operator implicit(m: Mtr2x3d): Mtr2x4f :+AD0- new Mtr2x4f(m.val00, m.val01, m.val02, 0.0, m.val10, m.val11, m.val12, 0.0)+ADs-
    
    public static function operator implicit(m: Mtr4x2f): Mtr2x3d :+AD0- new Mtr2x3d(m.val00, m.val01, 0.0, m.val10, m.val11, 0.0)+ADs-
    public static function operator implicit(m: Mtr2x3d): Mtr4x2f :+AD0- new Mtr4x2f(m.val00, m.val01, m.val10, m.val11, 0.0, 0.0, 0.0, 0.0)+ADs-
    
    public static function operator implicit(m: Mtr3x4f): Mtr2x3d :+AD0- new Mtr2x3d(m.val00, m.val01, m.val02, m.val10, m.val11, m.val12)+ADs-
    public static function operator implicit(m: Mtr2x3d): Mtr3x4f :+AD0- new Mtr3x4f(m.val00, m.val01, m.val02, 0.0, m.val10, m.val11, m.val12, 0.0, 0.0, 0.0, 0.0, 0.0)+ADs-
    
    public static function operator implicit(m: Mtr4x3f): Mtr2x3d :+AD0- new Mtr2x3d(m.val00, m.val01, m.val02, m.val10, m.val11, m.val12)+ADs-
    public static function operator implicit(m: Mtr2x3d): Mtr4x3f :+AD0- new Mtr4x3f(m.val00, m.val01, m.val02, m.val10, m.val11, m.val12, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)+ADs-
    
    public static function operator implicit(m: Mtr2x2d): Mtr2x3d :+AD0- new Mtr2x3d(m.val00, m.val01, 0.0, m.val10, m.val11, 0.0)+ADs-
    public static function operator implicit(m: Mtr2x3d): Mtr2x2d :+AD0- new Mtr2x2d(m.val00, m.val01, m.val10, m.val11)+ADs-
    
    public static function operator implicit(m: Mtr3x3d): Mtr2x3d :+AD0- new Mtr2x3d(m.val00, m.val01, m.val02, m.val10, m.val11, m.val12)+ADs-
    public static function operator implicit(m: Mtr2x3d): Mtr3x3d :+AD0- new Mtr3x3d(m.val00, m.val01, m.val02, m.val10, m.val11, m.val12, 0.0, 0.0, 0.0)+ADs-
    
    public static function operator implicit(m: Mtr4x4d): Mtr2x3d :+AD0- new Mtr2x3d(m.val00, m.val01, m.val02, m.val10, m.val11, m.val12)+ADs-
    public static function operator implicit(m: Mtr2x3d): Mtr4x4d :+AD0- new Mtr4x4d(m.val00, m.val01, m.val02, 0.0, m.val10, m.val11, m.val12, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)+ADs-
    
  end+ADs-
  
  Mtr3x2d +AD0- record
    public val00, val10, val20: double+ADs-
    public val01, val11, val21: double+ADs-
    
    public constructor(val00, val01, val10, val11, val20, val21: double)+ADs-
    begin
      self.val00 :+AD0- val00+ADs-
      self.val01 :+AD0- val01+ADs-
      self.val10 :+AD0- val10+ADs-
      self.val11 :+AD0- val11+ADs-
      self.val20 :+AD0- val20+ADs-
      self.val21 :+AD0- val21+ADs-
    end+ADs-
    
    private function GetValAt(y,x: integer): double+ADs-
    begin
      if cardinal(x) +AD4- 1 then raise new IndexOutOfRangeException('+BBgEPQQ0BDUEOgRB- +ACI-X+ACI- +BDQEPgQ7BDYENQQ9- +BDgEPAQ1BEIETA- +BDcEPQQwBEcENQQ9BDgENQ- 0..1')+ADs-
      if cardinal(y) +AD4- 2 then raise new IndexOutOfRangeException('+BBgEPQQ0BDUEOgRB- +ACI-Y+ACI- +BDQEPgQ7BDYENQQ9- +BDgEPAQ1BEIETA- +BDcEPQQwBEcENQQ9BDgENQ- 0..2')+ADs-
      var ptr: +AF4-double :+AD0- pointer(new IntPtr(+AEA-self) +- (x+ACo-3 +- y) +ACo- 8 )+ADs-
      Result :+AD0- ptr+AF4AOw-
    end+ADs-
    private procedure SetValAt(y,x: integer+ADs- val: double)+ADs-
    begin
      if cardinal(x) +AD4- 1 then raise new IndexOutOfRangeException('+BBgEPQQ0BDUEOgRB- +ACI-X+ACI- +BDQEPgQ7BDYENQQ9- +BDgEPAQ1BEIETA- +BDcEPQQwBEcENQQ9BDgENQ- 0..1')+ADs-
      if cardinal(y) +AD4- 2 then raise new IndexOutOfRangeException('+BBgEPQQ0BDUEOgRB- +ACI-Y+ACI- +BDQEPgQ7BDYENQQ9- +BDgEPAQ1BEIETA- +BDcEPQQwBEcENQQ9BDgENQ- 0..2')+ADs-
      var ptr: +AF4-double :+AD0- pointer(new IntPtr(+AEA-self) +- (x+ACo-3 +- y) +ACo- 8 )+ADs-
      ptr+AF4- :+AD0- val+ADs-
    end+ADs-
    public property val+AFs-y,x: integer+AF0-: double read GetValAt write SetValAt+ADs- default+ADs-
    
    public static property Identity: Mtr3x2d read new Mtr3x2d(1.0, 0.0, 0.0, 1.0, 0.0, 0.0)+ADs-
    
    public property Row0: Vec2d read new Vec2d(self.val00, self.val01) write begin self.val00 :+AD0- value.val0+ADs- self.val01 :+AD0- value.val1+ADs- end+ADs-
    public property Row1: Vec2d read new Vec2d(self.val10, self.val11) write begin self.val10 :+AD0- value.val0+ADs- self.val11 :+AD0- value.val1+ADs- end+ADs-
    public property Row2: Vec2d read new Vec2d(self.val20, self.val21) write begin self.val20 :+AD0- value.val0+ADs- self.val21 :+AD0- value.val1+ADs- end+ADs-
    public property Row+AFs-y: integer+AF0-: Vec2d read y+AD0-0?Row0:y+AD0-1?Row1:y+AD0-2?Row2:Arr+ACYAPA-Vec2d+AD4AWw-y+AF0- write
    case y of
      0: Row0 :+AD0- value+ADs-
      1: Row1 :+AD0- value+ADs-
      2: Row2 :+AD0- value+ADs-
      else raise new IndexOutOfRangeException('+BB0EPgQ8BDUEQA- +BEEEQgRABD4ERwQ6BDg- +BDQEPgQ7BDYENQQ9- +BDgEPAQ1BEIETA- +BDcEPQQwBEcENQQ9BDgENQ- 0..2')+ADs-
    end+ADs-
    
    public property Col0: Vec3d read new Vec3d(self.val00, self.val10, self.val20) write begin self.val00 :+AD0- value.val0+ADs- self.val10 :+AD0- value.val1+ADs- self.val20 :+AD0- value.val2+ADs- end+ADs-
    public property Col1: Vec3d read new Vec3d(self.val01, self.val11, self.val21) write begin self.val01 :+AD0- value.val0+ADs- self.val11 :+AD0- value.val1+ADs- self.val21 :+AD0- value.val2+ADs- end+ADs-
    public property Col+AFs-x: integer+AF0-: Vec3d read x+AD0-0?Col0:x+AD0-1?Col1:Arr+ACYAPA-Vec3d+AD4AWw-x+AF0- write
    case x of
      0: Col0 :+AD0- value+ADs-
      1: Col1 :+AD0- value+ADs-
      else raise new IndexOutOfRangeException('+BB0EPgQ8BDUEQA- +BEEEQgQ+BDsEMQRGBDA- +BDQEPgQ7BDYENQQ9- +BDgEPAQ1BEIETA- +BDcEPQQwBEcENQQ9BDgENQ- 0..1')+ADs-
    end+ADs-
    
    public property ColPtr0: +AF4-Vec2d read pointer(IntPtr(pointer(+AEA-self)) +- 0)+ADs-
    public property ColPtr1: +AF4-Vec2d read pointer(IntPtr(pointer(+AEA-self)) +- 24)+ADs-
    public property ColPtr2: +AF4-Vec2d read pointer(IntPtr(pointer(+AEA-self)) +- 48)+ADs-
    public property ColPtr+AFs-x: integer+AF0-: +AF4-Vec2d read pointer(IntPtr(pointer(+AEA-self)) +- x+ACo-24)+ADs-
    
    public static function Scale(k: double): Mtr3x2d :+AD0- new Mtr3x2d(k, 0.0, 0.0, k, 0.0, 0.0)+ADs-
    
    public static function Traslate(X: double): Mtr3x2d :+AD0- new Mtr3x2d(1.0, X, 0.0, 1.0, 0.0, 0.0)+ADs-
    public static function TraslateTransposed(X, Y: double): Mtr3x2d :+AD0- new Mtr3x2d(1.0, 0.0, 0.0, 1.0, X, Y)+ADs-
    
    public static function RotateXYcw(rot: double): Mtr3x2d+ADs-
    begin
      var sr: double :+AD0- Sin(rot)+ADs-
      var cr: double :+AD0- Cos(rot)+ADs-
      Result :+AD0- new Mtr3x2d(
         cr, +-sr,
        -sr,  cr,
        0.0, 0.0
      )+ADs-
    end+ADs-
    public static function RotateXYccw(rot: double): Mtr3x2d+ADs-
    begin
      var sr: double :+AD0- Sin(rot)+ADs-
      var cr: double :+AD0- Cos(rot)+ADs-
      Result :+AD0- new Mtr3x2d(
         cr, -sr,
        +-sr,  cr,
        0.0, 0.0
      )+ADs-
    end+ADs-
    
    public function ToString: string+ADs- override+ADs-
    begin
      var res :+AD0- new StringBuilder+ADs-
      
      var ElStrs :+AD0- new string+AFs-3,2+AF0AOw-
      for var y :+AD0- 0 to 3-1 do
        for var x :+AD0- 0 to 2-1 do
          ElStrs+AFs-y,x+AF0- :+AD0- (Sign(val+AFs-y,x+AF0-)+AD0--1?'-':'+-') +- Abs(val+AFs-y,x+AF0-).ToString('f2')+ADs-
      var MtrElTextW :+AD0- ElStrs.OfType+ACYAPA-string+AD4-.Max(s-+AD4-s.Length)+ADs-
      var PrintlnMtrW :+AD0- MtrElTextW+ACo-2 +- 4+ADs- // +-2+ACo-(Width-1) +- 2+ADs-
      
      res +-+AD0- '+JQw-'+ADs-
      res.Append(+ACM-32, PrintlnMtrW)+ADs-
      res +-+AD0- '+JRA-'+ACM-10+ADs-
      res +-+AD0- '+JQI- '+ADs-
      res +-+AD0- ElStrs+AFs-0,0+AF0-.PadLeft(MtrElTextW)+ADs-
      res +-+AD0- ', '+ADs-
      res +-+AD0- ElStrs+AFs-0,1+AF0-.PadLeft(MtrElTextW)+ADs-
      res +-+AD0- ' +JQI-'+ACM-10+ADs-
      res +-+AD0- '+JQI- '+ADs-
      res +-+AD0- ElStrs+AFs-1,0+AF0-.PadLeft(MtrElTextW)+ADs-
      res +-+AD0- ', '+ADs-
      res +-+AD0- ElStrs+AFs-1,1+AF0-.PadLeft(MtrElTextW)+ADs-
      res +-+AD0- ' +JQI-'+ACM-10+ADs-
      res +-+AD0- '+JQI- '+ADs-
      res +-+AD0- ElStrs+AFs-2,0+AF0-.PadLeft(MtrElTextW)+ADs-
      res +-+AD0- ', '+ADs-
      res +-+AD0- ElStrs+AFs-2,1+AF0-.PadLeft(MtrElTextW)+ADs-
      res +-+AD0- ' +JQI-'+ACM-10+ADs-
      res +-+AD0- '+JRQ-'+ADs-
      res.Append(+ACM-32, PrintlnMtrW)+ADs-
      res +-+AD0- '+JRg-'+ADs-
      
      Result :+AD0- res.ToString+ADs-
    end+ADs-
    
    public function Println: Mtr3x2d+ADs-
    begin
      Writeln(self.ToString)+ADs-
      Result :+AD0- self+ADs-
    end+ADs-
    
    public static function operator+ACo-(m: Mtr3x2d+ADs- v: Vec2d): Vec3d :+AD0- new Vec3d(m.val00+ACo-v.val0+-m.val01+ACo-v.val1, m.val10+ACo-v.val0+-m.val11+ACo-v.val1, m.val20+ACo-v.val0+-m.val21+ACo-v.val1)+ADs-
    public static function operator+ACo-(v: Vec3d+ADs- m: Mtr3x2d): Vec2d :+AD0- new Vec2d(m.val00+ACo-v.val0+-m.val10+ACo-v.val1+-m.val20+ACo-v.val2, m.val01+ACo-v.val0+-m.val11+ACo-v.val1+-m.val21+ACo-v.val2)+ADs-
    
    public static function operator implicit(m: Mtr2x2f): Mtr3x2d :+AD0- new Mtr3x2d(m.val00, m.val01, m.val10, m.val11, 0.0, 0.0)+ADs-
    public static function operator implicit(m: Mtr3x2d): Mtr2x2f :+AD0- new Mtr2x2f(m.val00, m.val01, m.val10, m.val11)+ADs-
    
    public static function operator implicit(m: Mtr3x3f): Mtr3x2d :+AD0- new Mtr3x2d(m.val00, m.val01, m.val10, m.val11, m.val20, m.val21)+ADs-
    public static function operator implicit(m: Mtr3x2d): Mtr3x3f :+AD0- new Mtr3x3f(m.val00, m.val01, 0.0, m.val10, m.val11, 0.0, m.val20, m.val21, 0.0)+ADs-
    
    public static function operator implicit(m: Mtr4x4f): Mtr3x2d :+AD0- new Mtr3x2d(m.val00, m.val01, m.val10, m.val11, m.val20, m.val21)+ADs-
    public static function operator implicit(m: Mtr3x2d): Mtr4x4f :+AD0- new Mtr4x4f(m.val00, m.val01, 0.0, 0.0, m.val10, m.val11, 0.0, 0.0, m.val20, m.val21, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)+ADs-
    
    public static function operator implicit(m: Mtr2x3f): Mtr3x2d :+AD0- new Mtr3x2d(m.val00, m.val01, m.val10, m.val11, 0.0, 0.0)+ADs-
    public static function operator implicit(m: Mtr3x2d): Mtr2x3f :+AD0- new Mtr2x3f(m.val00, m.val01, 0.0, m.val10, m.val11, 0.0)+ADs-
    
    public static function operator implicit(m: Mtr3x2f): Mtr3x2d :+AD0- new Mtr3x2d(m.val00, m.val01, m.val10, m.val11, m.val20, m.val21)+ADs-
    public static function operator implicit(m: Mtr3x2d): Mtr3x2f :+AD0- new Mtr3x2f(m.val00, m.val01, m.val10, m.val11, m.val20, m.val21)+ADs-
    
    public static function operator implicit(m: Mtr2x4f): Mtr3x2d :+AD0- new Mtr3x2d(m.val00, m.val01, m.val10, m.val11, 0.0, 0.0)+ADs-
    public static function operator implicit(m: Mtr3x2d): Mtr2x4f :+AD0- new Mtr2x4f(m.val00, m.val01, 0.0, 0.0, m.val10, m.val11, 0.0, 0.0)+ADs-
    
    public static function operator implicit(m: Mtr4x2f): Mtr3x2d :+AD0- new Mtr3x2d(m.val00, m.val01, m.val10, m.val11, m.val20, m.val21)+ADs-
    public static function operator implicit(m: Mtr3x2d): Mtr4x2f :+AD0- new Mtr4x2f(m.val00, m.val01, m.val10, m.val11, m.val20, m.val21, 0.0, 0.0)+ADs-
    
    public static function operator implicit(m: Mtr3x4f): Mtr3x2d :+AD0- new Mtr3x2d(m.val00, m.val01, m.val10, m.val11, m.val20, m.val21)+ADs-
    public static function operator implicit(m: Mtr3x2d): Mtr3x4f :+AD0- new Mtr3x4f(m.val00, m.val01, 0.0, 0.0, m.val10, m.val11, 0.0, 0.0, m.val20, m.val21, 0.0, 0.0)+ADs-
    
    public static function operator implicit(m: Mtr4x3f): Mtr3x2d :+AD0- new Mtr3x2d(m.val00, m.val01, m.val10, m.val11, m.val20, m.val21)+ADs-
    public static function operator implicit(m: Mtr3x2d): Mtr4x3f :+AD0- new Mtr4x3f(m.val00, m.val01, 0.0, m.val10, m.val11, 0.0, m.val20, m.val21, 0.0, 0.0, 0.0, 0.0)+ADs-
    
    public static function operator implicit(m: Mtr2x2d): Mtr3x2d :+AD0- new Mtr3x2d(m.val00, m.val01, m.val10, m.val11, 0.0, 0.0)+ADs-
    public static function operator implicit(m: Mtr3x2d): Mtr2x2d :+AD0- new Mtr2x2d(m.val00, m.val01, m.val10, m.val11)+ADs-
    
    public static function operator implicit(m: Mtr3x3d): Mtr3x2d :+AD0- new Mtr3x2d(m.val00, m.val01, m.val10, m.val11, m.val20, m.val21)+ADs-
    public static function operator implicit(m: Mtr3x2d): Mtr3x3d :+AD0- new Mtr3x3d(m.val00, m.val01, 0.0, m.val10, m.val11, 0.0, m.val20, m.val21, 0.0)+ADs-
    
    public static function operator implicit(m: Mtr4x4d): Mtr3x2d :+AD0- new Mtr3x2d(m.val00, m.val01, m.val10, m.val11, m.val20, m.val21)+ADs-
    public static function operator implicit(m: Mtr3x2d): Mtr4x4d :+AD0- new Mtr4x4d(m.val00, m.val01, 0.0, 0.0, m.val10, m.val11, 0.0, 0.0, m.val20, m.val21, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)+ADs-
    
    public static function operator implicit(m: Mtr2x3d): Mtr3x2d :+AD0- new Mtr3x2d(m.val00, m.val01, m.val10, m.val11, 0.0, 0.0)+ADs-
    public static function operator implicit(m: Mtr3x2d): Mtr2x3d :+AD0- new Mtr2x3d(m.val00, m.val01, 0.0, m.val10, m.val11, 0.0)+ADs-
    
  end+ADs-
  
  Mtr2x4d +AD0- record
    public val00, val10: double+ADs-
    public val01, val11: double+ADs-
    public val02, val12: double+ADs-
    public val03, val13: double+ADs-
    
    public constructor(val00, val01, val02, val03, val10, val11, val12, val13: double)+ADs-
    begin
      self.val00 :+AD0- val00+ADs-
      self.val01 :+AD0- val01+ADs-
      self.val02 :+AD0- val02+ADs-
      self.val03 :+AD0- val03+ADs-
      self.val10 :+AD0- val10+ADs-
      self.val11 :+AD0- val11+ADs-
      self.val12 :+AD0- val12+ADs-
      self.val13 :+AD0- val13+ADs-
    end+ADs-
    
    private function GetValAt(y,x: integer): double+ADs-
    begin
      if cardinal(x) +AD4- 3 then raise new IndexOutOfRangeException('+BBgEPQQ0BDUEOgRB- +ACI-X+ACI- +BDQEPgQ7BDYENQQ9- +BDgEPAQ1BEIETA- +BDcEPQQwBEcENQQ9BDgENQ- 0..3')+ADs-
      if cardinal(y) +AD4- 1 then raise new IndexOutOfRangeException('+BBgEPQQ0BDUEOgRB- +ACI-Y+ACI- +BDQEPgQ7BDYENQQ9- +BDgEPAQ1BEIETA- +BDcEPQQwBEcENQQ9BDgENQ- 0..1')+ADs-
      var ptr: +AF4-double :+AD0- pointer(new IntPtr(+AEA-self) +- (x+ACo-2 +- y) +ACo- 8 )+ADs-
      Result :+AD0- ptr+AF4AOw-
    end+ADs-
    private procedure SetValAt(y,x: integer+ADs- val: double)+ADs-
    begin
      if cardinal(x) +AD4- 3 then raise new IndexOutOfRangeException('+BBgEPQQ0BDUEOgRB- +ACI-X+ACI- +BDQEPgQ7BDYENQQ9- +BDgEPAQ1BEIETA- +BDcEPQQwBEcENQQ9BDgENQ- 0..3')+ADs-
      if cardinal(y) +AD4- 1 then raise new IndexOutOfRangeException('+BBgEPQQ0BDUEOgRB- +ACI-Y+ACI- +BDQEPgQ7BDYENQQ9- +BDgEPAQ1BEIETA- +BDcEPQQwBEcENQQ9BDgENQ- 0..1')+ADs-
      var ptr: +AF4-double :+AD0- pointer(new IntPtr(+AEA-self) +- (x+ACo-2 +- y) +ACo- 8 )+ADs-
      ptr+AF4- :+AD0- val+ADs-
    end+ADs-
    public property val+AFs-y,x: integer+AF0-: double read GetValAt write SetValAt+ADs- default+ADs-
    
    public static property Identity: Mtr2x4d read new Mtr2x4d(1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0)+ADs-
    
    public property Row0: Vec4d read new Vec4d(self.val00, self.val01, self.val02, self.val03) write begin self.val00 :+AD0- value.val0+ADs- self.val01 :+AD0- value.val1+ADs- self.val02 :+AD0- value.val2+ADs- self.val03 :+AD0- value.val3+ADs- end+ADs-
    public property Row1: Vec4d read new Vec4d(self.val10, self.val11, self.val12, self.val13) write begin self.val10 :+AD0- value.val0+ADs- self.val11 :+AD0- value.val1+ADs- self.val12 :+AD0- value.val2+ADs- self.val13 :+AD0- value.val3+ADs- end+ADs-
    public property Row+AFs-y: integer+AF0-: Vec4d read y+AD0-0?Row0:y+AD0-1?Row1:Arr+ACYAPA-Vec4d+AD4AWw-y+AF0- write
    case y of
      0: Row0 :+AD0- value+ADs-
      1: Row1 :+AD0- value+ADs-
      else raise new IndexOutOfRangeException('+BB0EPgQ8BDUEQA- +BEEEQgRABD4ERwQ6BDg- +BDQEPgQ7BDYENQQ9- +BDgEPAQ1BEIETA- +BDcEPQQwBEcENQQ9BDgENQ- 0..1')+ADs-
    end+ADs-
    
    public property Col0: Vec2d read new Vec2d(self.val00, self.val10) write begin self.val00 :+AD0- value.val0+ADs- self.val10 :+AD0- value.val1+ADs- end+ADs-
    public property Col1: Vec2d read new Vec2d(self.val01, self.val11) write begin self.val01 :+AD0- value.val0+ADs- self.val11 :+AD0- value.val1+ADs- end+ADs-
    public property Col2: Vec2d read new Vec2d(self.val02, self.val12) write begin self.val02 :+AD0- value.val0+ADs- self.val12 :+AD0- value.val1+ADs- end+ADs-
    public property Col3: Vec2d read new Vec2d(self.val03, self.val13) write begin self.val03 :+AD0- value.val0+ADs- self.val13 :+AD0- value.val1+ADs- end+ADs-
    public property Col+AFs-x: integer+AF0-: Vec2d read x+AD0-0?Col0:x+AD0-1?Col1:x+AD0-2?Col2:x+AD0-3?Col3:Arr+ACYAPA-Vec2d+AD4AWw-x+AF0- write
    case x of
      0: Col0 :+AD0- value+ADs-
      1: Col1 :+AD0- value+ADs-
      2: Col2 :+AD0- value+ADs-
      3: Col3 :+AD0- value+ADs-
      else raise new IndexOutOfRangeException('+BB0EPgQ8BDUEQA- +BEEEQgQ+BDsEMQRGBDA- +BDQEPgQ7BDYENQQ9- +BDgEPAQ1BEIETA- +BDcEPQQwBEcENQQ9BDgENQ- 0..3')+ADs-
    end+ADs-
    
    public property ColPtr0: +AF4-Vec4d read pointer(IntPtr(pointer(+AEA-self)) +- 0)+ADs-
    public property ColPtr1: +AF4-Vec4d read pointer(IntPtr(pointer(+AEA-self)) +- 16)+ADs-
    public property ColPtr+AFs-x: integer+AF0-: +AF4-Vec4d read pointer(IntPtr(pointer(+AEA-self)) +- x+ACo-16)+ADs-
    
    public static function Scale(k: double): Mtr2x4d :+AD0- new Mtr2x4d(k, 0.0, 0.0, 0.0, 0.0, k, 0.0, 0.0)+ADs-
    
    public static function Traslate(X, Y: double): Mtr2x4d :+AD0- new Mtr2x4d(1.0, 0.0, 0.0, X, 0.0, 1.0, 0.0, Y)+ADs-
    public static function TraslateTransposed(X: double): Mtr2x4d :+AD0- new Mtr2x4d(1.0, 0.0, 0.0, 0.0, X, 1.0, 0.0, 0.0)+ADs-
    
    public static function RotateXYcw(rot: double): Mtr2x4d+ADs-
    begin
      var sr: double :+AD0- Sin(rot)+ADs-
      var cr: double :+AD0- Cos(rot)+ADs-
      Result :+AD0- new Mtr2x4d(
         cr, +-sr, 0.0, 0.0,
        -sr,  cr, 0.0, 0.0
      )+ADs-
    end+ADs-
    public static function RotateXYccw(rot: double): Mtr2x4d+ADs-
    begin
      var sr: double :+AD0- Sin(rot)+ADs-
      var cr: double :+AD0- Cos(rot)+ADs-
      Result :+AD0- new Mtr2x4d(
         cr, -sr, 0.0, 0.0,
        +-sr,  cr, 0.0, 0.0
      )+ADs-
    end+ADs-
    
    public function ToString: string+ADs- override+ADs-
    begin
      var res :+AD0- new StringBuilder+ADs-
      
      var ElStrs :+AD0- new string+AFs-2,4+AF0AOw-
      for var y :+AD0- 0 to 2-1 do
        for var x :+AD0- 0 to 4-1 do
          ElStrs+AFs-y,x+AF0- :+AD0- (Sign(val+AFs-y,x+AF0-)+AD0--1?'-':'+-') +- Abs(val+AFs-y,x+AF0-).ToString('f2')+ADs-
      var MtrElTextW :+AD0- ElStrs.OfType+ACYAPA-string+AD4-.Max(s-+AD4-s.Length)+ADs-
      var PrintlnMtrW :+AD0- MtrElTextW+ACo-4 +- 8+ADs- // +-2+ACo-(Width-1) +- 2+ADs-
      
      res +-+AD0- '+JQw-'+ADs-
      res.Append(+ACM-32, PrintlnMtrW)+ADs-
      res +-+AD0- '+JRA-'+ACM-10+ADs-
      res +-+AD0- '+JQI- '+ADs-
      res +-+AD0- ElStrs+AFs-0,0+AF0-.PadLeft(MtrElTextW)+ADs-
      res +-+AD0- ', '+ADs-
      res +-+AD0- ElStrs+AFs-0,1+AF0-.PadLeft(MtrElTextW)+ADs-
      res +-+AD0- ', '+ADs-
      res +-+AD0- ElStrs+AFs-0,2+AF0-.PadLeft(MtrElTextW)+ADs-
      res +-+AD0- ', '+ADs-
      res +-+AD0- ElStrs+AFs-0,3+AF0-.PadLeft(MtrElTextW)+ADs-
      res +-+AD0- ' +JQI-'+ACM-10+ADs-
      res +-+AD0- '+JQI- '+ADs-
      res +-+AD0- ElStrs+AFs-1,0+AF0-.PadLeft(MtrElTextW)+ADs-
      res +-+AD0- ', '+ADs-
      res +-+AD0- ElStrs+AFs-1,1+AF0-.PadLeft(MtrElTextW)+ADs-
      res +-+AD0- ', '+ADs-
      res +-+AD0- ElStrs+AFs-1,2+AF0-.PadLeft(MtrElTextW)+ADs-
      res +-+AD0- ', '+ADs-
      res +-+AD0- ElStrs+AFs-1,3+AF0-.PadLeft(MtrElTextW)+ADs-
      res +-+AD0- ' +JQI-'+ACM-10+ADs-
      res +-+AD0- '+JRQ-'+ADs-
      res.Append(+ACM-32, PrintlnMtrW)+ADs-
      res +-+AD0- '+JRg-'+ADs-
      
      Result :+AD0- res.ToString+ADs-
    end+ADs-
    
    public function Println: Mtr2x4d+ADs-
    begin
      Writeln(self.ToString)+ADs-
      Result :+AD0- self+ADs-
    end+ADs-
    
    public static function operator+ACo-(m: Mtr2x4d+ADs- v: Vec4d): Vec2d :+AD0- new Vec2d(m.val00+ACo-v.val0+-m.val01+ACo-v.val1+-m.val02+ACo-v.val2+-m.val03+ACo-v.val3, m.val10+ACo-v.val0+-m.val11+ACo-v.val1+-m.val12+ACo-v.val2+-m.val13+ACo-v.val3)+ADs-
    public static function operator+ACo-(v: Vec2d+ADs- m: Mtr2x4d): Vec4d :+AD0- new Vec4d(m.val00+ACo-v.val0+-m.val10+ACo-v.val1, m.val01+ACo-v.val0+-m.val11+ACo-v.val1, m.val02+ACo-v.val0+-m.val12+ACo-v.val1, m.val03+ACo-v.val0+-m.val13+ACo-v.val1)+ADs-
    
    public static function operator implicit(m: Mtr2x2f): Mtr2x4d :+AD0- new Mtr2x4d(m.val00, m.val01, 0.0, 0.0, m.val10, m.val11, 0.0, 0.0)+ADs-
    public static function operator implicit(m: Mtr2x4d): Mtr2x2f :+AD0- new Mtr2x2f(m.val00, m.val01, m.val10, m.val11)+ADs-
    
    public static function operator implicit(m: Mtr3x3f): Mtr2x4d :+AD0- new Mtr2x4d(m.val00, m.val01, m.val02, 0.0, m.val10, m.val11, m.val12, 0.0)+ADs-
    public static function operator implicit(m: Mtr2x4d): Mtr3x3f :+AD0- new Mtr3x3f(m.val00, m.val01, m.val02, m.val10, m.val11, m.val12, 0.0, 0.0, 0.0)+ADs-
    
    public static function operator implicit(m: Mtr4x4f): Mtr2x4d :+AD0- new Mtr2x4d(m.val00, m.val01, m.val02, m.val03, m.val10, m.val11, m.val12, m.val13)+ADs-
    public static function operator implicit(m: Mtr2x4d): Mtr4x4f :+AD0- new Mtr4x4f(m.val00, m.val01, m.val02, m.val03, m.val10, m.val11, m.val12, m.val13, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)+ADs-
    
    public static function operator implicit(m: Mtr2x3f): Mtr2x4d :+AD0- new Mtr2x4d(m.val00, m.val01, m.val02, 0.0, m.val10, m.val11, m.val12, 0.0)+ADs-
    public static function operator implicit(m: Mtr2x4d): Mtr2x3f :+AD0- new Mtr2x3f(m.val00, m.val01, m.val02, m.val10, m.val11, m.val12)+ADs-
    
    public static function operator implicit(m: Mtr3x2f): Mtr2x4d :+AD0- new Mtr2x4d(m.val00, m.val01, 0.0, 0.0, m.val10, m.val11, 0.0, 0.0)+ADs-
    public static function operator implicit(m: Mtr2x4d): Mtr3x2f :+AD0- new Mtr3x2f(m.val00, m.val01, m.val10, m.val11, 0.0, 0.0)+ADs-
    
    public static function operator implicit(m: Mtr2x4f): Mtr2x4d :+AD0- new Mtr2x4d(m.val00, m.val01, m.val02, m.val03, m.val10, m.val11, m.val12, m.val13)+ADs-
    public static function operator implicit(m: Mtr2x4d): Mtr2x4f :+AD0- new Mtr2x4f(m.val00, m.val01, m.val02, m.val03, m.val10, m.val11, m.val12, m.val13)+ADs-
    
    public static function operator implicit(m: Mtr4x2f): Mtr2x4d :+AD0- new Mtr2x4d(m.val00, m.val01, 0.0, 0.0, m.val10, m.val11, 0.0, 0.0)+ADs-
    public static function operator implicit(m: Mtr2x4d): Mtr4x2f :+AD0- new Mtr4x2f(m.val00, m.val01, m.val10, m.val11, 0.0, 0.0, 0.0, 0.0)+ADs-
    
    public static function operator implicit(m: Mtr3x4f): Mtr2x4d :+AD0- new Mtr2x4d(m.val00, m.val01, m.val02, m.val03, m.val10, m.val11, m.val12, m.val13)+ADs-
    public static function operator implicit(m: Mtr2x4d): Mtr3x4f :+AD0- new Mtr3x4f(m.val00, m.val01, m.val02, m.val03, m.val10, m.val11, m.val12, m.val13, 0.0, 0.0, 0.0, 0.0)+ADs-
    
    public static function operator implicit(m: Mtr4x3f): Mtr2x4d :+AD0- new Mtr2x4d(m.val00, m.val01, m.val02, 0.0, m.val10, m.val11, m.val12, 0.0)+ADs-
    public static function operator implicit(m: Mtr2x4d): Mtr4x3f :+AD0- new Mtr4x3f(m.val00, m.val01, m.val02, m.val10, m.val11, m.val12, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)+ADs-
    
    public static function operator implicit(m: Mtr2x2d): Mtr2x4d :+AD0- new Mtr2x4d(m.val00, m.val01, 0.0, 0.0, m.val10, m.val11, 0.0, 0.0)+ADs-
    public static function operator implicit(m: Mtr2x4d): Mtr2x2d :+AD0- new Mtr2x2d(m.val00, m.val01, m.val10, m.val11)+ADs-
    
    public static function operator implicit(m: Mtr3x3d): Mtr2x4d :+AD0- new Mtr2x4d(m.val00, m.val01, m.val02, 0.0, m.val10, m.val11, m.val12, 0.0)+ADs-
    public static function operator implicit(m: Mtr2x4d): Mtr3x3d :+AD0- new Mtr3x3d(m.val00, m.val01, m.val02, m.val10, m.val11, m.val12, 0.0, 0.0, 0.0)+ADs-
    
    public static function operator implicit(m: Mtr4x4d): Mtr2x4d :+AD0- new Mtr2x4d(m.val00, m.val01, m.val02, m.val03, m.val10, m.val11, m.val12, m.val13)+ADs-
    public static function operator implicit(m: Mtr2x4d): Mtr4x4d :+AD0- new Mtr4x4d(m.val00, m.val01, m.val02, m.val03, m.val10, m.val11, m.val12, m.val13, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)+ADs-
    
    public static function operator implicit(m: Mtr2x3d): Mtr2x4d :+AD0- new Mtr2x4d(m.val00, m.val01, m.val02, 0.0, m.val10, m.val11, m.val12, 0.0)+ADs-
    public static function operator implicit(m: Mtr2x4d): Mtr2x3d :+AD0- new Mtr2x3d(m.val00, m.val01, m.val02, m.val10, m.val11, m.val12)+ADs-
    
    public static function operator implicit(m: Mtr3x2d): Mtr2x4d :+AD0- new Mtr2x4d(m.val00, m.val01, 0.0, 0.0, m.val10, m.val11, 0.0, 0.0)+ADs-
    public static function operator implicit(m: Mtr2x4d): Mtr3x2d :+AD0- new Mtr3x2d(m.val00, m.val01, m.val10, m.val11, 0.0, 0.0)+ADs-
    
  end+ADs-
  
  Mtr4x2d +AD0- record
    public val00, val10, val20, val30: double+ADs-
    public val01, val11, val21, val31: double+ADs-
    
    public constructor(val00, val01, val10, val11, val20, val21, val30, val31: double)+ADs-
    begin
      self.val00 :+AD0- val00+ADs-
      self.val01 :+AD0- val01+ADs-
      self.val10 :+AD0- val10+ADs-
      self.val11 :+AD0- val11+ADs-
      self.val20 :+AD0- val20+ADs-
      self.val21 :+AD0- val21+ADs-
      self.val30 :+AD0- val30+ADs-
      self.val31 :+AD0- val31+ADs-
    end+ADs-
    
    private function GetValAt(y,x: integer): double+ADs-
    begin
      if cardinal(x) +AD4- 1 then raise new IndexOutOfRangeException('+BBgEPQQ0BDUEOgRB- +ACI-X+ACI- +BDQEPgQ7BDYENQQ9- +BDgEPAQ1BEIETA- +BDcEPQQwBEcENQQ9BDgENQ- 0..1')+ADs-
      if cardinal(y) +AD4- 3 then raise new IndexOutOfRangeException('+BBgEPQQ0BDUEOgRB- +ACI-Y+ACI- +BDQEPgQ7BDYENQQ9- +BDgEPAQ1BEIETA- +BDcEPQQwBEcENQQ9BDgENQ- 0..3')+ADs-
      var ptr: +AF4-double :+AD0- pointer(new IntPtr(+AEA-self) +- (x+ACo-4 +- y) +ACo- 8 )+ADs-
      Result :+AD0- ptr+AF4AOw-
    end+ADs-
    private procedure SetValAt(y,x: integer+ADs- val: double)+ADs-
    begin
      if cardinal(x) +AD4- 1 then raise new IndexOutOfRangeException('+BBgEPQQ0BDUEOgRB- +ACI-X+ACI- +BDQEPgQ7BDYENQQ9- +BDgEPAQ1BEIETA- +BDcEPQQwBEcENQQ9BDgENQ- 0..1')+ADs-
      if cardinal(y) +AD4- 3 then raise new IndexOutOfRangeException('+BBgEPQQ0BDUEOgRB- +ACI-Y+ACI- +BDQEPgQ7BDYENQQ9- +BDgEPAQ1BEIETA- +BDcEPQQwBEcENQQ9BDgENQ- 0..3')+ADs-
      var ptr: +AF4-double :+AD0- pointer(new IntPtr(+AEA-self) +- (x+ACo-4 +- y) +ACo- 8 )+ADs-
      ptr+AF4- :+AD0- val+ADs-
    end+ADs-
    public property val+AFs-y,x: integer+AF0-: double read GetValAt write SetValAt+ADs- default+ADs-
    
    public static property Identity: Mtr4x2d read new Mtr4x2d(1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0)+ADs-
    
    public property Row0: Vec2d read new Vec2d(self.val00, self.val01) write begin self.val00 :+AD0- value.val0+ADs- self.val01 :+AD0- value.val1+ADs- end+ADs-
    public property Row1: Vec2d read new Vec2d(self.val10, self.val11) write begin self.val10 :+AD0- value.val0+ADs- self.val11 :+AD0- value.val1+ADs- end+ADs-
    public property Row2: Vec2d read new Vec2d(self.val20, self.val21) write begin self.val20 :+AD0- value.val0+ADs- self.val21 :+AD0- value.val1+ADs- end+ADs-
    public property Row3: Vec2d read new Vec2d(self.val30, self.val31) write begin self.val30 :+AD0- value.val0+ADs- self.val31 :+AD0- value.val1+ADs- end+ADs-
    public property Row+AFs-y: integer+AF0-: Vec2d read y+AD0-0?Row0:y+AD0-1?Row1:y+AD0-2?Row2:y+AD0-3?Row3:Arr+ACYAPA-Vec2d+AD4AWw-y+AF0- write
    case y of
      0: Row0 :+AD0- value+ADs-
      1: Row1 :+AD0- value+ADs-
      2: Row2 :+AD0- value+ADs-
      3: Row3 :+AD0- value+ADs-
      else raise new IndexOutOfRangeException('+BB0EPgQ8BDUEQA- +BEEEQgRABD4ERwQ6BDg- +BDQEPgQ7BDYENQQ9- +BDgEPAQ1BEIETA- +BDcEPQQwBEcENQQ9BDgENQ- 0..3')+ADs-
    end+ADs-
    
    public property Col0: Vec4d read new Vec4d(self.val00, self.val10, self.val20, self.val30) write begin self.val00 :+AD0- value.val0+ADs- self.val10 :+AD0- value.val1+ADs- self.val20 :+AD0- value.val2+ADs- self.val30 :+AD0- value.val3+ADs- end+ADs-
    public property Col1: Vec4d read new Vec4d(self.val01, self.val11, self.val21, self.val31) write begin self.val01 :+AD0- value.val0+ADs- self.val11 :+AD0- value.val1+ADs- self.val21 :+AD0- value.val2+ADs- self.val31 :+AD0- value.val3+ADs- end+ADs-
    public property Col+AFs-x: integer+AF0-: Vec4d read x+AD0-0?Col0:x+AD0-1?Col1:Arr+ACYAPA-Vec4d+AD4AWw-x+AF0- write
    case x of
      0: Col0 :+AD0- value+ADs-
      1: Col1 :+AD0- value+ADs-
      else raise new IndexOutOfRangeException('+BB0EPgQ8BDUEQA- +BEEEQgQ+BDsEMQRGBDA- +BDQEPgQ7BDYENQQ9- +BDgEPAQ1BEIETA- +BDcEPQQwBEcENQQ9BDgENQ- 0..1')+ADs-
    end+ADs-
    
    public property ColPtr0: +AF4-Vec2d read pointer(IntPtr(pointer(+AEA-self)) +- 0)+ADs-
    public property ColPtr1: +AF4-Vec2d read pointer(IntPtr(pointer(+AEA-self)) +- 32)+ADs-
    public property ColPtr2: +AF4-Vec2d read pointer(IntPtr(pointer(+AEA-self)) +- 64)+ADs-
    public property ColPtr3: +AF4-Vec2d read pointer(IntPtr(pointer(+AEA-self)) +- 96)+ADs-
    public property ColPtr+AFs-x: integer+AF0-: +AF4-Vec2d read pointer(IntPtr(pointer(+AEA-self)) +- x+ACo-32)+ADs-
    
    public static function Scale(k: double): Mtr4x2d :+AD0- new Mtr4x2d(k, 0.0, 0.0, k, 0.0, 0.0, 0.0, 0.0)+ADs-
    
    public static function Traslate(X: double): Mtr4x2d :+AD0- new Mtr4x2d(1.0, X, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0)+ADs-
    public static function TraslateTransposed(X, Y: double): Mtr4x2d :+AD0- new Mtr4x2d(1.0, 0.0, 0.0, 1.0, 0.0, 0.0, X, Y)+ADs-
    
    public static function RotateXYcw(rot: double): Mtr4x2d+ADs-
    begin
      var sr: double :+AD0- Sin(rot)+ADs-
      var cr: double :+AD0- Cos(rot)+ADs-
      Result :+AD0- new Mtr4x2d(
         cr, +-sr,
        -sr,  cr,
        0.0, 0.0,
        0.0, 0.0
      )+ADs-
    end+ADs-
    public static function RotateXYccw(rot: double): Mtr4x2d+ADs-
    begin
      var sr: double :+AD0- Sin(rot)+ADs-
      var cr: double :+AD0- Cos(rot)+ADs-
      Result :+AD0- new Mtr4x2d(
         cr, -sr,
        +-sr,  cr,
        0.0, 0.0,
        0.0, 0.0
      )+ADs-
    end+ADs-
    
    public function ToString: string+ADs- override+ADs-
    begin
      var res :+AD0- new StringBuilder+ADs-
      
      var ElStrs :+AD0- new string+AFs-4,2+AF0AOw-
      for var y :+AD0- 0 to 4-1 do
        for var x :+AD0- 0 to 2-1 do
          ElStrs+AFs-y,x+AF0- :+AD0- (Sign(val+AFs-y,x+AF0-)+AD0--1?'-':'+-') +- Abs(val+AFs-y,x+AF0-).ToString('f2')+ADs-
      var MtrElTextW :+AD0- ElStrs.OfType+ACYAPA-string+AD4-.Max(s-+AD4-s.Length)+ADs-
      var PrintlnMtrW :+AD0- MtrElTextW+ACo-2 +- 4+ADs- // +-2+ACo-(Width-1) +- 2+ADs-
      
      res +-+AD0- '+JQw-'+ADs-
      res.Append(+ACM-32, PrintlnMtrW)+ADs-
      res +-+AD0- '+JRA-'+ACM-10+ADs-
      res +-+AD0- '+JQI- '+ADs-
      res +-+AD0- ElStrs+AFs-0,0+AF0-.PadLeft(MtrElTextW)+ADs-
      res +-+AD0- ', '+ADs-
      res +-+AD0- ElStrs+AFs-0,1+AF0-.PadLeft(MtrElTextW)+ADs-
      res +-+AD0- ' +JQI-'+ACM-10+ADs-
      res +-+AD0- '+JQI- '+ADs-
      res +-+AD0- ElStrs+AFs-1,0+AF0-.PadLeft(MtrElTextW)+ADs-
      res +-+AD0- ', '+ADs-
      res +-+AD0- ElStrs+AFs-1,1+AF0-.PadLeft(MtrElTextW)+ADs-
      res +-+AD0- ' +JQI-'+ACM-10+ADs-
      res +-+AD0- '+JQI- '+ADs-
      res +-+AD0- ElStrs+AFs-2,0+AF0-.PadLeft(MtrElTextW)+ADs-
      res +-+AD0- ', '+ADs-
      res +-+AD0- ElStrs+AFs-2,1+AF0-.PadLeft(MtrElTextW)+ADs-
      res +-+AD0- ' +JQI-'+ACM-10+ADs-
      res +-+AD0- '+JQI- '+ADs-
      res +-+AD0- ElStrs+AFs-3,0+AF0-.PadLeft(MtrElTextW)+ADs-
      res +-+AD0- ', '+ADs-
      res +-+AD0- ElStrs+AFs-3,1+AF0-.PadLeft(MtrElTextW)+ADs-
      res +-+AD0- ' +JQI-'+ACM-10+ADs-
      res +-+AD0- '+JRQ-'+ADs-
      res.Append(+ACM-32, PrintlnMtrW)+ADs-
      res +-+AD0- '+JRg-'+ADs-
      
      Result :+AD0- res.ToString+ADs-
    end+ADs-
    
    public function Println: Mtr4x2d+ADs-
    begin
      Writeln(self.ToString)+ADs-
      Result :+AD0- self+ADs-
    end+ADs-
    
    public static function operator+ACo-(m: Mtr4x2d+ADs- v: Vec2d): Vec4d :+AD0- new Vec4d(m.val00+ACo-v.val0+-m.val01+ACo-v.val1, m.val10+ACo-v.val0+-m.val11+ACo-v.val1, m.val20+ACo-v.val0+-m.val21+ACo-v.val1, m.val30+ACo-v.val0+-m.val31+ACo-v.val1)+ADs-
    public static function operator+ACo-(v: Vec4d+ADs- m: Mtr4x2d): Vec2d :+AD0- new Vec2d(m.val00+ACo-v.val0+-m.val10+ACo-v.val1+-m.val20+ACo-v.val2+-m.val30+ACo-v.val3, m.val01+ACo-v.val0+-m.val11+ACo-v.val1+-m.val21+ACo-v.val2+-m.val31+ACo-v.val3)+ADs-
    
    public static function operator implicit(m: Mtr2x2f): Mtr4x2d :+AD0- new Mtr4x2d(m.val00, m.val01, m.val10, m.val11, 0.0, 0.0, 0.0, 0.0)+ADs-
    public static function operator implicit(m: Mtr4x2d): Mtr2x2f :+AD0- new Mtr2x2f(m.val00, m.val01, m.val10, m.val11)+ADs-
    
    public static function operator implicit(m: Mtr3x3f): Mtr4x2d :+AD0- new Mtr4x2d(m.val00, m.val01, m.val10, m.val11, m.val20, m.val21, 0.0, 0.0)+ADs-
    public static function operator implicit(m: Mtr4x2d): Mtr3x3f :+AD0- new Mtr3x3f(m.val00, m.val01, 0.0, m.val10, m.val11, 0.0, m.val20, m.val21, 0.0)+ADs-
    
    public static function operator implicit(m: Mtr4x4f): Mtr4x2d :+AD0- new Mtr4x2d(m.val00, m.val01, m.val10, m.val11, m.val20, m.val21, m.val30, m.val31)+ADs-
    public static function operator implicit(m: Mtr4x2d): Mtr4x4f :+AD0- new Mtr4x4f(m.val00, m.val01, 0.0, 0.0, m.val10, m.val11, 0.0, 0.0, m.val20, m.val21, 0.0, 0.0, m.val30, m.val31, 0.0, 0.0)+ADs-
    
    public static function operator implicit(m: Mtr2x3f): Mtr4x2d :+AD0- new Mtr4x2d(m.val00, m.val01, m.val10, m.val11, 0.0, 0.0, 0.0, 0.0)+ADs-
    public static function operator implicit(m: Mtr4x2d): Mtr2x3f :+AD0- new Mtr2x3f(m.val00, m.val01, 0.0, m.val10, m.val11, 0.0)+ADs-
    
    public static function operator implicit(m: Mtr3x2f): Mtr4x2d :+AD0- new Mtr4x2d(m.val00, m.val01, m.val10, m.val11, m.val20, m.val21, 0.0, 0.0)+ADs-
    public static function operator implicit(m: Mtr4x2d): Mtr3x2f :+AD0- new Mtr3x2f(m.val00, m.val01, m.val10, m.val11, m.val20, m.val21)+ADs-
    
    public static function operator implicit(m: Mtr2x4f): Mtr4x2d :+AD0- new Mtr4x2d(m.val00, m.val01, m.val10, m.val11, 0.0, 0.0, 0.0, 0.0)+ADs-
    public static function operator implicit(m: Mtr4x2d): Mtr2x4f :+AD0- new Mtr2x4f(m.val00, m.val01, 0.0, 0.0, m.val10, m.val11, 0.0, 0.0)+ADs-
    
    public static function operator implicit(m: Mtr4x2f): Mtr4x2d :+AD0- new Mtr4x2d(m.val00, m.val01, m.val10, m.val11, m.val20, m.val21, m.val30, m.val31)+ADs-
    public static function operator implicit(m: Mtr4x2d): Mtr4x2f :+AD0- new Mtr4x2f(m.val00, m.val01, m.val10, m.val11, m.val20, m.val21, m.val30, m.val31)+ADs-
    
    public static function operator implicit(m: Mtr3x4f): Mtr4x2d :+AD0- new Mtr4x2d(m.val00, m.val01, m.val10, m.val11, m.val20, m.val21, 0.0, 0.0)+ADs-
    public static function operator implicit(m: Mtr4x2d): Mtr3x4f :+AD0- new Mtr3x4f(m.val00, m.val01, 0.0, 0.0, m.val10, m.val11, 0.0, 0.0, m.val20, m.val21, 0.0, 0.0)+ADs-
    
    public static function operator implicit(m: Mtr4x3f): Mtr4x2d :+AD0- new Mtr4x2d(m.val00, m.val01, m.val10, m.val11, m.val20, m.val21, m.val30, m.val31)+ADs-
    public static function operator implicit(m: Mtr4x2d): Mtr4x3f :+AD0- new Mtr4x3f(m.val00, m.val01, 0.0, m.val10, m.val11, 0.0, m.val20, m.val21, 0.0, m.val30, m.val31, 0.0)+ADs-
    
    public static function operator implicit(m: Mtr2x2d): Mtr4x2d :+AD0- new Mtr4x2d(m.val00, m.val01, m.val10, m.val11, 0.0, 0.0, 0.0, 0.0)+ADs-
    public static function operator implicit(m: Mtr4x2d): Mtr2x2d :+AD0- new Mtr2x2d(m.val00, m.val01, m.val10, m.val11)+ADs-
    
    public static function operator implicit(m: Mtr3x3d): Mtr4x2d :+AD0- new Mtr4x2d(m.val00, m.val01, m.val10, m.val11, m.val20, m.val21, 0.0, 0.0)+ADs-
    public static function operator implicit(m: Mtr4x2d): Mtr3x3d :+AD0- new Mtr3x3d(m.val00, m.val01, 0.0, m.val10, m.val11, 0.0, m.val20, m.val21, 0.0)+ADs-
    
    public static function operator implicit(m: Mtr4x4d): Mtr4x2d :+AD0- new Mtr4x2d(m.val00, m.val01, m.val10, m.val11, m.val20, m.val21, m.val30, m.val31)+ADs-
    public static function operator implicit(m: Mtr4x2d): Mtr4x4d :+AD0- new Mtr4x4d(m.val00, m.val01, 0.0, 0.0, m.val10, m.val11, 0.0, 0.0, m.val20, m.val21, 0.0, 0.0, m.val30, m.val31, 0.0, 0.0)+ADs-
    
    public static function operator implicit(m: Mtr2x3d): Mtr4x2d :+AD0- new Mtr4x2d(m.val00, m.val01, m.val10, m.val11, 0.0, 0.0, 0.0, 0.0)+ADs-
    public static function operator implicit(m: Mtr4x2d): Mtr2x3d :+AD0- new Mtr2x3d(m.val00, m.val01, 0.0, m.val10, m.val11, 0.0)+ADs-
    
    public static function operator implicit(m: Mtr3x2d): Mtr4x2d :+AD0- new Mtr4x2d(m.val00, m.val01, m.val10, m.val11, m.val20, m.val21, 0.0, 0.0)+ADs-
    public static function operator implicit(m: Mtr4x2d): Mtr3x2d :+AD0- new Mtr3x2d(m.val00, m.val01, m.val10, m.val11, m.val20, m.val21)+ADs-
    
    public static function operator implicit(m: Mtr2x4d): Mtr4x2d :+AD0- new Mtr4x2d(m.val00, m.val01, m.val10, m.val11, 0.0, 0.0, 0.0, 0.0)+ADs-
    public static function operator implicit(m: Mtr4x2d): Mtr2x4d :+AD0- new Mtr2x4d(m.val00, m.val01, 0.0, 0.0, m.val10, m.val11, 0.0, 0.0)+ADs-
    
  end+ADs-
  
  Mtr3x4d +AD0- record
    public val00, val10, val20: double+ADs-
    public val01, val11, val21: double+ADs-
    public val02, val12, val22: double+ADs-
    public val03, val13, val23: double+ADs-
    
    public constructor(val00, val01, val02, val03, val10, val11, val12, val13, val20, val21, val22, val23: double)+ADs-
    begin
      self.val00 :+AD0- val00+ADs-
      self.val01 :+AD0- val01+ADs-
      self.val02 :+AD0- val02+ADs-
      self.val03 :+AD0- val03+ADs-
      self.val10 :+AD0- val10+ADs-
      self.val11 :+AD0- val11+ADs-
      self.val12 :+AD0- val12+ADs-
      self.val13 :+AD0- val13+ADs-
      self.val20 :+AD0- val20+ADs-
      self.val21 :+AD0- val21+ADs-
      self.val22 :+AD0- val22+ADs-
      self.val23 :+AD0- val23+ADs-
    end+ADs-
    
    private function GetValAt(y,x: integer): double+ADs-
    begin
      if cardinal(x) +AD4- 3 then raise new IndexOutOfRangeException('+BBgEPQQ0BDUEOgRB- +ACI-X+ACI- +BDQEPgQ7BDYENQQ9- +BDgEPAQ1BEIETA- +BDcEPQQwBEcENQQ9BDgENQ- 0..3')+ADs-
      if cardinal(y) +AD4- 2 then raise new IndexOutOfRangeException('+BBgEPQQ0BDUEOgRB- +ACI-Y+ACI- +BDQEPgQ7BDYENQQ9- +BDgEPAQ1BEIETA- +BDcEPQQwBEcENQQ9BDgENQ- 0..2')+ADs-
      var ptr: +AF4-double :+AD0- pointer(new IntPtr(+AEA-self) +- (x+ACo-3 +- y) +ACo- 8 )+ADs-
      Result :+AD0- ptr+AF4AOw-
    end+ADs-
    private procedure SetValAt(y,x: integer+ADs- val: double)+ADs-
    begin
      if cardinal(x) +AD4- 3 then raise new IndexOutOfRangeException('+BBgEPQQ0BDUEOgRB- +ACI-X+ACI- +BDQEPgQ7BDYENQQ9- +BDgEPAQ1BEIETA- +BDcEPQQwBEcENQQ9BDgENQ- 0..3')+ADs-
      if cardinal(y) +AD4- 2 then raise new IndexOutOfRangeException('+BBgEPQQ0BDUEOgRB- +ACI-Y+ACI- +BDQEPgQ7BDYENQQ9- +BDgEPAQ1BEIETA- +BDcEPQQwBEcENQQ9BDgENQ- 0..2')+ADs-
      var ptr: +AF4-double :+AD0- pointer(new IntPtr(+AEA-self) +- (x+ACo-3 +- y) +ACo- 8 )+ADs-
      ptr+AF4- :+AD0- val+ADs-
    end+ADs-
    public property val+AFs-y,x: integer+AF0-: double read GetValAt write SetValAt+ADs- default+ADs-
    
    public static property Identity: Mtr3x4d read new Mtr3x4d(1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0)+ADs-
    
    public property Row0: Vec4d read new Vec4d(self.val00, self.val01, self.val02, self.val03) write begin self.val00 :+AD0- value.val0+ADs- self.val01 :+AD0- value.val1+ADs- self.val02 :+AD0- value.val2+ADs- self.val03 :+AD0- value.val3+ADs- end+ADs-
    public property Row1: Vec4d read new Vec4d(self.val10, self.val11, self.val12, self.val13) write begin self.val10 :+AD0- value.val0+ADs- self.val11 :+AD0- value.val1+ADs- self.val12 :+AD0- value.val2+ADs- self.val13 :+AD0- value.val3+ADs- end+ADs-
    public property Row2: Vec4d read new Vec4d(self.val20, self.val21, self.val22, self.val23) write begin self.val20 :+AD0- value.val0+ADs- self.val21 :+AD0- value.val1+ADs- self.val22 :+AD0- value.val2+ADs- self.val23 :+AD0- value.val3+ADs- end+ADs-
    public property Row+AFs-y: integer+AF0-: Vec4d read y+AD0-0?Row0:y+AD0-1?Row1:y+AD0-2?Row2:Arr+ACYAPA-Vec4d+AD4AWw-y+AF0- write
    case y of
      0: Row0 :+AD0- value+ADs-
      1: Row1 :+AD0- value+ADs-
      2: Row2 :+AD0- value+ADs-
      else raise new IndexOutOfRangeException('+BB0EPgQ8BDUEQA- +BEEEQgRABD4ERwQ6BDg- +BDQEPgQ7BDYENQQ9- +BDgEPAQ1BEIETA- +BDcEPQQwBEcENQQ9BDgENQ- 0..2')+ADs-
    end+ADs-
    
    public property Col0: Vec3d read new Vec3d(self.val00, self.val10, self.val20) write begin self.val00 :+AD0- value.val0+ADs- self.val10 :+AD0- value.val1+ADs- self.val20 :+AD0- value.val2+ADs- end+ADs-
    public property Col1: Vec3d read new Vec3d(self.val01, self.val11, self.val21) write begin self.val01 :+AD0- value.val0+ADs- self.val11 :+AD0- value.val1+ADs- self.val21 :+AD0- value.val2+ADs- end+ADs-
    public property Col2: Vec3d read new Vec3d(self.val02, self.val12, self.val22) write begin self.val02 :+AD0- value.val0+ADs- self.val12 :+AD0- value.val1+ADs- self.val22 :+AD0- value.val2+ADs- end+ADs-
    public property Col3: Vec3d read new Vec3d(self.val03, self.val13, self.val23) write begin self.val03 :+AD0- value.val0+ADs- self.val13 :+AD0- value.val1+ADs- self.val23 :+AD0- value.val2+ADs- end+ADs-
    public property Col+AFs-x: integer+AF0-: Vec3d read x+AD0-0?Col0:x+AD0-1?Col1:x+AD0-2?Col2:x+AD0-3?Col3:Arr+ACYAPA-Vec3d+AD4AWw-x+AF0- write
    case x of
      0: Col0 :+AD0- value+ADs-
      1: Col1 :+AD0- value+ADs-
      2: Col2 :+AD0- value+ADs-
      3: Col3 :+AD0- value+ADs-
      else raise new IndexOutOfRangeException('+BB0EPgQ8BDUEQA- +BEEEQgQ+BDsEMQRGBDA- +BDQEPgQ7BDYENQQ9- +BDgEPAQ1BEIETA- +BDcEPQQwBEcENQQ9BDgENQ- 0..3')+ADs-
    end+ADs-
    
    public property ColPtr0: +AF4-Vec4d read pointer(IntPtr(pointer(+AEA-self)) +- 0)+ADs-
    public property ColPtr1: +AF4-Vec4d read pointer(IntPtr(pointer(+AEA-self)) +- 24)+ADs-
    public property ColPtr2: +AF4-Vec4d read pointer(IntPtr(pointer(+AEA-self)) +- 48)+ADs-
    public property ColPtr+AFs-x: integer+AF0-: +AF4-Vec4d read pointer(IntPtr(pointer(+AEA-self)) +- x+ACo-24)+ADs-
    
    public static function Scale(k: double): Mtr3x4d :+AD0- new Mtr3x4d(k, 0.0, 0.0, 0.0, 0.0, k, 0.0, 0.0, 0.0, 0.0, k, 0.0)+ADs-
    
    public static function Traslate(X, Y, Z: double): Mtr3x4d :+AD0- new Mtr3x4d(1.0, 0.0, 0.0, X, 0.0, 1.0, 0.0, Y, 0.0, 0.0, 1.0, Z)+ADs-
    public static function TraslateTransposed(X, Y: double): Mtr3x4d :+AD0- new Mtr3x4d(1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, X, Y, 1.0, 0.0)+ADs-
    
    public static function RotateXYcw(rot: double): Mtr3x4d+ADs-
    begin
      var sr: double :+AD0- Sin(rot)+ADs-
      var cr: double :+AD0- Cos(rot)+ADs-
      Result :+AD0- new Mtr3x4d(
         cr, +-sr, 0.0, 0.0,
        -sr,  cr, 0.0, 0.0,
        0.0, 0.0, 1.0, 0.0
      )+ADs-
    end+ADs-
    public static function RotateXYccw(rot: double): Mtr3x4d+ADs-
    begin
      var sr: double :+AD0- Sin(rot)+ADs-
      var cr: double :+AD0- Cos(rot)+ADs-
      Result :+AD0- new Mtr3x4d(
         cr, -sr, 0.0, 0.0,
        +-sr,  cr, 0.0, 0.0,
        0.0, 0.0, 1.0, 0.0
      )+ADs-
    end+ADs-
    
    public static function RotateYZcw(rot: double): Mtr3x4d+ADs-
    begin
      var sr: double :+AD0- Sin(rot)+ADs-
      var cr: double :+AD0- Cos(rot)+ADs-
      Result :+AD0- new Mtr3x4d(
        1.0, 0.0, 0.0, 0.0,
        0.0,  cr, +-sr, 0.0,
        0.0, -sr,  cr, 0.0
      )+ADs-
    end+ADs-
    public static function RotateYZccw(rot: double): Mtr3x4d+ADs-
    begin
      var sr: double :+AD0- Sin(rot)+ADs-
      var cr: double :+AD0- Cos(rot)+ADs-
      Result :+AD0- new Mtr3x4d(
        1.0, 0.0, 0.0, 0.0,
        0.0,  cr, -sr, 0.0,
        0.0, +-sr,  cr, 0.0
      )+ADs-
    end+ADs-
    
    public static function RotateZXcw(rot: double): Mtr3x4d+ADs-
    begin
      var sr: double :+AD0- Sin(rot)+ADs-
      var cr: double :+AD0- Cos(rot)+ADs-
      Result :+AD0- new Mtr3x4d(
         cr, 0.0, -sr, 0.0,
        0.0, 1.0, 0.0, 0.0,
        +-sr, 0.0,  cr, 0.0
      )+ADs-
    end+ADs-
    public static function RotateZXccw(rot: double): Mtr3x4d+ADs-
    begin
      var sr: double :+AD0- Sin(rot)+ADs-
      var cr: double :+AD0- Cos(rot)+ADs-
      Result :+AD0- new Mtr3x4d(
         cr, 0.0, +-sr, 0.0,
        0.0, 1.0, 0.0, 0.0,
        -sr, 0.0,  cr, 0.0
      )+ADs-
    end+ADs-
    
    public static function Rotate3Dcw(u: Vec3d+ADs- rot: double): Mtr3x4d+ADs-
    begin
      var k1 :+AD0- Sin(rot)+ADs-
      var k2 :+AD0- 2+ACo-Sqr(Sin(rot/2))+ADs-
      
      Result.val00 :+AD0- 1 +- k2+ACo-( -u.val2+ACo-u.val2 - u.val1+ACo-u.val1 )+ADs-
      Result.val01 :+AD0- k1+ACo-u.val2 +- k2+ACo-( u.val1+ACo-u.val0 )+ADs-
      Result.val02 :+AD0- -k1+ACo-u.val1 +- k2+ACo-( u.val2+ACo-u.val0 )+ADs-
      Result.val10 :+AD0- -k1+ACo-u.val2 +- k2+ACo-( u.val0+ACo-u.val1 )+ADs-
      Result.val11 :+AD0- 1 +- k2+ACo-( -u.val2+ACo-u.val2 - u.val0+ACo-u.val0 )+ADs-
      Result.val12 :+AD0- k1+ACo-u.val0 +- k2+ACo-( u.val2+ACo-u.val1 )+ADs-
      Result.val20 :+AD0- k1+ACo-u.val1 +- k2+ACo-( u.val0+ACo-u.val2 )+ADs-
      Result.val21 :+AD0- -k1+ACo-u.val0 +- k2+ACo-( u.val1+ACo-u.val2 )+ADs-
      Result.val22 :+AD0- 1 +- k2+ACo-( -u.val1+ACo-u.val1 - u.val0+ACo-u.val0 )+ADs-
      
    end+ADs-
    
    public static function Rotate3Dccw(u: Vec3d+ADs- rot: double): Mtr3x4d+ADs-
    begin
      var k1 :+AD0- Sin(rot)+ADs-
      var k2 :+AD0- 2+ACo-Sqr(Sin(rot/2))+ADs-
      
      Result.val00 :+AD0- 1 +- k2+ACo-( -u.val2+ACo-u.val2 - u.val1+ACo-u.val1 )+ADs-
      Result.val01 :+AD0- -k1+ACo-u.val2 +- k2+ACo-( u.val1+ACo-u.val0 )+ADs-
      Result.val02 :+AD0- k1+ACo-u.val1 +- k2+ACo-( u.val2+ACo-u.val0 )+ADs-
      Result.val10 :+AD0- k1+ACo-u.val2 +- k2+ACo-( u.val0+ACo-u.val1 )+ADs-
      Result.val11 :+AD0- 1 +- k2+ACo-( -u.val2+ACo-u.val2 - u.val0+ACo-u.val0 )+ADs-
      Result.val12 :+AD0- -k1+ACo-u.val0 +- k2+ACo-( u.val2+ACo-u.val1 )+ADs-
      Result.val20 :+AD0- -k1+ACo-u.val1 +- k2+ACo-( u.val0+ACo-u.val2 )+ADs-
      Result.val21 :+AD0- k1+ACo-u.val0 +- k2+ACo-( u.val1+ACo-u.val2 )+ADs-
      Result.val22 :+AD0- 1 +- k2+ACo-( -u.val1+ACo-u.val1 - u.val0+ACo-u.val0 )+ADs-
      
    end+ADs-
    
    public function ToString: string+ADs- override+ADs-
    begin
      var res :+AD0- new StringBuilder+ADs-
      
      var ElStrs :+AD0- new string+AFs-3,4+AF0AOw-
      for var y :+AD0- 0 to 3-1 do
        for var x :+AD0- 0 to 4-1 do
          ElStrs+AFs-y,x+AF0- :+AD0- (Sign(val+AFs-y,x+AF0-)+AD0--1?'-':'+-') +- Abs(val+AFs-y,x+AF0-).ToString('f2')+ADs-
      var MtrElTextW :+AD0- ElStrs.OfType+ACYAPA-string+AD4-.Max(s-+AD4-s.Length)+ADs-
      var PrintlnMtrW :+AD0- MtrElTextW+ACo-4 +- 8+ADs- // +-2+ACo-(Width-1) +- 2+ADs-
      
      res +-+AD0- '+JQw-'+ADs-
      res.Append(+ACM-32, PrintlnMtrW)+ADs-
      res +-+AD0- '+JRA-'+ACM-10+ADs-
      res +-+AD0- '+JQI- '+ADs-
      res +-+AD0- ElStrs+AFs-0,0+AF0-.PadLeft(MtrElTextW)+ADs-
      res +-+AD0- ', '+ADs-
      res +-+AD0- ElStrs+AFs-0,1+AF0-.PadLeft(MtrElTextW)+ADs-
      res +-+AD0- ', '+ADs-
      res +-+AD0- ElStrs+AFs-0,2+AF0-.PadLeft(MtrElTextW)+ADs-
      res +-+AD0- ', '+ADs-
      res +-+AD0- ElStrs+AFs-0,3+AF0-.PadLeft(MtrElTextW)+ADs-
      res +-+AD0- ' +JQI-'+ACM-10+ADs-
      res +-+AD0- '+JQI- '+ADs-
      res +-+AD0- ElStrs+AFs-1,0+AF0-.PadLeft(MtrElTextW)+ADs-
      res +-+AD0- ', '+ADs-
      res +-+AD0- ElStrs+AFs-1,1+AF0-.PadLeft(MtrElTextW)+ADs-
      res +-+AD0- ', '+ADs-
      res +-+AD0- ElStrs+AFs-1,2+AF0-.PadLeft(MtrElTextW)+ADs-
      res +-+AD0- ', '+ADs-
      res +-+AD0- ElStrs+AFs-1,3+AF0-.PadLeft(MtrElTextW)+ADs-
      res +-+AD0- ' +JQI-'+ACM-10+ADs-
      res +-+AD0- '+JQI- '+ADs-
      res +-+AD0- ElStrs+AFs-2,0+AF0-.PadLeft(MtrElTextW)+ADs-
      res +-+AD0- ', '+ADs-
      res +-+AD0- ElStrs+AFs-2,1+AF0-.PadLeft(MtrElTextW)+ADs-
      res +-+AD0- ', '+ADs-
      res +-+AD0- ElStrs+AFs-2,2+AF0-.PadLeft(MtrElTextW)+ADs-
      res +-+AD0- ', '+ADs-
      res +-+AD0- ElStrs+AFs-2,3+AF0-.PadLeft(MtrElTextW)+ADs-
      res +-+AD0- ' +JQI-'+ACM-10+ADs-
      res +-+AD0- '+JRQ-'+ADs-
      res.Append(+ACM-32, PrintlnMtrW)+ADs-
      res +-+AD0- '+JRg-'+ADs-
      
      Result :+AD0- res.ToString+ADs-
    end+ADs-
    
    public function Println: Mtr3x4d+ADs-
    begin
      Writeln(self.ToString)+ADs-
      Result :+AD0- self+ADs-
    end+ADs-
    
    public static function operator+ACo-(m: Mtr3x4d+ADs- v: Vec4d): Vec3d :+AD0- new Vec3d(m.val00+ACo-v.val0+-m.val01+ACo-v.val1+-m.val02+ACo-v.val2+-m.val03+ACo-v.val3, m.val10+ACo-v.val0+-m.val11+ACo-v.val1+-m.val12+ACo-v.val2+-m.val13+ACo-v.val3, m.val20+ACo-v.val0+-m.val21+ACo-v.val1+-m.val22+ACo-v.val2+-m.val23+ACo-v.val3)+ADs-
    public static function operator+ACo-(v: Vec3d+ADs- m: Mtr3x4d): Vec4d :+AD0- new Vec4d(m.val00+ACo-v.val0+-m.val10+ACo-v.val1+-m.val20+ACo-v.val2, m.val01+ACo-v.val0+-m.val11+ACo-v.val1+-m.val21+ACo-v.val2, m.val02+ACo-v.val0+-m.val12+ACo-v.val1+-m.val22+ACo-v.val2, m.val03+ACo-v.val0+-m.val13+ACo-v.val1+-m.val23+ACo-v.val2)+ADs-
    
    public static function operator implicit(m: Mtr2x2f): Mtr3x4d :+AD0- new Mtr3x4d(m.val00, m.val01, 0.0, 0.0, m.val10, m.val11, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)+ADs-
    public static function operator implicit(m: Mtr3x4d): Mtr2x2f :+AD0- new Mtr2x2f(m.val00, m.val01, m.val10, m.val11)+ADs-
    
    public static function operator implicit(m: Mtr3x3f): Mtr3x4d :+AD0- new Mtr3x4d(m.val00, m.val01, m.val02, 0.0, m.val10, m.val11, m.val12, 0.0, m.val20, m.val21, m.val22, 0.0)+ADs-
    public static function operator implicit(m: Mtr3x4d): Mtr3x3f :+AD0- new Mtr3x3f(m.val00, m.val01, m.val02, m.val10, m.val11, m.val12, m.val20, m.val21, m.val22)+ADs-
    
    public static function operator implicit(m: Mtr4x4f): Mtr3x4d :+AD0- new Mtr3x4d(m.val00, m.val01, m.val02, m.val03, m.val10, m.val11, m.val12, m.val13, m.val20, m.val21, m.val22, m.val23)+ADs-
    public static function operator implicit(m: Mtr3x4d): Mtr4x4f :+AD0- new Mtr4x4f(m.val00, m.val01, m.val02, m.val03, m.val10, m.val11, m.val12, m.val13, m.val20, m.val21, m.val22, m.val23, 0.0, 0.0, 0.0, 0.0)+ADs-
    
    public static function operator implicit(m: Mtr2x3f): Mtr3x4d :+AD0- new Mtr3x4d(m.val00, m.val01, m.val02, 0.0, m.val10, m.val11, m.val12, 0.0, 0.0, 0.0, 0.0, 0.0)+ADs-
    public static function operator implicit(m: Mtr3x4d): Mtr2x3f :+AD0- new Mtr2x3f(m.val00, m.val01, m.val02, m.val10, m.val11, m.val12)+ADs-
    
    public static function operator implicit(m: Mtr3x2f): Mtr3x4d :+AD0- new Mtr3x4d(m.val00, m.val01, 0.0, 0.0, m.val10, m.val11, 0.0, 0.0, m.val20, m.val21, 0.0, 0.0)+ADs-
    public static function operator implicit(m: Mtr3x4d): Mtr3x2f :+AD0- new Mtr3x2f(m.val00, m.val01, m.val10, m.val11, m.val20, m.val21)+ADs-
    
    public static function operator implicit(m: Mtr2x4f): Mtr3x4d :+AD0- new Mtr3x4d(m.val00, m.val01, m.val02, m.val03, m.val10, m.val11, m.val12, m.val13, 0.0, 0.0, 0.0, 0.0)+ADs-
    public static function operator implicit(m: Mtr3x4d): Mtr2x4f :+AD0- new Mtr2x4f(m.val00, m.val01, m.val02, m.val03, m.val10, m.val11, m.val12, m.val13)+ADs-
    
    public static function operator implicit(m: Mtr4x2f): Mtr3x4d :+AD0- new Mtr3x4d(m.val00, m.val01, 0.0, 0.0, m.val10, m.val11, 0.0, 0.0, m.val20, m.val21, 0.0, 0.0)+ADs-
    public static function operator implicit(m: Mtr3x4d): Mtr4x2f :+AD0- new Mtr4x2f(m.val00, m.val01, m.val10, m.val11, m.val20, m.val21, 0.0, 0.0)+ADs-
    
    public static function operator implicit(m: Mtr3x4f): Mtr3x4d :+AD0- new Mtr3x4d(m.val00, m.val01, m.val02, m.val03, m.val10, m.val11, m.val12, m.val13, m.val20, m.val21, m.val22, m.val23)+ADs-
    public static function operator implicit(m: Mtr3x4d): Mtr3x4f :+AD0- new Mtr3x4f(m.val00, m.val01, m.val02, m.val03, m.val10, m.val11, m.val12, m.val13, m.val20, m.val21, m.val22, m.val23)+ADs-
    
    public static function operator implicit(m: Mtr4x3f): Mtr3x4d :+AD0- new Mtr3x4d(m.val00, m.val01, m.val02, 0.0, m.val10, m.val11, m.val12, 0.0, m.val20, m.val21, m.val22, 0.0)+ADs-
    public static function operator implicit(m: Mtr3x4d): Mtr4x3f :+AD0- new Mtr4x3f(m.val00, m.val01, m.val02, m.val10, m.val11, m.val12, m.val20, m.val21, m.val22, 0.0, 0.0, 0.0)+ADs-
    
    public static function operator implicit(m: Mtr2x2d): Mtr3x4d :+AD0- new Mtr3x4d(m.val00, m.val01, 0.0, 0.0, m.val10, m.val11, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)+ADs-
    public static function operator implicit(m: Mtr3x4d): Mtr2x2d :+AD0- new Mtr2x2d(m.val00, m.val01, m.val10, m.val11)+ADs-
    
    public static function operator implicit(m: Mtr3x3d): Mtr3x4d :+AD0- new Mtr3x4d(m.val00, m.val01, m.val02, 0.0, m.val10, m.val11, m.val12, 0.0, m.val20, m.val21, m.val22, 0.0)+ADs-
    public static function operator implicit(m: Mtr3x4d): Mtr3x3d :+AD0- new Mtr3x3d(m.val00, m.val01, m.val02, m.val10, m.val11, m.val12, m.val20, m.val21, m.val22)+ADs-
    
    public static function operator implicit(m: Mtr4x4d): Mtr3x4d :+AD0- new Mtr3x4d(m.val00, m.val01, m.val02, m.val03, m.val10, m.val11, m.val12, m.val13, m.val20, m.val21, m.val22, m.val23)+ADs-
    public static function operator implicit(m: Mtr3x4d): Mtr4x4d :+AD0- new Mtr4x4d(m.val00, m.val01, m.val02, m.val03, m.val10, m.val11, m.val12, m.val13, m.val20, m.val21, m.val22, m.val23, 0.0, 0.0, 0.0, 0.0)+ADs-
    
    public static function operator implicit(m: Mtr2x3d): Mtr3x4d :+AD0- new Mtr3x4d(m.val00, m.val01, m.val02, 0.0, m.val10, m.val11, m.val12, 0.0, 0.0, 0.0, 0.0, 0.0)+ADs-
    public static function operator implicit(m: Mtr3x4d): Mtr2x3d :+AD0- new Mtr2x3d(m.val00, m.val01, m.val02, m.val10, m.val11, m.val12)+ADs-
    
    public static function operator implicit(m: Mtr3x2d): Mtr3x4d :+AD0- new Mtr3x4d(m.val00, m.val01, 0.0, 0.0, m.val10, m.val11, 0.0, 0.0, m.val20, m.val21, 0.0, 0.0)+ADs-
    public static function operator implicit(m: Mtr3x4d): Mtr3x2d :+AD0- new Mtr3x2d(m.val00, m.val01, m.val10, m.val11, m.val20, m.val21)+ADs-
    
    public static function operator implicit(m: Mtr2x4d): Mtr3x4d :+AD0- new Mtr3x4d(m.val00, m.val01, m.val02, m.val03, m.val10, m.val11, m.val12, m.val13, 0.0, 0.0, 0.0, 0.0)+ADs-
    public static function operator implicit(m: Mtr3x4d): Mtr2x4d :+AD0- new Mtr2x4d(m.val00, m.val01, m.val02, m.val03, m.val10, m.val11, m.val12, m.val13)+ADs-
    
    public static function operator implicit(m: Mtr4x2d): Mtr3x4d :+AD0- new Mtr3x4d(m.val00, m.val01, 0.0, 0.0, m.val10, m.val11, 0.0, 0.0, m.val20, m.val21, 0.0, 0.0)+ADs-
    public static function operator implicit(m: Mtr3x4d): Mtr4x2d :+AD0- new Mtr4x2d(m.val00, m.val01, m.val10, m.val11, m.val20, m.val21, 0.0, 0.0)+ADs-
    
  end+ADs-
  
  Mtr4x3d +AD0- record
    public val00, val10, val20, val30: double+ADs-
    public val01, val11, val21, val31: double+ADs-
    public val02, val12, val22, val32: double+ADs-
    
    public constructor(val00, val01, val02, val10, val11, val12, val20, val21, val22, val30, val31, val32: double)+ADs-
    begin
      self.val00 :+AD0- val00+ADs-
      self.val01 :+AD0- val01+ADs-
      self.val02 :+AD0- val02+ADs-
      self.val10 :+AD0- val10+ADs-
      self.val11 :+AD0- val11+ADs-
      self.val12 :+AD0- val12+ADs-
      self.val20 :+AD0- val20+ADs-
      self.val21 :+AD0- val21+ADs-
      self.val22 :+AD0- val22+ADs-
      self.val30 :+AD0- val30+ADs-
      self.val31 :+AD0- val31+ADs-
      self.val32 :+AD0- val32+ADs-
    end+ADs-
    
    private function GetValAt(y,x: integer): double+ADs-
    begin
      if cardinal(x) +AD4- 2 then raise new IndexOutOfRangeException('+BBgEPQQ0BDUEOgRB- +ACI-X+ACI- +BDQEPgQ7BDYENQQ9- +BDgEPAQ1BEIETA- +BDcEPQQwBEcENQQ9BDgENQ- 0..2')+ADs-
      if cardinal(y) +AD4- 3 then raise new IndexOutOfRangeException('+BBgEPQQ0BDUEOgRB- +ACI-Y+ACI- +BDQEPgQ7BDYENQQ9- +BDgEPAQ1BEIETA- +BDcEPQQwBEcENQQ9BDgENQ- 0..3')+ADs-
      var ptr: +AF4-double :+AD0- pointer(new IntPtr(+AEA-self) +- (x+ACo-4 +- y) +ACo- 8 )+ADs-
      Result :+AD0- ptr+AF4AOw-
    end+ADs-
    private procedure SetValAt(y,x: integer+ADs- val: double)+ADs-
    begin
      if cardinal(x) +AD4- 2 then raise new IndexOutOfRangeException('+BBgEPQQ0BDUEOgRB- +ACI-X+ACI- +BDQEPgQ7BDYENQQ9- +BDgEPAQ1BEIETA- +BDcEPQQwBEcENQQ9BDgENQ- 0..2')+ADs-
      if cardinal(y) +AD4- 3 then raise new IndexOutOfRangeException('+BBgEPQQ0BDUEOgRB- +ACI-Y+ACI- +BDQEPgQ7BDYENQQ9- +BDgEPAQ1BEIETA- +BDcEPQQwBEcENQQ9BDgENQ- 0..3')+ADs-
      var ptr: +AF4-double :+AD0- pointer(new IntPtr(+AEA-self) +- (x+ACo-4 +- y) +ACo- 8 )+ADs-
      ptr+AF4- :+AD0- val+ADs-
    end+ADs-
    public property val+AFs-y,x: integer+AF0-: double read GetValAt write SetValAt+ADs- default+ADs-
    
    public static property Identity: Mtr4x3d read new Mtr4x3d(1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0)+ADs-
    
    public property Row0: Vec3d read new Vec3d(self.val00, self.val01, self.val02) write begin self.val00 :+AD0- value.val0+ADs- self.val01 :+AD0- value.val1+ADs- self.val02 :+AD0- value.val2+ADs- end+ADs-
    public property Row1: Vec3d read new Vec3d(self.val10, self.val11, self.val12) write begin self.val10 :+AD0- value.val0+ADs- self.val11 :+AD0- value.val1+ADs- self.val12 :+AD0- value.val2+ADs- end+ADs-
    public property Row2: Vec3d read new Vec3d(self.val20, self.val21, self.val22) write begin self.val20 :+AD0- value.val0+ADs- self.val21 :+AD0- value.val1+ADs- self.val22 :+AD0- value.val2+ADs- end+ADs-
    public property Row3: Vec3d read new Vec3d(self.val30, self.val31, self.val32) write begin self.val30 :+AD0- value.val0+ADs- self.val31 :+AD0- value.val1+ADs- self.val32 :+AD0- value.val2+ADs- end+ADs-
    public property Row+AFs-y: integer+AF0-: Vec3d read y+AD0-0?Row0:y+AD0-1?Row1:y+AD0-2?Row2:y+AD0-3?Row3:Arr+ACYAPA-Vec3d+AD4AWw-y+AF0- write
    case y of
      0: Row0 :+AD0- value+ADs-
      1: Row1 :+AD0- value+ADs-
      2: Row2 :+AD0- value+ADs-
      3: Row3 :+AD0- value+ADs-
      else raise new IndexOutOfRangeException('+BB0EPgQ8BDUEQA- +BEEEQgRABD4ERwQ6BDg- +BDQEPgQ7BDYENQQ9- +BDgEPAQ1BEIETA- +BDcEPQQwBEcENQQ9BDgENQ- 0..3')+ADs-
    end+ADs-
    
    public property Col0: Vec4d read new Vec4d(self.val00, self.val10, self.val20, self.val30) write begin self.val00 :+AD0- value.val0+ADs- self.val10 :+AD0- value.val1+ADs- self.val20 :+AD0- value.val2+ADs- self.val30 :+AD0- value.val3+ADs- end+ADs-
    public property Col1: Vec4d read new Vec4d(self.val01, self.val11, self.val21, self.val31) write begin self.val01 :+AD0- value.val0+ADs- self.val11 :+AD0- value.val1+ADs- self.val21 :+AD0- value.val2+ADs- self.val31 :+AD0- value.val3+ADs- end+ADs-
    public property Col2: Vec4d read new Vec4d(self.val02, self.val12, self.val22, self.val32) write begin self.val02 :+AD0- value.val0+ADs- self.val12 :+AD0- value.val1+ADs- self.val22 :+AD0- value.val2+ADs- self.val32 :+AD0- value.val3+ADs- end+ADs-
    public property Col+AFs-x: integer+AF0-: Vec4d read x+AD0-0?Col0:x+AD0-1?Col1:x+AD0-2?Col2:Arr+ACYAPA-Vec4d+AD4AWw-x+AF0- write
    case x of
      0: Col0 :+AD0- value+ADs-
      1: Col1 :+AD0- value+ADs-
      2: Col2 :+AD0- value+ADs-
      else raise new IndexOutOfRangeException('+BB0EPgQ8BDUEQA- +BEEEQgQ+BDsEMQRGBDA- +BDQEPgQ7BDYENQQ9- +BDgEPAQ1BEIETA- +BDcEPQQwBEcENQQ9BDgENQ- 0..2')+ADs-
    end+ADs-
    
    public property ColPtr0: +AF4-Vec3d read pointer(IntPtr(pointer(+AEA-self)) +- 0)+ADs-
    public property ColPtr1: +AF4-Vec3d read pointer(IntPtr(pointer(+AEA-self)) +- 32)+ADs-
    public property ColPtr2: +AF4-Vec3d read pointer(IntPtr(pointer(+AEA-self)) +- 64)+ADs-
    public property ColPtr3: +AF4-Vec3d read pointer(IntPtr(pointer(+AEA-self)) +- 96)+ADs-
    public property ColPtr+AFs-x: integer+AF0-: +AF4-Vec3d read pointer(IntPtr(pointer(+AEA-self)) +- x+ACo-32)+ADs-
    
    public static function Scale(k: double): Mtr4x3d :+AD0- new Mtr4x3d(k, 0.0, 0.0, 0.0, k, 0.0, 0.0, 0.0, k, 0.0, 0.0, 0.0)+ADs-
    
    public static function Traslate(X, Y: double): Mtr4x3d :+AD0- new Mtr4x3d(1.0, 0.0, X, 0.0, 1.0, Y, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0)+ADs-
    public static function TraslateTransposed(X, Y, Z: double): Mtr4x3d :+AD0- new Mtr4x3d(1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, X, Y, Z)+ADs-
    
    public static function RotateXYcw(rot: double): Mtr4x3d+ADs-
    begin
      var sr: double :+AD0- Sin(rot)+ADs-
      var cr: double :+AD0- Cos(rot)+ADs-
      Result :+AD0- new Mtr4x3d(
         cr, +-sr, 0.0,
        -sr,  cr, 0.0,
        0.0, 0.0, 1.0,
        0.0, 0.0, 0.0
      )+ADs-
    end+ADs-
    public static function RotateXYccw(rot: double): Mtr4x3d+ADs-
    begin
      var sr: double :+AD0- Sin(rot)+ADs-
      var cr: double :+AD0- Cos(rot)+ADs-
      Result :+AD0- new Mtr4x3d(
         cr, -sr, 0.0,
        +-sr,  cr, 0.0,
        0.0, 0.0, 1.0,
        0.0, 0.0, 0.0
      )+ADs-
    end+ADs-
    
    public static function RotateYZcw(rot: double): Mtr4x3d+ADs-
    begin
      var sr: double :+AD0- Sin(rot)+ADs-
      var cr: double :+AD0- Cos(rot)+ADs-
      Result :+AD0- new Mtr4x3d(
        1.0, 0.0, 0.0,
        0.0,  cr, +-sr,
        0.0, -sr,  cr,
        0.0, 0.0, 0.0
      )+ADs-
    end+ADs-
    public static function RotateYZccw(rot: double): Mtr4x3d+ADs-
    begin
      var sr: double :+AD0- Sin(rot)+ADs-
      var cr: double :+AD0- Cos(rot)+ADs-
      Result :+AD0- new Mtr4x3d(
        1.0, 0.0, 0.0,
        0.0,  cr, -sr,
        0.0, +-sr,  cr,
        0.0, 0.0, 0.0
      )+ADs-
    end+ADs-
    
    public static function RotateZXcw(rot: double): Mtr4x3d+ADs-
    begin
      var sr: double :+AD0- Sin(rot)+ADs-
      var cr: double :+AD0- Cos(rot)+ADs-
      Result :+AD0- new Mtr4x3d(
         cr, 0.0, -sr,
        0.0, 1.0, 0.0,
        +-sr, 0.0,  cr,
        0.0, 0.0, 0.0
      )+ADs-
    end+ADs-
    public static function RotateZXccw(rot: double): Mtr4x3d+ADs-
    begin
      var sr: double :+AD0- Sin(rot)+ADs-
      var cr: double :+AD0- Cos(rot)+ADs-
      Result :+AD0- new Mtr4x3d(
         cr, 0.0, +-sr,
        0.0, 1.0, 0.0,
        -sr, 0.0,  cr,
        0.0, 0.0, 0.0
      )+ADs-
    end+ADs-
    
    public static function Rotate3Dcw(u: Vec3d+ADs- rot: double): Mtr4x3d+ADs-
    begin
      var k1 :+AD0- Sin(rot)+ADs-
      var k2 :+AD0- 2+ACo-Sqr(Sin(rot/2))+ADs-
      
      Result.val00 :+AD0- 1 +- k2+ACo-( -u.val2+ACo-u.val2 - u.val1+ACo-u.val1 )+ADs-
      Result.val01 :+AD0- k1+ACo-u.val2 +- k2+ACo-( u.val1+ACo-u.val0 )+ADs-
      Result.val02 :+AD0- -k1+ACo-u.val1 +- k2+ACo-( u.val2+ACo-u.val0 )+ADs-
      Result.val10 :+AD0- -k1+ACo-u.val2 +- k2+ACo-( u.val0+ACo-u.val1 )+ADs-
      Result.val11 :+AD0- 1 +- k2+ACo-( -u.val2+ACo-u.val2 - u.val0+ACo-u.val0 )+ADs-
      Result.val12 :+AD0- k1+ACo-u.val0 +- k2+ACo-( u.val2+ACo-u.val1 )+ADs-
      Result.val20 :+AD0- k1+ACo-u.val1 +- k2+ACo-( u.val0+ACo-u.val2 )+ADs-
      Result.val21 :+AD0- -k1+ACo-u.val0 +- k2+ACo-( u.val1+ACo-u.val2 )+ADs-
      Result.val22 :+AD0- 1 +- k2+ACo-( -u.val1+ACo-u.val1 - u.val0+ACo-u.val0 )+ADs-
      
    end+ADs-
    
    public static function Rotate3Dccw(u: Vec3d+ADs- rot: double): Mtr4x3d+ADs-
    begin
      var k1 :+AD0- Sin(rot)+ADs-
      var k2 :+AD0- 2+ACo-Sqr(Sin(rot/2))+ADs-
      
      Result.val00 :+AD0- 1 +- k2+ACo-( -u.val2+ACo-u.val2 - u.val1+ACo-u.val1 )+ADs-
      Result.val01 :+AD0- -k1+ACo-u.val2 +- k2+ACo-( u.val1+ACo-u.val0 )+ADs-
      Result.val02 :+AD0- k1+ACo-u.val1 +- k2+ACo-( u.val2+ACo-u.val0 )+ADs-
      Result.val10 :+AD0- k1+ACo-u.val2 +- k2+ACo-( u.val0+ACo-u.val1 )+ADs-
      Result.val11 :+AD0- 1 +- k2+ACo-( -u.val2+ACo-u.val2 - u.val0+ACo-u.val0 )+ADs-
      Result.val12 :+AD0- -k1+ACo-u.val0 +- k2+ACo-( u.val2+ACo-u.val1 )+ADs-
      Result.val20 :+AD0- -k1+ACo-u.val1 +- k2+ACo-( u.val0+ACo-u.val2 )+ADs-
      Result.val21 :+AD0- k1+ACo-u.val0 +- k2+ACo-( u.val1+ACo-u.val2 )+ADs-
      Result.val22 :+AD0- 1 +- k2+ACo-( -u.val1+ACo-u.val1 - u.val0+ACo-u.val0 )+ADs-
      
    end+ADs-
    
    public function ToString: string+ADs- override+ADs-
    begin
      var res :+AD0- new StringBuilder+ADs-
      
      var ElStrs :+AD0- new string+AFs-4,3+AF0AOw-
      for var y :+AD0- 0 to 4-1 do
        for var x :+AD0- 0 to 3-1 do
          ElStrs+AFs-y,x+AF0- :+AD0- (Sign(val+AFs-y,x+AF0-)+AD0--1?'-':'+-') +- Abs(val+AFs-y,x+AF0-).ToString('f2')+ADs-
      var MtrElTextW :+AD0- ElStrs.OfType+ACYAPA-string+AD4-.Max(s-+AD4-s.Length)+ADs-
      var PrintlnMtrW :+AD0- MtrElTextW+ACo-3 +- 6+ADs- // +-2+ACo-(Width-1) +- 2+ADs-
      
      res +-+AD0- '+JQw-'+ADs-
      res.Append(+ACM-32, PrintlnMtrW)+ADs-
      res +-+AD0- '+JRA-'+ACM-10+ADs-
      res +-+AD0- '+JQI- '+ADs-
      res +-+AD0- ElStrs+AFs-0,0+AF0-.PadLeft(MtrElTextW)+ADs-
      res +-+AD0- ', '+ADs-
      res +-+AD0- ElStrs+AFs-0,1+AF0-.PadLeft(MtrElTextW)+ADs-
      res +-+AD0- ', '+ADs-
      res +-+AD0- ElStrs+AFs-0,2+AF0-.PadLeft(MtrElTextW)+ADs-
      res +-+AD0- ' +JQI-'+ACM-10+ADs-
      res +-+AD0- '+JQI- '+ADs-
      res +-+AD0- ElStrs+AFs-1,0+AF0-.PadLeft(MtrElTextW)+ADs-
      res +-+AD0- ', '+ADs-
      res +-+AD0- ElStrs+AFs-1,1+AF0-.PadLeft(MtrElTextW)+ADs-
      res +-+AD0- ', '+ADs-
      res +-+AD0- ElStrs+AFs-1,2+AF0-.PadLeft(MtrElTextW)+ADs-
      res +-+AD0- ' +JQI-'+ACM-10+ADs-
      res +-+AD0- '+JQI- '+ADs-
      res +-+AD0- ElStrs+AFs-2,0+AF0-.PadLeft(MtrElTextW)+ADs-
      res +-+AD0- ', '+ADs-
      res +-+AD0- ElStrs+AFs-2,1+AF0-.PadLeft(MtrElTextW)+ADs-
      res +-+AD0- ', '+ADs-
      res +-+AD0- ElStrs+AFs-2,2+AF0-.PadLeft(MtrElTextW)+ADs-
      res +-+AD0- ' +JQI-'+ACM-10+ADs-
      res +-+AD0- '+JQI- '+ADs-
      res +-+AD0- ElStrs+AFs-3,0+AF0-.PadLeft(MtrElTextW)+ADs-
      res +-+AD0- ', '+ADs-
      res +-+AD0- ElStrs+AFs-3,1+AF0-.PadLeft(MtrElTextW)+ADs-
      res +-+AD0- ', '+ADs-
      res +-+AD0- ElStrs+AFs-3,2+AF0-.PadLeft(MtrElTextW)+ADs-
      res +-+AD0- ' +JQI-'+ACM-10+ADs-
      res +-+AD0- '+JRQ-'+ADs-
      res.Append(+ACM-32, PrintlnMtrW)+ADs-
      res +-+AD0- '+JRg-'+ADs-
      
      Result :+AD0- res.ToString+ADs-
    end+ADs-
    
    public function Println: Mtr4x3d+ADs-
    begin
      Writeln(self.ToString)+ADs-
      Result :+AD0- self+ADs-
    end+ADs-
    
    public static function operator+ACo-(m: Mtr4x3d+ADs- v: Vec3d): Vec4d :+AD0- new Vec4d(m.val00+ACo-v.val0+-m.val01+ACo-v.val1+-m.val02+ACo-v.val2, m.val10+ACo-v.val0+-m.val11+ACo-v.val1+-m.val12+ACo-v.val2, m.val20+ACo-v.val0+-m.val21+ACo-v.val1+-m.val22+ACo-v.val2, m.val30+ACo-v.val0+-m.val31+ACo-v.val1+-m.val32+ACo-v.val2)+ADs-
    public static function operator+ACo-(v: Vec4d+ADs- m: Mtr4x3d): Vec3d :+AD0- new Vec3d(m.val00+ACo-v.val0+-m.val10+ACo-v.val1+-m.val20+ACo-v.val2+-m.val30+ACo-v.val3, m.val01+ACo-v.val0+-m.val11+ACo-v.val1+-m.val21+ACo-v.val2+-m.val31+ACo-v.val3, m.val02+ACo-v.val0+-m.val12+ACo-v.val1+-m.val22+ACo-v.val2+-m.val32+ACo-v.val3)+ADs-
    
    public static function operator implicit(m: Mtr2x2f): Mtr4x3d :+AD0- new Mtr4x3d(m.val00, m.val01, 0.0, m.val10, m.val11, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)+ADs-
    public static function operator implicit(m: Mtr4x3d): Mtr2x2f :+AD0- new Mtr2x2f(m.val00, m.val01, m.val10, m.val11)+ADs-
    
    public static function operator implicit(m: Mtr3x3f): Mtr4x3d :+AD0- new Mtr4x3d(m.val00, m.val01, m.val02, m.val10, m.val11, m.val12, m.val20, m.val21, m.val22, 0.0, 0.0, 0.0)+ADs-
    public static function operator implicit(m: Mtr4x3d): Mtr3x3f :+AD0- new Mtr3x3f(m.val00, m.val01, m.val02, m.val10, m.val11, m.val12, m.val20, m.val21, m.val22)+ADs-
    
    public static function operator implicit(m: Mtr4x4f): Mtr4x3d :+AD0- new Mtr4x3d(m.val00, m.val01, m.val02, m.val10, m.val11, m.val12, m.val20, m.val21, m.val22, m.val30, m.val31, m.val32)+ADs-
    public static function operator implicit(m: Mtr4x3d): Mtr4x4f :+AD0- new Mtr4x4f(m.val00, m.val01, m.val02, 0.0, m.val10, m.val11, m.val12, 0.0, m.val20, m.val21, m.val22, 0.0, m.val30, m.val31, m.val32, 0.0)+ADs-
    
    public static function operator implicit(m: Mtr2x3f): Mtr4x3d :+AD0- new Mtr4x3d(m.val00, m.val01, m.val02, m.val10, m.val11, m.val12, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)+ADs-
    public static function operator implicit(m: Mtr4x3d): Mtr2x3f :+AD0- new Mtr2x3f(m.val00, m.val01, m.val02, m.val10, m.val11, m.val12)+ADs-
    
    public static function operator implicit(m: Mtr3x2f): Mtr4x3d :+AD0- new Mtr4x3d(m.val00, m.val01, 0.0, m.val10, m.val11, 0.0, m.val20, m.val21, 0.0, 0.0, 0.0, 0.0)+ADs-
    public static function operator implicit(m: Mtr4x3d): Mtr3x2f :+AD0- new Mtr3x2f(m.val00, m.val01, m.val10, m.val11, m.val20, m.val21)+ADs-
    
    public static function operator implicit(m: Mtr2x4f): Mtr4x3d :+AD0- new Mtr4x3d(m.val00, m.val01, m.val02, m.val10, m.val11, m.val12, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)+ADs-
    public static function operator implicit(m: Mtr4x3d): Mtr2x4f :+AD0- new Mtr2x4f(m.val00, m.val01, m.val02, 0.0, m.val10, m.val11, m.val12, 0.0)+ADs-
    
    public static function operator implicit(m: Mtr4x2f): Mtr4x3d :+AD0- new Mtr4x3d(m.val00, m.val01, 0.0, m.val10, m.val11, 0.0, m.val20, m.val21, 0.0, m.val30, m.val31, 0.0)+ADs-
    public static function operator implicit(m: Mtr4x3d): Mtr4x2f :+AD0- new Mtr4x2f(m.val00, m.val01, m.val10, m.val11, m.val20, m.val21, m.val30, m.val31)+ADs-
    
    public static function operator implicit(m: Mtr3x4f): Mtr4x3d :+AD0- new Mtr4x3d(m.val00, m.val01, m.val02, m.val10, m.val11, m.val12, m.val20, m.val21, m.val22, 0.0, 0.0, 0.0)+ADs-
    public static function operator implicit(m: Mtr4x3d): Mtr3x4f :+AD0- new Mtr3x4f(m.val00, m.val01, m.val02, 0.0, m.val10, m.val11, m.val12, 0.0, m.val20, m.val21, m.val22, 0.0)+ADs-
    
    public static function operator implicit(m: Mtr4x3f): Mtr4x3d :+AD0- new Mtr4x3d(m.val00, m.val01, m.val02, m.val10, m.val11, m.val12, m.val20, m.val21, m.val22, m.val30, m.val31, m.val32)+ADs-
    public static function operator implicit(m: Mtr4x3d): Mtr4x3f :+AD0- new Mtr4x3f(m.val00, m.val01, m.val02, m.val10, m.val11, m.val12, m.val20, m.val21, m.val22, m.val30, m.val31, m.val32)+ADs-
    
    public static function operator implicit(m: Mtr2x2d): Mtr4x3d :+AD0- new Mtr4x3d(m.val00, m.val01, 0.0, m.val10, m.val11, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)+ADs-
    public static function operator implicit(m: Mtr4x3d): Mtr2x2d :+AD0- new Mtr2x2d(m.val00, m.val01, m.val10, m.val11)+ADs-
    
    public static function operator implicit(m: Mtr3x3d): Mtr4x3d :+AD0- new Mtr4x3d(m.val00, m.val01, m.val02, m.val10, m.val11, m.val12, m.val20, m.val21, m.val22, 0.0, 0.0, 0.0)+ADs-
    public static function operator implicit(m: Mtr4x3d): Mtr3x3d :+AD0- new Mtr3x3d(m.val00, m.val01, m.val02, m.val10, m.val11, m.val12, m.val20, m.val21, m.val22)+ADs-
    
    public static function operator implicit(m: Mtr4x4d): Mtr4x3d :+AD0- new Mtr4x3d(m.val00, m.val01, m.val02, m.val10, m.val11, m.val12, m.val20, m.val21, m.val22, m.val30, m.val31, m.val32)+ADs-
    public static function operator implicit(m: Mtr4x3d): Mtr4x4d :+AD0- new Mtr4x4d(m.val00, m.val01, m.val02, 0.0, m.val10, m.val11, m.val12, 0.0, m.val20, m.val21, m.val22, 0.0, m.val30, m.val31, m.val32, 0.0)+ADs-
    
    public static function operator implicit(m: Mtr2x3d): Mtr4x3d :+AD0- new Mtr4x3d(m.val00, m.val01, m.val02, m.val10, m.val11, m.val12, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)+ADs-
    public static function operator implicit(m: Mtr4x3d): Mtr2x3d :+AD0- new Mtr2x3d(m.val00, m.val01, m.val02, m.val10, m.val11, m.val12)+ADs-
    
    public static function operator implicit(m: Mtr3x2d): Mtr4x3d :+AD0- new Mtr4x3d(m.val00, m.val01, 0.0, m.val10, m.val11, 0.0, m.val20, m.val21, 0.0, 0.0, 0.0, 0.0)+ADs-
    public static function operator implicit(m: Mtr4x3d): Mtr3x2d :+AD0- new Mtr3x2d(m.val00, m.val01, m.val10, m.val11, m.val20, m.val21)+ADs-
    
    public static function operator implicit(m: Mtr2x4d): Mtr4x3d :+AD0- new Mtr4x3d(m.val00, m.val01, m.val02, m.val10, m.val11, m.val12, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)+ADs-
    public static function operator implicit(m: Mtr4x3d): Mtr2x4d :+AD0- new Mtr2x4d(m.val00, m.val01, m.val02, 0.0, m.val10, m.val11, m.val12, 0.0)+ADs-
    
    public static function operator implicit(m: Mtr4x2d): Mtr4x3d :+AD0- new Mtr4x3d(m.val00, m.val01, 0.0, m.val10, m.val11, 0.0, m.val20, m.val21, 0.0, m.val30, m.val31, 0.0)+ADs-
    public static function operator implicit(m: Mtr4x3d): Mtr4x2d :+AD0- new Mtr4x2d(m.val00, m.val01, m.val10, m.val11, m.val20, m.val21, m.val30, m.val31)+ADs-
    
    public static function operator implicit(m: Mtr3x4d): Mtr4x3d :+AD0- new Mtr4x3d(m.val00, m.val01, m.val02, m.val10, m.val11, m.val12, m.val20, m.val21, m.val22, 0.0, 0.0, 0.0)+ADs-
    public static function operator implicit(m: Mtr4x3d): Mtr3x4d :+AD0- new Mtr3x4d(m.val00, m.val01, m.val02, 0.0, m.val10, m.val11, m.val12, 0.0, m.val20, m.val21, m.val22, 0.0)+ADs-
    
  end+ADs-
  
  +AHsAJA-endregion Mtr+AH0-
  