  
  
  
  /// Ядро OpenGL
  /// Все функции отсотированы по разрелу спецификации в исходниках
  gl = static class
    
    {$region 2.0 - OpenGL Fundamentals}
    
    {$region 2.3 - Command Execution}
    
    // 2.3.1
    
    public static function GetError: ErrorCode;
    external 'opengl32.dll' name 'glGetError';
    
    // 2.3.2
    
    public static function GetGraphicsResetStatus: ErrorCode;
    external 'opengl32.dll' name 'glGetGraphicsResetStatus';
    
    // 2.3.3
    
    public static procedure Finish;
    external 'opengl32.dll' name 'glFinish';
    
    public static procedure Flush;
    external 'opengl32.dll' name 'glFlush';
    
    {$endregion 2.3 - Command Execution}
    
    {$endregion 2.0 - OpenGL Fundamentals}
    
    {$region 4.0 - Event Model}
    
    {$region 4.1 - Sync Objects and Fences}
    
    public static function FenceSync(condition: FenceCondition; flags: ReservedFlags): GLsync;
    external 'opengl32.dll' name 'glFenceSync';
    
    public static procedure DeleteSync(sync: GLsync);
    external 'opengl32.dll' name 'glDeleteSync';
    
    // 4.1.1
    
    public static function ClientWaitSync(sync: GLsync; flags: CommandFlushingBehaviorFlags; timeout: TimeSpan): ClientWaitSyncResult;
    external 'opengl32.dll' name 'glClientWaitSync';
    public static function ClientWaitSync(sync: GLsync; flags: CommandFlushingBehaviorFlags; timeout: UInt64): ClientWaitSyncResult;
    external 'opengl32.dll' name 'glClientWaitSync';
    
    public static procedure WaitSync(sync: GLsync; flags: ReservedFlags; timeout: ReservedTimeoutMode);
    external 'opengl32.dll' name 'glWaitSync';
    
    // 4.1.3
    
    public static procedure GetSynciv(sync: GLsync; pname: SyncObjInfoType; bufSize: Int32; var length: Int32; var values: SyncObjectType);
    external 'opengl32.dll' name 'glGetSynciv';
    public static procedure GetSynciv(sync: GLsync; pname: SyncObjInfoType; bufSize: Int32; var length: Int32; var values: FenceStatus);
    external 'opengl32.dll' name 'glGetSynciv';
    public static procedure GetSynciv(sync: GLsync; pname: SyncObjInfoType; bufSize: Int32; var length: Int32; var values: FenceCondition);
    external 'opengl32.dll' name 'glGetSynciv';
    public static procedure GetSynciv(sync: GLsync; pname: SyncObjInfoType; bufSize: Int32; var length: Int32; var values: Int32);
    external 'opengl32.dll' name 'glGetSynciv';
    public static procedure GetSynciv(sync: GLsync; pname: SyncObjInfoType; bufSize: Int32; length: pointer; values: pointer);
    external 'opengl32.dll' name 'glGetSynciv';
    
    public static function IsSync(sync: GLsync): boolean;
    external 'opengl32.dll' name 'glIsSync';
    
    {$endregion 4.1 - Sync Objects and Fences}
    
    {$region 4.2 - Query Objects and Asynchronous Queries}
    
    // 4.2.2
    
    public static procedure GenQueries(n: Int32; [MarshalAs(UnmanagedType.LPArray)] ids: array of QueryName);
    external 'opengl32.dll' name 'glGenQueries';
    public static procedure GenQueries(n: Int32; var ids: QueryName);
    external 'opengl32.dll' name 'glGenQueries';
    public static procedure GenQueries(n: Int32; ids: pointer);
    external 'opengl32.dll' name 'glGenQueries';
    
    public static procedure CreateQueries(target: QueryTargetType; n: Int32; [MarshalAs(UnmanagedType.LPArray)] ids: array of QueryName);
    external 'opengl32.dll' name 'glCreateQueries';
    public static procedure CreateQueries(target: QueryTargetType; n: Int32; var ids: QueryName);
    external 'opengl32.dll' name 'glCreateQueries';
    public static procedure CreateQueries(target: QueryTargetType; n: Int32; ids: pointer);
    external 'opengl32.dll' name 'glCreateQueries';
    
    public static procedure DeleteQueries(n: Int32; [MarshalAs(UnmanagedType.LPArray)] ids: array of QueryName);
    external 'opengl32.dll' name 'glDeleteQueries';
    public static procedure DeleteQueries(n: Int32; var ids: QueryName);
    external 'opengl32.dll' name 'glDeleteQueries';
    public static procedure DeleteQueries(n: Int32; ids: pointer);
    external 'opengl32.dll' name 'glDeleteQueries';
    
    public static procedure BeginQueryIndexed(target: QueryTargetType; index: UInt32; id: QueryName);
    external 'opengl32.dll' name 'glBeginQueryIndexed';
    public static procedure BeginQuery(target: QueryTargetType; id: QueryName);
    external 'opengl32.dll' name 'glBeginQuery';
    
    public static procedure EndQueryIndexed(target: QueryTargetType; index: UInt32);
    external 'opengl32.dll' name 'glEndQueryIndexed';
    public static procedure EndQuery(target: QueryTargetType);
    external 'opengl32.dll' name 'glEndQuery';
    
    // 4.2.3
    
    public static function IsQuery(id: QueryName): boolean;
    external 'opengl32.dll' name 'glIsQuery';
    
    public static procedure GetQueryIndexediv(target: QueryTargetType; index: UInt32; pname: GetQueryInfoName; var &params: QueryName);
    external 'opengl32.dll' name 'glGetQueryIndexediv';
    public static procedure GetQueryIndexediv(target: QueryTargetType; index: UInt32; pname: GetQueryInfoName; var &params: Int32);
    external 'opengl32.dll' name 'glGetQueryIndexediv';
    public static procedure GetQueryIndexediv(target: QueryTargetType; index: UInt32; pname: GetQueryInfoName; var &params: boolean);
    external 'opengl32.dll' name 'glGetQueryIndexediv';
    public static procedure GetQueryIndexediv(target: QueryTargetType; index: UInt32; pname: GetQueryInfoName; var &params: TimeSpan);
    external 'opengl32.dll' name 'glGetQueryIndexediv';
    public static procedure GetQueryIndexediv(target: QueryTargetType; index: UInt32; pname: GetQueryInfoName; var &params: DateTime);
    external 'opengl32.dll' name 'glGetQueryIndexediv';
    public static procedure GetQueryIndexediv(target: QueryTargetType; index: UInt32; pname: GetQueryInfoName; &params: pointer);
    external 'opengl32.dll' name 'glGetQueryIndexediv';
    
    public static procedure GetQueryiv(target: QueryTargetType; pname: GetQueryInfoName; var &params: QueryName);
    external 'opengl32.dll' name 'glGetQueryiv';
    public static procedure GetQueryiv(target: QueryTargetType; pname: GetQueryInfoName; var &params: Int32);
    external 'opengl32.dll' name 'glGetQueryiv';
    public static procedure GetQueryiv(target: QueryTargetType; pname: GetQueryInfoName; var &params: boolean);
    external 'opengl32.dll' name 'glGetQueryiv';
    public static procedure GetQueryiv(target: QueryTargetType; pname: GetQueryInfoName; var &params: TimeSpan);
    external 'opengl32.dll' name 'glGetQueryiv';
    public static procedure GetQueryiv(target: QueryTargetType; pname: GetQueryInfoName; var &params: DateTime);
    external 'opengl32.dll' name 'glGetQueryiv';
    public static procedure GetQueryiv(target: QueryTargetType; pname: GetQueryInfoName; &params: pointer);
    external 'opengl32.dll' name 'glGetQueryiv';
    
    public static procedure GetQueryObjectiv(id: QueryName; pname: GetQueryObjectInfoName; var &params: Int32);
    external 'opengl32.dll' name 'glGetQueryObjectiv';
    public static procedure GetQueryObjectiv(id: QueryName; pname: GetQueryObjectInfoName; var &params: boolean);
    external 'opengl32.dll' name 'glGetQueryObjectiv';
    public static procedure GetQueryObjectiv(id: QueryName; pname: GetQueryObjectInfoName; &params: pointer);
    external 'opengl32.dll' name 'glGetQueryObjectiv';
    
    public static procedure GetQueryObjectuiv(id: QueryName; pname: GetQueryObjectInfoName; var &params: UInt32); // QueryName=UInt32, поэтому его можно сюда же передавать
    external 'opengl32.dll' name 'glGetQueryObjectuiv';
    public static procedure GetQueryObjectuiv(id: QueryName; pname: GetQueryObjectInfoName; &params: pointer);
    external 'opengl32.dll' name 'glGetQueryObjectuiv';
    
    public static procedure GetQueryObjecti64v(id: QueryName; pname: GetQueryObjectInfoName; var &params: Int64);
    external 'opengl32.dll' name 'glGetQueryObjecti64v';
    public static procedure GetQueryObjecti64v(id: QueryName; pname: GetQueryObjectInfoName; &params: pointer);
    external 'opengl32.dll' name 'glGetQueryObjecti64v';
    
    public static procedure GetQueryObjectui64v(id: QueryName; pname: GetQueryObjectInfoName; var &params: TimeSpan);
    external 'opengl32.dll' name 'glGetQueryObjectui64v';
    public static procedure GetQueryObjectui64v(id: QueryName; pname: GetQueryObjectInfoName; var &params: DateTime);
    external 'opengl32.dll' name 'glGetQueryObjectui64v';
    public static procedure GetQueryObjectui64v(id: QueryName; pname: GetQueryObjectInfoName; var &params: UInt64);
    external 'opengl32.dll' name 'glGetQueryObjectui64v';
    public static procedure GetQueryObjectui64v(id: QueryName; pname: GetQueryObjectInfoName; &params: pointer);
    external 'opengl32.dll' name 'glGetQueryObjectui64v';
    
    public static procedure GetQueryBufferObjectiv(id: QueryName; buffer: BufferName; pname: GetQueryObjectInfoName; offset: IntPtr);
    external 'opengl32.dll' name 'glGetQueryBufferObjectiv';
    
    public static procedure GetQueryBufferObjectuiv(id: QueryName; buffer: BufferName; pname: GetQueryObjectInfoName; offset: IntPtr);
    external 'opengl32.dll' name 'glGetQueryBufferObjectuiv';
    
    public static procedure GetQueryBufferObjecti64v(id: QueryName; buffer: BufferName; pname: GetQueryObjectInfoName; offset: IntPtr);
    external 'opengl32.dll' name 'glGetQueryBufferObjecti64v';
    
    public static procedure GetQueryBufferObjectui64v(id: QueryName; buffer: BufferName; pname: GetQueryObjectInfoName; offset: IntPtr);
    external 'opengl32.dll' name 'glGetQueryBufferObjectui64v';
    
    {$endregion 4.2 - Query Objects and Asynchronous Queries}
    
    {$region 4.3 - Time Queries}
    
    public static procedure QueryCounter(id: QueryName; target: QueryTargetType);
    external 'opengl32.dll' name 'glQueryCounter';
    
    {$endregion 4.3 - Time Queries}
    
    {$endregion 4.0 - Event Model}
    
    {$region 6.0 - Buffer Objects}
    
    public static procedure GenBuffers(n: Int32; [MarshalAs(UnmanagedType.LPArray)] buffers: array of BufferName);
    external 'opengl32.dll' name 'glGenBuffers';
    public static procedure GenBuffers(n: Int32; var buffers: BufferName);
    external 'opengl32.dll' name 'glGenBuffers';
    public static procedure GenBuffers(n: Int32; buffers: pointer);
    external 'opengl32.dll' name 'glGenBuffers';
    
    public static procedure CreateBuffers(n: Int32; [MarshalAs(UnmanagedType.LPArray)] buffers: array of BufferName);
    external 'opengl32.dll' name 'glCreateBuffers';
    public static procedure CreateBuffers(n: Int32; var buffers: BufferName);
    external 'opengl32.dll' name 'glCreateBuffers';
    public static procedure CreateBuffers(n: Int32; buffers: pointer);
    external 'opengl32.dll' name 'glCreateBuffers';
    
    public static procedure DeleteBuffers(n: Int32; [MarshalAs(UnmanagedType.LPArray)] buffers: array of BufferName);
    external 'opengl32.dll' name 'glDeleteBuffers';
    public static procedure DeleteBuffers(n: Int32; var buffers: BufferName);
    external 'opengl32.dll' name 'glDeleteBuffers';
    public static procedure DeleteBuffers(n: Int32; buffers: pointer);
    external 'opengl32.dll' name 'glDeleteBuffers';
    
    public static function IsBuffer(buffer: BufferName): boolean;
    external 'opengl32.dll' name 'glIsBuffer';
    
    {$region 6.1 - Creating and Binding Buffer Objects}
    
    public static procedure BindBuffer(target: BufferBindType; buffer: BufferName);
    external 'opengl32.dll' name 'glBindBuffer';
    
    // 6.1.1
    
    public static procedure BindBufferRange(target: BufferBindType; index: UInt32; buffer: BufferName; offset: IntPtr; size: UIntPtr);
    external 'opengl32.dll' name 'glBindBufferRange';
    
    public static procedure BindBufferBase(target: BufferBindType; index: UInt32; buffer: BufferName);
    external 'opengl32.dll' name 'glBindBufferBase';
    
    public static procedure BindBuffersBase(target: BufferBindType; first: UInt32; count: Int32; [MarshalAs(UnmanagedType.LPArray)] buffers: array of BufferName);
    external 'opengl32.dll' name 'glBindBuffersBase';
    public static procedure BindBuffersBase(target: BufferBindType; first: UInt32; count: Int32; var buffers: BufferName);
    external 'opengl32.dll' name 'glBindBuffersBase';
    public static procedure BindBuffersBase(target: BufferBindType; first: UInt32; count: Int32; buffers: pointer);
    external 'opengl32.dll' name 'glBindBuffersBase';
    
    public static procedure BindBuffersRange(target: BufferBindType; first: UInt32; count: Int32; [MarshalAs(UnmanagedType.LPArray)] buffers: array of BufferName; [MarshalAs(UnmanagedType.LPArray)] offsets: array of IntPtr; [MarshalAs(UnmanagedType.LPArray)] sizes: array of UIntPtr);
    external 'opengl32.dll' name 'glBindBuffersRange';
    public static procedure BindBuffersRange(target: BufferBindType; first: UInt32; count: Int32; var buffers: BufferName; var offsets: IntPtr; var sizes: UIntPtr);
    external 'opengl32.dll' name 'glBindBuffersRange';
    public static procedure BindBuffersRange(target: BufferBindType; first: UInt32; count: Int32; buffers: pointer; offsets: pointer; sizes: pointer);
    external 'opengl32.dll' name 'glBindBuffersRange';
    
    {$endregion 6.1 - Creating and Binding Buffer Objects}
    
    {$region 6.2 - Creating and Modifying Buffer Object Data Stores}
    
    public static procedure BufferStorage(target: BufferBindType; size: UIntPtr; data: IntPtr; flags: BufferDataUsage);
    external 'opengl32.dll' name 'glBufferStorage';
    public static procedure BufferStorage(target: BufferBindType; size: UIntPtr; data: pointer; flags: BufferDataUsage);
    external 'opengl32.dll' name 'glBufferStorage';
    
    public static procedure NamedBufferStorage(buffer: BufferName; size: UIntPtr; data: IntPtr; flags: BufferDataUsage);
    external 'opengl32.dll' name 'glNamedBufferStorage';
    public static procedure NamedBufferStorage(buffer: BufferName; size: UIntPtr; data: pointer; flags: BufferDataUsage);
    external 'opengl32.dll' name 'glNamedBufferStorage';
    
    public static procedure BufferData(target: BufferBindType; size: UIntPtr; data: IntPtr; usage: BufferDataUsage);
    external 'opengl32.dll' name 'glBufferData';
    public static procedure BufferData(target: BufferBindType; size: UIntPtr; data: pointer; usage: BufferDataUsage);
    external 'opengl32.dll' name 'glBufferData';
    
    public static procedure NamedBufferData(buffer: BufferName; size: UIntPtr; data: IntPtr; usage: BufferDataUsage);
    external 'opengl32.dll' name 'glNamedBufferData';
    public static procedure NamedBufferData(buffer: BufferName; size: UIntPtr; data: pointer; usage: BufferDataUsage);
    external 'opengl32.dll' name 'glNamedBufferData';
    
    public static procedure BufferSubData(target: BufferBindType; offset: IntPtr; size: UIntPtr; data: IntPtr);
    external 'opengl32.dll' name 'glBufferSubData';
    public static procedure BufferSubData(target: BufferBindType; offset: IntPtr; size: UIntPtr; data: pointer);
    external 'opengl32.dll' name 'glBufferSubData';
    
    public static procedure NamedBufferSubData(buffer: BufferName; offset: IntPtr; size: UIntPtr; data: IntPtr);
    external 'opengl32.dll' name 'glNamedBufferSubData';
    public static procedure NamedBufferSubData(buffer: BufferName; offset: IntPtr; size: UIntPtr; data: pointer);
    external 'opengl32.dll' name 'glNamedBufferSubData';
    
    public static procedure ClearBufferSubData(target: BufferBindType; internalformat: InternalDataFormat; offset: IntPtr; size: UIntPtr; format: DataFormat; &type: DataType; data: IntPtr);
    external 'opengl32.dll' name 'glClearBufferSubData';
    public static procedure ClearBufferSubData(target: BufferBindType; internalformat: InternalDataFormat; offset: IntPtr; size: UIntPtr; format: DataFormat; &type: DataType; data: pointer);
    external 'opengl32.dll' name 'glClearBufferSubData';
    
    public static procedure ClearNamedBufferSubData(buffer: BufferName; internalformat: InternalDataFormat; offset: IntPtr; size: UIntPtr; format: DataFormat; &type: DataType; data: IntPtr);
    external 'opengl32.dll' name 'glClearNamedBufferSubData';
    public static procedure ClearNamedBufferSubData(buffer: BufferName; internalformat: InternalDataFormat; offset: IntPtr; size: UIntPtr; format: DataFormat; &type: DataType; data: pointer);
    external 'opengl32.dll' name 'glClearNamedBufferSubData';
    
    public static procedure ClearBufferData(target: BufferBindType; internalformat: InternalDataFormat; format: DataFormat; &type: DataType; data: IntPtr);
    external 'opengl32.dll' name 'glClearBufferData';
    public static procedure ClearBufferData(target: BufferBindType; internalformat: InternalDataFormat; format: DataFormat; &type: DataType; data: pointer);
    external 'opengl32.dll' name 'glClearBufferData';
    
    public static procedure ClearNamedBufferData(buffer: BufferName; internalformat: InternalDataFormat; format: DataFormat; &type: DataType; data: IntPtr);
    external 'opengl32.dll' name 'glClearNamedBufferData';
    public static procedure ClearNamedBufferData(buffer: BufferName; internalformat: InternalDataFormat; format: DataFormat; &type: DataType; data: pointer);
    external 'opengl32.dll' name 'glClearNamedBufferData';
    
    {$endregion 6.2 - Creating and Modifying Buffer Object Data Stores}
    
    {$region 6.3 - Mapping and Unmapping Buffer Data}
    
    public static function MapBufferRange(target: BufferBindType; offset: IntPtr; length: UIntPtr; access: BufferMapFlags): IntPtr;
    external 'opengl32.dll' name 'glMapBufferRange';
    public static function MapNamedBufferRange(buffer: BufferName; offset: IntPtr; length: UIntPtr; access: BufferMapFlags): IntPtr;
    external 'opengl32.dll' name 'glMapNamedBufferRange';
    
    public static function MapBuffer(target: BufferBindType; access: BufferMapFlags): IntPtr;
    external 'opengl32.dll' name 'glMapBuffer';
    public static function MapNamedBuffer(buffer: BufferName; access: BufferMapFlags): IntPtr;
    external 'opengl32.dll' name 'glMapNamedBuffer';
    
    public static procedure FlushMappedBufferRange(target: BufferBindType; offset: IntPtr; length: UIntPtr);
    external 'opengl32.dll' name 'glFlushMappedBufferRange';
    public static procedure FlushMappedNamedBufferRange(buffer: BufferName; offset: IntPtr; length: UIntPtr);
    external 'opengl32.dll' name 'glFlushMappedNamedBufferRange';
    
    // 6.3.1
    
    public static function UnmapBuffer(target: BufferBindType): boolean;
    external 'opengl32.dll' name 'glUnmapBuffer';
    public static function UnmapNamedBuffer(buffer: BufferName): boolean;
    external 'opengl32.dll' name 'glUnmapNamedBuffer';
    
    {$endregion 6.3 - Mapping and Unmapping Buffer Data}
    
    {$region 6.5 - Invalidating Buffer Data}
    
    public static procedure InvalidateBufferSubData(buffer: BufferName; offset: IntPtr; length: UIntPtr);
    external 'opengl32.dll' name 'glInvalidateBufferSubData';
    
    public static procedure InvalidateBufferData(buffer: BufferName);
    external 'opengl32.dll' name 'glInvalidateBufferData';
    
    {$endregion 6.5 - Invalidating Buffer Data}
    
    {$region 6.6 - Copying Between Buffers}
    
    public static procedure CopyBufferSubData(readTarget, writeTarget: BufferBindType; readOffset, writeOffset: IntPtr; size: UIntPtr);
    external 'opengl32.dll' name 'glCopyBufferSubData';
    public static procedure CopyNamedBufferSubData(readBuffer, writeBuffer: BufferName; readOffset, writeOffset: IntPtr; size: UIntPtr);
    external 'opengl32.dll' name 'glCopyNamedBufferSubData';
    
    {$endregion 6.6 - Copying Between Buffers}
    
    {$region 6.7 - Buffer Object Queries}
    
    public static procedure GetBufferParameteriv(target: BufferBindType; pname: BufferInfoType; var &params: BufferDataUsage);
    external 'opengl32.dll' name 'glGetBufferParameteriv';
    public static procedure GetBufferParameteriv(target: BufferBindType; pname: BufferInfoType; var &params: AccessType);
    external 'opengl32.dll' name 'glGetBufferParameteriv';
    public static procedure GetBufferParameteriv(target: BufferBindType; pname: BufferInfoType; var &params: Int32);
    external 'opengl32.dll' name 'glGetBufferParameteriv';
    public static procedure GetBufferParameteriv(target: BufferBindType; pname: BufferInfoType; var &params: boolean);
    external 'opengl32.dll' name 'glGetBufferParameteriv';
    public static procedure GetBufferParameteriv(target: BufferBindType; pname: BufferInfoType; &params: pointer);
    external 'opengl32.dll' name 'glGetBufferParameteriv';
    
    public static procedure GetBufferParameteri64v(target: BufferBindType; pname: BufferInfoType; var &params: Int64);
    external 'opengl32.dll' name 'glGetBufferParameteri64v';
    public static procedure GetBufferParameteri64v(target: BufferBindType; pname: BufferInfoType; &params: pointer);
    external 'opengl32.dll' name 'glGetBufferParameteri64v';
    
    public static procedure GetNamedBufferParameteriv(target: BufferName; pname: BufferInfoType; var &params: BufferDataUsage);
    external 'opengl32.dll' name 'glGetNamedBufferParameteriv';
    public static procedure GetNamedBufferParameteriv(target: BufferName; pname: BufferInfoType; var &params: AccessType);
    external 'opengl32.dll' name 'glGetNamedBufferParameteriv';
    public static procedure GetNamedBufferParameteriv(target: BufferName; pname: BufferInfoType; var &params: Int32);
    external 'opengl32.dll' name 'glGetNamedBufferParameteriv';
    public static procedure GetNamedBufferParameteriv(target: BufferName; pname: BufferInfoType; var &params: boolean);
    external 'opengl32.dll' name 'glGetNamedBufferParameteriv';
    public static procedure GetNamedBufferParameteriv(target: BufferName; pname: BufferInfoType; &params: pointer);
    external 'opengl32.dll' name 'glGetNamedBufferParameteriv';
    
    public static procedure GetNamedBufferParameteri64v(target: BufferName; pname: BufferInfoType; var &params: Int64);
    external 'opengl32.dll' name 'glGetNamedBufferParameteri64v';
    public static procedure GetNamedBufferParameteri64v(target: BufferName; pname: BufferInfoType; &params: pointer);
    external 'opengl32.dll' name 'glGetNamedBufferParameteri64v';
    
    public static procedure GetBufferSubData(target: BufferBindType; offset: IntPtr; size: UIntPtr; data: IntPtr);
    external 'opengl32.dll' name 'glGetBufferSubData';
    public static procedure GetBufferSubData(target: BufferBindType; offset: IntPtr; size: UIntPtr; data: pointer);
    external 'opengl32.dll' name 'glGetBufferSubData';
    
    public static procedure GetNamedBufferSubData(buffer: BufferName; offset: IntPtr; size: UIntPtr; data: IntPtr);
    external 'opengl32.dll' name 'glGetNamedBufferSubData';
    public static procedure GetNamedBufferSubData(buffer: BufferName; offset: IntPtr; size: UIntPtr; data: pointer);
    external 'opengl32.dll' name 'glGetNamedBufferSubData';
    
    public static procedure GetBufferPointerv(target: BufferBindType; pname: BufferInfoType; var &params: IntPtr);
    external 'opengl32.dll' name 'glGetBufferPointerv';
    public static procedure GetBufferPointerv(target: BufferBindType; pname: BufferInfoType; var &params: pointer);
    external 'opengl32.dll' name 'glGetBufferPointerv';
    public static procedure GetBufferPointerv(target: BufferBindType; pname: BufferInfoType; &params: ^IntPtr);
    external 'opengl32.dll' name 'glGetBufferPointerv';
    
    public static procedure GetNamedBufferPointerv(buffer: BufferName; pname: BufferInfoType; var &params: IntPtr);
    external 'opengl32.dll' name 'glGetNamedBufferPointerv';
    public static procedure GetNamedBufferPointerv(buffer: BufferName; pname: BufferInfoType; var &params: pointer);
    external 'opengl32.dll' name 'glGetNamedBufferPointerv';
    public static procedure GetNamedBufferPointerv(buffer: BufferName; pname: BufferInfoType; &params: ^IntPtr);
    external 'opengl32.dll' name 'glGetNamedBufferPointerv';
    
    {$endregion 6.7 - Buffer Object Queries}
    
    {$endregion 6.0 - Buffer Objects}
    
    {$region 7.0 - Programs and Shaders}
    
    {$region 7.1 - Shader Objects}
    
    public static function CreateShader(&type: ShaderType): ShaderName;
    external 'opengl32.dll' name 'glCreateShader';
    
    public static procedure ShaderSource(shader: ShaderName; count: Int32; [MarshalAs(UnmanagedType.LPArray, ArraySubType = UnmanagedType.LPStr)] strings: array of string; [MarshalAs(UnmanagedType.LPArray)] lengths: array of Int32);
    external 'opengl32.dll' name 'glShaderSource';
    public static procedure ShaderSource(shader: ShaderName; count: Int32; [MarshalAs(UnmanagedType.SysInt, ArraySubType = UnmanagedType.LPStr)] var strings: string; var lengths: Int32);
    external 'opengl32.dll' name 'glShaderSource';
    public static procedure ShaderSource(shader: ShaderName; count: Int32; var strings: IntPtr; var lengths: Int32);
    external 'opengl32.dll' name 'glShaderSource';
    public static procedure ShaderSource(shader: ShaderName; count: Int32; strings: pointer; lengths: pointer);
    external 'opengl32.dll' name 'glShaderSource';
    
    public static procedure CompileShader(shader: ShaderName);
    external 'opengl32.dll' name 'glCompileShader';
    
    public static procedure ReleaseShaderCompiler;
    external 'opengl32.dll' name 'glReleaseShaderCompiler';
    
    public static procedure DeleteShader(shader: ShaderName);
    external 'opengl32.dll' name 'glDeleteShader';
    
    public static function IsShader(shader: ShaderName): boolean;
    external 'opengl32.dll' name 'glIsShader';
    
    {$endregion 7.1 - Shader Objects}
    
    {$region 7.2 - Shader Binaries}
    
    // для получения binaryformat
    // надо вызвать gl.Get... с параметрами:
    // GLGetQueries.NUM_SHADER_BINARY_FORMATS
    // GLGetQueries.SHADER_BINARY_FORMATS
    public static procedure ShaderBinary(count: Int32; [MarshalAs(UnmanagedType.LPArray)] shaders: array of ShaderName; binaryformat: ShaderBinaryFormat; [MarshalAs(UnmanagedType.LPArray)] binary: array of byte; length: Int32);
    external 'opengl32.dll' name 'glShaderBinary';
    public static procedure ShaderBinary(count: Int32; [MarshalAs(UnmanagedType.LPArray)] shaders: array of ShaderName; binaryformat: ShaderBinaryFormat; binary: IntPtr; length: Int32);
    external 'opengl32.dll' name 'glShaderBinary';
    public static procedure ShaderBinary(count: Int32; var shaders: ShaderName; binaryformat: ShaderBinaryFormat; [MarshalAs(UnmanagedType.LPArray)] binary: array of byte; length: Int32);
    external 'opengl32.dll' name 'glShaderBinary';
    public static procedure ShaderBinary(count: Int32; var shaders: ShaderName; binaryformat: ShaderBinaryFormat; binary: IntPtr; length: Int32);
    external 'opengl32.dll' name 'glShaderBinary';
    public static procedure ShaderBinary(count: Int32; shaders: pointer; binaryformat: ShaderBinaryFormat; [MarshalAs(UnmanagedType.LPArray)] binary: array of byte; length: Int32);
    external 'opengl32.dll' name 'glShaderBinary';
    public static procedure ShaderBinary(count: Int32; shaders: pointer; binaryformat: ShaderBinaryFormat; binary: IntPtr; length: Int32);
    external 'opengl32.dll' name 'glShaderBinary';
    
    // 7.2.1
    
    public static procedure SpecializeShader(shader: ShaderName; [MarshalAs(UnmanagedType.LPStr)] pEntryPoint: string; numSpecializationConstants: UInt32; [MarshalAs(UnmanagedType.LPArray)] pConstantIndex: array of UInt32; [MarshalAs(UnmanagedType.LPArray)] pConstantValue: array of IntFloatUnion);
    external 'opengl32.dll' name 'glSpecializeShader';
    public static procedure SpecializeShader(shader: ShaderName; [MarshalAs(UnmanagedType.LPStr)] pEntryPoint: string; numSpecializationConstants: UInt32; [MarshalAs(UnmanagedType.LPArray)] pConstantIndex: array of UInt32; [MarshalAs(UnmanagedType.LPArray)] pConstantValue: array of Int32);
    external 'opengl32.dll' name 'glSpecializeShader';
    public static procedure SpecializeShader(shader: ShaderName; [MarshalAs(UnmanagedType.LPStr)] pEntryPoint: string; numSpecializationConstants: UInt32; [MarshalAs(UnmanagedType.LPArray)] pConstantIndex: array of UInt32; [MarshalAs(UnmanagedType.LPArray)] pConstantValue: array of single);
    external 'opengl32.dll' name 'glSpecializeShader';
    public static procedure SpecializeShader(shader: ShaderName; [MarshalAs(UnmanagedType.LPStr)] pEntryPoint: string; numSpecializationConstants: UInt32; var pConstantIndex: UInt32; var pConstantValue: IntFloatUnion);
    external 'opengl32.dll' name 'glSpecializeShader';
    public static procedure SpecializeShader(shader: ShaderName; [MarshalAs(UnmanagedType.LPStr)] pEntryPoint: string; numSpecializationConstants: UInt32; var pConstantIndex: UInt32; var pConstantValue: Int32);
    external 'opengl32.dll' name 'glSpecializeShader';
    public static procedure SpecializeShader(shader: ShaderName; [MarshalAs(UnmanagedType.LPStr)] pEntryPoint: string; numSpecializationConstants: UInt32; var pConstantIndex: UInt32; var pConstantValue: single);
    external 'opengl32.dll' name 'glSpecializeShader';
    public static procedure SpecializeShader(shader: ShaderName; [MarshalAs(UnmanagedType.LPStr)] pEntryPoint: string; numSpecializationConstants: UInt32; pConstantIndex: pointer; pConstantValue: pointer);
    external 'opengl32.dll' name 'glSpecializeShader';
    public static procedure SpecializeShader(shader: ShaderName; pEntryPoint: IntPtr; numSpecializationConstants: UInt32; [MarshalAs(UnmanagedType.LPArray)] pConstantIndex: array of UInt32; [MarshalAs(UnmanagedType.LPArray)] pConstantValue: array of IntFloatUnion);
    external 'opengl32.dll' name 'glSpecializeShader';
    public static procedure SpecializeShader(shader: ShaderName; pEntryPoint: IntPtr; numSpecializationConstants: UInt32; [MarshalAs(UnmanagedType.LPArray)] pConstantIndex: array of UInt32; [MarshalAs(UnmanagedType.LPArray)] pConstantValue: array of Int32);
    external 'opengl32.dll' name 'glSpecializeShader';
    public static procedure SpecializeShader(shader: ShaderName; pEntryPoint: IntPtr; numSpecializationConstants: UInt32; [MarshalAs(UnmanagedType.LPArray)] pConstantIndex: array of UInt32; [MarshalAs(UnmanagedType.LPArray)] pConstantValue: array of single);
    external 'opengl32.dll' name 'glSpecializeShader';
    public static procedure SpecializeShader(shader: ShaderName; pEntryPoint: IntPtr; numSpecializationConstants: UInt32; var pConstantIndex: UInt32; var pConstantValue: IntFloatUnion);
    external 'opengl32.dll' name 'glSpecializeShader';
    public static procedure SpecializeShader(shader: ShaderName; pEntryPoint: IntPtr; numSpecializationConstants: UInt32; var pConstantIndex: UInt32; var pConstantValue: Int32);
    external 'opengl32.dll' name 'glSpecializeShader';
    public static procedure SpecializeShader(shader: ShaderName; pEntryPoint: IntPtr; numSpecializationConstants: UInt32; var pConstantIndex: UInt32; var pConstantValue: single);
    external 'opengl32.dll' name 'glSpecializeShader';
    public static procedure SpecializeShader(shader: ShaderName; pEntryPoint: IntPtr; numSpecializationConstants: UInt32; pConstantIndex: pointer; pConstantValue: pointer);
    external 'opengl32.dll' name 'glSpecializeShader';
    
    {$endregion 7.2 - Shader Binaries}
    
    {$region 7.3 - Program Objects}
    
    public static function CreateProgram: ProgramName;
    external 'opengl32.dll' name 'glCreateProgram';
    
    public static procedure AttachShader(&program: ProgramName; shader: ShaderName);
    external 'opengl32.dll' name 'glAttachShader';
    
    public static procedure DetachShader(&program: ProgramName; shader: ShaderName);
    external 'opengl32.dll' name 'glDetachShader';
    
    public static procedure LinkProgram(&program: ProgramName);
    external 'opengl32.dll' name 'glLinkProgram';
    
    public static procedure UseProgram(&program: ProgramName);
    external 'opengl32.dll' name 'glUseProgram';
    
    public static procedure ProgramParameteri(&program: ProgramName; pname: ProgramParameterType; value: Int32);
    external 'opengl32.dll' name 'glProgramParameteri';
    
    public static procedure DeleteProgram(&program: ProgramName);
    external 'opengl32.dll' name 'glDeleteProgram';
    
    public static function IsProgram(&program: ProgramName): boolean;
    external 'opengl32.dll' name 'glIsProgram';
    
    public static function CreateShaderProgramv(&type: ShaderType; count: Int32; [MarshalAs(UnmanagedType.LPArray, ArraySubType = UnmanagedType.LPStr)] strings: array of string): ProgramName;
    external 'opengl32.dll' name 'glCreateShaderProgramv';
    public static function CreateShaderProgramv(&type: ShaderType; count: Int32; [MarshalAs(UnmanagedType.LPArray)] strings: array of IntPtr): ProgramName;
    external 'opengl32.dll' name 'glCreateShaderProgramv';
    public static function CreateShaderProgramv(&type: ShaderType; count: Int32; [MarshalAs(UnmanagedType.SysInt, ArraySubType = UnmanagedType.LPStr)] var strings: string): ProgramName;
    external 'opengl32.dll' name 'glCreateShaderProgramv';
    public static function CreateShaderProgramv(&type: ShaderType; count: Int32; var strings: IntPtr): ProgramName;
    external 'opengl32.dll' name 'glCreateShaderProgramv';
    public static function CreateShaderProgramv(&type: ShaderType; count: Int32; strings: pointer): ProgramName;
    external 'opengl32.dll' name 'glCreateShaderProgramv';
    
    // 7.3.1
    
    // 7.3.1.1
    
    public static procedure GetProgramInterfaceiv(&program: ProgramName; programInterface: ProgramInterfaceType; pname: ProgramInterfaceInfoType; [MarshalAs(UnmanagedType.LPArray)] &params: array of Int32);
    external 'opengl32.dll' name 'glGetProgramInterfaceiv';
    public static procedure GetProgramInterfaceiv(&program: ProgramName; programInterface: ProgramInterfaceType; pname: ProgramInterfaceInfoType; var &params: Int32);
    external 'opengl32.dll' name 'glGetProgramInterfaceiv';
    public static procedure GetProgramInterfaceiv(&program: ProgramName; programInterface: ProgramInterfaceType; pname: ProgramInterfaceInfoType; &params: pointer);
    external 'opengl32.dll' name 'glGetProgramInterfaceiv';
    
    public static function GetProgramResourceIndex(&program: ProgramName; programInterface: ProgramInterfaceType; [MarshalAs(UnmanagedType.LPStr)] name: string): ProgramResourceIndex;
    external 'opengl32.dll' name 'glGetProgramResourceIndex';
    public static function GetProgramResourceIndex(&program: ProgramName; programInterface: ProgramInterfaceType; name: IntPtr): ProgramResourceIndex;
    external 'opengl32.dll' name 'glGetProgramResourceIndex';
    
    public static procedure GetProgramResourceName(&program: ProgramName; programInterface: ProgramInterfaceType; index: ProgramResourceIndex; bufSize: Int32; var length: Int32; [MarshalAs(UnmanagedType.LPStr)] name: string);
    external 'opengl32.dll' name 'glGetProgramResourceName';
    public static procedure GetProgramResourceName(&program: ProgramName; programInterface: ProgramInterfaceType; index: ProgramResourceIndex; bufSize: Int32; var length: Int32; name: IntPtr);
    external 'opengl32.dll' name 'glGetProgramResourceName';
    public static procedure GetProgramResourceName(&program: ProgramName; programInterface: ProgramInterfaceType; index: ProgramResourceIndex; bufSize: Int32; length: pointer; [MarshalAs(UnmanagedType.LPStr)] name: string);
    external 'opengl32.dll' name 'glGetProgramResourceName';
    public static procedure GetProgramResourceName(&program: ProgramName; programInterface: ProgramInterfaceType; index: ProgramResourceIndex; bufSize: Int32; length: pointer; name: IntPtr);
    external 'opengl32.dll' name 'glGetProgramResourceName';
    
    public static procedure GetProgramResourceiv(&program: ProgramName; programInterface: ProgramInterfaceType; index: ProgramResourceIndex; propCount: Int32; [MarshalAs(UnmanagedType.LPArray)] props: array of ProgramInterfaceProperty; bufSize: Int32; var length: Int32; [MarshalAs(UnmanagedType.LPArray)] &params: array of Int32);
    external 'opengl32.dll' name 'glGetProgramResourceiv';
    public static procedure GetProgramResourceiv(&program: ProgramName; programInterface: ProgramInterfaceType; index: ProgramResourceIndex; propCount: Int32; var props: ProgramInterfaceProperty; bufSize: Int32; var length: Int32; var &params: ShadingLanguageTypeToken);
    external 'opengl32.dll' name 'glGetProgramResourceiv';
    public static procedure GetProgramResourceiv(&program: ProgramName; programInterface: ProgramInterfaceType; index: ProgramResourceIndex; propCount: Int32; var props: ProgramInterfaceProperty; bufSize: Int32; var length: Int32; var &params: Int32);
    external 'opengl32.dll' name 'glGetProgramResourceiv';
    public static procedure GetProgramResourceiv(&program: ProgramName; programInterface: ProgramInterfaceType; index: ProgramResourceIndex; propCount: Int32; props: pointer; bufSize: Int32; length: pointer; &params: pointer);
    external 'opengl32.dll' name 'glGetProgramResourceiv';
    
    public static function GetProgramResourceLocation(&program: ProgramName; programInterface: ProgramInterfaceType; [MarshalAs(UnmanagedType.LPStr)] name: string): Int32;
    external 'opengl32.dll' name 'glGetProgramResourceLocation';
    public static function GetProgramResourceLocation(&program: ProgramName; programInterface: ProgramInterfaceType; name: IntPtr): Int32;
    external 'opengl32.dll' name 'glGetProgramResourceLocation';
    
    public static function GetProgramResourceLocationIndex(&program: ProgramName; programInterface: ProgramInterfaceType; [MarshalAs(UnmanagedType.LPStr)] name: string): Int32;
    external 'opengl32.dll' name 'glGetProgramResourceLocationIndex';
    public static function GetProgramResourceLocationIndex(&program: ProgramName; programInterface: ProgramInterfaceType; name: IntPtr): Int32;
    external 'opengl32.dll' name 'glGetProgramResourceLocationIndex';
    
    {$endregion 7.3 - Program Objects}
    
    {$region 7.4 - Program Pipeline Objects}
    
    public static procedure GenProgramPipelines(n: Int32; [MarshalAs(UnmanagedType.LPArray)] pipelines: array of ProgramPipelineName);
    external 'opengl32.dll' name 'glGenProgramPipelines';
    public static procedure GenProgramPipelines(n: Int32; var pipelines: ProgramPipelineName);
    external 'opengl32.dll' name 'glGenProgramPipelines';
    public static procedure GenProgramPipelines(n: Int32; pipelines: pointer);
    external 'opengl32.dll' name 'glGenProgramPipelines';
    
    public static procedure DeleteProgramPipelines(n: Int32; [MarshalAs(UnmanagedType.LPArray)] pipelines: array of ProgramPipelineName);
    external 'opengl32.dll' name 'glDeleteProgramPipelines';
    public static procedure DeleteProgramPipelines(n: Int32; var pipelines: ProgramPipelineName);
    external 'opengl32.dll' name 'glDeleteProgramPipelines';
    public static procedure DeleteProgramPipelines(n: Int32; pipelines: pointer);
    external 'opengl32.dll' name 'glDeleteProgramPipelines';
    
    public static function IsProgramPipeline(pipeline: ProgramPipelineName): boolean;
    external 'opengl32.dll' name 'glIsProgramPipeline';
    
    public static procedure BindProgramPipeline(pipeline: ProgramPipelineName);
    external 'opengl32.dll' name 'glBindProgramPipeline';
    
    public static procedure CreateProgramPipelines(n: Int32; [MarshalAs(UnmanagedType.LPArray)] pipelines: array of ProgramPipelineName);
    external 'opengl32.dll' name 'glCreateProgramPipelines';
    public static procedure CreateProgramPipelines(n: Int32; var pipelines: ProgramPipelineName);
    external 'opengl32.dll' name 'glCreateProgramPipelines';
    public static procedure CreateProgramPipelines(n: Int32; pipelines: pointer);
    external 'opengl32.dll' name 'glCreateProgramPipelines';
    
    public static procedure UseProgramStages(pipeline: ProgramPipelineName; stages: ProgramStagesFlags; &program: ProgramName);
    external 'opengl32.dll' name 'glUseProgramStages';
    
    public static procedure ActiveShaderProgram(pipeline: ProgramPipelineName; &program: ProgramName);
    external 'opengl32.dll' name 'glActiveShaderProgram';
    
    {$endregion 7.4 - Program Pipeline Objects}
    
    {$region 7.5 - Program Binaries}
    
    public static procedure GetProgramBinary(&program: ProgramName; bufSize: Int32; var length: Int32; var binaryFormat: ProgramBinaryFormat; [MarshalAs(UnmanagedType.LPArray)] binary: array of byte);
    external 'opengl32.dll' name 'glGetProgramBinary';
    public static procedure GetProgramBinary(&program: ProgramName; bufSize: Int32; var length: Int32; var binaryFormat: ProgramBinaryFormat; binary: IntPtr);
    external 'opengl32.dll' name 'glGetProgramBinary';
    public static procedure GetProgramBinary(&program: ProgramName; bufSize: Int32; length: pointer; binaryFormat: pointer; [MarshalAs(UnmanagedType.LPArray)] binary: array of byte);
    external 'opengl32.dll' name 'glGetProgramBinary';
    public static procedure GetProgramBinary(&program: ProgramName; bufSize: Int32; length: pointer; binaryFormat: pointer; binary: IntPtr);
    external 'opengl32.dll' name 'glGetProgramBinary';
    
    public static procedure ProgramBinary(&program: ProgramName; binaryFormat: ProgramBinaryFormat; [MarshalAs(UnmanagedType.LPArray)] binary: array of byte; length: Int32);
    external 'opengl32.dll' name 'glProgramBinary';
    public static procedure ProgramBinary(&program: ProgramName; binaryFormat: ProgramBinaryFormat; binary: IntPtr; length: Int32);
    external 'opengl32.dll' name 'glProgramBinary';
    
    {$endregion 7.5 - Program Binaries}
    
    {$region 7.6 - Uniform Variables}
    
    public static function GetUniformLocation(&program: ProgramName; [MarshalAs(UnmanagedType.LPStr)] name: string): Int32;
    external 'opengl32.dll' name 'glGetUniformLocation';
    public static function GetUniformLocation(&program: ProgramName; name: IntPtr): Int32;
    external 'opengl32.dll' name 'glGetUniformLocation';
    
    public static procedure GetActiveUniformName(&program: ProgramName; uniformIndex: UInt32; bufSize: Int32; var length: Int32; [MarshalAs(UnmanagedType.LPStr)] uniformName: string);
    external 'opengl32.dll' name 'glGetActiveUniformName';
    public static procedure GetActiveUniformName(&program: ProgramName; uniformIndex: UInt32; bufSize: Int32; var length: Int32; uniformName: IntPtr);
    external 'opengl32.dll' name 'glGetActiveUniformName';
    public static procedure GetActiveUniformName(&program: ProgramName; uniformIndex: UInt32; bufSize: Int32; length: pointer; [MarshalAs(UnmanagedType.LPStr)] uniformName: string);
    external 'opengl32.dll' name 'glGetActiveUniformName';
    public static procedure GetActiveUniformName(&program: ProgramName; uniformIndex: UInt32; bufSize: Int32; length: pointer; uniformName: IntPtr);
    external 'opengl32.dll' name 'glGetActiveUniformName';
    
    public static procedure GetUniformIndices(&program: ProgramName; uniformCount: Int32; [MarshalAs(UnmanagedType.LPArray, ArraySubType = UnmanagedType.LPStr)] uniformNames: array of string; [MarshalAs(UnmanagedType.LPArray)] uniformIndices: array of UInt32);
    external 'opengl32.dll' name 'glGetUniformIndices';
    public static procedure GetUniformIndices(&program: ProgramName; uniformCount: Int32; [MarshalAs(UnmanagedType.LPArray, ArraySubType = UnmanagedType.LPStr)] uniformNames: array of string; var uniformIndices: UInt32);
    external 'opengl32.dll' name 'glGetUniformIndices';
    public static procedure GetUniformIndices(&program: ProgramName; uniformCount: Int32; [MarshalAs(UnmanagedType.LPArray, ArraySubType = UnmanagedType.LPStr)] uniformNames: array of string; uniformIndices: pointer);
    external 'opengl32.dll' name 'glGetUniformIndices';
    public static procedure GetUniformIndices(&program: ProgramName; uniformCount: Int32; [MarshalAs(UnmanagedType.LPArray)] uniformNames: array of IntPtr; [MarshalAs(UnmanagedType.LPArray)] uniformIndices: array of UInt32);
    external 'opengl32.dll' name 'glGetUniformIndices';
    public static procedure GetUniformIndices(&program: ProgramName; uniformCount: Int32; [MarshalAs(UnmanagedType.LPArray)] uniformNames: array of IntPtr; var uniformIndices: UInt32);
    external 'opengl32.dll' name 'glGetUniformIndices';
    public static procedure GetUniformIndices(&program: ProgramName; uniformCount: Int32; [MarshalAs(UnmanagedType.LPArray)] uniformNames: array of IntPtr; uniformIndices: pointer);
    external 'opengl32.dll' name 'glGetUniformIndices';
    public static procedure GetUniformIndices(&program: ProgramName; uniformCount: Int32; [MarshalAs(UnmanagedType.SysInt, ArraySubType = UnmanagedType.LPStr)] var uniformNames: string; [MarshalAs(UnmanagedType.LPArray)] uniformIndices: array of UInt32);
    external 'opengl32.dll' name 'glGetUniformIndices';
    public static procedure GetUniformIndices(&program: ProgramName; uniformCount: Int32; [MarshalAs(UnmanagedType.SysInt, ArraySubType = UnmanagedType.LPStr)] var uniformNames: string; var uniformIndices: UInt32);
    external 'opengl32.dll' name 'glGetUniformIndices';
    public static procedure GetUniformIndices(&program: ProgramName; uniformCount: Int32; [MarshalAs(UnmanagedType.SysInt, ArraySubType = UnmanagedType.LPStr)] var uniformNames: string; uniformIndices: pointer);
    external 'opengl32.dll' name 'glGetUniformIndices';
    public static procedure GetUniformIndices(&program: ProgramName; uniformCount: Int32; var uniformNames: IntPtr; [MarshalAs(UnmanagedType.LPArray)] uniformIndices: array of UInt32);
    external 'opengl32.dll' name 'glGetUniformIndices';
    public static procedure GetUniformIndices(&program: ProgramName; uniformCount: Int32; var uniformNames: IntPtr; var uniformIndices: UInt32);
    external 'opengl32.dll' name 'glGetUniformIndices';
    public static procedure GetUniformIndices(&program: ProgramName; uniformCount: Int32; var uniformNames: IntPtr; uniformIndices: pointer);
    external 'opengl32.dll' name 'glGetUniformIndices';
    public static procedure GetUniformIndices(&program: ProgramName; uniformCount: Int32; uniformNames: pointer; [MarshalAs(UnmanagedType.LPArray)] uniformIndices: array of UInt32);
    external 'opengl32.dll' name 'glGetUniformIndices';
    public static procedure GetUniformIndices(&program: ProgramName; uniformCount: Int32; uniformNames: pointer; var uniformIndices: UInt32);
    external 'opengl32.dll' name 'glGetUniformIndices';
    public static procedure GetUniformIndices(&program: ProgramName; uniformCount: Int32; uniformNames: pointer; uniformIndices: pointer);
    external 'opengl32.dll' name 'glGetUniformIndices';
    
    public static procedure GetActiveUniform(&program: ProgramName; index: UInt32; bufSize: Int32; var length: Int32; var size: Int32; var &type: ShadingLanguageTypeToken; [MarshalAs(UnmanagedType.LPStr)] name: string);
    external 'opengl32.dll' name 'glGetActiveUniform';
    public static procedure GetActiveUniform(&program: ProgramName; index: UInt32; bufSize: Int32; var length: Int32; var size: Int32; var &type: ShadingLanguageTypeToken; name: IntPtr);
    external 'opengl32.dll' name 'glGetActiveUniform';
    public static procedure GetActiveUniform(&program: ProgramName; index: UInt32; bufSize: Int32; length: pointer; size: pointer; &type: pointer; [MarshalAs(UnmanagedType.LPStr)] name: string);
    external 'opengl32.dll' name 'glGetActiveUniform';
    public static procedure GetActiveUniform(&program: ProgramName; index: UInt32; bufSize: Int32; length: pointer; size: pointer; &type: pointer; name: IntPtr);
    external 'opengl32.dll' name 'glGetActiveUniform';
    
    public static procedure GetActiveUniformsiv(&program: ProgramName; uniformCount: Int32; [MarshalAs(UnmanagedType.LPArray)] uniformIndices: array of UInt32; pname: ProgramInterfaceProperty; [MarshalAs(UnmanagedType.LPArray)] &params: array of Int32);
    external 'opengl32.dll' name 'glGetActiveUniformsiv';
    public static procedure GetActiveUniformsiv(&program: ProgramName; uniformCount: Int32; var uniformIndices: UInt32; pname: ProgramInterfaceProperty; var &params: ShadingLanguageTypeToken);
    external 'opengl32.dll' name 'glGetActiveUniformsiv';
    public static procedure GetActiveUniformsiv(&program: ProgramName; uniformCount: Int32; var uniformIndices: UInt32; pname: ProgramInterfaceProperty; var &params: Int32);
    external 'opengl32.dll' name 'glGetActiveUniformsiv';
    public static procedure GetActiveUniformsiv(&program: ProgramName; uniformCount: Int32; uniformIndices: pointer; pname: ProgramInterfaceProperty; &params: pointer);
    external 'opengl32.dll' name 'glGetActiveUniformsiv';
    
    public static function GetUniformBlockIndex(&program: ProgramName; [MarshalAs(UnmanagedType.LPStr)] uniformBlockName: string): UInt32;
    external 'opengl32.dll' name 'glGetUniformBlockIndex';
    public static function GetUniformBlockIndex(&program: ProgramName; uniformBlockName: IntPtr): UInt32;
    external 'opengl32.dll' name 'glGetUniformBlockIndex';
    
    public static procedure GetActiveUniformBlockName(&program: ProgramName; uniformBlockIndex: UInt32; bufSize: Int32; var length: Int32; [MarshalAs(UnmanagedType.LPStr)] uniformBlockName: string);
    external 'opengl32.dll' name 'glGetActiveUniformBlockName';
    public static procedure GetActiveUniformBlockName(&program: ProgramName; uniformBlockIndex: UInt32; bufSize: Int32; length: pointer; uniformBlockName: IntPtr);
    external 'opengl32.dll' name 'glGetActiveUniformBlockName';
    
    public static procedure GetActiveUniformBlockiv(&program: ProgramName; uniformBlockIndex: UInt32; pname: ProgramInterfaceProperty; [MarshalAs(UnmanagedType.LPArray)] &params: array of Int32);
    external 'opengl32.dll' name 'glGetActiveUniformBlockiv';
    public static procedure GetActiveUniformBlockiv(&program: ProgramName; uniformBlockIndex: UInt32; pname: ProgramInterfaceProperty; var &params: ShadingLanguageTypeToken);
    external 'opengl32.dll' name 'glGetActiveUniformBlockiv';
    public static procedure GetActiveUniformBlockiv(&program: ProgramName; uniformBlockIndex: UInt32; pname: ProgramInterfaceProperty; var &params: Int32);
    external 'opengl32.dll' name 'glGetActiveUniformBlockiv';
    public static procedure GetActiveUniformBlockiv(&program: ProgramName; uniformBlockIndex: UInt32; pname: ProgramInterfaceProperty; &params: pointer);
    external 'opengl32.dll' name 'glGetActiveUniformBlockiv';
    
    public static procedure GetActiveAtomicCounterBufferiv(&program: ProgramName; bufferIndex: UInt32; pname: ProgramInterfaceProperty; [MarshalAs(UnmanagedType.LPArray)] &params: array of Int32);
    external 'opengl32.dll' name 'glGetActiveAtomicCounterBufferiv';
    public static procedure GetActiveAtomicCounterBufferiv(&program: ProgramName; bufferIndex: UInt32; pname: ProgramInterfaceProperty; var &params: ShadingLanguageTypeToken);
    external 'opengl32.dll' name 'glGetActiveAtomicCounterBufferiv';
    public static procedure GetActiveAtomicCounterBufferiv(&program: ProgramName; bufferIndex: UInt32; pname: ProgramInterfaceProperty; var &params: Int32);
    external 'opengl32.dll' name 'glGetActiveAtomicCounterBufferiv';
    public static procedure GetActiveAtomicCounterBufferiv(&program: ProgramName; bufferIndex: UInt32; pname: ProgramInterfaceProperty; &params: pointer);
    external 'opengl32.dll' name 'glGetActiveAtomicCounterBufferiv';
    
    // 7.6.1
    
    {$region Uniform[1,2,3,4][i,f,d,ui]}
    
    public static procedure Uniform1i(location: Int32; v0: Int32);
    external 'opengl32.dll' name 'glUniform1i';
    
    public static procedure Uniform2i(location: Int32; v0: Int32; v1: Int32);
    external 'opengl32.dll' name 'glUniform2i';
    
    public static procedure Uniform3i(location: Int32; v0: Int32; v1: Int32; v2: Int32);
    external 'opengl32.dll' name 'glUniform3i';
    
    public static procedure Uniform4i(location: Int32; v0: Int32; v1: Int32; v2: Int32; v3: Int32);
    external 'opengl32.dll' name 'glUniform4i';
    
    public static procedure Uniform1f(location: Int32; v0: single);
    external 'opengl32.dll' name 'glUniform1f';
    
    public static procedure Uniform2f(location: Int32; v0: single; v1: single);
    external 'opengl32.dll' name 'glUniform2f';
    
    public static procedure Uniform3f(location: Int32; v0: single; v1: single; v2: single);
    external 'opengl32.dll' name 'glUniform3f';
    
    public static procedure Uniform4f(location: Int32; v0: single; v1: single; v2: single; v3: single);
    external 'opengl32.dll' name 'glUniform4f';
    
    public static procedure Uniform1d(location: Int32; x: double);
    external 'opengl32.dll' name 'glUniform1d';
    
    public static procedure Uniform2d(location: Int32; x: double; y: double);
    external 'opengl32.dll' name 'glUniform2d';
    
    public static procedure Uniform3d(location: Int32; x: double; y: double; z: double);
    external 'opengl32.dll' name 'glUniform3d';
    
    public static procedure Uniform4d(location: Int32; x: double; y: double; z: double; w: double);
    external 'opengl32.dll' name 'glUniform4d';
    
    public static procedure Uniform1ui(location: Int32; v0: UInt32);
    external 'opengl32.dll' name 'glUniform1ui';
    
    public static procedure Uniform2ui(location: Int32; v0: UInt32; v1: UInt32);
    external 'opengl32.dll' name 'glUniform2ui';
    
    public static procedure Uniform3ui(location: Int32; v0: UInt32; v1: UInt32; v2: UInt32);
    external 'opengl32.dll' name 'glUniform3ui';
    
    public static procedure Uniform4ui(location: Int32; v0: UInt32; v1: UInt32; v2: UInt32; v3: UInt32);
    external 'opengl32.dll' name 'glUniform4ui';
    
    {$endregion Uniform[1,2,3,4][i,f,d,ui]}
    
    {$region Uniform[1,2,3,4][i,f,d,ui]v}
    
    public static procedure Uniform1iv(location: Int32; count: Int32; [MarshalAs(UnmanagedType.LPArray)] value: array of Int32);
    external 'opengl32.dll' name 'glUniform1iv';
    public static procedure Uniform1iv(location: Int32; count: Int32; var value: Int32);
    external 'opengl32.dll' name 'glUniform1iv';
    public static procedure Uniform1iv(location: Int32; count: Int32; var value: Vec1i);
    external 'opengl32.dll' name 'glUniform1iv';
    public static procedure Uniform1iv(location: Int32; count: Int32; value: pointer);
    external 'opengl32.dll' name 'glUniform1iv';
    
    public static procedure Uniform2iv(location: Int32; count: Int32; [MarshalAs(UnmanagedType.LPArray)] value: array of Int32);
    external 'opengl32.dll' name 'glUniform2iv';
    public static procedure Uniform2iv(location: Int32; count: Int32; var value: Int32);
    external 'opengl32.dll' name 'glUniform2iv';
    public static procedure Uniform2iv(location: Int32; count: Int32; var value: Vec2i);
    external 'opengl32.dll' name 'glUniform2iv';
    public static procedure Uniform2iv(location: Int32; count: Int32; value: pointer);
    external 'opengl32.dll' name 'glUniform2iv';
    
    public static procedure Uniform3iv(location: Int32; count: Int32; [MarshalAs(UnmanagedType.LPArray)] value: array of Int32);
    external 'opengl32.dll' name 'glUniform3iv';
    public static procedure Uniform3iv(location: Int32; count: Int32; var value: Int32);
    external 'opengl32.dll' name 'glUniform3iv';
    public static procedure Uniform3iv(location: Int32; count: Int32; var value: Vec3i);
    external 'opengl32.dll' name 'glUniform3iv';
    public static procedure Uniform3iv(location: Int32; count: Int32; value: pointer);
    external 'opengl32.dll' name 'glUniform3iv';
    
    public static procedure Uniform4iv(location: Int32; count: Int32; [MarshalAs(UnmanagedType.LPArray)] value: array of Int32);
    external 'opengl32.dll' name 'glUniform4iv';
    public static procedure Uniform4iv(location: Int32; count: Int32; var value: Int32);
    external 'opengl32.dll' name 'glUniform4iv';
    public static procedure Uniform4iv(location: Int32; count: Int32; var value: Vec4i);
    external 'opengl32.dll' name 'glUniform4iv';
    public static procedure Uniform4iv(location: Int32; count: Int32; value: pointer);
    external 'opengl32.dll' name 'glUniform4iv';
    
    public static procedure Uniform1fv(location: Int32; count: Int32; [MarshalAs(UnmanagedType.LPArray)] value: array of single);
    external 'opengl32.dll' name 'glUniform1fv';
    public static procedure Uniform1fv(location: Int32; count: Int32; var value: single);
    external 'opengl32.dll' name 'glUniform1fv';
    public static procedure Uniform1fv(location: Int32; count: Int32; var value: Vec1f);
    external 'opengl32.dll' name 'glUniform1fv';
    public static procedure Uniform1fv(location: Int32; count: Int32; value: pointer);
    external 'opengl32.dll' name 'glUniform1fv';
    
    public static procedure Uniform2fv(location: Int32; count: Int32; [MarshalAs(UnmanagedType.LPArray)] value: array of single);
    external 'opengl32.dll' name 'glUniform2fv';
    public static procedure Uniform2fv(location: Int32; count: Int32; var value: single);
    external 'opengl32.dll' name 'glUniform2fv';
    public static procedure Uniform2fv(location: Int32; count: Int32; var value: Vec2f);
    external 'opengl32.dll' name 'glUniform2fv';
    public static procedure Uniform2fv(location: Int32; count: Int32; value: pointer);
    external 'opengl32.dll' name 'glUniform2fv';
    
    public static procedure Uniform3fv(location: Int32; count: Int32; [MarshalAs(UnmanagedType.LPArray)] value: array of single);
    external 'opengl32.dll' name 'glUniform3fv';
    public static procedure Uniform3fv(location: Int32; count: Int32; var value: single);
    external 'opengl32.dll' name 'glUniform3fv';
    public static procedure Uniform3fv(location: Int32; count: Int32; var value: Vec3f);
    external 'opengl32.dll' name 'glUniform3fv';
    public static procedure Uniform3fv(location: Int32; count: Int32; value: pointer);
    external 'opengl32.dll' name 'glUniform3fv';
    
    public static procedure Uniform4fv(location: Int32; count: Int32; [MarshalAs(UnmanagedType.LPArray)] value: array of single);
    external 'opengl32.dll' name 'glUniform4fv';
    public static procedure Uniform4fv(location: Int32; count: Int32; var value: single);
    external 'opengl32.dll' name 'glUniform4fv';
    public static procedure Uniform4fv(location: Int32; count: Int32; var value: Vec4f);
    external 'opengl32.dll' name 'glUniform4fv';
    public static procedure Uniform4fv(location: Int32; count: Int32; value: pointer);
    external 'opengl32.dll' name 'glUniform4fv';
    
    public static procedure Uniform1dv(location: Int32; count: Int32; [MarshalAs(UnmanagedType.LPArray)] value: array of double);
    external 'opengl32.dll' name 'glUniform1dv';
    public static procedure Uniform1dv(location: Int32; count: Int32; var value: double);
    external 'opengl32.dll' name 'glUniform1dv';
    public static procedure Uniform1dv(location: Int32; count: Int32; var value: Vec1d);
    external 'opengl32.dll' name 'glUniform1dv';
    public static procedure Uniform1dv(location: Int32; count: Int32; value: pointer);
    external 'opengl32.dll' name 'glUniform1dv';
    
    public static procedure Uniform2dv(location: Int32; count: Int32; [MarshalAs(UnmanagedType.LPArray)] value: array of double);
    external 'opengl32.dll' name 'glUniform2dv';
    public static procedure Uniform2dv(location: Int32; count: Int32; var value: double);
    external 'opengl32.dll' name 'glUniform2dv';
    public static procedure Uniform2dv(location: Int32; count: Int32; var value: Vec2d);
    external 'opengl32.dll' name 'glUniform2dv';
    public static procedure Uniform2dv(location: Int32; count: Int32; value: pointer);
    external 'opengl32.dll' name 'glUniform2dv';
    
    public static procedure Uniform3dv(location: Int32; count: Int32; [MarshalAs(UnmanagedType.LPArray)] value: array of double);
    external 'opengl32.dll' name 'glUniform3dv';
    public static procedure Uniform3dv(location: Int32; count: Int32; var value: double);
    external 'opengl32.dll' name 'glUniform3dv';
    public static procedure Uniform3dv(location: Int32; count: Int32; var value: Vec3d);
    external 'opengl32.dll' name 'glUniform3dv';
    public static procedure Uniform3dv(location: Int32; count: Int32; value: pointer);
    external 'opengl32.dll' name 'glUniform3dv';
    
    public static procedure Uniform4dv(location: Int32; count: Int32; [MarshalAs(UnmanagedType.LPArray)] value: array of double);
    external 'opengl32.dll' name 'glUniform4dv';
    public static procedure Uniform4dv(location: Int32; count: Int32; var value: double);
    external 'opengl32.dll' name 'glUniform4dv';
    public static procedure Uniform4dv(location: Int32; count: Int32; var value: Vec4d);
    external 'opengl32.dll' name 'glUniform4dv';
    public static procedure Uniform4dv(location: Int32; count: Int32; value: pointer);
    external 'opengl32.dll' name 'glUniform4dv';
    
    public static procedure Uniform1uiv(location: Int32; count: Int32; [MarshalAs(UnmanagedType.LPArray)] value: array of UInt32);
    external 'opengl32.dll' name 'glUniform1uiv';
    public static procedure Uniform1uiv(location: Int32; count: Int32; var value: UInt32);
    external 'opengl32.dll' name 'glUniform1uiv';
    public static procedure Uniform1uiv(location: Int32; count: Int32; var value: Vec1ui);
    external 'opengl32.dll' name 'glUniform1uiv';
    public static procedure Uniform1uiv(location: Int32; count: Int32; value: pointer);
    external 'opengl32.dll' name 'glUniform1uiv';
    
    public static procedure Uniform2uiv(location: Int32; count: Int32; [MarshalAs(UnmanagedType.LPArray)] value: array of UInt32);
    external 'opengl32.dll' name 'glUniform2uiv';
    public static procedure Uniform2uiv(location: Int32; count: Int32; var value: UInt32);
    external 'opengl32.dll' name 'glUniform2uiv';
    public static procedure Uniform2uiv(location: Int32; count: Int32; var value: Vec2ui);
    external 'opengl32.dll' name 'glUniform2uiv';
    public static procedure Uniform2uiv(location: Int32; count: Int32; value: pointer);
    external 'opengl32.dll' name 'glUniform2uiv';
    
    public static procedure Uniform3uiv(location: Int32; count: Int32; [MarshalAs(UnmanagedType.LPArray)] value: array of UInt32);
    external 'opengl32.dll' name 'glUniform3uiv';
    public static procedure Uniform3uiv(location: Int32; count: Int32; var value: UInt32);
    external 'opengl32.dll' name 'glUniform3uiv';
    public static procedure Uniform3uiv(location: Int32; count: Int32; var value: Vec3ui);
    external 'opengl32.dll' name 'glUniform3uiv';
    public static procedure Uniform3uiv(location: Int32; count: Int32; value: pointer);
    external 'opengl32.dll' name 'glUniform3uiv';
    
    public static procedure Uniform4uiv(location: Int32; count: Int32; [MarshalAs(UnmanagedType.LPArray)] value: array of UInt32);
    external 'opengl32.dll' name 'glUniform4uiv';
    public static procedure Uniform4uiv(location: Int32; count: Int32; var value: UInt32);
    external 'opengl32.dll' name 'glUniform4uiv';
    public static procedure Uniform4uiv(location: Int32; count: Int32; var value: Vec4ui);
    external 'opengl32.dll' name 'glUniform4uiv';
    public static procedure Uniform4uiv(location: Int32; count: Int32; value: pointer);
    external 'opengl32.dll' name 'glUniform4uiv';
    
    {$endregion Uniform[1,2,3,4][i,f,d,ui]v}
    
    {$region UniformMatrix[2,3,4][f,d]v}
    
    public static procedure UniformMatrix2fv(location: Int32; count: Int32; transpose: boolean; [MarshalAs(UnmanagedType.LPArray)] value: array of single);
    external 'opengl32.dll' name 'glUniformMatrix2fv';
    public static procedure UniformMatrix2fv(location: Int32; count: Int32; transpose: boolean; var value: single);
    external 'opengl32.dll' name 'glUniformMatrix2fv';
    public static procedure UniformMatrix2fv(location: Int32; count: Int32; transpose: boolean; var value: Mtr2f);
    external 'opengl32.dll' name 'glUniformMatrix2fv';
    public static procedure UniformMatrix2fv(location: Int32; count: Int32; transpose: boolean; value: pointer);
    external 'opengl32.dll' name 'glUniformMatrix2fv';
    
    public static procedure UniformMatrix3fv(location: Int32; count: Int32; transpose: boolean; [MarshalAs(UnmanagedType.LPArray)] value: array of single);
    external 'opengl32.dll' name 'glUniformMatrix3fv';
    public static procedure UniformMatrix3fv(location: Int32; count: Int32; transpose: boolean; var value: single);
    external 'opengl32.dll' name 'glUniformMatrix3fv';
    public static procedure UniformMatrix3fv(location: Int32; count: Int32; transpose: boolean; var value: Mtr3f);
    external 'opengl32.dll' name 'glUniformMatrix3fv';
    public static procedure UniformMatrix3fv(location: Int32; count: Int32; transpose: boolean; value: pointer);
    external 'opengl32.dll' name 'glUniformMatrix3fv';
    
    public static procedure UniformMatrix4fv(location: Int32; count: Int32; transpose: boolean; [MarshalAs(UnmanagedType.LPArray)] value: array of single);
    external 'opengl32.dll' name 'glUniformMatrix4fv';
    public static procedure UniformMatrix4fv(location: Int32; count: Int32; transpose: boolean; var value: single);
    external 'opengl32.dll' name 'glUniformMatrix4fv';
    public static procedure UniformMatrix4fv(location: Int32; count: Int32; transpose: boolean; var value: Mtr4f);
    external 'opengl32.dll' name 'glUniformMatrix4fv';
    public static procedure UniformMatrix4fv(location: Int32; count: Int32; transpose: boolean; value: pointer);
    external 'opengl32.dll' name 'glUniformMatrix4fv';
    
    public static procedure UniformMatrix2dv(location: Int32; count: Int32; transpose: boolean; [MarshalAs(UnmanagedType.LPArray)] value: array of double);
    external 'opengl32.dll' name 'glUniformMatrix2dv';
    public static procedure UniformMatrix2dv(location: Int32; count: Int32; transpose: boolean; var value: double);
    external 'opengl32.dll' name 'glUniformMatrix2dv';
    public static procedure UniformMatrix2dv(location: Int32; count: Int32; transpose: boolean; var value: Mtr2d);
    external 'opengl32.dll' name 'glUniformMatrix2dv';
    public static procedure UniformMatrix2dv(location: Int32; count: Int32; transpose: boolean; value: pointer);
    external 'opengl32.dll' name 'glUniformMatrix2dv';
    
    public static procedure UniformMatrix3dv(location: Int32; count: Int32; transpose: boolean; [MarshalAs(UnmanagedType.LPArray)] value: array of double);
    external 'opengl32.dll' name 'glUniformMatrix3dv';
    public static procedure UniformMatrix3dv(location: Int32; count: Int32; transpose: boolean; var value: double);
    external 'opengl32.dll' name 'glUniformMatrix3dv';
    public static procedure UniformMatrix3dv(location: Int32; count: Int32; transpose: boolean; var value: Mtr3d);
    external 'opengl32.dll' name 'glUniformMatrix3dv';
    public static procedure UniformMatrix3dv(location: Int32; count: Int32; transpose: boolean; value: pointer);
    external 'opengl32.dll' name 'glUniformMatrix3dv';
    
    public static procedure UniformMatrix4dv(location: Int32; count: Int32; transpose: boolean; [MarshalAs(UnmanagedType.LPArray)] value: array of double);
    external 'opengl32.dll' name 'glUniformMatrix4dv';
    public static procedure UniformMatrix4dv(location: Int32; count: Int32; transpose: boolean; var value: double);
    external 'opengl32.dll' name 'glUniformMatrix4dv';
    public static procedure UniformMatrix4dv(location: Int32; count: Int32; transpose: boolean; var value: Mtr4d);
    external 'opengl32.dll' name 'glUniformMatrix4dv';
    public static procedure UniformMatrix4dv(location: Int32; count: Int32; transpose: boolean; value: pointer);
    external 'opengl32.dll' name 'glUniformMatrix4dv';
    
    {$endregion UniformMatrix[2,3,4][f,d]v}
    
    {$region UniformMatrix[2x3,3x2,2x4,4x2,3x4,4x3][f,d]v}
    
    public static procedure UniformMatrix2x3fv(location: Int32; count: Int32; transpose: boolean; [MarshalAs(UnmanagedType.LPArray)] value: array of single);
    external 'opengl32.dll' name 'glUniformMatrix2x3fv';
    public static procedure UniformMatrix2x3fv(location: Int32; count: Int32; transpose: boolean; var value: single);
    external 'opengl32.dll' name 'glUniformMatrix2x3fv';
    public static procedure UniformMatrix2x3fv(location: Int32; count: Int32; transpose: boolean; var value: Mtr2x3f);
    external 'opengl32.dll' name 'glUniformMatrix2x3fv';
    public static procedure UniformMatrix2x3fv(location: Int32; count: Int32; transpose: boolean; value: pointer);
    external 'opengl32.dll' name 'glUniformMatrix2x3fv';
    
    public static procedure UniformMatrix3x2fv(location: Int32; count: Int32; transpose: boolean; [MarshalAs(UnmanagedType.LPArray)] value: array of single);
    external 'opengl32.dll' name 'glUniformMatrix3x2fv';
    public static procedure UniformMatrix3x2fv(location: Int32; count: Int32; transpose: boolean; var value: single);
    external 'opengl32.dll' name 'glUniformMatrix3x2fv';
    public static procedure UniformMatrix3x2fv(location: Int32; count: Int32; transpose: boolean; var value: Mtr3x2f);
    external 'opengl32.dll' name 'glUniformMatrix3x2fv';
    public static procedure UniformMatrix3x2fv(location: Int32; count: Int32; transpose: boolean; value: pointer);
    external 'opengl32.dll' name 'glUniformMatrix3x2fv';
    
    public static procedure UniformMatrix2x4fv(location: Int32; count: Int32; transpose: boolean; [MarshalAs(UnmanagedType.LPArray)] value: array of single);
    external 'opengl32.dll' name 'glUniformMatrix2x4fv';
    public static procedure UniformMatrix2x4fv(location: Int32; count: Int32; transpose: boolean; var value: single);
    external 'opengl32.dll' name 'glUniformMatrix2x4fv';
    public static procedure UniformMatrix2x4fv(location: Int32; count: Int32; transpose: boolean; var value: Mtr2x4f);
    external 'opengl32.dll' name 'glUniformMatrix2x4fv';
    public static procedure UniformMatrix2x4fv(location: Int32; count: Int32; transpose: boolean; value: pointer);
    external 'opengl32.dll' name 'glUniformMatrix2x4fv';
    
    public static procedure UniformMatrix4x2fv(location: Int32; count: Int32; transpose: boolean; [MarshalAs(UnmanagedType.LPArray)] value: array of single);
    external 'opengl32.dll' name 'glUniformMatrix4x2fv';
    public static procedure UniformMatrix4x2fv(location: Int32; count: Int32; transpose: boolean; var value: single);
    external 'opengl32.dll' name 'glUniformMatrix4x2fv';
    public static procedure UniformMatrix4x2fv(location: Int32; count: Int32; transpose: boolean; var value: Mtr4x2f);
    external 'opengl32.dll' name 'glUniformMatrix4x2fv';
    public static procedure UniformMatrix4x2fv(location: Int32; count: Int32; transpose: boolean; value: pointer);
    external 'opengl32.dll' name 'glUniformMatrix4x2fv';
    
    public static procedure UniformMatrix3x4fv(location: Int32; count: Int32; transpose: boolean; [MarshalAs(UnmanagedType.LPArray)] value: array of single);
    external 'opengl32.dll' name 'glUniformMatrix3x4fv';
    public static procedure UniformMatrix3x4fv(location: Int32; count: Int32; transpose: boolean; var value: single);
    external 'opengl32.dll' name 'glUniformMatrix3x4fv';
    public static procedure UniformMatrix3x4fv(location: Int32; count: Int32; transpose: boolean; var value: Mtr3x4f);
    external 'opengl32.dll' name 'glUniformMatrix3x4fv';
    public static procedure UniformMatrix3x4fv(location: Int32; count: Int32; transpose: boolean; value: pointer);
    external 'opengl32.dll' name 'glUniformMatrix3x4fv';
    
    public static procedure UniformMatrix4x3fv(location: Int32; count: Int32; transpose: boolean; [MarshalAs(UnmanagedType.LPArray)] value: array of single);
    external 'opengl32.dll' name 'glUniformMatrix4x3fv';
    public static procedure UniformMatrix4x3fv(location: Int32; count: Int32; transpose: boolean; var value: single);
    external 'opengl32.dll' name 'glUniformMatrix4x3fv';
    public static procedure UniformMatrix4x3fv(location: Int32; count: Int32; transpose: boolean; var value: Mtr4x3f);
    external 'opengl32.dll' name 'glUniformMatrix4x3fv';
    public static procedure UniformMatrix4x3fv(location: Int32; count: Int32; transpose: boolean; value: pointer);
    external 'opengl32.dll' name 'glUniformMatrix4x3fv';
    
    public static procedure UniformMatrix2x3dv(location: Int32; count: Int32; transpose: boolean; [MarshalAs(UnmanagedType.LPArray)] value: array of double);
    external 'opengl32.dll' name 'glUniformMatrix2x3dv';
    public static procedure UniformMatrix2x3dv(location: Int32; count: Int32; transpose: boolean; var value: double);
    external 'opengl32.dll' name 'glUniformMatrix2x3dv';
    public static procedure UniformMatrix2x3dv(location: Int32; count: Int32; transpose: boolean; var value: Mtr2x3d);
    external 'opengl32.dll' name 'glUniformMatrix2x3dv';
    public static procedure UniformMatrix2x3dv(location: Int32; count: Int32; transpose: boolean; value: pointer);
    external 'opengl32.dll' name 'glUniformMatrix2x3dv';
    
    public static procedure UniformMatrix3x2dv(location: Int32; count: Int32; transpose: boolean; [MarshalAs(UnmanagedType.LPArray)] value: array of double);
    external 'opengl32.dll' name 'glUniformMatrix3x2dv';
    public static procedure UniformMatrix3x2dv(location: Int32; count: Int32; transpose: boolean; var value: double);
    external 'opengl32.dll' name 'glUniformMatrix3x2dv';
    public static procedure UniformMatrix3x2dv(location: Int32; count: Int32; transpose: boolean; var value: Mtr3x2d);
    external 'opengl32.dll' name 'glUniformMatrix3x2dv';
    public static procedure UniformMatrix3x2dv(location: Int32; count: Int32; transpose: boolean; value: pointer);
    external 'opengl32.dll' name 'glUniformMatrix3x2dv';
    
    public static procedure UniformMatrix2x4dv(location: Int32; count: Int32; transpose: boolean; [MarshalAs(UnmanagedType.LPArray)] value: array of double);
    external 'opengl32.dll' name 'glUniformMatrix2x4dv';
    public static procedure UniformMatrix2x4dv(location: Int32; count: Int32; transpose: boolean; var value: double);
    external 'opengl32.dll' name 'glUniformMatrix2x4dv';
    public static procedure UniformMatrix2x4dv(location: Int32; count: Int32; transpose: boolean; var value: Mtr2x4d);
    external 'opengl32.dll' name 'glUniformMatrix2x4dv';
    public static procedure UniformMatrix2x4dv(location: Int32; count: Int32; transpose: boolean; value: pointer);
    external 'opengl32.dll' name 'glUniformMatrix2x4dv';
    
    public static procedure UniformMatrix4x2dv(location: Int32; count: Int32; transpose: boolean; [MarshalAs(UnmanagedType.LPArray)] value: array of double);
    external 'opengl32.dll' name 'glUniformMatrix4x2dv';
    public static procedure UniformMatrix4x2dv(location: Int32; count: Int32; transpose: boolean; var value: double);
    external 'opengl32.dll' name 'glUniformMatrix4x2dv';
    public static procedure UniformMatrix4x2dv(location: Int32; count: Int32; transpose: boolean; var value: Mtr4x2d);
    external 'opengl32.dll' name 'glUniformMatrix4x2dv';
    public static procedure UniformMatrix4x2dv(location: Int32; count: Int32; transpose: boolean; value: pointer);
    external 'opengl32.dll' name 'glUniformMatrix4x2dv';
    
    public static procedure UniformMatrix3x4dv(location: Int32; count: Int32; transpose: boolean; [MarshalAs(UnmanagedType.LPArray)] value: array of double);
    external 'opengl32.dll' name 'glUniformMatrix3x4dv';
    public static procedure UniformMatrix3x4dv(location: Int32; count: Int32; transpose: boolean; var value: double);
    external 'opengl32.dll' name 'glUniformMatrix3x4dv';
    public static procedure UniformMatrix3x4dv(location: Int32; count: Int32; transpose: boolean; var value: Mtr3x4d);
    external 'opengl32.dll' name 'glUniformMatrix3x4dv';
    public static procedure UniformMatrix3x4dv(location: Int32; count: Int32; transpose: boolean; value: pointer);
    external 'opengl32.dll' name 'glUniformMatrix3x4dv';
    
    public static procedure UniformMatrix4x3dv(location: Int32; count: Int32; transpose: boolean; [MarshalAs(UnmanagedType.LPArray)] value: array of double);
    external 'opengl32.dll' name 'glUniformMatrix4x3dv';
    public static procedure UniformMatrix4x3dv(location: Int32; count: Int32; transpose: boolean; var value: double);
    external 'opengl32.dll' name 'glUniformMatrix4x3dv';
    public static procedure UniformMatrix4x3dv(location: Int32; count: Int32; transpose: boolean; var value: Mtr4x3d);
    external 'opengl32.dll' name 'glUniformMatrix4x3dv';
    public static procedure UniformMatrix4x3dv(location: Int32; count: Int32; transpose: boolean; value: pointer);
    external 'opengl32.dll' name 'glUniformMatrix4x3dv';
    
    {$endregion UniformMatrix[2x3,3x2,2x4,4x2,3x4,4x3][f,d]v}
    
    {$region ProgramUniform[1,2,3,4][i,f,d,ui]}
    
    public static procedure ProgramUniform1i(&program: ProgramName; location: Int32; v0: Int32);
    external 'opengl32.dll' name 'glProgramUniform1i';
    
    public static procedure ProgramUniform2i(&program: ProgramName; location: Int32; v0: Int32; v1: Int32);
    external 'opengl32.dll' name 'glProgramUniform2i';
    
    public static procedure ProgramUniform3i(&program: ProgramName; location: Int32; v0: Int32; v1: Int32; v2: Int32);
    external 'opengl32.dll' name 'glProgramUniform3i';
    
    public static procedure ProgramUniform4i(&program: ProgramName; location: Int32; v0: Int32; v1: Int32; v2: Int32; v3: Int32);
    external 'opengl32.dll' name 'glProgramUniform4i';
    
    public static procedure ProgramUniform1f(&program: ProgramName; location: Int32; v0: single);
    external 'opengl32.dll' name 'glProgramUniform1f';
    
    public static procedure ProgramUniform2f(&program: ProgramName; location: Int32; v0: single; v1: single);
    external 'opengl32.dll' name 'glProgramUniform2f';
    
    public static procedure ProgramUniform3f(&program: ProgramName; location: Int32; v0: single; v1: single; v2: single);
    external 'opengl32.dll' name 'glProgramUniform3f';
    
    public static procedure ProgramUniform4f(&program: ProgramName; location: Int32; v0: single; v1: single; v2: single; v3: single);
    external 'opengl32.dll' name 'glProgramUniform4f';
    
    public static procedure ProgramUniform1d(&program: ProgramName; location: Int32; x: double);
    external 'opengl32.dll' name 'glProgramUniform1d';
    
    public static procedure ProgramUniform2d(&program: ProgramName; location: Int32; x: double; y: double);
    external 'opengl32.dll' name 'glProgramUniform2d';
    
    public static procedure ProgramUniform3d(&program: ProgramName; location: Int32; x: double; y: double; z: double);
    external 'opengl32.dll' name 'glProgramUniform3d';
    
    public static procedure ProgramUniform4d(&program: ProgramName; location: Int32; x: double; y: double; z: double; w: double);
    external 'opengl32.dll' name 'glProgramUniform4d';
    
    public static procedure ProgramUniform1ui(&program: ProgramName; location: Int32; v0: UInt32);
    external 'opengl32.dll' name 'glProgramUniform1ui';
    
    public static procedure ProgramUniform2ui(&program: ProgramName; location: Int32; v0: UInt32; v1: UInt32);
    external 'opengl32.dll' name 'glProgramUniform2ui';
    
    public static procedure ProgramUniform3ui(&program: ProgramName; location: Int32; v0: UInt32; v1: UInt32; v2: UInt32);
    external 'opengl32.dll' name 'glProgramUniform3ui';
    
    public static procedure ProgramUniform4ui(&program: ProgramName; location: Int32; v0: UInt32; v1: UInt32; v2: UInt32; v3: UInt32);
    external 'opengl32.dll' name 'glProgramUniform4ui';
    
    {$endregion ProgramUniform[1,2,3,4][i,f,d,ui]}
    
    {$region ProgramUniform[1,2,3,4][i,f,d,ui]v}
    
    public static procedure ProgramUniform1iv(&program: ProgramName; location: Int32; count: Int32; [MarshalAs(UnmanagedType.LPArray)] value: array of Int32);
    external 'opengl32.dll' name 'glProgramUniform1iv';
    public static procedure ProgramUniform1iv(&program: ProgramName; location: Int32; count: Int32; var value: Int32);
    external 'opengl32.dll' name 'glProgramUniform1iv';
    public static procedure ProgramUniform1iv(&program: ProgramName; location: Int32; count: Int32; var value: Vec1i);
    external 'opengl32.dll' name 'glProgramUniform1iv';
    public static procedure ProgramUniform1iv(&program: ProgramName; location: Int32; count: Int32; value: pointer);
    external 'opengl32.dll' name 'glProgramUniform1iv';
    
    public static procedure ProgramUniform2iv(&program: ProgramName; location: Int32; count: Int32; [MarshalAs(UnmanagedType.LPArray)] value: array of Int32);
    external 'opengl32.dll' name 'glProgramUniform2iv';
    public static procedure ProgramUniform2iv(&program: ProgramName; location: Int32; count: Int32; var value: Int32);
    external 'opengl32.dll' name 'glProgramUniform2iv';
    public static procedure ProgramUniform2iv(&program: ProgramName; location: Int32; count: Int32; var value: Vec2i);
    external 'opengl32.dll' name 'glProgramUniform2iv';
    public static procedure ProgramUniform2iv(&program: ProgramName; location: Int32; count: Int32; value: pointer);
    external 'opengl32.dll' name 'glProgramUniform2iv';
    
    public static procedure ProgramUniform3iv(&program: ProgramName; location: Int32; count: Int32; [MarshalAs(UnmanagedType.LPArray)] value: array of Int32);
    external 'opengl32.dll' name 'glProgramUniform3iv';
    public static procedure ProgramUniform3iv(&program: ProgramName; location: Int32; count: Int32; var value: Int32);
    external 'opengl32.dll' name 'glProgramUniform3iv';
    public static procedure ProgramUniform3iv(&program: ProgramName; location: Int32; count: Int32; var value: Vec3i);
    external 'opengl32.dll' name 'glProgramUniform3iv';
    public static procedure ProgramUniform3iv(&program: ProgramName; location: Int32; count: Int32; value: pointer);
    external 'opengl32.dll' name 'glProgramUniform3iv';
    
    public static procedure ProgramUniform4iv(&program: ProgramName; location: Int32; count: Int32; [MarshalAs(UnmanagedType.LPArray)] value: array of Int32);
    external 'opengl32.dll' name 'glProgramUniform4iv';
    public static procedure ProgramUniform4iv(&program: ProgramName; location: Int32; count: Int32; var value: Int32);
    external 'opengl32.dll' name 'glProgramUniform4iv';
    public static procedure ProgramUniform4iv(&program: ProgramName; location: Int32; count: Int32; var value: Vec4i);
    external 'opengl32.dll' name 'glProgramUniform4iv';
    public static procedure ProgramUniform4iv(&program: ProgramName; location: Int32; count: Int32; value: pointer);
    external 'opengl32.dll' name 'glProgramUniform4iv';
    
    public static procedure ProgramUniform1fv(&program: ProgramName; location: Int32; count: Int32; [MarshalAs(UnmanagedType.LPArray)] value: array of single);
    external 'opengl32.dll' name 'glProgramUniform1fv';
    public static procedure ProgramUniform1fv(&program: ProgramName; location: Int32; count: Int32; var value: single);
    external 'opengl32.dll' name 'glProgramUniform1fv';
    public static procedure ProgramUniform1fv(&program: ProgramName; location: Int32; count: Int32; var value: Vec1f);
    external 'opengl32.dll' name 'glProgramUniform1fv';
    public static procedure ProgramUniform1fv(&program: ProgramName; location: Int32; count: Int32; value: pointer);
    external 'opengl32.dll' name 'glProgramUniform1fv';
    
    public static procedure ProgramUniform2fv(&program: ProgramName; location: Int32; count: Int32; [MarshalAs(UnmanagedType.LPArray)] value: array of single);
    external 'opengl32.dll' name 'glProgramUniform2fv';
    public static procedure ProgramUniform2fv(&program: ProgramName; location: Int32; count: Int32; var value: single);
    external 'opengl32.dll' name 'glProgramUniform2fv';
    public static procedure ProgramUniform2fv(&program: ProgramName; location: Int32; count: Int32; var value: Vec2f);
    external 'opengl32.dll' name 'glProgramUniform2fv';
    public static procedure ProgramUniform2fv(&program: ProgramName; location: Int32; count: Int32; value: pointer);
    external 'opengl32.dll' name 'glProgramUniform2fv';
    
    public static procedure ProgramUniform3fv(&program: ProgramName; location: Int32; count: Int32; [MarshalAs(UnmanagedType.LPArray)] value: array of single);
    external 'opengl32.dll' name 'glProgramUniform3fv';
    public static procedure ProgramUniform3fv(&program: ProgramName; location: Int32; count: Int32; var value: single);
    external 'opengl32.dll' name 'glProgramUniform3fv';
    public static procedure ProgramUniform3fv(&program: ProgramName; location: Int32; count: Int32; var value: Vec3f);
    external 'opengl32.dll' name 'glProgramUniform3fv';
    public static procedure ProgramUniform3fv(&program: ProgramName; location: Int32; count: Int32; value: pointer);
    external 'opengl32.dll' name 'glProgramUniform3fv';
    
    public static procedure ProgramUniform4fv(&program: ProgramName; location: Int32; count: Int32; [MarshalAs(UnmanagedType.LPArray)] value: array of single);
    external 'opengl32.dll' name 'glProgramUniform4fv';
    public static procedure ProgramUniform4fv(&program: ProgramName; location: Int32; count: Int32; var value: single);
    external 'opengl32.dll' name 'glProgramUniform4fv';
    public static procedure ProgramUniform4fv(&program: ProgramName; location: Int32; count: Int32; var value: Vec4f);
    external 'opengl32.dll' name 'glProgramUniform4fv';
    public static procedure ProgramUniform4fv(&program: ProgramName; location: Int32; count: Int32; value: pointer);
    external 'opengl32.dll' name 'glProgramUniform4fv';
    
    public static procedure ProgramUniform1dv(&program: ProgramName; location: Int32; count: Int32; [MarshalAs(UnmanagedType.LPArray)] value: array of double);
    external 'opengl32.dll' name 'glProgramUniform1dv';
    public static procedure ProgramUniform1dv(&program: ProgramName; location: Int32; count: Int32; var value: double);
    external 'opengl32.dll' name 'glProgramUniform1dv';
    public static procedure ProgramUniform1dv(&program: ProgramName; location: Int32; count: Int32; var value: Vec1d);
    external 'opengl32.dll' name 'glProgramUniform1dv';
    public static procedure ProgramUniform1dv(&program: ProgramName; location: Int32; count: Int32; value: pointer);
    external 'opengl32.dll' name 'glProgramUniform1dv';
    
    public static procedure ProgramUniform2dv(&program: ProgramName; location: Int32; count: Int32; [MarshalAs(UnmanagedType.LPArray)] value: array of double);
    external 'opengl32.dll' name 'glProgramUniform2dv';
    public static procedure ProgramUniform2dv(&program: ProgramName; location: Int32; count: Int32; var value: double);
    external 'opengl32.dll' name 'glProgramUniform2dv';
    public static procedure ProgramUniform2dv(&program: ProgramName; location: Int32; count: Int32; var value: Vec2d);
    external 'opengl32.dll' name 'glProgramUniform2dv';
    public static procedure ProgramUniform2dv(&program: ProgramName; location: Int32; count: Int32; value: pointer);
    external 'opengl32.dll' name 'glProgramUniform2dv';
    
    public static procedure ProgramUniform3dv(&program: ProgramName; location: Int32; count: Int32; [MarshalAs(UnmanagedType.LPArray)] value: array of double);
    external 'opengl32.dll' name 'glProgramUniform3dv';
    public static procedure ProgramUniform3dv(&program: ProgramName; location: Int32; count: Int32; var value: double);
    external 'opengl32.dll' name 'glProgramUniform3dv';
    public static procedure ProgramUniform3dv(&program: ProgramName; location: Int32; count: Int32; var value: Vec3d);
    external 'opengl32.dll' name 'glProgramUniform3dv';
    public static procedure ProgramUniform3dv(&program: ProgramName; location: Int32; count: Int32; value: pointer);
    external 'opengl32.dll' name 'glProgramUniform3dv';
    
    public static procedure ProgramUniform4dv(&program: ProgramName; location: Int32; count: Int32; [MarshalAs(UnmanagedType.LPArray)] value: array of double);
    external 'opengl32.dll' name 'glProgramUniform4dv';
    public static procedure ProgramUniform4dv(&program: ProgramName; location: Int32; count: Int32; var value: double);
    external 'opengl32.dll' name 'glProgramUniform4dv';
    public static procedure ProgramUniform4dv(&program: ProgramName; location: Int32; count: Int32; var value: Vec4d);
    external 'opengl32.dll' name 'glProgramUniform4dv';
    public static procedure ProgramUniform4dv(&program: ProgramName; location: Int32; count: Int32; value: pointer);
    external 'opengl32.dll' name 'glProgramUniform4dv';
    
    public static procedure ProgramUniform1uiv(&program: ProgramName; location: Int32; count: Int32; [MarshalAs(UnmanagedType.LPArray)] value: array of UInt32);
    external 'opengl32.dll' name 'glProgramUniform1uiv';
    public static procedure ProgramUniform1uiv(&program: ProgramName; location: Int32; count: Int32; var value: UInt32);
    external 'opengl32.dll' name 'glProgramUniform1uiv';
    public static procedure ProgramUniform1uiv(&program: ProgramName; location: Int32; count: Int32; var value: Vec1ui);
    external 'opengl32.dll' name 'glProgramUniform1uiv';
    public static procedure ProgramUniform1uiv(&program: ProgramName; location: Int32; count: Int32; value: pointer);
    external 'opengl32.dll' name 'glProgramUniform1uiv';
    
    public static procedure ProgramUniform2uiv(&program: ProgramName; location: Int32; count: Int32; [MarshalAs(UnmanagedType.LPArray)] value: array of UInt32);
    external 'opengl32.dll' name 'glProgramUniform2uiv';
    public static procedure ProgramUniform2uiv(&program: ProgramName; location: Int32; count: Int32; var value: UInt32);
    external 'opengl32.dll' name 'glProgramUniform2uiv';
    public static procedure ProgramUniform2uiv(&program: ProgramName; location: Int32; count: Int32; var value: Vec2ui);
    external 'opengl32.dll' name 'glProgramUniform2uiv';
    public static procedure ProgramUniform2uiv(&program: ProgramName; location: Int32; count: Int32; value: pointer);
    external 'opengl32.dll' name 'glProgramUniform2uiv';
    
    public static procedure ProgramUniform3uiv(&program: ProgramName; location: Int32; count: Int32; [MarshalAs(UnmanagedType.LPArray)] value: array of UInt32);
    external 'opengl32.dll' name 'glProgramUniform3uiv';
    public static procedure ProgramUniform3uiv(&program: ProgramName; location: Int32; count: Int32; var value: UInt32);
    external 'opengl32.dll' name 'glProgramUniform3uiv';
    public static procedure ProgramUniform3uiv(&program: ProgramName; location: Int32; count: Int32; var value: Vec3ui);
    external 'opengl32.dll' name 'glProgramUniform3uiv';
    public static procedure ProgramUniform3uiv(&program: ProgramName; location: Int32; count: Int32; value: pointer);
    external 'opengl32.dll' name 'glProgramUniform3uiv';
    
    public static procedure ProgramUniform4uiv(&program: ProgramName; location: Int32; count: Int32; [MarshalAs(UnmanagedType.LPArray)] value: array of UInt32);
    external 'opengl32.dll' name 'glProgramUniform4uiv';
    public static procedure ProgramUniform4uiv(&program: ProgramName; location: Int32; count: Int32; var value: UInt32);
    external 'opengl32.dll' name 'glProgramUniform4uiv';
    public static procedure ProgramUniform4uiv(&program: ProgramName; location: Int32; count: Int32; var value: Vec4ui);
    external 'opengl32.dll' name 'glProgramUniform4uiv';
    public static procedure ProgramUniform4uiv(&program: ProgramName; location: Int32; count: Int32; value: pointer);
    external 'opengl32.dll' name 'glProgramUniform4uiv';
    
    {$endregion ProgramUniform[1,2,3,4][i,f,d,ui]v}
    
    {$region ProgramUniformMatrix[2,3,4][f,d]v}
    
    public static procedure ProgramUniformMatrix2fv(&program: ProgramName; location: Int32; count: Int32; transpose: boolean; [MarshalAs(UnmanagedType.LPArray)] value: array of single);
    external 'opengl32.dll' name 'glProgramUniformMatrix2fv';
    public static procedure ProgramUniformMatrix2fv(&program: ProgramName; location: Int32; count: Int32; transpose: boolean; var value: single);
    external 'opengl32.dll' name 'glProgramUniformMatrix2fv';
    public static procedure ProgramUniformMatrix2fv(&program: ProgramName; location: Int32; count: Int32; transpose: boolean; var value: Mtr2f);
    external 'opengl32.dll' name 'glProgramUniformMatrix2fv';
    public static procedure ProgramUniformMatrix2fv(&program: ProgramName; location: Int32; count: Int32; transpose: boolean; value: pointer);
    external 'opengl32.dll' name 'glProgramUniformMatrix2fv';
    
    public static procedure ProgramUniformMatrix3fv(&program: ProgramName; location: Int32; count: Int32; transpose: boolean; [MarshalAs(UnmanagedType.LPArray)] value: array of single);
    external 'opengl32.dll' name 'glProgramUniformMatrix3fv';
    public static procedure ProgramUniformMatrix3fv(&program: ProgramName; location: Int32; count: Int32; transpose: boolean; var value: single);
    external 'opengl32.dll' name 'glProgramUniformMatrix3fv';
    public static procedure ProgramUniformMatrix3fv(&program: ProgramName; location: Int32; count: Int32; transpose: boolean; var value: Mtr3f);
    external 'opengl32.dll' name 'glProgramUniformMatrix3fv';
    public static procedure ProgramUniformMatrix3fv(&program: ProgramName; location: Int32; count: Int32; transpose: boolean; value: pointer);
    external 'opengl32.dll' name 'glProgramUniformMatrix3fv';
    
    public static procedure ProgramUniformMatrix4fv(&program: ProgramName; location: Int32; count: Int32; transpose: boolean; [MarshalAs(UnmanagedType.LPArray)] value: array of single);
    external 'opengl32.dll' name 'glProgramUniformMatrix4fv';
    public static procedure ProgramUniformMatrix4fv(&program: ProgramName; location: Int32; count: Int32; transpose: boolean; var value: single);
    external 'opengl32.dll' name 'glProgramUniformMatrix4fv';
    public static procedure ProgramUniformMatrix4fv(&program: ProgramName; location: Int32; count: Int32; transpose: boolean; var value: Mtr4f);
    external 'opengl32.dll' name 'glProgramUniformMatrix4fv';
    public static procedure ProgramUniformMatrix4fv(&program: ProgramName; location: Int32; count: Int32; transpose: boolean; value: pointer);
    external 'opengl32.dll' name 'glProgramUniformMatrix4fv';
    
    public static procedure ProgramUniformMatrix2dv(&program: ProgramName; location: Int32; count: Int32; transpose: boolean; [MarshalAs(UnmanagedType.LPArray)] value: array of double);
    external 'opengl32.dll' name 'glProgramUniformMatrix2dv';
    public static procedure ProgramUniformMatrix2dv(&program: ProgramName; location: Int32; count: Int32; transpose: boolean; var value: double);
    external 'opengl32.dll' name 'glProgramUniformMatrix2dv';
    public static procedure ProgramUniformMatrix2dv(&program: ProgramName; location: Int32; count: Int32; transpose: boolean; var value: Mtr2d);
    external 'opengl32.dll' name 'glProgramUniformMatrix2dv';
    public static procedure ProgramUniformMatrix2dv(&program: ProgramName; location: Int32; count: Int32; transpose: boolean; value: pointer);
    external 'opengl32.dll' name 'glProgramUniformMatrix2dv';
    
    public static procedure ProgramUniformMatrix3dv(&program: ProgramName; location: Int32; count: Int32; transpose: boolean; [MarshalAs(UnmanagedType.LPArray)] value: array of double);
    external 'opengl32.dll' name 'glProgramUniformMatrix3dv';
    public static procedure ProgramUniformMatrix3dv(&program: ProgramName; location: Int32; count: Int32; transpose: boolean; var value: double);
    external 'opengl32.dll' name 'glProgramUniformMatrix3dv';
    public static procedure ProgramUniformMatrix3dv(&program: ProgramName; location: Int32; count: Int32; transpose: boolean; var value: Mtr3d);
    external 'opengl32.dll' name 'glProgramUniformMatrix3dv';
    public static procedure ProgramUniformMatrix3dv(&program: ProgramName; location: Int32; count: Int32; transpose: boolean; value: pointer);
    external 'opengl32.dll' name 'glProgramUniformMatrix3dv';
    
    public static procedure ProgramUniformMatrix4dv(&program: ProgramName; location: Int32; count: Int32; transpose: boolean; [MarshalAs(UnmanagedType.LPArray)] value: array of double);
    external 'opengl32.dll' name 'glProgramUniformMatrix4dv';
    public static procedure ProgramUniformMatrix4dv(&program: ProgramName; location: Int32; count: Int32; transpose: boolean; var value: double);
    external 'opengl32.dll' name 'glProgramUniformMatrix4dv';
    public static procedure ProgramUniformMatrix4dv(&program: ProgramName; location: Int32; count: Int32; transpose: boolean; var value: Mtr4d);
    external 'opengl32.dll' name 'glProgramUniformMatrix4dv';
    public static procedure ProgramUniformMatrix4dv(&program: ProgramName; location: Int32; count: Int32; transpose: boolean; value: pointer);
    external 'opengl32.dll' name 'glProgramUniformMatrix4dv';
    
    {$endregion ProgramUniformMatrix[2,3,4][f,d]v}
    
    {$region ProgramUniformMatrix[2x3,3x2,2x4,4x2,3x4,4x3][f,d]v}
    
    public static procedure ProgramUniformMatrix2x3fv(&program: ProgramName; location: Int32; count: Int32; transpose: boolean; [MarshalAs(UnmanagedType.LPArray)] value: array of single);
    external 'opengl32.dll' name 'glProgramUniformMatrix2x3fv';
    public static procedure ProgramUniformMatrix2x3fv(&program: ProgramName; location: Int32; count: Int32; transpose: boolean; var value: single);
    external 'opengl32.dll' name 'glProgramUniformMatrix2x3fv';
    public static procedure ProgramUniformMatrix2x3fv(&program: ProgramName; location: Int32; count: Int32; transpose: boolean; var value: Mtr2x3f);
    external 'opengl32.dll' name 'glProgramUniformMatrix2x3fv';
    public static procedure ProgramUniformMatrix2x3fv(&program: ProgramName; location: Int32; count: Int32; transpose: boolean; value: pointer);
    external 'opengl32.dll' name 'glProgramUniformMatrix2x3fv';
    
    public static procedure ProgramUniformMatrix3x2fv(&program: ProgramName; location: Int32; count: Int32; transpose: boolean; [MarshalAs(UnmanagedType.LPArray)] value: array of single);
    external 'opengl32.dll' name 'glProgramUniformMatrix3x2fv';
    public static procedure ProgramUniformMatrix3x2fv(&program: ProgramName; location: Int32; count: Int32; transpose: boolean; var value: single);
    external 'opengl32.dll' name 'glProgramUniformMatrix3x2fv';
    public static procedure ProgramUniformMatrix3x2fv(&program: ProgramName; location: Int32; count: Int32; transpose: boolean; var value: Mtr3x2f);
    external 'opengl32.dll' name 'glProgramUniformMatrix3x2fv';
    public static procedure ProgramUniformMatrix3x2fv(&program: ProgramName; location: Int32; count: Int32; transpose: boolean; value: pointer);
    external 'opengl32.dll' name 'glProgramUniformMatrix3x2fv';
    
    public static procedure ProgramUniformMatrix2x4fv(&program: ProgramName; location: Int32; count: Int32; transpose: boolean; [MarshalAs(UnmanagedType.LPArray)] value: array of single);
    external 'opengl32.dll' name 'glProgramUniformMatrix2x4fv';
    public static procedure ProgramUniformMatrix2x4fv(&program: ProgramName; location: Int32; count: Int32; transpose: boolean; var value: single);
    external 'opengl32.dll' name 'glProgramUniformMatrix2x4fv';
    public static procedure ProgramUniformMatrix2x4fv(&program: ProgramName; location: Int32; count: Int32; transpose: boolean; var value: Mtr2x4f);
    external 'opengl32.dll' name 'glProgramUniformMatrix2x4fv';
    public static procedure ProgramUniformMatrix2x4fv(&program: ProgramName; location: Int32; count: Int32; transpose: boolean; value: pointer);
    external 'opengl32.dll' name 'glProgramUniformMatrix2x4fv';
    
    public static procedure ProgramUniformMatrix4x2fv(&program: ProgramName; location: Int32; count: Int32; transpose: boolean; [MarshalAs(UnmanagedType.LPArray)] value: array of single);
    external 'opengl32.dll' name 'glProgramUniformMatrix4x2fv';
    public static procedure ProgramUniformMatrix4x2fv(&program: ProgramName; location: Int32; count: Int32; transpose: boolean; var value: single);
    external 'opengl32.dll' name 'glProgramUniformMatrix4x2fv';
    public static procedure ProgramUniformMatrix4x2fv(&program: ProgramName; location: Int32; count: Int32; transpose: boolean; var value: Mtr4x2f);
    external 'opengl32.dll' name 'glProgramUniformMatrix4x2fv';
    public static procedure ProgramUniformMatrix4x2fv(&program: ProgramName; location: Int32; count: Int32; transpose: boolean; value: pointer);
    external 'opengl32.dll' name 'glProgramUniformMatrix4x2fv';
    
    public static procedure ProgramUniformMatrix3x4fv(&program: ProgramName; location: Int32; count: Int32; transpose: boolean; [MarshalAs(UnmanagedType.LPArray)] value: array of single);
    external 'opengl32.dll' name 'glProgramUniformMatrix3x4fv';
    public static procedure ProgramUniformMatrix3x4fv(&program: ProgramName; location: Int32; count: Int32; transpose: boolean; var value: single);
    external 'opengl32.dll' name 'glProgramUniformMatrix3x4fv';
    public static procedure ProgramUniformMatrix3x4fv(&program: ProgramName; location: Int32; count: Int32; transpose: boolean; var value: Mtr3x4f);
    external 'opengl32.dll' name 'glProgramUniformMatrix3x4fv';
    public static procedure ProgramUniformMatrix3x4fv(&program: ProgramName; location: Int32; count: Int32; transpose: boolean; value: pointer);
    external 'opengl32.dll' name 'glProgramUniformMatrix3x4fv';
    
    public static procedure ProgramUniformMatrix4x3fv(&program: ProgramName; location: Int32; count: Int32; transpose: boolean; [MarshalAs(UnmanagedType.LPArray)] value: array of single);
    external 'opengl32.dll' name 'glProgramUniformMatrix4x3fv';
    public static procedure ProgramUniformMatrix4x3fv(&program: ProgramName; location: Int32; count: Int32; transpose: boolean; var value: single);
    external 'opengl32.dll' name 'glProgramUniformMatrix4x3fv';
    public static procedure ProgramUniformMatrix4x3fv(&program: ProgramName; location: Int32; count: Int32; transpose: boolean; var value: Mtr4x3f);
    external 'opengl32.dll' name 'glProgramUniformMatrix4x3fv';
    public static procedure ProgramUniformMatrix4x3fv(&program: ProgramName; location: Int32; count: Int32; transpose: boolean; value: pointer);
    external 'opengl32.dll' name 'glProgramUniformMatrix4x3fv';
    
    public static procedure ProgramUniformMatrix2x3dv(&program: ProgramName; location: Int32; count: Int32; transpose: boolean; [MarshalAs(UnmanagedType.LPArray)] value: array of double);
    external 'opengl32.dll' name 'glProgramUniformMatrix2x3dv';
    public static procedure ProgramUniformMatrix2x3dv(&program: ProgramName; location: Int32; count: Int32; transpose: boolean; var value: double);
    external 'opengl32.dll' name 'glProgramUniformMatrix2x3dv';
    public static procedure ProgramUniformMatrix2x3dv(&program: ProgramName; location: Int32; count: Int32; transpose: boolean; var value: Mtr2x3d);
    external 'opengl32.dll' name 'glProgramUniformMatrix2x3dv';
    public static procedure ProgramUniformMatrix2x3dv(&program: ProgramName; location: Int32; count: Int32; transpose: boolean; value: pointer);
    external 'opengl32.dll' name 'glProgramUniformMatrix2x3dv';
    
    public static procedure ProgramUniformMatrix3x2dv(&program: ProgramName; location: Int32; count: Int32; transpose: boolean; [MarshalAs(UnmanagedType.LPArray)] value: array of double);
    external 'opengl32.dll' name 'glProgramUniformMatrix3x2dv';
    public static procedure ProgramUniformMatrix3x2dv(&program: ProgramName; location: Int32; count: Int32; transpose: boolean; var value: double);
    external 'opengl32.dll' name 'glProgramUniformMatrix3x2dv';
    public static procedure ProgramUniformMatrix3x2dv(&program: ProgramName; location: Int32; count: Int32; transpose: boolean; var value: Mtr3x2d);
    external 'opengl32.dll' name 'glProgramUniformMatrix3x2dv';
    public static procedure ProgramUniformMatrix3x2dv(&program: ProgramName; location: Int32; count: Int32; transpose: boolean; value: pointer);
    external 'opengl32.dll' name 'glProgramUniformMatrix3x2dv';
    
    public static procedure ProgramUniformMatrix2x4dv(&program: ProgramName; location: Int32; count: Int32; transpose: boolean; [MarshalAs(UnmanagedType.LPArray)] value: array of double);
    external 'opengl32.dll' name 'glProgramUniformMatrix2x4dv';
    public static procedure ProgramUniformMatrix2x4dv(&program: ProgramName; location: Int32; count: Int32; transpose: boolean; var value: double);
    external 'opengl32.dll' name 'glProgramUniformMatrix2x4dv';
    public static procedure ProgramUniformMatrix2x4dv(&program: ProgramName; location: Int32; count: Int32; transpose: boolean; var value: Mtr2x4d);
    external 'opengl32.dll' name 'glProgramUniformMatrix2x4dv';
    public static procedure ProgramUniformMatrix2x4dv(&program: ProgramName; location: Int32; count: Int32; transpose: boolean; value: pointer);
    external 'opengl32.dll' name 'glProgramUniformMatrix2x4dv';
    
    public static procedure ProgramUniformMatrix4x2dv(&program: ProgramName; location: Int32; count: Int32; transpose: boolean; [MarshalAs(UnmanagedType.LPArray)] value: array of double);
    external 'opengl32.dll' name 'glProgramUniformMatrix4x2dv';
    public static procedure ProgramUniformMatrix4x2dv(&program: ProgramName; location: Int32; count: Int32; transpose: boolean; var value: double);
    external 'opengl32.dll' name 'glProgramUniformMatrix4x2dv';
    public static procedure ProgramUniformMatrix4x2dv(&program: ProgramName; location: Int32; count: Int32; transpose: boolean; var value: Mtr4x2d);
    external 'opengl32.dll' name 'glProgramUniformMatrix4x2dv';
    public static procedure ProgramUniformMatrix4x2dv(&program: ProgramName; location: Int32; count: Int32; transpose: boolean; value: pointer);
    external 'opengl32.dll' name 'glProgramUniformMatrix4x2dv';
    
    public static procedure ProgramUniformMatrix3x4dv(&program: ProgramName; location: Int32; count: Int32; transpose: boolean; [MarshalAs(UnmanagedType.LPArray)] value: array of double);
    external 'opengl32.dll' name 'glProgramUniformMatrix3x4dv';
    public static procedure ProgramUniformMatrix3x4dv(&program: ProgramName; location: Int32; count: Int32; transpose: boolean; var value: double);
    external 'opengl32.dll' name 'glProgramUniformMatrix3x4dv';
    public static procedure ProgramUniformMatrix3x4dv(&program: ProgramName; location: Int32; count: Int32; transpose: boolean; var value: Mtr3x4d);
    external 'opengl32.dll' name 'glProgramUniformMatrix3x4dv';
    public static procedure ProgramUniformMatrix3x4dv(&program: ProgramName; location: Int32; count: Int32; transpose: boolean; value: pointer);
    external 'opengl32.dll' name 'glProgramUniformMatrix3x4dv';
    
    public static procedure ProgramUniformMatrix4x3dv(&program: ProgramName; location: Int32; count: Int32; transpose: boolean; [MarshalAs(UnmanagedType.LPArray)] value: array of double);
    external 'opengl32.dll' name 'glProgramUniformMatrix4x3dv';
    public static procedure ProgramUniformMatrix4x3dv(&program: ProgramName; location: Int32; count: Int32; transpose: boolean; var value: double);
    external 'opengl32.dll' name 'glProgramUniformMatrix4x3dv';
    public static procedure ProgramUniformMatrix4x3dv(&program: ProgramName; location: Int32; count: Int32; transpose: boolean; var value: Mtr4x3d);
    external 'opengl32.dll' name 'glProgramUniformMatrix4x3dv';
    public static procedure ProgramUniformMatrix4x3dv(&program: ProgramName; location: Int32; count: Int32; transpose: boolean; value: pointer);
    external 'opengl32.dll' name 'glProgramUniformMatrix4x3dv';
    
    {$endregion ProgramUniformMatrix[2x3,3x2,2x4,4x2,3x4,4x3][f,d]v}
    
    // 7.6.3
    
    public static procedure UniformBlockBinding(&program: ProgramName; uniformBlockIndex: UInt32; uniformBlockBinding: UInt32);
    external 'opengl32.dll' name 'glUniformBlockBinding';
    
    {$endregion 7.6 - Uniform Variables}
    
    {$region 7.8 - Shader Buffer Variables and Shader Storage Blocks}
    
    public static procedure ShaderStorageBlockBinding(&program: ProgramName; storageBlockIndex: UInt32; storageBlockBinding: UInt32);
    external 'opengl32.dll' name 'glShaderStorageBlockBinding';
    
    {$endregion 7.8 - Shader Buffer Variables and Shader Storage Blocks}
    
    {$region 7.10 - Subroutine Uniform Variables}
    
    public static function GetSubroutineIndex(&program: ProgramName; _shadertype: ShaderType; [MarshalAs(UnmanagedType.LPStr)] name: string): UInt32;
    external 'opengl32.dll' name 'glGetSubroutineIndex';
    public static function GetSubroutineIndex(&program: ProgramName; _shadertype: ShaderType; name: IntPtr): UInt32;
    external 'opengl32.dll' name 'glGetSubroutineIndex';
    
    public static procedure GetActiveSubroutineName(&program: ProgramName; _shadertype: ShaderType; index: UInt32; bufsize: Int32; var length: Int32; [MarshalAs(UnmanagedType.LPStr)] name: string);
    external 'opengl32.dll' name 'glGetActiveSubroutineName';
    public static procedure GetActiveSubroutineName(&program: ProgramName; _shadertype: ShaderType; index: UInt32; bufsize: Int32; var length: Int32; name: IntPtr);
    external 'opengl32.dll' name 'glGetActiveSubroutineName';
    public static procedure GetActiveSubroutineName(&program: ProgramName; _shadertype: ShaderType; index: UInt32; bufsize: Int32; length: pointer; [MarshalAs(UnmanagedType.LPStr)] name: string);
    external 'opengl32.dll' name 'glGetActiveSubroutineName';
    public static procedure GetActiveSubroutineName(&program: ProgramName; _shadertype: ShaderType; index: UInt32; bufsize: Int32; length: pointer; name: IntPtr);
    external 'opengl32.dll' name 'glGetActiveSubroutineName';
    
    public static function GetSubroutineUniformLocation(&program: ProgramName; _shadertype: ShaderType; [MarshalAs(UnmanagedType.LPStr)] name: string): Int32;
    external 'opengl32.dll' name 'glGetSubroutineUniformLocation';
    public static function GetSubroutineUniformLocation(&program: ProgramName; _shadertype: ShaderType; name: IntPtr): Int32;
    external 'opengl32.dll' name 'glGetSubroutineUniformLocation';
    
    public static procedure GetActiveSubroutineUniformName(&program: ProgramName; _shadertype: ShaderType; index: UInt32; bufsize: Int32; var length: Int32; [MarshalAs(UnmanagedType.LPStr)] name: string);
    external 'opengl32.dll' name 'glGetActiveSubroutineUniformName';
    public static procedure GetActiveSubroutineUniformName(&program: ProgramName; _shadertype: ShaderType; index: UInt32; bufsize: Int32; var length: Int32; name: IntPtr);
    external 'opengl32.dll' name 'glGetActiveSubroutineUniformName';
    public static procedure GetActiveSubroutineUniformName(&program: ProgramName; _shadertype: ShaderType; index: UInt32; bufsize: Int32; length: pointer; [MarshalAs(UnmanagedType.LPStr)] name: string);
    external 'opengl32.dll' name 'glGetActiveSubroutineUniformName';
    public static procedure GetActiveSubroutineUniformName(&program: ProgramName; _shadertype: ShaderType; index: UInt32; bufsize: Int32; length: pointer; name: IntPtr);
    external 'opengl32.dll' name 'glGetActiveSubroutineUniformName';
    
    public static procedure GetActiveSubroutineUniformiv(&program: ProgramName; _shadertype: ShaderType; index: UInt32; pname: ProgramInterfaceProperty; [MarshalAs(UnmanagedType.LPArray)] values: array of Int32);
    external 'opengl32.dll' name 'glGetActiveSubroutineUniformiv';
    public static procedure GetActiveSubroutineUniformiv(&program: ProgramName; _shadertype: ShaderType; index: UInt32; pname: ProgramInterfaceProperty; var values: Int32);
    external 'opengl32.dll' name 'glGetActiveSubroutineUniformiv';
    public static procedure GetActiveSubroutineUniformiv(&program: ProgramName; _shadertype: ShaderType; index: UInt32; pname: ProgramInterfaceProperty; values: pointer);
    external 'opengl32.dll' name 'glGetActiveSubroutineUniformiv';
    
    public static procedure UniformSubroutinesuiv(_shadertype: ShaderType; count: Int32; [MarshalAs(UnmanagedType.LPArray)] indices: array of UInt32);
    external 'opengl32.dll' name 'glUniformSubroutinesuiv';
    public static procedure UniformSubroutinesuiv(_shadertype: ShaderType; count: Int32; var indices: UInt32);
    external 'opengl32.dll' name 'glUniformSubroutinesuiv';
    public static procedure UniformSubroutinesuiv(_shadertype: ShaderType; count: Int32; indices: pointer);
    external 'opengl32.dll' name 'glUniformSubroutinesuiv';
    
    {$endregion 7.10 - Subroutine Uniform Variables}
    
    {$region 7.13 - Shader Memory Access}
    
    //7.13.2
    
    public static procedure MemoryBarrier(barriers: MemoryBarrierTypeFlags);
    external 'opengl32.dll' name 'glMemoryBarrier';
    
    public static procedure MemoryBarrierByRegion(barriers: MemoryBarrierTypeFlags);
    external 'opengl32.dll' name 'glMemoryBarrierByRegion';
    
    {$endregion 7.13 - Shader Memory Access}
    
    {$region 7.14 - Shader, Program, and Program Pipeline Queries}
    
    public static procedure GetShaderiv(shader: ShaderName; pname: ShaderInfoType; [MarshalAs(UnmanagedType.LPArray)] &params: array of Int32);
    external 'opengl32.dll' name 'glGetShaderiv';
    public static procedure GetShaderiv(shader: ShaderName; pname: ShaderInfoType; var &params: Int32);
    external 'opengl32.dll' name 'glGetShaderiv';
    public static procedure GetShaderiv(shader: ShaderName; pname: ShaderInfoType; &params: pointer);
    external 'opengl32.dll' name 'glGetShaderiv';
    
    public static procedure GetProgramiv(&program: ProgramName; pname: ProgramInfoType; [MarshalAs(UnmanagedType.LPArray)] &params: array of Int32);
    external 'opengl32.dll' name 'glGetProgramiv';
    public static procedure GetProgramiv(&program: ProgramName; pname: ProgramInfoType; var &params: Int32);
    external 'opengl32.dll' name 'glGetProgramiv';
    public static procedure GetProgramiv(&program: ProgramName; pname: ProgramInfoType; &params: pointer);
    external 'opengl32.dll' name 'glGetProgramiv';
    
    public static procedure GetProgramPipelineiv(pipeline: ProgramPipelineName; pname: ProgramPipelineInfoType; var &params: ProgramName);
    external 'opengl32.dll' name 'glGetProgramPipelineiv';
    public static procedure GetProgramPipelineiv(pipeline: ProgramPipelineName; pname: ProgramPipelineInfoType; var &params: ErrorCode);
    external 'opengl32.dll' name 'glGetProgramPipelineiv';
    public static procedure GetProgramPipelineiv(pipeline: ProgramPipelineName; pname: ProgramPipelineInfoType; var &params: Int32);
    external 'opengl32.dll' name 'glGetProgramPipelineiv';
    public static procedure GetProgramPipelineiv(pipeline: ProgramPipelineName; pname: ProgramPipelineInfoType; &params: pointer);
    external 'opengl32.dll' name 'glGetProgramPipelineiv';
    
    public static procedure GetAttachedShaders(&program: ProgramName; maxCount: Int32; var count: Int32; [MarshalAs(UnmanagedType.LPArray)] shaders: array of ShaderName);
    external 'opengl32.dll' name 'glGetAttachedShaders';
    public static procedure GetAttachedShaders(&program: ProgramName; maxCount: Int32; var count: Int32; var shaders: ShaderName);
    external 'opengl32.dll' name 'glGetAttachedShaders';
    public static procedure GetAttachedShaders(&program: ProgramName; maxCount: Int32; var count: Int32; shaders: pointer);
    external 'opengl32.dll' name 'glGetAttachedShaders';
    public static procedure GetAttachedShaders(&program: ProgramName; maxCount: Int32; count: pointer; [MarshalAs(UnmanagedType.LPArray)] shaders: array of ShaderName);
    external 'opengl32.dll' name 'glGetAttachedShaders';
    public static procedure GetAttachedShaders(&program: ProgramName; maxCount: Int32; count: pointer; var shaders: ShaderName);
    external 'opengl32.dll' name 'glGetAttachedShaders';
    public static procedure GetAttachedShaders(&program: ProgramName; maxCount: Int32; count: pointer; shaders: pointer);
    external 'opengl32.dll' name 'glGetAttachedShaders';
    
    public static procedure GetShaderInfoLog(shader: ShaderName; bufSize: Int32; var length: Int32; [MarshalAs(UnmanagedType.LPStr)] infoLog: string);
    external 'opengl32.dll' name 'glGetShaderInfoLog';
    public static procedure GetShaderInfoLog(shader: ShaderName; bufSize: Int32; var length: Int32; infoLog: IntPtr);
    external 'opengl32.dll' name 'glGetShaderInfoLog';
    public static procedure GetShaderInfoLog(shader: ShaderName; bufSize: Int32; length: pointer; [MarshalAs(UnmanagedType.LPStr)] infoLog: string);
    external 'opengl32.dll' name 'glGetShaderInfoLog';
    public static procedure GetShaderInfoLog(shader: ShaderName; bufSize: Int32; length: pointer; infoLog: IntPtr);
    external 'opengl32.dll' name 'glGetShaderInfoLog';
    
    public static procedure GetProgramInfoLog(&program: ProgramName; bufSize: Int32; var length: Int32; [MarshalAs(UnmanagedType.LPStr)] infoLog: string);
    external 'opengl32.dll' name 'glGetProgramInfoLog';
    public static procedure GetProgramInfoLog(&program: ProgramName; bufSize: Int32; var length: Int32; infoLog: IntPtr);
    external 'opengl32.dll' name 'glGetProgramInfoLog';
    public static procedure GetProgramInfoLog(&program: ProgramName; bufSize: Int32; length: pointer; [MarshalAs(UnmanagedType.LPStr)] infoLog: string);
    external 'opengl32.dll' name 'glGetProgramInfoLog';
    public static procedure GetProgramInfoLog(&program: ProgramName; bufSize: Int32; length: pointer; infoLog: IntPtr);
    external 'opengl32.dll' name 'glGetProgramInfoLog';
    
    public static procedure GetProgramPipelineInfoLog(pipeline: ProgramPipelineName; bufSize: Int32; var length: Int32; [MarshalAs(UnmanagedType.LPStr)] infoLog: string);
    external 'opengl32.dll' name 'glGetProgramPipelineInfoLog';
    public static procedure GetProgramPipelineInfoLog(pipeline: ProgramPipelineName; bufSize: Int32; var length: Int32; infoLog: IntPtr);
    external 'opengl32.dll' name 'glGetProgramPipelineInfoLog';
    public static procedure GetProgramPipelineInfoLog(pipeline: ProgramPipelineName; bufSize: Int32; length: pointer; [MarshalAs(UnmanagedType.LPStr)] infoLog: string);
    external 'opengl32.dll' name 'glGetProgramPipelineInfoLog';
    public static procedure GetProgramPipelineInfoLog(pipeline: ProgramPipelineName; bufSize: Int32; length: pointer; infoLog: IntPtr);
    external 'opengl32.dll' name 'glGetProgramPipelineInfoLog';
    
    public static procedure GetShaderSource(shader: ShaderName; bufSize: Int32; var length: Int32; [MarshalAs(UnmanagedType.LPStr)] source: string);
    external 'opengl32.dll' name 'glGetShaderSource';
    public static procedure GetShaderSource(shader: ShaderName; bufSize: Int32; var length: Int32; source: IntPtr);
    external 'opengl32.dll' name 'glGetShaderSource';
    public static procedure GetShaderSource(shader: ShaderName; bufSize: Int32; length: pointer; [MarshalAs(UnmanagedType.LPStr)] source: string);
    external 'opengl32.dll' name 'glGetShaderSource';
    public static procedure GetShaderSource(shader: ShaderName; bufSize: Int32; length: pointer; source: IntPtr);
    external 'opengl32.dll' name 'glGetShaderSource';
    
    public static procedure GetShaderPrecisionFormat(_shadertype: ShaderType; precisiontype: ShaderPrecisionFormatType; [MarshalAs(UnmanagedType.LPArray)] range: array of Int32; var precision: Int32);
    external 'opengl32.dll' name 'glGetShaderPrecisionFormat';
    public static procedure GetShaderPrecisionFormat(_shadertype: ShaderType; precisiontype: ShaderPrecisionFormatType; [MarshalAs(UnmanagedType.LPArray)] range: array of Int32; precision: pointer);
    external 'opengl32.dll' name 'glGetShaderPrecisionFormat';
    public static procedure GetShaderPrecisionFormat(_shadertype: ShaderType; precisiontype: ShaderPrecisionFormatType; var range: Vec2i; var precision: Int32);
    external 'opengl32.dll' name 'glGetShaderPrecisionFormat';
    public static procedure GetShaderPrecisionFormat(_shadertype: ShaderType; precisiontype: ShaderPrecisionFormatType; var range: Vec2i; precision: pointer);
    external 'opengl32.dll' name 'glGetShaderPrecisionFormat';
    public static procedure GetShaderPrecisionFormat(_shadertype: ShaderType; precisiontype: ShaderPrecisionFormatType; range: pointer; var precision: Int32);
    external 'opengl32.dll' name 'glGetShaderPrecisionFormat';
    public static procedure GetShaderPrecisionFormat(_shadertype: ShaderType; precisiontype: ShaderPrecisionFormatType; range: pointer; precision: pointer);
    external 'opengl32.dll' name 'glGetShaderPrecisionFormat';
    
    public static procedure GetUniformfv(&program: ProgramName; location: Int32; [MarshalAs(UnmanagedType.LPArray)] &params: array of single);
    external 'opengl32.dll' name 'glGetUniformfv';
    public static procedure GetUniformfv(&program: ProgramName; location: Int32; var &params: single);
    external 'opengl32.dll' name 'glGetUniformfv';
    public static procedure GetUniformfv(&program: ProgramName; location: Int32; &params: pointer);
    external 'opengl32.dll' name 'glGetUniformfv';
    
    public static procedure GetUniformdv(&program: ProgramName; location: Int32; [MarshalAs(UnmanagedType.LPArray)] &params: array of double);
    external 'opengl32.dll' name 'glGetUniformdv';
    public static procedure GetUniformdv(&program: ProgramName; location: Int32; var &params: double);
    external 'opengl32.dll' name 'glGetUniformdv';
    public static procedure GetUniformdv(&program: ProgramName; location: Int32; &params: pointer);
    external 'opengl32.dll' name 'glGetUniformdv';
    
    public static procedure GetUniformiv(&program: ProgramName; location: Int32; [MarshalAs(UnmanagedType.LPArray)] &params: array of Int32);
    external 'opengl32.dll' name 'glGetUniformiv';
    public static procedure GetUniformiv(&program: ProgramName; location: Int32; var &params: Int32);
    external 'opengl32.dll' name 'glGetUniformiv';
    public static procedure GetUniformiv(&program: ProgramName; location: Int32; &params: pointer);
    external 'opengl32.dll' name 'glGetUniformiv';
    
    public static procedure GetUniformuiv(&program: ProgramName; location: Int32; [MarshalAs(UnmanagedType.LPArray)] &params: array of UInt32);
    external 'opengl32.dll' name 'glGetUniformuiv';
    public static procedure GetUniformuiv(&program: ProgramName; location: Int32; var &params: UInt32);
    external 'opengl32.dll' name 'glGetUniformuiv';
    public static procedure GetUniformuiv(&program: ProgramName; location: Int32; &params: pointer);
    external 'opengl32.dll' name 'glGetUniformuiv';
    
    public static procedure GetnUniformfv(&program: ProgramName; location: Int32; bufSize: Int32; [MarshalAs(UnmanagedType.LPArray)] &params: array of single);
    external 'opengl32.dll' name 'glGetnUniformfv';
    public static procedure GetnUniformfv(&program: ProgramName; location: Int32; bufSize: Int32; var &params: single);
    external 'opengl32.dll' name 'glGetnUniformfv';
    public static procedure GetnUniformfv(&program: ProgramName; location: Int32; bufSize: Int32; &params: pointer);
    external 'opengl32.dll' name 'glGetnUniformfv';
    
    public static procedure GetnUniformdv(&program: ProgramName; location: Int32; bufSize: Int32; [MarshalAs(UnmanagedType.LPArray)] &params: array of double);
    external 'opengl32.dll' name 'glGetnUniformdv';
    public static procedure GetnUniformdv(&program: ProgramName; location: Int32; bufSize: Int32; var &params: double);
    external 'opengl32.dll' name 'glGetnUniformdv';
    public static procedure GetnUniformdv(&program: ProgramName; location: Int32; bufSize: Int32; &params: pointer);
    external 'opengl32.dll' name 'glGetnUniformdv';
    
    public static procedure GetnUniformiv(&program: ProgramName; location: Int32; bufSize: Int32; [MarshalAs(UnmanagedType.LPArray)] &params: array of Int32);
    external 'opengl32.dll' name 'glGetnUniformiv';
    public static procedure GetnUniformiv(&program: ProgramName; location: Int32; bufSize: Int32; var &params: Int32);
    external 'opengl32.dll' name 'glGetnUniformiv';
    public static procedure GetnUniformiv(&program: ProgramName; location: Int32; bufSize: Int32; &params: pointer);
    external 'opengl32.dll' name 'glGetnUniformiv';
    
    public static procedure GetnUniformuiv(&program: ProgramName; location: Int32; bufSize: Int32; [MarshalAs(UnmanagedType.LPArray)] &params: array of UInt32);
    external 'opengl32.dll' name 'glGetnUniformuiv';
    public static procedure GetnUniformuiv(&program: ProgramName; location: Int32; bufSize: Int32; var &params: UInt32);
    external 'opengl32.dll' name 'glGetnUniformuiv';
    public static procedure GetnUniformuiv(&program: ProgramName; location: Int32; bufSize: Int32; &params: pointer);
    external 'opengl32.dll' name 'glGetnUniformuiv';
    
    public static procedure GetUniformSubroutineuiv(_shadertype: ShaderType; location: Int32; [MarshalAs(UnmanagedType.LPArray)] &params: array of UInt32);
    external 'opengl32.dll' name 'glGetUniformSubroutineuiv';
    public static procedure GetUniformSubroutineuiv(_shadertype: ShaderType; location: Int32; var &params: UInt32);
    external 'opengl32.dll' name 'glGetUniformSubroutineuiv';
    public static procedure GetUniformSubroutineuiv(_shadertype: ShaderType; location: Int32; &params: pointer);
    external 'opengl32.dll' name 'glGetUniformSubroutineuiv';
    
    public static procedure GetProgramStageiv(&program: ProgramName; _shadertype: ShaderType; pname: ActiveSubroutineInfoType; [MarshalAs(UnmanagedType.LPArray)] values: array of Int32);
    external 'opengl32.dll' name 'glGetProgramStageiv';
    public static procedure GetProgramStageiv(&program: ProgramName; _shadertype: ShaderType; pname: ActiveSubroutineInfoType; var values: Int32);
    external 'opengl32.dll' name 'glGetProgramStageiv';
    public static procedure GetProgramStageiv(&program: ProgramName; _shadertype: ShaderType; pname: ActiveSubroutineInfoType; values: pointer);
    external 'opengl32.dll' name 'glGetProgramStageiv';
    
    {$endregion 7.14 - Shader, Program, and Program Pipeline Queries}
    
    {$endregion 7.0 - Programs and Shaders}
    
    {$region 8.0 - Textures and Samplers}
    
    public static procedure ActiveTexture(texture: TextureUnitId);
    external 'opengl32.dll' name 'glActiveTexture';
    
    {$region 8.1 - Texture Objects}
    
    public static procedure GenTextures(n: Int32; [MarshalAs(UnmanagedType.LPArray)] textures: array of TextureName);
    external 'opengl32.dll' name 'glGenTextures';
    public static procedure GenTextures(n: Int32; var textures: TextureName);
    external 'opengl32.dll' name 'glGenTextures';
    public static procedure GenTextures(n: Int32; textures: pointer);
    external 'opengl32.dll' name 'glGenTextures';
    
    public static procedure BindTexture(target: TextureBindTarget; texture: TextureName);
    external 'opengl32.dll' name 'glBindTexture';
    
    public static procedure BindTextures(first: TextureUnitId; count: Int32; [MarshalAs(UnmanagedType.LPArray)] textures: array of TextureName);
    external 'opengl32.dll' name 'glBindTextures';
    public static procedure BindTextures(first: TextureUnitId; count: Int32; var textures: TextureName);
    external 'opengl32.dll' name 'glBindTextures';
    public static procedure BindTextures(first: TextureUnitId; count: Int32; textures: pointer);
    external 'opengl32.dll' name 'glBindTextures';
    
    public static procedure BindTextureUnit(&unit: TextureUnitId; texture: TextureName);
    external 'opengl32.dll' name 'glBindTextureUnit';
    
    public static procedure CreateTextures(target: TextureBindTarget; n: Int32; [MarshalAs(UnmanagedType.LPArray)] textures: array of TextureName);
    external 'opengl32.dll' name 'glCreateTextures';
    public static procedure CreateTextures(target: TextureBindTarget; n: Int32; var textures: TextureName);
    external 'opengl32.dll' name 'glCreateTextures';
    public static procedure CreateTextures(target: TextureBindTarget; n: Int32; textures: pointer);
    external 'opengl32.dll' name 'glCreateTextures';
    
    public static procedure DeleteTextures(n: Int32; [MarshalAs(UnmanagedType.LPArray)] textures: array of TextureName);
    external 'opengl32.dll' name 'glDeleteTextures';
    public static procedure DeleteTextures(n: Int32; var textures: TextureName);
    external 'opengl32.dll' name 'glDeleteTextures';
    public static procedure DeleteTextures(n: Int32; textures: pointer);
    external 'opengl32.dll' name 'glDeleteTextures';
    
    public static function IsTexture(texture: TextureName): boolean;
    external 'opengl32.dll' name 'glIsTexture';
    
    {$endregion 8.1 - Texture Objects}
    
    {$region 8.2 - Sampler Objects}
    
    public static procedure GenSamplers(count: Int32; [MarshalAs(UnmanagedType.LPArray)] samplers: array of SamplerName);
    external 'opengl32.dll' name 'glGenSamplers';
    public static procedure GenSamplers(count: Int32; var samplers: SamplerName);
    external 'opengl32.dll' name 'glGenSamplers';
    public static procedure GenSamplers(count: Int32; samplers: pointer);
    external 'opengl32.dll' name 'glGenSamplers';
    
    public static procedure CreateSamplers(n: Int32; [MarshalAs(UnmanagedType.LPArray)] samplers: array of SamplerName);
    external 'opengl32.dll' name 'glCreateSamplers';
    public static procedure CreateSamplers(n: Int32; var samplers: SamplerName);
    external 'opengl32.dll' name 'glCreateSamplers';
    public static procedure CreateSamplers(n: Int32; samplers: pointer);
    external 'opengl32.dll' name 'glCreateSamplers';
    
    public static procedure BindSampler(&unit: Int32; sampler: SamplerName);
    external 'opengl32.dll' name 'glBindSampler';
    
    public static procedure BindSamplers(first: Int32; count: Int32; [MarshalAs(UnmanagedType.LPArray)] samplers: array of SamplerName);
    external 'opengl32.dll' name 'glBindSamplers';
    public static procedure BindSamplers(first: Int32; count: Int32; var samplers: SamplerName);
    external 'opengl32.dll' name 'glBindSamplers';
    public static procedure BindSamplers(first: Int32; count: Int32; samplers: pointer);
    external 'opengl32.dll' name 'glBindSamplers';
    
    public static procedure SamplerParameteri(sampler: SamplerName; pname: TextureInfoType; param: TextureCompareMode);
    external 'opengl32.dll' name 'glSamplerParameteri';
    public static procedure SamplerParameteri(sampler: SamplerName; pname: TextureInfoType; param: ActivationFunc);
    external 'opengl32.dll' name 'glSamplerParameteri';
    public static procedure SamplerParameteri(sampler: SamplerName; pname: TextureInfoType; param: PixelMagFilterMode);
    external 'opengl32.dll' name 'glSamplerParameteri';
    public static procedure SamplerParameteri(sampler: SamplerName; pname: TextureInfoType; param: PixelMinFilterMode);
    external 'opengl32.dll' name 'glSamplerParameteri';
    public static procedure SamplerParameteri(sampler: SamplerName; pname: TextureInfoType; param: PixelWrapMode);
    external 'opengl32.dll' name 'glSamplerParameteri';
    public static procedure SamplerParameteri(sampler: SamplerName; pname: TextureInfoType; param: Int32); // нигде не используется, существует только для совместимости с .val
    external 'opengl32.dll' name 'glSamplerParameteri';
    
    public static procedure SamplerParameterf(sampler: SamplerName; pname: TextureInfoType; param: single);
    external 'opengl32.dll' name 'glSamplerParameterf';
    
    public static procedure SamplerParameteriv(sampler: SamplerName; pname: TextureInfoType; var param: Int32);
    external 'opengl32.dll' name 'glSamplerParameteriv';
    public static procedure SamplerParameteriv(sampler: SamplerName; pname: TextureInfoType; param: pointer);
    external 'opengl32.dll' name 'glSamplerParameteriv';
    
    public static procedure SamplerParameterfv(sampler: SamplerName; pname: TextureInfoType; var param: single);
    external 'opengl32.dll' name 'glSamplerParameterfv';
    public static procedure SamplerParameterfv(sampler: SamplerName; pname: TextureInfoType; param: pointer);
    external 'opengl32.dll' name 'glSamplerParameterfv';
    
    public static procedure SamplerParameterIiv(sampler: SamplerName; pname: TextureInfoType; var param: Int32); // нигде не используется, существует только для совместимости с .val
    external 'opengl32.dll' name 'glSamplerParameterIiv';
    public static procedure SamplerParameterIiv(sampler: SamplerName; pname: TextureInfoType; param: pointer);
    external 'opengl32.dll' name 'glSamplerParameterIiv';
    
    public static procedure SamplerParameterIuiv(sampler: SamplerName; pname: TextureInfoType; var param: TextureCompareMode);
    external 'opengl32.dll' name 'glSamplerParameterIuiv';
    public static procedure SamplerParameterIuiv(sampler: SamplerName; pname: TextureInfoType; var param: ActivationFunc);
    external 'opengl32.dll' name 'glSamplerParameterIuiv';
    public static procedure SamplerParameterIuiv(sampler: SamplerName; pname: TextureInfoType; var param: PixelMagFilterMode);
    external 'opengl32.dll' name 'glSamplerParameterIuiv';
    public static procedure SamplerParameterIuiv(sampler: SamplerName; pname: TextureInfoType; var param: PixelMinFilterMode);
    external 'opengl32.dll' name 'glSamplerParameterIuiv';
    public static procedure SamplerParameterIuiv(sampler: SamplerName; pname: TextureInfoType; var param: PixelWrapMode);
    external 'opengl32.dll' name 'glSamplerParameterIuiv';
    public static procedure SamplerParameterIuiv(sampler: SamplerName; pname: TextureInfoType; var param: UInt32); // нигде не используется, существует только для совместимости с .val
    external 'opengl32.dll' name 'glSamplerParameterIuiv';
    public static procedure SamplerParameterIuiv(sampler: SamplerName; pname: TextureInfoType; param: pointer);
    external 'opengl32.dll' name 'glSamplerParameterIuiv';
    
    public static procedure DeleteSamplers(count: Int32; [MarshalAs(UnmanagedType.LPArray)] samplers: array of SamplerName);
    external 'opengl32.dll' name 'glDeleteSamplers';
    public static procedure DeleteSamplers(count: Int32; var samplers: SamplerName);
    external 'opengl32.dll' name 'glDeleteSamplers';
    public static procedure DeleteSamplers(count: Int32; samplers: pointer);
    external 'opengl32.dll' name 'glDeleteSamplers';
    
    public static function IsSampler(sampler: SamplerName): boolean;
    external 'opengl32.dll' name 'glIsSampler';
    
    {$endregion 8.2 - Sampler Objects}
    
    {$region 8.3 - Sampler Object Queries}
    
    public static procedure GetSamplerParameteriv(sampler: SamplerName; pname: TextureInfoType; var &params: TextureCompareMode);
    external 'opengl32.dll' name 'glGetSamplerParameteriv';
    public static procedure GetSamplerParameteriv(sampler: SamplerName; pname: TextureInfoType; var &params: ActivationFunc);
    external 'opengl32.dll' name 'glGetSamplerParameteriv';
    public static procedure GetSamplerParameteriv(sampler: SamplerName; pname: TextureInfoType; var &params: PixelMagFilterMode);
    external 'opengl32.dll' name 'glGetSamplerParameteriv';
    public static procedure GetSamplerParameteriv(sampler: SamplerName; pname: TextureInfoType; var &params: PixelMinFilterMode);
    external 'opengl32.dll' name 'glGetSamplerParameteriv';
    public static procedure GetSamplerParameteriv(sampler: SamplerName; pname: TextureInfoType; var &params: PixelWrapMode);
    external 'opengl32.dll' name 'glGetSamplerParameteriv';
    public static procedure GetSamplerParameteriv(sampler: SamplerName; pname: TextureInfoType; var &params: Int32);
    external 'opengl32.dll' name 'glGetSamplerParameteriv';
    public static procedure GetSamplerParameteriv(sampler: SamplerName; pname: TextureInfoType; &params: pointer);
    external 'opengl32.dll' name 'glGetSamplerParameteriv';
    
    public static procedure GetSamplerParameterfv(sampler: SamplerName; pname: TextureInfoType; var &params: single);
    external 'opengl32.dll' name 'glGetSamplerParameterfv';
    public static procedure GetSamplerParameterfv(sampler: SamplerName; pname: TextureInfoType; &params: pointer);
    external 'opengl32.dll' name 'glGetSamplerParameterfv';
    
    public static procedure GetSamplerParameterIiv(sampler: SamplerName; pname: TextureInfoType; var &params: Int32);
    external 'opengl32.dll' name 'glGetSamplerParameterIiv';
    public static procedure GetSamplerParameterIiv(sampler: SamplerName; pname: TextureInfoType; &params: pointer);
    external 'opengl32.dll' name 'glGetSamplerParameterIiv';
    
    public static procedure GetSamplerParameterIuiv(sampler: SamplerName; pname: TextureInfoType; var &params: TextureCompareMode);
    external 'opengl32.dll' name 'glGetSamplerParameterIuiv';
    public static procedure GetSamplerParameterIuiv(sampler: SamplerName; pname: TextureInfoType; var &params: ActivationFunc);
    external 'opengl32.dll' name 'glGetSamplerParameterIuiv';
    public static procedure GetSamplerParameterIuiv(sampler: SamplerName; pname: TextureInfoType; var &params: PixelMagFilterMode);
    external 'opengl32.dll' name 'glGetSamplerParameterIuiv';
    public static procedure GetSamplerParameterIuiv(sampler: SamplerName; pname: TextureInfoType; var &params: PixelMinFilterMode);
    external 'opengl32.dll' name 'glGetSamplerParameterIuiv';
    public static procedure GetSamplerParameterIuiv(sampler: SamplerName; pname: TextureInfoType; var &params: PixelWrapMode);
    external 'opengl32.dll' name 'glGetSamplerParameterIuiv';
    public static procedure GetSamplerParameterIuiv(sampler: SamplerName; pname: TextureInfoType; var &params: UInt32);
    external 'opengl32.dll' name 'glGetSamplerParameterIuiv';
    public static procedure GetSamplerParameterIuiv(sampler: SamplerName; pname: TextureInfoType; &params: pointer);
    external 'opengl32.dll' name 'glGetSamplerParameterIuiv';
    
    {$endregion 8.3 - Sampler Object Queries}
    
    {$region 8.4 - Pixel Rectangles}
    
    // 8.4.1
    
    public static procedure PixelStorei(pname: PixelInfoType; param: Int32);
    external 'opengl32.dll' name 'glPixelStorei';
    
    public static procedure PixelStoref(pname: PixelInfoType; param: single);
    external 'opengl32.dll' name 'glPixelStoref';
    
    {$endregion 8.4 - Pixel Rectangles}
    
    {$region 8.5 - Texture Image Specification}
    
    public static procedure TexImage3D(target: TextureBindTarget; level: Int32; internalformat: InternalDataFormat; width: Int32; height: Int32; depth: Int32; border: Int32; format: DataFormat; &type: DataType; pixels: IntPtr);
    external 'opengl32.dll' name 'glTexImage3D';
    public static procedure TexImage3D(target: TextureBindTarget; level: Int32; internalformat: InternalDataFormat; width: Int32; height: Int32; depth: Int32; border: Int32; format: DataFormat; &type: DataType; pixels: pointer);
    external 'opengl32.dll' name 'glTexImage3D';
    
    public static procedure TexImage2D(target: TextureBindTarget; level: Int32; internalformat: InternalDataFormat; width: Int32; height: Int32; border: Int32; format: DataFormat; &type: DataType; pixels: IntPtr);
    external 'opengl32.dll' name 'glTexImage2D';
    public static procedure TexImage2D(target: TextureBindTarget; level: Int32; internalformat: InternalDataFormat; width: Int32; height: Int32; border: Int32; format: DataFormat; &type: DataType; pixels: pointer);
    external 'opengl32.dll' name 'glTexImage2D';
    
    public static procedure TexImage1D(target: TextureBindTarget; level: Int32; internalformat: InternalDataFormat; width: Int32; border: Int32; format: DataFormat; &type: DataType; pixels: IntPtr);
    external 'opengl32.dll' name 'glTexImage1D';
    public static procedure TexImage1D(target: TextureBindTarget; level: Int32; internalformat: InternalDataFormat; width: Int32; border: Int32; format: DataFormat; &type: DataType; pixels: pointer);
    external 'opengl32.dll' name 'glTexImage1D';
    
    {$endregion 8.5 - Texture Image Specification}
    
    {$region 8.6 - Alternate Texture Image Specification Commands}
    
    public static procedure CopyTexImage2D(target: TextureBindTarget; level: Int32; internalformat: InternalDataFormat; x: Int32; y: Int32; width: Int32; height: Int32; border: Int32);
    external 'opengl32.dll' name 'glCopyTexImage2D';
    
    public static procedure CopyTexImage1D(target: TextureBindTarget; level: Int32; internalformat: InternalDataFormat; x: Int32; y: Int32; width: Int32; border: Int32);
    external 'opengl32.dll' name 'glCopyTexImage1D';
    
    public static procedure TexSubImage3D(target: TextureBindTarget; level: Int32; xoffset: Int32; yoffset: Int32; zoffset: Int32; width: Int32; height: Int32; depth: Int32; format: DataFormat; &type: DataType; pixels: IntPtr);
    external 'opengl32.dll' name 'glTexSubImage3D';
    public static procedure TexSubImage3D(target: TextureBindTarget; level: Int32; xoffset: Int32; yoffset: Int32; zoffset: Int32; width: Int32; height: Int32; depth: Int32; format: DataFormat; &type: DataType; pixels: pointer);
    external 'opengl32.dll' name 'glTexSubImage3D';
    
    public static procedure TexSubImage2D(target: TextureBindTarget; level: Int32; xoffset: Int32; yoffset: Int32; width: Int32; height: Int32; format: DataFormat; &type: DataType; pixels: IntPtr);
    external 'opengl32.dll' name 'glTexSubImage2D';
    public static procedure TexSubImage2D(target: TextureBindTarget; level: Int32; xoffset: Int32; yoffset: Int32; width: Int32; height: Int32; format: DataFormat; &type: DataType; pixels: pointer);
    external 'opengl32.dll' name 'glTexSubImage2D';
    
    public static procedure TexSubImage1D(target: TextureBindTarget; level: Int32; xoffset: Int32; width: Int32; format: DataFormat; &type: DataType; pixels: IntPtr);
    external 'opengl32.dll' name 'glTexSubImage1D';
    public static procedure TexSubImage1D(target: TextureBindTarget; level: Int32; xoffset: Int32; width: Int32; format: DataFormat; &type: DataType; pixels: pointer);
    external 'opengl32.dll' name 'glTexSubImage1D';
    
    public static procedure CopyTexSubImage3D(target: TextureBindTarget; level: Int32; xoffset: Int32; yoffset: Int32; zoffset: Int32; x: Int32; y: Int32; width: Int32; height: Int32);
    external 'opengl32.dll' name 'glCopyTexSubImage3D';
    
    public static procedure CopyTexSubImage2D(target: TextureBindTarget; level: Int32; xoffset: Int32; yoffset: Int32; x: Int32; y: Int32; width: Int32; height: Int32);
    external 'opengl32.dll' name 'glCopyTexSubImage2D';
    
    public static procedure CopyTexSubImage1D(target: TextureBindTarget; level: Int32; xoffset: Int32; x: Int32; y: Int32; width: Int32);
    external 'opengl32.dll' name 'glCopyTexSubImage1D';
    
    public static procedure TextureSubImage3D(texture: TextureName; level: Int32; xoffset: Int32; yoffset: Int32; zoffset: Int32; width: Int32; height: Int32; depth: Int32; format: DataFormat; &type: DataType; pixels: IntPtr);
    external 'opengl32.dll' name 'glTextureSubImage3D';
    public static procedure TextureSubImage3D(texture: TextureName; level: Int32; xoffset: Int32; yoffset: Int32; zoffset: Int32; width: Int32; height: Int32; depth: Int32; format: DataFormat; &type: DataType; pixels: pointer);
    external 'opengl32.dll' name 'glTextureSubImage3D';
    
    public static procedure TextureSubImage2D(texture: TextureName; level: Int32; xoffset: Int32; yoffset: Int32; width: Int32; height: Int32; format: DataFormat; &type: DataType; pixels: IntPtr);
    external 'opengl32.dll' name 'glTextureSubImage2D';
    public static procedure TextureSubImage2D(texture: TextureName; level: Int32; xoffset: Int32; yoffset: Int32; width: Int32; height: Int32; format: DataFormat; &type: DataType; pixels: pointer);
    external 'opengl32.dll' name 'glTextureSubImage2D';
    
    public static procedure TextureSubImage1D(texture: TextureName; level: Int32; xoffset: Int32; width: Int32; DataFormat: UInt32; &type: DataType; pixels: IntPtr);
    external 'opengl32.dll' name 'glTextureSubImage1D';
    public static procedure TextureSubImage1D(texture: TextureName; level: Int32; xoffset: Int32; width: Int32; DataFormat: UInt32; &type: DataType; pixels: pointer);
    external 'opengl32.dll' name 'glTextureSubImage1D';
    
    public static procedure CopyTextureSubImage3D(texture: TextureName; level: Int32; xoffset: Int32; yoffset: Int32; zoffset: Int32; x: Int32; y: Int32; width: Int32; height: Int32);
    external 'opengl32.dll' name 'glCopyTextureSubImage3D';
    
    public static procedure CopyTextureSubImage2D(texture: TextureName; level: Int32; xoffset: Int32; yoffset: Int32; x: Int32; y: Int32; width: Int32; height: Int32);
    external 'opengl32.dll' name 'glCopyTextureSubImage2D';
    
    public static procedure CopyTextureSubImage1D(texture: TextureName; level: Int32; xoffset: Int32; x: Int32; y: Int32; width: Int32);
    external 'opengl32.dll' name 'glCopyTextureSubImage1D';
    
    {$endregion 8.6 - Alternate Texture Image Specification Commands}
    
    {$region 8.7 - Compressed Texture Images}
    
    public static procedure CompressedTexImage1D(target: TextureBindTarget; level: Int32; internalformat: InternalDataFormat; width: Int32; border: Int32; imageSize: Int32; data: IntPtr);
    external 'opengl32.dll' name 'glCompressedTexImage1D';
    public static procedure CompressedTexImage1D(target: TextureBindTarget; level: Int32; internalformat: InternalDataFormat; width: Int32; border: Int32; imageSize: Int32; data: pointer);
    external 'opengl32.dll' name 'glCompressedTexImage1D';
    
    public static procedure CompressedTexImage2D(target: TextureBindTarget; level: Int32; internalformat: InternalDataFormat; width: Int32; height: Int32; border: Int32; imageSize: Int32; data: IntPtr);
    external 'opengl32.dll' name 'glCompressedTexImage2D';
    public static procedure CompressedTexImage2D(target: TextureBindTarget; level: Int32; internalformat: InternalDataFormat; width: Int32; height: Int32; border: Int32; imageSize: Int32; data: pointer);
    external 'opengl32.dll' name 'glCompressedTexImage2D';
    
    public static procedure CompressedTexImage3D(target: TextureBindTarget; level: Int32; internalformat: InternalDataFormat; width: Int32; height: Int32; depth: Int32; border: Int32; imageSize: Int32; data: IntPtr);
    external 'opengl32.dll' name 'glCompressedTexImage3D';
    public static procedure CompressedTexImage3D(target: TextureBindTarget; level: Int32; internalformat: InternalDataFormat; width: Int32; height: Int32; depth: Int32; border: Int32; imageSize: Int32; data: pointer);
    external 'opengl32.dll' name 'glCompressedTexImage3D';
    
    public static procedure CompressedTexSubImage1D(target: TextureBindTarget; level: Int32; xoffset: Int32; width: Int32; format: DataFormat; imageSize: Int32; data: IntPtr);
    external 'opengl32.dll' name 'glCompressedTexSubImage1D';
    public static procedure CompressedTexSubImage1D(target: TextureBindTarget; level: Int32; xoffset: Int32; width: Int32; format: DataFormat; imageSize: Int32; data: pointer);
    external 'opengl32.dll' name 'glCompressedTexSubImage1D';
    
    public static procedure CompressedTexSubImage2D(target: TextureBindTarget; level: Int32; xoffset: Int32; yoffset: Int32; width: Int32; height: Int32; format: DataFormat; imageSize: Int32; data: IntPtr);
    external 'opengl32.dll' name 'glCompressedTexSubImage2D';
    public static procedure CompressedTexSubImage2D(target: TextureBindTarget; level: Int32; xoffset: Int32; yoffset: Int32; width: Int32; height: Int32; format: DataFormat; imageSize: Int32; data: pointer);
    external 'opengl32.dll' name 'glCompressedTexSubImage2D';
    
    public static procedure CompressedTexSubImage3D(target: TextureBindTarget; level: Int32; xoffset: Int32; yoffset: Int32; zoffset: Int32; width: Int32; height: Int32; depth: Int32; format: DataFormat; imageSize: Int32; data: IntPtr);
    external 'opengl32.dll' name 'glCompressedTexSubImage3D';
    public static procedure CompressedTexSubImage3D(target: TextureBindTarget; level: Int32; xoffset: Int32; yoffset: Int32; zoffset: Int32; width: Int32; height: Int32; depth: Int32; format: DataFormat; imageSize: Int32; data: pointer);
    external 'opengl32.dll' name 'glCompressedTexSubImage3D';
    
    public static procedure CompressedTextureSubImage1D(texture: TextureBindTarget; level: Int32; xoffset: Int32; width: Int32; format: DataFormat; imageSize: Int32; data: IntPtr);
    external 'opengl32.dll' name 'glCompressedTextureSubImage1D';
    public static procedure CompressedTextureSubImage1D(texture: TextureBindTarget; level: Int32; xoffset: Int32; width: Int32; format: DataFormat; imageSize: Int32; data: pointer);
    external 'opengl32.dll' name 'glCompressedTextureSubImage1D';
    
    public static procedure CompressedTextureSubImage2D(texture: TextureBindTarget; level: Int32; xoffset: Int32; yoffset: Int32; width: Int32; height: Int32; format: DataFormat; imageSize: Int32; data: IntPtr);
    external 'opengl32.dll' name 'glCompressedTextureSubImage2D';
    public static procedure CompressedTextureSubImage2D(texture: TextureBindTarget; level: Int32; xoffset: Int32; yoffset: Int32; width: Int32; height: Int32; format: DataFormat; imageSize: Int32; data: pointer);
    external 'opengl32.dll' name 'glCompressedTextureSubImage2D';
    
    public static procedure CompressedTextureSubImage3D(texture: TextureBindTarget; level: Int32; xoffset: Int32; yoffset: Int32; zoffset: Int32; width: Int32; height: Int32; depth: Int32; format: DataFormat; imageSize: Int32; data: IntPtr);
    external 'opengl32.dll' name 'glCompressedTextureSubImage3D';
    public static procedure CompressedTextureSubImage3D(texture: TextureBindTarget; level: Int32; xoffset: Int32; yoffset: Int32; zoffset: Int32; width: Int32; height: Int32; depth: Int32; format: DataFormat; imageSize: Int32; data: pointer);
    external 'opengl32.dll' name 'glCompressedTextureSubImage3D';
    
    {$endregion 8.7 - Compressed Texture Images}
    
    {$region 8.8 - Multisample Textures}
    
    public static procedure TexImage2DMultisample(target: TextureBindTarget; samples: Int32; internalformat: InternalDataFormat; width: Int32; height: Int32; fixedsamplelocations: boolean);
    external 'opengl32.dll' name 'glTexImage2DMultisample';
    
    public static procedure TexImage3DMultisample(target: TextureBindTarget; samples: Int32; internalformat: InternalDataFormat; width: Int32; height: Int32; depth: Int32; fixedsamplelocations: boolean);
    external 'opengl32.dll' name 'glTexImage3DMultisample';
    
    {$endregion 8.8 - Multisample Textures}
    
    {$region 8.9 - Buffer Textures}
    
    public static procedure TexBufferRange(target: TextureBindTarget; internalformat: InternalDataFormat; buffer: BufferName; offset: IntPtr; size: UIntPtr);
    external 'opengl32.dll' name 'glTexBufferRange';
    
    public static procedure TextureBufferRange(texture: TextureName; internalformat: InternalDataFormat; buffer: BufferName; offset: IntPtr; size: UIntPtr);
    external 'opengl32.dll' name 'glTextureBufferRange';
    
    public static procedure TexBuffer(target: TextureBindTarget; internalformat: InternalDataFormat; buffer: BufferName);
    external 'opengl32.dll' name 'glTexBuffer';
    
    public static procedure TextureBuffer(texture: TextureName; internalformat: InternalDataFormat; buffer: BufferName);
    external 'opengl32.dll' name 'glTextureBuffer';
    
    {$endregion 8.9 - Buffer Textures}
    
    {$region 8.10 - Texture Parameters}
    //ToDo передавать можно энумы и массивы (и энумов тоже)...
    // - в конце проверить чтоб все энумы существовали
    // - и возможно ещё сделать для них перегрузки
    // - это так же касается 8.11
    
    public static procedure TexParameteri(target: TextureBindTarget; pname: TextureInfoType; param: DepthStencilMode);
    external 'opengl32.dll' name 'glTexParameteri';
    public static procedure TexParameteri(target: TextureBindTarget; pname: TextureInfoType; param: Int32);
    external 'opengl32.dll' name 'glTexParameteri';
    public static procedure TexParameteri(target: TextureBindTarget; pname: TextureInfoType; param: TextureCompareMode);
    external 'opengl32.dll' name 'glTexParameteri';
    public static procedure TexParameteri(target: TextureBindTarget; pname: TextureInfoType; param: ActivationFunc);
    external 'opengl32.dll' name 'glTexParameteri';
    public static procedure TexParameteri(target: TextureBindTarget; pname: TextureInfoType; param: PixelMagFilterMode);
    external 'opengl32.dll' name 'glTexParameteri';
    public static procedure TexParameteri(target: TextureBindTarget; pname: TextureInfoType; param: PixelMinFilterMode);
    external 'opengl32.dll' name 'glTexParameteri';
    public static procedure TexParameteri(target: TextureBindTarget; pname: TextureInfoType; param: SwizzleMode);
    external 'opengl32.dll' name 'glTexParameteri';
    public static procedure TexParameteri(target: TextureBindTarget; pname: TextureInfoType; param: PixelWrapMode);
    external 'opengl32.dll' name 'glTexParameteri';
    
    public static procedure TexParameterf(target: TextureBindTarget; pname: TextureInfoType; param: single);
    external 'opengl32.dll' name 'glTexParameterf';
    
    public static procedure TexParameteriv(target: TextureBindTarget; pname: TextureInfoType; var &params: DepthStencilMode);
    external 'opengl32.dll' name 'glTexParameteriv';
    public static procedure TexParameteriv(target: TextureBindTarget; pname: TextureInfoType; var &params: Int32);
    external 'opengl32.dll' name 'glTexParameteriv';
    public static procedure TexParameteriv(target: TextureBindTarget; pname: TextureInfoType; var &params: TextureCompareMode);
    external 'opengl32.dll' name 'glTexParameteriv';
    public static procedure TexParameteriv(target: TextureBindTarget; pname: TextureInfoType; var &params: ActivationFunc);
    external 'opengl32.dll' name 'glTexParameteriv';
    public static procedure TexParameteriv(target: TextureBindTarget; pname: TextureInfoType; var &params: PixelMagFilterMode);
    external 'opengl32.dll' name 'glTexParameteriv';
    public static procedure TexParameteriv(target: TextureBindTarget; pname: TextureInfoType; var &params: PixelMinFilterMode);
    external 'opengl32.dll' name 'glTexParameteriv';
    public static procedure TexParameteriv(target: TextureBindTarget; pname: TextureInfoType; var &params: SwizzleMode);
    external 'opengl32.dll' name 'glTexParameteriv';
    public static procedure TexParameteriv(target: TextureBindTarget; pname: TextureInfoType; var &params: PixelWrapMode);
    external 'opengl32.dll' name 'glTexParameteriv';
    public static procedure TexParameteriv(target: TextureBindTarget; pname: TextureInfoType; &params: pointer);
    external 'opengl32.dll' name 'glTexParameteriv';
    
    public static procedure TexParameterfv(target: TextureBindTarget; pname: TextureInfoType; var &params: single);
    external 'opengl32.dll' name 'glTexParameterfv';
    public static procedure TexParameterfv(target: TextureBindTarget; pname: TextureInfoType; &params: pointer);
    external 'opengl32.dll' name 'glTexParameterfv';
    
    public static procedure TexParameterIiv(target: TextureBindTarget; pname: TextureInfoType; var &params: Int32);
    external 'opengl32.dll' name 'glTexParameterIiv';
    public static procedure TexParameterIiv(target: TextureBindTarget; pname: TextureInfoType; &params: pointer);
    external 'opengl32.dll' name 'glTexParameterIiv';
    
    public static procedure TexParameterIuiv(target: TextureBindTarget; pname: TextureInfoType; var &params: DepthStencilMode);
    external 'opengl32.dll' name 'glTexParameterIuiv';
    public static procedure TexParameterIuiv(target: TextureBindTarget; pname: TextureInfoType; var &params: TextureCompareMode);
    external 'opengl32.dll' name 'glTexParameterIuiv';
    public static procedure TexParameterIuiv(target: TextureBindTarget; pname: TextureInfoType; var &params: ActivationFunc);
    external 'opengl32.dll' name 'glTexParameterIuiv';
    public static procedure TexParameterIuiv(target: TextureBindTarget; pname: TextureInfoType; var &params: PixelMagFilterMode);
    external 'opengl32.dll' name 'glTexParameterIuiv';
    public static procedure TexParameterIuiv(target: TextureBindTarget; pname: TextureInfoType; var &params: PixelMinFilterMode);
    external 'opengl32.dll' name 'glTexParameterIuiv';
    public static procedure TexParameterIuiv(target: TextureBindTarget; pname: TextureInfoType; var &params: SwizzleMode);
    external 'opengl32.dll' name 'glTexParameterIuiv';
    public static procedure TexParameterIuiv(target: TextureBindTarget; pname: TextureInfoType; var &params: PixelWrapMode);
    external 'opengl32.dll' name 'glTexParameterIuiv';
    public static procedure TexParameterIuiv(target: TextureBindTarget; pname: TextureInfoType; var &params: UInt32);
    external 'opengl32.dll' name 'glTexParameterIuiv';
    public static procedure TexParameterIuiv(target: TextureBindTarget; pname: TextureInfoType; &params: pointer);
    external 'opengl32.dll' name 'glTexParameterIuiv';
    
    public static procedure TextureParameteri(texture: TextureName; pname: TextureInfoType; param: DepthStencilMode);
    external 'opengl32.dll' name 'glTextureParameteri';
    public static procedure TextureParameteri(texture: TextureName; pname: TextureInfoType; param: Int32);
    external 'opengl32.dll' name 'glTextureParameteri';
    public static procedure TextureParameteri(texture: TextureName; pname: TextureInfoType; param: TextureCompareMode);
    external 'opengl32.dll' name 'glTextureParameteri';
    public static procedure TextureParameteri(texture: TextureName; pname: TextureInfoType; param: ActivationFunc);
    external 'opengl32.dll' name 'glTextureParameteri';
    public static procedure TextureParameteri(texture: TextureName; pname: TextureInfoType; param: PixelMagFilterMode);
    external 'opengl32.dll' name 'glTextureParameteri';
    public static procedure TextureParameteri(texture: TextureName; pname: TextureInfoType; param: PixelMinFilterMode);
    external 'opengl32.dll' name 'glTextureParameteri';
    public static procedure TextureParameteri(texture: TextureName; pname: TextureInfoType; param: SwizzleMode);
    external 'opengl32.dll' name 'glTextureParameteri';
    public static procedure TextureParameteri(texture: TextureName; pname: TextureInfoType; param: PixelWrapMode);
    external 'opengl32.dll' name 'glTextureParameteri';
    
    public static procedure TextureParameterf(texture: TextureName; pname: TextureInfoType; param: single);
    external 'opengl32.dll' name 'glTextureParameterf';
    
    public static procedure TextureParameteriv(texture: TextureName; pname: TextureInfoType; var param: DepthStencilMode);
    external 'opengl32.dll' name 'glTextureParameteriv';
    public static procedure TextureParameteriv(texture: TextureName; pname: TextureInfoType; var param: Int32);
    external 'opengl32.dll' name 'glTextureParameteriv';
    public static procedure TextureParameteriv(texture: TextureName; pname: TextureInfoType; var param: TextureCompareMode);
    external 'opengl32.dll' name 'glTextureParameteriv';
    public static procedure TextureParameteriv(texture: TextureName; pname: TextureInfoType; var param: ActivationFunc);
    external 'opengl32.dll' name 'glTextureParameteriv';
    public static procedure TextureParameteriv(texture: TextureName; pname: TextureInfoType; var param: PixelMagFilterMode);
    external 'opengl32.dll' name 'glTextureParameteriv';
    public static procedure TextureParameteriv(texture: TextureName; pname: TextureInfoType; var param: PixelMinFilterMode);
    external 'opengl32.dll' name 'glTextureParameteriv';
    public static procedure TextureParameteriv(texture: TextureName; pname: TextureInfoType; var param: SwizzleMode);
    external 'opengl32.dll' name 'glTextureParameteriv';
    public static procedure TextureParameteriv(texture: TextureName; pname: TextureInfoType; var param: PixelWrapMode);
    external 'opengl32.dll' name 'glTextureParameteriv';
    public static procedure TextureParameteriv(texture: TextureName; pname: TextureInfoType; param: pointer);
    external 'opengl32.dll' name 'glTextureParameteriv';
    
    public static procedure TextureParameterfv(texture: TextureName; pname: TextureInfoType; var param: single);
    external 'opengl32.dll' name 'glTextureParameterfv';
    public static procedure TextureParameterfv(texture: TextureName; pname: TextureInfoType; param: pointer);
    external 'opengl32.dll' name 'glTextureParameterfv';
    
    public static procedure TextureParameterIiv(texture: TextureName; pname: TextureInfoType; var &params: Int32);
    external 'opengl32.dll' name 'glTextureParameterIiv';
    public static procedure TextureParameterIiv(texture: TextureName; pname: TextureInfoType; &params: pointer);
    external 'opengl32.dll' name 'glTextureParameterIiv';
    
    public static procedure TextureParameterIuiv(texture: TextureName; pname: TextureInfoType; var &params: DepthStencilMode);
    external 'opengl32.dll' name 'glTextureParameterIuiv';
    public static procedure TextureParameterIuiv(texture: TextureName; pname: TextureInfoType; var &params: TextureCompareMode);
    external 'opengl32.dll' name 'glTextureParameterIuiv';
    public static procedure TextureParameterIuiv(texture: TextureName; pname: TextureInfoType; var &params: ActivationFunc);
    external 'opengl32.dll' name 'glTextureParameterIuiv';
    public static procedure TextureParameterIuiv(texture: TextureName; pname: TextureInfoType; var &params: PixelMagFilterMode);
    external 'opengl32.dll' name 'glTextureParameterIuiv';
    public static procedure TextureParameterIuiv(texture: TextureName; pname: TextureInfoType; var &params: PixelMinFilterMode);
    external 'opengl32.dll' name 'glTextureParameterIuiv';
    public static procedure TextureParameterIuiv(texture: TextureName; pname: TextureInfoType; var &params: SwizzleMode);
    external 'opengl32.dll' name 'glTextureParameterIuiv';
    public static procedure TextureParameterIuiv(texture: TextureName; pname: TextureInfoType; var &params: PixelWrapMode);
    external 'opengl32.dll' name 'glTextureParameterIuiv';
    public static procedure TextureParameterIuiv(texture: TextureName; pname: TextureInfoType; var &params: UInt32);
    external 'opengl32.dll' name 'glTextureParameterIuiv';
    public static procedure TextureParameterIuiv(texture: TextureName; pname: TextureInfoType; &params: pointer);
    external 'opengl32.dll' name 'glTextureParameterIuiv';
    
    {$endregion 8.10 - Texture Parameters}
    
    {$region 8.11 - Texture Queries}
    
    // 8.11.2
    
    public static procedure GetTexParameteriv(target: TextureBindTarget; pname: TextureInfoType; var &params: DepthStencilMode);
    external 'opengl32.dll' name 'glGetTexParameteriv';
    public static procedure GetTexParameteriv(target: TextureBindTarget; pname: TextureInfoType; var &params: Int32);
    external 'opengl32.dll' name 'glGetTexParameteriv';
    public static procedure GetTexParameteriv(target: TextureBindTarget; pname: TextureInfoType; var &params: TextureCompareMode);
    external 'opengl32.dll' name 'glGetTexParameteriv';
    public static procedure GetTexParameteriv(target: TextureBindTarget; pname: TextureInfoType; var &params: ActivationFunc);
    external 'opengl32.dll' name 'glGetTexParameteriv';
    public static procedure GetTexParameteriv(target: TextureBindTarget; pname: TextureInfoType; var &params: PixelMagFilterMode);
    external 'opengl32.dll' name 'glGetTexParameteriv';
    public static procedure GetTexParameteriv(target: TextureBindTarget; pname: TextureInfoType; var &params: PixelMinFilterMode);
    external 'opengl32.dll' name 'glGetTexParameteriv';
    public static procedure GetTexParameteriv(target: TextureBindTarget; pname: TextureInfoType; var &params: SwizzleMode);
    external 'opengl32.dll' name 'glGetTexParameteriv';
    public static procedure GetTexParameteriv(target: TextureBindTarget; pname: TextureInfoType; var &params: PixelWrapMode);
    external 'opengl32.dll' name 'glGetTexParameteriv';
    public static procedure GetTexParameteriv(target: TextureBindTarget; pname: TextureInfoType; &params: pointer);
    external 'opengl32.dll' name 'glGetTexParameteriv';
    
    public static procedure GetTexParameterfv(target: TextureBindTarget; pname: TextureInfoType; var &params: single);
    external 'opengl32.dll' name 'glGetTexParameterfv';
    public static procedure GetTexParameterfv(target: TextureBindTarget; pname: TextureInfoType; &params: pointer);
    external 'opengl32.dll' name 'glGetTexParameterfv';
    
    public static procedure GetTexParameterIiv(target: TextureBindTarget; pname: TextureInfoType; var &params: Int32);
    external 'opengl32.dll' name 'glGetTexParameterIiv';
    public static procedure GetTexParameterIiv(target: TextureBindTarget; pname: TextureInfoType; &params: pointer);
    external 'opengl32.dll' name 'glGetTexParameterIiv';
    
    public static procedure GetTexParameterIuiv(target: TextureBindTarget; pname: TextureInfoType; var &params: DepthStencilMode);
    external 'opengl32.dll' name 'glGetTexParameterIuiv';
    public static procedure GetTexParameterIuiv(target: TextureBindTarget; pname: TextureInfoType; var &params: TextureCompareMode);
    external 'opengl32.dll' name 'glGetTexParameterIuiv';
    public static procedure GetTexParameterIuiv(target: TextureBindTarget; pname: TextureInfoType; var &params: ActivationFunc);
    external 'opengl32.dll' name 'glGetTexParameterIuiv';
    public static procedure GetTexParameterIuiv(target: TextureBindTarget; pname: TextureInfoType; var &params: PixelMagFilterMode);
    external 'opengl32.dll' name 'glGetTexParameterIuiv';
    public static procedure GetTexParameterIuiv(target: TextureBindTarget; pname: TextureInfoType; var &params: PixelMinFilterMode);
    external 'opengl32.dll' name 'glGetTexParameterIuiv';
    public static procedure GetTexParameterIuiv(target: TextureBindTarget; pname: TextureInfoType; var &params: SwizzleMode);
    external 'opengl32.dll' name 'glGetTexParameterIuiv';
    public static procedure GetTexParameterIuiv(target: TextureBindTarget; pname: TextureInfoType; var &params: PixelWrapMode);
    external 'opengl32.dll' name 'glGetTexParameterIuiv';
    public static procedure GetTexParameterIuiv(target: TextureBindTarget; pname: TextureInfoType; var &params: UInt32);
    external 'opengl32.dll' name 'glGetTexParameterIuiv';
    public static procedure GetTexParameterIuiv(target: TextureBindTarget; pname: TextureInfoType; &params: pointer);
    external 'opengl32.dll' name 'glGetTexParameterIuiv';
    
    public static procedure GetTextureParameteriv(texture: TextureName; pname: TextureInfoType; var &params: DepthStencilMode);
    external 'opengl32.dll' name 'glGetTextureParameteriv';
    public static procedure GetTextureParameteriv(texture: TextureName; pname: TextureInfoType; var &params: Int32);
    external 'opengl32.dll' name 'glGetTextureParameteriv';
    public static procedure GetTextureParameteriv(texture: TextureName; pname: TextureInfoType; var &params: TextureCompareMode);
    external 'opengl32.dll' name 'glGetTextureParameteriv';
    public static procedure GetTextureParameteriv(texture: TextureName; pname: TextureInfoType; var &params: ActivationFunc);
    external 'opengl32.dll' name 'glGetTextureParameteriv';
    public static procedure GetTextureParameteriv(texture: TextureName; pname: TextureInfoType; var &params: PixelMagFilterMode);
    external 'opengl32.dll' name 'glGetTextureParameteriv';
    public static procedure GetTextureParameteriv(texture: TextureName; pname: TextureInfoType; var &params: PixelMinFilterMode);
    external 'opengl32.dll' name 'glGetTextureParameteriv';
    public static procedure GetTextureParameteriv(texture: TextureName; pname: TextureInfoType; var &params: SwizzleMode);
    external 'opengl32.dll' name 'glGetTextureParameteriv';
    public static procedure GetTextureParameteriv(texture: TextureName; pname: TextureInfoType; var &params: PixelWrapMode);
    external 'opengl32.dll' name 'glGetTextureParameteriv';
    public static procedure GetTextureParameteriv(texture: TextureName; pname: TextureInfoType; &params: pointer);
    external 'opengl32.dll' name 'glGetTextureParameteriv';
    
    public static procedure GetTextureParameterfv(texture: TextureName; pname: TextureInfoType; var &params: single);
    external 'opengl32.dll' name 'glGetTextureParameterfv';
    public static procedure GetTextureParameterfv(texture: TextureName; pname: TextureInfoType; &params: pointer);
    external 'opengl32.dll' name 'glGetTextureParameterfv';
    
    public static procedure GetTextureParameterIiv(texture: TextureName; pname: TextureInfoType; var &params: Int32);
    external 'opengl32.dll' name 'glGetTextureParameterIiv';
    public static procedure GetTextureParameterIiv(texture: TextureName; pname: TextureInfoType; &params: pointer);
    external 'opengl32.dll' name 'glGetTextureParameterIiv';
    
    public static procedure GetTextureParameterIuiv(texture: TextureName; pname: TextureInfoType; var &params: DepthStencilMode);
    external 'opengl32.dll' name 'glGetTextureParameterIuiv';
    public static procedure GetTextureParameterIuiv(texture: TextureName; pname: TextureInfoType; var &params: TextureCompareMode);
    external 'opengl32.dll' name 'glGetTextureParameterIuiv';
    public static procedure GetTextureParameterIuiv(texture: TextureName; pname: TextureInfoType; var &params: ActivationFunc);
    external 'opengl32.dll' name 'glGetTextureParameterIuiv';
    public static procedure GetTextureParameterIuiv(texture: TextureName; pname: TextureInfoType; var &params: PixelMagFilterMode);
    external 'opengl32.dll' name 'glGetTextureParameterIuiv';
    public static procedure GetTextureParameterIuiv(texture: TextureName; pname: TextureInfoType; var &params: PixelMinFilterMode);
    external 'opengl32.dll' name 'glGetTextureParameterIuiv';
    public static procedure GetTextureParameterIuiv(texture: TextureName; pname: TextureInfoType; var &params: SwizzleMode);
    external 'opengl32.dll' name 'glGetTextureParameterIuiv';
    public static procedure GetTextureParameterIuiv(texture: TextureName; pname: TextureInfoType; var &params: PixelWrapMode);
    external 'opengl32.dll' name 'glGetTextureParameterIuiv';
    public static procedure GetTextureParameterIuiv(texture: TextureName; pname: TextureInfoType; var &params: UInt32);
    external 'opengl32.dll' name 'glGetTextureParameterIuiv';
    public static procedure GetTextureParameterIuiv(texture: TextureName; pname: TextureInfoType; &params: pointer);
    external 'opengl32.dll' name 'glGetTextureParameterIuiv';
    
    // 8.11.3
    
    public static procedure GetTexLevelParameterfv(target: TextureBindTarget; level: Int32; pname: TextureInfoType; var &params: single);
    external 'opengl32.dll' name 'glGetTexLevelParameterfv';
    public static procedure GetTexLevelParameterfv(target: TextureBindTarget; level: Int32; pname: TextureInfoType; &params: pointer);
    external 'opengl32.dll' name 'glGetTexLevelParameterfv';
    public static procedure GetTexLevelParameterfv(target: TextureCubeSide; level: Int32; pname: TextureInfoType; var &params: single);
    external 'opengl32.dll' name 'glGetTexLevelParameterfv';
    public static procedure GetTexLevelParameterfv(target: TextureCubeSide; level: Int32; pname: TextureInfoType; &params: pointer);
    external 'opengl32.dll' name 'glGetTexLevelParameterfv';
    
    public static procedure GetTexLevelParameteriv(target: TextureBindTarget; level: Int32; pname: TextureInfoType; var &params: DataType);
    external 'opengl32.dll' name 'glGetTexLevelParameteriv';
    public static procedure GetTexLevelParameteriv(target: TextureBindTarget; level: Int32; pname: TextureInfoType; var &params: Int32);
    external 'opengl32.dll' name 'glGetTexLevelParameteriv';
    public static procedure GetTexLevelParameteriv(target: TextureBindTarget; level: Int32; pname: TextureInfoType; var &params: boolean);
    external 'opengl32.dll' name 'glGetTexLevelParameteriv';
    public static procedure GetTexLevelParameteriv(target: TextureBindTarget; level: Int32; pname: TextureInfoType; var &params: InternalDataFormat);
    external 'opengl32.dll' name 'glGetTexLevelParameteriv';
    public static procedure GetTexLevelParameteriv(target: TextureBindTarget; level: Int32; pname: TextureInfoType; &params: pointer);
    external 'opengl32.dll' name 'glGetTexLevelParameteriv';
    public static procedure GetTexLevelParameteriv(target: TextureCubeSide; level: Int32; pname: TextureInfoType; var &params: DataType);
    external 'opengl32.dll' name 'glGetTexLevelParameteriv';
    public static procedure GetTexLevelParameteriv(target: TextureCubeSide; level: Int32; pname: TextureInfoType; var &params: Int32);
    external 'opengl32.dll' name 'glGetTexLevelParameteriv';
    public static procedure GetTexLevelParameteriv(target: TextureCubeSide; level: Int32; pname: TextureInfoType; var &params: boolean);
    external 'opengl32.dll' name 'glGetTexLevelParameteriv';
    public static procedure GetTexLevelParameteriv(target: TextureCubeSide; level: Int32; pname: TextureInfoType; var &params: InternalDataFormat);
    external 'opengl32.dll' name 'glGetTexLevelParameteriv';
    public static procedure GetTexLevelParameteriv(target: TextureCubeSide; level: Int32; pname: TextureInfoType; &params: pointer);
    external 'opengl32.dll' name 'glGetTexLevelParameteriv';
    
    public static procedure GetTextureLevelParameterfv(texture: TextureName; level: Int32; pname: TextureInfoType; var &params: single);
    external 'opengl32.dll' name 'glGetTextureLevelParameterfv';
    public static procedure GetTextureLevelParameterfv(texture: TextureName; level: Int32; pname: TextureInfoType; &params: pointer);
    external 'opengl32.dll' name 'glGetTextureLevelParameterfv';
    
    public static procedure GetTextureLevelParameteriv(texture: TextureName; level: Int32; pname: TextureInfoType; var &params: DataType);
    external 'opengl32.dll' name 'glGetTextureLevelParameteriv';
    public static procedure GetTextureLevelParameteriv(texture: TextureName; level: Int32; pname: TextureInfoType; var &params: Int32);
    external 'opengl32.dll' name 'glGetTextureLevelParameteriv';
    public static procedure GetTextureLevelParameteriv(texture: TextureName; level: Int32; pname: TextureInfoType; var &params: boolean);
    external 'opengl32.dll' name 'glGetTextureLevelParameteriv';
    public static procedure GetTextureLevelParameteriv(texture: TextureName; level: Int32; pname: TextureInfoType; var &params: InternalDataFormat);
    external 'opengl32.dll' name 'glGetTextureLevelParameteriv';
    public static procedure GetTextureLevelParameteriv(texture: TextureName; level: Int32; pname: TextureInfoType; &params: pointer);
    external 'opengl32.dll' name 'glGetTextureLevelParameteriv';
    
    // 8.11.4
    
    public static procedure GetTexImage(target: TextureBindTarget; level: Int32; format: DataFormat; &type: DataType; pixels: IntPtr);
    external 'opengl32.dll' name 'glGetTexImage';
    public static procedure GetTexImage(target: TextureBindTarget; level: Int32; format: DataFormat; &type: DataType; pixels: pointer);
    external 'opengl32.dll' name 'glGetTexImage';
    
    public static procedure GetTextureImage(texture: TextureName; level: Int32; format: DataFormat; &type: DataType; bufSize: Int32; pixels: IntPtr);
    external 'opengl32.dll' name 'glGetTextureImage';
    public static procedure GetTextureImage(texture: TextureName; level: Int32; format: DataFormat; &type: DataType; bufSize: Int32; pixels: pointer);
    external 'opengl32.dll' name 'glGetTextureImage';
    
    public static procedure GetnTexImage(target: TextureBindTarget; level: Int32; format: DataFormat; &type: DataType; bufSize: Int32; pixels: IntPtr);
    external 'opengl32.dll' name 'glGetnTexImage';
    public static procedure GetnTexImage(target: TextureBindTarget; level: Int32; format: DataFormat; &type: DataType; bufSize: Int32; pixels: pointer);
    external 'opengl32.dll' name 'glGetnTexImage';
    
    public static procedure GetTextureSubImage(texture: TextureName; level: Int32; xoffset: Int32; yoffset: Int32; zoffset: Int32; width: Int32; height: Int32; depth: Int32; format: DataFormat; &type: DataType; bufSize: Int32; pixels: IntPtr);
    external 'opengl32.dll' name 'glGetTextureSubImage';
    public static procedure GetTextureSubImage(texture: TextureName; level: Int32; xoffset: Int32; yoffset: Int32; zoffset: Int32; width: Int32; height: Int32; depth: Int32; format: DataFormat; &type: DataType; bufSize: Int32; pixels: pointer);
    external 'opengl32.dll' name 'glGetTextureSubImage';
    
    public static procedure GetCompressedTexImage(target: TextureBindTarget; level: Int32; pixels: IntPtr);
    external 'opengl32.dll' name 'glGetCompressedTexImage';
    public static procedure GetCompressedTexImage(target: TextureBindTarget; level: Int32; pixels: pointer);
    external 'opengl32.dll' name 'glGetCompressedTexImage';
    
    public static procedure GetCompressedTextureImage(texture: TextureName; level: Int32; bufSize: Int32; pixels: IntPtr);
    external 'opengl32.dll' name 'glGetCompressedTextureImage';
    public static procedure GetCompressedTextureImage(texture: TextureName; level: Int32; bufSize: Int32; pixels: pointer);
    external 'opengl32.dll' name 'glGetCompressedTextureImage';
    
    public static procedure GetnCompressedTexImage(target: TextureBindTarget; level: Int32; bufSize: Int32; pixels: IntPtr);
    external 'opengl32.dll' name 'glGetnCompressedTexImage';
    public static procedure GetnCompressedTexImage(target: TextureBindTarget; level: Int32; bufSize: Int32; pixels: pointer);
    external 'opengl32.dll' name 'glGetnCompressedTexImage';
    
    public static procedure GetCompressedTextureSubImage(texture: TextureName; level: Int32; xoffset: Int32; yoffset: Int32; zoffset: Int32; width: Int32; height: Int32; depth: Int32; bufSize: Int32; pixels: IntPtr);
    external 'opengl32.dll' name 'glGetCompressedTextureSubImage';
    public static procedure GetCompressedTextureSubImage(texture: TextureName; level: Int32; xoffset: Int32; yoffset: Int32; zoffset: Int32; width: Int32; height: Int32; depth: Int32; bufSize: Int32; pixels: pointer);
    external 'opengl32.dll' name 'glGetCompressedTextureSubImage';
    
    {$endregion 8.11 - Texture Queries}
    
    {$region 8.14 - Texture Minification}
    
    // 8.14.4
    
    public static procedure GenerateMipmap(target: TextureBindTarget);
    external 'opengl32.dll' name 'glGenerateMipmap';
    
    public static procedure GenerateTextureMipmap(texture: TextureName);
    external 'opengl32.dll' name 'glGenerateTextureMipmap';
    
    {$endregion 8.14 - Texture Minification}
    
    {$region 8.18 - Texture Views}
    
    public static procedure TextureView(texture: TextureName; target: TextureBindTarget; origtexture: TextureName; internalformat: InternalDataFormat; minlevel: UInt32; numlevels: UInt32; minlayer: UInt32; numlayers: UInt32);
    external 'opengl32.dll' name 'glTextureView';
    
    {$endregion 8.18 - Texture Views}
    
    {$region 8.19 - Immutable-Format Texture Images}
    
    public static procedure TexStorage1D(target: TextureBindTarget; levels: Int32; internalformat: InternalDataFormat; width: Int32);
    external 'opengl32.dll' name 'glTexStorage1D';
    
    public static procedure TextureStorage1D(texture: TextureName; levels: Int32; internalformat: InternalDataFormat; width: Int32);
    external 'opengl32.dll' name 'glTextureStorage1D';
    
    public static procedure TexStorage2D(target: TextureBindTarget; levels: Int32; internalformat: InternalDataFormat; width: Int32; height: Int32);
    external 'opengl32.dll' name 'glTexStorage2D';
    
    public static procedure TextureStorage2D(texture: TextureName; levels: Int32; internalformat: InternalDataFormat; width: Int32; height: Int32);
    external 'opengl32.dll' name 'glTextureStorage2D';
    
    public static procedure TexStorage3D(target: TextureBindTarget; levels: Int32; internalformat: InternalDataFormat; width: Int32; height: Int32; depth: Int32);
    external 'opengl32.dll' name 'glTexStorage3D';
    
    public static procedure TextureStorage3D(texture: TextureName; levels: Int32; internalformat: InternalDataFormat; width: Int32; height: Int32; depth: Int32);
    external 'opengl32.dll' name 'glTextureStorage3D';
    
    public static procedure TexStorage2DMultisample(target: TextureBindTarget; samples: Int32; internalformat: InternalDataFormat; width: Int32; height: Int32; fixedsamplelocations: boolean);
    external 'opengl32.dll' name 'glTexStorage2DMultisample';
    
    public static procedure TextureStorage2DMultisample(texture: TextureName; samples: Int32; internalformat: InternalDataFormat; width: Int32; height: Int32; fixedsamplelocations: boolean);
    external 'opengl32.dll' name 'glTextureStorage2DMultisample';
    
    public static procedure TexStorage3DMultisample(target: TextureBindTarget; samples: Int32; internalformat: InternalDataFormat; width: Int32; height: Int32; depth: Int32; fixedsamplelocations: boolean);
    external 'opengl32.dll' name 'glTexStorage3DMultisample';
    
    public static procedure TextureStorage3DMultisample(texture: TextureName; samples: Int32; internalformat: InternalDataFormat; width: Int32; height: Int32; depth: Int32; fixedsamplelocations: boolean);
    external 'opengl32.dll' name 'glTextureStorage3DMultisample';
    
    {$endregion 8.19 - Immutable-Format Texture Images}
    
    {$region 8.20 - Invalidating Texture Image Data}
    
    public static procedure InvalidateTexSubImage(texture: TextureName; level: Int32; xoffset: Int32; yoffset: Int32; zoffset: Int32; width: Int32; height: Int32; depth: Int32);
    external 'opengl32.dll' name 'glInvalidateTexSubImage';
    
    public static procedure InvalidateTexImage(texture: TextureName; level: Int32);
    external 'opengl32.dll' name 'glInvalidateTexImage';
    
    {$endregion 8.20 - Invalidating Texture Image Data}
    
    {$region 8.21 - Clearing Texture Image Data}
    
    public static procedure ClearTexSubImage(texture: TextureName; level: Int32; xoffset: Int32; yoffset: Int32; zoffset: Int32; width: Int32; height: Int32; depth: Int32; format: DataFormat; &type: DataType; data: IntPtr);
    external 'opengl32.dll' name 'glClearTexSubImage';
    public static procedure ClearTexSubImage(texture: TextureName; level: Int32; xoffset: Int32; yoffset: Int32; zoffset: Int32; width: Int32; height: Int32; depth: Int32; format: DataFormat; &type: DataType; data: pointer);
    external 'opengl32.dll' name 'glClearTexSubImage';
    
    public static procedure ClearTexImage(texture: TextureName; level: Int32; format: DataFormat; &type: DataType; data: IntPtr);
    external 'opengl32.dll' name 'glClearTexImage';
    public static procedure ClearTexImage(texture: TextureName; level: Int32; format: DataFormat; &type: DataType; data: pointer);
    external 'opengl32.dll' name 'glClearTexImage';
    
    {$endregion 8.21 - Clearing Texture Image Data}
    
    {$region 8.26 - Texture Image Loads and Stores}
    
    public static procedure BindImageTexture(&unit: TextureUnitId; texture: TextureName; level: Int32; layered: boolean; layer: Int32; access: AccessType; format: DataFormat);
    external 'opengl32.dll' name 'glBindImageTexture';
    
    public static procedure BindImageTextures(first: UInt32; count: Int32; [MarshalAs(UnmanagedType.LPArray)] textures: array of TextureName);
    external 'opengl32.dll' name 'glBindImageTextures';
    public static procedure BindImageTextures(first: UInt32; count: Int32; var textures: TextureName);
    external 'opengl32.dll' name 'glBindImageTextures';
    public static procedure BindImageTextures(first: UInt32; count: Int32; textures: pointer);
    external 'opengl32.dll' name 'glBindImageTextures';
    
    {$endregion 8.26 - Texture Image Loads and Stores}
    
    {$endregion 8.0 - Textures and Samplers}
    
    {$region 9.0 - Framebuffers and Framebuffer Objects}
    
    {$region 9.2 - Binding and Managing Framebuffer Objects}
    
    public static procedure BindFramebuffer(target: FramebufferBindTarget; framebuffer: FramebufferName);
    external 'opengl32.dll' name 'glBindFramebuffer';
    
    public static procedure CreateFramebuffers(n: Int32; [MarshalAs(UnmanagedType.LPArray)] framebuffers: array of FramebufferName);
    external 'opengl32.dll' name 'glCreateFramebuffers';
    public static procedure CreateFramebuffers(n: Int32; var framebuffers: FramebufferName);
    external 'opengl32.dll' name 'glCreateFramebuffers';
    public static procedure CreateFramebuffers(n: Int32; framebuffers: pointer);
    external 'opengl32.dll' name 'glCreateFramebuffers';
    
    public static procedure GenFramebuffers(n: Int32; [MarshalAs(UnmanagedType.LPArray)] framebuffers: array of FramebufferName);
    external 'opengl32.dll' name 'glGenFramebuffers';
    public static procedure GenFramebuffers(n: Int32; var framebuffers: FramebufferName);
    external 'opengl32.dll' name 'glGenFramebuffers';
    public static procedure GenFramebuffers(n: Int32; framebuffers: pointer);
    external 'opengl32.dll' name 'glGenFramebuffers';
    
    public static procedure DeleteFramebuffers(n: Int32; [MarshalAs(UnmanagedType.LPArray)] framebuffers: array of FramebufferName);
    external 'opengl32.dll' name 'glDeleteFramebuffers';
    public static procedure DeleteFramebuffers(n: Int32; var framebuffers: FramebufferName);
    external 'opengl32.dll' name 'glDeleteFramebuffers';
    public static procedure DeleteFramebuffers(n: Int32; framebuffers: pointer);
    external 'opengl32.dll' name 'glDeleteFramebuffers';
    
    public static function IsFramebuffer(framebuffer: FramebufferName): boolean;
    external 'opengl32.dll' name 'glIsFramebuffer';
    
    // 9.2.1
    
    public static procedure FramebufferParameteri(target: FramebufferBindTarget; pname: FramebufferInfoType; param: Int32);
    external 'opengl32.dll' name 'glFramebufferParameteri';
    
    public static procedure NamedFramebufferParameteri(framebuffer: FramebufferName; pname: FramebufferInfoType; param: Int32);
    external 'opengl32.dll' name 'glNamedFramebufferParameteri';
    
    // 9.2.3
    
    public static procedure GetFramebufferParameteriv(target: FramebufferBindTarget; pname: FramebufferInfoType; var &params: Int32);
    external 'opengl32.dll' name 'glGetFramebufferParameteriv';
    public static procedure GetFramebufferParameteriv(target: FramebufferBindTarget; pname: FramebufferInfoType; var &params: boolean);
    external 'opengl32.dll' name 'glGetFramebufferParameteriv';
    public static procedure GetFramebufferParameteriv(target: FramebufferBindTarget; pname: FramebufferInfoType; &params: pointer);
    external 'opengl32.dll' name 'glGetFramebufferParameteriv';
    
    public static procedure GetNamedFramebufferParameteriv(framebuffer: FramebufferName; pname: FramebufferInfoType; var param: Int32);
    external 'opengl32.dll' name 'glGetNamedFramebufferParameteriv';
    public static procedure GetNamedFramebufferParameteriv(framebuffer: FramebufferName; pname: FramebufferInfoType; var param: boolean);
    external 'opengl32.dll' name 'glGetNamedFramebufferParameteriv';
    public static procedure GetNamedFramebufferParameteriv(framebuffer: FramebufferName; pname: FramebufferInfoType; param: pointer);
    external 'opengl32.dll' name 'glGetNamedFramebufferParameteriv';
    
    public static procedure GetFramebufferAttachmentParameteriv(target: FramebufferBindTarget; attachment: FramebufferAttachmentPoint; pname: FramebufferAttachmentInfoType; var &params: FramebufferAttachmentObjectType);
    external 'opengl32.dll' name 'glGetFramebufferAttachmentParameteriv';
    public static procedure GetFramebufferAttachmentParameteriv(target: FramebufferBindTarget; attachment: FramebufferAttachmentPoint; pname: FramebufferAttachmentInfoType; var &params: UInt32);
    external 'opengl32.dll' name 'glGetFramebufferAttachmentParameteriv';
    public static procedure GetFramebufferAttachmentParameteriv(target: FramebufferBindTarget; attachment: FramebufferAttachmentPoint; pname: FramebufferAttachmentInfoType; var &params: DataType);
    external 'opengl32.dll' name 'glGetFramebufferAttachmentParameteriv';
    public static procedure GetFramebufferAttachmentParameteriv(target: FramebufferBindTarget; attachment: FramebufferAttachmentPoint; pname: FramebufferAttachmentInfoType; var &params: ColorEncodingMode);
    external 'opengl32.dll' name 'glGetFramebufferAttachmentParameteriv';
    public static procedure GetFramebufferAttachmentParameteriv(target: FramebufferBindTarget; attachment: FramebufferAttachmentPoint; pname: FramebufferAttachmentInfoType; var &params: Int32);
    external 'opengl32.dll' name 'glGetFramebufferAttachmentParameteriv';
    public static procedure GetFramebufferAttachmentParameteriv(target: FramebufferBindTarget; attachment: FramebufferAttachmentPoint; pname: FramebufferAttachmentInfoType; &params: pointer);
    external 'opengl32.dll' name 'glGetFramebufferAttachmentParameteriv';
    
    public static procedure GetNamedFramebufferAttachmentParameteriv(framebuffer: FramebufferName; attachment: FramebufferAttachmentPoint; pname: FramebufferAttachmentInfoType; var &params: FramebufferAttachmentObjectType);
    external 'opengl32.dll' name 'glGetNamedFramebufferAttachmentParameteriv';
    public static procedure GetNamedFramebufferAttachmentParameteriv(framebuffer: FramebufferName; attachment: FramebufferAttachmentPoint; pname: FramebufferAttachmentInfoType; var &params: UInt32);
    external 'opengl32.dll' name 'glGetNamedFramebufferAttachmentParameteriv';
    public static procedure GetNamedFramebufferAttachmentParameteriv(framebuffer: FramebufferName; attachment: FramebufferAttachmentPoint; pname: FramebufferAttachmentInfoType; var &params: DataType);
    external 'opengl32.dll' name 'glGetNamedFramebufferAttachmentParameteriv';
    public static procedure GetNamedFramebufferAttachmentParameteriv(framebuffer: FramebufferName; attachment: FramebufferAttachmentPoint; pname: FramebufferAttachmentInfoType; var &params: ColorEncodingMode);
    external 'opengl32.dll' name 'glGetNamedFramebufferAttachmentParameteriv';
    public static procedure GetNamedFramebufferAttachmentParameteriv(framebuffer: FramebufferName; attachment: FramebufferAttachmentPoint; pname: FramebufferAttachmentInfoType; var &params: Int32);
    external 'opengl32.dll' name 'glGetNamedFramebufferAttachmentParameteriv';
    public static procedure GetNamedFramebufferAttachmentParameteriv(framebuffer: FramebufferName; attachment: FramebufferAttachmentPoint; pname: FramebufferAttachmentInfoType; &params: pointer);
    external 'opengl32.dll' name 'glGetNamedFramebufferAttachmentParameteriv';
    
    // 9.2.4
    
    public static procedure BindRenderbuffer(target: RenderbufferBindTarget; renderbuffer: RenderbufferName);
    external 'opengl32.dll' name 'glBindRenderbuffer';
    
    public static procedure CreateRenderbuffers(n: Int32; [MarshalAs(UnmanagedType.LPArray)] renderbuffers: array of RenderbufferName);
    external 'opengl32.dll' name 'glCreateRenderbuffers';
    public static procedure CreateRenderbuffers(n: Int32; var renderbuffers: RenderbufferName);
    external 'opengl32.dll' name 'glCreateRenderbuffers';
    public static procedure CreateRenderbuffers(n: Int32; renderbuffers: pointer);
    external 'opengl32.dll' name 'glCreateRenderbuffers';
    
    public static procedure GenRenderbuffers(n: Int32; [MarshalAs(UnmanagedType.LPArray)] renderbuffers: array of RenderbufferName);
    external 'opengl32.dll' name 'glGenRenderbuffers';
    public static procedure GenRenderbuffers(n: Int32; var renderbuffers: RenderbufferName);
    external 'opengl32.dll' name 'glGenRenderbuffers';
    public static procedure GenRenderbuffers(n: Int32; renderbuffers: pointer);
    external 'opengl32.dll' name 'glGenRenderbuffers';
    
    public static procedure DeleteRenderbuffers(n: Int32; [MarshalAs(UnmanagedType.LPArray)] renderbuffers: array of RenderbufferName);
    external 'opengl32.dll' name 'glDeleteRenderbuffers';
    public static procedure DeleteRenderbuffers(n: Int32; var renderbuffers: RenderbufferName);
    external 'opengl32.dll' name 'glDeleteRenderbuffers';
    public static procedure DeleteRenderbuffers(n: Int32; renderbuffers: pointer);
    external 'opengl32.dll' name 'glDeleteRenderbuffers';
    
    public static function IsRenderbuffer(renderbuffer: RenderbufferName): boolean;
    external 'opengl32.dll' name 'glIsRenderbuffer';
    
    public static procedure RenderbufferStorageMultisample(target: RenderbufferBindTarget; samples: Int32; internalformat: InternalDataFormat; width: Int32; height: Int32);
    external 'opengl32.dll' name 'glRenderbufferStorageMultisample';
    
    public static procedure NamedRenderbufferStorageMultisample(renderbuffer: RenderbufferName; samples: Int32; internalformat: InternalDataFormat; width: Int32; height: Int32);
    external 'opengl32.dll' name 'glNamedRenderbufferStorageMultisample';
    
    public static procedure RenderbufferStorage(target: RenderbufferBindTarget; internalformat: InternalDataFormat; width: Int32; height: Int32);
    external 'opengl32.dll' name 'glRenderbufferStorage';
    
    public static procedure NamedRenderbufferStorage(renderbuffer: RenderbufferName; internalformat: InternalDataFormat; width: Int32; height: Int32);
    external 'opengl32.dll' name 'glNamedRenderbufferStorage';
    
    // 9.2.6
    
    public static procedure GetRenderbufferParameteriv(target: RenderbufferBindTarget; pname: RenderbufferInfoType; var &params: InternalDataFormat);
    external 'opengl32.dll' name 'glGetRenderbufferParameteriv';
    public static procedure GetRenderbufferParameteriv(target: RenderbufferBindTarget; pname: RenderbufferInfoType; var &params: Int32);
    external 'opengl32.dll' name 'glGetRenderbufferParameteriv';
    public static procedure GetRenderbufferParameteriv(target: RenderbufferBindTarget; pname: RenderbufferInfoType; &params: pointer);
    external 'opengl32.dll' name 'glGetRenderbufferParameteriv';
    
    public static procedure GetNamedRenderbufferParameteriv(renderbuffer: RenderbufferName; pname: RenderbufferInfoType; var &params: InternalDataFormat);
    external 'opengl32.dll' name 'glGetNamedRenderbufferParameteriv';
    public static procedure GetNamedRenderbufferParameteriv(renderbuffer: RenderbufferName; pname: RenderbufferInfoType; var &params: Int32);
    external 'opengl32.dll' name 'glGetNamedRenderbufferParameteriv';
    public static procedure GetNamedRenderbufferParameteriv(renderbuffer: RenderbufferName; pname: RenderbufferInfoType; &params: pointer);
    external 'opengl32.dll' name 'glGetNamedRenderbufferParameteriv';
    
    // 9.2.7
    
    public static procedure FramebufferRenderbuffer(target: FramebufferBindTarget; attachment: FramebufferAttachmentPoint; renderbuffertarget: RenderbufferBindTarget; renderbuffer: RenderbufferName);
    external 'opengl32.dll' name 'glFramebufferRenderbuffer';
    
    public static procedure NamedFramebufferRenderbuffer(framebuffer: FramebufferName; attachment: FramebufferAttachmentPoint; renderbuffertarget: RenderbufferBindTarget; renderbuffer: RenderbufferName);
    external 'opengl32.dll' name 'glNamedFramebufferRenderbuffer';
    
    // 9.2.8
    
    public static procedure FramebufferTexture(target: FramebufferBindTarget; attachment: FramebufferAttachmentPoint; texture: TextureName; level: Int32);
    external 'opengl32.dll' name 'glFramebufferTexture';
    
    public static procedure NamedFramebufferTexture(framebuffer: FramebufferName; attachment: FramebufferAttachmentPoint; texture: TextureName; level: Int32);
    external 'opengl32.dll' name 'glNamedFramebufferTexture';
    
    public static procedure FramebufferTexture1D(target: FramebufferBindTarget; attachment: FramebufferAttachmentPoint; textarget: TextureBindTarget; texture: TextureName; level: Int32);
    external 'opengl32.dll' name 'glFramebufferTexture1D';
    public static procedure FramebufferTexture1D(target: FramebufferBindTarget; attachment: FramebufferAttachmentPoint; textarget: TextureCubeSide; texture: TextureName; level: Int32);
    external 'opengl32.dll' name 'glFramebufferTexture1D';
    
    public static procedure FramebufferTexture2D(target: FramebufferBindTarget; attachment: FramebufferAttachmentPoint; textarget: TextureBindTarget; texture: TextureName; level: Int32);
    external 'opengl32.dll' name 'glFramebufferTexture2D';
    public static procedure FramebufferTexture2D(target: FramebufferBindTarget; attachment: FramebufferAttachmentPoint; textarget: TextureCubeSide; texture: TextureName; level: Int32);
    external 'opengl32.dll' name 'glFramebufferTexture2D';
    
    public static procedure FramebufferTexture3D(target: FramebufferBindTarget; attachment: FramebufferAttachmentPoint; textarget: TextureBindTarget; texture: TextureName; level: Int32; zoffset: Int32);
    external 'opengl32.dll' name 'glFramebufferTexture3D';
    public static procedure FramebufferTexture3D(target: FramebufferBindTarget; attachment: FramebufferAttachmentPoint; textarget: TextureCubeSide; texture: TextureName; level: Int32; zoffset: Int32);
    external 'opengl32.dll' name 'glFramebufferTexture3D';
    
    public static procedure FramebufferTextureLayer(target: FramebufferBindTarget; attachment: FramebufferAttachmentPoint; texture: TextureName; level: Int32; layer: Int32);
    external 'opengl32.dll' name 'glFramebufferTextureLayer';
    
    public static procedure NamedFramebufferTextureLayer(framebuffer: FramebufferName; attachment: FramebufferAttachmentPoint; texture: TextureName; level: Int32; layer: Int32);
    external 'opengl32.dll' name 'glNamedFramebufferTextureLayer';
    
    {$endregion 9.2 - Binding and Managing Framebuffer Objects}
    
    {$region 9.3 - Feedback Loops Between Textures and the Framebuffer}
    
    // 9.3.1
    
    public static procedure TextureBarrier;
    external 'opengl32.dll' name 'glTextureBarrier';
    
    {$endregion 9.3 - Feedback Loops Between Textures and the Framebuffer}
    
    {$region 9.4 - Framebuffer Completeness}
    
    // 9.4.2
    
    public static function CheckFramebufferStatus(target: FramebufferBindTarget): ErrorCode;
    external 'opengl32.dll' name 'glCheckFramebufferStatus';
    
    public static function CheckNamedFramebufferStatus(framebuffer: FramebufferName; target: FramebufferBindTarget): ErrorCode;
    external 'opengl32.dll' name 'glCheckNamedFramebufferStatus';
    
    {$endregion 9.4 - Framebuffer Completeness}
    
    {$endregion 9.0 - Framebuffers and Framebuffer Objects}
    
    {$region 10.0 - Vertex Specification and Drawing Commands}
    
    {$region 10.1 - Primitive Types}
    
    // 10.1.15
    
    public static procedure PatchParameteri(pname: PatchMode; value: Int32);
    external 'opengl32.dll' name 'glPatchParameteri';
    
    {$endregion 10.1 - Primitive Types}
    
    {$region 10.2 - Current Vertex Attribute Values}
    
    // 10.2.1
    
    {$region VertexAttrib[1,2,3,4][s,f,d]}
    
    public static procedure VertexAttrib1s(index: UInt32; x: Int16);
    external 'opengl32.dll' name 'glVertexAttrib1s';
    
    public static procedure VertexAttrib2s(index: UInt32; x: Int16; y: Int16);
    external 'opengl32.dll' name 'glVertexAttrib2s';
    
    public static procedure VertexAttrib3s(index: UInt32; x: Int16; y: Int16; z: Int16);
    external 'opengl32.dll' name 'glVertexAttrib3s';
    
    public static procedure VertexAttrib4s(index: UInt32; x: Int16; y: Int16; z: Int16; w: Int16);
    external 'opengl32.dll' name 'glVertexAttrib4s';
    
    public static procedure VertexAttrib1f(index: UInt32; x: single);
    external 'opengl32.dll' name 'glVertexAttrib1f';
    
    public static procedure VertexAttrib2f(index: UInt32; x: single; y: single);
    external 'opengl32.dll' name 'glVertexAttrib2f';
    
    public static procedure VertexAttrib3f(index: UInt32; x: single; y: single; z: single);
    external 'opengl32.dll' name 'glVertexAttrib3f';
    
    public static procedure VertexAttrib4f(index: UInt32; x: single; y: single; z: single; w: single);
    external 'opengl32.dll' name 'glVertexAttrib4f';
    
    public static procedure VertexAttrib1d(index: UInt32; x: double);
    external 'opengl32.dll' name 'glVertexAttrib1d';
    
    public static procedure VertexAttrib2d(index: UInt32; x: double; y: double);
    external 'opengl32.dll' name 'glVertexAttrib2d';
    
    public static procedure VertexAttrib3d(index: UInt32; x: double; y: double; z: double);
    external 'opengl32.dll' name 'glVertexAttrib3d';
    
    public static procedure VertexAttrib4d(index: UInt32; x: double; y: double; z: double; w: double);
    external 'opengl32.dll' name 'glVertexAttrib4d';
    
    {$endregion VertexAttrib[1,2,3,4][s,f,d]}
    
    {$region VertexAttrib[1,2,3][s,f,d]v}
    
    public static procedure VertexAttrib1sv(index: UInt32; [MarshalAs(UnmanagedType.LPArray)] v: array of Int16);
    external 'opengl32.dll' name 'glVertexAttrib1sv';
    public static procedure VertexAttrib1sv(index: UInt32; var v: Int16);
    external 'opengl32.dll' name 'glVertexAttrib1sv';
    public static procedure VertexAttrib1sv(index: UInt32; var v: Vec1s);
    external 'opengl32.dll' name 'glVertexAttrib1sv';
    public static procedure VertexAttrib1sv(index: UInt32; v: pointer);
    external 'opengl32.dll' name 'glVertexAttrib1sv';
    
    public static procedure VertexAttrib2sv(index: UInt32; [MarshalAs(UnmanagedType.LPArray)] v: array of Int16);
    external 'opengl32.dll' name 'glVertexAttrib2sv';
    public static procedure VertexAttrib2sv(index: UInt32; var v: Int16);
    external 'opengl32.dll' name 'glVertexAttrib2sv';
    public static procedure VertexAttrib2sv(index: UInt32; var v: Vec2s);
    external 'opengl32.dll' name 'glVertexAttrib2sv';
    public static procedure VertexAttrib2sv(index: UInt32; v: pointer);
    external 'opengl32.dll' name 'glVertexAttrib2sv';
    
    public static procedure VertexAttrib3sv(index: UInt32; [MarshalAs(UnmanagedType.LPArray)] v: array of Int16);
    external 'opengl32.dll' name 'glVertexAttrib3sv';
    public static procedure VertexAttrib3sv(index: UInt32; var v: Int16);
    external 'opengl32.dll' name 'glVertexAttrib3sv';
    public static procedure VertexAttrib3sv(index: UInt32; var v: Vec3s);
    external 'opengl32.dll' name 'glVertexAttrib3sv';
    public static procedure VertexAttrib3sv(index: UInt32; v: pointer);
    external 'opengl32.dll' name 'glVertexAttrib3sv';
    
    public static procedure VertexAttrib1fv(index: UInt32; [MarshalAs(UnmanagedType.LPArray)] v: array of single);
    external 'opengl32.dll' name 'glVertexAttrib1fv';
    public static procedure VertexAttrib1fv(index: UInt32; var v: single);
    external 'opengl32.dll' name 'glVertexAttrib1fv';
    public static procedure VertexAttrib1fv(index: UInt32; var v: Vec1f);
    external 'opengl32.dll' name 'glVertexAttrib1fv';
    public static procedure VertexAttrib1fv(index: UInt32; v: pointer);
    external 'opengl32.dll' name 'glVertexAttrib1fv';
    
    public static procedure VertexAttrib2fv(index: UInt32; [MarshalAs(UnmanagedType.LPArray)] v: array of single);
    external 'opengl32.dll' name 'glVertexAttrib2fv';
    public static procedure VertexAttrib2fv(index: UInt32; var v: single);
    external 'opengl32.dll' name 'glVertexAttrib2fv';
    public static procedure VertexAttrib2fv(index: UInt32; var v: Vec2f);
    external 'opengl32.dll' name 'glVertexAttrib2fv';
    public static procedure VertexAttrib2fv(index: UInt32; v: pointer);
    external 'opengl32.dll' name 'glVertexAttrib2fv';
    
    public static procedure VertexAttrib3fv(index: UInt32; [MarshalAs(UnmanagedType.LPArray)] v: array of single);
    external 'opengl32.dll' name 'glVertexAttrib3fv';
    public static procedure VertexAttrib3fv(index: UInt32; var v: single);
    external 'opengl32.dll' name 'glVertexAttrib3fv';
    public static procedure VertexAttrib3fv(index: UInt32; var v: Vec3f);
    external 'opengl32.dll' name 'glVertexAttrib3fv';
    public static procedure VertexAttrib3fv(index: UInt32; v: pointer);
    external 'opengl32.dll' name 'glVertexAttrib3fv';
    
    public static procedure VertexAttrib1dv(index: UInt32; [MarshalAs(UnmanagedType.LPArray)] v: array of double);
    external 'opengl32.dll' name 'glVertexAttrib1dv';
    public static procedure VertexAttrib1dv(index: UInt32; var v: double);
    external 'opengl32.dll' name 'glVertexAttrib1dv';
    public static procedure VertexAttrib1dv(index: UInt32; var v: Vec1d);
    external 'opengl32.dll' name 'glVertexAttrib1dv';
    public static procedure VertexAttrib1dv(index: UInt32; v: pointer);
    external 'opengl32.dll' name 'glVertexAttrib1dv';
    
    public static procedure VertexAttrib2dv(index: UInt32; [MarshalAs(UnmanagedType.LPArray)] v: array of double);
    external 'opengl32.dll' name 'glVertexAttrib2dv';
    public static procedure VertexAttrib2dv(index: UInt32; var v: double);
    external 'opengl32.dll' name 'glVertexAttrib2dv';
    public static procedure VertexAttrib2dv(index: UInt32; var v: Vec2d);
    external 'opengl32.dll' name 'glVertexAttrib2dv';
    public static procedure VertexAttrib2dv(index: UInt32; v: pointer);
    external 'opengl32.dll' name 'glVertexAttrib2dv';
    
    public static procedure VertexAttrib3dv(index: UInt32; [MarshalAs(UnmanagedType.LPArray)] v: array of double);
    external 'opengl32.dll' name 'glVertexAttrib3dv';
    public static procedure VertexAttrib3dv(index: UInt32; var v: double);
    external 'opengl32.dll' name 'glVertexAttrib3dv';
    public static procedure VertexAttrib3dv(index: UInt32; var v: Vec3d);
    external 'opengl32.dll' name 'glVertexAttrib3dv';
    public static procedure VertexAttrib3dv(index: UInt32; v: pointer);
    external 'opengl32.dll' name 'glVertexAttrib3dv';
    
    {$endregion VertexAttrib[1,2,3][s,f,d]v}
    
    {$region VertexAttrib4[b,s,i,f,d,ub,us,ui]v}
    
    public static procedure VertexAttrib4bv(index: UInt32; [MarshalAs(UnmanagedType.LPArray)] v: array of SByte);
    external 'opengl32.dll' name 'glVertexAttrib4bv';
    public static procedure VertexAttrib4bv(index: UInt32; var v: SByte);
    external 'opengl32.dll' name 'glVertexAttrib4bv';
    public static procedure VertexAttrib4bv(index: UInt32; var v: Vec4b);
    external 'opengl32.dll' name 'glVertexAttrib4bv';
    public static procedure VertexAttrib4bv(index: UInt32; v: pointer);
    external 'opengl32.dll' name 'glVertexAttrib4bv';
    
    public static procedure VertexAttrib4sv(index: UInt32; [MarshalAs(UnmanagedType.LPArray)] v: array of Int16);
    external 'opengl32.dll' name 'glVertexAttrib4sv';
    public static procedure VertexAttrib4sv(index: UInt32; var v: Int16);
    external 'opengl32.dll' name 'glVertexAttrib4sv';
    public static procedure VertexAttrib4sv(index: UInt32; var v: Vec4s);
    external 'opengl32.dll' name 'glVertexAttrib4sv';
    public static procedure VertexAttrib4sv(index: UInt32; v: pointer);
    external 'opengl32.dll' name 'glVertexAttrib4sv';
    
    public static procedure VertexAttrib4iv(index: UInt32; [MarshalAs(UnmanagedType.LPArray)] v: array of Int32);
    external 'opengl32.dll' name 'glVertexAttrib4iv';
    public static procedure VertexAttrib4iv(index: UInt32; var v: Int32);
    external 'opengl32.dll' name 'glVertexAttrib4iv';
    public static procedure VertexAttrib4iv(index: UInt32; var v: Vec4i);
    external 'opengl32.dll' name 'glVertexAttrib4iv';
    public static procedure VertexAttrib4iv(index: UInt32; v: pointer);
    external 'opengl32.dll' name 'glVertexAttrib4iv';
    
    public static procedure VertexAttrib4fv(index: UInt32; [MarshalAs(UnmanagedType.LPArray)] v: array of single);
    external 'opengl32.dll' name 'glVertexAttrib4fv';
    public static procedure VertexAttrib4fv(index: UInt32; var v: single);
    external 'opengl32.dll' name 'glVertexAttrib4fv';
    public static procedure VertexAttrib4fv(index: UInt32; var v: Vec4f);
    external 'opengl32.dll' name 'glVertexAttrib4fv';
    public static procedure VertexAttrib4fv(index: UInt32; v: pointer);
    external 'opengl32.dll' name 'glVertexAttrib4fv';
    
    public static procedure VertexAttrib4dv(index: UInt32; [MarshalAs(UnmanagedType.LPArray)] v: array of double);
    external 'opengl32.dll' name 'glVertexAttrib4dv';
    public static procedure VertexAttrib4dv(index: UInt32; var v: double);
    external 'opengl32.dll' name 'glVertexAttrib4dv';
    public static procedure VertexAttrib4dv(index: UInt32; var v: Vec4d);
    external 'opengl32.dll' name 'glVertexAttrib4dv';
    public static procedure VertexAttrib4dv(index: UInt32; v: pointer);
    external 'opengl32.dll' name 'glVertexAttrib4dv';
    
    public static procedure VertexAttrib4ubv(index: UInt32; [MarshalAs(UnmanagedType.LPArray)] v: array of Byte);
    external 'opengl32.dll' name 'glVertexAttrib4ubv';
    public static procedure VertexAttrib4ubv(index: UInt32; var v: Byte);
    external 'opengl32.dll' name 'glVertexAttrib4ubv';
    public static procedure VertexAttrib4ubv(index: UInt32; var v: Vec4ub);
    external 'opengl32.dll' name 'glVertexAttrib4ubv';
    public static procedure VertexAttrib4ubv(index: UInt32; v: pointer);
    external 'opengl32.dll' name 'glVertexAttrib4ubv';
    
    public static procedure VertexAttrib4usv(index: UInt32; [MarshalAs(UnmanagedType.LPArray)] v: array of UInt16);
    external 'opengl32.dll' name 'glVertexAttrib4usv';
    public static procedure VertexAttrib4usv(index: UInt32; var v: UInt16);
    external 'opengl32.dll' name 'glVertexAttrib4usv';
    public static procedure VertexAttrib4usv(index: UInt32; var v: Vec4us);
    external 'opengl32.dll' name 'glVertexAttrib4usv';
    public static procedure VertexAttrib4usv(index: UInt32; v: pointer);
    external 'opengl32.dll' name 'glVertexAttrib4usv';
    
    public static procedure VertexAttrib4uiv(index: UInt32; [MarshalAs(UnmanagedType.LPArray)] v: array of UInt32);
    external 'opengl32.dll' name 'glVertexAttrib4uiv';
    public static procedure VertexAttrib4uiv(index: UInt32; var v: UInt32);
    external 'opengl32.dll' name 'glVertexAttrib4uiv';
    public static procedure VertexAttrib4uiv(index: UInt32; var v: Vec4ui);
    external 'opengl32.dll' name 'glVertexAttrib4uiv';
    public static procedure VertexAttrib4uiv(index: UInt32; v: pointer);
    external 'opengl32.dll' name 'glVertexAttrib4uiv';
    
    {$endregion VertexAttrib4[b,s,i,f,d,ub,us,ui]v}
    
    {$region VertexAttrib4Nub}
    
    public static procedure VertexAttrib4Nub(index: UInt32; x: Byte; y: Byte; z: Byte; w: Byte);
    external 'opengl32.dll' name 'glVertexAttrib4Nub';
    
    {$endregion VertexAttrib4Nub}
    
    {$region VertexAttrib4N[b,s,i,ub,us,ui]v}
    
    public static procedure VertexAttrib4Nbv(index: UInt32; [MarshalAs(UnmanagedType.LPArray)] v: array of SByte);
    external 'opengl32.dll' name 'glVertexAttrib4Nbv';
    public static procedure VertexAttrib4Nbv(index: UInt32; var v: SByte);
    external 'opengl32.dll' name 'glVertexAttrib4Nbv';
    public static procedure VertexAttrib4Nbv(index: UInt32; var v: Vec4b);
    external 'opengl32.dll' name 'glVertexAttrib4Nbv';
    public static procedure VertexAttrib4Nbv(index: UInt32; v: pointer);
    external 'opengl32.dll' name 'glVertexAttrib4Nbv';
    
    public static procedure VertexAttrib4Nsv(index: UInt32; [MarshalAs(UnmanagedType.LPArray)] v: array of Int16);
    external 'opengl32.dll' name 'glVertexAttrib4Nsv';
    public static procedure VertexAttrib4Nsv(index: UInt32; var v: Int16);
    external 'opengl32.dll' name 'glVertexAttrib4Nsv';
    public static procedure VertexAttrib4Nsv(index: UInt32; var v: Vec4s);
    external 'opengl32.dll' name 'glVertexAttrib4Nsv';
    public static procedure VertexAttrib4Nsv(index: UInt32; v: pointer);
    external 'opengl32.dll' name 'glVertexAttrib4Nsv';
    
    public static procedure VertexAttrib4Niv(index: UInt32; [MarshalAs(UnmanagedType.LPArray)] v: array of Int32);
    external 'opengl32.dll' name 'glVertexAttrib4Niv';
    public static procedure VertexAttrib4Niv(index: UInt32; var v: Int32);
    external 'opengl32.dll' name 'glVertexAttrib4Niv';
    public static procedure VertexAttrib4Niv(index: UInt32; var v: Vec4i);
    external 'opengl32.dll' name 'glVertexAttrib4Niv';
    public static procedure VertexAttrib4Niv(index: UInt32; v: pointer);
    external 'opengl32.dll' name 'glVertexAttrib4Niv';
    
    public static procedure VertexAttrib4Nubv(index: UInt32; [MarshalAs(UnmanagedType.LPArray)] v: array of Byte);
    external 'opengl32.dll' name 'glVertexAttrib4Nubv';
    public static procedure VertexAttrib4Nubv(index: UInt32; var v: Byte);
    external 'opengl32.dll' name 'glVertexAttrib4Nubv';
    public static procedure VertexAttrib4Nubv(index: UInt32; var v: Vec4ub);
    external 'opengl32.dll' name 'glVertexAttrib4Nubv';
    public static procedure VertexAttrib4Nubv(index: UInt32; v: pointer);
    external 'opengl32.dll' name 'glVertexAttrib4Nubv';
    
    public static procedure VertexAttrib4Nusv(index: UInt32; [MarshalAs(UnmanagedType.LPArray)] v: array of UInt16);
    external 'opengl32.dll' name 'glVertexAttrib4Nusv';
    public static procedure VertexAttrib4Nusv(index: UInt32; var v: UInt16);
    external 'opengl32.dll' name 'glVertexAttrib4Nusv';
    public static procedure VertexAttrib4Nusv(index: UInt32; var v: Vec4us);
    external 'opengl32.dll' name 'glVertexAttrib4Nusv';
    public static procedure VertexAttrib4Nusv(index: UInt32; v: pointer);
    external 'opengl32.dll' name 'glVertexAttrib4Nusv';
    
    public static procedure VertexAttrib4Nuiv(index: UInt32; [MarshalAs(UnmanagedType.LPArray)] v: array of UInt32);
    external 'opengl32.dll' name 'glVertexAttrib4Nuiv';
    public static procedure VertexAttrib4Nuiv(index: UInt32; var v: UInt32);
    external 'opengl32.dll' name 'glVertexAttrib4Nuiv';
    public static procedure VertexAttrib4Nuiv(index: UInt32; var v: Vec4ui);
    external 'opengl32.dll' name 'glVertexAttrib4Nuiv';
    public static procedure VertexAttrib4Nuiv(index: UInt32; v: pointer);
    external 'opengl32.dll' name 'glVertexAttrib4Nuiv';
    
    {$endregion VertexAttrib4N[b,s,i,ub,us,ui]v}
    
    {$region VertexAttribI[1,2,3,4][i,ui]}
    
    public static procedure VertexAttribI1i(index: UInt32; x: Int32);
    external 'opengl32.dll' name 'glVertexAttribI1i';
    
    public static procedure VertexAttribI2i(index: UInt32; x: Int32; y: Int32);
    external 'opengl32.dll' name 'glVertexAttribI2i';
    
    public static procedure VertexAttribI3i(index: UInt32; x: Int32; y: Int32; z: Int32);
    external 'opengl32.dll' name 'glVertexAttribI3i';
    
    public static procedure VertexAttribI4i(index: UInt32; x: Int32; y: Int32; z: Int32; w: Int32);
    external 'opengl32.dll' name 'glVertexAttribI4i';
    
    public static procedure VertexAttribI1ui(index: UInt32; x: UInt32);
    external 'opengl32.dll' name 'glVertexAttribI1ui';
    
    public static procedure VertexAttribI2ui(index: UInt32; x: UInt32; y: UInt32);
    external 'opengl32.dll' name 'glVertexAttribI2ui';
    
    public static procedure VertexAttribI3ui(index: UInt32; x: UInt32; y: UInt32; z: UInt32);
    external 'opengl32.dll' name 'glVertexAttribI3ui';
    
    public static procedure VertexAttribI4ui(index: UInt32; x: UInt32; y: UInt32; z: UInt32; w: UInt32);
    external 'opengl32.dll' name 'glVertexAttribI4ui';
    
    {$endregion VertexAttribI[1,2,3,4][i,ui]}
    
    {$region VertexAttribI[1,2,3,4][i,ui]v}
    
    public static procedure VertexAttribI1iv(index: UInt32; [MarshalAs(UnmanagedType.LPArray)] v: array of Int32);
    external 'opengl32.dll' name 'glVertexAttribI1iv';
    public static procedure VertexAttribI1iv(index: UInt32; var v: Int32);
    external 'opengl32.dll' name 'glVertexAttribI1iv';
    public static procedure VertexAttribI1iv(index: UInt32; var v: Vec1i);
    external 'opengl32.dll' name 'glVertexAttribI1iv';
    public static procedure VertexAttribI1iv(index: UInt32; v: pointer);
    external 'opengl32.dll' name 'glVertexAttribI1iv';
    
    public static procedure VertexAttribI2iv(index: UInt32; [MarshalAs(UnmanagedType.LPArray)] v: array of Int32);
    external 'opengl32.dll' name 'glVertexAttribI2iv';
    public static procedure VertexAttribI2iv(index: UInt32; var v: Int32);
    external 'opengl32.dll' name 'glVertexAttribI2iv';
    public static procedure VertexAttribI2iv(index: UInt32; var v: Vec2i);
    external 'opengl32.dll' name 'glVertexAttribI2iv';
    public static procedure VertexAttribI2iv(index: UInt32; v: pointer);
    external 'opengl32.dll' name 'glVertexAttribI2iv';
    
    public static procedure VertexAttribI3iv(index: UInt32; [MarshalAs(UnmanagedType.LPArray)] v: array of Int32);
    external 'opengl32.dll' name 'glVertexAttribI3iv';
    public static procedure VertexAttribI3iv(index: UInt32; var v: Int32);
    external 'opengl32.dll' name 'glVertexAttribI3iv';
    public static procedure VertexAttribI3iv(index: UInt32; var v: Vec3i);
    external 'opengl32.dll' name 'glVertexAttribI3iv';
    public static procedure VertexAttribI3iv(index: UInt32; v: pointer);
    external 'opengl32.dll' name 'glVertexAttribI3iv';
    
    public static procedure VertexAttribI4iv(index: UInt32; [MarshalAs(UnmanagedType.LPArray)] v: array of Int32);
    external 'opengl32.dll' name 'glVertexAttribI4iv';
    public static procedure VertexAttribI4iv(index: UInt32; var v: Int32);
    external 'opengl32.dll' name 'glVertexAttribI4iv';
    public static procedure VertexAttribI4iv(index: UInt32; var v: Vec4i);
    external 'opengl32.dll' name 'glVertexAttribI4iv';
    public static procedure VertexAttribI4iv(index: UInt32; v: pointer);
    external 'opengl32.dll' name 'glVertexAttribI4iv';
    
    public static procedure VertexAttribI1uiv(index: UInt32; [MarshalAs(UnmanagedType.LPArray)] v: array of UInt32);
    external 'opengl32.dll' name 'glVertexAttribI1uiv';
    public static procedure VertexAttribI1uiv(index: UInt32; var v: UInt32);
    external 'opengl32.dll' name 'glVertexAttribI1uiv';
    public static procedure VertexAttribI1uiv(index: UInt32; var v: Vec1ui);
    external 'opengl32.dll' name 'glVertexAttribI1uiv';
    public static procedure VertexAttribI1uiv(index: UInt32; v: pointer);
    external 'opengl32.dll' name 'glVertexAttribI1uiv';
    
    public static procedure VertexAttribI2uiv(index: UInt32; [MarshalAs(UnmanagedType.LPArray)] v: array of UInt32);
    external 'opengl32.dll' name 'glVertexAttribI2uiv';
    public static procedure VertexAttribI2uiv(index: UInt32; var v: UInt32);
    external 'opengl32.dll' name 'glVertexAttribI2uiv';
    public static procedure VertexAttribI2uiv(index: UInt32; var v: Vec2ui);
    external 'opengl32.dll' name 'glVertexAttribI2uiv';
    public static procedure VertexAttribI2uiv(index: UInt32; v: pointer);
    external 'opengl32.dll' name 'glVertexAttribI2uiv';
    
    public static procedure VertexAttribI3uiv(index: UInt32; [MarshalAs(UnmanagedType.LPArray)] v: array of UInt32);
    external 'opengl32.dll' name 'glVertexAttribI3uiv';
    public static procedure VertexAttribI3uiv(index: UInt32; var v: UInt32);
    external 'opengl32.dll' name 'glVertexAttribI3uiv';
    public static procedure VertexAttribI3uiv(index: UInt32; var v: Vec3ui);
    external 'opengl32.dll' name 'glVertexAttribI3uiv';
    public static procedure VertexAttribI3uiv(index: UInt32; v: pointer);
    external 'opengl32.dll' name 'glVertexAttribI3uiv';
    
    public static procedure VertexAttribI4uiv(index: UInt32; [MarshalAs(UnmanagedType.LPArray)] v: array of UInt32);
    external 'opengl32.dll' name 'glVertexAttribI4uiv';
    public static procedure VertexAttribI4uiv(index: UInt32; var v: UInt32);
    external 'opengl32.dll' name 'glVertexAttribI4uiv';
    public static procedure VertexAttribI4uiv(index: UInt32; var v: Vec4ui);
    external 'opengl32.dll' name 'glVertexAttribI4uiv';
    public static procedure VertexAttribI4uiv(index: UInt32; v: pointer);
    external 'opengl32.dll' name 'glVertexAttribI4uiv';
    
    {$endregion VertexAttribI[1,2,3,4][i,ui]v}
    
    {$region VertexAttribI4[b,s,ub,us]v}
    
    public static procedure VertexAttribI4bv(index: UInt32; [MarshalAs(UnmanagedType.LPArray)] v: array of SByte);
    external 'opengl32.dll' name 'glVertexAttribI4bv';
    public static procedure VertexAttribI4bv(index: UInt32; var v: SByte);
    external 'opengl32.dll' name 'glVertexAttribI4bv';
    public static procedure VertexAttribI4bv(index: UInt32; var v: Vec4b);
    external 'opengl32.dll' name 'glVertexAttribI4bv';
    public static procedure VertexAttribI4bv(index: UInt32; v: pointer);
    external 'opengl32.dll' name 'glVertexAttribI4bv';
    
    public static procedure VertexAttribI4sv(index: UInt32; [MarshalAs(UnmanagedType.LPArray)] v: array of Int16);
    external 'opengl32.dll' name 'glVertexAttribI4sv';
    public static procedure VertexAttribI4sv(index: UInt32; var v: Int16);
    external 'opengl32.dll' name 'glVertexAttribI4sv';
    public static procedure VertexAttribI4sv(index: UInt32; var v: Vec4s);
    external 'opengl32.dll' name 'glVertexAttribI4sv';
    public static procedure VertexAttribI4sv(index: UInt32; v: pointer);
    external 'opengl32.dll' name 'glVertexAttribI4sv';
    
    public static procedure VertexAttribI4ubv(index: UInt32; [MarshalAs(UnmanagedType.LPArray)] v: array of Byte);
    external 'opengl32.dll' name 'glVertexAttribI4ubv';
    public static procedure VertexAttribI4ubv(index: UInt32; var v: Byte);
    external 'opengl32.dll' name 'glVertexAttribI4ubv';
    public static procedure VertexAttribI4ubv(index: UInt32; var v: Vec4ub);
    external 'opengl32.dll' name 'glVertexAttribI4ubv';
    public static procedure VertexAttribI4ubv(index: UInt32; v: pointer);
    external 'opengl32.dll' name 'glVertexAttribI4ubv';
    
    public static procedure VertexAttribI4usv(index: UInt32; [MarshalAs(UnmanagedType.LPArray)] v: array of UInt16);
    external 'opengl32.dll' name 'glVertexAttribI4usv';
    public static procedure VertexAttribI4usv(index: UInt32; var v: UInt16);
    external 'opengl32.dll' name 'glVertexAttribI4usv';
    public static procedure VertexAttribI4usv(index: UInt32; var v: Vec4us);
    external 'opengl32.dll' name 'glVertexAttribI4usv';
    public static procedure VertexAttribI4usv(index: UInt32; v: pointer);
    external 'opengl32.dll' name 'glVertexAttribI4usv';
    
    {$endregion VertexAttribI4[b,s,ub,us]v}
    
    {$region VertexAttribL[1,2,3,4]d}
    
    public static procedure VertexAttribL1d(index: UInt32; x: double);
    external 'opengl32.dll' name 'glVertexAttribL1d';
    
    public static procedure VertexAttribL2d(index: UInt32; x: double; y: double);
    external 'opengl32.dll' name 'glVertexAttribL2d';
    
    public static procedure VertexAttribL3d(index: UInt32; x: double; y: double; z: double);
    external 'opengl32.dll' name 'glVertexAttribL3d';
    
    public static procedure VertexAttribL4d(index: UInt32; x: double; y: double; z: double; w: double);
    external 'opengl32.dll' name 'glVertexAttribL4d';
    
    {$endregion VertexAttribL[1,2,3,4]d}
    
    {$region VertexAttribL[1,2,3,4]dv}
    
    public static procedure VertexAttribL1dv(index: UInt32; [MarshalAs(UnmanagedType.LPArray)] v: array of double);
    external 'opengl32.dll' name 'glVertexAttribL1dv';
    public static procedure VertexAttribL1dv(index: UInt32; var v: double);
    external 'opengl32.dll' name 'glVertexAttribL1dv';
    public static procedure VertexAttribL1dv(index: UInt32; var v: Vec1d);
    external 'opengl32.dll' name 'glVertexAttribL1dv';
    public static procedure VertexAttribL1dv(index: UInt32; v: pointer);
    external 'opengl32.dll' name 'glVertexAttribL1dv';
    
    public static procedure VertexAttribL2dv(index: UInt32; [MarshalAs(UnmanagedType.LPArray)] v: array of double);
    external 'opengl32.dll' name 'glVertexAttribL2dv';
    public static procedure VertexAttribL2dv(index: UInt32; var v: double);
    external 'opengl32.dll' name 'glVertexAttribL2dv';
    public static procedure VertexAttribL2dv(index: UInt32; var v: Vec2d);
    external 'opengl32.dll' name 'glVertexAttribL2dv';
    public static procedure VertexAttribL2dv(index: UInt32; v: pointer);
    external 'opengl32.dll' name 'glVertexAttribL2dv';
    
    public static procedure VertexAttribL3dv(index: UInt32; [MarshalAs(UnmanagedType.LPArray)] v: array of double);
    external 'opengl32.dll' name 'glVertexAttribL3dv';
    public static procedure VertexAttribL3dv(index: UInt32; var v: double);
    external 'opengl32.dll' name 'glVertexAttribL3dv';
    public static procedure VertexAttribL3dv(index: UInt32; var v: Vec3d);
    external 'opengl32.dll' name 'glVertexAttribL3dv';
    public static procedure VertexAttribL3dv(index: UInt32; v: pointer);
    external 'opengl32.dll' name 'glVertexAttribL3dv';
    
    public static procedure VertexAttribL4dv(index: UInt32; [MarshalAs(UnmanagedType.LPArray)] v: array of double);
    external 'opengl32.dll' name 'glVertexAttribL4dv';
    public static procedure VertexAttribL4dv(index: UInt32; var v: double);
    external 'opengl32.dll' name 'glVertexAttribL4dv';
    public static procedure VertexAttribL4dv(index: UInt32; var v: Vec4d);
    external 'opengl32.dll' name 'glVertexAttribL4dv';
    public static procedure VertexAttribL4dv(index: UInt32; v: pointer);
    external 'opengl32.dll' name 'glVertexAttribL4dv';
    
    {$endregion VertexAttribL[1,2,3,4]dv}
    
    {$region VertexAttribP[1,2,3,4]ui}
    
    public static procedure VertexAttribP1ui(index: UInt32; &type: DataType; normalized: boolean; value: UInt32);
    external 'opengl32.dll' name 'glVertexAttribP1ui';
    
    public static procedure VertexAttribP2ui(index: UInt32; &type: DataType; normalized: boolean; value: UInt32);
    external 'opengl32.dll' name 'glVertexAttribP2ui';
    
    public static procedure VertexAttribP3ui(index: UInt32; &type: DataType; normalized: boolean; value: UInt32);
    external 'opengl32.dll' name 'glVertexAttribP3ui';
    
    public static procedure VertexAttribP4ui(index: UInt32; &type: DataType; normalized: boolean; value: UInt32);
    external 'opengl32.dll' name 'glVertexAttribP4ui';
    
    {$endregion VertexAttribP[1,2,3,4]ui}
    
    {$region VertexAttribP[1,2,3,4]uiv}
    
    public static procedure VertexAttribP1uiv(index: UInt32; &type: DataType; normalized: boolean; var value: UInt32);
    external 'opengl32.dll' name 'glVertexAttribP1uiv';
    public static procedure VertexAttribP1uiv(index: UInt32; &type: DataType; normalized: boolean; value: pointer);
    external 'opengl32.dll' name 'glVertexAttribP1uiv';
    
    public static procedure VertexAttribP2uiv(index: UInt32; &type: DataType; normalized: boolean; var value: UInt32);
    external 'opengl32.dll' name 'glVertexAttribP2uiv';
    public static procedure VertexAttribP2uiv(index: UInt32; &type: DataType; normalized: boolean; value: pointer);
    external 'opengl32.dll' name 'glVertexAttribP2uiv';
    
    public static procedure VertexAttribP3uiv(index: UInt32; &type: DataType; normalized: boolean; var value: UInt32);
    external 'opengl32.dll' name 'glVertexAttribP3uiv';
    public static procedure VertexAttribP3uiv(index: UInt32; &type: DataType; normalized: boolean; value: pointer);
    external 'opengl32.dll' name 'glVertexAttribP3uiv';
    
    public static procedure VertexAttribP4uiv(index: UInt32; &type: DataType; normalized: boolean; var value: UInt32);
    external 'opengl32.dll' name 'glVertexAttribP4uiv';
    public static procedure VertexAttribP4uiv(index: UInt32; &type: DataType; normalized: boolean; value: pointer);
    external 'opengl32.dll' name 'glVertexAttribP4uiv';
    
    {$endregion VertexAttribP[1,2,3,4]uiv}
    
    {$endregion 10.2 - Current Vertex Attribute Values}
    
    {$region 10.3 - Vertex Arrays}
    
    // 10.3.1
    
    public static procedure GenVertexArrays(n: Int32; [MarshalAs(UnmanagedType.LPArray)] arrays: array of VertexArrayName);
    external 'opengl32.dll' name 'glGenVertexArrays';
    public static procedure GenVertexArrays(n: Int32; var arrays: VertexArrayName);
    external 'opengl32.dll' name 'glGenVertexArrays';
    public static procedure GenVertexArrays(n: Int32; arrays: pointer);
    external 'opengl32.dll' name 'glGenVertexArrays';
    
    public static procedure DeleteVertexArrays(n: Int32; [MarshalAs(UnmanagedType.LPArray)] arrays: array of VertexArrayName);
    external 'opengl32.dll' name 'glDeleteVertexArrays';
    public static procedure DeleteVertexArrays(n: Int32; var arrays: VertexArrayName);
    external 'opengl32.dll' name 'glDeleteVertexArrays';
    public static procedure DeleteVertexArrays(n: Int32; arrays: pointer);
    external 'opengl32.dll' name 'glDeleteVertexArrays';
    
    public static procedure BindVertexArray(&array: VertexArrayName);
    external 'opengl32.dll' name 'glBindVertexArray';
    
    public static procedure CreateVertexArrays(n: Int32; [MarshalAs(UnmanagedType.LPArray)] arrays: array of VertexArrayName);
    external 'opengl32.dll' name 'glCreateVertexArrays';
    public static procedure CreateVertexArrays(n: Int32; var arrays: VertexArrayName);
    external 'opengl32.dll' name 'glCreateVertexArrays';
    public static procedure CreateVertexArrays(n: Int32; arrays: pointer);
    external 'opengl32.dll' name 'glCreateVertexArrays';
    
    public static function IsVertexArray(&array: VertexArrayName): boolean;
    external 'opengl32.dll' name 'glIsVertexArray';
    
    public static procedure VertexArrayElementBuffer(vaobj: VertexArrayName; buffer: BufferName);
    external 'opengl32.dll' name 'glVertexArrayElementBuffer';
    
    // 10.3.2
    
    public static procedure VertexAttribFormat(attribindex: UInt32; size: Int32; &type: DataType; normalized: boolean; relativeoffset: UInt32);
    external 'opengl32.dll' name 'glVertexAttribFormat';
    
    public static procedure VertexAttribIFormat(attribindex: UInt32; size: Int32; &type: DataType; relativeoffset: UInt32);
    external 'opengl32.dll' name 'glVertexAttribIFormat';
    
    public static procedure VertexAttribLFormat(attribindex: UInt32; size: Int32; &type: DataType; relativeoffset: UInt32);
    external 'opengl32.dll' name 'glVertexAttribLFormat';
    
    public static procedure VertexArrayAttribFormat(vaobj: VertexArrayName; attribindex: UInt32; size: Int32; &type: DataType; normalized: boolean; relativeoffset: UInt32);
    external 'opengl32.dll' name 'glVertexArrayAttribFormat';
    
    public static procedure VertexArrayAttribIFormat(vaobj: VertexArrayName; attribindex: UInt32; size: Int32; &type: DataType; relativeoffset: UInt32);
    external 'opengl32.dll' name 'glVertexArrayAttribIFormat';
    
    public static procedure VertexArrayAttribLFormat(vaobj: VertexArrayName; attribindex: UInt32; size: Int32; &type: DataType; relativeoffset: UInt32);
    external 'opengl32.dll' name 'glVertexArrayAttribLFormat';
    
    public static procedure BindVertexBuffer(bindingindex: UInt32; buffer: BufferName; offset: IntPtr; stride: Int32);
    external 'opengl32.dll' name 'glBindVertexBuffer';
    
    public static procedure VertexArrayVertexBuffer(vaobj: VertexArrayName; bindingindex: UInt32; buffer: BufferName; offset: IntPtr; stride: Int32);
    external 'opengl32.dll' name 'glVertexArrayVertexBuffer';
    
    public static procedure BindVertexBuffers(first: UInt32; count: Int32; [MarshalAs(UnmanagedType.LPArray)] buffers: array of BufferName; [MarshalAs(UnmanagedType.LPArray)] offsets: array of IntPtr; [MarshalAs(UnmanagedType.LPArray)] strides: array of Int32);
    external 'opengl32.dll' name 'glBindVertexBuffers';
    public static procedure BindVertexBuffers(first: UInt32; count: Int32; var buffers: BufferName; var offsets: IntPtr; var strides: Int32);
    external 'opengl32.dll' name 'glBindVertexBuffers';
    public static procedure BindVertexBuffers(first: UInt32; count: Int32; buffers: pointer; offsets: pointer; strides: pointer);
    external 'opengl32.dll' name 'glBindVertexBuffers';
    
    public static procedure VertexArrayVertexBuffers(vaobj: VertexArrayName; first: UInt32; count: Int32; [MarshalAs(UnmanagedType.LPArray)] buffers: array of BufferName; [MarshalAs(UnmanagedType.LPArray)] offsets: array of IntPtr; [MarshalAs(UnmanagedType.LPArray)] strides: array of Int32);
    external 'opengl32.dll' name 'glVertexArrayVertexBuffers';
    public static procedure VertexArrayVertexBuffers(vaobj: VertexArrayName; first: UInt32; count: Int32; var buffers: BufferName; var offsets: IntPtr; var strides: Int32);
    external 'opengl32.dll' name 'glVertexArrayVertexBuffers';
    public static procedure VertexArrayVertexBuffers(vaobj: VertexArrayName; first: UInt32; count: Int32; buffers: pointer; offsets: pointer; strides: pointer);
    external 'opengl32.dll' name 'glVertexArrayVertexBuffers';
    
    public static procedure VertexAttribBinding(attribindex: UInt32; bindingindex: UInt32);
    external 'opengl32.dll' name 'glVertexAttribBinding';
    
    public static procedure VertexArrayAttribBinding(vaobj: VertexArrayName; attribindex: UInt32; bindingindex: UInt32);
    external 'opengl32.dll' name 'glVertexArrayAttribBinding';
    
    public static procedure VertexAttribPointer(index: UInt32; size: Int32; &type: DataType; normalized: boolean; stride: Int32; _pointer: IntPtr);
    external 'opengl32.dll' name 'glVertexAttribPointer';
    public static procedure VertexAttribPointer(index: UInt32; size: Int32; &type: DataType; normalized: boolean; stride: Int32; _pointer: pointer);
    external 'opengl32.dll' name 'glVertexAttribPointer';
    
    public static procedure VertexAttribIPointer(index: UInt32; size: Int32; &type: DataType; stride: Int32; _pointer: IntPtr);
    external 'opengl32.dll' name 'glVertexAttribIPointer';
    public static procedure VertexAttribIPointer(index: UInt32; size: Int32; &type: DataType; stride: Int32; _pointer: pointer);
    external 'opengl32.dll' name 'glVertexAttribIPointer';
    
    public static procedure VertexAttribLPointer(index: UInt32; size: Int32; &type: DataType; stride: Int32; _pointer: IntPtr);
    external 'opengl32.dll' name 'glVertexAttribLPointer';
    public static procedure VertexAttribLPointer(index: UInt32; size: Int32; &type: DataType; stride: Int32; _pointer: pointer);
    external 'opengl32.dll' name 'glVertexAttribLPointer';
    
    public static procedure EnableVertexAttribArray(index: UInt32);
    external 'opengl32.dll' name 'glEnableVertexAttribArray';
    
    public static procedure EnableVertexArrayAttrib(vaobj: VertexArrayName; index: UInt32);
    external 'opengl32.dll' name 'glEnableVertexArrayAttrib';
    
    public static procedure DisableVertexAttribArray(index: UInt32);
    external 'opengl32.dll' name 'glDisableVertexAttribArray';
    
    public static procedure DisableVertexArrayAttrib(vaobj: VertexArrayName; index: UInt32);
    external 'opengl32.dll' name 'glDisableVertexArrayAttrib';
    
    public static procedure VertexBindingDivisor(bindingindex: UInt32; divisor: UInt32);
    external 'opengl32.dll' name 'glVertexBindingDivisor';
    
    public static procedure VertexArrayBindingDivisor(vaobj: VertexArrayName; bindingindex: UInt32; divisor: UInt32);
    external 'opengl32.dll' name 'glVertexArrayBindingDivisor';
    
    public static procedure VertexAttribDivisor(index: UInt32; divisor: UInt32);
    external 'opengl32.dll' name 'glVertexAttribDivisor';
    
    // 10.3.6
    
    public static procedure Disable(cap: EnablableName);
    external 'opengl32.dll' name 'glDisable';
    
    public static procedure Enable(cap: EnablableName);
    external 'opengl32.dll' name 'glEnable';
    
    public static procedure PrimitiveRestartIndex(index: UInt32);
    external 'opengl32.dll' name 'glPrimitiveRestartIndex';
    
    {$endregion 10.3 - Vertex Arrays}
    
    {$region 10.4 - Drawing Commands Using Vertex Arrays}
    
    public static procedure DrawArrays(mode: PrimitiveType; first: Int32; count: Int32);
    external 'opengl32.dll' name 'glDrawArrays';
    
    public static procedure DrawArraysInstancedBaseInstance(mode: PrimitiveType; first: Int32; count: Int32; instancecount: Int32; baseinstance: UInt32);
    external 'opengl32.dll' name 'glDrawArraysInstancedBaseInstance';
    
    public static procedure DrawArraysInstanced(mode: PrimitiveType; first: Int32; count: Int32; instancecount: Int32);
    external 'opengl32.dll' name 'glDrawArraysInstanced';
    
    public static procedure DrawArraysIndirect(mode: PrimitiveType; var indirect: DrawArraysIndirectCommand);
    external 'opengl32.dll' name 'glDrawArraysIndirect';
    public static procedure DrawArraysIndirect(mode: PrimitiveType; indirect: pointer);
    external 'opengl32.dll' name 'glDrawArraysIndirect';
    
    public static procedure MultiDrawArrays(mode: PrimitiveType; [MarshalAs(UnmanagedType.LPArray)] first: array of Int32; [MarshalAs(UnmanagedType.LPArray)] count: array of Int32; drawcount: Int32);
    external 'opengl32.dll' name 'glMultiDrawArrays';
    public static procedure MultiDrawArrays(mode: PrimitiveType; var first: Int32; var count: Int32; drawcount: Int32);
    external 'opengl32.dll' name 'glMultiDrawArrays';
    public static procedure MultiDrawArrays(mode: PrimitiveType; first: pointer; count: pointer; drawcount: Int32);
    external 'opengl32.dll' name 'glMultiDrawArrays';
    
    public static procedure MultiDrawArraysIndirect(mode: PrimitiveType; [MarshalAs(UnmanagedType.LPArray)] indirect: array of DrawArraysIndirectCommand; drawcount: Int32; stride: Int32);
    external 'opengl32.dll' name 'glMultiDrawArraysIndirect';
    public static procedure MultiDrawArraysIndirect(mode: PrimitiveType; var indirect: DrawArraysIndirectCommand; drawcount: Int32; stride: Int32);
    external 'opengl32.dll' name 'glMultiDrawArraysIndirect';
    public static procedure MultiDrawArraysIndirect(mode: PrimitiveType; indirect: pointer; drawcount: Int32; stride: Int32);
    external 'opengl32.dll' name 'glMultiDrawArraysIndirect';
    
    public static procedure MultiDrawArraysIndirectCount(mode: PrimitiveType; [MarshalAs(UnmanagedType.LPArray)] indirect: array of DrawArraysIndirectCommand; drawcount: IntPtr; maxdrawcount: Int32; stride: Int32);
    external 'opengl32.dll' name 'glMultiDrawArraysIndirectCount';
    public static procedure MultiDrawArraysIndirectCount(mode: PrimitiveType; var indirect: DrawArraysIndirectCommand; drawcount: IntPtr; maxdrawcount: Int32; stride: Int32);
    external 'opengl32.dll' name 'glMultiDrawArraysIndirectCount';
    public static procedure MultiDrawArraysIndirectCount(mode: PrimitiveType; indirect: pointer; drawcount: IntPtr; maxdrawcount: Int32; stride: Int32);
    external 'opengl32.dll' name 'glMultiDrawArraysIndirectCount';
    
    public static procedure DrawElements(mode: PrimitiveType; count: Int32; &type: DataType; [MarshalAs(UnmanagedType.LPArray)] indices: array of UInt32);
    external 'opengl32.dll' name 'glDrawElements';
    public static procedure DrawElements(mode: PrimitiveType; count: Int32; &type: DataType; var indices: UInt32);
    external 'opengl32.dll' name 'glDrawElements';
    public static procedure DrawElements(mode: PrimitiveType; count: Int32; &type: DataType; [MarshalAs(UnmanagedType.LPArray)] indices: array of UInt16);
    external 'opengl32.dll' name 'glDrawElements';
    public static procedure DrawElements(mode: PrimitiveType; count: Int32; &type: DataType; var indices: UInt16);
    external 'opengl32.dll' name 'glDrawElements';
    public static procedure DrawElements(mode: PrimitiveType; count: Int32; &type: DataType; [MarshalAs(UnmanagedType.LPArray)] indices: array of Byte);
    external 'opengl32.dll' name 'glDrawElements';
    public static procedure DrawElements(mode: PrimitiveType; count: Int32; &type: DataType; var indices: Byte);
    external 'opengl32.dll' name 'glDrawElements';
    public static procedure DrawElements(mode: PrimitiveType; count: Int32; &type: DataType; indices: pointer);
    external 'opengl32.dll' name 'glDrawElements';
    
    public static procedure DrawElementsInstancedBaseInstance(mode: PrimitiveType; count: Int32; &type: DataType; [MarshalAs(UnmanagedType.LPArray)] indices: array of UInt32; instancecount: Int32; baseinstance: UInt32);
    external 'opengl32.dll' name 'glDrawElementsInstancedBaseInstance';
    public static procedure DrawElementsInstancedBaseInstance(mode: PrimitiveType; count: Int32; &type: DataType; var indices: UInt32; instancecount: Int32; baseinstance: UInt32);
    external 'opengl32.dll' name 'glDrawElementsInstancedBaseInstance';
    public static procedure DrawElementsInstancedBaseInstance(mode: PrimitiveType; count: Int32; &type: DataType; [MarshalAs(UnmanagedType.LPArray)] indices: array of UInt16; instancecount: Int32; baseinstance: UInt32);
    external 'opengl32.dll' name 'glDrawElementsInstancedBaseInstance';
    public static procedure DrawElementsInstancedBaseInstance(mode: PrimitiveType; count: Int32; &type: DataType; var indices: UInt16; instancecount: Int32; baseinstance: UInt32);
    external 'opengl32.dll' name 'glDrawElementsInstancedBaseInstance';
    public static procedure DrawElementsInstancedBaseInstance(mode: PrimitiveType; count: Int32; &type: DataType; [MarshalAs(UnmanagedType.LPArray)] indices: array of Byte; instancecount: Int32; baseinstance: UInt32);
    external 'opengl32.dll' name 'glDrawElementsInstancedBaseInstance';
    public static procedure DrawElementsInstancedBaseInstance(mode: PrimitiveType; count: Int32; &type: DataType; var indices: Byte; instancecount: Int32; baseinstance: UInt32);
    external 'opengl32.dll' name 'glDrawElementsInstancedBaseInstance';
    public static procedure DrawElementsInstancedBaseInstance(mode: PrimitiveType; count: Int32; &type: DataType; indices: pointer; instancecount: Int32; baseinstance: UInt32);
    external 'opengl32.dll' name 'glDrawElementsInstancedBaseInstance';
    
    public static procedure DrawElementsInstanced(mode: PrimitiveType; count: Int32; &type: DataType; [MarshalAs(UnmanagedType.LPArray)] indices: array of UInt32; instancecount: Int32);
    external 'opengl32.dll' name 'glDrawElementsInstanced';
    public static procedure DrawElementsInstanced(mode: PrimitiveType; count: Int32; &type: DataType; var indices: UInt32; instancecount: Int32);
    external 'opengl32.dll' name 'glDrawElementsInstanced';
    public static procedure DrawElementsInstanced(mode: PrimitiveType; count: Int32; &type: DataType; [MarshalAs(UnmanagedType.LPArray)] indices: array of UInt16; instancecount: Int32);
    external 'opengl32.dll' name 'glDrawElementsInstanced';
    public static procedure DrawElementsInstanced(mode: PrimitiveType; count: Int32; &type: DataType; var indices: UInt16; instancecount: Int32);
    external 'opengl32.dll' name 'glDrawElementsInstanced';
    public static procedure DrawElementsInstanced(mode: PrimitiveType; count: Int32; &type: DataType; [MarshalAs(UnmanagedType.LPArray)] indices: array of Byte; instancecount: Int32);
    external 'opengl32.dll' name 'glDrawElementsInstanced';
    public static procedure DrawElementsInstanced(mode: PrimitiveType; count: Int32; &type: DataType; var indices: Byte; instancecount: Int32);
    external 'opengl32.dll' name 'glDrawElementsInstanced';
    public static procedure DrawElementsInstanced(mode: PrimitiveType; count: Int32; &type: DataType; indices: pointer; instancecount: Int32);
    external 'opengl32.dll' name 'glDrawElementsInstanced';
    
    public static procedure MultiDrawElements(mode: PrimitiveType; [MarshalAs(UnmanagedType.LPArray)] count: array of Int32; &type: DataType; [MarshalAs(UnmanagedType.LPArray, ArraySubType = UnmanagedType.LPArray)] indices: array of array of UInt32; drawcount: Int32);
    external 'opengl32.dll' name 'glMultiDrawElements';
    public static procedure MultiDrawElements(mode: PrimitiveType; [MarshalAs(UnmanagedType.LPArray)] count: array of Int32; &type: DataType; [MarshalAs(UnmanagedType.LPArray, ArraySubType = UnmanagedType.LPArray)] indices: array of array of UInt16; drawcount: Int32);
    external 'opengl32.dll' name 'glMultiDrawElements';
    public static procedure MultiDrawElements(mode: PrimitiveType; [MarshalAs(UnmanagedType.LPArray)] count: array of Int32; &type: DataType; [MarshalAs(UnmanagedType.LPArray, ArraySubType = UnmanagedType.LPArray)] indices: array of array of Byte; drawcount: Int32);
    external 'opengl32.dll' name 'glMultiDrawElements';
    public static procedure MultiDrawElements(mode: PrimitiveType; [MarshalAs(UnmanagedType.LPArray)] count: array of Int32; &type: DataType; [MarshalAs(UnmanagedType.LPArray)] indices: array of IntPtr; drawcount: Int32);
    external 'opengl32.dll' name 'glMultiDrawElements';
    public static procedure MultiDrawElements(mode: PrimitiveType; var count: Int32; &type: DataType; [MarshalAs(UnmanagedType.SysInt, ArraySubType = UnmanagedType.LPArray)] var indices: array of UInt32; drawcount: Int32);
    external 'opengl32.dll' name 'glMultiDrawElements';
    public static procedure MultiDrawElements(mode: PrimitiveType; var count: Int32; &type: DataType; [MarshalAs(UnmanagedType.SysInt, ArraySubType = UnmanagedType.LPArray)] var indices: array of UInt16; drawcount: Int32);
    external 'opengl32.dll' name 'glMultiDrawElements';
    public static procedure MultiDrawElements(mode: PrimitiveType; var count: Int32; &type: DataType; [MarshalAs(UnmanagedType.SysInt, ArraySubType = UnmanagedType.LPArray)] var indices: array of Byte; drawcount: Int32);
    external 'opengl32.dll' name 'glMultiDrawElements';
    public static procedure MultiDrawElements(mode: PrimitiveType; var count: Int32; &type: DataType; var indices: IntPtr; drawcount: Int32);
    external 'opengl32.dll' name 'glMultiDrawElements';
    public static procedure MultiDrawElements(mode: PrimitiveType; var count: Int32; &type: DataType; var indices: pointer; drawcount: Int32);
    external 'opengl32.dll' name 'glMultiDrawElements';
    public static procedure MultiDrawElements(mode: PrimitiveType; count: pointer; &type: DataType; indices: pointer; drawcount: Int32);
    external 'opengl32.dll' name 'glMultiDrawElements';
    
    public static procedure DrawRangeElements(mode: PrimitiveType; start: UInt32; &end: UInt32; count: Int32; &type: DataType; [MarshalAs(UnmanagedType.LPArray)] indices: array of UInt32);
    external 'opengl32.dll' name 'glDrawRangeElements';
    public static procedure DrawRangeElements(mode: PrimitiveType; start: UInt32; &end: UInt32; count: Int32; &type: DataType; var indices: UInt32);
    external 'opengl32.dll' name 'glDrawRangeElements';
    public static procedure DrawRangeElements(mode: PrimitiveType; start: UInt32; &end: UInt32; count: Int32; &type: DataType; [MarshalAs(UnmanagedType.LPArray)] indices: array of UInt16);
    external 'opengl32.dll' name 'glDrawRangeElements';
    public static procedure DrawRangeElements(mode: PrimitiveType; start: UInt32; &end: UInt32; count: Int32; &type: DataType; var indices: UInt16);
    external 'opengl32.dll' name 'glDrawRangeElements';
    public static procedure DrawRangeElements(mode: PrimitiveType; start: UInt32; &end: UInt32; count: Int32; &type: DataType; [MarshalAs(UnmanagedType.LPArray)] indices: array of Byte);
    external 'opengl32.dll' name 'glDrawRangeElements';
    public static procedure DrawRangeElements(mode: PrimitiveType; start: UInt32; &end: UInt32; count: Int32; &type: DataType; var indices: Byte);
    external 'opengl32.dll' name 'glDrawRangeElements';
    public static procedure DrawRangeElements(mode: PrimitiveType; start: UInt32; &end: UInt32; count: Int32; &type: DataType; indices: pointer);
    external 'opengl32.dll' name 'glDrawRangeElements';
    
    public static procedure DrawElementsBaseVertex(mode: PrimitiveType; count: Int32; &type: DataType; [MarshalAs(UnmanagedType.LPArray)] indices: array of UInt32; basevertex: Int32);
    external 'opengl32.dll' name 'glDrawElementsBaseVertex';
    public static procedure DrawElementsBaseVertex(mode: PrimitiveType; count: Int32; &type: DataType; var indices: UInt32; basevertex: Int32);
    external 'opengl32.dll' name 'glDrawElementsBaseVertex';
    public static procedure DrawElementsBaseVertex(mode: PrimitiveType; count: Int32; &type: DataType; [MarshalAs(UnmanagedType.LPArray)] indices: array of UInt16; basevertex: Int32);
    external 'opengl32.dll' name 'glDrawElementsBaseVertex';
    public static procedure DrawElementsBaseVertex(mode: PrimitiveType; count: Int32; &type: DataType; var indices: UInt16; basevertex: Int32);
    external 'opengl32.dll' name 'glDrawElementsBaseVertex';
    public static procedure DrawElementsBaseVertex(mode: PrimitiveType; count: Int32; &type: DataType; [MarshalAs(UnmanagedType.LPArray)] indices: array of Byte; basevertex: Int32);
    external 'opengl32.dll' name 'glDrawElementsBaseVertex';
    public static procedure DrawElementsBaseVertex(mode: PrimitiveType; count: Int32; &type: DataType; var indices: Byte; basevertex: Int32);
    external 'opengl32.dll' name 'glDrawElementsBaseVertex';
    public static procedure DrawElementsBaseVertex(mode: PrimitiveType; count: Int32; &type: DataType; indices: pointer; basevertex: Int32);
    external 'opengl32.dll' name 'glDrawElementsBaseVertex';
    
    public static procedure DrawRangeElementsBaseVertex(mode: PrimitiveType; start: UInt32; &end: UInt32; count: Int32; &type: DataType; [MarshalAs(UnmanagedType.LPArray)] indices: array of UInt32; basevertex: Int32);
    external 'opengl32.dll' name 'glDrawRangeElementsBaseVertex';
    public static procedure DrawRangeElementsBaseVertex(mode: PrimitiveType; start: UInt32; &end: UInt32; count: Int32; &type: DataType; var indices: UInt32; basevertex: Int32);
    external 'opengl32.dll' name 'glDrawRangeElementsBaseVertex';
    public static procedure DrawRangeElementsBaseVertex(mode: PrimitiveType; start: UInt32; &end: UInt32; count: Int32; &type: DataType; [MarshalAs(UnmanagedType.LPArray)] indices: array of UInt16; basevertex: Int32);
    external 'opengl32.dll' name 'glDrawRangeElementsBaseVertex';
    public static procedure DrawRangeElementsBaseVertex(mode: PrimitiveType; start: UInt32; &end: UInt32; count: Int32; &type: DataType; var indices: UInt16; basevertex: Int32);
    external 'opengl32.dll' name 'glDrawRangeElementsBaseVertex';
    public static procedure DrawRangeElementsBaseVertex(mode: PrimitiveType; start: UInt32; &end: UInt32; count: Int32; &type: DataType; [MarshalAs(UnmanagedType.LPArray)] indices: array of Byte; basevertex: Int32);
    external 'opengl32.dll' name 'glDrawRangeElementsBaseVertex';
    public static procedure DrawRangeElementsBaseVertex(mode: PrimitiveType; start: UInt32; &end: UInt32; count: Int32; &type: DataType; var indices: Byte; basevertex: Int32);
    external 'opengl32.dll' name 'glDrawRangeElementsBaseVertex';
    public static procedure DrawRangeElementsBaseVertex(mode: PrimitiveType; start: UInt32; &end: UInt32; count: Int32; &type: DataType; indices: pointer; basevertex: Int32);
    external 'opengl32.dll' name 'glDrawRangeElementsBaseVertex';
    
    public static procedure DrawElementsInstancedBaseVertex(mode: PrimitiveType; count: Int32; &type: DataType; [MarshalAs(UnmanagedType.LPArray)] indices: array of UInt32; instancecount: Int32; basevertex: Int32);
    external 'opengl32.dll' name 'glDrawElementsInstancedBaseVertex';
    public static procedure DrawElementsInstancedBaseVertex(mode: PrimitiveType; count: Int32; &type: DataType; var indices: UInt32; instancecount: Int32; basevertex: Int32);
    external 'opengl32.dll' name 'glDrawElementsInstancedBaseVertex';
    public static procedure DrawElementsInstancedBaseVertex(mode: PrimitiveType; count: Int32; &type: DataType; [MarshalAs(UnmanagedType.LPArray)] indices: array of UInt16; instancecount: Int32; basevertex: Int32);
    external 'opengl32.dll' name 'glDrawElementsInstancedBaseVertex';
    public static procedure DrawElementsInstancedBaseVertex(mode: PrimitiveType; count: Int32; &type: DataType; var indices: UInt16; instancecount: Int32; basevertex: Int32);
    external 'opengl32.dll' name 'glDrawElementsInstancedBaseVertex';
    public static procedure DrawElementsInstancedBaseVertex(mode: PrimitiveType; count: Int32; &type: DataType; [MarshalAs(UnmanagedType.LPArray)] indices: array of Byte; instancecount: Int32; basevertex: Int32);
    external 'opengl32.dll' name 'glDrawElementsInstancedBaseVertex';
    public static procedure DrawElementsInstancedBaseVertex(mode: PrimitiveType; count: Int32; &type: DataType; var indices: Byte; instancecount: Int32; basevertex: Int32);
    external 'opengl32.dll' name 'glDrawElementsInstancedBaseVertex';
    public static procedure DrawElementsInstancedBaseVertex(mode: PrimitiveType; count: Int32; &type: DataType; indices: pointer; instancecount: Int32; basevertex: Int32);
    external 'opengl32.dll' name 'glDrawElementsInstancedBaseVertex';
    
    public static procedure DrawElementsInstancedBaseVertexBaseInstance(mode: PrimitiveType; count: Int32; &type: DataType; [MarshalAs(UnmanagedType.LPArray)] indices: array of UInt32; instancecount: Int32; basevertex: Int32; baseinstance: UInt32);
    external 'opengl32.dll' name 'glDrawElementsInstancedBaseVertexBaseInstance';
    public static procedure DrawElementsInstancedBaseVertexBaseInstance(mode: PrimitiveType; count: Int32; &type: DataType; var indices: UInt32; instancecount: Int32; basevertex: Int32; baseinstance: UInt32);
    external 'opengl32.dll' name 'glDrawElementsInstancedBaseVertexBaseInstance';
    public static procedure DrawElementsInstancedBaseVertexBaseInstance(mode: PrimitiveType; count: Int32; &type: DataType; [MarshalAs(UnmanagedType.LPArray)] indices: array of UInt16; instancecount: Int32; basevertex: Int32; baseinstance: UInt32);
    external 'opengl32.dll' name 'glDrawElementsInstancedBaseVertexBaseInstance';
    public static procedure DrawElementsInstancedBaseVertexBaseInstance(mode: PrimitiveType; count: Int32; &type: DataType; var indices: UInt16; instancecount: Int32; basevertex: Int32; baseinstance: UInt32);
    external 'opengl32.dll' name 'glDrawElementsInstancedBaseVertexBaseInstance';
    public static procedure DrawElementsInstancedBaseVertexBaseInstance(mode: PrimitiveType; count: Int32; &type: DataType; [MarshalAs(UnmanagedType.LPArray)] indices: array of Byte; instancecount: Int32; basevertex: Int32; baseinstance: UInt32);
    external 'opengl32.dll' name 'glDrawElementsInstancedBaseVertexBaseInstance';
    public static procedure DrawElementsInstancedBaseVertexBaseInstance(mode: PrimitiveType; count: Int32; &type: DataType; var indices: Byte; instancecount: Int32; basevertex: Int32; baseinstance: UInt32);
    external 'opengl32.dll' name 'glDrawElementsInstancedBaseVertexBaseInstance';
    public static procedure DrawElementsInstancedBaseVertexBaseInstance(mode: PrimitiveType; count: Int32; &type: DataType; indices: pointer; instancecount: Int32; basevertex: Int32; baseinstance: UInt32);
    external 'opengl32.dll' name 'glDrawElementsInstancedBaseVertexBaseInstance';
    
    public static procedure DrawElementsIndirect(mode: PrimitiveType; &type: DataType; var indirect: DrawArraysIndirectCommand);
    external 'opengl32.dll' name 'glDrawElementsIndirect';
    public static procedure DrawElementsIndirect(mode: PrimitiveType; &type: DataType; indirect: pointer);
    external 'opengl32.dll' name 'glDrawElementsIndirect';
    
    public static procedure MultiDrawElementsIndirect(mode: PrimitiveType; &type: DataType; var indirect: DrawArraysIndirectCommand; drawcount: Int32; stride: Int32);
    external 'opengl32.dll' name 'glMultiDrawElementsIndirect';
    public static procedure MultiDrawElementsIndirect(mode: PrimitiveType; &type: DataType; indirect: pointer; drawcount: Int32; stride: Int32);
    external 'opengl32.dll' name 'glMultiDrawElementsIndirect';
    
    public static procedure MultiDrawElementsIndirectCount(mode: PrimitiveType; &type: DataType; var indirect: DrawArraysIndirectCommand; drawcount: IntPtr; maxdrawcount: Int32; stride: Int32);
    external 'opengl32.dll' name 'glMultiDrawElementsIndirectCount';
    public static procedure MultiDrawElementsIndirectCount(mode: PrimitiveType; &type: DataType; indirect: pointer; drawcount: IntPtr; maxdrawcount: Int32; stride: Int32);
    external 'opengl32.dll' name 'glMultiDrawElementsIndirectCount';
    
    public static procedure MultiDrawElementsBaseVertex(mode: PrimitiveType; [MarshalAs(UnmanagedType.LPArray)] count: array of Int32; &type: DataType; [MarshalAs(UnmanagedType.LPArray, ArraySubType = UnmanagedType.LPArray)] indices: array of array of UInt32; drawcount: Int32; [MarshalAs(UnmanagedType.LPArray)] basevertex: array of Int32);
    external 'opengl32.dll' name 'glMultiDrawElementsBaseVertex';
    public static procedure MultiDrawElementsBaseVertex(mode: PrimitiveType; [MarshalAs(UnmanagedType.LPArray)] count: array of Int32; &type: DataType; [MarshalAs(UnmanagedType.LPArray, ArraySubType = UnmanagedType.LPArray)] indices: array of array of UInt16; drawcount: Int32; [MarshalAs(UnmanagedType.LPArray)] basevertex: array of Int32);
    external 'opengl32.dll' name 'glMultiDrawElementsBaseVertex';
    public static procedure MultiDrawElementsBaseVertex(mode: PrimitiveType; [MarshalAs(UnmanagedType.LPArray)] count: array of Int32; &type: DataType; [MarshalAs(UnmanagedType.LPArray, ArraySubType = UnmanagedType.LPArray)] indices: array of array of Byte; drawcount: Int32; [MarshalAs(UnmanagedType.LPArray)] basevertex: array of Int32);
    external 'opengl32.dll' name 'glMultiDrawElementsBaseVertex';
    public static procedure MultiDrawElementsBaseVertex(mode: PrimitiveType; [MarshalAs(UnmanagedType.LPArray)] count: array of Int32; &type: DataType; [MarshalAs(UnmanagedType.LPArray)] indices: array of IntPtr; drawcount: Int32; var basevertex: Int32);
    external 'opengl32.dll' name 'glMultiDrawElementsBaseVertex';
    public static procedure MultiDrawElementsBaseVertex(mode: PrimitiveType; var count: Int32; &type: DataType; [MarshalAs(UnmanagedType.SysInt, ArraySubType = UnmanagedType.LPArray)] var indices: array of UInt32; drawcount: Int32; var basevertex: Int32);
    external 'opengl32.dll' name 'glMultiDrawElementsBaseVertex';
    public static procedure MultiDrawElementsBaseVertex(mode: PrimitiveType; var count: Int32; &type: DataType; [MarshalAs(UnmanagedType.SysInt, ArraySubType = UnmanagedType.LPArray)] var indices: array of UInt16; drawcount: Int32; var basevertex: Int32);
    external 'opengl32.dll' name 'glMultiDrawElementsBaseVertex';
    public static procedure MultiDrawElementsBaseVertex(mode: PrimitiveType; var count: Int32; &type: DataType; [MarshalAs(UnmanagedType.SysInt, ArraySubType = UnmanagedType.LPArray)] var indices: array of Byte; drawcount: Int32; var basevertex: Int32);
    external 'opengl32.dll' name 'glMultiDrawElementsBaseVertex';
    public static procedure MultiDrawElementsBaseVertex(mode: PrimitiveType; var count: Int32; &type: DataType; var indices: IntPtr; drawcount: Int32; var basevertex: Int32);
    external 'opengl32.dll' name 'glMultiDrawElementsBaseVertex';
    public static procedure MultiDrawElementsBaseVertex(mode: PrimitiveType; var count: Int32; &type: DataType; var indices: pointer; drawcount: Int32; var basevertex: Int32);
    external 'opengl32.dll' name 'glMultiDrawElementsBaseVertex';
    public static procedure MultiDrawElementsBaseVertex(mode: PrimitiveType; count: pointer; &type: DataType; indices: pointer; drawcount: Int32; basevertex: pointer);
    external 'opengl32.dll' name 'glMultiDrawElementsBaseVertex';
    
    {$endregion 10.4 - Drawing Commands Using Vertex Arrays}
    
    {$region 10.5 - Vertex Array and Vertex Array Object Queries}
    
    public static procedure GetVertexArrayiv(vaobj: VertexArrayName; pname: VertexAttribInfoType; var param: BufferName);
    external 'opengl32.dll' name 'glGetVertexArrayiv';
    public static procedure GetVertexArrayiv(vaobj: VertexArrayName; pname: VertexAttribInfoType; var param: Int32);
    external 'opengl32.dll' name 'glGetVertexArrayiv';
    public static procedure GetVertexArrayiv(vaobj: VertexArrayName; pname: VertexAttribInfoType; param: pointer);
    external 'opengl32.dll' name 'glGetVertexArrayiv';
    
    public static procedure GetVertexArrayIndexediv(vaobj: VertexArrayName; index: UInt32; pname: VertexAttribInfoType; var param: Int32);
    external 'opengl32.dll' name 'glGetVertexArrayIndexediv';
    public static procedure GetVertexArrayIndexediv(vaobj: VertexArrayName; index: UInt32; pname: VertexAttribInfoType; var param: DataType);
    external 'opengl32.dll' name 'glGetVertexArrayIndexediv';
    public static procedure GetVertexArrayIndexediv(vaobj: VertexArrayName; index: UInt32; pname: VertexAttribInfoType; param: pointer);
    external 'opengl32.dll' name 'glGetVertexArrayIndexediv';
    
    public static procedure GetVertexArrayIndexed64iv(vaobj: VertexArrayName; index: UInt32; pname: VertexAttribInfoType; var param: Int64);
    external 'opengl32.dll' name 'glGetVertexArrayIndexed64iv';
    public static procedure GetVertexArrayIndexed64iv(vaobj: VertexArrayName; index: UInt32; pname: VertexAttribInfoType; param: pointer);
    external 'opengl32.dll' name 'glGetVertexArrayIndexed64iv';
    
    public static procedure GetVertexAttribdv(index: UInt32; pname: VertexAttribInfoType; [MarshalAs(UnmanagedType.LPArray)] &params: array of double);
    external 'opengl32.dll' name 'glGetVertexAttribdv';
    public static procedure GetVertexAttribdv(index: UInt32; pname: VertexAttribInfoType; var &params: double);
    external 'opengl32.dll' name 'glGetVertexAttribdv';
    public static procedure GetVertexAttribdv(index: UInt32; pname: VertexAttribInfoType; var &params: Vec4d);
    external 'opengl32.dll' name 'glGetVertexAttribdv';
    public static procedure GetVertexAttribdv(index: UInt32; pname: VertexAttribInfoType; &params: pointer);
    external 'opengl32.dll' name 'glGetVertexAttribdv';
    
    public static procedure GetVertexAttribfv(index: UInt32; pname: VertexAttribInfoType; [MarshalAs(UnmanagedType.LPArray)] &params: array of single);
    external 'opengl32.dll' name 'glGetVertexAttribfv';
    public static procedure GetVertexAttribfv(index: UInt32; pname: VertexAttribInfoType; var &params: single);
    external 'opengl32.dll' name 'glGetVertexAttribfv';
    public static procedure GetVertexAttribfv(index: UInt32; pname: VertexAttribInfoType; var &params: Vec4f);
    external 'opengl32.dll' name 'glGetVertexAttribfv';
    public static procedure GetVertexAttribfv(index: UInt32; pname: VertexAttribInfoType; &params: pointer);
    external 'opengl32.dll' name 'glGetVertexAttribfv';
    
    public static procedure GetVertexAttribiv(index: UInt32; pname: VertexAttribInfoType; var &params: BufferName);
    external 'opengl32.dll' name 'glGetVertexAttribiv';
    public static procedure GetVertexAttribiv(index: UInt32; pname: VertexAttribInfoType; var &params: DataType);
    external 'opengl32.dll' name 'glGetVertexAttribiv';
    public static procedure GetVertexAttribiv(index: UInt32; pname: VertexAttribInfoType; [MarshalAs(UnmanagedType.LPArray)] &params: array of Int32);
    external 'opengl32.dll' name 'glGetVertexAttribiv';
    public static procedure GetVertexAttribiv(index: UInt32; pname: VertexAttribInfoType; var &params: Int32);
    external 'opengl32.dll' name 'glGetVertexAttribiv';
    public static procedure GetVertexAttribiv(index: UInt32; pname: VertexAttribInfoType; var &params: Vec4i);
    external 'opengl32.dll' name 'glGetVertexAttribiv';
    public static procedure GetVertexAttribiv(index: UInt32; pname: VertexAttribInfoType; &params: pointer);
    external 'opengl32.dll' name 'glGetVertexAttribiv';
    
    public static procedure GetVertexAttribIiv(index: UInt32; pname: VertexAttribInfoType; var &params: BufferName);
    external 'opengl32.dll' name 'glGetVertexAttribIiv';
    public static procedure GetVertexAttribIiv(index: UInt32; pname: VertexAttribInfoType; var &params: DataType);
    external 'opengl32.dll' name 'glGetVertexAttribIiv';
    public static procedure GetVertexAttribIiv(index: UInt32; pname: VertexAttribInfoType; [MarshalAs(UnmanagedType.LPArray)] &params: array of Int32);
    external 'opengl32.dll' name 'glGetVertexAttribIiv';
    public static procedure GetVertexAttribIiv(index: UInt32; pname: VertexAttribInfoType; var &params: Int32);
    external 'opengl32.dll' name 'glGetVertexAttribIiv';
    public static procedure GetVertexAttribIiv(index: UInt32; pname: VertexAttribInfoType; var &params: Vec4i);
    external 'opengl32.dll' name 'glGetVertexAttribIiv';
    public static procedure GetVertexAttribIiv(index: UInt32; pname: VertexAttribInfoType; &params: pointer);
    external 'opengl32.dll' name 'glGetVertexAttribIiv';
    
    public static procedure GetVertexAttribIuiv(index: UInt32; pname: VertexAttribInfoType; var &params: DataType);
    external 'opengl32.dll' name 'glGetVertexAttribIuiv';
    public static procedure GetVertexAttribIuiv(index: UInt32; pname: VertexAttribInfoType; [MarshalAs(UnmanagedType.LPArray)] &params: array of UInt32);
    external 'opengl32.dll' name 'glGetVertexAttribIuiv';
    public static procedure GetVertexAttribIuiv(index: UInt32; pname: VertexAttribInfoType; var &params: UInt32);
    external 'opengl32.dll' name 'glGetVertexAttribIuiv';
    public static procedure GetVertexAttribIuiv(index: UInt32; pname: VertexAttribInfoType; var &params: Vec4ui);
    external 'opengl32.dll' name 'glGetVertexAttribIuiv';
    public static procedure GetVertexAttribIuiv(index: UInt32; pname: VertexAttribInfoType; &params: pointer);
    external 'opengl32.dll' name 'glGetVertexAttribIuiv';
    
    public static procedure GetVertexAttribLdv(index: UInt32; pname: VertexAttribInfoType; [MarshalAs(UnmanagedType.LPArray)] &params: array of double);
    external 'opengl32.dll' name 'glGetVertexAttribLdv';
    public static procedure GetVertexAttribLdv(index: UInt32; pname: VertexAttribInfoType; var &params: double);
    external 'opengl32.dll' name 'glGetVertexAttribLdv';
    public static procedure GetVertexAttribLdv(index: UInt32; pname: VertexAttribInfoType; var &params: Vec4d);
    external 'opengl32.dll' name 'glGetVertexAttribLdv';
    public static procedure GetVertexAttribLdv(index: UInt32; pname: VertexAttribInfoType; &params: pointer);
    external 'opengl32.dll' name 'glGetVertexAttribLdv';
    
    public static procedure GetVertexAttribPointerv(index: UInt32; pname: UInt32; [MarshalAs(UnmanagedType.LPArray)] _pointer: array of IntPtr);
    external 'opengl32.dll' name 'glGetVertexAttribPointerv';
    public static procedure GetVertexAttribPointerv(index: UInt32; pname: UInt32; var _pointer: IntPtr);
    external 'opengl32.dll' name 'glGetVertexAttribPointerv';
    public static procedure GetVertexAttribPointerv(index: UInt32; pname: UInt32; var _pointer: pointer);
    external 'opengl32.dll' name 'glGetVertexAttribPointerv';
    public static procedure GetVertexAttribPointerv(index: UInt32; pname: UInt32; _pointer: ^IntPtr);
    external 'opengl32.dll' name 'glGetVertexAttribPointerv';
    
    {$endregion 10.5 - Vertex Array and Vertex Array Object Queries}
    
    {$region 10.9 - Conditional Rendering}
    
    public static procedure BeginConditionalRender(id: UInt32; mode: ConditionalRenderingMode);
    external 'opengl32.dll' name 'glBeginConditionalRender';
    
    public static procedure EndConditionalRender;
    external 'opengl32.dll' name 'glEndConditionalRender';
    
    {$endregion 10.9 - Conditional Rendering}
    
    {$endregion 10.0 - Vertex Specification and Drawing Commands}
    
    {$region 11.0 - Programmable Vertex Processing}
    
    {$region 11.1 - Vertex Shaders}
    
    // 11.1.1
    
    public static procedure BindAttribLocation(&program: ProgramName; index: UInt32; [MarshalAs(UnmanagedType.LPStr)] name: string);
    external 'opengl32.dll' name 'glBindAttribLocation';
    public static procedure BindAttribLocation(&program: ProgramName; index: UInt32; name: IntPtr);
    external 'opengl32.dll' name 'glBindAttribLocation';
    
    public static procedure GetActiveAttrib(&program: ProgramName; index: UInt32; bufSize: Int32; var length: Int32; var size: Int32; var &type: ProgramVarType; [MarshalAs(UnmanagedType.LPStr)] name: string);
    external 'opengl32.dll' name 'glGetActiveAttrib';
    public static procedure GetActiveAttrib(&program: ProgramName; index: UInt32; bufSize: Int32; var length: Int32; var size: Int32; var &type: ProgramVarType; name: IntPtr);
    external 'opengl32.dll' name 'glGetActiveAttrib';
    public static procedure GetActiveAttrib(&program: ProgramName; index: UInt32; bufSize: Int32; var length: Int32; var size: Int32; &type: pointer; [MarshalAs(UnmanagedType.LPStr)] name: string);
    external 'opengl32.dll' name 'glGetActiveAttrib';
    public static procedure GetActiveAttrib(&program: ProgramName; index: UInt32; bufSize: Int32; var length: Int32; var size: Int32; &type: pointer; name: IntPtr);
    external 'opengl32.dll' name 'glGetActiveAttrib';
    public static procedure GetActiveAttrib(&program: ProgramName; index: UInt32; bufSize: Int32; length: pointer; size: pointer; var &type: ProgramVarType; [MarshalAs(UnmanagedType.LPStr)] name: string);
    external 'opengl32.dll' name 'glGetActiveAttrib';
    public static procedure GetActiveAttrib(&program: ProgramName; index: UInt32; bufSize: Int32; length: pointer; size: pointer; var &type: ProgramVarType; name: IntPtr);
    external 'opengl32.dll' name 'glGetActiveAttrib';
    public static procedure GetActiveAttrib(&program: ProgramName; index: UInt32; bufSize: Int32; length: pointer; size: pointer; &type: pointer; [MarshalAs(UnmanagedType.LPStr)] name: string);
    external 'opengl32.dll' name 'glGetActiveAttrib';
    public static procedure GetActiveAttrib(&program: ProgramName; index: UInt32; bufSize: Int32; length: pointer; size: pointer; &type: pointer; name: IntPtr);
    external 'opengl32.dll' name 'glGetActiveAttrib';
    
    public static function GetAttribLocation(&program: ProgramName; [MarshalAs(UnmanagedType.LPStr)] name: string): Int32;
    external 'opengl32.dll' name 'glGetAttribLocation';
    public static function GetAttribLocation(&program: ProgramName; name: IntPtr): Int32;
    external 'opengl32.dll' name 'glGetAttribLocation';
    
    //11.1.2
    
    //11.1.2.1
    
    public static procedure TransformFeedbackVaryings(&program: ProgramName; count: Int32; [MarshalAs(UnmanagedType.LPArray, ArraySubType = UnmanagedType.LPStr)] varyings: array of string; bufferMode: TransformFeedbackBufferMode);
    external 'opengl32.dll' name 'glTransformFeedbackVaryings';
    public static procedure TransformFeedbackVaryings(&program: ProgramName; count: Int32; [MarshalAs(UnmanagedType.SysInt, ArraySubType = UnmanagedType.LPStr)] var varyings: string; bufferMode: TransformFeedbackBufferMode);
    external 'opengl32.dll' name 'glTransformFeedbackVaryings';
    public static procedure TransformFeedbackVaryings(&program: ProgramName; count: Int32; var varyings: IntPtr; bufferMode: TransformFeedbackBufferMode);
    external 'opengl32.dll' name 'glTransformFeedbackVaryings';
    public static procedure TransformFeedbackVaryings(&program: ProgramName; count: Int32; varyings: pointer; bufferMode: TransformFeedbackBufferMode);
    external 'opengl32.dll' name 'glTransformFeedbackVaryings';
    
    public static procedure GetTransformFeedbackVarying(&program: ProgramName; index: UInt32; bufSize: Int32; var length: Int32; var size: Int32; var &type: ProgramVarType; [MarshalAs(UnmanagedType.LPStr)] name: string);
    external 'opengl32.dll' name 'glGetTransformFeedbackVarying';
    public static procedure GetTransformFeedbackVarying(&program: ProgramName; index: UInt32; bufSize: Int32; var length: Int32; var size: Int32; var &type: ProgramVarType; name: IntPtr);
    external 'opengl32.dll' name 'glGetTransformFeedbackVarying';
    public static procedure GetTransformFeedbackVarying(&program: ProgramName; index: UInt32; bufSize: Int32; var length: Int32; var size: Int32; &type: pointer; [MarshalAs(UnmanagedType.LPStr)] name: string);
    external 'opengl32.dll' name 'glGetTransformFeedbackVarying';
    public static procedure GetTransformFeedbackVarying(&program: ProgramName; index: UInt32; bufSize: Int32; var length: Int32; var size: Int32; &type: pointer; name: IntPtr);
    external 'opengl32.dll' name 'glGetTransformFeedbackVarying';
    public static procedure GetTransformFeedbackVarying(&program: ProgramName; index: UInt32; bufSize: Int32; length: pointer; size: pointer; var &type: ProgramVarType; [MarshalAs(UnmanagedType.LPStr)] name: string);
    external 'opengl32.dll' name 'glGetTransformFeedbackVarying';
    public static procedure GetTransformFeedbackVarying(&program: ProgramName; index: UInt32; bufSize: Int32; length: pointer; size: pointer; var &type: ProgramVarType; name: IntPtr);
    external 'opengl32.dll' name 'glGetTransformFeedbackVarying';
    public static procedure GetTransformFeedbackVarying(&program: ProgramName; index: UInt32; bufSize: Int32; length: pointer; size: pointer; &type: pointer; [MarshalAs(UnmanagedType.LPStr)] name: string);
    external 'opengl32.dll' name 'glGetTransformFeedbackVarying';
    public static procedure GetTransformFeedbackVarying(&program: ProgramName; index: UInt32; bufSize: Int32; length: pointer; size: pointer; &type: pointer; name: IntPtr);
    external 'opengl32.dll' name 'glGetTransformFeedbackVarying';
    
    //11.1.3
    
    //11.1.3.11
    
    public static procedure ValidateProgram(&program: ProgramName);
    external 'opengl32.dll' name 'glValidateProgram';
    
    public static procedure ValidateProgramPipeline(pipeline: ProgramPipelineName);
    external 'opengl32.dll' name 'glValidateProgramPipeline';
    
    {$endregion 11.1 - Vertex Shaders}
    
    {$region 11.2 - Tessellation}
    
    // 11.2.2
    
    public static procedure PatchParameterfv(pname: PatchMode; var values: Vec2f);
    external 'opengl32.dll' name 'glPatchParameterfv';
    public static procedure PatchParameterfv(pname: PatchMode; var values: Vec4f);
    external 'opengl32.dll' name 'glPatchParameterfv';
    public static procedure PatchParameterfv(pname: PatchMode; [MarshalAs(UnmanagedType.LPArray)] values: array of single);
    external 'opengl32.dll' name 'glPatchParameterfv';
    public static procedure PatchParameterfv(pname: PatchMode; var values: single);
    external 'opengl32.dll' name 'glPatchParameterfv';
    public static procedure PatchParameterfv(pname: PatchMode; values: pointer);
    external 'opengl32.dll' name 'glPatchParameterfv';
    
    {$endregion 11.2 - Tessellation}
    
    {$endregion 11.0 - Programmable Vertex Processing}
    
    {$region 13.0 - Fixed-Function Vertex Post-Processing}
    
    {$region 13.3 - Transform Feedback}
    
    // 13.3.1
    
    public static procedure GenTransformFeedbacks(n: Int32; [MarshalAs(UnmanagedType.LPArray)] ids: array of TransformFeedbackName);
    external 'opengl32.dll' name 'glGenTransformFeedbacks';
    public static procedure GenTransformFeedbacks(n: Int32; var ids: TransformFeedbackName);
    external 'opengl32.dll' name 'glGenTransformFeedbacks';
    public static procedure GenTransformFeedbacks(n: Int32; ids: pointer);
    external 'opengl32.dll' name 'glGenTransformFeedbacks';
    
    public static procedure DeleteTransformFeedbacks(n: Int32; [MarshalAs(UnmanagedType.LPArray)] ids: array of TransformFeedbackName);
    external 'opengl32.dll' name 'glDeleteTransformFeedbacks';
    public static procedure DeleteTransformFeedbacks(n: Int32; var ids: TransformFeedbackName);
    external 'opengl32.dll' name 'glDeleteTransformFeedbacks';
    public static procedure DeleteTransformFeedbacks(n: Int32; ids: pointer);
    external 'opengl32.dll' name 'glDeleteTransformFeedbacks';
    
    public static function IsTransformFeedback(id: TransformFeedbackName): boolean;
    external 'opengl32.dll' name 'glIsTransformFeedback';
    
    public static procedure BindTransformFeedback(target: TransformFeedbackBindTarget; id: TransformFeedbackName);
    external 'opengl32.dll' name 'glBindTransformFeedback';
    
    public static procedure CreateTransformFeedbacks(n: Int32; [MarshalAs(UnmanagedType.LPArray)] ids: array of TransformFeedbackName);
    external 'opengl32.dll' name 'glCreateTransformFeedbacks';
    public static procedure CreateTransformFeedbacks(n: Int32; var ids: TransformFeedbackName);
    external 'opengl32.dll' name 'glCreateTransformFeedbacks';
    public static procedure CreateTransformFeedbacks(n: Int32; ids: pointer);
    external 'opengl32.dll' name 'glCreateTransformFeedbacks';
    
    // 13.3.2
    
    public static procedure BeginTransformFeedback(primitiveMode: PrimitiveType);
    external 'opengl32.dll' name 'glBeginTransformFeedback';
    
    public static procedure EndTransformFeedback;
    external 'opengl32.dll' name 'glEndTransformFeedback';
    
    public static procedure PauseTransformFeedback;
    external 'opengl32.dll' name 'glPauseTransformFeedback';
    
    public static procedure ResumeTransformFeedback;
    external 'opengl32.dll' name 'glResumeTransformFeedback';
    
    public static procedure TransformFeedbackBufferRange(xfb: TransformFeedbackName; index: UInt32; buffer: BufferName; offset: IntPtr; size: UIntPtr);
    external 'opengl32.dll' name 'glTransformFeedbackBufferRange';
    
    public static procedure TransformFeedbackBufferBase(xfb: TransformFeedbackName; index: UInt32; buffer: BufferName);
    external 'opengl32.dll' name 'glTransformFeedbackBufferBase';
    
    // 13.3.3
    
    public static procedure DrawTransformFeedback(mode: PrimitiveType; id: TransformFeedbackName);
    external 'opengl32.dll' name 'glDrawTransformFeedback';
    
    public static procedure DrawTransformFeedbackInstanced(mode: PrimitiveType; id: TransformFeedbackName; instancecount: Int32);
    external 'opengl32.dll' name 'glDrawTransformFeedbackInstanced';
    
    public static procedure DrawTransformFeedbackStream(mode: PrimitiveType; id: TransformFeedbackName; stream: UInt32);
    external 'opengl32.dll' name 'glDrawTransformFeedbackStream';
    
    public static procedure DrawTransformFeedbackStreamInstanced(mode: PrimitiveType; id: TransformFeedbackName; stream: UInt32; instancecount: Int32);
    external 'opengl32.dll' name 'glDrawTransformFeedbackStreamInstanced';
    
    {$endregion 13.3 - Transform Feedback}
    
    {$region 13.6 - Flatshading}
    
    public static procedure ProvokingVertex(mode: VertexProvokingMode);
    external 'opengl32.dll' name 'glProvokingVertex';
    
    {$endregion 13.6 - Flatshading}
    
    {$region 13.7 - Primitive Clipping}
    
    public static procedure ClipControl(origin: ClipOriginMode; depth: ClipDepthMode);
    external 'opengl32.dll' name 'glClipControl';
    
    {$endregion 13.7 - Primitive Clipping}
    
    {$region 13.8 - Coordinate Transformations}
    
    // 13.8.1
    
    public static procedure DepthRangeArrayv(first: UInt32; count: Int32; [MarshalAs(UnmanagedType.LPArray)] v: array of Vec2d);
    external 'opengl32.dll' name 'glDepthRangeArrayv';
    public static procedure DepthRangeArrayv(first: UInt32; count: Int32; var v: Vec2d);
    external 'opengl32.dll' name 'glDepthRangeArrayv';
    public static procedure DepthRangeArrayv(first: UInt32; count: Int32; [MarshalAs(UnmanagedType.LPArray)] v: array of double);
    external 'opengl32.dll' name 'glDepthRangeArrayv';
    public static procedure DepthRangeArrayv(first: UInt32; count: Int32; var v: double);
    external 'opengl32.dll' name 'glDepthRangeArrayv';
    public static procedure DepthRangeArrayv(first: UInt32; count: Int32; v: pointer);
    external 'opengl32.dll' name 'glDepthRangeArrayv';
    
    public static procedure DepthRangeIndexed(index: UInt32; nearVal: double; farVal: double);
    external 'opengl32.dll' name 'glDepthRangeIndexed';
    
    public static procedure DepthRange(nearVal: double; farVal: double);
    external 'opengl32.dll' name 'glDepthRange';
    
    public static procedure DepthRangef(nearVal: single; farVal: single);
    external 'opengl32.dll' name 'glDepthRangef';
    
    public static procedure ViewportArrayv(first: UInt32; count: Int32; [MarshalAs(UnmanagedType.LPArray)] v: array of Vec4f);
    external 'opengl32.dll' name 'glViewportArrayv';
    public static procedure ViewportArrayv(first: UInt32; count: Int32; var v: Vec4f);
    external 'opengl32.dll' name 'glViewportArrayv';
    public static procedure ViewportArrayv(first: UInt32; count: Int32; [MarshalAs(UnmanagedType.LPArray)] v: array of single);
    external 'opengl32.dll' name 'glViewportArrayv';
    public static procedure ViewportArrayv(first: UInt32; count: Int32; var v: single);
    external 'opengl32.dll' name 'glViewportArrayv';
    public static procedure ViewportArrayv(first: UInt32; count: Int32; v: pointer);
    external 'opengl32.dll' name 'glViewportArrayv';
    
    public static procedure ViewportIndexedf(index: UInt32; x: single; y: single; w: single; h: single);
    external 'opengl32.dll' name 'glViewportIndexedf';
    
    public static procedure ViewportIndexedfv(index: UInt32; var v: Vec4f);
    external 'opengl32.dll' name 'glViewportIndexedfv';
    public static procedure ViewportIndexedfv(index: UInt32; [MarshalAs(UnmanagedType.LPArray)] v: array of single);
    external 'opengl32.dll' name 'glViewportIndexedfv';
    public static procedure ViewportIndexedfv(index: UInt32; var v: single);
    external 'opengl32.dll' name 'glViewportIndexedfv';
    public static procedure ViewportIndexedfv(index: UInt32; v: pointer);
    external 'opengl32.dll' name 'glViewportIndexedfv';
    
    public static procedure Viewport(x: Int32; y: Int32; width: Int32; height: Int32);
    external 'opengl32.dll' name 'glViewport';
    
    {$endregion 13.8 - Coordinate Transformations}
    
    {$endregion 13.0 - Fixed-Function Vertex Post-Processing}
    
    {$region 14.0 - Fixed-Function Primitive Assembly and Rasterization}
    
    {$region 14.3 - Antialiasing}
    
    // 14.3.1
    
    public static procedure GetMultisamplefv(pname: MultisampleInfoType; index: UInt32; var val: Vec2f);
    external 'opengl32.dll' name 'glGetMultisamplefv';
    public static procedure GetMultisamplefv(pname: MultisampleInfoType; index: UInt32; [MarshalAs(UnmanagedType.LPArray)] val: array of single);
    external 'opengl32.dll' name 'glGetMultisamplefv';
    public static procedure GetMultisamplefv(pname: MultisampleInfoType; index: UInt32; var val: single);
    external 'opengl32.dll' name 'glGetMultisamplefv';
    public static procedure GetMultisamplefv(pname: MultisampleInfoType; index: UInt32; val: pointer);
    external 'opengl32.dll' name 'glGetMultisamplefv';
    
    // 14.3.1.1
    
    public static procedure MinSampleShading(value: single);
    external 'opengl32.dll' name 'glMinSampleShading';
    
    {$endregion 14.3 - Antialiasing}
    
    {$region 14.4 - Points}
    
    public static procedure PointSize(size: single);
    external 'opengl32.dll' name 'glPointSize';
    
    public static procedure PointParameteri(pname: PointInfoType; param: Int32);
    external 'opengl32.dll' name 'glPointParameteri';
    public static procedure PointParameteri(pname: PointInfoType; param: ClipOriginMode);
    external 'opengl32.dll' name 'glPointParameteri';
    
    public static procedure PointParameterf(pname: PointInfoType; param: single);
    external 'opengl32.dll' name 'glPointParameterf';
    
    public static procedure PointParameteriv(pname: PointInfoType; var &params: Int32);
    external 'opengl32.dll' name 'glPointParameteriv';
    public static procedure PointParameteriv(pname: PointInfoType; &params: pointer);
    external 'opengl32.dll' name 'glPointParameteriv';
    
    public static procedure PointParameterfv(pname: PointInfoType; var &params: single);
    external 'opengl32.dll' name 'glPointParameterfv';
    public static procedure PointParameterfv(pname: PointInfoType; &params: pointer);
    external 'opengl32.dll' name 'glPointParameterfv';
    
    {$endregion 14.4 - Points}
    
    {$region 14.5 - Line Segments}
    
    public static procedure LineWidth(width: single);
    external 'opengl32.dll' name 'glLineWidth';
    
    {$endregion 14.5 - Line Segments}
    
    {$region 14.6 - Polygons}
    
    // 14.6.1
    
    public static procedure FrontFace(mode: FrontFaceDirection);
    external 'opengl32.dll' name 'glFrontFace';
    
    public static procedure CullFace(mode: PolygonFace);
    external 'opengl32.dll' name 'glCullFace';
    
    // 14.6.4
    
    public static procedure PolygonMode(face: PolygonFace; mode: PolygonRasterizationMode);
    external 'opengl32.dll' name 'glPolygonMode';
    
    // 14.6.5
    
    public static procedure PolygonOffsetClamp(factor: single; units: single; clamp: single);
    external 'opengl32.dll' name 'glPolygonOffsetClamp';
    
    public static procedure PolygonOffset(factor: single; units: single);
    external 'opengl32.dll' name 'glPolygonOffset';
    
    {$endregion 14.6 - Polygons}
    
    {$region 14.9 - Early Per-Fragment Tests}
    
    // 14.9.2
    
    public static procedure ScissorArrayv(first: UInt32; count: Int32; [MarshalAs(UnmanagedType.LPArray)] v: array of Vec4i);
    external 'opengl32.dll' name 'glScissorArrayv';
    public static procedure ScissorArrayv(first: UInt32; count: Int32; var v: Vec4i);
    external 'opengl32.dll' name 'glScissorArrayv';
    public static procedure ScissorArrayv(first: UInt32; count: Int32; [MarshalAs(UnmanagedType.LPArray)] v: array of Int32);
    external 'opengl32.dll' name 'glScissorArrayv';
    public static procedure ScissorArrayv(first: UInt32; count: Int32; var v: Int32);
    external 'opengl32.dll' name 'glScissorArrayv';
    public static procedure ScissorArrayv(first: UInt32; count: Int32; v: pointer);
    external 'opengl32.dll' name 'glScissorArrayv';
    
    public static procedure ScissorIndexed(index: UInt32; left: Int32; bottom: Int32; width: Int32; height: Int32);
    external 'opengl32.dll' name 'glScissorIndexed';
    
    public static procedure ScissorIndexedv(index: UInt32; var v: Vec4i);
    external 'opengl32.dll' name 'glScissorIndexedv';
    public static procedure ScissorIndexedv(index: UInt32; [MarshalAs(UnmanagedType.LPArray)] v: array of Int32);
    external 'opengl32.dll' name 'glScissorIndexedv';
    public static procedure ScissorIndexedv(index: UInt32; var v: Int32);
    external 'opengl32.dll' name 'glScissorIndexedv';
    public static procedure ScissorIndexedv(index: UInt32; v: pointer);
    external 'opengl32.dll' name 'glScissorIndexedv';
    
    public static procedure Scissor(x: Int32; y: Int32; width: Int32; height: Int32);
    external 'opengl32.dll' name 'glScissor';
    
    // 14.9.3
    
    public static procedure SampleCoverage(value: single; invert: boolean);
    external 'opengl32.dll' name 'glSampleCoverage';
    
    public static procedure SampleMaski(maskNumber: UInt32; mask: UInt32);
    external 'opengl32.dll' name 'glSampleMaski';
    
    {$endregion 14.9 - Early Per-Fragment Tests}
    
    {$endregion 14.0 - Fixed-Function Primitive Assembly and Rasterization}
    
    {$region 15.0 - Programmable Fragment Processing}
    
    {$region 15.2 - Shader Execution}
    
    // 15.2.3
    
    public static procedure BindFragDataLocationIndexed(&program: ProgramName; colorNumber: UInt32; index: UInt32; [MarshalAs(UnmanagedType.LPStr)] name: string);
    external 'opengl32.dll' name 'glBindFragDataLocationIndexed';
    public static procedure BindFragDataLocationIndexed(&program: ProgramName; colorNumber: UInt32; index: UInt32; name: IntPtr);
    external 'opengl32.dll' name 'glBindFragDataLocationIndexed';
    
    public static procedure BindFragDataLocation(&program: ProgramName; colorNumber: UInt32; [MarshalAs(UnmanagedType.LPStr)] name: string);
    external 'opengl32.dll' name 'glBindFragDataLocation';
    public static procedure BindFragDataLocation(&program: ProgramName; colorNumber: UInt32; name: IntPtr);
    external 'opengl32.dll' name 'glBindFragDataLocation';
    
    public static function GetFragDataLocation(&program: ProgramName; [MarshalAs(UnmanagedType.LPStr)] name: string): Int32;
    external 'opengl32.dll' name 'glGetFragDataLocation';
    public static function GetFragDataLocation(&program: ProgramName; name: IntPtr): Int32;
    external 'opengl32.dll' name 'glGetFragDataLocation';
    
    public static function GetFragDataIndex(&program: ProgramName; [MarshalAs(UnmanagedType.LPStr)] name: string): Int32;
    external 'opengl32.dll' name 'glGetFragDataIndex';
    public static function GetFragDataIndex(&program: ProgramName; name: IntPtr): Int32;
    external 'opengl32.dll' name 'glGetFragDataIndex';
    
    {$endregion 15.2 - Shader Execution}
    
    {$endregion 15.0 - Programmable Fragment Processing}
    
    {$region 17.0 - Writing Fragments and Samples to the Framebuffer}
    
    {$region 17.3 - Per-Fragment Operations}
    
    // 17.3.3
    
    public static procedure StencilFunc(func: ActivationFunc; ref: Int32; mask: UInt32);
    external 'opengl32.dll' name 'glStencilFunc';
    
    public static procedure StencilFuncSeparate(face: PolygonFace; func: ActivationFunc; ref: Int32; mask: UInt32);
    external 'opengl32.dll' name 'glStencilFuncSeparate';
    
    public static procedure StencilOp(fail: StencilOpFailMode; zfail: StencilOpFailMode; zpass: StencilOpFailMode);
    external 'opengl32.dll' name 'glStencilOp';
    
    public static procedure StencilOpSeparate(face: PolygonFace; sfail: StencilOpFailMode; dpfail: StencilOpFailMode; dppass: StencilOpFailMode);
    external 'opengl32.dll' name 'glStencilOpSeparate';
    
    // 17.3.4
    
    public static procedure DepthFunc(func: ActivationFunc);
    external 'opengl32.dll' name 'glDepthFunc';
    
    // 17.3.6
    
    public static procedure Enablei(target: EnablableName; index: UInt32);
    external 'opengl32.dll' name 'glEnablei';
    
    public static procedure Disablei(target: EnablableName; index: UInt32);
    external 'opengl32.dll' name 'glDisablei';
    
    // 17.3.6.1
    
    public static procedure BlendEquation(mode: BlendEquationMode);
    external 'opengl32.dll' name 'glBlendEquation';
    
    public static procedure BlendEquationSeparate(modeRGB: BlendEquationMode; modeAlpha: BlendEquationMode);
    external 'opengl32.dll' name 'glBlendEquationSeparate';
    
    public static procedure BlendEquationi(buf: UInt32; mode: BlendEquationMode);
    external 'opengl32.dll' name 'glBlendEquationi';
    
    public static procedure BlendEquationSeparatei(buf: UInt32; modeRGB: BlendEquationMode; modeAlpha: BlendEquationMode);
    external 'opengl32.dll' name 'glBlendEquationSeparatei';
    
    // 17.3.6.2
    
    public static procedure BlendFunc(sfactor: BlendFuncMode; dfactor: BlendFuncMode);
    external 'opengl32.dll' name 'glBlendFunc';
    
    public static procedure BlendFuncSeparate(sfactorRGB: BlendFuncMode; dfactorRGB: BlendFuncMode; sfactorAlpha: BlendFuncMode; dfactorAlpha: BlendFuncMode);
    external 'opengl32.dll' name 'glBlendFuncSeparate';
    
    public static procedure BlendFunci(buf: UInt32; src: BlendFuncMode; dst: BlendFuncMode);
    external 'opengl32.dll' name 'glBlendFunci';
    
    public static procedure BlendFuncSeparatei(buf: UInt32; srcRGB: BlendFuncMode; dstRGB: BlendFuncMode; srcAlpha: BlendFuncMode; dstAlpha: BlendFuncMode);
    external 'opengl32.dll' name 'glBlendFuncSeparatei';
    
    // 17.3.6.5
    
    public static procedure BlendColor(red: single; green: single; blue: single; alpha: single);
    external 'opengl32.dll' name 'glBlendColor';
    
    // 17.3.9
    
    public static procedure LogicOp(opcode: LogicOpCode);
    external 'opengl32.dll' name 'glLogicOp';
    
    {$endregion 17.3 - Per-Fragment Operations}
    
    {$region 17.4 - Whole Framebuffer Operations}
    
    // 17.4.1
    
    public static procedure DrawBuffer(buf: FrameBufferPart);
    external 'opengl32.dll' name 'glDrawBuffer';
    
    public static procedure NamedFramebufferDrawBuffer(framebuffer: FramebufferName; buf: FrameBufferPart);
    external 'opengl32.dll' name 'glNamedFramebufferDrawBuffer';
    
    public static procedure DrawBuffers(n: Int32; [MarshalAs(UnmanagedType.LPArray)] bufs: array of FrameBufferPart);
    external 'opengl32.dll' name 'glDrawBuffers';
    public static procedure DrawBuffers(n: Int32; var bufs: FrameBufferPart);
    external 'opengl32.dll' name 'glDrawBuffers';
    public static procedure DrawBuffers(n: Int32; bufs: pointer);
    external 'opengl32.dll' name 'glDrawBuffers';
    
    public static procedure NamedFramebufferDrawBuffers(framebuffer: FramebufferName; n: Int32; [MarshalAs(UnmanagedType.LPArray)] bufs: array of FrameBufferPart);
    external 'opengl32.dll' name 'glNamedFramebufferDrawBuffers';
    public static procedure NamedFramebufferDrawBuffers(framebuffer: FramebufferName; n: Int32; var bufs: FrameBufferPart);
    external 'opengl32.dll' name 'glNamedFramebufferDrawBuffers';
    public static procedure NamedFramebufferDrawBuffers(framebuffer: FramebufferName; n: Int32; bufs: pointer);
    external 'opengl32.dll' name 'glNamedFramebufferDrawBuffers';
    
    // 17.4.2
    
    public static procedure ColorMask(red: boolean; green: boolean; blue: boolean; alpha: boolean);
    external 'opengl32.dll' name 'glColorMask';
    
    public static procedure ColorMaski(index: UInt32; r: boolean; g: boolean; b: boolean; a: boolean);
    external 'opengl32.dll' name 'glColorMaski';
    
    public static procedure DepthMask(flag: boolean);
    external 'opengl32.dll' name 'glDepthMask';
    
    public static procedure StencilMask(mask: UInt32);
    external 'opengl32.dll' name 'glStencilMask';
    
    public static procedure StencilMaskSeparate(face: PolygonFace; mask: UInt32);
    external 'opengl32.dll' name 'glStencilMaskSeparate';
    
    // 17.4.3
    
    public static procedure Clear(mask: BufferTypeFlags);
    external 'opengl32.dll' name 'glClear';
    
    public static procedure ClearColor(red: single; green: single; blue: single; alpha: single);
    external 'opengl32.dll' name 'glClearColor';
    
    public static procedure ClearDepth(depth: double);
    external 'opengl32.dll' name 'glClearDepth';
    
    public static procedure ClearDepthf(depth: single);
    external 'opengl32.dll' name 'glClearDepthf';
    
    public static procedure ClearStencil(s: Int32);
    external 'opengl32.dll' name 'glClearStencil';
    
    // 17.4.3.1
    
    public static procedure ClearBufferiv(buffer: FramebufferAttachmentPoint; drawbuffer: Int32; [MarshalAs(UnmanagedType.LPArray)] value: array of Vec4i);
    external 'opengl32.dll' name 'glClearBufferiv';
    public static procedure ClearBufferiv(buffer: FramebufferAttachmentPoint; drawbuffer: Int32; var value: Vec4i);
    external 'opengl32.dll' name 'glClearBufferiv';
    public static procedure ClearBufferiv(buffer: FramebufferAttachmentPoint; drawbuffer: Int32; [MarshalAs(UnmanagedType.LPArray)] value: array of Int32);
    external 'opengl32.dll' name 'glClearBufferiv';
    public static procedure ClearBufferiv(buffer: FramebufferAttachmentPoint; drawbuffer: Int32; var value: Int32);
    external 'opengl32.dll' name 'glClearBufferiv';
    public static procedure ClearBufferiv(buffer: FramebufferAttachmentPoint; drawbuffer: Int32; value: pointer);
    external 'opengl32.dll' name 'glClearBufferiv';
    
    public static procedure ClearBufferfv(buffer: FramebufferAttachmentPoint; drawbuffer: Int32; [MarshalAs(UnmanagedType.LPArray)] value: array of Vec4f);
    external 'opengl32.dll' name 'glClearBufferfv';
    public static procedure ClearBufferfv(buffer: FramebufferAttachmentPoint; drawbuffer: Int32; var value: Vec4f);
    external 'opengl32.dll' name 'glClearBufferfv';
    public static procedure ClearBufferfv(buffer: FramebufferAttachmentPoint; drawbuffer: Int32; [MarshalAs(UnmanagedType.LPArray)] value: array of single);
    external 'opengl32.dll' name 'glClearBufferfv';
    public static procedure ClearBufferfv(buffer: FramebufferAttachmentPoint; drawbuffer: Int32; var value: single);
    external 'opengl32.dll' name 'glClearBufferfv';
    public static procedure ClearBufferfv(buffer: FramebufferAttachmentPoint; drawbuffer: Int32; value: pointer);
    external 'opengl32.dll' name 'glClearBufferfv';
    
    public static procedure ClearBufferuiv(buffer: FramebufferAttachmentPoint; drawbuffer: Int32; [MarshalAs(UnmanagedType.LPArray)] value: array of Vec4ui);
    external 'opengl32.dll' name 'glClearBufferuiv';
    public static procedure ClearBufferuiv(buffer: FramebufferAttachmentPoint; drawbuffer: Int32; var value: Vec4ui);
    external 'opengl32.dll' name 'glClearBufferuiv';
    public static procedure ClearBufferuiv(buffer: FramebufferAttachmentPoint; drawbuffer: Int32; [MarshalAs(UnmanagedType.LPArray)] value: array of UInt32);
    external 'opengl32.dll' name 'glClearBufferuiv';
    public static procedure ClearBufferuiv(buffer: FramebufferAttachmentPoint; drawbuffer: Int32; var value: UInt32);
    external 'opengl32.dll' name 'glClearBufferuiv';
    public static procedure ClearBufferuiv(buffer: FramebufferAttachmentPoint; drawbuffer: Int32; value: pointer);
    external 'opengl32.dll' name 'glClearBufferuiv';
    
    public static procedure ClearNamedFramebufferiv(framebuffer: FramebufferName; buffer: FramebufferAttachmentPoint; drawbuffer: Int32; [MarshalAs(UnmanagedType.LPArray)] value: array of Vec4i);
    external 'opengl32.dll' name 'glClearNamedFramebufferiv';
    public static procedure ClearNamedFramebufferiv(framebuffer: FramebufferName; buffer: FramebufferAttachmentPoint; drawbuffer: Int32; var value: Vec4i);
    external 'opengl32.dll' name 'glClearNamedFramebufferiv';
    public static procedure ClearNamedFramebufferiv(framebuffer: FramebufferName; buffer: FramebufferAttachmentPoint; drawbuffer: Int32; [MarshalAs(UnmanagedType.LPArray)] value: array of Int32);
    external 'opengl32.dll' name 'glClearNamedFramebufferiv';
    public static procedure ClearNamedFramebufferiv(framebuffer: FramebufferName; buffer: FramebufferAttachmentPoint; drawbuffer: Int32; var value: Int32);
    external 'opengl32.dll' name 'glClearNamedFramebufferiv';
    public static procedure ClearNamedFramebufferiv(framebuffer: FramebufferName; buffer: FramebufferAttachmentPoint; drawbuffer: Int32; value: pointer);
    external 'opengl32.dll' name 'glClearNamedFramebufferiv';
    
    public static procedure ClearNamedFramebufferfv(framebuffer: FramebufferName; buffer: FramebufferAttachmentPoint; drawbuffer: Int32; [MarshalAs(UnmanagedType.LPArray)] value: array of Vec4f);
    external 'opengl32.dll' name 'glClearNamedFramebufferfv';
    public static procedure ClearNamedFramebufferfv(framebuffer: FramebufferName; buffer: FramebufferAttachmentPoint; drawbuffer: Int32; var value: Vec4f);
    external 'opengl32.dll' name 'glClearNamedFramebufferfv';
    public static procedure ClearNamedFramebufferfv(framebuffer: FramebufferName; buffer: FramebufferAttachmentPoint; drawbuffer: Int32; [MarshalAs(UnmanagedType.LPArray)] value: array of single);
    external 'opengl32.dll' name 'glClearNamedFramebufferfv';
    public static procedure ClearNamedFramebufferfv(framebuffer: FramebufferName; buffer: FramebufferAttachmentPoint; drawbuffer: Int32; var value: single);
    external 'opengl32.dll' name 'glClearNamedFramebufferfv';
    public static procedure ClearNamedFramebufferfv(framebuffer: FramebufferName; buffer: FramebufferAttachmentPoint; drawbuffer: Int32; value: pointer);
    external 'opengl32.dll' name 'glClearNamedFramebufferfv';
    
    public static procedure ClearNamedFramebufferuiv(framebuffer: FramebufferName; buffer: FramebufferAttachmentPoint; drawbuffer: Int32; [MarshalAs(UnmanagedType.LPArray)] value: array of Vec4ui);
    external 'opengl32.dll' name 'glClearNamedFramebufferuiv';
    public static procedure ClearNamedFramebufferuiv(framebuffer: FramebufferName; buffer: FramebufferAttachmentPoint; drawbuffer: Int32; var value: Vec4ui);
    external 'opengl32.dll' name 'glClearNamedFramebufferuiv';
    public static procedure ClearNamedFramebufferuiv(framebuffer: FramebufferName; buffer: FramebufferAttachmentPoint; drawbuffer: Int32; [MarshalAs(UnmanagedType.LPArray)] value: array of UInt32);
    external 'opengl32.dll' name 'glClearNamedFramebufferuiv';
    public static procedure ClearNamedFramebufferuiv(framebuffer: FramebufferName; buffer: FramebufferAttachmentPoint; drawbuffer: Int32; var value: UInt32);
    external 'opengl32.dll' name 'glClearNamedFramebufferuiv';
    public static procedure ClearNamedFramebufferuiv(framebuffer: FramebufferName; buffer: FramebufferAttachmentPoint; drawbuffer: Int32; value: pointer);
    external 'opengl32.dll' name 'glClearNamedFramebufferuiv';
    
    public static procedure ClearBufferfi(buffer: FramebufferAttachmentPoint; drawbuffer: Int32; depth: single; stencil: Int32);
    external 'opengl32.dll' name 'glClearBufferfi';
    
    public static procedure ClearNamedFramebufferfi(framebuffer: FramebufferName; buffer: FramebufferAttachmentPoint; drawbuffer: Int32; depth: single; stencil: Int32);
    external 'opengl32.dll' name 'glClearNamedFramebufferfi';
    
    // 17.4.4
    
    public static procedure InvalidateSubFramebuffer(target: FramebufferBindTarget; numAttachments: Int32; [MarshalAs(UnmanagedType.LPArray)] attachments: array of FramebufferAttachmentPoint);
    external 'opengl32.dll' name 'glInvalidateSubFramebuffer';
    public static procedure InvalidateSubFramebuffer(target: FramebufferBindTarget; numAttachments: Int32; var attachments: FramebufferAttachmentPoint);
    external 'opengl32.dll' name 'glInvalidateSubFramebuffer';
    public static procedure InvalidateSubFramebuffer(target: FramebufferBindTarget; numAttachments: Int32; attachments: pointer);
    external 'opengl32.dll' name 'glInvalidateSubFramebuffer';
    
    public static procedure InvalidateNamedFramebufferSubData(framebuffer: FramebufferName; numAttachments: Int32; [MarshalAs(UnmanagedType.LPArray)] attachments: array of FramebufferAttachmentPoint);
    external 'opengl32.dll' name 'glInvalidateNamedFramebufferSubData';
    public static procedure InvalidateNamedFramebufferSubData(framebuffer: FramebufferName; numAttachments: Int32; var attachments: FramebufferAttachmentPoint);
    external 'opengl32.dll' name 'glInvalidateNamedFramebufferSubData';
    public static procedure InvalidateNamedFramebufferSubData(framebuffer: FramebufferName; numAttachments: Int32; attachments: pointer);
    external 'opengl32.dll' name 'glInvalidateNamedFramebufferSubData';
    
    public static procedure InvalidateFramebuffer(target: FramebufferBindTarget; numAttachments: Int32; [MarshalAs(UnmanagedType.LPArray)] attachments: array of FramebufferAttachmentPoint);
    external 'opengl32.dll' name 'glInvalidateFramebuffer';
    public static procedure InvalidateFramebuffer(target: FramebufferBindTarget; numAttachments: Int32; var attachments: FramebufferAttachmentPoint);
    external 'opengl32.dll' name 'glInvalidateFramebuffer';
    public static procedure InvalidateFramebuffer(target: FramebufferBindTarget; numAttachments: Int32; attachments: pointer);
    external 'opengl32.dll' name 'glInvalidateFramebuffer';
    
    public static procedure InvalidateNamedFramebufferData(framebuffer: FramebufferName; numAttachments: Int32; [MarshalAs(UnmanagedType.LPArray)] attachments: array of FramebufferAttachmentPoint);
    external 'opengl32.dll' name 'glInvalidateNamedFramebufferData';
    public static procedure InvalidateNamedFramebufferData(framebuffer: FramebufferName; numAttachments: Int32; var attachments: FramebufferAttachmentPoint);
    external 'opengl32.dll' name 'glInvalidateNamedFramebufferData';
    public static procedure InvalidateNamedFramebufferData(framebuffer: FramebufferName; numAttachments: Int32; attachments: pointer);
    external 'opengl32.dll' name 'glInvalidateNamedFramebufferData';
    
    {$endregion 17.4 - Whole Framebuffer Operations}
    
    {$endregion 17.0 - Writing Fragments and Samples to the Framebuffer}
    
    {$region 18.0 - Reading and Copying Pixels}
    
    {$region 18.2 - Reading Pixels}
    
    // 18.2.1
    
    public static procedure ReadBuffer(src: FramebufferAttachmentPoint);
    external 'opengl32.dll' name 'glReadBuffer';
    
    public static procedure NamedFramebufferReadBuffer(framebuffer: FramebufferName; src: FramebufferAttachmentPoint);
    external 'opengl32.dll' name 'glNamedFramebufferReadBuffer';
    
    // 18.2.2
    
    public static procedure ReadPixels(x: Int32; y: Int32; width: Int32; height: Int32; format: DataFormat; &type: DataType; pixels: IntPtr);
    external 'opengl32.dll' name 'glReadPixels';
    public static procedure ReadPixels(x: Int32; y: Int32; width: Int32; height: Int32; format: DataFormat; &type: DataType; pixels: pointer);
    external 'opengl32.dll' name 'glReadPixels';
    
    public static procedure ReadnPixels(x: Int32; y: Int32; width: Int32; height: Int32; format: DataFormat; &type: DataType; bufSize: Int32; data: IntPtr);
    external 'opengl32.dll' name 'glReadnPixels';
    public static procedure ReadnPixels(x: Int32; y: Int32; width: Int32; height: Int32; format: DataFormat; &type: DataType; bufSize: Int32; data: pointer);
    external 'opengl32.dll' name 'glReadnPixels';
    
    // 18.2.8
    
    public static procedure ClampColor(target: ColorClampTarget; clamp: UInt32);
    external 'opengl32.dll' name 'glClampColor';
    
    {$endregion 18.2 - Reading Pixels}
    
    {$region 18.3 - Copying Pixels}
    
    // 18.3.1
    
    public static procedure BlitFramebuffer(srcX0: Int32; srcY0: Int32; srcX1: Int32; srcY1: Int32; dstX0: Int32; dstY0: Int32; dstX1: Int32; dstY1: Int32; mask: BufferTypeFlags; filter: PixelMagFilterMode);
    external 'opengl32.dll' name 'glBlitFramebuffer';
    
    public static procedure BlitNamedFramebuffer(readFramebuffer: FramebufferName; drawFramebuffer: FramebufferName; srcX0: Int32; srcY0: Int32; srcX1: Int32; srcY1: Int32; dstX0: Int32; dstY0: Int32; dstX1: Int32; dstY1: Int32; mask: BufferTypeFlags; filter: PixelMagFilterMode);
    external 'opengl32.dll' name 'glBlitNamedFramebuffer';
    
    // 18.3.2
    
    // BufferBindType автоматически конвертируется в CopyableImageType
    public static procedure CopyImageSubData(srcName: UInt32; srcTarget: CopyableImageType; srcLevel: Int32; srcX: Int32; srcY: Int32; srcZ: Int32; dstName: UInt32; dstTarget: CopyableImageType; dstLevel: Int32; dstX: Int32; dstY: Int32; dstZ: Int32; srcWidth: Int32; srcHeight: Int32; srcDepth: Int32);
    external 'opengl32.dll' name 'glCopyImageSubData';
    
    {$endregion 18.3 - Copying Pixels}
    
    {$endregion 18.0 - Reading and Copying Pixels}
    
    {$region 19.0 - Compute Shaders}
    
    public static procedure DispatchCompute(num_groups_x: UInt32; num_groups_y: UInt32; num_groups_z: UInt32);
    external 'opengl32.dll' name 'glDispatchCompute';
    
    public static procedure DispatchComputeIndirect(indirect: IntPtr);
    external 'opengl32.dll' name 'glDispatchComputeIndirect';
    
    {$endregion 19.0 - Compute Shaders}
    
    {$region 20.0 - Debug Output}
    
    {$region 20.2 - Debug Message Callback}
    
    public static procedure DebugMessageCallback(callback: GLDEBUGPROC; userParam: IntPtr);
    external 'opengl32.dll' name 'glDebugMessageCallback';
    public static procedure DebugMessageCallback(callback: GLDEBUGPROC; userParam: pointer);
    external 'opengl32.dll' name 'glDebugMessageCallback';
    
    {$endregion 20.2 - Debug Message Callback}
    
    {$region 20.4 - Controlling Debug Messages}
    
    public static procedure DebugMessageControl(source: DebugSourceType; &type: DebugMessageType; severity: DebugSeverityLevel; count: Int32; [MarshalAs(UnmanagedType.LPArray)] ids: array of UInt32; enabled: boolean);
    external 'opengl32.dll' name 'glDebugMessageControl';
    public static procedure DebugMessageControl(source: DebugSourceType; &type: DebugMessageType; severity: DebugSeverityLevel; count: Int32; var ids: UInt32; enabled: boolean);
    external 'opengl32.dll' name 'glDebugMessageControl';
    public static procedure DebugMessageControl(source: DebugSourceType; &type: DebugMessageType; severity: DebugSeverityLevel; count: Int32; ids: IntPtr; enabled: boolean);
    external 'opengl32.dll' name 'glDebugMessageControl';
    
    {$endregion 20.4 - Controlling Debug Messages}
    
    {$region 20.5 - Externally Generated Messages}
    
    public static procedure DebugMessageInsert(source: DebugSourceType; &type: DebugMessageType; id: UInt32; severity: DebugSeverityLevel; length: Int32; [MarshalAs(UnmanagedType.LPStr)] buf: string);
    external 'opengl32.dll' name 'glDebugMessageInsert';
    public static procedure DebugMessageInsert(source: DebugSourceType; &type: DebugMessageType; id: UInt32; severity: DebugSeverityLevel; length: Int32; buf: IntPtr);
    external 'opengl32.dll' name 'glDebugMessageInsert';
    
    {$endregion 20.5 - Externally Generated Messages}
    
    {$region 20.6 - Debug Groups}
    
    public static procedure PushDebugGroup(source: DebugSourceType; id: UInt32; length: Int32; [MarshalAs(UnmanagedType.LPStr)] message: string);
    external 'opengl32.dll' name 'glPushDebugGroup';
    public static procedure PushDebugGroup(source: DebugSourceType; id: UInt32; length: Int32; message: IntPtr);
    external 'opengl32.dll' name 'glPushDebugGroup';
    
    public static procedure PopDebugGroup;
    external 'opengl32.dll' name 'glPopDebugGroup';
    
    {$endregion 20.6 - Debug Groups}
    
    {$region 20.7 - Debug Labels}
    
    public static procedure ObjectLabel(identifier: ObjectType; name: UInt32; length: Int32; [MarshalAs(UnmanagedType.LPStr)] &label: string);
    external 'opengl32.dll' name 'glObjectLabel';
    public static procedure ObjectLabel(identifier: ObjectType; name: UInt32; length: Int32; &label: IntPtr);
    external 'opengl32.dll' name 'glObjectLabel';
    
    public static procedure ObjectPtrLabel(ptr: IntPtr; length: Int32; [MarshalAs(UnmanagedType.LPStr)] &label: string);
    external 'opengl32.dll' name 'glObjectPtrLabel';
    public static procedure ObjectPtrLabel(ptr: IntPtr; length: Int32; &label: IntPtr);
    external 'opengl32.dll' name 'glObjectPtrLabel';
    public static procedure ObjectPtrLabel(ptr: pointer; length: Int32; [MarshalAs(UnmanagedType.LPStr)] &label: string);
    external 'opengl32.dll' name 'glObjectPtrLabel';
    public static procedure ObjectPtrLabel(ptr: pointer; length: Int32; &label: IntPtr);
    external 'opengl32.dll' name 'glObjectPtrLabel';
    
    {$endregion 20.7 - Debug Labels}
    
    {$region 20.9 - Debug Output Queries}
    
    // ВНИМАНИЕ! messageLog является суммой count нуль-терминированных строк, то есть символ 0 будет после каждого сообщения. Обычные методы перевода тут не будут работать, надо ручками
    public static function GetDebugMessageLog(count: UInt32; bufSize: Int32; [MarshalAs(UnmanagedType.LPArray)] sources: array of DebugSourceType; [MarshalAs(UnmanagedType.LPArray)] types: array of DebugMessageType; [MarshalAs(UnmanagedType.LPArray)] ids: array of UInt32; [MarshalAs(UnmanagedType.LPArray)] severities: array of DebugSeverityLevel; [MarshalAs(UnmanagedType.LPArray)] lengths: array of Int32; [MarshalAs(UnmanagedType.HString)] &messageLog: string): UInt32;
    external 'opengl32.dll' name 'glGetDebugMessageLog';
    public static function GetDebugMessageLog(count: UInt32; bufSize: Int32; [MarshalAs(UnmanagedType.LPArray)] sources: array of DebugSourceType; [MarshalAs(UnmanagedType.LPArray)] types: array of DebugMessageType; [MarshalAs(UnmanagedType.LPArray)] ids: array of UInt32; [MarshalAs(UnmanagedType.LPArray)] severities: array of DebugSeverityLevel; [MarshalAs(UnmanagedType.LPArray)] lengths: array of Int32; messageLog: IntPtr): UInt32;
    external 'opengl32.dll' name 'glGetDebugMessageLog';
    public static function GetDebugMessageLog(count: UInt32; bufSize: Int32; var sources: DebugSourceType; var types: DebugMessageType; var ids: UInt32; var severities: DebugSeverityLevel; var lengths: Int32; [MarshalAs(UnmanagedType.HString)] &messageLog: string): UInt32;
    external 'opengl32.dll' name 'glGetDebugMessageLog';
    public static function GetDebugMessageLog(count: UInt32; bufSize: Int32; var sources: DebugSourceType; var types: DebugMessageType; var ids: UInt32; var severities: DebugSeverityLevel; var lengths: Int32; messageLog: IntPtr): UInt32;
    external 'opengl32.dll' name 'glGetDebugMessageLog';
    public static function GetDebugMessageLog(count: UInt32; bufSize: Int32; sources: IntPtr; types: IntPtr; ids: IntPtr; severities: IntPtr; lengths: IntPtr; [MarshalAs(UnmanagedType.HString)] &messageLog: string): UInt32;
    external 'opengl32.dll' name 'glGetDebugMessageLog';
    public static function GetDebugMessageLog(count: UInt32; bufSize: Int32; sources: IntPtr; types: IntPtr; ids: IntPtr; severities: IntPtr; lengths: IntPtr; messageLog: IntPtr): UInt32;
    external 'opengl32.dll' name 'glGetDebugMessageLog';
    
    public static procedure GetObjectLabel(identifier: ObjectType; name: UInt32; bufSize: Int32; var length: Int32; [MarshalAs(UnmanagedType.LPStr)] &label: string);
    external 'opengl32.dll' name 'glGetObjectLabel';
    public static procedure GetObjectLabel(identifier: ObjectType; name: UInt32; bufSize: Int32; var length: Int32; &label: IntPtr);
    external 'opengl32.dll' name 'glGetObjectLabel';
    public static procedure GetObjectLabel(identifier: ObjectType; name: UInt32; bufSize: Int32; length: pointer; [MarshalAs(UnmanagedType.LPStr)] &label: string);
    external 'opengl32.dll' name 'glGetObjectLabel';
    public static procedure GetObjectLabel(identifier: ObjectType; name: UInt32; bufSize: Int32; length: pointer; &label: IntPtr);
    external 'opengl32.dll' name 'glGetObjectLabel';
    
    public static procedure GetObjectPtrLabel(ptr: pointer; bufSize: Int32; var length: Int32; [MarshalAs(UnmanagedType.LPStr)] &label: string);
    external 'opengl32.dll' name 'glGetObjectPtrLabel';
    public static procedure GetObjectPtrLabel(ptr: pointer; bufSize: Int32; var length: Int32; &label: IntPtr);
    external 'opengl32.dll' name 'glGetObjectPtrLabel';
    public static procedure GetObjectPtrLabel(ptr: pointer; bufSize: Int32; length: pointer; [MarshalAs(UnmanagedType.LPStr)] &label: string);
    external 'opengl32.dll' name 'glGetObjectPtrLabel';
    public static procedure GetObjectPtrLabel(ptr: pointer; bufSize: Int32; length: pointer; &label: IntPtr);
    external 'opengl32.dll' name 'glGetObjectPtrLabel';
    
    {$endregion 20.9 - Debug Output Queries}
    
    {$endregion 20.0 - Debug Output}
    
    {$region 21.0 - Special Functions}
    
    {$region 21.5 - Hints}
    
    public static procedure Hint(target: HintType; mode: HintValue);
    external 'opengl32.dll' name 'glHint';
    
    {$endregion 21.5 - Hints}
    
    {$endregion 21.0 - Special Functions}
    
    {$region 22.0 - Context State Queries}
    
    {$region 22.1 - Simple Queries}
    
    public static procedure GetBooleanv(pname: GLGetQueries; [MarshalAs(UnmanagedType.LPArray)] data: array of boolean);
    external 'opengl32.dll' name 'glGetBooleanv';
    public static procedure GetBooleanv(pname: GLGetQueries; var data: boolean);
    external 'opengl32.dll' name 'glGetBooleanv';
    public static procedure GetBooleanv(pname: GLGetQueries; data: pointer);
    external 'opengl32.dll' name 'glGetBooleanv';
    
    public static procedure GetIntegerv(pname: GLGetQueries; [MarshalAs(UnmanagedType.LPArray)] data: array of Int32);
    external 'opengl32.dll' name 'glGetIntegerv';
    public static procedure GetIntegerv(pname: GLGetQueries; var data: Int32);
    external 'opengl32.dll' name 'glGetIntegerv';
    public static procedure GetIntegerv(pname: GLGetQueries; data: pointer);
    external 'opengl32.dll' name 'glGetIntegerv';
    
    public static procedure GetInteger64v(pname: GLGetQueries; [MarshalAs(UnmanagedType.LPArray)] data: array of Int64);
    external 'opengl32.dll' name 'glGetInteger64v';
    public static procedure GetInteger64v(pname: GLGetQueries; var data: Int64);
    external 'opengl32.dll' name 'glGetInteger64v';
    public static procedure GetInteger64v(pname: GLGetQueries; data: pointer);
    external 'opengl32.dll' name 'glGetInteger64v';
    
    public static procedure GetFloatv(pname: GLGetQueries; [MarshalAs(UnmanagedType.LPArray)] data: array of single);
    external 'opengl32.dll' name 'glGetFloatv';
    public static procedure GetFloatv(pname: GLGetQueries; var data: single);
    external 'opengl32.dll' name 'glGetFloatv';
    public static procedure GetFloatv(pname: GLGetQueries; data: pointer);
    external 'opengl32.dll' name 'glGetFloatv';
    
    public static procedure GetDoublev(pname: GLGetQueries; [MarshalAs(UnmanagedType.LPArray)] data: array of double);
    external 'opengl32.dll' name 'glGetDoublev';
    public static procedure GetDoublev(pname: GLGetQueries; var data: double);
    external 'opengl32.dll' name 'glGetDoublev';
    public static procedure GetDoublev(pname: GLGetQueries; data: pointer);
    external 'opengl32.dll' name 'glGetDoublev';
    
    public static procedure GetBooleani_v(target: GLGetQueries; index: UInt32; [MarshalAs(UnmanagedType.LPArray)] data: array of boolean);
    external 'opengl32.dll' name 'glGetBooleani_v';
    public static procedure GetBooleani_v(target: GLGetQueries; index: UInt32; var data: boolean);
    external 'opengl32.dll' name 'glGetBooleani_v';
    public static procedure GetBooleani_v(target: GLGetQueries; index: UInt32; data: pointer);
    external 'opengl32.dll' name 'glGetBooleani_v';
    
    public static procedure GetFloati_v(target: GLGetQueries; index: UInt32; [MarshalAs(UnmanagedType.LPArray)] data: array of single);
    external 'opengl32.dll' name 'glGetFloati_v';
    public static procedure GetFloati_v(target: GLGetQueries; index: UInt32; var data: single);
    external 'opengl32.dll' name 'glGetFloati_v';
    public static procedure GetFloati_v(target: GLGetQueries; index: UInt32; data: pointer);
    external 'opengl32.dll' name 'glGetFloati_v';
    
    public static procedure GetIntegeri_v(target: GLGetQueries; index: UInt32; [MarshalAs(UnmanagedType.LPArray)] data: array of Int32);
    external 'opengl32.dll' name 'glGetIntegeri_v';
    public static procedure GetIntegeri_v(target: GLGetQueries; index: UInt32; var data: Int32);
    external 'opengl32.dll' name 'glGetIntegeri_v';
    public static procedure GetIntegeri_v(target: BufferBindType; index: UInt32; var data: BufferName);
    external 'opengl32.dll' name 'glGetIntegeri_v';
    public static procedure GetIntegeri_v(target: GLGetQueries; index: UInt32; data: pointer);
    external 'opengl32.dll' name 'glGetIntegeri_v';
    
    public static procedure GetInteger64i_v(target: GLGetQueries; index: UInt32; [MarshalAs(UnmanagedType.LPArray)] data: array of Int64);
    external 'opengl32.dll' name 'glGetInteger64i_v';
    public static procedure GetInteger64i_v(target: GLGetQueries; index: UInt32; var data: Int64);
    external 'opengl32.dll' name 'glGetInteger64i_v';
    public static procedure GetInteger64i_v(target: BufferBindType; index: UInt32; var data: Vec2i64);
    external 'opengl32.dll' name 'glGetInteger64i_v';
    public static procedure GetInteger64i_v(target: GLGetQueries; index: UInt32; data: pointer);
    external 'opengl32.dll' name 'glGetInteger64i_v';
	  
    public static procedure GetDoublei_v(target: GLGetQueries; index: UInt32; [MarshalAs(UnmanagedType.LPArray)] data: array of double);
    external 'opengl32.dll' name 'glGetDoublei_v';
    public static procedure GetDoublei_v(target: GLGetQueries; index: UInt32; var data: double);
    external 'opengl32.dll' name 'glGetDoublei_v';
    public static procedure GetDoublei_v(target: GLGetQueries; index: UInt32; data: pointer);
    external 'opengl32.dll' name 'glGetDoublei_v';
    
    public static function IsEnabled(cap: EnablableName): boolean;
    external 'opengl32.dll' name 'glIsEnabled';
    
    public static function IsEnabledi(target: EnablableName; index: UInt32): boolean;
    external 'opengl32.dll' name 'glIsEnabledi';
    
    {$endregion 22.1 - Simple Queries}
    
    {$region 22.2 - Pointer, String, and Related Context Queries}
    
    public static procedure GetPointerv(pname: GLGetQueries; [MarshalAs(UnmanagedType.LPArray)] &params: array of IntPtr);
    external 'opengl32.dll' name 'glGetPointerv';
    public static procedure GetPointerv(pname: GLGetQueries; var &params: IntPtr);
    external 'opengl32.dll' name 'glGetPointerv';
    public static procedure GetPointerv(pname: GLGetQueries; var &params: pointer);
    external 'opengl32.dll' name 'glGetPointerv';
    public static procedure GetPointerv(pname: GLGetQueries; &params: ^IntPtr);
    external 'opengl32.dll' name 'glGetPointerv';
    
    public [Result: MarshalAs(UnmanagedType.LPStr)] static function GetString(name: GLGetStringQueries): string;
    external 'opengl32.dll' name 'glGetString';
    public static function GetStringPtr(name: GLGetStringQueries): IntPtr;
    external 'opengl32.dll' name 'glGetString';
    
    public [Result: MarshalAs(UnmanagedType.LPStr)] static function GetStringi(name: GLGetStringQueries; index: UInt32): string;
    external 'opengl32.dll' name 'glGetStringi';
    public static function GetStringiPtr(name: GLGetStringQueries; index: UInt32): IntPtr;
    external 'opengl32.dll' name 'glGetStringi';
    
    {$endregion 22.2 - Pointer, String, and Related Context Queries}
    
    {$region 22.3 - Internal Format Queries}
    
    public static procedure GetInternalformativ(target: TextureBindTarget; internalformat: InternalDataFormat; pname: InternalFormatInfoType; bufSize: Int32; var &params: Int32);
    external 'opengl32.dll' name 'glGetInternalformativ';
    public static procedure GetInternalformativ(target: TextureBindTarget; internalformat: InternalDataFormat; pname: InternalFormatInfoType; bufSize: Int32; [MarshalAs(UnmanagedType.LPArray)] &params: array of Int32);
    external 'opengl32.dll' name 'glGetInternalformativ';
    public static procedure GetInternalformativ(target: TextureBindTarget; internalformat: InternalDataFormat; pname: InternalFormatInfoType; bufSize: Int32; var &params: SupportLevel);
    external 'opengl32.dll' name 'glGetInternalformativ';
    public static procedure GetInternalformativ(target: TextureBindTarget; internalformat: InternalDataFormat; pname: InternalFormatInfoType; bufSize: Int32; var &params: DataFormat);
    external 'opengl32.dll' name 'glGetInternalformativ';
    public static procedure GetInternalformativ(target: TextureBindTarget; internalformat: InternalDataFormat; pname: InternalFormatInfoType; bufSize: Int32; var &params: DataType);
    external 'opengl32.dll' name 'glGetInternalformativ';
    public static procedure GetInternalformativ(target: TextureBindTarget; internalformat: InternalDataFormat; pname: InternalFormatInfoType; bufSize: Int32; var &params: CompatibilityImageClassType);
    external 'opengl32.dll' name 'glGetInternalformativ';
    public static procedure GetInternalformativ(target: TextureBindTarget; internalformat: InternalDataFormat; pname: InternalFormatInfoType; bufSize: Int32; var &params: ImageFormatCompatibilityMode);
    external 'opengl32.dll' name 'glGetInternalformativ';
    public static procedure GetInternalformativ(target: TextureBindTarget; internalformat: InternalDataFormat; pname: InternalFormatInfoType; bufSize: Int32; &params: pointer);
    external 'opengl32.dll' name 'glGetInternalformativ';
    
    public static procedure GetInternalformati64v(target: TextureBindTarget; internalformat: InternalDataFormat; pname: InternalFormatInfoType; bufSize: Int32; [MarshalAs(UnmanagedType.LPArray)] &params: array of Int64);
    external 'opengl32.dll' name 'glGetInternalformati64v';
    public static procedure GetInternalformati64v(target: TextureBindTarget; internalformat: InternalDataFormat; pname: InternalFormatInfoType; bufSize: Int32; var &params: Int64);
    external 'opengl32.dll' name 'glGetInternalformati64v';
    public static procedure GetInternalformati64v(target: TextureBindTarget; internalformat: InternalDataFormat; pname: InternalFormatInfoType; bufSize: Int32; &params: pointer);
    external 'opengl32.dll' name 'glGetInternalformati64v';
    
    {$endregion 22.3 - Internal Format Queries}
    
    {$region 22.4 - Transform Feedback State Queries}
    
    public static procedure GetTransformFeedbackiv(xfb: TransformFeedbackName; pname: TransformFeedbackInfoType; var param: BufferName);
    external 'opengl32.dll' name 'glGetTransformFeedbackiv';
    public static procedure GetTransformFeedbackiv(xfb: TransformFeedbackName; pname: TransformFeedbackInfoType; var param: Int32);
    external 'opengl32.dll' name 'glGetTransformFeedbackiv';
    public static procedure GetTransformFeedbackiv(xfb: TransformFeedbackName; pname: TransformFeedbackInfoType; param: pointer);
    external 'opengl32.dll' name 'glGetTransformFeedbackiv';
    
    public static procedure GetTransformFeedbacki_v(xfb: TransformFeedbackName; pname: TransformFeedbackInfoType; index: UInt32; var param: BufferName);
    external 'opengl32.dll' name 'glGetTransformFeedbacki_v';
    public static procedure GetTransformFeedbacki_v(xfb: TransformFeedbackName; pname: TransformFeedbackInfoType; index: UInt32; var param: Int32);
    external 'opengl32.dll' name 'glGetTransformFeedbacki_v';
    public static procedure GetTransformFeedbacki_v(xfb: TransformFeedbackName; pname: TransformFeedbackInfoType; index: UInt32; param: pointer);
    external 'opengl32.dll' name 'glGetTransformFeedbacki_v';
    
    public static procedure GetTransformFeedbacki64_v(xfb: TransformFeedbackName; pname: TransformFeedbackInfoType; index: UInt32; var param: Int64);
    external 'opengl32.dll' name 'glGetTransformFeedbacki64_v';
    public static procedure GetTransformFeedbacki64_v(xfb: TransformFeedbackName; pname: TransformFeedbackInfoType; index: UInt32; param: pointer);
    external 'opengl32.dll' name 'glGetTransformFeedbacki64_v';
    
    {$endregion 22.4 - Transform Feedback State Queries}
    
    {$endregion 22.0 - Context State Queries}
    
  end;
  
  
  