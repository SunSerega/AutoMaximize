  
  
  
  {$region Ext}
  
  {$region INTEL_performance_query}
  
  //S
  PerfQueryDataFlagsINTEL = record
    public val: UInt32;
    public constructor(val: UInt32) := self.val := val;
    
    public property DONOT_FLUSH:  boolean read self.val = $83F9;
    public property FLUSH:        boolean read self.val = $83FA;
    public property WAIT:         boolean read self.val = $83FB;
    
    public static function operator or(a,b: PerfQueryDataFlagsINTEL) :=
    new PerfQueryDataFlagsINTEL(a.val or b.val);
    
  end;
  
  //R
  PerfQueryCounterTypeINTEL = record
    public val: UInt32;
    public constructor(val: UInt32) := self.val := val;
    
    public property &EVENT:         boolean read self.val = $94F0;
    public property DURATION_NORM:  boolean read self.val = $94F1;
    public property DURATION_RAW:   boolean read self.val = $94F2;
    public property THROUGHPUT:     boolean read self.val = $94F3;
    public property RAW:            boolean read self.val = $94F4;
    public property TIMESTAMP:      boolean read self.val = $94F5;
    
    public function ToString: string; override;
    begin
      var res := typeof(PerfQueryCounterTypeINTEL).GetProperties.Where(prop->prop.PropertyType=typeof(boolean)).Select(prop->(prop.Name,boolean(prop.GetValue(self)))).FirstOrDefault;
      Result := res=nil?
        $'PerfQueryCounterTypeINTEL[{self.val}]':
        res[0];
    end;
    
  end;
  
  //R
  PerfQueryCounterDataTypeINTEL = record
    public val: UInt32;
    public constructor(val: UInt32) := self.val := val;
    
    public property UINT32: boolean read self.val = $94F8;
    public property UINT64: boolean read self.val = $94F9;
    public property FLOAT:  boolean read self.val = $94FA;
    public property DOUBLE: boolean read self.val = $94FB;
    public property BOOL32: boolean read self.val = $94FC;
    
    public function ToString: string; override;
    begin
      var res := typeof(PerfQueryCounterDataTypeINTEL).GetProperties.Where(prop->prop.PropertyType=typeof(boolean)).Select(prop->(prop.Name,boolean(prop.GetValue(self)))).FirstOrDefault;
      Result := res=nil?
        $'PerfQueryCounterDataTypeINTEL[{self.val}]':
        res[0];
    end;
    
  end;
  
  //R
  PerfQueryCapFlagsINTEL = record
    public val: UInt32;
    public constructor(val: UInt32) := self.val := val;
    
    public property SINGLE_CONTEXT: boolean read self.val = 0;
    public property GLOBAL_CONTEXT: boolean read self.val and $1 <> 0;
    
    public function ToString: string; override;
    begin
      var res := typeof(PerfQueryCapFlagsINTEL).GetProperties.Where(prop->prop.PropertyType=typeof(boolean)).Select(prop->(prop.Name,boolean(prop.GetValue(self)))).Where(t->t[1]).ToList;
      Result := res.Count=0?
        $'PerfQueryCapFlagsINTEL[{self.val}]':
        res.Select(t->t[0]).JoinIntoString('+');
    end;
    
  end;
  
  {$endregion INTEL_performance_query}
  
  {$endregion Ext}
  
  
  