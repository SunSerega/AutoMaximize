  
  
  
  {$region case Result of}
  
  //R
  ErrorCode = record
    public val: UInt32;
    
    public const NO_ERROR =                                 0;
    public const FRAMEBUFFER_COMPLETE =                     $8CD5;
    
    public const INVALID_ENUM =                             $0500;
    public const INVALID_VALUE =                            $0501;
    public const INVALID_OPERATION =                        $0502;
    public const STACK_OVERFLOW =                           $0503;
    public const STACK_UNDERFLOW =                          $0504;
    public const OUT_OF_MEMORY =                            $0505;
    public const INVALID_FRAMEBUFFER_OPERATION =            $0506;
    public const CONTEXT_LOST =                             $0507;
    
    public const GUILTY_CONTEXT_RESET =                     $8253;
    public const INNOCENT_CONTEXT_RESET =                   $8254;
    public const UNKNOWN_CONTEXT_RESET =                    $8255;
    
    ///Устарело, в 3.1 уже не существует
    public const TABLE_TOO_LARGE =                          $8031;
    
    
    
    public function ToString: string; override;
    begin
      var res := typeof(ErrorCode).GetFields.Where(fi->fi.IsLiteral).FirstOrDefault(prop->integer(prop.GetValue(nil)) = self.val);
      Result := res=nil?
        $'ErrorCode[${self.val:X}]':
        res.Name.ToWords('_').Select(w->w[1].ToUpper+w.Substring(1).ToLower).JoinIntoString;
    end;
    
    public procedure RaiseIfError :=
    case val of
      NO_ERROR, FRAMEBUFFER_COMPLETE: ;
      else raise new OpenGLException(self.ToString);
    end;
    
  end;
  
  {$endregion case Result of}
  
  {$region 1 значение}
  
  {$region ...InfoType}
  
  //S
  RenderbufferInfoType = record
    public val: UInt32;
    public constructor(val: UInt32) := self.val := val;
    
    public static property WIDTH:           RenderbufferInfoType read new RenderbufferInfoType($8D42);
    public static property HEIGHT:          RenderbufferInfoType read new RenderbufferInfoType($8D43);
    public static property INTERNAL_FORMAT: RenderbufferInfoType read new RenderbufferInfoType($8D44);
    public static property SAMPLES:         RenderbufferInfoType read new RenderbufferInfoType($8CAB);
    public static property RED_SIZE:        RenderbufferInfoType read new RenderbufferInfoType($8D50);
    public static property GREEN_SIZE:      RenderbufferInfoType read new RenderbufferInfoType($8D51);
    public static property BLUE_SIZE:       RenderbufferInfoType read new RenderbufferInfoType($8D52);
    public static property ALPHA_SIZE:      RenderbufferInfoType read new RenderbufferInfoType($8D53);
    public static property DEPTH_SIZE:      RenderbufferInfoType read new RenderbufferInfoType($8D54);
    public static property STENCIL_SIZE:    RenderbufferInfoType read new RenderbufferInfoType($8D55);
    
  end;
  
  //S
  ActiveSubroutineInfoType = record
    public val: UInt32;
    public constructor(val: UInt32) := self.val := val;
    
    public static property UNIFORMS:              ActiveSubroutineInfoType read new ActiveSubroutineInfoType($8DE6);
    public static property UNIFORM_LOCATIONS:     ActiveSubroutineInfoType read new ActiveSubroutineInfoType($8E47);
    public static property GL_ACTIVE_SUBROUTINES: ActiveSubroutineInfoType read new ActiveSubroutineInfoType($8DE5);
    public static property UNIFORM_MAX_LENGTH:    ActiveSubroutineInfoType read new ActiveSubroutineInfoType($8E49);
    public static property MAX_LENGTH:            ActiveSubroutineInfoType read new ActiveSubroutineInfoType($8E48);
    
  end;
  
  //S
  ProgramPipelineInfoType = record
    public val: UInt32;
    public constructor(val: UInt32) := self.val := val;
    
    public static property ACTIVE_PROGRAM:          ProgramPipelineInfoType read new ProgramPipelineInfoType($8259);
    public static property VERTEX_SHADER:           ProgramPipelineInfoType read new ProgramPipelineInfoType($8B31);
    public static property TESS_CONTROL_SHADER:     ProgramPipelineInfoType read new ProgramPipelineInfoType($8E88);
    public static property TESS_EVALUATION_SHADER:  ProgramPipelineInfoType read new ProgramPipelineInfoType($8E87);
    public static property GEOMETRY_SHADER:         ProgramPipelineInfoType read new ProgramPipelineInfoType($8DD9);
    public static property FRAGMENT_SHADER:         ProgramPipelineInfoType read new ProgramPipelineInfoType($8B30);
    public static property COMPUTE_SHADER:          ProgramPipelineInfoType read new ProgramPipelineInfoType($91B9);
    public static property VALIDATE_STATUS:         ProgramPipelineInfoType read new ProgramPipelineInfoType($8B83);
    public static property INFO_LOG_LENGTH:         ProgramPipelineInfoType read new ProgramPipelineInfoType($8B84);
    
  end;
  
  //S
  ProgramInfoType = record
    public val: UInt32;
    public constructor(val: UInt32) := self.val := val;
    
    public static property DELETE_STATUS:                         ProgramInfoType read new ProgramInfoType($8B80);
    public static property LINK_STATUS:                           ProgramInfoType read new ProgramInfoType($8B82);
    public static property VALIDATE_STATUS:                       ProgramInfoType read new ProgramInfoType($8B83);
    public static property INFO_LOG_LENGTH:                       ProgramInfoType read new ProgramInfoType($8B84);
    public static property ATTACHED_SHADERS:                      ProgramInfoType read new ProgramInfoType($8B85);
    public static property ACTIVE_ATTRIBUTES:                     ProgramInfoType read new ProgramInfoType($8B89);
    public static property ACTIVE_ATTRIBUTE_MAX_LENGTH:           ProgramInfoType read new ProgramInfoType($8B8A);
    public static property ACTIVE_UNIFORMS:                       ProgramInfoType read new ProgramInfoType($8B86);
    public static property ACTIVE_UNIFORM_MAX_LENGTH:             ProgramInfoType read new ProgramInfoType($8B87);
    public static property TRANSFORM_FEEDBACK_BUFFER_MODE:        ProgramInfoType read new ProgramInfoType($8C7F);
    public static property TRANSFORM_FEEDBACK_VARYINGS:           ProgramInfoType read new ProgramInfoType($8C83);
    public static property TRANSFORM_FEEDBACK_VARYING_MAX_LENGTH: ProgramInfoType read new ProgramInfoType($8C76);
    public static property ACTIVE_UNIFORM_BLOCKS:                 ProgramInfoType read new ProgramInfoType($8A36);
    public static property ACTIVE_UNIFORM_BLOCK_MAX_NAME_LENGTH:  ProgramInfoType read new ProgramInfoType($8A35);
    public static property GEOMETRY_VERTICES_OUT:                 ProgramInfoType read new ProgramInfoType($8916);
    public static property GEOMETRY_INPUT_TYPE:                   ProgramInfoType read new ProgramInfoType($8917);
    public static property GEOMETRY_OUTPUT_TYPE:                  ProgramInfoType read new ProgramInfoType($8918);
    public static property GEOMETRY_SHADER_INVOCATIONS:           ProgramInfoType read new ProgramInfoType($887F);
    public static property TESS_CONTROL_OUTPUT_VERTICES:          ProgramInfoType read new ProgramInfoType($8E75);
    public static property TESS_GEN_MODE:                         ProgramInfoType read new ProgramInfoType($8E76);
    public static property TESS_GEN_SPACING:                      ProgramInfoType read new ProgramInfoType($8E77);
    public static property TESS_GEN_VERTEX_ORDER:                 ProgramInfoType read new ProgramInfoType($8E78);
    public static property TESS_GEN_POINT_MODE:                   ProgramInfoType read new ProgramInfoType($8E79);
    public static property COMPUTE_WORK_GROUP_SIZE:               ProgramInfoType read new ProgramInfoType($8267);
    public static property PROGRAM_SEPARABLE:                     ProgramInfoType read new ProgramInfoType($8258);
    public static property PROGRAM_BINARY_RETRIEVABLE_HINT:       ProgramInfoType read new ProgramInfoType($8257);
    public static property ACTIVE_ATOMIC_COUNTER_BUFFERS:         ProgramInfoType read new ProgramInfoType($92D9);
    
  end;
  
  //S
  ShaderInfoType = record
    public val: UInt32;
    public constructor(val: UInt32) := self.val := val;
    
    public static property SHADER_TYPE:           ShaderInfoType read new ShaderInfoType($8B4F);
    public static property DELETE_STATUS:         ShaderInfoType read new ShaderInfoType($8B80);
    public static property COMPILE_STATUS:        ShaderInfoType read new ShaderInfoType($8B81);
    public static property INFO_LOG_LENGTH:       ShaderInfoType read new ShaderInfoType($8B84);
    public static property SHADER_SOURCE_LENGTH:  ShaderInfoType read new ShaderInfoType($8B88);
    public static property SPIR_V_BINARY:         ShaderInfoType read new ShaderInfoType($9552);
    
  end;
  
  //S
  SyncObjInfoType = record
    public val: UInt32;
    public constructor(val: UInt32) := self.val := val;
    
    public static property OBJECT_TYPE:     SyncObjInfoType read new SyncObjInfoType($9112);
    public static property SYNC_CONDITION:  SyncObjInfoType read new SyncObjInfoType($9113);
    public static property SYNC_STATUS:     SyncObjInfoType read new SyncObjInfoType($9114);
    public static property SYNC_FLAGS:      SyncObjInfoType read new SyncObjInfoType($9115);
    
  end;
  
  //S
  QueryTargetType = record
    public val: UInt32;
    public constructor(val: UInt32) := self.val := val;
    
    public static property SAMPLES_PASSED:                        QueryTargetType read new QueryTargetType($8914);
    public static property ANY_SAMPLES_PASSED:                    QueryTargetType read new QueryTargetType($8C2F);
    public static property ANY_SAMPLES_PASSED_CONSERVATIVE:       QueryTargetType read new QueryTargetType($8D6A);
    public static property PRIMITIVES_GENERATED:                  QueryTargetType read new QueryTargetType($8C87);
    public static property TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN: QueryTargetType read new QueryTargetType($8C88);
    public static property TIME_ELAPSED:                          QueryTargetType read new QueryTargetType($88BF);
    public static property TIMESTAMP:                             QueryTargetType read new QueryTargetType($8E28);
    
  end;
  
  //S
  GetQueryInfoName = record
    public val: UInt32;
    public constructor(val: UInt32) := self.val := val;
    
    public static property QUERY_COUNTER_BITS:  GetQueryInfoName read new GetQueryInfoName($8864);
    public static property CURRENT_QUERY:       GetQueryInfoName read new GetQueryInfoName($8865);
    
  end;
  
  //S
  GetQueryObjectInfoName = record
    public val: UInt32;
    public constructor(val: UInt32) := self.val := val;
    
    public static property RESULT:            GetQueryObjectInfoName read new GetQueryObjectInfoName($8866);
    public static property RESULT_AVAILABLE:  GetQueryObjectInfoName read new GetQueryObjectInfoName($8867);
    
  end;
  
  //S
  BufferInfoType = record
    public val: UInt32;
    public constructor(val: UInt32) := self.val := val;
    
    public static property SIZE:              BufferInfoType read new BufferInfoType($8764);
    public static property USAGE:             BufferInfoType read new BufferInfoType($8765);
    public static property ACCESS:            BufferInfoType read new BufferInfoType($88BB);
    public static property ACCESS_FLAGS:      BufferInfoType read new BufferInfoType($911F);
    public static property IMMUTABLE_STORAGE: BufferInfoType read new BufferInfoType($821F);
    public static property MAPPED:            BufferInfoType read new BufferInfoType($88BC);
    public static property MAP_LENGTH:        BufferInfoType read new BufferInfoType($9120);
    public static property MAP_OFFSET:        BufferInfoType read new BufferInfoType($9121);
    public static property STORAGE_FLAGS:     BufferInfoType read new BufferInfoType($8220);
    public static property MAP_POINTER:       BufferInfoType read new BufferInfoType($88BD);
    
  end;
  
  {$endregion ...InfoType}
  
  //S
  CompatibilityViewClassType = record
    public val: UInt32;
    public constructor(val: UInt32) := self.val := val;
    
    public static property C_128_BITS:        CompatibilityViewClassType read new CompatibilityViewClassType($82C4);
    public static property C_96_BITS:         CompatibilityViewClassType read new CompatibilityViewClassType($82C5);
    public static property C_64_BITS:         CompatibilityViewClassType read new CompatibilityViewClassType($82C6);
    public static property C_48_BITS:         CompatibilityViewClassType read new CompatibilityViewClassType($82C7);
    public static property C_32_BITS:         CompatibilityViewClassType read new CompatibilityViewClassType($82C8);
    public static property C_24_BITS:         CompatibilityViewClassType read new CompatibilityViewClassType($82C9);
    public static property C_16_BITS:         CompatibilityViewClassType read new CompatibilityViewClassType($82CA);
    public static property C_8_BITS:          CompatibilityViewClassType read new CompatibilityViewClassType($82CB);
    public static property C_S3TC_DXT1_RGB:   CompatibilityViewClassType read new CompatibilityViewClassType($82CC);
    public static property C_S3TC_DXT1_RGBA:  CompatibilityViewClassType read new CompatibilityViewClassType($82CD);
    public static property C_S3TC_DXT3_RGBA:  CompatibilityViewClassType read new CompatibilityViewClassType($82CE);
    public static property C_S3TC_DXT5_RGBA:  CompatibilityViewClassType read new CompatibilityViewClassType($82CF);
    public static property C_RGTC1_RED:       CompatibilityViewClassType read new CompatibilityViewClassType($82D0);
    public static property C_RGTC2_RG:        CompatibilityViewClassType read new CompatibilityViewClassType($82D1);
    public static property C_BPTC_UNORM:      CompatibilityViewClassType read new CompatibilityViewClassType($82D2);
    public static property C_BPTC_FLOAT:      CompatibilityViewClassType read new CompatibilityViewClassType($82D3);
    
  end;
  
  //S
  CompatibilityImageClassType = record
    public val: UInt32;
    public constructor(val: UInt32) := self.val := val;
    
    public static property C_4_X_32:      CompatibilityImageClassType read new CompatibilityImageClassType($82B9);
    public static property C_2_X_32:      CompatibilityImageClassType read new CompatibilityImageClassType($82BA);
    public static property C_1_X_32:      CompatibilityImageClassType read new CompatibilityImageClassType($82BB);
    public static property C_4_X_16:      CompatibilityImageClassType read new CompatibilityImageClassType($82BC);
    public static property C_2_X_16:      CompatibilityImageClassType read new CompatibilityImageClassType($82BD);
    public static property C_1_X_16:      CompatibilityImageClassType read new CompatibilityImageClassType($82BE);
    public static property C_4_X_8:       CompatibilityImageClassType read new CompatibilityImageClassType($82BF);
    public static property C_2_X_8:       CompatibilityImageClassType read new CompatibilityImageClassType($82C0);
    public static property C_1_X_8:       CompatibilityImageClassType read new CompatibilityImageClassType($82C1);
    public static property C_11_11_10:    CompatibilityImageClassType read new CompatibilityImageClassType($82C2);
    public static property C_10_10_10_2:  CompatibilityImageClassType read new CompatibilityImageClassType($82C3);
    
  end;
  
  //S
  ImageFormatCompatibilityMode = record
    public val: UInt32;
    public constructor(val: UInt32) := self.val := val;
    
    public static property COMPATIBILITY1_BY_SIZE:  ImageFormatCompatibilityMode read new ImageFormatCompatibilityMode($90C8);
    public static property COMPATIBILITY2_BY_CLASS: ImageFormatCompatibilityMode read new ImageFormatCompatibilityMode($90C9);
    public static property NONE:                    ImageFormatCompatibilityMode read new ImageFormatCompatibilityMode($90C9);
    
  end;
  
  //S
  SupportLevel = record
    public val: UInt32;
    public constructor(val: UInt32) := self.val := val;
    
    public static property NONE:            SupportLevel read new SupportLevel(0);
    public static property FULL_SUPPORT:    SupportLevel read new SupportLevel($82B7);
    public static property CAVEAT_SUPPORT:  SupportLevel read new SupportLevel($82B8);
    
  end;
  
  //S
  GDI_LayerType = record
    public val: Byte;
    public constructor(val: Byte) := self.val := val;
    
    public static property MAIN_PLANE:      GDI_LayerType read new GDI_LayerType(0);
    public static property OVERLAY_PLANE:   GDI_LayerType read new GDI_LayerType(1);
    public static property UNDERLAY_PLANE:  GDI_LayerType read new GDI_LayerType(-1);
    
  end;
  
  //S
  GDI_PixelDataType = record
    public val: Byte;
    public constructor(val: Byte) := self.val := val;
    
    public static property RGBA:        GDI_PixelDataType read new GDI_PixelDataType(0);
    public static property COLORINDEX:  GDI_PixelDataType read new GDI_PixelDataType(1);
    
  end;
  
  //S
  CopyableImageBuffer = record
    public val: UInt32;
    public constructor(val: UInt32) := self.val := val;
    
    public static property COLOR:   CopyableImageBuffer read new CopyableImageBuffer($1800);
    public static property DEPTH:   CopyableImageBuffer read new CopyableImageBuffer($1801);
    public static property STENCIL: CopyableImageBuffer read new CopyableImageBuffer($1802);
    
  end;
  
  //S
  VertexProvokingMode = record
    public val: UInt32;
    public constructor(val: UInt32) := self.val := val;
    
    public static property FIRST_VERTEX_CONVENTION: VertexProvokingMode read new VertexProvokingMode($8E4D);
    public static property LAST_VERTEX_CONVENTION:  VertexProvokingMode read new VertexProvokingMode($8E4E);
    
  end;
  
  //S
  SwizzleMode = record
    public val: UInt32;
    public constructor(val: UInt32) := self.val := val;
    
    public static property RED:   SwizzleMode read new SwizzleMode($1903);
    public static property GREEN: SwizzleMode read new SwizzleMode($1904);
    public static property BLUE:  SwizzleMode read new SwizzleMode($1905);
    public static property ALPHA: SwizzleMode read new SwizzleMode($1906);
    public static property ZERO:  SwizzleMode read new SwizzleMode(0);
    public static property ONE:   SwizzleMode read new SwizzleMode(1);
    
  end;
  
  //S
  DepthStencilMode = record
    public val: UInt32;
    public constructor(val: UInt32) := self.val := val;
    
    public static property DEPTH_COMPONENT: DepthStencilMode read new DepthStencilMode($1902);
    public static property STENCIL_INDEX:   DepthStencilMode read new DepthStencilMode($1901);
    
  end;
  
  //S
  PixelWrapMode = record
    public val: UInt32;
    public constructor(val: UInt32) := self.val := val;
    
    public static property CLAMP_TO_EDGE:         PixelWrapMode read new PixelWrapMode($812F);
    public static property &REPEAT:               PixelWrapMode read new PixelWrapMode($2901);
    public static property CLAMP_TO_BORDER:       PixelWrapMode read new PixelWrapMode($812D);
    public static property MIRRORED_REPEAT:       PixelWrapMode read new PixelWrapMode($8370);
    public static property MIRROR_CLAMP_TO_EDGE:  PixelWrapMode read new PixelWrapMode($8743);
    
  end;
  
  //S
  TextureCompareMode = record
    public val: UInt32;
    public constructor(val: UInt32) := self.val := val;
    
    public static property NONE:                    TextureCompareMode read new TextureCompareMode(0);
    public static property COMPARE_REF_TO_TEXTURE:  TextureCompareMode read new TextureCompareMode($884E);
    
  end;
  
  //S
  ReservedTimeoutMode = record
    public val: uint64;
    public constructor(val: uint64) := self.val := val;
    
    public static property GL_TIMEOUT_IGNORED:  ReservedTimeoutMode read new ReservedTimeoutMode(uint64.MaxValue);
    
  end;
  
  //S
  InternalFormatInfoType = record
    public val: UInt32;
    public constructor(val: UInt32) := self.val := val;
    
    public static property INTERNALFORMAT_SUPPORTED:                InternalFormatInfoType read new InternalFormatInfoType($826F);
    public static property INTERNALFORMAT_PREFERRED:                InternalFormatInfoType read new InternalFormatInfoType($8270);
    public static property INTERNALFORMAT_RED_SIZE:                 InternalFormatInfoType read new InternalFormatInfoType($8271);
    public static property INTERNALFORMAT_RED_TYPE:                 InternalFormatInfoType read new InternalFormatInfoType($8278);
    public static property MAX_WIDTH:                               InternalFormatInfoType read new InternalFormatInfoType($827E);
    public static property MAX_HEIGHT:                              InternalFormatInfoType read new InternalFormatInfoType($827F);
    public static property MAX_DEPTH:                               InternalFormatInfoType read new InternalFormatInfoType($8280);
    public static property MAX_LAYERS:                              InternalFormatInfoType read new InternalFormatInfoType($8281);
    public static property COLOR_COMPONENTS:                        InternalFormatInfoType read new InternalFormatInfoType($8283);
    public static property COLOR_RENDERABLE:                        InternalFormatInfoType read new InternalFormatInfoType($8286);
    public static property DEPTH_RENDERABLE:                        InternalFormatInfoType read new InternalFormatInfoType($8287);
    public static property STENCIL_RENDERABLE:                      InternalFormatInfoType read new InternalFormatInfoType($8288);
    public static property FRAMEBUFFER_RENDERABLE:                  InternalFormatInfoType read new InternalFormatInfoType($8289);
    public static property FRAMEBUFFER_RENDERABLE_LAYERED:          InternalFormatInfoType read new InternalFormatInfoType($828A);
    public static property FRAMEBUFFER_BLEND:                       InternalFormatInfoType read new InternalFormatInfoType($828B);
    public static property READ_PIXELS:                             InternalFormatInfoType read new InternalFormatInfoType($828C);
    public static property READ_PIXELS_FORMAT:                      InternalFormatInfoType read new InternalFormatInfoType($828D);
    public static property READ_PIXELS_TYPE:                        InternalFormatInfoType read new InternalFormatInfoType($828E);
    public static property GET_TEXTURE_IMAGE_FORMAT:                InternalFormatInfoType read new InternalFormatInfoType($8291);
    public static property GET_TEXTURE_IMAGE_TYPE:                  InternalFormatInfoType read new InternalFormatInfoType($8292);
    public static property TEXTURE_IMAGE_FORMAT:                    InternalFormatInfoType read new InternalFormatInfoType($828F);
    public static property TEXTURE_IMAGE_TYPE:                      InternalFormatInfoType read new InternalFormatInfoType($8290);
    public static property MIPMAP:                                  InternalFormatInfoType read new InternalFormatInfoType($8293);
    public static property GENERATE_MIPMAP:                         InternalFormatInfoType read new InternalFormatInfoType($8191);
    public static property AUTO_GENERATE_MIPMAP:                    InternalFormatInfoType read new InternalFormatInfoType($8295);
    public static property COLOR_ENCODING:                          InternalFormatInfoType read new InternalFormatInfoType($8296);
    public static property SRGB_READ:                               InternalFormatInfoType read new InternalFormatInfoType($8297);
    public static property SRGB_WRITE:                              InternalFormatInfoType read new InternalFormatInfoType($8298);
    public static property FILTER:                                  InternalFormatInfoType read new InternalFormatInfoType($829A);
    public static property VERTEX_TEXTURE:                          InternalFormatInfoType read new InternalFormatInfoType($829B);
    public static property TESS_CONTROL_TEXTURE:                    InternalFormatInfoType read new InternalFormatInfoType($829C);
    public static property TESS_EVALUATION_TEXTURE:                 InternalFormatInfoType read new InternalFormatInfoType($829D);
    public static property GEOMETRY_TEXTURE:                        InternalFormatInfoType read new InternalFormatInfoType($829E);
    public static property FRAGMENT_TEXTURE:                        InternalFormatInfoType read new InternalFormatInfoType($829F);
    public static property COMPUTE_TEXTURE:                         InternalFormatInfoType read new InternalFormatInfoType($82A0);
    public static property TEXTURE_SHADOW:                          InternalFormatInfoType read new InternalFormatInfoType($82A1);
    public static property TEXTURE_GATHER:                          InternalFormatInfoType read new InternalFormatInfoType($82A2);
    public static property TEXTURE_GATHER_SHADOW:                   InternalFormatInfoType read new InternalFormatInfoType($82A3);
    public static property SHADER_IMAGE_LOAD:                       InternalFormatInfoType read new InternalFormatInfoType($82A4);
    public static property SHADER_IMAGE_STORE:                      InternalFormatInfoType read new InternalFormatInfoType($82A5);
    public static property SHADER_IMAGE_ATOMIC:                     InternalFormatInfoType read new InternalFormatInfoType($82A6);
    public static property IMAGE_TEXEL_SIZE:                        InternalFormatInfoType read new InternalFormatInfoType($82A7);
    public static property IMAGE_COMPATIBILITY_CLASS:               InternalFormatInfoType read new InternalFormatInfoType($82A8);
    public static property IMAGE_PIXEL_FORMAT:                      InternalFormatInfoType read new InternalFormatInfoType($82A9);
    public static property IMAGE_PIXEL_TYPE:                        InternalFormatInfoType read new InternalFormatInfoType($82AA);
    public static property IMAGE_FORMAT_COMPATIBILITY_TYPE:         InternalFormatInfoType read new InternalFormatInfoType($90C7);
    public static property SIMULTANEOUS_TEXTURE_AND_DEPTH_TEST:     InternalFormatInfoType read new InternalFormatInfoType($82AC);
    public static property SIMULTANEOUS_TEXTURE_AND_STENCIL_TEST:   InternalFormatInfoType read new InternalFormatInfoType($82AD);
    public static property SIMULTANEOUS_TEXTURE_AND_DEPTH_WRITE:    InternalFormatInfoType read new InternalFormatInfoType($82AE);
    public static property SIMULTANEOUS_TEXTURE_AND_STENCIL_WRITE:  InternalFormatInfoType read new InternalFormatInfoType($82AF);
    public static property TEXTURE_COMPRESSED:                      InternalFormatInfoType read new InternalFormatInfoType($86A1);
    public static property TEXTURE_COMPRESSED_BLOCK_WIDTH:          InternalFormatInfoType read new InternalFormatInfoType($82B1);
    public static property TEXTURE_COMPRESSED_BLOCK_HEIGHT:         InternalFormatInfoType read new InternalFormatInfoType($82B2);
    public static property TEXTURE_COMPRESSED_BLOCK_SIZE:           InternalFormatInfoType read new InternalFormatInfoType($82B3);
    public static property CLEAR_BUFFER:                            InternalFormatInfoType read new InternalFormatInfoType($82B4);
    public static property TEXTURE_VIEW:                            InternalFormatInfoType read new InternalFormatInfoType($82B5);
    public static property VIEW_COMPATIBILITY_CLASS:                InternalFormatInfoType read new InternalFormatInfoType($82B6);
    public static property CLEAR_TEXTURE:                           InternalFormatInfoType read new InternalFormatInfoType($9365);
    
  end;
  
  //S
  TransformFeedbackInfoType = record
    public val: UInt32;
    public constructor(val: UInt32) := self.val := val;
    
    public static property BUFFER_BINDING:  TransformFeedbackInfoType read new TransformFeedbackInfoType($8C8F);
    public static property BUFFER_START:    TransformFeedbackInfoType read new TransformFeedbackInfoType($8C84);
    public static property BUFFER_SIZE:     TransformFeedbackInfoType read new TransformFeedbackInfoType($8C85);
    public static property PAUSED:          TransformFeedbackInfoType read new TransformFeedbackInfoType($8E23);
    public static property ACTIVE:          TransformFeedbackInfoType read new TransformFeedbackInfoType($8E24);
    
  end;
  
  //S
  HintValue = record
    public val: UInt32;
    public constructor(val: UInt32) := self.val := val;
    
    public static property FASTEST:   HintValue read new HintValue($1101);
    public static property NICEST:    HintValue read new HintValue($1102);
    public static property DONT_CARE: HintValue read new HintValue($1100);
    
  end;
  
  //S
  HintType = record
    public val: UInt32;
    public constructor(val: UInt32) := self.val := val;
    
    public static property LINE_SMOOTH_HINT:                HintType read new HintType($0C52);
    public static property POLYGON_SMOOTH_HINT:             HintType read new HintType($0C53);
    public static property TEXTURE_COMPRESSION_HINT:        HintType read new HintType($84EF);
    public static property FRAGMENT_SHADER_DERIVATIVE_HINT: HintType read new HintType($8B8B);
    
  end;
  
  //S
  ObjectType = record
    public val: UInt32;
    public constructor(val: UInt32) := self.val := val;
    
    public static property BUFFER:              ObjectType read new ObjectType($82E0);
    public static property FRAMEBUFFER:         ObjectType read new ObjectType($8D40);
    public static property PROGRAM_PIPELINE:    ObjectType read new ObjectType($82E4);
    public static property &PROGRAM:            ObjectType read new ObjectType($82E2);
    public static property QUERY:               ObjectType read new ObjectType($82E3);
    public static property RENDERBUFFER:        ObjectType read new ObjectType($8D41);
    public static property SAMPLER:             ObjectType read new ObjectType($82E6);
    public static property SHADER:              ObjectType read new ObjectType($82E1);
    public static property TEXTURE:             ObjectType read new ObjectType($1702);
    public static property TRANSFORM_FEEDBACK:  ObjectType read new ObjectType($8E22);
    public static property VERTEX_ARRAY:        ObjectType read new ObjectType($8074);
    
  end;
  
  //S
  PixelMagFilterMode = record
    public val: UInt32;
    public constructor(val: UInt32) := self.val := val;
    
    public static property NEAREST: PixelMagFilterMode read new PixelMagFilterMode($2600);
    public static property LINEAR:  PixelMagFilterMode read new PixelMagFilterMode($2601);
    
  end;
  
  //S
  PixelMinFilterMode = record
    public val: UInt32;
    public constructor(val: UInt32) := self.val := val;
    
    public static property NEAREST:                 PixelMinFilterMode read new PixelMinFilterMode($2600);
    public static property LINEAR:                  PixelMinFilterMode read new PixelMinFilterMode($2601);
    public static property NEAREST_MIPMAP_NEAREST:  PixelMinFilterMode read new PixelMinFilterMode($2700);
    public static property NEAREST_MIPMAP_LINEAR:   PixelMinFilterMode read new PixelMinFilterMode($2702);
    public static property LINEAR_MIPMAP_NEAREST:   PixelMinFilterMode read new PixelMinFilterMode($2701);
    public static property LINEAR_MIPMAP_LINEAR:    PixelMinFilterMode read new PixelMinFilterMode($2703);
    
  end;
  
  //S
  ColorClampTarget = record
    public val: UInt32;
    public constructor(val: UInt32) := self.val := val;
    
    public static property GL_CLAMP_READ_COLOR: ColorClampTarget read new ColorClampTarget($891C);
    
  end;
  
  //S
  FrameBufferPart = record
    public val: UInt32;
    public constructor(val: UInt32) := self.val := val;
    
    public static property NONE:            FrameBufferPart read new FrameBufferPart(0);
    public static property FRONT_LEFT:      FrameBufferPart read new FrameBufferPart($0400);
    public static property FRONT_RIGHT:     FrameBufferPart read new FrameBufferPart($0401);
    public static property BACK_LEFT:       FrameBufferPart read new FrameBufferPart($0402);
    public static property BACK_RIGHT:      FrameBufferPart read new FrameBufferPart($0403);
    public static property FRONT:           FrameBufferPart read new FrameBufferPart($0404);
    public static property BACK:            FrameBufferPart read new FrameBufferPart($0405);
    public static property LEFT:            FrameBufferPart read new FrameBufferPart($0406);
    public static property RIGHT:           FrameBufferPart read new FrameBufferPart($0407);
    public static property FRONT_AND_BACK:  FrameBufferPart read new FrameBufferPart($0408);
    
  end;
  
  //S
  LogicOpCode = record
    public val: UInt32;
    public constructor(val: UInt32) := self.val := val;
    
    public static property CLEAR:         LogicOpCode read new LogicOpCode($1500);
    public static property &AND:          LogicOpCode read new LogicOpCode($1501);
    public static property AND_REVERSE:   LogicOpCode read new LogicOpCode($1502);
    public static property COPY:          LogicOpCode read new LogicOpCode($1503);
    public static property AND_INVERTED:  LogicOpCode read new LogicOpCode($1504);
    public static property NOOP:          LogicOpCode read new LogicOpCode($1505);
    public static property &XOR:          LogicOpCode read new LogicOpCode($1506);
    public static property &OR:           LogicOpCode read new LogicOpCode($1507);
    public static property NOR:           LogicOpCode read new LogicOpCode($1508);
    public static property EQUIV:         LogicOpCode read new LogicOpCode($1509);
    public static property INVERT:        LogicOpCode read new LogicOpCode($150A);
    public static property OR_REVERSE:    LogicOpCode read new LogicOpCode($150B);
    public static property COPY_INVERTED: LogicOpCode read new LogicOpCode($150C);
    public static property OR_INVERTED:   LogicOpCode read new LogicOpCode($150D);
    public static property NAND:          LogicOpCode read new LogicOpCode($150E);
    public static property &SET:          LogicOpCode read new LogicOpCode($150F);
    
  end;
  
  //S
  BlendFuncMode = record
    public val: UInt32;
    public constructor(val: UInt32) := self.val := val;
    
    public static property ZERO:                      BlendFuncMode read new BlendFuncMode(0);
    public static property ONE:                       BlendFuncMode read new BlendFuncMode(1);
    public static property SRC_COLOR:                 BlendFuncMode read new BlendFuncMode($0300);
    public static property ONE_MINUS_SRC_COLOR:       BlendFuncMode read new BlendFuncMode($0301);
    public static property DST_COLOR:                 BlendFuncMode read new BlendFuncMode($0306);
    public static property ONE_MINUS_DST_COLOR:       BlendFuncMode read new BlendFuncMode($0307);
    public static property SRC_ALPHA:                 BlendFuncMode read new BlendFuncMode($0302);
    public static property ONE_MINUS_SRC_ALPHA:       BlendFuncMode read new BlendFuncMode($0303);
    public static property DST_ALPHA:                 BlendFuncMode read new BlendFuncMode($0304);
    public static property ONE_MINUS_DST_ALPHA:       BlendFuncMode read new BlendFuncMode($0305);
    public static property CONSTANT_COLOR:            BlendFuncMode read new BlendFuncMode($8001);
    public static property ONE_MINUS_CONSTANT_COLOR:  BlendFuncMode read new BlendFuncMode($8002);
    public static property CONSTANT_ALPHA:            BlendFuncMode read new BlendFuncMode($8003);
    public static property ONE_MINUS_CONSTANT_ALPHA:  BlendFuncMode read new BlendFuncMode($8004);
    public static property SRC_ALPHA_SATURATE:        BlendFuncMode read new BlendFuncMode($0308);
    public static property SRC1_COLOR:                BlendFuncMode read new BlendFuncMode($88F9);
    public static property ONE_MINUS_SRC1_COLOR:      BlendFuncMode read new BlendFuncMode($88FA);
    public static property SRC1_ALPHA:                BlendFuncMode read new BlendFuncMode($8589);
    public static property ONE_MINUS_SRC1_ALPHA:      BlendFuncMode read new BlendFuncMode($88FB);
    
  end;
  
  //S
  BlendEquationMode = record
    public val: UInt32;
    public constructor(val: UInt32) := self.val := val;
    
    public static property FUNC_ADD:              BlendEquationMode read new BlendEquationMode($8006);
    public static property FUNC_SUBTRACT:         BlendEquationMode read new BlendEquationMode($800A);
    public static property FUNC_REVERSE_SUBTRACT: BlendEquationMode read new BlendEquationMode($800B);
    public static property MIN:                   BlendEquationMode read new BlendEquationMode($8007);
    public static property MAX:                   BlendEquationMode read new BlendEquationMode($8008);
    
  end;
  
  //S
  StencilOpFailMode = record
    public val: UInt32;
    public constructor(val: UInt32) := self.val := val;
    
    public static property KEEP:      StencilOpFailMode read new StencilOpFailMode($1E00);
    public static property ZERO:      StencilOpFailMode read new StencilOpFailMode(0);
    public static property REPLACE:   StencilOpFailMode read new StencilOpFailMode($1E01);
    public static property INCR:      StencilOpFailMode read new StencilOpFailMode($1E02);
    public static property INCR_WRAP: StencilOpFailMode read new StencilOpFailMode($8507);
    public static property DECR:      StencilOpFailMode read new StencilOpFailMode($1E03);
    public static property DECR_WRAP: StencilOpFailMode read new StencilOpFailMode($8508);
    public static property INVERT:    StencilOpFailMode read new StencilOpFailMode($150A);
    
  end;
  
  //S
  ActivationFunc = record
    public val: UInt32;
    public constructor(val: UInt32) := self.val := val;
    
    public static property NEVER:     ActivationFunc read new ActivationFunc($0200);
    public static property LESS:      ActivationFunc read new ActivationFunc($0201);
    public static property LEQUAL:    ActivationFunc read new ActivationFunc($0203);
    public static property GREATER:   ActivationFunc read new ActivationFunc($0204);
    public static property GEQUAL:    ActivationFunc read new ActivationFunc($0206);
    public static property EQUAL:     ActivationFunc read new ActivationFunc($0202);
    public static property NOTEQUAL:  ActivationFunc read new ActivationFunc($0205);
    public static property ALWAYS:    ActivationFunc read new ActivationFunc($0207);
    
  end;
  
  //S
  PolygonRasterizationMode = record
    public val: UInt32;
    public constructor(val: UInt32) := self.val := val;
    
    public static property POINT: PolygonRasterizationMode read new PolygonRasterizationMode($1B00);
    public static property LINE:  PolygonRasterizationMode read new PolygonRasterizationMode($1B01);
    public static property FILL:  PolygonRasterizationMode read new PolygonRasterizationMode($1B02);
    
  end;
  
  //S
  PolygonFace = record
    public val: UInt32;
    public constructor(val: UInt32) := self.val := val;
    
    public static property FRONT:           PolygonFace read new PolygonFace($0404);
    public static property BACK:            PolygonFace read new PolygonFace($0405);
    public static property FRONT_AND_BACK:  PolygonFace read new PolygonFace($0408);
    
  end;
  
  //S
  FrontFaceDirection = record
    public val: UInt32;
    public constructor(val: UInt32) := self.val := val;
    
    public static property СW:  FrontFaceDirection read new FrontFaceDirection($0900);
    public static property СCW: FrontFaceDirection read new FrontFaceDirection($0901);
    
  end;
  
  //S
  PointInfoType = record
    public val: UInt32;
    public constructor(val: UInt32) := self.val := val;
    
    public static property FADE_THRESHOLD_SIZE: PointInfoType read new PointInfoType($8128);
    public static property SPRITE_COORD_ORIGIN: PointInfoType read new PointInfoType($8CA0);
    
  end;
  
  //S
  MultisampleInfoType = record
    public val: UInt32;
    public constructor(val: UInt32) := self.val := val;
    
    public static property GL_SAMPLE_POSITION:  MultisampleInfoType read new MultisampleInfoType($8E50);
    
  end;
  
  //S
  ClipDepthMode = record
    public val: UInt32;
    public constructor(val: UInt32) := self.val := val;
    
    public static property NEGATIVE_ONE_TO_ONE: ClipDepthMode read new ClipDepthMode($935E);
    public static property ZERO_TO_ONE:         ClipDepthMode read new ClipDepthMode($935F);
    
  end;
  
  //S
  ClipOriginMode = record
    public val: UInt32;
    public constructor(val: UInt32) := self.val := val;
    
    public static property LOWER_LEFT:  ClipOriginMode read new ClipOriginMode($8CA1);
    public static property UPPER_LEFT:  ClipOriginMode read new ClipOriginMode($8CA2);
    
  end;
  
  //S
  TransformFeedbackBindTarget = record
    public val: UInt32;
    public constructor(val: UInt32) := self.val := val;
    
    public static property GL_TRANSFORM_FEEDBACK: TransformFeedbackBindTarget read new TransformFeedbackBindTarget($8E22);
    
  end;
  
  //S
  TransformFeedbackBufferMode = record
    public val: UInt32;
    public constructor(val: UInt32) := self.val := val;
    
    public static property INTERLEAVED_ATTRIBS: TransformFeedbackBufferMode read new TransformFeedbackBufferMode($8C8C);
    public static property SEPARATE_ATTRIBS:    TransformFeedbackBufferMode read new TransformFeedbackBufferMode($8C8D);
    
  end;
  
  //S
  ConditionalRenderingMode = record
    public val: UInt32;
    public constructor(val: UInt32) := self.val := val;
    
    public static property WAIT:                        ConditionalRenderingMode read new ConditionalRenderingMode($8E13);
    public static property NO_WAIT:                     ConditionalRenderingMode read new ConditionalRenderingMode($8E14);
    public static property BY_REGION_WAIT:              ConditionalRenderingMode read new ConditionalRenderingMode($8E15);
    public static property BY_REGION_NO_WAIT:           ConditionalRenderingMode read new ConditionalRenderingMode($8E16);
    public static property WAIT_INVERTED:               ConditionalRenderingMode read new ConditionalRenderingMode($8E17);
    public static property NO_WAIT_INVERTED:            ConditionalRenderingMode read new ConditionalRenderingMode($8E18);
    public static property BY_REGION_WAIT_INVERTED:     ConditionalRenderingMode read new ConditionalRenderingMode($8E19);
    public static property BY_REGION_NO_WAIT_INVERTED:  ConditionalRenderingMode read new ConditionalRenderingMode($8E1A);
    
  end;
  
  //S
  VertexAttribInfoType = record
    public val: UInt32;
    public constructor(val: UInt32) := self.val := val;
    
    public static property ELEMENT_ARRAY_BUFFER_BINDING:        VertexAttribInfoType read new VertexAttribInfoType($8895);
    public static property VERTEX_ATTRIB_ARRAY_ENABLED:         VertexAttribInfoType read new VertexAttribInfoType($8622);
    public static property VERTEX_ATTRIB_ARRAY_SIZE:            VertexAttribInfoType read new VertexAttribInfoType($8623);
    public static property VERTEX_ATTRIB_ARRAY_STRIDE:          VertexAttribInfoType read new VertexAttribInfoType($8624);
    public static property VERTEX_ATTRIB_ARRAY_TYPE:            VertexAttribInfoType read new VertexAttribInfoType($8625);
    public static property VERTEX_ATTRIB_ARRAY_NORMALIZED:      VertexAttribInfoType read new VertexAttribInfoType($886A);
    public static property VERTEX_ATTRIB_ARRAY_INTEGER:         VertexAttribInfoType read new VertexAttribInfoType($88FD);
    public static property VERTEX_ATTRIB_ARRAY_LONG:            VertexAttribInfoType read new VertexAttribInfoType($874E);
    public static property VERTEX_ATTRIB_ARRAY_DIVISOR:         VertexAttribInfoType read new VertexAttribInfoType($88FE);
    public static property VERTEX_ATTRIB_RELATIVE_OFFSET:       VertexAttribInfoType read new VertexAttribInfoType($82D5);
    public static property VERTEX_BINDING_OFFSET:               VertexAttribInfoType read new VertexAttribInfoType($82D7);
    public static property VERTEX_ATTRIB_ARRAY_BUFFER_BINDING:  VertexAttribInfoType read new VertexAttribInfoType($889F);
    public static property VERTEX_ATTRIB_BINDING:               VertexAttribInfoType read new VertexAttribInfoType($82D4);
    public static property CURRENT_VERTEX_ATTRIB:               VertexAttribInfoType read new VertexAttribInfoType($8626);
    
  end;
  
  //S
  PatchMode = record
    public val: UInt32;
    public constructor(val: UInt32) := self.val := val;
    
    public static property VERTICES:            PatchMode read new PatchMode($8E72);
    public static property DEFAULT_INNER_LEVEL: PatchMode read new PatchMode($8E73);
    public static property DEFAULT_OUTER_LEVEL: PatchMode read new PatchMode($8E74);
    
  end;
  
  //S
  PrimitiveType = record
    public val: UInt32;
    public constructor(val: UInt32) := self.val := val;
    
    public static property POINTS:                    PrimitiveType read new PrimitiveType($0000);
    
    public static property LINES:                     PrimitiveType read new PrimitiveType($0001);
    public static property LINE_LOOP:                 PrimitiveType read new PrimitiveType($0002);
    public static property LINE_STRIP:                PrimitiveType read new PrimitiveType($0003);
    public static property LINES_ADJACENCY:           PrimitiveType read new PrimitiveType($000A);
    public static property LINE_STRIP_ADJACENCY:      PrimitiveType read new PrimitiveType($000B);
    
    public static property TRIANGLES:                 PrimitiveType read new PrimitiveType($0004);
    public static property TRIANGLE_STRIP:            PrimitiveType read new PrimitiveType($0005);
    public static property TRIANGLE_FAN:              PrimitiveType read new PrimitiveType($0006);
    public static property TRIANGLES_ADJACENCY:       PrimitiveType read new PrimitiveType($000C);
    public static property TRIANGLE_STRIP_ADJACENCY:  PrimitiveType read new PrimitiveType($000D);
    
    public static property PATCHES:                   PrimitiveType read new PrimitiveType($000E);
    
  end;
  
  //S
  FramebufferAttachmentInfoType = record
    public val: UInt32;
    public constructor(val: UInt32) := self.val := val;
    
    public static property OBJECT_TYPE:           FramebufferAttachmentInfoType read new FramebufferAttachmentInfoType($8CD0); // FramebufferAttachmentObjectType
    
    // non- NONE
    public static property OBJECT_NAME:           FramebufferAttachmentInfoType read new FramebufferAttachmentInfoType($8CD1); // UInt32
    public static property RED_SIZE:              FramebufferAttachmentInfoType read new FramebufferAttachmentInfoType($8212); // Int32
    public static property GREEN_SIZE:            FramebufferAttachmentInfoType read new FramebufferAttachmentInfoType($8213); // Int32
    public static property BLUE_SIZE:             FramebufferAttachmentInfoType read new FramebufferAttachmentInfoType($8214); // Int32
    public static property ALPHA_SIZE:            FramebufferAttachmentInfoType read new FramebufferAttachmentInfoType($8215); // Int32
    public static property DEPTH_SIZE:            FramebufferAttachmentInfoType read new FramebufferAttachmentInfoType($8216); // Int32
    public static property STENCIL_SIZE:          FramebufferAttachmentInfoType read new FramebufferAttachmentInfoType($8217); // Int32
    public static property COMPONENT_TYPE:        FramebufferAttachmentInfoType read new FramebufferAttachmentInfoType($8211); // Int32
    public static property COLOR_ENCODING:        FramebufferAttachmentInfoType read new FramebufferAttachmentInfoType($8210); // Int32
    
    // TEXTURE
    public static property TEXTURE_LEVEL:         FramebufferAttachmentInfoType read new FramebufferAttachmentInfoType($8CD2); // Int32
    public static property TEXTURE_CUBE_MAP_FACE: FramebufferAttachmentInfoType read new FramebufferAttachmentInfoType($8CD3); // Int32
    public static property LAYERED:               FramebufferAttachmentInfoType read new FramebufferAttachmentInfoType($8DA7); // 32-битное boolean (Int32, 0=False, остальное=True)
    public static property TEXTURE_LAYER:         FramebufferAttachmentInfoType read new FramebufferAttachmentInfoType($8CD4); // Int32
    
  end;
  
  //S
  FramebufferInfoType = record
    public val: UInt32;
    public constructor(val: UInt32) := self.val := val;
    
    public static property WIDTH:                   FramebufferInfoType read new FramebufferInfoType($9310);
    public static property HEIGHT:                  FramebufferInfoType read new FramebufferInfoType($9311);
    public static property LAYERS:                  FramebufferInfoType read new FramebufferInfoType($9312);
    public static property SAMPLES:                 FramebufferInfoType read new FramebufferInfoType($9313);
    public static property FIXED_SAMPLE_LOCATIONS:  FramebufferInfoType read new FramebufferInfoType($9314);
    
  end;
  
  //S
  FramebufferBindTarget = record
    public val: UInt32;
    public constructor(val: UInt32) := self.val := val;
    
    public static property READ_FRAMEBUFFER:  FramebufferBindTarget read new FramebufferBindTarget($8CA8);
    public static property DRAW_FRAMEBUFFER:  FramebufferBindTarget read new FramebufferBindTarget($8CA9);
    public static property FRAMEBUFFER:       FramebufferBindTarget read new FramebufferBindTarget($8D40);
    
  end;
  
  //S
  TextureCubeSide = record
    public val: UInt32;
    public constructor(val: UInt32) := self.val := val;
    
    public static property POSITIVE_X:  TextureCubeSide read new TextureCubeSide($8515);
    public static property NEGATIVE_X:  TextureCubeSide read new TextureCubeSide($8516);
    public static property POSITIVE_Y:  TextureCubeSide read new TextureCubeSide($8517);
    public static property NEGATIVE_Y:  TextureCubeSide read new TextureCubeSide($8518);
    public static property POSITIVE_Z:  TextureCubeSide read new TextureCubeSide($8519);
    public static property NEGATIVE_Z:  TextureCubeSide read new TextureCubeSide($851A);
    
  end;
  
  //S
  RenderbufferBindTarget = record
    public val: UInt32;
    public constructor(val: UInt32) := self.val := val;
    
    public static property RENDERBUFFER: RenderbufferBindTarget read new RenderbufferBindTarget($8D41);
    
  end;
  
  //S
  AccessType = record
    public val: UInt32;
    public constructor(val: UInt32) := self.val := val;
    
    public static property READ_ONLY:   AccessType read new AccessType($88B8);
    public static property WRITE_ONLY:  AccessType read new AccessType($88B9);
    public static property READ_WRITE:  AccessType read new AccessType($88BA);
    
  end;
  
  //S
  TextureInfoType = record
    public val: UInt32;
    public constructor(val: UInt32) := self.val := val;
    
    public static property DEPTH_STENCIL_TEXTURE_MODE:  TextureInfoType read new TextureInfoType($90EA);
    public static property BASE_LEVEL:                  TextureInfoType read new TextureInfoType($813C);
    public static property BORDER_COLOR:                TextureInfoType read new TextureInfoType($1004);
    public static property COMPARE_MODE:                TextureInfoType read new TextureInfoType($884C);
    public static property COMPARE_FUNC:                TextureInfoType read new TextureInfoType($884D);
    public static property LOD_BIAS:                    TextureInfoType read new TextureInfoType($8501);
    public static property MAG_FILTER:                  TextureInfoType read new TextureInfoType($2800);
    public static property MAX_ANISOTROPY:              TextureInfoType read new TextureInfoType($84FE);
    public static property MAX_LEVEL:                   TextureInfoType read new TextureInfoType($813D);
    public static property MAX_LOD:                     TextureInfoType read new TextureInfoType($813B);
    public static property MIN_FILTER:                  TextureInfoType read new TextureInfoType($2801);
    public static property MIN_LOD:                     TextureInfoType read new TextureInfoType($813A);
    public static property SWIZZLE_R:                   TextureInfoType read new TextureInfoType($8E42);
    public static property SWIZZLE_G:                   TextureInfoType read new TextureInfoType($8E43);
    public static property SWIZZLE_B:                   TextureInfoType read new TextureInfoType($8E44);
    public static property SWIZZLE_A:                   TextureInfoType read new TextureInfoType($8E45);
    public static property SWIZZLE_RGBA:                TextureInfoType read new TextureInfoType($8E46);
    public static property WRAP_S:                      TextureInfoType read new TextureInfoType($2802);
    public static property WRAP_T:                      TextureInfoType read new TextureInfoType($2803);
    public static property WRAP_R:                      TextureInfoType read new TextureInfoType($8072);
    
  end;
  
  //S
  PixelInfoType = record
    public val: UInt32;
    public constructor(val: UInt32) := self.val := val;
    
    public static property UNPACK_SWAP_BYTES:               PixelInfoType read new PixelInfoType($0CF0);
    public static property UNPACK_LSB_FIRST:                PixelInfoType read new PixelInfoType($0CF1);
    public static property UNPACK_ROW_LENGTH:               PixelInfoType read new PixelInfoType($0CF2);
    public static property UNPACK_SKIP_ROWS:                PixelInfoType read new PixelInfoType($0CF3);
    public static property UNPACK_SKIP_PIXELS:              PixelInfoType read new PixelInfoType($0CF4);
    public static property UNPACK_ALIGNMENT:                PixelInfoType read new PixelInfoType($0CF5);
    public static property UNPACK_IMAGE_HEIGHT:             PixelInfoType read new PixelInfoType($806E);
    public static property UNPACK_SKIP_IMAGES:              PixelInfoType read new PixelInfoType($806D);
    public static property UNPACK_COMPRESSED_BLOCK_WIDTH:   PixelInfoType read new PixelInfoType($9127);
    public static property UNPACK_COMPRESSED_BLOCK_HEIGHT:  PixelInfoType read new PixelInfoType($9128);
    public static property UNPACK_COMPRESSED_BLOCK_DEPTH:   PixelInfoType read new PixelInfoType($9129);
    public static property UNPACK_COMPRESSED_BLOCK_SIZE:    PixelInfoType read new PixelInfoType($912A);
    public static property PACK_SWAP_BYTES:                 PixelInfoType read new PixelInfoType($0D00);
    public static property PACK_LSB_FIRST:                  PixelInfoType read new PixelInfoType($0D01);
    public static property PACK_ROW_LENGTH:                 PixelInfoType read new PixelInfoType($0D02);
    public static property PACK_SKIP_ROWS:                  PixelInfoType read new PixelInfoType($0D03);
    public static property PACK_SKIP_PIXELS:                PixelInfoType read new PixelInfoType($0D04);
    public static property PACK_ALIGNMENT:                  PixelInfoType read new PixelInfoType($0D05);
    public static property PACK_IMAGE_HEIGHT:               PixelInfoType read new PixelInfoType($806C);
    public static property PACK_SKIP_IMAGES:                PixelInfoType read new PixelInfoType($806B);
    public static property PACK_COMPRESSED_BLOCK_WIDTH:     PixelInfoType read new PixelInfoType($912B);
    public static property PACK_COMPRESSED_BLOCK_HEIGHT:    PixelInfoType read new PixelInfoType($912C);
    public static property PACK_COMPRESSED_BLOCK_DEPTH:     PixelInfoType read new PixelInfoType($912D);
    public static property PACK_COMPRESSED_BLOCK_SIZE:      PixelInfoType read new PixelInfoType($912E);
    
  end;
  
  //S
  TextureUnitId = record
    public val: UInt32;
    public constructor(val: UInt32) := self.val := val;
    
    public static property Texture[i: integer]: TextureUnitId read new TextureUnitId($84C0+i);
    
  end;
  
  //S
  FramebufferAttachmentPoint = record
    public val: UInt32;
    public constructor(val: UInt32) := self.val := val;
    
    // custom framebuffer
    public static property COLOR_ATTACHMENT[i: integer]:  FramebufferAttachmentPoint read new FramebufferAttachmentPoint($8CE0+i);
    public static property DEPTH_ATTACHMENT:              FramebufferAttachmentPoint read new FramebufferAttachmentPoint($8D00);
    public static property STENCIL_ATTACHMENT:            FramebufferAttachmentPoint read new FramebufferAttachmentPoint($8D20);
    public static property DEPTH_STENCIL_ATTACHMENT:      FramebufferAttachmentPoint read new FramebufferAttachmentPoint($821A);
    
    // default framebuffer
    public static property FRONT:                         FramebufferAttachmentPoint read new FramebufferAttachmentPoint($0404);
    public static property FRONT_LEFT:                    FramebufferAttachmentPoint read new FramebufferAttachmentPoint($0400);
    public static property FRONT_RIGHT:                   FramebufferAttachmentPoint read new FramebufferAttachmentPoint($0401);
    public static property BACK:                          FramebufferAttachmentPoint read new FramebufferAttachmentPoint($0405);
    public static property BACK_LEFT:                     FramebufferAttachmentPoint read new FramebufferAttachmentPoint($0402);
    public static property BACK_RIGHT:                    FramebufferAttachmentPoint read new FramebufferAttachmentPoint($0403);
    public static property DEPTH:                         FramebufferAttachmentPoint read new FramebufferAttachmentPoint($1801);
    public static property STENCIL:                       FramebufferAttachmentPoint read new FramebufferAttachmentPoint($1802);
    
  end;
  
  //S
  TextureBindTarget = record
    public val: UInt32;
    public constructor(val: UInt32) := self.val := val;
    
    public static property T_1D:                          TextureBindTarget read new TextureBindTarget($0DE0);
    public static property T_2D:                          TextureBindTarget read new TextureBindTarget($0DE1);
    public static property T_3D:                          TextureBindTarget read new TextureBindTarget($806F);
    public static property T_1D_ARRAY:                    TextureBindTarget read new TextureBindTarget($8C18);
    public static property T_2D_ARRAY:                    TextureBindTarget read new TextureBindTarget($8C1A);
    public static property T_RECTANGLE:                   TextureBindTarget read new TextureBindTarget($84F5);
    public static property T_BUFFER:                      TextureBindTarget read new TextureBindTarget($8C2A);
    public static property T_CUBE_MAP:                    TextureBindTarget read new TextureBindTarget($8513);
    public static property T_CUBE_MAP_ARRAY:              TextureBindTarget read new TextureBindTarget($9009);
    public static property T_2D_MULTISAMPLE:              TextureBindTarget read new TextureBindTarget($9100);
    public static property PROXY_T_2D_MULTISAMPLE:        TextureBindTarget read new TextureBindTarget($9101);
    public static property T_2D_MULTISAMPLE_ARRAY:        TextureBindTarget read new TextureBindTarget($9102);
    public static property PROXY_T_2D_MULTISAMPLE_ARRAY:  TextureBindTarget read new TextureBindTarget($9103);
    
  end;
  
  //S
  ShaderPrecisionFormatType = record
    public val: UInt32;
    public constructor(val: UInt32) := self.val := val;
    
    public static property LOW_FLOAT:     ShaderPrecisionFormatType read new ShaderPrecisionFormatType($8DF0);
    public static property MEDIUM_FLOAT:  ShaderPrecisionFormatType read new ShaderPrecisionFormatType($8DF1);
    public static property HIGH_FLOAT:    ShaderPrecisionFormatType read new ShaderPrecisionFormatType($8DF2);
    public static property LOW_INT:       ShaderPrecisionFormatType read new ShaderPrecisionFormatType($8DF3);
    public static property MEDIUM_INT:    ShaderPrecisionFormatType read new ShaderPrecisionFormatType($8DF4);
    public static property HIGH_INT:      ShaderPrecisionFormatType read new ShaderPrecisionFormatType($8DF5);
    
  end;
  
  //S
  ProgramInterfaceProperty = record
    public val: UInt32;
    public constructor(val: UInt32) := self.val := val;
    
    public static property ACTIVE_VARIABLES:                      ProgramInterfaceProperty read new ProgramInterfaceProperty($9305);
    public static property BUFFER_BINDING:                        ProgramInterfaceProperty read new ProgramInterfaceProperty($9302);
    public static property NUM_ACTIVE_VARIABLES:                  ProgramInterfaceProperty read new ProgramInterfaceProperty($9304);
    public static property ARRAY_SIZE:                            ProgramInterfaceProperty read new ProgramInterfaceProperty($92FB);
    public static property ARRAY_STRIDE:                          ProgramInterfaceProperty read new ProgramInterfaceProperty($92FE);
    public static property BLOCK_INDEX:                           ProgramInterfaceProperty read new ProgramInterfaceProperty($92FD);
    public static property IS_ROW_MAJOR:                          ProgramInterfaceProperty read new ProgramInterfaceProperty($9300);
    public static property MATRIX_STRIDE:                         ProgramInterfaceProperty read new ProgramInterfaceProperty($92FF);
    public static property ATOMIC_COUNTER_BUFFER_INDEX:           ProgramInterfaceProperty read new ProgramInterfaceProperty($9301);
    public static property BUFFER_DATA_SIZE:                      ProgramInterfaceProperty read new ProgramInterfaceProperty($9303);
    public static property NUM_COMPATIBLE_SUBROUTINES:            ProgramInterfaceProperty read new ProgramInterfaceProperty($8E4A);
    public static property COMPATIBLE_SUBROUTINES:                ProgramInterfaceProperty read new ProgramInterfaceProperty($8E4B);
    public static property IS_PER_PATCH:                          ProgramInterfaceProperty read new ProgramInterfaceProperty($92E7);
    public static property LOCATION:                              ProgramInterfaceProperty read new ProgramInterfaceProperty($930E);
    public static property LOCATION_COMPONENT:                    ProgramInterfaceProperty read new ProgramInterfaceProperty($934A);
    public static property LOCATION_INDEX:                        ProgramInterfaceProperty read new ProgramInterfaceProperty($930F);
    public static property NAME_LENGTH:                           ProgramInterfaceProperty read new ProgramInterfaceProperty($92F9);
    public static property OFFSET:                                ProgramInterfaceProperty read new ProgramInterfaceProperty($92FC);
    public static property REFERENCED_BY_VERTEX_SHADER:           ProgramInterfaceProperty read new ProgramInterfaceProperty($9306);
    public static property REFERENCED_BY_TESS_CONTROL_SHADER:     ProgramInterfaceProperty read new ProgramInterfaceProperty($9307);
    public static property REFERENCED_BY_TESS_EVALUATION_SHADER:  ProgramInterfaceProperty read new ProgramInterfaceProperty($9308);
    public static property REFERENCED_BY_GEOMETRY_SHADER:         ProgramInterfaceProperty read new ProgramInterfaceProperty($9309);
    public static property REFERENCED_BY_FRAGMENT_SHADER:         ProgramInterfaceProperty read new ProgramInterfaceProperty($930A);
    public static property REFERENCED_BY_COMPUTE_SHADER:          ProgramInterfaceProperty read new ProgramInterfaceProperty($930B);
    public static property TRANSFORM_FEEDBACK_BUFFER_INDEX:       ProgramInterfaceProperty read new ProgramInterfaceProperty($934B);
    public static property TRANSFORM_FEEDBACK_BUFFER_STRIDE:      ProgramInterfaceProperty read new ProgramInterfaceProperty($934C);
    public static property TOP_LEVEL_ARRAY_SIZE:                  ProgramInterfaceProperty read new ProgramInterfaceProperty($930C);
    public static property TOP_LEVEL_ARRAY_STRIDE:                ProgramInterfaceProperty read new ProgramInterfaceProperty($930D);
    public static property &TYPE:                                 ProgramInterfaceProperty read new ProgramInterfaceProperty($92FA);
    
//    public static property TEXTURE_BUFFER:                         read new ProgramInterfaceProperty($8C2A); // типа существует, но это не точно
    
  end;
  
  //S
  ProgramInterfaceInfoType = record
    public val: UInt32;
    public constructor(val: UInt32) := self.val := val;
    
    public static property ACTIVE_RESOURCES:                ProgramInterfaceInfoType read new ProgramInterfaceInfoType($92F5);
    public static property MAX_NAME_LENGTH:                 ProgramInterfaceInfoType read new ProgramInterfaceInfoType($92F6);
    public static property MAX_NUM_ACTIVE_VARIABLES:        ProgramInterfaceInfoType read new ProgramInterfaceInfoType($92F7);
    public static property MAX_NUM_COMPATIBLE_SUBROUTINES:  ProgramInterfaceInfoType read new ProgramInterfaceInfoType($92F8);
    
  end;
  
  //S
  ProgramInterfaceType = record
    public val: UInt32;
    public constructor(val: UInt32) := self.val := val;
    
    public static property UNIFORM:                             ProgramInterfaceType read new ProgramInterfaceType($92E1);
    public static property UNIFORM_BLOCK:                       ProgramInterfaceType read new ProgramInterfaceType($92E2);
    public static property ATOMIC_COUNTER_BUFFER:               ProgramInterfaceType read new ProgramInterfaceType($92C0);
    public static property PROGRAM_INPUT:                       ProgramInterfaceType read new ProgramInterfaceType($92E3);
    public static property PROGRAM_OUTPUT:                      ProgramInterfaceType read new ProgramInterfaceType($92E4);
    public static property VERTEX_SUBROUTINE:                   ProgramInterfaceType read new ProgramInterfaceType($92E8);
    public static property TESS_CONTROL_SUBROUTINE:             ProgramInterfaceType read new ProgramInterfaceType($92E9);
    public static property TESS_EVALUATION_SUBROUTINE:          ProgramInterfaceType read new ProgramInterfaceType($92EA);
    public static property GEOMETRY_SUBROUTINE:                 ProgramInterfaceType read new ProgramInterfaceType($92EB);
    public static property FRAGMENT_SUBROUTINE:                 ProgramInterfaceType read new ProgramInterfaceType($92EC);
    public static property COMPUTE_SUBROUTINE:                  ProgramInterfaceType read new ProgramInterfaceType($92ED);
    public static property VERTEX_SUBROUTINE_UNIFORM:           ProgramInterfaceType read new ProgramInterfaceType($92EE);
    public static property TESS_CONTROL_SUBROUTINE_UNIFORM:     ProgramInterfaceType read new ProgramInterfaceType($92EF);
    public static property TESS_EVALUATION_SUBROUTINE_UNIFORM:  ProgramInterfaceType read new ProgramInterfaceType($92F0);
    public static property GEOMETRY_SUBROUTINE_UNIFORM:         ProgramInterfaceType read new ProgramInterfaceType($92F1);
    public static property FRAGMENT_SUBROUTINE_UNIFORM:         ProgramInterfaceType read new ProgramInterfaceType($92F2);
    public static property COMPUTE_SUBROUTINE_UNIFORM:          ProgramInterfaceType read new ProgramInterfaceType($92F3);
    public static property TRANSFORM_FEEDBACK_VARYING:          ProgramInterfaceType read new ProgramInterfaceType($92F4);
    public static property BUFFER_VARIABLE:                     ProgramInterfaceType read new ProgramInterfaceType($92E5);
    public static property SHADER_STORAGE_BLOCK:                ProgramInterfaceType read new ProgramInterfaceType($92E6);
    public static property TRANSFORM_FEEDBACK_BUFFER:           ProgramInterfaceType read new ProgramInterfaceType($8C8E);
    
  end;
  
  //S
  ProgramParameterType = record
    public val: UInt32;
    public constructor(val: UInt32) := self.val := val;
    
    public static property SEPARABLE:               ProgramParameterType read new ProgramParameterType($8258);
    public static property BINARY_RETRIEVABLE_HINT: ProgramParameterType read new ProgramParameterType($8257);
    
  end;
  
  //S
  ShaderType = record
    public val: UInt32;
    public constructor(val: UInt32) := self.val := val;
    
    public static property VERTEX_SHADER:           ShaderType read new ShaderType($8B31);
    public static property TESS_CONTROL_SHADER:     ShaderType read new ShaderType($8E88);
    public static property TESS_EVALUATION_SHADER:  ShaderType read new ShaderType($8E87);
    public static property GEOMETRY_SHADER:         ShaderType read new ShaderType($8DD9);
    public static property FRAGMENT_SHADER:         ShaderType read new ShaderType($8B30);
    public static property COMPUTE_SHADER:          ShaderType read new ShaderType($91B9);
    
  end;
  
  //S
  SyncObjectType = record
    public val: UInt32;
    public constructor(val: UInt32) := self.val := val;
    
    public static property GL_SYNC_FENCE: SyncObjectType read new SyncObjectType($9116);
    
  end;
  
  //S
  FenceStatus = record
    public val: UInt32;
    public constructor(val: UInt32) := self.val := val;
    
    public static property UNSIGNALED:  FenceStatus read new FenceStatus($9118);
    public static property SIGNALED:    FenceStatus read new FenceStatus($9119);
    
  end;
  
  //S
  FenceCondition = record
    public val: UInt32;
    public constructor(val: UInt32) := self.val := val;
    
    public static property GL_SYNC_GPU_COMMANDS_COMPLETE: FenceCondition read new FenceCondition($9117);
    
  end;
  
  //S
  BufferBindType = record
    public val: UInt32;
    public constructor(val: UInt32) := self.val := val;
    
    public static property ARRAY_BUFFER:              BufferBindType read new BufferBindType($8892);
    public static property ATOMIC_COUNTER_BUFFER:     BufferBindType read new BufferBindType($92C0);
    public static property COPY_READ_BUFFER:          BufferBindType read new BufferBindType($8F36);
    public static property COPY_WRITE_BUFFER:         BufferBindType read new BufferBindType($8F37);
    public static property DISPATCH_INDIRECT_BUFFER:  BufferBindType read new BufferBindType($90EE);
    public static property DRAW_INDIRECT_BUFFER:      BufferBindType read new BufferBindType($8F3F);
    public static property ELEMENT_ARRAY_BUFFER:      BufferBindType read new BufferBindType($8893);
    public static property PIXEL_PACK_BUFFER:         BufferBindType read new BufferBindType($88EB);
    public static property PIXEL_UNPACK_BUFFER:       BufferBindType read new BufferBindType($88EC);
    public static property QUERY_BUFFER:              BufferBindType read new BufferBindType($9192);
    public static property SHADER_STORAGE_BUFFER:     BufferBindType read new BufferBindType($90D2);
    public static property TEXTURE_BUFFER:            BufferBindType read new BufferBindType($8C2A);
    public static property TRANSFORM_FEEDBACK_BUFFER: BufferBindType read new BufferBindType($8C8E);
    public static property UNIFORM_BUFFER:            BufferBindType read new BufferBindType($8A11);
    
  end;
  
  //S
  CopyableImageType = record
    public val: UInt32;
    public constructor(val: UInt32) := self.val := val;
    
    public static property ARRAY_BUFFER:              CopyableImageType read new CopyableImageType($8892);
    public static property ATOMIC_COUNTER_BUFFER:     CopyableImageType read new CopyableImageType($92C0);
    public static property COPY_READ_BUFFER:          CopyableImageType read new CopyableImageType($8F36);
    public static property COPY_WRITE_BUFFER:         CopyableImageType read new CopyableImageType($8F37);
    public static property DISPATCH_INDIRECT_BUFFER:  CopyableImageType read new CopyableImageType($90EE);
    public static property DRAW_INDIRECT_BUFFER:      CopyableImageType read new CopyableImageType($8F3F);
    public static property ELEMENT_ARRAY_BUFFER:      CopyableImageType read new CopyableImageType($8893);
    public static property PIXEL_PACK_BUFFER:         CopyableImageType read new CopyableImageType($88EB);
    public static property PIXEL_UNPACK_BUFFER:       CopyableImageType read new CopyableImageType($88EC);
    public static property QUERY_BUFFER:              CopyableImageType read new CopyableImageType($9192);
    public static property SHADER_STORAGE_BUFFER:     CopyableImageType read new CopyableImageType($90D2);
    public static property TEXTURE_BUFFER:            CopyableImageType read new CopyableImageType($8C2A);
    public static property TRANSFORM_FEEDBACK_BUFFER: CopyableImageType read new CopyableImageType($8C8E);
    public static property UNIFORM_BUFFER:            CopyableImageType read new CopyableImageType($8A11);
    
    public static property GL_RENDERBUFFER:           CopyableImageType read new CopyableImageType($8D41);
    
  end;
  
  //S
  BufferDataUsage = record
    public val: UInt32;
    public constructor(val: UInt32) := self.val := val;
    
    public static property STREAM_DRAW:   BufferDataUsage read new BufferDataUsage($88E0);
    public static property STREAM_READ:   BufferDataUsage read new BufferDataUsage($88E1);
    public static property STREAM_COPY:   BufferDataUsage read new BufferDataUsage($88E2);
    public static property STATIC_DRAW:   BufferDataUsage read new BufferDataUsage($88E4);
    public static property STATIC_READ:   BufferDataUsage read new BufferDataUsage($88E5);
    public static property STATIC_COPY:   BufferDataUsage read new BufferDataUsage($88E6);
    public static property DYNAMIC_DRAW:  BufferDataUsage read new BufferDataUsage($88E8);
    public static property DYNAMIC_READ:  BufferDataUsage read new BufferDataUsage($88E9);
    public static property DYNAMIC_COPY:  BufferDataUsage read new BufferDataUsage($88EA);
    
  end;
  
  //S
  InternalDataFormat = record
    public val: UInt32;
    public constructor(val: UInt32) := self.val := val;
    
    public static property R8:        InternalDataFormat read new InternalDataFormat($8229);
    public static property R8I:       InternalDataFormat read new InternalDataFormat($8231);
    public static property R8UI:      InternalDataFormat read new InternalDataFormat($8232);
    public static property R16:       InternalDataFormat read new InternalDataFormat($822A);
    public static property R16I:      InternalDataFormat read new InternalDataFormat($8233);
    public static property R16UI:     InternalDataFormat read new InternalDataFormat($8234);
    public static property R16F:      InternalDataFormat read new InternalDataFormat($822D);
    public static property R32I:      InternalDataFormat read new InternalDataFormat($8235);
    public static property R32UI:     InternalDataFormat read new InternalDataFormat($8236);
    public static property R32F:      InternalDataFormat read new InternalDataFormat($822E);
    
    public static property RG8:       InternalDataFormat read new InternalDataFormat($822B);
    public static property RG8I:      InternalDataFormat read new InternalDataFormat($8237);
    public static property RG8UI:     InternalDataFormat read new InternalDataFormat($8238);
    public static property RG16:      InternalDataFormat read new InternalDataFormat($822C);
    public static property RG16I:     InternalDataFormat read new InternalDataFormat($8239);
    public static property RG16UI:    InternalDataFormat read new InternalDataFormat($823A);
    public static property RG16F:     InternalDataFormat read new InternalDataFormat($822F);
    public static property RG32I:     InternalDataFormat read new InternalDataFormat($823B);
    public static property RG32UI:    InternalDataFormat read new InternalDataFormat($823C);
    public static property RG32F:     InternalDataFormat read new InternalDataFormat($8230);
    
    public static property RGB8:      InternalDataFormat read new InternalDataFormat($8051);
    public static property RGB8I:     InternalDataFormat read new InternalDataFormat($8D8F);
    public static property RGB8UI:    InternalDataFormat read new InternalDataFormat($8D7D);
    public static property RGB16:     InternalDataFormat read new InternalDataFormat($8054);
    public static property RGB16I:    InternalDataFormat read new InternalDataFormat($8D89);
    public static property RGB16UI:   InternalDataFormat read new InternalDataFormat($8D77);
    public static property RGB16F:    InternalDataFormat read new InternalDataFormat($881B);
    public static property RGB32I:    InternalDataFormat read new InternalDataFormat($8D83);
    public static property RGB32UI:   InternalDataFormat read new InternalDataFormat($8D71);
    public static property RGB32F:    InternalDataFormat read new InternalDataFormat($8815);
    
    public static property RGBA8:     InternalDataFormat read new InternalDataFormat($8058);
    public static property RGBA16:    InternalDataFormat read new InternalDataFormat($805B);
    public static property RGBA16F:   InternalDataFormat read new InternalDataFormat($881A);
    public static property RGBA32F:   InternalDataFormat read new InternalDataFormat($8814);
    public static property RGBA8I:    InternalDataFormat read new InternalDataFormat($8D8E);
    public static property RGBA16I:   InternalDataFormat read new InternalDataFormat($8D88);
    public static property RGBA32I:   InternalDataFormat read new InternalDataFormat($8D82);
    public static property RGBA8UI:   InternalDataFormat read new InternalDataFormat($8D7C);
    public static property RGBA16UI:  InternalDataFormat read new InternalDataFormat($8D76);
    public static property RGBA32UI:  InternalDataFormat read new InternalDataFormat($8D70);
    
    public static property RGB4:      InternalDataFormat read new InternalDataFormat($804F);
    public static property RGB5:      InternalDataFormat read new InternalDataFormat($8050);
    public static property RGB10:     InternalDataFormat read new InternalDataFormat($8052);
    public static property RGB12:     InternalDataFormat read new InternalDataFormat($8053);
    public static property RGB5_A1:   InternalDataFormat read new InternalDataFormat($8057);
    public static property RGB10_A2:  InternalDataFormat read new InternalDataFormat($8059);
    
    public static property RGBA2:     InternalDataFormat read new InternalDataFormat($8055);
    public static property RGBA4:     InternalDataFormat read new InternalDataFormat($8056);
    public static property RGBA12:    InternalDataFormat read new InternalDataFormat($805A);
    
  end;
  
  //S
  DataFormat = record
    public val: UInt32;
    public constructor(val: UInt32) := self.val := val;
    
    public static property RED:             DataFormat read new DataFormat($1903);
    public static property GREEN:           DataFormat read new DataFormat($1904);
    public static property BLUE:            DataFormat read new DataFormat($1905);
    public static property RG:              DataFormat read new DataFormat($8227);
    public static property RGB:             DataFormat read new DataFormat($1907);
    public static property BGR:             DataFormat read new DataFormat($80E0);
    public static property RGBA:            DataFormat read new DataFormat($1908);
    public static property BGRA:            DataFormat read new DataFormat($80E1);
    public static property RED_INTEGER:     DataFormat read new DataFormat($8D94);
    public static property GREEN_INTEGER:   DataFormat read new DataFormat($8D95);
    public static property BLUE_INTEGER:    DataFormat read new DataFormat($8D96);
    public static property RGB_INTEGER:     DataFormat read new DataFormat($8D98);
    public static property RGBA_INTEGER:    DataFormat read new DataFormat($8D99);
    public static property BGR_INTEGER:     DataFormat read new DataFormat($8D9A);
    public static property BGRA_INTEGER:    DataFormat read new DataFormat($8D9B);
    public static property RG_INTEGER:      DataFormat read new DataFormat($8228);
    public static property STENCIL_INDEX:   DataFormat read new DataFormat($1901);
    public static property DEPTH_COMPONENT: DataFormat read new DataFormat($1902);
    public static property DEPTH_STENCIL:   DataFormat read new DataFormat($84F9);
    
  end;
  
  //S
  GLGetQueries = record
    public val: UInt32;
    public constructor(val: UInt32) := self.val := val;
    
    public static property ACTIVE_TEXTURE:                            GLGetQueries read new GLGetQueries($84E0);
    public static property ALIASED_LINE_WIDTH_RANGE:                  GLGetQueries read new GLGetQueries($846E);
    public static property ARRAY_BUFFER_BINDING:                      GLGetQueries read new GLGetQueries($8894);
    public static property BLEND_COLOR:                               GLGetQueries read new GLGetQueries($8005);
    public static property BLEND_DST_ALPHA:                           GLGetQueries read new GLGetQueries($80CA);
    public static property BLEND_DST_RGB:                             GLGetQueries read new GLGetQueries($80C8);
    public static property BLEND_EQUATION_RGB:                        GLGetQueries read new GLGetQueries($8009);
    public static property BLEND_EQUATION_ALPHA:                      GLGetQueries read new GLGetQueries($883D);
    public static property BLEND_SRC_ALPHA:                           GLGetQueries read new GLGetQueries($80CB);
    public static property BLEND_SRC_RGB:                             GLGetQueries read new GLGetQueries($80C9);
    public static property COLOR_CLEAR_VALUE:                         GLGetQueries read new GLGetQueries($0C22);
    public static property COLOR_WRITEMASK:                           GLGetQueries read new GLGetQueries($0C23);
    public static property COMPRESSED_TEXTURE_FORMATS:                GLGetQueries read new GLGetQueries($86A3);
    public static property MAX_COMPUTE_SHADER_STORAGE_BLOCKS:         GLGetQueries read new GLGetQueries($90DB);
    public static property MAX_COMBINED_SHADER_STORAGE_BLOCKS:        GLGetQueries read new GLGetQueries($90DC);
    public static property MAX_COMPUTE_UNIFORM_BLOCKS:                GLGetQueries read new GLGetQueries($91BB);
    public static property MAX_COMPUTE_TEXTURE_IMAGE_UNITS:           GLGetQueries read new GLGetQueries($91BC);
    public static property MAX_COMPUTE_UNIFORM_COMPONENTS:            GLGetQueries read new GLGetQueries($8263);
    public static property MAX_COMPUTE_ATOMIC_COUNTERS:               GLGetQueries read new GLGetQueries($8265);
    public static property MAX_COMPUTE_ATOMIC_COUNTER_BUFFERS:        GLGetQueries read new GLGetQueries($8264);
    public static property MAX_COMBINED_COMPUTE_UNIFORM_COMPONENTS:   GLGetQueries read new GLGetQueries($8266);
    public static property MAX_COMPUTE_WORK_GROUP_INVOCATIONS:        GLGetQueries read new GLGetQueries($90EB);
    public static property MAX_COMPUTE_WORK_GROUP_COUNT:              GLGetQueries read new GLGetQueries($91BE);
    public static property MAX_COMPUTE_WORK_GROUP_SIZE:               GLGetQueries read new GLGetQueries($91BF);
    public static property DISPATCH_INDIRECT_BUFFER_BINDING:          GLGetQueries read new GLGetQueries($90EF);
    public static property MAX_DEBUG_GROUP_STACK_DEPTH:               GLGetQueries read new GLGetQueries($826C);
    public static property DEBUG_GROUP_STACK_DEPTH:                   GLGetQueries read new GLGetQueries($826D);
    public static property CONTEXT_FLAGS:                             GLGetQueries read new GLGetQueries($821E);
    public static property CULL_FACE_MODE:                            GLGetQueries read new GLGetQueries($0B45);
    public static property CURRENT_PROGRAM:                           GLGetQueries read new GLGetQueries($8B8D);
    public static property DEPTH_CLEAR_VALUE:                         GLGetQueries read new GLGetQueries($0B73);
    public static property DEPTH_FUNC:                                GLGetQueries read new GLGetQueries($0B74);
    public static property DEPTH_RANGE:                               GLGetQueries read new GLGetQueries($0B70);
    public static property DEPTH_WRITEMASK:                           GLGetQueries read new GLGetQueries($0B72);
    public static property DOUBLEBUFFER:                              GLGetQueries read new GLGetQueries($0C32);
    public static property DRAW_BUFFER:                               GLGetQueries read new GLGetQueries($0C01);
    public static property DRAW_FRAMEBUFFER_BINDING:                  GLGetQueries read new GLGetQueries($8CA6);
    public static property READ_FRAMEBUFFER_BINDING:                  GLGetQueries read new GLGetQueries($8CAA);
    public static property ELEMENT_ARRAY_BUFFER_BINDING:              GLGetQueries read new GLGetQueries($8895);
    public static property FRAGMENT_SHADER_DERIVATIVE_HINT:           GLGetQueries read new GLGetQueries($8B8B);
    public static property IMPLEMENTATION_COLOR_READ_FORMAT:          GLGetQueries read new GLGetQueries($8B9B);
    public static property IMPLEMENTATION_COLOR_READ_TYPE:            GLGetQueries read new GLGetQueries($8B9A);
    public static property LINE_SMOOTH_HINT:                          GLGetQueries read new GLGetQueries($0C52);
    public static property LINE_WIDTH:                                GLGetQueries read new GLGetQueries($0B21);
    public static property LAYER_PROVOKING_VERTEX:                    GLGetQueries read new GLGetQueries($825E);
    public static property LOGIC_OP_MODE:                             GLGetQueries read new GLGetQueries($0BF0);
    public static property MAJOR_VERSION:                             GLGetQueries read new GLGetQueries($821B);
    public static property MAX_3D_TEXTURE_SIZE:                       GLGetQueries read new GLGetQueries($8073);
    public static property MAX_ARRAY_TEXTURE_LAYERS:                  GLGetQueries read new GLGetQueries($88FF);
    public static property MAX_CLIP_DISTANCES:                        GLGetQueries read new GLGetQueries($0D32);
    public static property MAX_COLOR_TEXTURE_SAMPLES:                 GLGetQueries read new GLGetQueries($910E);
    public static property MAX_COMBINED_ATOMIC_COUNTERS:              GLGetQueries read new GLGetQueries($92D7);
    public static property MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS:  GLGetQueries read new GLGetQueries($8A33);
    public static property MAX_COMBINED_GEOMETRY_UNIFORM_COMPONENTS:  GLGetQueries read new GLGetQueries($8A32);
    public static property MAX_COMBINED_TEXTURE_IMAGE_UNITS:          GLGetQueries read new GLGetQueries($8B4D);
    public static property MAX_COMBINED_UNIFORM_BLOCKS:               GLGetQueries read new GLGetQueries($8A2E);
    public static property MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS:    GLGetQueries read new GLGetQueries($8A31);
    public static property MAX_CUBE_MAP_TEXTURE_SIZE:                 GLGetQueries read new GLGetQueries($851C);
    public static property MAX_DEPTH_TEXTURE_SAMPLES:                 GLGetQueries read new GLGetQueries($910F);
    public static property MAX_DRAW_BUFFERS:                          GLGetQueries read new GLGetQueries($8824);
    public static property MAX_DUAL_SOURCE_DRAW_BUFFERS:              GLGetQueries read new GLGetQueries($88FC);
    public static property MAX_ELEMENTS_INDICES:                      GLGetQueries read new GLGetQueries($80E9);
    public static property MAX_ELEMENTS_VERTICES:                     GLGetQueries read new GLGetQueries($80E8);
    public static property MAX_FRAGMENT_ATOMIC_COUNTERS:              GLGetQueries read new GLGetQueries($92D6);
    public static property MAX_FRAGMENT_SHADER_STORAGE_BLOCKS:        GLGetQueries read new GLGetQueries($90DA);
    public static property MAX_FRAGMENT_INPUT_COMPONENTS:             GLGetQueries read new GLGetQueries($9125);
    public static property MAX_FRAGMENT_UNIFORM_COMPONENTS:           GLGetQueries read new GLGetQueries($8B49);
    public static property MAX_FRAGMENT_UNIFORM_VECTORS:              GLGetQueries read new GLGetQueries($8DFD);
    public static property MAX_FRAGMENT_UNIFORM_BLOCKS:               GLGetQueries read new GLGetQueries($8A2D);
    public static property MAX_FRAMEBUFFER_WIDTH:                     GLGetQueries read new GLGetQueries($9315);
    public static property MAX_FRAMEBUFFER_HEIGHT:                    GLGetQueries read new GLGetQueries($9316);
    public static property MAX_FRAMEBUFFER_LAYERS:                    GLGetQueries read new GLGetQueries($9317);
    public static property MAX_FRAMEBUFFER_SAMPLES:                   GLGetQueries read new GLGetQueries($9318);
    public static property MAX_GEOMETRY_ATOMIC_COUNTERS:              GLGetQueries read new GLGetQueries($92D5);
    public static property MAX_GEOMETRY_SHADER_STORAGE_BLOCKS:        GLGetQueries read new GLGetQueries($90D7);
    public static property MAX_GEOMETRY_INPUT_COMPONENTS:             GLGetQueries read new GLGetQueries($9123);
    public static property MAX_GEOMETRY_OUTPUT_COMPONENTS:            GLGetQueries read new GLGetQueries($9124);
    public static property MAX_GEOMETRY_TEXTURE_IMAGE_UNITS:          GLGetQueries read new GLGetQueries($8C29);
    public static property MAX_GEOMETRY_UNIFORM_BLOCKS:               GLGetQueries read new GLGetQueries($8A2C);
    public static property MAX_GEOMETRY_UNIFORM_COMPONENTS:           GLGetQueries read new GLGetQueries($8DDF);
    public static property MAX_INTEGER_SAMPLES:                       GLGetQueries read new GLGetQueries($9110);
    public static property MIN_MAP_BUFFER_ALIGNMENT:                  GLGetQueries read new GLGetQueries($90BC);
    public static property MAX_LABEL_LENGTH:                          GLGetQueries read new GLGetQueries($82E8);
    public static property MAX_PROGRAM_TEXEL_OFFSET:                  GLGetQueries read new GLGetQueries($8905);
    public static property MIN_PROGRAM_TEXEL_OFFSET:                  GLGetQueries read new GLGetQueries($8904);
    public static property MAX_RECTANGLE_TEXTURE_SIZE:                GLGetQueries read new GLGetQueries($84F8);
    public static property MAX_RENDERBUFFER_SIZE:                     GLGetQueries read new GLGetQueries($84E8);
    public static property MAX_SAMPLE_MASK_WORDS:                     GLGetQueries read new GLGetQueries($8E59);
    public static property MAX_SERVER_WAIT_TIMEOUT:                   GLGetQueries read new GLGetQueries($9111);
    public static property MAX_SHADER_STORAGE_BUFFER_BINDINGS:        GLGetQueries read new GLGetQueries($90DD);
    public static property MAX_TESS_CONTROL_ATOMIC_COUNTERS:          GLGetQueries read new GLGetQueries($92D3);
    public static property MAX_TESS_EVALUATION_ATOMIC_COUNTERS:       GLGetQueries read new GLGetQueries($92D4);
    public static property MAX_TESS_CONTROL_SHADER_STORAGE_BLOCKS:    GLGetQueries read new GLGetQueries($90D8);
    public static property MAX_TESS_EVALUATION_SHADER_STORAGE_BLOCKS: GLGetQueries read new GLGetQueries($90D9);
    public static property MAX_TEXTURE_BUFFER_SIZE:                   GLGetQueries read new GLGetQueries($8C2B);
    public static property MAX_TEXTURE_IMAGE_UNITS:                   GLGetQueries read new GLGetQueries($8872);
    public static property MAX_TEXTURE_LOD_BIAS:                      GLGetQueries read new GLGetQueries($84FD);
    public static property MAX_TEXTURE_SIZE:                          GLGetQueries read new GLGetQueries($0D33);
    public static property MAX_UNIFORM_BUFFER_BINDINGS:               GLGetQueries read new GLGetQueries($8A2F);
    public static property MAX_UNIFORM_BLOCK_SIZE:                    GLGetQueries read new GLGetQueries($8A30);
    public static property MAX_UNIFORM_LOCATIONS:                     GLGetQueries read new GLGetQueries($826E);
    public static property MAX_VARYING_COMPONENTS:                    GLGetQueries read new GLGetQueries($8B4B);
    public static property MAX_VARYING_VECTORS:                       GLGetQueries read new GLGetQueries($8DFC);
    public static property MAX_VARYING_FLOATS:                        GLGetQueries read new GLGetQueries($8B4B);
    public static property MAX_VERTEX_ATOMIC_COUNTERS:                GLGetQueries read new GLGetQueries($92D2);
    public static property MAX_VERTEX_ATTRIBS:                        GLGetQueries read new GLGetQueries($8869);
    public static property MAX_VERTEX_SHADER_STORAGE_BLOCKS:          GLGetQueries read new GLGetQueries($90D6);
    public static property MAX_VERTEX_TEXTURE_IMAGE_UNITS:            GLGetQueries read new GLGetQueries($8B4C);
    public static property MAX_VERTEX_UNIFORM_COMPONENTS:             GLGetQueries read new GLGetQueries($8B4A);
    public static property MAX_VERTEX_UNIFORM_VECTORS:                GLGetQueries read new GLGetQueries($8DFB);
    public static property MAX_VERTEX_OUTPUT_COMPONENTS:              GLGetQueries read new GLGetQueries($9122);
    public static property MAX_VERTEX_UNIFORM_BLOCKS:                 GLGetQueries read new GLGetQueries($8A2B);
    public static property MAX_VIEWPORT_DIMS:                         GLGetQueries read new GLGetQueries($0D3A);
    public static property MAX_VIEWPORTS:                             GLGetQueries read new GLGetQueries($825B);
    public static property MINOR_VERSION:                             GLGetQueries read new GLGetQueries($821C);
    public static property NUM_COMPRESSED_TEXTURE_FORMATS:            GLGetQueries read new GLGetQueries($86A2);
    public static property NUM_EXTENSIONS:                            GLGetQueries read new GLGetQueries($821D);
    public static property NUM_PROGRAM_BINARY_FORMATS:                GLGetQueries read new GLGetQueries($87FE);
    public static property NUM_SHADER_BINARY_FORMATS:                 GLGetQueries read new GLGetQueries($8DF9);
    public static property PACK_ALIGNMENT:                            GLGetQueries read new GLGetQueries($0D05);
    public static property PACK_IMAGE_HEIGHT:                         GLGetQueries read new GLGetQueries($806C);
    public static property PACK_LSB_FIRST:                            GLGetQueries read new GLGetQueries($0D01);
    public static property PACK_ROW_LENGTH:                           GLGetQueries read new GLGetQueries($0D02);
    public static property PACK_SKIP_IMAGES:                          GLGetQueries read new GLGetQueries($806B);
    public static property PACK_SKIP_PIXELS:                          GLGetQueries read new GLGetQueries($0D04);
    public static property PACK_SKIP_ROWS:                            GLGetQueries read new GLGetQueries($0D03);
    public static property PACK_SWAP_BYTES:                           GLGetQueries read new GLGetQueries($0D00);
    public static property PIXEL_PACK_BUFFER_BINDING:                 GLGetQueries read new GLGetQueries($88ED);
    public static property PIXEL_UNPACK_BUFFER_BINDING:               GLGetQueries read new GLGetQueries($88EF);
    public static property POINT_FADE_THRESHOLD_SIZE:                 GLGetQueries read new GLGetQueries($8128);
    public static property PRIMITIVE_RESTART_INDEX:                   GLGetQueries read new GLGetQueries($8F9E);
    public static property PROGRAM_BINARY_FORMATS:                    GLGetQueries read new GLGetQueries($87FF);
    public static property PROGRAM_PIPELINE_BINDING:                  GLGetQueries read new GLGetQueries($825A);
    public static property PROGRAM_POINT_SIZE:                        GLGetQueries read new GLGetQueries($8642);
    public static property PROVOKING_VERTEX:                          GLGetQueries read new GLGetQueries($8E4F);
    public static property POINT_SIZE:                                GLGetQueries read new GLGetQueries($0B11);
    public static property POINT_SIZE_GRANULARITY:                    GLGetQueries read new GLGetQueries($0B13);
    public static property POINT_SIZE_RANGE:                          GLGetQueries read new GLGetQueries($0B12);
    public static property POLYGON_OFFSET_FACTOR:                     GLGetQueries read new GLGetQueries($8038);
    public static property POLYGON_OFFSET_UNITS:                      GLGetQueries read new GLGetQueries($2A00);
    public static property POLYGON_SMOOTH_HINT:                       GLGetQueries read new GLGetQueries($0C53);
    public static property READ_BUFFER:                               GLGetQueries read new GLGetQueries($0C02);
    public static property RENDERBUFFER_BINDING:                      GLGetQueries read new GLGetQueries($8CA7);
    public static property SAMPLE_BUFFERS:                            GLGetQueries read new GLGetQueries($80A8);
    public static property SAMPLE_COVERAGE_VALUE:                     GLGetQueries read new GLGetQueries($80AA);
    public static property SAMPLE_COVERAGE_INVERT:                    GLGetQueries read new GLGetQueries($80AB);
    public static property SAMPLER_BINDING:                           GLGetQueries read new GLGetQueries($8919);
    public static property SAMPLES:                                   GLGetQueries read new GLGetQueries($80A9);
    public static property SCISSOR_BOX:                               GLGetQueries read new GLGetQueries($0C10);
    public static property SHADER_COMPILER:                           GLGetQueries read new GLGetQueries($8DFA);
    public static property SHADER_STORAGE_BUFFER_BINDING:             GLGetQueries read new GLGetQueries($90D3);
    public static property SHADER_STORAGE_BUFFER_OFFSET_ALIGNMENT:    GLGetQueries read new GLGetQueries($90DF);
    public static property SHADER_STORAGE_BUFFER_START:               GLGetQueries read new GLGetQueries($90D4);
    public static property SHADER_STORAGE_BUFFER_SIZE:                GLGetQueries read new GLGetQueries($90D5);
    public static property SMOOTH_LINE_WIDTH_RANGE:                   GLGetQueries read new GLGetQueries($0B22);
    public static property SMOOTH_LINE_WIDTH_GRANULARITY:             GLGetQueries read new GLGetQueries($0B23);
    public static property STENCIL_BACK_FAIL:                         GLGetQueries read new GLGetQueries($8801);
    public static property STENCIL_BACK_FUNC:                         GLGetQueries read new GLGetQueries($8800);
    public static property STENCIL_BACK_PASS_DEPTH_FAIL:              GLGetQueries read new GLGetQueries($8802);
    public static property STENCIL_BACK_PASS_DEPTH_PASS:              GLGetQueries read new GLGetQueries($8803);
    public static property STENCIL_BACK_REF:                          GLGetQueries read new GLGetQueries($8CA3);
    public static property STENCIL_BACK_VALUE_MASK:                   GLGetQueries read new GLGetQueries($8CA4);
    public static property STENCIL_BACK_WRITEMASK:                    GLGetQueries read new GLGetQueries($8CA5);
    public static property STENCIL_CLEAR_VALUE:                       GLGetQueries read new GLGetQueries($0B91);
    public static property STENCIL_FAIL:                              GLGetQueries read new GLGetQueries($0B94);
    public static property STENCIL_FUNC:                              GLGetQueries read new GLGetQueries($0B92);
    public static property STENCIL_PASS_DEPTH_FAIL:                   GLGetQueries read new GLGetQueries($0B95);
    public static property STENCIL_PASS_DEPTH_PASS:                   GLGetQueries read new GLGetQueries($0B96);
    public static property STENCIL_REF:                               GLGetQueries read new GLGetQueries($0B97);
    public static property STENCIL_VALUE_MASK:                        GLGetQueries read new GLGetQueries($0B93);
    public static property STENCIL_WRITEMASK:                         GLGetQueries read new GLGetQueries($0B98);
    public static property STEREO:                                    GLGetQueries read new GLGetQueries($0C33);
    public static property SUBPIXEL_BITS:                             GLGetQueries read new GLGetQueries($0D50);
    public static property TEXTURE_BINDING_1D:                        GLGetQueries read new GLGetQueries($8068);
    public static property TEXTURE_BINDING_1D_ARRAY:                  GLGetQueries read new GLGetQueries($8C1C);
    public static property TEXTURE_BINDING_2D:                        GLGetQueries read new GLGetQueries($8069);
    public static property TEXTURE_BINDING_2D_ARRAY:                  GLGetQueries read new GLGetQueries($8C1D);
    public static property TEXTURE_BINDING_2D_MULTISAMPLE:            GLGetQueries read new GLGetQueries($9104);
    public static property TEXTURE_BINDING_2D_MULTISAMPLE_ARRAY:      GLGetQueries read new GLGetQueries($9105);
    public static property TEXTURE_BINDING_3D:                        GLGetQueries read new GLGetQueries($806A);
    public static property TEXTURE_BINDING_BUFFER:                    GLGetQueries read new GLGetQueries($8C2C);
    public static property TEXTURE_BINDING_CUBE_MAP:                  GLGetQueries read new GLGetQueries($8514);
    public static property TEXTURE_BINDING_RECTANGLE:                 GLGetQueries read new GLGetQueries($84F6);
    public static property TEXTURE_COMPRESSION_HINT:                  GLGetQueries read new GLGetQueries($84EF);
    public static property TEXTURE_BUFFER_OFFSET_ALIGNMENT:           GLGetQueries read new GLGetQueries($919F);
    public static property TIMESTAMP:                                 GLGetQueries read new GLGetQueries($8E28);
    public static property TRANSFORM_FEEDBACK_BUFFER_BINDING:         GLGetQueries read new GLGetQueries($8C8F);
    public static property TRANSFORM_FEEDBACK_BUFFER_START:           GLGetQueries read new GLGetQueries($8C84);
    public static property TRANSFORM_FEEDBACK_BUFFER_SIZE:            GLGetQueries read new GLGetQueries($8C85);
    public static property UNIFORM_BUFFER_BINDING:                    GLGetQueries read new GLGetQueries($8A28);
    public static property UNIFORM_BUFFER_OFFSET_ALIGNMENT:           GLGetQueries read new GLGetQueries($8A34);
    public static property UNIFORM_BUFFER_SIZE:                       GLGetQueries read new GLGetQueries($8A2A);
    public static property UNIFORM_BUFFER_START:                      GLGetQueries read new GLGetQueries($8A29);
    public static property UNPACK_ALIGNMENT:                          GLGetQueries read new GLGetQueries($0CF5);
    public static property UNPACK_IMAGE_HEIGHT:                       GLGetQueries read new GLGetQueries($806E);
    public static property UNPACK_LSB_FIRST:                          GLGetQueries read new GLGetQueries($0CF1);
    public static property UNPACK_ROW_LENGTH:                         GLGetQueries read new GLGetQueries($0CF2);
    public static property UNPACK_SKIP_IMAGES:                        GLGetQueries read new GLGetQueries($806D);
    public static property UNPACK_SKIP_PIXELS:                        GLGetQueries read new GLGetQueries($0CF4);
    public static property UNPACK_SKIP_ROWS:                          GLGetQueries read new GLGetQueries($0CF3);
    public static property UNPACK_SWAP_BYTES:                         GLGetQueries read new GLGetQueries($0CF0);
    public static property VERTEX_ARRAY_BINDING:                      GLGetQueries read new GLGetQueries($85B5);
    public static property VERTEX_BINDING_DIVISOR:                    GLGetQueries read new GLGetQueries($82D6);
    public static property VERTEX_BINDING_OFFSET:                     GLGetQueries read new GLGetQueries($82D7);
    public static property VERTEX_BINDING_STRIDE:                     GLGetQueries read new GLGetQueries($82D8);
    public static property MAX_VERTEX_ATTRIB_RELATIVE_OFFSET:         GLGetQueries read new GLGetQueries($82D9);
    public static property MAX_VERTEX_ATTRIB_BINDINGS:                GLGetQueries read new GLGetQueries($82DA);
    public static property VIEWPORT:                                  GLGetQueries read new GLGetQueries($0BA2);
    public static property VIEWPORT_BOUNDS_RANGE:                     GLGetQueries read new GLGetQueries($825D);
    public static property VIEWPORT_INDEX_PROVOKING_VERTEX:           GLGetQueries read new GLGetQueries($825F);
    public static property VIEWPORT_SUBPIXEL_BITS:                    GLGetQueries read new GLGetQueries($825C);
    public static property MAX_ELEMENT_INDEX:                         GLGetQueries read new GLGetQueries($8D6B);
    
  end;
  
  //S
  EnablableName = record
    public val: UInt32;
    public constructor(val: UInt32) := self.val := val;
    
    public static property BLEND:                         EnablableName read new EnablableName($0BE2);
    public static property CLIP_DISTANCE0:                EnablableName read new EnablableName($3000);
    public static property CLIP_DISTANCE1:                EnablableName read new EnablableName($3001);
    public static property CLIP_DISTANCE2:                EnablableName read new EnablableName($3002);
    public static property CLIP_DISTANCE3:                EnablableName read new EnablableName($3003);
    public static property CLIP_DISTANCE4:                EnablableName read new EnablableName($3004);
    public static property CLIP_DISTANCE5:                EnablableName read new EnablableName($3005);
    public static property CLIP_DISTANCE6:                EnablableName read new EnablableName($3006);
    public static property CLIP_DISTANCE7:                EnablableName read new EnablableName($3007);
    public static property COLOR_LOGIC_OP:                EnablableName read new EnablableName($0BF2);
    public static property CULL_FACE:                     EnablableName read new EnablableName($0B44);
    public static property DEBUG_OUTPUT:                  EnablableName read new EnablableName($92E0);
    public static property DEBUG_OUTPUT_SYNCHRONOUS:      EnablableName read new EnablableName($8242);
    public static property DEPTH_CLAMP:                   EnablableName read new EnablableName($864F);
    public static property DEPTH_TEST:                    EnablableName read new EnablableName($0B71);
    public static property DITHER:                        EnablableName read new EnablableName($0BD0);
    public static property FRAMEBUFFER_SRGB:              EnablableName read new EnablableName($8DB9);
    public static property LINE_SMOOTH:                   EnablableName read new EnablableName($0B20);
    public static property MULTISAMPLE:                   EnablableName read new EnablableName($809D);
    public static property POLYGON_OFFSET_FILL:           EnablableName read new EnablableName($8037);
    public static property POLYGON_OFFSET_LINE:           EnablableName read new EnablableName($2A02);
    public static property POLYGON_OFFSET_POINT:          EnablableName read new EnablableName($2A01);
    public static property POLYGON_SMOOTH:                EnablableName read new EnablableName($0B41);
    public static property PRIMITIVE_RESTART:             EnablableName read new EnablableName($8F9D);
    public static property PRIMITIVE_RESTART_FIXED_INDEX: EnablableName read new EnablableName($8D69);
    public static property RASTERIZER_DISCARD:            EnablableName read new EnablableName($8C89);
    public static property SAMPLE_ALPHA_TO_COVERAGE:      EnablableName read new EnablableName($809E);
    public static property SAMPLE_ALPHA_TO_ONE:           EnablableName read new EnablableName($809F);
    public static property SAMPLE_COVERAGE:               EnablableName read new EnablableName($80A0);
    public static property SAMPLE_SHADING:                EnablableName read new EnablableName($8C36);
    public static property SAMPLE_MASK:                   EnablableName read new EnablableName($8E51);
    public static property SCISSOR_TEST:                  EnablableName read new EnablableName($0C11);
    public static property STENCIL_TEST:                  EnablableName read new EnablableName($0B90);
    public static property TEXTURE_CUBE_MAP_SEAMLESS:     EnablableName read new EnablableName($884F);
    public static property PROGRAM_POINT_SIZE:            EnablableName read new EnablableName($8642);
    
    public static function operator implicit(v: EnablableName): GLGetQueries := new GLGetQueries(v.val);
    
  end;
  
  //S
  GLGetStringQueries = record
    public val: UInt32;
    public constructor(val: UInt32) := self.val := val;
    
    public static property VENDOR:                    GLGetStringQueries read new GLGetStringQueries($1F00);
    public static property RENDERER:                  GLGetStringQueries read new GLGetStringQueries($1F01);
    public static property VERSION:                   GLGetStringQueries read new GLGetStringQueries($1F02);
    public static property EXTENSIONS:                GLGetStringQueries read new GLGetStringQueries($1F03);
    public static property SHADING_LANGUAGE_VERSION:  GLGetStringQueries read new GLGetStringQueries($8B8C);
    
  end;
  
  //SR
  ColorEncodingMode = record
    public val: UInt32;
    public constructor(val: UInt32) := self.val := val;
    
    public static property LINEAR:  ColorEncodingMode read new ColorEncodingMode($2601);
    public static property SRGB:    ColorEncodingMode read new ColorEncodingMode($8C40);
    
    public property IS_LINEAR:  boolean read self = ColorEncodingMode.LINEAR;
    public property IS_SRGB:    boolean read self = ColorEncodingMode.SRGB;
    
    public function ToString: string; override;
    begin
      var res := typeof(ColorEncodingMode).GetProperties.Where(prop->prop.PropertyType=typeof(boolean)).Select(prop->(prop.Name,boolean(prop.GetValue(self)))).FirstOrDefault(t->t[1]);
      Result := res=nil?
        $'ColorEncodingMode[{self.val}]':
        res[0].Substring(3);
    end;
    
  end;
  
  //SR
  DataType = record
    public val: UInt32;
    public constructor(val: UInt32) := self.val := val;
    
    public static property BYTE:                        DataType read new DataType($1400);
    public static property UNSIGNED_BYTE:               DataType read new DataType($1401);
    public static property SHORT:                       DataType read new DataType($1402);
    public static property UNSIGNED_SHORT:              DataType read new DataType($1403);
    public static property INT:                         DataType read new DataType($1404);
    public static property UNSIGNED_INT:                DataType read new DataType($1405);
    public static property FLOAT:                       DataType read new DataType($1406);
    public static property HALF_FLOAT:                  DataType read new DataType($140B);
    public static property UNSIGNED_BYTE_3_3_2:         DataType read new DataType($8032);
    public static property UNSIGNED_SHORT_5_6_5:        DataType read new DataType($8363);
    public static property UNSIGNED_SHORT_4_4_4_4:      DataType read new DataType($8033);
    public static property UNSIGNED_SHORT_5_5_5_1:      DataType read new DataType($8034);
    public static property UNSIGNED_INT_8_8_8_8:        DataType read new DataType($8035);
    public static property UNSIGNED_INT_10_10_10_2:     DataType read new DataType($8036);
    public static property UNSIGNED_BYTE_2_3_3_REV:     DataType read new DataType($8362);
    public static property UNSIGNED_SHORT_5_6_5_REV:    DataType read new DataType($8364);
    public static property UNSIGNED_SHORT_4_4_4_4_REV:  DataType read new DataType($8365);
    public static property UNSIGNED_SHORT_1_5_5_5_REV:  DataType read new DataType($8366);
    public static property UNSIGNED_INT_8_8_8_8_REV:    DataType read new DataType($8367);
    public static property UNSIGNED_INT_2_10_10_10_REV: DataType read new DataType($8368);
    public static property SIGNED_NORMALIZED:           DataType read new DataType($8F9C);
    public static property UNSIGNED_NORMALIZED:         DataType read new DataType($8C17);
    
    public property IS_NONE:                        boolean read self.val = 0;
    public property IS_BYTE:                        boolean read self.val = BYTE.val;
    public property IS_UNSIGNED_BYTE:               boolean read self.val = UNSIGNED_BYTE.val;
    public property IS_SHORT:                       boolean read self.val = SHORT.val;
    public property IS_UNSIGNED_SHORT:              boolean read self.val = UNSIGNED_SHORT.val;
    public property IS_INT:                         boolean read self.val = INT.val;
    public property IS_UNSIGNED_INT:                boolean read self.val = UNSIGNED_INT.val;
    public property IS_FLOAT:                       boolean read self.val = FLOAT.val;
    public property IS_HALF_FLOAT:                  boolean read self.val = HALF_FLOAT.val;
    public property IS_UNSIGNED_BYTE_3_3_2:         boolean read self.val = UNSIGNED_BYTE_3_3_2.val;
    public property IS_UNSIGNED_SHORT_5_6_5:        boolean read self.val = UNSIGNED_SHORT_5_6_5.val;
    public property IS_UNSIGNED_SHORT_4_4_4_4:      boolean read self.val = UNSIGNED_SHORT_4_4_4_4.val;
    public property IS_UNSIGNED_SHORT_5_5_5_1:      boolean read self.val = UNSIGNED_SHORT_5_5_5_1.val;
    public property IS_UNSIGNED_INT_8_8_8_8:        boolean read self.val = UNSIGNED_INT_8_8_8_8.val;
    public property IS_UNSIGNED_INT_10_10_10_2:     boolean read self.val = UNSIGNED_INT_10_10_10_2.val;
    public property IS_UNSIGNED_BYTE_2_3_3_REV:     boolean read self.val = UNSIGNED_BYTE_2_3_3_REV.val;
    public property IS_UNSIGNED_SHORT_5_6_5_REV:    boolean read self.val = UNSIGNED_SHORT_5_6_5_REV.val;
    public property IS_UNSIGNED_SHORT_4_4_4_4_REV:  boolean read self.val = UNSIGNED_SHORT_4_4_4_4_REV.val;
    public property IS_UNSIGNED_SHORT_1_5_5_5_REV:  boolean read self.val = UNSIGNED_SHORT_1_5_5_5_REV.val;
    public property IS_UNSIGNED_INT_8_8_8_8_REV:    boolean read self.val = UNSIGNED_INT_8_8_8_8_REV.val;
    public property IS_UNSIGNED_INT_2_10_10_10_REV: boolean read self.val = UNSIGNED_INT_2_10_10_10_REV.val;
    public property IS_SIGNED_NORMALIZED:           boolean read self.val = SIGNED_NORMALIZED.val;
    public property IS_UNSIGNED_NORMALIZED:         boolean read self.val = UNSIGNED_NORMALIZED.val;
    
    public function ToString: string; override;
    begin
      var res := typeof(DataType).GetProperties.Where(prop->prop.PropertyType=typeof(boolean)).Select(prop->(prop.Name,boolean(prop.GetValue(self)))).FirstOrDefault(t->t[1]);
      Result := res=nil?
        $'DataType[{self.val}]':
        res[0].Substring(3);
    end;
    
  end;
  
  //R
  ProgramVarType = record
    public val: UInt32;
    public constructor(val: UInt32) := self.val := val;
    
    public property FLOAT:             boolean read self.val = $1406;
    public property FLOAT_VEC2:        boolean read self.val = $8B50;
    public property FLOAT_VEC3:        boolean read self.val = $8B51;
    public property FLOAT_VEC4:        boolean read self.val = $8B52;
    public property FLOAT_MAT2:        boolean read self.val = $8B5A;
    public property FLOAT_MAT3:        boolean read self.val = $8B5B;
    public property FLOAT_MAT4:        boolean read self.val = $8B5C;
    public property FLOAT_MAT2x3:      boolean read self.val = $8B65;
    public property FLOAT_MAT3x2:      boolean read self.val = $8B67;
    public property FLOAT_MAT2x4:      boolean read self.val = $8B66;
    public property FLOAT_MAT4x2:      boolean read self.val = $8B69;
    public property FLOAT_MAT3x4:      boolean read self.val = $8B68;
    public property FLOAT_MAT4x3:      boolean read self.val = $8B6A;
    public property INT:               boolean read self.val = $1404;
    public property INT_VEC2:          boolean read self.val = $8B53;
    public property INT_VEC3:          boolean read self.val = $8B54;
    public property INT_VEC4:          boolean read self.val = $8B55;
    public property UNSIGNED_INT:      boolean read self.val = $1405;
    public property UNSIGNED_INT_VEC2: boolean read self.val = $8DC6;
    public property UNSIGNED_INT_VEC3: boolean read self.val = $8DC7;
    public property UNSIGNED_INT_VEC4: boolean read self.val = $8DC8;
    public property DOUBLE:            boolean read self.val = $140A;
    public property DOUBLE_VEC2:       boolean read self.val = $8FFC;
    public property DOUBLE_VEC3:       boolean read self.val = $8FFD;
    public property DOUBLE_VEC4:       boolean read self.val = $8FFE;
    public property DOUBLE_MAT2:       boolean read self.val = $8F46;
    public property DOUBLE_MAT3:       boolean read self.val = $8F47;
    public property DOUBLE_MAT4:       boolean read self.val = $8F48;
    public property DOUBLE_MAT2x3:     boolean read self.val = $8F49;
    public property DOUBLE_MAT3x2:     boolean read self.val = $8F4B;
    public property DOUBLE_MAT2x4:     boolean read self.val = $8F4A;
    public property DOUBLE_MAT4x2:     boolean read self.val = $8F4D;
    public property DOUBLE_MAT3x4:     boolean read self.val = $8F4C;
    public property DOUBLE_MAT4x3:     boolean read self.val = $8F4E;
    
    public function ToString: string; override;
    begin
      var res := typeof(ProgramVarType).GetProperties.Where(prop->prop.PropertyType=typeof(boolean)).Select(prop->(prop.Name,boolean(prop.GetValue(self)))).FirstOrDefault(t->t[1]);
      Result := res=nil?
        $'ProgramVarType[{self.val}]':
        res[0];
    end;
    
  end;
  
  //R
  FramebufferAttachmentObjectType = record
    public val: UInt32;
    
    public property NONE:                boolean read self.val = 0;
    public property FRAMEBUFFER_DEFAULT: boolean read self.val = $8218;
    public property TEXTURE:             boolean read self.val = $1702;
    public property RENDERBUFFER:        boolean read self.val = $8D41;
    
    public function ToString: string; override;
    begin
      var res := typeof(FramebufferAttachmentObjectType).GetProperties.Where(prop->prop.PropertyType=typeof(boolean)).Select(prop->(prop.Name,boolean(prop.GetValue(self)))).FirstOrDefault(t->t[1]);
      Result := res=nil?
        $'FramebufferAttachmentObjectType[{self.val}]':
        res[0];
    end;
    
  end;
  
  //R
  ClientWaitSyncResult = record
    public val: UInt32;
    
    public property ALREADY_SIGNALED:    boolean read self.val = $911A;
    public property TIMEOUT_EXPIRED:     boolean read self.val = $911B;
    public property CONDITION_SATISFIED: boolean read self.val = $911C;
    public property WAIT_FAILED:         boolean read self.val = $911D;
    
    public function ToString: string; override;
    begin
      var res := typeof(ClientWaitSyncResult).GetProperties.Select(prop->(prop.Name,boolean(prop.GetValue(self)))).FirstOrDefault(t->t[1]);
      Result := res=nil?
        $'ClientWaitSyncResult[{self.val}]':
        res[0];
    end;
    
  end;
  
  //R
  ShadingLanguageTypeToken = record
    public val: UInt32;
    
    public property FLOAT:                                     boolean read self.val = $1406;
    public property FLOAT_VEC2:                                boolean read self.val = $8B50;
    public property FLOAT_VEC3:                                boolean read self.val = $8B51;
    public property FLOAT_VEC4:                                boolean read self.val = $8B52;
    public property DOUBLE:                                    boolean read self.val = $140A;
    public property DOUBLE_VEC2:                               boolean read self.val = $8FFC;
    public property DOUBLE_VEC3:                               boolean read self.val = $8FFD;
    public property DOUBLE_VEC4:                               boolean read self.val = $8FFE;
    public property INT:                                       boolean read self.val = $1404;
    public property INT_VEC2:                                  boolean read self.val = $8B53;
    public property INT_VEC3:                                  boolean read self.val = $8B54;
    public property INT_VEC4:                                  boolean read self.val = $8B55;
    public property UNSIGNED_INT:                              boolean read self.val = $1405;
    public property UNSIGNED_INT_VEC2:                         boolean read self.val = $8DC6;
    public property UNSIGNED_INT_VEC3:                         boolean read self.val = $8DC7;
    public property UNSIGNED_INT_VEC4:                         boolean read self.val = $8DC8;
    public property BOOL:                                      boolean read self.val = $8B56;
    public property BOOL_VEC2:                                 boolean read self.val = $8B57;
    public property BOOL_VEC3:                                 boolean read self.val = $8B58;
    public property BOOL_VEC4:                                 boolean read self.val = $8B59;
    public property FLOAT_MAT2:                                boolean read self.val = $8B5A;
    public property FLOAT_MAT3:                                boolean read self.val = $8B5B;
    public property FLOAT_MAT4:                                boolean read self.val = $8B5C;
    public property FLOAT_MAT2x3:                              boolean read self.val = $8B65;
    public property FLOAT_MAT2x4:                              boolean read self.val = $8B66;
    public property FLOAT_MAT3x2:                              boolean read self.val = $8B67;
    public property FLOAT_MAT3x4:                              boolean read self.val = $8B68;
    public property FLOAT_MAT4x2:                              boolean read self.val = $8B69;
    public property FLOAT_MAT4x3:                              boolean read self.val = $8B6A;
    public property DOUBLE_MAT2:                               boolean read self.val = $8F46;
    public property DOUBLE_MAT3:                               boolean read self.val = $8F47;
    public property DOUBLE_MAT4:                               boolean read self.val = $8F48;
    public property DOUBLE_MAT2x3:                             boolean read self.val = $8F49;
    public property DOUBLE_MAT2x4:                             boolean read self.val = $8F4A;
    public property DOUBLE_MAT3x2:                             boolean read self.val = $8F4B;
    public property DOUBLE_MAT3x4:                             boolean read self.val = $8F4C;
    public property DOUBLE_MAT4x2:                             boolean read self.val = $8F4D;
    public property DOUBLE_MAT4x3:                             boolean read self.val = $8F4E;
    public property SAMPLER_1D:                                boolean read self.val = $8B5D;
    public property SAMPLER_2D:                                boolean read self.val = $8B5E;
    public property SAMPLER_3D:                                boolean read self.val = $8B5F;
    public property SAMPLER_CUBE:                              boolean read self.val = $8B60;
    public property SAMPLER_1D_SHADOW:                         boolean read self.val = $8B61;
    public property SAMPLER_2D_SHADOW:                         boolean read self.val = $8B62;
    public property SAMPLER_1D_ARRAY:                          boolean read self.val = $8DC0;
    public property SAMPLER_2D_ARRAY:                          boolean read self.val = $8DC1;
    public property SAMPLER_CUBE_MAP_ARRAY:                    boolean read self.val = $900C;
    public property SAMPLER_1D_ARRAY_SHADOW:                   boolean read self.val = $8DC3;
    public property SAMPLER_2D_ARRAY_SHADOW:                   boolean read self.val = $8DC4;
    public property SAMPLER_2D_MULTISAMPLE:                    boolean read self.val = $9108;
    public property SAMPLER_2D_MULTISAMPLE_ARRAY:              boolean read self.val = $910B;
    public property SAMPLER_CUBE_SHADOW:                       boolean read self.val = $8DC5;
    public property SAMPLER_CUBE_MAP_ARRAY_SHADOW:             boolean read self.val = $900D;
    public property SAMPLER_BUFFER:                            boolean read self.val = $8DC2;
    public property SAMPLER_2D_RECT:                           boolean read self.val = $8B63;
    public property SAMPLER_2D_RECT_SHADOW:                    boolean read self.val = $8B64;
    public property INT_SAMPLER_1D:                            boolean read self.val = $8DC9;
    public property INT_SAMPLER_2D:                            boolean read self.val = $8DCA;
    public property INT_SAMPLER_3D:                            boolean read self.val = $8DCB;
    public property INT_SAMPLER_CUBE:                          boolean read self.val = $8DCC;
    public property INT_SAMPLER_1D_ARRAY:                      boolean read self.val = $8DCE;
    public property INT_SAMPLER_2D_ARRAY:                      boolean read self.val = $8DCF;
    public property INT_SAMPLER_CUBE_MAP_ARRAY:                boolean read self.val = $900E;
    public property INT_SAMPLER_2D_MULTISAMPLE:                boolean read self.val = $9109;
    public property INT_SAMPLER_2D_MULTISAMPLE_ARRAY:          boolean read self.val = $910C;
    public property INT_SAMPLER_BUFFER:                        boolean read self.val = $8DD0;
    public property INT_SAMPLER_2D_RECT:                       boolean read self.val = $8DCD;
    public property UNSIGNED_INT_SAMPLER_1D:                   boolean read self.val = $8DD1;
    public property UNSIGNED_INT_SAMPLER_2D:                   boolean read self.val = $8DD2;
    public property UNSIGNED_INT_SAMPLER_3D:                   boolean read self.val = $8DD3;
    public property UNSIGNED_INT_SAMPLER_CUBE:                 boolean read self.val = $8DD4;
    public property UNSIGNED_INT_SAMPLER_1D_ARRAY:             boolean read self.val = $8DD6;
    public property UNSIGNED_INT_SAMPLER_2D_ARRAY:             boolean read self.val = $8DD7;
    public property UNSIGNED_INT_SAMPLER_CUBE_MAP_ARRAY:       boolean read self.val = $900F;
    public property UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE:       boolean read self.val = $910A;
    public property UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE_ARRAY: boolean read self.val = $910D;
    public property UNSIGNED_INT_SAMPLER_BUFFER:               boolean read self.val = $8DD8;
    public property UNSIGNED_INT_SAMPLER_2D_RECT:              boolean read self.val = $8DD5;
    public property IMAGE_1D:                                  boolean read self.val = $904C;
    public property IMAGE_2D:                                  boolean read self.val = $904D;
    public property IMAGE_3D:                                  boolean read self.val = $904E;
    public property IMAGE_2D_RECT:                             boolean read self.val = $904F;
    public property IMAGE_CUBE:                                boolean read self.val = $9050;
    public property IMAGE_BUFFER:                              boolean read self.val = $9051;
    public property IMAGE_1D_ARRAY:                            boolean read self.val = $9052;
    public property IMAGE_2D_ARRAY:                            boolean read self.val = $9053;
    public property IMAGE_CUBE_MAP_ARRAY:                      boolean read self.val = $9054;
    public property IMAGE_2D_MULTISAMPLE:                      boolean read self.val = $9055;
    public property IMAGE_2D_MULTISAMPLE_ARRAY:                boolean read self.val = $9056;
    public property INT_IMAGE_1D:                              boolean read self.val = $9057;
    public property INT_IMAGE_2D:                              boolean read self.val = $9058;
    public property INT_IMAGE_3D:                              boolean read self.val = $9059;
    public property INT_IMAGE_2D_RECT:                         boolean read self.val = $905A;
    public property INT_IMAGE_CUBE:                            boolean read self.val = $905B;
    public property INT_IMAGE_BUFFER:                          boolean read self.val = $905C;
    public property INT_IMAGE_1D_ARRAY:                        boolean read self.val = $905D;
    public property INT_IMAGE_2D_ARRAY:                        boolean read self.val = $905E;
    public property INT_IMAGE_CUBE_MAP_ARRAY:                  boolean read self.val = $905F;
    public property INT_IMAGE_2D_MULTISAMPLE:                  boolean read self.val = $9060;
    public property INT_IMAGE_2D_MULTISAMPLE_ARRAY:            boolean read self.val = $9061;
    public property UNSIGNED_INT_IMAGE_1D:                     boolean read self.val = $9062;
    public property UNSIGNED_INT_IMAGE_2D:                     boolean read self.val = $9063;
    public property UNSIGNED_INT_IMAGE_3D:                     boolean read self.val = $9064;
    public property UNSIGNED_INT_IMAGE_2D_RECT:                boolean read self.val = $9065;
    public property UNSIGNED_INT_IMAGE_CUBE:                   boolean read self.val = $9066;
    public property UNSIGNED_INT_IMAGE_BUFFER:                 boolean read self.val = $9067;
    public property UNSIGNED_INT_IMAGE_1D_ARRAY:               boolean read self.val = $9068;
    public property UNSIGNED_INT_IMAGE_2D_ARRAY:               boolean read self.val = $9069;
    public property UNSIGNED_INT_IMAGE_CUBE_MAP_ARRAY:         boolean read self.val = $906A;
    public property UNSIGNED_INT_IMAGE_2D_MULTISAMPLE:         boolean read self.val = $906B;
    public property UNSIGNED_INT_IMAGE_2D_MULTISAMPLE_ARRAY:   boolean read self.val = $906C;
    public property UNSIGNED_INT_ATOMIC_COUNTER:               boolean read self.val = $92DB;
    
  end;
  
  //R
  DebugSourceType = record
    public val: UInt32;
    public constructor(val: UInt32) := self.val := val;
    
    public property API:                 boolean read self.val = $8246;
    public property WINDOW_SYSTEM:       boolean read self.val = $8247;
    public property SHADER_COMPILER:     boolean read self.val = $8248;
    public property THIRD_PARTY:         boolean read self.val = $8249;
    public property APPLICATION:         boolean read self.val = $824A;
    public property OTHER:               boolean read self.val = $824B;
    public property API_ARB:             boolean read self.val = $8246;
    public property WINDOW_SYSTEM_ARB:   boolean read self.val = $8247;
    public property SHADER_COMPILER_ARB: boolean read self.val = $8248;
    public property THIRD_PARTY_ARB:     boolean read self.val = $8249;
    public property APPLICATION_ARB:     boolean read self.val = $824A;
    public property OTHER_ARB:           boolean read self.val = $824B;
    
    public function ToString: string; override;
    begin
      var res := typeof(DebugSourceType).GetProperties.Where(prop->prop.PropertyType=typeof(boolean)).Select(prop->(prop.Name,boolean(prop.GetValue(self)))).FirstOrDefault(t->t[1]);
      Result := res=nil?
        $'DebugSourceType[{self.val}]':
        res[0];
    end;
    
  end;
  
  //R
  DebugMessageType = record
    public val: UInt32;
    public constructor(val: UInt32) := self.val := val;
    
    public property ERROR:               boolean read self.val = $824C;
    public property DEPRECATED_BEHAVIOR: boolean read self.val = $824D;
    public property UNDEFINED_BEHAVIOR:  boolean read self.val = $824E;
    public property PORTABILITY:         boolean read self.val = $824F;
    public property PERFORMANCE:         boolean read self.val = $8250;
    public property OTHER:               boolean read self.val = $8251;
    public property MARKER:              boolean read self.val = $8268;
    public property PUSH_GROUP:          boolean read self.val = $8269;
    public property POP_GROUP:           boolean read self.val = $826A;
    
    public function ToString: string; override;
    begin
      var res := typeof(DebugMessageType).GetProperties.Where(prop->prop.PropertyType=typeof(boolean)).Select(prop->(prop.Name,boolean(prop.GetValue(self)))).FirstOrDefault(t->t[1]);
      Result := res=nil?
        $'DebugMessageType[{self.val}]':
        res[0];
    end;
    
  end;
  
  //R
  DebugSeverityLevel = record
    public val: UInt32;
    public constructor(val: UInt32) := self.val := val;
    
    public property HIGH:          boolean read self.val = $9146;
    public property MEDIUM:        boolean read self.val = $9147;
    public property LOW:           boolean read self.val = $9148;
    public property NOTIFICATION:  boolean read self.val = $826B;
    
    public function ToString: string; override;
    begin
      var res := typeof(DebugSeverityLevel).GetProperties.Where(prop->prop.PropertyType=typeof(boolean)).Select(prop->(prop.Name,boolean(prop.GetValue(self)))).FirstOrDefault(t->t[1]);
      Result := res=nil?
        $'DebugSeverityLevel[{self.val}]':
        res[0];
    end;
    
  end;
  
  {$endregion 1 значение}
  
  {$region Флаги}
  
  //S
  GDI_PixelFormatFlags = record
    public val: UInt32;
    public constructor(val: UInt32) := self.val := val;
    
    public static property DOUBLEBUFFER:          GDI_PixelFormatFlags read new GDI_PixelFormatFlags($00000001);
    public static property STEREO:                GDI_PixelFormatFlags read new GDI_PixelFormatFlags($00000002);
    public static property DRAW_TO_WINDOW:        GDI_PixelFormatFlags read new GDI_PixelFormatFlags($00000004);
    public static property DRAW_TO_BITMAP:        GDI_PixelFormatFlags read new GDI_PixelFormatFlags($00000008);
    public static property SUPPORT_GDI:           GDI_PixelFormatFlags read new GDI_PixelFormatFlags($00000010);
    public static property SUPPORT_OPENGL:        GDI_PixelFormatFlags read new GDI_PixelFormatFlags($00000020);
    public static property GENERIC_FORMAT:        GDI_PixelFormatFlags read new GDI_PixelFormatFlags($00000040);
    public static property NEED_PALETTE:          GDI_PixelFormatFlags read new GDI_PixelFormatFlags($00000080);
    public static property NEED_SYSTEM_PALETTE:   GDI_PixelFormatFlags read new GDI_PixelFormatFlags($00000100);
    public static property SWAP_EXCHANGE:         GDI_PixelFormatFlags read new GDI_PixelFormatFlags($00000200);
    public static property SWAP_COPY:             GDI_PixelFormatFlags read new GDI_PixelFormatFlags($00000400);
    public static property SWAP_LAYER_BUFFERS:    GDI_PixelFormatFlags read new GDI_PixelFormatFlags($00000800);
    public static property GENERIC_ACCELERATED:   GDI_PixelFormatFlags read new GDI_PixelFormatFlags($00001000);
    public static property SUPPORT_DIRECTDRAW:    GDI_PixelFormatFlags read new GDI_PixelFormatFlags($00002000);
    public static property DEPTH_DONTCARE:        GDI_PixelFormatFlags read new GDI_PixelFormatFlags($20000000);
    public static property DOUBLEBUFFER_DONTCARE: GDI_PixelFormatFlags read new GDI_PixelFormatFlags($40000000);
    public static property STEREO_DONTCARE:       GDI_PixelFormatFlags read new GDI_PixelFormatFlags($80000000);
    
    public static function operator or(v1,v2: GDI_PixelFormatFlags): GDI_PixelFormatFlags := new GDI_PixelFormatFlags(v1.val or v2.val);
    
  end;
  
  //S
  BufferTypeFlags = record
    public val: UInt32;
    public constructor(val: UInt32) := self.val := val;
    
    public static property COLOR_BUFFER_BIT:    BufferTypeFlags read new BufferTypeFlags($00004000);
    public static property DEPTH_BUFFER_BIT:    BufferTypeFlags read new BufferTypeFlags($00000100);
    public static property STENCIL_BUFFER_BIT:  BufferTypeFlags read new BufferTypeFlags($00000400);
    
    public static function operator or(f1,f2: BufferTypeFlags): BufferTypeFlags := new BufferTypeFlags(f1.val or f2.val);
    
  end;
  
  //S
  MemoryBarrierTypeFlags = record
    public val: UInt32;
    public constructor(val: UInt32) := self.val := val;
    
    public static property VERTEX_ATTRIB_ARRAY_BARRIER_BIT: MemoryBarrierTypeFlags read new MemoryBarrierTypeFlags($00000001);
    public static property ELEMENT_ARRAY_BARRIER_BIT:       MemoryBarrierTypeFlags read new MemoryBarrierTypeFlags($00000002);
    public static property UNIFORM_BARRIER_BIT:             MemoryBarrierTypeFlags read new MemoryBarrierTypeFlags($00000004);
    public static property TEXTURE_FETCH_BARRIER_BIT:       MemoryBarrierTypeFlags read new MemoryBarrierTypeFlags($00000008);
    public static property SHADER_IMAGE_ACCESS_BARRIER_BIT: MemoryBarrierTypeFlags read new MemoryBarrierTypeFlags($00000020);
    public static property COMMAND_BARRIER_BIT:             MemoryBarrierTypeFlags read new MemoryBarrierTypeFlags($00000040);
    public static property PIXEL_BUFFER_BARRIER_BIT:        MemoryBarrierTypeFlags read new MemoryBarrierTypeFlags($00000080);
    public static property TEXTURE_UPDATE_BARRIER_BIT:      MemoryBarrierTypeFlags read new MemoryBarrierTypeFlags($00000100);
    public static property BUFFER_UPDATE_BARRIER_BIT:       MemoryBarrierTypeFlags read new MemoryBarrierTypeFlags($00000200);
    public static property FRAMEBUFFER_BARRIER_BIT:         MemoryBarrierTypeFlags read new MemoryBarrierTypeFlags($00000400);
    public static property TRANSFORM_FEEDBACK_BARRIER_BIT:  MemoryBarrierTypeFlags read new MemoryBarrierTypeFlags($00000800);
    public static property ATOMIC_COUNTER_BARRIER_BIT:      MemoryBarrierTypeFlags read new MemoryBarrierTypeFlags($00001000);
    public static property SHADER_STORAGE_BARRIER_BIT:      MemoryBarrierTypeFlags read new MemoryBarrierTypeFlags($00002000);
    public static property QUERY_BUFFER_BARRIER_BIT:        MemoryBarrierTypeFlags read new MemoryBarrierTypeFlags($00008000);
    public static property ALL_BARRIER_BITS:                MemoryBarrierTypeFlags read new MemoryBarrierTypeFlags($FFFFFFFF);
    
    public static function operator or(f1,f2: MemoryBarrierTypeFlags): MemoryBarrierTypeFlags := new MemoryBarrierTypeFlags(f1.val or f2.val);
    
  end;
  
  //S
  ProgramStagesFlags = record
    public val: UInt32;
    public constructor(val: UInt32) := self.val := val;
    
    public static property VERTEX_SHADER_BIT:           ProgramStagesFlags read new ProgramStagesFlags($00000001);
    public static property FRAGMENT_SHADER_BIT:         ProgramStagesFlags read new ProgramStagesFlags($00000002);
    public static property GEOMETRY_SHADER_BIT:         ProgramStagesFlags read new ProgramStagesFlags($00000004);
    public static property TESS_CONTROL_SHADER_BIT:     ProgramStagesFlags read new ProgramStagesFlags($00000008);
    public static property TESS_EVALUATION_SHADER_BIT:  ProgramStagesFlags read new ProgramStagesFlags($00000010);
    public static property COMPUTE_SHADER_BIT:          ProgramStagesFlags read new ProgramStagesFlags($00000020);
    public static property ALL_SHADER_BITS:             ProgramStagesFlags read new ProgramStagesFlags($FFFFFFFF);
    
    public static function operator or(f1,f2: ProgramStagesFlags): ProgramStagesFlags := new ProgramStagesFlags(f1.val or f2.val);
    
  end;
  
  //S
  ReservedFlags = record
    public val: UInt32;
    public constructor(val: UInt32) := self.val := val;
    
    public static property NONE: ReservedFlags read new ReservedFlags($0);
    
    public static function operator or(f1,f2: ReservedFlags): ReservedFlags := new ReservedFlags(f1.val or f2.val);
    
  end;
  
  //S
  CommandFlushingBehaviorFlags = record
    public val: UInt32;
    public constructor(val: UInt32) := self.val := val;
    
    public static property SYNC_FLUSH_COMMANDS:  CommandFlushingBehaviorFlags read new CommandFlushingBehaviorFlags($00000001);
    
    public static function operator or(f1,f2: CommandFlushingBehaviorFlags): CommandFlushingBehaviorFlags := new CommandFlushingBehaviorFlags(f1.val or f2.val);
    
  end;
  
  //S
  BufferMapFlags = record
    public val: UInt32;
    public constructor(val: UInt32) := self.val := val;
    
    public static property READ_BIT:              BufferMapFlags read new BufferMapFlags($0001);
    public static property WRITE_BIT:             BufferMapFlags read new BufferMapFlags($0002);
    public static property INVALIDATE_RANGE_BIT:  BufferMapFlags read new BufferMapFlags($0004);
    public static property INVALIDATE_BUFFER_BIT: BufferMapFlags read new BufferMapFlags($0008);
    public static property FLUSH_EXPLICIT_BIT:    BufferMapFlags read new BufferMapFlags($0010);
    public static property UNSYNCHRONIZED_BIT:    BufferMapFlags read new BufferMapFlags($0020);
    public static property PERSISTENT_BIT:        BufferMapFlags read new BufferMapFlags($0040);
    public static property COHERENT_BIT:          BufferMapFlags read new BufferMapFlags($0080);
    
    public static function operator or(f1,f2: BufferMapFlags): BufferMapFlags := new BufferMapFlags(f1.val or f2.val);
    
  end;
  
  //S
  BufferStorageFlags = record
    public val: UInt32;
    public constructor(val: UInt32) := self.val := val;
    
//    public static property NONE:                BufferStorageFlags read new BufferStorageFlags(0); //ToDo узнать надо ли
    public static property MAP_READ_BIT:        BufferStorageFlags read new BufferStorageFlags($0001);
    public static property MAP_WRITE_BIT:       BufferStorageFlags read new BufferStorageFlags($0002);
    public static property MAP_PERSISTENT_BIT:  BufferStorageFlags read new BufferStorageFlags($0040);
    public static property MAP_COHERENT_BIT:    BufferStorageFlags read new BufferStorageFlags($0080);
    public static property DYNAMIC_STORAGE_BIT: BufferStorageFlags read new BufferStorageFlags($0100);
    public static property CLIENT_STORAGE_BIT:  BufferStorageFlags read new BufferStorageFlags($0200);
    
    public static function operator or(f1,f2: BufferStorageFlags): BufferStorageFlags := new BufferStorageFlags(f1.val or f2.val);
    
  end;
  
  {$endregion Флаги}
  
  
  