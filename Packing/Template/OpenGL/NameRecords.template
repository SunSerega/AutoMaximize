  
  
  
  //--------------------------------------------------
  //                  Basic type's
  //--------------------------------------------------
  
  gl_program = record
    public val: UInt32;
    public constructor(val: UInt32) := self.val := val;
    public static property Zero: gl_program read default(gl_program);
    public static property Size: integer read Marshal.SizeOf&<UInt32>;
    public function ToString: string; override := $'gl_program[{val}]';
  end;
  gl_program_pipeline = record
    public val: UInt32;
    public constructor(val: UInt32) := self.val := val;
    public static property Zero: gl_program_pipeline read default(gl_program_pipeline);
    public static property Size: integer read Marshal.SizeOf&<UInt32>;
    public function ToString: string; override := $'gl_program_pipeline[{val}]';
  end;
  gl_texture = record
    public val: UInt32;
    public constructor(val: UInt32) := self.val := val;
    public static property Zero: gl_texture read default(gl_texture);
    public static property Size: integer read Marshal.SizeOf&<UInt32>;
    public function ToString: string; override := $'gl_texture[{val}]';
  end;
  gl_buffer = record
    public val: UInt32;
    public constructor(val: UInt32) := self.val := val;
    public static property Zero: gl_buffer read default(gl_buffer);
    public static property Size: integer read Marshal.SizeOf&<UInt32>;
    public function ToString: string; override := $'gl_buffer[{val}]';
  end;
  gl_shader = record
    public val: UInt32;
    public constructor(val: UInt32) := self.val := val;
    public static property Zero: gl_shader read default(gl_shader);
    public static property Size: integer read Marshal.SizeOf&<UInt32>;
    public function ToString: string; override := $'gl_shader[{val}]';
  end;
  gl_query = record
    public val: UInt32;
    public constructor(val: UInt32) := self.val := val;
    public static property Zero: gl_query read default(gl_query);
    public static property Size: integer read Marshal.SizeOf&<UInt32>;
    public function ToString: string; override := $'gl_query[{val}]';
  end;
  gl_framebuffer = record
    public val: UInt32;
    public constructor(val: UInt32) := self.val := val;
    public static property Zero: gl_framebuffer read default(gl_framebuffer);
    public static property Size: integer read Marshal.SizeOf&<UInt32>;
    public function ToString: string; override := $'gl_framebuffer[{val}]';
  end;
  gl_renderbuffer = record
    public val: UInt32;
    public constructor(val: UInt32) := self.val := val;
    public static property Zero: gl_renderbuffer read default(gl_renderbuffer);
    public static property Size: integer read Marshal.SizeOf&<UInt32>;
    public function ToString: string; override := $'gl_renderbuffer[{val}]';
  end;
  gl_sampler = record
    public val: UInt32;
    public constructor(val: UInt32) := self.val := val;
    public static property Zero: gl_sampler read default(gl_sampler);
    public static property Size: integer read Marshal.SizeOf&<UInt32>;
    public function ToString: string; override := $'gl_sampler[{val}]';
  end;
  gl_transform_feedback = record
    public val: UInt32;
    public constructor(val: UInt32) := self.val := val;
    public static property Zero: gl_transform_feedback read default(gl_transform_feedback);
    public static property Size: integer read Marshal.SizeOf&<UInt32>;
    public function ToString: string; override := $'gl_transform_feedback[{val}]';
  end;
  gl_vertex_array = record
    public val: UInt32;
    public constructor(val: UInt32) := self.val := val;
    public static property Zero: gl_vertex_array read default(gl_vertex_array);
    public static property Size: integer read Marshal.SizeOf&<UInt32>;
    public function ToString: string; override := $'gl_vertex_array[{val}]';
  end;
  gl_sync = record
    public val: IntPtr;
    public constructor(val: IntPtr) := self.val := val;
    public static property Zero: gl_sync read default(gl_sync);
    public static property Size: integer read Marshal.SizeOf&<IntPtr>;
    public function ToString: string; override := $'gl_sync[{val}]';
  end;
  gl_display_list = record
    public val: UInt32;
    public constructor(val: UInt32) := self.val := val;
    public static property Zero: gl_display_list read default(gl_display_list);
    public static property Size: integer read Marshal.SizeOf&<UInt32>;
    public function ToString: string; override := $'gl_display_list[{val}]';
  end;
  
  gl_handle_ARB = record
    public val: UInt32;
    public constructor(val: UInt32) := self.val := val;
    public static property Zero: gl_handle_ARB read default(gl_handle_ARB);
    public static property Size: integer read Marshal.SizeOf&<UInt32>;
    public function ToString: string; override := $'gl_handle_ARB[{val}]';
  end;
  
  // GL_NV_vdpau_interop
  gl_vdpau_surface_NV = record
    public val: IntPtr;
    public constructor(val: IntPtr) := self.val := val;
    public static property Zero: gl_vdpau_surface_NV read default(gl_vdpau_surface_NV);
    public static property Size: integer read Marshal.SizeOf&<IntPtr>;
    public function ToString: string; override := $'gl_vdpau_surface_NV[{val}]';
  end;
  
  // GL_INTEL_performance_query
  gl_perf_query_id_INTEL = record
    public val: UInt32;
    public constructor(val: UInt32) := self.val := val;
    public static property Zero: gl_perf_query_id_INTEL read default(gl_perf_query_id_INTEL);
    public static property Size: integer read Marshal.SizeOf&<UInt32>;
    public function ToString: string; override := $'gl_perf_query_id_INTEL[{val}]';
  end;
  gl_perf_query_handle_INTEL = record
    public val: UInt32;
    public constructor(val: UInt32) := self.val := val;
    public static property Zero: gl_perf_query_handle_INTEL read default(gl_perf_query_handle_INTEL);
    public static property Size: integer read Marshal.SizeOf&<UInt32>;
    public function ToString: string; override := $'gl_perf_query_handle_INTEL[{val}]';
  end;
  
  //--------------------------------------------------
  //                        cl
  //--------------------------------------------------
  
  gl_cl_context = record
    public val: IntPtr;
    public constructor(val: IntPtr) := self.val := val;
    public static property Zero: gl_cl_context read default(gl_cl_context);
    public static property Size: integer read Marshal.SizeOf&<IntPtr>;
    public function ToString: string; override := $'gl_cl_context[{val}]';
  end;
  gl_cl_event = record
    public val: IntPtr;
    public constructor(val: IntPtr) := self.val := val;
    public static property Zero: gl_cl_event read default(gl_cl_event);
    public static property Size: integer read Marshal.SizeOf&<IntPtr>;
    public function ToString: string; override := $'gl_cl_event[{val}]';
  end;
  
  //--------------------------------------------------
  //                        wgl
  //--------------------------------------------------
  
  // gdi
  gdi_device_context = record
    public val: IntPtr;
    public constructor(val: IntPtr) := self.val := val;
    public static property Zero: gdi_device_context read default(gdi_device_context);
    public static property Size: integer read Marshal.SizeOf&<IntPtr>;
    public function ToString: string; override := $'gdi_device_context[{val}]';
  end;
  gdi_h_enh_metafile = record
    public val: IntPtr;
    public constructor(val: IntPtr) := self.val := val;
    public static property Zero: gdi_h_enh_metafile read default(gdi_h_enh_metafile);
    public static property Size: integer read Marshal.SizeOf&<IntPtr>;
    public function ToString: string; override := $'gdi_h_enh_metafile[{val}]';
  end;
  
  // core
  wgl_context = record
    public val: IntPtr;
    public constructor(val: IntPtr) := self.val := val;
    public static property Zero: wgl_context read default(wgl_context);
    public static property Size: integer read Marshal.SizeOf&<IntPtr>;
    public function ToString: string; override := $'wgl_context[{val}]';
  end;
  
  // WGL_ARB_pbuffer
  wgl_pbuffer_ARB = record
    public val: IntPtr;
    public constructor(val: IntPtr) := self.val := val;
    public static property Zero: wgl_pbuffer_ARB read default(wgl_pbuffer_ARB);
    public static property Size: integer read Marshal.SizeOf&<IntPtr>;
    public function ToString: string; override := $'wgl_pbuffer_ARB[{val}]';
  end;
  wgl_pbuffer_EXT = record
    public val: IntPtr;
    public constructor(val: IntPtr) := self.val := val;
    public static property Zero: wgl_pbuffer_EXT read default(wgl_pbuffer_EXT);
    public static property Size: integer read Marshal.SizeOf&<IntPtr>;
    public function ToString: string; override := $'wgl_pbuffer_EXT[{val}]';
  end;
  
  // WGL_NV_gpu_affinity
  wgl_GPU_NV = record
    public val: IntPtr;
    public constructor(val: IntPtr) := self.val := val;
    public static property Zero: wgl_GPU_NV read default(wgl_GPU_NV);
    public static property Size: integer read Marshal.SizeOf&<IntPtr>;
    public function ToString: string; override := $'wgl_GPU_NV[{val}]';
  end;
  
  // GL_NV_video_capture
  // WGL_NV_video_capture
  wgl_h_video_input_device_NV = record
    public val: IntPtr;
    public constructor(val: IntPtr) := self.val := val;
    public static property Zero: wgl_h_video_input_device_NV read default(wgl_h_video_input_device_NV);
    public static property Size: integer read Marshal.SizeOf&<IntPtr>;
    public function ToString: string; override := $'wgl_h_video_input_device_NV[{val}]';
  end;
  
  // GL_NV_present_video
  // WGL_NV_present_video
  wgl_h_video_output_device_NV = record
    public val: IntPtr;
    public constructor(val: IntPtr) := self.val := val;
    public static property Zero: wgl_h_video_output_device_NV read default(wgl_h_video_output_device_NV);
    public static property Size: integer read Marshal.SizeOf&<IntPtr>;
    public function ToString: string; override := $'wgl_h_video_output_device_NV[{val}]';
  end;
  
  // WGL_NV_video_output
  wgl_h_video_device_NV = record
    public val: IntPtr;
    public constructor(val: IntPtr) := self.val := val;
    public static property Zero: wgl_h_video_device_NV read default(wgl_h_video_device_NV);
    public static property Size: integer read Marshal.SizeOf&<IntPtr>;
    public function ToString: string; override := $'wgl_h_video_device_NV[{val}]';
  end;
  
  //--------------------------------------------------
  //                        glx
  //--------------------------------------------------
  
  // x
  x_p_visual_info = record
    public val: IntPtr;
    public constructor(val: IntPtr) := self.val := val;
    public static property Zero: x_p_visual_info read default(x_p_visual_info);
    public static property Size: integer read Marshal.SizeOf&<IntPtr>;
    public function ToString: string; override := $'x_p_visual_info[{val}]';
  end;
  x_p_display = record
    public val: IntPtr;
    public constructor(val: IntPtr) := self.val := val;
    public static property Zero: x_p_display read default(x_p_display);
    public static property Size: integer read Marshal.SizeOf&<IntPtr>;
    public function ToString: string; override := $'x_p_display[{val}]';
  end;
  x_pixmap = record
    public val: IntPtr;
    public constructor(val: IntPtr) := self.val := val;
    public static property Zero: x_pixmap read default(x_pixmap);
    public static property Size: integer read Marshal.SizeOf&<IntPtr>;
    public function ToString: string; override := $'x_pixmap[{val}]';
  end;
  x_font = record
    public val: IntPtr;
    public constructor(val: IntPtr) := self.val := val;
    public static property Zero: x_font read default(x_font);
    public static property Size: integer read Marshal.SizeOf&<IntPtr>;
    public function ToString: string; override := $'x_font[{val}]';
  end;
  x_window = record
    public val: IntPtr;
    public constructor(val: IntPtr) := self.val := val;
    public static property Zero: x_window read default(x_window);
    public static property Size: integer read Marshal.SizeOf&<IntPtr>;
    public function ToString: string; override := $'x_window[{val}]';
  end;
  x_dm_params = record
    public val: IntPtr;
    public constructor(val: IntPtr) := self.val := val;
    public static property Zero: x_dm_params read default(x_dm_params);
    public static property Size: integer read Marshal.SizeOf&<IntPtr>;
    public function ToString: string; override := $'x_dm_params[{val}]';
  end;
  x_dm_buffer = record
    public val: IntPtr;
    public constructor(val: IntPtr) := self.val := val;
    public static property Zero: x_dm_buffer read default(x_dm_buffer);
    public static property Size: integer read Marshal.SizeOf&<IntPtr>;
    public function ToString: string; override := $'x_dm_buffer[{val}]';
  end;
  x_colormap = record
    public val: IntPtr;
    public constructor(val: IntPtr) := self.val := val;
    public static property Zero: x_colormap read default(x_colormap);
    public static property Size: integer read Marshal.SizeOf&<IntPtr>;
    public function ToString: string; override := $'x_colormap[{val}]';
  end;
  
  //TODO что это вообще за типы? я не могу найти ничего про них
  x_vl_server = record
    public val: IntPtr;
    public constructor(val: IntPtr) := self.val := val;
    public static property Zero: x_vl_server read default(x_vl_server);
    public static property Size: integer read Marshal.SizeOf&<IntPtr>;
    public function ToString: string; override := $'x_vl_server[{val}]';
  end;
  x_vl_path = record
    public val: IntPtr;
    public constructor(val: IntPtr) := self.val := val;
    public static property Zero: x_vl_path read default(x_vl_path);
    public static property Size: integer read Marshal.SizeOf&<IntPtr>;
    public function ToString: string; override := $'x_vl_path[{val}]';
  end;
  x_vl_node = record
    public val: IntPtr;
    public constructor(val: IntPtr) := self.val := val;
    public static property Zero: x_vl_node read default(x_vl_node);
    public static property Size: integer read Marshal.SizeOf&<IntPtr>;
    public function ToString: string; override := $'x_vl_node[{val}]';
  end;
  
  // core
  glx_context = record
    public val: IntPtr;
    public constructor(val: IntPtr) := self.val := val;
    public static property Zero: glx_context read default(glx_context);
    public static property Size: integer read Marshal.SizeOf&<IntPtr>;
    public function ToString: string; override := $'glx_context[{val}]';
  end;
  glx_context_id = record
    public val: IntPtr;
    public constructor(val: IntPtr) := self.val := val;
    public static property Zero: glx_context_id read default(glx_context_id);
    public static property Size: integer read Marshal.SizeOf&<IntPtr>;
    public function ToString: string; override := $'glx_context_id[{val}]';
  end;
  glx_drawable = record
    public val: IntPtr;
    public constructor(val: IntPtr) := self.val := val;
    public static property Zero: glx_drawable read default(glx_drawable);
    public static property Size: integer read Marshal.SizeOf&<IntPtr>;
    public function ToString: string; override := $'glx_drawable[{val}]';
  end;
  glx_pixmap = record
    public val: IntPtr;
    public constructor(val: IntPtr) := self.val := val;
    public static property Zero: glx_pixmap read default(glx_pixmap);
    public static property Size: integer read Marshal.SizeOf&<IntPtr>;
    public function ToString: string; override := $'glx_pixmap[{val}]';
  end;
  glx_fb_config = record
    public val: IntPtr;
    public constructor(val: IntPtr) := self.val := val;
    public static property Zero: glx_fb_config read default(glx_fb_config);
    public static property Size: integer read Marshal.SizeOf&<IntPtr>;
    public function ToString: string; override := $'glx_fb_config[{val}]';
  end;
  glx_window = record
    public val: IntPtr;
    public constructor(val: IntPtr) := self.val := val;
    public static property Zero: glx_window read default(glx_window);
    public static property Size: integer read Marshal.SizeOf&<IntPtr>;
    public function ToString: string; override := $'glx_window[{val}]';
  end;
  glx_pbuffer = record
    public val: IntPtr;
    public constructor(val: IntPtr) := self.val := val;
    public static property Zero: glx_pbuffer read default(glx_pbuffer);
    public static property Size: integer read Marshal.SizeOf&<IntPtr>;
    public function ToString: string; override := $'glx_pbuffer[{val}]';
  end;
  
  // GLX_NV_video_out
  glx_video_device_NV = record
    public val: UInt32;
    public constructor(val: UInt32) := self.val := val;
    public static property Zero: glx_video_device_NV read default(glx_video_device_NV);
    public static property Size: integer read Marshal.SizeOf&<UInt32>;
    public function ToString: string; override := $'glx_video_device_NV[{val}]';
  end;
  
  // GL_NV_video_capture
  // GLX_NV_video_capture
  glx_video_capture_device_NV = record
    public val: IntPtr;
    public constructor(val: IntPtr) := self.val := val;
    public static property Zero: glx_video_capture_device_NV read default(glx_video_capture_device_NV);
    public static property Size: integer read Marshal.SizeOf&<IntPtr>;
    public function ToString: string; override := $'glx_video_capture_device_NV[{val}]';
  end;
  
  // GLX_SGIX_video_source
  glx_video_source_SGIX = record
    public val: IntPtr;
    public constructor(val: IntPtr) := self.val := val;
    public static property Zero: glx_video_source_SGIX read default(glx_video_source_SGIX);
    public static property Size: integer read Marshal.SizeOf&<IntPtr>;
    public function ToString: string; override := $'glx_video_source_SGIX[{val}]';
  end;
  
  //--------------------------------------------------
  //                       egl
  //--------------------------------------------------
  
  // GL_OES_EGL_image
  egl_image_OES = record
    public val: IntPtr;
    public constructor(val: IntPtr) := self.val := val;
    public static property Zero: egl_image_OES read default(egl_image_OES);
    public static property Size: integer read Marshal.SizeOf&<IntPtr>;
    public function ToString: string; override := $'egl_image_OES[{val}]';
  end;
  
  // GL_EXT_external_buffer
  egl_chient_buffer_EXT = record
    public val: IntPtr;
    public constructor(val: IntPtr) := self.val := val;
    public static property Zero: egl_chient_buffer_EXT read default(egl_chient_buffer_EXT);
    public static property Size: integer read Marshal.SizeOf&<IntPtr>;
    public function ToString: string; override := $'egl_chient_buffer_EXT[{val}]';
  end;
  
  
