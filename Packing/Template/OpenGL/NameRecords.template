  
  
  
  gl_program = record
    public val: UInt32;
    public constructor(val: UInt32) := self.val := val;
    public static property Zero: gl_program read default(gl_program);
    public static property Size: integer read Marshal.SizeOf&<UInt32>;
    public function ToString: string; override := $'gl_program[{val}]';
  end;
  gl_program_pipeline = record
    public val: UInt32;
    public constructor(val: UInt32) := self.val := val;
    public static property Zero: gl_program_pipeline read default(gl_program_pipeline);
    public static property Size: integer read Marshal.SizeOf&<UInt32>;
    public function ToString: string; override := $'gl_program_pipeline[{val}]';
  end;
  gl_texture = record
    public val: UInt32;
    public constructor(val: UInt32) := self.val := val;
    public static property Zero: gl_texture read default(gl_texture);
    public static property Size: integer read Marshal.SizeOf&<UInt32>;
    public function ToString: string; override := $'gl_texture[{val}]';
  end;
  gl_buffer = record
    public val: UInt32;
    public constructor(val: UInt32) := self.val := val;
    public static property Zero: gl_buffer read default(gl_buffer);
    public static property Size: integer read Marshal.SizeOf&<UInt32>;
    public function ToString: string; override := $'gl_buffer[{val}]';
  end;
  gl_shader = record
    public val: UInt32;
    public constructor(val: UInt32) := self.val := val;
    public static property Zero: gl_shader read default(gl_shader);
    public static property Size: integer read Marshal.SizeOf&<UInt32>;
    public function ToString: string; override := $'gl_shader[{val}]';
  end;
  gl_query = record
    public val: UInt32;
    public constructor(val: UInt32) := self.val := val;
    public static property Zero: gl_query read default(gl_query);
    public static property Size: integer read Marshal.SizeOf&<UInt32>;
    public function ToString: string; override := $'gl_query[{val}]';
  end;
  gl_framebuffer = record
    public val: UInt32;
    public constructor(val: UInt32) := self.val := val;
    public static property Zero: gl_framebuffer read default(gl_framebuffer);
    public static property Size: integer read Marshal.SizeOf&<UInt32>;
    public function ToString: string; override := $'gl_framebuffer[{val}]';
  end;
  gl_renderbuffer = record
    public val: UInt32;
    public constructor(val: UInt32) := self.val := val;
    public static property Zero: gl_renderbuffer read default(gl_renderbuffer);
    public static property Size: integer read Marshal.SizeOf&<UInt32>;
    public function ToString: string; override := $'gl_renderbuffer[{val}]';
  end;
  gl_sampler = record
    public val: UInt32;
    public constructor(val: UInt32) := self.val := val;
    public static property Zero: gl_sampler read default(gl_sampler);
    public static property Size: integer read Marshal.SizeOf&<UInt32>;
    public function ToString: string; override := $'gl_sampler[{val}]';
  end;
  gl_transform_feedback = record
    public val: UInt32;
    public constructor(val: UInt32) := self.val := val;
    public static property Zero: gl_transform_feedback read default(gl_transform_feedback);
    public static property Size: integer read Marshal.SizeOf&<UInt32>;
    public function ToString: string; override := $'gl_transform_feedback[{val}]';
  end;
  gl_vertex_array = record
    public val: UInt32;
    public constructor(val: UInt32) := self.val := val;
    public static property Zero: gl_vertex_array read default(gl_vertex_array);
    public static property Size: integer read Marshal.SizeOf&<UInt32>;
    public function ToString: string; override := $'gl_vertex_array[{val}]';
  end;
  gl_sync = record
    public val: IntPtr;
    public constructor(val: IntPtr) := self.val := val;
    public static property Zero: gl_sync read default(gl_sync);
    public static property Size: integer read Marshal.SizeOf&<IntPtr>;
    public function ToString: string; override := $'gl_sync[{val}]';
  end;
  gl_display_list = record
    public val: UInt32;
    public constructor(val: UInt32) := self.val := val;
    public static property Zero: gl_display_list read default(gl_display_list);
    public static property Size: integer read Marshal.SizeOf&<UInt32>;
    public function ToString: string; override := $'gl_display_list[{val}]';
  end;
  
  GLContext = record
    public val: UInt32;
    public constructor(val: UInt32) := self.val := val;
    public static property Zero: GLContext read default(GLContext);
    public static property Size: integer read Marshal.SizeOf&<UInt32>;
    public function ToString: string; override := $'GLContext[{val}]';
  end;
  GDI_DC = record
    public val: IntPtr;
    public constructor(val: IntPtr) := self.val := val;
    public static property Zero: GDI_DC read default(GDI_DC);
    public static property Size: integer read Marshal.SizeOf&<IntPtr>;
    public function ToString: string; override := $'GDI_DC[{val}]';
  end;
  
  //	типы	для	совместимости	с	OpenCL
  ///--
  cl_context = record
    public val: IntPtr;
    public constructor(val: IntPtr) := self.val := val;
    public static property Zero: cl_context read default(cl_context);
    public static property Size: integer read Marshal.SizeOf&<IntPtr>;
    public function ToString: string; override := $'cl_context[{val}]';
  end;
  ///--
  cl_event = record
    public val: IntPtr;
    public constructor(val: IntPtr) := self.val := val;
    public static property Zero: cl_event read default(cl_event);
    public static property Size: integer read Marshal.SizeOf&<IntPtr>;
    public function ToString: string; override := $'cl_event[{val}]';
  end;
  
  //	INTEL_performance_query
  PerfQueryIdINTEL = record
    public val: UInt32;
    public constructor(val: UInt32) := self.val := val;
    public static property Zero: PerfQueryIdINTEL read default(PerfQueryIdINTEL);
    public static property Size: integer read Marshal.SizeOf&<UInt32>;
    public function ToString: string; override := $'PerfQueryIdINTEL[{val}]';
  end;
  PerfQueryHandleINTEL = record
    public val: UInt32;
    public constructor(val: UInt32) := self.val := val;
    public static property Zero: PerfQueryHandleINTEL read default(PerfQueryHandleINTEL);
    public static property Size: integer read Marshal.SizeOf&<UInt32>;
    public function ToString: string; override := $'PerfQueryHandleINTEL[{val}]';
  end;
  
  
  
  //ToDo	переименовать	и	проверить	типы	всего	дальше:
  
  GLeglImageOES = record
    public val: IntPtr;
    public constructor(val: IntPtr) := self.val := val;
    public static property Zero: GLeglImageOES read default(GLeglImageOES);
    public static property Size: integer read Marshal.SizeOf&<IntPtr>;
    public function ToString: string; override := $'GLeglImageOES[{val}]';
  end;
  
  GLhandleARB = record
    public val: UInt32;
    public constructor(val: UInt32) := self.val := val;
    public static property Zero: GLhandleARB read default(GLhandleARB);
    public static property Size: integer read Marshal.SizeOf&<UInt32>;
    public function ToString: string; override := $'GLhandleARB[{val}]';
  end;
  HPVIDEODEV = record
    public val: IntPtr;
    public constructor(val: IntPtr) := self.val := val;
    public static property Zero: HPVIDEODEV read default(HPVIDEODEV);
    public static property Size: integer read Marshal.SizeOf&<IntPtr>;
    public function ToString: string; override := $'HPVIDEODEV[{val}]';
  end;
  HVIDEOOUTPUTDEVICENV = record
    public val: IntPtr;
    public constructor(val: IntPtr) := self.val := val;
    public static property Zero: HVIDEOOUTPUTDEVICENV read default(HVIDEOOUTPUTDEVICENV);
    public static property Size: integer read Marshal.SizeOf&<IntPtr>;
    public function ToString: string; override := $'HVIDEOOUTPUTDEVICENV[{val}]';
  end;
  HVIDEOINPUTDEVICENV = record
    public val: IntPtr;
    public constructor(val: IntPtr) := self.val := val;
    public static property Zero: HVIDEOINPUTDEVICENV read default(HVIDEOINPUTDEVICENV);
    public static property Size: integer read Marshal.SizeOf&<IntPtr>;
    public function ToString: string; override := $'HVIDEOINPUTDEVICENV[{val}]';
  end;
  PGPU_DEVICE = record
    public val: IntPtr;
    public constructor(val: IntPtr) := self.val := val;
    public static property Zero: PGPU_DEVICE read default(PGPU_DEVICE);
    public static property Size: integer read Marshal.SizeOf&<IntPtr>;
    public function ToString: string; override := $'PGPU_DEVICE[{val}]';
  end;
  HGPUNV = record
    public val: IntPtr;
    public constructor(val: IntPtr) := self.val := val;
    public static property Zero: HGPUNV read default(HGPUNV);
    public static property Size: integer read Marshal.SizeOf&<IntPtr>;
    public function ToString: string; override := $'HGPUNV[{val}]';
  end;
  HPBUFFER = record
    public val: IntPtr;
    public constructor(val: IntPtr) := self.val := val;
    public static property Zero: HPBUFFER read default(HPBUFFER);
    public static property Size: integer read Marshal.SizeOf&<IntPtr>;
    public function ToString: string; override := $'HPBUFFER[{val}]';
  end;
  GLeglClientBufferEXT = record
    public val: IntPtr;
    public constructor(val: IntPtr) := self.val := val;
    public static property Zero: GLeglClientBufferEXT read default(GLeglClientBufferEXT);
    public static property Size: integer read Marshal.SizeOf&<IntPtr>;
    public function ToString: string; override := $'GLeglClientBufferEXT[{val}]';
  end;
  GLvdpauSurfaceNV = record
    public val: IntPtr;
    public constructor(val: IntPtr) := self.val := val;
    public static property Zero: GLvdpauSurfaceNV read default(GLvdpauSurfaceNV);
    public static property Size: integer read Marshal.SizeOf&<IntPtr>;
    public function ToString: string; override := $'GLvdpauSurfaceNV[{val}]';
  end;
  
  
  
  //ToDo	эти	типы	вообще	угадывал,	перепроверить
  
  GDI_HENHMetafile = record
    public val: IntPtr;
    public constructor(val: IntPtr) := self.val := val;
    public static property Zero: GDI_HENHMetafile read default(GDI_HENHMetafile);
    public static property Size: integer read Marshal.SizeOf&<IntPtr>;
    public function ToString: string; override := $'GDI_HENHMetafile[{val}]';
  end;
  GDI_LayerPlaneDescriptor = record
    public val: IntPtr;
    public constructor(val: IntPtr) := self.val := val;
    public static property Zero: GDI_LayerPlaneDescriptor read default(GDI_LayerPlaneDescriptor);
    public static property Size: integer read Marshal.SizeOf&<IntPtr>;
    public function ToString: string; override := $'GDI_LayerPlaneDescriptor[{val}]';
  end;
  
  
