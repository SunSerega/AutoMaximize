  
  
  
  cl_buffer_region = record
    public origin: UIntPtr;
    public size: UIntPtr;
    
    public constructor(origin: UIntPtr; size: UIntPtr);
    begin
      self.origin := origin;
      self.size := size;
    end;
    
  end;
  
  cl_dx9_surface_info_khr = record
    public resource: ^IntPtr;
    public shared_handle: IntPtr;
    
    public constructor(resource: ^IntPtr; shared_handle: IntPtr);
    begin
      self.resource := resource;
      self.shared_handle := shared_handle;
    end;
    
  end;
  
  cl_image_desc = record
    public image_type: MemObjectType;
    public image_width: UIntPtr;
    public image_height: UIntPtr;
    public image_depth: UIntPtr;
    public image_array_size: UIntPtr;
    public image_row_pitch: UIntPtr;
    public image_slice_pitch: UIntPtr;
    public num_mip_levels: UInt32;
    public num_samples: UInt32;
    public mem_object: cl_mem;
    
    public constructor(image_type: MemObjectType; image_width: UIntPtr; image_height: UIntPtr; image_depth: UIntPtr; image_array_size: UIntPtr; image_row_pitch: UIntPtr; image_slice_pitch: UIntPtr; num_mip_levels: UInt32; num_samples: UInt32; mem_object: cl_mem);
    begin
      self.image_type := image_type;
      self.image_width := image_width;
      self.image_height := image_height;
      self.image_depth := image_depth;
      self.image_array_size := image_array_size;
      self.image_row_pitch := image_row_pitch;
      self.image_slice_pitch := image_slice_pitch;
      self.num_mip_levels := num_mip_levels;
      self.num_samples := num_samples;
      self.mem_object := mem_object;
    end;
    
  end;
  
  cl_image_format = record
    public image_channel_order: ChannelOrder;
    public image_channel_data_type: ChannelType;
    
    public constructor(image_channel_order: ChannelOrder; image_channel_data_type: ChannelType);
    begin
      self.image_channel_order := image_channel_order;
      self.image_channel_data_type := image_channel_data_type;
    end;
    
  end;
  
  cl_mem_ext_host_ptr = record
    public allocation_type: UInt32;
    public host_cache_policy: UInt32;
    
    public constructor(allocation_type: UInt32; host_cache_policy: UInt32);
    begin
      self.allocation_type := allocation_type;
      self.host_cache_policy := host_cache_policy;
    end;
    
  end;
  
  cl_mem_android_native_buffer_host_ptr = record
    public ext_host_ptr: cl_mem_ext_host_ptr;
    public anb_ptr: IntPtr;
    
    public constructor(ext_host_ptr: cl_mem_ext_host_ptr; anb_ptr: IntPtr);
    begin
      self.ext_host_ptr := ext_host_ptr;
      self.anb_ptr := anb_ptr;
    end;
    
  end;
  
  cl_mem_ion_host_ptr = record
    public ext_host_ptr: cl_mem_ext_host_ptr;
    public ion_filedesc: Int32;
    public ion_hostptr: IntPtr;
    
    public constructor(ext_host_ptr: cl_mem_ext_host_ptr; ion_filedesc: Int32; ion_hostptr: IntPtr);
    begin
      self.ext_host_ptr := ext_host_ptr;
      self.ion_filedesc := ion_filedesc;
      self.ion_hostptr := ion_hostptr;
    end;
    
  end;
  
  cl_motion_estimation_desc_intel = record
    public mb_block_type: UInt32;
    public subpixel_mode: UInt32;
    public sad_adjust_mode: UInt32;
    public search_path_type: UInt32;
    
    public constructor(mb_block_type: UInt32; subpixel_mode: UInt32; sad_adjust_mode: UInt32; search_path_type: UInt32);
    begin
      self.mb_block_type := mb_block_type;
      self.subpixel_mode := subpixel_mode;
      self.sad_adjust_mode := sad_adjust_mode;
      self.search_path_type := search_path_type;
    end;
    
  end;
  
  
  