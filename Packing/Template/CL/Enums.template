  
  
  
  {$region Core}
  
  Bool = record
    public val: UInt32;
    public constructor(val: UInt32) := self.val := val;
    
    private static _FALSE        := new Bool($0000);
    private static _NON_BLOCKING := new Bool($0000);
    private static _BLOCKING     := new Bool($0001);
    private static _TRUE         := new Bool($0001);
    
    public static property FALSE:        Bool read _FALSE;
    public static property NON_BLOCKING: Bool read _NON_BLOCKING;
    public static property BLOCKING:     Bool read _BLOCKING;
    public static property TRUE:         Bool read _TRUE;
    
    public function ToString: string; override;
    begin
      var res := typeof(Bool).GetProperties(System.Reflection.BindingFlags.Static or System.Reflection.BindingFlags.Public).FirstOrDefault(prop->UInt32(prop.GetValue(self))=self.val);
      Result := res=nil?
        $'Bool[{ self.val=0 ? ''NONE'' : self.val.ToString(''X'') }]':
        res.Name.TrimStart('&');
    end;
    
  end;
  
  ChannelOrder = record
    public val: UInt32;
    public constructor(val: UInt32) := self.val := val;
    
    private static _NONE := new ChannelOrder($0000);
    
    public static property NONE: ChannelOrder read _NONE;
    
    public function ToString: string; override;
    begin
      var res := typeof(ChannelOrder).GetProperties(System.Reflection.BindingFlags.Static or System.Reflection.BindingFlags.Public).FirstOrDefault(prop->UInt32(prop.GetValue(self))=self.val);
      Result := res=nil?
        $'ChannelOrder[{ self.val=0 ? ''NONE'' : self.val.ToString(''X'') }]':
        res.Name.TrimStart('&');
    end;
    
  end;
  
  ChannelType = record
    public val: UInt32;
    public constructor(val: UInt32) := self.val := val;
    
    private static _NONE := new ChannelType($0000);
    
    public static property NONE: ChannelType read _NONE;
    
    public function ToString: string; override;
    begin
      var res := typeof(ChannelType).GetProperties(System.Reflection.BindingFlags.Static or System.Reflection.BindingFlags.Public).FirstOrDefault(prop->UInt32(prop.GetValue(self))=self.val);
      Result := res=nil?
        $'ChannelType[{ self.val=0 ? ''NONE'' : self.val.ToString(''X'') }]':
        res.Name.TrimStart('&');
    end;
    
  end;
  
  cl_accelerator_type_intel = record
    public val: UInt32;
    public constructor(val: UInt32) := self.val := val;
    
    private static _ACCELERATOR_TYPE_MOTION_ESTIMATION_INTEL := new cl_accelerator_type_intel($0000);
    
    public static property ACCELERATOR_TYPE_MOTION_ESTIMATION_INTEL: cl_accelerator_type_intel read _ACCELERATOR_TYPE_MOTION_ESTIMATION_INTEL;
    
    public function ToString: string; override;
    begin
      var res := typeof(cl_accelerator_type_intel).GetProperties(System.Reflection.BindingFlags.Static or System.Reflection.BindingFlags.Public).FirstOrDefault(prop->UInt32(prop.GetValue(self))=self.val);
      Result := res=nil?
        $'cl_accelerator_type_intel[{ self.val=0 ? ''NONE'' : self.val.ToString(''X'') }]':
        res.Name.TrimStart('&');
    end;
    
  end;
  
  cl_platform_info = record
    public val: UInt32;
    public constructor(val: UInt32) := self.val := val;
    
    private static _PLATFORM_PROFILE               := new cl_platform_info($0900);
    private static _PLATFORM_VERSION               := new cl_platform_info($0901);
    private static _PLATFORM_NAME                  := new cl_platform_info($0902);
    private static _PLATFORM_VENDOR                := new cl_platform_info($0903);
    private static _PLATFORM_EXTENSIONS            := new cl_platform_info($0904);
    private static _PLATFORM_HOST_TIMER_RESOLUTION := new cl_platform_info($0905);
    private static _PLATFORM_ICD_SUFFIX_KHR        := new cl_platform_info($0920);
    
    public static property PLATFORM_PROFILE:               cl_platform_info read _PLATFORM_PROFILE;
    public static property PLATFORM_VERSION:               cl_platform_info read _PLATFORM_VERSION;
    public static property PLATFORM_NAME:                  cl_platform_info read _PLATFORM_NAME;
    public static property PLATFORM_VENDOR:                cl_platform_info read _PLATFORM_VENDOR;
    public static property PLATFORM_EXTENSIONS:            cl_platform_info read _PLATFORM_EXTENSIONS;
    public static property PLATFORM_HOST_TIMER_RESOLUTION: cl_platform_info read _PLATFORM_HOST_TIMER_RESOLUTION;
    public static property PLATFORM_ICD_SUFFIX_KHR:        cl_platform_info read _PLATFORM_ICD_SUFFIX_KHR;
    
    public function ToString: string; override;
    begin
      var res := typeof(cl_platform_info).GetProperties(System.Reflection.BindingFlags.Static or System.Reflection.BindingFlags.Public).FirstOrDefault(prop->UInt32(prop.GetValue(self))=self.val);
      Result := res=nil?
        $'cl_platform_info[{ self.val=0 ? ''NONE'' : self.val.ToString(''X'') }]':
        res.Name.TrimStart('&');
    end;
    
  end;
  
  CommandExecutionStatus = record
    public val: UInt32;
    public constructor(val: UInt32) := self.val := val;
    
    private static _COMPLETE  := new CommandExecutionStatus($0000);
    private static _RUNNING   := new CommandExecutionStatus($0001);
    private static _SUBMITTED := new CommandExecutionStatus($0002);
    private static _QUEUED    := new CommandExecutionStatus($0003);
    
    public static property COMPLETE:  CommandExecutionStatus read _COMPLETE;
    public static property RUNNING:   CommandExecutionStatus read _RUNNING;
    public static property SUBMITTED: CommandExecutionStatus read _SUBMITTED;
    public static property QUEUED:    CommandExecutionStatus read _QUEUED;
    
    public function ToString: string; override;
    begin
      var res := typeof(CommandExecutionStatus).GetProperties(System.Reflection.BindingFlags.Static or System.Reflection.BindingFlags.Public).FirstOrDefault(prop->UInt32(prop.GetValue(self))=self.val);
      Result := res=nil?
        $'CommandExecutionStatus[{ self.val=0 ? ''NONE'' : self.val.ToString(''X'') }]':
        res.Name.TrimStart('&');
    end;
    
  end;
  
  CommandQueuePropertyFlags = record
    public val: UInt64;
    public constructor(val: UInt64) := self.val := val;
    
    private static _QUEUE_THREAD_LOCAL_EXEC_ENABLE_INTEL := new CommandQueuePropertyFlags($FFFFFFFF80000000);
    private static _QUEUE_OUT_OF_ORDER_EXEC_MODE_ENABLE  := new CommandQueuePropertyFlags($0001);
    private static _QUEUE_PROFILING_ENABLE               := new CommandQueuePropertyFlags($0002);
    private static _QUEUE_ON_DEVICE                      := new CommandQueuePropertyFlags($0004);
    private static _QUEUE_ON_DEVICE_DEFAULT              := new CommandQueuePropertyFlags($0008);
    private static _QUEUE_RESERVED_QCOM                  := new CommandQueuePropertyFlags($40000000);
    
    public static property QUEUE_THREAD_LOCAL_EXEC_ENABLE_INTEL: CommandQueuePropertyFlags read _QUEUE_THREAD_LOCAL_EXEC_ENABLE_INTEL;
    public static property QUEUE_OUT_OF_ORDER_EXEC_MODE_ENABLE:  CommandQueuePropertyFlags read _QUEUE_OUT_OF_ORDER_EXEC_MODE_ENABLE;
    public static property QUEUE_PROFILING_ENABLE:               CommandQueuePropertyFlags read _QUEUE_PROFILING_ENABLE;
    public static property QUEUE_ON_DEVICE:                      CommandQueuePropertyFlags read _QUEUE_ON_DEVICE;
    public static property QUEUE_ON_DEVICE_DEFAULT:              CommandQueuePropertyFlags read _QUEUE_ON_DEVICE_DEFAULT;
    public static property QUEUE_RESERVED_QCOM:                  CommandQueuePropertyFlags read _QUEUE_RESERVED_QCOM;
    
    public static function operator or(f1,f2: CommandQueuePropertyFlags) := new CommandQueuePropertyFlags(f1.val or f2.val);
    
    public property HAS_FLAG_QUEUE_THREAD_LOCAL_EXEC_ENABLE_INTEL: boolean read self.val and $FFFFFFFF80000000 <> 0;
    public property HAS_FLAG_QUEUE_OUT_OF_ORDER_EXEC_MODE_ENABLE:  boolean read self.val and $0001 <> 0;
    public property HAS_FLAG_QUEUE_PROFILING_ENABLE:               boolean read self.val and $0002 <> 0;
    public property HAS_FLAG_QUEUE_ON_DEVICE:                      boolean read self.val and $0004 <> 0;
    public property HAS_FLAG_QUEUE_ON_DEVICE_DEFAULT:              boolean read self.val and $0008 <> 0;
    public property HAS_FLAG_QUEUE_RESERVED_QCOM:                  boolean read self.val and $40000000 <> 0;
    
    public function ToString: string; override;
    begin
      var res := typeof(CommandQueuePropertyFlags).GetProperties.Where(prop->prop.Name.StartsWith('HAS_FLAG_') and boolean(prop.GetValue(self))).Select(prop->prop.Name.TrimStart('&')).ToList;
      Result := res.Count=0?
        $'CommandQueuePropertyFlags[{ self.val=0 ? ''NONE'' : self.val.ToString(''X'') }]':
        res.JoinIntoString('+');
    end;
    
  end;
  
  DeviceInfo = record
    public val: UInt32;
    public constructor(val: UInt32) := self.val := val;
    
    private static _DEVICE_TYPE                                   := new DeviceInfo($1000);
    private static _DEVICE_VENDOR_ID                              := new DeviceInfo($1001);
    private static _DEVICE_MAX_COMPUTE_UNITS                      := new DeviceInfo($1002);
    private static _DEVICE_MAX_WORK_ITEM_DIMENSIONS               := new DeviceInfo($1003);
    private static _DEVICE_MAX_WORK_GROUP_SIZE                    := new DeviceInfo($1004);
    private static _DEVICE_MAX_WORK_ITEM_SIZES                    := new DeviceInfo($1005);
    private static _DEVICE_PREFERRED_VECTOR_WIDTH_CHAR            := new DeviceInfo($1006);
    private static _DEVICE_PREFERRED_VECTOR_WIDTH_SHORT           := new DeviceInfo($1007);
    private static _DEVICE_PREFERRED_VECTOR_WIDTH_INT             := new DeviceInfo($1008);
    private static _DEVICE_PREFERRED_VECTOR_WIDTH_LONG            := new DeviceInfo($1009);
    private static _DEVICE_PREFERRED_VECTOR_WIDTH_FLOAT           := new DeviceInfo($100A);
    private static _DEVICE_PREFERRED_VECTOR_WIDTH_DOUBLE          := new DeviceInfo($100B);
    private static _DEVICE_MAX_CLOCK_FREQUENCY                    := new DeviceInfo($100C);
    private static _DEVICE_ADDRESS_BITS                           := new DeviceInfo($100D);
    private static _DEVICE_MAX_READ_IMAGE_ARGS                    := new DeviceInfo($100E);
    private static _DEVICE_MAX_WRITE_IMAGE_ARGS                   := new DeviceInfo($100F);
    private static _DEVICE_MAX_MEM_ALLOC_SIZE                     := new DeviceInfo($1010);
    private static _DEVICE_IMAGE2D_MAX_WIDTH                      := new DeviceInfo($1011);
    private static _DEVICE_IMAGE2D_MAX_HEIGHT                     := new DeviceInfo($1012);
    private static _DEVICE_IMAGE3D_MAX_WIDTH                      := new DeviceInfo($1013);
    private static _DEVICE_IMAGE3D_MAX_HEIGHT                     := new DeviceInfo($1014);
    private static _DEVICE_IMAGE3D_MAX_DEPTH                      := new DeviceInfo($1015);
    private static _DEVICE_IMAGE_SUPPORT                          := new DeviceInfo($1016);
    private static _DEVICE_MAX_PARAMETER_SIZE                     := new DeviceInfo($1017);
    private static _DEVICE_MAX_SAMPLERS                           := new DeviceInfo($1018);
    private static _DEVICE_MEM_BASE_ADDR_ALIGN                    := new DeviceInfo($1019);
    private static _DEVICE_MIN_DATA_TYPE_ALIGN_SIZE               := new DeviceInfo($101A);
    private static _DEVICE_SINGLE_FP_CONFIG                       := new DeviceInfo($101B);
    private static _DEVICE_GLOBAL_MEM_CACHE_TYPE                  := new DeviceInfo($101C);
    private static _DEVICE_GLOBAL_MEM_CACHELINE_SIZE              := new DeviceInfo($101D);
    private static _DEVICE_GLOBAL_MEM_CACHE_SIZE                  := new DeviceInfo($101E);
    private static _DEVICE_GLOBAL_MEM_SIZE                        := new DeviceInfo($101F);
    private static _DEVICE_MAX_CONSTANT_BUFFER_SIZE               := new DeviceInfo($1020);
    private static _DEVICE_MAX_CONSTANT_ARGS                      := new DeviceInfo($1021);
    private static _DEVICE_LOCAL_MEM_TYPE                         := new DeviceInfo($1022);
    private static _DEVICE_LOCAL_MEM_SIZE                         := new DeviceInfo($1023);
    private static _DEVICE_ERROR_CORRECTION_SUPPORT               := new DeviceInfo($1024);
    private static _DEVICE_PROFILING_TIMER_RESOLUTION             := new DeviceInfo($1025);
    private static _DEVICE_ENDIAN_LITTLE                          := new DeviceInfo($1026);
    private static _DEVICE_AVAILABLE                              := new DeviceInfo($1027);
    private static _DEVICE_COMPILER_AVAILABLE                     := new DeviceInfo($1028);
    private static _DEVICE_EXECUTION_CAPABILITIES                 := new DeviceInfo($1029);
    private static _DEVICE_QUEUE_ON_HOST_PROPERTIES               := new DeviceInfo($102A);
    private static _DEVICE_QUEUE_PROPERTIES                       := new DeviceInfo($102A);
    private static _DEVICE_NAME                                   := new DeviceInfo($102B);
    private static _DEVICE_VENDOR                                 := new DeviceInfo($102C);
    private static _DRIVER_VERSION                                := new DeviceInfo($102D);
    private static _DEVICE_PROFILE                                := new DeviceInfo($102E);
    private static _DEVICE_VERSION                                := new DeviceInfo($102F);
    private static _DEVICE_EXTENSIONS                             := new DeviceInfo($1030);
    private static _DEVICE_PLATFORM                               := new DeviceInfo($1031);
    private static _DEVICE_DOUBLE_FP_CONFIG                       := new DeviceInfo($1032);
    private static _DEVICE_HALF_FP_CONFIG                         := new DeviceInfo($1033);
    private static _DEVICE_PREFERRED_VECTOR_WIDTH_HALF            := new DeviceInfo($1034);
    private static _DEVICE_HOST_UNIFIED_MEMORY                    := new DeviceInfo($1035);
    private static _DEVICE_NATIVE_VECTOR_WIDTH_CHAR               := new DeviceInfo($1036);
    private static _DEVICE_NATIVE_VECTOR_WIDTH_SHORT              := new DeviceInfo($1037);
    private static _DEVICE_NATIVE_VECTOR_WIDTH_INT                := new DeviceInfo($1038);
    private static _DEVICE_NATIVE_VECTOR_WIDTH_LONG               := new DeviceInfo($1039);
    private static _DEVICE_NATIVE_VECTOR_WIDTH_FLOAT              := new DeviceInfo($103A);
    private static _DEVICE_NATIVE_VECTOR_WIDTH_DOUBLE             := new DeviceInfo($103B);
    private static _DEVICE_NATIVE_VECTOR_WIDTH_HALF               := new DeviceInfo($103C);
    private static _DEVICE_OPENCL_C_VERSION                       := new DeviceInfo($103D);
    private static _DEVICE_LINKER_AVAILABLE                       := new DeviceInfo($103E);
    private static _DEVICE_BUILT_IN_KERNELS                       := new DeviceInfo($103F);
    private static _DEVICE_IMAGE_MAX_BUFFER_SIZE                  := new DeviceInfo($1040);
    private static _DEVICE_IMAGE_MAX_ARRAY_SIZE                   := new DeviceInfo($1041);
    private static _DEVICE_PARENT_DEVICE                          := new DeviceInfo($1042);
    private static _DEVICE_PARTITION_MAX_SUB_DEVICES              := new DeviceInfo($1043);
    private static _DEVICE_PARTITION_PROPERTIES                   := new DeviceInfo($1044);
    private static _DEVICE_PARTITION_AFFINITY_DOMAIN              := new DeviceInfo($1045);
    private static _DEVICE_PARTITION_TYPE                         := new DeviceInfo($1046);
    private static _DEVICE_REFERENCE_COUNT                        := new DeviceInfo($1047);
    private static _DEVICE_PREFERRED_INTEROP_USER_SYNC            := new DeviceInfo($1048);
    private static _DEVICE_PRINTF_BUFFER_SIZE                     := new DeviceInfo($1049);
    private static _DEVICE_IMAGE_PITCH_ALIGNMENT                  := new DeviceInfo($104A);
    private static _DEVICE_IMAGE_BASE_ADDRESS_ALIGNMENT           := new DeviceInfo($104B);
    private static _DEVICE_MAX_READ_WRITE_IMAGE_ARGS              := new DeviceInfo($104C);
    private static _DEVICE_MAX_GLOBAL_VARIABLE_SIZE               := new DeviceInfo($104D);
    private static _DEVICE_QUEUE_ON_DEVICE_PROPERTIES             := new DeviceInfo($104E);
    private static _DEVICE_QUEUE_ON_DEVICE_PREFERRED_SIZE         := new DeviceInfo($104F);
    private static _DEVICE_QUEUE_ON_DEVICE_MAX_SIZE               := new DeviceInfo($1050);
    private static _DEVICE_MAX_ON_DEVICE_QUEUES                   := new DeviceInfo($1051);
    private static _DEVICE_MAX_ON_DEVICE_EVENTS                   := new DeviceInfo($1052);
    private static _DEVICE_SVM_CAPABILITIES                       := new DeviceInfo($1053);
    private static _DEVICE_GLOBAL_VARIABLE_PREFERRED_TOTAL_SIZE   := new DeviceInfo($1054);
    private static _DEVICE_MAX_PIPE_ARGS                          := new DeviceInfo($1055);
    private static _DEVICE_PIPE_MAX_ACTIVE_RESERVATIONS           := new DeviceInfo($1056);
    private static _DEVICE_PIPE_MAX_PACKET_SIZE                   := new DeviceInfo($1057);
    private static _DEVICE_PREFERRED_PLATFORM_ATOMIC_ALIGNMENT    := new DeviceInfo($1058);
    private static _DEVICE_PREFERRED_GLOBAL_ATOMIC_ALIGNMENT      := new DeviceInfo($1059);
    private static _DEVICE_PREFERRED_LOCAL_ATOMIC_ALIGNMENT       := new DeviceInfo($105A);
    private static _DEVICE_IL_VERSION                             := new DeviceInfo($105B);
    private static _DEVICE_IL_VERSION_KHR                         := new DeviceInfo($105B);
    private static _DEVICE_MAX_NUM_SUB_GROUPS                     := new DeviceInfo($105C);
    private static _DEVICE_SUB_GROUP_INDEPENDENT_FORWARD_PROGRESS := new DeviceInfo($105D);
    private static _CONTEXT_REFERENCE_COUNT                       := new DeviceInfo($1080);
    private static _CONTEXT_DEVICES                               := new DeviceInfo($1081);
    private static _CONTEXT_PROPERTIES                            := new DeviceInfo($1082);
    private static _CONTEXT_NUM_DEVICES                           := new DeviceInfo($1083);
    private static _CONTEXT_PLATFORM                              := new DeviceInfo($1084);
    private static _CONTEXT_INTEROP_USER_SYNC                     := new DeviceInfo($1085);
    private static _DEVICE_PARTITION_EQUALLY                      := new DeviceInfo($1086);
    private static _DEVICE_PARTITION_BY_COUNTS                    := new DeviceInfo($1087);
    private static _DEVICE_PARTITION_BY_AFFINITY_DOMAIN           := new DeviceInfo($1088);
    private static _QUEUE_CONTEXT                                 := new DeviceInfo($1090);
    private static _QUEUE_DEVICE                                  := new DeviceInfo($1091);
    private static _QUEUE_REFERENCE_COUNT                         := new DeviceInfo($1092);
    private static _QUEUE_PROPERTIES                              := new DeviceInfo($1093);
    private static _QUEUE_SIZE                                    := new DeviceInfo($1094);
    private static _QUEUE_DEVICE_DEFAULT                          := new DeviceInfo($1095);
    private static _QUEUE_PRIORITY_KHR                            := new DeviceInfo($1096);
    private static _QUEUE_THROTTLE_KHR                            := new DeviceInfo($1097);
    private static _R                                             := new DeviceInfo($10B0);
    private static _A                                             := new DeviceInfo($10B1);
    private static _RG                                            := new DeviceInfo($10B2);
    private static _RA                                            := new DeviceInfo($10B3);
    private static _RGB                                           := new DeviceInfo($10B4);
    private static _RGBA                                          := new DeviceInfo($10B5);
    private static _BGRA                                          := new DeviceInfo($10B6);
    private static _ARGB                                          := new DeviceInfo($10B7);
    private static _INTENSITY                                     := new DeviceInfo($10B8);
    private static _LUMINANCE                                     := new DeviceInfo($10B9);
    private static _Rx                                            := new DeviceInfo($10BA);
    private static _RGx                                           := new DeviceInfo($10BB);
    private static _RGBx                                          := new DeviceInfo($10BC);
    private static _DEPTH                                         := new DeviceInfo($10BD);
    private static _DEPTH_STENCIL                                 := new DeviceInfo($10BE);
    private static _sRGB                                          := new DeviceInfo($10BF);
    private static _sRGBx                                         := new DeviceInfo($10C0);
    private static _sRGBA                                         := new DeviceInfo($10C1);
    private static _sBGRA                                         := new DeviceInfo($10C2);
    private static _ABGR                                          := new DeviceInfo($10C3);
    private static _SNORM_INT8                                    := new DeviceInfo($10D0);
    private static _SNORM_INT16                                   := new DeviceInfo($10D1);
    private static _UNORM_INT8                                    := new DeviceInfo($10D2);
    private static _UNORM_INT16                                   := new DeviceInfo($10D3);
    private static _UNORM_SHORT_565                               := new DeviceInfo($10D4);
    private static _UNORM_SHORT_555                               := new DeviceInfo($10D5);
    private static _UNORM_INT_101010                              := new DeviceInfo($10D6);
    private static _SIGNED_INT8                                   := new DeviceInfo($10D7);
    private static _SIGNED_INT16                                  := new DeviceInfo($10D8);
    private static _SIGNED_INT32                                  := new DeviceInfo($10D9);
    private static _UNSIGNED_INT8                                 := new DeviceInfo($10DA);
    private static _UNSIGNED_INT16                                := new DeviceInfo($10DB);
    private static _UNSIGNED_INT32                                := new DeviceInfo($10DC);
    private static _HALF_FLOAT                                    := new DeviceInfo($10DD);
    private static _FLOAT                                         := new DeviceInfo($10DE);
    private static _UNORM_INT24                                   := new DeviceInfo($10DF);
    private static _UNORM_INT_101010_2                            := new DeviceInfo($10E0);
    private static _MEM_OBJECT_BUFFER                             := new DeviceInfo($10F0);
    private static _MEM_OBJECT_IMAGE2D                            := new DeviceInfo($10F1);
    private static _MEM_OBJECT_IMAGE3D                            := new DeviceInfo($10F2);
    private static _MEM_OBJECT_IMAGE2D_ARRAY                      := new DeviceInfo($10F3);
    private static _MEM_OBJECT_IMAGE1D                            := new DeviceInfo($10F4);
    private static _MEM_OBJECT_IMAGE1D_ARRAY                      := new DeviceInfo($10F5);
    private static _MEM_OBJECT_IMAGE1D_BUFFER                     := new DeviceInfo($10F6);
    private static _MEM_OBJECT_PIPE                               := new DeviceInfo($10F7);
    private static _MEM_TYPE                                      := new DeviceInfo($1100);
    private static _MEM_FLAGS                                     := new DeviceInfo($1101);
    private static _MEM_SIZE                                      := new DeviceInfo($1102);
    private static _MEM_HOST_PTR                                  := new DeviceInfo($1103);
    private static _MEM_MAP_COUNT                                 := new DeviceInfo($1104);
    private static _MEM_REFERENCE_COUNT                           := new DeviceInfo($1105);
    private static _MEM_CONTEXT                                   := new DeviceInfo($1106);
    private static _MEM_ASSOCIATED_MEMOBJECT                      := new DeviceInfo($1107);
    private static _MEM_OFFSET                                    := new DeviceInfo($1108);
    private static _MEM_USES_SVM_POINTER                          := new DeviceInfo($1109);
    private static _IMAGE_FORMAT                                  := new DeviceInfo($1110);
    private static _IMAGE_ELEMENT_SIZE                            := new DeviceInfo($1111);
    private static _IMAGE_ROW_PITCH                               := new DeviceInfo($1112);
    private static _IMAGE_SLICE_PITCH                             := new DeviceInfo($1113);
    private static _IMAGE_WIDTH                                   := new DeviceInfo($1114);
    private static _IMAGE_HEIGHT                                  := new DeviceInfo($1115);
    private static _IMAGE_DEPTH                                   := new DeviceInfo($1116);
    private static _IMAGE_ARRAY_SIZE                              := new DeviceInfo($1117);
    private static _IMAGE_BUFFER                                  := new DeviceInfo($1118);
    private static _IMAGE_NUM_MIP_LEVELS                          := new DeviceInfo($1119);
    private static _IMAGE_NUM_SAMPLES                             := new DeviceInfo($111A);
    private static _PIPE_PACKET_SIZE                              := new DeviceInfo($1120);
    private static _PIPE_MAX_PACKETS                              := new DeviceInfo($1121);
    private static _ADDRESS_NONE                                  := new DeviceInfo($1130);
    private static _ADDRESS_CLAMP_TO_EDGE                         := new DeviceInfo($1131);
    private static _ADDRESS_CLAMP                                 := new DeviceInfo($1132);
    private static _ADDRESS_REPEAT                                := new DeviceInfo($1133);
    private static _ADDRESS_MIRRORED_REPEAT                       := new DeviceInfo($1134);
    private static _FILTER_NEAREST                                := new DeviceInfo($1140);
    private static _FILTER_LINEAR                                 := new DeviceInfo($1141);
    private static _SAMPLER_REFERENCE_COUNT                       := new DeviceInfo($1150);
    private static _SAMPLER_CONTEXT                               := new DeviceInfo($1151);
    private static _SAMPLER_NORMALIZED_COORDS                     := new DeviceInfo($1152);
    private static _SAMPLER_ADDRESSING_MODE                       := new DeviceInfo($1153);
    private static _SAMPLER_FILTER_MODE                           := new DeviceInfo($1154);
    private static _SAMPLER_MIP_FILTER_MODE                       := new DeviceInfo($1155);
    private static _SAMPLER_LOD_MIN                               := new DeviceInfo($1156);
    private static _SAMPLER_LOD_MAX                               := new DeviceInfo($1157);
    private static _PROGRAM_REFERENCE_COUNT                       := new DeviceInfo($1160);
    private static _PROGRAM_CONTEXT                               := new DeviceInfo($1161);
    private static _PROGRAM_NUM_DEVICES                           := new DeviceInfo($1162);
    private static _PROGRAM_DEVICES                               := new DeviceInfo($1163);
    private static _PROGRAM_SOURCE                                := new DeviceInfo($1164);
    private static _PROGRAM_BINARY_SIZES                          := new DeviceInfo($1165);
    private static _PROGRAM_BINARIES                              := new DeviceInfo($1166);
    private static _PROGRAM_NUM_KERNELS                           := new DeviceInfo($1167);
    private static _PROGRAM_KERNEL_NAMES                          := new DeviceInfo($1168);
    private static _PROGRAM_IL                                    := new DeviceInfo($1169);
    private static _PROGRAM_IL_KHR                                := new DeviceInfo($1169);
    private static _PROGRAM_SCOPE_GLOBAL_CTORS_PRESENT            := new DeviceInfo($116A);
    private static _PROGRAM_SCOPE_GLOBAL_DTORS_PRESENT            := new DeviceInfo($116B);
    private static _PROGRAM_BUILD_STATUS                          := new DeviceInfo($1181);
    private static _PROGRAM_BUILD_OPTIONS                         := new DeviceInfo($1182);
    private static _PROGRAM_BUILD_LOG                             := new DeviceInfo($1183);
    private static _PROGRAM_BINARY_TYPE                           := new DeviceInfo($1184);
    private static _PROGRAM_BUILD_GLOBAL_VARIABLE_TOTAL_SIZE      := new DeviceInfo($1185);
    private static _KERNEL_FUNCTION_NAME                          := new DeviceInfo($1190);
    private static _KERNEL_NUM_ARGS                               := new DeviceInfo($1191);
    private static _KERNEL_REFERENCE_COUNT                        := new DeviceInfo($1192);
    private static _KERNEL_CONTEXT                                := new DeviceInfo($1193);
    private static _KERNEL_PROGRAM                                := new DeviceInfo($1194);
    private static _KERNEL_ATTRIBUTES                             := new DeviceInfo($1195);
    private static _KERNEL_ARG_ADDRESS_QUALIFIER                  := new DeviceInfo($1196);
    private static _KERNEL_ARG_ACCESS_QUALIFIER                   := new DeviceInfo($1197);
    private static _KERNEL_ARG_TYPE_NAME                          := new DeviceInfo($1198);
    private static _KERNEL_ARG_TYPE_QUALIFIER                     := new DeviceInfo($1199);
    private static _KERNEL_ARG_NAME                               := new DeviceInfo($119A);
    private static _KERNEL_ARG_ADDRESS_GLOBAL                     := new DeviceInfo($119B);
    private static _KERNEL_ARG_ADDRESS_LOCAL                      := new DeviceInfo($119C);
    private static _KERNEL_ARG_ADDRESS_CONSTANT                   := new DeviceInfo($119D);
    private static _KERNEL_ARG_ADDRESS_PRIVATE                    := new DeviceInfo($119E);
    private static _KERNEL_ARG_ACCESS_READ_ONLY                   := new DeviceInfo($11A0);
    private static _KERNEL_ARG_ACCESS_WRITE_ONLY                  := new DeviceInfo($11A1);
    private static _KERNEL_ARG_ACCESS_READ_WRITE                  := new DeviceInfo($11A2);
    private static _KERNEL_ARG_ACCESS_NONE                        := new DeviceInfo($11A3);
    private static _KERNEL_WORK_GROUP_SIZE                        := new DeviceInfo($11B0);
    private static _KERNEL_COMPILE_WORK_GROUP_SIZE                := new DeviceInfo($11B1);
    private static _KERNEL_LOCAL_MEM_SIZE                         := new DeviceInfo($11B2);
    private static _KERNEL_PREFERRED_WORK_GROUP_SIZE_MULTIPLE     := new DeviceInfo($11B3);
    private static _KERNEL_PRIVATE_MEM_SIZE                       := new DeviceInfo($11B4);
    private static _KERNEL_GLOBAL_WORK_SIZE                       := new DeviceInfo($11B5);
    private static _KERNEL_EXEC_INFO_SVM_PTRS                     := new DeviceInfo($11B6);
    private static _KERNEL_EXEC_INFO_SVM_FINE_GRAIN_SYSTEM        := new DeviceInfo($11B7);
    private static _KERNEL_LOCAL_SIZE_FOR_SUB_GROUP_COUNT         := new DeviceInfo($11B8);
    private static _KERNEL_MAX_NUM_SUB_GROUPS                     := new DeviceInfo($11B9);
    private static _KERNEL_COMPILE_NUM_SUB_GROUPS                 := new DeviceInfo($11BA);
    private static _EVENT_COMMAND_QUEUE                           := new DeviceInfo($11D0);
    private static _EVENT_COMMAND_TYPE                            := new DeviceInfo($11D1);
    private static _EVENT_REFERENCE_COUNT                         := new DeviceInfo($11D2);
    private static _EVENT_COMMAND_EXECUTION_STATUS                := new DeviceInfo($11D3);
    private static _EVENT_CONTEXT                                 := new DeviceInfo($11D4);
    private static _COMMAND_NDRANGE_KERNEL                        := new DeviceInfo($11F0);
    private static _COMMAND_TASK                                  := new DeviceInfo($11F1);
    private static _COMMAND_NATIVE_KERNEL                         := new DeviceInfo($11F2);
    private static _COMMAND_READ_BUFFER                           := new DeviceInfo($11F3);
    private static _COMMAND_WRITE_BUFFER                          := new DeviceInfo($11F4);
    private static _COMMAND_COPY_BUFFER                           := new DeviceInfo($11F5);
    private static _COMMAND_READ_IMAGE                            := new DeviceInfo($11F6);
    private static _COMMAND_WRITE_IMAGE                           := new DeviceInfo($11F7);
    private static _COMMAND_COPY_IMAGE                            := new DeviceInfo($11F8);
    private static _COMMAND_COPY_IMAGE_TO_BUFFER                  := new DeviceInfo($11F9);
    private static _COMMAND_COPY_BUFFER_TO_IMAGE                  := new DeviceInfo($11FA);
    private static _COMMAND_MAP_BUFFER                            := new DeviceInfo($11FB);
    private static _COMMAND_MAP_IMAGE                             := new DeviceInfo($11FC);
    private static _COMMAND_UNMAP_MEM_OBJECT                      := new DeviceInfo($11FD);
    private static _COMMAND_MARKER                                := new DeviceInfo($11FE);
    private static _COMMAND_ACQUIRE_GL_OBJECTS                    := new DeviceInfo($11FF);
    private static _COMMAND_RELEASE_GL_OBJECTS                    := new DeviceInfo($1200);
    private static _COMMAND_READ_BUFFER_RECT                      := new DeviceInfo($1201);
    private static _COMMAND_WRITE_BUFFER_RECT                     := new DeviceInfo($1202);
    private static _COMMAND_COPY_BUFFER_RECT                      := new DeviceInfo($1203);
    private static _COMMAND_USER                                  := new DeviceInfo($1204);
    private static _COMMAND_BARRIER                               := new DeviceInfo($1205);
    private static _COMMAND_MIGRATE_MEM_OBJECTS                   := new DeviceInfo($1206);
    private static _COMMAND_FILL_BUFFER                           := new DeviceInfo($1207);
    private static _COMMAND_FILL_IMAGE                            := new DeviceInfo($1208);
    private static _COMMAND_SVM_FREE                              := new DeviceInfo($1209);
    private static _COMMAND_SVM_MEMCPY                            := new DeviceInfo($120A);
    private static _COMMAND_SVM_MEMFILL                           := new DeviceInfo($120B);
    private static _COMMAND_SVM_MAP                               := new DeviceInfo($120C);
    private static _COMMAND_SVM_UNMAP                             := new DeviceInfo($120D);
    private static _BUFFER_CREATE_TYPE_REGION                     := new DeviceInfo($1220);
    private static _PROFILING_COMMAND_QUEUED                      := new DeviceInfo($1280);
    private static _PROFILING_COMMAND_SUBMIT                      := new DeviceInfo($1281);
    private static _PROFILING_COMMAND_START                       := new DeviceInfo($1282);
    private static _PROFILING_COMMAND_END                         := new DeviceInfo($1283);
    private static _PROFILING_COMMAND_COMPLETE                    := new DeviceInfo($1284);
    
    public static property DEVICE_TYPE:                                   DeviceInfo read _DEVICE_TYPE;
    public static property DEVICE_VENDOR_ID:                              DeviceInfo read _DEVICE_VENDOR_ID;
    public static property DEVICE_MAX_COMPUTE_UNITS:                      DeviceInfo read _DEVICE_MAX_COMPUTE_UNITS;
    public static property DEVICE_MAX_WORK_ITEM_DIMENSIONS:               DeviceInfo read _DEVICE_MAX_WORK_ITEM_DIMENSIONS;
    public static property DEVICE_MAX_WORK_GROUP_SIZE:                    DeviceInfo read _DEVICE_MAX_WORK_GROUP_SIZE;
    public static property DEVICE_MAX_WORK_ITEM_SIZES:                    DeviceInfo read _DEVICE_MAX_WORK_ITEM_SIZES;
    public static property DEVICE_PREFERRED_VECTOR_WIDTH_CHAR:            DeviceInfo read _DEVICE_PREFERRED_VECTOR_WIDTH_CHAR;
    public static property DEVICE_PREFERRED_VECTOR_WIDTH_SHORT:           DeviceInfo read _DEVICE_PREFERRED_VECTOR_WIDTH_SHORT;
    public static property DEVICE_PREFERRED_VECTOR_WIDTH_INT:             DeviceInfo read _DEVICE_PREFERRED_VECTOR_WIDTH_INT;
    public static property DEVICE_PREFERRED_VECTOR_WIDTH_LONG:            DeviceInfo read _DEVICE_PREFERRED_VECTOR_WIDTH_LONG;
    public static property DEVICE_PREFERRED_VECTOR_WIDTH_FLOAT:           DeviceInfo read _DEVICE_PREFERRED_VECTOR_WIDTH_FLOAT;
    public static property DEVICE_PREFERRED_VECTOR_WIDTH_DOUBLE:          DeviceInfo read _DEVICE_PREFERRED_VECTOR_WIDTH_DOUBLE;
    public static property DEVICE_MAX_CLOCK_FREQUENCY:                    DeviceInfo read _DEVICE_MAX_CLOCK_FREQUENCY;
    public static property DEVICE_ADDRESS_BITS:                           DeviceInfo read _DEVICE_ADDRESS_BITS;
    public static property DEVICE_MAX_READ_IMAGE_ARGS:                    DeviceInfo read _DEVICE_MAX_READ_IMAGE_ARGS;
    public static property DEVICE_MAX_WRITE_IMAGE_ARGS:                   DeviceInfo read _DEVICE_MAX_WRITE_IMAGE_ARGS;
    public static property DEVICE_MAX_MEM_ALLOC_SIZE:                     DeviceInfo read _DEVICE_MAX_MEM_ALLOC_SIZE;
    public static property DEVICE_IMAGE2D_MAX_WIDTH:                      DeviceInfo read _DEVICE_IMAGE2D_MAX_WIDTH;
    public static property DEVICE_IMAGE2D_MAX_HEIGHT:                     DeviceInfo read _DEVICE_IMAGE2D_MAX_HEIGHT;
    public static property DEVICE_IMAGE3D_MAX_WIDTH:                      DeviceInfo read _DEVICE_IMAGE3D_MAX_WIDTH;
    public static property DEVICE_IMAGE3D_MAX_HEIGHT:                     DeviceInfo read _DEVICE_IMAGE3D_MAX_HEIGHT;
    public static property DEVICE_IMAGE3D_MAX_DEPTH:                      DeviceInfo read _DEVICE_IMAGE3D_MAX_DEPTH;
    public static property DEVICE_IMAGE_SUPPORT:                          DeviceInfo read _DEVICE_IMAGE_SUPPORT;
    public static property DEVICE_MAX_PARAMETER_SIZE:                     DeviceInfo read _DEVICE_MAX_PARAMETER_SIZE;
    public static property DEVICE_MAX_SAMPLERS:                           DeviceInfo read _DEVICE_MAX_SAMPLERS;
    public static property DEVICE_MEM_BASE_ADDR_ALIGN:                    DeviceInfo read _DEVICE_MEM_BASE_ADDR_ALIGN;
    public static property DEVICE_MIN_DATA_TYPE_ALIGN_SIZE:               DeviceInfo read _DEVICE_MIN_DATA_TYPE_ALIGN_SIZE;
    public static property DEVICE_SINGLE_FP_CONFIG:                       DeviceInfo read _DEVICE_SINGLE_FP_CONFIG;
    public static property DEVICE_GLOBAL_MEM_CACHE_TYPE:                  DeviceInfo read _DEVICE_GLOBAL_MEM_CACHE_TYPE;
    public static property DEVICE_GLOBAL_MEM_CACHELINE_SIZE:              DeviceInfo read _DEVICE_GLOBAL_MEM_CACHELINE_SIZE;
    public static property DEVICE_GLOBAL_MEM_CACHE_SIZE:                  DeviceInfo read _DEVICE_GLOBAL_MEM_CACHE_SIZE;
    public static property DEVICE_GLOBAL_MEM_SIZE:                        DeviceInfo read _DEVICE_GLOBAL_MEM_SIZE;
    public static property DEVICE_MAX_CONSTANT_BUFFER_SIZE:               DeviceInfo read _DEVICE_MAX_CONSTANT_BUFFER_SIZE;
    public static property DEVICE_MAX_CONSTANT_ARGS:                      DeviceInfo read _DEVICE_MAX_CONSTANT_ARGS;
    public static property DEVICE_LOCAL_MEM_TYPE:                         DeviceInfo read _DEVICE_LOCAL_MEM_TYPE;
    public static property DEVICE_LOCAL_MEM_SIZE:                         DeviceInfo read _DEVICE_LOCAL_MEM_SIZE;
    public static property DEVICE_ERROR_CORRECTION_SUPPORT:               DeviceInfo read _DEVICE_ERROR_CORRECTION_SUPPORT;
    public static property DEVICE_PROFILING_TIMER_RESOLUTION:             DeviceInfo read _DEVICE_PROFILING_TIMER_RESOLUTION;
    public static property DEVICE_ENDIAN_LITTLE:                          DeviceInfo read _DEVICE_ENDIAN_LITTLE;
    public static property DEVICE_AVAILABLE:                              DeviceInfo read _DEVICE_AVAILABLE;
    public static property DEVICE_COMPILER_AVAILABLE:                     DeviceInfo read _DEVICE_COMPILER_AVAILABLE;
    public static property DEVICE_EXECUTION_CAPABILITIES:                 DeviceInfo read _DEVICE_EXECUTION_CAPABILITIES;
    public static property DEVICE_QUEUE_ON_HOST_PROPERTIES:               DeviceInfo read _DEVICE_QUEUE_ON_HOST_PROPERTIES;
    public static property DEVICE_QUEUE_PROPERTIES:                       DeviceInfo read _DEVICE_QUEUE_PROPERTIES;
    public static property DEVICE_NAME:                                   DeviceInfo read _DEVICE_NAME;
    public static property DEVICE_VENDOR:                                 DeviceInfo read _DEVICE_VENDOR;
    public static property DRIVER_VERSION:                                DeviceInfo read _DRIVER_VERSION;
    public static property DEVICE_PROFILE:                                DeviceInfo read _DEVICE_PROFILE;
    public static property DEVICE_VERSION:                                DeviceInfo read _DEVICE_VERSION;
    public static property DEVICE_EXTENSIONS:                             DeviceInfo read _DEVICE_EXTENSIONS;
    public static property DEVICE_PLATFORM:                               DeviceInfo read _DEVICE_PLATFORM;
    public static property DEVICE_DOUBLE_FP_CONFIG:                       DeviceInfo read _DEVICE_DOUBLE_FP_CONFIG;
    public static property DEVICE_HALF_FP_CONFIG:                         DeviceInfo read _DEVICE_HALF_FP_CONFIG;
    public static property DEVICE_PREFERRED_VECTOR_WIDTH_HALF:            DeviceInfo read _DEVICE_PREFERRED_VECTOR_WIDTH_HALF;
    public static property DEVICE_HOST_UNIFIED_MEMORY:                    DeviceInfo read _DEVICE_HOST_UNIFIED_MEMORY;
    public static property DEVICE_NATIVE_VECTOR_WIDTH_CHAR:               DeviceInfo read _DEVICE_NATIVE_VECTOR_WIDTH_CHAR;
    public static property DEVICE_NATIVE_VECTOR_WIDTH_SHORT:              DeviceInfo read _DEVICE_NATIVE_VECTOR_WIDTH_SHORT;
    public static property DEVICE_NATIVE_VECTOR_WIDTH_INT:                DeviceInfo read _DEVICE_NATIVE_VECTOR_WIDTH_INT;
    public static property DEVICE_NATIVE_VECTOR_WIDTH_LONG:               DeviceInfo read _DEVICE_NATIVE_VECTOR_WIDTH_LONG;
    public static property DEVICE_NATIVE_VECTOR_WIDTH_FLOAT:              DeviceInfo read _DEVICE_NATIVE_VECTOR_WIDTH_FLOAT;
    public static property DEVICE_NATIVE_VECTOR_WIDTH_DOUBLE:             DeviceInfo read _DEVICE_NATIVE_VECTOR_WIDTH_DOUBLE;
    public static property DEVICE_NATIVE_VECTOR_WIDTH_HALF:               DeviceInfo read _DEVICE_NATIVE_VECTOR_WIDTH_HALF;
    public static property DEVICE_OPENCL_C_VERSION:                       DeviceInfo read _DEVICE_OPENCL_C_VERSION;
    public static property DEVICE_LINKER_AVAILABLE:                       DeviceInfo read _DEVICE_LINKER_AVAILABLE;
    public static property DEVICE_BUILT_IN_KERNELS:                       DeviceInfo read _DEVICE_BUILT_IN_KERNELS;
    public static property DEVICE_IMAGE_MAX_BUFFER_SIZE:                  DeviceInfo read _DEVICE_IMAGE_MAX_BUFFER_SIZE;
    public static property DEVICE_IMAGE_MAX_ARRAY_SIZE:                   DeviceInfo read _DEVICE_IMAGE_MAX_ARRAY_SIZE;
    public static property DEVICE_PARENT_DEVICE:                          DeviceInfo read _DEVICE_PARENT_DEVICE;
    public static property DEVICE_PARTITION_MAX_SUB_DEVICES:              DeviceInfo read _DEVICE_PARTITION_MAX_SUB_DEVICES;
    public static property DEVICE_PARTITION_PROPERTIES:                   DeviceInfo read _DEVICE_PARTITION_PROPERTIES;
    public static property DEVICE_PARTITION_AFFINITY_DOMAIN:              DeviceInfo read _DEVICE_PARTITION_AFFINITY_DOMAIN;
    public static property DEVICE_PARTITION_TYPE:                         DeviceInfo read _DEVICE_PARTITION_TYPE;
    public static property DEVICE_REFERENCE_COUNT:                        DeviceInfo read _DEVICE_REFERENCE_COUNT;
    public static property DEVICE_PREFERRED_INTEROP_USER_SYNC:            DeviceInfo read _DEVICE_PREFERRED_INTEROP_USER_SYNC;
    public static property DEVICE_PRINTF_BUFFER_SIZE:                     DeviceInfo read _DEVICE_PRINTF_BUFFER_SIZE;
    public static property DEVICE_IMAGE_PITCH_ALIGNMENT:                  DeviceInfo read _DEVICE_IMAGE_PITCH_ALIGNMENT;
    public static property DEVICE_IMAGE_BASE_ADDRESS_ALIGNMENT:           DeviceInfo read _DEVICE_IMAGE_BASE_ADDRESS_ALIGNMENT;
    public static property DEVICE_MAX_READ_WRITE_IMAGE_ARGS:              DeviceInfo read _DEVICE_MAX_READ_WRITE_IMAGE_ARGS;
    public static property DEVICE_MAX_GLOBAL_VARIABLE_SIZE:               DeviceInfo read _DEVICE_MAX_GLOBAL_VARIABLE_SIZE;
    public static property DEVICE_QUEUE_ON_DEVICE_PROPERTIES:             DeviceInfo read _DEVICE_QUEUE_ON_DEVICE_PROPERTIES;
    public static property DEVICE_QUEUE_ON_DEVICE_PREFERRED_SIZE:         DeviceInfo read _DEVICE_QUEUE_ON_DEVICE_PREFERRED_SIZE;
    public static property DEVICE_QUEUE_ON_DEVICE_MAX_SIZE:               DeviceInfo read _DEVICE_QUEUE_ON_DEVICE_MAX_SIZE;
    public static property DEVICE_MAX_ON_DEVICE_QUEUES:                   DeviceInfo read _DEVICE_MAX_ON_DEVICE_QUEUES;
    public static property DEVICE_MAX_ON_DEVICE_EVENTS:                   DeviceInfo read _DEVICE_MAX_ON_DEVICE_EVENTS;
    public static property DEVICE_SVM_CAPABILITIES:                       DeviceInfo read _DEVICE_SVM_CAPABILITIES;
    public static property DEVICE_GLOBAL_VARIABLE_PREFERRED_TOTAL_SIZE:   DeviceInfo read _DEVICE_GLOBAL_VARIABLE_PREFERRED_TOTAL_SIZE;
    public static property DEVICE_MAX_PIPE_ARGS:                          DeviceInfo read _DEVICE_MAX_PIPE_ARGS;
    public static property DEVICE_PIPE_MAX_ACTIVE_RESERVATIONS:           DeviceInfo read _DEVICE_PIPE_MAX_ACTIVE_RESERVATIONS;
    public static property DEVICE_PIPE_MAX_PACKET_SIZE:                   DeviceInfo read _DEVICE_PIPE_MAX_PACKET_SIZE;
    public static property DEVICE_PREFERRED_PLATFORM_ATOMIC_ALIGNMENT:    DeviceInfo read _DEVICE_PREFERRED_PLATFORM_ATOMIC_ALIGNMENT;
    public static property DEVICE_PREFERRED_GLOBAL_ATOMIC_ALIGNMENT:      DeviceInfo read _DEVICE_PREFERRED_GLOBAL_ATOMIC_ALIGNMENT;
    public static property DEVICE_PREFERRED_LOCAL_ATOMIC_ALIGNMENT:       DeviceInfo read _DEVICE_PREFERRED_LOCAL_ATOMIC_ALIGNMENT;
    public static property DEVICE_IL_VERSION:                             DeviceInfo read _DEVICE_IL_VERSION;
    public static property DEVICE_IL_VERSION_KHR:                         DeviceInfo read _DEVICE_IL_VERSION_KHR;
    public static property DEVICE_MAX_NUM_SUB_GROUPS:                     DeviceInfo read _DEVICE_MAX_NUM_SUB_GROUPS;
    public static property DEVICE_SUB_GROUP_INDEPENDENT_FORWARD_PROGRESS: DeviceInfo read _DEVICE_SUB_GROUP_INDEPENDENT_FORWARD_PROGRESS;
    public static property CONTEXT_REFERENCE_COUNT:                       DeviceInfo read _CONTEXT_REFERENCE_COUNT;
    public static property CONTEXT_DEVICES:                               DeviceInfo read _CONTEXT_DEVICES;
    public static property CONTEXT_PROPERTIES:                            DeviceInfo read _CONTEXT_PROPERTIES;
    public static property CONTEXT_NUM_DEVICES:                           DeviceInfo read _CONTEXT_NUM_DEVICES;
    public static property CONTEXT_PLATFORM:                              DeviceInfo read _CONTEXT_PLATFORM;
    public static property CONTEXT_INTEROP_USER_SYNC:                     DeviceInfo read _CONTEXT_INTEROP_USER_SYNC;
    public static property DEVICE_PARTITION_EQUALLY:                      DeviceInfo read _DEVICE_PARTITION_EQUALLY;
    public static property DEVICE_PARTITION_BY_COUNTS:                    DeviceInfo read _DEVICE_PARTITION_BY_COUNTS;
    public static property DEVICE_PARTITION_BY_AFFINITY_DOMAIN:           DeviceInfo read _DEVICE_PARTITION_BY_AFFINITY_DOMAIN;
    public static property QUEUE_CONTEXT:                                 DeviceInfo read _QUEUE_CONTEXT;
    public static property QUEUE_DEVICE:                                  DeviceInfo read _QUEUE_DEVICE;
    public static property QUEUE_REFERENCE_COUNT:                         DeviceInfo read _QUEUE_REFERENCE_COUNT;
    public static property QUEUE_PROPERTIES:                              DeviceInfo read _QUEUE_PROPERTIES;
    public static property QUEUE_SIZE:                                    DeviceInfo read _QUEUE_SIZE;
    public static property QUEUE_DEVICE_DEFAULT:                          DeviceInfo read _QUEUE_DEVICE_DEFAULT;
    public static property QUEUE_PRIORITY_KHR:                            DeviceInfo read _QUEUE_PRIORITY_KHR;
    public static property QUEUE_THROTTLE_KHR:                            DeviceInfo read _QUEUE_THROTTLE_KHR;
    public static property R:                                             DeviceInfo read _R;
    public static property A:                                             DeviceInfo read _A;
    public static property RG:                                            DeviceInfo read _RG;
    public static property RA:                                            DeviceInfo read _RA;
    public static property RGB:                                           DeviceInfo read _RGB;
    public static property RGBA:                                          DeviceInfo read _RGBA;
    public static property BGRA:                                          DeviceInfo read _BGRA;
    public static property ARGB:                                          DeviceInfo read _ARGB;
    public static property INTENSITY:                                     DeviceInfo read _INTENSITY;
    public static property LUMINANCE:                                     DeviceInfo read _LUMINANCE;
    public static property Rx:                                            DeviceInfo read _Rx;
    public static property RGx:                                           DeviceInfo read _RGx;
    public static property RGBx:                                          DeviceInfo read _RGBx;
    public static property DEPTH:                                         DeviceInfo read _DEPTH;
    public static property DEPTH_STENCIL:                                 DeviceInfo read _DEPTH_STENCIL;
    public static property sRGB:                                          DeviceInfo read _sRGB;
    public static property sRGBx:                                         DeviceInfo read _sRGBx;
    public static property sRGBA:                                         DeviceInfo read _sRGBA;
    public static property sBGRA:                                         DeviceInfo read _sBGRA;
    public static property ABGR:                                          DeviceInfo read _ABGR;
    public static property SNORM_INT8:                                    DeviceInfo read _SNORM_INT8;
    public static property SNORM_INT16:                                   DeviceInfo read _SNORM_INT16;
    public static property UNORM_INT8:                                    DeviceInfo read _UNORM_INT8;
    public static property UNORM_INT16:                                   DeviceInfo read _UNORM_INT16;
    public static property UNORM_SHORT_565:                               DeviceInfo read _UNORM_SHORT_565;
    public static property UNORM_SHORT_555:                               DeviceInfo read _UNORM_SHORT_555;
    public static property UNORM_INT_101010:                              DeviceInfo read _UNORM_INT_101010;
    public static property SIGNED_INT8:                                   DeviceInfo read _SIGNED_INT8;
    public static property SIGNED_INT16:                                  DeviceInfo read _SIGNED_INT16;
    public static property SIGNED_INT32:                                  DeviceInfo read _SIGNED_INT32;
    public static property UNSIGNED_INT8:                                 DeviceInfo read _UNSIGNED_INT8;
    public static property UNSIGNED_INT16:                                DeviceInfo read _UNSIGNED_INT16;
    public static property UNSIGNED_INT32:                                DeviceInfo read _UNSIGNED_INT32;
    public static property HALF_FLOAT:                                    DeviceInfo read _HALF_FLOAT;
    public static property FLOAT:                                         DeviceInfo read _FLOAT;
    public static property UNORM_INT24:                                   DeviceInfo read _UNORM_INT24;
    public static property UNORM_INT_101010_2:                            DeviceInfo read _UNORM_INT_101010_2;
    public static property MEM_OBJECT_BUFFER:                             DeviceInfo read _MEM_OBJECT_BUFFER;
    public static property MEM_OBJECT_IMAGE2D:                            DeviceInfo read _MEM_OBJECT_IMAGE2D;
    public static property MEM_OBJECT_IMAGE3D:                            DeviceInfo read _MEM_OBJECT_IMAGE3D;
    public static property MEM_OBJECT_IMAGE2D_ARRAY:                      DeviceInfo read _MEM_OBJECT_IMAGE2D_ARRAY;
    public static property MEM_OBJECT_IMAGE1D:                            DeviceInfo read _MEM_OBJECT_IMAGE1D;
    public static property MEM_OBJECT_IMAGE1D_ARRAY:                      DeviceInfo read _MEM_OBJECT_IMAGE1D_ARRAY;
    public static property MEM_OBJECT_IMAGE1D_BUFFER:                     DeviceInfo read _MEM_OBJECT_IMAGE1D_BUFFER;
    public static property MEM_OBJECT_PIPE:                               DeviceInfo read _MEM_OBJECT_PIPE;
    public static property MEM_TYPE:                                      DeviceInfo read _MEM_TYPE;
    public static property MEM_FLAGS:                                     DeviceInfo read _MEM_FLAGS;
    public static property MEM_SIZE:                                      DeviceInfo read _MEM_SIZE;
    public static property MEM_HOST_PTR:                                  DeviceInfo read _MEM_HOST_PTR;
    public static property MEM_MAP_COUNT:                                 DeviceInfo read _MEM_MAP_COUNT;
    public static property MEM_REFERENCE_COUNT:                           DeviceInfo read _MEM_REFERENCE_COUNT;
    public static property MEM_CONTEXT:                                   DeviceInfo read _MEM_CONTEXT;
    public static property MEM_ASSOCIATED_MEMOBJECT:                      DeviceInfo read _MEM_ASSOCIATED_MEMOBJECT;
    public static property MEM_OFFSET:                                    DeviceInfo read _MEM_OFFSET;
    public static property MEM_USES_SVM_POINTER:                          DeviceInfo read _MEM_USES_SVM_POINTER;
    public static property IMAGE_FORMAT:                                  DeviceInfo read _IMAGE_FORMAT;
    public static property IMAGE_ELEMENT_SIZE:                            DeviceInfo read _IMAGE_ELEMENT_SIZE;
    public static property IMAGE_ROW_PITCH:                               DeviceInfo read _IMAGE_ROW_PITCH;
    public static property IMAGE_SLICE_PITCH:                             DeviceInfo read _IMAGE_SLICE_PITCH;
    public static property IMAGE_WIDTH:                                   DeviceInfo read _IMAGE_WIDTH;
    public static property IMAGE_HEIGHT:                                  DeviceInfo read _IMAGE_HEIGHT;
    public static property IMAGE_DEPTH:                                   DeviceInfo read _IMAGE_DEPTH;
    public static property IMAGE_ARRAY_SIZE:                              DeviceInfo read _IMAGE_ARRAY_SIZE;
    public static property IMAGE_BUFFER:                                  DeviceInfo read _IMAGE_BUFFER;
    public static property IMAGE_NUM_MIP_LEVELS:                          DeviceInfo read _IMAGE_NUM_MIP_LEVELS;
    public static property IMAGE_NUM_SAMPLES:                             DeviceInfo read _IMAGE_NUM_SAMPLES;
    public static property PIPE_PACKET_SIZE:                              DeviceInfo read _PIPE_PACKET_SIZE;
    public static property PIPE_MAX_PACKETS:                              DeviceInfo read _PIPE_MAX_PACKETS;
    public static property ADDRESS_NONE:                                  DeviceInfo read _ADDRESS_NONE;
    public static property ADDRESS_CLAMP_TO_EDGE:                         DeviceInfo read _ADDRESS_CLAMP_TO_EDGE;
    public static property ADDRESS_CLAMP:                                 DeviceInfo read _ADDRESS_CLAMP;
    public static property ADDRESS_REPEAT:                                DeviceInfo read _ADDRESS_REPEAT;
    public static property ADDRESS_MIRRORED_REPEAT:                       DeviceInfo read _ADDRESS_MIRRORED_REPEAT;
    public static property FILTER_NEAREST:                                DeviceInfo read _FILTER_NEAREST;
    public static property FILTER_LINEAR:                                 DeviceInfo read _FILTER_LINEAR;
    public static property SAMPLER_REFERENCE_COUNT:                       DeviceInfo read _SAMPLER_REFERENCE_COUNT;
    public static property SAMPLER_CONTEXT:                               DeviceInfo read _SAMPLER_CONTEXT;
    public static property SAMPLER_NORMALIZED_COORDS:                     DeviceInfo read _SAMPLER_NORMALIZED_COORDS;
    public static property SAMPLER_ADDRESSING_MODE:                       DeviceInfo read _SAMPLER_ADDRESSING_MODE;
    public static property SAMPLER_FILTER_MODE:                           DeviceInfo read _SAMPLER_FILTER_MODE;
    public static property SAMPLER_MIP_FILTER_MODE:                       DeviceInfo read _SAMPLER_MIP_FILTER_MODE;
    public static property SAMPLER_LOD_MIN:                               DeviceInfo read _SAMPLER_LOD_MIN;
    public static property SAMPLER_LOD_MAX:                               DeviceInfo read _SAMPLER_LOD_MAX;
    public static property PROGRAM_REFERENCE_COUNT:                       DeviceInfo read _PROGRAM_REFERENCE_COUNT;
    public static property PROGRAM_CONTEXT:                               DeviceInfo read _PROGRAM_CONTEXT;
    public static property PROGRAM_NUM_DEVICES:                           DeviceInfo read _PROGRAM_NUM_DEVICES;
    public static property PROGRAM_DEVICES:                               DeviceInfo read _PROGRAM_DEVICES;
    public static property PROGRAM_SOURCE:                                DeviceInfo read _PROGRAM_SOURCE;
    public static property PROGRAM_BINARY_SIZES:                          DeviceInfo read _PROGRAM_BINARY_SIZES;
    public static property PROGRAM_BINARIES:                              DeviceInfo read _PROGRAM_BINARIES;
    public static property PROGRAM_NUM_KERNELS:                           DeviceInfo read _PROGRAM_NUM_KERNELS;
    public static property PROGRAM_KERNEL_NAMES:                          DeviceInfo read _PROGRAM_KERNEL_NAMES;
    public static property PROGRAM_IL:                                    DeviceInfo read _PROGRAM_IL;
    public static property PROGRAM_IL_KHR:                                DeviceInfo read _PROGRAM_IL_KHR;
    public static property PROGRAM_SCOPE_GLOBAL_CTORS_PRESENT:            DeviceInfo read _PROGRAM_SCOPE_GLOBAL_CTORS_PRESENT;
    public static property PROGRAM_SCOPE_GLOBAL_DTORS_PRESENT:            DeviceInfo read _PROGRAM_SCOPE_GLOBAL_DTORS_PRESENT;
    public static property PROGRAM_BUILD_STATUS:                          DeviceInfo read _PROGRAM_BUILD_STATUS;
    public static property PROGRAM_BUILD_OPTIONS:                         DeviceInfo read _PROGRAM_BUILD_OPTIONS;
    public static property PROGRAM_BUILD_LOG:                             DeviceInfo read _PROGRAM_BUILD_LOG;
    public static property PROGRAM_BINARY_TYPE:                           DeviceInfo read _PROGRAM_BINARY_TYPE;
    public static property PROGRAM_BUILD_GLOBAL_VARIABLE_TOTAL_SIZE:      DeviceInfo read _PROGRAM_BUILD_GLOBAL_VARIABLE_TOTAL_SIZE;
    public static property KERNEL_FUNCTION_NAME:                          DeviceInfo read _KERNEL_FUNCTION_NAME;
    public static property KERNEL_NUM_ARGS:                               DeviceInfo read _KERNEL_NUM_ARGS;
    public static property KERNEL_REFERENCE_COUNT:                        DeviceInfo read _KERNEL_REFERENCE_COUNT;
    public static property KERNEL_CONTEXT:                                DeviceInfo read _KERNEL_CONTEXT;
    public static property KERNEL_PROGRAM:                                DeviceInfo read _KERNEL_PROGRAM;
    public static property KERNEL_ATTRIBUTES:                             DeviceInfo read _KERNEL_ATTRIBUTES;
    public static property KERNEL_ARG_ADDRESS_QUALIFIER:                  DeviceInfo read _KERNEL_ARG_ADDRESS_QUALIFIER;
    public static property KERNEL_ARG_ACCESS_QUALIFIER:                   DeviceInfo read _KERNEL_ARG_ACCESS_QUALIFIER;
    public static property KERNEL_ARG_TYPE_NAME:                          DeviceInfo read _KERNEL_ARG_TYPE_NAME;
    public static property KERNEL_ARG_TYPE_QUALIFIER:                     DeviceInfo read _KERNEL_ARG_TYPE_QUALIFIER;
    public static property KERNEL_ARG_NAME:                               DeviceInfo read _KERNEL_ARG_NAME;
    public static property KERNEL_ARG_ADDRESS_GLOBAL:                     DeviceInfo read _KERNEL_ARG_ADDRESS_GLOBAL;
    public static property KERNEL_ARG_ADDRESS_LOCAL:                      DeviceInfo read _KERNEL_ARG_ADDRESS_LOCAL;
    public static property KERNEL_ARG_ADDRESS_CONSTANT:                   DeviceInfo read _KERNEL_ARG_ADDRESS_CONSTANT;
    public static property KERNEL_ARG_ADDRESS_PRIVATE:                    DeviceInfo read _KERNEL_ARG_ADDRESS_PRIVATE;
    public static property KERNEL_ARG_ACCESS_READ_ONLY:                   DeviceInfo read _KERNEL_ARG_ACCESS_READ_ONLY;
    public static property KERNEL_ARG_ACCESS_WRITE_ONLY:                  DeviceInfo read _KERNEL_ARG_ACCESS_WRITE_ONLY;
    public static property KERNEL_ARG_ACCESS_READ_WRITE:                  DeviceInfo read _KERNEL_ARG_ACCESS_READ_WRITE;
    public static property KERNEL_ARG_ACCESS_NONE:                        DeviceInfo read _KERNEL_ARG_ACCESS_NONE;
    public static property KERNEL_WORK_GROUP_SIZE:                        DeviceInfo read _KERNEL_WORK_GROUP_SIZE;
    public static property KERNEL_COMPILE_WORK_GROUP_SIZE:                DeviceInfo read _KERNEL_COMPILE_WORK_GROUP_SIZE;
    public static property KERNEL_LOCAL_MEM_SIZE:                         DeviceInfo read _KERNEL_LOCAL_MEM_SIZE;
    public static property KERNEL_PREFERRED_WORK_GROUP_SIZE_MULTIPLE:     DeviceInfo read _KERNEL_PREFERRED_WORK_GROUP_SIZE_MULTIPLE;
    public static property KERNEL_PRIVATE_MEM_SIZE:                       DeviceInfo read _KERNEL_PRIVATE_MEM_SIZE;
    public static property KERNEL_GLOBAL_WORK_SIZE:                       DeviceInfo read _KERNEL_GLOBAL_WORK_SIZE;
    public static property KERNEL_EXEC_INFO_SVM_PTRS:                     DeviceInfo read _KERNEL_EXEC_INFO_SVM_PTRS;
    public static property KERNEL_EXEC_INFO_SVM_FINE_GRAIN_SYSTEM:        DeviceInfo read _KERNEL_EXEC_INFO_SVM_FINE_GRAIN_SYSTEM;
    public static property KERNEL_LOCAL_SIZE_FOR_SUB_GROUP_COUNT:         DeviceInfo read _KERNEL_LOCAL_SIZE_FOR_SUB_GROUP_COUNT;
    public static property KERNEL_MAX_NUM_SUB_GROUPS:                     DeviceInfo read _KERNEL_MAX_NUM_SUB_GROUPS;
    public static property KERNEL_COMPILE_NUM_SUB_GROUPS:                 DeviceInfo read _KERNEL_COMPILE_NUM_SUB_GROUPS;
    public static property EVENT_COMMAND_QUEUE:                           DeviceInfo read _EVENT_COMMAND_QUEUE;
    public static property EVENT_COMMAND_TYPE:                            DeviceInfo read _EVENT_COMMAND_TYPE;
    public static property EVENT_REFERENCE_COUNT:                         DeviceInfo read _EVENT_REFERENCE_COUNT;
    public static property EVENT_COMMAND_EXECUTION_STATUS:                DeviceInfo read _EVENT_COMMAND_EXECUTION_STATUS;
    public static property EVENT_CONTEXT:                                 DeviceInfo read _EVENT_CONTEXT;
    public static property COMMAND_NDRANGE_KERNEL:                        DeviceInfo read _COMMAND_NDRANGE_KERNEL;
    public static property COMMAND_TASK:                                  DeviceInfo read _COMMAND_TASK;
    public static property COMMAND_NATIVE_KERNEL:                         DeviceInfo read _COMMAND_NATIVE_KERNEL;
    public static property COMMAND_READ_BUFFER:                           DeviceInfo read _COMMAND_READ_BUFFER;
    public static property COMMAND_WRITE_BUFFER:                          DeviceInfo read _COMMAND_WRITE_BUFFER;
    public static property COMMAND_COPY_BUFFER:                           DeviceInfo read _COMMAND_COPY_BUFFER;
    public static property COMMAND_READ_IMAGE:                            DeviceInfo read _COMMAND_READ_IMAGE;
    public static property COMMAND_WRITE_IMAGE:                           DeviceInfo read _COMMAND_WRITE_IMAGE;
    public static property COMMAND_COPY_IMAGE:                            DeviceInfo read _COMMAND_COPY_IMAGE;
    public static property COMMAND_COPY_IMAGE_TO_BUFFER:                  DeviceInfo read _COMMAND_COPY_IMAGE_TO_BUFFER;
    public static property COMMAND_COPY_BUFFER_TO_IMAGE:                  DeviceInfo read _COMMAND_COPY_BUFFER_TO_IMAGE;
    public static property COMMAND_MAP_BUFFER:                            DeviceInfo read _COMMAND_MAP_BUFFER;
    public static property COMMAND_MAP_IMAGE:                             DeviceInfo read _COMMAND_MAP_IMAGE;
    public static property COMMAND_UNMAP_MEM_OBJECT:                      DeviceInfo read _COMMAND_UNMAP_MEM_OBJECT;
    public static property COMMAND_MARKER:                                DeviceInfo read _COMMAND_MARKER;
    public static property COMMAND_ACQUIRE_GL_OBJECTS:                    DeviceInfo read _COMMAND_ACQUIRE_GL_OBJECTS;
    public static property COMMAND_RELEASE_GL_OBJECTS:                    DeviceInfo read _COMMAND_RELEASE_GL_OBJECTS;
    public static property COMMAND_READ_BUFFER_RECT:                      DeviceInfo read _COMMAND_READ_BUFFER_RECT;
    public static property COMMAND_WRITE_BUFFER_RECT:                     DeviceInfo read _COMMAND_WRITE_BUFFER_RECT;
    public static property COMMAND_COPY_BUFFER_RECT:                      DeviceInfo read _COMMAND_COPY_BUFFER_RECT;
    public static property COMMAND_USER:                                  DeviceInfo read _COMMAND_USER;
    public static property COMMAND_BARRIER:                               DeviceInfo read _COMMAND_BARRIER;
    public static property COMMAND_MIGRATE_MEM_OBJECTS:                   DeviceInfo read _COMMAND_MIGRATE_MEM_OBJECTS;
    public static property COMMAND_FILL_BUFFER:                           DeviceInfo read _COMMAND_FILL_BUFFER;
    public static property COMMAND_FILL_IMAGE:                            DeviceInfo read _COMMAND_FILL_IMAGE;
    public static property COMMAND_SVM_FREE:                              DeviceInfo read _COMMAND_SVM_FREE;
    public static property COMMAND_SVM_MEMCPY:                            DeviceInfo read _COMMAND_SVM_MEMCPY;
    public static property COMMAND_SVM_MEMFILL:                           DeviceInfo read _COMMAND_SVM_MEMFILL;
    public static property COMMAND_SVM_MAP:                               DeviceInfo read _COMMAND_SVM_MAP;
    public static property COMMAND_SVM_UNMAP:                             DeviceInfo read _COMMAND_SVM_UNMAP;
    public static property BUFFER_CREATE_TYPE_REGION:                     DeviceInfo read _BUFFER_CREATE_TYPE_REGION;
    public static property PROFILING_COMMAND_QUEUED:                      DeviceInfo read _PROFILING_COMMAND_QUEUED;
    public static property PROFILING_COMMAND_SUBMIT:                      DeviceInfo read _PROFILING_COMMAND_SUBMIT;
    public static property PROFILING_COMMAND_START:                       DeviceInfo read _PROFILING_COMMAND_START;
    public static property PROFILING_COMMAND_END:                         DeviceInfo read _PROFILING_COMMAND_END;
    public static property PROFILING_COMMAND_COMPLETE:                    DeviceInfo read _PROFILING_COMMAND_COMPLETE;
    
    public function ToString: string; override;
    begin
      var res := typeof(DeviceInfo).GetProperties(System.Reflection.BindingFlags.Static or System.Reflection.BindingFlags.Public).FirstOrDefault(prop->UInt32(prop.GetValue(self))=self.val);
      Result := res=nil?
        $'DeviceInfo[{ self.val=0 ? ''NONE'' : self.val.ToString(''X'') }]':
        res.Name.TrimStart('&');
    end;
    
  end;
  
  DeviceTypeFlags = record
    public val: UInt64;
    public constructor(val: UInt64) := self.val := val;
    
    private static _DEVICE_TYPE_DEFAULT     := new DeviceTypeFlags($0001);
    private static _DEVICE_TYPE_CPU         := new DeviceTypeFlags($0002);
    private static _DEVICE_TYPE_GPU         := new DeviceTypeFlags($0004);
    private static _DEVICE_TYPE_ACCELERATOR := new DeviceTypeFlags($0008);
    private static _DEVICE_TYPE_CUSTOM      := new DeviceTypeFlags($0010);
    private static _DEVICE_TYPE_ALL         := new DeviceTypeFlags($FFFFFFFF);
    
    public static property DEVICE_TYPE_DEFAULT:     DeviceTypeFlags read _DEVICE_TYPE_DEFAULT;
    public static property DEVICE_TYPE_CPU:         DeviceTypeFlags read _DEVICE_TYPE_CPU;
    public static property DEVICE_TYPE_GPU:         DeviceTypeFlags read _DEVICE_TYPE_GPU;
    public static property DEVICE_TYPE_ACCELERATOR: DeviceTypeFlags read _DEVICE_TYPE_ACCELERATOR;
    public static property DEVICE_TYPE_CUSTOM:      DeviceTypeFlags read _DEVICE_TYPE_CUSTOM;
    public static property DEVICE_TYPE_ALL:         DeviceTypeFlags read _DEVICE_TYPE_ALL;
    
    public static function operator or(f1,f2: DeviceTypeFlags) := new DeviceTypeFlags(f1.val or f2.val);
    
    public property HAS_FLAG_DEVICE_TYPE_DEFAULT:     boolean read self.val and $0001 <> 0;
    public property HAS_FLAG_DEVICE_TYPE_CPU:         boolean read self.val and $0002 <> 0;
    public property HAS_FLAG_DEVICE_TYPE_GPU:         boolean read self.val and $0004 <> 0;
    public property HAS_FLAG_DEVICE_TYPE_ACCELERATOR: boolean read self.val and $0008 <> 0;
    public property HAS_FLAG_DEVICE_TYPE_CUSTOM:      boolean read self.val and $0010 <> 0;
    public property HAS_FLAG_DEVICE_TYPE_ALL:         boolean read self.val and $FFFFFFFF <> 0;
    
    public function ToString: string; override;
    begin
      var res := typeof(DeviceTypeFlags).GetProperties.Where(prop->prop.Name.StartsWith('HAS_FLAG_') and boolean(prop.GetValue(self))).Select(prop->prop.Name.TrimStart('&')).ToList;
      Result := res.Count=0?
        $'DeviceTypeFlags[{ self.val=0 ? ''NONE'' : self.val.ToString(''X'') }]':
        res.JoinIntoString('+');
    end;
    
  end;
  
  ErrorCode = record
    public val: Int32;
    public constructor(val: Int32) := self.val := val;
    
    private static _PIPE_EMPTY_INTEL                            := new ErrorCode($FFFFFFFFFFFFFBAD);
    private static _PIPE_FULL_INTEL                             := new ErrorCode($FFFFFFFFFFFFFBAE);
    private static _VA_API_MEDIA_SURFACE_NOT_ACQUIRED_INTEL     := new ErrorCode($FFFFFFFFFFFFFBB3);
    private static _VA_API_MEDIA_SURFACE_ALREADY_ACQUIRED_INTEL := new ErrorCode($FFFFFFFFFFFFFBB4);
    private static _INVALID_VA_API_MEDIA_SURFACE_INTEL          := new ErrorCode($FFFFFFFFFFFFFBB5);
    private static _INVALID_VA_API_MEDIA_ADAPTER_INTEL          := new ErrorCode($FFFFFFFFFFFFFBB6);
    private static _ACCELERATOR_TYPE_NOT_SUPPORTED_INTEL        := new ErrorCode($FFFFFFFFFFFFFBB7);
    private static _INVALID_ACCELERATOR_DESCRIPTOR_INTEL        := new ErrorCode($FFFFFFFFFFFFFBB8);
    private static _INVALID_ACCELERATOR_TYPE_INTEL              := new ErrorCode($FFFFFFFFFFFFFBB9);
    private static _INVALID_ACCELERATOR_INTEL                   := new ErrorCode($FFFFFFFFFFFFFBBA);
    private static _INVALID_EGL_OBJECT_KHR                      := new ErrorCode($FFFFFFFFFFFFFBBB);
    private static _EGL_RESOURCE_NOT_ACQUIRED_KHR               := new ErrorCode($FFFFFFFFFFFFFBBC);
    private static _INVALID_PARTITION_NAME_EXT                  := new ErrorCode($FFFFFFFFFFFFFBDD);
    private static _INVALID_PARTITION_COUNT_EXT                 := new ErrorCode($FFFFFFFFFFFFFBDE);
    private static _DEVICE_PARTITION_FAILED_EXT                 := new ErrorCode($FFFFFFFFFFFFFBDF);
    private static _DX9_MEDIA_SURFACE_NOT_ACQUIRED_KHR          := new ErrorCode($FFFFFFFFFFFFFC0B);
    private static _DX9_RESOURCE_NOT_ACQUIRED_INTEL             := new ErrorCode($FFFFFFFFFFFFFC0B);
    private static _DX9_MEDIA_SURFACE_ALREADY_ACQUIRED_KHR      := new ErrorCode($FFFFFFFFFFFFFC0C);
    private static _DX9_RESOURCE_ALREADY_ACQUIRED_INTEL         := new ErrorCode($FFFFFFFFFFFFFC0C);
    private static _INVALID_DX9_MEDIA_SURFACE_KHR               := new ErrorCode($FFFFFFFFFFFFFC0D);
    private static _INVALID_DX9_RESOURCE_INTEL                  := new ErrorCode($FFFFFFFFFFFFFC0D);
    private static _INVALID_DX9_DEVICE_INTEL                    := new ErrorCode($FFFFFFFFFFFFFC0E);
    private static _INVALID_DX9_MEDIA_ADAPTER_KHR               := new ErrorCode($FFFFFFFFFFFFFC0E);
    private static _D3D11_RESOURCE_NOT_ACQUIRED_KHR             := new ErrorCode($FFFFFFFFFFFFFC0F);
    private static _D3D11_RESOURCE_ALREADY_ACQUIRED_KHR         := new ErrorCode($FFFFFFFFFFFFFC10);
    private static _INVALID_D3D11_RESOURCE_KHR                  := new ErrorCode($FFFFFFFFFFFFFC11);
    private static _INVALID_D3D11_DEVICE_KHR                    := new ErrorCode($FFFFFFFFFFFFFC12);
    private static _D3D10_RESOURCE_NOT_ACQUIRED_KHR             := new ErrorCode($FFFFFFFFFFFFFC13);
    private static _D3D10_RESOURCE_ALREADY_ACQUIRED_KHR         := new ErrorCode($FFFFFFFFFFFFFC14);
    private static _INVALID_D3D10_RESOURCE_KHR                  := new ErrorCode($FFFFFFFFFFFFFC15);
    private static _INVALID_D3D10_DEVICE_KHR                    := new ErrorCode($FFFFFFFFFFFFFC16);
    private static _PLATFORM_NOT_FOUND_KHR                      := new ErrorCode($FFFFFFFFFFFFFC17);
    private static _INVALID_GL_SHAREGROUP_REFERENCE_KHR         := new ErrorCode($FFFFFFFFFFFFFC18);
    private static _MAX_SIZE_RESTRICTION_EXCEEDED               := new ErrorCode($FFFFFFFFFFFFFFB8);
    private static _INVALID_SPEC_ID                             := new ErrorCode($FFFFFFFFFFFFFFB9);
    private static _INVALID_DEVICE_QUEUE                        := new ErrorCode($FFFFFFFFFFFFFFBA);
    private static _INVALID_PIPE_SIZE                           := new ErrorCode($FFFFFFFFFFFFFFBB);
    private static _INVALID_DEVICE_PARTITION_COUNT              := new ErrorCode($FFFFFFFFFFFFFFBC);
    private static _INVALID_LINKER_OPTIONS                      := new ErrorCode($FFFFFFFFFFFFFFBD);
    private static _INVALID_COMPILER_OPTIONS                    := new ErrorCode($FFFFFFFFFFFFFFBE);
    private static _INVALID_IMAGE_DESCRIPTOR                    := new ErrorCode($FFFFFFFFFFFFFFBF);
    private static _INVALID_PROPERTY                            := new ErrorCode($FFFFFFFFFFFFFFC0);
    private static _INVALID_GLOBAL_WORK_SIZE                    := new ErrorCode($FFFFFFFFFFFFFFC1);
    private static _INVALID_MIP_LEVEL                           := new ErrorCode($FFFFFFFFFFFFFFC2);
    private static _INVALID_BUFFER_SIZE                         := new ErrorCode($FFFFFFFFFFFFFFC3);
    private static _INVALID_GL_OBJECT                           := new ErrorCode($FFFFFFFFFFFFFFC4);
    private static _INVALID_OPERATION                           := new ErrorCode($FFFFFFFFFFFFFFC5);
    private static _INVALID_EVENT                               := new ErrorCode($FFFFFFFFFFFFFFC6);
    private static _INVALID_EVENT_WAIT_LIST                     := new ErrorCode($FFFFFFFFFFFFFFC7);
    private static _INVALID_GLOBAL_OFFSET                       := new ErrorCode($FFFFFFFFFFFFFFC8);
    private static _INVALID_WORK_ITEM_SIZE                      := new ErrorCode($FFFFFFFFFFFFFFC9);
    private static _INVALID_WORK_GROUP_SIZE                     := new ErrorCode($FFFFFFFFFFFFFFCA);
    private static _INVALID_WORK_DIMENSION                      := new ErrorCode($FFFFFFFFFFFFFFCB);
    private static _INVALID_KERNEL_ARGS                         := new ErrorCode($FFFFFFFFFFFFFFCC);
    private static _INVALID_ARG_SIZE                            := new ErrorCode($FFFFFFFFFFFFFFCD);
    private static _INVALID_ARG_VALUE                           := new ErrorCode($FFFFFFFFFFFFFFCE);
    private static _INVALID_ARG_INDEX                           := new ErrorCode($FFFFFFFFFFFFFFCF);
    private static _INVALID_KERNEL                              := new ErrorCode($FFFFFFFFFFFFFFD0);
    private static _INVALID_KERNEL_DEFINITION                   := new ErrorCode($FFFFFFFFFFFFFFD1);
    private static _INVALID_KERNEL_NAME                         := new ErrorCode($FFFFFFFFFFFFFFD2);
    private static _INVALID_PROGRAM_EXECUTABLE                  := new ErrorCode($FFFFFFFFFFFFFFD3);
    private static _INVALID_PROGRAM                             := new ErrorCode($FFFFFFFFFFFFFFD4);
    private static _INVALID_BUILD_OPTIONS                       := new ErrorCode($FFFFFFFFFFFFFFD5);
    private static _INVALID_BINARY                              := new ErrorCode($FFFFFFFFFFFFFFD6);
    private static _INVALID_SAMPLER                             := new ErrorCode($FFFFFFFFFFFFFFD7);
    private static _INVALID_IMAGE_SIZE                          := new ErrorCode($FFFFFFFFFFFFFFD8);
    private static _INVALID_IMAGE_FORMAT_DESCRIPTOR             := new ErrorCode($FFFFFFFFFFFFFFD9);
    private static _INVALID_MEM_OBJECT                          := new ErrorCode($FFFFFFFFFFFFFFDA);
    private static _INVALID_HOST_PTR                            := new ErrorCode($FFFFFFFFFFFFFFDB);
    private static _INVALID_COMMAND_QUEUE                       := new ErrorCode($FFFFFFFFFFFFFFDC);
    private static _INVALID_QUEUE_PROPERTIES                    := new ErrorCode($FFFFFFFFFFFFFFDD);
    private static _INVALID_CONTEXT                             := new ErrorCode($FFFFFFFFFFFFFFDE);
    private static _INVALID_DEVICE                              := new ErrorCode($FFFFFFFFFFFFFFDF);
    private static _INVALID_PLATFORM                            := new ErrorCode($FFFFFFFFFFFFFFE0);
    private static _INVALID_DEVICE_TYPE                         := new ErrorCode($FFFFFFFFFFFFFFE1);
    private static _INVALID_VALUE                               := new ErrorCode($FFFFFFFFFFFFFFE2);
    private static _KERNEL_ARG_INFO_NOT_AVAILABLE               := new ErrorCode($FFFFFFFFFFFFFFED);
    private static _DEVICE_PARTITION_FAILED                     := new ErrorCode($FFFFFFFFFFFFFFEE);
    private static _LINK_PROGRAM_FAILURE                        := new ErrorCode($FFFFFFFFFFFFFFEF);
    private static _LINKER_NOT_AVAILABLE                        := new ErrorCode($FFFFFFFFFFFFFFF0);
    private static _COMPILE_PROGRAM_FAILURE                     := new ErrorCode($FFFFFFFFFFFFFFF1);
    private static _EXEC_STATUS_ERROR_FOR_EVENTS_IN_WAIT_LIST   := new ErrorCode($FFFFFFFFFFFFFFF2);
    private static _MISALIGNED_SUB_BUFFER_OFFSET                := new ErrorCode($FFFFFFFFFFFFFFF3);
    private static _MAP_FAILURE                                 := new ErrorCode($FFFFFFFFFFFFFFF4);
    private static _BUILD_PROGRAM_FAILURE                       := new ErrorCode($FFFFFFFFFFFFFFF5);
    private static _IMAGE_FORMAT_NOT_SUPPORTED                  := new ErrorCode($FFFFFFFFFFFFFFF6);
    private static _IMAGE_FORMAT_MISMATCH                       := new ErrorCode($FFFFFFFFFFFFFFF7);
    private static _MEM_COPY_OVERLAP                            := new ErrorCode($FFFFFFFFFFFFFFF8);
    private static _PROFILING_INFO_NOT_AVAILABLE                := new ErrorCode($FFFFFFFFFFFFFFF9);
    private static _OUT_OF_HOST_MEMORY                          := new ErrorCode($FFFFFFFFFFFFFFFA);
    private static _OUT_OF_RESOURCES                            := new ErrorCode($FFFFFFFFFFFFFFFB);
    private static _MEM_OBJECT_ALLOCATION_FAILURE               := new ErrorCode($FFFFFFFFFFFFFFFC);
    private static _COMPILER_NOT_AVAILABLE                      := new ErrorCode($FFFFFFFFFFFFFFFD);
    private static _DEVICE_NOT_AVAILABLE                        := new ErrorCode($FFFFFFFFFFFFFFFE);
    private static _DEVICE_NOT_FOUND                            := new ErrorCode($FFFFFFFFFFFFFFFF);
    private static _SUCCESS                                     := new ErrorCode($0000);
    
    public static property PIPE_EMPTY_INTEL:                            ErrorCode read _PIPE_EMPTY_INTEL;
    public static property PIPE_FULL_INTEL:                             ErrorCode read _PIPE_FULL_INTEL;
    public static property VA_API_MEDIA_SURFACE_NOT_ACQUIRED_INTEL:     ErrorCode read _VA_API_MEDIA_SURFACE_NOT_ACQUIRED_INTEL;
    public static property VA_API_MEDIA_SURFACE_ALREADY_ACQUIRED_INTEL: ErrorCode read _VA_API_MEDIA_SURFACE_ALREADY_ACQUIRED_INTEL;
    public static property INVALID_VA_API_MEDIA_SURFACE_INTEL:          ErrorCode read _INVALID_VA_API_MEDIA_SURFACE_INTEL;
    public static property INVALID_VA_API_MEDIA_ADAPTER_INTEL:          ErrorCode read _INVALID_VA_API_MEDIA_ADAPTER_INTEL;
    public static property ACCELERATOR_TYPE_NOT_SUPPORTED_INTEL:        ErrorCode read _ACCELERATOR_TYPE_NOT_SUPPORTED_INTEL;
    public static property INVALID_ACCELERATOR_DESCRIPTOR_INTEL:        ErrorCode read _INVALID_ACCELERATOR_DESCRIPTOR_INTEL;
    public static property INVALID_ACCELERATOR_TYPE_INTEL:              ErrorCode read _INVALID_ACCELERATOR_TYPE_INTEL;
    public static property INVALID_ACCELERATOR_INTEL:                   ErrorCode read _INVALID_ACCELERATOR_INTEL;
    public static property INVALID_EGL_OBJECT_KHR:                      ErrorCode read _INVALID_EGL_OBJECT_KHR;
    public static property EGL_RESOURCE_NOT_ACQUIRED_KHR:               ErrorCode read _EGL_RESOURCE_NOT_ACQUIRED_KHR;
    public static property INVALID_PARTITION_NAME_EXT:                  ErrorCode read _INVALID_PARTITION_NAME_EXT;
    public static property INVALID_PARTITION_COUNT_EXT:                 ErrorCode read _INVALID_PARTITION_COUNT_EXT;
    public static property DEVICE_PARTITION_FAILED_EXT:                 ErrorCode read _DEVICE_PARTITION_FAILED_EXT;
    public static property DX9_MEDIA_SURFACE_NOT_ACQUIRED_KHR:          ErrorCode read _DX9_MEDIA_SURFACE_NOT_ACQUIRED_KHR;
    public static property DX9_RESOURCE_NOT_ACQUIRED_INTEL:             ErrorCode read _DX9_RESOURCE_NOT_ACQUIRED_INTEL;
    public static property DX9_MEDIA_SURFACE_ALREADY_ACQUIRED_KHR:      ErrorCode read _DX9_MEDIA_SURFACE_ALREADY_ACQUIRED_KHR;
    public static property DX9_RESOURCE_ALREADY_ACQUIRED_INTEL:         ErrorCode read _DX9_RESOURCE_ALREADY_ACQUIRED_INTEL;
    public static property INVALID_DX9_MEDIA_SURFACE_KHR:               ErrorCode read _INVALID_DX9_MEDIA_SURFACE_KHR;
    public static property INVALID_DX9_RESOURCE_INTEL:                  ErrorCode read _INVALID_DX9_RESOURCE_INTEL;
    public static property INVALID_DX9_DEVICE_INTEL:                    ErrorCode read _INVALID_DX9_DEVICE_INTEL;
    public static property INVALID_DX9_MEDIA_ADAPTER_KHR:               ErrorCode read _INVALID_DX9_MEDIA_ADAPTER_KHR;
    public static property D3D11_RESOURCE_NOT_ACQUIRED_KHR:             ErrorCode read _D3D11_RESOURCE_NOT_ACQUIRED_KHR;
    public static property D3D11_RESOURCE_ALREADY_ACQUIRED_KHR:         ErrorCode read _D3D11_RESOURCE_ALREADY_ACQUIRED_KHR;
    public static property INVALID_D3D11_RESOURCE_KHR:                  ErrorCode read _INVALID_D3D11_RESOURCE_KHR;
    public static property INVALID_D3D11_DEVICE_KHR:                    ErrorCode read _INVALID_D3D11_DEVICE_KHR;
    public static property D3D10_RESOURCE_NOT_ACQUIRED_KHR:             ErrorCode read _D3D10_RESOURCE_NOT_ACQUIRED_KHR;
    public static property D3D10_RESOURCE_ALREADY_ACQUIRED_KHR:         ErrorCode read _D3D10_RESOURCE_ALREADY_ACQUIRED_KHR;
    public static property INVALID_D3D10_RESOURCE_KHR:                  ErrorCode read _INVALID_D3D10_RESOURCE_KHR;
    public static property INVALID_D3D10_DEVICE_KHR:                    ErrorCode read _INVALID_D3D10_DEVICE_KHR;
    public static property PLATFORM_NOT_FOUND_KHR:                      ErrorCode read _PLATFORM_NOT_FOUND_KHR;
    public static property INVALID_GL_SHAREGROUP_REFERENCE_KHR:         ErrorCode read _INVALID_GL_SHAREGROUP_REFERENCE_KHR;
    public static property MAX_SIZE_RESTRICTION_EXCEEDED:               ErrorCode read _MAX_SIZE_RESTRICTION_EXCEEDED;
    public static property INVALID_SPEC_ID:                             ErrorCode read _INVALID_SPEC_ID;
    public static property INVALID_DEVICE_QUEUE:                        ErrorCode read _INVALID_DEVICE_QUEUE;
    public static property INVALID_PIPE_SIZE:                           ErrorCode read _INVALID_PIPE_SIZE;
    public static property INVALID_DEVICE_PARTITION_COUNT:              ErrorCode read _INVALID_DEVICE_PARTITION_COUNT;
    public static property INVALID_LINKER_OPTIONS:                      ErrorCode read _INVALID_LINKER_OPTIONS;
    public static property INVALID_COMPILER_OPTIONS:                    ErrorCode read _INVALID_COMPILER_OPTIONS;
    public static property INVALID_IMAGE_DESCRIPTOR:                    ErrorCode read _INVALID_IMAGE_DESCRIPTOR;
    public static property INVALID_PROPERTY:                            ErrorCode read _INVALID_PROPERTY;
    public static property INVALID_GLOBAL_WORK_SIZE:                    ErrorCode read _INVALID_GLOBAL_WORK_SIZE;
    public static property INVALID_MIP_LEVEL:                           ErrorCode read _INVALID_MIP_LEVEL;
    public static property INVALID_BUFFER_SIZE:                         ErrorCode read _INVALID_BUFFER_SIZE;
    public static property INVALID_GL_OBJECT:                           ErrorCode read _INVALID_GL_OBJECT;
    public static property INVALID_OPERATION:                           ErrorCode read _INVALID_OPERATION;
    public static property INVALID_EVENT:                               ErrorCode read _INVALID_EVENT;
    public static property INVALID_EVENT_WAIT_LIST:                     ErrorCode read _INVALID_EVENT_WAIT_LIST;
    public static property INVALID_GLOBAL_OFFSET:                       ErrorCode read _INVALID_GLOBAL_OFFSET;
    public static property INVALID_WORK_ITEM_SIZE:                      ErrorCode read _INVALID_WORK_ITEM_SIZE;
    public static property INVALID_WORK_GROUP_SIZE:                     ErrorCode read _INVALID_WORK_GROUP_SIZE;
    public static property INVALID_WORK_DIMENSION:                      ErrorCode read _INVALID_WORK_DIMENSION;
    public static property INVALID_KERNEL_ARGS:                         ErrorCode read _INVALID_KERNEL_ARGS;
    public static property INVALID_ARG_SIZE:                            ErrorCode read _INVALID_ARG_SIZE;
    public static property INVALID_ARG_VALUE:                           ErrorCode read _INVALID_ARG_VALUE;
    public static property INVALID_ARG_INDEX:                           ErrorCode read _INVALID_ARG_INDEX;
    public static property INVALID_KERNEL:                              ErrorCode read _INVALID_KERNEL;
    public static property INVALID_KERNEL_DEFINITION:                   ErrorCode read _INVALID_KERNEL_DEFINITION;
    public static property INVALID_KERNEL_NAME:                         ErrorCode read _INVALID_KERNEL_NAME;
    public static property INVALID_PROGRAM_EXECUTABLE:                  ErrorCode read _INVALID_PROGRAM_EXECUTABLE;
    public static property INVALID_PROGRAM:                             ErrorCode read _INVALID_PROGRAM;
    public static property INVALID_BUILD_OPTIONS:                       ErrorCode read _INVALID_BUILD_OPTIONS;
    public static property INVALID_BINARY:                              ErrorCode read _INVALID_BINARY;
    public static property INVALID_SAMPLER:                             ErrorCode read _INVALID_SAMPLER;
    public static property INVALID_IMAGE_SIZE:                          ErrorCode read _INVALID_IMAGE_SIZE;
    public static property INVALID_IMAGE_FORMAT_DESCRIPTOR:             ErrorCode read _INVALID_IMAGE_FORMAT_DESCRIPTOR;
    public static property INVALID_MEM_OBJECT:                          ErrorCode read _INVALID_MEM_OBJECT;
    public static property INVALID_HOST_PTR:                            ErrorCode read _INVALID_HOST_PTR;
    public static property INVALID_COMMAND_QUEUE:                       ErrorCode read _INVALID_COMMAND_QUEUE;
    public static property INVALID_QUEUE_PROPERTIES:                    ErrorCode read _INVALID_QUEUE_PROPERTIES;
    public static property INVALID_CONTEXT:                             ErrorCode read _INVALID_CONTEXT;
    public static property INVALID_DEVICE:                              ErrorCode read _INVALID_DEVICE;
    public static property INVALID_PLATFORM:                            ErrorCode read _INVALID_PLATFORM;
    public static property INVALID_DEVICE_TYPE:                         ErrorCode read _INVALID_DEVICE_TYPE;
    public static property INVALID_VALUE:                               ErrorCode read _INVALID_VALUE;
    public static property KERNEL_ARG_INFO_NOT_AVAILABLE:               ErrorCode read _KERNEL_ARG_INFO_NOT_AVAILABLE;
    public static property DEVICE_PARTITION_FAILED:                     ErrorCode read _DEVICE_PARTITION_FAILED;
    public static property LINK_PROGRAM_FAILURE:                        ErrorCode read _LINK_PROGRAM_FAILURE;
    public static property LINKER_NOT_AVAILABLE:                        ErrorCode read _LINKER_NOT_AVAILABLE;
    public static property COMPILE_PROGRAM_FAILURE:                     ErrorCode read _COMPILE_PROGRAM_FAILURE;
    public static property EXEC_STATUS_ERROR_FOR_EVENTS_IN_WAIT_LIST:   ErrorCode read _EXEC_STATUS_ERROR_FOR_EVENTS_IN_WAIT_LIST;
    public static property MISALIGNED_SUB_BUFFER_OFFSET:                ErrorCode read _MISALIGNED_SUB_BUFFER_OFFSET;
    public static property MAP_FAILURE:                                 ErrorCode read _MAP_FAILURE;
    public static property BUILD_PROGRAM_FAILURE:                       ErrorCode read _BUILD_PROGRAM_FAILURE;
    public static property IMAGE_FORMAT_NOT_SUPPORTED:                  ErrorCode read _IMAGE_FORMAT_NOT_SUPPORTED;
    public static property IMAGE_FORMAT_MISMATCH:                       ErrorCode read _IMAGE_FORMAT_MISMATCH;
    public static property MEM_COPY_OVERLAP:                            ErrorCode read _MEM_COPY_OVERLAP;
    public static property PROFILING_INFO_NOT_AVAILABLE:                ErrorCode read _PROFILING_INFO_NOT_AVAILABLE;
    public static property OUT_OF_HOST_MEMORY:                          ErrorCode read _OUT_OF_HOST_MEMORY;
    public static property OUT_OF_RESOURCES:                            ErrorCode read _OUT_OF_RESOURCES;
    public static property MEM_OBJECT_ALLOCATION_FAILURE:               ErrorCode read _MEM_OBJECT_ALLOCATION_FAILURE;
    public static property COMPILER_NOT_AVAILABLE:                      ErrorCode read _COMPILER_NOT_AVAILABLE;
    public static property DEVICE_NOT_AVAILABLE:                        ErrorCode read _DEVICE_NOT_AVAILABLE;
    public static property DEVICE_NOT_FOUND:                            ErrorCode read _DEVICE_NOT_FOUND;
    public static property SUCCESS:                                     ErrorCode read _SUCCESS;
    
    public function ToString: string; override;
    begin
      var res := typeof(ErrorCode).GetProperties(System.Reflection.BindingFlags.Static or System.Reflection.BindingFlags.Public).FirstOrDefault(prop->UInt32(prop.GetValue(self))=self.val);
      Result := res=nil?
        $'ErrorCode[{ self.val=0 ? ''NONE'' : self.val.ToString(''X'') }]':
        res.Name.TrimStart('&');
    end;
    
  end;
  
  MapFlags = record
    public val: UInt64;
    public constructor(val: UInt64) := self.val := val;
    
    private static _MAP_READ                    := new MapFlags($0001);
    private static _MAP_WRITE                   := new MapFlags($0002);
    private static _MAP_WRITE_INVALIDATE_REGION := new MapFlags($0004);
    
    public static property MAP_READ:                    MapFlags read _MAP_READ;
    public static property MAP_WRITE:                   MapFlags read _MAP_WRITE;
    public static property MAP_WRITE_INVALIDATE_REGION: MapFlags read _MAP_WRITE_INVALIDATE_REGION;
    
    public static function operator or(f1,f2: MapFlags) := new MapFlags(f1.val or f2.val);
    
    public property HAS_FLAG_MAP_READ:                    boolean read self.val and $0001 <> 0;
    public property HAS_FLAG_MAP_WRITE:                   boolean read self.val and $0002 <> 0;
    public property HAS_FLAG_MAP_WRITE_INVALIDATE_REGION: boolean read self.val and $0004 <> 0;
    
    public function ToString: string; override;
    begin
      var res := typeof(MapFlags).GetProperties.Where(prop->prop.Name.StartsWith('HAS_FLAG_') and boolean(prop.GetValue(self))).Select(prop->prop.Name.TrimStart('&')).ToList;
      Result := res.Count=0?
        $'MapFlags[{ self.val=0 ? ''NONE'' : self.val.ToString(''X'') }]':
        res.JoinIntoString('+');
    end;
    
  end;
  
  MemFlags = record
    public val: UInt64;
    public constructor(val: UInt64) := self.val := val;
    
    private static _MEM_READ_WRITE                      := new MemFlags($0001);
    private static _MEM_RESERVED0_ARM                   := new MemFlags($0001);
    private static _MEM_RESERVED1_ARM                   := new MemFlags($0002);
    private static _MEM_WRITE_ONLY                      := new MemFlags($0002);
    private static _MEM_READ_ONLY                       := new MemFlags($0004);
    private static _MEM_RESERVED2_ARM                   := new MemFlags($0004);
    private static _MEM_RESERVED3_ARM                   := new MemFlags($0008);
    private static _MEM_USE_HOST_PTR                    := new MemFlags($0008);
    private static _MEM_ALLOC_HOST_PTR                  := new MemFlags($0010);
    private static _MEM_RESERVED4_ARM                   := new MemFlags($0010);
    private static _MEM_COPY_HOST_PTR                   := new MemFlags($0020);
    private static _MEM_HOST_WRITE_ONLY                 := new MemFlags($0080);
    private static _MEM_HOST_READ_ONLY                  := new MemFlags($0100);
    private static _MEM_HOST_NO_ACCESS                  := new MemFlags($0200);
    private static _MEM_SVM_FINE_GRAIN_BUFFER           := new MemFlags($0400);
    private static _MEM_SVM_ATOMICS                     := new MemFlags($0800);
    private static _MEM_KERNEL_READ_AND_WRITE           := new MemFlags($1000);
    private static _MEM_NO_ACCESS_INTEL                 := new MemFlags($1000000);
    private static _MEM_ACCESS_FLAGS_UNRESTRICTED_INTEL := new MemFlags($2000000);
    private static _MEM_USE_UNCACHED_CPU_MEMORY_IMG     := new MemFlags($4000000);
    private static _MEM_USE_CACHED_CPU_MEMORY_IMG       := new MemFlags($8000000);
    private static _MEM_USE_GRALLOC_PTR_IMG             := new MemFlags($10000000);
    private static _MEM_EXT_HOST_PTR_QCOM               := new MemFlags($20000000);
    
    public static property MEM_READ_WRITE:                      MemFlags read _MEM_READ_WRITE;
    public static property MEM_RESERVED0_ARM:                   MemFlags read _MEM_RESERVED0_ARM;
    public static property MEM_RESERVED1_ARM:                   MemFlags read _MEM_RESERVED1_ARM;
    public static property MEM_WRITE_ONLY:                      MemFlags read _MEM_WRITE_ONLY;
    public static property MEM_READ_ONLY:                       MemFlags read _MEM_READ_ONLY;
    public static property MEM_RESERVED2_ARM:                   MemFlags read _MEM_RESERVED2_ARM;
    public static property MEM_RESERVED3_ARM:                   MemFlags read _MEM_RESERVED3_ARM;
    public static property MEM_USE_HOST_PTR:                    MemFlags read _MEM_USE_HOST_PTR;
    public static property MEM_ALLOC_HOST_PTR:                  MemFlags read _MEM_ALLOC_HOST_PTR;
    public static property MEM_RESERVED4_ARM:                   MemFlags read _MEM_RESERVED4_ARM;
    public static property MEM_COPY_HOST_PTR:                   MemFlags read _MEM_COPY_HOST_PTR;
    public static property MEM_HOST_WRITE_ONLY:                 MemFlags read _MEM_HOST_WRITE_ONLY;
    public static property MEM_HOST_READ_ONLY:                  MemFlags read _MEM_HOST_READ_ONLY;
    public static property MEM_HOST_NO_ACCESS:                  MemFlags read _MEM_HOST_NO_ACCESS;
    public static property MEM_SVM_FINE_GRAIN_BUFFER:           MemFlags read _MEM_SVM_FINE_GRAIN_BUFFER;
    public static property MEM_SVM_ATOMICS:                     MemFlags read _MEM_SVM_ATOMICS;
    public static property MEM_KERNEL_READ_AND_WRITE:           MemFlags read _MEM_KERNEL_READ_AND_WRITE;
    public static property MEM_NO_ACCESS_INTEL:                 MemFlags read _MEM_NO_ACCESS_INTEL;
    public static property MEM_ACCESS_FLAGS_UNRESTRICTED_INTEL: MemFlags read _MEM_ACCESS_FLAGS_UNRESTRICTED_INTEL;
    public static property MEM_USE_UNCACHED_CPU_MEMORY_IMG:     MemFlags read _MEM_USE_UNCACHED_CPU_MEMORY_IMG;
    public static property MEM_USE_CACHED_CPU_MEMORY_IMG:       MemFlags read _MEM_USE_CACHED_CPU_MEMORY_IMG;
    public static property MEM_USE_GRALLOC_PTR_IMG:             MemFlags read _MEM_USE_GRALLOC_PTR_IMG;
    public static property MEM_EXT_HOST_PTR_QCOM:               MemFlags read _MEM_EXT_HOST_PTR_QCOM;
    
    public static function operator or(f1,f2: MemFlags) := new MemFlags(f1.val or f2.val);
    
    public property HAS_FLAG_MEM_READ_WRITE:                      boolean read self.val and $0001 <> 0;
    public property HAS_FLAG_MEM_RESERVED0_ARM:                   boolean read self.val and $0001 <> 0;
    public property HAS_FLAG_MEM_RESERVED1_ARM:                   boolean read self.val and $0002 <> 0;
    public property HAS_FLAG_MEM_WRITE_ONLY:                      boolean read self.val and $0002 <> 0;
    public property HAS_FLAG_MEM_READ_ONLY:                       boolean read self.val and $0004 <> 0;
    public property HAS_FLAG_MEM_RESERVED2_ARM:                   boolean read self.val and $0004 <> 0;
    public property HAS_FLAG_MEM_RESERVED3_ARM:                   boolean read self.val and $0008 <> 0;
    public property HAS_FLAG_MEM_USE_HOST_PTR:                    boolean read self.val and $0008 <> 0;
    public property HAS_FLAG_MEM_ALLOC_HOST_PTR:                  boolean read self.val and $0010 <> 0;
    public property HAS_FLAG_MEM_RESERVED4_ARM:                   boolean read self.val and $0010 <> 0;
    public property HAS_FLAG_MEM_COPY_HOST_PTR:                   boolean read self.val and $0020 <> 0;
    public property HAS_FLAG_MEM_HOST_WRITE_ONLY:                 boolean read self.val and $0080 <> 0;
    public property HAS_FLAG_MEM_HOST_READ_ONLY:                  boolean read self.val and $0100 <> 0;
    public property HAS_FLAG_MEM_HOST_NO_ACCESS:                  boolean read self.val and $0200 <> 0;
    public property HAS_FLAG_MEM_SVM_FINE_GRAIN_BUFFER:           boolean read self.val and $0400 <> 0;
    public property HAS_FLAG_MEM_SVM_ATOMICS:                     boolean read self.val and $0800 <> 0;
    public property HAS_FLAG_MEM_KERNEL_READ_AND_WRITE:           boolean read self.val and $1000 <> 0;
    public property HAS_FLAG_MEM_NO_ACCESS_INTEL:                 boolean read self.val and $1000000 <> 0;
    public property HAS_FLAG_MEM_ACCESS_FLAGS_UNRESTRICTED_INTEL: boolean read self.val and $2000000 <> 0;
    public property HAS_FLAG_MEM_USE_UNCACHED_CPU_MEMORY_IMG:     boolean read self.val and $4000000 <> 0;
    public property HAS_FLAG_MEM_USE_CACHED_CPU_MEMORY_IMG:       boolean read self.val and $8000000 <> 0;
    public property HAS_FLAG_MEM_USE_GRALLOC_PTR_IMG:             boolean read self.val and $10000000 <> 0;
    public property HAS_FLAG_MEM_EXT_HOST_PTR_QCOM:               boolean read self.val and $20000000 <> 0;
    
    public function ToString: string; override;
    begin
      var res := typeof(MemFlags).GetProperties.Where(prop->prop.Name.StartsWith('HAS_FLAG_') and boolean(prop.GetValue(self))).Select(prop->prop.Name.TrimStart('&')).ToList;
      Result := res.Count=0?
        $'MemFlags[{ self.val=0 ? ''NONE'' : self.val.ToString(''X'') }]':
        res.JoinIntoString('+');
    end;
    
  end;
  
  MemMigrationFlags = record
    public val: UInt64;
    public constructor(val: UInt64) := self.val := val;
    
    private static _MIGRATE_MEM_OBJECT_HOST              := new MemMigrationFlags($0001);
    private static _MIGRATE_MEM_OBJECT_HOST_EXT          := new MemMigrationFlags($0001);
    private static _MIGRATE_MEM_OBJECT_CONTENT_UNDEFINED := new MemMigrationFlags($0002);
    
    public static property MIGRATE_MEM_OBJECT_HOST:              MemMigrationFlags read _MIGRATE_MEM_OBJECT_HOST;
    public static property MIGRATE_MEM_OBJECT_HOST_EXT:          MemMigrationFlags read _MIGRATE_MEM_OBJECT_HOST_EXT;
    public static property MIGRATE_MEM_OBJECT_CONTENT_UNDEFINED: MemMigrationFlags read _MIGRATE_MEM_OBJECT_CONTENT_UNDEFINED;
    
    public static function operator or(f1,f2: MemMigrationFlags) := new MemMigrationFlags(f1.val or f2.val);
    
    public property HAS_FLAG_MIGRATE_MEM_OBJECT_HOST:              boolean read self.val and $0001 <> 0;
    public property HAS_FLAG_MIGRATE_MEM_OBJECT_HOST_EXT:          boolean read self.val and $0001 <> 0;
    public property HAS_FLAG_MIGRATE_MEM_OBJECT_CONTENT_UNDEFINED: boolean read self.val and $0002 <> 0;
    
    public function ToString: string; override;
    begin
      var res := typeof(MemMigrationFlags).GetProperties.Where(prop->prop.Name.StartsWith('HAS_FLAG_') and boolean(prop.GetValue(self))).Select(prop->prop.Name.TrimStart('&')).ToList;
      Result := res.Count=0?
        $'MemMigrationFlags[{ self.val=0 ? ''NONE'' : self.val.ToString(''X'') }]':
        res.JoinIntoString('+');
    end;
    
  end;
  
  MemObjectType = record
    public val: UInt32;
    public constructor(val: UInt32) := self.val := val;
    
    private static _NONE := new MemObjectType($0000);
    
    public static property NONE: MemObjectType read _NONE;
    
    public function ToString: string; override;
    begin
      var res := typeof(MemObjectType).GetProperties(System.Reflection.BindingFlags.Static or System.Reflection.BindingFlags.Public).FirstOrDefault(prop->UInt32(prop.GetValue(self))=self.val);
      Result := res=nil?
        $'MemObjectType[{ self.val=0 ? ''NONE'' : self.val.ToString(''X'') }]':
        res.Name.TrimStart('&');
    end;
    
  end;
  
  {$endregion Core}
  
  
  