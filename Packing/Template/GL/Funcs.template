  
  
  
  gl = sealed class
    public static function GetFuncAdr([MarshalAs(UnmanagedType.LPStr)] lpszProc: string): IntPtr;
    external 'opengl32.dll' name 'wglGetProcAddress';
    public static function GetFuncOrNil<T>(fadr: IntPtr) :=
    fadr=IntPtr.Zero ? default(T) :
    Marshal.GetDelegateForFunctionPointer&<T>(fadr);
    
    // added in gl4.1
    public z_ActiveShaderProgram_adr := GetFuncAdr('glActiveShaderProgram');
    public z_ActiveShaderProgram_ovr_0 := GetFuncOrNil&<procedure(pipeline: UInt32; program: UInt32)>(z_ActiveShaderProgram_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ActiveShaderProgram(pipeline: UInt32; program: UInt32);
    begin
      z_ActiveShaderProgram_ovr_0(pipeline, program);
    end;
    
    // added in gl1.3
    public z_ActiveTexture_adr := GetFuncAdr('glActiveTexture');
    public z_ActiveTexture_ovr_0 := GetFuncOrNil&<procedure(texture: TextureUnit)>(z_ActiveTexture_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ActiveTexture(texture: TextureUnit);
    begin
      z_ActiveTexture_ovr_0(texture);
    end;
    
    // added in gl2.0
    public z_AttachShader_adr := GetFuncAdr('glAttachShader');
    public z_AttachShader_ovr_0 := GetFuncOrNil&<procedure(program: UInt32; shader: UInt32)>(z_AttachShader_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure AttachShader(program: UInt32; shader: UInt32);
    begin
      z_AttachShader_ovr_0(program, shader);
    end;
    
    // added in gl3.0
    public z_BeginConditionalRender_adr := GetFuncAdr('glBeginConditionalRender');
    public z_BeginConditionalRender_ovr_0 := GetFuncOrNil&<procedure(id: UInt32; mode: ConditionalRenderMode)>(z_BeginConditionalRender_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure BeginConditionalRender(id: UInt32; mode: ConditionalRenderMode);
    begin
      z_BeginConditionalRender_ovr_0(id, mode);
    end;
    
    // added in gl1.5
    public z_BeginQuery_adr := GetFuncAdr('glBeginQuery');
    public z_BeginQuery_ovr_0 := GetFuncOrNil&<procedure(target: QueryTarget; id: UInt32)>(z_BeginQuery_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure BeginQuery(target: QueryTarget; id: UInt32);
    begin
      z_BeginQuery_ovr_0(target, id);
    end;
    
    // added in gl4.0
    public z_BeginQueryIndexed_adr := GetFuncAdr('glBeginQueryIndexed');
    public z_BeginQueryIndexed_ovr_0 := GetFuncOrNil&<procedure(target: QueryTarget; index: UInt32; id: UInt32)>(z_BeginQueryIndexed_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure BeginQueryIndexed(target: QueryTarget; index: UInt32; id: UInt32);
    begin
      z_BeginQueryIndexed_ovr_0(target, index, id);
    end;
    
    // added in gl3.0
    public z_BeginTransformFeedback_adr := GetFuncAdr('glBeginTransformFeedback');
    public z_BeginTransformFeedback_ovr_0 := GetFuncOrNil&<procedure(primitiveMode: PrimitiveType)>(z_BeginTransformFeedback_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure BeginTransformFeedback(primitiveMode: PrimitiveType);
    begin
      z_BeginTransformFeedback_ovr_0(primitiveMode);
    end;
    
    // added in gl2.0
    public z_BindAttribLocation_adr := GetFuncAdr('glBindAttribLocation');
    public z_BindAttribLocation_ovr_0 := GetFuncOrNil&<procedure(program: UInt32; index: UInt32; name: IntPtr)>(z_BindAttribLocation_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure BindAttribLocation(program: UInt32; index: UInt32; name: string);
    begin
      var par_3_str_ptr := Marshal.StringToHGlobalAnsi(name);
      z_BindAttribLocation_ovr_0(program, index, par_3_str_ptr);
      Marshal.FreeHGlobal(par_3_str_ptr);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure BindAttribLocation(program: UInt32; index: UInt32; name: IntPtr);
    begin
      z_BindAttribLocation_ovr_0(program, index, name);
    end;
    
    // added in gl1.5
    public z_BindBuffer_adr := GetFuncAdr('glBindBuffer');
    public z_BindBuffer_ovr_0 := GetFuncOrNil&<procedure(target: BufferTargetARB; buffer: UInt32)>(z_BindBuffer_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure BindBuffer(target: BufferTargetARB; buffer: UInt32);
    begin
      z_BindBuffer_ovr_0(target, buffer);
    end;
    
    // added in gl3.1
    public z_BindBufferBase_adr := GetFuncAdr('glBindBufferBase');
    public z_BindBufferBase_ovr_0 := GetFuncOrNil&<procedure(target: BufferTargetARB; index: UInt32; buffer: UInt32)>(z_BindBufferBase_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure BindBufferBase(target: BufferTargetARB; index: UInt32; buffer: UInt32);
    begin
      z_BindBufferBase_ovr_0(target, index, buffer);
    end;
    
    // added in gl3.1
    public z_BindBufferRange_adr := GetFuncAdr('glBindBufferRange');
    public z_BindBufferRange_ovr_0 := GetFuncOrNil&<procedure(target: BufferTargetARB; index: UInt32; buffer: UInt32; offset: IntPtr; size: IntPtr)>(z_BindBufferRange_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure BindBufferRange(target: BufferTargetARB; index: UInt32; buffer: UInt32; offset: IntPtr; size: IntPtr);
    begin
      z_BindBufferRange_ovr_0(target, index, buffer, offset, size);
    end;
    
    // added in gl4.4
    public z_BindBuffersBase_adr := GetFuncAdr('glBindBuffersBase');
    public z_BindBuffersBase_ovr_0 := GetFuncOrNil&<procedure(target: BufferTargetARB; first: UInt32; count: Int32; var buffers: UInt32)>(z_BindBuffersBase_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure BindBuffersBase(target: BufferTargetARB; first: UInt32; count: Int32; buffers: array of UInt32);
    begin
      z_BindBuffersBase_ovr_0(target, first, count, buffers[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure BindBuffersBase(target: BufferTargetARB; first: UInt32; count: Int32; var buffers: UInt32);
    begin
      z_BindBuffersBase_ovr_0(target, first, count, buffers);
    end;
    public z_BindBuffersBase_ovr_2 := GetFuncOrNil&<procedure(target: BufferTargetARB; first: UInt32; count: Int32; buffers: IntPtr)>(z_BindBuffersBase_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure BindBuffersBase(target: BufferTargetARB; first: UInt32; count: Int32; buffers: IntPtr);
    begin
      z_BindBuffersBase_ovr_2(target, first, count, buffers);
    end;
    
    // added in gl4.4
    public z_BindBuffersRange_adr := GetFuncAdr('glBindBuffersRange');
    public z_BindBuffersRange_ovr_0 := GetFuncOrNil&<procedure(target: BufferTargetARB; first: UInt32; count: Int32; var buffers: UInt32; var offsets: IntPtr; var sizes: IntPtr)>(z_BindBuffersRange_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure BindBuffersRange(target: BufferTargetARB; first: UInt32; count: Int32; buffers: array of UInt32; offsets: array of IntPtr; sizes: array of IntPtr);
    begin
      z_BindBuffersRange_ovr_0(target, first, count, buffers[0], offsets[0], sizes[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure BindBuffersRange(target: BufferTargetARB; first: UInt32; count: Int32; buffers: array of UInt32; offsets: array of IntPtr; var sizes: IntPtr);
    begin
      z_BindBuffersRange_ovr_0(target, first, count, buffers[0], offsets[0], sizes);
    end;
    public z_BindBuffersRange_ovr_2 := GetFuncOrNil&<procedure(target: BufferTargetARB; first: UInt32; count: Int32; var buffers: UInt32; var offsets: IntPtr; sizes: IntPtr)>(z_BindBuffersRange_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure BindBuffersRange(target: BufferTargetARB; first: UInt32; count: Int32; buffers: array of UInt32; offsets: array of IntPtr; sizes: IntPtr);
    begin
      z_BindBuffersRange_ovr_2(target, first, count, buffers[0], offsets[0], sizes);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure BindBuffersRange(target: BufferTargetARB; first: UInt32; count: Int32; buffers: array of UInt32; var offsets: IntPtr; sizes: array of IntPtr);
    begin
      z_BindBuffersRange_ovr_0(target, first, count, buffers[0], offsets, sizes[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure BindBuffersRange(target: BufferTargetARB; first: UInt32; count: Int32; buffers: array of UInt32; var offsets: IntPtr; var sizes: IntPtr);
    begin
      z_BindBuffersRange_ovr_0(target, first, count, buffers[0], offsets, sizes);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure BindBuffersRange(target: BufferTargetARB; first: UInt32; count: Int32; buffers: array of UInt32; var offsets: IntPtr; sizes: IntPtr);
    begin
      z_BindBuffersRange_ovr_2(target, first, count, buffers[0], offsets, sizes);
    end;
    public z_BindBuffersRange_ovr_6 := GetFuncOrNil&<procedure(target: BufferTargetARB; first: UInt32; count: Int32; var buffers: UInt32; offsets: IntPtr; var sizes: IntPtr)>(z_BindBuffersRange_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure BindBuffersRange(target: BufferTargetARB; first: UInt32; count: Int32; buffers: array of UInt32; offsets: IntPtr; sizes: array of IntPtr);
    begin
      z_BindBuffersRange_ovr_6(target, first, count, buffers[0], offsets, sizes[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure BindBuffersRange(target: BufferTargetARB; first: UInt32; count: Int32; buffers: array of UInt32; offsets: IntPtr; var sizes: IntPtr);
    begin
      z_BindBuffersRange_ovr_6(target, first, count, buffers[0], offsets, sizes);
    end;
    public z_BindBuffersRange_ovr_8 := GetFuncOrNil&<procedure(target: BufferTargetARB; first: UInt32; count: Int32; var buffers: UInt32; offsets: IntPtr; sizes: IntPtr)>(z_BindBuffersRange_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure BindBuffersRange(target: BufferTargetARB; first: UInt32; count: Int32; buffers: array of UInt32; offsets: IntPtr; sizes: IntPtr);
    begin
      z_BindBuffersRange_ovr_8(target, first, count, buffers[0], offsets, sizes);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure BindBuffersRange(target: BufferTargetARB; first: UInt32; count: Int32; var buffers: UInt32; offsets: array of IntPtr; sizes: array of IntPtr);
    begin
      z_BindBuffersRange_ovr_0(target, first, count, buffers, offsets[0], sizes[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure BindBuffersRange(target: BufferTargetARB; first: UInt32; count: Int32; var buffers: UInt32; offsets: array of IntPtr; var sizes: IntPtr);
    begin
      z_BindBuffersRange_ovr_0(target, first, count, buffers, offsets[0], sizes);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure BindBuffersRange(target: BufferTargetARB; first: UInt32; count: Int32; var buffers: UInt32; offsets: array of IntPtr; sizes: IntPtr);
    begin
      z_BindBuffersRange_ovr_2(target, first, count, buffers, offsets[0], sizes);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure BindBuffersRange(target: BufferTargetARB; first: UInt32; count: Int32; var buffers: UInt32; var offsets: IntPtr; sizes: array of IntPtr);
    begin
      z_BindBuffersRange_ovr_0(target, first, count, buffers, offsets, sizes[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure BindBuffersRange(target: BufferTargetARB; first: UInt32; count: Int32; var buffers: UInt32; var offsets: IntPtr; var sizes: IntPtr);
    begin
      z_BindBuffersRange_ovr_0(target, first, count, buffers, offsets, sizes);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure BindBuffersRange(target: BufferTargetARB; first: UInt32; count: Int32; var buffers: UInt32; var offsets: IntPtr; sizes: IntPtr);
    begin
      z_BindBuffersRange_ovr_2(target, first, count, buffers, offsets, sizes);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure BindBuffersRange(target: BufferTargetARB; first: UInt32; count: Int32; var buffers: UInt32; offsets: IntPtr; sizes: array of IntPtr);
    begin
      z_BindBuffersRange_ovr_6(target, first, count, buffers, offsets, sizes[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure BindBuffersRange(target: BufferTargetARB; first: UInt32; count: Int32; var buffers: UInt32; offsets: IntPtr; var sizes: IntPtr);
    begin
      z_BindBuffersRange_ovr_6(target, first, count, buffers, offsets, sizes);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure BindBuffersRange(target: BufferTargetARB; first: UInt32; count: Int32; var buffers: UInt32; offsets: IntPtr; sizes: IntPtr);
    begin
      z_BindBuffersRange_ovr_8(target, first, count, buffers, offsets, sizes);
    end;
    public z_BindBuffersRange_ovr_18 := GetFuncOrNil&<procedure(target: BufferTargetARB; first: UInt32; count: Int32; buffers: IntPtr; var offsets: IntPtr; var sizes: IntPtr)>(z_BindBuffersRange_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure BindBuffersRange(target: BufferTargetARB; first: UInt32; count: Int32; buffers: IntPtr; offsets: array of IntPtr; sizes: array of IntPtr);
    begin
      z_BindBuffersRange_ovr_18(target, first, count, buffers, offsets[0], sizes[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure BindBuffersRange(target: BufferTargetARB; first: UInt32; count: Int32; buffers: IntPtr; offsets: array of IntPtr; var sizes: IntPtr);
    begin
      z_BindBuffersRange_ovr_18(target, first, count, buffers, offsets[0], sizes);
    end;
    public z_BindBuffersRange_ovr_20 := GetFuncOrNil&<procedure(target: BufferTargetARB; first: UInt32; count: Int32; buffers: IntPtr; var offsets: IntPtr; sizes: IntPtr)>(z_BindBuffersRange_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure BindBuffersRange(target: BufferTargetARB; first: UInt32; count: Int32; buffers: IntPtr; offsets: array of IntPtr; sizes: IntPtr);
    begin
      z_BindBuffersRange_ovr_20(target, first, count, buffers, offsets[0], sizes);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure BindBuffersRange(target: BufferTargetARB; first: UInt32; count: Int32; buffers: IntPtr; var offsets: IntPtr; sizes: array of IntPtr);
    begin
      z_BindBuffersRange_ovr_18(target, first, count, buffers, offsets, sizes[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure BindBuffersRange(target: BufferTargetARB; first: UInt32; count: Int32; buffers: IntPtr; var offsets: IntPtr; var sizes: IntPtr);
    begin
      z_BindBuffersRange_ovr_18(target, first, count, buffers, offsets, sizes);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure BindBuffersRange(target: BufferTargetARB; first: UInt32; count: Int32; buffers: IntPtr; var offsets: IntPtr; sizes: IntPtr);
    begin
      z_BindBuffersRange_ovr_20(target, first, count, buffers, offsets, sizes);
    end;
    public z_BindBuffersRange_ovr_24 := GetFuncOrNil&<procedure(target: BufferTargetARB; first: UInt32; count: Int32; buffers: IntPtr; offsets: IntPtr; var sizes: IntPtr)>(z_BindBuffersRange_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure BindBuffersRange(target: BufferTargetARB; first: UInt32; count: Int32; buffers: IntPtr; offsets: IntPtr; sizes: array of IntPtr);
    begin
      z_BindBuffersRange_ovr_24(target, first, count, buffers, offsets, sizes[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure BindBuffersRange(target: BufferTargetARB; first: UInt32; count: Int32; buffers: IntPtr; offsets: IntPtr; var sizes: IntPtr);
    begin
      z_BindBuffersRange_ovr_24(target, first, count, buffers, offsets, sizes);
    end;
    public z_BindBuffersRange_ovr_26 := GetFuncOrNil&<procedure(target: BufferTargetARB; first: UInt32; count: Int32; buffers: IntPtr; offsets: IntPtr; sizes: IntPtr)>(z_BindBuffersRange_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure BindBuffersRange(target: BufferTargetARB; first: UInt32; count: Int32; buffers: IntPtr; offsets: IntPtr; sizes: IntPtr);
    begin
      z_BindBuffersRange_ovr_26(target, first, count, buffers, offsets, sizes);
    end;
    
    // added in gl3.0
    public z_BindFragDataLocation_adr := GetFuncAdr('glBindFragDataLocation');
    public z_BindFragDataLocation_ovr_0 := GetFuncOrNil&<procedure(program: UInt32; color: UInt32; name: IntPtr)>(z_BindFragDataLocation_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure BindFragDataLocation(program: UInt32; color: UInt32; name: string);
    begin
      var par_3_str_ptr := Marshal.StringToHGlobalAnsi(name);
      z_BindFragDataLocation_ovr_0(program, color, par_3_str_ptr);
      Marshal.FreeHGlobal(par_3_str_ptr);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure BindFragDataLocation(program: UInt32; color: UInt32; name: IntPtr);
    begin
      z_BindFragDataLocation_ovr_0(program, color, name);
    end;
    
    // added in gl3.3
    public z_BindFragDataLocationIndexed_adr := GetFuncAdr('glBindFragDataLocationIndexed');
    public z_BindFragDataLocationIndexed_ovr_0 := GetFuncOrNil&<procedure(program: UInt32; colorNumber: UInt32; index: UInt32; name: IntPtr)>(z_BindFragDataLocationIndexed_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure BindFragDataLocationIndexed(program: UInt32; colorNumber: UInt32; index: UInt32; name: string);
    begin
      var par_4_str_ptr := Marshal.StringToHGlobalAnsi(name);
      z_BindFragDataLocationIndexed_ovr_0(program, colorNumber, index, par_4_str_ptr);
      Marshal.FreeHGlobal(par_4_str_ptr);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure BindFragDataLocationIndexed(program: UInt32; colorNumber: UInt32; index: UInt32; name: IntPtr);
    begin
      z_BindFragDataLocationIndexed_ovr_0(program, colorNumber, index, name);
    end;
    
    // added in gl3.0
    public z_BindFramebuffer_adr := GetFuncAdr('glBindFramebuffer');
    public z_BindFramebuffer_ovr_0 := GetFuncOrNil&<procedure(target: FramebufferTarget; framebuffer: UInt32)>(z_BindFramebuffer_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure BindFramebuffer(target: FramebufferTarget; framebuffer: UInt32);
    begin
      z_BindFramebuffer_ovr_0(target, framebuffer);
    end;
    
    // added in gl4.2
    public z_BindImageTexture_adr := GetFuncAdr('glBindImageTexture');
    public z_BindImageTexture_ovr_0 := GetFuncOrNil&<procedure(unit: UInt32; texture: UInt32; level: Int32; layered: boolean; layer: Int32; access: BufferAccessARB; format: InternalFormat)>(z_BindImageTexture_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure BindImageTexture(unit: UInt32; texture: UInt32; level: Int32; layered: boolean; layer: Int32; access: BufferAccessARB; format: InternalFormat);
    begin
      z_BindImageTexture_ovr_0(unit, texture, level, layered, layer, access, format);
    end;
    
    // added in gl4.4
    public z_BindImageTextures_adr := GetFuncAdr('glBindImageTextures');
    public z_BindImageTextures_ovr_0 := GetFuncOrNil&<procedure(first: UInt32; count: Int32; var textures: UInt32)>(z_BindImageTextures_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure BindImageTextures(first: UInt32; count: Int32; textures: array of UInt32);
    begin
      z_BindImageTextures_ovr_0(first, count, textures[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure BindImageTextures(first: UInt32; count: Int32; var textures: UInt32);
    begin
      z_BindImageTextures_ovr_0(first, count, textures);
    end;
    public z_BindImageTextures_ovr_2 := GetFuncOrNil&<procedure(first: UInt32; count: Int32; textures: IntPtr)>(z_BindImageTextures_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure BindImageTextures(first: UInt32; count: Int32; textures: IntPtr);
    begin
      z_BindImageTextures_ovr_2(first, count, textures);
    end;
    
    // added in gl4.1
    public z_BindProgramPipeline_adr := GetFuncAdr('glBindProgramPipeline');
    public z_BindProgramPipeline_ovr_0 := GetFuncOrNil&<procedure(pipeline: UInt32)>(z_BindProgramPipeline_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure BindProgramPipeline(pipeline: UInt32);
    begin
      z_BindProgramPipeline_ovr_0(pipeline);
    end;
    
    // added in gl3.0
    public z_BindRenderbuffer_adr := GetFuncAdr('glBindRenderbuffer');
    public z_BindRenderbuffer_ovr_0 := GetFuncOrNil&<procedure(target: RenderbufferTarget; renderbuffer: UInt32)>(z_BindRenderbuffer_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure BindRenderbuffer(target: RenderbufferTarget; renderbuffer: UInt32);
    begin
      z_BindRenderbuffer_ovr_0(target, renderbuffer);
    end;
    
    // added in gl3.3
    public z_BindSampler_adr := GetFuncAdr('glBindSampler');
    public z_BindSampler_ovr_0 := GetFuncOrNil&<procedure(unit: UInt32; sampler: UInt32)>(z_BindSampler_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure BindSampler(unit: UInt32; sampler: UInt32);
    begin
      z_BindSampler_ovr_0(unit, sampler);
    end;
    
    // added in gl4.4
    public z_BindSamplers_adr := GetFuncAdr('glBindSamplers');
    public z_BindSamplers_ovr_0 := GetFuncOrNil&<procedure(first: UInt32; count: Int32; var samplers: UInt32)>(z_BindSamplers_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure BindSamplers(first: UInt32; count: Int32; samplers: array of UInt32);
    begin
      z_BindSamplers_ovr_0(first, count, samplers[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure BindSamplers(first: UInt32; count: Int32; var samplers: UInt32);
    begin
      z_BindSamplers_ovr_0(first, count, samplers);
    end;
    public z_BindSamplers_ovr_2 := GetFuncOrNil&<procedure(first: UInt32; count: Int32; samplers: IntPtr)>(z_BindSamplers_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure BindSamplers(first: UInt32; count: Int32; samplers: IntPtr);
    begin
      z_BindSamplers_ovr_2(first, count, samplers);
    end;
    
    // added in gl1.1
    public static procedure z_BindTexture(target: TextureTarget; texture: UInt32);
    external 'opengl32.dll' name 'glBindTexture';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure BindTexture(target: TextureTarget; texture: UInt32) := z_BindTexture;
    
    // added in gl4.4
    public z_BindTextures_adr := GetFuncAdr('glBindTextures');
    public z_BindTextures_ovr_0 := GetFuncOrNil&<procedure(first: UInt32; count: Int32; var textures: UInt32)>(z_BindTextures_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure BindTextures(first: UInt32; count: Int32; textures: array of UInt32);
    begin
      z_BindTextures_ovr_0(first, count, textures[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure BindTextures(first: UInt32; count: Int32; var textures: UInt32);
    begin
      z_BindTextures_ovr_0(first, count, textures);
    end;
    public z_BindTextures_ovr_2 := GetFuncOrNil&<procedure(first: UInt32; count: Int32; textures: IntPtr)>(z_BindTextures_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure BindTextures(first: UInt32; count: Int32; textures: IntPtr);
    begin
      z_BindTextures_ovr_2(first, count, textures);
    end;
    
    // added in gl4.5
    public z_BindTextureUnit_adr := GetFuncAdr('glBindTextureUnit');
    public z_BindTextureUnit_ovr_0 := GetFuncOrNil&<procedure(unit: UInt32; texture: UInt32)>(z_BindTextureUnit_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure BindTextureUnit(unit: UInt32; texture: UInt32);
    begin
      z_BindTextureUnit_ovr_0(unit, texture);
    end;
    
    // added in gl4.0
    public z_BindTransformFeedback_adr := GetFuncAdr('glBindTransformFeedback');
    public z_BindTransformFeedback_ovr_0 := GetFuncOrNil&<procedure(target: BindTransformFeedbackTarget; id: UInt32)>(z_BindTransformFeedback_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure BindTransformFeedback(target: BindTransformFeedbackTarget; id: UInt32);
    begin
      z_BindTransformFeedback_ovr_0(target, id);
    end;
    
    // added in gl3.0
    public z_BindVertexArray_adr := GetFuncAdr('glBindVertexArray');
    public z_BindVertexArray_ovr_0 := GetFuncOrNil&<procedure(array: UInt32)>(z_BindVertexArray_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure BindVertexArray(array: UInt32);
    begin
      z_BindVertexArray_ovr_0(array);
    end;
    
    // added in gl4.3
    public z_BindVertexBuffer_adr := GetFuncAdr('glBindVertexBuffer');
    public z_BindVertexBuffer_ovr_0 := GetFuncOrNil&<procedure(bindingindex: UInt32; buffer: UInt32; offset: IntPtr; stride: Int32)>(z_BindVertexBuffer_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure BindVertexBuffer(bindingindex: UInt32; buffer: UInt32; offset: IntPtr; stride: Int32);
    begin
      z_BindVertexBuffer_ovr_0(bindingindex, buffer, offset, stride);
    end;
    
    // added in gl4.4
    public z_BindVertexBuffers_adr := GetFuncAdr('glBindVertexBuffers');
    public z_BindVertexBuffers_ovr_0 := GetFuncOrNil&<procedure(first: UInt32; count: Int32; var buffers: UInt32; var offsets: IntPtr; var strides: Int32)>(z_BindVertexBuffers_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure BindVertexBuffers(first: UInt32; count: Int32; buffers: array of UInt32; offsets: array of IntPtr; strides: array of Int32);
    begin
      z_BindVertexBuffers_ovr_0(first, count, buffers[0], offsets[0], strides[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure BindVertexBuffers(first: UInt32; count: Int32; buffers: array of UInt32; offsets: array of IntPtr; var strides: Int32);
    begin
      z_BindVertexBuffers_ovr_0(first, count, buffers[0], offsets[0], strides);
    end;
    public z_BindVertexBuffers_ovr_2 := GetFuncOrNil&<procedure(first: UInt32; count: Int32; var buffers: UInt32; var offsets: IntPtr; strides: IntPtr)>(z_BindVertexBuffers_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure BindVertexBuffers(first: UInt32; count: Int32; buffers: array of UInt32; offsets: array of IntPtr; strides: IntPtr);
    begin
      z_BindVertexBuffers_ovr_2(first, count, buffers[0], offsets[0], strides);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure BindVertexBuffers(first: UInt32; count: Int32; buffers: array of UInt32; var offsets: IntPtr; strides: array of Int32);
    begin
      z_BindVertexBuffers_ovr_0(first, count, buffers[0], offsets, strides[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure BindVertexBuffers(first: UInt32; count: Int32; buffers: array of UInt32; var offsets: IntPtr; var strides: Int32);
    begin
      z_BindVertexBuffers_ovr_0(first, count, buffers[0], offsets, strides);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure BindVertexBuffers(first: UInt32; count: Int32; buffers: array of UInt32; var offsets: IntPtr; strides: IntPtr);
    begin
      z_BindVertexBuffers_ovr_2(first, count, buffers[0], offsets, strides);
    end;
    public z_BindVertexBuffers_ovr_6 := GetFuncOrNil&<procedure(first: UInt32; count: Int32; var buffers: UInt32; offsets: IntPtr; var strides: Int32)>(z_BindVertexBuffers_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure BindVertexBuffers(first: UInt32; count: Int32; buffers: array of UInt32; offsets: IntPtr; strides: array of Int32);
    begin
      z_BindVertexBuffers_ovr_6(first, count, buffers[0], offsets, strides[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure BindVertexBuffers(first: UInt32; count: Int32; buffers: array of UInt32; offsets: IntPtr; var strides: Int32);
    begin
      z_BindVertexBuffers_ovr_6(first, count, buffers[0], offsets, strides);
    end;
    public z_BindVertexBuffers_ovr_8 := GetFuncOrNil&<procedure(first: UInt32; count: Int32; var buffers: UInt32; offsets: IntPtr; strides: IntPtr)>(z_BindVertexBuffers_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure BindVertexBuffers(first: UInt32; count: Int32; buffers: array of UInt32; offsets: IntPtr; strides: IntPtr);
    begin
      z_BindVertexBuffers_ovr_8(first, count, buffers[0], offsets, strides);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure BindVertexBuffers(first: UInt32; count: Int32; var buffers: UInt32; offsets: array of IntPtr; strides: array of Int32);
    begin
      z_BindVertexBuffers_ovr_0(first, count, buffers, offsets[0], strides[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure BindVertexBuffers(first: UInt32; count: Int32; var buffers: UInt32; offsets: array of IntPtr; var strides: Int32);
    begin
      z_BindVertexBuffers_ovr_0(first, count, buffers, offsets[0], strides);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure BindVertexBuffers(first: UInt32; count: Int32; var buffers: UInt32; offsets: array of IntPtr; strides: IntPtr);
    begin
      z_BindVertexBuffers_ovr_2(first, count, buffers, offsets[0], strides);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure BindVertexBuffers(first: UInt32; count: Int32; var buffers: UInt32; var offsets: IntPtr; strides: array of Int32);
    begin
      z_BindVertexBuffers_ovr_0(first, count, buffers, offsets, strides[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure BindVertexBuffers(first: UInt32; count: Int32; var buffers: UInt32; var offsets: IntPtr; var strides: Int32);
    begin
      z_BindVertexBuffers_ovr_0(first, count, buffers, offsets, strides);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure BindVertexBuffers(first: UInt32; count: Int32; var buffers: UInt32; var offsets: IntPtr; strides: IntPtr);
    begin
      z_BindVertexBuffers_ovr_2(first, count, buffers, offsets, strides);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure BindVertexBuffers(first: UInt32; count: Int32; var buffers: UInt32; offsets: IntPtr; strides: array of Int32);
    begin
      z_BindVertexBuffers_ovr_6(first, count, buffers, offsets, strides[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure BindVertexBuffers(first: UInt32; count: Int32; var buffers: UInt32; offsets: IntPtr; var strides: Int32);
    begin
      z_BindVertexBuffers_ovr_6(first, count, buffers, offsets, strides);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure BindVertexBuffers(first: UInt32; count: Int32; var buffers: UInt32; offsets: IntPtr; strides: IntPtr);
    begin
      z_BindVertexBuffers_ovr_8(first, count, buffers, offsets, strides);
    end;
    public z_BindVertexBuffers_ovr_18 := GetFuncOrNil&<procedure(first: UInt32; count: Int32; buffers: IntPtr; var offsets: IntPtr; var strides: Int32)>(z_BindVertexBuffers_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure BindVertexBuffers(first: UInt32; count: Int32; buffers: IntPtr; offsets: array of IntPtr; strides: array of Int32);
    begin
      z_BindVertexBuffers_ovr_18(first, count, buffers, offsets[0], strides[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure BindVertexBuffers(first: UInt32; count: Int32; buffers: IntPtr; offsets: array of IntPtr; var strides: Int32);
    begin
      z_BindVertexBuffers_ovr_18(first, count, buffers, offsets[0], strides);
    end;
    public z_BindVertexBuffers_ovr_20 := GetFuncOrNil&<procedure(first: UInt32; count: Int32; buffers: IntPtr; var offsets: IntPtr; strides: IntPtr)>(z_BindVertexBuffers_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure BindVertexBuffers(first: UInt32; count: Int32; buffers: IntPtr; offsets: array of IntPtr; strides: IntPtr);
    begin
      z_BindVertexBuffers_ovr_20(first, count, buffers, offsets[0], strides);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure BindVertexBuffers(first: UInt32; count: Int32; buffers: IntPtr; var offsets: IntPtr; strides: array of Int32);
    begin
      z_BindVertexBuffers_ovr_18(first, count, buffers, offsets, strides[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure BindVertexBuffers(first: UInt32; count: Int32; buffers: IntPtr; var offsets: IntPtr; var strides: Int32);
    begin
      z_BindVertexBuffers_ovr_18(first, count, buffers, offsets, strides);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure BindVertexBuffers(first: UInt32; count: Int32; buffers: IntPtr; var offsets: IntPtr; strides: IntPtr);
    begin
      z_BindVertexBuffers_ovr_20(first, count, buffers, offsets, strides);
    end;
    public z_BindVertexBuffers_ovr_24 := GetFuncOrNil&<procedure(first: UInt32; count: Int32; buffers: IntPtr; offsets: IntPtr; var strides: Int32)>(z_BindVertexBuffers_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure BindVertexBuffers(first: UInt32; count: Int32; buffers: IntPtr; offsets: IntPtr; strides: array of Int32);
    begin
      z_BindVertexBuffers_ovr_24(first, count, buffers, offsets, strides[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure BindVertexBuffers(first: UInt32; count: Int32; buffers: IntPtr; offsets: IntPtr; var strides: Int32);
    begin
      z_BindVertexBuffers_ovr_24(first, count, buffers, offsets, strides);
    end;
    public z_BindVertexBuffers_ovr_26 := GetFuncOrNil&<procedure(first: UInt32; count: Int32; buffers: IntPtr; offsets: IntPtr; strides: IntPtr)>(z_BindVertexBuffers_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure BindVertexBuffers(first: UInt32; count: Int32; buffers: IntPtr; offsets: IntPtr; strides: IntPtr);
    begin
      z_BindVertexBuffers_ovr_26(first, count, buffers, offsets, strides);
    end;
    
    // added in gl1.4
    public z_BlendColor_adr := GetFuncAdr('glBlendColor');
    public z_BlendColor_ovr_0 := GetFuncOrNil&<procedure(red: single; green: single; blue: single; alpha: single)>(z_BlendColor_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure BlendColor(red: single; green: single; blue: single; alpha: single);
    begin
      z_BlendColor_ovr_0(red, green, blue, alpha);
    end;
    
    // added in gl1.4
    public z_BlendEquation_adr := GetFuncAdr('glBlendEquation');
    public z_BlendEquation_ovr_0 := GetFuncOrNil&<procedure(mode: BlendEquationModeEXT)>(z_BlendEquation_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure BlendEquation(mode: BlendEquationModeEXT);
    begin
      z_BlendEquation_ovr_0(mode);
    end;
    
    // added in gl4.0
    public z_BlendEquationi_adr := GetFuncAdr('glBlendEquationi');
    public z_BlendEquationi_ovr_0 := GetFuncOrNil&<procedure(buf: UInt32; mode: BlendEquationModeEXT)>(z_BlendEquationi_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure BlendEquationi(buf: UInt32; mode: BlendEquationModeEXT);
    begin
      z_BlendEquationi_ovr_0(buf, mode);
    end;
    
    // added in gl2.0
    public z_BlendEquationSeparate_adr := GetFuncAdr('glBlendEquationSeparate');
    public z_BlendEquationSeparate_ovr_0 := GetFuncOrNil&<procedure(modeRGB: BlendEquationModeEXT; modeAlpha: BlendEquationModeEXT)>(z_BlendEquationSeparate_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure BlendEquationSeparate(modeRGB: BlendEquationModeEXT; modeAlpha: BlendEquationModeEXT);
    begin
      z_BlendEquationSeparate_ovr_0(modeRGB, modeAlpha);
    end;
    
    // added in gl4.0
    public z_BlendEquationSeparatei_adr := GetFuncAdr('glBlendEquationSeparatei');
    public z_BlendEquationSeparatei_ovr_0 := GetFuncOrNil&<procedure(buf: UInt32; modeRGB: BlendEquationModeEXT; modeAlpha: BlendEquationModeEXT)>(z_BlendEquationSeparatei_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure BlendEquationSeparatei(buf: UInt32; modeRGB: BlendEquationModeEXT; modeAlpha: BlendEquationModeEXT);
    begin
      z_BlendEquationSeparatei_ovr_0(buf, modeRGB, modeAlpha);
    end;
    
    // added in gl1.0
    public static procedure z_BlendFunc(sfactor: BlendingFactor; dfactor: BlendingFactor);
    external 'opengl32.dll' name 'glBlendFunc';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure BlendFunc(sfactor: BlendingFactor; dfactor: BlendingFactor) := z_BlendFunc;
    
    // added in gl4.0
    public z_BlendFunci_adr := GetFuncAdr('glBlendFunci');
    public z_BlendFunci_ovr_0 := GetFuncOrNil&<procedure(buf: UInt32; src: BlendingFactor; dst: BlendingFactor)>(z_BlendFunci_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure BlendFunci(buf: UInt32; src: BlendingFactor; dst: BlendingFactor);
    begin
      z_BlendFunci_ovr_0(buf, src, dst);
    end;
    
    // added in gl1.4
    public z_BlendFuncSeparate_adr := GetFuncAdr('glBlendFuncSeparate');
    public z_BlendFuncSeparate_ovr_0 := GetFuncOrNil&<procedure(sfactorRGB: BlendingFactor; dfactorRGB: BlendingFactor; sfactorAlpha: BlendingFactor; dfactorAlpha: BlendingFactor)>(z_BlendFuncSeparate_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure BlendFuncSeparate(sfactorRGB: BlendingFactor; dfactorRGB: BlendingFactor; sfactorAlpha: BlendingFactor; dfactorAlpha: BlendingFactor);
    begin
      z_BlendFuncSeparate_ovr_0(sfactorRGB, dfactorRGB, sfactorAlpha, dfactorAlpha);
    end;
    
    // added in gl4.0
    public z_BlendFuncSeparatei_adr := GetFuncAdr('glBlendFuncSeparatei');
    public z_BlendFuncSeparatei_ovr_0 := GetFuncOrNil&<procedure(buf: UInt32; srcRGB: BlendingFactor; dstRGB: BlendingFactor; srcAlpha: BlendingFactor; dstAlpha: BlendingFactor)>(z_BlendFuncSeparatei_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure BlendFuncSeparatei(buf: UInt32; srcRGB: BlendingFactor; dstRGB: BlendingFactor; srcAlpha: BlendingFactor; dstAlpha: BlendingFactor);
    begin
      z_BlendFuncSeparatei_ovr_0(buf, srcRGB, dstRGB, srcAlpha, dstAlpha);
    end;
    
    // added in gl3.0
    public z_BlitFramebuffer_adr := GetFuncAdr('glBlitFramebuffer');
    public z_BlitFramebuffer_ovr_0 := GetFuncOrNil&<procedure(srcX0: Int32; srcY0: Int32; srcX1: Int32; srcY1: Int32; dstX0: Int32; dstY0: Int32; dstX1: Int32; dstY1: Int32; mask: ClearBufferMask; filter: BlitFramebufferFilter)>(z_BlitFramebuffer_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure BlitFramebuffer(srcX0: Int32; srcY0: Int32; srcX1: Int32; srcY1: Int32; dstX0: Int32; dstY0: Int32; dstX1: Int32; dstY1: Int32; mask: ClearBufferMask; filter: BlitFramebufferFilter);
    begin
      z_BlitFramebuffer_ovr_0(srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, mask, filter);
    end;
    
    // added in gl4.5
    public z_BlitNamedFramebuffer_adr := GetFuncAdr('glBlitNamedFramebuffer');
    public z_BlitNamedFramebuffer_ovr_0 := GetFuncOrNil&<procedure(readFramebuffer: UInt32; drawFramebuffer: UInt32; srcX0: Int32; srcY0: Int32; srcX1: Int32; srcY1: Int32; dstX0: Int32; dstY0: Int32; dstX1: Int32; dstY1: Int32; mask: ClearBufferMask; filter: BlitFramebufferFilter)>(z_BlitNamedFramebuffer_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure BlitNamedFramebuffer(readFramebuffer: UInt32; drawFramebuffer: UInt32; srcX0: Int32; srcY0: Int32; srcX1: Int32; srcY1: Int32; dstX0: Int32; dstY0: Int32; dstX1: Int32; dstY1: Int32; mask: ClearBufferMask; filter: BlitFramebufferFilter);
    begin
      z_BlitNamedFramebuffer_ovr_0(readFramebuffer, drawFramebuffer, srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, mask, filter);
    end;
    
    // added in gl1.5
    public z_BufferData_adr := GetFuncAdr('glBufferData');
    public z_BufferData_ovr_0 := GetFuncOrNil&<procedure(target: BufferTargetARB; size: IntPtr; data: IntPtr; usage: BufferUsageARB)>(z_BufferData_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure BufferData(target: BufferTargetARB; size: IntPtr; data: IntPtr; usage: BufferUsageARB);
    begin
      z_BufferData_ovr_0(target, size, data, usage);
    end;
    
    // added in gl4.4
    public z_BufferStorage_adr := GetFuncAdr('glBufferStorage');
    public z_BufferStorage_ovr_0 := GetFuncOrNil&<procedure(target: BufferStorageTarget; size: IntPtr; data: IntPtr; flags: BufferStorageMask)>(z_BufferStorage_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure BufferStorage(target: BufferStorageTarget; size: IntPtr; data: IntPtr; flags: BufferStorageMask);
    begin
      z_BufferStorage_ovr_0(target, size, data, flags);
    end;
    
    // added in gl1.5
    public z_BufferSubData_adr := GetFuncAdr('glBufferSubData');
    public z_BufferSubData_ovr_0 := GetFuncOrNil&<procedure(target: BufferTargetARB; offset: IntPtr; size: IntPtr; data: IntPtr)>(z_BufferSubData_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure BufferSubData(target: BufferTargetARB; offset: IntPtr; size: IntPtr; data: IntPtr);
    begin
      z_BufferSubData_ovr_0(target, offset, size, data);
    end;
    
    // added in gl3.0
    public z_CheckFramebufferStatus_adr := GetFuncAdr('glCheckFramebufferStatus');
    public z_CheckFramebufferStatus_ovr_0 := GetFuncOrNil&<function(target: FramebufferTarget): FramebufferStatus>(z_CheckFramebufferStatus_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function CheckFramebufferStatus(target: FramebufferTarget): FramebufferStatus;
    begin
      Result := z_CheckFramebufferStatus_ovr_0(target);
    end;
    
    // added in gl4.5
    public z_CheckNamedFramebufferStatus_adr := GetFuncAdr('glCheckNamedFramebufferStatus');
    public z_CheckNamedFramebufferStatus_ovr_0 := GetFuncOrNil&<function(framebuffer: UInt32; target: FramebufferTarget): FramebufferStatus>(z_CheckNamedFramebufferStatus_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function CheckNamedFramebufferStatus(framebuffer: UInt32; target: FramebufferTarget): FramebufferStatus;
    begin
      Result := z_CheckNamedFramebufferStatus_ovr_0(framebuffer, target);
    end;
    
    // added in gl3.0
    public z_ClampColor_adr := GetFuncAdr('glClampColor');
    public z_ClampColor_ovr_0 := GetFuncOrNil&<procedure(target: ClampColorTargetARB; clamp: ClampColorModeARB)>(z_ClampColor_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ClampColor(target: ClampColorTargetARB; clamp: ClampColorModeARB);
    begin
      z_ClampColor_ovr_0(target, clamp);
    end;
    
    // added in gl1.0
    public static procedure z_Clear(mask: ClearBufferMask);
    external 'opengl32.dll' name 'glClear';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Clear(mask: ClearBufferMask) := z_Clear;
    
    // added in gl4.3
    public z_ClearBufferData_adr := GetFuncAdr('glClearBufferData');
    public z_ClearBufferData_ovr_0 := GetFuncOrNil&<procedure(target: BufferStorageTarget; internalformat: InternalFormat; format: PixelFormat; type: PixelType; data: IntPtr)>(z_ClearBufferData_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ClearBufferData(target: BufferStorageTarget; internalformat: InternalFormat; format: PixelFormat; type: PixelType; data: IntPtr);
    begin
      z_ClearBufferData_ovr_0(target, internalformat, format, type, data);
    end;
    
    // added in gl3.0
    public z_ClearBufferfi_adr := GetFuncAdr('glClearBufferfi');
    public z_ClearBufferfi_ovr_0 := GetFuncOrNil&<procedure(buffer: Buffer; drawbuffer: Int32; depth: single; stencil: Int32)>(z_ClearBufferfi_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ClearBufferfi(buffer: Buffer; drawbuffer: Int32; depth: single; stencil: Int32);
    begin
      z_ClearBufferfi_ovr_0(buffer, drawbuffer, depth, stencil);
    end;
    
    // added in gl3.0
    public z_ClearBufferfv_adr := GetFuncAdr('glClearBufferfv');
    public z_ClearBufferfv_ovr_0 := GetFuncOrNil&<procedure(buffer: Buffer; drawbuffer: Int32; var value: single)>(z_ClearBufferfv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ClearBufferfv(buffer: Buffer; drawbuffer: Int32; value: array of single);
    begin
      z_ClearBufferfv_ovr_0(buffer, drawbuffer, value[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ClearBufferfv(buffer: Buffer; drawbuffer: Int32; var value: single);
    begin
      z_ClearBufferfv_ovr_0(buffer, drawbuffer, value);
    end;
    public z_ClearBufferfv_ovr_2 := GetFuncOrNil&<procedure(buffer: Buffer; drawbuffer: Int32; value: IntPtr)>(z_ClearBufferfv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ClearBufferfv(buffer: Buffer; drawbuffer: Int32; value: IntPtr);
    begin
      z_ClearBufferfv_ovr_2(buffer, drawbuffer, value);
    end;
    
    // added in gl3.0
    public z_ClearBufferiv_adr := GetFuncAdr('glClearBufferiv');
    public z_ClearBufferiv_ovr_0 := GetFuncOrNil&<procedure(buffer: Buffer; drawbuffer: Int32; var value: Int32)>(z_ClearBufferiv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ClearBufferiv(buffer: Buffer; drawbuffer: Int32; value: array of Int32);
    begin
      z_ClearBufferiv_ovr_0(buffer, drawbuffer, value[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ClearBufferiv(buffer: Buffer; drawbuffer: Int32; var value: Int32);
    begin
      z_ClearBufferiv_ovr_0(buffer, drawbuffer, value);
    end;
    public z_ClearBufferiv_ovr_2 := GetFuncOrNil&<procedure(buffer: Buffer; drawbuffer: Int32; value: IntPtr)>(z_ClearBufferiv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ClearBufferiv(buffer: Buffer; drawbuffer: Int32; value: IntPtr);
    begin
      z_ClearBufferiv_ovr_2(buffer, drawbuffer, value);
    end;
    
    // added in gl4.3
    public z_ClearBufferSubData_adr := GetFuncAdr('glClearBufferSubData');
    public z_ClearBufferSubData_ovr_0 := GetFuncOrNil&<procedure(target: BufferTargetARB; internalformat: InternalFormat; offset: IntPtr; size: IntPtr; format: PixelFormat; type: PixelType; data: IntPtr)>(z_ClearBufferSubData_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ClearBufferSubData(target: BufferTargetARB; internalformat: InternalFormat; offset: IntPtr; size: IntPtr; format: PixelFormat; type: PixelType; data: IntPtr);
    begin
      z_ClearBufferSubData_ovr_0(target, internalformat, offset, size, format, type, data);
    end;
    
    // added in gl3.0
    public z_ClearBufferuiv_adr := GetFuncAdr('glClearBufferuiv');
    public z_ClearBufferuiv_ovr_0 := GetFuncOrNil&<procedure(buffer: Buffer; drawbuffer: Int32; var value: UInt32)>(z_ClearBufferuiv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ClearBufferuiv(buffer: Buffer; drawbuffer: Int32; value: array of UInt32);
    begin
      z_ClearBufferuiv_ovr_0(buffer, drawbuffer, value[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ClearBufferuiv(buffer: Buffer; drawbuffer: Int32; var value: UInt32);
    begin
      z_ClearBufferuiv_ovr_0(buffer, drawbuffer, value);
    end;
    public z_ClearBufferuiv_ovr_2 := GetFuncOrNil&<procedure(buffer: Buffer; drawbuffer: Int32; value: IntPtr)>(z_ClearBufferuiv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ClearBufferuiv(buffer: Buffer; drawbuffer: Int32; value: IntPtr);
    begin
      z_ClearBufferuiv_ovr_2(buffer, drawbuffer, value);
    end;
    
    // added in gl1.0
    public static procedure z_ClearColor(red: single; green: single; blue: single; alpha: single);
    external 'opengl32.dll' name 'glClearColor';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ClearColor(red: single; green: single; blue: single; alpha: single) := z_ClearColor;
    
    // added in gl1.0
    public static procedure z_ClearDepth(depth: real);
    external 'opengl32.dll' name 'glClearDepth';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ClearDepth(depth: real) := z_ClearDepth;
    
    // added in gl4.1
    public z_ClearDepthf_adr := GetFuncAdr('glClearDepthf');
    public z_ClearDepthf_ovr_0 := GetFuncOrNil&<procedure(d: single)>(z_ClearDepthf_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ClearDepthf(d: single);
    begin
      z_ClearDepthf_ovr_0(d);
    end;
    
    // added in gl4.5
    public z_ClearNamedBufferData_adr := GetFuncAdr('glClearNamedBufferData');
    public z_ClearNamedBufferData_ovr_0 := GetFuncOrNil&<procedure(buffer: UInt32; internalformat: InternalFormat; format: PixelFormat; type: PixelType; data: IntPtr)>(z_ClearNamedBufferData_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ClearNamedBufferData(buffer: UInt32; internalformat: InternalFormat; format: PixelFormat; type: PixelType; data: IntPtr);
    begin
      z_ClearNamedBufferData_ovr_0(buffer, internalformat, format, type, data);
    end;
    
    // added in gl4.5
    public z_ClearNamedBufferSubData_adr := GetFuncAdr('glClearNamedBufferSubData');
    public z_ClearNamedBufferSubData_ovr_0 := GetFuncOrNil&<procedure(buffer: UInt32; internalformat: InternalFormat; offset: IntPtr; size: IntPtr; format: PixelFormat; type: PixelType; data: IntPtr)>(z_ClearNamedBufferSubData_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ClearNamedBufferSubData(buffer: UInt32; internalformat: InternalFormat; offset: IntPtr; size: IntPtr; format: PixelFormat; type: PixelType; data: IntPtr);
    begin
      z_ClearNamedBufferSubData_ovr_0(buffer, internalformat, offset, size, format, type, data);
    end;
    
    // added in gl4.5
    public z_ClearNamedFramebufferfi_adr := GetFuncAdr('glClearNamedFramebufferfi');
    public z_ClearNamedFramebufferfi_ovr_0 := GetFuncOrNil&<procedure(framebuffer: UInt32; buffer: Buffer; drawbuffer: Int32; depth: single; stencil: Int32)>(z_ClearNamedFramebufferfi_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ClearNamedFramebufferfi(framebuffer: UInt32; buffer: Buffer; drawbuffer: Int32; depth: single; stencil: Int32);
    begin
      z_ClearNamedFramebufferfi_ovr_0(framebuffer, buffer, drawbuffer, depth, stencil);
    end;
    
    // added in gl4.5
    public z_ClearNamedFramebufferfv_adr := GetFuncAdr('glClearNamedFramebufferfv');
    public z_ClearNamedFramebufferfv_ovr_0 := GetFuncOrNil&<procedure(framebuffer: UInt32; buffer: Buffer; drawbuffer: Int32; var value: single)>(z_ClearNamedFramebufferfv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ClearNamedFramebufferfv(framebuffer: UInt32; buffer: Buffer; drawbuffer: Int32; value: array of single);
    begin
      z_ClearNamedFramebufferfv_ovr_0(framebuffer, buffer, drawbuffer, value[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ClearNamedFramebufferfv(framebuffer: UInt32; buffer: Buffer; drawbuffer: Int32; var value: single);
    begin
      z_ClearNamedFramebufferfv_ovr_0(framebuffer, buffer, drawbuffer, value);
    end;
    public z_ClearNamedFramebufferfv_ovr_2 := GetFuncOrNil&<procedure(framebuffer: UInt32; buffer: Buffer; drawbuffer: Int32; value: IntPtr)>(z_ClearNamedFramebufferfv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ClearNamedFramebufferfv(framebuffer: UInt32; buffer: Buffer; drawbuffer: Int32; value: IntPtr);
    begin
      z_ClearNamedFramebufferfv_ovr_2(framebuffer, buffer, drawbuffer, value);
    end;
    
    // added in gl4.5
    public z_ClearNamedFramebufferiv_adr := GetFuncAdr('glClearNamedFramebufferiv');
    public z_ClearNamedFramebufferiv_ovr_0 := GetFuncOrNil&<procedure(framebuffer: UInt32; buffer: Buffer; drawbuffer: Int32; var value: Int32)>(z_ClearNamedFramebufferiv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ClearNamedFramebufferiv(framebuffer: UInt32; buffer: Buffer; drawbuffer: Int32; value: array of Int32);
    begin
      z_ClearNamedFramebufferiv_ovr_0(framebuffer, buffer, drawbuffer, value[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ClearNamedFramebufferiv(framebuffer: UInt32; buffer: Buffer; drawbuffer: Int32; var value: Int32);
    begin
      z_ClearNamedFramebufferiv_ovr_0(framebuffer, buffer, drawbuffer, value);
    end;
    public z_ClearNamedFramebufferiv_ovr_2 := GetFuncOrNil&<procedure(framebuffer: UInt32; buffer: Buffer; drawbuffer: Int32; value: IntPtr)>(z_ClearNamedFramebufferiv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ClearNamedFramebufferiv(framebuffer: UInt32; buffer: Buffer; drawbuffer: Int32; value: IntPtr);
    begin
      z_ClearNamedFramebufferiv_ovr_2(framebuffer, buffer, drawbuffer, value);
    end;
    
    // added in gl4.5
    public z_ClearNamedFramebufferuiv_adr := GetFuncAdr('glClearNamedFramebufferuiv');
    public z_ClearNamedFramebufferuiv_ovr_0 := GetFuncOrNil&<procedure(framebuffer: UInt32; buffer: Buffer; drawbuffer: Int32; var value: UInt32)>(z_ClearNamedFramebufferuiv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ClearNamedFramebufferuiv(framebuffer: UInt32; buffer: Buffer; drawbuffer: Int32; value: array of UInt32);
    begin
      z_ClearNamedFramebufferuiv_ovr_0(framebuffer, buffer, drawbuffer, value[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ClearNamedFramebufferuiv(framebuffer: UInt32; buffer: Buffer; drawbuffer: Int32; var value: UInt32);
    begin
      z_ClearNamedFramebufferuiv_ovr_0(framebuffer, buffer, drawbuffer, value);
    end;
    public z_ClearNamedFramebufferuiv_ovr_2 := GetFuncOrNil&<procedure(framebuffer: UInt32; buffer: Buffer; drawbuffer: Int32; value: IntPtr)>(z_ClearNamedFramebufferuiv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ClearNamedFramebufferuiv(framebuffer: UInt32; buffer: Buffer; drawbuffer: Int32; value: IntPtr);
    begin
      z_ClearNamedFramebufferuiv_ovr_2(framebuffer, buffer, drawbuffer, value);
    end;
    
    // added in gl1.0
    public static procedure z_ClearStencil(s: Int32);
    external 'opengl32.dll' name 'glClearStencil';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ClearStencil(s: Int32) := z_ClearStencil;
    
    // added in gl4.4
    public z_ClearTexImage_adr := GetFuncAdr('glClearTexImage');
    public z_ClearTexImage_ovr_0 := GetFuncOrNil&<procedure(texture: UInt32; level: Int32; format: PixelFormat; type: PixelType; data: IntPtr)>(z_ClearTexImage_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ClearTexImage(texture: UInt32; level: Int32; format: PixelFormat; type: PixelType; data: IntPtr);
    begin
      z_ClearTexImage_ovr_0(texture, level, format, type, data);
    end;
    
    // added in gl4.4
    public z_ClearTexSubImage_adr := GetFuncAdr('glClearTexSubImage');
    public z_ClearTexSubImage_ovr_0 := GetFuncOrNil&<procedure(texture: UInt32; level: Int32; xoffset: Int32; yoffset: Int32; zoffset: Int32; width: Int32; height: Int32; depth: Int32; format: PixelFormat; type: PixelType; data: IntPtr)>(z_ClearTexSubImage_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ClearTexSubImage(texture: UInt32; level: Int32; xoffset: Int32; yoffset: Int32; zoffset: Int32; width: Int32; height: Int32; depth: Int32; format: PixelFormat; type: PixelType; data: IntPtr);
    begin
      z_ClearTexSubImage_ovr_0(texture, level, xoffset, yoffset, zoffset, width, height, depth, format, type, data);
    end;
    
    // added in gl3.2
    public z_ClientWaitSync_adr := GetFuncAdr('glClientWaitSync');
    public z_ClientWaitSync_ovr_0 := GetFuncOrNil&<function(sync: GLsync; flags: SyncObjectMask; timeout: UInt64): SyncStatus>(z_ClientWaitSync_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function ClientWaitSync(sync: GLsync; flags: SyncObjectMask; timeout: UInt64): SyncStatus;
    begin
      Result := z_ClientWaitSync_ovr_0(sync, flags, timeout);
    end;
    
    // added in gl4.5
    public z_ClipControl_adr := GetFuncAdr('glClipControl');
    public z_ClipControl_ovr_0 := GetFuncOrNil&<procedure(origin: ClipControlOrigin; depth: ClipControlDepth)>(z_ClipControl_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ClipControl(origin: ClipControlOrigin; depth: ClipControlDepth);
    begin
      z_ClipControl_ovr_0(origin, depth);
    end;
    
    // added in gl1.0
    public static procedure z_ColorMask(red: boolean; green: boolean; blue: boolean; alpha: boolean);
    external 'opengl32.dll' name 'glColorMask';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ColorMask(red: boolean; green: boolean; blue: boolean; alpha: boolean) := z_ColorMask;
    
    // added in gl3.0
    public z_ColorMaski_adr := GetFuncAdr('glColorMaski');
    public z_ColorMaski_ovr_0 := GetFuncOrNil&<procedure(index: UInt32; r: boolean; g: boolean; b: boolean; a: boolean)>(z_ColorMaski_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ColorMaski(index: UInt32; r: boolean; g: boolean; b: boolean; a: boolean);
    begin
      z_ColorMaski_ovr_0(index, r, g, b, a);
    end;
    
    // added in gl3.3
    public z_ColorP3ui_adr := GetFuncAdr('glColorP3ui');
    public z_ColorP3ui_ovr_0 := GetFuncOrNil&<procedure(type: ColorPointerType; color: UInt32)>(z_ColorP3ui_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ColorP3ui(type: ColorPointerType; color: UInt32);
    begin
      z_ColorP3ui_ovr_0(type, color);
    end;
    
    // added in gl3.3
    public z_ColorP3uiv_adr := GetFuncAdr('glColorP3uiv');
    public z_ColorP3uiv_ovr_0 := GetFuncOrNil&<procedure(type: ColorPointerType; var color: UInt32)>(z_ColorP3uiv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ColorP3uiv(type: ColorPointerType; color: array of UInt32);
    begin
      z_ColorP3uiv_ovr_0(type, color[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ColorP3uiv(type: ColorPointerType; var color: UInt32);
    begin
      z_ColorP3uiv_ovr_0(type, color);
    end;
    public z_ColorP3uiv_ovr_2 := GetFuncOrNil&<procedure(type: ColorPointerType; color: IntPtr)>(z_ColorP3uiv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ColorP3uiv(type: ColorPointerType; color: IntPtr);
    begin
      z_ColorP3uiv_ovr_2(type, color);
    end;
    
    // added in gl3.3
    public z_ColorP4ui_adr := GetFuncAdr('glColorP4ui');
    public z_ColorP4ui_ovr_0 := GetFuncOrNil&<procedure(type: ColorPointerType; color: UInt32)>(z_ColorP4ui_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ColorP4ui(type: ColorPointerType; color: UInt32);
    begin
      z_ColorP4ui_ovr_0(type, color);
    end;
    
    // added in gl3.3
    public z_ColorP4uiv_adr := GetFuncAdr('glColorP4uiv');
    public z_ColorP4uiv_ovr_0 := GetFuncOrNil&<procedure(type: ColorPointerType; var color: UInt32)>(z_ColorP4uiv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ColorP4uiv(type: ColorPointerType; color: array of UInt32);
    begin
      z_ColorP4uiv_ovr_0(type, color[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ColorP4uiv(type: ColorPointerType; var color: UInt32);
    begin
      z_ColorP4uiv_ovr_0(type, color);
    end;
    public z_ColorP4uiv_ovr_2 := GetFuncOrNil&<procedure(type: ColorPointerType; color: IntPtr)>(z_ColorP4uiv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ColorP4uiv(type: ColorPointerType; color: IntPtr);
    begin
      z_ColorP4uiv_ovr_2(type, color);
    end;
    
    // added in gl2.0
    public z_CompileShader_adr := GetFuncAdr('glCompileShader');
    public z_CompileShader_ovr_0 := GetFuncOrNil&<procedure(shader: UInt32)>(z_CompileShader_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure CompileShader(shader: UInt32);
    begin
      z_CompileShader_ovr_0(shader);
    end;
    
    // added in gl1.3
    public z_CompressedTexImage1D_adr := GetFuncAdr('glCompressedTexImage1D');
    public z_CompressedTexImage1D_ovr_0 := GetFuncOrNil&<procedure(target: TextureTarget; level: Int32; internalformat: InternalFormat; width: Int32; border: Int32; imageSize: Int32; data: IntPtr)>(z_CompressedTexImage1D_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure CompressedTexImage1D(target: TextureTarget; level: Int32; internalformat: InternalFormat; width: Int32; border: Int32; imageSize: Int32; data: IntPtr);
    begin
      z_CompressedTexImage1D_ovr_0(target, level, internalformat, width, border, imageSize, data);
    end;
    
    // added in gl1.3
    public z_CompressedTexImage2D_adr := GetFuncAdr('glCompressedTexImage2D');
    public z_CompressedTexImage2D_ovr_0 := GetFuncOrNil&<procedure(target: TextureTarget; level: Int32; internalformat: InternalFormat; width: Int32; height: Int32; border: Int32; imageSize: Int32; data: IntPtr)>(z_CompressedTexImage2D_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure CompressedTexImage2D(target: TextureTarget; level: Int32; internalformat: InternalFormat; width: Int32; height: Int32; border: Int32; imageSize: Int32; data: IntPtr);
    begin
      z_CompressedTexImage2D_ovr_0(target, level, internalformat, width, height, border, imageSize, data);
    end;
    
    // added in gl1.3
    public z_CompressedTexImage3D_adr := GetFuncAdr('glCompressedTexImage3D');
    public z_CompressedTexImage3D_ovr_0 := GetFuncOrNil&<procedure(target: TextureTarget; level: Int32; internalformat: InternalFormat; width: Int32; height: Int32; depth: Int32; border: Int32; imageSize: Int32; data: IntPtr)>(z_CompressedTexImage3D_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure CompressedTexImage3D(target: TextureTarget; level: Int32; internalformat: InternalFormat; width: Int32; height: Int32; depth: Int32; border: Int32; imageSize: Int32; data: IntPtr);
    begin
      z_CompressedTexImage3D_ovr_0(target, level, internalformat, width, height, depth, border, imageSize, data);
    end;
    
    // added in gl1.3
    public z_CompressedTexSubImage1D_adr := GetFuncAdr('glCompressedTexSubImage1D');
    public z_CompressedTexSubImage1D_ovr_0 := GetFuncOrNil&<procedure(target: TextureTarget; level: Int32; xoffset: Int32; width: Int32; format: PixelFormat; imageSize: Int32; data: IntPtr)>(z_CompressedTexSubImage1D_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure CompressedTexSubImage1D(target: TextureTarget; level: Int32; xoffset: Int32; width: Int32; format: PixelFormat; imageSize: Int32; data: IntPtr);
    begin
      z_CompressedTexSubImage1D_ovr_0(target, level, xoffset, width, format, imageSize, data);
    end;
    
    // added in gl1.3
    public z_CompressedTexSubImage2D_adr := GetFuncAdr('glCompressedTexSubImage2D');
    public z_CompressedTexSubImage2D_ovr_0 := GetFuncOrNil&<procedure(target: TextureTarget; level: Int32; xoffset: Int32; yoffset: Int32; width: Int32; height: Int32; format: PixelFormat; imageSize: Int32; data: IntPtr)>(z_CompressedTexSubImage2D_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure CompressedTexSubImage2D(target: TextureTarget; level: Int32; xoffset: Int32; yoffset: Int32; width: Int32; height: Int32; format: PixelFormat; imageSize: Int32; data: IntPtr);
    begin
      z_CompressedTexSubImage2D_ovr_0(target, level, xoffset, yoffset, width, height, format, imageSize, data);
    end;
    
    // added in gl1.3
    public z_CompressedTexSubImage3D_adr := GetFuncAdr('glCompressedTexSubImage3D');
    public z_CompressedTexSubImage3D_ovr_0 := GetFuncOrNil&<procedure(target: TextureTarget; level: Int32; xoffset: Int32; yoffset: Int32; zoffset: Int32; width: Int32; height: Int32; depth: Int32; format: PixelFormat; imageSize: Int32; data: IntPtr)>(z_CompressedTexSubImage3D_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure CompressedTexSubImage3D(target: TextureTarget; level: Int32; xoffset: Int32; yoffset: Int32; zoffset: Int32; width: Int32; height: Int32; depth: Int32; format: PixelFormat; imageSize: Int32; data: IntPtr);
    begin
      z_CompressedTexSubImage3D_ovr_0(target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, data);
    end;
    
    // added in gl4.5
    public z_CompressedTextureSubImage1D_adr := GetFuncAdr('glCompressedTextureSubImage1D');
    public z_CompressedTextureSubImage1D_ovr_0 := GetFuncOrNil&<procedure(texture: UInt32; level: Int32; xoffset: Int32; width: Int32; format: PixelFormat; imageSize: Int32; data: IntPtr)>(z_CompressedTextureSubImage1D_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure CompressedTextureSubImage1D(texture: UInt32; level: Int32; xoffset: Int32; width: Int32; format: PixelFormat; imageSize: Int32; data: IntPtr);
    begin
      z_CompressedTextureSubImage1D_ovr_0(texture, level, xoffset, width, format, imageSize, data);
    end;
    
    // added in gl4.5
    public z_CompressedTextureSubImage2D_adr := GetFuncAdr('glCompressedTextureSubImage2D');
    public z_CompressedTextureSubImage2D_ovr_0 := GetFuncOrNil&<procedure(texture: UInt32; level: Int32; xoffset: Int32; yoffset: Int32; width: Int32; height: Int32; format: PixelFormat; imageSize: Int32; data: IntPtr)>(z_CompressedTextureSubImage2D_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure CompressedTextureSubImage2D(texture: UInt32; level: Int32; xoffset: Int32; yoffset: Int32; width: Int32; height: Int32; format: PixelFormat; imageSize: Int32; data: IntPtr);
    begin
      z_CompressedTextureSubImage2D_ovr_0(texture, level, xoffset, yoffset, width, height, format, imageSize, data);
    end;
    
    // added in gl4.5
    public z_CompressedTextureSubImage3D_adr := GetFuncAdr('glCompressedTextureSubImage3D');
    public z_CompressedTextureSubImage3D_ovr_0 := GetFuncOrNil&<procedure(texture: UInt32; level: Int32; xoffset: Int32; yoffset: Int32; zoffset: Int32; width: Int32; height: Int32; depth: Int32; format: PixelFormat; imageSize: Int32; data: IntPtr)>(z_CompressedTextureSubImage3D_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure CompressedTextureSubImage3D(texture: UInt32; level: Int32; xoffset: Int32; yoffset: Int32; zoffset: Int32; width: Int32; height: Int32; depth: Int32; format: PixelFormat; imageSize: Int32; data: IntPtr);
    begin
      z_CompressedTextureSubImage3D_ovr_0(texture, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, data);
    end;
    
    // added in gl3.1
    public z_CopyBufferSubData_adr := GetFuncAdr('glCopyBufferSubData');
    public z_CopyBufferSubData_ovr_0 := GetFuncOrNil&<procedure(readTarget: CopyBufferSubDataTarget; writeTarget: CopyBufferSubDataTarget; readOffset: IntPtr; writeOffset: IntPtr; size: IntPtr)>(z_CopyBufferSubData_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure CopyBufferSubData(readTarget: CopyBufferSubDataTarget; writeTarget: CopyBufferSubDataTarget; readOffset: IntPtr; writeOffset: IntPtr; size: IntPtr);
    begin
      z_CopyBufferSubData_ovr_0(readTarget, writeTarget, readOffset, writeOffset, size);
    end;
    
    // added in gl4.3
    public z_CopyImageSubData_adr := GetFuncAdr('glCopyImageSubData');
    public z_CopyImageSubData_ovr_0 := GetFuncOrNil&<procedure(srcName: UInt32; srcTarget: CopyImageSubDataTarget; srcLevel: Int32; srcX: Int32; srcY: Int32; srcZ: Int32; dstName: UInt32; dstTarget: CopyImageSubDataTarget; dstLevel: Int32; dstX: Int32; dstY: Int32; dstZ: Int32; srcWidth: Int32; srcHeight: Int32; srcDepth: Int32)>(z_CopyImageSubData_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure CopyImageSubData(srcName: UInt32; srcTarget: CopyImageSubDataTarget; srcLevel: Int32; srcX: Int32; srcY: Int32; srcZ: Int32; dstName: UInt32; dstTarget: CopyImageSubDataTarget; dstLevel: Int32; dstX: Int32; dstY: Int32; dstZ: Int32; srcWidth: Int32; srcHeight: Int32; srcDepth: Int32);
    begin
      z_CopyImageSubData_ovr_0(srcName, srcTarget, srcLevel, srcX, srcY, srcZ, dstName, dstTarget, dstLevel, dstX, dstY, dstZ, srcWidth, srcHeight, srcDepth);
    end;
    
    // added in gl4.5
    public z_CopyNamedBufferSubData_adr := GetFuncAdr('glCopyNamedBufferSubData');
    public z_CopyNamedBufferSubData_ovr_0 := GetFuncOrNil&<procedure(readBuffer: UInt32; writeBuffer: UInt32; readOffset: IntPtr; writeOffset: IntPtr; size: IntPtr)>(z_CopyNamedBufferSubData_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure CopyNamedBufferSubData(readBuffer: UInt32; writeBuffer: UInt32; readOffset: IntPtr; writeOffset: IntPtr; size: IntPtr);
    begin
      z_CopyNamedBufferSubData_ovr_0(readBuffer, writeBuffer, readOffset, writeOffset, size);
    end;
    
    // added in gl1.1
    public static procedure z_CopyTexImage1D(target: TextureTarget; level: Int32; internalformat: InternalFormat; x: Int32; y: Int32; width: Int32; border: Int32);
    external 'opengl32.dll' name 'glCopyTexImage1D';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure CopyTexImage1D(target: TextureTarget; level: Int32; internalformat: InternalFormat; x: Int32; y: Int32; width: Int32; border: Int32) := z_CopyTexImage1D;
    
    // added in gl1.1
    public static procedure z_CopyTexImage2D(target: TextureTarget; level: Int32; internalformat: InternalFormat; x: Int32; y: Int32; width: Int32; height: Int32; border: Int32);
    external 'opengl32.dll' name 'glCopyTexImage2D';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure CopyTexImage2D(target: TextureTarget; level: Int32; internalformat: InternalFormat; x: Int32; y: Int32; width: Int32; height: Int32; border: Int32) := z_CopyTexImage2D;
    
    // added in gl1.1
    public static procedure z_CopyTexSubImage1D(target: TextureTarget; level: Int32; xoffset: Int32; x: Int32; y: Int32; width: Int32);
    external 'opengl32.dll' name 'glCopyTexSubImage1D';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure CopyTexSubImage1D(target: TextureTarget; level: Int32; xoffset: Int32; x: Int32; y: Int32; width: Int32) := z_CopyTexSubImage1D;
    
    // added in gl1.1
    public static procedure z_CopyTexSubImage2D(target: TextureTarget; level: Int32; xoffset: Int32; yoffset: Int32; x: Int32; y: Int32; width: Int32; height: Int32);
    external 'opengl32.dll' name 'glCopyTexSubImage2D';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure CopyTexSubImage2D(target: TextureTarget; level: Int32; xoffset: Int32; yoffset: Int32; x: Int32; y: Int32; width: Int32; height: Int32) := z_CopyTexSubImage2D;
    
    // added in gl1.2
    public z_CopyTexSubImage3D_adr := GetFuncAdr('glCopyTexSubImage3D');
    public z_CopyTexSubImage3D_ovr_0 := GetFuncOrNil&<procedure(target: TextureTarget; level: Int32; xoffset: Int32; yoffset: Int32; zoffset: Int32; x: Int32; y: Int32; width: Int32; height: Int32)>(z_CopyTexSubImage3D_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure CopyTexSubImage3D(target: TextureTarget; level: Int32; xoffset: Int32; yoffset: Int32; zoffset: Int32; x: Int32; y: Int32; width: Int32; height: Int32);
    begin
      z_CopyTexSubImage3D_ovr_0(target, level, xoffset, yoffset, zoffset, x, y, width, height);
    end;
    
    // added in gl4.5
    public z_CopyTextureSubImage1D_adr := GetFuncAdr('glCopyTextureSubImage1D');
    public z_CopyTextureSubImage1D_ovr_0 := GetFuncOrNil&<procedure(texture: UInt32; level: Int32; xoffset: Int32; x: Int32; y: Int32; width: Int32)>(z_CopyTextureSubImage1D_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure CopyTextureSubImage1D(texture: UInt32; level: Int32; xoffset: Int32; x: Int32; y: Int32; width: Int32);
    begin
      z_CopyTextureSubImage1D_ovr_0(texture, level, xoffset, x, y, width);
    end;
    
    // added in gl4.5
    public z_CopyTextureSubImage2D_adr := GetFuncAdr('glCopyTextureSubImage2D');
    public z_CopyTextureSubImage2D_ovr_0 := GetFuncOrNil&<procedure(texture: UInt32; level: Int32; xoffset: Int32; yoffset: Int32; x: Int32; y: Int32; width: Int32; height: Int32)>(z_CopyTextureSubImage2D_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure CopyTextureSubImage2D(texture: UInt32; level: Int32; xoffset: Int32; yoffset: Int32; x: Int32; y: Int32; width: Int32; height: Int32);
    begin
      z_CopyTextureSubImage2D_ovr_0(texture, level, xoffset, yoffset, x, y, width, height);
    end;
    
    // added in gl4.5
    public z_CopyTextureSubImage3D_adr := GetFuncAdr('glCopyTextureSubImage3D');
    public z_CopyTextureSubImage3D_ovr_0 := GetFuncOrNil&<procedure(texture: UInt32; level: Int32; xoffset: Int32; yoffset: Int32; zoffset: Int32; x: Int32; y: Int32; width: Int32; height: Int32)>(z_CopyTextureSubImage3D_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure CopyTextureSubImage3D(texture: UInt32; level: Int32; xoffset: Int32; yoffset: Int32; zoffset: Int32; x: Int32; y: Int32; width: Int32; height: Int32);
    begin
      z_CopyTextureSubImage3D_ovr_0(texture, level, xoffset, yoffset, zoffset, x, y, width, height);
    end;
    
    // added in gl4.5
    public z_CreateBuffers_adr := GetFuncAdr('glCreateBuffers');
    public z_CreateBuffers_ovr_0 := GetFuncOrNil&<procedure(n: Int32; var buffers: UInt32)>(z_CreateBuffers_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure CreateBuffers(n: Int32; buffers: array of UInt32);
    begin
      z_CreateBuffers_ovr_0(n, buffers[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure CreateBuffers(n: Int32; var buffers: UInt32);
    begin
      z_CreateBuffers_ovr_0(n, buffers);
    end;
    public z_CreateBuffers_ovr_2 := GetFuncOrNil&<procedure(n: Int32; buffers: IntPtr)>(z_CreateBuffers_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure CreateBuffers(n: Int32; buffers: IntPtr);
    begin
      z_CreateBuffers_ovr_2(n, buffers);
    end;
    
    // added in gl4.5
    public z_CreateFramebuffers_adr := GetFuncAdr('glCreateFramebuffers');
    public z_CreateFramebuffers_ovr_0 := GetFuncOrNil&<procedure(n: Int32; var framebuffers: UInt32)>(z_CreateFramebuffers_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure CreateFramebuffers(n: Int32; framebuffers: array of UInt32);
    begin
      z_CreateFramebuffers_ovr_0(n, framebuffers[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure CreateFramebuffers(n: Int32; var framebuffers: UInt32);
    begin
      z_CreateFramebuffers_ovr_0(n, framebuffers);
    end;
    public z_CreateFramebuffers_ovr_2 := GetFuncOrNil&<procedure(n: Int32; framebuffers: IntPtr)>(z_CreateFramebuffers_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure CreateFramebuffers(n: Int32; framebuffers: IntPtr);
    begin
      z_CreateFramebuffers_ovr_2(n, framebuffers);
    end;
    
    // added in gl2.0
    public z_CreateProgram_adr := GetFuncAdr('glCreateProgram');
    public z_CreateProgram_ovr_0 := GetFuncOrNil&<function: UInt32>(z_CreateProgram_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function CreateProgram: UInt32;
    begin
      Result := z_CreateProgram_ovr_0;
    end;
    
    // added in gl4.5
    public z_CreateProgramPipelines_adr := GetFuncAdr('glCreateProgramPipelines');
    public z_CreateProgramPipelines_ovr_0 := GetFuncOrNil&<procedure(n: Int32; var pipelines: UInt32)>(z_CreateProgramPipelines_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure CreateProgramPipelines(n: Int32; pipelines: array of UInt32);
    begin
      z_CreateProgramPipelines_ovr_0(n, pipelines[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure CreateProgramPipelines(n: Int32; var pipelines: UInt32);
    begin
      z_CreateProgramPipelines_ovr_0(n, pipelines);
    end;
    public z_CreateProgramPipelines_ovr_2 := GetFuncOrNil&<procedure(n: Int32; pipelines: IntPtr)>(z_CreateProgramPipelines_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure CreateProgramPipelines(n: Int32; pipelines: IntPtr);
    begin
      z_CreateProgramPipelines_ovr_2(n, pipelines);
    end;
    
    // added in gl4.5
    public z_CreateQueries_adr := GetFuncAdr('glCreateQueries');
    public z_CreateQueries_ovr_0 := GetFuncOrNil&<procedure(target: QueryTarget; n: Int32; var ids: UInt32)>(z_CreateQueries_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure CreateQueries(target: QueryTarget; n: Int32; ids: array of UInt32);
    begin
      z_CreateQueries_ovr_0(target, n, ids[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure CreateQueries(target: QueryTarget; n: Int32; var ids: UInt32);
    begin
      z_CreateQueries_ovr_0(target, n, ids);
    end;
    public z_CreateQueries_ovr_2 := GetFuncOrNil&<procedure(target: QueryTarget; n: Int32; ids: IntPtr)>(z_CreateQueries_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure CreateQueries(target: QueryTarget; n: Int32; ids: IntPtr);
    begin
      z_CreateQueries_ovr_2(target, n, ids);
    end;
    
    // added in gl4.5
    public z_CreateRenderbuffers_adr := GetFuncAdr('glCreateRenderbuffers');
    public z_CreateRenderbuffers_ovr_0 := GetFuncOrNil&<procedure(n: Int32; var renderbuffers: UInt32)>(z_CreateRenderbuffers_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure CreateRenderbuffers(n: Int32; renderbuffers: array of UInt32);
    begin
      z_CreateRenderbuffers_ovr_0(n, renderbuffers[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure CreateRenderbuffers(n: Int32; var renderbuffers: UInt32);
    begin
      z_CreateRenderbuffers_ovr_0(n, renderbuffers);
    end;
    public z_CreateRenderbuffers_ovr_2 := GetFuncOrNil&<procedure(n: Int32; renderbuffers: IntPtr)>(z_CreateRenderbuffers_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure CreateRenderbuffers(n: Int32; renderbuffers: IntPtr);
    begin
      z_CreateRenderbuffers_ovr_2(n, renderbuffers);
    end;
    
    // added in gl4.5
    public z_CreateSamplers_adr := GetFuncAdr('glCreateSamplers');
    public z_CreateSamplers_ovr_0 := GetFuncOrNil&<procedure(n: Int32; var samplers: UInt32)>(z_CreateSamplers_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure CreateSamplers(n: Int32; samplers: array of UInt32);
    begin
      z_CreateSamplers_ovr_0(n, samplers[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure CreateSamplers(n: Int32; var samplers: UInt32);
    begin
      z_CreateSamplers_ovr_0(n, samplers);
    end;
    public z_CreateSamplers_ovr_2 := GetFuncOrNil&<procedure(n: Int32; samplers: IntPtr)>(z_CreateSamplers_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure CreateSamplers(n: Int32; samplers: IntPtr);
    begin
      z_CreateSamplers_ovr_2(n, samplers);
    end;
    
    // added in gl2.0
    public z_CreateShader_adr := GetFuncAdr('glCreateShader');
    public z_CreateShader_ovr_0 := GetFuncOrNil&<function(type: ShaderType): UInt32>(z_CreateShader_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function CreateShader(type: ShaderType): UInt32;
    begin
      Result := z_CreateShader_ovr_0(type);
    end;
    
    // added in gl4.1
    public z_CreateShaderProgramv_adr := GetFuncAdr('glCreateShaderProgramv');
    public z_CreateShaderProgramv_ovr_0 := GetFuncOrNil&<function(type: ShaderType; count: Int32; var strings: IntPtr): UInt32>(z_CreateShaderProgramv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function CreateShaderProgramv(type: ShaderType; count: Int32; strings: array of string): UInt32;
    begin
      var par_3_str_ptr := strings.ConvertAll(arr_el1->Marshal.StringToHGlobalAnsi(arr_el1));
      Result := z_CreateShaderProgramv_ovr_0(type, count, par_3_str_ptr[0]);
      foreach var arr_el1 in par_3_str_ptr do Marshal.FreeHGlobal(arr_el1);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function CreateShaderProgramv(type: ShaderType; count: Int32; strings: array of IntPtr): UInt32;
    begin
      Result := z_CreateShaderProgramv_ovr_0(type, count, strings[0]);
    end;
    public z_CreateShaderProgramv_ovr_2 := GetFuncOrNil&<function(type: ShaderType; count: Int32; strings: IntPtr): UInt32>(z_CreateShaderProgramv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function CreateShaderProgramv(type: ShaderType; count: Int32; strings: IntPtr): UInt32;
    begin
      Result := z_CreateShaderProgramv_ovr_2(type, count, strings);
    end;
    
    // added in gl4.5
    public z_CreateTextures_adr := GetFuncAdr('glCreateTextures');
    public z_CreateTextures_ovr_0 := GetFuncOrNil&<procedure(target: TextureTarget; n: Int32; var textures: UInt32)>(z_CreateTextures_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure CreateTextures(target: TextureTarget; n: Int32; textures: array of UInt32);
    begin
      z_CreateTextures_ovr_0(target, n, textures[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure CreateTextures(target: TextureTarget; n: Int32; var textures: UInt32);
    begin
      z_CreateTextures_ovr_0(target, n, textures);
    end;
    public z_CreateTextures_ovr_2 := GetFuncOrNil&<procedure(target: TextureTarget; n: Int32; textures: IntPtr)>(z_CreateTextures_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure CreateTextures(target: TextureTarget; n: Int32; textures: IntPtr);
    begin
      z_CreateTextures_ovr_2(target, n, textures);
    end;
    
    // added in gl4.5
    public z_CreateTransformFeedbacks_adr := GetFuncAdr('glCreateTransformFeedbacks');
    public z_CreateTransformFeedbacks_ovr_0 := GetFuncOrNil&<procedure(n: Int32; var ids: UInt32)>(z_CreateTransformFeedbacks_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure CreateTransformFeedbacks(n: Int32; ids: array of UInt32);
    begin
      z_CreateTransformFeedbacks_ovr_0(n, ids[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure CreateTransformFeedbacks(n: Int32; var ids: UInt32);
    begin
      z_CreateTransformFeedbacks_ovr_0(n, ids);
    end;
    public z_CreateTransformFeedbacks_ovr_2 := GetFuncOrNil&<procedure(n: Int32; ids: IntPtr)>(z_CreateTransformFeedbacks_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure CreateTransformFeedbacks(n: Int32; ids: IntPtr);
    begin
      z_CreateTransformFeedbacks_ovr_2(n, ids);
    end;
    
    // added in gl4.5
    public z_CreateVertexArrays_adr := GetFuncAdr('glCreateVertexArrays');
    public z_CreateVertexArrays_ovr_0 := GetFuncOrNil&<procedure(n: Int32; var arrays: UInt32)>(z_CreateVertexArrays_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure CreateVertexArrays(n: Int32; arrays: array of UInt32);
    begin
      z_CreateVertexArrays_ovr_0(n, arrays[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure CreateVertexArrays(n: Int32; var arrays: UInt32);
    begin
      z_CreateVertexArrays_ovr_0(n, arrays);
    end;
    public z_CreateVertexArrays_ovr_2 := GetFuncOrNil&<procedure(n: Int32; arrays: IntPtr)>(z_CreateVertexArrays_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure CreateVertexArrays(n: Int32; arrays: IntPtr);
    begin
      z_CreateVertexArrays_ovr_2(n, arrays);
    end;
    
    // added in gl1.0
    public static procedure z_CullFace(mode: CullFaceMode);
    external 'opengl32.dll' name 'glCullFace';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure CullFace(mode: CullFaceMode) := z_CullFace;
    
    // added in gl4.3
    public z_DebugMessageCallback_adr := GetFuncAdr('glDebugMessageCallback');
    public z_DebugMessageCallback_ovr_0 := GetFuncOrNil&<procedure(callback: GLDEBUGPROC; userParam: IntPtr)>(z_DebugMessageCallback_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure DebugMessageCallback(callback: GLDEBUGPROC; userParam: IntPtr);
    begin
      z_DebugMessageCallback_ovr_0(callback, userParam);
    end;
    
    // added in gl4.3
    public z_DebugMessageControl_adr := GetFuncAdr('glDebugMessageControl');
    public z_DebugMessageControl_ovr_0 := GetFuncOrNil&<procedure(source: DebugSource; type: DebugType; severity: DebugSeverity; count: Int32; var ids: UInt32; enabled: boolean)>(z_DebugMessageControl_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure DebugMessageControl(source: DebugSource; type: DebugType; severity: DebugSeverity; count: Int32; ids: array of UInt32; enabled: boolean);
    begin
      z_DebugMessageControl_ovr_0(source, type, severity, count, ids[0], enabled);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure DebugMessageControl(source: DebugSource; type: DebugType; severity: DebugSeverity; count: Int32; var ids: UInt32; enabled: boolean);
    begin
      z_DebugMessageControl_ovr_0(source, type, severity, count, ids, enabled);
    end;
    public z_DebugMessageControl_ovr_2 := GetFuncOrNil&<procedure(source: DebugSource; type: DebugType; severity: DebugSeverity; count: Int32; ids: IntPtr; enabled: boolean)>(z_DebugMessageControl_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure DebugMessageControl(source: DebugSource; type: DebugType; severity: DebugSeverity; count: Int32; ids: IntPtr; enabled: boolean);
    begin
      z_DebugMessageControl_ovr_2(source, type, severity, count, ids, enabled);
    end;
    
    // added in gl4.3
    public z_DebugMessageInsert_adr := GetFuncAdr('glDebugMessageInsert');
    public z_DebugMessageInsert_ovr_0 := GetFuncOrNil&<procedure(source: DebugSource; type: DebugType; id: UInt32; severity: DebugSeverity; length: Int32; buf: IntPtr)>(z_DebugMessageInsert_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure DebugMessageInsert(source: DebugSource; type: DebugType; id: UInt32; severity: DebugSeverity; length: Int32; buf: string);
    begin
      var par_6_str_ptr := Marshal.StringToHGlobalAnsi(buf);
      z_DebugMessageInsert_ovr_0(source, type, id, severity, length, par_6_str_ptr);
      Marshal.FreeHGlobal(par_6_str_ptr);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure DebugMessageInsert(source: DebugSource; type: DebugType; id: UInt32; severity: DebugSeverity; length: Int32; buf: IntPtr);
    begin
      z_DebugMessageInsert_ovr_0(source, type, id, severity, length, buf);
    end;
    
    // added in gl1.5
    public z_DeleteBuffers_adr := GetFuncAdr('glDeleteBuffers');
    public z_DeleteBuffers_ovr_0 := GetFuncOrNil&<procedure(n: Int32; var buffers: UInt32)>(z_DeleteBuffers_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure DeleteBuffers(n: Int32; buffers: array of UInt32);
    begin
      z_DeleteBuffers_ovr_0(n, buffers[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure DeleteBuffers(n: Int32; var buffers: UInt32);
    begin
      z_DeleteBuffers_ovr_0(n, buffers);
    end;
    public z_DeleteBuffers_ovr_2 := GetFuncOrNil&<procedure(n: Int32; buffers: IntPtr)>(z_DeleteBuffers_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure DeleteBuffers(n: Int32; buffers: IntPtr);
    begin
      z_DeleteBuffers_ovr_2(n, buffers);
    end;
    
    // added in gl3.0
    public z_DeleteFramebuffers_adr := GetFuncAdr('glDeleteFramebuffers');
    public z_DeleteFramebuffers_ovr_0 := GetFuncOrNil&<procedure(n: Int32; var framebuffers: UInt32)>(z_DeleteFramebuffers_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure DeleteFramebuffers(n: Int32; framebuffers: array of UInt32);
    begin
      z_DeleteFramebuffers_ovr_0(n, framebuffers[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure DeleteFramebuffers(n: Int32; var framebuffers: UInt32);
    begin
      z_DeleteFramebuffers_ovr_0(n, framebuffers);
    end;
    public z_DeleteFramebuffers_ovr_2 := GetFuncOrNil&<procedure(n: Int32; framebuffers: IntPtr)>(z_DeleteFramebuffers_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure DeleteFramebuffers(n: Int32; framebuffers: IntPtr);
    begin
      z_DeleteFramebuffers_ovr_2(n, framebuffers);
    end;
    
    // added in gl2.0
    public z_DeleteProgram_adr := GetFuncAdr('glDeleteProgram');
    public z_DeleteProgram_ovr_0 := GetFuncOrNil&<procedure(program: UInt32)>(z_DeleteProgram_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure DeleteProgram(program: UInt32);
    begin
      z_DeleteProgram_ovr_0(program);
    end;
    
    // added in gl4.1
    public z_DeleteProgramPipelines_adr := GetFuncAdr('glDeleteProgramPipelines');
    public z_DeleteProgramPipelines_ovr_0 := GetFuncOrNil&<procedure(n: Int32; var pipelines: UInt32)>(z_DeleteProgramPipelines_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure DeleteProgramPipelines(n: Int32; pipelines: array of UInt32);
    begin
      z_DeleteProgramPipelines_ovr_0(n, pipelines[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure DeleteProgramPipelines(n: Int32; var pipelines: UInt32);
    begin
      z_DeleteProgramPipelines_ovr_0(n, pipelines);
    end;
    public z_DeleteProgramPipelines_ovr_2 := GetFuncOrNil&<procedure(n: Int32; pipelines: IntPtr)>(z_DeleteProgramPipelines_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure DeleteProgramPipelines(n: Int32; pipelines: IntPtr);
    begin
      z_DeleteProgramPipelines_ovr_2(n, pipelines);
    end;
    
    // added in gl1.5
    public z_DeleteQueries_adr := GetFuncAdr('glDeleteQueries');
    public z_DeleteQueries_ovr_0 := GetFuncOrNil&<procedure(n: Int32; var ids: UInt32)>(z_DeleteQueries_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure DeleteQueries(n: Int32; ids: array of UInt32);
    begin
      z_DeleteQueries_ovr_0(n, ids[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure DeleteQueries(n: Int32; var ids: UInt32);
    begin
      z_DeleteQueries_ovr_0(n, ids);
    end;
    public z_DeleteQueries_ovr_2 := GetFuncOrNil&<procedure(n: Int32; ids: IntPtr)>(z_DeleteQueries_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure DeleteQueries(n: Int32; ids: IntPtr);
    begin
      z_DeleteQueries_ovr_2(n, ids);
    end;
    
    // added in gl3.0
    public z_DeleteRenderbuffers_adr := GetFuncAdr('glDeleteRenderbuffers');
    public z_DeleteRenderbuffers_ovr_0 := GetFuncOrNil&<procedure(n: Int32; var renderbuffers: UInt32)>(z_DeleteRenderbuffers_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure DeleteRenderbuffers(n: Int32; renderbuffers: array of UInt32);
    begin
      z_DeleteRenderbuffers_ovr_0(n, renderbuffers[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure DeleteRenderbuffers(n: Int32; var renderbuffers: UInt32);
    begin
      z_DeleteRenderbuffers_ovr_0(n, renderbuffers);
    end;
    public z_DeleteRenderbuffers_ovr_2 := GetFuncOrNil&<procedure(n: Int32; renderbuffers: IntPtr)>(z_DeleteRenderbuffers_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure DeleteRenderbuffers(n: Int32; renderbuffers: IntPtr);
    begin
      z_DeleteRenderbuffers_ovr_2(n, renderbuffers);
    end;
    
    // added in gl3.3
    public z_DeleteSamplers_adr := GetFuncAdr('glDeleteSamplers');
    public z_DeleteSamplers_ovr_0 := GetFuncOrNil&<procedure(count: Int32; var samplers: UInt32)>(z_DeleteSamplers_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure DeleteSamplers(count: Int32; samplers: array of UInt32);
    begin
      z_DeleteSamplers_ovr_0(count, samplers[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure DeleteSamplers(count: Int32; var samplers: UInt32);
    begin
      z_DeleteSamplers_ovr_0(count, samplers);
    end;
    public z_DeleteSamplers_ovr_2 := GetFuncOrNil&<procedure(count: Int32; samplers: IntPtr)>(z_DeleteSamplers_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure DeleteSamplers(count: Int32; samplers: IntPtr);
    begin
      z_DeleteSamplers_ovr_2(count, samplers);
    end;
    
    // added in gl2.0
    public z_DeleteShader_adr := GetFuncAdr('glDeleteShader');
    public z_DeleteShader_ovr_0 := GetFuncOrNil&<procedure(shader: UInt32)>(z_DeleteShader_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure DeleteShader(shader: UInt32);
    begin
      z_DeleteShader_ovr_0(shader);
    end;
    
    // added in gl3.2
    public z_DeleteSync_adr := GetFuncAdr('glDeleteSync');
    public z_DeleteSync_ovr_0 := GetFuncOrNil&<procedure(sync: GLsync)>(z_DeleteSync_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure DeleteSync(sync: GLsync);
    begin
      z_DeleteSync_ovr_0(sync);
    end;
    
    // added in gl1.1
    public static procedure z_DeleteTextures(n: Int32; [MarshalAs(UnmanagedType.LPArray)] textures: array of UInt32);
    external 'opengl32.dll' name 'glDeleteTextures';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure DeleteTextures(n: Int32; textures: array of UInt32) := z_DeleteTextures;
    public static procedure z_DeleteTextures(n: Int32; var textures: UInt32);
    external 'opengl32.dll' name 'glDeleteTextures';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure DeleteTextures(n: Int32; var textures: UInt32) := z_DeleteTextures;
    public static procedure z_DeleteTextures(n: Int32; textures: IntPtr);
    external 'opengl32.dll' name 'glDeleteTextures';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure DeleteTextures(n: Int32; textures: IntPtr) := z_DeleteTextures;
    
    // added in gl4.0
    public z_DeleteTransformFeedbacks_adr := GetFuncAdr('glDeleteTransformFeedbacks');
    public z_DeleteTransformFeedbacks_ovr_0 := GetFuncOrNil&<procedure(n: Int32; var ids: UInt32)>(z_DeleteTransformFeedbacks_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure DeleteTransformFeedbacks(n: Int32; ids: array of UInt32);
    begin
      z_DeleteTransformFeedbacks_ovr_0(n, ids[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure DeleteTransformFeedbacks(n: Int32; var ids: UInt32);
    begin
      z_DeleteTransformFeedbacks_ovr_0(n, ids);
    end;
    public z_DeleteTransformFeedbacks_ovr_2 := GetFuncOrNil&<procedure(n: Int32; ids: IntPtr)>(z_DeleteTransformFeedbacks_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure DeleteTransformFeedbacks(n: Int32; ids: IntPtr);
    begin
      z_DeleteTransformFeedbacks_ovr_2(n, ids);
    end;
    
    // added in gl3.0
    public z_DeleteVertexArrays_adr := GetFuncAdr('glDeleteVertexArrays');
    public z_DeleteVertexArrays_ovr_0 := GetFuncOrNil&<procedure(n: Int32; var arrays: UInt32)>(z_DeleteVertexArrays_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure DeleteVertexArrays(n: Int32; arrays: array of UInt32);
    begin
      z_DeleteVertexArrays_ovr_0(n, arrays[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure DeleteVertexArrays(n: Int32; var arrays: UInt32);
    begin
      z_DeleteVertexArrays_ovr_0(n, arrays);
    end;
    public z_DeleteVertexArrays_ovr_2 := GetFuncOrNil&<procedure(n: Int32; arrays: IntPtr)>(z_DeleteVertexArrays_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure DeleteVertexArrays(n: Int32; arrays: IntPtr);
    begin
      z_DeleteVertexArrays_ovr_2(n, arrays);
    end;
    
    // added in gl1.0
    public static procedure z_DepthFunc(func: DepthFunction);
    external 'opengl32.dll' name 'glDepthFunc';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure DepthFunc(func: DepthFunction) := z_DepthFunc;
    
    // added in gl1.0
    public static procedure z_DepthMask(flag: boolean);
    external 'opengl32.dll' name 'glDepthMask';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure DepthMask(flag: boolean) := z_DepthMask;
    
    // added in gl1.0
    public static procedure z_DepthRange(n: real; f: real);
    external 'opengl32.dll' name 'glDepthRange';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure DepthRange(n: real; f: real) := z_DepthRange;
    
    // added in gl4.1
    public z_DepthRangeArrayv_adr := GetFuncAdr('glDepthRangeArrayv');
    public z_DepthRangeArrayv_ovr_0 := GetFuncOrNil&<procedure(first: UInt32; count: Int32; var v: real)>(z_DepthRangeArrayv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure DepthRangeArrayv(first: UInt32; count: Int32; v: array of real);
    begin
      z_DepthRangeArrayv_ovr_0(first, count, v[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure DepthRangeArrayv(first: UInt32; count: Int32; var v: real);
    begin
      z_DepthRangeArrayv_ovr_0(first, count, v);
    end;
    public z_DepthRangeArrayv_ovr_2 := GetFuncOrNil&<procedure(first: UInt32; count: Int32; v: IntPtr)>(z_DepthRangeArrayv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure DepthRangeArrayv(first: UInt32; count: Int32; v: IntPtr);
    begin
      z_DepthRangeArrayv_ovr_2(first, count, v);
    end;
    
    // added in gl4.1
    public z_DepthRangef_adr := GetFuncAdr('glDepthRangef');
    public z_DepthRangef_ovr_0 := GetFuncOrNil&<procedure(n: single; f: single)>(z_DepthRangef_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure DepthRangef(n: single; f: single);
    begin
      z_DepthRangef_ovr_0(n, f);
    end;
    
    // added in gl4.1
    public z_DepthRangeIndexed_adr := GetFuncAdr('glDepthRangeIndexed');
    public z_DepthRangeIndexed_ovr_0 := GetFuncOrNil&<procedure(index: UInt32; n: real; f: real)>(z_DepthRangeIndexed_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure DepthRangeIndexed(index: UInt32; n: real; f: real);
    begin
      z_DepthRangeIndexed_ovr_0(index, n, f);
    end;
    
    // added in gl2.0
    public z_DetachShader_adr := GetFuncAdr('glDetachShader');
    public z_DetachShader_ovr_0 := GetFuncOrNil&<procedure(program: UInt32; shader: UInt32)>(z_DetachShader_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure DetachShader(program: UInt32; shader: UInt32);
    begin
      z_DetachShader_ovr_0(program, shader);
    end;
    
    // added in gl1.0
    public static procedure z_Disable(cap: EnableCap);
    external 'opengl32.dll' name 'glDisable';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Disable(cap: EnableCap) := z_Disable;
    
    // added in gl3.0
    public z_Disablei_adr := GetFuncAdr('glDisablei');
    public z_Disablei_ovr_0 := GetFuncOrNil&<procedure(target: EnableCap; index: UInt32)>(z_Disablei_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Disablei(target: EnableCap; index: UInt32);
    begin
      z_Disablei_ovr_0(target, index);
    end;
    
    // added in gl4.5
    public z_DisableVertexArrayAttrib_adr := GetFuncAdr('glDisableVertexArrayAttrib');
    public z_DisableVertexArrayAttrib_ovr_0 := GetFuncOrNil&<procedure(vaobj: UInt32; index: UInt32)>(z_DisableVertexArrayAttrib_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure DisableVertexArrayAttrib(vaobj: UInt32; index: UInt32);
    begin
      z_DisableVertexArrayAttrib_ovr_0(vaobj, index);
    end;
    
    // added in gl2.0
    public z_DisableVertexAttribArray_adr := GetFuncAdr('glDisableVertexAttribArray');
    public z_DisableVertexAttribArray_ovr_0 := GetFuncOrNil&<procedure(index: UInt32)>(z_DisableVertexAttribArray_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure DisableVertexAttribArray(index: UInt32);
    begin
      z_DisableVertexAttribArray_ovr_0(index);
    end;
    
    // added in gl4.3
    public z_DispatchCompute_adr := GetFuncAdr('glDispatchCompute');
    public z_DispatchCompute_ovr_0 := GetFuncOrNil&<procedure(num_groups_x: UInt32; num_groups_y: UInt32; num_groups_z: UInt32)>(z_DispatchCompute_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure DispatchCompute(num_groups_x: UInt32; num_groups_y: UInt32; num_groups_z: UInt32);
    begin
      z_DispatchCompute_ovr_0(num_groups_x, num_groups_y, num_groups_z);
    end;
    
    // added in gl4.3
    public z_DispatchComputeIndirect_adr := GetFuncAdr('glDispatchComputeIndirect');
    public z_DispatchComputeIndirect_ovr_0 := GetFuncOrNil&<procedure(indirect: IntPtr)>(z_DispatchComputeIndirect_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure DispatchComputeIndirect(indirect: IntPtr);
    begin
      z_DispatchComputeIndirect_ovr_0(indirect);
    end;
    
    // added in gl1.1
    public static procedure z_DrawArrays(mode: PrimitiveType; first: Int32; count: Int32);
    external 'opengl32.dll' name 'glDrawArrays';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure DrawArrays(mode: PrimitiveType; first: Int32; count: Int32) := z_DrawArrays;
    
    // added in gl4.0
    public z_DrawArraysIndirect_adr := GetFuncAdr('glDrawArraysIndirect');
    public z_DrawArraysIndirect_ovr_0 := GetFuncOrNil&<procedure(mode: PrimitiveType; indirect: IntPtr)>(z_DrawArraysIndirect_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure DrawArraysIndirect(mode: PrimitiveType; indirect: IntPtr);
    begin
      z_DrawArraysIndirect_ovr_0(mode, indirect);
    end;
    
    // added in gl3.1
    public z_DrawArraysInstanced_adr := GetFuncAdr('glDrawArraysInstanced');
    public z_DrawArraysInstanced_ovr_0 := GetFuncOrNil&<procedure(mode: PrimitiveType; first: Int32; count: Int32; instancecount: Int32)>(z_DrawArraysInstanced_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure DrawArraysInstanced(mode: PrimitiveType; first: Int32; count: Int32; instancecount: Int32);
    begin
      z_DrawArraysInstanced_ovr_0(mode, first, count, instancecount);
    end;
    
    // added in gl4.2
    public z_DrawArraysInstancedBaseInstance_adr := GetFuncAdr('glDrawArraysInstancedBaseInstance');
    public z_DrawArraysInstancedBaseInstance_ovr_0 := GetFuncOrNil&<procedure(mode: PrimitiveType; first: Int32; count: Int32; instancecount: Int32; baseinstance: UInt32)>(z_DrawArraysInstancedBaseInstance_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure DrawArraysInstancedBaseInstance(mode: PrimitiveType; first: Int32; count: Int32; instancecount: Int32; baseinstance: UInt32);
    begin
      z_DrawArraysInstancedBaseInstance_ovr_0(mode, first, count, instancecount, baseinstance);
    end;
    
    // added in gl1.0
    public static procedure z_DrawBuffer(buf: DrawBufferMode);
    external 'opengl32.dll' name 'glDrawBuffer';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure DrawBuffer(buf: DrawBufferMode) := z_DrawBuffer;
    
    // added in gl2.0
    public z_DrawBuffers_adr := GetFuncAdr('glDrawBuffers');
    public z_DrawBuffers_ovr_0 := GetFuncOrNil&<procedure(n: Int32; var bufs: DrawBufferMode)>(z_DrawBuffers_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure DrawBuffers(n: Int32; bufs: array of DrawBufferMode);
    begin
      z_DrawBuffers_ovr_0(n, bufs[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure DrawBuffers(n: Int32; var bufs: DrawBufferMode);
    begin
      z_DrawBuffers_ovr_0(n, bufs);
    end;
    public z_DrawBuffers_ovr_2 := GetFuncOrNil&<procedure(n: Int32; bufs: IntPtr)>(z_DrawBuffers_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure DrawBuffers(n: Int32; bufs: IntPtr);
    begin
      z_DrawBuffers_ovr_2(n, bufs);
    end;
    
    // added in gl1.1
    public static procedure z_DrawElements(mode: PrimitiveType; count: Int32; type: DrawElementsType; indices: IntPtr);
    external 'opengl32.dll' name 'glDrawElements';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure DrawElements(mode: PrimitiveType; count: Int32; type: DrawElementsType; indices: IntPtr) := z_DrawElements;
    
    // added in gl3.2
    public z_DrawElementsBaseVertex_adr := GetFuncAdr('glDrawElementsBaseVertex');
    public z_DrawElementsBaseVertex_ovr_0 := GetFuncOrNil&<procedure(mode: PrimitiveType; count: Int32; type: DrawElementsType; indices: IntPtr; basevertex: Int32)>(z_DrawElementsBaseVertex_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure DrawElementsBaseVertex(mode: PrimitiveType; count: Int32; type: DrawElementsType; indices: IntPtr; basevertex: Int32);
    begin
      z_DrawElementsBaseVertex_ovr_0(mode, count, type, indices, basevertex);
    end;
    
    // added in gl4.0
    public z_DrawElementsIndirect_adr := GetFuncAdr('glDrawElementsIndirect');
    public z_DrawElementsIndirect_ovr_0 := GetFuncOrNil&<procedure(mode: PrimitiveType; type: DrawElementsType; indirect: IntPtr)>(z_DrawElementsIndirect_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure DrawElementsIndirect(mode: PrimitiveType; type: DrawElementsType; indirect: IntPtr);
    begin
      z_DrawElementsIndirect_ovr_0(mode, type, indirect);
    end;
    
    // added in gl3.1
    public z_DrawElementsInstanced_adr := GetFuncAdr('glDrawElementsInstanced');
    public z_DrawElementsInstanced_ovr_0 := GetFuncOrNil&<procedure(mode: PrimitiveType; count: Int32; type: DrawElementsType; indices: IntPtr; instancecount: Int32)>(z_DrawElementsInstanced_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure DrawElementsInstanced(mode: PrimitiveType; count: Int32; type: DrawElementsType; indices: IntPtr; instancecount: Int32);
    begin
      z_DrawElementsInstanced_ovr_0(mode, count, type, indices, instancecount);
    end;
    
    // added in gl4.2
    public z_DrawElementsInstancedBaseInstance_adr := GetFuncAdr('glDrawElementsInstancedBaseInstance');
    public z_DrawElementsInstancedBaseInstance_ovr_0 := GetFuncOrNil&<procedure(mode: PrimitiveType; count: Int32; type: PrimitiveType; indices: IntPtr; instancecount: Int32; baseinstance: UInt32)>(z_DrawElementsInstancedBaseInstance_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure DrawElementsInstancedBaseInstance(mode: PrimitiveType; count: Int32; type: PrimitiveType; indices: IntPtr; instancecount: Int32; baseinstance: UInt32);
    begin
      z_DrawElementsInstancedBaseInstance_ovr_0(mode, count, type, indices, instancecount, baseinstance);
    end;
    
    // added in gl3.2
    public z_DrawElementsInstancedBaseVertex_adr := GetFuncAdr('glDrawElementsInstancedBaseVertex');
    public z_DrawElementsInstancedBaseVertex_ovr_0 := GetFuncOrNil&<procedure(mode: PrimitiveType; count: Int32; type: DrawElementsType; indices: IntPtr; instancecount: Int32; basevertex: Int32)>(z_DrawElementsInstancedBaseVertex_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure DrawElementsInstancedBaseVertex(mode: PrimitiveType; count: Int32; type: DrawElementsType; indices: IntPtr; instancecount: Int32; basevertex: Int32);
    begin
      z_DrawElementsInstancedBaseVertex_ovr_0(mode, count, type, indices, instancecount, basevertex);
    end;
    
    // added in gl4.2
    public z_DrawElementsInstancedBaseVertexBaseInstance_adr := GetFuncAdr('glDrawElementsInstancedBaseVertexBaseInstance');
    public z_DrawElementsInstancedBaseVertexBaseInstance_ovr_0 := GetFuncOrNil&<procedure(mode: PrimitiveType; count: Int32; type: DrawElementsType; indices: IntPtr; instancecount: Int32; basevertex: Int32; baseinstance: UInt32)>(z_DrawElementsInstancedBaseVertexBaseInstance_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure DrawElementsInstancedBaseVertexBaseInstance(mode: PrimitiveType; count: Int32; type: DrawElementsType; indices: IntPtr; instancecount: Int32; basevertex: Int32; baseinstance: UInt32);
    begin
      z_DrawElementsInstancedBaseVertexBaseInstance_ovr_0(mode, count, type, indices, instancecount, basevertex, baseinstance);
    end;
    
    // added in gl1.2
    public z_DrawRangeElements_adr := GetFuncAdr('glDrawRangeElements');
    public z_DrawRangeElements_ovr_0 := GetFuncOrNil&<procedure(mode: PrimitiveType; start: UInt32; end: UInt32; count: Int32; type: DrawElementsType; indices: IntPtr)>(z_DrawRangeElements_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure DrawRangeElements(mode: PrimitiveType; start: UInt32; end: UInt32; count: Int32; type: DrawElementsType; indices: IntPtr);
    begin
      z_DrawRangeElements_ovr_0(mode, start, end, count, type, indices);
    end;
    
    // added in gl3.2
    public z_DrawRangeElementsBaseVertex_adr := GetFuncAdr('glDrawRangeElementsBaseVertex');
    public z_DrawRangeElementsBaseVertex_ovr_0 := GetFuncOrNil&<procedure(mode: PrimitiveType; start: UInt32; end: UInt32; count: Int32; type: DrawElementsType; indices: IntPtr; basevertex: Int32)>(z_DrawRangeElementsBaseVertex_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure DrawRangeElementsBaseVertex(mode: PrimitiveType; start: UInt32; end: UInt32; count: Int32; type: DrawElementsType; indices: IntPtr; basevertex: Int32);
    begin
      z_DrawRangeElementsBaseVertex_ovr_0(mode, start, end, count, type, indices, basevertex);
    end;
    
    // added in gl4.0
    public z_DrawTransformFeedback_adr := GetFuncAdr('glDrawTransformFeedback');
    public z_DrawTransformFeedback_ovr_0 := GetFuncOrNil&<procedure(mode: PrimitiveType; id: UInt32)>(z_DrawTransformFeedback_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure DrawTransformFeedback(mode: PrimitiveType; id: UInt32);
    begin
      z_DrawTransformFeedback_ovr_0(mode, id);
    end;
    
    // added in gl4.2
    public z_DrawTransformFeedbackInstanced_adr := GetFuncAdr('glDrawTransformFeedbackInstanced');
    public z_DrawTransformFeedbackInstanced_ovr_0 := GetFuncOrNil&<procedure(mode: PrimitiveType; id: UInt32; instancecount: Int32)>(z_DrawTransformFeedbackInstanced_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure DrawTransformFeedbackInstanced(mode: PrimitiveType; id: UInt32; instancecount: Int32);
    begin
      z_DrawTransformFeedbackInstanced_ovr_0(mode, id, instancecount);
    end;
    
    // added in gl4.0
    public z_DrawTransformFeedbackStream_adr := GetFuncAdr('glDrawTransformFeedbackStream');
    public z_DrawTransformFeedbackStream_ovr_0 := GetFuncOrNil&<procedure(mode: PrimitiveType; id: UInt32; stream: UInt32)>(z_DrawTransformFeedbackStream_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure DrawTransformFeedbackStream(mode: PrimitiveType; id: UInt32; stream: UInt32);
    begin
      z_DrawTransformFeedbackStream_ovr_0(mode, id, stream);
    end;
    
    // added in gl4.2
    public z_DrawTransformFeedbackStreamInstanced_adr := GetFuncAdr('glDrawTransformFeedbackStreamInstanced');
    public z_DrawTransformFeedbackStreamInstanced_ovr_0 := GetFuncOrNil&<procedure(mode: PrimitiveType; id: UInt32; stream: UInt32; instancecount: Int32)>(z_DrawTransformFeedbackStreamInstanced_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure DrawTransformFeedbackStreamInstanced(mode: PrimitiveType; id: UInt32; stream: UInt32; instancecount: Int32);
    begin
      z_DrawTransformFeedbackStreamInstanced_ovr_0(mode, id, stream, instancecount);
    end;
    
    // added in gl1.0
    public static procedure z_Enable(cap: EnableCap);
    external 'opengl32.dll' name 'glEnable';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Enable(cap: EnableCap) := z_Enable;
    
    // added in gl3.0
    public z_Enablei_adr := GetFuncAdr('glEnablei');
    public z_Enablei_ovr_0 := GetFuncOrNil&<procedure(target: EnableCap; index: UInt32)>(z_Enablei_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Enablei(target: EnableCap; index: UInt32);
    begin
      z_Enablei_ovr_0(target, index);
    end;
    
    // added in gl4.5
    public z_EnableVertexArrayAttrib_adr := GetFuncAdr('glEnableVertexArrayAttrib');
    public z_EnableVertexArrayAttrib_ovr_0 := GetFuncOrNil&<procedure(vaobj: UInt32; index: UInt32)>(z_EnableVertexArrayAttrib_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure EnableVertexArrayAttrib(vaobj: UInt32; index: UInt32);
    begin
      z_EnableVertexArrayAttrib_ovr_0(vaobj, index);
    end;
    
    // added in gl2.0
    public z_EnableVertexAttribArray_adr := GetFuncAdr('glEnableVertexAttribArray');
    public z_EnableVertexAttribArray_ovr_0 := GetFuncOrNil&<procedure(index: UInt32)>(z_EnableVertexAttribArray_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure EnableVertexAttribArray(index: UInt32);
    begin
      z_EnableVertexAttribArray_ovr_0(index);
    end;
    
    // added in gl3.0
    public z_EndConditionalRender_adr := GetFuncAdr('glEndConditionalRender');
    public z_EndConditionalRender_ovr_0 := GetFuncOrNil&<procedure>(z_EndConditionalRender_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure EndConditionalRender;
    begin
      z_EndConditionalRender_ovr_0;
    end;
    
    // added in gl1.5
    public z_EndQuery_adr := GetFuncAdr('glEndQuery');
    public z_EndQuery_ovr_0 := GetFuncOrNil&<procedure(target: QueryTarget)>(z_EndQuery_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure EndQuery(target: QueryTarget);
    begin
      z_EndQuery_ovr_0(target);
    end;
    
    // added in gl4.0
    public z_EndQueryIndexed_adr := GetFuncAdr('glEndQueryIndexed');
    public z_EndQueryIndexed_ovr_0 := GetFuncOrNil&<procedure(target: QueryTarget; index: UInt32)>(z_EndQueryIndexed_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure EndQueryIndexed(target: QueryTarget; index: UInt32);
    begin
      z_EndQueryIndexed_ovr_0(target, index);
    end;
    
    // added in gl3.0
    public z_EndTransformFeedback_adr := GetFuncAdr('glEndTransformFeedback');
    public z_EndTransformFeedback_ovr_0 := GetFuncOrNil&<procedure>(z_EndTransformFeedback_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure EndTransformFeedback;
    begin
      z_EndTransformFeedback_ovr_0;
    end;
    
    // added in gl3.2
    public z_FenceSync_adr := GetFuncAdr('glFenceSync');
    public z_FenceSync_ovr_0 := GetFuncOrNil&<function(condition: SyncCondition; flags: DummyFlags): GLsync>(z_FenceSync_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function FenceSync(condition: SyncCondition; flags: DummyFlags): GLsync;
    begin
      Result := z_FenceSync_ovr_0(condition, flags);
    end;
    
    // added in gl1.0
    public static procedure z_Finish;
    external 'opengl32.dll' name 'glFinish';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Finish := z_Finish;
    
    // added in gl1.0
    public static procedure z_Flush;
    external 'opengl32.dll' name 'glFlush';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Flush := z_Flush;
    
    // added in gl3.0
    public z_FlushMappedBufferRange_adr := GetFuncAdr('glFlushMappedBufferRange');
    public z_FlushMappedBufferRange_ovr_0 := GetFuncOrNil&<procedure(target: BufferTargetARB; offset: IntPtr; length: IntPtr)>(z_FlushMappedBufferRange_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure FlushMappedBufferRange(target: BufferTargetARB; offset: IntPtr; length: IntPtr);
    begin
      z_FlushMappedBufferRange_ovr_0(target, offset, length);
    end;
    
    // added in gl4.5
    public z_FlushMappedNamedBufferRange_adr := GetFuncAdr('glFlushMappedNamedBufferRange');
    public z_FlushMappedNamedBufferRange_ovr_0 := GetFuncOrNil&<procedure(buffer: UInt32; offset: IntPtr; length: IntPtr)>(z_FlushMappedNamedBufferRange_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure FlushMappedNamedBufferRange(buffer: UInt32; offset: IntPtr; length: IntPtr);
    begin
      z_FlushMappedNamedBufferRange_ovr_0(buffer, offset, length);
    end;
    
    // added in gl4.3
    public z_FramebufferParameteri_adr := GetFuncAdr('glFramebufferParameteri');
    public z_FramebufferParameteri_ovr_0 := GetFuncOrNil&<procedure(target: FramebufferTarget; pname: FramebufferParameterName; param: Int32)>(z_FramebufferParameteri_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure FramebufferParameteri(target: FramebufferTarget; pname: FramebufferParameterName; param: Int32);
    begin
      z_FramebufferParameteri_ovr_0(target, pname, param);
    end;
    
    // added in gl3.0
    public z_FramebufferRenderbuffer_adr := GetFuncAdr('glFramebufferRenderbuffer');
    public z_FramebufferRenderbuffer_ovr_0 := GetFuncOrNil&<procedure(target: FramebufferTarget; attachment: FramebufferAttachment; renderbuffertarget: RenderbufferTarget; renderbuffer: UInt32)>(z_FramebufferRenderbuffer_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure FramebufferRenderbuffer(target: FramebufferTarget; attachment: FramebufferAttachment; renderbuffertarget: RenderbufferTarget; renderbuffer: UInt32);
    begin
      z_FramebufferRenderbuffer_ovr_0(target, attachment, renderbuffertarget, renderbuffer);
    end;
    
    // added in gl3.2
    public z_FramebufferTexture_adr := GetFuncAdr('glFramebufferTexture');
    public z_FramebufferTexture_ovr_0 := GetFuncOrNil&<procedure(target: FramebufferTarget; attachment: FramebufferAttachment; texture: UInt32; level: Int32)>(z_FramebufferTexture_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure FramebufferTexture(target: FramebufferTarget; attachment: FramebufferAttachment; texture: UInt32; level: Int32);
    begin
      z_FramebufferTexture_ovr_0(target, attachment, texture, level);
    end;
    
    // added in gl3.0
    public z_FramebufferTexture1D_adr := GetFuncAdr('glFramebufferTexture1D');
    public z_FramebufferTexture1D_ovr_0 := GetFuncOrNil&<procedure(target: FramebufferTarget; attachment: FramebufferAttachment; textarget: TextureTarget; texture: UInt32; level: Int32)>(z_FramebufferTexture1D_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure FramebufferTexture1D(target: FramebufferTarget; attachment: FramebufferAttachment; textarget: TextureTarget; texture: UInt32; level: Int32);
    begin
      z_FramebufferTexture1D_ovr_0(target, attachment, textarget, texture, level);
    end;
    
    // added in gl3.0
    public z_FramebufferTexture2D_adr := GetFuncAdr('glFramebufferTexture2D');
    public z_FramebufferTexture2D_ovr_0 := GetFuncOrNil&<procedure(target: FramebufferTarget; attachment: FramebufferAttachment; textarget: TextureTarget; texture: UInt32; level: Int32)>(z_FramebufferTexture2D_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure FramebufferTexture2D(target: FramebufferTarget; attachment: FramebufferAttachment; textarget: TextureTarget; texture: UInt32; level: Int32);
    begin
      z_FramebufferTexture2D_ovr_0(target, attachment, textarget, texture, level);
    end;
    
    // added in gl3.0
    public z_FramebufferTexture3D_adr := GetFuncAdr('glFramebufferTexture3D');
    public z_FramebufferTexture3D_ovr_0 := GetFuncOrNil&<procedure(target: FramebufferTarget; attachment: FramebufferAttachment; textarget: TextureTarget; texture: UInt32; level: Int32; zoffset: Int32)>(z_FramebufferTexture3D_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure FramebufferTexture3D(target: FramebufferTarget; attachment: FramebufferAttachment; textarget: TextureTarget; texture: UInt32; level: Int32; zoffset: Int32);
    begin
      z_FramebufferTexture3D_ovr_0(target, attachment, textarget, texture, level, zoffset);
    end;
    
    // added in gl3.0
    public z_FramebufferTextureLayer_adr := GetFuncAdr('glFramebufferTextureLayer');
    public z_FramebufferTextureLayer_ovr_0 := GetFuncOrNil&<procedure(target: FramebufferTarget; attachment: FramebufferAttachment; texture: UInt32; level: Int32; layer: Int32)>(z_FramebufferTextureLayer_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure FramebufferTextureLayer(target: FramebufferTarget; attachment: FramebufferAttachment; texture: UInt32; level: Int32; layer: Int32);
    begin
      z_FramebufferTextureLayer_ovr_0(target, attachment, texture, level, layer);
    end;
    
    // added in gl1.0
    public static procedure z_FrontFace(mode: FrontFaceDirection);
    external 'opengl32.dll' name 'glFrontFace';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure FrontFace(mode: FrontFaceDirection) := z_FrontFace;
    
    // added in gl1.5
    public z_GenBuffers_adr := GetFuncAdr('glGenBuffers');
    public z_GenBuffers_ovr_0 := GetFuncOrNil&<procedure(n: Int32; var buffers: UInt32)>(z_GenBuffers_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GenBuffers(n: Int32; buffers: array of UInt32);
    begin
      z_GenBuffers_ovr_0(n, buffers[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GenBuffers(n: Int32; var buffers: UInt32);
    begin
      z_GenBuffers_ovr_0(n, buffers);
    end;
    public z_GenBuffers_ovr_2 := GetFuncOrNil&<procedure(n: Int32; buffers: IntPtr)>(z_GenBuffers_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GenBuffers(n: Int32; buffers: IntPtr);
    begin
      z_GenBuffers_ovr_2(n, buffers);
    end;
    
    // added in gl3.0
    public z_GenerateMipmap_adr := GetFuncAdr('glGenerateMipmap');
    public z_GenerateMipmap_ovr_0 := GetFuncOrNil&<procedure(target: TextureTarget)>(z_GenerateMipmap_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GenerateMipmap(target: TextureTarget);
    begin
      z_GenerateMipmap_ovr_0(target);
    end;
    
    // added in gl4.5
    public z_GenerateTextureMipmap_adr := GetFuncAdr('glGenerateTextureMipmap');
    public z_GenerateTextureMipmap_ovr_0 := GetFuncOrNil&<procedure(texture: UInt32)>(z_GenerateTextureMipmap_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GenerateTextureMipmap(texture: UInt32);
    begin
      z_GenerateTextureMipmap_ovr_0(texture);
    end;
    
    // added in gl3.0
    public z_GenFramebuffers_adr := GetFuncAdr('glGenFramebuffers');
    public z_GenFramebuffers_ovr_0 := GetFuncOrNil&<procedure(n: Int32; var framebuffers: UInt32)>(z_GenFramebuffers_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GenFramebuffers(n: Int32; framebuffers: array of UInt32);
    begin
      z_GenFramebuffers_ovr_0(n, framebuffers[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GenFramebuffers(n: Int32; var framebuffers: UInt32);
    begin
      z_GenFramebuffers_ovr_0(n, framebuffers);
    end;
    public z_GenFramebuffers_ovr_2 := GetFuncOrNil&<procedure(n: Int32; framebuffers: IntPtr)>(z_GenFramebuffers_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GenFramebuffers(n: Int32; framebuffers: IntPtr);
    begin
      z_GenFramebuffers_ovr_2(n, framebuffers);
    end;
    
    // added in gl4.1
    public z_GenProgramPipelines_adr := GetFuncAdr('glGenProgramPipelines');
    public z_GenProgramPipelines_ovr_0 := GetFuncOrNil&<procedure(n: Int32; var pipelines: UInt32)>(z_GenProgramPipelines_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GenProgramPipelines(n: Int32; pipelines: array of UInt32);
    begin
      z_GenProgramPipelines_ovr_0(n, pipelines[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GenProgramPipelines(n: Int32; var pipelines: UInt32);
    begin
      z_GenProgramPipelines_ovr_0(n, pipelines);
    end;
    public z_GenProgramPipelines_ovr_2 := GetFuncOrNil&<procedure(n: Int32; pipelines: IntPtr)>(z_GenProgramPipelines_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GenProgramPipelines(n: Int32; pipelines: IntPtr);
    begin
      z_GenProgramPipelines_ovr_2(n, pipelines);
    end;
    
    // added in gl1.5
    public z_GenQueries_adr := GetFuncAdr('glGenQueries');
    public z_GenQueries_ovr_0 := GetFuncOrNil&<procedure(n: Int32; var ids: UInt32)>(z_GenQueries_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GenQueries(n: Int32; ids: array of UInt32);
    begin
      z_GenQueries_ovr_0(n, ids[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GenQueries(n: Int32; var ids: UInt32);
    begin
      z_GenQueries_ovr_0(n, ids);
    end;
    public z_GenQueries_ovr_2 := GetFuncOrNil&<procedure(n: Int32; ids: IntPtr)>(z_GenQueries_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GenQueries(n: Int32; ids: IntPtr);
    begin
      z_GenQueries_ovr_2(n, ids);
    end;
    
    // added in gl3.0
    public z_GenRenderbuffers_adr := GetFuncAdr('glGenRenderbuffers');
    public z_GenRenderbuffers_ovr_0 := GetFuncOrNil&<procedure(n: Int32; var renderbuffers: UInt32)>(z_GenRenderbuffers_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GenRenderbuffers(n: Int32; renderbuffers: array of UInt32);
    begin
      z_GenRenderbuffers_ovr_0(n, renderbuffers[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GenRenderbuffers(n: Int32; var renderbuffers: UInt32);
    begin
      z_GenRenderbuffers_ovr_0(n, renderbuffers);
    end;
    public z_GenRenderbuffers_ovr_2 := GetFuncOrNil&<procedure(n: Int32; renderbuffers: IntPtr)>(z_GenRenderbuffers_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GenRenderbuffers(n: Int32; renderbuffers: IntPtr);
    begin
      z_GenRenderbuffers_ovr_2(n, renderbuffers);
    end;
    
    // added in gl3.3
    public z_GenSamplers_adr := GetFuncAdr('glGenSamplers');
    public z_GenSamplers_ovr_0 := GetFuncOrNil&<procedure(count: Int32; var samplers: UInt32)>(z_GenSamplers_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GenSamplers(count: Int32; samplers: array of UInt32);
    begin
      z_GenSamplers_ovr_0(count, samplers[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GenSamplers(count: Int32; var samplers: UInt32);
    begin
      z_GenSamplers_ovr_0(count, samplers);
    end;
    public z_GenSamplers_ovr_2 := GetFuncOrNil&<procedure(count: Int32; samplers: IntPtr)>(z_GenSamplers_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GenSamplers(count: Int32; samplers: IntPtr);
    begin
      z_GenSamplers_ovr_2(count, samplers);
    end;
    
    // added in gl1.1
    public static procedure z_GenTextures(n: Int32; [MarshalAs(UnmanagedType.LPArray)] textures: array of UInt32);
    external 'opengl32.dll' name 'glGenTextures';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GenTextures(n: Int32; textures: array of UInt32) := z_GenTextures;
    public static procedure z_GenTextures(n: Int32; var textures: UInt32);
    external 'opengl32.dll' name 'glGenTextures';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GenTextures(n: Int32; var textures: UInt32) := z_GenTextures;
    public static procedure z_GenTextures(n: Int32; textures: IntPtr);
    external 'opengl32.dll' name 'glGenTextures';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GenTextures(n: Int32; textures: IntPtr) := z_GenTextures;
    
    // added in gl4.0
    public z_GenTransformFeedbacks_adr := GetFuncAdr('glGenTransformFeedbacks');
    public z_GenTransformFeedbacks_ovr_0 := GetFuncOrNil&<procedure(n: Int32; var ids: UInt32)>(z_GenTransformFeedbacks_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GenTransformFeedbacks(n: Int32; ids: array of UInt32);
    begin
      z_GenTransformFeedbacks_ovr_0(n, ids[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GenTransformFeedbacks(n: Int32; var ids: UInt32);
    begin
      z_GenTransformFeedbacks_ovr_0(n, ids);
    end;
    public z_GenTransformFeedbacks_ovr_2 := GetFuncOrNil&<procedure(n: Int32; ids: IntPtr)>(z_GenTransformFeedbacks_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GenTransformFeedbacks(n: Int32; ids: IntPtr);
    begin
      z_GenTransformFeedbacks_ovr_2(n, ids);
    end;
    
    // added in gl3.0
    public z_GenVertexArrays_adr := GetFuncAdr('glGenVertexArrays');
    public z_GenVertexArrays_ovr_0 := GetFuncOrNil&<procedure(n: Int32; var arrays: UInt32)>(z_GenVertexArrays_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GenVertexArrays(n: Int32; arrays: array of UInt32);
    begin
      z_GenVertexArrays_ovr_0(n, arrays[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GenVertexArrays(n: Int32; var arrays: UInt32);
    begin
      z_GenVertexArrays_ovr_0(n, arrays);
    end;
    public z_GenVertexArrays_ovr_2 := GetFuncOrNil&<procedure(n: Int32; arrays: IntPtr)>(z_GenVertexArrays_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GenVertexArrays(n: Int32; arrays: IntPtr);
    begin
      z_GenVertexArrays_ovr_2(n, arrays);
    end;
    
    // added in gl4.2
    public z_GetActiveAtomicCounterBufferiv_adr := GetFuncAdr('glGetActiveAtomicCounterBufferiv');
    public z_GetActiveAtomicCounterBufferiv_ovr_0 := GetFuncOrNil&<procedure(program: UInt32; bufferIndex: UInt32; pname: AtomicCounterBufferPName; var params: Int32)>(z_GetActiveAtomicCounterBufferiv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetActiveAtomicCounterBufferiv(program: UInt32; bufferIndex: UInt32; pname: AtomicCounterBufferPName; params: array of Int32);
    begin
      z_GetActiveAtomicCounterBufferiv_ovr_0(program, bufferIndex, pname, params[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetActiveAtomicCounterBufferiv(program: UInt32; bufferIndex: UInt32; pname: AtomicCounterBufferPName; var params: Int32);
    begin
      z_GetActiveAtomicCounterBufferiv_ovr_0(program, bufferIndex, pname, params);
    end;
    public z_GetActiveAtomicCounterBufferiv_ovr_2 := GetFuncOrNil&<procedure(program: UInt32; bufferIndex: UInt32; pname: AtomicCounterBufferPName; params: IntPtr)>(z_GetActiveAtomicCounterBufferiv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetActiveAtomicCounterBufferiv(program: UInt32; bufferIndex: UInt32; pname: AtomicCounterBufferPName; params: IntPtr);
    begin
      z_GetActiveAtomicCounterBufferiv_ovr_2(program, bufferIndex, pname, params);
    end;
    
    // added in gl2.0
    public z_GetActiveAttrib_adr := GetFuncAdr('glGetActiveAttrib');
    public z_GetActiveAttrib_ovr_0 := GetFuncOrNil&<procedure(program: UInt32; index: UInt32; bufSize: Int32; var length: Int32; var size: Int32; var type: AttributeType; name: IntPtr)>(z_GetActiveAttrib_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetActiveAttrib(program: UInt32; index: UInt32; bufSize: Int32; length: array of Int32; size: array of Int32; type: array of AttributeType; name: string);
    begin
      var par_7_str_ptr := Marshal.StringToHGlobalAnsi(name);
      z_GetActiveAttrib_ovr_0(program, index, bufSize, length[0], size[0], type[0], par_7_str_ptr);
      Marshal.FreeHGlobal(par_7_str_ptr);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetActiveAttrib(program: UInt32; index: UInt32; bufSize: Int32; length: array of Int32; size: array of Int32; type: array of AttributeType; name: IntPtr);
    begin
      z_GetActiveAttrib_ovr_0(program, index, bufSize, length[0], size[0], type[0], name);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetActiveAttrib(program: UInt32; index: UInt32; bufSize: Int32; length: array of Int32; size: array of Int32; var type: AttributeType; name: string);
    begin
      var par_7_str_ptr := Marshal.StringToHGlobalAnsi(name);
      z_GetActiveAttrib_ovr_0(program, index, bufSize, length[0], size[0], type, par_7_str_ptr);
      Marshal.FreeHGlobal(par_7_str_ptr);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetActiveAttrib(program: UInt32; index: UInt32; bufSize: Int32; length: array of Int32; size: array of Int32; var type: AttributeType; name: IntPtr);
    begin
      z_GetActiveAttrib_ovr_0(program, index, bufSize, length[0], size[0], type, name);
    end;
    public z_GetActiveAttrib_ovr_4 := GetFuncOrNil&<procedure(program: UInt32; index: UInt32; bufSize: Int32; var length: Int32; var size: Int32; type: IntPtr; name: IntPtr)>(z_GetActiveAttrib_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetActiveAttrib(program: UInt32; index: UInt32; bufSize: Int32; length: array of Int32; size: array of Int32; type: IntPtr; name: string);
    begin
      var par_7_str_ptr := Marshal.StringToHGlobalAnsi(name);
      z_GetActiveAttrib_ovr_4(program, index, bufSize, length[0], size[0], type, par_7_str_ptr);
      Marshal.FreeHGlobal(par_7_str_ptr);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetActiveAttrib(program: UInt32; index: UInt32; bufSize: Int32; length: array of Int32; size: array of Int32; type: IntPtr; name: IntPtr);
    begin
      z_GetActiveAttrib_ovr_4(program, index, bufSize, length[0], size[0], type, name);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetActiveAttrib(program: UInt32; index: UInt32; bufSize: Int32; length: array of Int32; var size: Int32; type: array of AttributeType; name: string);
    begin
      var par_7_str_ptr := Marshal.StringToHGlobalAnsi(name);
      z_GetActiveAttrib_ovr_0(program, index, bufSize, length[0], size, type[0], par_7_str_ptr);
      Marshal.FreeHGlobal(par_7_str_ptr);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetActiveAttrib(program: UInt32; index: UInt32; bufSize: Int32; length: array of Int32; var size: Int32; type: array of AttributeType; name: IntPtr);
    begin
      z_GetActiveAttrib_ovr_0(program, index, bufSize, length[0], size, type[0], name);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetActiveAttrib(program: UInt32; index: UInt32; bufSize: Int32; length: array of Int32; var size: Int32; var type: AttributeType; name: string);
    begin
      var par_7_str_ptr := Marshal.StringToHGlobalAnsi(name);
      z_GetActiveAttrib_ovr_0(program, index, bufSize, length[0], size, type, par_7_str_ptr);
      Marshal.FreeHGlobal(par_7_str_ptr);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetActiveAttrib(program: UInt32; index: UInt32; bufSize: Int32; length: array of Int32; var size: Int32; var type: AttributeType; name: IntPtr);
    begin
      z_GetActiveAttrib_ovr_0(program, index, bufSize, length[0], size, type, name);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetActiveAttrib(program: UInt32; index: UInt32; bufSize: Int32; length: array of Int32; var size: Int32; type: IntPtr; name: string);
    begin
      var par_7_str_ptr := Marshal.StringToHGlobalAnsi(name);
      z_GetActiveAttrib_ovr_4(program, index, bufSize, length[0], size, type, par_7_str_ptr);
      Marshal.FreeHGlobal(par_7_str_ptr);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetActiveAttrib(program: UInt32; index: UInt32; bufSize: Int32; length: array of Int32; var size: Int32; type: IntPtr; name: IntPtr);
    begin
      z_GetActiveAttrib_ovr_4(program, index, bufSize, length[0], size, type, name);
    end;
    public z_GetActiveAttrib_ovr_12 := GetFuncOrNil&<procedure(program: UInt32; index: UInt32; bufSize: Int32; var length: Int32; size: IntPtr; var type: AttributeType; name: IntPtr)>(z_GetActiveAttrib_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetActiveAttrib(program: UInt32; index: UInt32; bufSize: Int32; length: array of Int32; size: IntPtr; type: array of AttributeType; name: string);
    begin
      var par_7_str_ptr := Marshal.StringToHGlobalAnsi(name);
      z_GetActiveAttrib_ovr_12(program, index, bufSize, length[0], size, type[0], par_7_str_ptr);
      Marshal.FreeHGlobal(par_7_str_ptr);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetActiveAttrib(program: UInt32; index: UInt32; bufSize: Int32; length: array of Int32; size: IntPtr; type: array of AttributeType; name: IntPtr);
    begin
      z_GetActiveAttrib_ovr_12(program, index, bufSize, length[0], size, type[0], name);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetActiveAttrib(program: UInt32; index: UInt32; bufSize: Int32; length: array of Int32; size: IntPtr; var type: AttributeType; name: string);
    begin
      var par_7_str_ptr := Marshal.StringToHGlobalAnsi(name);
      z_GetActiveAttrib_ovr_12(program, index, bufSize, length[0], size, type, par_7_str_ptr);
      Marshal.FreeHGlobal(par_7_str_ptr);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetActiveAttrib(program: UInt32; index: UInt32; bufSize: Int32; length: array of Int32; size: IntPtr; var type: AttributeType; name: IntPtr);
    begin
      z_GetActiveAttrib_ovr_12(program, index, bufSize, length[0], size, type, name);
    end;
    public z_GetActiveAttrib_ovr_16 := GetFuncOrNil&<procedure(program: UInt32; index: UInt32; bufSize: Int32; var length: Int32; size: IntPtr; type: IntPtr; name: IntPtr)>(z_GetActiveAttrib_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetActiveAttrib(program: UInt32; index: UInt32; bufSize: Int32; length: array of Int32; size: IntPtr; type: IntPtr; name: string);
    begin
      var par_7_str_ptr := Marshal.StringToHGlobalAnsi(name);
      z_GetActiveAttrib_ovr_16(program, index, bufSize, length[0], size, type, par_7_str_ptr);
      Marshal.FreeHGlobal(par_7_str_ptr);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetActiveAttrib(program: UInt32; index: UInt32; bufSize: Int32; length: array of Int32; size: IntPtr; type: IntPtr; name: IntPtr);
    begin
      z_GetActiveAttrib_ovr_16(program, index, bufSize, length[0], size, type, name);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetActiveAttrib(program: UInt32; index: UInt32; bufSize: Int32; var length: Int32; size: array of Int32; type: array of AttributeType; name: string);
    begin
      var par_7_str_ptr := Marshal.StringToHGlobalAnsi(name);
      z_GetActiveAttrib_ovr_0(program, index, bufSize, length, size[0], type[0], par_7_str_ptr);
      Marshal.FreeHGlobal(par_7_str_ptr);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetActiveAttrib(program: UInt32; index: UInt32; bufSize: Int32; var length: Int32; size: array of Int32; type: array of AttributeType; name: IntPtr);
    begin
      z_GetActiveAttrib_ovr_0(program, index, bufSize, length, size[0], type[0], name);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetActiveAttrib(program: UInt32; index: UInt32; bufSize: Int32; var length: Int32; size: array of Int32; var type: AttributeType; name: string);
    begin
      var par_7_str_ptr := Marshal.StringToHGlobalAnsi(name);
      z_GetActiveAttrib_ovr_0(program, index, bufSize, length, size[0], type, par_7_str_ptr);
      Marshal.FreeHGlobal(par_7_str_ptr);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetActiveAttrib(program: UInt32; index: UInt32; bufSize: Int32; var length: Int32; size: array of Int32; var type: AttributeType; name: IntPtr);
    begin
      z_GetActiveAttrib_ovr_0(program, index, bufSize, length, size[0], type, name);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetActiveAttrib(program: UInt32; index: UInt32; bufSize: Int32; var length: Int32; size: array of Int32; type: IntPtr; name: string);
    begin
      var par_7_str_ptr := Marshal.StringToHGlobalAnsi(name);
      z_GetActiveAttrib_ovr_4(program, index, bufSize, length, size[0], type, par_7_str_ptr);
      Marshal.FreeHGlobal(par_7_str_ptr);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetActiveAttrib(program: UInt32; index: UInt32; bufSize: Int32; var length: Int32; size: array of Int32; type: IntPtr; name: IntPtr);
    begin
      z_GetActiveAttrib_ovr_4(program, index, bufSize, length, size[0], type, name);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetActiveAttrib(program: UInt32; index: UInt32; bufSize: Int32; var length: Int32; var size: Int32; type: array of AttributeType; name: string);
    begin
      var par_7_str_ptr := Marshal.StringToHGlobalAnsi(name);
      z_GetActiveAttrib_ovr_0(program, index, bufSize, length, size, type[0], par_7_str_ptr);
      Marshal.FreeHGlobal(par_7_str_ptr);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetActiveAttrib(program: UInt32; index: UInt32; bufSize: Int32; var length: Int32; var size: Int32; type: array of AttributeType; name: IntPtr);
    begin
      z_GetActiveAttrib_ovr_0(program, index, bufSize, length, size, type[0], name);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetActiveAttrib(program: UInt32; index: UInt32; bufSize: Int32; var length: Int32; var size: Int32; var type: AttributeType; name: string);
    begin
      var par_7_str_ptr := Marshal.StringToHGlobalAnsi(name);
      z_GetActiveAttrib_ovr_0(program, index, bufSize, length, size, type, par_7_str_ptr);
      Marshal.FreeHGlobal(par_7_str_ptr);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetActiveAttrib(program: UInt32; index: UInt32; bufSize: Int32; var length: Int32; var size: Int32; var type: AttributeType; name: IntPtr);
    begin
      z_GetActiveAttrib_ovr_0(program, index, bufSize, length, size, type, name);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetActiveAttrib(program: UInt32; index: UInt32; bufSize: Int32; var length: Int32; var size: Int32; type: IntPtr; name: string);
    begin
      var par_7_str_ptr := Marshal.StringToHGlobalAnsi(name);
      z_GetActiveAttrib_ovr_4(program, index, bufSize, length, size, type, par_7_str_ptr);
      Marshal.FreeHGlobal(par_7_str_ptr);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetActiveAttrib(program: UInt32; index: UInt32; bufSize: Int32; var length: Int32; var size: Int32; type: IntPtr; name: IntPtr);
    begin
      z_GetActiveAttrib_ovr_4(program, index, bufSize, length, size, type, name);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetActiveAttrib(program: UInt32; index: UInt32; bufSize: Int32; var length: Int32; size: IntPtr; type: array of AttributeType; name: string);
    begin
      var par_7_str_ptr := Marshal.StringToHGlobalAnsi(name);
      z_GetActiveAttrib_ovr_12(program, index, bufSize, length, size, type[0], par_7_str_ptr);
      Marshal.FreeHGlobal(par_7_str_ptr);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetActiveAttrib(program: UInt32; index: UInt32; bufSize: Int32; var length: Int32; size: IntPtr; type: array of AttributeType; name: IntPtr);
    begin
      z_GetActiveAttrib_ovr_12(program, index, bufSize, length, size, type[0], name);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetActiveAttrib(program: UInt32; index: UInt32; bufSize: Int32; var length: Int32; size: IntPtr; var type: AttributeType; name: string);
    begin
      var par_7_str_ptr := Marshal.StringToHGlobalAnsi(name);
      z_GetActiveAttrib_ovr_12(program, index, bufSize, length, size, type, par_7_str_ptr);
      Marshal.FreeHGlobal(par_7_str_ptr);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetActiveAttrib(program: UInt32; index: UInt32; bufSize: Int32; var length: Int32; size: IntPtr; var type: AttributeType; name: IntPtr);
    begin
      z_GetActiveAttrib_ovr_12(program, index, bufSize, length, size, type, name);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetActiveAttrib(program: UInt32; index: UInt32; bufSize: Int32; var length: Int32; size: IntPtr; type: IntPtr; name: string);
    begin
      var par_7_str_ptr := Marshal.StringToHGlobalAnsi(name);
      z_GetActiveAttrib_ovr_16(program, index, bufSize, length, size, type, par_7_str_ptr);
      Marshal.FreeHGlobal(par_7_str_ptr);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetActiveAttrib(program: UInt32; index: UInt32; bufSize: Int32; var length: Int32; size: IntPtr; type: IntPtr; name: IntPtr);
    begin
      z_GetActiveAttrib_ovr_16(program, index, bufSize, length, size, type, name);
    end;
    public z_GetActiveAttrib_ovr_36 := GetFuncOrNil&<procedure(program: UInt32; index: UInt32; bufSize: Int32; length: IntPtr; var size: Int32; var type: AttributeType; name: IntPtr)>(z_GetActiveAttrib_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetActiveAttrib(program: UInt32; index: UInt32; bufSize: Int32; length: IntPtr; size: array of Int32; type: array of AttributeType; name: string);
    begin
      var par_7_str_ptr := Marshal.StringToHGlobalAnsi(name);
      z_GetActiveAttrib_ovr_36(program, index, bufSize, length, size[0], type[0], par_7_str_ptr);
      Marshal.FreeHGlobal(par_7_str_ptr);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetActiveAttrib(program: UInt32; index: UInt32; bufSize: Int32; length: IntPtr; size: array of Int32; type: array of AttributeType; name: IntPtr);
    begin
      z_GetActiveAttrib_ovr_36(program, index, bufSize, length, size[0], type[0], name);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetActiveAttrib(program: UInt32; index: UInt32; bufSize: Int32; length: IntPtr; size: array of Int32; var type: AttributeType; name: string);
    begin
      var par_7_str_ptr := Marshal.StringToHGlobalAnsi(name);
      z_GetActiveAttrib_ovr_36(program, index, bufSize, length, size[0], type, par_7_str_ptr);
      Marshal.FreeHGlobal(par_7_str_ptr);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetActiveAttrib(program: UInt32; index: UInt32; bufSize: Int32; length: IntPtr; size: array of Int32; var type: AttributeType; name: IntPtr);
    begin
      z_GetActiveAttrib_ovr_36(program, index, bufSize, length, size[0], type, name);
    end;
    public z_GetActiveAttrib_ovr_40 := GetFuncOrNil&<procedure(program: UInt32; index: UInt32; bufSize: Int32; length: IntPtr; var size: Int32; type: IntPtr; name: IntPtr)>(z_GetActiveAttrib_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetActiveAttrib(program: UInt32; index: UInt32; bufSize: Int32; length: IntPtr; size: array of Int32; type: IntPtr; name: string);
    begin
      var par_7_str_ptr := Marshal.StringToHGlobalAnsi(name);
      z_GetActiveAttrib_ovr_40(program, index, bufSize, length, size[0], type, par_7_str_ptr);
      Marshal.FreeHGlobal(par_7_str_ptr);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetActiveAttrib(program: UInt32; index: UInt32; bufSize: Int32; length: IntPtr; size: array of Int32; type: IntPtr; name: IntPtr);
    begin
      z_GetActiveAttrib_ovr_40(program, index, bufSize, length, size[0], type, name);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetActiveAttrib(program: UInt32; index: UInt32; bufSize: Int32; length: IntPtr; var size: Int32; type: array of AttributeType; name: string);
    begin
      var par_7_str_ptr := Marshal.StringToHGlobalAnsi(name);
      z_GetActiveAttrib_ovr_36(program, index, bufSize, length, size, type[0], par_7_str_ptr);
      Marshal.FreeHGlobal(par_7_str_ptr);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetActiveAttrib(program: UInt32; index: UInt32; bufSize: Int32; length: IntPtr; var size: Int32; type: array of AttributeType; name: IntPtr);
    begin
      z_GetActiveAttrib_ovr_36(program, index, bufSize, length, size, type[0], name);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetActiveAttrib(program: UInt32; index: UInt32; bufSize: Int32; length: IntPtr; var size: Int32; var type: AttributeType; name: string);
    begin
      var par_7_str_ptr := Marshal.StringToHGlobalAnsi(name);
      z_GetActiveAttrib_ovr_36(program, index, bufSize, length, size, type, par_7_str_ptr);
      Marshal.FreeHGlobal(par_7_str_ptr);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetActiveAttrib(program: UInt32; index: UInt32; bufSize: Int32; length: IntPtr; var size: Int32; var type: AttributeType; name: IntPtr);
    begin
      z_GetActiveAttrib_ovr_36(program, index, bufSize, length, size, type, name);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetActiveAttrib(program: UInt32; index: UInt32; bufSize: Int32; length: IntPtr; var size: Int32; type: IntPtr; name: string);
    begin
      var par_7_str_ptr := Marshal.StringToHGlobalAnsi(name);
      z_GetActiveAttrib_ovr_40(program, index, bufSize, length, size, type, par_7_str_ptr);
      Marshal.FreeHGlobal(par_7_str_ptr);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetActiveAttrib(program: UInt32; index: UInt32; bufSize: Int32; length: IntPtr; var size: Int32; type: IntPtr; name: IntPtr);
    begin
      z_GetActiveAttrib_ovr_40(program, index, bufSize, length, size, type, name);
    end;
    public z_GetActiveAttrib_ovr_48 := GetFuncOrNil&<procedure(program: UInt32; index: UInt32; bufSize: Int32; length: IntPtr; size: IntPtr; var type: AttributeType; name: IntPtr)>(z_GetActiveAttrib_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetActiveAttrib(program: UInt32; index: UInt32; bufSize: Int32; length: IntPtr; size: IntPtr; type: array of AttributeType; name: string);
    begin
      var par_7_str_ptr := Marshal.StringToHGlobalAnsi(name);
      z_GetActiveAttrib_ovr_48(program, index, bufSize, length, size, type[0], par_7_str_ptr);
      Marshal.FreeHGlobal(par_7_str_ptr);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetActiveAttrib(program: UInt32; index: UInt32; bufSize: Int32; length: IntPtr; size: IntPtr; type: array of AttributeType; name: IntPtr);
    begin
      z_GetActiveAttrib_ovr_48(program, index, bufSize, length, size, type[0], name);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetActiveAttrib(program: UInt32; index: UInt32; bufSize: Int32; length: IntPtr; size: IntPtr; var type: AttributeType; name: string);
    begin
      var par_7_str_ptr := Marshal.StringToHGlobalAnsi(name);
      z_GetActiveAttrib_ovr_48(program, index, bufSize, length, size, type, par_7_str_ptr);
      Marshal.FreeHGlobal(par_7_str_ptr);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetActiveAttrib(program: UInt32; index: UInt32; bufSize: Int32; length: IntPtr; size: IntPtr; var type: AttributeType; name: IntPtr);
    begin
      z_GetActiveAttrib_ovr_48(program, index, bufSize, length, size, type, name);
    end;
    public z_GetActiveAttrib_ovr_52 := GetFuncOrNil&<procedure(program: UInt32; index: UInt32; bufSize: Int32; length: IntPtr; size: IntPtr; type: IntPtr; name: IntPtr)>(z_GetActiveAttrib_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetActiveAttrib(program: UInt32; index: UInt32; bufSize: Int32; length: IntPtr; size: IntPtr; type: IntPtr; name: string);
    begin
      var par_7_str_ptr := Marshal.StringToHGlobalAnsi(name);
      z_GetActiveAttrib_ovr_52(program, index, bufSize, length, size, type, par_7_str_ptr);
      Marshal.FreeHGlobal(par_7_str_ptr);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetActiveAttrib(program: UInt32; index: UInt32; bufSize: Int32; length: IntPtr; size: IntPtr; type: IntPtr; name: IntPtr);
    begin
      z_GetActiveAttrib_ovr_52(program, index, bufSize, length, size, type, name);
    end;
    
    // added in gl4.0
    public z_GetActiveSubroutineName_adr := GetFuncAdr('glGetActiveSubroutineName');
    public z_GetActiveSubroutineName_ovr_0 := GetFuncOrNil&<procedure(program: UInt32; shadertype: ShaderType; index: UInt32; bufSize: Int32; var length: Int32; name: IntPtr)>(z_GetActiveSubroutineName_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetActiveSubroutineName(program: UInt32; shadertype: ShaderType; index: UInt32; bufSize: Int32; length: array of Int32; name: string);
    begin
      var par_6_str_ptr := Marshal.StringToHGlobalAnsi(name);
      z_GetActiveSubroutineName_ovr_0(program, shadertype, index, bufSize, length[0], par_6_str_ptr);
      Marshal.FreeHGlobal(par_6_str_ptr);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetActiveSubroutineName(program: UInt32; shadertype: ShaderType; index: UInt32; bufSize: Int32; length: array of Int32; name: IntPtr);
    begin
      z_GetActiveSubroutineName_ovr_0(program, shadertype, index, bufSize, length[0], name);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetActiveSubroutineName(program: UInt32; shadertype: ShaderType; index: UInt32; bufSize: Int32; var length: Int32; name: string);
    begin
      var par_6_str_ptr := Marshal.StringToHGlobalAnsi(name);
      z_GetActiveSubroutineName_ovr_0(program, shadertype, index, bufSize, length, par_6_str_ptr);
      Marshal.FreeHGlobal(par_6_str_ptr);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetActiveSubroutineName(program: UInt32; shadertype: ShaderType; index: UInt32; bufSize: Int32; var length: Int32; name: IntPtr);
    begin
      z_GetActiveSubroutineName_ovr_0(program, shadertype, index, bufSize, length, name);
    end;
    public z_GetActiveSubroutineName_ovr_4 := GetFuncOrNil&<procedure(program: UInt32; shadertype: ShaderType; index: UInt32; bufSize: Int32; length: IntPtr; name: IntPtr)>(z_GetActiveSubroutineName_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetActiveSubroutineName(program: UInt32; shadertype: ShaderType; index: UInt32; bufSize: Int32; length: IntPtr; name: string);
    begin
      var par_6_str_ptr := Marshal.StringToHGlobalAnsi(name);
      z_GetActiveSubroutineName_ovr_4(program, shadertype, index, bufSize, length, par_6_str_ptr);
      Marshal.FreeHGlobal(par_6_str_ptr);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetActiveSubroutineName(program: UInt32; shadertype: ShaderType; index: UInt32; bufSize: Int32; length: IntPtr; name: IntPtr);
    begin
      z_GetActiveSubroutineName_ovr_4(program, shadertype, index, bufSize, length, name);
    end;
    
    // added in gl4.0
    public z_GetActiveSubroutineUniformiv_adr := GetFuncAdr('glGetActiveSubroutineUniformiv');
    public z_GetActiveSubroutineUniformiv_ovr_0 := GetFuncOrNil&<procedure(program: UInt32; shadertype: ShaderType; index: UInt32; pname: SubroutineParameterName; var values: Int32)>(z_GetActiveSubroutineUniformiv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetActiveSubroutineUniformiv(program: UInt32; shadertype: ShaderType; index: UInt32; pname: SubroutineParameterName; values: array of Int32);
    begin
      z_GetActiveSubroutineUniformiv_ovr_0(program, shadertype, index, pname, values[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetActiveSubroutineUniformiv(program: UInt32; shadertype: ShaderType; index: UInt32; pname: SubroutineParameterName; var values: Int32);
    begin
      z_GetActiveSubroutineUniformiv_ovr_0(program, shadertype, index, pname, values);
    end;
    public z_GetActiveSubroutineUniformiv_ovr_2 := GetFuncOrNil&<procedure(program: UInt32; shadertype: ShaderType; index: UInt32; pname: SubroutineParameterName; values: IntPtr)>(z_GetActiveSubroutineUniformiv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetActiveSubroutineUniformiv(program: UInt32; shadertype: ShaderType; index: UInt32; pname: SubroutineParameterName; values: IntPtr);
    begin
      z_GetActiveSubroutineUniformiv_ovr_2(program, shadertype, index, pname, values);
    end;
    
    // added in gl4.0
    public z_GetActiveSubroutineUniformName_adr := GetFuncAdr('glGetActiveSubroutineUniformName');
    public z_GetActiveSubroutineUniformName_ovr_0 := GetFuncOrNil&<procedure(program: UInt32; shadertype: ShaderType; index: UInt32; bufSize: Int32; var length: Int32; name: IntPtr)>(z_GetActiveSubroutineUniformName_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetActiveSubroutineUniformName(program: UInt32; shadertype: ShaderType; index: UInt32; bufSize: Int32; length: array of Int32; name: string);
    begin
      var par_6_str_ptr := Marshal.StringToHGlobalAnsi(name);
      z_GetActiveSubroutineUniformName_ovr_0(program, shadertype, index, bufSize, length[0], par_6_str_ptr);
      Marshal.FreeHGlobal(par_6_str_ptr);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetActiveSubroutineUniformName(program: UInt32; shadertype: ShaderType; index: UInt32; bufSize: Int32; length: array of Int32; name: IntPtr);
    begin
      z_GetActiveSubroutineUniformName_ovr_0(program, shadertype, index, bufSize, length[0], name);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetActiveSubroutineUniformName(program: UInt32; shadertype: ShaderType; index: UInt32; bufSize: Int32; var length: Int32; name: string);
    begin
      var par_6_str_ptr := Marshal.StringToHGlobalAnsi(name);
      z_GetActiveSubroutineUniformName_ovr_0(program, shadertype, index, bufSize, length, par_6_str_ptr);
      Marshal.FreeHGlobal(par_6_str_ptr);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetActiveSubroutineUniformName(program: UInt32; shadertype: ShaderType; index: UInt32; bufSize: Int32; var length: Int32; name: IntPtr);
    begin
      z_GetActiveSubroutineUniformName_ovr_0(program, shadertype, index, bufSize, length, name);
    end;
    public z_GetActiveSubroutineUniformName_ovr_4 := GetFuncOrNil&<procedure(program: UInt32; shadertype: ShaderType; index: UInt32; bufSize: Int32; length: IntPtr; name: IntPtr)>(z_GetActiveSubroutineUniformName_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetActiveSubroutineUniformName(program: UInt32; shadertype: ShaderType; index: UInt32; bufSize: Int32; length: IntPtr; name: string);
    begin
      var par_6_str_ptr := Marshal.StringToHGlobalAnsi(name);
      z_GetActiveSubroutineUniformName_ovr_4(program, shadertype, index, bufSize, length, par_6_str_ptr);
      Marshal.FreeHGlobal(par_6_str_ptr);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetActiveSubroutineUniformName(program: UInt32; shadertype: ShaderType; index: UInt32; bufSize: Int32; length: IntPtr; name: IntPtr);
    begin
      z_GetActiveSubroutineUniformName_ovr_4(program, shadertype, index, bufSize, length, name);
    end;
    
    // added in gl2.0
    public z_GetActiveUniform_adr := GetFuncAdr('glGetActiveUniform');
    public z_GetActiveUniform_ovr_0 := GetFuncOrNil&<procedure(program: UInt32; index: UInt32; bufSize: Int32; var length: Int32; var size: Int32; var type: UniformType; name: IntPtr)>(z_GetActiveUniform_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetActiveUniform(program: UInt32; index: UInt32; bufSize: Int32; length: array of Int32; size: array of Int32; type: array of UniformType; name: string);
    begin
      var par_7_str_ptr := Marshal.StringToHGlobalAnsi(name);
      z_GetActiveUniform_ovr_0(program, index, bufSize, length[0], size[0], type[0], par_7_str_ptr);
      Marshal.FreeHGlobal(par_7_str_ptr);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetActiveUniform(program: UInt32; index: UInt32; bufSize: Int32; length: array of Int32; size: array of Int32; type: array of UniformType; name: IntPtr);
    begin
      z_GetActiveUniform_ovr_0(program, index, bufSize, length[0], size[0], type[0], name);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetActiveUniform(program: UInt32; index: UInt32; bufSize: Int32; length: array of Int32; size: array of Int32; var type: UniformType; name: string);
    begin
      var par_7_str_ptr := Marshal.StringToHGlobalAnsi(name);
      z_GetActiveUniform_ovr_0(program, index, bufSize, length[0], size[0], type, par_7_str_ptr);
      Marshal.FreeHGlobal(par_7_str_ptr);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetActiveUniform(program: UInt32; index: UInt32; bufSize: Int32; length: array of Int32; size: array of Int32; var type: UniformType; name: IntPtr);
    begin
      z_GetActiveUniform_ovr_0(program, index, bufSize, length[0], size[0], type, name);
    end;
    public z_GetActiveUniform_ovr_4 := GetFuncOrNil&<procedure(program: UInt32; index: UInt32; bufSize: Int32; var length: Int32; var size: Int32; type: IntPtr; name: IntPtr)>(z_GetActiveUniform_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetActiveUniform(program: UInt32; index: UInt32; bufSize: Int32; length: array of Int32; size: array of Int32; type: IntPtr; name: string);
    begin
      var par_7_str_ptr := Marshal.StringToHGlobalAnsi(name);
      z_GetActiveUniform_ovr_4(program, index, bufSize, length[0], size[0], type, par_7_str_ptr);
      Marshal.FreeHGlobal(par_7_str_ptr);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetActiveUniform(program: UInt32; index: UInt32; bufSize: Int32; length: array of Int32; size: array of Int32; type: IntPtr; name: IntPtr);
    begin
      z_GetActiveUniform_ovr_4(program, index, bufSize, length[0], size[0], type, name);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetActiveUniform(program: UInt32; index: UInt32; bufSize: Int32; length: array of Int32; var size: Int32; type: array of UniformType; name: string);
    begin
      var par_7_str_ptr := Marshal.StringToHGlobalAnsi(name);
      z_GetActiveUniform_ovr_0(program, index, bufSize, length[0], size, type[0], par_7_str_ptr);
      Marshal.FreeHGlobal(par_7_str_ptr);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetActiveUniform(program: UInt32; index: UInt32; bufSize: Int32; length: array of Int32; var size: Int32; type: array of UniformType; name: IntPtr);
    begin
      z_GetActiveUniform_ovr_0(program, index, bufSize, length[0], size, type[0], name);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetActiveUniform(program: UInt32; index: UInt32; bufSize: Int32; length: array of Int32; var size: Int32; var type: UniformType; name: string);
    begin
      var par_7_str_ptr := Marshal.StringToHGlobalAnsi(name);
      z_GetActiveUniform_ovr_0(program, index, bufSize, length[0], size, type, par_7_str_ptr);
      Marshal.FreeHGlobal(par_7_str_ptr);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetActiveUniform(program: UInt32; index: UInt32; bufSize: Int32; length: array of Int32; var size: Int32; var type: UniformType; name: IntPtr);
    begin
      z_GetActiveUniform_ovr_0(program, index, bufSize, length[0], size, type, name);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetActiveUniform(program: UInt32; index: UInt32; bufSize: Int32; length: array of Int32; var size: Int32; type: IntPtr; name: string);
    begin
      var par_7_str_ptr := Marshal.StringToHGlobalAnsi(name);
      z_GetActiveUniform_ovr_4(program, index, bufSize, length[0], size, type, par_7_str_ptr);
      Marshal.FreeHGlobal(par_7_str_ptr);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetActiveUniform(program: UInt32; index: UInt32; bufSize: Int32; length: array of Int32; var size: Int32; type: IntPtr; name: IntPtr);
    begin
      z_GetActiveUniform_ovr_4(program, index, bufSize, length[0], size, type, name);
    end;
    public z_GetActiveUniform_ovr_12 := GetFuncOrNil&<procedure(program: UInt32; index: UInt32; bufSize: Int32; var length: Int32; size: IntPtr; var type: UniformType; name: IntPtr)>(z_GetActiveUniform_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetActiveUniform(program: UInt32; index: UInt32; bufSize: Int32; length: array of Int32; size: IntPtr; type: array of UniformType; name: string);
    begin
      var par_7_str_ptr := Marshal.StringToHGlobalAnsi(name);
      z_GetActiveUniform_ovr_12(program, index, bufSize, length[0], size, type[0], par_7_str_ptr);
      Marshal.FreeHGlobal(par_7_str_ptr);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetActiveUniform(program: UInt32; index: UInt32; bufSize: Int32; length: array of Int32; size: IntPtr; type: array of UniformType; name: IntPtr);
    begin
      z_GetActiveUniform_ovr_12(program, index, bufSize, length[0], size, type[0], name);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetActiveUniform(program: UInt32; index: UInt32; bufSize: Int32; length: array of Int32; size: IntPtr; var type: UniformType; name: string);
    begin
      var par_7_str_ptr := Marshal.StringToHGlobalAnsi(name);
      z_GetActiveUniform_ovr_12(program, index, bufSize, length[0], size, type, par_7_str_ptr);
      Marshal.FreeHGlobal(par_7_str_ptr);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetActiveUniform(program: UInt32; index: UInt32; bufSize: Int32; length: array of Int32; size: IntPtr; var type: UniformType; name: IntPtr);
    begin
      z_GetActiveUniform_ovr_12(program, index, bufSize, length[0], size, type, name);
    end;
    public z_GetActiveUniform_ovr_16 := GetFuncOrNil&<procedure(program: UInt32; index: UInt32; bufSize: Int32; var length: Int32; size: IntPtr; type: IntPtr; name: IntPtr)>(z_GetActiveUniform_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetActiveUniform(program: UInt32; index: UInt32; bufSize: Int32; length: array of Int32; size: IntPtr; type: IntPtr; name: string);
    begin
      var par_7_str_ptr := Marshal.StringToHGlobalAnsi(name);
      z_GetActiveUniform_ovr_16(program, index, bufSize, length[0], size, type, par_7_str_ptr);
      Marshal.FreeHGlobal(par_7_str_ptr);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetActiveUniform(program: UInt32; index: UInt32; bufSize: Int32; length: array of Int32; size: IntPtr; type: IntPtr; name: IntPtr);
    begin
      z_GetActiveUniform_ovr_16(program, index, bufSize, length[0], size, type, name);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetActiveUniform(program: UInt32; index: UInt32; bufSize: Int32; var length: Int32; size: array of Int32; type: array of UniformType; name: string);
    begin
      var par_7_str_ptr := Marshal.StringToHGlobalAnsi(name);
      z_GetActiveUniform_ovr_0(program, index, bufSize, length, size[0], type[0], par_7_str_ptr);
      Marshal.FreeHGlobal(par_7_str_ptr);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetActiveUniform(program: UInt32; index: UInt32; bufSize: Int32; var length: Int32; size: array of Int32; type: array of UniformType; name: IntPtr);
    begin
      z_GetActiveUniform_ovr_0(program, index, bufSize, length, size[0], type[0], name);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetActiveUniform(program: UInt32; index: UInt32; bufSize: Int32; var length: Int32; size: array of Int32; var type: UniformType; name: string);
    begin
      var par_7_str_ptr := Marshal.StringToHGlobalAnsi(name);
      z_GetActiveUniform_ovr_0(program, index, bufSize, length, size[0], type, par_7_str_ptr);
      Marshal.FreeHGlobal(par_7_str_ptr);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetActiveUniform(program: UInt32; index: UInt32; bufSize: Int32; var length: Int32; size: array of Int32; var type: UniformType; name: IntPtr);
    begin
      z_GetActiveUniform_ovr_0(program, index, bufSize, length, size[0], type, name);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetActiveUniform(program: UInt32; index: UInt32; bufSize: Int32; var length: Int32; size: array of Int32; type: IntPtr; name: string);
    begin
      var par_7_str_ptr := Marshal.StringToHGlobalAnsi(name);
      z_GetActiveUniform_ovr_4(program, index, bufSize, length, size[0], type, par_7_str_ptr);
      Marshal.FreeHGlobal(par_7_str_ptr);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetActiveUniform(program: UInt32; index: UInt32; bufSize: Int32; var length: Int32; size: array of Int32; type: IntPtr; name: IntPtr);
    begin
      z_GetActiveUniform_ovr_4(program, index, bufSize, length, size[0], type, name);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetActiveUniform(program: UInt32; index: UInt32; bufSize: Int32; var length: Int32; var size: Int32; type: array of UniformType; name: string);
    begin
      var par_7_str_ptr := Marshal.StringToHGlobalAnsi(name);
      z_GetActiveUniform_ovr_0(program, index, bufSize, length, size, type[0], par_7_str_ptr);
      Marshal.FreeHGlobal(par_7_str_ptr);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetActiveUniform(program: UInt32; index: UInt32; bufSize: Int32; var length: Int32; var size: Int32; type: array of UniformType; name: IntPtr);
    begin
      z_GetActiveUniform_ovr_0(program, index, bufSize, length, size, type[0], name);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetActiveUniform(program: UInt32; index: UInt32; bufSize: Int32; var length: Int32; var size: Int32; var type: UniformType; name: string);
    begin
      var par_7_str_ptr := Marshal.StringToHGlobalAnsi(name);
      z_GetActiveUniform_ovr_0(program, index, bufSize, length, size, type, par_7_str_ptr);
      Marshal.FreeHGlobal(par_7_str_ptr);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetActiveUniform(program: UInt32; index: UInt32; bufSize: Int32; var length: Int32; var size: Int32; var type: UniformType; name: IntPtr);
    begin
      z_GetActiveUniform_ovr_0(program, index, bufSize, length, size, type, name);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetActiveUniform(program: UInt32; index: UInt32; bufSize: Int32; var length: Int32; var size: Int32; type: IntPtr; name: string);
    begin
      var par_7_str_ptr := Marshal.StringToHGlobalAnsi(name);
      z_GetActiveUniform_ovr_4(program, index, bufSize, length, size, type, par_7_str_ptr);
      Marshal.FreeHGlobal(par_7_str_ptr);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetActiveUniform(program: UInt32; index: UInt32; bufSize: Int32; var length: Int32; var size: Int32; type: IntPtr; name: IntPtr);
    begin
      z_GetActiveUniform_ovr_4(program, index, bufSize, length, size, type, name);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetActiveUniform(program: UInt32; index: UInt32; bufSize: Int32; var length: Int32; size: IntPtr; type: array of UniformType; name: string);
    begin
      var par_7_str_ptr := Marshal.StringToHGlobalAnsi(name);
      z_GetActiveUniform_ovr_12(program, index, bufSize, length, size, type[0], par_7_str_ptr);
      Marshal.FreeHGlobal(par_7_str_ptr);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetActiveUniform(program: UInt32; index: UInt32; bufSize: Int32; var length: Int32; size: IntPtr; type: array of UniformType; name: IntPtr);
    begin
      z_GetActiveUniform_ovr_12(program, index, bufSize, length, size, type[0], name);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetActiveUniform(program: UInt32; index: UInt32; bufSize: Int32; var length: Int32; size: IntPtr; var type: UniformType; name: string);
    begin
      var par_7_str_ptr := Marshal.StringToHGlobalAnsi(name);
      z_GetActiveUniform_ovr_12(program, index, bufSize, length, size, type, par_7_str_ptr);
      Marshal.FreeHGlobal(par_7_str_ptr);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetActiveUniform(program: UInt32; index: UInt32; bufSize: Int32; var length: Int32; size: IntPtr; var type: UniformType; name: IntPtr);
    begin
      z_GetActiveUniform_ovr_12(program, index, bufSize, length, size, type, name);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetActiveUniform(program: UInt32; index: UInt32; bufSize: Int32; var length: Int32; size: IntPtr; type: IntPtr; name: string);
    begin
      var par_7_str_ptr := Marshal.StringToHGlobalAnsi(name);
      z_GetActiveUniform_ovr_16(program, index, bufSize, length, size, type, par_7_str_ptr);
      Marshal.FreeHGlobal(par_7_str_ptr);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetActiveUniform(program: UInt32; index: UInt32; bufSize: Int32; var length: Int32; size: IntPtr; type: IntPtr; name: IntPtr);
    begin
      z_GetActiveUniform_ovr_16(program, index, bufSize, length, size, type, name);
    end;
    public z_GetActiveUniform_ovr_36 := GetFuncOrNil&<procedure(program: UInt32; index: UInt32; bufSize: Int32; length: IntPtr; var size: Int32; var type: UniformType; name: IntPtr)>(z_GetActiveUniform_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetActiveUniform(program: UInt32; index: UInt32; bufSize: Int32; length: IntPtr; size: array of Int32; type: array of UniformType; name: string);
    begin
      var par_7_str_ptr := Marshal.StringToHGlobalAnsi(name);
      z_GetActiveUniform_ovr_36(program, index, bufSize, length, size[0], type[0], par_7_str_ptr);
      Marshal.FreeHGlobal(par_7_str_ptr);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetActiveUniform(program: UInt32; index: UInt32; bufSize: Int32; length: IntPtr; size: array of Int32; type: array of UniformType; name: IntPtr);
    begin
      z_GetActiveUniform_ovr_36(program, index, bufSize, length, size[0], type[0], name);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetActiveUniform(program: UInt32; index: UInt32; bufSize: Int32; length: IntPtr; size: array of Int32; var type: UniformType; name: string);
    begin
      var par_7_str_ptr := Marshal.StringToHGlobalAnsi(name);
      z_GetActiveUniform_ovr_36(program, index, bufSize, length, size[0], type, par_7_str_ptr);
      Marshal.FreeHGlobal(par_7_str_ptr);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetActiveUniform(program: UInt32; index: UInt32; bufSize: Int32; length: IntPtr; size: array of Int32; var type: UniformType; name: IntPtr);
    begin
      z_GetActiveUniform_ovr_36(program, index, bufSize, length, size[0], type, name);
    end;
    public z_GetActiveUniform_ovr_40 := GetFuncOrNil&<procedure(program: UInt32; index: UInt32; bufSize: Int32; length: IntPtr; var size: Int32; type: IntPtr; name: IntPtr)>(z_GetActiveUniform_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetActiveUniform(program: UInt32; index: UInt32; bufSize: Int32; length: IntPtr; size: array of Int32; type: IntPtr; name: string);
    begin
      var par_7_str_ptr := Marshal.StringToHGlobalAnsi(name);
      z_GetActiveUniform_ovr_40(program, index, bufSize, length, size[0], type, par_7_str_ptr);
      Marshal.FreeHGlobal(par_7_str_ptr);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetActiveUniform(program: UInt32; index: UInt32; bufSize: Int32; length: IntPtr; size: array of Int32; type: IntPtr; name: IntPtr);
    begin
      z_GetActiveUniform_ovr_40(program, index, bufSize, length, size[0], type, name);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetActiveUniform(program: UInt32; index: UInt32; bufSize: Int32; length: IntPtr; var size: Int32; type: array of UniformType; name: string);
    begin
      var par_7_str_ptr := Marshal.StringToHGlobalAnsi(name);
      z_GetActiveUniform_ovr_36(program, index, bufSize, length, size, type[0], par_7_str_ptr);
      Marshal.FreeHGlobal(par_7_str_ptr);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetActiveUniform(program: UInt32; index: UInt32; bufSize: Int32; length: IntPtr; var size: Int32; type: array of UniformType; name: IntPtr);
    begin
      z_GetActiveUniform_ovr_36(program, index, bufSize, length, size, type[0], name);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetActiveUniform(program: UInt32; index: UInt32; bufSize: Int32; length: IntPtr; var size: Int32; var type: UniformType; name: string);
    begin
      var par_7_str_ptr := Marshal.StringToHGlobalAnsi(name);
      z_GetActiveUniform_ovr_36(program, index, bufSize, length, size, type, par_7_str_ptr);
      Marshal.FreeHGlobal(par_7_str_ptr);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetActiveUniform(program: UInt32; index: UInt32; bufSize: Int32; length: IntPtr; var size: Int32; var type: UniformType; name: IntPtr);
    begin
      z_GetActiveUniform_ovr_36(program, index, bufSize, length, size, type, name);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetActiveUniform(program: UInt32; index: UInt32; bufSize: Int32; length: IntPtr; var size: Int32; type: IntPtr; name: string);
    begin
      var par_7_str_ptr := Marshal.StringToHGlobalAnsi(name);
      z_GetActiveUniform_ovr_40(program, index, bufSize, length, size, type, par_7_str_ptr);
      Marshal.FreeHGlobal(par_7_str_ptr);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetActiveUniform(program: UInt32; index: UInt32; bufSize: Int32; length: IntPtr; var size: Int32; type: IntPtr; name: IntPtr);
    begin
      z_GetActiveUniform_ovr_40(program, index, bufSize, length, size, type, name);
    end;
    public z_GetActiveUniform_ovr_48 := GetFuncOrNil&<procedure(program: UInt32; index: UInt32; bufSize: Int32; length: IntPtr; size: IntPtr; var type: UniformType; name: IntPtr)>(z_GetActiveUniform_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetActiveUniform(program: UInt32; index: UInt32; bufSize: Int32; length: IntPtr; size: IntPtr; type: array of UniformType; name: string);
    begin
      var par_7_str_ptr := Marshal.StringToHGlobalAnsi(name);
      z_GetActiveUniform_ovr_48(program, index, bufSize, length, size, type[0], par_7_str_ptr);
      Marshal.FreeHGlobal(par_7_str_ptr);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetActiveUniform(program: UInt32; index: UInt32; bufSize: Int32; length: IntPtr; size: IntPtr; type: array of UniformType; name: IntPtr);
    begin
      z_GetActiveUniform_ovr_48(program, index, bufSize, length, size, type[0], name);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetActiveUniform(program: UInt32; index: UInt32; bufSize: Int32; length: IntPtr; size: IntPtr; var type: UniformType; name: string);
    begin
      var par_7_str_ptr := Marshal.StringToHGlobalAnsi(name);
      z_GetActiveUniform_ovr_48(program, index, bufSize, length, size, type, par_7_str_ptr);
      Marshal.FreeHGlobal(par_7_str_ptr);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetActiveUniform(program: UInt32; index: UInt32; bufSize: Int32; length: IntPtr; size: IntPtr; var type: UniformType; name: IntPtr);
    begin
      z_GetActiveUniform_ovr_48(program, index, bufSize, length, size, type, name);
    end;
    public z_GetActiveUniform_ovr_52 := GetFuncOrNil&<procedure(program: UInt32; index: UInt32; bufSize: Int32; length: IntPtr; size: IntPtr; type: IntPtr; name: IntPtr)>(z_GetActiveUniform_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetActiveUniform(program: UInt32; index: UInt32; bufSize: Int32; length: IntPtr; size: IntPtr; type: IntPtr; name: string);
    begin
      var par_7_str_ptr := Marshal.StringToHGlobalAnsi(name);
      z_GetActiveUniform_ovr_52(program, index, bufSize, length, size, type, par_7_str_ptr);
      Marshal.FreeHGlobal(par_7_str_ptr);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetActiveUniform(program: UInt32; index: UInt32; bufSize: Int32; length: IntPtr; size: IntPtr; type: IntPtr; name: IntPtr);
    begin
      z_GetActiveUniform_ovr_52(program, index, bufSize, length, size, type, name);
    end;
    
    // added in gl3.1
    public z_GetActiveUniformBlockiv_adr := GetFuncAdr('glGetActiveUniformBlockiv');
    public z_GetActiveUniformBlockiv_ovr_0 := GetFuncOrNil&<procedure(program: UInt32; uniformBlockIndex: UInt32; pname: UniformBlockPName; var params: Int32)>(z_GetActiveUniformBlockiv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetActiveUniformBlockiv(program: UInt32; uniformBlockIndex: UInt32; pname: UniformBlockPName; params: array of Int32);
    begin
      z_GetActiveUniformBlockiv_ovr_0(program, uniformBlockIndex, pname, params[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetActiveUniformBlockiv(program: UInt32; uniformBlockIndex: UInt32; pname: UniformBlockPName; var params: Int32);
    begin
      z_GetActiveUniformBlockiv_ovr_0(program, uniformBlockIndex, pname, params);
    end;
    public z_GetActiveUniformBlockiv_ovr_2 := GetFuncOrNil&<procedure(program: UInt32; uniformBlockIndex: UInt32; pname: UniformBlockPName; params: IntPtr)>(z_GetActiveUniformBlockiv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetActiveUniformBlockiv(program: UInt32; uniformBlockIndex: UInt32; pname: UniformBlockPName; params: IntPtr);
    begin
      z_GetActiveUniformBlockiv_ovr_2(program, uniformBlockIndex, pname, params);
    end;
    
    // added in gl3.1
    public z_GetActiveUniformBlockName_adr := GetFuncAdr('glGetActiveUniformBlockName');
    public z_GetActiveUniformBlockName_ovr_0 := GetFuncOrNil&<procedure(program: UInt32; uniformBlockIndex: UInt32; bufSize: Int32; var length: Int32; uniformBlockName: IntPtr)>(z_GetActiveUniformBlockName_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetActiveUniformBlockName(program: UInt32; uniformBlockIndex: UInt32; bufSize: Int32; length: array of Int32; uniformBlockName: string);
    begin
      var par_5_str_ptr := Marshal.StringToHGlobalAnsi(uniformBlockName);
      z_GetActiveUniformBlockName_ovr_0(program, uniformBlockIndex, bufSize, length[0], par_5_str_ptr);
      Marshal.FreeHGlobal(par_5_str_ptr);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetActiveUniformBlockName(program: UInt32; uniformBlockIndex: UInt32; bufSize: Int32; length: array of Int32; uniformBlockName: IntPtr);
    begin
      z_GetActiveUniformBlockName_ovr_0(program, uniformBlockIndex, bufSize, length[0], uniformBlockName);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetActiveUniformBlockName(program: UInt32; uniformBlockIndex: UInt32; bufSize: Int32; var length: Int32; uniformBlockName: string);
    begin
      var par_5_str_ptr := Marshal.StringToHGlobalAnsi(uniformBlockName);
      z_GetActiveUniformBlockName_ovr_0(program, uniformBlockIndex, bufSize, length, par_5_str_ptr);
      Marshal.FreeHGlobal(par_5_str_ptr);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetActiveUniformBlockName(program: UInt32; uniformBlockIndex: UInt32; bufSize: Int32; var length: Int32; uniformBlockName: IntPtr);
    begin
      z_GetActiveUniformBlockName_ovr_0(program, uniformBlockIndex, bufSize, length, uniformBlockName);
    end;
    public z_GetActiveUniformBlockName_ovr_4 := GetFuncOrNil&<procedure(program: UInt32; uniformBlockIndex: UInt32; bufSize: Int32; length: IntPtr; uniformBlockName: IntPtr)>(z_GetActiveUniformBlockName_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetActiveUniformBlockName(program: UInt32; uniformBlockIndex: UInt32; bufSize: Int32; length: IntPtr; uniformBlockName: string);
    begin
      var par_5_str_ptr := Marshal.StringToHGlobalAnsi(uniformBlockName);
      z_GetActiveUniformBlockName_ovr_4(program, uniformBlockIndex, bufSize, length, par_5_str_ptr);
      Marshal.FreeHGlobal(par_5_str_ptr);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetActiveUniformBlockName(program: UInt32; uniformBlockIndex: UInt32; bufSize: Int32; length: IntPtr; uniformBlockName: IntPtr);
    begin
      z_GetActiveUniformBlockName_ovr_4(program, uniformBlockIndex, bufSize, length, uniformBlockName);
    end;
    
    // added in gl3.1
    public z_GetActiveUniformName_adr := GetFuncAdr('glGetActiveUniformName');
    public z_GetActiveUniformName_ovr_0 := GetFuncOrNil&<procedure(program: UInt32; uniformIndex: UInt32; bufSize: Int32; var length: Int32; uniformName: IntPtr)>(z_GetActiveUniformName_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetActiveUniformName(program: UInt32; uniformIndex: UInt32; bufSize: Int32; length: array of Int32; uniformName: string);
    begin
      var par_5_str_ptr := Marshal.StringToHGlobalAnsi(uniformName);
      z_GetActiveUniformName_ovr_0(program, uniformIndex, bufSize, length[0], par_5_str_ptr);
      Marshal.FreeHGlobal(par_5_str_ptr);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetActiveUniformName(program: UInt32; uniformIndex: UInt32; bufSize: Int32; length: array of Int32; uniformName: IntPtr);
    begin
      z_GetActiveUniformName_ovr_0(program, uniformIndex, bufSize, length[0], uniformName);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetActiveUniformName(program: UInt32; uniformIndex: UInt32; bufSize: Int32; var length: Int32; uniformName: string);
    begin
      var par_5_str_ptr := Marshal.StringToHGlobalAnsi(uniformName);
      z_GetActiveUniformName_ovr_0(program, uniformIndex, bufSize, length, par_5_str_ptr);
      Marshal.FreeHGlobal(par_5_str_ptr);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetActiveUniformName(program: UInt32; uniformIndex: UInt32; bufSize: Int32; var length: Int32; uniformName: IntPtr);
    begin
      z_GetActiveUniformName_ovr_0(program, uniformIndex, bufSize, length, uniformName);
    end;
    public z_GetActiveUniformName_ovr_4 := GetFuncOrNil&<procedure(program: UInt32; uniformIndex: UInt32; bufSize: Int32; length: IntPtr; uniformName: IntPtr)>(z_GetActiveUniformName_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetActiveUniformName(program: UInt32; uniformIndex: UInt32; bufSize: Int32; length: IntPtr; uniformName: string);
    begin
      var par_5_str_ptr := Marshal.StringToHGlobalAnsi(uniformName);
      z_GetActiveUniformName_ovr_4(program, uniformIndex, bufSize, length, par_5_str_ptr);
      Marshal.FreeHGlobal(par_5_str_ptr);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetActiveUniformName(program: UInt32; uniformIndex: UInt32; bufSize: Int32; length: IntPtr; uniformName: IntPtr);
    begin
      z_GetActiveUniformName_ovr_4(program, uniformIndex, bufSize, length, uniformName);
    end;
    
    // added in gl3.1
    public z_GetActiveUniformsiv_adr := GetFuncAdr('glGetActiveUniformsiv');
    public z_GetActiveUniformsiv_ovr_0 := GetFuncOrNil&<procedure(program: UInt32; uniformCount: Int32; var uniformIndices: UInt32; pname: UniformPName; var params: Int32)>(z_GetActiveUniformsiv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetActiveUniformsiv(program: UInt32; uniformCount: Int32; uniformIndices: array of UInt32; pname: UniformPName; params: array of Int32);
    begin
      z_GetActiveUniformsiv_ovr_0(program, uniformCount, uniformIndices[0], pname, params[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetActiveUniformsiv(program: UInt32; uniformCount: Int32; uniformIndices: array of UInt32; pname: UniformPName; var params: Int32);
    begin
      z_GetActiveUniformsiv_ovr_0(program, uniformCount, uniformIndices[0], pname, params);
    end;
    public z_GetActiveUniformsiv_ovr_2 := GetFuncOrNil&<procedure(program: UInt32; uniformCount: Int32; var uniformIndices: UInt32; pname: UniformPName; params: IntPtr)>(z_GetActiveUniformsiv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetActiveUniformsiv(program: UInt32; uniformCount: Int32; uniformIndices: array of UInt32; pname: UniformPName; params: IntPtr);
    begin
      z_GetActiveUniformsiv_ovr_2(program, uniformCount, uniformIndices[0], pname, params);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetActiveUniformsiv(program: UInt32; uniformCount: Int32; var uniformIndices: UInt32; pname: UniformPName; params: array of Int32);
    begin
      z_GetActiveUniformsiv_ovr_0(program, uniformCount, uniformIndices, pname, params[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetActiveUniformsiv(program: UInt32; uniformCount: Int32; var uniformIndices: UInt32; pname: UniformPName; var params: Int32);
    begin
      z_GetActiveUniformsiv_ovr_0(program, uniformCount, uniformIndices, pname, params);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetActiveUniformsiv(program: UInt32; uniformCount: Int32; var uniformIndices: UInt32; pname: UniformPName; params: IntPtr);
    begin
      z_GetActiveUniformsiv_ovr_2(program, uniformCount, uniformIndices, pname, params);
    end;
    public z_GetActiveUniformsiv_ovr_6 := GetFuncOrNil&<procedure(program: UInt32; uniformCount: Int32; uniformIndices: IntPtr; pname: UniformPName; var params: Int32)>(z_GetActiveUniformsiv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetActiveUniformsiv(program: UInt32; uniformCount: Int32; uniformIndices: IntPtr; pname: UniformPName; params: array of Int32);
    begin
      z_GetActiveUniformsiv_ovr_6(program, uniformCount, uniformIndices, pname, params[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetActiveUniformsiv(program: UInt32; uniformCount: Int32; uniformIndices: IntPtr; pname: UniformPName; var params: Int32);
    begin
      z_GetActiveUniformsiv_ovr_6(program, uniformCount, uniformIndices, pname, params);
    end;
    public z_GetActiveUniformsiv_ovr_8 := GetFuncOrNil&<procedure(program: UInt32; uniformCount: Int32; uniformIndices: IntPtr; pname: UniformPName; params: IntPtr)>(z_GetActiveUniformsiv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetActiveUniformsiv(program: UInt32; uniformCount: Int32; uniformIndices: IntPtr; pname: UniformPName; params: IntPtr);
    begin
      z_GetActiveUniformsiv_ovr_8(program, uniformCount, uniformIndices, pname, params);
    end;
    
    // added in gl2.0
    public z_GetAttachedShaders_adr := GetFuncAdr('glGetAttachedShaders');
    public z_GetAttachedShaders_ovr_0 := GetFuncOrNil&<procedure(program: UInt32; maxCount: Int32; var count: Int32; var shaders: UInt32)>(z_GetAttachedShaders_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetAttachedShaders(program: UInt32; maxCount: Int32; count: array of Int32; shaders: array of UInt32);
    begin
      z_GetAttachedShaders_ovr_0(program, maxCount, count[0], shaders[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetAttachedShaders(program: UInt32; maxCount: Int32; count: array of Int32; var shaders: UInt32);
    begin
      z_GetAttachedShaders_ovr_0(program, maxCount, count[0], shaders);
    end;
    public z_GetAttachedShaders_ovr_2 := GetFuncOrNil&<procedure(program: UInt32; maxCount: Int32; var count: Int32; shaders: IntPtr)>(z_GetAttachedShaders_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetAttachedShaders(program: UInt32; maxCount: Int32; count: array of Int32; shaders: IntPtr);
    begin
      z_GetAttachedShaders_ovr_2(program, maxCount, count[0], shaders);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetAttachedShaders(program: UInt32; maxCount: Int32; var count: Int32; shaders: array of UInt32);
    begin
      z_GetAttachedShaders_ovr_0(program, maxCount, count, shaders[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetAttachedShaders(program: UInt32; maxCount: Int32; var count: Int32; var shaders: UInt32);
    begin
      z_GetAttachedShaders_ovr_0(program, maxCount, count, shaders);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetAttachedShaders(program: UInt32; maxCount: Int32; var count: Int32; shaders: IntPtr);
    begin
      z_GetAttachedShaders_ovr_2(program, maxCount, count, shaders);
    end;
    public z_GetAttachedShaders_ovr_6 := GetFuncOrNil&<procedure(program: UInt32; maxCount: Int32; count: IntPtr; var shaders: UInt32)>(z_GetAttachedShaders_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetAttachedShaders(program: UInt32; maxCount: Int32; count: IntPtr; shaders: array of UInt32);
    begin
      z_GetAttachedShaders_ovr_6(program, maxCount, count, shaders[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetAttachedShaders(program: UInt32; maxCount: Int32; count: IntPtr; var shaders: UInt32);
    begin
      z_GetAttachedShaders_ovr_6(program, maxCount, count, shaders);
    end;
    public z_GetAttachedShaders_ovr_8 := GetFuncOrNil&<procedure(program: UInt32; maxCount: Int32; count: IntPtr; shaders: IntPtr)>(z_GetAttachedShaders_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetAttachedShaders(program: UInt32; maxCount: Int32; count: IntPtr; shaders: IntPtr);
    begin
      z_GetAttachedShaders_ovr_8(program, maxCount, count, shaders);
    end;
    
    // added in gl2.0
    public z_GetAttribLocation_adr := GetFuncAdr('glGetAttribLocation');
    public z_GetAttribLocation_ovr_0 := GetFuncOrNil&<function(program: UInt32; name: IntPtr): Int32>(z_GetAttribLocation_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetAttribLocation(program: UInt32; name: string): Int32;
    begin
      var par_2_str_ptr := Marshal.StringToHGlobalAnsi(name);
      Result := z_GetAttribLocation_ovr_0(program, par_2_str_ptr);
      Marshal.FreeHGlobal(par_2_str_ptr);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetAttribLocation(program: UInt32; name: IntPtr): Int32;
    begin
      Result := z_GetAttribLocation_ovr_0(program, name);
    end;
    
    // added in gl3.0
    public z_GetBooleani_v_adr := GetFuncAdr('glGetBooleani_v');
    public z_GetBooleani_v_ovr_0 := GetFuncOrNil&<procedure(target: BufferTargetARB; index: UInt32; var data: boolean)>(z_GetBooleani_v_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetBooleani_v(target: BufferTargetARB; index: UInt32; data: array of boolean);
    begin
      z_GetBooleani_v_ovr_0(target, index, data[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetBooleani_v(target: BufferTargetARB; index: UInt32; var data: boolean);
    begin
      z_GetBooleani_v_ovr_0(target, index, data);
    end;
    public z_GetBooleani_v_ovr_2 := GetFuncOrNil&<procedure(target: BufferTargetARB; index: UInt32; data: IntPtr)>(z_GetBooleani_v_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetBooleani_v(target: BufferTargetARB; index: UInt32; data: IntPtr);
    begin
      z_GetBooleani_v_ovr_2(target, index, data);
    end;
    
    // added in gl1.0
    public static procedure z_GetBooleanv(pname: GetPName; [MarshalAs(UnmanagedType.LPArray)] data: array of boolean);
    external 'opengl32.dll' name 'glGetBooleanv';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetBooleanv(pname: GetPName; data: array of boolean) := z_GetBooleanv;
    public static procedure z_GetBooleanv(pname: GetPName; var data: boolean);
    external 'opengl32.dll' name 'glGetBooleanv';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetBooleanv(pname: GetPName; var data: boolean) := z_GetBooleanv;
    public static procedure z_GetBooleanv(pname: GetPName; data: IntPtr);
    external 'opengl32.dll' name 'glGetBooleanv';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetBooleanv(pname: GetPName; data: IntPtr) := z_GetBooleanv;
    
    // added in gl3.2
    public z_GetBufferParameteri64v_adr := GetFuncAdr('glGetBufferParameteri64v');
    public z_GetBufferParameteri64v_ovr_0 := GetFuncOrNil&<procedure(target: BufferTargetARB; pname: BufferPNameARB; var params: Int64)>(z_GetBufferParameteri64v_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetBufferParameteri64v(target: BufferTargetARB; pname: BufferPNameARB; params: array of Int64);
    begin
      z_GetBufferParameteri64v_ovr_0(target, pname, params[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetBufferParameteri64v(target: BufferTargetARB; pname: BufferPNameARB; var params: Int64);
    begin
      z_GetBufferParameteri64v_ovr_0(target, pname, params);
    end;
    public z_GetBufferParameteri64v_ovr_2 := GetFuncOrNil&<procedure(target: BufferTargetARB; pname: BufferPNameARB; params: IntPtr)>(z_GetBufferParameteri64v_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetBufferParameteri64v(target: BufferTargetARB; pname: BufferPNameARB; params: IntPtr);
    begin
      z_GetBufferParameteri64v_ovr_2(target, pname, params);
    end;
    
    // added in gl1.5
    public z_GetBufferParameteriv_adr := GetFuncAdr('glGetBufferParameteriv');
    public z_GetBufferParameteriv_ovr_0 := GetFuncOrNil&<procedure(target: BufferTargetARB; pname: BufferPNameARB; var params: Int32)>(z_GetBufferParameteriv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetBufferParameteriv(target: BufferTargetARB; pname: BufferPNameARB; params: array of Int32);
    begin
      z_GetBufferParameteriv_ovr_0(target, pname, params[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetBufferParameteriv(target: BufferTargetARB; pname: BufferPNameARB; var params: Int32);
    begin
      z_GetBufferParameteriv_ovr_0(target, pname, params);
    end;
    public z_GetBufferParameteriv_ovr_2 := GetFuncOrNil&<procedure(target: BufferTargetARB; pname: BufferPNameARB; params: IntPtr)>(z_GetBufferParameteriv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetBufferParameteriv(target: BufferTargetARB; pname: BufferPNameARB; params: IntPtr);
    begin
      z_GetBufferParameteriv_ovr_2(target, pname, params);
    end;
    
    // added in gl1.5
    public z_GetBufferPointerv_adr := GetFuncAdr('glGetBufferPointerv');
    public z_GetBufferPointerv_ovr_0 := GetFuncOrNil&<procedure(target: BufferTargetARB; pname: BufferPointerNameARB; var params: IntPtr)>(z_GetBufferPointerv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetBufferPointerv(target: BufferTargetARB; pname: BufferPointerNameARB; params: array of IntPtr);
    begin
      z_GetBufferPointerv_ovr_0(target, pname, params[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetBufferPointerv(target: BufferTargetARB; pname: BufferPointerNameARB; var params: IntPtr);
    begin
      z_GetBufferPointerv_ovr_0(target, pname, params);
    end;
    public z_GetBufferPointerv_ovr_2 := GetFuncOrNil&<procedure(target: BufferTargetARB; pname: BufferPointerNameARB; params: IntPtr)>(z_GetBufferPointerv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetBufferPointerv(target: BufferTargetARB; pname: BufferPointerNameARB; params: IntPtr);
    begin
      z_GetBufferPointerv_ovr_2(target, pname, params);
    end;
    
    // added in gl1.5
    public z_GetBufferSubData_adr := GetFuncAdr('glGetBufferSubData');
    public z_GetBufferSubData_ovr_0 := GetFuncOrNil&<procedure(target: BufferTargetARB; offset: IntPtr; size: IntPtr; data: IntPtr)>(z_GetBufferSubData_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetBufferSubData(target: BufferTargetARB; offset: IntPtr; size: IntPtr; data: IntPtr);
    begin
      z_GetBufferSubData_ovr_0(target, offset, size, data);
    end;
    
    // added in gl1.3
    public z_GetCompressedTexImage_adr := GetFuncAdr('glGetCompressedTexImage');
    public z_GetCompressedTexImage_ovr_0 := GetFuncOrNil&<procedure(target: TextureTarget; level: Int32; img: IntPtr)>(z_GetCompressedTexImage_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetCompressedTexImage(target: TextureTarget; level: Int32; img: IntPtr);
    begin
      z_GetCompressedTexImage_ovr_0(target, level, img);
    end;
    
    // added in gl4.5
    public z_GetCompressedTextureImage_adr := GetFuncAdr('glGetCompressedTextureImage');
    public z_GetCompressedTextureImage_ovr_0 := GetFuncOrNil&<procedure(texture: UInt32; level: Int32; bufSize: Int32; pixels: IntPtr)>(z_GetCompressedTextureImage_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetCompressedTextureImage(texture: UInt32; level: Int32; bufSize: Int32; pixels: IntPtr);
    begin
      z_GetCompressedTextureImage_ovr_0(texture, level, bufSize, pixels);
    end;
    
    // added in gl4.5
    public z_GetCompressedTextureSubImage_adr := GetFuncAdr('glGetCompressedTextureSubImage');
    public z_GetCompressedTextureSubImage_ovr_0 := GetFuncOrNil&<procedure(texture: UInt32; level: Int32; xoffset: Int32; yoffset: Int32; zoffset: Int32; width: Int32; height: Int32; depth: Int32; bufSize: Int32; pixels: IntPtr)>(z_GetCompressedTextureSubImage_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetCompressedTextureSubImage(texture: UInt32; level: Int32; xoffset: Int32; yoffset: Int32; zoffset: Int32; width: Int32; height: Int32; depth: Int32; bufSize: Int32; pixels: IntPtr);
    begin
      z_GetCompressedTextureSubImage_ovr_0(texture, level, xoffset, yoffset, zoffset, width, height, depth, bufSize, pixels);
    end;
    
    // added in gl4.3
    public z_GetDebugMessageLog_adr := GetFuncAdr('glGetDebugMessageLog');
    public z_GetDebugMessageLog_ovr_0 := GetFuncOrNil&<function(count: UInt32; bufSize: Int32; var sources: DebugSource; var types: DebugType; var ids: UInt32; var severities: DebugSeverity; var lengths: Int32; messageLog: IntPtr): UInt32>(z_GetDebugMessageLog_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetDebugMessageLog(count: UInt32; bufSize: Int32; sources: array of DebugSource; types: array of DebugType; ids: array of UInt32; severities: array of DebugSeverity; lengths: array of Int32; messageLog: string): UInt32;
    begin
      var par_8_str_ptr := Marshal.StringToHGlobalAnsi(messageLog);
      Result := z_GetDebugMessageLog_ovr_0(count, bufSize, sources[0], types[0], ids[0], severities[0], lengths[0], par_8_str_ptr);
      Marshal.FreeHGlobal(par_8_str_ptr);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetDebugMessageLog(count: UInt32; bufSize: Int32; sources: array of DebugSource; types: array of DebugType; ids: array of UInt32; severities: array of DebugSeverity; lengths: array of Int32; messageLog: IntPtr): UInt32;
    begin
      Result := z_GetDebugMessageLog_ovr_0(count, bufSize, sources[0], types[0], ids[0], severities[0], lengths[0], messageLog);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetDebugMessageLog(count: UInt32; bufSize: Int32; sources: array of DebugSource; types: array of DebugType; ids: array of UInt32; severities: array of DebugSeverity; var lengths: Int32; messageLog: string): UInt32;
    begin
      var par_8_str_ptr := Marshal.StringToHGlobalAnsi(messageLog);
      Result := z_GetDebugMessageLog_ovr_0(count, bufSize, sources[0], types[0], ids[0], severities[0], lengths, par_8_str_ptr);
      Marshal.FreeHGlobal(par_8_str_ptr);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetDebugMessageLog(count: UInt32; bufSize: Int32; sources: array of DebugSource; types: array of DebugType; ids: array of UInt32; severities: array of DebugSeverity; var lengths: Int32; messageLog: IntPtr): UInt32;
    begin
      Result := z_GetDebugMessageLog_ovr_0(count, bufSize, sources[0], types[0], ids[0], severities[0], lengths, messageLog);
    end;
    public z_GetDebugMessageLog_ovr_4 := GetFuncOrNil&<function(count: UInt32; bufSize: Int32; var sources: DebugSource; var types: DebugType; var ids: UInt32; var severities: DebugSeverity; lengths: IntPtr; messageLog: IntPtr): UInt32>(z_GetDebugMessageLog_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetDebugMessageLog(count: UInt32; bufSize: Int32; sources: array of DebugSource; types: array of DebugType; ids: array of UInt32; severities: array of DebugSeverity; lengths: IntPtr; messageLog: string): UInt32;
    begin
      var par_8_str_ptr := Marshal.StringToHGlobalAnsi(messageLog);
      Result := z_GetDebugMessageLog_ovr_4(count, bufSize, sources[0], types[0], ids[0], severities[0], lengths, par_8_str_ptr);
      Marshal.FreeHGlobal(par_8_str_ptr);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetDebugMessageLog(count: UInt32; bufSize: Int32; sources: array of DebugSource; types: array of DebugType; ids: array of UInt32; severities: array of DebugSeverity; lengths: IntPtr; messageLog: IntPtr): UInt32;
    begin
      Result := z_GetDebugMessageLog_ovr_4(count, bufSize, sources[0], types[0], ids[0], severities[0], lengths, messageLog);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetDebugMessageLog(count: UInt32; bufSize: Int32; sources: array of DebugSource; types: array of DebugType; ids: array of UInt32; var severities: DebugSeverity; lengths: array of Int32; messageLog: string): UInt32;
    begin
      var par_8_str_ptr := Marshal.StringToHGlobalAnsi(messageLog);
      Result := z_GetDebugMessageLog_ovr_0(count, bufSize, sources[0], types[0], ids[0], severities, lengths[0], par_8_str_ptr);
      Marshal.FreeHGlobal(par_8_str_ptr);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetDebugMessageLog(count: UInt32; bufSize: Int32; sources: array of DebugSource; types: array of DebugType; ids: array of UInt32; var severities: DebugSeverity; lengths: array of Int32; messageLog: IntPtr): UInt32;
    begin
      Result := z_GetDebugMessageLog_ovr_0(count, bufSize, sources[0], types[0], ids[0], severities, lengths[0], messageLog);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetDebugMessageLog(count: UInt32; bufSize: Int32; sources: array of DebugSource; types: array of DebugType; ids: array of UInt32; var severities: DebugSeverity; var lengths: Int32; messageLog: string): UInt32;
    begin
      var par_8_str_ptr := Marshal.StringToHGlobalAnsi(messageLog);
      Result := z_GetDebugMessageLog_ovr_0(count, bufSize, sources[0], types[0], ids[0], severities, lengths, par_8_str_ptr);
      Marshal.FreeHGlobal(par_8_str_ptr);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetDebugMessageLog(count: UInt32; bufSize: Int32; sources: array of DebugSource; types: array of DebugType; ids: array of UInt32; var severities: DebugSeverity; var lengths: Int32; messageLog: IntPtr): UInt32;
    begin
      Result := z_GetDebugMessageLog_ovr_0(count, bufSize, sources[0], types[0], ids[0], severities, lengths, messageLog);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetDebugMessageLog(count: UInt32; bufSize: Int32; sources: array of DebugSource; types: array of DebugType; ids: array of UInt32; var severities: DebugSeverity; lengths: IntPtr; messageLog: string): UInt32;
    begin
      var par_8_str_ptr := Marshal.StringToHGlobalAnsi(messageLog);
      Result := z_GetDebugMessageLog_ovr_4(count, bufSize, sources[0], types[0], ids[0], severities, lengths, par_8_str_ptr);
      Marshal.FreeHGlobal(par_8_str_ptr);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetDebugMessageLog(count: UInt32; bufSize: Int32; sources: array of DebugSource; types: array of DebugType; ids: array of UInt32; var severities: DebugSeverity; lengths: IntPtr; messageLog: IntPtr): UInt32;
    begin
      Result := z_GetDebugMessageLog_ovr_4(count, bufSize, sources[0], types[0], ids[0], severities, lengths, messageLog);
    end;
    public z_GetDebugMessageLog_ovr_12 := GetFuncOrNil&<function(count: UInt32; bufSize: Int32; var sources: DebugSource; var types: DebugType; var ids: UInt32; severities: IntPtr; var lengths: Int32; messageLog: IntPtr): UInt32>(z_GetDebugMessageLog_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetDebugMessageLog(count: UInt32; bufSize: Int32; sources: array of DebugSource; types: array of DebugType; ids: array of UInt32; severities: IntPtr; lengths: array of Int32; messageLog: string): UInt32;
    begin
      var par_8_str_ptr := Marshal.StringToHGlobalAnsi(messageLog);
      Result := z_GetDebugMessageLog_ovr_12(count, bufSize, sources[0], types[0], ids[0], severities, lengths[0], par_8_str_ptr);
      Marshal.FreeHGlobal(par_8_str_ptr);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetDebugMessageLog(count: UInt32; bufSize: Int32; sources: array of DebugSource; types: array of DebugType; ids: array of UInt32; severities: IntPtr; lengths: array of Int32; messageLog: IntPtr): UInt32;
    begin
      Result := z_GetDebugMessageLog_ovr_12(count, bufSize, sources[0], types[0], ids[0], severities, lengths[0], messageLog);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetDebugMessageLog(count: UInt32; bufSize: Int32; sources: array of DebugSource; types: array of DebugType; ids: array of UInt32; severities: IntPtr; var lengths: Int32; messageLog: string): UInt32;
    begin
      var par_8_str_ptr := Marshal.StringToHGlobalAnsi(messageLog);
      Result := z_GetDebugMessageLog_ovr_12(count, bufSize, sources[0], types[0], ids[0], severities, lengths, par_8_str_ptr);
      Marshal.FreeHGlobal(par_8_str_ptr);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetDebugMessageLog(count: UInt32; bufSize: Int32; sources: array of DebugSource; types: array of DebugType; ids: array of UInt32; severities: IntPtr; var lengths: Int32; messageLog: IntPtr): UInt32;
    begin
      Result := z_GetDebugMessageLog_ovr_12(count, bufSize, sources[0], types[0], ids[0], severities, lengths, messageLog);
    end;
    public z_GetDebugMessageLog_ovr_16 := GetFuncOrNil&<function(count: UInt32; bufSize: Int32; var sources: DebugSource; var types: DebugType; var ids: UInt32; severities: IntPtr; lengths: IntPtr; messageLog: IntPtr): UInt32>(z_GetDebugMessageLog_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetDebugMessageLog(count: UInt32; bufSize: Int32; sources: array of DebugSource; types: array of DebugType; ids: array of UInt32; severities: IntPtr; lengths: IntPtr; messageLog: string): UInt32;
    begin
      var par_8_str_ptr := Marshal.StringToHGlobalAnsi(messageLog);
      Result := z_GetDebugMessageLog_ovr_16(count, bufSize, sources[0], types[0], ids[0], severities, lengths, par_8_str_ptr);
      Marshal.FreeHGlobal(par_8_str_ptr);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetDebugMessageLog(count: UInt32; bufSize: Int32; sources: array of DebugSource; types: array of DebugType; ids: array of UInt32; severities: IntPtr; lengths: IntPtr; messageLog: IntPtr): UInt32;
    begin
      Result := z_GetDebugMessageLog_ovr_16(count, bufSize, sources[0], types[0], ids[0], severities, lengths, messageLog);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetDebugMessageLog(count: UInt32; bufSize: Int32; sources: array of DebugSource; types: array of DebugType; var ids: UInt32; severities: array of DebugSeverity; lengths: array of Int32; messageLog: string): UInt32;
    begin
      var par_8_str_ptr := Marshal.StringToHGlobalAnsi(messageLog);
      Result := z_GetDebugMessageLog_ovr_0(count, bufSize, sources[0], types[0], ids, severities[0], lengths[0], par_8_str_ptr);
      Marshal.FreeHGlobal(par_8_str_ptr);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetDebugMessageLog(count: UInt32; bufSize: Int32; sources: array of DebugSource; types: array of DebugType; var ids: UInt32; severities: array of DebugSeverity; lengths: array of Int32; messageLog: IntPtr): UInt32;
    begin
      Result := z_GetDebugMessageLog_ovr_0(count, bufSize, sources[0], types[0], ids, severities[0], lengths[0], messageLog);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetDebugMessageLog(count: UInt32; bufSize: Int32; sources: array of DebugSource; types: array of DebugType; var ids: UInt32; severities: array of DebugSeverity; var lengths: Int32; messageLog: string): UInt32;
    begin
      var par_8_str_ptr := Marshal.StringToHGlobalAnsi(messageLog);
      Result := z_GetDebugMessageLog_ovr_0(count, bufSize, sources[0], types[0], ids, severities[0], lengths, par_8_str_ptr);
      Marshal.FreeHGlobal(par_8_str_ptr);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetDebugMessageLog(count: UInt32; bufSize: Int32; sources: array of DebugSource; types: array of DebugType; var ids: UInt32; severities: array of DebugSeverity; var lengths: Int32; messageLog: IntPtr): UInt32;
    begin
      Result := z_GetDebugMessageLog_ovr_0(count, bufSize, sources[0], types[0], ids, severities[0], lengths, messageLog);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetDebugMessageLog(count: UInt32; bufSize: Int32; sources: array of DebugSource; types: array of DebugType; var ids: UInt32; severities: array of DebugSeverity; lengths: IntPtr; messageLog: string): UInt32;
    begin
      var par_8_str_ptr := Marshal.StringToHGlobalAnsi(messageLog);
      Result := z_GetDebugMessageLog_ovr_4(count, bufSize, sources[0], types[0], ids, severities[0], lengths, par_8_str_ptr);
      Marshal.FreeHGlobal(par_8_str_ptr);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetDebugMessageLog(count: UInt32; bufSize: Int32; sources: array of DebugSource; types: array of DebugType; var ids: UInt32; severities: array of DebugSeverity; lengths: IntPtr; messageLog: IntPtr): UInt32;
    begin
      Result := z_GetDebugMessageLog_ovr_4(count, bufSize, sources[0], types[0], ids, severities[0], lengths, messageLog);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetDebugMessageLog(count: UInt32; bufSize: Int32; sources: array of DebugSource; types: array of DebugType; var ids: UInt32; var severities: DebugSeverity; lengths: array of Int32; messageLog: string): UInt32;
    begin
      var par_8_str_ptr := Marshal.StringToHGlobalAnsi(messageLog);
      Result := z_GetDebugMessageLog_ovr_0(count, bufSize, sources[0], types[0], ids, severities, lengths[0], par_8_str_ptr);
      Marshal.FreeHGlobal(par_8_str_ptr);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetDebugMessageLog(count: UInt32; bufSize: Int32; sources: array of DebugSource; types: array of DebugType; var ids: UInt32; var severities: DebugSeverity; lengths: array of Int32; messageLog: IntPtr): UInt32;
    begin
      Result := z_GetDebugMessageLog_ovr_0(count, bufSize, sources[0], types[0], ids, severities, lengths[0], messageLog);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetDebugMessageLog(count: UInt32; bufSize: Int32; sources: array of DebugSource; types: array of DebugType; var ids: UInt32; var severities: DebugSeverity; var lengths: Int32; messageLog: string): UInt32;
    begin
      var par_8_str_ptr := Marshal.StringToHGlobalAnsi(messageLog);
      Result := z_GetDebugMessageLog_ovr_0(count, bufSize, sources[0], types[0], ids, severities, lengths, par_8_str_ptr);
      Marshal.FreeHGlobal(par_8_str_ptr);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetDebugMessageLog(count: UInt32; bufSize: Int32; sources: array of DebugSource; types: array of DebugType; var ids: UInt32; var severities: DebugSeverity; var lengths: Int32; messageLog: IntPtr): UInt32;
    begin
      Result := z_GetDebugMessageLog_ovr_0(count, bufSize, sources[0], types[0], ids, severities, lengths, messageLog);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetDebugMessageLog(count: UInt32; bufSize: Int32; sources: array of DebugSource; types: array of DebugType; var ids: UInt32; var severities: DebugSeverity; lengths: IntPtr; messageLog: string): UInt32;
    begin
      var par_8_str_ptr := Marshal.StringToHGlobalAnsi(messageLog);
      Result := z_GetDebugMessageLog_ovr_4(count, bufSize, sources[0], types[0], ids, severities, lengths, par_8_str_ptr);
      Marshal.FreeHGlobal(par_8_str_ptr);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetDebugMessageLog(count: UInt32; bufSize: Int32; sources: array of DebugSource; types: array of DebugType; var ids: UInt32; var severities: DebugSeverity; lengths: IntPtr; messageLog: IntPtr): UInt32;
    begin
      Result := z_GetDebugMessageLog_ovr_4(count, bufSize, sources[0], types[0], ids, severities, lengths, messageLog);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetDebugMessageLog(count: UInt32; bufSize: Int32; sources: array of DebugSource; types: array of DebugType; var ids: UInt32; severities: IntPtr; lengths: array of Int32; messageLog: string): UInt32;
    begin
      var par_8_str_ptr := Marshal.StringToHGlobalAnsi(messageLog);
      Result := z_GetDebugMessageLog_ovr_12(count, bufSize, sources[0], types[0], ids, severities, lengths[0], par_8_str_ptr);
      Marshal.FreeHGlobal(par_8_str_ptr);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetDebugMessageLog(count: UInt32; bufSize: Int32; sources: array of DebugSource; types: array of DebugType; var ids: UInt32; severities: IntPtr; lengths: array of Int32; messageLog: IntPtr): UInt32;
    begin
      Result := z_GetDebugMessageLog_ovr_12(count, bufSize, sources[0], types[0], ids, severities, lengths[0], messageLog);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetDebugMessageLog(count: UInt32; bufSize: Int32; sources: array of DebugSource; types: array of DebugType; var ids: UInt32; severities: IntPtr; var lengths: Int32; messageLog: string): UInt32;
    begin
      var par_8_str_ptr := Marshal.StringToHGlobalAnsi(messageLog);
      Result := z_GetDebugMessageLog_ovr_12(count, bufSize, sources[0], types[0], ids, severities, lengths, par_8_str_ptr);
      Marshal.FreeHGlobal(par_8_str_ptr);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetDebugMessageLog(count: UInt32; bufSize: Int32; sources: array of DebugSource; types: array of DebugType; var ids: UInt32; severities: IntPtr; var lengths: Int32; messageLog: IntPtr): UInt32;
    begin
      Result := z_GetDebugMessageLog_ovr_12(count, bufSize, sources[0], types[0], ids, severities, lengths, messageLog);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetDebugMessageLog(count: UInt32; bufSize: Int32; sources: array of DebugSource; types: array of DebugType; var ids: UInt32; severities: IntPtr; lengths: IntPtr; messageLog: string): UInt32;
    begin
      var par_8_str_ptr := Marshal.StringToHGlobalAnsi(messageLog);
      Result := z_GetDebugMessageLog_ovr_16(count, bufSize, sources[0], types[0], ids, severities, lengths, par_8_str_ptr);
      Marshal.FreeHGlobal(par_8_str_ptr);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetDebugMessageLog(count: UInt32; bufSize: Int32; sources: array of DebugSource; types: array of DebugType; var ids: UInt32; severities: IntPtr; lengths: IntPtr; messageLog: IntPtr): UInt32;
    begin
      Result := z_GetDebugMessageLog_ovr_16(count, bufSize, sources[0], types[0], ids, severities, lengths, messageLog);
    end;
    public z_GetDebugMessageLog_ovr_36 := GetFuncOrNil&<function(count: UInt32; bufSize: Int32; var sources: DebugSource; var types: DebugType; ids: IntPtr; var severities: DebugSeverity; var lengths: Int32; messageLog: IntPtr): UInt32>(z_GetDebugMessageLog_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetDebugMessageLog(count: UInt32; bufSize: Int32; sources: array of DebugSource; types: array of DebugType; ids: IntPtr; severities: array of DebugSeverity; lengths: array of Int32; messageLog: string): UInt32;
    begin
      var par_8_str_ptr := Marshal.StringToHGlobalAnsi(messageLog);
      Result := z_GetDebugMessageLog_ovr_36(count, bufSize, sources[0], types[0], ids, severities[0], lengths[0], par_8_str_ptr);
      Marshal.FreeHGlobal(par_8_str_ptr);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetDebugMessageLog(count: UInt32; bufSize: Int32; sources: array of DebugSource; types: array of DebugType; ids: IntPtr; severities: array of DebugSeverity; lengths: array of Int32; messageLog: IntPtr): UInt32;
    begin
      Result := z_GetDebugMessageLog_ovr_36(count, bufSize, sources[0], types[0], ids, severities[0], lengths[0], messageLog);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetDebugMessageLog(count: UInt32; bufSize: Int32; sources: array of DebugSource; types: array of DebugType; ids: IntPtr; severities: array of DebugSeverity; var lengths: Int32; messageLog: string): UInt32;
    begin
      var par_8_str_ptr := Marshal.StringToHGlobalAnsi(messageLog);
      Result := z_GetDebugMessageLog_ovr_36(count, bufSize, sources[0], types[0], ids, severities[0], lengths, par_8_str_ptr);
      Marshal.FreeHGlobal(par_8_str_ptr);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetDebugMessageLog(count: UInt32; bufSize: Int32; sources: array of DebugSource; types: array of DebugType; ids: IntPtr; severities: array of DebugSeverity; var lengths: Int32; messageLog: IntPtr): UInt32;
    begin
      Result := z_GetDebugMessageLog_ovr_36(count, bufSize, sources[0], types[0], ids, severities[0], lengths, messageLog);
    end;
    public z_GetDebugMessageLog_ovr_40 := GetFuncOrNil&<function(count: UInt32; bufSize: Int32; var sources: DebugSource; var types: DebugType; ids: IntPtr; var severities: DebugSeverity; lengths: IntPtr; messageLog: IntPtr): UInt32>(z_GetDebugMessageLog_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetDebugMessageLog(count: UInt32; bufSize: Int32; sources: array of DebugSource; types: array of DebugType; ids: IntPtr; severities: array of DebugSeverity; lengths: IntPtr; messageLog: string): UInt32;
    begin
      var par_8_str_ptr := Marshal.StringToHGlobalAnsi(messageLog);
      Result := z_GetDebugMessageLog_ovr_40(count, bufSize, sources[0], types[0], ids, severities[0], lengths, par_8_str_ptr);
      Marshal.FreeHGlobal(par_8_str_ptr);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetDebugMessageLog(count: UInt32; bufSize: Int32; sources: array of DebugSource; types: array of DebugType; ids: IntPtr; severities: array of DebugSeverity; lengths: IntPtr; messageLog: IntPtr): UInt32;
    begin
      Result := z_GetDebugMessageLog_ovr_40(count, bufSize, sources[0], types[0], ids, severities[0], lengths, messageLog);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetDebugMessageLog(count: UInt32; bufSize: Int32; sources: array of DebugSource; types: array of DebugType; ids: IntPtr; var severities: DebugSeverity; lengths: array of Int32; messageLog: string): UInt32;
    begin
      var par_8_str_ptr := Marshal.StringToHGlobalAnsi(messageLog);
      Result := z_GetDebugMessageLog_ovr_36(count, bufSize, sources[0], types[0], ids, severities, lengths[0], par_8_str_ptr);
      Marshal.FreeHGlobal(par_8_str_ptr);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetDebugMessageLog(count: UInt32; bufSize: Int32; sources: array of DebugSource; types: array of DebugType; ids: IntPtr; var severities: DebugSeverity; lengths: array of Int32; messageLog: IntPtr): UInt32;
    begin
      Result := z_GetDebugMessageLog_ovr_36(count, bufSize, sources[0], types[0], ids, severities, lengths[0], messageLog);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetDebugMessageLog(count: UInt32; bufSize: Int32; sources: array of DebugSource; types: array of DebugType; ids: IntPtr; var severities: DebugSeverity; var lengths: Int32; messageLog: string): UInt32;
    begin
      var par_8_str_ptr := Marshal.StringToHGlobalAnsi(messageLog);
      Result := z_GetDebugMessageLog_ovr_36(count, bufSize, sources[0], types[0], ids, severities, lengths, par_8_str_ptr);
      Marshal.FreeHGlobal(par_8_str_ptr);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetDebugMessageLog(count: UInt32; bufSize: Int32; sources: array of DebugSource; types: array of DebugType; ids: IntPtr; var severities: DebugSeverity; var lengths: Int32; messageLog: IntPtr): UInt32;
    begin
      Result := z_GetDebugMessageLog_ovr_36(count, bufSize, sources[0], types[0], ids, severities, lengths, messageLog);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetDebugMessageLog(count: UInt32; bufSize: Int32; sources: array of DebugSource; types: array of DebugType; ids: IntPtr; var severities: DebugSeverity; lengths: IntPtr; messageLog: string): UInt32;
    begin
      var par_8_str_ptr := Marshal.StringToHGlobalAnsi(messageLog);
      Result := z_GetDebugMessageLog_ovr_40(count, bufSize, sources[0], types[0], ids, severities, lengths, par_8_str_ptr);
      Marshal.FreeHGlobal(par_8_str_ptr);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetDebugMessageLog(count: UInt32; bufSize: Int32; sources: array of DebugSource; types: array of DebugType; ids: IntPtr; var severities: DebugSeverity; lengths: IntPtr; messageLog: IntPtr): UInt32;
    begin
      Result := z_GetDebugMessageLog_ovr_40(count, bufSize, sources[0], types[0], ids, severities, lengths, messageLog);
    end;
    public z_GetDebugMessageLog_ovr_48 := GetFuncOrNil&<function(count: UInt32; bufSize: Int32; var sources: DebugSource; var types: DebugType; ids: IntPtr; severities: IntPtr; var lengths: Int32; messageLog: IntPtr): UInt32>(z_GetDebugMessageLog_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetDebugMessageLog(count: UInt32; bufSize: Int32; sources: array of DebugSource; types: array of DebugType; ids: IntPtr; severities: IntPtr; lengths: array of Int32; messageLog: string): UInt32;
    begin
      var par_8_str_ptr := Marshal.StringToHGlobalAnsi(messageLog);
      Result := z_GetDebugMessageLog_ovr_48(count, bufSize, sources[0], types[0], ids, severities, lengths[0], par_8_str_ptr);
      Marshal.FreeHGlobal(par_8_str_ptr);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetDebugMessageLog(count: UInt32; bufSize: Int32; sources: array of DebugSource; types: array of DebugType; ids: IntPtr; severities: IntPtr; lengths: array of Int32; messageLog: IntPtr): UInt32;
    begin
      Result := z_GetDebugMessageLog_ovr_48(count, bufSize, sources[0], types[0], ids, severities, lengths[0], messageLog);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetDebugMessageLog(count: UInt32; bufSize: Int32; sources: array of DebugSource; types: array of DebugType; ids: IntPtr; severities: IntPtr; var lengths: Int32; messageLog: string): UInt32;
    begin
      var par_8_str_ptr := Marshal.StringToHGlobalAnsi(messageLog);
      Result := z_GetDebugMessageLog_ovr_48(count, bufSize, sources[0], types[0], ids, severities, lengths, par_8_str_ptr);
      Marshal.FreeHGlobal(par_8_str_ptr);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetDebugMessageLog(count: UInt32; bufSize: Int32; sources: array of DebugSource; types: array of DebugType; ids: IntPtr; severities: IntPtr; var lengths: Int32; messageLog: IntPtr): UInt32;
    begin
      Result := z_GetDebugMessageLog_ovr_48(count, bufSize, sources[0], types[0], ids, severities, lengths, messageLog);
    end;
    public z_GetDebugMessageLog_ovr_52 := GetFuncOrNil&<function(count: UInt32; bufSize: Int32; var sources: DebugSource; var types: DebugType; ids: IntPtr; severities: IntPtr; lengths: IntPtr; messageLog: IntPtr): UInt32>(z_GetDebugMessageLog_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetDebugMessageLog(count: UInt32; bufSize: Int32; sources: array of DebugSource; types: array of DebugType; ids: IntPtr; severities: IntPtr; lengths: IntPtr; messageLog: string): UInt32;
    begin
      var par_8_str_ptr := Marshal.StringToHGlobalAnsi(messageLog);
      Result := z_GetDebugMessageLog_ovr_52(count, bufSize, sources[0], types[0], ids, severities, lengths, par_8_str_ptr);
      Marshal.FreeHGlobal(par_8_str_ptr);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetDebugMessageLog(count: UInt32; bufSize: Int32; sources: array of DebugSource; types: array of DebugType; ids: IntPtr; severities: IntPtr; lengths: IntPtr; messageLog: IntPtr): UInt32;
    begin
      Result := z_GetDebugMessageLog_ovr_52(count, bufSize, sources[0], types[0], ids, severities, lengths, messageLog);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetDebugMessageLog(count: UInt32; bufSize: Int32; sources: array of DebugSource; var types: DebugType; ids: array of UInt32; severities: array of DebugSeverity; lengths: array of Int32; messageLog: string): UInt32;
    begin
      var par_8_str_ptr := Marshal.StringToHGlobalAnsi(messageLog);
      Result := z_GetDebugMessageLog_ovr_0(count, bufSize, sources[0], types, ids[0], severities[0], lengths[0], par_8_str_ptr);
      Marshal.FreeHGlobal(par_8_str_ptr);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetDebugMessageLog(count: UInt32; bufSize: Int32; sources: array of DebugSource; var types: DebugType; ids: array of UInt32; severities: array of DebugSeverity; lengths: array of Int32; messageLog: IntPtr): UInt32;
    begin
      Result := z_GetDebugMessageLog_ovr_0(count, bufSize, sources[0], types, ids[0], severities[0], lengths[0], messageLog);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetDebugMessageLog(count: UInt32; bufSize: Int32; sources: array of DebugSource; var types: DebugType; ids: array of UInt32; severities: array of DebugSeverity; var lengths: Int32; messageLog: string): UInt32;
    begin
      var par_8_str_ptr := Marshal.StringToHGlobalAnsi(messageLog);
      Result := z_GetDebugMessageLog_ovr_0(count, bufSize, sources[0], types, ids[0], severities[0], lengths, par_8_str_ptr);
      Marshal.FreeHGlobal(par_8_str_ptr);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetDebugMessageLog(count: UInt32; bufSize: Int32; sources: array of DebugSource; var types: DebugType; ids: array of UInt32; severities: array of DebugSeverity; var lengths: Int32; messageLog: IntPtr): UInt32;
    begin
      Result := z_GetDebugMessageLog_ovr_0(count, bufSize, sources[0], types, ids[0], severities[0], lengths, messageLog);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetDebugMessageLog(count: UInt32; bufSize: Int32; sources: array of DebugSource; var types: DebugType; ids: array of UInt32; severities: array of DebugSeverity; lengths: IntPtr; messageLog: string): UInt32;
    begin
      var par_8_str_ptr := Marshal.StringToHGlobalAnsi(messageLog);
      Result := z_GetDebugMessageLog_ovr_4(count, bufSize, sources[0], types, ids[0], severities[0], lengths, par_8_str_ptr);
      Marshal.FreeHGlobal(par_8_str_ptr);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetDebugMessageLog(count: UInt32; bufSize: Int32; sources: array of DebugSource; var types: DebugType; ids: array of UInt32; severities: array of DebugSeverity; lengths: IntPtr; messageLog: IntPtr): UInt32;
    begin
      Result := z_GetDebugMessageLog_ovr_4(count, bufSize, sources[0], types, ids[0], severities[0], lengths, messageLog);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetDebugMessageLog(count: UInt32; bufSize: Int32; sources: array of DebugSource; var types: DebugType; ids: array of UInt32; var severities: DebugSeverity; lengths: array of Int32; messageLog: string): UInt32;
    begin
      var par_8_str_ptr := Marshal.StringToHGlobalAnsi(messageLog);
      Result := z_GetDebugMessageLog_ovr_0(count, bufSize, sources[0], types, ids[0], severities, lengths[0], par_8_str_ptr);
      Marshal.FreeHGlobal(par_8_str_ptr);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetDebugMessageLog(count: UInt32; bufSize: Int32; sources: array of DebugSource; var types: DebugType; ids: array of UInt32; var severities: DebugSeverity; lengths: array of Int32; messageLog: IntPtr): UInt32;
    begin
      Result := z_GetDebugMessageLog_ovr_0(count, bufSize, sources[0], types, ids[0], severities, lengths[0], messageLog);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetDebugMessageLog(count: UInt32; bufSize: Int32; sources: array of DebugSource; var types: DebugType; ids: array of UInt32; var severities: DebugSeverity; var lengths: Int32; messageLog: string): UInt32;
    begin
      var par_8_str_ptr := Marshal.StringToHGlobalAnsi(messageLog);
      Result := z_GetDebugMessageLog_ovr_0(count, bufSize, sources[0], types, ids[0], severities, lengths, par_8_str_ptr);
      Marshal.FreeHGlobal(par_8_str_ptr);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetDebugMessageLog(count: UInt32; bufSize: Int32; sources: array of DebugSource; var types: DebugType; ids: array of UInt32; var severities: DebugSeverity; var lengths: Int32; messageLog: IntPtr): UInt32;
    begin
      Result := z_GetDebugMessageLog_ovr_0(count, bufSize, sources[0], types, ids[0], severities, lengths, messageLog);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetDebugMessageLog(count: UInt32; bufSize: Int32; sources: array of DebugSource; var types: DebugType; ids: array of UInt32; var severities: DebugSeverity; lengths: IntPtr; messageLog: string): UInt32;
    begin
      var par_8_str_ptr := Marshal.StringToHGlobalAnsi(messageLog);
      Result := z_GetDebugMessageLog_ovr_4(count, bufSize, sources[0], types, ids[0], severities, lengths, par_8_str_ptr);
      Marshal.FreeHGlobal(par_8_str_ptr);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetDebugMessageLog(count: UInt32; bufSize: Int32; sources: array of DebugSource; var types: DebugType; ids: array of UInt32; var severities: DebugSeverity; lengths: IntPtr; messageLog: IntPtr): UInt32;
    begin
      Result := z_GetDebugMessageLog_ovr_4(count, bufSize, sources[0], types, ids[0], severities, lengths, messageLog);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetDebugMessageLog(count: UInt32; bufSize: Int32; sources: array of DebugSource; var types: DebugType; ids: array of UInt32; severities: IntPtr; lengths: array of Int32; messageLog: string): UInt32;
    begin
      var par_8_str_ptr := Marshal.StringToHGlobalAnsi(messageLog);
      Result := z_GetDebugMessageLog_ovr_12(count, bufSize, sources[0], types, ids[0], severities, lengths[0], par_8_str_ptr);
      Marshal.FreeHGlobal(par_8_str_ptr);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetDebugMessageLog(count: UInt32; bufSize: Int32; sources: array of DebugSource; var types: DebugType; ids: array of UInt32; severities: IntPtr; lengths: array of Int32; messageLog: IntPtr): UInt32;
    begin
      Result := z_GetDebugMessageLog_ovr_12(count, bufSize, sources[0], types, ids[0], severities, lengths[0], messageLog);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetDebugMessageLog(count: UInt32; bufSize: Int32; sources: array of DebugSource; var types: DebugType; ids: array of UInt32; severities: IntPtr; var lengths: Int32; messageLog: string): UInt32;
    begin
      var par_8_str_ptr := Marshal.StringToHGlobalAnsi(messageLog);
      Result := z_GetDebugMessageLog_ovr_12(count, bufSize, sources[0], types, ids[0], severities, lengths, par_8_str_ptr);
      Marshal.FreeHGlobal(par_8_str_ptr);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetDebugMessageLog(count: UInt32; bufSize: Int32; sources: array of DebugSource; var types: DebugType; ids: array of UInt32; severities: IntPtr; var lengths: Int32; messageLog: IntPtr): UInt32;
    begin
      Result := z_GetDebugMessageLog_ovr_12(count, bufSize, sources[0], types, ids[0], severities, lengths, messageLog);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetDebugMessageLog(count: UInt32; bufSize: Int32; sources: array of DebugSource; var types: DebugType; ids: array of UInt32; severities: IntPtr; lengths: IntPtr; messageLog: string): UInt32;
    begin
      var par_8_str_ptr := Marshal.StringToHGlobalAnsi(messageLog);
      Result := z_GetDebugMessageLog_ovr_16(count, bufSize, sources[0], types, ids[0], severities, lengths, par_8_str_ptr);
      Marshal.FreeHGlobal(par_8_str_ptr);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetDebugMessageLog(count: UInt32; bufSize: Int32; sources: array of DebugSource; var types: DebugType; ids: array of UInt32; severities: IntPtr; lengths: IntPtr; messageLog: IntPtr): UInt32;
    begin
      Result := z_GetDebugMessageLog_ovr_16(count, bufSize, sources[0], types, ids[0], severities, lengths, messageLog);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetDebugMessageLog(count: UInt32; bufSize: Int32; sources: array of DebugSource; var types: DebugType; var ids: UInt32; severities: array of DebugSeverity; lengths: array of Int32; messageLog: string): UInt32;
    begin
      var par_8_str_ptr := Marshal.StringToHGlobalAnsi(messageLog);
      Result := z_GetDebugMessageLog_ovr_0(count, bufSize, sources[0], types, ids, severities[0], lengths[0], par_8_str_ptr);
      Marshal.FreeHGlobal(par_8_str_ptr);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetDebugMessageLog(count: UInt32; bufSize: Int32; sources: array of DebugSource; var types: DebugType; var ids: UInt32; severities: array of DebugSeverity; lengths: array of Int32; messageLog: IntPtr): UInt32;
    begin
      Result := z_GetDebugMessageLog_ovr_0(count, bufSize, sources[0], types, ids, severities[0], lengths[0], messageLog);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetDebugMessageLog(count: UInt32; bufSize: Int32; sources: array of DebugSource; var types: DebugType; var ids: UInt32; severities: array of DebugSeverity; var lengths: Int32; messageLog: string): UInt32;
    begin
      var par_8_str_ptr := Marshal.StringToHGlobalAnsi(messageLog);
      Result := z_GetDebugMessageLog_ovr_0(count, bufSize, sources[0], types, ids, severities[0], lengths, par_8_str_ptr);
      Marshal.FreeHGlobal(par_8_str_ptr);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetDebugMessageLog(count: UInt32; bufSize: Int32; sources: array of DebugSource; var types: DebugType; var ids: UInt32; severities: array of DebugSeverity; var lengths: Int32; messageLog: IntPtr): UInt32;
    begin
      Result := z_GetDebugMessageLog_ovr_0(count, bufSize, sources[0], types, ids, severities[0], lengths, messageLog);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetDebugMessageLog(count: UInt32; bufSize: Int32; sources: array of DebugSource; var types: DebugType; var ids: UInt32; severities: array of DebugSeverity; lengths: IntPtr; messageLog: string): UInt32;
    begin
      var par_8_str_ptr := Marshal.StringToHGlobalAnsi(messageLog);
      Result := z_GetDebugMessageLog_ovr_4(count, bufSize, sources[0], types, ids, severities[0], lengths, par_8_str_ptr);
      Marshal.FreeHGlobal(par_8_str_ptr);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetDebugMessageLog(count: UInt32; bufSize: Int32; sources: array of DebugSource; var types: DebugType; var ids: UInt32; severities: array of DebugSeverity; lengths: IntPtr; messageLog: IntPtr): UInt32;
    begin
      Result := z_GetDebugMessageLog_ovr_4(count, bufSize, sources[0], types, ids, severities[0], lengths, messageLog);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetDebugMessageLog(count: UInt32; bufSize: Int32; sources: array of DebugSource; var types: DebugType; var ids: UInt32; var severities: DebugSeverity; lengths: array of Int32; messageLog: string): UInt32;
    begin
      var par_8_str_ptr := Marshal.StringToHGlobalAnsi(messageLog);
      Result := z_GetDebugMessageLog_ovr_0(count, bufSize, sources[0], types, ids, severities, lengths[0], par_8_str_ptr);
      Marshal.FreeHGlobal(par_8_str_ptr);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetDebugMessageLog(count: UInt32; bufSize: Int32; sources: array of DebugSource; var types: DebugType; var ids: UInt32; var severities: DebugSeverity; lengths: array of Int32; messageLog: IntPtr): UInt32;
    begin
      Result := z_GetDebugMessageLog_ovr_0(count, bufSize, sources[0], types, ids, severities, lengths[0], messageLog);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetDebugMessageLog(count: UInt32; bufSize: Int32; sources: array of DebugSource; var types: DebugType; var ids: UInt32; var severities: DebugSeverity; var lengths: Int32; messageLog: string): UInt32;
    begin
      var par_8_str_ptr := Marshal.StringToHGlobalAnsi(messageLog);
      Result := z_GetDebugMessageLog_ovr_0(count, bufSize, sources[0], types, ids, severities, lengths, par_8_str_ptr);
      Marshal.FreeHGlobal(par_8_str_ptr);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetDebugMessageLog(count: UInt32; bufSize: Int32; sources: array of DebugSource; var types: DebugType; var ids: UInt32; var severities: DebugSeverity; var lengths: Int32; messageLog: IntPtr): UInt32;
    begin
      Result := z_GetDebugMessageLog_ovr_0(count, bufSize, sources[0], types, ids, severities, lengths, messageLog);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetDebugMessageLog(count: UInt32; bufSize: Int32; sources: array of DebugSource; var types: DebugType; var ids: UInt32; var severities: DebugSeverity; lengths: IntPtr; messageLog: string): UInt32;
    begin
      var par_8_str_ptr := Marshal.StringToHGlobalAnsi(messageLog);
      Result := z_GetDebugMessageLog_ovr_4(count, bufSize, sources[0], types, ids, severities, lengths, par_8_str_ptr);
      Marshal.FreeHGlobal(par_8_str_ptr);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetDebugMessageLog(count: UInt32; bufSize: Int32; sources: array of DebugSource; var types: DebugType; var ids: UInt32; var severities: DebugSeverity; lengths: IntPtr; messageLog: IntPtr): UInt32;
    begin
      Result := z_GetDebugMessageLog_ovr_4(count, bufSize, sources[0], types, ids, severities, lengths, messageLog);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetDebugMessageLog(count: UInt32; bufSize: Int32; sources: array of DebugSource; var types: DebugType; var ids: UInt32; severities: IntPtr; lengths: array of Int32; messageLog: string): UInt32;
    begin
      var par_8_str_ptr := Marshal.StringToHGlobalAnsi(messageLog);
      Result := z_GetDebugMessageLog_ovr_12(count, bufSize, sources[0], types, ids, severities, lengths[0], par_8_str_ptr);
      Marshal.FreeHGlobal(par_8_str_ptr);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetDebugMessageLog(count: UInt32; bufSize: Int32; sources: array of DebugSource; var types: DebugType; var ids: UInt32; severities: IntPtr; lengths: array of Int32; messageLog: IntPtr): UInt32;
    begin
      Result := z_GetDebugMessageLog_ovr_12(count, bufSize, sources[0], types, ids, severities, lengths[0], messageLog);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetDebugMessageLog(count: UInt32; bufSize: Int32; sources: array of DebugSource; var types: DebugType; var ids: UInt32; severities: IntPtr; var lengths: Int32; messageLog: string): UInt32;
    begin
      var par_8_str_ptr := Marshal.StringToHGlobalAnsi(messageLog);
      Result := z_GetDebugMessageLog_ovr_12(count, bufSize, sources[0], types, ids, severities, lengths, par_8_str_ptr);
      Marshal.FreeHGlobal(par_8_str_ptr);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetDebugMessageLog(count: UInt32; bufSize: Int32; sources: array of DebugSource; var types: DebugType; var ids: UInt32; severities: IntPtr; var lengths: Int32; messageLog: IntPtr): UInt32;
    begin
      Result := z_GetDebugMessageLog_ovr_12(count, bufSize, sources[0], types, ids, severities, lengths, messageLog);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetDebugMessageLog(count: UInt32; bufSize: Int32; sources: array of DebugSource; var types: DebugType; var ids: UInt32; severities: IntPtr; lengths: IntPtr; messageLog: string): UInt32;
    begin
      var par_8_str_ptr := Marshal.StringToHGlobalAnsi(messageLog);
      Result := z_GetDebugMessageLog_ovr_16(count, bufSize, sources[0], types, ids, severities, lengths, par_8_str_ptr);
      Marshal.FreeHGlobal(par_8_str_ptr);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetDebugMessageLog(count: UInt32; bufSize: Int32; sources: array of DebugSource; var types: DebugType; var ids: UInt32; severities: IntPtr; lengths: IntPtr; messageLog: IntPtr): UInt32;
    begin
      Result := z_GetDebugMessageLog_ovr_16(count, bufSize, sources[0], types, ids, severities, lengths, messageLog);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetDebugMessageLog(count: UInt32; bufSize: Int32; sources: array of DebugSource; var types: DebugType; ids: IntPtr; severities: array of DebugSeverity; lengths: array of Int32; messageLog: string): UInt32;
    begin
      var par_8_str_ptr := Marshal.StringToHGlobalAnsi(messageLog);
      Result := z_GetDebugMessageLog_ovr_36(count, bufSize, sources[0], types, ids, severities[0], lengths[0], par_8_str_ptr);
      Marshal.FreeHGlobal(par_8_str_ptr);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetDebugMessageLog(count: UInt32; bufSize: Int32; sources: array of DebugSource; var types: DebugType; ids: IntPtr; severities: array of DebugSeverity; lengths: array of Int32; messageLog: IntPtr): UInt32;
    begin
      Result := z_GetDebugMessageLog_ovr_36(count, bufSize, sources[0], types, ids, severities[0], lengths[0], messageLog);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetDebugMessageLog(count: UInt32; bufSize: Int32; sources: array of DebugSource; var types: DebugType; ids: IntPtr; severities: array of DebugSeverity; var lengths: Int32; messageLog: string): UInt32;
    begin
      var par_8_str_ptr := Marshal.StringToHGlobalAnsi(messageLog);
      Result := z_GetDebugMessageLog_ovr_36(count, bufSize, sources[0], types, ids, severities[0], lengths, par_8_str_ptr);
      Marshal.FreeHGlobal(par_8_str_ptr);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetDebugMessageLog(count: UInt32; bufSize: Int32; sources: array of DebugSource; var types: DebugType; ids: IntPtr; severities: array of DebugSeverity; var lengths: Int32; messageLog: IntPtr): UInt32;
    begin
      Result := z_GetDebugMessageLog_ovr_36(count, bufSize, sources[0], types, ids, severities[0], lengths, messageLog);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetDebugMessageLog(count: UInt32; bufSize: Int32; sources: array of DebugSource; var types: DebugType; ids: IntPtr; severities: array of DebugSeverity; lengths: IntPtr; messageLog: string): UInt32;
    begin
      var par_8_str_ptr := Marshal.StringToHGlobalAnsi(messageLog);
      Result := z_GetDebugMessageLog_ovr_40(count, bufSize, sources[0], types, ids, severities[0], lengths, par_8_str_ptr);
      Marshal.FreeHGlobal(par_8_str_ptr);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetDebugMessageLog(count: UInt32; bufSize: Int32; sources: array of DebugSource; var types: DebugType; ids: IntPtr; severities: array of DebugSeverity; lengths: IntPtr; messageLog: IntPtr): UInt32;
    begin
      Result := z_GetDebugMessageLog_ovr_40(count, bufSize, sources[0], types, ids, severities[0], lengths, messageLog);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetDebugMessageLog(count: UInt32; bufSize: Int32; sources: array of DebugSource; var types: DebugType; ids: IntPtr; var severities: DebugSeverity; lengths: array of Int32; messageLog: string): UInt32;
    begin
      var par_8_str_ptr := Marshal.StringToHGlobalAnsi(messageLog);
      Result := z_GetDebugMessageLog_ovr_36(count, bufSize, sources[0], types, ids, severities, lengths[0], par_8_str_ptr);
      Marshal.FreeHGlobal(par_8_str_ptr);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetDebugMessageLog(count: UInt32; bufSize: Int32; sources: array of DebugSource; var types: DebugType; ids: IntPtr; var severities: DebugSeverity; lengths: array of Int32; messageLog: IntPtr): UInt32;
    begin
      Result := z_GetDebugMessageLog_ovr_36(count, bufSize, sources[0], types, ids, severities, lengths[0], messageLog);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetDebugMessageLog(count: UInt32; bufSize: Int32; sources: array of DebugSource; var types: DebugType; ids: IntPtr; var severities: DebugSeverity; var lengths: Int32; messageLog: string): UInt32;
    begin
      var par_8_str_ptr := Marshal.StringToHGlobalAnsi(messageLog);
      Result := z_GetDebugMessageLog_ovr_36(count, bufSize, sources[0], types, ids, severities, lengths, par_8_str_ptr);
      Marshal.FreeHGlobal(par_8_str_ptr);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetDebugMessageLog(count: UInt32; bufSize: Int32; sources: array of DebugSource; var types: DebugType; ids: IntPtr; var severities: DebugSeverity; var lengths: Int32; messageLog: IntPtr): UInt32;
    begin
      Result := z_GetDebugMessageLog_ovr_36(count, bufSize, sources[0], types, ids, severities, lengths, messageLog);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetDebugMessageLog(count: UInt32; bufSize: Int32; sources: array of DebugSource; var types: DebugType; ids: IntPtr; var severities: DebugSeverity; lengths: IntPtr; messageLog: string): UInt32;
    begin
      var par_8_str_ptr := Marshal.StringToHGlobalAnsi(messageLog);
      Result := z_GetDebugMessageLog_ovr_40(count, bufSize, sources[0], types, ids, severities, lengths, par_8_str_ptr);
      Marshal.FreeHGlobal(par_8_str_ptr);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetDebugMessageLog(count: UInt32; bufSize: Int32; sources: array of DebugSource; var types: DebugType; ids: IntPtr; var severities: DebugSeverity; lengths: IntPtr; messageLog: IntPtr): UInt32;
    begin
      Result := z_GetDebugMessageLog_ovr_40(count, bufSize, sources[0], types, ids, severities, lengths, messageLog);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetDebugMessageLog(count: UInt32; bufSize: Int32; sources: array of DebugSource; var types: DebugType; ids: IntPtr; severities: IntPtr; lengths: array of Int32; messageLog: string): UInt32;
    begin
      var par_8_str_ptr := Marshal.StringToHGlobalAnsi(messageLog);
      Result := z_GetDebugMessageLog_ovr_48(count, bufSize, sources[0], types, ids, severities, lengths[0], par_8_str_ptr);
      Marshal.FreeHGlobal(par_8_str_ptr);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetDebugMessageLog(count: UInt32; bufSize: Int32; sources: array of DebugSource; var types: DebugType; ids: IntPtr; severities: IntPtr; lengths: array of Int32; messageLog: IntPtr): UInt32;
    begin
      Result := z_GetDebugMessageLog_ovr_48(count, bufSize, sources[0], types, ids, severities, lengths[0], messageLog);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetDebugMessageLog(count: UInt32; bufSize: Int32; sources: array of DebugSource; var types: DebugType; ids: IntPtr; severities: IntPtr; var lengths: Int32; messageLog: string): UInt32;
    begin
      var par_8_str_ptr := Marshal.StringToHGlobalAnsi(messageLog);
      Result := z_GetDebugMessageLog_ovr_48(count, bufSize, sources[0], types, ids, severities, lengths, par_8_str_ptr);
      Marshal.FreeHGlobal(par_8_str_ptr);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetDebugMessageLog(count: UInt32; bufSize: Int32; sources: array of DebugSource; var types: DebugType; ids: IntPtr; severities: IntPtr; var lengths: Int32; messageLog: IntPtr): UInt32;
    begin
      Result := z_GetDebugMessageLog_ovr_48(count, bufSize, sources[0], types, ids, severities, lengths, messageLog);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetDebugMessageLog(count: UInt32; bufSize: Int32; sources: array of DebugSource; var types: DebugType; ids: IntPtr; severities: IntPtr; lengths: IntPtr; messageLog: string): UInt32;
    begin
      var par_8_str_ptr := Marshal.StringToHGlobalAnsi(messageLog);
      Result := z_GetDebugMessageLog_ovr_52(count, bufSize, sources[0], types, ids, severities, lengths, par_8_str_ptr);
      Marshal.FreeHGlobal(par_8_str_ptr);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetDebugMessageLog(count: UInt32; bufSize: Int32; sources: array of DebugSource; var types: DebugType; ids: IntPtr; severities: IntPtr; lengths: IntPtr; messageLog: IntPtr): UInt32;
    begin
      Result := z_GetDebugMessageLog_ovr_52(count, bufSize, sources[0], types, ids, severities, lengths, messageLog);
    end;
    public z_GetDebugMessageLog_ovr_108 := GetFuncOrNil&<function(count: UInt32; bufSize: Int32; var sources: DebugSource; types: IntPtr; var ids: UInt32; var severities: DebugSeverity; var lengths: Int32; messageLog: IntPtr): UInt32>(z_GetDebugMessageLog_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetDebugMessageLog(count: UInt32; bufSize: Int32; sources: array of DebugSource; types: IntPtr; ids: array of UInt32; severities: array of DebugSeverity; lengths: array of Int32; messageLog: string): UInt32;
    begin
      var par_8_str_ptr := Marshal.StringToHGlobalAnsi(messageLog);
      Result := z_GetDebugMessageLog_ovr_108(count, bufSize, sources[0], types, ids[0], severities[0], lengths[0], par_8_str_ptr);
      Marshal.FreeHGlobal(par_8_str_ptr);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetDebugMessageLog(count: UInt32; bufSize: Int32; sources: array of DebugSource; types: IntPtr; ids: array of UInt32; severities: array of DebugSeverity; lengths: array of Int32; messageLog: IntPtr): UInt32;
    begin
      Result := z_GetDebugMessageLog_ovr_108(count, bufSize, sources[0], types, ids[0], severities[0], lengths[0], messageLog);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetDebugMessageLog(count: UInt32; bufSize: Int32; sources: array of DebugSource; types: IntPtr; ids: array of UInt32; severities: array of DebugSeverity; var lengths: Int32; messageLog: string): UInt32;
    begin
      var par_8_str_ptr := Marshal.StringToHGlobalAnsi(messageLog);
      Result := z_GetDebugMessageLog_ovr_108(count, bufSize, sources[0], types, ids[0], severities[0], lengths, par_8_str_ptr);
      Marshal.FreeHGlobal(par_8_str_ptr);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetDebugMessageLog(count: UInt32; bufSize: Int32; sources: array of DebugSource; types: IntPtr; ids: array of UInt32; severities: array of DebugSeverity; var lengths: Int32; messageLog: IntPtr): UInt32;
    begin
      Result := z_GetDebugMessageLog_ovr_108(count, bufSize, sources[0], types, ids[0], severities[0], lengths, messageLog);
    end;
    public z_GetDebugMessageLog_ovr_112 := GetFuncOrNil&<function(count: UInt32; bufSize: Int32; var sources: DebugSource; types: IntPtr; var ids: UInt32; var severities: DebugSeverity; lengths: IntPtr; messageLog: IntPtr): UInt32>(z_GetDebugMessageLog_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetDebugMessageLog(count: UInt32; bufSize: Int32; sources: array of DebugSource; types: IntPtr; ids: array of UInt32; severities: array of DebugSeverity; lengths: IntPtr; messageLog: string): UInt32;
    begin
      var par_8_str_ptr := Marshal.StringToHGlobalAnsi(messageLog);
      Result := z_GetDebugMessageLog_ovr_112(count, bufSize, sources[0], types, ids[0], severities[0], lengths, par_8_str_ptr);
      Marshal.FreeHGlobal(par_8_str_ptr);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetDebugMessageLog(count: UInt32; bufSize: Int32; sources: array of DebugSource; types: IntPtr; ids: array of UInt32; severities: array of DebugSeverity; lengths: IntPtr; messageLog: IntPtr): UInt32;
    begin
      Result := z_GetDebugMessageLog_ovr_112(count, bufSize, sources[0], types, ids[0], severities[0], lengths, messageLog);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetDebugMessageLog(count: UInt32; bufSize: Int32; sources: array of DebugSource; types: IntPtr; ids: array of UInt32; var severities: DebugSeverity; lengths: array of Int32; messageLog: string): UInt32;
    begin
      var par_8_str_ptr := Marshal.StringToHGlobalAnsi(messageLog);
      Result := z_GetDebugMessageLog_ovr_108(count, bufSize, sources[0], types, ids[0], severities, lengths[0], par_8_str_ptr);
      Marshal.FreeHGlobal(par_8_str_ptr);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetDebugMessageLog(count: UInt32; bufSize: Int32; sources: array of DebugSource; types: IntPtr; ids: array of UInt32; var severities: DebugSeverity; lengths: array of Int32; messageLog: IntPtr): UInt32;
    begin
      Result := z_GetDebugMessageLog_ovr_108(count, bufSize, sources[0], types, ids[0], severities, lengths[0], messageLog);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetDebugMessageLog(count: UInt32; bufSize: Int32; sources: array of DebugSource; types: IntPtr; ids: array of UInt32; var severities: DebugSeverity; var lengths: Int32; messageLog: string): UInt32;
    begin
      var par_8_str_ptr := Marshal.StringToHGlobalAnsi(messageLog);
      Result := z_GetDebugMessageLog_ovr_108(count, bufSize, sources[0], types, ids[0], severities, lengths, par_8_str_ptr);
      Marshal.FreeHGlobal(par_8_str_ptr);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetDebugMessageLog(count: UInt32; bufSize: Int32; sources: array of DebugSource; types: IntPtr; ids: array of UInt32; var severities: DebugSeverity; var lengths: Int32; messageLog: IntPtr): UInt32;
    begin
      Result := z_GetDebugMessageLog_ovr_108(count, bufSize, sources[0], types, ids[0], severities, lengths, messageLog);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetDebugMessageLog(count: UInt32; bufSize: Int32; sources: array of DebugSource; types: IntPtr; ids: array of UInt32; var severities: DebugSeverity; lengths: IntPtr; messageLog: string): UInt32;
    begin
      var par_8_str_ptr := Marshal.StringToHGlobalAnsi(messageLog);
      Result := z_GetDebugMessageLog_ovr_112(count, bufSize, sources[0], types, ids[0], severities, lengths, par_8_str_ptr);
      Marshal.FreeHGlobal(par_8_str_ptr);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetDebugMessageLog(count: UInt32; bufSize: Int32; sources: array of DebugSource; types: IntPtr; ids: array of UInt32; var severities: DebugSeverity; lengths: IntPtr; messageLog: IntPtr): UInt32;
    begin
      Result := z_GetDebugMessageLog_ovr_112(count, bufSize, sources[0], types, ids[0], severities, lengths, messageLog);
    end;
    public z_GetDebugMessageLog_ovr_120 := GetFuncOrNil&<function(count: UInt32; bufSize: Int32; var sources: DebugSource; types: IntPtr; var ids: UInt32; severities: IntPtr; var lengths: Int32; messageLog: IntPtr): UInt32>(z_GetDebugMessageLog_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetDebugMessageLog(count: UInt32; bufSize: Int32; sources: array of DebugSource; types: IntPtr; ids: array of UInt32; severities: IntPtr; lengths: array of Int32; messageLog: string): UInt32;
    begin
      var par_8_str_ptr := Marshal.StringToHGlobalAnsi(messageLog);
      Result := z_GetDebugMessageLog_ovr_120(count, bufSize, sources[0], types, ids[0], severities, lengths[0], par_8_str_ptr);
      Marshal.FreeHGlobal(par_8_str_ptr);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetDebugMessageLog(count: UInt32; bufSize: Int32; sources: array of DebugSource; types: IntPtr; ids: array of UInt32; severities: IntPtr; lengths: array of Int32; messageLog: IntPtr): UInt32;
    begin
      Result := z_GetDebugMessageLog_ovr_120(count, bufSize, sources[0], types, ids[0], severities, lengths[0], messageLog);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetDebugMessageLog(count: UInt32; bufSize: Int32; sources: array of DebugSource; types: IntPtr; ids: array of UInt32; severities: IntPtr; var lengths: Int32; messageLog: string): UInt32;
    begin
      var par_8_str_ptr := Marshal.StringToHGlobalAnsi(messageLog);
      Result := z_GetDebugMessageLog_ovr_120(count, bufSize, sources[0], types, ids[0], severities, lengths, par_8_str_ptr);
      Marshal.FreeHGlobal(par_8_str_ptr);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetDebugMessageLog(count: UInt32; bufSize: Int32; sources: array of DebugSource; types: IntPtr; ids: array of UInt32; severities: IntPtr; var lengths: Int32; messageLog: IntPtr): UInt32;
    begin
      Result := z_GetDebugMessageLog_ovr_120(count, bufSize, sources[0], types, ids[0], severities, lengths, messageLog);
    end;
    public z_GetDebugMessageLog_ovr_124 := GetFuncOrNil&<function(count: UInt32; bufSize: Int32; var sources: DebugSource; types: IntPtr; var ids: UInt32; severities: IntPtr; lengths: IntPtr; messageLog: IntPtr): UInt32>(z_GetDebugMessageLog_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetDebugMessageLog(count: UInt32; bufSize: Int32; sources: array of DebugSource; types: IntPtr; ids: array of UInt32; severities: IntPtr; lengths: IntPtr; messageLog: string): UInt32;
    begin
      var par_8_str_ptr := Marshal.StringToHGlobalAnsi(messageLog);
      Result := z_GetDebugMessageLog_ovr_124(count, bufSize, sources[0], types, ids[0], severities, lengths, par_8_str_ptr);
      Marshal.FreeHGlobal(par_8_str_ptr);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetDebugMessageLog(count: UInt32; bufSize: Int32; sources: array of DebugSource; types: IntPtr; ids: array of UInt32; severities: IntPtr; lengths: IntPtr; messageLog: IntPtr): UInt32;
    begin
      Result := z_GetDebugMessageLog_ovr_124(count, bufSize, sources[0], types, ids[0], severities, lengths, messageLog);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetDebugMessageLog(count: UInt32; bufSize: Int32; sources: array of DebugSource; types: IntPtr; var ids: UInt32; severities: array of DebugSeverity; lengths: array of Int32; messageLog: string): UInt32;
    begin
      var par_8_str_ptr := Marshal.StringToHGlobalAnsi(messageLog);
      Result := z_GetDebugMessageLog_ovr_108(count, bufSize, sources[0], types, ids, severities[0], lengths[0], par_8_str_ptr);
      Marshal.FreeHGlobal(par_8_str_ptr);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetDebugMessageLog(count: UInt32; bufSize: Int32; sources: array of DebugSource; types: IntPtr; var ids: UInt32; severities: array of DebugSeverity; lengths: array of Int32; messageLog: IntPtr): UInt32;
    begin
      Result := z_GetDebugMessageLog_ovr_108(count, bufSize, sources[0], types, ids, severities[0], lengths[0], messageLog);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetDebugMessageLog(count: UInt32; bufSize: Int32; sources: array of DebugSource; types: IntPtr; var ids: UInt32; severities: array of DebugSeverity; var lengths: Int32; messageLog: string): UInt32;
    begin
      var par_8_str_ptr := Marshal.StringToHGlobalAnsi(messageLog);
      Result := z_GetDebugMessageLog_ovr_108(count, bufSize, sources[0], types, ids, severities[0], lengths, par_8_str_ptr);
      Marshal.FreeHGlobal(par_8_str_ptr);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetDebugMessageLog(count: UInt32; bufSize: Int32; sources: array of DebugSource; types: IntPtr; var ids: UInt32; severities: array of DebugSeverity; var lengths: Int32; messageLog: IntPtr): UInt32;
    begin
      Result := z_GetDebugMessageLog_ovr_108(count, bufSize, sources[0], types, ids, severities[0], lengths, messageLog);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetDebugMessageLog(count: UInt32; bufSize: Int32; sources: array of DebugSource; types: IntPtr; var ids: UInt32; severities: array of DebugSeverity; lengths: IntPtr; messageLog: string): UInt32;
    begin
      var par_8_str_ptr := Marshal.StringToHGlobalAnsi(messageLog);
      Result := z_GetDebugMessageLog_ovr_112(count, bufSize, sources[0], types, ids, severities[0], lengths, par_8_str_ptr);
      Marshal.FreeHGlobal(par_8_str_ptr);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetDebugMessageLog(count: UInt32; bufSize: Int32; sources: array of DebugSource; types: IntPtr; var ids: UInt32; severities: array of DebugSeverity; lengths: IntPtr; messageLog: IntPtr): UInt32;
    begin
      Result := z_GetDebugMessageLog_ovr_112(count, bufSize, sources[0], types, ids, severities[0], lengths, messageLog);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetDebugMessageLog(count: UInt32; bufSize: Int32; sources: array of DebugSource; types: IntPtr; var ids: UInt32; var severities: DebugSeverity; lengths: array of Int32; messageLog: string): UInt32;
    begin
      var par_8_str_ptr := Marshal.StringToHGlobalAnsi(messageLog);
      Result := z_GetDebugMessageLog_ovr_108(count, bufSize, sources[0], types, ids, severities, lengths[0], par_8_str_ptr);
      Marshal.FreeHGlobal(par_8_str_ptr);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetDebugMessageLog(count: UInt32; bufSize: Int32; sources: array of DebugSource; types: IntPtr; var ids: UInt32; var severities: DebugSeverity; lengths: array of Int32; messageLog: IntPtr): UInt32;
    begin
      Result := z_GetDebugMessageLog_ovr_108(count, bufSize, sources[0], types, ids, severities, lengths[0], messageLog);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetDebugMessageLog(count: UInt32; bufSize: Int32; sources: array of DebugSource; types: IntPtr; var ids: UInt32; var severities: DebugSeverity; var lengths: Int32; messageLog: string): UInt32;
    begin
      var par_8_str_ptr := Marshal.StringToHGlobalAnsi(messageLog);
      Result := z_GetDebugMessageLog_ovr_108(count, bufSize, sources[0], types, ids, severities, lengths, par_8_str_ptr);
      Marshal.FreeHGlobal(par_8_str_ptr);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetDebugMessageLog(count: UInt32; bufSize: Int32; sources: array of DebugSource; types: IntPtr; var ids: UInt32; var severities: DebugSeverity; var lengths: Int32; messageLog: IntPtr): UInt32;
    begin
      Result := z_GetDebugMessageLog_ovr_108(count, bufSize, sources[0], types, ids, severities, lengths, messageLog);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetDebugMessageLog(count: UInt32; bufSize: Int32; sources: array of DebugSource; types: IntPtr; var ids: UInt32; var severities: DebugSeverity; lengths: IntPtr; messageLog: string): UInt32;
    begin
      var par_8_str_ptr := Marshal.StringToHGlobalAnsi(messageLog);
      Result := z_GetDebugMessageLog_ovr_112(count, bufSize, sources[0], types, ids, severities, lengths, par_8_str_ptr);
      Marshal.FreeHGlobal(par_8_str_ptr);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetDebugMessageLog(count: UInt32; bufSize: Int32; sources: array of DebugSource; types: IntPtr; var ids: UInt32; var severities: DebugSeverity; lengths: IntPtr; messageLog: IntPtr): UInt32;
    begin
      Result := z_GetDebugMessageLog_ovr_112(count, bufSize, sources[0], types, ids, severities, lengths, messageLog);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetDebugMessageLog(count: UInt32; bufSize: Int32; sources: array of DebugSource; types: IntPtr; var ids: UInt32; severities: IntPtr; lengths: array of Int32; messageLog: string): UInt32;
    begin
      var par_8_str_ptr := Marshal.StringToHGlobalAnsi(messageLog);
      Result := z_GetDebugMessageLog_ovr_120(count, bufSize, sources[0], types, ids, severities, lengths[0], par_8_str_ptr);
      Marshal.FreeHGlobal(par_8_str_ptr);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetDebugMessageLog(count: UInt32; bufSize: Int32; sources: array of DebugSource; types: IntPtr; var ids: UInt32; severities: IntPtr; lengths: array of Int32; messageLog: IntPtr): UInt32;
    begin
      Result := z_GetDebugMessageLog_ovr_120(count, bufSize, sources[0], types, ids, severities, lengths[0], messageLog);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetDebugMessageLog(count: UInt32; bufSize: Int32; sources: array of DebugSource; types: IntPtr; var ids: UInt32; severities: IntPtr; var lengths: Int32; messageLog: string): UInt32;
    begin
      var par_8_str_ptr := Marshal.StringToHGlobalAnsi(messageLog);
      Result := z_GetDebugMessageLog_ovr_120(count, bufSize, sources[0], types, ids, severities, lengths, par_8_str_ptr);
      Marshal.FreeHGlobal(par_8_str_ptr);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetDebugMessageLog(count: UInt32; bufSize: Int32; sources: array of DebugSource; types: IntPtr; var ids: UInt32; severities: IntPtr; var lengths: Int32; messageLog: IntPtr): UInt32;
    begin
      Result := z_GetDebugMessageLog_ovr_120(count, bufSize, sources[0], types, ids, severities, lengths, messageLog);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetDebugMessageLog(count: UInt32; bufSize: Int32; sources: array of DebugSource; types: IntPtr; var ids: UInt32; severities: IntPtr; lengths: IntPtr; messageLog: string): UInt32;
    begin
      var par_8_str_ptr := Marshal.StringToHGlobalAnsi(messageLog);
      Result := z_GetDebugMessageLog_ovr_124(count, bufSize, sources[0], types, ids, severities, lengths, par_8_str_ptr);
      Marshal.FreeHGlobal(par_8_str_ptr);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetDebugMessageLog(count: UInt32; bufSize: Int32; sources: array of DebugSource; types: IntPtr; var ids: UInt32; severities: IntPtr; lengths: IntPtr; messageLog: IntPtr): UInt32;
    begin
      Result := z_GetDebugMessageLog_ovr_124(count, bufSize, sources[0], types, ids, severities, lengths, messageLog);
    end;
    public z_GetDebugMessageLog_ovr_144 := GetFuncOrNil&<function(count: UInt32; bufSize: Int32; var sources: DebugSource; types: IntPtr; ids: IntPtr; var severities: DebugSeverity; var lengths: Int32; messageLog: IntPtr): UInt32>(z_GetDebugMessageLog_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetDebugMessageLog(count: UInt32; bufSize: Int32; sources: array of DebugSource; types: IntPtr; ids: IntPtr; severities: array of DebugSeverity; lengths: array of Int32; messageLog: string): UInt32;
    begin
      var par_8_str_ptr := Marshal.StringToHGlobalAnsi(messageLog);
      Result := z_GetDebugMessageLog_ovr_144(count, bufSize, sources[0], types, ids, severities[0], lengths[0], par_8_str_ptr);
      Marshal.FreeHGlobal(par_8_str_ptr);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetDebugMessageLog(count: UInt32; bufSize: Int32; sources: array of DebugSource; types: IntPtr; ids: IntPtr; severities: array of DebugSeverity; lengths: array of Int32; messageLog: IntPtr): UInt32;
    begin
      Result := z_GetDebugMessageLog_ovr_144(count, bufSize, sources[0], types, ids, severities[0], lengths[0], messageLog);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetDebugMessageLog(count: UInt32; bufSize: Int32; sources: array of DebugSource; types: IntPtr; ids: IntPtr; severities: array of DebugSeverity; var lengths: Int32; messageLog: string): UInt32;
    begin
      var par_8_str_ptr := Marshal.StringToHGlobalAnsi(messageLog);
      Result := z_GetDebugMessageLog_ovr_144(count, bufSize, sources[0], types, ids, severities[0], lengths, par_8_str_ptr);
      Marshal.FreeHGlobal(par_8_str_ptr);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetDebugMessageLog(count: UInt32; bufSize: Int32; sources: array of DebugSource; types: IntPtr; ids: IntPtr; severities: array of DebugSeverity; var lengths: Int32; messageLog: IntPtr): UInt32;
    begin
      Result := z_GetDebugMessageLog_ovr_144(count, bufSize, sources[0], types, ids, severities[0], lengths, messageLog);
    end;
    public z_GetDebugMessageLog_ovr_148 := GetFuncOrNil&<function(count: UInt32; bufSize: Int32; var sources: DebugSource; types: IntPtr; ids: IntPtr; var severities: DebugSeverity; lengths: IntPtr; messageLog: IntPtr): UInt32>(z_GetDebugMessageLog_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetDebugMessageLog(count: UInt32; bufSize: Int32; sources: array of DebugSource; types: IntPtr; ids: IntPtr; severities: array of DebugSeverity; lengths: IntPtr; messageLog: string): UInt32;
    begin
      var par_8_str_ptr := Marshal.StringToHGlobalAnsi(messageLog);
      Result := z_GetDebugMessageLog_ovr_148(count, bufSize, sources[0], types, ids, severities[0], lengths, par_8_str_ptr);
      Marshal.FreeHGlobal(par_8_str_ptr);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetDebugMessageLog(count: UInt32; bufSize: Int32; sources: array of DebugSource; types: IntPtr; ids: IntPtr; severities: array of DebugSeverity; lengths: IntPtr; messageLog: IntPtr): UInt32;
    begin
      Result := z_GetDebugMessageLog_ovr_148(count, bufSize, sources[0], types, ids, severities[0], lengths, messageLog);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetDebugMessageLog(count: UInt32; bufSize: Int32; sources: array of DebugSource; types: IntPtr; ids: IntPtr; var severities: DebugSeverity; lengths: array of Int32; messageLog: string): UInt32;
    begin
      var par_8_str_ptr := Marshal.StringToHGlobalAnsi(messageLog);
      Result := z_GetDebugMessageLog_ovr_144(count, bufSize, sources[0], types, ids, severities, lengths[0], par_8_str_ptr);
      Marshal.FreeHGlobal(par_8_str_ptr);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetDebugMessageLog(count: UInt32; bufSize: Int32; sources: array of DebugSource; types: IntPtr; ids: IntPtr; var severities: DebugSeverity; lengths: array of Int32; messageLog: IntPtr): UInt32;
    begin
      Result := z_GetDebugMessageLog_ovr_144(count, bufSize, sources[0], types, ids, severities, lengths[0], messageLog);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetDebugMessageLog(count: UInt32; bufSize: Int32; sources: array of DebugSource; types: IntPtr; ids: IntPtr; var severities: DebugSeverity; var lengths: Int32; messageLog: string): UInt32;
    begin
      var par_8_str_ptr := Marshal.StringToHGlobalAnsi(messageLog);
      Result := z_GetDebugMessageLog_ovr_144(count, bufSize, sources[0], types, ids, severities, lengths, par_8_str_ptr);
      Marshal.FreeHGlobal(par_8_str_ptr);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetDebugMessageLog(count: UInt32; bufSize: Int32; sources: array of DebugSource; types: IntPtr; ids: IntPtr; var severities: DebugSeverity; var lengths: Int32; messageLog: IntPtr): UInt32;
    begin
      Result := z_GetDebugMessageLog_ovr_144(count, bufSize, sources[0], types, ids, severities, lengths, messageLog);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetDebugMessageLog(count: UInt32; bufSize: Int32; sources: array of DebugSource; types: IntPtr; ids: IntPtr; var severities: DebugSeverity; lengths: IntPtr; messageLog: string): UInt32;
    begin
      var par_8_str_ptr := Marshal.StringToHGlobalAnsi(messageLog);
      Result := z_GetDebugMessageLog_ovr_148(count, bufSize, sources[0], types, ids, severities, lengths, par_8_str_ptr);
      Marshal.FreeHGlobal(par_8_str_ptr);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetDebugMessageLog(count: UInt32; bufSize: Int32; sources: array of DebugSource; types: IntPtr; ids: IntPtr; var severities: DebugSeverity; lengths: IntPtr; messageLog: IntPtr): UInt32;
    begin
      Result := z_GetDebugMessageLog_ovr_148(count, bufSize, sources[0], types, ids, severities, lengths, messageLog);
    end;
    public z_GetDebugMessageLog_ovr_156 := GetFuncOrNil&<function(count: UInt32; bufSize: Int32; var sources: DebugSource; types: IntPtr; ids: IntPtr; severities: IntPtr; var lengths: Int32; messageLog: IntPtr): UInt32>(z_GetDebugMessageLog_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetDebugMessageLog(count: UInt32; bufSize: Int32; sources: array of DebugSource; types: IntPtr; ids: IntPtr; severities: IntPtr; lengths: array of Int32; messageLog: string): UInt32;
    begin
      var par_8_str_ptr := Marshal.StringToHGlobalAnsi(messageLog);
      Result := z_GetDebugMessageLog_ovr_156(count, bufSize, sources[0], types, ids, severities, lengths[0], par_8_str_ptr);
      Marshal.FreeHGlobal(par_8_str_ptr);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetDebugMessageLog(count: UInt32; bufSize: Int32; sources: array of DebugSource; types: IntPtr; ids: IntPtr; severities: IntPtr; lengths: array of Int32; messageLog: IntPtr): UInt32;
    begin
      Result := z_GetDebugMessageLog_ovr_156(count, bufSize, sources[0], types, ids, severities, lengths[0], messageLog);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetDebugMessageLog(count: UInt32; bufSize: Int32; sources: array of DebugSource; types: IntPtr; ids: IntPtr; severities: IntPtr; var lengths: Int32; messageLog: string): UInt32;
    begin
      var par_8_str_ptr := Marshal.StringToHGlobalAnsi(messageLog);
      Result := z_GetDebugMessageLog_ovr_156(count, bufSize, sources[0], types, ids, severities, lengths, par_8_str_ptr);
      Marshal.FreeHGlobal(par_8_str_ptr);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetDebugMessageLog(count: UInt32; bufSize: Int32; sources: array of DebugSource; types: IntPtr; ids: IntPtr; severities: IntPtr; var lengths: Int32; messageLog: IntPtr): UInt32;
    begin
      Result := z_GetDebugMessageLog_ovr_156(count, bufSize, sources[0], types, ids, severities, lengths, messageLog);
    end;
    public z_GetDebugMessageLog_ovr_160 := GetFuncOrNil&<function(count: UInt32; bufSize: Int32; var sources: DebugSource; types: IntPtr; ids: IntPtr; severities: IntPtr; lengths: IntPtr; messageLog: IntPtr): UInt32>(z_GetDebugMessageLog_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetDebugMessageLog(count: UInt32; bufSize: Int32; sources: array of DebugSource; types: IntPtr; ids: IntPtr; severities: IntPtr; lengths: IntPtr; messageLog: string): UInt32;
    begin
      var par_8_str_ptr := Marshal.StringToHGlobalAnsi(messageLog);
      Result := z_GetDebugMessageLog_ovr_160(count, bufSize, sources[0], types, ids, severities, lengths, par_8_str_ptr);
      Marshal.FreeHGlobal(par_8_str_ptr);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetDebugMessageLog(count: UInt32; bufSize: Int32; sources: array of DebugSource; types: IntPtr; ids: IntPtr; severities: IntPtr; lengths: IntPtr; messageLog: IntPtr): UInt32;
    begin
      Result := z_GetDebugMessageLog_ovr_160(count, bufSize, sources[0], types, ids, severities, lengths, messageLog);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetDebugMessageLog(count: UInt32; bufSize: Int32; var sources: DebugSource; types: array of DebugType; ids: array of UInt32; severities: array of DebugSeverity; lengths: array of Int32; messageLog: string): UInt32;
    begin
      var par_8_str_ptr := Marshal.StringToHGlobalAnsi(messageLog);
      Result := z_GetDebugMessageLog_ovr_0(count, bufSize, sources, types[0], ids[0], severities[0], lengths[0], par_8_str_ptr);
      Marshal.FreeHGlobal(par_8_str_ptr);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetDebugMessageLog(count: UInt32; bufSize: Int32; var sources: DebugSource; types: array of DebugType; ids: array of UInt32; severities: array of DebugSeverity; lengths: array of Int32; messageLog: IntPtr): UInt32;
    begin
      Result := z_GetDebugMessageLog_ovr_0(count, bufSize, sources, types[0], ids[0], severities[0], lengths[0], messageLog);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetDebugMessageLog(count: UInt32; bufSize: Int32; var sources: DebugSource; types: array of DebugType; ids: array of UInt32; severities: array of DebugSeverity; var lengths: Int32; messageLog: string): UInt32;
    begin
      var par_8_str_ptr := Marshal.StringToHGlobalAnsi(messageLog);
      Result := z_GetDebugMessageLog_ovr_0(count, bufSize, sources, types[0], ids[0], severities[0], lengths, par_8_str_ptr);
      Marshal.FreeHGlobal(par_8_str_ptr);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetDebugMessageLog(count: UInt32; bufSize: Int32; var sources: DebugSource; types: array of DebugType; ids: array of UInt32; severities: array of DebugSeverity; var lengths: Int32; messageLog: IntPtr): UInt32;
    begin
      Result := z_GetDebugMessageLog_ovr_0(count, bufSize, sources, types[0], ids[0], severities[0], lengths, messageLog);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetDebugMessageLog(count: UInt32; bufSize: Int32; var sources: DebugSource; types: array of DebugType; ids: array of UInt32; severities: array of DebugSeverity; lengths: IntPtr; messageLog: string): UInt32;
    begin
      var par_8_str_ptr := Marshal.StringToHGlobalAnsi(messageLog);
      Result := z_GetDebugMessageLog_ovr_4(count, bufSize, sources, types[0], ids[0], severities[0], lengths, par_8_str_ptr);
      Marshal.FreeHGlobal(par_8_str_ptr);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetDebugMessageLog(count: UInt32; bufSize: Int32; var sources: DebugSource; types: array of DebugType; ids: array of UInt32; severities: array of DebugSeverity; lengths: IntPtr; messageLog: IntPtr): UInt32;
    begin
      Result := z_GetDebugMessageLog_ovr_4(count, bufSize, sources, types[0], ids[0], severities[0], lengths, messageLog);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetDebugMessageLog(count: UInt32; bufSize: Int32; var sources: DebugSource; types: array of DebugType; ids: array of UInt32; var severities: DebugSeverity; lengths: array of Int32; messageLog: string): UInt32;
    begin
      var par_8_str_ptr := Marshal.StringToHGlobalAnsi(messageLog);
      Result := z_GetDebugMessageLog_ovr_0(count, bufSize, sources, types[0], ids[0], severities, lengths[0], par_8_str_ptr);
      Marshal.FreeHGlobal(par_8_str_ptr);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetDebugMessageLog(count: UInt32; bufSize: Int32; var sources: DebugSource; types: array of DebugType; ids: array of UInt32; var severities: DebugSeverity; lengths: array of Int32; messageLog: IntPtr): UInt32;
    begin
      Result := z_GetDebugMessageLog_ovr_0(count, bufSize, sources, types[0], ids[0], severities, lengths[0], messageLog);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetDebugMessageLog(count: UInt32; bufSize: Int32; var sources: DebugSource; types: array of DebugType; ids: array of UInt32; var severities: DebugSeverity; var lengths: Int32; messageLog: string): UInt32;
    begin
      var par_8_str_ptr := Marshal.StringToHGlobalAnsi(messageLog);
      Result := z_GetDebugMessageLog_ovr_0(count, bufSize, sources, types[0], ids[0], severities, lengths, par_8_str_ptr);
      Marshal.FreeHGlobal(par_8_str_ptr);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetDebugMessageLog(count: UInt32; bufSize: Int32; var sources: DebugSource; types: array of DebugType; ids: array of UInt32; var severities: DebugSeverity; var lengths: Int32; messageLog: IntPtr): UInt32;
    begin
      Result := z_GetDebugMessageLog_ovr_0(count, bufSize, sources, types[0], ids[0], severities, lengths, messageLog);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetDebugMessageLog(count: UInt32; bufSize: Int32; var sources: DebugSource; types: array of DebugType; ids: array of UInt32; var severities: DebugSeverity; lengths: IntPtr; messageLog: string): UInt32;
    begin
      var par_8_str_ptr := Marshal.StringToHGlobalAnsi(messageLog);
      Result := z_GetDebugMessageLog_ovr_4(count, bufSize, sources, types[0], ids[0], severities, lengths, par_8_str_ptr);
      Marshal.FreeHGlobal(par_8_str_ptr);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetDebugMessageLog(count: UInt32; bufSize: Int32; var sources: DebugSource; types: array of DebugType; ids: array of UInt32; var severities: DebugSeverity; lengths: IntPtr; messageLog: IntPtr): UInt32;
    begin
      Result := z_GetDebugMessageLog_ovr_4(count, bufSize, sources, types[0], ids[0], severities, lengths, messageLog);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetDebugMessageLog(count: UInt32; bufSize: Int32; var sources: DebugSource; types: array of DebugType; ids: array of UInt32; severities: IntPtr; lengths: array of Int32; messageLog: string): UInt32;
    begin
      var par_8_str_ptr := Marshal.StringToHGlobalAnsi(messageLog);
      Result := z_GetDebugMessageLog_ovr_12(count, bufSize, sources, types[0], ids[0], severities, lengths[0], par_8_str_ptr);
      Marshal.FreeHGlobal(par_8_str_ptr);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetDebugMessageLog(count: UInt32; bufSize: Int32; var sources: DebugSource; types: array of DebugType; ids: array of UInt32; severities: IntPtr; lengths: array of Int32; messageLog: IntPtr): UInt32;
    begin
      Result := z_GetDebugMessageLog_ovr_12(count, bufSize, sources, types[0], ids[0], severities, lengths[0], messageLog);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetDebugMessageLog(count: UInt32; bufSize: Int32; var sources: DebugSource; types: array of DebugType; ids: array of UInt32; severities: IntPtr; var lengths: Int32; messageLog: string): UInt32;
    begin
      var par_8_str_ptr := Marshal.StringToHGlobalAnsi(messageLog);
      Result := z_GetDebugMessageLog_ovr_12(count, bufSize, sources, types[0], ids[0], severities, lengths, par_8_str_ptr);
      Marshal.FreeHGlobal(par_8_str_ptr);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetDebugMessageLog(count: UInt32; bufSize: Int32; var sources: DebugSource; types: array of DebugType; ids: array of UInt32; severities: IntPtr; var lengths: Int32; messageLog: IntPtr): UInt32;
    begin
      Result := z_GetDebugMessageLog_ovr_12(count, bufSize, sources, types[0], ids[0], severities, lengths, messageLog);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetDebugMessageLog(count: UInt32; bufSize: Int32; var sources: DebugSource; types: array of DebugType; ids: array of UInt32; severities: IntPtr; lengths: IntPtr; messageLog: string): UInt32;
    begin
      var par_8_str_ptr := Marshal.StringToHGlobalAnsi(messageLog);
      Result := z_GetDebugMessageLog_ovr_16(count, bufSize, sources, types[0], ids[0], severities, lengths, par_8_str_ptr);
      Marshal.FreeHGlobal(par_8_str_ptr);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetDebugMessageLog(count: UInt32; bufSize: Int32; var sources: DebugSource; types: array of DebugType; ids: array of UInt32; severities: IntPtr; lengths: IntPtr; messageLog: IntPtr): UInt32;
    begin
      Result := z_GetDebugMessageLog_ovr_16(count, bufSize, sources, types[0], ids[0], severities, lengths, messageLog);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetDebugMessageLog(count: UInt32; bufSize: Int32; var sources: DebugSource; types: array of DebugType; var ids: UInt32; severities: array of DebugSeverity; lengths: array of Int32; messageLog: string): UInt32;
    begin
      var par_8_str_ptr := Marshal.StringToHGlobalAnsi(messageLog);
      Result := z_GetDebugMessageLog_ovr_0(count, bufSize, sources, types[0], ids, severities[0], lengths[0], par_8_str_ptr);
      Marshal.FreeHGlobal(par_8_str_ptr);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetDebugMessageLog(count: UInt32; bufSize: Int32; var sources: DebugSource; types: array of DebugType; var ids: UInt32; severities: array of DebugSeverity; lengths: array of Int32; messageLog: IntPtr): UInt32;
    begin
      Result := z_GetDebugMessageLog_ovr_0(count, bufSize, sources, types[0], ids, severities[0], lengths[0], messageLog);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetDebugMessageLog(count: UInt32; bufSize: Int32; var sources: DebugSource; types: array of DebugType; var ids: UInt32; severities: array of DebugSeverity; var lengths: Int32; messageLog: string): UInt32;
    begin
      var par_8_str_ptr := Marshal.StringToHGlobalAnsi(messageLog);
      Result := z_GetDebugMessageLog_ovr_0(count, bufSize, sources, types[0], ids, severities[0], lengths, par_8_str_ptr);
      Marshal.FreeHGlobal(par_8_str_ptr);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetDebugMessageLog(count: UInt32; bufSize: Int32; var sources: DebugSource; types: array of DebugType; var ids: UInt32; severities: array of DebugSeverity; var lengths: Int32; messageLog: IntPtr): UInt32;
    begin
      Result := z_GetDebugMessageLog_ovr_0(count, bufSize, sources, types[0], ids, severities[0], lengths, messageLog);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetDebugMessageLog(count: UInt32; bufSize: Int32; var sources: DebugSource; types: array of DebugType; var ids: UInt32; severities: array of DebugSeverity; lengths: IntPtr; messageLog: string): UInt32;
    begin
      var par_8_str_ptr := Marshal.StringToHGlobalAnsi(messageLog);
      Result := z_GetDebugMessageLog_ovr_4(count, bufSize, sources, types[0], ids, severities[0], lengths, par_8_str_ptr);
      Marshal.FreeHGlobal(par_8_str_ptr);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetDebugMessageLog(count: UInt32; bufSize: Int32; var sources: DebugSource; types: array of DebugType; var ids: UInt32; severities: array of DebugSeverity; lengths: IntPtr; messageLog: IntPtr): UInt32;
    begin
      Result := z_GetDebugMessageLog_ovr_4(count, bufSize, sources, types[0], ids, severities[0], lengths, messageLog);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetDebugMessageLog(count: UInt32; bufSize: Int32; var sources: DebugSource; types: array of DebugType; var ids: UInt32; var severities: DebugSeverity; lengths: array of Int32; messageLog: string): UInt32;
    begin
      var par_8_str_ptr := Marshal.StringToHGlobalAnsi(messageLog);
      Result := z_GetDebugMessageLog_ovr_0(count, bufSize, sources, types[0], ids, severities, lengths[0], par_8_str_ptr);
      Marshal.FreeHGlobal(par_8_str_ptr);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetDebugMessageLog(count: UInt32; bufSize: Int32; var sources: DebugSource; types: array of DebugType; var ids: UInt32; var severities: DebugSeverity; lengths: array of Int32; messageLog: IntPtr): UInt32;
    begin
      Result := z_GetDebugMessageLog_ovr_0(count, bufSize, sources, types[0], ids, severities, lengths[0], messageLog);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetDebugMessageLog(count: UInt32; bufSize: Int32; var sources: DebugSource; types: array of DebugType; var ids: UInt32; var severities: DebugSeverity; var lengths: Int32; messageLog: string): UInt32;
    begin
      var par_8_str_ptr := Marshal.StringToHGlobalAnsi(messageLog);
      Result := z_GetDebugMessageLog_ovr_0(count, bufSize, sources, types[0], ids, severities, lengths, par_8_str_ptr);
      Marshal.FreeHGlobal(par_8_str_ptr);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetDebugMessageLog(count: UInt32; bufSize: Int32; var sources: DebugSource; types: array of DebugType; var ids: UInt32; var severities: DebugSeverity; var lengths: Int32; messageLog: IntPtr): UInt32;
    begin
      Result := z_GetDebugMessageLog_ovr_0(count, bufSize, sources, types[0], ids, severities, lengths, messageLog);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetDebugMessageLog(count: UInt32; bufSize: Int32; var sources: DebugSource; types: array of DebugType; var ids: UInt32; var severities: DebugSeverity; lengths: IntPtr; messageLog: string): UInt32;
    begin
      var par_8_str_ptr := Marshal.StringToHGlobalAnsi(messageLog);
      Result := z_GetDebugMessageLog_ovr_4(count, bufSize, sources, types[0], ids, severities, lengths, par_8_str_ptr);
      Marshal.FreeHGlobal(par_8_str_ptr);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetDebugMessageLog(count: UInt32; bufSize: Int32; var sources: DebugSource; types: array of DebugType; var ids: UInt32; var severities: DebugSeverity; lengths: IntPtr; messageLog: IntPtr): UInt32;
    begin
      Result := z_GetDebugMessageLog_ovr_4(count, bufSize, sources, types[0], ids, severities, lengths, messageLog);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetDebugMessageLog(count: UInt32; bufSize: Int32; var sources: DebugSource; types: array of DebugType; var ids: UInt32; severities: IntPtr; lengths: array of Int32; messageLog: string): UInt32;
    begin
      var par_8_str_ptr := Marshal.StringToHGlobalAnsi(messageLog);
      Result := z_GetDebugMessageLog_ovr_12(count, bufSize, sources, types[0], ids, severities, lengths[0], par_8_str_ptr);
      Marshal.FreeHGlobal(par_8_str_ptr);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetDebugMessageLog(count: UInt32; bufSize: Int32; var sources: DebugSource; types: array of DebugType; var ids: UInt32; severities: IntPtr; lengths: array of Int32; messageLog: IntPtr): UInt32;
    begin
      Result := z_GetDebugMessageLog_ovr_12(count, bufSize, sources, types[0], ids, severities, lengths[0], messageLog);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetDebugMessageLog(count: UInt32; bufSize: Int32; var sources: DebugSource; types: array of DebugType; var ids: UInt32; severities: IntPtr; var lengths: Int32; messageLog: string): UInt32;
    begin
      var par_8_str_ptr := Marshal.StringToHGlobalAnsi(messageLog);
      Result := z_GetDebugMessageLog_ovr_12(count, bufSize, sources, types[0], ids, severities, lengths, par_8_str_ptr);
      Marshal.FreeHGlobal(par_8_str_ptr);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetDebugMessageLog(count: UInt32; bufSize: Int32; var sources: DebugSource; types: array of DebugType; var ids: UInt32; severities: IntPtr; var lengths: Int32; messageLog: IntPtr): UInt32;
    begin
      Result := z_GetDebugMessageLog_ovr_12(count, bufSize, sources, types[0], ids, severities, lengths, messageLog);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetDebugMessageLog(count: UInt32; bufSize: Int32; var sources: DebugSource; types: array of DebugType; var ids: UInt32; severities: IntPtr; lengths: IntPtr; messageLog: string): UInt32;
    begin
      var par_8_str_ptr := Marshal.StringToHGlobalAnsi(messageLog);
      Result := z_GetDebugMessageLog_ovr_16(count, bufSize, sources, types[0], ids, severities, lengths, par_8_str_ptr);
      Marshal.FreeHGlobal(par_8_str_ptr);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetDebugMessageLog(count: UInt32; bufSize: Int32; var sources: DebugSource; types: array of DebugType; var ids: UInt32; severities: IntPtr; lengths: IntPtr; messageLog: IntPtr): UInt32;
    begin
      Result := z_GetDebugMessageLog_ovr_16(count, bufSize, sources, types[0], ids, severities, lengths, messageLog);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetDebugMessageLog(count: UInt32; bufSize: Int32; var sources: DebugSource; types: array of DebugType; ids: IntPtr; severities: array of DebugSeverity; lengths: array of Int32; messageLog: string): UInt32;
    begin
      var par_8_str_ptr := Marshal.StringToHGlobalAnsi(messageLog);
      Result := z_GetDebugMessageLog_ovr_36(count, bufSize, sources, types[0], ids, severities[0], lengths[0], par_8_str_ptr);
      Marshal.FreeHGlobal(par_8_str_ptr);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetDebugMessageLog(count: UInt32; bufSize: Int32; var sources: DebugSource; types: array of DebugType; ids: IntPtr; severities: array of DebugSeverity; lengths: array of Int32; messageLog: IntPtr): UInt32;
    begin
      Result := z_GetDebugMessageLog_ovr_36(count, bufSize, sources, types[0], ids, severities[0], lengths[0], messageLog);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetDebugMessageLog(count: UInt32; bufSize: Int32; var sources: DebugSource; types: array of DebugType; ids: IntPtr; severities: array of DebugSeverity; var lengths: Int32; messageLog: string): UInt32;
    begin
      var par_8_str_ptr := Marshal.StringToHGlobalAnsi(messageLog);
      Result := z_GetDebugMessageLog_ovr_36(count, bufSize, sources, types[0], ids, severities[0], lengths, par_8_str_ptr);
      Marshal.FreeHGlobal(par_8_str_ptr);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetDebugMessageLog(count: UInt32; bufSize: Int32; var sources: DebugSource; types: array of DebugType; ids: IntPtr; severities: array of DebugSeverity; var lengths: Int32; messageLog: IntPtr): UInt32;
    begin
      Result := z_GetDebugMessageLog_ovr_36(count, bufSize, sources, types[0], ids, severities[0], lengths, messageLog);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetDebugMessageLog(count: UInt32; bufSize: Int32; var sources: DebugSource; types: array of DebugType; ids: IntPtr; severities: array of DebugSeverity; lengths: IntPtr; messageLog: string): UInt32;
    begin
      var par_8_str_ptr := Marshal.StringToHGlobalAnsi(messageLog);
      Result := z_GetDebugMessageLog_ovr_40(count, bufSize, sources, types[0], ids, severities[0], lengths, par_8_str_ptr);
      Marshal.FreeHGlobal(par_8_str_ptr);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetDebugMessageLog(count: UInt32; bufSize: Int32; var sources: DebugSource; types: array of DebugType; ids: IntPtr; severities: array of DebugSeverity; lengths: IntPtr; messageLog: IntPtr): UInt32;
    begin
      Result := z_GetDebugMessageLog_ovr_40(count, bufSize, sources, types[0], ids, severities[0], lengths, messageLog);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetDebugMessageLog(count: UInt32; bufSize: Int32; var sources: DebugSource; types: array of DebugType; ids: IntPtr; var severities: DebugSeverity; lengths: array of Int32; messageLog: string): UInt32;
    begin
      var par_8_str_ptr := Marshal.StringToHGlobalAnsi(messageLog);
      Result := z_GetDebugMessageLog_ovr_36(count, bufSize, sources, types[0], ids, severities, lengths[0], par_8_str_ptr);
      Marshal.FreeHGlobal(par_8_str_ptr);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetDebugMessageLog(count: UInt32; bufSize: Int32; var sources: DebugSource; types: array of DebugType; ids: IntPtr; var severities: DebugSeverity; lengths: array of Int32; messageLog: IntPtr): UInt32;
    begin
      Result := z_GetDebugMessageLog_ovr_36(count, bufSize, sources, types[0], ids, severities, lengths[0], messageLog);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetDebugMessageLog(count: UInt32; bufSize: Int32; var sources: DebugSource; types: array of DebugType; ids: IntPtr; var severities: DebugSeverity; var lengths: Int32; messageLog: string): UInt32;
    begin
      var par_8_str_ptr := Marshal.StringToHGlobalAnsi(messageLog);
      Result := z_GetDebugMessageLog_ovr_36(count, bufSize, sources, types[0], ids, severities, lengths, par_8_str_ptr);
      Marshal.FreeHGlobal(par_8_str_ptr);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetDebugMessageLog(count: UInt32; bufSize: Int32; var sources: DebugSource; types: array of DebugType; ids: IntPtr; var severities: DebugSeverity; var lengths: Int32; messageLog: IntPtr): UInt32;
    begin
      Result := z_GetDebugMessageLog_ovr_36(count, bufSize, sources, types[0], ids, severities, lengths, messageLog);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetDebugMessageLog(count: UInt32; bufSize: Int32; var sources: DebugSource; types: array of DebugType; ids: IntPtr; var severities: DebugSeverity; lengths: IntPtr; messageLog: string): UInt32;
    begin
      var par_8_str_ptr := Marshal.StringToHGlobalAnsi(messageLog);
      Result := z_GetDebugMessageLog_ovr_40(count, bufSize, sources, types[0], ids, severities, lengths, par_8_str_ptr);
      Marshal.FreeHGlobal(par_8_str_ptr);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetDebugMessageLog(count: UInt32; bufSize: Int32; var sources: DebugSource; types: array of DebugType; ids: IntPtr; var severities: DebugSeverity; lengths: IntPtr; messageLog: IntPtr): UInt32;
    begin
      Result := z_GetDebugMessageLog_ovr_40(count, bufSize, sources, types[0], ids, severities, lengths, messageLog);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetDebugMessageLog(count: UInt32; bufSize: Int32; var sources: DebugSource; types: array of DebugType; ids: IntPtr; severities: IntPtr; lengths: array of Int32; messageLog: string): UInt32;
    begin
      var par_8_str_ptr := Marshal.StringToHGlobalAnsi(messageLog);
      Result := z_GetDebugMessageLog_ovr_48(count, bufSize, sources, types[0], ids, severities, lengths[0], par_8_str_ptr);
      Marshal.FreeHGlobal(par_8_str_ptr);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetDebugMessageLog(count: UInt32; bufSize: Int32; var sources: DebugSource; types: array of DebugType; ids: IntPtr; severities: IntPtr; lengths: array of Int32; messageLog: IntPtr): UInt32;
    begin
      Result := z_GetDebugMessageLog_ovr_48(count, bufSize, sources, types[0], ids, severities, lengths[0], messageLog);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetDebugMessageLog(count: UInt32; bufSize: Int32; var sources: DebugSource; types: array of DebugType; ids: IntPtr; severities: IntPtr; var lengths: Int32; messageLog: string): UInt32;
    begin
      var par_8_str_ptr := Marshal.StringToHGlobalAnsi(messageLog);
      Result := z_GetDebugMessageLog_ovr_48(count, bufSize, sources, types[0], ids, severities, lengths, par_8_str_ptr);
      Marshal.FreeHGlobal(par_8_str_ptr);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetDebugMessageLog(count: UInt32; bufSize: Int32; var sources: DebugSource; types: array of DebugType; ids: IntPtr; severities: IntPtr; var lengths: Int32; messageLog: IntPtr): UInt32;
    begin
      Result := z_GetDebugMessageLog_ovr_48(count, bufSize, sources, types[0], ids, severities, lengths, messageLog);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetDebugMessageLog(count: UInt32; bufSize: Int32; var sources: DebugSource; types: array of DebugType; ids: IntPtr; severities: IntPtr; lengths: IntPtr; messageLog: string): UInt32;
    begin
      var par_8_str_ptr := Marshal.StringToHGlobalAnsi(messageLog);
      Result := z_GetDebugMessageLog_ovr_52(count, bufSize, sources, types[0], ids, severities, lengths, par_8_str_ptr);
      Marshal.FreeHGlobal(par_8_str_ptr);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetDebugMessageLog(count: UInt32; bufSize: Int32; var sources: DebugSource; types: array of DebugType; ids: IntPtr; severities: IntPtr; lengths: IntPtr; messageLog: IntPtr): UInt32;
    begin
      Result := z_GetDebugMessageLog_ovr_52(count, bufSize, sources, types[0], ids, severities, lengths, messageLog);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetDebugMessageLog(count: UInt32; bufSize: Int32; var sources: DebugSource; var types: DebugType; ids: array of UInt32; severities: array of DebugSeverity; lengths: array of Int32; messageLog: string): UInt32;
    begin
      var par_8_str_ptr := Marshal.StringToHGlobalAnsi(messageLog);
      Result := z_GetDebugMessageLog_ovr_0(count, bufSize, sources, types, ids[0], severities[0], lengths[0], par_8_str_ptr);
      Marshal.FreeHGlobal(par_8_str_ptr);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetDebugMessageLog(count: UInt32; bufSize: Int32; var sources: DebugSource; var types: DebugType; ids: array of UInt32; severities: array of DebugSeverity; lengths: array of Int32; messageLog: IntPtr): UInt32;
    begin
      Result := z_GetDebugMessageLog_ovr_0(count, bufSize, sources, types, ids[0], severities[0], lengths[0], messageLog);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetDebugMessageLog(count: UInt32; bufSize: Int32; var sources: DebugSource; var types: DebugType; ids: array of UInt32; severities: array of DebugSeverity; var lengths: Int32; messageLog: string): UInt32;
    begin
      var par_8_str_ptr := Marshal.StringToHGlobalAnsi(messageLog);
      Result := z_GetDebugMessageLog_ovr_0(count, bufSize, sources, types, ids[0], severities[0], lengths, par_8_str_ptr);
      Marshal.FreeHGlobal(par_8_str_ptr);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetDebugMessageLog(count: UInt32; bufSize: Int32; var sources: DebugSource; var types: DebugType; ids: array of UInt32; severities: array of DebugSeverity; var lengths: Int32; messageLog: IntPtr): UInt32;
    begin
      Result := z_GetDebugMessageLog_ovr_0(count, bufSize, sources, types, ids[0], severities[0], lengths, messageLog);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetDebugMessageLog(count: UInt32; bufSize: Int32; var sources: DebugSource; var types: DebugType; ids: array of UInt32; severities: array of DebugSeverity; lengths: IntPtr; messageLog: string): UInt32;
    begin
      var par_8_str_ptr := Marshal.StringToHGlobalAnsi(messageLog);
      Result := z_GetDebugMessageLog_ovr_4(count, bufSize, sources, types, ids[0], severities[0], lengths, par_8_str_ptr);
      Marshal.FreeHGlobal(par_8_str_ptr);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetDebugMessageLog(count: UInt32; bufSize: Int32; var sources: DebugSource; var types: DebugType; ids: array of UInt32; severities: array of DebugSeverity; lengths: IntPtr; messageLog: IntPtr): UInt32;
    begin
      Result := z_GetDebugMessageLog_ovr_4(count, bufSize, sources, types, ids[0], severities[0], lengths, messageLog);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetDebugMessageLog(count: UInt32; bufSize: Int32; var sources: DebugSource; var types: DebugType; ids: array of UInt32; var severities: DebugSeverity; lengths: array of Int32; messageLog: string): UInt32;
    begin
      var par_8_str_ptr := Marshal.StringToHGlobalAnsi(messageLog);
      Result := z_GetDebugMessageLog_ovr_0(count, bufSize, sources, types, ids[0], severities, lengths[0], par_8_str_ptr);
      Marshal.FreeHGlobal(par_8_str_ptr);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetDebugMessageLog(count: UInt32; bufSize: Int32; var sources: DebugSource; var types: DebugType; ids: array of UInt32; var severities: DebugSeverity; lengths: array of Int32; messageLog: IntPtr): UInt32;
    begin
      Result := z_GetDebugMessageLog_ovr_0(count, bufSize, sources, types, ids[0], severities, lengths[0], messageLog);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetDebugMessageLog(count: UInt32; bufSize: Int32; var sources: DebugSource; var types: DebugType; ids: array of UInt32; var severities: DebugSeverity; var lengths: Int32; messageLog: string): UInt32;
    begin
      var par_8_str_ptr := Marshal.StringToHGlobalAnsi(messageLog);
      Result := z_GetDebugMessageLog_ovr_0(count, bufSize, sources, types, ids[0], severities, lengths, par_8_str_ptr);
      Marshal.FreeHGlobal(par_8_str_ptr);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetDebugMessageLog(count: UInt32; bufSize: Int32; var sources: DebugSource; var types: DebugType; ids: array of UInt32; var severities: DebugSeverity; var lengths: Int32; messageLog: IntPtr): UInt32;
    begin
      Result := z_GetDebugMessageLog_ovr_0(count, bufSize, sources, types, ids[0], severities, lengths, messageLog);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetDebugMessageLog(count: UInt32; bufSize: Int32; var sources: DebugSource; var types: DebugType; ids: array of UInt32; var severities: DebugSeverity; lengths: IntPtr; messageLog: string): UInt32;
    begin
      var par_8_str_ptr := Marshal.StringToHGlobalAnsi(messageLog);
      Result := z_GetDebugMessageLog_ovr_4(count, bufSize, sources, types, ids[0], severities, lengths, par_8_str_ptr);
      Marshal.FreeHGlobal(par_8_str_ptr);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetDebugMessageLog(count: UInt32; bufSize: Int32; var sources: DebugSource; var types: DebugType; ids: array of UInt32; var severities: DebugSeverity; lengths: IntPtr; messageLog: IntPtr): UInt32;
    begin
      Result := z_GetDebugMessageLog_ovr_4(count, bufSize, sources, types, ids[0], severities, lengths, messageLog);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetDebugMessageLog(count: UInt32; bufSize: Int32; var sources: DebugSource; var types: DebugType; ids: array of UInt32; severities: IntPtr; lengths: array of Int32; messageLog: string): UInt32;
    begin
      var par_8_str_ptr := Marshal.StringToHGlobalAnsi(messageLog);
      Result := z_GetDebugMessageLog_ovr_12(count, bufSize, sources, types, ids[0], severities, lengths[0], par_8_str_ptr);
      Marshal.FreeHGlobal(par_8_str_ptr);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetDebugMessageLog(count: UInt32; bufSize: Int32; var sources: DebugSource; var types: DebugType; ids: array of UInt32; severities: IntPtr; lengths: array of Int32; messageLog: IntPtr): UInt32;
    begin
      Result := z_GetDebugMessageLog_ovr_12(count, bufSize, sources, types, ids[0], severities, lengths[0], messageLog);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetDebugMessageLog(count: UInt32; bufSize: Int32; var sources: DebugSource; var types: DebugType; ids: array of UInt32; severities: IntPtr; var lengths: Int32; messageLog: string): UInt32;
    begin
      var par_8_str_ptr := Marshal.StringToHGlobalAnsi(messageLog);
      Result := z_GetDebugMessageLog_ovr_12(count, bufSize, sources, types, ids[0], severities, lengths, par_8_str_ptr);
      Marshal.FreeHGlobal(par_8_str_ptr);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetDebugMessageLog(count: UInt32; bufSize: Int32; var sources: DebugSource; var types: DebugType; ids: array of UInt32; severities: IntPtr; var lengths: Int32; messageLog: IntPtr): UInt32;
    begin
      Result := z_GetDebugMessageLog_ovr_12(count, bufSize, sources, types, ids[0], severities, lengths, messageLog);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetDebugMessageLog(count: UInt32; bufSize: Int32; var sources: DebugSource; var types: DebugType; ids: array of UInt32; severities: IntPtr; lengths: IntPtr; messageLog: string): UInt32;
    begin
      var par_8_str_ptr := Marshal.StringToHGlobalAnsi(messageLog);
      Result := z_GetDebugMessageLog_ovr_16(count, bufSize, sources, types, ids[0], severities, lengths, par_8_str_ptr);
      Marshal.FreeHGlobal(par_8_str_ptr);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetDebugMessageLog(count: UInt32; bufSize: Int32; var sources: DebugSource; var types: DebugType; ids: array of UInt32; severities: IntPtr; lengths: IntPtr; messageLog: IntPtr): UInt32;
    begin
      Result := z_GetDebugMessageLog_ovr_16(count, bufSize, sources, types, ids[0], severities, lengths, messageLog);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetDebugMessageLog(count: UInt32; bufSize: Int32; var sources: DebugSource; var types: DebugType; var ids: UInt32; severities: array of DebugSeverity; lengths: array of Int32; messageLog: string): UInt32;
    begin
      var par_8_str_ptr := Marshal.StringToHGlobalAnsi(messageLog);
      Result := z_GetDebugMessageLog_ovr_0(count, bufSize, sources, types, ids, severities[0], lengths[0], par_8_str_ptr);
      Marshal.FreeHGlobal(par_8_str_ptr);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetDebugMessageLog(count: UInt32; bufSize: Int32; var sources: DebugSource; var types: DebugType; var ids: UInt32; severities: array of DebugSeverity; lengths: array of Int32; messageLog: IntPtr): UInt32;
    begin
      Result := z_GetDebugMessageLog_ovr_0(count, bufSize, sources, types, ids, severities[0], lengths[0], messageLog);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetDebugMessageLog(count: UInt32; bufSize: Int32; var sources: DebugSource; var types: DebugType; var ids: UInt32; severities: array of DebugSeverity; var lengths: Int32; messageLog: string): UInt32;
    begin
      var par_8_str_ptr := Marshal.StringToHGlobalAnsi(messageLog);
      Result := z_GetDebugMessageLog_ovr_0(count, bufSize, sources, types, ids, severities[0], lengths, par_8_str_ptr);
      Marshal.FreeHGlobal(par_8_str_ptr);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetDebugMessageLog(count: UInt32; bufSize: Int32; var sources: DebugSource; var types: DebugType; var ids: UInt32; severities: array of DebugSeverity; var lengths: Int32; messageLog: IntPtr): UInt32;
    begin
      Result := z_GetDebugMessageLog_ovr_0(count, bufSize, sources, types, ids, severities[0], lengths, messageLog);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetDebugMessageLog(count: UInt32; bufSize: Int32; var sources: DebugSource; var types: DebugType; var ids: UInt32; severities: array of DebugSeverity; lengths: IntPtr; messageLog: string): UInt32;
    begin
      var par_8_str_ptr := Marshal.StringToHGlobalAnsi(messageLog);
      Result := z_GetDebugMessageLog_ovr_4(count, bufSize, sources, types, ids, severities[0], lengths, par_8_str_ptr);
      Marshal.FreeHGlobal(par_8_str_ptr);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetDebugMessageLog(count: UInt32; bufSize: Int32; var sources: DebugSource; var types: DebugType; var ids: UInt32; severities: array of DebugSeverity; lengths: IntPtr; messageLog: IntPtr): UInt32;
    begin
      Result := z_GetDebugMessageLog_ovr_4(count, bufSize, sources, types, ids, severities[0], lengths, messageLog);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetDebugMessageLog(count: UInt32; bufSize: Int32; var sources: DebugSource; var types: DebugType; var ids: UInt32; var severities: DebugSeverity; lengths: array of Int32; messageLog: string): UInt32;
    begin
      var par_8_str_ptr := Marshal.StringToHGlobalAnsi(messageLog);
      Result := z_GetDebugMessageLog_ovr_0(count, bufSize, sources, types, ids, severities, lengths[0], par_8_str_ptr);
      Marshal.FreeHGlobal(par_8_str_ptr);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetDebugMessageLog(count: UInt32; bufSize: Int32; var sources: DebugSource; var types: DebugType; var ids: UInt32; var severities: DebugSeverity; lengths: array of Int32; messageLog: IntPtr): UInt32;
    begin
      Result := z_GetDebugMessageLog_ovr_0(count, bufSize, sources, types, ids, severities, lengths[0], messageLog);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetDebugMessageLog(count: UInt32; bufSize: Int32; var sources: DebugSource; var types: DebugType; var ids: UInt32; var severities: DebugSeverity; var lengths: Int32; messageLog: string): UInt32;
    begin
      var par_8_str_ptr := Marshal.StringToHGlobalAnsi(messageLog);
      Result := z_GetDebugMessageLog_ovr_0(count, bufSize, sources, types, ids, severities, lengths, par_8_str_ptr);
      Marshal.FreeHGlobal(par_8_str_ptr);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetDebugMessageLog(count: UInt32; bufSize: Int32; var sources: DebugSource; var types: DebugType; var ids: UInt32; var severities: DebugSeverity; var lengths: Int32; messageLog: IntPtr): UInt32;
    begin
      Result := z_GetDebugMessageLog_ovr_0(count, bufSize, sources, types, ids, severities, lengths, messageLog);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetDebugMessageLog(count: UInt32; bufSize: Int32; var sources: DebugSource; var types: DebugType; var ids: UInt32; var severities: DebugSeverity; lengths: IntPtr; messageLog: string): UInt32;
    begin
      var par_8_str_ptr := Marshal.StringToHGlobalAnsi(messageLog);
      Result := z_GetDebugMessageLog_ovr_4(count, bufSize, sources, types, ids, severities, lengths, par_8_str_ptr);
      Marshal.FreeHGlobal(par_8_str_ptr);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetDebugMessageLog(count: UInt32; bufSize: Int32; var sources: DebugSource; var types: DebugType; var ids: UInt32; var severities: DebugSeverity; lengths: IntPtr; messageLog: IntPtr): UInt32;
    begin
      Result := z_GetDebugMessageLog_ovr_4(count, bufSize, sources, types, ids, severities, lengths, messageLog);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetDebugMessageLog(count: UInt32; bufSize: Int32; var sources: DebugSource; var types: DebugType; var ids: UInt32; severities: IntPtr; lengths: array of Int32; messageLog: string): UInt32;
    begin
      var par_8_str_ptr := Marshal.StringToHGlobalAnsi(messageLog);
      Result := z_GetDebugMessageLog_ovr_12(count, bufSize, sources, types, ids, severities, lengths[0], par_8_str_ptr);
      Marshal.FreeHGlobal(par_8_str_ptr);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetDebugMessageLog(count: UInt32; bufSize: Int32; var sources: DebugSource; var types: DebugType; var ids: UInt32; severities: IntPtr; lengths: array of Int32; messageLog: IntPtr): UInt32;
    begin
      Result := z_GetDebugMessageLog_ovr_12(count, bufSize, sources, types, ids, severities, lengths[0], messageLog);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetDebugMessageLog(count: UInt32; bufSize: Int32; var sources: DebugSource; var types: DebugType; var ids: UInt32; severities: IntPtr; var lengths: Int32; messageLog: string): UInt32;
    begin
      var par_8_str_ptr := Marshal.StringToHGlobalAnsi(messageLog);
      Result := z_GetDebugMessageLog_ovr_12(count, bufSize, sources, types, ids, severities, lengths, par_8_str_ptr);
      Marshal.FreeHGlobal(par_8_str_ptr);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetDebugMessageLog(count: UInt32; bufSize: Int32; var sources: DebugSource; var types: DebugType; var ids: UInt32; severities: IntPtr; var lengths: Int32; messageLog: IntPtr): UInt32;
    begin
      Result := z_GetDebugMessageLog_ovr_12(count, bufSize, sources, types, ids, severities, lengths, messageLog);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetDebugMessageLog(count: UInt32; bufSize: Int32; var sources: DebugSource; var types: DebugType; var ids: UInt32; severities: IntPtr; lengths: IntPtr; messageLog: string): UInt32;
    begin
      var par_8_str_ptr := Marshal.StringToHGlobalAnsi(messageLog);
      Result := z_GetDebugMessageLog_ovr_16(count, bufSize, sources, types, ids, severities, lengths, par_8_str_ptr);
      Marshal.FreeHGlobal(par_8_str_ptr);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetDebugMessageLog(count: UInt32; bufSize: Int32; var sources: DebugSource; var types: DebugType; var ids: UInt32; severities: IntPtr; lengths: IntPtr; messageLog: IntPtr): UInt32;
    begin
      Result := z_GetDebugMessageLog_ovr_16(count, bufSize, sources, types, ids, severities, lengths, messageLog);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetDebugMessageLog(count: UInt32; bufSize: Int32; var sources: DebugSource; var types: DebugType; ids: IntPtr; severities: array of DebugSeverity; lengths: array of Int32; messageLog: string): UInt32;
    begin
      var par_8_str_ptr := Marshal.StringToHGlobalAnsi(messageLog);
      Result := z_GetDebugMessageLog_ovr_36(count, bufSize, sources, types, ids, severities[0], lengths[0], par_8_str_ptr);
      Marshal.FreeHGlobal(par_8_str_ptr);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetDebugMessageLog(count: UInt32; bufSize: Int32; var sources: DebugSource; var types: DebugType; ids: IntPtr; severities: array of DebugSeverity; lengths: array of Int32; messageLog: IntPtr): UInt32;
    begin
      Result := z_GetDebugMessageLog_ovr_36(count, bufSize, sources, types, ids, severities[0], lengths[0], messageLog);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetDebugMessageLog(count: UInt32; bufSize: Int32; var sources: DebugSource; var types: DebugType; ids: IntPtr; severities: array of DebugSeverity; var lengths: Int32; messageLog: string): UInt32;
    begin
      var par_8_str_ptr := Marshal.StringToHGlobalAnsi(messageLog);
      Result := z_GetDebugMessageLog_ovr_36(count, bufSize, sources, types, ids, severities[0], lengths, par_8_str_ptr);
      Marshal.FreeHGlobal(par_8_str_ptr);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetDebugMessageLog(count: UInt32; bufSize: Int32; var sources: DebugSource; var types: DebugType; ids: IntPtr; severities: array of DebugSeverity; var lengths: Int32; messageLog: IntPtr): UInt32;
    begin
      Result := z_GetDebugMessageLog_ovr_36(count, bufSize, sources, types, ids, severities[0], lengths, messageLog);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetDebugMessageLog(count: UInt32; bufSize: Int32; var sources: DebugSource; var types: DebugType; ids: IntPtr; severities: array of DebugSeverity; lengths: IntPtr; messageLog: string): UInt32;
    begin
      var par_8_str_ptr := Marshal.StringToHGlobalAnsi(messageLog);
      Result := z_GetDebugMessageLog_ovr_40(count, bufSize, sources, types, ids, severities[0], lengths, par_8_str_ptr);
      Marshal.FreeHGlobal(par_8_str_ptr);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetDebugMessageLog(count: UInt32; bufSize: Int32; var sources: DebugSource; var types: DebugType; ids: IntPtr; severities: array of DebugSeverity; lengths: IntPtr; messageLog: IntPtr): UInt32;
    begin
      Result := z_GetDebugMessageLog_ovr_40(count, bufSize, sources, types, ids, severities[0], lengths, messageLog);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetDebugMessageLog(count: UInt32; bufSize: Int32; var sources: DebugSource; var types: DebugType; ids: IntPtr; var severities: DebugSeverity; lengths: array of Int32; messageLog: string): UInt32;
    begin
      var par_8_str_ptr := Marshal.StringToHGlobalAnsi(messageLog);
      Result := z_GetDebugMessageLog_ovr_36(count, bufSize, sources, types, ids, severities, lengths[0], par_8_str_ptr);
      Marshal.FreeHGlobal(par_8_str_ptr);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetDebugMessageLog(count: UInt32; bufSize: Int32; var sources: DebugSource; var types: DebugType; ids: IntPtr; var severities: DebugSeverity; lengths: array of Int32; messageLog: IntPtr): UInt32;
    begin
      Result := z_GetDebugMessageLog_ovr_36(count, bufSize, sources, types, ids, severities, lengths[0], messageLog);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetDebugMessageLog(count: UInt32; bufSize: Int32; var sources: DebugSource; var types: DebugType; ids: IntPtr; var severities: DebugSeverity; var lengths: Int32; messageLog: string): UInt32;
    begin
      var par_8_str_ptr := Marshal.StringToHGlobalAnsi(messageLog);
      Result := z_GetDebugMessageLog_ovr_36(count, bufSize, sources, types, ids, severities, lengths, par_8_str_ptr);
      Marshal.FreeHGlobal(par_8_str_ptr);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetDebugMessageLog(count: UInt32; bufSize: Int32; var sources: DebugSource; var types: DebugType; ids: IntPtr; var severities: DebugSeverity; var lengths: Int32; messageLog: IntPtr): UInt32;
    begin
      Result := z_GetDebugMessageLog_ovr_36(count, bufSize, sources, types, ids, severities, lengths, messageLog);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetDebugMessageLog(count: UInt32; bufSize: Int32; var sources: DebugSource; var types: DebugType; ids: IntPtr; var severities: DebugSeverity; lengths: IntPtr; messageLog: string): UInt32;
    begin
      var par_8_str_ptr := Marshal.StringToHGlobalAnsi(messageLog);
      Result := z_GetDebugMessageLog_ovr_40(count, bufSize, sources, types, ids, severities, lengths, par_8_str_ptr);
      Marshal.FreeHGlobal(par_8_str_ptr);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetDebugMessageLog(count: UInt32; bufSize: Int32; var sources: DebugSource; var types: DebugType; ids: IntPtr; var severities: DebugSeverity; lengths: IntPtr; messageLog: IntPtr): UInt32;
    begin
      Result := z_GetDebugMessageLog_ovr_40(count, bufSize, sources, types, ids, severities, lengths, messageLog);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetDebugMessageLog(count: UInt32; bufSize: Int32; var sources: DebugSource; var types: DebugType; ids: IntPtr; severities: IntPtr; lengths: array of Int32; messageLog: string): UInt32;
    begin
      var par_8_str_ptr := Marshal.StringToHGlobalAnsi(messageLog);
      Result := z_GetDebugMessageLog_ovr_48(count, bufSize, sources, types, ids, severities, lengths[0], par_8_str_ptr);
      Marshal.FreeHGlobal(par_8_str_ptr);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetDebugMessageLog(count: UInt32; bufSize: Int32; var sources: DebugSource; var types: DebugType; ids: IntPtr; severities: IntPtr; lengths: array of Int32; messageLog: IntPtr): UInt32;
    begin
      Result := z_GetDebugMessageLog_ovr_48(count, bufSize, sources, types, ids, severities, lengths[0], messageLog);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetDebugMessageLog(count: UInt32; bufSize: Int32; var sources: DebugSource; var types: DebugType; ids: IntPtr; severities: IntPtr; var lengths: Int32; messageLog: string): UInt32;
    begin
      var par_8_str_ptr := Marshal.StringToHGlobalAnsi(messageLog);
      Result := z_GetDebugMessageLog_ovr_48(count, bufSize, sources, types, ids, severities, lengths, par_8_str_ptr);
      Marshal.FreeHGlobal(par_8_str_ptr);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetDebugMessageLog(count: UInt32; bufSize: Int32; var sources: DebugSource; var types: DebugType; ids: IntPtr; severities: IntPtr; var lengths: Int32; messageLog: IntPtr): UInt32;
    begin
      Result := z_GetDebugMessageLog_ovr_48(count, bufSize, sources, types, ids, severities, lengths, messageLog);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetDebugMessageLog(count: UInt32; bufSize: Int32; var sources: DebugSource; var types: DebugType; ids: IntPtr; severities: IntPtr; lengths: IntPtr; messageLog: string): UInt32;
    begin
      var par_8_str_ptr := Marshal.StringToHGlobalAnsi(messageLog);
      Result := z_GetDebugMessageLog_ovr_52(count, bufSize, sources, types, ids, severities, lengths, par_8_str_ptr);
      Marshal.FreeHGlobal(par_8_str_ptr);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetDebugMessageLog(count: UInt32; bufSize: Int32; var sources: DebugSource; var types: DebugType; ids: IntPtr; severities: IntPtr; lengths: IntPtr; messageLog: IntPtr): UInt32;
    begin
      Result := z_GetDebugMessageLog_ovr_52(count, bufSize, sources, types, ids, severities, lengths, messageLog);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetDebugMessageLog(count: UInt32; bufSize: Int32; var sources: DebugSource; types: IntPtr; ids: array of UInt32; severities: array of DebugSeverity; lengths: array of Int32; messageLog: string): UInt32;
    begin
      var par_8_str_ptr := Marshal.StringToHGlobalAnsi(messageLog);
      Result := z_GetDebugMessageLog_ovr_108(count, bufSize, sources, types, ids[0], severities[0], lengths[0], par_8_str_ptr);
      Marshal.FreeHGlobal(par_8_str_ptr);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetDebugMessageLog(count: UInt32; bufSize: Int32; var sources: DebugSource; types: IntPtr; ids: array of UInt32; severities: array of DebugSeverity; lengths: array of Int32; messageLog: IntPtr): UInt32;
    begin
      Result := z_GetDebugMessageLog_ovr_108(count, bufSize, sources, types, ids[0], severities[0], lengths[0], messageLog);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetDebugMessageLog(count: UInt32; bufSize: Int32; var sources: DebugSource; types: IntPtr; ids: array of UInt32; severities: array of DebugSeverity; var lengths: Int32; messageLog: string): UInt32;
    begin
      var par_8_str_ptr := Marshal.StringToHGlobalAnsi(messageLog);
      Result := z_GetDebugMessageLog_ovr_108(count, bufSize, sources, types, ids[0], severities[0], lengths, par_8_str_ptr);
      Marshal.FreeHGlobal(par_8_str_ptr);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetDebugMessageLog(count: UInt32; bufSize: Int32; var sources: DebugSource; types: IntPtr; ids: array of UInt32; severities: array of DebugSeverity; var lengths: Int32; messageLog: IntPtr): UInt32;
    begin
      Result := z_GetDebugMessageLog_ovr_108(count, bufSize, sources, types, ids[0], severities[0], lengths, messageLog);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetDebugMessageLog(count: UInt32; bufSize: Int32; var sources: DebugSource; types: IntPtr; ids: array of UInt32; severities: array of DebugSeverity; lengths: IntPtr; messageLog: string): UInt32;
    begin
      var par_8_str_ptr := Marshal.StringToHGlobalAnsi(messageLog);
      Result := z_GetDebugMessageLog_ovr_112(count, bufSize, sources, types, ids[0], severities[0], lengths, par_8_str_ptr);
      Marshal.FreeHGlobal(par_8_str_ptr);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetDebugMessageLog(count: UInt32; bufSize: Int32; var sources: DebugSource; types: IntPtr; ids: array of UInt32; severities: array of DebugSeverity; lengths: IntPtr; messageLog: IntPtr): UInt32;
    begin
      Result := z_GetDebugMessageLog_ovr_112(count, bufSize, sources, types, ids[0], severities[0], lengths, messageLog);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetDebugMessageLog(count: UInt32; bufSize: Int32; var sources: DebugSource; types: IntPtr; ids: array of UInt32; var severities: DebugSeverity; lengths: array of Int32; messageLog: string): UInt32;
    begin
      var par_8_str_ptr := Marshal.StringToHGlobalAnsi(messageLog);
      Result := z_GetDebugMessageLog_ovr_108(count, bufSize, sources, types, ids[0], severities, lengths[0], par_8_str_ptr);
      Marshal.FreeHGlobal(par_8_str_ptr);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetDebugMessageLog(count: UInt32; bufSize: Int32; var sources: DebugSource; types: IntPtr; ids: array of UInt32; var severities: DebugSeverity; lengths: array of Int32; messageLog: IntPtr): UInt32;
    begin
      Result := z_GetDebugMessageLog_ovr_108(count, bufSize, sources, types, ids[0], severities, lengths[0], messageLog);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetDebugMessageLog(count: UInt32; bufSize: Int32; var sources: DebugSource; types: IntPtr; ids: array of UInt32; var severities: DebugSeverity; var lengths: Int32; messageLog: string): UInt32;
    begin
      var par_8_str_ptr := Marshal.StringToHGlobalAnsi(messageLog);
      Result := z_GetDebugMessageLog_ovr_108(count, bufSize, sources, types, ids[0], severities, lengths, par_8_str_ptr);
      Marshal.FreeHGlobal(par_8_str_ptr);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetDebugMessageLog(count: UInt32; bufSize: Int32; var sources: DebugSource; types: IntPtr; ids: array of UInt32; var severities: DebugSeverity; var lengths: Int32; messageLog: IntPtr): UInt32;
    begin
      Result := z_GetDebugMessageLog_ovr_108(count, bufSize, sources, types, ids[0], severities, lengths, messageLog);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetDebugMessageLog(count: UInt32; bufSize: Int32; var sources: DebugSource; types: IntPtr; ids: array of UInt32; var severities: DebugSeverity; lengths: IntPtr; messageLog: string): UInt32;
    begin
      var par_8_str_ptr := Marshal.StringToHGlobalAnsi(messageLog);
      Result := z_GetDebugMessageLog_ovr_112(count, bufSize, sources, types, ids[0], severities, lengths, par_8_str_ptr);
      Marshal.FreeHGlobal(par_8_str_ptr);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetDebugMessageLog(count: UInt32; bufSize: Int32; var sources: DebugSource; types: IntPtr; ids: array of UInt32; var severities: DebugSeverity; lengths: IntPtr; messageLog: IntPtr): UInt32;
    begin
      Result := z_GetDebugMessageLog_ovr_112(count, bufSize, sources, types, ids[0], severities, lengths, messageLog);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetDebugMessageLog(count: UInt32; bufSize: Int32; var sources: DebugSource; types: IntPtr; ids: array of UInt32; severities: IntPtr; lengths: array of Int32; messageLog: string): UInt32;
    begin
      var par_8_str_ptr := Marshal.StringToHGlobalAnsi(messageLog);
      Result := z_GetDebugMessageLog_ovr_120(count, bufSize, sources, types, ids[0], severities, lengths[0], par_8_str_ptr);
      Marshal.FreeHGlobal(par_8_str_ptr);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetDebugMessageLog(count: UInt32; bufSize: Int32; var sources: DebugSource; types: IntPtr; ids: array of UInt32; severities: IntPtr; lengths: array of Int32; messageLog: IntPtr): UInt32;
    begin
      Result := z_GetDebugMessageLog_ovr_120(count, bufSize, sources, types, ids[0], severities, lengths[0], messageLog);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetDebugMessageLog(count: UInt32; bufSize: Int32; var sources: DebugSource; types: IntPtr; ids: array of UInt32; severities: IntPtr; var lengths: Int32; messageLog: string): UInt32;
    begin
      var par_8_str_ptr := Marshal.StringToHGlobalAnsi(messageLog);
      Result := z_GetDebugMessageLog_ovr_120(count, bufSize, sources, types, ids[0], severities, lengths, par_8_str_ptr);
      Marshal.FreeHGlobal(par_8_str_ptr);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetDebugMessageLog(count: UInt32; bufSize: Int32; var sources: DebugSource; types: IntPtr; ids: array of UInt32; severities: IntPtr; var lengths: Int32; messageLog: IntPtr): UInt32;
    begin
      Result := z_GetDebugMessageLog_ovr_120(count, bufSize, sources, types, ids[0], severities, lengths, messageLog);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetDebugMessageLog(count: UInt32; bufSize: Int32; var sources: DebugSource; types: IntPtr; ids: array of UInt32; severities: IntPtr; lengths: IntPtr; messageLog: string): UInt32;
    begin
      var par_8_str_ptr := Marshal.StringToHGlobalAnsi(messageLog);
      Result := z_GetDebugMessageLog_ovr_124(count, bufSize, sources, types, ids[0], severities, lengths, par_8_str_ptr);
      Marshal.FreeHGlobal(par_8_str_ptr);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetDebugMessageLog(count: UInt32; bufSize: Int32; var sources: DebugSource; types: IntPtr; ids: array of UInt32; severities: IntPtr; lengths: IntPtr; messageLog: IntPtr): UInt32;
    begin
      Result := z_GetDebugMessageLog_ovr_124(count, bufSize, sources, types, ids[0], severities, lengths, messageLog);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetDebugMessageLog(count: UInt32; bufSize: Int32; var sources: DebugSource; types: IntPtr; var ids: UInt32; severities: array of DebugSeverity; lengths: array of Int32; messageLog: string): UInt32;
    begin
      var par_8_str_ptr := Marshal.StringToHGlobalAnsi(messageLog);
      Result := z_GetDebugMessageLog_ovr_108(count, bufSize, sources, types, ids, severities[0], lengths[0], par_8_str_ptr);
      Marshal.FreeHGlobal(par_8_str_ptr);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetDebugMessageLog(count: UInt32; bufSize: Int32; var sources: DebugSource; types: IntPtr; var ids: UInt32; severities: array of DebugSeverity; lengths: array of Int32; messageLog: IntPtr): UInt32;
    begin
      Result := z_GetDebugMessageLog_ovr_108(count, bufSize, sources, types, ids, severities[0], lengths[0], messageLog);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetDebugMessageLog(count: UInt32; bufSize: Int32; var sources: DebugSource; types: IntPtr; var ids: UInt32; severities: array of DebugSeverity; var lengths: Int32; messageLog: string): UInt32;
    begin
      var par_8_str_ptr := Marshal.StringToHGlobalAnsi(messageLog);
      Result := z_GetDebugMessageLog_ovr_108(count, bufSize, sources, types, ids, severities[0], lengths, par_8_str_ptr);
      Marshal.FreeHGlobal(par_8_str_ptr);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetDebugMessageLog(count: UInt32; bufSize: Int32; var sources: DebugSource; types: IntPtr; var ids: UInt32; severities: array of DebugSeverity; var lengths: Int32; messageLog: IntPtr): UInt32;
    begin
      Result := z_GetDebugMessageLog_ovr_108(count, bufSize, sources, types, ids, severities[0], lengths, messageLog);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetDebugMessageLog(count: UInt32; bufSize: Int32; var sources: DebugSource; types: IntPtr; var ids: UInt32; severities: array of DebugSeverity; lengths: IntPtr; messageLog: string): UInt32;
    begin
      var par_8_str_ptr := Marshal.StringToHGlobalAnsi(messageLog);
      Result := z_GetDebugMessageLog_ovr_112(count, bufSize, sources, types, ids, severities[0], lengths, par_8_str_ptr);
      Marshal.FreeHGlobal(par_8_str_ptr);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetDebugMessageLog(count: UInt32; bufSize: Int32; var sources: DebugSource; types: IntPtr; var ids: UInt32; severities: array of DebugSeverity; lengths: IntPtr; messageLog: IntPtr): UInt32;
    begin
      Result := z_GetDebugMessageLog_ovr_112(count, bufSize, sources, types, ids, severities[0], lengths, messageLog);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetDebugMessageLog(count: UInt32; bufSize: Int32; var sources: DebugSource; types: IntPtr; var ids: UInt32; var severities: DebugSeverity; lengths: array of Int32; messageLog: string): UInt32;
    begin
      var par_8_str_ptr := Marshal.StringToHGlobalAnsi(messageLog);
      Result := z_GetDebugMessageLog_ovr_108(count, bufSize, sources, types, ids, severities, lengths[0], par_8_str_ptr);
      Marshal.FreeHGlobal(par_8_str_ptr);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetDebugMessageLog(count: UInt32; bufSize: Int32; var sources: DebugSource; types: IntPtr; var ids: UInt32; var severities: DebugSeverity; lengths: array of Int32; messageLog: IntPtr): UInt32;
    begin
      Result := z_GetDebugMessageLog_ovr_108(count, bufSize, sources, types, ids, severities, lengths[0], messageLog);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetDebugMessageLog(count: UInt32; bufSize: Int32; var sources: DebugSource; types: IntPtr; var ids: UInt32; var severities: DebugSeverity; var lengths: Int32; messageLog: string): UInt32;
    begin
      var par_8_str_ptr := Marshal.StringToHGlobalAnsi(messageLog);
      Result := z_GetDebugMessageLog_ovr_108(count, bufSize, sources, types, ids, severities, lengths, par_8_str_ptr);
      Marshal.FreeHGlobal(par_8_str_ptr);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetDebugMessageLog(count: UInt32; bufSize: Int32; var sources: DebugSource; types: IntPtr; var ids: UInt32; var severities: DebugSeverity; var lengths: Int32; messageLog: IntPtr): UInt32;
    begin
      Result := z_GetDebugMessageLog_ovr_108(count, bufSize, sources, types, ids, severities, lengths, messageLog);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetDebugMessageLog(count: UInt32; bufSize: Int32; var sources: DebugSource; types: IntPtr; var ids: UInt32; var severities: DebugSeverity; lengths: IntPtr; messageLog: string): UInt32;
    begin
      var par_8_str_ptr := Marshal.StringToHGlobalAnsi(messageLog);
      Result := z_GetDebugMessageLog_ovr_112(count, bufSize, sources, types, ids, severities, lengths, par_8_str_ptr);
      Marshal.FreeHGlobal(par_8_str_ptr);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetDebugMessageLog(count: UInt32; bufSize: Int32; var sources: DebugSource; types: IntPtr; var ids: UInt32; var severities: DebugSeverity; lengths: IntPtr; messageLog: IntPtr): UInt32;
    begin
      Result := z_GetDebugMessageLog_ovr_112(count, bufSize, sources, types, ids, severities, lengths, messageLog);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetDebugMessageLog(count: UInt32; bufSize: Int32; var sources: DebugSource; types: IntPtr; var ids: UInt32; severities: IntPtr; lengths: array of Int32; messageLog: string): UInt32;
    begin
      var par_8_str_ptr := Marshal.StringToHGlobalAnsi(messageLog);
      Result := z_GetDebugMessageLog_ovr_120(count, bufSize, sources, types, ids, severities, lengths[0], par_8_str_ptr);
      Marshal.FreeHGlobal(par_8_str_ptr);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetDebugMessageLog(count: UInt32; bufSize: Int32; var sources: DebugSource; types: IntPtr; var ids: UInt32; severities: IntPtr; lengths: array of Int32; messageLog: IntPtr): UInt32;
    begin
      Result := z_GetDebugMessageLog_ovr_120(count, bufSize, sources, types, ids, severities, lengths[0], messageLog);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetDebugMessageLog(count: UInt32; bufSize: Int32; var sources: DebugSource; types: IntPtr; var ids: UInt32; severities: IntPtr; var lengths: Int32; messageLog: string): UInt32;
    begin
      var par_8_str_ptr := Marshal.StringToHGlobalAnsi(messageLog);
      Result := z_GetDebugMessageLog_ovr_120(count, bufSize, sources, types, ids, severities, lengths, par_8_str_ptr);
      Marshal.FreeHGlobal(par_8_str_ptr);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetDebugMessageLog(count: UInt32; bufSize: Int32; var sources: DebugSource; types: IntPtr; var ids: UInt32; severities: IntPtr; var lengths: Int32; messageLog: IntPtr): UInt32;
    begin
      Result := z_GetDebugMessageLog_ovr_120(count, bufSize, sources, types, ids, severities, lengths, messageLog);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetDebugMessageLog(count: UInt32; bufSize: Int32; var sources: DebugSource; types: IntPtr; var ids: UInt32; severities: IntPtr; lengths: IntPtr; messageLog: string): UInt32;
    begin
      var par_8_str_ptr := Marshal.StringToHGlobalAnsi(messageLog);
      Result := z_GetDebugMessageLog_ovr_124(count, bufSize, sources, types, ids, severities, lengths, par_8_str_ptr);
      Marshal.FreeHGlobal(par_8_str_ptr);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetDebugMessageLog(count: UInt32; bufSize: Int32; var sources: DebugSource; types: IntPtr; var ids: UInt32; severities: IntPtr; lengths: IntPtr; messageLog: IntPtr): UInt32;
    begin
      Result := z_GetDebugMessageLog_ovr_124(count, bufSize, sources, types, ids, severities, lengths, messageLog);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetDebugMessageLog(count: UInt32; bufSize: Int32; var sources: DebugSource; types: IntPtr; ids: IntPtr; severities: array of DebugSeverity; lengths: array of Int32; messageLog: string): UInt32;
    begin
      var par_8_str_ptr := Marshal.StringToHGlobalAnsi(messageLog);
      Result := z_GetDebugMessageLog_ovr_144(count, bufSize, sources, types, ids, severities[0], lengths[0], par_8_str_ptr);
      Marshal.FreeHGlobal(par_8_str_ptr);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetDebugMessageLog(count: UInt32; bufSize: Int32; var sources: DebugSource; types: IntPtr; ids: IntPtr; severities: array of DebugSeverity; lengths: array of Int32; messageLog: IntPtr): UInt32;
    begin
      Result := z_GetDebugMessageLog_ovr_144(count, bufSize, sources, types, ids, severities[0], lengths[0], messageLog);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetDebugMessageLog(count: UInt32; bufSize: Int32; var sources: DebugSource; types: IntPtr; ids: IntPtr; severities: array of DebugSeverity; var lengths: Int32; messageLog: string): UInt32;
    begin
      var par_8_str_ptr := Marshal.StringToHGlobalAnsi(messageLog);
      Result := z_GetDebugMessageLog_ovr_144(count, bufSize, sources, types, ids, severities[0], lengths, par_8_str_ptr);
      Marshal.FreeHGlobal(par_8_str_ptr);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetDebugMessageLog(count: UInt32; bufSize: Int32; var sources: DebugSource; types: IntPtr; ids: IntPtr; severities: array of DebugSeverity; var lengths: Int32; messageLog: IntPtr): UInt32;
    begin
      Result := z_GetDebugMessageLog_ovr_144(count, bufSize, sources, types, ids, severities[0], lengths, messageLog);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetDebugMessageLog(count: UInt32; bufSize: Int32; var sources: DebugSource; types: IntPtr; ids: IntPtr; severities: array of DebugSeverity; lengths: IntPtr; messageLog: string): UInt32;
    begin
      var par_8_str_ptr := Marshal.StringToHGlobalAnsi(messageLog);
      Result := z_GetDebugMessageLog_ovr_148(count, bufSize, sources, types, ids, severities[0], lengths, par_8_str_ptr);
      Marshal.FreeHGlobal(par_8_str_ptr);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetDebugMessageLog(count: UInt32; bufSize: Int32; var sources: DebugSource; types: IntPtr; ids: IntPtr; severities: array of DebugSeverity; lengths: IntPtr; messageLog: IntPtr): UInt32;
    begin
      Result := z_GetDebugMessageLog_ovr_148(count, bufSize, sources, types, ids, severities[0], lengths, messageLog);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetDebugMessageLog(count: UInt32; bufSize: Int32; var sources: DebugSource; types: IntPtr; ids: IntPtr; var severities: DebugSeverity; lengths: array of Int32; messageLog: string): UInt32;
    begin
      var par_8_str_ptr := Marshal.StringToHGlobalAnsi(messageLog);
      Result := z_GetDebugMessageLog_ovr_144(count, bufSize, sources, types, ids, severities, lengths[0], par_8_str_ptr);
      Marshal.FreeHGlobal(par_8_str_ptr);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetDebugMessageLog(count: UInt32; bufSize: Int32; var sources: DebugSource; types: IntPtr; ids: IntPtr; var severities: DebugSeverity; lengths: array of Int32; messageLog: IntPtr): UInt32;
    begin
      Result := z_GetDebugMessageLog_ovr_144(count, bufSize, sources, types, ids, severities, lengths[0], messageLog);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetDebugMessageLog(count: UInt32; bufSize: Int32; var sources: DebugSource; types: IntPtr; ids: IntPtr; var severities: DebugSeverity; var lengths: Int32; messageLog: string): UInt32;
    begin
      var par_8_str_ptr := Marshal.StringToHGlobalAnsi(messageLog);
      Result := z_GetDebugMessageLog_ovr_144(count, bufSize, sources, types, ids, severities, lengths, par_8_str_ptr);
      Marshal.FreeHGlobal(par_8_str_ptr);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetDebugMessageLog(count: UInt32; bufSize: Int32; var sources: DebugSource; types: IntPtr; ids: IntPtr; var severities: DebugSeverity; var lengths: Int32; messageLog: IntPtr): UInt32;
    begin
      Result := z_GetDebugMessageLog_ovr_144(count, bufSize, sources, types, ids, severities, lengths, messageLog);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetDebugMessageLog(count: UInt32; bufSize: Int32; var sources: DebugSource; types: IntPtr; ids: IntPtr; var severities: DebugSeverity; lengths: IntPtr; messageLog: string): UInt32;
    begin
      var par_8_str_ptr := Marshal.StringToHGlobalAnsi(messageLog);
      Result := z_GetDebugMessageLog_ovr_148(count, bufSize, sources, types, ids, severities, lengths, par_8_str_ptr);
      Marshal.FreeHGlobal(par_8_str_ptr);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetDebugMessageLog(count: UInt32; bufSize: Int32; var sources: DebugSource; types: IntPtr; ids: IntPtr; var severities: DebugSeverity; lengths: IntPtr; messageLog: IntPtr): UInt32;
    begin
      Result := z_GetDebugMessageLog_ovr_148(count, bufSize, sources, types, ids, severities, lengths, messageLog);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetDebugMessageLog(count: UInt32; bufSize: Int32; var sources: DebugSource; types: IntPtr; ids: IntPtr; severities: IntPtr; lengths: array of Int32; messageLog: string): UInt32;
    begin
      var par_8_str_ptr := Marshal.StringToHGlobalAnsi(messageLog);
      Result := z_GetDebugMessageLog_ovr_156(count, bufSize, sources, types, ids, severities, lengths[0], par_8_str_ptr);
      Marshal.FreeHGlobal(par_8_str_ptr);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetDebugMessageLog(count: UInt32; bufSize: Int32; var sources: DebugSource; types: IntPtr; ids: IntPtr; severities: IntPtr; lengths: array of Int32; messageLog: IntPtr): UInt32;
    begin
      Result := z_GetDebugMessageLog_ovr_156(count, bufSize, sources, types, ids, severities, lengths[0], messageLog);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetDebugMessageLog(count: UInt32; bufSize: Int32; var sources: DebugSource; types: IntPtr; ids: IntPtr; severities: IntPtr; var lengths: Int32; messageLog: string): UInt32;
    begin
      var par_8_str_ptr := Marshal.StringToHGlobalAnsi(messageLog);
      Result := z_GetDebugMessageLog_ovr_156(count, bufSize, sources, types, ids, severities, lengths, par_8_str_ptr);
      Marshal.FreeHGlobal(par_8_str_ptr);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetDebugMessageLog(count: UInt32; bufSize: Int32; var sources: DebugSource; types: IntPtr; ids: IntPtr; severities: IntPtr; var lengths: Int32; messageLog: IntPtr): UInt32;
    begin
      Result := z_GetDebugMessageLog_ovr_156(count, bufSize, sources, types, ids, severities, lengths, messageLog);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetDebugMessageLog(count: UInt32; bufSize: Int32; var sources: DebugSource; types: IntPtr; ids: IntPtr; severities: IntPtr; lengths: IntPtr; messageLog: string): UInt32;
    begin
      var par_8_str_ptr := Marshal.StringToHGlobalAnsi(messageLog);
      Result := z_GetDebugMessageLog_ovr_160(count, bufSize, sources, types, ids, severities, lengths, par_8_str_ptr);
      Marshal.FreeHGlobal(par_8_str_ptr);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetDebugMessageLog(count: UInt32; bufSize: Int32; var sources: DebugSource; types: IntPtr; ids: IntPtr; severities: IntPtr; lengths: IntPtr; messageLog: IntPtr): UInt32;
    begin
      Result := z_GetDebugMessageLog_ovr_160(count, bufSize, sources, types, ids, severities, lengths, messageLog);
    end;
    public z_GetDebugMessageLog_ovr_324 := GetFuncOrNil&<function(count: UInt32; bufSize: Int32; sources: IntPtr; var types: DebugType; var ids: UInt32; var severities: DebugSeverity; var lengths: Int32; messageLog: IntPtr): UInt32>(z_GetDebugMessageLog_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetDebugMessageLog(count: UInt32; bufSize: Int32; sources: IntPtr; types: array of DebugType; ids: array of UInt32; severities: array of DebugSeverity; lengths: array of Int32; messageLog: string): UInt32;
    begin
      var par_8_str_ptr := Marshal.StringToHGlobalAnsi(messageLog);
      Result := z_GetDebugMessageLog_ovr_324(count, bufSize, sources, types[0], ids[0], severities[0], lengths[0], par_8_str_ptr);
      Marshal.FreeHGlobal(par_8_str_ptr);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetDebugMessageLog(count: UInt32; bufSize: Int32; sources: IntPtr; types: array of DebugType; ids: array of UInt32; severities: array of DebugSeverity; lengths: array of Int32; messageLog: IntPtr): UInt32;
    begin
      Result := z_GetDebugMessageLog_ovr_324(count, bufSize, sources, types[0], ids[0], severities[0], lengths[0], messageLog);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetDebugMessageLog(count: UInt32; bufSize: Int32; sources: IntPtr; types: array of DebugType; ids: array of UInt32; severities: array of DebugSeverity; var lengths: Int32; messageLog: string): UInt32;
    begin
      var par_8_str_ptr := Marshal.StringToHGlobalAnsi(messageLog);
      Result := z_GetDebugMessageLog_ovr_324(count, bufSize, sources, types[0], ids[0], severities[0], lengths, par_8_str_ptr);
      Marshal.FreeHGlobal(par_8_str_ptr);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetDebugMessageLog(count: UInt32; bufSize: Int32; sources: IntPtr; types: array of DebugType; ids: array of UInt32; severities: array of DebugSeverity; var lengths: Int32; messageLog: IntPtr): UInt32;
    begin
      Result := z_GetDebugMessageLog_ovr_324(count, bufSize, sources, types[0], ids[0], severities[0], lengths, messageLog);
    end;
    public z_GetDebugMessageLog_ovr_328 := GetFuncOrNil&<function(count: UInt32; bufSize: Int32; sources: IntPtr; var types: DebugType; var ids: UInt32; var severities: DebugSeverity; lengths: IntPtr; messageLog: IntPtr): UInt32>(z_GetDebugMessageLog_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetDebugMessageLog(count: UInt32; bufSize: Int32; sources: IntPtr; types: array of DebugType; ids: array of UInt32; severities: array of DebugSeverity; lengths: IntPtr; messageLog: string): UInt32;
    begin
      var par_8_str_ptr := Marshal.StringToHGlobalAnsi(messageLog);
      Result := z_GetDebugMessageLog_ovr_328(count, bufSize, sources, types[0], ids[0], severities[0], lengths, par_8_str_ptr);
      Marshal.FreeHGlobal(par_8_str_ptr);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetDebugMessageLog(count: UInt32; bufSize: Int32; sources: IntPtr; types: array of DebugType; ids: array of UInt32; severities: array of DebugSeverity; lengths: IntPtr; messageLog: IntPtr): UInt32;
    begin
      Result := z_GetDebugMessageLog_ovr_328(count, bufSize, sources, types[0], ids[0], severities[0], lengths, messageLog);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetDebugMessageLog(count: UInt32; bufSize: Int32; sources: IntPtr; types: array of DebugType; ids: array of UInt32; var severities: DebugSeverity; lengths: array of Int32; messageLog: string): UInt32;
    begin
      var par_8_str_ptr := Marshal.StringToHGlobalAnsi(messageLog);
      Result := z_GetDebugMessageLog_ovr_324(count, bufSize, sources, types[0], ids[0], severities, lengths[0], par_8_str_ptr);
      Marshal.FreeHGlobal(par_8_str_ptr);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetDebugMessageLog(count: UInt32; bufSize: Int32; sources: IntPtr; types: array of DebugType; ids: array of UInt32; var severities: DebugSeverity; lengths: array of Int32; messageLog: IntPtr): UInt32;
    begin
      Result := z_GetDebugMessageLog_ovr_324(count, bufSize, sources, types[0], ids[0], severities, lengths[0], messageLog);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetDebugMessageLog(count: UInt32; bufSize: Int32; sources: IntPtr; types: array of DebugType; ids: array of UInt32; var severities: DebugSeverity; var lengths: Int32; messageLog: string): UInt32;
    begin
      var par_8_str_ptr := Marshal.StringToHGlobalAnsi(messageLog);
      Result := z_GetDebugMessageLog_ovr_324(count, bufSize, sources, types[0], ids[0], severities, lengths, par_8_str_ptr);
      Marshal.FreeHGlobal(par_8_str_ptr);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetDebugMessageLog(count: UInt32; bufSize: Int32; sources: IntPtr; types: array of DebugType; ids: array of UInt32; var severities: DebugSeverity; var lengths: Int32; messageLog: IntPtr): UInt32;
    begin
      Result := z_GetDebugMessageLog_ovr_324(count, bufSize, sources, types[0], ids[0], severities, lengths, messageLog);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetDebugMessageLog(count: UInt32; bufSize: Int32; sources: IntPtr; types: array of DebugType; ids: array of UInt32; var severities: DebugSeverity; lengths: IntPtr; messageLog: string): UInt32;
    begin
      var par_8_str_ptr := Marshal.StringToHGlobalAnsi(messageLog);
      Result := z_GetDebugMessageLog_ovr_328(count, bufSize, sources, types[0], ids[0], severities, lengths, par_8_str_ptr);
      Marshal.FreeHGlobal(par_8_str_ptr);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetDebugMessageLog(count: UInt32; bufSize: Int32; sources: IntPtr; types: array of DebugType; ids: array of UInt32; var severities: DebugSeverity; lengths: IntPtr; messageLog: IntPtr): UInt32;
    begin
      Result := z_GetDebugMessageLog_ovr_328(count, bufSize, sources, types[0], ids[0], severities, lengths, messageLog);
    end;
    public z_GetDebugMessageLog_ovr_336 := GetFuncOrNil&<function(count: UInt32; bufSize: Int32; sources: IntPtr; var types: DebugType; var ids: UInt32; severities: IntPtr; var lengths: Int32; messageLog: IntPtr): UInt32>(z_GetDebugMessageLog_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetDebugMessageLog(count: UInt32; bufSize: Int32; sources: IntPtr; types: array of DebugType; ids: array of UInt32; severities: IntPtr; lengths: array of Int32; messageLog: string): UInt32;
    begin
      var par_8_str_ptr := Marshal.StringToHGlobalAnsi(messageLog);
      Result := z_GetDebugMessageLog_ovr_336(count, bufSize, sources, types[0], ids[0], severities, lengths[0], par_8_str_ptr);
      Marshal.FreeHGlobal(par_8_str_ptr);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetDebugMessageLog(count: UInt32; bufSize: Int32; sources: IntPtr; types: array of DebugType; ids: array of UInt32; severities: IntPtr; lengths: array of Int32; messageLog: IntPtr): UInt32;
    begin
      Result := z_GetDebugMessageLog_ovr_336(count, bufSize, sources, types[0], ids[0], severities, lengths[0], messageLog);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetDebugMessageLog(count: UInt32; bufSize: Int32; sources: IntPtr; types: array of DebugType; ids: array of UInt32; severities: IntPtr; var lengths: Int32; messageLog: string): UInt32;
    begin
      var par_8_str_ptr := Marshal.StringToHGlobalAnsi(messageLog);
      Result := z_GetDebugMessageLog_ovr_336(count, bufSize, sources, types[0], ids[0], severities, lengths, par_8_str_ptr);
      Marshal.FreeHGlobal(par_8_str_ptr);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetDebugMessageLog(count: UInt32; bufSize: Int32; sources: IntPtr; types: array of DebugType; ids: array of UInt32; severities: IntPtr; var lengths: Int32; messageLog: IntPtr): UInt32;
    begin
      Result := z_GetDebugMessageLog_ovr_336(count, bufSize, sources, types[0], ids[0], severities, lengths, messageLog);
    end;
    public z_GetDebugMessageLog_ovr_340 := GetFuncOrNil&<function(count: UInt32; bufSize: Int32; sources: IntPtr; var types: DebugType; var ids: UInt32; severities: IntPtr; lengths: IntPtr; messageLog: IntPtr): UInt32>(z_GetDebugMessageLog_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetDebugMessageLog(count: UInt32; bufSize: Int32; sources: IntPtr; types: array of DebugType; ids: array of UInt32; severities: IntPtr; lengths: IntPtr; messageLog: string): UInt32;
    begin
      var par_8_str_ptr := Marshal.StringToHGlobalAnsi(messageLog);
      Result := z_GetDebugMessageLog_ovr_340(count, bufSize, sources, types[0], ids[0], severities, lengths, par_8_str_ptr);
      Marshal.FreeHGlobal(par_8_str_ptr);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetDebugMessageLog(count: UInt32; bufSize: Int32; sources: IntPtr; types: array of DebugType; ids: array of UInt32; severities: IntPtr; lengths: IntPtr; messageLog: IntPtr): UInt32;
    begin
      Result := z_GetDebugMessageLog_ovr_340(count, bufSize, sources, types[0], ids[0], severities, lengths, messageLog);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetDebugMessageLog(count: UInt32; bufSize: Int32; sources: IntPtr; types: array of DebugType; var ids: UInt32; severities: array of DebugSeverity; lengths: array of Int32; messageLog: string): UInt32;
    begin
      var par_8_str_ptr := Marshal.StringToHGlobalAnsi(messageLog);
      Result := z_GetDebugMessageLog_ovr_324(count, bufSize, sources, types[0], ids, severities[0], lengths[0], par_8_str_ptr);
      Marshal.FreeHGlobal(par_8_str_ptr);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetDebugMessageLog(count: UInt32; bufSize: Int32; sources: IntPtr; types: array of DebugType; var ids: UInt32; severities: array of DebugSeverity; lengths: array of Int32; messageLog: IntPtr): UInt32;
    begin
      Result := z_GetDebugMessageLog_ovr_324(count, bufSize, sources, types[0], ids, severities[0], lengths[0], messageLog);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetDebugMessageLog(count: UInt32; bufSize: Int32; sources: IntPtr; types: array of DebugType; var ids: UInt32; severities: array of DebugSeverity; var lengths: Int32; messageLog: string): UInt32;
    begin
      var par_8_str_ptr := Marshal.StringToHGlobalAnsi(messageLog);
      Result := z_GetDebugMessageLog_ovr_324(count, bufSize, sources, types[0], ids, severities[0], lengths, par_8_str_ptr);
      Marshal.FreeHGlobal(par_8_str_ptr);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetDebugMessageLog(count: UInt32; bufSize: Int32; sources: IntPtr; types: array of DebugType; var ids: UInt32; severities: array of DebugSeverity; var lengths: Int32; messageLog: IntPtr): UInt32;
    begin
      Result := z_GetDebugMessageLog_ovr_324(count, bufSize, sources, types[0], ids, severities[0], lengths, messageLog);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetDebugMessageLog(count: UInt32; bufSize: Int32; sources: IntPtr; types: array of DebugType; var ids: UInt32; severities: array of DebugSeverity; lengths: IntPtr; messageLog: string): UInt32;
    begin
      var par_8_str_ptr := Marshal.StringToHGlobalAnsi(messageLog);
      Result := z_GetDebugMessageLog_ovr_328(count, bufSize, sources, types[0], ids, severities[0], lengths, par_8_str_ptr);
      Marshal.FreeHGlobal(par_8_str_ptr);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetDebugMessageLog(count: UInt32; bufSize: Int32; sources: IntPtr; types: array of DebugType; var ids: UInt32; severities: array of DebugSeverity; lengths: IntPtr; messageLog: IntPtr): UInt32;
    begin
      Result := z_GetDebugMessageLog_ovr_328(count, bufSize, sources, types[0], ids, severities[0], lengths, messageLog);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetDebugMessageLog(count: UInt32; bufSize: Int32; sources: IntPtr; types: array of DebugType; var ids: UInt32; var severities: DebugSeverity; lengths: array of Int32; messageLog: string): UInt32;
    begin
      var par_8_str_ptr := Marshal.StringToHGlobalAnsi(messageLog);
      Result := z_GetDebugMessageLog_ovr_324(count, bufSize, sources, types[0], ids, severities, lengths[0], par_8_str_ptr);
      Marshal.FreeHGlobal(par_8_str_ptr);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetDebugMessageLog(count: UInt32; bufSize: Int32; sources: IntPtr; types: array of DebugType; var ids: UInt32; var severities: DebugSeverity; lengths: array of Int32; messageLog: IntPtr): UInt32;
    begin
      Result := z_GetDebugMessageLog_ovr_324(count, bufSize, sources, types[0], ids, severities, lengths[0], messageLog);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetDebugMessageLog(count: UInt32; bufSize: Int32; sources: IntPtr; types: array of DebugType; var ids: UInt32; var severities: DebugSeverity; var lengths: Int32; messageLog: string): UInt32;
    begin
      var par_8_str_ptr := Marshal.StringToHGlobalAnsi(messageLog);
      Result := z_GetDebugMessageLog_ovr_324(count, bufSize, sources, types[0], ids, severities, lengths, par_8_str_ptr);
      Marshal.FreeHGlobal(par_8_str_ptr);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetDebugMessageLog(count: UInt32; bufSize: Int32; sources: IntPtr; types: array of DebugType; var ids: UInt32; var severities: DebugSeverity; var lengths: Int32; messageLog: IntPtr): UInt32;
    begin
      Result := z_GetDebugMessageLog_ovr_324(count, bufSize, sources, types[0], ids, severities, lengths, messageLog);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetDebugMessageLog(count: UInt32; bufSize: Int32; sources: IntPtr; types: array of DebugType; var ids: UInt32; var severities: DebugSeverity; lengths: IntPtr; messageLog: string): UInt32;
    begin
      var par_8_str_ptr := Marshal.StringToHGlobalAnsi(messageLog);
      Result := z_GetDebugMessageLog_ovr_328(count, bufSize, sources, types[0], ids, severities, lengths, par_8_str_ptr);
      Marshal.FreeHGlobal(par_8_str_ptr);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetDebugMessageLog(count: UInt32; bufSize: Int32; sources: IntPtr; types: array of DebugType; var ids: UInt32; var severities: DebugSeverity; lengths: IntPtr; messageLog: IntPtr): UInt32;
    begin
      Result := z_GetDebugMessageLog_ovr_328(count, bufSize, sources, types[0], ids, severities, lengths, messageLog);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetDebugMessageLog(count: UInt32; bufSize: Int32; sources: IntPtr; types: array of DebugType; var ids: UInt32; severities: IntPtr; lengths: array of Int32; messageLog: string): UInt32;
    begin
      var par_8_str_ptr := Marshal.StringToHGlobalAnsi(messageLog);
      Result := z_GetDebugMessageLog_ovr_336(count, bufSize, sources, types[0], ids, severities, lengths[0], par_8_str_ptr);
      Marshal.FreeHGlobal(par_8_str_ptr);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetDebugMessageLog(count: UInt32; bufSize: Int32; sources: IntPtr; types: array of DebugType; var ids: UInt32; severities: IntPtr; lengths: array of Int32; messageLog: IntPtr): UInt32;
    begin
      Result := z_GetDebugMessageLog_ovr_336(count, bufSize, sources, types[0], ids, severities, lengths[0], messageLog);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetDebugMessageLog(count: UInt32; bufSize: Int32; sources: IntPtr; types: array of DebugType; var ids: UInt32; severities: IntPtr; var lengths: Int32; messageLog: string): UInt32;
    begin
      var par_8_str_ptr := Marshal.StringToHGlobalAnsi(messageLog);
      Result := z_GetDebugMessageLog_ovr_336(count, bufSize, sources, types[0], ids, severities, lengths, par_8_str_ptr);
      Marshal.FreeHGlobal(par_8_str_ptr);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetDebugMessageLog(count: UInt32; bufSize: Int32; sources: IntPtr; types: array of DebugType; var ids: UInt32; severities: IntPtr; var lengths: Int32; messageLog: IntPtr): UInt32;
    begin
      Result := z_GetDebugMessageLog_ovr_336(count, bufSize, sources, types[0], ids, severities, lengths, messageLog);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetDebugMessageLog(count: UInt32; bufSize: Int32; sources: IntPtr; types: array of DebugType; var ids: UInt32; severities: IntPtr; lengths: IntPtr; messageLog: string): UInt32;
    begin
      var par_8_str_ptr := Marshal.StringToHGlobalAnsi(messageLog);
      Result := z_GetDebugMessageLog_ovr_340(count, bufSize, sources, types[0], ids, severities, lengths, par_8_str_ptr);
      Marshal.FreeHGlobal(par_8_str_ptr);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetDebugMessageLog(count: UInt32; bufSize: Int32; sources: IntPtr; types: array of DebugType; var ids: UInt32; severities: IntPtr; lengths: IntPtr; messageLog: IntPtr): UInt32;
    begin
      Result := z_GetDebugMessageLog_ovr_340(count, bufSize, sources, types[0], ids, severities, lengths, messageLog);
    end;
    public z_GetDebugMessageLog_ovr_360 := GetFuncOrNil&<function(count: UInt32; bufSize: Int32; sources: IntPtr; var types: DebugType; ids: IntPtr; var severities: DebugSeverity; var lengths: Int32; messageLog: IntPtr): UInt32>(z_GetDebugMessageLog_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetDebugMessageLog(count: UInt32; bufSize: Int32; sources: IntPtr; types: array of DebugType; ids: IntPtr; severities: array of DebugSeverity; lengths: array of Int32; messageLog: string): UInt32;
    begin
      var par_8_str_ptr := Marshal.StringToHGlobalAnsi(messageLog);
      Result := z_GetDebugMessageLog_ovr_360(count, bufSize, sources, types[0], ids, severities[0], lengths[0], par_8_str_ptr);
      Marshal.FreeHGlobal(par_8_str_ptr);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetDebugMessageLog(count: UInt32; bufSize: Int32; sources: IntPtr; types: array of DebugType; ids: IntPtr; severities: array of DebugSeverity; lengths: array of Int32; messageLog: IntPtr): UInt32;
    begin
      Result := z_GetDebugMessageLog_ovr_360(count, bufSize, sources, types[0], ids, severities[0], lengths[0], messageLog);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetDebugMessageLog(count: UInt32; bufSize: Int32; sources: IntPtr; types: array of DebugType; ids: IntPtr; severities: array of DebugSeverity; var lengths: Int32; messageLog: string): UInt32;
    begin
      var par_8_str_ptr := Marshal.StringToHGlobalAnsi(messageLog);
      Result := z_GetDebugMessageLog_ovr_360(count, bufSize, sources, types[0], ids, severities[0], lengths, par_8_str_ptr);
      Marshal.FreeHGlobal(par_8_str_ptr);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetDebugMessageLog(count: UInt32; bufSize: Int32; sources: IntPtr; types: array of DebugType; ids: IntPtr; severities: array of DebugSeverity; var lengths: Int32; messageLog: IntPtr): UInt32;
    begin
      Result := z_GetDebugMessageLog_ovr_360(count, bufSize, sources, types[0], ids, severities[0], lengths, messageLog);
    end;
    public z_GetDebugMessageLog_ovr_364 := GetFuncOrNil&<function(count: UInt32; bufSize: Int32; sources: IntPtr; var types: DebugType; ids: IntPtr; var severities: DebugSeverity; lengths: IntPtr; messageLog: IntPtr): UInt32>(z_GetDebugMessageLog_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetDebugMessageLog(count: UInt32; bufSize: Int32; sources: IntPtr; types: array of DebugType; ids: IntPtr; severities: array of DebugSeverity; lengths: IntPtr; messageLog: string): UInt32;
    begin
      var par_8_str_ptr := Marshal.StringToHGlobalAnsi(messageLog);
      Result := z_GetDebugMessageLog_ovr_364(count, bufSize, sources, types[0], ids, severities[0], lengths, par_8_str_ptr);
      Marshal.FreeHGlobal(par_8_str_ptr);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetDebugMessageLog(count: UInt32; bufSize: Int32; sources: IntPtr; types: array of DebugType; ids: IntPtr; severities: array of DebugSeverity; lengths: IntPtr; messageLog: IntPtr): UInt32;
    begin
      Result := z_GetDebugMessageLog_ovr_364(count, bufSize, sources, types[0], ids, severities[0], lengths, messageLog);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetDebugMessageLog(count: UInt32; bufSize: Int32; sources: IntPtr; types: array of DebugType; ids: IntPtr; var severities: DebugSeverity; lengths: array of Int32; messageLog: string): UInt32;
    begin
      var par_8_str_ptr := Marshal.StringToHGlobalAnsi(messageLog);
      Result := z_GetDebugMessageLog_ovr_360(count, bufSize, sources, types[0], ids, severities, lengths[0], par_8_str_ptr);
      Marshal.FreeHGlobal(par_8_str_ptr);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetDebugMessageLog(count: UInt32; bufSize: Int32; sources: IntPtr; types: array of DebugType; ids: IntPtr; var severities: DebugSeverity; lengths: array of Int32; messageLog: IntPtr): UInt32;
    begin
      Result := z_GetDebugMessageLog_ovr_360(count, bufSize, sources, types[0], ids, severities, lengths[0], messageLog);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetDebugMessageLog(count: UInt32; bufSize: Int32; sources: IntPtr; types: array of DebugType; ids: IntPtr; var severities: DebugSeverity; var lengths: Int32; messageLog: string): UInt32;
    begin
      var par_8_str_ptr := Marshal.StringToHGlobalAnsi(messageLog);
      Result := z_GetDebugMessageLog_ovr_360(count, bufSize, sources, types[0], ids, severities, lengths, par_8_str_ptr);
      Marshal.FreeHGlobal(par_8_str_ptr);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetDebugMessageLog(count: UInt32; bufSize: Int32; sources: IntPtr; types: array of DebugType; ids: IntPtr; var severities: DebugSeverity; var lengths: Int32; messageLog: IntPtr): UInt32;
    begin
      Result := z_GetDebugMessageLog_ovr_360(count, bufSize, sources, types[0], ids, severities, lengths, messageLog);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetDebugMessageLog(count: UInt32; bufSize: Int32; sources: IntPtr; types: array of DebugType; ids: IntPtr; var severities: DebugSeverity; lengths: IntPtr; messageLog: string): UInt32;
    begin
      var par_8_str_ptr := Marshal.StringToHGlobalAnsi(messageLog);
      Result := z_GetDebugMessageLog_ovr_364(count, bufSize, sources, types[0], ids, severities, lengths, par_8_str_ptr);
      Marshal.FreeHGlobal(par_8_str_ptr);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetDebugMessageLog(count: UInt32; bufSize: Int32; sources: IntPtr; types: array of DebugType; ids: IntPtr; var severities: DebugSeverity; lengths: IntPtr; messageLog: IntPtr): UInt32;
    begin
      Result := z_GetDebugMessageLog_ovr_364(count, bufSize, sources, types[0], ids, severities, lengths, messageLog);
    end;
    public z_GetDebugMessageLog_ovr_372 := GetFuncOrNil&<function(count: UInt32; bufSize: Int32; sources: IntPtr; var types: DebugType; ids: IntPtr; severities: IntPtr; var lengths: Int32; messageLog: IntPtr): UInt32>(z_GetDebugMessageLog_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetDebugMessageLog(count: UInt32; bufSize: Int32; sources: IntPtr; types: array of DebugType; ids: IntPtr; severities: IntPtr; lengths: array of Int32; messageLog: string): UInt32;
    begin
      var par_8_str_ptr := Marshal.StringToHGlobalAnsi(messageLog);
      Result := z_GetDebugMessageLog_ovr_372(count, bufSize, sources, types[0], ids, severities, lengths[0], par_8_str_ptr);
      Marshal.FreeHGlobal(par_8_str_ptr);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetDebugMessageLog(count: UInt32; bufSize: Int32; sources: IntPtr; types: array of DebugType; ids: IntPtr; severities: IntPtr; lengths: array of Int32; messageLog: IntPtr): UInt32;
    begin
      Result := z_GetDebugMessageLog_ovr_372(count, bufSize, sources, types[0], ids, severities, lengths[0], messageLog);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetDebugMessageLog(count: UInt32; bufSize: Int32; sources: IntPtr; types: array of DebugType; ids: IntPtr; severities: IntPtr; var lengths: Int32; messageLog: string): UInt32;
    begin
      var par_8_str_ptr := Marshal.StringToHGlobalAnsi(messageLog);
      Result := z_GetDebugMessageLog_ovr_372(count, bufSize, sources, types[0], ids, severities, lengths, par_8_str_ptr);
      Marshal.FreeHGlobal(par_8_str_ptr);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetDebugMessageLog(count: UInt32; bufSize: Int32; sources: IntPtr; types: array of DebugType; ids: IntPtr; severities: IntPtr; var lengths: Int32; messageLog: IntPtr): UInt32;
    begin
      Result := z_GetDebugMessageLog_ovr_372(count, bufSize, sources, types[0], ids, severities, lengths, messageLog);
    end;
    public z_GetDebugMessageLog_ovr_376 := GetFuncOrNil&<function(count: UInt32; bufSize: Int32; sources: IntPtr; var types: DebugType; ids: IntPtr; severities: IntPtr; lengths: IntPtr; messageLog: IntPtr): UInt32>(z_GetDebugMessageLog_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetDebugMessageLog(count: UInt32; bufSize: Int32; sources: IntPtr; types: array of DebugType; ids: IntPtr; severities: IntPtr; lengths: IntPtr; messageLog: string): UInt32;
    begin
      var par_8_str_ptr := Marshal.StringToHGlobalAnsi(messageLog);
      Result := z_GetDebugMessageLog_ovr_376(count, bufSize, sources, types[0], ids, severities, lengths, par_8_str_ptr);
      Marshal.FreeHGlobal(par_8_str_ptr);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetDebugMessageLog(count: UInt32; bufSize: Int32; sources: IntPtr; types: array of DebugType; ids: IntPtr; severities: IntPtr; lengths: IntPtr; messageLog: IntPtr): UInt32;
    begin
      Result := z_GetDebugMessageLog_ovr_376(count, bufSize, sources, types[0], ids, severities, lengths, messageLog);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetDebugMessageLog(count: UInt32; bufSize: Int32; sources: IntPtr; var types: DebugType; ids: array of UInt32; severities: array of DebugSeverity; lengths: array of Int32; messageLog: string): UInt32;
    begin
      var par_8_str_ptr := Marshal.StringToHGlobalAnsi(messageLog);
      Result := z_GetDebugMessageLog_ovr_324(count, bufSize, sources, types, ids[0], severities[0], lengths[0], par_8_str_ptr);
      Marshal.FreeHGlobal(par_8_str_ptr);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetDebugMessageLog(count: UInt32; bufSize: Int32; sources: IntPtr; var types: DebugType; ids: array of UInt32; severities: array of DebugSeverity; lengths: array of Int32; messageLog: IntPtr): UInt32;
    begin
      Result := z_GetDebugMessageLog_ovr_324(count, bufSize, sources, types, ids[0], severities[0], lengths[0], messageLog);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetDebugMessageLog(count: UInt32; bufSize: Int32; sources: IntPtr; var types: DebugType; ids: array of UInt32; severities: array of DebugSeverity; var lengths: Int32; messageLog: string): UInt32;
    begin
      var par_8_str_ptr := Marshal.StringToHGlobalAnsi(messageLog);
      Result := z_GetDebugMessageLog_ovr_324(count, bufSize, sources, types, ids[0], severities[0], lengths, par_8_str_ptr);
      Marshal.FreeHGlobal(par_8_str_ptr);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetDebugMessageLog(count: UInt32; bufSize: Int32; sources: IntPtr; var types: DebugType; ids: array of UInt32; severities: array of DebugSeverity; var lengths: Int32; messageLog: IntPtr): UInt32;
    begin
      Result := z_GetDebugMessageLog_ovr_324(count, bufSize, sources, types, ids[0], severities[0], lengths, messageLog);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetDebugMessageLog(count: UInt32; bufSize: Int32; sources: IntPtr; var types: DebugType; ids: array of UInt32; severities: array of DebugSeverity; lengths: IntPtr; messageLog: string): UInt32;
    begin
      var par_8_str_ptr := Marshal.StringToHGlobalAnsi(messageLog);
      Result := z_GetDebugMessageLog_ovr_328(count, bufSize, sources, types, ids[0], severities[0], lengths, par_8_str_ptr);
      Marshal.FreeHGlobal(par_8_str_ptr);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetDebugMessageLog(count: UInt32; bufSize: Int32; sources: IntPtr; var types: DebugType; ids: array of UInt32; severities: array of DebugSeverity; lengths: IntPtr; messageLog: IntPtr): UInt32;
    begin
      Result := z_GetDebugMessageLog_ovr_328(count, bufSize, sources, types, ids[0], severities[0], lengths, messageLog);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetDebugMessageLog(count: UInt32; bufSize: Int32; sources: IntPtr; var types: DebugType; ids: array of UInt32; var severities: DebugSeverity; lengths: array of Int32; messageLog: string): UInt32;
    begin
      var par_8_str_ptr := Marshal.StringToHGlobalAnsi(messageLog);
      Result := z_GetDebugMessageLog_ovr_324(count, bufSize, sources, types, ids[0], severities, lengths[0], par_8_str_ptr);
      Marshal.FreeHGlobal(par_8_str_ptr);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetDebugMessageLog(count: UInt32; bufSize: Int32; sources: IntPtr; var types: DebugType; ids: array of UInt32; var severities: DebugSeverity; lengths: array of Int32; messageLog: IntPtr): UInt32;
    begin
      Result := z_GetDebugMessageLog_ovr_324(count, bufSize, sources, types, ids[0], severities, lengths[0], messageLog);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetDebugMessageLog(count: UInt32; bufSize: Int32; sources: IntPtr; var types: DebugType; ids: array of UInt32; var severities: DebugSeverity; var lengths: Int32; messageLog: string): UInt32;
    begin
      var par_8_str_ptr := Marshal.StringToHGlobalAnsi(messageLog);
      Result := z_GetDebugMessageLog_ovr_324(count, bufSize, sources, types, ids[0], severities, lengths, par_8_str_ptr);
      Marshal.FreeHGlobal(par_8_str_ptr);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetDebugMessageLog(count: UInt32; bufSize: Int32; sources: IntPtr; var types: DebugType; ids: array of UInt32; var severities: DebugSeverity; var lengths: Int32; messageLog: IntPtr): UInt32;
    begin
      Result := z_GetDebugMessageLog_ovr_324(count, bufSize, sources, types, ids[0], severities, lengths, messageLog);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetDebugMessageLog(count: UInt32; bufSize: Int32; sources: IntPtr; var types: DebugType; ids: array of UInt32; var severities: DebugSeverity; lengths: IntPtr; messageLog: string): UInt32;
    begin
      var par_8_str_ptr := Marshal.StringToHGlobalAnsi(messageLog);
      Result := z_GetDebugMessageLog_ovr_328(count, bufSize, sources, types, ids[0], severities, lengths, par_8_str_ptr);
      Marshal.FreeHGlobal(par_8_str_ptr);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetDebugMessageLog(count: UInt32; bufSize: Int32; sources: IntPtr; var types: DebugType; ids: array of UInt32; var severities: DebugSeverity; lengths: IntPtr; messageLog: IntPtr): UInt32;
    begin
      Result := z_GetDebugMessageLog_ovr_328(count, bufSize, sources, types, ids[0], severities, lengths, messageLog);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetDebugMessageLog(count: UInt32; bufSize: Int32; sources: IntPtr; var types: DebugType; ids: array of UInt32; severities: IntPtr; lengths: array of Int32; messageLog: string): UInt32;
    begin
      var par_8_str_ptr := Marshal.StringToHGlobalAnsi(messageLog);
      Result := z_GetDebugMessageLog_ovr_336(count, bufSize, sources, types, ids[0], severities, lengths[0], par_8_str_ptr);
      Marshal.FreeHGlobal(par_8_str_ptr);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetDebugMessageLog(count: UInt32; bufSize: Int32; sources: IntPtr; var types: DebugType; ids: array of UInt32; severities: IntPtr; lengths: array of Int32; messageLog: IntPtr): UInt32;
    begin
      Result := z_GetDebugMessageLog_ovr_336(count, bufSize, sources, types, ids[0], severities, lengths[0], messageLog);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetDebugMessageLog(count: UInt32; bufSize: Int32; sources: IntPtr; var types: DebugType; ids: array of UInt32; severities: IntPtr; var lengths: Int32; messageLog: string): UInt32;
    begin
      var par_8_str_ptr := Marshal.StringToHGlobalAnsi(messageLog);
      Result := z_GetDebugMessageLog_ovr_336(count, bufSize, sources, types, ids[0], severities, lengths, par_8_str_ptr);
      Marshal.FreeHGlobal(par_8_str_ptr);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetDebugMessageLog(count: UInt32; bufSize: Int32; sources: IntPtr; var types: DebugType; ids: array of UInt32; severities: IntPtr; var lengths: Int32; messageLog: IntPtr): UInt32;
    begin
      Result := z_GetDebugMessageLog_ovr_336(count, bufSize, sources, types, ids[0], severities, lengths, messageLog);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetDebugMessageLog(count: UInt32; bufSize: Int32; sources: IntPtr; var types: DebugType; ids: array of UInt32; severities: IntPtr; lengths: IntPtr; messageLog: string): UInt32;
    begin
      var par_8_str_ptr := Marshal.StringToHGlobalAnsi(messageLog);
      Result := z_GetDebugMessageLog_ovr_340(count, bufSize, sources, types, ids[0], severities, lengths, par_8_str_ptr);
      Marshal.FreeHGlobal(par_8_str_ptr);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetDebugMessageLog(count: UInt32; bufSize: Int32; sources: IntPtr; var types: DebugType; ids: array of UInt32; severities: IntPtr; lengths: IntPtr; messageLog: IntPtr): UInt32;
    begin
      Result := z_GetDebugMessageLog_ovr_340(count, bufSize, sources, types, ids[0], severities, lengths, messageLog);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetDebugMessageLog(count: UInt32; bufSize: Int32; sources: IntPtr; var types: DebugType; var ids: UInt32; severities: array of DebugSeverity; lengths: array of Int32; messageLog: string): UInt32;
    begin
      var par_8_str_ptr := Marshal.StringToHGlobalAnsi(messageLog);
      Result := z_GetDebugMessageLog_ovr_324(count, bufSize, sources, types, ids, severities[0], lengths[0], par_8_str_ptr);
      Marshal.FreeHGlobal(par_8_str_ptr);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetDebugMessageLog(count: UInt32; bufSize: Int32; sources: IntPtr; var types: DebugType; var ids: UInt32; severities: array of DebugSeverity; lengths: array of Int32; messageLog: IntPtr): UInt32;
    begin
      Result := z_GetDebugMessageLog_ovr_324(count, bufSize, sources, types, ids, severities[0], lengths[0], messageLog);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetDebugMessageLog(count: UInt32; bufSize: Int32; sources: IntPtr; var types: DebugType; var ids: UInt32; severities: array of DebugSeverity; var lengths: Int32; messageLog: string): UInt32;
    begin
      var par_8_str_ptr := Marshal.StringToHGlobalAnsi(messageLog);
      Result := z_GetDebugMessageLog_ovr_324(count, bufSize, sources, types, ids, severities[0], lengths, par_8_str_ptr);
      Marshal.FreeHGlobal(par_8_str_ptr);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetDebugMessageLog(count: UInt32; bufSize: Int32; sources: IntPtr; var types: DebugType; var ids: UInt32; severities: array of DebugSeverity; var lengths: Int32; messageLog: IntPtr): UInt32;
    begin
      Result := z_GetDebugMessageLog_ovr_324(count, bufSize, sources, types, ids, severities[0], lengths, messageLog);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetDebugMessageLog(count: UInt32; bufSize: Int32; sources: IntPtr; var types: DebugType; var ids: UInt32; severities: array of DebugSeverity; lengths: IntPtr; messageLog: string): UInt32;
    begin
      var par_8_str_ptr := Marshal.StringToHGlobalAnsi(messageLog);
      Result := z_GetDebugMessageLog_ovr_328(count, bufSize, sources, types, ids, severities[0], lengths, par_8_str_ptr);
      Marshal.FreeHGlobal(par_8_str_ptr);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetDebugMessageLog(count: UInt32; bufSize: Int32; sources: IntPtr; var types: DebugType; var ids: UInt32; severities: array of DebugSeverity; lengths: IntPtr; messageLog: IntPtr): UInt32;
    begin
      Result := z_GetDebugMessageLog_ovr_328(count, bufSize, sources, types, ids, severities[0], lengths, messageLog);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetDebugMessageLog(count: UInt32; bufSize: Int32; sources: IntPtr; var types: DebugType; var ids: UInt32; var severities: DebugSeverity; lengths: array of Int32; messageLog: string): UInt32;
    begin
      var par_8_str_ptr := Marshal.StringToHGlobalAnsi(messageLog);
      Result := z_GetDebugMessageLog_ovr_324(count, bufSize, sources, types, ids, severities, lengths[0], par_8_str_ptr);
      Marshal.FreeHGlobal(par_8_str_ptr);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetDebugMessageLog(count: UInt32; bufSize: Int32; sources: IntPtr; var types: DebugType; var ids: UInt32; var severities: DebugSeverity; lengths: array of Int32; messageLog: IntPtr): UInt32;
    begin
      Result := z_GetDebugMessageLog_ovr_324(count, bufSize, sources, types, ids, severities, lengths[0], messageLog);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetDebugMessageLog(count: UInt32; bufSize: Int32; sources: IntPtr; var types: DebugType; var ids: UInt32; var severities: DebugSeverity; var lengths: Int32; messageLog: string): UInt32;
    begin
      var par_8_str_ptr := Marshal.StringToHGlobalAnsi(messageLog);
      Result := z_GetDebugMessageLog_ovr_324(count, bufSize, sources, types, ids, severities, lengths, par_8_str_ptr);
      Marshal.FreeHGlobal(par_8_str_ptr);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetDebugMessageLog(count: UInt32; bufSize: Int32; sources: IntPtr; var types: DebugType; var ids: UInt32; var severities: DebugSeverity; var lengths: Int32; messageLog: IntPtr): UInt32;
    begin
      Result := z_GetDebugMessageLog_ovr_324(count, bufSize, sources, types, ids, severities, lengths, messageLog);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetDebugMessageLog(count: UInt32; bufSize: Int32; sources: IntPtr; var types: DebugType; var ids: UInt32; var severities: DebugSeverity; lengths: IntPtr; messageLog: string): UInt32;
    begin
      var par_8_str_ptr := Marshal.StringToHGlobalAnsi(messageLog);
      Result := z_GetDebugMessageLog_ovr_328(count, bufSize, sources, types, ids, severities, lengths, par_8_str_ptr);
      Marshal.FreeHGlobal(par_8_str_ptr);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetDebugMessageLog(count: UInt32; bufSize: Int32; sources: IntPtr; var types: DebugType; var ids: UInt32; var severities: DebugSeverity; lengths: IntPtr; messageLog: IntPtr): UInt32;
    begin
      Result := z_GetDebugMessageLog_ovr_328(count, bufSize, sources, types, ids, severities, lengths, messageLog);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetDebugMessageLog(count: UInt32; bufSize: Int32; sources: IntPtr; var types: DebugType; var ids: UInt32; severities: IntPtr; lengths: array of Int32; messageLog: string): UInt32;
    begin
      var par_8_str_ptr := Marshal.StringToHGlobalAnsi(messageLog);
      Result := z_GetDebugMessageLog_ovr_336(count, bufSize, sources, types, ids, severities, lengths[0], par_8_str_ptr);
      Marshal.FreeHGlobal(par_8_str_ptr);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetDebugMessageLog(count: UInt32; bufSize: Int32; sources: IntPtr; var types: DebugType; var ids: UInt32; severities: IntPtr; lengths: array of Int32; messageLog: IntPtr): UInt32;
    begin
      Result := z_GetDebugMessageLog_ovr_336(count, bufSize, sources, types, ids, severities, lengths[0], messageLog);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetDebugMessageLog(count: UInt32; bufSize: Int32; sources: IntPtr; var types: DebugType; var ids: UInt32; severities: IntPtr; var lengths: Int32; messageLog: string): UInt32;
    begin
      var par_8_str_ptr := Marshal.StringToHGlobalAnsi(messageLog);
      Result := z_GetDebugMessageLog_ovr_336(count, bufSize, sources, types, ids, severities, lengths, par_8_str_ptr);
      Marshal.FreeHGlobal(par_8_str_ptr);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetDebugMessageLog(count: UInt32; bufSize: Int32; sources: IntPtr; var types: DebugType; var ids: UInt32; severities: IntPtr; var lengths: Int32; messageLog: IntPtr): UInt32;
    begin
      Result := z_GetDebugMessageLog_ovr_336(count, bufSize, sources, types, ids, severities, lengths, messageLog);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetDebugMessageLog(count: UInt32; bufSize: Int32; sources: IntPtr; var types: DebugType; var ids: UInt32; severities: IntPtr; lengths: IntPtr; messageLog: string): UInt32;
    begin
      var par_8_str_ptr := Marshal.StringToHGlobalAnsi(messageLog);
      Result := z_GetDebugMessageLog_ovr_340(count, bufSize, sources, types, ids, severities, lengths, par_8_str_ptr);
      Marshal.FreeHGlobal(par_8_str_ptr);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetDebugMessageLog(count: UInt32; bufSize: Int32; sources: IntPtr; var types: DebugType; var ids: UInt32; severities: IntPtr; lengths: IntPtr; messageLog: IntPtr): UInt32;
    begin
      Result := z_GetDebugMessageLog_ovr_340(count, bufSize, sources, types, ids, severities, lengths, messageLog);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetDebugMessageLog(count: UInt32; bufSize: Int32; sources: IntPtr; var types: DebugType; ids: IntPtr; severities: array of DebugSeverity; lengths: array of Int32; messageLog: string): UInt32;
    begin
      var par_8_str_ptr := Marshal.StringToHGlobalAnsi(messageLog);
      Result := z_GetDebugMessageLog_ovr_360(count, bufSize, sources, types, ids, severities[0], lengths[0], par_8_str_ptr);
      Marshal.FreeHGlobal(par_8_str_ptr);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetDebugMessageLog(count: UInt32; bufSize: Int32; sources: IntPtr; var types: DebugType; ids: IntPtr; severities: array of DebugSeverity; lengths: array of Int32; messageLog: IntPtr): UInt32;
    begin
      Result := z_GetDebugMessageLog_ovr_360(count, bufSize, sources, types, ids, severities[0], lengths[0], messageLog);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetDebugMessageLog(count: UInt32; bufSize: Int32; sources: IntPtr; var types: DebugType; ids: IntPtr; severities: array of DebugSeverity; var lengths: Int32; messageLog: string): UInt32;
    begin
      var par_8_str_ptr := Marshal.StringToHGlobalAnsi(messageLog);
      Result := z_GetDebugMessageLog_ovr_360(count, bufSize, sources, types, ids, severities[0], lengths, par_8_str_ptr);
      Marshal.FreeHGlobal(par_8_str_ptr);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetDebugMessageLog(count: UInt32; bufSize: Int32; sources: IntPtr; var types: DebugType; ids: IntPtr; severities: array of DebugSeverity; var lengths: Int32; messageLog: IntPtr): UInt32;
    begin
      Result := z_GetDebugMessageLog_ovr_360(count, bufSize, sources, types, ids, severities[0], lengths, messageLog);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetDebugMessageLog(count: UInt32; bufSize: Int32; sources: IntPtr; var types: DebugType; ids: IntPtr; severities: array of DebugSeverity; lengths: IntPtr; messageLog: string): UInt32;
    begin
      var par_8_str_ptr := Marshal.StringToHGlobalAnsi(messageLog);
      Result := z_GetDebugMessageLog_ovr_364(count, bufSize, sources, types, ids, severities[0], lengths, par_8_str_ptr);
      Marshal.FreeHGlobal(par_8_str_ptr);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetDebugMessageLog(count: UInt32; bufSize: Int32; sources: IntPtr; var types: DebugType; ids: IntPtr; severities: array of DebugSeverity; lengths: IntPtr; messageLog: IntPtr): UInt32;
    begin
      Result := z_GetDebugMessageLog_ovr_364(count, bufSize, sources, types, ids, severities[0], lengths, messageLog);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetDebugMessageLog(count: UInt32; bufSize: Int32; sources: IntPtr; var types: DebugType; ids: IntPtr; var severities: DebugSeverity; lengths: array of Int32; messageLog: string): UInt32;
    begin
      var par_8_str_ptr := Marshal.StringToHGlobalAnsi(messageLog);
      Result := z_GetDebugMessageLog_ovr_360(count, bufSize, sources, types, ids, severities, lengths[0], par_8_str_ptr);
      Marshal.FreeHGlobal(par_8_str_ptr);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetDebugMessageLog(count: UInt32; bufSize: Int32; sources: IntPtr; var types: DebugType; ids: IntPtr; var severities: DebugSeverity; lengths: array of Int32; messageLog: IntPtr): UInt32;
    begin
      Result := z_GetDebugMessageLog_ovr_360(count, bufSize, sources, types, ids, severities, lengths[0], messageLog);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetDebugMessageLog(count: UInt32; bufSize: Int32; sources: IntPtr; var types: DebugType; ids: IntPtr; var severities: DebugSeverity; var lengths: Int32; messageLog: string): UInt32;
    begin
      var par_8_str_ptr := Marshal.StringToHGlobalAnsi(messageLog);
      Result := z_GetDebugMessageLog_ovr_360(count, bufSize, sources, types, ids, severities, lengths, par_8_str_ptr);
      Marshal.FreeHGlobal(par_8_str_ptr);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetDebugMessageLog(count: UInt32; bufSize: Int32; sources: IntPtr; var types: DebugType; ids: IntPtr; var severities: DebugSeverity; var lengths: Int32; messageLog: IntPtr): UInt32;
    begin
      Result := z_GetDebugMessageLog_ovr_360(count, bufSize, sources, types, ids, severities, lengths, messageLog);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetDebugMessageLog(count: UInt32; bufSize: Int32; sources: IntPtr; var types: DebugType; ids: IntPtr; var severities: DebugSeverity; lengths: IntPtr; messageLog: string): UInt32;
    begin
      var par_8_str_ptr := Marshal.StringToHGlobalAnsi(messageLog);
      Result := z_GetDebugMessageLog_ovr_364(count, bufSize, sources, types, ids, severities, lengths, par_8_str_ptr);
      Marshal.FreeHGlobal(par_8_str_ptr);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetDebugMessageLog(count: UInt32; bufSize: Int32; sources: IntPtr; var types: DebugType; ids: IntPtr; var severities: DebugSeverity; lengths: IntPtr; messageLog: IntPtr): UInt32;
    begin
      Result := z_GetDebugMessageLog_ovr_364(count, bufSize, sources, types, ids, severities, lengths, messageLog);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetDebugMessageLog(count: UInt32; bufSize: Int32; sources: IntPtr; var types: DebugType; ids: IntPtr; severities: IntPtr; lengths: array of Int32; messageLog: string): UInt32;
    begin
      var par_8_str_ptr := Marshal.StringToHGlobalAnsi(messageLog);
      Result := z_GetDebugMessageLog_ovr_372(count, bufSize, sources, types, ids, severities, lengths[0], par_8_str_ptr);
      Marshal.FreeHGlobal(par_8_str_ptr);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetDebugMessageLog(count: UInt32; bufSize: Int32; sources: IntPtr; var types: DebugType; ids: IntPtr; severities: IntPtr; lengths: array of Int32; messageLog: IntPtr): UInt32;
    begin
      Result := z_GetDebugMessageLog_ovr_372(count, bufSize, sources, types, ids, severities, lengths[0], messageLog);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetDebugMessageLog(count: UInt32; bufSize: Int32; sources: IntPtr; var types: DebugType; ids: IntPtr; severities: IntPtr; var lengths: Int32; messageLog: string): UInt32;
    begin
      var par_8_str_ptr := Marshal.StringToHGlobalAnsi(messageLog);
      Result := z_GetDebugMessageLog_ovr_372(count, bufSize, sources, types, ids, severities, lengths, par_8_str_ptr);
      Marshal.FreeHGlobal(par_8_str_ptr);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetDebugMessageLog(count: UInt32; bufSize: Int32; sources: IntPtr; var types: DebugType; ids: IntPtr; severities: IntPtr; var lengths: Int32; messageLog: IntPtr): UInt32;
    begin
      Result := z_GetDebugMessageLog_ovr_372(count, bufSize, sources, types, ids, severities, lengths, messageLog);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetDebugMessageLog(count: UInt32; bufSize: Int32; sources: IntPtr; var types: DebugType; ids: IntPtr; severities: IntPtr; lengths: IntPtr; messageLog: string): UInt32;
    begin
      var par_8_str_ptr := Marshal.StringToHGlobalAnsi(messageLog);
      Result := z_GetDebugMessageLog_ovr_376(count, bufSize, sources, types, ids, severities, lengths, par_8_str_ptr);
      Marshal.FreeHGlobal(par_8_str_ptr);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetDebugMessageLog(count: UInt32; bufSize: Int32; sources: IntPtr; var types: DebugType; ids: IntPtr; severities: IntPtr; lengths: IntPtr; messageLog: IntPtr): UInt32;
    begin
      Result := z_GetDebugMessageLog_ovr_376(count, bufSize, sources, types, ids, severities, lengths, messageLog);
    end;
    public z_GetDebugMessageLog_ovr_432 := GetFuncOrNil&<function(count: UInt32; bufSize: Int32; sources: IntPtr; types: IntPtr; var ids: UInt32; var severities: DebugSeverity; var lengths: Int32; messageLog: IntPtr): UInt32>(z_GetDebugMessageLog_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetDebugMessageLog(count: UInt32; bufSize: Int32; sources: IntPtr; types: IntPtr; ids: array of UInt32; severities: array of DebugSeverity; lengths: array of Int32; messageLog: string): UInt32;
    begin
      var par_8_str_ptr := Marshal.StringToHGlobalAnsi(messageLog);
      Result := z_GetDebugMessageLog_ovr_432(count, bufSize, sources, types, ids[0], severities[0], lengths[0], par_8_str_ptr);
      Marshal.FreeHGlobal(par_8_str_ptr);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetDebugMessageLog(count: UInt32; bufSize: Int32; sources: IntPtr; types: IntPtr; ids: array of UInt32; severities: array of DebugSeverity; lengths: array of Int32; messageLog: IntPtr): UInt32;
    begin
      Result := z_GetDebugMessageLog_ovr_432(count, bufSize, sources, types, ids[0], severities[0], lengths[0], messageLog);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetDebugMessageLog(count: UInt32; bufSize: Int32; sources: IntPtr; types: IntPtr; ids: array of UInt32; severities: array of DebugSeverity; var lengths: Int32; messageLog: string): UInt32;
    begin
      var par_8_str_ptr := Marshal.StringToHGlobalAnsi(messageLog);
      Result := z_GetDebugMessageLog_ovr_432(count, bufSize, sources, types, ids[0], severities[0], lengths, par_8_str_ptr);
      Marshal.FreeHGlobal(par_8_str_ptr);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetDebugMessageLog(count: UInt32; bufSize: Int32; sources: IntPtr; types: IntPtr; ids: array of UInt32; severities: array of DebugSeverity; var lengths: Int32; messageLog: IntPtr): UInt32;
    begin
      Result := z_GetDebugMessageLog_ovr_432(count, bufSize, sources, types, ids[0], severities[0], lengths, messageLog);
    end;
    public z_GetDebugMessageLog_ovr_436 := GetFuncOrNil&<function(count: UInt32; bufSize: Int32; sources: IntPtr; types: IntPtr; var ids: UInt32; var severities: DebugSeverity; lengths: IntPtr; messageLog: IntPtr): UInt32>(z_GetDebugMessageLog_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetDebugMessageLog(count: UInt32; bufSize: Int32; sources: IntPtr; types: IntPtr; ids: array of UInt32; severities: array of DebugSeverity; lengths: IntPtr; messageLog: string): UInt32;
    begin
      var par_8_str_ptr := Marshal.StringToHGlobalAnsi(messageLog);
      Result := z_GetDebugMessageLog_ovr_436(count, bufSize, sources, types, ids[0], severities[0], lengths, par_8_str_ptr);
      Marshal.FreeHGlobal(par_8_str_ptr);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetDebugMessageLog(count: UInt32; bufSize: Int32; sources: IntPtr; types: IntPtr; ids: array of UInt32; severities: array of DebugSeverity; lengths: IntPtr; messageLog: IntPtr): UInt32;
    begin
      Result := z_GetDebugMessageLog_ovr_436(count, bufSize, sources, types, ids[0], severities[0], lengths, messageLog);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetDebugMessageLog(count: UInt32; bufSize: Int32; sources: IntPtr; types: IntPtr; ids: array of UInt32; var severities: DebugSeverity; lengths: array of Int32; messageLog: string): UInt32;
    begin
      var par_8_str_ptr := Marshal.StringToHGlobalAnsi(messageLog);
      Result := z_GetDebugMessageLog_ovr_432(count, bufSize, sources, types, ids[0], severities, lengths[0], par_8_str_ptr);
      Marshal.FreeHGlobal(par_8_str_ptr);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetDebugMessageLog(count: UInt32; bufSize: Int32; sources: IntPtr; types: IntPtr; ids: array of UInt32; var severities: DebugSeverity; lengths: array of Int32; messageLog: IntPtr): UInt32;
    begin
      Result := z_GetDebugMessageLog_ovr_432(count, bufSize, sources, types, ids[0], severities, lengths[0], messageLog);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetDebugMessageLog(count: UInt32; bufSize: Int32; sources: IntPtr; types: IntPtr; ids: array of UInt32; var severities: DebugSeverity; var lengths: Int32; messageLog: string): UInt32;
    begin
      var par_8_str_ptr := Marshal.StringToHGlobalAnsi(messageLog);
      Result := z_GetDebugMessageLog_ovr_432(count, bufSize, sources, types, ids[0], severities, lengths, par_8_str_ptr);
      Marshal.FreeHGlobal(par_8_str_ptr);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetDebugMessageLog(count: UInt32; bufSize: Int32; sources: IntPtr; types: IntPtr; ids: array of UInt32; var severities: DebugSeverity; var lengths: Int32; messageLog: IntPtr): UInt32;
    begin
      Result := z_GetDebugMessageLog_ovr_432(count, bufSize, sources, types, ids[0], severities, lengths, messageLog);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetDebugMessageLog(count: UInt32; bufSize: Int32; sources: IntPtr; types: IntPtr; ids: array of UInt32; var severities: DebugSeverity; lengths: IntPtr; messageLog: string): UInt32;
    begin
      var par_8_str_ptr := Marshal.StringToHGlobalAnsi(messageLog);
      Result := z_GetDebugMessageLog_ovr_436(count, bufSize, sources, types, ids[0], severities, lengths, par_8_str_ptr);
      Marshal.FreeHGlobal(par_8_str_ptr);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetDebugMessageLog(count: UInt32; bufSize: Int32; sources: IntPtr; types: IntPtr; ids: array of UInt32; var severities: DebugSeverity; lengths: IntPtr; messageLog: IntPtr): UInt32;
    begin
      Result := z_GetDebugMessageLog_ovr_436(count, bufSize, sources, types, ids[0], severities, lengths, messageLog);
    end;
    public z_GetDebugMessageLog_ovr_444 := GetFuncOrNil&<function(count: UInt32; bufSize: Int32; sources: IntPtr; types: IntPtr; var ids: UInt32; severities: IntPtr; var lengths: Int32; messageLog: IntPtr): UInt32>(z_GetDebugMessageLog_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetDebugMessageLog(count: UInt32; bufSize: Int32; sources: IntPtr; types: IntPtr; ids: array of UInt32; severities: IntPtr; lengths: array of Int32; messageLog: string): UInt32;
    begin
      var par_8_str_ptr := Marshal.StringToHGlobalAnsi(messageLog);
      Result := z_GetDebugMessageLog_ovr_444(count, bufSize, sources, types, ids[0], severities, lengths[0], par_8_str_ptr);
      Marshal.FreeHGlobal(par_8_str_ptr);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetDebugMessageLog(count: UInt32; bufSize: Int32; sources: IntPtr; types: IntPtr; ids: array of UInt32; severities: IntPtr; lengths: array of Int32; messageLog: IntPtr): UInt32;
    begin
      Result := z_GetDebugMessageLog_ovr_444(count, bufSize, sources, types, ids[0], severities, lengths[0], messageLog);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetDebugMessageLog(count: UInt32; bufSize: Int32; sources: IntPtr; types: IntPtr; ids: array of UInt32; severities: IntPtr; var lengths: Int32; messageLog: string): UInt32;
    begin
      var par_8_str_ptr := Marshal.StringToHGlobalAnsi(messageLog);
      Result := z_GetDebugMessageLog_ovr_444(count, bufSize, sources, types, ids[0], severities, lengths, par_8_str_ptr);
      Marshal.FreeHGlobal(par_8_str_ptr);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetDebugMessageLog(count: UInt32; bufSize: Int32; sources: IntPtr; types: IntPtr; ids: array of UInt32; severities: IntPtr; var lengths: Int32; messageLog: IntPtr): UInt32;
    begin
      Result := z_GetDebugMessageLog_ovr_444(count, bufSize, sources, types, ids[0], severities, lengths, messageLog);
    end;
    public z_GetDebugMessageLog_ovr_448 := GetFuncOrNil&<function(count: UInt32; bufSize: Int32; sources: IntPtr; types: IntPtr; var ids: UInt32; severities: IntPtr; lengths: IntPtr; messageLog: IntPtr): UInt32>(z_GetDebugMessageLog_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetDebugMessageLog(count: UInt32; bufSize: Int32; sources: IntPtr; types: IntPtr; ids: array of UInt32; severities: IntPtr; lengths: IntPtr; messageLog: string): UInt32;
    begin
      var par_8_str_ptr := Marshal.StringToHGlobalAnsi(messageLog);
      Result := z_GetDebugMessageLog_ovr_448(count, bufSize, sources, types, ids[0], severities, lengths, par_8_str_ptr);
      Marshal.FreeHGlobal(par_8_str_ptr);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetDebugMessageLog(count: UInt32; bufSize: Int32; sources: IntPtr; types: IntPtr; ids: array of UInt32; severities: IntPtr; lengths: IntPtr; messageLog: IntPtr): UInt32;
    begin
      Result := z_GetDebugMessageLog_ovr_448(count, bufSize, sources, types, ids[0], severities, lengths, messageLog);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetDebugMessageLog(count: UInt32; bufSize: Int32; sources: IntPtr; types: IntPtr; var ids: UInt32; severities: array of DebugSeverity; lengths: array of Int32; messageLog: string): UInt32;
    begin
      var par_8_str_ptr := Marshal.StringToHGlobalAnsi(messageLog);
      Result := z_GetDebugMessageLog_ovr_432(count, bufSize, sources, types, ids, severities[0], lengths[0], par_8_str_ptr);
      Marshal.FreeHGlobal(par_8_str_ptr);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetDebugMessageLog(count: UInt32; bufSize: Int32; sources: IntPtr; types: IntPtr; var ids: UInt32; severities: array of DebugSeverity; lengths: array of Int32; messageLog: IntPtr): UInt32;
    begin
      Result := z_GetDebugMessageLog_ovr_432(count, bufSize, sources, types, ids, severities[0], lengths[0], messageLog);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetDebugMessageLog(count: UInt32; bufSize: Int32; sources: IntPtr; types: IntPtr; var ids: UInt32; severities: array of DebugSeverity; var lengths: Int32; messageLog: string): UInt32;
    begin
      var par_8_str_ptr := Marshal.StringToHGlobalAnsi(messageLog);
      Result := z_GetDebugMessageLog_ovr_432(count, bufSize, sources, types, ids, severities[0], lengths, par_8_str_ptr);
      Marshal.FreeHGlobal(par_8_str_ptr);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetDebugMessageLog(count: UInt32; bufSize: Int32; sources: IntPtr; types: IntPtr; var ids: UInt32; severities: array of DebugSeverity; var lengths: Int32; messageLog: IntPtr): UInt32;
    begin
      Result := z_GetDebugMessageLog_ovr_432(count, bufSize, sources, types, ids, severities[0], lengths, messageLog);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetDebugMessageLog(count: UInt32; bufSize: Int32; sources: IntPtr; types: IntPtr; var ids: UInt32; severities: array of DebugSeverity; lengths: IntPtr; messageLog: string): UInt32;
    begin
      var par_8_str_ptr := Marshal.StringToHGlobalAnsi(messageLog);
      Result := z_GetDebugMessageLog_ovr_436(count, bufSize, sources, types, ids, severities[0], lengths, par_8_str_ptr);
      Marshal.FreeHGlobal(par_8_str_ptr);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetDebugMessageLog(count: UInt32; bufSize: Int32; sources: IntPtr; types: IntPtr; var ids: UInt32; severities: array of DebugSeverity; lengths: IntPtr; messageLog: IntPtr): UInt32;
    begin
      Result := z_GetDebugMessageLog_ovr_436(count, bufSize, sources, types, ids, severities[0], lengths, messageLog);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetDebugMessageLog(count: UInt32; bufSize: Int32; sources: IntPtr; types: IntPtr; var ids: UInt32; var severities: DebugSeverity; lengths: array of Int32; messageLog: string): UInt32;
    begin
      var par_8_str_ptr := Marshal.StringToHGlobalAnsi(messageLog);
      Result := z_GetDebugMessageLog_ovr_432(count, bufSize, sources, types, ids, severities, lengths[0], par_8_str_ptr);
      Marshal.FreeHGlobal(par_8_str_ptr);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetDebugMessageLog(count: UInt32; bufSize: Int32; sources: IntPtr; types: IntPtr; var ids: UInt32; var severities: DebugSeverity; lengths: array of Int32; messageLog: IntPtr): UInt32;
    begin
      Result := z_GetDebugMessageLog_ovr_432(count, bufSize, sources, types, ids, severities, lengths[0], messageLog);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetDebugMessageLog(count: UInt32; bufSize: Int32; sources: IntPtr; types: IntPtr; var ids: UInt32; var severities: DebugSeverity; var lengths: Int32; messageLog: string): UInt32;
    begin
      var par_8_str_ptr := Marshal.StringToHGlobalAnsi(messageLog);
      Result := z_GetDebugMessageLog_ovr_432(count, bufSize, sources, types, ids, severities, lengths, par_8_str_ptr);
      Marshal.FreeHGlobal(par_8_str_ptr);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetDebugMessageLog(count: UInt32; bufSize: Int32; sources: IntPtr; types: IntPtr; var ids: UInt32; var severities: DebugSeverity; var lengths: Int32; messageLog: IntPtr): UInt32;
    begin
      Result := z_GetDebugMessageLog_ovr_432(count, bufSize, sources, types, ids, severities, lengths, messageLog);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetDebugMessageLog(count: UInt32; bufSize: Int32; sources: IntPtr; types: IntPtr; var ids: UInt32; var severities: DebugSeverity; lengths: IntPtr; messageLog: string): UInt32;
    begin
      var par_8_str_ptr := Marshal.StringToHGlobalAnsi(messageLog);
      Result := z_GetDebugMessageLog_ovr_436(count, bufSize, sources, types, ids, severities, lengths, par_8_str_ptr);
      Marshal.FreeHGlobal(par_8_str_ptr);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetDebugMessageLog(count: UInt32; bufSize: Int32; sources: IntPtr; types: IntPtr; var ids: UInt32; var severities: DebugSeverity; lengths: IntPtr; messageLog: IntPtr): UInt32;
    begin
      Result := z_GetDebugMessageLog_ovr_436(count, bufSize, sources, types, ids, severities, lengths, messageLog);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetDebugMessageLog(count: UInt32; bufSize: Int32; sources: IntPtr; types: IntPtr; var ids: UInt32; severities: IntPtr; lengths: array of Int32; messageLog: string): UInt32;
    begin
      var par_8_str_ptr := Marshal.StringToHGlobalAnsi(messageLog);
      Result := z_GetDebugMessageLog_ovr_444(count, bufSize, sources, types, ids, severities, lengths[0], par_8_str_ptr);
      Marshal.FreeHGlobal(par_8_str_ptr);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetDebugMessageLog(count: UInt32; bufSize: Int32; sources: IntPtr; types: IntPtr; var ids: UInt32; severities: IntPtr; lengths: array of Int32; messageLog: IntPtr): UInt32;
    begin
      Result := z_GetDebugMessageLog_ovr_444(count, bufSize, sources, types, ids, severities, lengths[0], messageLog);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetDebugMessageLog(count: UInt32; bufSize: Int32; sources: IntPtr; types: IntPtr; var ids: UInt32; severities: IntPtr; var lengths: Int32; messageLog: string): UInt32;
    begin
      var par_8_str_ptr := Marshal.StringToHGlobalAnsi(messageLog);
      Result := z_GetDebugMessageLog_ovr_444(count, bufSize, sources, types, ids, severities, lengths, par_8_str_ptr);
      Marshal.FreeHGlobal(par_8_str_ptr);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetDebugMessageLog(count: UInt32; bufSize: Int32; sources: IntPtr; types: IntPtr; var ids: UInt32; severities: IntPtr; var lengths: Int32; messageLog: IntPtr): UInt32;
    begin
      Result := z_GetDebugMessageLog_ovr_444(count, bufSize, sources, types, ids, severities, lengths, messageLog);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetDebugMessageLog(count: UInt32; bufSize: Int32; sources: IntPtr; types: IntPtr; var ids: UInt32; severities: IntPtr; lengths: IntPtr; messageLog: string): UInt32;
    begin
      var par_8_str_ptr := Marshal.StringToHGlobalAnsi(messageLog);
      Result := z_GetDebugMessageLog_ovr_448(count, bufSize, sources, types, ids, severities, lengths, par_8_str_ptr);
      Marshal.FreeHGlobal(par_8_str_ptr);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetDebugMessageLog(count: UInt32; bufSize: Int32; sources: IntPtr; types: IntPtr; var ids: UInt32; severities: IntPtr; lengths: IntPtr; messageLog: IntPtr): UInt32;
    begin
      Result := z_GetDebugMessageLog_ovr_448(count, bufSize, sources, types, ids, severities, lengths, messageLog);
    end;
    public z_GetDebugMessageLog_ovr_468 := GetFuncOrNil&<function(count: UInt32; bufSize: Int32; sources: IntPtr; types: IntPtr; ids: IntPtr; var severities: DebugSeverity; var lengths: Int32; messageLog: IntPtr): UInt32>(z_GetDebugMessageLog_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetDebugMessageLog(count: UInt32; bufSize: Int32; sources: IntPtr; types: IntPtr; ids: IntPtr; severities: array of DebugSeverity; lengths: array of Int32; messageLog: string): UInt32;
    begin
      var par_8_str_ptr := Marshal.StringToHGlobalAnsi(messageLog);
      Result := z_GetDebugMessageLog_ovr_468(count, bufSize, sources, types, ids, severities[0], lengths[0], par_8_str_ptr);
      Marshal.FreeHGlobal(par_8_str_ptr);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetDebugMessageLog(count: UInt32; bufSize: Int32; sources: IntPtr; types: IntPtr; ids: IntPtr; severities: array of DebugSeverity; lengths: array of Int32; messageLog: IntPtr): UInt32;
    begin
      Result := z_GetDebugMessageLog_ovr_468(count, bufSize, sources, types, ids, severities[0], lengths[0], messageLog);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetDebugMessageLog(count: UInt32; bufSize: Int32; sources: IntPtr; types: IntPtr; ids: IntPtr; severities: array of DebugSeverity; var lengths: Int32; messageLog: string): UInt32;
    begin
      var par_8_str_ptr := Marshal.StringToHGlobalAnsi(messageLog);
      Result := z_GetDebugMessageLog_ovr_468(count, bufSize, sources, types, ids, severities[0], lengths, par_8_str_ptr);
      Marshal.FreeHGlobal(par_8_str_ptr);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetDebugMessageLog(count: UInt32; bufSize: Int32; sources: IntPtr; types: IntPtr; ids: IntPtr; severities: array of DebugSeverity; var lengths: Int32; messageLog: IntPtr): UInt32;
    begin
      Result := z_GetDebugMessageLog_ovr_468(count, bufSize, sources, types, ids, severities[0], lengths, messageLog);
    end;
    public z_GetDebugMessageLog_ovr_472 := GetFuncOrNil&<function(count: UInt32; bufSize: Int32; sources: IntPtr; types: IntPtr; ids: IntPtr; var severities: DebugSeverity; lengths: IntPtr; messageLog: IntPtr): UInt32>(z_GetDebugMessageLog_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetDebugMessageLog(count: UInt32; bufSize: Int32; sources: IntPtr; types: IntPtr; ids: IntPtr; severities: array of DebugSeverity; lengths: IntPtr; messageLog: string): UInt32;
    begin
      var par_8_str_ptr := Marshal.StringToHGlobalAnsi(messageLog);
      Result := z_GetDebugMessageLog_ovr_472(count, bufSize, sources, types, ids, severities[0], lengths, par_8_str_ptr);
      Marshal.FreeHGlobal(par_8_str_ptr);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetDebugMessageLog(count: UInt32; bufSize: Int32; sources: IntPtr; types: IntPtr; ids: IntPtr; severities: array of DebugSeverity; lengths: IntPtr; messageLog: IntPtr): UInt32;
    begin
      Result := z_GetDebugMessageLog_ovr_472(count, bufSize, sources, types, ids, severities[0], lengths, messageLog);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetDebugMessageLog(count: UInt32; bufSize: Int32; sources: IntPtr; types: IntPtr; ids: IntPtr; var severities: DebugSeverity; lengths: array of Int32; messageLog: string): UInt32;
    begin
      var par_8_str_ptr := Marshal.StringToHGlobalAnsi(messageLog);
      Result := z_GetDebugMessageLog_ovr_468(count, bufSize, sources, types, ids, severities, lengths[0], par_8_str_ptr);
      Marshal.FreeHGlobal(par_8_str_ptr);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetDebugMessageLog(count: UInt32; bufSize: Int32; sources: IntPtr; types: IntPtr; ids: IntPtr; var severities: DebugSeverity; lengths: array of Int32; messageLog: IntPtr): UInt32;
    begin
      Result := z_GetDebugMessageLog_ovr_468(count, bufSize, sources, types, ids, severities, lengths[0], messageLog);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetDebugMessageLog(count: UInt32; bufSize: Int32; sources: IntPtr; types: IntPtr; ids: IntPtr; var severities: DebugSeverity; var lengths: Int32; messageLog: string): UInt32;
    begin
      var par_8_str_ptr := Marshal.StringToHGlobalAnsi(messageLog);
      Result := z_GetDebugMessageLog_ovr_468(count, bufSize, sources, types, ids, severities, lengths, par_8_str_ptr);
      Marshal.FreeHGlobal(par_8_str_ptr);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetDebugMessageLog(count: UInt32; bufSize: Int32; sources: IntPtr; types: IntPtr; ids: IntPtr; var severities: DebugSeverity; var lengths: Int32; messageLog: IntPtr): UInt32;
    begin
      Result := z_GetDebugMessageLog_ovr_468(count, bufSize, sources, types, ids, severities, lengths, messageLog);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetDebugMessageLog(count: UInt32; bufSize: Int32; sources: IntPtr; types: IntPtr; ids: IntPtr; var severities: DebugSeverity; lengths: IntPtr; messageLog: string): UInt32;
    begin
      var par_8_str_ptr := Marshal.StringToHGlobalAnsi(messageLog);
      Result := z_GetDebugMessageLog_ovr_472(count, bufSize, sources, types, ids, severities, lengths, par_8_str_ptr);
      Marshal.FreeHGlobal(par_8_str_ptr);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetDebugMessageLog(count: UInt32; bufSize: Int32; sources: IntPtr; types: IntPtr; ids: IntPtr; var severities: DebugSeverity; lengths: IntPtr; messageLog: IntPtr): UInt32;
    begin
      Result := z_GetDebugMessageLog_ovr_472(count, bufSize, sources, types, ids, severities, lengths, messageLog);
    end;
    public z_GetDebugMessageLog_ovr_480 := GetFuncOrNil&<function(count: UInt32; bufSize: Int32; sources: IntPtr; types: IntPtr; ids: IntPtr; severities: IntPtr; var lengths: Int32; messageLog: IntPtr): UInt32>(z_GetDebugMessageLog_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetDebugMessageLog(count: UInt32; bufSize: Int32; sources: IntPtr; types: IntPtr; ids: IntPtr; severities: IntPtr; lengths: array of Int32; messageLog: string): UInt32;
    begin
      var par_8_str_ptr := Marshal.StringToHGlobalAnsi(messageLog);
      Result := z_GetDebugMessageLog_ovr_480(count, bufSize, sources, types, ids, severities, lengths[0], par_8_str_ptr);
      Marshal.FreeHGlobal(par_8_str_ptr);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetDebugMessageLog(count: UInt32; bufSize: Int32; sources: IntPtr; types: IntPtr; ids: IntPtr; severities: IntPtr; lengths: array of Int32; messageLog: IntPtr): UInt32;
    begin
      Result := z_GetDebugMessageLog_ovr_480(count, bufSize, sources, types, ids, severities, lengths[0], messageLog);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetDebugMessageLog(count: UInt32; bufSize: Int32; sources: IntPtr; types: IntPtr; ids: IntPtr; severities: IntPtr; var lengths: Int32; messageLog: string): UInt32;
    begin
      var par_8_str_ptr := Marshal.StringToHGlobalAnsi(messageLog);
      Result := z_GetDebugMessageLog_ovr_480(count, bufSize, sources, types, ids, severities, lengths, par_8_str_ptr);
      Marshal.FreeHGlobal(par_8_str_ptr);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetDebugMessageLog(count: UInt32; bufSize: Int32; sources: IntPtr; types: IntPtr; ids: IntPtr; severities: IntPtr; var lengths: Int32; messageLog: IntPtr): UInt32;
    begin
      Result := z_GetDebugMessageLog_ovr_480(count, bufSize, sources, types, ids, severities, lengths, messageLog);
    end;
    public z_GetDebugMessageLog_ovr_484 := GetFuncOrNil&<function(count: UInt32; bufSize: Int32; sources: IntPtr; types: IntPtr; ids: IntPtr; severities: IntPtr; lengths: IntPtr; messageLog: IntPtr): UInt32>(z_GetDebugMessageLog_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetDebugMessageLog(count: UInt32; bufSize: Int32; sources: IntPtr; types: IntPtr; ids: IntPtr; severities: IntPtr; lengths: IntPtr; messageLog: string): UInt32;
    begin
      var par_8_str_ptr := Marshal.StringToHGlobalAnsi(messageLog);
      Result := z_GetDebugMessageLog_ovr_484(count, bufSize, sources, types, ids, severities, lengths, par_8_str_ptr);
      Marshal.FreeHGlobal(par_8_str_ptr);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetDebugMessageLog(count: UInt32; bufSize: Int32; sources: IntPtr; types: IntPtr; ids: IntPtr; severities: IntPtr; lengths: IntPtr; messageLog: IntPtr): UInt32;
    begin
      Result := z_GetDebugMessageLog_ovr_484(count, bufSize, sources, types, ids, severities, lengths, messageLog);
    end;
    
    // added in gl4.1
    public z_GetDoublei_v_adr := GetFuncAdr('glGetDoublei_v');
    public z_GetDoublei_v_ovr_0 := GetFuncOrNil&<procedure(target: DummyEnum; index: UInt32; var data: real)>(z_GetDoublei_v_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetDoublei_v(target: DummyEnum; index: UInt32; data: array of real);
    begin
      z_GetDoublei_v_ovr_0(target, index, data[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetDoublei_v(target: DummyEnum; index: UInt32; var data: real);
    begin
      z_GetDoublei_v_ovr_0(target, index, data);
    end;
    public z_GetDoublei_v_ovr_2 := GetFuncOrNil&<procedure(target: DummyEnum; index: UInt32; data: IntPtr)>(z_GetDoublei_v_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetDoublei_v(target: DummyEnum; index: UInt32; data: IntPtr);
    begin
      z_GetDoublei_v_ovr_2(target, index, data);
    end;
    
    // added in gl1.0
    public static procedure z_GetDoublev(pname: GetPName; [MarshalAs(UnmanagedType.LPArray)] data: array of real);
    external 'opengl32.dll' name 'glGetDoublev';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetDoublev(pname: GetPName; data: array of real) := z_GetDoublev;
    public static procedure z_GetDoublev(pname: GetPName; var data: real);
    external 'opengl32.dll' name 'glGetDoublev';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetDoublev(pname: GetPName; var data: real) := z_GetDoublev;
    public static procedure z_GetDoublev(pname: GetPName; data: IntPtr);
    external 'opengl32.dll' name 'glGetDoublev';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetDoublev(pname: GetPName; data: IntPtr) := z_GetDoublev;
    
    // added in gl1.0
    public static function z_GetError: ErrorCode;
    external 'opengl32.dll' name 'glGetError';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetError: ErrorCode := z_GetError;
    
    // added in gl4.1
    public z_GetFloati_v_adr := GetFuncAdr('glGetFloati_v');
    public z_GetFloati_v_ovr_0 := GetFuncOrNil&<procedure(target: DummyEnum; index: UInt32; var data: single)>(z_GetFloati_v_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetFloati_v(target: DummyEnum; index: UInt32; data: array of single);
    begin
      z_GetFloati_v_ovr_0(target, index, data[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetFloati_v(target: DummyEnum; index: UInt32; var data: single);
    begin
      z_GetFloati_v_ovr_0(target, index, data);
    end;
    public z_GetFloati_v_ovr_2 := GetFuncOrNil&<procedure(target: DummyEnum; index: UInt32; data: IntPtr)>(z_GetFloati_v_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetFloati_v(target: DummyEnum; index: UInt32; data: IntPtr);
    begin
      z_GetFloati_v_ovr_2(target, index, data);
    end;
    
    // added in gl1.0
    public static procedure z_GetFloatv(pname: GetPName; [MarshalAs(UnmanagedType.LPArray)] data: array of single);
    external 'opengl32.dll' name 'glGetFloatv';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetFloatv(pname: GetPName; data: array of single) := z_GetFloatv;
    public static procedure z_GetFloatv(pname: GetPName; var data: single);
    external 'opengl32.dll' name 'glGetFloatv';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetFloatv(pname: GetPName; var data: single) := z_GetFloatv;
    public static procedure z_GetFloatv(pname: GetPName; data: IntPtr);
    external 'opengl32.dll' name 'glGetFloatv';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetFloatv(pname: GetPName; data: IntPtr) := z_GetFloatv;
    
    // added in gl3.3
    public z_GetFragDataIndex_adr := GetFuncAdr('glGetFragDataIndex');
    public z_GetFragDataIndex_ovr_0 := GetFuncOrNil&<function(program: UInt32; name: IntPtr): Int32>(z_GetFragDataIndex_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetFragDataIndex(program: UInt32; name: string): Int32;
    begin
      var par_2_str_ptr := Marshal.StringToHGlobalAnsi(name);
      Result := z_GetFragDataIndex_ovr_0(program, par_2_str_ptr);
      Marshal.FreeHGlobal(par_2_str_ptr);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetFragDataIndex(program: UInt32; name: IntPtr): Int32;
    begin
      Result := z_GetFragDataIndex_ovr_0(program, name);
    end;
    
    // added in gl3.0
    public z_GetFragDataLocation_adr := GetFuncAdr('glGetFragDataLocation');
    public z_GetFragDataLocation_ovr_0 := GetFuncOrNil&<function(program: UInt32; name: IntPtr): Int32>(z_GetFragDataLocation_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetFragDataLocation(program: UInt32; name: string): Int32;
    begin
      var par_2_str_ptr := Marshal.StringToHGlobalAnsi(name);
      Result := z_GetFragDataLocation_ovr_0(program, par_2_str_ptr);
      Marshal.FreeHGlobal(par_2_str_ptr);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetFragDataLocation(program: UInt32; name: IntPtr): Int32;
    begin
      Result := z_GetFragDataLocation_ovr_0(program, name);
    end;
    
    // added in gl3.0
    public z_GetFramebufferAttachmentParameteriv_adr := GetFuncAdr('glGetFramebufferAttachmentParameteriv');
    public z_GetFramebufferAttachmentParameteriv_ovr_0 := GetFuncOrNil&<procedure(target: FramebufferTarget; attachment: FramebufferAttachment; pname: FramebufferAttachmentParameterName; var params: Int32)>(z_GetFramebufferAttachmentParameteriv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetFramebufferAttachmentParameteriv(target: FramebufferTarget; attachment: FramebufferAttachment; pname: FramebufferAttachmentParameterName; params: array of Int32);
    begin
      z_GetFramebufferAttachmentParameteriv_ovr_0(target, attachment, pname, params[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetFramebufferAttachmentParameteriv(target: FramebufferTarget; attachment: FramebufferAttachment; pname: FramebufferAttachmentParameterName; var params: Int32);
    begin
      z_GetFramebufferAttachmentParameteriv_ovr_0(target, attachment, pname, params);
    end;
    public z_GetFramebufferAttachmentParameteriv_ovr_2 := GetFuncOrNil&<procedure(target: FramebufferTarget; attachment: FramebufferAttachment; pname: FramebufferAttachmentParameterName; params: IntPtr)>(z_GetFramebufferAttachmentParameteriv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetFramebufferAttachmentParameteriv(target: FramebufferTarget; attachment: FramebufferAttachment; pname: FramebufferAttachmentParameterName; params: IntPtr);
    begin
      z_GetFramebufferAttachmentParameteriv_ovr_2(target, attachment, pname, params);
    end;
    
    // added in gl4.3
    public z_GetFramebufferParameteriv_adr := GetFuncAdr('glGetFramebufferParameteriv');
    public z_GetFramebufferParameteriv_ovr_0 := GetFuncOrNil&<procedure(target: FramebufferTarget; pname: FramebufferAttachmentParameterName; var params: Int32)>(z_GetFramebufferParameteriv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetFramebufferParameteriv(target: FramebufferTarget; pname: FramebufferAttachmentParameterName; params: array of Int32);
    begin
      z_GetFramebufferParameteriv_ovr_0(target, pname, params[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetFramebufferParameteriv(target: FramebufferTarget; pname: FramebufferAttachmentParameterName; var params: Int32);
    begin
      z_GetFramebufferParameteriv_ovr_0(target, pname, params);
    end;
    public z_GetFramebufferParameteriv_ovr_2 := GetFuncOrNil&<procedure(target: FramebufferTarget; pname: FramebufferAttachmentParameterName; params: IntPtr)>(z_GetFramebufferParameteriv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetFramebufferParameteriv(target: FramebufferTarget; pname: FramebufferAttachmentParameterName; params: IntPtr);
    begin
      z_GetFramebufferParameteriv_ovr_2(target, pname, params);
    end;
    
    // added in gl4.5
    public z_GetGraphicsResetStatus_adr := GetFuncAdr('glGetGraphicsResetStatus');
    public z_GetGraphicsResetStatus_ovr_0 := GetFuncOrNil&<function: GraphicsResetStatus>(z_GetGraphicsResetStatus_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetGraphicsResetStatus: GraphicsResetStatus;
    begin
      Result := z_GetGraphicsResetStatus_ovr_0;
    end;
    
    // added in gl3.2
    public z_GetInteger64i_v_adr := GetFuncAdr('glGetInteger64i_v');
    public z_GetInteger64i_v_ovr_0 := GetFuncOrNil&<procedure(target: DummyEnum; index: UInt32; var data: Int64)>(z_GetInteger64i_v_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetInteger64i_v(target: DummyEnum; index: UInt32; data: array of Int64);
    begin
      z_GetInteger64i_v_ovr_0(target, index, data[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetInteger64i_v(target: DummyEnum; index: UInt32; var data: Int64);
    begin
      z_GetInteger64i_v_ovr_0(target, index, data);
    end;
    public z_GetInteger64i_v_ovr_2 := GetFuncOrNil&<procedure(target: DummyEnum; index: UInt32; data: IntPtr)>(z_GetInteger64i_v_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetInteger64i_v(target: DummyEnum; index: UInt32; data: IntPtr);
    begin
      z_GetInteger64i_v_ovr_2(target, index, data);
    end;
    
    // added in gl3.2
    public z_GetInteger64v_adr := GetFuncAdr('glGetInteger64v');
    public z_GetInteger64v_ovr_0 := GetFuncOrNil&<procedure(pname: GetPName; var data: Int64)>(z_GetInteger64v_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetInteger64v(pname: GetPName; data: array of Int64);
    begin
      z_GetInteger64v_ovr_0(pname, data[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetInteger64v(pname: GetPName; var data: Int64);
    begin
      z_GetInteger64v_ovr_0(pname, data);
    end;
    public z_GetInteger64v_ovr_2 := GetFuncOrNil&<procedure(pname: GetPName; data: IntPtr)>(z_GetInteger64v_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetInteger64v(pname: GetPName; data: IntPtr);
    begin
      z_GetInteger64v_ovr_2(pname, data);
    end;
    
    // added in gl3.1
    public z_GetIntegeri_v_adr := GetFuncAdr('glGetIntegeri_v');
    public z_GetIntegeri_v_ovr_0 := GetFuncOrNil&<procedure(target: DummyEnum; index: UInt32; var data: Int32)>(z_GetIntegeri_v_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetIntegeri_v(target: DummyEnum; index: UInt32; data: array of Int32);
    begin
      z_GetIntegeri_v_ovr_0(target, index, data[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetIntegeri_v(target: DummyEnum; index: UInt32; var data: Int32);
    begin
      z_GetIntegeri_v_ovr_0(target, index, data);
    end;
    public z_GetIntegeri_v_ovr_2 := GetFuncOrNil&<procedure(target: DummyEnum; index: UInt32; data: IntPtr)>(z_GetIntegeri_v_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetIntegeri_v(target: DummyEnum; index: UInt32; data: IntPtr);
    begin
      z_GetIntegeri_v_ovr_2(target, index, data);
    end;
    
    // added in gl1.0
    public static procedure z_GetIntegerv(pname: GetPName; [MarshalAs(UnmanagedType.LPArray)] data: array of Int32);
    external 'opengl32.dll' name 'glGetIntegerv';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetIntegerv(pname: GetPName; data: array of Int32) := z_GetIntegerv;
    public static procedure z_GetIntegerv(pname: GetPName; var data: Int32);
    external 'opengl32.dll' name 'glGetIntegerv';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetIntegerv(pname: GetPName; var data: Int32) := z_GetIntegerv;
    public static procedure z_GetIntegerv(pname: GetPName; data: IntPtr);
    external 'opengl32.dll' name 'glGetIntegerv';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetIntegerv(pname: GetPName; data: IntPtr) := z_GetIntegerv;
    
    // added in gl4.3
    public z_GetInternalformati64v_adr := GetFuncAdr('glGetInternalformati64v');
    public z_GetInternalformati64v_ovr_0 := GetFuncOrNil&<procedure(target: TextureTarget; internalformat: InternalFormat; pname: InternalFormatPName; count: Int32; var params: Int64)>(z_GetInternalformati64v_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetInternalformati64v(target: TextureTarget; internalformat: InternalFormat; pname: InternalFormatPName; count: Int32; params: array of Int64);
    begin
      z_GetInternalformati64v_ovr_0(target, internalformat, pname, count, params[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetInternalformati64v(target: TextureTarget; internalformat: InternalFormat; pname: InternalFormatPName; count: Int32; var params: Int64);
    begin
      z_GetInternalformati64v_ovr_0(target, internalformat, pname, count, params);
    end;
    public z_GetInternalformati64v_ovr_2 := GetFuncOrNil&<procedure(target: TextureTarget; internalformat: InternalFormat; pname: InternalFormatPName; count: Int32; params: IntPtr)>(z_GetInternalformati64v_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetInternalformati64v(target: TextureTarget; internalformat: InternalFormat; pname: InternalFormatPName; count: Int32; params: IntPtr);
    begin
      z_GetInternalformati64v_ovr_2(target, internalformat, pname, count, params);
    end;
    
    // added in gl4.2
    public z_GetInternalformativ_adr := GetFuncAdr('glGetInternalformativ');
    public z_GetInternalformativ_ovr_0 := GetFuncOrNil&<procedure(target: TextureTarget; internalformat: InternalFormat; pname: InternalFormatPName; count: Int32; var params: Int32)>(z_GetInternalformativ_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetInternalformativ(target: TextureTarget; internalformat: InternalFormat; pname: InternalFormatPName; count: Int32; params: array of Int32);
    begin
      z_GetInternalformativ_ovr_0(target, internalformat, pname, count, params[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetInternalformativ(target: TextureTarget; internalformat: InternalFormat; pname: InternalFormatPName; count: Int32; var params: Int32);
    begin
      z_GetInternalformativ_ovr_0(target, internalformat, pname, count, params);
    end;
    public z_GetInternalformativ_ovr_2 := GetFuncOrNil&<procedure(target: TextureTarget; internalformat: InternalFormat; pname: InternalFormatPName; count: Int32; params: IntPtr)>(z_GetInternalformativ_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetInternalformativ(target: TextureTarget; internalformat: InternalFormat; pname: InternalFormatPName; count: Int32; params: IntPtr);
    begin
      z_GetInternalformativ_ovr_2(target, internalformat, pname, count, params);
    end;
    
    // added in gl3.2
    public z_GetMultisamplefv_adr := GetFuncAdr('glGetMultisamplefv');
    public z_GetMultisamplefv_ovr_0 := GetFuncOrNil&<procedure(pname: GetMultisamplePNameNV; index: UInt32; var val: single)>(z_GetMultisamplefv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetMultisamplefv(pname: GetMultisamplePNameNV; index: UInt32; val: array of single);
    begin
      z_GetMultisamplefv_ovr_0(pname, index, val[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetMultisamplefv(pname: GetMultisamplePNameNV; index: UInt32; var val: single);
    begin
      z_GetMultisamplefv_ovr_0(pname, index, val);
    end;
    public z_GetMultisamplefv_ovr_2 := GetFuncOrNil&<procedure(pname: GetMultisamplePNameNV; index: UInt32; val: IntPtr)>(z_GetMultisamplefv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetMultisamplefv(pname: GetMultisamplePNameNV; index: UInt32; val: IntPtr);
    begin
      z_GetMultisamplefv_ovr_2(pname, index, val);
    end;
    
    // added in gl4.5
    public z_GetNamedBufferParameteri64v_adr := GetFuncAdr('glGetNamedBufferParameteri64v');
    public z_GetNamedBufferParameteri64v_ovr_0 := GetFuncOrNil&<procedure(buffer: UInt32; pname: VertexBufferObjectParameter; var params: Int64)>(z_GetNamedBufferParameteri64v_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetNamedBufferParameteri64v(buffer: UInt32; pname: VertexBufferObjectParameter; params: array of Int64);
    begin
      z_GetNamedBufferParameteri64v_ovr_0(buffer, pname, params[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetNamedBufferParameteri64v(buffer: UInt32; pname: VertexBufferObjectParameter; var params: Int64);
    begin
      z_GetNamedBufferParameteri64v_ovr_0(buffer, pname, params);
    end;
    public z_GetNamedBufferParameteri64v_ovr_2 := GetFuncOrNil&<procedure(buffer: UInt32; pname: VertexBufferObjectParameter; params: IntPtr)>(z_GetNamedBufferParameteri64v_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetNamedBufferParameteri64v(buffer: UInt32; pname: VertexBufferObjectParameter; params: IntPtr);
    begin
      z_GetNamedBufferParameteri64v_ovr_2(buffer, pname, params);
    end;
    
    // added in gl4.5
    public z_GetNamedBufferParameteriv_adr := GetFuncAdr('glGetNamedBufferParameteriv');
    public z_GetNamedBufferParameteriv_ovr_0 := GetFuncOrNil&<procedure(buffer: UInt32; pname: VertexBufferObjectParameter; var params: Int32)>(z_GetNamedBufferParameteriv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetNamedBufferParameteriv(buffer: UInt32; pname: VertexBufferObjectParameter; params: array of Int32);
    begin
      z_GetNamedBufferParameteriv_ovr_0(buffer, pname, params[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetNamedBufferParameteriv(buffer: UInt32; pname: VertexBufferObjectParameter; var params: Int32);
    begin
      z_GetNamedBufferParameteriv_ovr_0(buffer, pname, params);
    end;
    public z_GetNamedBufferParameteriv_ovr_2 := GetFuncOrNil&<procedure(buffer: UInt32; pname: VertexBufferObjectParameter; params: IntPtr)>(z_GetNamedBufferParameteriv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetNamedBufferParameteriv(buffer: UInt32; pname: VertexBufferObjectParameter; params: IntPtr);
    begin
      z_GetNamedBufferParameteriv_ovr_2(buffer, pname, params);
    end;
    
    // added in gl4.5
    public z_GetNamedBufferPointerv_adr := GetFuncAdr('glGetNamedBufferPointerv');
    public z_GetNamedBufferPointerv_ovr_0 := GetFuncOrNil&<procedure(buffer: UInt32; pname: VertexBufferObjectParameter; var params: IntPtr)>(z_GetNamedBufferPointerv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetNamedBufferPointerv(buffer: UInt32; pname: VertexBufferObjectParameter; params: array of IntPtr);
    begin
      z_GetNamedBufferPointerv_ovr_0(buffer, pname, params[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetNamedBufferPointerv(buffer: UInt32; pname: VertexBufferObjectParameter; var params: IntPtr);
    begin
      z_GetNamedBufferPointerv_ovr_0(buffer, pname, params);
    end;
    public z_GetNamedBufferPointerv_ovr_2 := GetFuncOrNil&<procedure(buffer: UInt32; pname: VertexBufferObjectParameter; params: IntPtr)>(z_GetNamedBufferPointerv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetNamedBufferPointerv(buffer: UInt32; pname: VertexBufferObjectParameter; params: IntPtr);
    begin
      z_GetNamedBufferPointerv_ovr_2(buffer, pname, params);
    end;
    
    // added in gl4.5
    public z_GetNamedBufferSubData_adr := GetFuncAdr('glGetNamedBufferSubData');
    public z_GetNamedBufferSubData_ovr_0 := GetFuncOrNil&<procedure(buffer: UInt32; offset: IntPtr; size: IntPtr; data: IntPtr)>(z_GetNamedBufferSubData_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetNamedBufferSubData(buffer: UInt32; offset: IntPtr; size: IntPtr; data: IntPtr);
    begin
      z_GetNamedBufferSubData_ovr_0(buffer, offset, size, data);
    end;
    
    // added in gl4.5
    public z_GetNamedFramebufferAttachmentParameteriv_adr := GetFuncAdr('glGetNamedFramebufferAttachmentParameteriv');
    public z_GetNamedFramebufferAttachmentParameteriv_ovr_0 := GetFuncOrNil&<procedure(framebuffer: UInt32; attachment: FramebufferAttachment; pname: FramebufferAttachmentParameterName; var params: Int32)>(z_GetNamedFramebufferAttachmentParameteriv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetNamedFramebufferAttachmentParameteriv(framebuffer: UInt32; attachment: FramebufferAttachment; pname: FramebufferAttachmentParameterName; params: array of Int32);
    begin
      z_GetNamedFramebufferAttachmentParameteriv_ovr_0(framebuffer, attachment, pname, params[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetNamedFramebufferAttachmentParameteriv(framebuffer: UInt32; attachment: FramebufferAttachment; pname: FramebufferAttachmentParameterName; var params: Int32);
    begin
      z_GetNamedFramebufferAttachmentParameteriv_ovr_0(framebuffer, attachment, pname, params);
    end;
    public z_GetNamedFramebufferAttachmentParameteriv_ovr_2 := GetFuncOrNil&<procedure(framebuffer: UInt32; attachment: FramebufferAttachment; pname: FramebufferAttachmentParameterName; params: IntPtr)>(z_GetNamedFramebufferAttachmentParameteriv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetNamedFramebufferAttachmentParameteriv(framebuffer: UInt32; attachment: FramebufferAttachment; pname: FramebufferAttachmentParameterName; params: IntPtr);
    begin
      z_GetNamedFramebufferAttachmentParameteriv_ovr_2(framebuffer, attachment, pname, params);
    end;
    
    // added in gl4.5
    public z_GetNamedFramebufferParameteriv_adr := GetFuncAdr('glGetNamedFramebufferParameteriv');
    public z_GetNamedFramebufferParameteriv_ovr_0 := GetFuncOrNil&<procedure(framebuffer: UInt32; pname: GetFramebufferParameter; var param: Int32)>(z_GetNamedFramebufferParameteriv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetNamedFramebufferParameteriv(framebuffer: UInt32; pname: GetFramebufferParameter; param: array of Int32);
    begin
      z_GetNamedFramebufferParameteriv_ovr_0(framebuffer, pname, param[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetNamedFramebufferParameteriv(framebuffer: UInt32; pname: GetFramebufferParameter; var param: Int32);
    begin
      z_GetNamedFramebufferParameteriv_ovr_0(framebuffer, pname, param);
    end;
    public z_GetNamedFramebufferParameteriv_ovr_2 := GetFuncOrNil&<procedure(framebuffer: UInt32; pname: GetFramebufferParameter; param: IntPtr)>(z_GetNamedFramebufferParameteriv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetNamedFramebufferParameteriv(framebuffer: UInt32; pname: GetFramebufferParameter; param: IntPtr);
    begin
      z_GetNamedFramebufferParameteriv_ovr_2(framebuffer, pname, param);
    end;
    
    // added in gl4.5
    public z_GetNamedRenderbufferParameteriv_adr := GetFuncAdr('glGetNamedRenderbufferParameteriv');
    public z_GetNamedRenderbufferParameteriv_ovr_0 := GetFuncOrNil&<procedure(renderbuffer: UInt32; pname: RenderbufferParameterName; var params: Int32)>(z_GetNamedRenderbufferParameteriv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetNamedRenderbufferParameteriv(renderbuffer: UInt32; pname: RenderbufferParameterName; params: array of Int32);
    begin
      z_GetNamedRenderbufferParameteriv_ovr_0(renderbuffer, pname, params[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetNamedRenderbufferParameteriv(renderbuffer: UInt32; pname: RenderbufferParameterName; var params: Int32);
    begin
      z_GetNamedRenderbufferParameteriv_ovr_0(renderbuffer, pname, params);
    end;
    public z_GetNamedRenderbufferParameteriv_ovr_2 := GetFuncOrNil&<procedure(renderbuffer: UInt32; pname: RenderbufferParameterName; params: IntPtr)>(z_GetNamedRenderbufferParameteriv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetNamedRenderbufferParameteriv(renderbuffer: UInt32; pname: RenderbufferParameterName; params: IntPtr);
    begin
      z_GetNamedRenderbufferParameteriv_ovr_2(renderbuffer, pname, params);
    end;
    
    // added in gl4.5
    public z_GetnColorTable_adr := GetFuncAdr('glGetnColorTable');
    public z_GetnColorTable_ovr_0 := GetFuncOrNil&<procedure(target: ColorTableTarget; format: PixelFormat; type: PixelType; bufSize: Int32; table: IntPtr)>(z_GetnColorTable_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetnColorTable(target: ColorTableTarget; format: PixelFormat; type: PixelType; bufSize: Int32; table: IntPtr);
    begin
      z_GetnColorTable_ovr_0(target, format, type, bufSize, table);
    end;
    
    // added in gl4.5
    public z_GetnCompressedTexImage_adr := GetFuncAdr('glGetnCompressedTexImage');
    public z_GetnCompressedTexImage_ovr_0 := GetFuncOrNil&<procedure(target: TextureTarget; lod: Int32; bufSize: Int32; pixels: IntPtr)>(z_GetnCompressedTexImage_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetnCompressedTexImage(target: TextureTarget; lod: Int32; bufSize: Int32; pixels: IntPtr);
    begin
      z_GetnCompressedTexImage_ovr_0(target, lod, bufSize, pixels);
    end;
    
    // added in gl4.5
    public z_GetnConvolutionFilter_adr := GetFuncAdr('glGetnConvolutionFilter');
    public z_GetnConvolutionFilter_ovr_0 := GetFuncOrNil&<procedure(target: ConvolutionTarget; format: PixelFormat; type: PixelType; bufSize: Int32; image: IntPtr)>(z_GetnConvolutionFilter_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetnConvolutionFilter(target: ConvolutionTarget; format: PixelFormat; type: PixelType; bufSize: Int32; image: IntPtr);
    begin
      z_GetnConvolutionFilter_ovr_0(target, format, type, bufSize, image);
    end;
    
    // added in gl4.5
    public z_GetnHistogram_adr := GetFuncAdr('glGetnHistogram');
    public z_GetnHistogram_ovr_0 := GetFuncOrNil&<procedure(target: HistogramTargetEXT; reset: boolean; format: PixelFormat; type: PixelType; bufSize: Int32; values: IntPtr)>(z_GetnHistogram_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetnHistogram(target: HistogramTargetEXT; reset: boolean; format: PixelFormat; type: PixelType; bufSize: Int32; values: IntPtr);
    begin
      z_GetnHistogram_ovr_0(target, reset, format, type, bufSize, values);
    end;
    
    // added in gl4.5
    public z_GetnMapdv_adr := GetFuncAdr('glGetnMapdv');
    public z_GetnMapdv_ovr_0 := GetFuncOrNil&<procedure(target: MapTarget; query: MapQuery; bufSize: Int32; var v: real)>(z_GetnMapdv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetnMapdv(target: MapTarget; query: MapQuery; bufSize: Int32; v: array of real);
    begin
      z_GetnMapdv_ovr_0(target, query, bufSize, v[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetnMapdv(target: MapTarget; query: MapQuery; bufSize: Int32; var v: real);
    begin
      z_GetnMapdv_ovr_0(target, query, bufSize, v);
    end;
    public z_GetnMapdv_ovr_2 := GetFuncOrNil&<procedure(target: MapTarget; query: MapQuery; bufSize: Int32; v: IntPtr)>(z_GetnMapdv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetnMapdv(target: MapTarget; query: MapQuery; bufSize: Int32; v: IntPtr);
    begin
      z_GetnMapdv_ovr_2(target, query, bufSize, v);
    end;
    
    // added in gl4.5
    public z_GetnMapfv_adr := GetFuncAdr('glGetnMapfv');
    public z_GetnMapfv_ovr_0 := GetFuncOrNil&<procedure(target: MapTarget; query: MapQuery; bufSize: Int32; var v: single)>(z_GetnMapfv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetnMapfv(target: MapTarget; query: MapQuery; bufSize: Int32; v: array of single);
    begin
      z_GetnMapfv_ovr_0(target, query, bufSize, v[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetnMapfv(target: MapTarget; query: MapQuery; bufSize: Int32; var v: single);
    begin
      z_GetnMapfv_ovr_0(target, query, bufSize, v);
    end;
    public z_GetnMapfv_ovr_2 := GetFuncOrNil&<procedure(target: MapTarget; query: MapQuery; bufSize: Int32; v: IntPtr)>(z_GetnMapfv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetnMapfv(target: MapTarget; query: MapQuery; bufSize: Int32; v: IntPtr);
    begin
      z_GetnMapfv_ovr_2(target, query, bufSize, v);
    end;
    
    // added in gl4.5
    public z_GetnMapiv_adr := GetFuncAdr('glGetnMapiv');
    public z_GetnMapiv_ovr_0 := GetFuncOrNil&<procedure(target: MapTarget; query: MapQuery; bufSize: Int32; var v: Int32)>(z_GetnMapiv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetnMapiv(target: MapTarget; query: MapQuery; bufSize: Int32; v: array of Int32);
    begin
      z_GetnMapiv_ovr_0(target, query, bufSize, v[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetnMapiv(target: MapTarget; query: MapQuery; bufSize: Int32; var v: Int32);
    begin
      z_GetnMapiv_ovr_0(target, query, bufSize, v);
    end;
    public z_GetnMapiv_ovr_2 := GetFuncOrNil&<procedure(target: MapTarget; query: MapQuery; bufSize: Int32; v: IntPtr)>(z_GetnMapiv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetnMapiv(target: MapTarget; query: MapQuery; bufSize: Int32; v: IntPtr);
    begin
      z_GetnMapiv_ovr_2(target, query, bufSize, v);
    end;
    
    // added in gl4.5
    public z_GetnMinmax_adr := GetFuncAdr('glGetnMinmax');
    public z_GetnMinmax_ovr_0 := GetFuncOrNil&<procedure(target: MinmaxTargetEXT; reset: boolean; format: PixelFormat; type: PixelType; bufSize: Int32; values: IntPtr)>(z_GetnMinmax_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetnMinmax(target: MinmaxTargetEXT; reset: boolean; format: PixelFormat; type: PixelType; bufSize: Int32; values: IntPtr);
    begin
      z_GetnMinmax_ovr_0(target, reset, format, type, bufSize, values);
    end;
    
    // added in gl4.5
    public z_GetnPixelMapfv_adr := GetFuncAdr('glGetnPixelMapfv');
    public z_GetnPixelMapfv_ovr_0 := GetFuncOrNil&<procedure(map: PixelMap; bufSize: Int32; var values: single)>(z_GetnPixelMapfv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetnPixelMapfv(map: PixelMap; bufSize: Int32; values: array of single);
    begin
      z_GetnPixelMapfv_ovr_0(map, bufSize, values[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetnPixelMapfv(map: PixelMap; bufSize: Int32; var values: single);
    begin
      z_GetnPixelMapfv_ovr_0(map, bufSize, values);
    end;
    public z_GetnPixelMapfv_ovr_2 := GetFuncOrNil&<procedure(map: PixelMap; bufSize: Int32; values: IntPtr)>(z_GetnPixelMapfv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetnPixelMapfv(map: PixelMap; bufSize: Int32; values: IntPtr);
    begin
      z_GetnPixelMapfv_ovr_2(map, bufSize, values);
    end;
    
    // added in gl4.5
    public z_GetnPixelMapuiv_adr := GetFuncAdr('glGetnPixelMapuiv');
    public z_GetnPixelMapuiv_ovr_0 := GetFuncOrNil&<procedure(map: PixelMap; bufSize: Int32; var values: UInt32)>(z_GetnPixelMapuiv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetnPixelMapuiv(map: PixelMap; bufSize: Int32; values: array of UInt32);
    begin
      z_GetnPixelMapuiv_ovr_0(map, bufSize, values[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetnPixelMapuiv(map: PixelMap; bufSize: Int32; var values: UInt32);
    begin
      z_GetnPixelMapuiv_ovr_0(map, bufSize, values);
    end;
    public z_GetnPixelMapuiv_ovr_2 := GetFuncOrNil&<procedure(map: PixelMap; bufSize: Int32; values: IntPtr)>(z_GetnPixelMapuiv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetnPixelMapuiv(map: PixelMap; bufSize: Int32; values: IntPtr);
    begin
      z_GetnPixelMapuiv_ovr_2(map, bufSize, values);
    end;
    
    // added in gl4.5
    public z_GetnPixelMapusv_adr := GetFuncAdr('glGetnPixelMapusv');
    public z_GetnPixelMapusv_ovr_0 := GetFuncOrNil&<procedure(map: PixelMap; bufSize: Int32; var values: UInt16)>(z_GetnPixelMapusv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetnPixelMapusv(map: PixelMap; bufSize: Int32; values: array of UInt16);
    begin
      z_GetnPixelMapusv_ovr_0(map, bufSize, values[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetnPixelMapusv(map: PixelMap; bufSize: Int32; var values: UInt16);
    begin
      z_GetnPixelMapusv_ovr_0(map, bufSize, values);
    end;
    public z_GetnPixelMapusv_ovr_2 := GetFuncOrNil&<procedure(map: PixelMap; bufSize: Int32; values: IntPtr)>(z_GetnPixelMapusv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetnPixelMapusv(map: PixelMap; bufSize: Int32; values: IntPtr);
    begin
      z_GetnPixelMapusv_ovr_2(map, bufSize, values);
    end;
    
    // added in gl4.5
    public z_GetnPolygonStipple_adr := GetFuncAdr('glGetnPolygonStipple');
    public z_GetnPolygonStipple_ovr_0 := GetFuncOrNil&<procedure(bufSize: Int32; var pattern: Byte)>(z_GetnPolygonStipple_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetnPolygonStipple(bufSize: Int32; pattern: array of Byte);
    begin
      z_GetnPolygonStipple_ovr_0(bufSize, pattern[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetnPolygonStipple(bufSize: Int32; var pattern: Byte);
    begin
      z_GetnPolygonStipple_ovr_0(bufSize, pattern);
    end;
    public z_GetnPolygonStipple_ovr_2 := GetFuncOrNil&<procedure(bufSize: Int32; pattern: IntPtr)>(z_GetnPolygonStipple_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetnPolygonStipple(bufSize: Int32; pattern: IntPtr);
    begin
      z_GetnPolygonStipple_ovr_2(bufSize, pattern);
    end;
    
    // added in gl4.5
    public z_GetnSeparableFilter_adr := GetFuncAdr('glGetnSeparableFilter');
    public z_GetnSeparableFilter_ovr_0 := GetFuncOrNil&<procedure(target: SeparableTargetEXT; format: PixelFormat; type: PixelType; rowBufSize: Int32; row: IntPtr; columnBufSize: Int32; column: IntPtr; span: IntPtr)>(z_GetnSeparableFilter_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetnSeparableFilter(target: SeparableTargetEXT; format: PixelFormat; type: PixelType; rowBufSize: Int32; row: IntPtr; columnBufSize: Int32; column: IntPtr; span: IntPtr);
    begin
      z_GetnSeparableFilter_ovr_0(target, format, type, rowBufSize, row, columnBufSize, column, span);
    end;
    
    // added in gl4.5
    public z_GetnTexImage_adr := GetFuncAdr('glGetnTexImage');
    public z_GetnTexImage_ovr_0 := GetFuncOrNil&<procedure(target: TextureTarget; level: Int32; format: PixelFormat; type: PixelType; bufSize: Int32; pixels: IntPtr)>(z_GetnTexImage_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetnTexImage(target: TextureTarget; level: Int32; format: PixelFormat; type: PixelType; bufSize: Int32; pixels: IntPtr);
    begin
      z_GetnTexImage_ovr_0(target, level, format, type, bufSize, pixels);
    end;
    
    // added in gl4.5
    public z_GetnUniformdv_adr := GetFuncAdr('glGetnUniformdv');
    public z_GetnUniformdv_ovr_0 := GetFuncOrNil&<procedure(program: UInt32; location: Int32; bufSize: Int32; var params: real)>(z_GetnUniformdv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetnUniformdv(program: UInt32; location: Int32; bufSize: Int32; params: array of real);
    begin
      z_GetnUniformdv_ovr_0(program, location, bufSize, params[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetnUniformdv(program: UInt32; location: Int32; bufSize: Int32; var params: real);
    begin
      z_GetnUniformdv_ovr_0(program, location, bufSize, params);
    end;
    public z_GetnUniformdv_ovr_2 := GetFuncOrNil&<procedure(program: UInt32; location: Int32; bufSize: Int32; params: IntPtr)>(z_GetnUniformdv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetnUniformdv(program: UInt32; location: Int32; bufSize: Int32; params: IntPtr);
    begin
      z_GetnUniformdv_ovr_2(program, location, bufSize, params);
    end;
    
    // added in gl4.5
    public z_GetnUniformfv_adr := GetFuncAdr('glGetnUniformfv');
    public z_GetnUniformfv_ovr_0 := GetFuncOrNil&<procedure(program: UInt32; location: Int32; bufSize: Int32; var params: single)>(z_GetnUniformfv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetnUniformfv(program: UInt32; location: Int32; bufSize: Int32; params: array of single);
    begin
      z_GetnUniformfv_ovr_0(program, location, bufSize, params[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetnUniformfv(program: UInt32; location: Int32; bufSize: Int32; var params: single);
    begin
      z_GetnUniformfv_ovr_0(program, location, bufSize, params);
    end;
    public z_GetnUniformfv_ovr_2 := GetFuncOrNil&<procedure(program: UInt32; location: Int32; bufSize: Int32; params: IntPtr)>(z_GetnUniformfv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetnUniformfv(program: UInt32; location: Int32; bufSize: Int32; params: IntPtr);
    begin
      z_GetnUniformfv_ovr_2(program, location, bufSize, params);
    end;
    
    // added in gl4.5
    public z_GetnUniformiv_adr := GetFuncAdr('glGetnUniformiv');
    public z_GetnUniformiv_ovr_0 := GetFuncOrNil&<procedure(program: UInt32; location: Int32; bufSize: Int32; var params: Int32)>(z_GetnUniformiv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetnUniformiv(program: UInt32; location: Int32; bufSize: Int32; params: array of Int32);
    begin
      z_GetnUniformiv_ovr_0(program, location, bufSize, params[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetnUniformiv(program: UInt32; location: Int32; bufSize: Int32; var params: Int32);
    begin
      z_GetnUniformiv_ovr_0(program, location, bufSize, params);
    end;
    public z_GetnUniformiv_ovr_2 := GetFuncOrNil&<procedure(program: UInt32; location: Int32; bufSize: Int32; params: IntPtr)>(z_GetnUniformiv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetnUniformiv(program: UInt32; location: Int32; bufSize: Int32; params: IntPtr);
    begin
      z_GetnUniformiv_ovr_2(program, location, bufSize, params);
    end;
    
    // added in gl4.5
    public z_GetnUniformuiv_adr := GetFuncAdr('glGetnUniformuiv');
    public z_GetnUniformuiv_ovr_0 := GetFuncOrNil&<procedure(program: UInt32; location: Int32; bufSize: Int32; var params: UInt32)>(z_GetnUniformuiv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetnUniformuiv(program: UInt32; location: Int32; bufSize: Int32; params: array of UInt32);
    begin
      z_GetnUniformuiv_ovr_0(program, location, bufSize, params[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetnUniformuiv(program: UInt32; location: Int32; bufSize: Int32; var params: UInt32);
    begin
      z_GetnUniformuiv_ovr_0(program, location, bufSize, params);
    end;
    public z_GetnUniformuiv_ovr_2 := GetFuncOrNil&<procedure(program: UInt32; location: Int32; bufSize: Int32; params: IntPtr)>(z_GetnUniformuiv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetnUniformuiv(program: UInt32; location: Int32; bufSize: Int32; params: IntPtr);
    begin
      z_GetnUniformuiv_ovr_2(program, location, bufSize, params);
    end;
    
    // added in gl4.3
    public z_GetObjectLabel_adr := GetFuncAdr('glGetObjectLabel');
    public z_GetObjectLabel_ovr_0 := GetFuncOrNil&<procedure(identifier: ObjectIdentifier; name: UInt32; bufSize: Int32; var length: Int32; label: IntPtr)>(z_GetObjectLabel_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetObjectLabel(identifier: ObjectIdentifier; name: UInt32; bufSize: Int32; length: array of Int32; label: string);
    begin
      var par_5_str_ptr := Marshal.StringToHGlobalAnsi(label);
      z_GetObjectLabel_ovr_0(identifier, name, bufSize, length[0], par_5_str_ptr);
      Marshal.FreeHGlobal(par_5_str_ptr);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetObjectLabel(identifier: ObjectIdentifier; name: UInt32; bufSize: Int32; length: array of Int32; label: IntPtr);
    begin
      z_GetObjectLabel_ovr_0(identifier, name, bufSize, length[0], label);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetObjectLabel(identifier: ObjectIdentifier; name: UInt32; bufSize: Int32; var length: Int32; label: string);
    begin
      var par_5_str_ptr := Marshal.StringToHGlobalAnsi(label);
      z_GetObjectLabel_ovr_0(identifier, name, bufSize, length, par_5_str_ptr);
      Marshal.FreeHGlobal(par_5_str_ptr);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetObjectLabel(identifier: ObjectIdentifier; name: UInt32; bufSize: Int32; var length: Int32; label: IntPtr);
    begin
      z_GetObjectLabel_ovr_0(identifier, name, bufSize, length, label);
    end;
    public z_GetObjectLabel_ovr_4 := GetFuncOrNil&<procedure(identifier: ObjectIdentifier; name: UInt32; bufSize: Int32; length: IntPtr; label: IntPtr)>(z_GetObjectLabel_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetObjectLabel(identifier: ObjectIdentifier; name: UInt32; bufSize: Int32; length: IntPtr; label: string);
    begin
      var par_5_str_ptr := Marshal.StringToHGlobalAnsi(label);
      z_GetObjectLabel_ovr_4(identifier, name, bufSize, length, par_5_str_ptr);
      Marshal.FreeHGlobal(par_5_str_ptr);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetObjectLabel(identifier: ObjectIdentifier; name: UInt32; bufSize: Int32; length: IntPtr; label: IntPtr);
    begin
      z_GetObjectLabel_ovr_4(identifier, name, bufSize, length, label);
    end;
    
    // added in gl4.3
    public z_GetObjectPtrLabel_adr := GetFuncAdr('glGetObjectPtrLabel');
    public z_GetObjectPtrLabel_ovr_0 := GetFuncOrNil&<procedure(ptr: IntPtr; bufSize: Int32; var length: Int32; label: IntPtr)>(z_GetObjectPtrLabel_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetObjectPtrLabel(ptr: IntPtr; bufSize: Int32; length: array of Int32; label: string);
    begin
      var par_4_str_ptr := Marshal.StringToHGlobalAnsi(label);
      z_GetObjectPtrLabel_ovr_0(ptr, bufSize, length[0], par_4_str_ptr);
      Marshal.FreeHGlobal(par_4_str_ptr);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetObjectPtrLabel(ptr: IntPtr; bufSize: Int32; length: array of Int32; label: IntPtr);
    begin
      z_GetObjectPtrLabel_ovr_0(ptr, bufSize, length[0], label);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetObjectPtrLabel(ptr: IntPtr; bufSize: Int32; var length: Int32; label: string);
    begin
      var par_4_str_ptr := Marshal.StringToHGlobalAnsi(label);
      z_GetObjectPtrLabel_ovr_0(ptr, bufSize, length, par_4_str_ptr);
      Marshal.FreeHGlobal(par_4_str_ptr);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetObjectPtrLabel(ptr: IntPtr; bufSize: Int32; var length: Int32; label: IntPtr);
    begin
      z_GetObjectPtrLabel_ovr_0(ptr, bufSize, length, label);
    end;
    public z_GetObjectPtrLabel_ovr_4 := GetFuncOrNil&<procedure(ptr: IntPtr; bufSize: Int32; length: IntPtr; label: IntPtr)>(z_GetObjectPtrLabel_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetObjectPtrLabel(ptr: IntPtr; bufSize: Int32; length: IntPtr; label: string);
    begin
      var par_4_str_ptr := Marshal.StringToHGlobalAnsi(label);
      z_GetObjectPtrLabel_ovr_4(ptr, bufSize, length, par_4_str_ptr);
      Marshal.FreeHGlobal(par_4_str_ptr);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetObjectPtrLabel(ptr: IntPtr; bufSize: Int32; length: IntPtr; label: IntPtr);
    begin
      z_GetObjectPtrLabel_ovr_4(ptr, bufSize, length, label);
    end;
    
    // added in gl1.1
    public static procedure z_GetPointerv(pname: GetPointervPName; [MarshalAs(UnmanagedType.LPArray)] params: array of IntPtr);
    external 'opengl32.dll' name 'glGetPointerv';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetPointerv(pname: GetPointervPName; params: array of IntPtr) := z_GetPointerv;
    public static procedure z_GetPointerv(pname: GetPointervPName; var params: IntPtr);
    external 'opengl32.dll' name 'glGetPointerv';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetPointerv(pname: GetPointervPName; var params: IntPtr) := z_GetPointerv;
    public static procedure z_GetPointerv(pname: GetPointervPName; params: IntPtr);
    external 'opengl32.dll' name 'glGetPointerv';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetPointerv(pname: GetPointervPName; params: IntPtr) := z_GetPointerv;
    
    // added in gl4.1
    public z_GetProgramBinary_adr := GetFuncAdr('glGetProgramBinary');
    public z_GetProgramBinary_ovr_0 := GetFuncOrNil&<procedure(program: UInt32; bufSize: Int32; var length: Int32; var binaryFormat: DummyEnum; binary: IntPtr)>(z_GetProgramBinary_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetProgramBinary(program: UInt32; bufSize: Int32; length: array of Int32; binaryFormat: array of DummyEnum; binary: IntPtr);
    begin
      z_GetProgramBinary_ovr_0(program, bufSize, length[0], binaryFormat[0], binary);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetProgramBinary(program: UInt32; bufSize: Int32; length: array of Int32; var binaryFormat: DummyEnum; binary: IntPtr);
    begin
      z_GetProgramBinary_ovr_0(program, bufSize, length[0], binaryFormat, binary);
    end;
    public z_GetProgramBinary_ovr_2 := GetFuncOrNil&<procedure(program: UInt32; bufSize: Int32; var length: Int32; binaryFormat: IntPtr; binary: IntPtr)>(z_GetProgramBinary_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetProgramBinary(program: UInt32; bufSize: Int32; length: array of Int32; binaryFormat: IntPtr; binary: IntPtr);
    begin
      z_GetProgramBinary_ovr_2(program, bufSize, length[0], binaryFormat, binary);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetProgramBinary(program: UInt32; bufSize: Int32; var length: Int32; binaryFormat: array of DummyEnum; binary: IntPtr);
    begin
      z_GetProgramBinary_ovr_0(program, bufSize, length, binaryFormat[0], binary);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetProgramBinary(program: UInt32; bufSize: Int32; var length: Int32; var binaryFormat: DummyEnum; binary: IntPtr);
    begin
      z_GetProgramBinary_ovr_0(program, bufSize, length, binaryFormat, binary);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetProgramBinary(program: UInt32; bufSize: Int32; var length: Int32; binaryFormat: IntPtr; binary: IntPtr);
    begin
      z_GetProgramBinary_ovr_2(program, bufSize, length, binaryFormat, binary);
    end;
    public z_GetProgramBinary_ovr_6 := GetFuncOrNil&<procedure(program: UInt32; bufSize: Int32; length: IntPtr; var binaryFormat: DummyEnum; binary: IntPtr)>(z_GetProgramBinary_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetProgramBinary(program: UInt32; bufSize: Int32; length: IntPtr; binaryFormat: array of DummyEnum; binary: IntPtr);
    begin
      z_GetProgramBinary_ovr_6(program, bufSize, length, binaryFormat[0], binary);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetProgramBinary(program: UInt32; bufSize: Int32; length: IntPtr; var binaryFormat: DummyEnum; binary: IntPtr);
    begin
      z_GetProgramBinary_ovr_6(program, bufSize, length, binaryFormat, binary);
    end;
    public z_GetProgramBinary_ovr_8 := GetFuncOrNil&<procedure(program: UInt32; bufSize: Int32; length: IntPtr; binaryFormat: IntPtr; binary: IntPtr)>(z_GetProgramBinary_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetProgramBinary(program: UInt32; bufSize: Int32; length: IntPtr; binaryFormat: IntPtr; binary: IntPtr);
    begin
      z_GetProgramBinary_ovr_8(program, bufSize, length, binaryFormat, binary);
    end;
    
    // added in gl2.0
    public z_GetProgramInfoLog_adr := GetFuncAdr('glGetProgramInfoLog');
    public z_GetProgramInfoLog_ovr_0 := GetFuncOrNil&<procedure(program: UInt32; bufSize: Int32; var length: Int32; infoLog: IntPtr)>(z_GetProgramInfoLog_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetProgramInfoLog(program: UInt32; bufSize: Int32; length: array of Int32; infoLog: string);
    begin
      var par_4_str_ptr := Marshal.StringToHGlobalAnsi(infoLog);
      z_GetProgramInfoLog_ovr_0(program, bufSize, length[0], par_4_str_ptr);
      Marshal.FreeHGlobal(par_4_str_ptr);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetProgramInfoLog(program: UInt32; bufSize: Int32; length: array of Int32; infoLog: IntPtr);
    begin
      z_GetProgramInfoLog_ovr_0(program, bufSize, length[0], infoLog);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetProgramInfoLog(program: UInt32; bufSize: Int32; var length: Int32; infoLog: string);
    begin
      var par_4_str_ptr := Marshal.StringToHGlobalAnsi(infoLog);
      z_GetProgramInfoLog_ovr_0(program, bufSize, length, par_4_str_ptr);
      Marshal.FreeHGlobal(par_4_str_ptr);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetProgramInfoLog(program: UInt32; bufSize: Int32; var length: Int32; infoLog: IntPtr);
    begin
      z_GetProgramInfoLog_ovr_0(program, bufSize, length, infoLog);
    end;
    public z_GetProgramInfoLog_ovr_4 := GetFuncOrNil&<procedure(program: UInt32; bufSize: Int32; length: IntPtr; infoLog: IntPtr)>(z_GetProgramInfoLog_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetProgramInfoLog(program: UInt32; bufSize: Int32; length: IntPtr; infoLog: string);
    begin
      var par_4_str_ptr := Marshal.StringToHGlobalAnsi(infoLog);
      z_GetProgramInfoLog_ovr_4(program, bufSize, length, par_4_str_ptr);
      Marshal.FreeHGlobal(par_4_str_ptr);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetProgramInfoLog(program: UInt32; bufSize: Int32; length: IntPtr; infoLog: IntPtr);
    begin
      z_GetProgramInfoLog_ovr_4(program, bufSize, length, infoLog);
    end;
    
    // added in gl4.3
    public z_GetProgramInterfaceiv_adr := GetFuncAdr('glGetProgramInterfaceiv');
    public z_GetProgramInterfaceiv_ovr_0 := GetFuncOrNil&<procedure(program: UInt32; programInterface: ProgramInterface; pname: ProgramInterfacePName; var params: Int32)>(z_GetProgramInterfaceiv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetProgramInterfaceiv(program: UInt32; programInterface: ProgramInterface; pname: ProgramInterfacePName; params: array of Int32);
    begin
      z_GetProgramInterfaceiv_ovr_0(program, programInterface, pname, params[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetProgramInterfaceiv(program: UInt32; programInterface: ProgramInterface; pname: ProgramInterfacePName; var params: Int32);
    begin
      z_GetProgramInterfaceiv_ovr_0(program, programInterface, pname, params);
    end;
    public z_GetProgramInterfaceiv_ovr_2 := GetFuncOrNil&<procedure(program: UInt32; programInterface: ProgramInterface; pname: ProgramInterfacePName; params: IntPtr)>(z_GetProgramInterfaceiv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetProgramInterfaceiv(program: UInt32; programInterface: ProgramInterface; pname: ProgramInterfacePName; params: IntPtr);
    begin
      z_GetProgramInterfaceiv_ovr_2(program, programInterface, pname, params);
    end;
    
    // added in gl2.0
    public z_GetProgramiv_adr := GetFuncAdr('glGetProgramiv');
    public z_GetProgramiv_ovr_0 := GetFuncOrNil&<procedure(program: UInt32; pname: ProgramPropertyARB; var params: Int32)>(z_GetProgramiv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetProgramiv(program: UInt32; pname: ProgramPropertyARB; params: array of Int32);
    begin
      z_GetProgramiv_ovr_0(program, pname, params[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetProgramiv(program: UInt32; pname: ProgramPropertyARB; var params: Int32);
    begin
      z_GetProgramiv_ovr_0(program, pname, params);
    end;
    public z_GetProgramiv_ovr_2 := GetFuncOrNil&<procedure(program: UInt32; pname: ProgramPropertyARB; params: IntPtr)>(z_GetProgramiv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetProgramiv(program: UInt32; pname: ProgramPropertyARB; params: IntPtr);
    begin
      z_GetProgramiv_ovr_2(program, pname, params);
    end;
    
    // added in gl4.1
    public z_GetProgramPipelineInfoLog_adr := GetFuncAdr('glGetProgramPipelineInfoLog');
    public z_GetProgramPipelineInfoLog_ovr_0 := GetFuncOrNil&<procedure(pipeline: UInt32; bufSize: Int32; var length: Int32; infoLog: IntPtr)>(z_GetProgramPipelineInfoLog_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetProgramPipelineInfoLog(pipeline: UInt32; bufSize: Int32; length: array of Int32; infoLog: string);
    begin
      var par_4_str_ptr := Marshal.StringToHGlobalAnsi(infoLog);
      z_GetProgramPipelineInfoLog_ovr_0(pipeline, bufSize, length[0], par_4_str_ptr);
      Marshal.FreeHGlobal(par_4_str_ptr);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetProgramPipelineInfoLog(pipeline: UInt32; bufSize: Int32; length: array of Int32; infoLog: IntPtr);
    begin
      z_GetProgramPipelineInfoLog_ovr_0(pipeline, bufSize, length[0], infoLog);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetProgramPipelineInfoLog(pipeline: UInt32; bufSize: Int32; var length: Int32; infoLog: string);
    begin
      var par_4_str_ptr := Marshal.StringToHGlobalAnsi(infoLog);
      z_GetProgramPipelineInfoLog_ovr_0(pipeline, bufSize, length, par_4_str_ptr);
      Marshal.FreeHGlobal(par_4_str_ptr);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetProgramPipelineInfoLog(pipeline: UInt32; bufSize: Int32; var length: Int32; infoLog: IntPtr);
    begin
      z_GetProgramPipelineInfoLog_ovr_0(pipeline, bufSize, length, infoLog);
    end;
    public z_GetProgramPipelineInfoLog_ovr_4 := GetFuncOrNil&<procedure(pipeline: UInt32; bufSize: Int32; length: IntPtr; infoLog: IntPtr)>(z_GetProgramPipelineInfoLog_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetProgramPipelineInfoLog(pipeline: UInt32; bufSize: Int32; length: IntPtr; infoLog: string);
    begin
      var par_4_str_ptr := Marshal.StringToHGlobalAnsi(infoLog);
      z_GetProgramPipelineInfoLog_ovr_4(pipeline, bufSize, length, par_4_str_ptr);
      Marshal.FreeHGlobal(par_4_str_ptr);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetProgramPipelineInfoLog(pipeline: UInt32; bufSize: Int32; length: IntPtr; infoLog: IntPtr);
    begin
      z_GetProgramPipelineInfoLog_ovr_4(pipeline, bufSize, length, infoLog);
    end;
    
    // added in gl4.1
    public z_GetProgramPipelineiv_adr := GetFuncAdr('glGetProgramPipelineiv');
    public z_GetProgramPipelineiv_ovr_0 := GetFuncOrNil&<procedure(pipeline: UInt32; pname: PipelineParameterName; var params: Int32)>(z_GetProgramPipelineiv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetProgramPipelineiv(pipeline: UInt32; pname: PipelineParameterName; params: array of Int32);
    begin
      z_GetProgramPipelineiv_ovr_0(pipeline, pname, params[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetProgramPipelineiv(pipeline: UInt32; pname: PipelineParameterName; var params: Int32);
    begin
      z_GetProgramPipelineiv_ovr_0(pipeline, pname, params);
    end;
    public z_GetProgramPipelineiv_ovr_2 := GetFuncOrNil&<procedure(pipeline: UInt32; pname: PipelineParameterName; params: IntPtr)>(z_GetProgramPipelineiv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetProgramPipelineiv(pipeline: UInt32; pname: PipelineParameterName; params: IntPtr);
    begin
      z_GetProgramPipelineiv_ovr_2(pipeline, pname, params);
    end;
    
    // added in gl4.3
    public z_GetProgramResourceIndex_adr := GetFuncAdr('glGetProgramResourceIndex');
    public z_GetProgramResourceIndex_ovr_0 := GetFuncOrNil&<function(program: UInt32; programInterface: ProgramInterface; name: IntPtr): UInt32>(z_GetProgramResourceIndex_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetProgramResourceIndex(program: UInt32; programInterface: ProgramInterface; name: string): UInt32;
    begin
      var par_3_str_ptr := Marshal.StringToHGlobalAnsi(name);
      Result := z_GetProgramResourceIndex_ovr_0(program, programInterface, par_3_str_ptr);
      Marshal.FreeHGlobal(par_3_str_ptr);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetProgramResourceIndex(program: UInt32; programInterface: ProgramInterface; name: IntPtr): UInt32;
    begin
      Result := z_GetProgramResourceIndex_ovr_0(program, programInterface, name);
    end;
    
    // added in gl4.3
    public z_GetProgramResourceiv_adr := GetFuncAdr('glGetProgramResourceiv');
    public z_GetProgramResourceiv_ovr_0 := GetFuncOrNil&<procedure(program: UInt32; programInterface: ProgramInterface; index: UInt32; propCount: Int32; var props: ProgramResourceProperty; count: Int32; var length: Int32; var params: Int32)>(z_GetProgramResourceiv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetProgramResourceiv(program: UInt32; programInterface: ProgramInterface; index: UInt32; propCount: Int32; props: array of ProgramResourceProperty; count: Int32; length: array of Int32; params: array of Int32);
    begin
      z_GetProgramResourceiv_ovr_0(program, programInterface, index, propCount, props[0], count, length[0], params[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetProgramResourceiv(program: UInt32; programInterface: ProgramInterface; index: UInt32; propCount: Int32; props: array of ProgramResourceProperty; count: Int32; length: array of Int32; var params: Int32);
    begin
      z_GetProgramResourceiv_ovr_0(program, programInterface, index, propCount, props[0], count, length[0], params);
    end;
    public z_GetProgramResourceiv_ovr_2 := GetFuncOrNil&<procedure(program: UInt32; programInterface: ProgramInterface; index: UInt32; propCount: Int32; var props: ProgramResourceProperty; count: Int32; var length: Int32; params: IntPtr)>(z_GetProgramResourceiv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetProgramResourceiv(program: UInt32; programInterface: ProgramInterface; index: UInt32; propCount: Int32; props: array of ProgramResourceProperty; count: Int32; length: array of Int32; params: IntPtr);
    begin
      z_GetProgramResourceiv_ovr_2(program, programInterface, index, propCount, props[0], count, length[0], params);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetProgramResourceiv(program: UInt32; programInterface: ProgramInterface; index: UInt32; propCount: Int32; props: array of ProgramResourceProperty; count: Int32; var length: Int32; params: array of Int32);
    begin
      z_GetProgramResourceiv_ovr_0(program, programInterface, index, propCount, props[0], count, length, params[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetProgramResourceiv(program: UInt32; programInterface: ProgramInterface; index: UInt32; propCount: Int32; props: array of ProgramResourceProperty; count: Int32; var length: Int32; var params: Int32);
    begin
      z_GetProgramResourceiv_ovr_0(program, programInterface, index, propCount, props[0], count, length, params);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetProgramResourceiv(program: UInt32; programInterface: ProgramInterface; index: UInt32; propCount: Int32; props: array of ProgramResourceProperty; count: Int32; var length: Int32; params: IntPtr);
    begin
      z_GetProgramResourceiv_ovr_2(program, programInterface, index, propCount, props[0], count, length, params);
    end;
    public z_GetProgramResourceiv_ovr_6 := GetFuncOrNil&<procedure(program: UInt32; programInterface: ProgramInterface; index: UInt32; propCount: Int32; var props: ProgramResourceProperty; count: Int32; length: IntPtr; var params: Int32)>(z_GetProgramResourceiv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetProgramResourceiv(program: UInt32; programInterface: ProgramInterface; index: UInt32; propCount: Int32; props: array of ProgramResourceProperty; count: Int32; length: IntPtr; params: array of Int32);
    begin
      z_GetProgramResourceiv_ovr_6(program, programInterface, index, propCount, props[0], count, length, params[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetProgramResourceiv(program: UInt32; programInterface: ProgramInterface; index: UInt32; propCount: Int32; props: array of ProgramResourceProperty; count: Int32; length: IntPtr; var params: Int32);
    begin
      z_GetProgramResourceiv_ovr_6(program, programInterface, index, propCount, props[0], count, length, params);
    end;
    public z_GetProgramResourceiv_ovr_8 := GetFuncOrNil&<procedure(program: UInt32; programInterface: ProgramInterface; index: UInt32; propCount: Int32; var props: ProgramResourceProperty; count: Int32; length: IntPtr; params: IntPtr)>(z_GetProgramResourceiv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetProgramResourceiv(program: UInt32; programInterface: ProgramInterface; index: UInt32; propCount: Int32; props: array of ProgramResourceProperty; count: Int32; length: IntPtr; params: IntPtr);
    begin
      z_GetProgramResourceiv_ovr_8(program, programInterface, index, propCount, props[0], count, length, params);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetProgramResourceiv(program: UInt32; programInterface: ProgramInterface; index: UInt32; propCount: Int32; var props: ProgramResourceProperty; count: Int32; length: array of Int32; params: array of Int32);
    begin
      z_GetProgramResourceiv_ovr_0(program, programInterface, index, propCount, props, count, length[0], params[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetProgramResourceiv(program: UInt32; programInterface: ProgramInterface; index: UInt32; propCount: Int32; var props: ProgramResourceProperty; count: Int32; length: array of Int32; var params: Int32);
    begin
      z_GetProgramResourceiv_ovr_0(program, programInterface, index, propCount, props, count, length[0], params);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetProgramResourceiv(program: UInt32; programInterface: ProgramInterface; index: UInt32; propCount: Int32; var props: ProgramResourceProperty; count: Int32; length: array of Int32; params: IntPtr);
    begin
      z_GetProgramResourceiv_ovr_2(program, programInterface, index, propCount, props, count, length[0], params);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetProgramResourceiv(program: UInt32; programInterface: ProgramInterface; index: UInt32; propCount: Int32; var props: ProgramResourceProperty; count: Int32; var length: Int32; params: array of Int32);
    begin
      z_GetProgramResourceiv_ovr_0(program, programInterface, index, propCount, props, count, length, params[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetProgramResourceiv(program: UInt32; programInterface: ProgramInterface; index: UInt32; propCount: Int32; var props: ProgramResourceProperty; count: Int32; var length: Int32; var params: Int32);
    begin
      z_GetProgramResourceiv_ovr_0(program, programInterface, index, propCount, props, count, length, params);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetProgramResourceiv(program: UInt32; programInterface: ProgramInterface; index: UInt32; propCount: Int32; var props: ProgramResourceProperty; count: Int32; var length: Int32; params: IntPtr);
    begin
      z_GetProgramResourceiv_ovr_2(program, programInterface, index, propCount, props, count, length, params);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetProgramResourceiv(program: UInt32; programInterface: ProgramInterface; index: UInt32; propCount: Int32; var props: ProgramResourceProperty; count: Int32; length: IntPtr; params: array of Int32);
    begin
      z_GetProgramResourceiv_ovr_6(program, programInterface, index, propCount, props, count, length, params[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetProgramResourceiv(program: UInt32; programInterface: ProgramInterface; index: UInt32; propCount: Int32; var props: ProgramResourceProperty; count: Int32; length: IntPtr; var params: Int32);
    begin
      z_GetProgramResourceiv_ovr_6(program, programInterface, index, propCount, props, count, length, params);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetProgramResourceiv(program: UInt32; programInterface: ProgramInterface; index: UInt32; propCount: Int32; var props: ProgramResourceProperty; count: Int32; length: IntPtr; params: IntPtr);
    begin
      z_GetProgramResourceiv_ovr_8(program, programInterface, index, propCount, props, count, length, params);
    end;
    public z_GetProgramResourceiv_ovr_18 := GetFuncOrNil&<procedure(program: UInt32; programInterface: ProgramInterface; index: UInt32; propCount: Int32; props: IntPtr; count: Int32; var length: Int32; var params: Int32)>(z_GetProgramResourceiv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetProgramResourceiv(program: UInt32; programInterface: ProgramInterface; index: UInt32; propCount: Int32; props: IntPtr; count: Int32; length: array of Int32; params: array of Int32);
    begin
      z_GetProgramResourceiv_ovr_18(program, programInterface, index, propCount, props, count, length[0], params[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetProgramResourceiv(program: UInt32; programInterface: ProgramInterface; index: UInt32; propCount: Int32; props: IntPtr; count: Int32; length: array of Int32; var params: Int32);
    begin
      z_GetProgramResourceiv_ovr_18(program, programInterface, index, propCount, props, count, length[0], params);
    end;
    public z_GetProgramResourceiv_ovr_20 := GetFuncOrNil&<procedure(program: UInt32; programInterface: ProgramInterface; index: UInt32; propCount: Int32; props: IntPtr; count: Int32; var length: Int32; params: IntPtr)>(z_GetProgramResourceiv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetProgramResourceiv(program: UInt32; programInterface: ProgramInterface; index: UInt32; propCount: Int32; props: IntPtr; count: Int32; length: array of Int32; params: IntPtr);
    begin
      z_GetProgramResourceiv_ovr_20(program, programInterface, index, propCount, props, count, length[0], params);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetProgramResourceiv(program: UInt32; programInterface: ProgramInterface; index: UInt32; propCount: Int32; props: IntPtr; count: Int32; var length: Int32; params: array of Int32);
    begin
      z_GetProgramResourceiv_ovr_18(program, programInterface, index, propCount, props, count, length, params[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetProgramResourceiv(program: UInt32; programInterface: ProgramInterface; index: UInt32; propCount: Int32; props: IntPtr; count: Int32; var length: Int32; var params: Int32);
    begin
      z_GetProgramResourceiv_ovr_18(program, programInterface, index, propCount, props, count, length, params);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetProgramResourceiv(program: UInt32; programInterface: ProgramInterface; index: UInt32; propCount: Int32; props: IntPtr; count: Int32; var length: Int32; params: IntPtr);
    begin
      z_GetProgramResourceiv_ovr_20(program, programInterface, index, propCount, props, count, length, params);
    end;
    public z_GetProgramResourceiv_ovr_24 := GetFuncOrNil&<procedure(program: UInt32; programInterface: ProgramInterface; index: UInt32; propCount: Int32; props: IntPtr; count: Int32; length: IntPtr; var params: Int32)>(z_GetProgramResourceiv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetProgramResourceiv(program: UInt32; programInterface: ProgramInterface; index: UInt32; propCount: Int32; props: IntPtr; count: Int32; length: IntPtr; params: array of Int32);
    begin
      z_GetProgramResourceiv_ovr_24(program, programInterface, index, propCount, props, count, length, params[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetProgramResourceiv(program: UInt32; programInterface: ProgramInterface; index: UInt32; propCount: Int32; props: IntPtr; count: Int32; length: IntPtr; var params: Int32);
    begin
      z_GetProgramResourceiv_ovr_24(program, programInterface, index, propCount, props, count, length, params);
    end;
    public z_GetProgramResourceiv_ovr_26 := GetFuncOrNil&<procedure(program: UInt32; programInterface: ProgramInterface; index: UInt32; propCount: Int32; props: IntPtr; count: Int32; length: IntPtr; params: IntPtr)>(z_GetProgramResourceiv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetProgramResourceiv(program: UInt32; programInterface: ProgramInterface; index: UInt32; propCount: Int32; props: IntPtr; count: Int32; length: IntPtr; params: IntPtr);
    begin
      z_GetProgramResourceiv_ovr_26(program, programInterface, index, propCount, props, count, length, params);
    end;
    
    // added in gl4.3
    public z_GetProgramResourceLocation_adr := GetFuncAdr('glGetProgramResourceLocation');
    public z_GetProgramResourceLocation_ovr_0 := GetFuncOrNil&<function(program: UInt32; programInterface: ProgramInterface; name: IntPtr): Int32>(z_GetProgramResourceLocation_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetProgramResourceLocation(program: UInt32; programInterface: ProgramInterface; name: string): Int32;
    begin
      var par_3_str_ptr := Marshal.StringToHGlobalAnsi(name);
      Result := z_GetProgramResourceLocation_ovr_0(program, programInterface, par_3_str_ptr);
      Marshal.FreeHGlobal(par_3_str_ptr);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetProgramResourceLocation(program: UInt32; programInterface: ProgramInterface; name: IntPtr): Int32;
    begin
      Result := z_GetProgramResourceLocation_ovr_0(program, programInterface, name);
    end;
    
    // added in gl4.3
    public z_GetProgramResourceLocationIndex_adr := GetFuncAdr('glGetProgramResourceLocationIndex');
    public z_GetProgramResourceLocationIndex_ovr_0 := GetFuncOrNil&<function(program: UInt32; programInterface: ProgramInterface; name: IntPtr): Int32>(z_GetProgramResourceLocationIndex_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetProgramResourceLocationIndex(program: UInt32; programInterface: ProgramInterface; name: string): Int32;
    begin
      var par_3_str_ptr := Marshal.StringToHGlobalAnsi(name);
      Result := z_GetProgramResourceLocationIndex_ovr_0(program, programInterface, par_3_str_ptr);
      Marshal.FreeHGlobal(par_3_str_ptr);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetProgramResourceLocationIndex(program: UInt32; programInterface: ProgramInterface; name: IntPtr): Int32;
    begin
      Result := z_GetProgramResourceLocationIndex_ovr_0(program, programInterface, name);
    end;
    
    // added in gl4.3
    public z_GetProgramResourceName_adr := GetFuncAdr('glGetProgramResourceName');
    public z_GetProgramResourceName_ovr_0 := GetFuncOrNil&<procedure(program: UInt32; programInterface: ProgramInterface; index: UInt32; bufSize: Int32; var length: Int32; name: IntPtr)>(z_GetProgramResourceName_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetProgramResourceName(program: UInt32; programInterface: ProgramInterface; index: UInt32; bufSize: Int32; length: array of Int32; name: string);
    begin
      var par_6_str_ptr := Marshal.StringToHGlobalAnsi(name);
      z_GetProgramResourceName_ovr_0(program, programInterface, index, bufSize, length[0], par_6_str_ptr);
      Marshal.FreeHGlobal(par_6_str_ptr);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetProgramResourceName(program: UInt32; programInterface: ProgramInterface; index: UInt32; bufSize: Int32; length: array of Int32; name: IntPtr);
    begin
      z_GetProgramResourceName_ovr_0(program, programInterface, index, bufSize, length[0], name);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetProgramResourceName(program: UInt32; programInterface: ProgramInterface; index: UInt32; bufSize: Int32; var length: Int32; name: string);
    begin
      var par_6_str_ptr := Marshal.StringToHGlobalAnsi(name);
      z_GetProgramResourceName_ovr_0(program, programInterface, index, bufSize, length, par_6_str_ptr);
      Marshal.FreeHGlobal(par_6_str_ptr);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetProgramResourceName(program: UInt32; programInterface: ProgramInterface; index: UInt32; bufSize: Int32; var length: Int32; name: IntPtr);
    begin
      z_GetProgramResourceName_ovr_0(program, programInterface, index, bufSize, length, name);
    end;
    public z_GetProgramResourceName_ovr_4 := GetFuncOrNil&<procedure(program: UInt32; programInterface: ProgramInterface; index: UInt32; bufSize: Int32; length: IntPtr; name: IntPtr)>(z_GetProgramResourceName_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetProgramResourceName(program: UInt32; programInterface: ProgramInterface; index: UInt32; bufSize: Int32; length: IntPtr; name: string);
    begin
      var par_6_str_ptr := Marshal.StringToHGlobalAnsi(name);
      z_GetProgramResourceName_ovr_4(program, programInterface, index, bufSize, length, par_6_str_ptr);
      Marshal.FreeHGlobal(par_6_str_ptr);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetProgramResourceName(program: UInt32; programInterface: ProgramInterface; index: UInt32; bufSize: Int32; length: IntPtr; name: IntPtr);
    begin
      z_GetProgramResourceName_ovr_4(program, programInterface, index, bufSize, length, name);
    end;
    
    // added in gl4.0
    public z_GetProgramStageiv_adr := GetFuncAdr('glGetProgramStageiv');
    public z_GetProgramStageiv_ovr_0 := GetFuncOrNil&<procedure(program: UInt32; shadertype: ShaderType; pname: ProgramStagePName; var values: Int32)>(z_GetProgramStageiv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetProgramStageiv(program: UInt32; shadertype: ShaderType; pname: ProgramStagePName; values: array of Int32);
    begin
      z_GetProgramStageiv_ovr_0(program, shadertype, pname, values[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetProgramStageiv(program: UInt32; shadertype: ShaderType; pname: ProgramStagePName; var values: Int32);
    begin
      z_GetProgramStageiv_ovr_0(program, shadertype, pname, values);
    end;
    public z_GetProgramStageiv_ovr_2 := GetFuncOrNil&<procedure(program: UInt32; shadertype: ShaderType; pname: ProgramStagePName; values: IntPtr)>(z_GetProgramStageiv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetProgramStageiv(program: UInt32; shadertype: ShaderType; pname: ProgramStagePName; values: IntPtr);
    begin
      z_GetProgramStageiv_ovr_2(program, shadertype, pname, values);
    end;
    
    // added in gl4.5
    public z_GetQueryBufferObjecti64v_adr := GetFuncAdr('glGetQueryBufferObjecti64v');
    public z_GetQueryBufferObjecti64v_ovr_0 := GetFuncOrNil&<procedure(id: UInt32; buffer: UInt32; pname: QueryObjectParameterName; offset: IntPtr)>(z_GetQueryBufferObjecti64v_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetQueryBufferObjecti64v(id: UInt32; buffer: UInt32; pname: QueryObjectParameterName; offset: IntPtr);
    begin
      z_GetQueryBufferObjecti64v_ovr_0(id, buffer, pname, offset);
    end;
    
    // added in gl4.5
    public z_GetQueryBufferObjectiv_adr := GetFuncAdr('glGetQueryBufferObjectiv');
    public z_GetQueryBufferObjectiv_ovr_0 := GetFuncOrNil&<procedure(id: UInt32; buffer: UInt32; pname: QueryObjectParameterName; offset: IntPtr)>(z_GetQueryBufferObjectiv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetQueryBufferObjectiv(id: UInt32; buffer: UInt32; pname: QueryObjectParameterName; offset: IntPtr);
    begin
      z_GetQueryBufferObjectiv_ovr_0(id, buffer, pname, offset);
    end;
    
    // added in gl4.5
    public z_GetQueryBufferObjectui64v_adr := GetFuncAdr('glGetQueryBufferObjectui64v');
    public z_GetQueryBufferObjectui64v_ovr_0 := GetFuncOrNil&<procedure(id: UInt32; buffer: UInt32; pname: QueryObjectParameterName; offset: IntPtr)>(z_GetQueryBufferObjectui64v_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetQueryBufferObjectui64v(id: UInt32; buffer: UInt32; pname: QueryObjectParameterName; offset: IntPtr);
    begin
      z_GetQueryBufferObjectui64v_ovr_0(id, buffer, pname, offset);
    end;
    
    // added in gl4.5
    public z_GetQueryBufferObjectuiv_adr := GetFuncAdr('glGetQueryBufferObjectuiv');
    public z_GetQueryBufferObjectuiv_ovr_0 := GetFuncOrNil&<procedure(id: UInt32; buffer: UInt32; pname: QueryObjectParameterName; offset: IntPtr)>(z_GetQueryBufferObjectuiv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetQueryBufferObjectuiv(id: UInt32; buffer: UInt32; pname: QueryObjectParameterName; offset: IntPtr);
    begin
      z_GetQueryBufferObjectuiv_ovr_0(id, buffer, pname, offset);
    end;
    
    // added in gl4.0
    public z_GetQueryIndexediv_adr := GetFuncAdr('glGetQueryIndexediv');
    public z_GetQueryIndexediv_ovr_0 := GetFuncOrNil&<procedure(target: QueryTarget; index: UInt32; pname: QueryParameterName; var params: Int32)>(z_GetQueryIndexediv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetQueryIndexediv(target: QueryTarget; index: UInt32; pname: QueryParameterName; params: array of Int32);
    begin
      z_GetQueryIndexediv_ovr_0(target, index, pname, params[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetQueryIndexediv(target: QueryTarget; index: UInt32; pname: QueryParameterName; var params: Int32);
    begin
      z_GetQueryIndexediv_ovr_0(target, index, pname, params);
    end;
    public z_GetQueryIndexediv_ovr_2 := GetFuncOrNil&<procedure(target: QueryTarget; index: UInt32; pname: QueryParameterName; params: IntPtr)>(z_GetQueryIndexediv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetQueryIndexediv(target: QueryTarget; index: UInt32; pname: QueryParameterName; params: IntPtr);
    begin
      z_GetQueryIndexediv_ovr_2(target, index, pname, params);
    end;
    
    // added in gl1.5
    public z_GetQueryiv_adr := GetFuncAdr('glGetQueryiv');
    public z_GetQueryiv_ovr_0 := GetFuncOrNil&<procedure(target: QueryTarget; pname: QueryParameterName; var params: Int32)>(z_GetQueryiv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetQueryiv(target: QueryTarget; pname: QueryParameterName; params: array of Int32);
    begin
      z_GetQueryiv_ovr_0(target, pname, params[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetQueryiv(target: QueryTarget; pname: QueryParameterName; var params: Int32);
    begin
      z_GetQueryiv_ovr_0(target, pname, params);
    end;
    public z_GetQueryiv_ovr_2 := GetFuncOrNil&<procedure(target: QueryTarget; pname: QueryParameterName; params: IntPtr)>(z_GetQueryiv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetQueryiv(target: QueryTarget; pname: QueryParameterName; params: IntPtr);
    begin
      z_GetQueryiv_ovr_2(target, pname, params);
    end;
    
    // added in gl3.3
    public z_GetQueryObjecti64v_adr := GetFuncAdr('glGetQueryObjecti64v');
    public z_GetQueryObjecti64v_ovr_0 := GetFuncOrNil&<procedure(id: UInt32; pname: QueryObjectParameterName; var params: Int64)>(z_GetQueryObjecti64v_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetQueryObjecti64v(id: UInt32; pname: QueryObjectParameterName; params: array of Int64);
    begin
      z_GetQueryObjecti64v_ovr_0(id, pname, params[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetQueryObjecti64v(id: UInt32; pname: QueryObjectParameterName; var params: Int64);
    begin
      z_GetQueryObjecti64v_ovr_0(id, pname, params);
    end;
    public z_GetQueryObjecti64v_ovr_2 := GetFuncOrNil&<procedure(id: UInt32; pname: QueryObjectParameterName; params: IntPtr)>(z_GetQueryObjecti64v_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetQueryObjecti64v(id: UInt32; pname: QueryObjectParameterName; params: IntPtr);
    begin
      z_GetQueryObjecti64v_ovr_2(id, pname, params);
    end;
    
    // added in gl1.5
    public z_GetQueryObjectiv_adr := GetFuncAdr('glGetQueryObjectiv');
    public z_GetQueryObjectiv_ovr_0 := GetFuncOrNil&<procedure(id: UInt32; pname: QueryObjectParameterName; var params: Int32)>(z_GetQueryObjectiv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetQueryObjectiv(id: UInt32; pname: QueryObjectParameterName; params: array of Int32);
    begin
      z_GetQueryObjectiv_ovr_0(id, pname, params[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetQueryObjectiv(id: UInt32; pname: QueryObjectParameterName; var params: Int32);
    begin
      z_GetQueryObjectiv_ovr_0(id, pname, params);
    end;
    public z_GetQueryObjectiv_ovr_2 := GetFuncOrNil&<procedure(id: UInt32; pname: QueryObjectParameterName; params: IntPtr)>(z_GetQueryObjectiv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetQueryObjectiv(id: UInt32; pname: QueryObjectParameterName; params: IntPtr);
    begin
      z_GetQueryObjectiv_ovr_2(id, pname, params);
    end;
    
    // added in gl3.3
    public z_GetQueryObjectui64v_adr := GetFuncAdr('glGetQueryObjectui64v');
    public z_GetQueryObjectui64v_ovr_0 := GetFuncOrNil&<procedure(id: UInt32; pname: QueryObjectParameterName; var params: UInt64)>(z_GetQueryObjectui64v_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetQueryObjectui64v(id: UInt32; pname: QueryObjectParameterName; params: array of UInt64);
    begin
      z_GetQueryObjectui64v_ovr_0(id, pname, params[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetQueryObjectui64v(id: UInt32; pname: QueryObjectParameterName; var params: UInt64);
    begin
      z_GetQueryObjectui64v_ovr_0(id, pname, params);
    end;
    public z_GetQueryObjectui64v_ovr_2 := GetFuncOrNil&<procedure(id: UInt32; pname: QueryObjectParameterName; params: IntPtr)>(z_GetQueryObjectui64v_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetQueryObjectui64v(id: UInt32; pname: QueryObjectParameterName; params: IntPtr);
    begin
      z_GetQueryObjectui64v_ovr_2(id, pname, params);
    end;
    
    // added in gl1.5
    public z_GetQueryObjectuiv_adr := GetFuncAdr('glGetQueryObjectuiv');
    public z_GetQueryObjectuiv_ovr_0 := GetFuncOrNil&<procedure(id: UInt32; pname: QueryObjectParameterName; var params: UInt32)>(z_GetQueryObjectuiv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetQueryObjectuiv(id: UInt32; pname: QueryObjectParameterName; params: array of UInt32);
    begin
      z_GetQueryObjectuiv_ovr_0(id, pname, params[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetQueryObjectuiv(id: UInt32; pname: QueryObjectParameterName; var params: UInt32);
    begin
      z_GetQueryObjectuiv_ovr_0(id, pname, params);
    end;
    public z_GetQueryObjectuiv_ovr_2 := GetFuncOrNil&<procedure(id: UInt32; pname: QueryObjectParameterName; params: IntPtr)>(z_GetQueryObjectuiv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetQueryObjectuiv(id: UInt32; pname: QueryObjectParameterName; params: IntPtr);
    begin
      z_GetQueryObjectuiv_ovr_2(id, pname, params);
    end;
    
    // added in gl3.0
    public z_GetRenderbufferParameteriv_adr := GetFuncAdr('glGetRenderbufferParameteriv');
    public z_GetRenderbufferParameteriv_ovr_0 := GetFuncOrNil&<procedure(target: RenderbufferTarget; pname: RenderbufferParameterName; var params: Int32)>(z_GetRenderbufferParameteriv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetRenderbufferParameteriv(target: RenderbufferTarget; pname: RenderbufferParameterName; params: array of Int32);
    begin
      z_GetRenderbufferParameteriv_ovr_0(target, pname, params[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetRenderbufferParameteriv(target: RenderbufferTarget; pname: RenderbufferParameterName; var params: Int32);
    begin
      z_GetRenderbufferParameteriv_ovr_0(target, pname, params);
    end;
    public z_GetRenderbufferParameteriv_ovr_2 := GetFuncOrNil&<procedure(target: RenderbufferTarget; pname: RenderbufferParameterName; params: IntPtr)>(z_GetRenderbufferParameteriv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetRenderbufferParameteriv(target: RenderbufferTarget; pname: RenderbufferParameterName; params: IntPtr);
    begin
      z_GetRenderbufferParameteriv_ovr_2(target, pname, params);
    end;
    
    // added in gl3.3
    public z_GetSamplerParameterfv_adr := GetFuncAdr('glGetSamplerParameterfv');
    public z_GetSamplerParameterfv_ovr_0 := GetFuncOrNil&<procedure(sampler: UInt32; pname: SamplerParameterF; var params: single)>(z_GetSamplerParameterfv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetSamplerParameterfv(sampler: UInt32; pname: SamplerParameterF; params: array of single);
    begin
      z_GetSamplerParameterfv_ovr_0(sampler, pname, params[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetSamplerParameterfv(sampler: UInt32; pname: SamplerParameterF; var params: single);
    begin
      z_GetSamplerParameterfv_ovr_0(sampler, pname, params);
    end;
    public z_GetSamplerParameterfv_ovr_2 := GetFuncOrNil&<procedure(sampler: UInt32; pname: SamplerParameterF; params: IntPtr)>(z_GetSamplerParameterfv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetSamplerParameterfv(sampler: UInt32; pname: SamplerParameterF; params: IntPtr);
    begin
      z_GetSamplerParameterfv_ovr_2(sampler, pname, params);
    end;
    
    // added in gl3.3
    public z_GetSamplerParameterIiv_adr := GetFuncAdr('glGetSamplerParameterIiv');
    public z_GetSamplerParameterIiv_ovr_0 := GetFuncOrNil&<procedure(sampler: UInt32; pname: SamplerParameterI; var params: Int32)>(z_GetSamplerParameterIiv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetSamplerParameterIiv(sampler: UInt32; pname: SamplerParameterI; params: array of Int32);
    begin
      z_GetSamplerParameterIiv_ovr_0(sampler, pname, params[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetSamplerParameterIiv(sampler: UInt32; pname: SamplerParameterI; var params: Int32);
    begin
      z_GetSamplerParameterIiv_ovr_0(sampler, pname, params);
    end;
    public z_GetSamplerParameterIiv_ovr_2 := GetFuncOrNil&<procedure(sampler: UInt32; pname: SamplerParameterI; params: IntPtr)>(z_GetSamplerParameterIiv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetSamplerParameterIiv(sampler: UInt32; pname: SamplerParameterI; params: IntPtr);
    begin
      z_GetSamplerParameterIiv_ovr_2(sampler, pname, params);
    end;
    
    // added in gl3.3
    public z_GetSamplerParameterIuiv_adr := GetFuncAdr('glGetSamplerParameterIuiv');
    public z_GetSamplerParameterIuiv_ovr_0 := GetFuncOrNil&<procedure(sampler: UInt32; pname: SamplerParameterI; var params: UInt32)>(z_GetSamplerParameterIuiv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetSamplerParameterIuiv(sampler: UInt32; pname: SamplerParameterI; params: array of UInt32);
    begin
      z_GetSamplerParameterIuiv_ovr_0(sampler, pname, params[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetSamplerParameterIuiv(sampler: UInt32; pname: SamplerParameterI; var params: UInt32);
    begin
      z_GetSamplerParameterIuiv_ovr_0(sampler, pname, params);
    end;
    public z_GetSamplerParameterIuiv_ovr_2 := GetFuncOrNil&<procedure(sampler: UInt32; pname: SamplerParameterI; params: IntPtr)>(z_GetSamplerParameterIuiv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetSamplerParameterIuiv(sampler: UInt32; pname: SamplerParameterI; params: IntPtr);
    begin
      z_GetSamplerParameterIuiv_ovr_2(sampler, pname, params);
    end;
    
    // added in gl3.3
    public z_GetSamplerParameteriv_adr := GetFuncAdr('glGetSamplerParameteriv');
    public z_GetSamplerParameteriv_ovr_0 := GetFuncOrNil&<procedure(sampler: UInt32; pname: SamplerParameterI; var params: Int32)>(z_GetSamplerParameteriv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetSamplerParameteriv(sampler: UInt32; pname: SamplerParameterI; params: array of Int32);
    begin
      z_GetSamplerParameteriv_ovr_0(sampler, pname, params[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetSamplerParameteriv(sampler: UInt32; pname: SamplerParameterI; var params: Int32);
    begin
      z_GetSamplerParameteriv_ovr_0(sampler, pname, params);
    end;
    public z_GetSamplerParameteriv_ovr_2 := GetFuncOrNil&<procedure(sampler: UInt32; pname: SamplerParameterI; params: IntPtr)>(z_GetSamplerParameteriv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetSamplerParameteriv(sampler: UInt32; pname: SamplerParameterI; params: IntPtr);
    begin
      z_GetSamplerParameteriv_ovr_2(sampler, pname, params);
    end;
    
    // added in gl2.0
    public z_GetShaderInfoLog_adr := GetFuncAdr('glGetShaderInfoLog');
    public z_GetShaderInfoLog_ovr_0 := GetFuncOrNil&<procedure(shader: UInt32; bufSize: Int32; var length: Int32; infoLog: IntPtr)>(z_GetShaderInfoLog_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetShaderInfoLog(shader: UInt32; bufSize: Int32; length: array of Int32; infoLog: string);
    begin
      var par_4_str_ptr := Marshal.StringToHGlobalAnsi(infoLog);
      z_GetShaderInfoLog_ovr_0(shader, bufSize, length[0], par_4_str_ptr);
      Marshal.FreeHGlobal(par_4_str_ptr);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetShaderInfoLog(shader: UInt32; bufSize: Int32; length: array of Int32; infoLog: IntPtr);
    begin
      z_GetShaderInfoLog_ovr_0(shader, bufSize, length[0], infoLog);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetShaderInfoLog(shader: UInt32; bufSize: Int32; var length: Int32; infoLog: string);
    begin
      var par_4_str_ptr := Marshal.StringToHGlobalAnsi(infoLog);
      z_GetShaderInfoLog_ovr_0(shader, bufSize, length, par_4_str_ptr);
      Marshal.FreeHGlobal(par_4_str_ptr);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetShaderInfoLog(shader: UInt32; bufSize: Int32; var length: Int32; infoLog: IntPtr);
    begin
      z_GetShaderInfoLog_ovr_0(shader, bufSize, length, infoLog);
    end;
    public z_GetShaderInfoLog_ovr_4 := GetFuncOrNil&<procedure(shader: UInt32; bufSize: Int32; length: IntPtr; infoLog: IntPtr)>(z_GetShaderInfoLog_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetShaderInfoLog(shader: UInt32; bufSize: Int32; length: IntPtr; infoLog: string);
    begin
      var par_4_str_ptr := Marshal.StringToHGlobalAnsi(infoLog);
      z_GetShaderInfoLog_ovr_4(shader, bufSize, length, par_4_str_ptr);
      Marshal.FreeHGlobal(par_4_str_ptr);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetShaderInfoLog(shader: UInt32; bufSize: Int32; length: IntPtr; infoLog: IntPtr);
    begin
      z_GetShaderInfoLog_ovr_4(shader, bufSize, length, infoLog);
    end;
    
    // added in gl2.0
    public z_GetShaderiv_adr := GetFuncAdr('glGetShaderiv');
    public z_GetShaderiv_ovr_0 := GetFuncOrNil&<procedure(shader: UInt32; pname: ShaderParameterName; var params: Int32)>(z_GetShaderiv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetShaderiv(shader: UInt32; pname: ShaderParameterName; params: array of Int32);
    begin
      z_GetShaderiv_ovr_0(shader, pname, params[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetShaderiv(shader: UInt32; pname: ShaderParameterName; var params: Int32);
    begin
      z_GetShaderiv_ovr_0(shader, pname, params);
    end;
    public z_GetShaderiv_ovr_2 := GetFuncOrNil&<procedure(shader: UInt32; pname: ShaderParameterName; params: IntPtr)>(z_GetShaderiv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetShaderiv(shader: UInt32; pname: ShaderParameterName; params: IntPtr);
    begin
      z_GetShaderiv_ovr_2(shader, pname, params);
    end;
    
    // added in gl4.1
    public z_GetShaderPrecisionFormat_adr := GetFuncAdr('glGetShaderPrecisionFormat');
    public z_GetShaderPrecisionFormat_ovr_0 := GetFuncOrNil&<procedure(shadertype: ShaderType; precisiontype: PrecisionType; var range: Int32; var precision: Int32)>(z_GetShaderPrecisionFormat_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetShaderPrecisionFormat(shadertype: ShaderType; precisiontype: PrecisionType; range: array of Int32; precision: array of Int32);
    begin
      z_GetShaderPrecisionFormat_ovr_0(shadertype, precisiontype, range[0], precision[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetShaderPrecisionFormat(shadertype: ShaderType; precisiontype: PrecisionType; range: array of Int32; var precision: Int32);
    begin
      z_GetShaderPrecisionFormat_ovr_0(shadertype, precisiontype, range[0], precision);
    end;
    public z_GetShaderPrecisionFormat_ovr_2 := GetFuncOrNil&<procedure(shadertype: ShaderType; precisiontype: PrecisionType; var range: Int32; precision: IntPtr)>(z_GetShaderPrecisionFormat_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetShaderPrecisionFormat(shadertype: ShaderType; precisiontype: PrecisionType; range: array of Int32; precision: IntPtr);
    begin
      z_GetShaderPrecisionFormat_ovr_2(shadertype, precisiontype, range[0], precision);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetShaderPrecisionFormat(shadertype: ShaderType; precisiontype: PrecisionType; var range: Int32; precision: array of Int32);
    begin
      z_GetShaderPrecisionFormat_ovr_0(shadertype, precisiontype, range, precision[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetShaderPrecisionFormat(shadertype: ShaderType; precisiontype: PrecisionType; var range: Int32; var precision: Int32);
    begin
      z_GetShaderPrecisionFormat_ovr_0(shadertype, precisiontype, range, precision);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetShaderPrecisionFormat(shadertype: ShaderType; precisiontype: PrecisionType; var range: Int32; precision: IntPtr);
    begin
      z_GetShaderPrecisionFormat_ovr_2(shadertype, precisiontype, range, precision);
    end;
    public z_GetShaderPrecisionFormat_ovr_6 := GetFuncOrNil&<procedure(shadertype: ShaderType; precisiontype: PrecisionType; range: IntPtr; var precision: Int32)>(z_GetShaderPrecisionFormat_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetShaderPrecisionFormat(shadertype: ShaderType; precisiontype: PrecisionType; range: IntPtr; precision: array of Int32);
    begin
      z_GetShaderPrecisionFormat_ovr_6(shadertype, precisiontype, range, precision[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetShaderPrecisionFormat(shadertype: ShaderType; precisiontype: PrecisionType; range: IntPtr; var precision: Int32);
    begin
      z_GetShaderPrecisionFormat_ovr_6(shadertype, precisiontype, range, precision);
    end;
    public z_GetShaderPrecisionFormat_ovr_8 := GetFuncOrNil&<procedure(shadertype: ShaderType; precisiontype: PrecisionType; range: IntPtr; precision: IntPtr)>(z_GetShaderPrecisionFormat_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetShaderPrecisionFormat(shadertype: ShaderType; precisiontype: PrecisionType; range: IntPtr; precision: IntPtr);
    begin
      z_GetShaderPrecisionFormat_ovr_8(shadertype, precisiontype, range, precision);
    end;
    
    // added in gl2.0
    public z_GetShaderSource_adr := GetFuncAdr('glGetShaderSource');
    public z_GetShaderSource_ovr_0 := GetFuncOrNil&<procedure(shader: UInt32; bufSize: Int32; var length: Int32; source: IntPtr)>(z_GetShaderSource_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetShaderSource(shader: UInt32; bufSize: Int32; length: array of Int32; source: string);
    begin
      var par_4_str_ptr := Marshal.StringToHGlobalAnsi(source);
      z_GetShaderSource_ovr_0(shader, bufSize, length[0], par_4_str_ptr);
      Marshal.FreeHGlobal(par_4_str_ptr);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetShaderSource(shader: UInt32; bufSize: Int32; length: array of Int32; source: IntPtr);
    begin
      z_GetShaderSource_ovr_0(shader, bufSize, length[0], source);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetShaderSource(shader: UInt32; bufSize: Int32; var length: Int32; source: string);
    begin
      var par_4_str_ptr := Marshal.StringToHGlobalAnsi(source);
      z_GetShaderSource_ovr_0(shader, bufSize, length, par_4_str_ptr);
      Marshal.FreeHGlobal(par_4_str_ptr);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetShaderSource(shader: UInt32; bufSize: Int32; var length: Int32; source: IntPtr);
    begin
      z_GetShaderSource_ovr_0(shader, bufSize, length, source);
    end;
    public z_GetShaderSource_ovr_4 := GetFuncOrNil&<procedure(shader: UInt32; bufSize: Int32; length: IntPtr; source: IntPtr)>(z_GetShaderSource_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetShaderSource(shader: UInt32; bufSize: Int32; length: IntPtr; source: string);
    begin
      var par_4_str_ptr := Marshal.StringToHGlobalAnsi(source);
      z_GetShaderSource_ovr_4(shader, bufSize, length, par_4_str_ptr);
      Marshal.FreeHGlobal(par_4_str_ptr);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetShaderSource(shader: UInt32; bufSize: Int32; length: IntPtr; source: IntPtr);
    begin
      z_GetShaderSource_ovr_4(shader, bufSize, length, source);
    end;
    
    // added in gl1.0
    public static [Result: MarshalAs(UnmanagedType.LPStr)] function z_GetString(name: StringName): string;
    external 'opengl32.dll' name 'glGetString';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetString(name: StringName): string := z_GetString;
    
    // added in gl3.0
    public z_GetStringi_adr := GetFuncAdr('glGetStringi');
    public z_GetStringi_ovr_0 := GetFuncOrNil&<function(name: StringName; index: UInt32): IntPtr>(z_GetStringi_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetStringi(name: StringName; index: UInt32): string;
    begin
      par_0_str_ptr := z_GetStringi_ovr_0(name, index);
      Result := Marshal.PtrToStringAnsi(par_0_str_ptr);
    end;
    
    // added in gl4.0
    public z_GetSubroutineIndex_adr := GetFuncAdr('glGetSubroutineIndex');
    public z_GetSubroutineIndex_ovr_0 := GetFuncOrNil&<function(program: UInt32; shadertype: ShaderType; name: IntPtr): UInt32>(z_GetSubroutineIndex_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetSubroutineIndex(program: UInt32; shadertype: ShaderType; name: string): UInt32;
    begin
      var par_3_str_ptr := Marshal.StringToHGlobalAnsi(name);
      Result := z_GetSubroutineIndex_ovr_0(program, shadertype, par_3_str_ptr);
      Marshal.FreeHGlobal(par_3_str_ptr);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetSubroutineIndex(program: UInt32; shadertype: ShaderType; name: IntPtr): UInt32;
    begin
      Result := z_GetSubroutineIndex_ovr_0(program, shadertype, name);
    end;
    
    // added in gl4.0
    public z_GetSubroutineUniformLocation_adr := GetFuncAdr('glGetSubroutineUniformLocation');
    public z_GetSubroutineUniformLocation_ovr_0 := GetFuncOrNil&<function(program: UInt32; shadertype: ShaderType; name: IntPtr): Int32>(z_GetSubroutineUniformLocation_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetSubroutineUniformLocation(program: UInt32; shadertype: ShaderType; name: string): Int32;
    begin
      var par_3_str_ptr := Marshal.StringToHGlobalAnsi(name);
      Result := z_GetSubroutineUniformLocation_ovr_0(program, shadertype, par_3_str_ptr);
      Marshal.FreeHGlobal(par_3_str_ptr);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetSubroutineUniformLocation(program: UInt32; shadertype: ShaderType; name: IntPtr): Int32;
    begin
      Result := z_GetSubroutineUniformLocation_ovr_0(program, shadertype, name);
    end;
    
    // added in gl3.2
    public z_GetSynciv_adr := GetFuncAdr('glGetSynciv');
    public z_GetSynciv_ovr_0 := GetFuncOrNil&<procedure(sync: GLsync; pname: SyncParameterName; count: Int32; var length: Int32; var values: Int32)>(z_GetSynciv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetSynciv(sync: GLsync; pname: SyncParameterName; count: Int32; length: array of Int32; values: array of Int32);
    begin
      z_GetSynciv_ovr_0(sync, pname, count, length[0], values[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetSynciv(sync: GLsync; pname: SyncParameterName; count: Int32; length: array of Int32; var values: Int32);
    begin
      z_GetSynciv_ovr_0(sync, pname, count, length[0], values);
    end;
    public z_GetSynciv_ovr_2 := GetFuncOrNil&<procedure(sync: GLsync; pname: SyncParameterName; count: Int32; var length: Int32; values: IntPtr)>(z_GetSynciv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetSynciv(sync: GLsync; pname: SyncParameterName; count: Int32; length: array of Int32; values: IntPtr);
    begin
      z_GetSynciv_ovr_2(sync, pname, count, length[0], values);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetSynciv(sync: GLsync; pname: SyncParameterName; count: Int32; var length: Int32; values: array of Int32);
    begin
      z_GetSynciv_ovr_0(sync, pname, count, length, values[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetSynciv(sync: GLsync; pname: SyncParameterName; count: Int32; var length: Int32; var values: Int32);
    begin
      z_GetSynciv_ovr_0(sync, pname, count, length, values);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetSynciv(sync: GLsync; pname: SyncParameterName; count: Int32; var length: Int32; values: IntPtr);
    begin
      z_GetSynciv_ovr_2(sync, pname, count, length, values);
    end;
    public z_GetSynciv_ovr_6 := GetFuncOrNil&<procedure(sync: GLsync; pname: SyncParameterName; count: Int32; length: IntPtr; var values: Int32)>(z_GetSynciv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetSynciv(sync: GLsync; pname: SyncParameterName; count: Int32; length: IntPtr; values: array of Int32);
    begin
      z_GetSynciv_ovr_6(sync, pname, count, length, values[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetSynciv(sync: GLsync; pname: SyncParameterName; count: Int32; length: IntPtr; var values: Int32);
    begin
      z_GetSynciv_ovr_6(sync, pname, count, length, values);
    end;
    public z_GetSynciv_ovr_8 := GetFuncOrNil&<procedure(sync: GLsync; pname: SyncParameterName; count: Int32; length: IntPtr; values: IntPtr)>(z_GetSynciv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetSynciv(sync: GLsync; pname: SyncParameterName; count: Int32; length: IntPtr; values: IntPtr);
    begin
      z_GetSynciv_ovr_8(sync, pname, count, length, values);
    end;
    
    // added in gl1.0
    public static procedure z_GetTexImage(target: TextureTarget; level: Int32; format: PixelFormat; type: PixelType; pixels: IntPtr);
    external 'opengl32.dll' name 'glGetTexImage';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetTexImage(target: TextureTarget; level: Int32; format: PixelFormat; type: PixelType; pixels: IntPtr) := z_GetTexImage;
    
    // added in gl1.0
    public static procedure z_GetTexLevelParameterfv(target: TextureTarget; level: Int32; pname: GetTextureParameter; [MarshalAs(UnmanagedType.LPArray)] params: array of single);
    external 'opengl32.dll' name 'glGetTexLevelParameterfv';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetTexLevelParameterfv(target: TextureTarget; level: Int32; pname: GetTextureParameter; params: array of single) := z_GetTexLevelParameterfv;
    public static procedure z_GetTexLevelParameterfv(target: TextureTarget; level: Int32; pname: GetTextureParameter; var params: single);
    external 'opengl32.dll' name 'glGetTexLevelParameterfv';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetTexLevelParameterfv(target: TextureTarget; level: Int32; pname: GetTextureParameter; var params: single) := z_GetTexLevelParameterfv;
    public static procedure z_GetTexLevelParameterfv(target: TextureTarget; level: Int32; pname: GetTextureParameter; params: IntPtr);
    external 'opengl32.dll' name 'glGetTexLevelParameterfv';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetTexLevelParameterfv(target: TextureTarget; level: Int32; pname: GetTextureParameter; params: IntPtr) := z_GetTexLevelParameterfv;
    
    // added in gl1.0
    public static procedure z_GetTexLevelParameteriv(target: TextureTarget; level: Int32; pname: GetTextureParameter; [MarshalAs(UnmanagedType.LPArray)] params: array of Int32);
    external 'opengl32.dll' name 'glGetTexLevelParameteriv';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetTexLevelParameteriv(target: TextureTarget; level: Int32; pname: GetTextureParameter; params: array of Int32) := z_GetTexLevelParameteriv;
    public static procedure z_GetTexLevelParameteriv(target: TextureTarget; level: Int32; pname: GetTextureParameter; var params: Int32);
    external 'opengl32.dll' name 'glGetTexLevelParameteriv';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetTexLevelParameteriv(target: TextureTarget; level: Int32; pname: GetTextureParameter; var params: Int32) := z_GetTexLevelParameteriv;
    public static procedure z_GetTexLevelParameteriv(target: TextureTarget; level: Int32; pname: GetTextureParameter; params: IntPtr);
    external 'opengl32.dll' name 'glGetTexLevelParameteriv';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetTexLevelParameteriv(target: TextureTarget; level: Int32; pname: GetTextureParameter; params: IntPtr) := z_GetTexLevelParameteriv;
    
    // added in gl1.0
    public static procedure z_GetTexParameterfv(target: TextureTarget; pname: GetTextureParameter; [MarshalAs(UnmanagedType.LPArray)] params: array of single);
    external 'opengl32.dll' name 'glGetTexParameterfv';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetTexParameterfv(target: TextureTarget; pname: GetTextureParameter; params: array of single) := z_GetTexParameterfv;
    public static procedure z_GetTexParameterfv(target: TextureTarget; pname: GetTextureParameter; var params: single);
    external 'opengl32.dll' name 'glGetTexParameterfv';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetTexParameterfv(target: TextureTarget; pname: GetTextureParameter; var params: single) := z_GetTexParameterfv;
    public static procedure z_GetTexParameterfv(target: TextureTarget; pname: GetTextureParameter; params: IntPtr);
    external 'opengl32.dll' name 'glGetTexParameterfv';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetTexParameterfv(target: TextureTarget; pname: GetTextureParameter; params: IntPtr) := z_GetTexParameterfv;
    
    // added in gl3.0
    public z_GetTexParameterIiv_adr := GetFuncAdr('glGetTexParameterIiv');
    public z_GetTexParameterIiv_ovr_0 := GetFuncOrNil&<procedure(target: TextureTarget; pname: GetTextureParameter; var params: Int32)>(z_GetTexParameterIiv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetTexParameterIiv(target: TextureTarget; pname: GetTextureParameter; params: array of Int32);
    begin
      z_GetTexParameterIiv_ovr_0(target, pname, params[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetTexParameterIiv(target: TextureTarget; pname: GetTextureParameter; var params: Int32);
    begin
      z_GetTexParameterIiv_ovr_0(target, pname, params);
    end;
    public z_GetTexParameterIiv_ovr_2 := GetFuncOrNil&<procedure(target: TextureTarget; pname: GetTextureParameter; params: IntPtr)>(z_GetTexParameterIiv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetTexParameterIiv(target: TextureTarget; pname: GetTextureParameter; params: IntPtr);
    begin
      z_GetTexParameterIiv_ovr_2(target, pname, params);
    end;
    
    // added in gl3.0
    public z_GetTexParameterIuiv_adr := GetFuncAdr('glGetTexParameterIuiv');
    public z_GetTexParameterIuiv_ovr_0 := GetFuncOrNil&<procedure(target: TextureTarget; pname: GetTextureParameter; var params: UInt32)>(z_GetTexParameterIuiv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetTexParameterIuiv(target: TextureTarget; pname: GetTextureParameter; params: array of UInt32);
    begin
      z_GetTexParameterIuiv_ovr_0(target, pname, params[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetTexParameterIuiv(target: TextureTarget; pname: GetTextureParameter; var params: UInt32);
    begin
      z_GetTexParameterIuiv_ovr_0(target, pname, params);
    end;
    public z_GetTexParameterIuiv_ovr_2 := GetFuncOrNil&<procedure(target: TextureTarget; pname: GetTextureParameter; params: IntPtr)>(z_GetTexParameterIuiv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetTexParameterIuiv(target: TextureTarget; pname: GetTextureParameter; params: IntPtr);
    begin
      z_GetTexParameterIuiv_ovr_2(target, pname, params);
    end;
    
    // added in gl1.0
    public static procedure z_GetTexParameteriv(target: TextureTarget; pname: GetTextureParameter; [MarshalAs(UnmanagedType.LPArray)] params: array of Int32);
    external 'opengl32.dll' name 'glGetTexParameteriv';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetTexParameteriv(target: TextureTarget; pname: GetTextureParameter; params: array of Int32) := z_GetTexParameteriv;
    public static procedure z_GetTexParameteriv(target: TextureTarget; pname: GetTextureParameter; var params: Int32);
    external 'opengl32.dll' name 'glGetTexParameteriv';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetTexParameteriv(target: TextureTarget; pname: GetTextureParameter; var params: Int32) := z_GetTexParameteriv;
    public static procedure z_GetTexParameteriv(target: TextureTarget; pname: GetTextureParameter; params: IntPtr);
    external 'opengl32.dll' name 'glGetTexParameteriv';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetTexParameteriv(target: TextureTarget; pname: GetTextureParameter; params: IntPtr) := z_GetTexParameteriv;
    
    // added in gl4.5
    public z_GetTextureImage_adr := GetFuncAdr('glGetTextureImage');
    public z_GetTextureImage_ovr_0 := GetFuncOrNil&<procedure(texture: UInt32; level: Int32; format: PixelFormat; type: PixelType; bufSize: Int32; pixels: IntPtr)>(z_GetTextureImage_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetTextureImage(texture: UInt32; level: Int32; format: PixelFormat; type: PixelType; bufSize: Int32; pixels: IntPtr);
    begin
      z_GetTextureImage_ovr_0(texture, level, format, type, bufSize, pixels);
    end;
    
    // added in gl4.5
    public z_GetTextureLevelParameterfv_adr := GetFuncAdr('glGetTextureLevelParameterfv');
    public z_GetTextureLevelParameterfv_ovr_0 := GetFuncOrNil&<procedure(texture: UInt32; level: Int32; pname: GetTextureParameter; var params: single)>(z_GetTextureLevelParameterfv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetTextureLevelParameterfv(texture: UInt32; level: Int32; pname: GetTextureParameter; params: array of single);
    begin
      z_GetTextureLevelParameterfv_ovr_0(texture, level, pname, params[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetTextureLevelParameterfv(texture: UInt32; level: Int32; pname: GetTextureParameter; var params: single);
    begin
      z_GetTextureLevelParameterfv_ovr_0(texture, level, pname, params);
    end;
    public z_GetTextureLevelParameterfv_ovr_2 := GetFuncOrNil&<procedure(texture: UInt32; level: Int32; pname: GetTextureParameter; params: IntPtr)>(z_GetTextureLevelParameterfv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetTextureLevelParameterfv(texture: UInt32; level: Int32; pname: GetTextureParameter; params: IntPtr);
    begin
      z_GetTextureLevelParameterfv_ovr_2(texture, level, pname, params);
    end;
    
    // added in gl4.5
    public z_GetTextureLevelParameteriv_adr := GetFuncAdr('glGetTextureLevelParameteriv');
    public z_GetTextureLevelParameteriv_ovr_0 := GetFuncOrNil&<procedure(texture: UInt32; level: Int32; pname: GetTextureParameter; var params: Int32)>(z_GetTextureLevelParameteriv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetTextureLevelParameteriv(texture: UInt32; level: Int32; pname: GetTextureParameter; params: array of Int32);
    begin
      z_GetTextureLevelParameteriv_ovr_0(texture, level, pname, params[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetTextureLevelParameteriv(texture: UInt32; level: Int32; pname: GetTextureParameter; var params: Int32);
    begin
      z_GetTextureLevelParameteriv_ovr_0(texture, level, pname, params);
    end;
    public z_GetTextureLevelParameteriv_ovr_2 := GetFuncOrNil&<procedure(texture: UInt32; level: Int32; pname: GetTextureParameter; params: IntPtr)>(z_GetTextureLevelParameteriv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetTextureLevelParameteriv(texture: UInt32; level: Int32; pname: GetTextureParameter; params: IntPtr);
    begin
      z_GetTextureLevelParameteriv_ovr_2(texture, level, pname, params);
    end;
    
    // added in gl4.5
    public z_GetTextureParameterfv_adr := GetFuncAdr('glGetTextureParameterfv');
    public z_GetTextureParameterfv_ovr_0 := GetFuncOrNil&<procedure(texture: UInt32; pname: GetTextureParameter; var params: single)>(z_GetTextureParameterfv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetTextureParameterfv(texture: UInt32; pname: GetTextureParameter; params: array of single);
    begin
      z_GetTextureParameterfv_ovr_0(texture, pname, params[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetTextureParameterfv(texture: UInt32; pname: GetTextureParameter; var params: single);
    begin
      z_GetTextureParameterfv_ovr_0(texture, pname, params);
    end;
    public z_GetTextureParameterfv_ovr_2 := GetFuncOrNil&<procedure(texture: UInt32; pname: GetTextureParameter; params: IntPtr)>(z_GetTextureParameterfv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetTextureParameterfv(texture: UInt32; pname: GetTextureParameter; params: IntPtr);
    begin
      z_GetTextureParameterfv_ovr_2(texture, pname, params);
    end;
    
    // added in gl4.5
    public z_GetTextureParameterIiv_adr := GetFuncAdr('glGetTextureParameterIiv');
    public z_GetTextureParameterIiv_ovr_0 := GetFuncOrNil&<procedure(texture: UInt32; pname: GetTextureParameter; var params: Int32)>(z_GetTextureParameterIiv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetTextureParameterIiv(texture: UInt32; pname: GetTextureParameter; params: array of Int32);
    begin
      z_GetTextureParameterIiv_ovr_0(texture, pname, params[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetTextureParameterIiv(texture: UInt32; pname: GetTextureParameter; var params: Int32);
    begin
      z_GetTextureParameterIiv_ovr_0(texture, pname, params);
    end;
    public z_GetTextureParameterIiv_ovr_2 := GetFuncOrNil&<procedure(texture: UInt32; pname: GetTextureParameter; params: IntPtr)>(z_GetTextureParameterIiv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetTextureParameterIiv(texture: UInt32; pname: GetTextureParameter; params: IntPtr);
    begin
      z_GetTextureParameterIiv_ovr_2(texture, pname, params);
    end;
    
    // added in gl4.5
    public z_GetTextureParameterIuiv_adr := GetFuncAdr('glGetTextureParameterIuiv');
    public z_GetTextureParameterIuiv_ovr_0 := GetFuncOrNil&<procedure(texture: UInt32; pname: GetTextureParameter; var params: UInt32)>(z_GetTextureParameterIuiv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetTextureParameterIuiv(texture: UInt32; pname: GetTextureParameter; params: array of UInt32);
    begin
      z_GetTextureParameterIuiv_ovr_0(texture, pname, params[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetTextureParameterIuiv(texture: UInt32; pname: GetTextureParameter; var params: UInt32);
    begin
      z_GetTextureParameterIuiv_ovr_0(texture, pname, params);
    end;
    public z_GetTextureParameterIuiv_ovr_2 := GetFuncOrNil&<procedure(texture: UInt32; pname: GetTextureParameter; params: IntPtr)>(z_GetTextureParameterIuiv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetTextureParameterIuiv(texture: UInt32; pname: GetTextureParameter; params: IntPtr);
    begin
      z_GetTextureParameterIuiv_ovr_2(texture, pname, params);
    end;
    
    // added in gl4.5
    public z_GetTextureParameteriv_adr := GetFuncAdr('glGetTextureParameteriv');
    public z_GetTextureParameteriv_ovr_0 := GetFuncOrNil&<procedure(texture: UInt32; pname: GetTextureParameter; var params: Int32)>(z_GetTextureParameteriv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetTextureParameteriv(texture: UInt32; pname: GetTextureParameter; params: array of Int32);
    begin
      z_GetTextureParameteriv_ovr_0(texture, pname, params[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetTextureParameteriv(texture: UInt32; pname: GetTextureParameter; var params: Int32);
    begin
      z_GetTextureParameteriv_ovr_0(texture, pname, params);
    end;
    public z_GetTextureParameteriv_ovr_2 := GetFuncOrNil&<procedure(texture: UInt32; pname: GetTextureParameter; params: IntPtr)>(z_GetTextureParameteriv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetTextureParameteriv(texture: UInt32; pname: GetTextureParameter; params: IntPtr);
    begin
      z_GetTextureParameteriv_ovr_2(texture, pname, params);
    end;
    
    // added in gl4.5
    public z_GetTextureSubImage_adr := GetFuncAdr('glGetTextureSubImage');
    public z_GetTextureSubImage_ovr_0 := GetFuncOrNil&<procedure(texture: UInt32; level: Int32; xoffset: Int32; yoffset: Int32; zoffset: Int32; width: Int32; height: Int32; depth: Int32; format: PixelFormat; type: PixelType; bufSize: Int32; pixels: IntPtr)>(z_GetTextureSubImage_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetTextureSubImage(texture: UInt32; level: Int32; xoffset: Int32; yoffset: Int32; zoffset: Int32; width: Int32; height: Int32; depth: Int32; format: PixelFormat; type: PixelType; bufSize: Int32; pixels: IntPtr);
    begin
      z_GetTextureSubImage_ovr_0(texture, level, xoffset, yoffset, zoffset, width, height, depth, format, type, bufSize, pixels);
    end;
    
    // added in gl4.5
    public z_GetTransformFeedbacki_v_adr := GetFuncAdr('glGetTransformFeedbacki_v');
    public z_GetTransformFeedbacki_v_ovr_0 := GetFuncOrNil&<procedure(xfb: UInt32; pname: TransformFeedbackPName; index: UInt32; var param: Int32)>(z_GetTransformFeedbacki_v_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetTransformFeedbacki_v(xfb: UInt32; pname: TransformFeedbackPName; index: UInt32; param: array of Int32);
    begin
      z_GetTransformFeedbacki_v_ovr_0(xfb, pname, index, param[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetTransformFeedbacki_v(xfb: UInt32; pname: TransformFeedbackPName; index: UInt32; var param: Int32);
    begin
      z_GetTransformFeedbacki_v_ovr_0(xfb, pname, index, param);
    end;
    public z_GetTransformFeedbacki_v_ovr_2 := GetFuncOrNil&<procedure(xfb: UInt32; pname: TransformFeedbackPName; index: UInt32; param: IntPtr)>(z_GetTransformFeedbacki_v_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetTransformFeedbacki_v(xfb: UInt32; pname: TransformFeedbackPName; index: UInt32; param: IntPtr);
    begin
      z_GetTransformFeedbacki_v_ovr_2(xfb, pname, index, param);
    end;
    
    // added in gl4.5
    public z_GetTransformFeedbacki64_v_adr := GetFuncAdr('glGetTransformFeedbacki64_v');
    public z_GetTransformFeedbacki64_v_ovr_0 := GetFuncOrNil&<procedure(xfb: UInt32; pname: TransformFeedbackPName; index: UInt32; var param: Int64)>(z_GetTransformFeedbacki64_v_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetTransformFeedbacki64_v(xfb: UInt32; pname: TransformFeedbackPName; index: UInt32; param: array of Int64);
    begin
      z_GetTransformFeedbacki64_v_ovr_0(xfb, pname, index, param[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetTransformFeedbacki64_v(xfb: UInt32; pname: TransformFeedbackPName; index: UInt32; var param: Int64);
    begin
      z_GetTransformFeedbacki64_v_ovr_0(xfb, pname, index, param);
    end;
    public z_GetTransformFeedbacki64_v_ovr_2 := GetFuncOrNil&<procedure(xfb: UInt32; pname: TransformFeedbackPName; index: UInt32; param: IntPtr)>(z_GetTransformFeedbacki64_v_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetTransformFeedbacki64_v(xfb: UInt32; pname: TransformFeedbackPName; index: UInt32; param: IntPtr);
    begin
      z_GetTransformFeedbacki64_v_ovr_2(xfb, pname, index, param);
    end;
    
    // added in gl4.5
    public z_GetTransformFeedbackiv_adr := GetFuncAdr('glGetTransformFeedbackiv');
    public z_GetTransformFeedbackiv_ovr_0 := GetFuncOrNil&<procedure(xfb: UInt32; pname: TransformFeedbackPName; var param: Int32)>(z_GetTransformFeedbackiv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetTransformFeedbackiv(xfb: UInt32; pname: TransformFeedbackPName; param: array of Int32);
    begin
      z_GetTransformFeedbackiv_ovr_0(xfb, pname, param[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetTransformFeedbackiv(xfb: UInt32; pname: TransformFeedbackPName; var param: Int32);
    begin
      z_GetTransformFeedbackiv_ovr_0(xfb, pname, param);
    end;
    public z_GetTransformFeedbackiv_ovr_2 := GetFuncOrNil&<procedure(xfb: UInt32; pname: TransformFeedbackPName; param: IntPtr)>(z_GetTransformFeedbackiv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetTransformFeedbackiv(xfb: UInt32; pname: TransformFeedbackPName; param: IntPtr);
    begin
      z_GetTransformFeedbackiv_ovr_2(xfb, pname, param);
    end;
    
    // added in gl3.0
    public z_GetTransformFeedbackVarying_adr := GetFuncAdr('glGetTransformFeedbackVarying');
    public z_GetTransformFeedbackVarying_ovr_0 := GetFuncOrNil&<procedure(program: UInt32; index: UInt32; bufSize: Int32; var length: Int32; var size: Int32; var type: GlslTypeToken; name: IntPtr)>(z_GetTransformFeedbackVarying_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetTransformFeedbackVarying(program: UInt32; index: UInt32; bufSize: Int32; length: array of Int32; size: array of Int32; type: array of GlslTypeToken; name: string);
    begin
      var par_7_str_ptr := Marshal.StringToHGlobalAnsi(name);
      z_GetTransformFeedbackVarying_ovr_0(program, index, bufSize, length[0], size[0], type[0], par_7_str_ptr);
      Marshal.FreeHGlobal(par_7_str_ptr);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetTransformFeedbackVarying(program: UInt32; index: UInt32; bufSize: Int32; length: array of Int32; size: array of Int32; type: array of GlslTypeToken; name: IntPtr);
    begin
      z_GetTransformFeedbackVarying_ovr_0(program, index, bufSize, length[0], size[0], type[0], name);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetTransformFeedbackVarying(program: UInt32; index: UInt32; bufSize: Int32; length: array of Int32; size: array of Int32; var type: GlslTypeToken; name: string);
    begin
      var par_7_str_ptr := Marshal.StringToHGlobalAnsi(name);
      z_GetTransformFeedbackVarying_ovr_0(program, index, bufSize, length[0], size[0], type, par_7_str_ptr);
      Marshal.FreeHGlobal(par_7_str_ptr);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetTransformFeedbackVarying(program: UInt32; index: UInt32; bufSize: Int32; length: array of Int32; size: array of Int32; var type: GlslTypeToken; name: IntPtr);
    begin
      z_GetTransformFeedbackVarying_ovr_0(program, index, bufSize, length[0], size[0], type, name);
    end;
    public z_GetTransformFeedbackVarying_ovr_4 := GetFuncOrNil&<procedure(program: UInt32; index: UInt32; bufSize: Int32; var length: Int32; var size: Int32; type: IntPtr; name: IntPtr)>(z_GetTransformFeedbackVarying_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetTransformFeedbackVarying(program: UInt32; index: UInt32; bufSize: Int32; length: array of Int32; size: array of Int32; type: IntPtr; name: string);
    begin
      var par_7_str_ptr := Marshal.StringToHGlobalAnsi(name);
      z_GetTransformFeedbackVarying_ovr_4(program, index, bufSize, length[0], size[0], type, par_7_str_ptr);
      Marshal.FreeHGlobal(par_7_str_ptr);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetTransformFeedbackVarying(program: UInt32; index: UInt32; bufSize: Int32; length: array of Int32; size: array of Int32; type: IntPtr; name: IntPtr);
    begin
      z_GetTransformFeedbackVarying_ovr_4(program, index, bufSize, length[0], size[0], type, name);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetTransformFeedbackVarying(program: UInt32; index: UInt32; bufSize: Int32; length: array of Int32; var size: Int32; type: array of GlslTypeToken; name: string);
    begin
      var par_7_str_ptr := Marshal.StringToHGlobalAnsi(name);
      z_GetTransformFeedbackVarying_ovr_0(program, index, bufSize, length[0], size, type[0], par_7_str_ptr);
      Marshal.FreeHGlobal(par_7_str_ptr);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetTransformFeedbackVarying(program: UInt32; index: UInt32; bufSize: Int32; length: array of Int32; var size: Int32; type: array of GlslTypeToken; name: IntPtr);
    begin
      z_GetTransformFeedbackVarying_ovr_0(program, index, bufSize, length[0], size, type[0], name);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetTransformFeedbackVarying(program: UInt32; index: UInt32; bufSize: Int32; length: array of Int32; var size: Int32; var type: GlslTypeToken; name: string);
    begin
      var par_7_str_ptr := Marshal.StringToHGlobalAnsi(name);
      z_GetTransformFeedbackVarying_ovr_0(program, index, bufSize, length[0], size, type, par_7_str_ptr);
      Marshal.FreeHGlobal(par_7_str_ptr);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetTransformFeedbackVarying(program: UInt32; index: UInt32; bufSize: Int32; length: array of Int32; var size: Int32; var type: GlslTypeToken; name: IntPtr);
    begin
      z_GetTransformFeedbackVarying_ovr_0(program, index, bufSize, length[0], size, type, name);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetTransformFeedbackVarying(program: UInt32; index: UInt32; bufSize: Int32; length: array of Int32; var size: Int32; type: IntPtr; name: string);
    begin
      var par_7_str_ptr := Marshal.StringToHGlobalAnsi(name);
      z_GetTransformFeedbackVarying_ovr_4(program, index, bufSize, length[0], size, type, par_7_str_ptr);
      Marshal.FreeHGlobal(par_7_str_ptr);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetTransformFeedbackVarying(program: UInt32; index: UInt32; bufSize: Int32; length: array of Int32; var size: Int32; type: IntPtr; name: IntPtr);
    begin
      z_GetTransformFeedbackVarying_ovr_4(program, index, bufSize, length[0], size, type, name);
    end;
    public z_GetTransformFeedbackVarying_ovr_12 := GetFuncOrNil&<procedure(program: UInt32; index: UInt32; bufSize: Int32; var length: Int32; size: IntPtr; var type: GlslTypeToken; name: IntPtr)>(z_GetTransformFeedbackVarying_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetTransformFeedbackVarying(program: UInt32; index: UInt32; bufSize: Int32; length: array of Int32; size: IntPtr; type: array of GlslTypeToken; name: string);
    begin
      var par_7_str_ptr := Marshal.StringToHGlobalAnsi(name);
      z_GetTransformFeedbackVarying_ovr_12(program, index, bufSize, length[0], size, type[0], par_7_str_ptr);
      Marshal.FreeHGlobal(par_7_str_ptr);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetTransformFeedbackVarying(program: UInt32; index: UInt32; bufSize: Int32; length: array of Int32; size: IntPtr; type: array of GlslTypeToken; name: IntPtr);
    begin
      z_GetTransformFeedbackVarying_ovr_12(program, index, bufSize, length[0], size, type[0], name);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetTransformFeedbackVarying(program: UInt32; index: UInt32; bufSize: Int32; length: array of Int32; size: IntPtr; var type: GlslTypeToken; name: string);
    begin
      var par_7_str_ptr := Marshal.StringToHGlobalAnsi(name);
      z_GetTransformFeedbackVarying_ovr_12(program, index, bufSize, length[0], size, type, par_7_str_ptr);
      Marshal.FreeHGlobal(par_7_str_ptr);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetTransformFeedbackVarying(program: UInt32; index: UInt32; bufSize: Int32; length: array of Int32; size: IntPtr; var type: GlslTypeToken; name: IntPtr);
    begin
      z_GetTransformFeedbackVarying_ovr_12(program, index, bufSize, length[0], size, type, name);
    end;
    public z_GetTransformFeedbackVarying_ovr_16 := GetFuncOrNil&<procedure(program: UInt32; index: UInt32; bufSize: Int32; var length: Int32; size: IntPtr; type: IntPtr; name: IntPtr)>(z_GetTransformFeedbackVarying_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetTransformFeedbackVarying(program: UInt32; index: UInt32; bufSize: Int32; length: array of Int32; size: IntPtr; type: IntPtr; name: string);
    begin
      var par_7_str_ptr := Marshal.StringToHGlobalAnsi(name);
      z_GetTransformFeedbackVarying_ovr_16(program, index, bufSize, length[0], size, type, par_7_str_ptr);
      Marshal.FreeHGlobal(par_7_str_ptr);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetTransformFeedbackVarying(program: UInt32; index: UInt32; bufSize: Int32; length: array of Int32; size: IntPtr; type: IntPtr; name: IntPtr);
    begin
      z_GetTransformFeedbackVarying_ovr_16(program, index, bufSize, length[0], size, type, name);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetTransformFeedbackVarying(program: UInt32; index: UInt32; bufSize: Int32; var length: Int32; size: array of Int32; type: array of GlslTypeToken; name: string);
    begin
      var par_7_str_ptr := Marshal.StringToHGlobalAnsi(name);
      z_GetTransformFeedbackVarying_ovr_0(program, index, bufSize, length, size[0], type[0], par_7_str_ptr);
      Marshal.FreeHGlobal(par_7_str_ptr);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetTransformFeedbackVarying(program: UInt32; index: UInt32; bufSize: Int32; var length: Int32; size: array of Int32; type: array of GlslTypeToken; name: IntPtr);
    begin
      z_GetTransformFeedbackVarying_ovr_0(program, index, bufSize, length, size[0], type[0], name);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetTransformFeedbackVarying(program: UInt32; index: UInt32; bufSize: Int32; var length: Int32; size: array of Int32; var type: GlslTypeToken; name: string);
    begin
      var par_7_str_ptr := Marshal.StringToHGlobalAnsi(name);
      z_GetTransformFeedbackVarying_ovr_0(program, index, bufSize, length, size[0], type, par_7_str_ptr);
      Marshal.FreeHGlobal(par_7_str_ptr);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetTransformFeedbackVarying(program: UInt32; index: UInt32; bufSize: Int32; var length: Int32; size: array of Int32; var type: GlslTypeToken; name: IntPtr);
    begin
      z_GetTransformFeedbackVarying_ovr_0(program, index, bufSize, length, size[0], type, name);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetTransformFeedbackVarying(program: UInt32; index: UInt32; bufSize: Int32; var length: Int32; size: array of Int32; type: IntPtr; name: string);
    begin
      var par_7_str_ptr := Marshal.StringToHGlobalAnsi(name);
      z_GetTransformFeedbackVarying_ovr_4(program, index, bufSize, length, size[0], type, par_7_str_ptr);
      Marshal.FreeHGlobal(par_7_str_ptr);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetTransformFeedbackVarying(program: UInt32; index: UInt32; bufSize: Int32; var length: Int32; size: array of Int32; type: IntPtr; name: IntPtr);
    begin
      z_GetTransformFeedbackVarying_ovr_4(program, index, bufSize, length, size[0], type, name);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetTransformFeedbackVarying(program: UInt32; index: UInt32; bufSize: Int32; var length: Int32; var size: Int32; type: array of GlslTypeToken; name: string);
    begin
      var par_7_str_ptr := Marshal.StringToHGlobalAnsi(name);
      z_GetTransformFeedbackVarying_ovr_0(program, index, bufSize, length, size, type[0], par_7_str_ptr);
      Marshal.FreeHGlobal(par_7_str_ptr);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetTransformFeedbackVarying(program: UInt32; index: UInt32; bufSize: Int32; var length: Int32; var size: Int32; type: array of GlslTypeToken; name: IntPtr);
    begin
      z_GetTransformFeedbackVarying_ovr_0(program, index, bufSize, length, size, type[0], name);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetTransformFeedbackVarying(program: UInt32; index: UInt32; bufSize: Int32; var length: Int32; var size: Int32; var type: GlslTypeToken; name: string);
    begin
      var par_7_str_ptr := Marshal.StringToHGlobalAnsi(name);
      z_GetTransformFeedbackVarying_ovr_0(program, index, bufSize, length, size, type, par_7_str_ptr);
      Marshal.FreeHGlobal(par_7_str_ptr);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetTransformFeedbackVarying(program: UInt32; index: UInt32; bufSize: Int32; var length: Int32; var size: Int32; var type: GlslTypeToken; name: IntPtr);
    begin
      z_GetTransformFeedbackVarying_ovr_0(program, index, bufSize, length, size, type, name);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetTransformFeedbackVarying(program: UInt32; index: UInt32; bufSize: Int32; var length: Int32; var size: Int32; type: IntPtr; name: string);
    begin
      var par_7_str_ptr := Marshal.StringToHGlobalAnsi(name);
      z_GetTransformFeedbackVarying_ovr_4(program, index, bufSize, length, size, type, par_7_str_ptr);
      Marshal.FreeHGlobal(par_7_str_ptr);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetTransformFeedbackVarying(program: UInt32; index: UInt32; bufSize: Int32; var length: Int32; var size: Int32; type: IntPtr; name: IntPtr);
    begin
      z_GetTransformFeedbackVarying_ovr_4(program, index, bufSize, length, size, type, name);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetTransformFeedbackVarying(program: UInt32; index: UInt32; bufSize: Int32; var length: Int32; size: IntPtr; type: array of GlslTypeToken; name: string);
    begin
      var par_7_str_ptr := Marshal.StringToHGlobalAnsi(name);
      z_GetTransformFeedbackVarying_ovr_12(program, index, bufSize, length, size, type[0], par_7_str_ptr);
      Marshal.FreeHGlobal(par_7_str_ptr);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetTransformFeedbackVarying(program: UInt32; index: UInt32; bufSize: Int32; var length: Int32; size: IntPtr; type: array of GlslTypeToken; name: IntPtr);
    begin
      z_GetTransformFeedbackVarying_ovr_12(program, index, bufSize, length, size, type[0], name);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetTransformFeedbackVarying(program: UInt32; index: UInt32; bufSize: Int32; var length: Int32; size: IntPtr; var type: GlslTypeToken; name: string);
    begin
      var par_7_str_ptr := Marshal.StringToHGlobalAnsi(name);
      z_GetTransformFeedbackVarying_ovr_12(program, index, bufSize, length, size, type, par_7_str_ptr);
      Marshal.FreeHGlobal(par_7_str_ptr);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetTransformFeedbackVarying(program: UInt32; index: UInt32; bufSize: Int32; var length: Int32; size: IntPtr; var type: GlslTypeToken; name: IntPtr);
    begin
      z_GetTransformFeedbackVarying_ovr_12(program, index, bufSize, length, size, type, name);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetTransformFeedbackVarying(program: UInt32; index: UInt32; bufSize: Int32; var length: Int32; size: IntPtr; type: IntPtr; name: string);
    begin
      var par_7_str_ptr := Marshal.StringToHGlobalAnsi(name);
      z_GetTransformFeedbackVarying_ovr_16(program, index, bufSize, length, size, type, par_7_str_ptr);
      Marshal.FreeHGlobal(par_7_str_ptr);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetTransformFeedbackVarying(program: UInt32; index: UInt32; bufSize: Int32; var length: Int32; size: IntPtr; type: IntPtr; name: IntPtr);
    begin
      z_GetTransformFeedbackVarying_ovr_16(program, index, bufSize, length, size, type, name);
    end;
    public z_GetTransformFeedbackVarying_ovr_36 := GetFuncOrNil&<procedure(program: UInt32; index: UInt32; bufSize: Int32; length: IntPtr; var size: Int32; var type: GlslTypeToken; name: IntPtr)>(z_GetTransformFeedbackVarying_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetTransformFeedbackVarying(program: UInt32; index: UInt32; bufSize: Int32; length: IntPtr; size: array of Int32; type: array of GlslTypeToken; name: string);
    begin
      var par_7_str_ptr := Marshal.StringToHGlobalAnsi(name);
      z_GetTransformFeedbackVarying_ovr_36(program, index, bufSize, length, size[0], type[0], par_7_str_ptr);
      Marshal.FreeHGlobal(par_7_str_ptr);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetTransformFeedbackVarying(program: UInt32; index: UInt32; bufSize: Int32; length: IntPtr; size: array of Int32; type: array of GlslTypeToken; name: IntPtr);
    begin
      z_GetTransformFeedbackVarying_ovr_36(program, index, bufSize, length, size[0], type[0], name);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetTransformFeedbackVarying(program: UInt32; index: UInt32; bufSize: Int32; length: IntPtr; size: array of Int32; var type: GlslTypeToken; name: string);
    begin
      var par_7_str_ptr := Marshal.StringToHGlobalAnsi(name);
      z_GetTransformFeedbackVarying_ovr_36(program, index, bufSize, length, size[0], type, par_7_str_ptr);
      Marshal.FreeHGlobal(par_7_str_ptr);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetTransformFeedbackVarying(program: UInt32; index: UInt32; bufSize: Int32; length: IntPtr; size: array of Int32; var type: GlslTypeToken; name: IntPtr);
    begin
      z_GetTransformFeedbackVarying_ovr_36(program, index, bufSize, length, size[0], type, name);
    end;
    public z_GetTransformFeedbackVarying_ovr_40 := GetFuncOrNil&<procedure(program: UInt32; index: UInt32; bufSize: Int32; length: IntPtr; var size: Int32; type: IntPtr; name: IntPtr)>(z_GetTransformFeedbackVarying_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetTransformFeedbackVarying(program: UInt32; index: UInt32; bufSize: Int32; length: IntPtr; size: array of Int32; type: IntPtr; name: string);
    begin
      var par_7_str_ptr := Marshal.StringToHGlobalAnsi(name);
      z_GetTransformFeedbackVarying_ovr_40(program, index, bufSize, length, size[0], type, par_7_str_ptr);
      Marshal.FreeHGlobal(par_7_str_ptr);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetTransformFeedbackVarying(program: UInt32; index: UInt32; bufSize: Int32; length: IntPtr; size: array of Int32; type: IntPtr; name: IntPtr);
    begin
      z_GetTransformFeedbackVarying_ovr_40(program, index, bufSize, length, size[0], type, name);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetTransformFeedbackVarying(program: UInt32; index: UInt32; bufSize: Int32; length: IntPtr; var size: Int32; type: array of GlslTypeToken; name: string);
    begin
      var par_7_str_ptr := Marshal.StringToHGlobalAnsi(name);
      z_GetTransformFeedbackVarying_ovr_36(program, index, bufSize, length, size, type[0], par_7_str_ptr);
      Marshal.FreeHGlobal(par_7_str_ptr);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetTransformFeedbackVarying(program: UInt32; index: UInt32; bufSize: Int32; length: IntPtr; var size: Int32; type: array of GlslTypeToken; name: IntPtr);
    begin
      z_GetTransformFeedbackVarying_ovr_36(program, index, bufSize, length, size, type[0], name);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetTransformFeedbackVarying(program: UInt32; index: UInt32; bufSize: Int32; length: IntPtr; var size: Int32; var type: GlslTypeToken; name: string);
    begin
      var par_7_str_ptr := Marshal.StringToHGlobalAnsi(name);
      z_GetTransformFeedbackVarying_ovr_36(program, index, bufSize, length, size, type, par_7_str_ptr);
      Marshal.FreeHGlobal(par_7_str_ptr);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetTransformFeedbackVarying(program: UInt32; index: UInt32; bufSize: Int32; length: IntPtr; var size: Int32; var type: GlslTypeToken; name: IntPtr);
    begin
      z_GetTransformFeedbackVarying_ovr_36(program, index, bufSize, length, size, type, name);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetTransformFeedbackVarying(program: UInt32; index: UInt32; bufSize: Int32; length: IntPtr; var size: Int32; type: IntPtr; name: string);
    begin
      var par_7_str_ptr := Marshal.StringToHGlobalAnsi(name);
      z_GetTransformFeedbackVarying_ovr_40(program, index, bufSize, length, size, type, par_7_str_ptr);
      Marshal.FreeHGlobal(par_7_str_ptr);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetTransformFeedbackVarying(program: UInt32; index: UInt32; bufSize: Int32; length: IntPtr; var size: Int32; type: IntPtr; name: IntPtr);
    begin
      z_GetTransformFeedbackVarying_ovr_40(program, index, bufSize, length, size, type, name);
    end;
    public z_GetTransformFeedbackVarying_ovr_48 := GetFuncOrNil&<procedure(program: UInt32; index: UInt32; bufSize: Int32; length: IntPtr; size: IntPtr; var type: GlslTypeToken; name: IntPtr)>(z_GetTransformFeedbackVarying_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetTransformFeedbackVarying(program: UInt32; index: UInt32; bufSize: Int32; length: IntPtr; size: IntPtr; type: array of GlslTypeToken; name: string);
    begin
      var par_7_str_ptr := Marshal.StringToHGlobalAnsi(name);
      z_GetTransformFeedbackVarying_ovr_48(program, index, bufSize, length, size, type[0], par_7_str_ptr);
      Marshal.FreeHGlobal(par_7_str_ptr);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetTransformFeedbackVarying(program: UInt32; index: UInt32; bufSize: Int32; length: IntPtr; size: IntPtr; type: array of GlslTypeToken; name: IntPtr);
    begin
      z_GetTransformFeedbackVarying_ovr_48(program, index, bufSize, length, size, type[0], name);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetTransformFeedbackVarying(program: UInt32; index: UInt32; bufSize: Int32; length: IntPtr; size: IntPtr; var type: GlslTypeToken; name: string);
    begin
      var par_7_str_ptr := Marshal.StringToHGlobalAnsi(name);
      z_GetTransformFeedbackVarying_ovr_48(program, index, bufSize, length, size, type, par_7_str_ptr);
      Marshal.FreeHGlobal(par_7_str_ptr);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetTransformFeedbackVarying(program: UInt32; index: UInt32; bufSize: Int32; length: IntPtr; size: IntPtr; var type: GlslTypeToken; name: IntPtr);
    begin
      z_GetTransformFeedbackVarying_ovr_48(program, index, bufSize, length, size, type, name);
    end;
    public z_GetTransformFeedbackVarying_ovr_52 := GetFuncOrNil&<procedure(program: UInt32; index: UInt32; bufSize: Int32; length: IntPtr; size: IntPtr; type: IntPtr; name: IntPtr)>(z_GetTransformFeedbackVarying_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetTransformFeedbackVarying(program: UInt32; index: UInt32; bufSize: Int32; length: IntPtr; size: IntPtr; type: IntPtr; name: string);
    begin
      var par_7_str_ptr := Marshal.StringToHGlobalAnsi(name);
      z_GetTransformFeedbackVarying_ovr_52(program, index, bufSize, length, size, type, par_7_str_ptr);
      Marshal.FreeHGlobal(par_7_str_ptr);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetTransformFeedbackVarying(program: UInt32; index: UInt32; bufSize: Int32; length: IntPtr; size: IntPtr; type: IntPtr; name: IntPtr);
    begin
      z_GetTransformFeedbackVarying_ovr_52(program, index, bufSize, length, size, type, name);
    end;
    
    // added in gl3.1
    public z_GetUniformBlockIndex_adr := GetFuncAdr('glGetUniformBlockIndex');
    public z_GetUniformBlockIndex_ovr_0 := GetFuncOrNil&<function(program: UInt32; uniformBlockName: IntPtr): UInt32>(z_GetUniformBlockIndex_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetUniformBlockIndex(program: UInt32; uniformBlockName: string): UInt32;
    begin
      var par_2_str_ptr := Marshal.StringToHGlobalAnsi(uniformBlockName);
      Result := z_GetUniformBlockIndex_ovr_0(program, par_2_str_ptr);
      Marshal.FreeHGlobal(par_2_str_ptr);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetUniformBlockIndex(program: UInt32; uniformBlockName: IntPtr): UInt32;
    begin
      Result := z_GetUniformBlockIndex_ovr_0(program, uniformBlockName);
    end;
    
    // added in gl4.0
    public z_GetUniformdv_adr := GetFuncAdr('glGetUniformdv');
    public z_GetUniformdv_ovr_0 := GetFuncOrNil&<procedure(program: UInt32; location: Int32; var params: real)>(z_GetUniformdv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetUniformdv(program: UInt32; location: Int32; params: array of real);
    begin
      z_GetUniformdv_ovr_0(program, location, params[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetUniformdv(program: UInt32; location: Int32; var params: real);
    begin
      z_GetUniformdv_ovr_0(program, location, params);
    end;
    public z_GetUniformdv_ovr_2 := GetFuncOrNil&<procedure(program: UInt32; location: Int32; params: IntPtr)>(z_GetUniformdv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetUniformdv(program: UInt32; location: Int32; params: IntPtr);
    begin
      z_GetUniformdv_ovr_2(program, location, params);
    end;
    
    // added in gl2.0
    public z_GetUniformfv_adr := GetFuncAdr('glGetUniformfv');
    public z_GetUniformfv_ovr_0 := GetFuncOrNil&<procedure(program: UInt32; location: Int32; var params: single)>(z_GetUniformfv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetUniformfv(program: UInt32; location: Int32; params: array of single);
    begin
      z_GetUniformfv_ovr_0(program, location, params[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetUniformfv(program: UInt32; location: Int32; var params: single);
    begin
      z_GetUniformfv_ovr_0(program, location, params);
    end;
    public z_GetUniformfv_ovr_2 := GetFuncOrNil&<procedure(program: UInt32; location: Int32; params: IntPtr)>(z_GetUniformfv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetUniformfv(program: UInt32; location: Int32; params: IntPtr);
    begin
      z_GetUniformfv_ovr_2(program, location, params);
    end;
    
    // added in gl3.1
    public z_GetUniformIndices_adr := GetFuncAdr('glGetUniformIndices');
    public z_GetUniformIndices_ovr_0 := GetFuncOrNil&<procedure(program: UInt32; uniformCount: Int32; var uniformNames: IntPtr; var uniformIndices: UInt32)>(z_GetUniformIndices_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetUniformIndices(program: UInt32; uniformCount: Int32; uniformNames: array of string; uniformIndices: array of UInt32);
    begin
      var par_3_str_ptr := uniformNames.ConvertAll(arr_el1->Marshal.StringToHGlobalAnsi(arr_el1));
      z_GetUniformIndices_ovr_0(program, uniformCount, par_3_str_ptr[0], uniformIndices[0]);
      foreach var arr_el1 in par_3_str_ptr do Marshal.FreeHGlobal(arr_el1);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetUniformIndices(program: UInt32; uniformCount: Int32; uniformNames: array of string; var uniformIndices: UInt32);
    begin
      var par_3_str_ptr := uniformNames.ConvertAll(arr_el1->Marshal.StringToHGlobalAnsi(arr_el1));
      z_GetUniformIndices_ovr_0(program, uniformCount, par_3_str_ptr[0], uniformIndices);
      foreach var arr_el1 in par_3_str_ptr do Marshal.FreeHGlobal(arr_el1);
    end;
    public z_GetUniformIndices_ovr_2 := GetFuncOrNil&<procedure(program: UInt32; uniformCount: Int32; var uniformNames: IntPtr; uniformIndices: IntPtr)>(z_GetUniformIndices_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetUniformIndices(program: UInt32; uniformCount: Int32; uniformNames: array of string; uniformIndices: IntPtr);
    begin
      var par_3_str_ptr := uniformNames.ConvertAll(arr_el1->Marshal.StringToHGlobalAnsi(arr_el1));
      z_GetUniformIndices_ovr_2(program, uniformCount, par_3_str_ptr[0], uniformIndices);
      foreach var arr_el1 in par_3_str_ptr do Marshal.FreeHGlobal(arr_el1);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetUniformIndices(program: UInt32; uniformCount: Int32; uniformNames: array of IntPtr; uniformIndices: array of UInt32);
    begin
      z_GetUniformIndices_ovr_0(program, uniformCount, uniformNames[0], uniformIndices[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetUniformIndices(program: UInt32; uniformCount: Int32; uniformNames: array of IntPtr; var uniformIndices: UInt32);
    begin
      z_GetUniformIndices_ovr_0(program, uniformCount, uniformNames[0], uniformIndices);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetUniformIndices(program: UInt32; uniformCount: Int32; uniformNames: array of IntPtr; uniformIndices: IntPtr);
    begin
      z_GetUniformIndices_ovr_2(program, uniformCount, uniformNames[0], uniformIndices);
    end;
    public z_GetUniformIndices_ovr_6 := GetFuncOrNil&<procedure(program: UInt32; uniformCount: Int32; uniformNames: IntPtr; var uniformIndices: UInt32)>(z_GetUniformIndices_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetUniformIndices(program: UInt32; uniformCount: Int32; uniformNames: IntPtr; uniformIndices: array of UInt32);
    begin
      z_GetUniformIndices_ovr_6(program, uniformCount, uniformNames, uniformIndices[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetUniformIndices(program: UInt32; uniformCount: Int32; uniformNames: IntPtr; var uniformIndices: UInt32);
    begin
      z_GetUniformIndices_ovr_6(program, uniformCount, uniformNames, uniformIndices);
    end;
    public z_GetUniformIndices_ovr_8 := GetFuncOrNil&<procedure(program: UInt32; uniformCount: Int32; uniformNames: IntPtr; uniformIndices: IntPtr)>(z_GetUniformIndices_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetUniformIndices(program: UInt32; uniformCount: Int32; uniformNames: IntPtr; uniformIndices: IntPtr);
    begin
      z_GetUniformIndices_ovr_8(program, uniformCount, uniformNames, uniformIndices);
    end;
    
    // added in gl2.0
    public z_GetUniformiv_adr := GetFuncAdr('glGetUniformiv');
    public z_GetUniformiv_ovr_0 := GetFuncOrNil&<procedure(program: UInt32; location: Int32; var params: Int32)>(z_GetUniformiv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetUniformiv(program: UInt32; location: Int32; params: array of Int32);
    begin
      z_GetUniformiv_ovr_0(program, location, params[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetUniformiv(program: UInt32; location: Int32; var params: Int32);
    begin
      z_GetUniformiv_ovr_0(program, location, params);
    end;
    public z_GetUniformiv_ovr_2 := GetFuncOrNil&<procedure(program: UInt32; location: Int32; params: IntPtr)>(z_GetUniformiv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetUniformiv(program: UInt32; location: Int32; params: IntPtr);
    begin
      z_GetUniformiv_ovr_2(program, location, params);
    end;
    
    // added in gl2.0
    public z_GetUniformLocation_adr := GetFuncAdr('glGetUniformLocation');
    public z_GetUniformLocation_ovr_0 := GetFuncOrNil&<function(program: UInt32; name: IntPtr): Int32>(z_GetUniformLocation_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetUniformLocation(program: UInt32; name: string): Int32;
    begin
      var par_2_str_ptr := Marshal.StringToHGlobalAnsi(name);
      Result := z_GetUniformLocation_ovr_0(program, par_2_str_ptr);
      Marshal.FreeHGlobal(par_2_str_ptr);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetUniformLocation(program: UInt32; name: IntPtr): Int32;
    begin
      Result := z_GetUniformLocation_ovr_0(program, name);
    end;
    
    // added in gl4.0
    public z_GetUniformSubroutineuiv_adr := GetFuncAdr('glGetUniformSubroutineuiv');
    public z_GetUniformSubroutineuiv_ovr_0 := GetFuncOrNil&<procedure(shadertype: ShaderType; location: Int32; var params: UInt32)>(z_GetUniformSubroutineuiv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetUniformSubroutineuiv(shadertype: ShaderType; location: Int32; params: array of UInt32);
    begin
      z_GetUniformSubroutineuiv_ovr_0(shadertype, location, params[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetUniformSubroutineuiv(shadertype: ShaderType; location: Int32; var params: UInt32);
    begin
      z_GetUniformSubroutineuiv_ovr_0(shadertype, location, params);
    end;
    public z_GetUniformSubroutineuiv_ovr_2 := GetFuncOrNil&<procedure(shadertype: ShaderType; location: Int32; params: IntPtr)>(z_GetUniformSubroutineuiv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetUniformSubroutineuiv(shadertype: ShaderType; location: Int32; params: IntPtr);
    begin
      z_GetUniformSubroutineuiv_ovr_2(shadertype, location, params);
    end;
    
    // added in gl3.0
    public z_GetUniformuiv_adr := GetFuncAdr('glGetUniformuiv');
    public z_GetUniformuiv_ovr_0 := GetFuncOrNil&<procedure(program: UInt32; location: Int32; var params: UInt32)>(z_GetUniformuiv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetUniformuiv(program: UInt32; location: Int32; params: array of UInt32);
    begin
      z_GetUniformuiv_ovr_0(program, location, params[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetUniformuiv(program: UInt32; location: Int32; var params: UInt32);
    begin
      z_GetUniformuiv_ovr_0(program, location, params);
    end;
    public z_GetUniformuiv_ovr_2 := GetFuncOrNil&<procedure(program: UInt32; location: Int32; params: IntPtr)>(z_GetUniformuiv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetUniformuiv(program: UInt32; location: Int32; params: IntPtr);
    begin
      z_GetUniformuiv_ovr_2(program, location, params);
    end;
    
    // added in gl4.5
    public z_GetVertexArrayIndexed64iv_adr := GetFuncAdr('glGetVertexArrayIndexed64iv');
    public z_GetVertexArrayIndexed64iv_ovr_0 := GetFuncOrNil&<procedure(vaobj: UInt32; index: UInt32; pname: VertexArrayPName; var param: Int64)>(z_GetVertexArrayIndexed64iv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetVertexArrayIndexed64iv(vaobj: UInt32; index: UInt32; pname: VertexArrayPName; param: array of Int64);
    begin
      z_GetVertexArrayIndexed64iv_ovr_0(vaobj, index, pname, param[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetVertexArrayIndexed64iv(vaobj: UInt32; index: UInt32; pname: VertexArrayPName; var param: Int64);
    begin
      z_GetVertexArrayIndexed64iv_ovr_0(vaobj, index, pname, param);
    end;
    public z_GetVertexArrayIndexed64iv_ovr_2 := GetFuncOrNil&<procedure(vaobj: UInt32; index: UInt32; pname: VertexArrayPName; param: IntPtr)>(z_GetVertexArrayIndexed64iv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetVertexArrayIndexed64iv(vaobj: UInt32; index: UInt32; pname: VertexArrayPName; param: IntPtr);
    begin
      z_GetVertexArrayIndexed64iv_ovr_2(vaobj, index, pname, param);
    end;
    
    // added in gl4.5
    public z_GetVertexArrayIndexediv_adr := GetFuncAdr('glGetVertexArrayIndexediv');
    public z_GetVertexArrayIndexediv_ovr_0 := GetFuncOrNil&<procedure(vaobj: UInt32; index: UInt32; pname: VertexArrayPName; var param: Int32)>(z_GetVertexArrayIndexediv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetVertexArrayIndexediv(vaobj: UInt32; index: UInt32; pname: VertexArrayPName; param: array of Int32);
    begin
      z_GetVertexArrayIndexediv_ovr_0(vaobj, index, pname, param[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetVertexArrayIndexediv(vaobj: UInt32; index: UInt32; pname: VertexArrayPName; var param: Int32);
    begin
      z_GetVertexArrayIndexediv_ovr_0(vaobj, index, pname, param);
    end;
    public z_GetVertexArrayIndexediv_ovr_2 := GetFuncOrNil&<procedure(vaobj: UInt32; index: UInt32; pname: VertexArrayPName; param: IntPtr)>(z_GetVertexArrayIndexediv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetVertexArrayIndexediv(vaobj: UInt32; index: UInt32; pname: VertexArrayPName; param: IntPtr);
    begin
      z_GetVertexArrayIndexediv_ovr_2(vaobj, index, pname, param);
    end;
    
    // added in gl4.5
    public z_GetVertexArrayiv_adr := GetFuncAdr('glGetVertexArrayiv');
    public z_GetVertexArrayiv_ovr_0 := GetFuncOrNil&<procedure(vaobj: UInt32; pname: VertexArrayPName; var param: Int32)>(z_GetVertexArrayiv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetVertexArrayiv(vaobj: UInt32; pname: VertexArrayPName; param: array of Int32);
    begin
      z_GetVertexArrayiv_ovr_0(vaobj, pname, param[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetVertexArrayiv(vaobj: UInt32; pname: VertexArrayPName; var param: Int32);
    begin
      z_GetVertexArrayiv_ovr_0(vaobj, pname, param);
    end;
    public z_GetVertexArrayiv_ovr_2 := GetFuncOrNil&<procedure(vaobj: UInt32; pname: VertexArrayPName; param: IntPtr)>(z_GetVertexArrayiv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetVertexArrayiv(vaobj: UInt32; pname: VertexArrayPName; param: IntPtr);
    begin
      z_GetVertexArrayiv_ovr_2(vaobj, pname, param);
    end;
    
    // added in gl2.0
    public z_GetVertexAttribdv_adr := GetFuncAdr('glGetVertexAttribdv');
    public z_GetVertexAttribdv_ovr_0 := GetFuncOrNil&<procedure(index: UInt32; pname: VertexAttribPropertyARB; var params: real)>(z_GetVertexAttribdv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetVertexAttribdv(index: UInt32; pname: VertexAttribPropertyARB; params: array of real);
    begin
      z_GetVertexAttribdv_ovr_0(index, pname, params[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetVertexAttribdv(index: UInt32; pname: VertexAttribPropertyARB; var params: real);
    begin
      z_GetVertexAttribdv_ovr_0(index, pname, params);
    end;
    public z_GetVertexAttribdv_ovr_2 := GetFuncOrNil&<procedure(index: UInt32; pname: VertexAttribPropertyARB; params: IntPtr)>(z_GetVertexAttribdv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetVertexAttribdv(index: UInt32; pname: VertexAttribPropertyARB; params: IntPtr);
    begin
      z_GetVertexAttribdv_ovr_2(index, pname, params);
    end;
    
    // added in gl2.0
    public z_GetVertexAttribfv_adr := GetFuncAdr('glGetVertexAttribfv');
    public z_GetVertexAttribfv_ovr_0 := GetFuncOrNil&<procedure(index: UInt32; pname: VertexAttribPropertyARB; var params: single)>(z_GetVertexAttribfv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetVertexAttribfv(index: UInt32; pname: VertexAttribPropertyARB; params: array of single);
    begin
      z_GetVertexAttribfv_ovr_0(index, pname, params[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetVertexAttribfv(index: UInt32; pname: VertexAttribPropertyARB; var params: single);
    begin
      z_GetVertexAttribfv_ovr_0(index, pname, params);
    end;
    public z_GetVertexAttribfv_ovr_2 := GetFuncOrNil&<procedure(index: UInt32; pname: VertexAttribPropertyARB; params: IntPtr)>(z_GetVertexAttribfv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetVertexAttribfv(index: UInt32; pname: VertexAttribPropertyARB; params: IntPtr);
    begin
      z_GetVertexAttribfv_ovr_2(index, pname, params);
    end;
    
    // added in gl3.0
    public z_GetVertexAttribIiv_adr := GetFuncAdr('glGetVertexAttribIiv');
    public z_GetVertexAttribIiv_ovr_0 := GetFuncOrNil&<procedure(index: UInt32; pname: VertexAttribEnum; var params: Int32)>(z_GetVertexAttribIiv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetVertexAttribIiv(index: UInt32; pname: VertexAttribEnum; params: array of Int32);
    begin
      z_GetVertexAttribIiv_ovr_0(index, pname, params[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetVertexAttribIiv(index: UInt32; pname: VertexAttribEnum; var params: Int32);
    begin
      z_GetVertexAttribIiv_ovr_0(index, pname, params);
    end;
    public z_GetVertexAttribIiv_ovr_2 := GetFuncOrNil&<procedure(index: UInt32; pname: VertexAttribEnum; params: IntPtr)>(z_GetVertexAttribIiv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetVertexAttribIiv(index: UInt32; pname: VertexAttribEnum; params: IntPtr);
    begin
      z_GetVertexAttribIiv_ovr_2(index, pname, params);
    end;
    
    // added in gl3.0
    public z_GetVertexAttribIuiv_adr := GetFuncAdr('glGetVertexAttribIuiv');
    public z_GetVertexAttribIuiv_ovr_0 := GetFuncOrNil&<procedure(index: UInt32; pname: VertexAttribEnum; var params: UInt32)>(z_GetVertexAttribIuiv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetVertexAttribIuiv(index: UInt32; pname: VertexAttribEnum; params: array of UInt32);
    begin
      z_GetVertexAttribIuiv_ovr_0(index, pname, params[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetVertexAttribIuiv(index: UInt32; pname: VertexAttribEnum; var params: UInt32);
    begin
      z_GetVertexAttribIuiv_ovr_0(index, pname, params);
    end;
    public z_GetVertexAttribIuiv_ovr_2 := GetFuncOrNil&<procedure(index: UInt32; pname: VertexAttribEnum; params: IntPtr)>(z_GetVertexAttribIuiv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetVertexAttribIuiv(index: UInt32; pname: VertexAttribEnum; params: IntPtr);
    begin
      z_GetVertexAttribIuiv_ovr_2(index, pname, params);
    end;
    
    // added in gl2.0
    public z_GetVertexAttribiv_adr := GetFuncAdr('glGetVertexAttribiv');
    public z_GetVertexAttribiv_ovr_0 := GetFuncOrNil&<procedure(index: UInt32; pname: VertexAttribPropertyARB; var params: Int32)>(z_GetVertexAttribiv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetVertexAttribiv(index: UInt32; pname: VertexAttribPropertyARB; params: array of Int32);
    begin
      z_GetVertexAttribiv_ovr_0(index, pname, params[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetVertexAttribiv(index: UInt32; pname: VertexAttribPropertyARB; var params: Int32);
    begin
      z_GetVertexAttribiv_ovr_0(index, pname, params);
    end;
    public z_GetVertexAttribiv_ovr_2 := GetFuncOrNil&<procedure(index: UInt32; pname: VertexAttribPropertyARB; params: IntPtr)>(z_GetVertexAttribiv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetVertexAttribiv(index: UInt32; pname: VertexAttribPropertyARB; params: IntPtr);
    begin
      z_GetVertexAttribiv_ovr_2(index, pname, params);
    end;
    
    // added in gl4.1
    public z_GetVertexAttribLdv_adr := GetFuncAdr('glGetVertexAttribLdv');
    public z_GetVertexAttribLdv_ovr_0 := GetFuncOrNil&<procedure(index: UInt32; pname: VertexAttribEnum; var params: real)>(z_GetVertexAttribLdv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetVertexAttribLdv(index: UInt32; pname: VertexAttribEnum; params: array of real);
    begin
      z_GetVertexAttribLdv_ovr_0(index, pname, params[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetVertexAttribLdv(index: UInt32; pname: VertexAttribEnum; var params: real);
    begin
      z_GetVertexAttribLdv_ovr_0(index, pname, params);
    end;
    public z_GetVertexAttribLdv_ovr_2 := GetFuncOrNil&<procedure(index: UInt32; pname: VertexAttribEnum; params: IntPtr)>(z_GetVertexAttribLdv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetVertexAttribLdv(index: UInt32; pname: VertexAttribEnum; params: IntPtr);
    begin
      z_GetVertexAttribLdv_ovr_2(index, pname, params);
    end;
    
    // added in gl2.0
    public z_GetVertexAttribPointerv_adr := GetFuncAdr('glGetVertexAttribPointerv');
    public z_GetVertexAttribPointerv_ovr_0 := GetFuncOrNil&<procedure(index: UInt32; pname: VertexAttribPointerPropertyARB; var pointer: IntPtr)>(z_GetVertexAttribPointerv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetVertexAttribPointerv(index: UInt32; pname: VertexAttribPointerPropertyARB; pointer: array of IntPtr);
    begin
      z_GetVertexAttribPointerv_ovr_0(index, pname, pointer[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetVertexAttribPointerv(index: UInt32; pname: VertexAttribPointerPropertyARB; var pointer: IntPtr);
    begin
      z_GetVertexAttribPointerv_ovr_0(index, pname, pointer);
    end;
    public z_GetVertexAttribPointerv_ovr_2 := GetFuncOrNil&<procedure(index: UInt32; pname: VertexAttribPointerPropertyARB; pointer: IntPtr)>(z_GetVertexAttribPointerv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetVertexAttribPointerv(index: UInt32; pname: VertexAttribPointerPropertyARB; pointer: IntPtr);
    begin
      z_GetVertexAttribPointerv_ovr_2(index, pname, pointer);
    end;
    
    // added in gl1.0
    public static procedure z_Hint(target: HintTarget; mode: HintMode);
    external 'opengl32.dll' name 'glHint';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Hint(target: HintTarget; mode: HintMode) := z_Hint;
    
    // added in gl4.3
    public z_InvalidateBufferData_adr := GetFuncAdr('glInvalidateBufferData');
    public z_InvalidateBufferData_ovr_0 := GetFuncOrNil&<procedure(buffer: UInt32)>(z_InvalidateBufferData_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure InvalidateBufferData(buffer: UInt32);
    begin
      z_InvalidateBufferData_ovr_0(buffer);
    end;
    
    // added in gl4.3
    public z_InvalidateBufferSubData_adr := GetFuncAdr('glInvalidateBufferSubData');
    public z_InvalidateBufferSubData_ovr_0 := GetFuncOrNil&<procedure(buffer: UInt32; offset: IntPtr; length: IntPtr)>(z_InvalidateBufferSubData_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure InvalidateBufferSubData(buffer: UInt32; offset: IntPtr; length: IntPtr);
    begin
      z_InvalidateBufferSubData_ovr_0(buffer, offset, length);
    end;
    
    // added in gl4.3
    public z_InvalidateFramebuffer_adr := GetFuncAdr('glInvalidateFramebuffer');
    public z_InvalidateFramebuffer_ovr_0 := GetFuncOrNil&<procedure(target: FramebufferTarget; numAttachments: Int32; var attachments: InvalidateFramebufferAttachment)>(z_InvalidateFramebuffer_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure InvalidateFramebuffer(target: FramebufferTarget; numAttachments: Int32; attachments: array of InvalidateFramebufferAttachment);
    begin
      z_InvalidateFramebuffer_ovr_0(target, numAttachments, attachments[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure InvalidateFramebuffer(target: FramebufferTarget; numAttachments: Int32; var attachments: InvalidateFramebufferAttachment);
    begin
      z_InvalidateFramebuffer_ovr_0(target, numAttachments, attachments);
    end;
    public z_InvalidateFramebuffer_ovr_2 := GetFuncOrNil&<procedure(target: FramebufferTarget; numAttachments: Int32; attachments: IntPtr)>(z_InvalidateFramebuffer_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure InvalidateFramebuffer(target: FramebufferTarget; numAttachments: Int32; attachments: IntPtr);
    begin
      z_InvalidateFramebuffer_ovr_2(target, numAttachments, attachments);
    end;
    
    // added in gl4.5
    public z_InvalidateNamedFramebufferData_adr := GetFuncAdr('glInvalidateNamedFramebufferData');
    public z_InvalidateNamedFramebufferData_ovr_0 := GetFuncOrNil&<procedure(framebuffer: UInt32; numAttachments: Int32; var attachments: FramebufferAttachment)>(z_InvalidateNamedFramebufferData_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure InvalidateNamedFramebufferData(framebuffer: UInt32; numAttachments: Int32; attachments: array of FramebufferAttachment);
    begin
      z_InvalidateNamedFramebufferData_ovr_0(framebuffer, numAttachments, attachments[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure InvalidateNamedFramebufferData(framebuffer: UInt32; numAttachments: Int32; var attachments: FramebufferAttachment);
    begin
      z_InvalidateNamedFramebufferData_ovr_0(framebuffer, numAttachments, attachments);
    end;
    public z_InvalidateNamedFramebufferData_ovr_2 := GetFuncOrNil&<procedure(framebuffer: UInt32; numAttachments: Int32; attachments: IntPtr)>(z_InvalidateNamedFramebufferData_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure InvalidateNamedFramebufferData(framebuffer: UInt32; numAttachments: Int32; attachments: IntPtr);
    begin
      z_InvalidateNamedFramebufferData_ovr_2(framebuffer, numAttachments, attachments);
    end;
    
    // added in gl4.5
    public z_InvalidateNamedFramebufferSubData_adr := GetFuncAdr('glInvalidateNamedFramebufferSubData');
    public z_InvalidateNamedFramebufferSubData_ovr_0 := GetFuncOrNil&<procedure(framebuffer: UInt32; numAttachments: Int32; var attachments: FramebufferAttachment; x: Int32; y: Int32; width: Int32; height: Int32)>(z_InvalidateNamedFramebufferSubData_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure InvalidateNamedFramebufferSubData(framebuffer: UInt32; numAttachments: Int32; attachments: array of FramebufferAttachment; x: Int32; y: Int32; width: Int32; height: Int32);
    begin
      z_InvalidateNamedFramebufferSubData_ovr_0(framebuffer, numAttachments, attachments[0], x, y, width, height);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure InvalidateNamedFramebufferSubData(framebuffer: UInt32; numAttachments: Int32; var attachments: FramebufferAttachment; x: Int32; y: Int32; width: Int32; height: Int32);
    begin
      z_InvalidateNamedFramebufferSubData_ovr_0(framebuffer, numAttachments, attachments, x, y, width, height);
    end;
    public z_InvalidateNamedFramebufferSubData_ovr_2 := GetFuncOrNil&<procedure(framebuffer: UInt32; numAttachments: Int32; attachments: IntPtr; x: Int32; y: Int32; width: Int32; height: Int32)>(z_InvalidateNamedFramebufferSubData_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure InvalidateNamedFramebufferSubData(framebuffer: UInt32; numAttachments: Int32; attachments: IntPtr; x: Int32; y: Int32; width: Int32; height: Int32);
    begin
      z_InvalidateNamedFramebufferSubData_ovr_2(framebuffer, numAttachments, attachments, x, y, width, height);
    end;
    
    // added in gl4.3
    public z_InvalidateSubFramebuffer_adr := GetFuncAdr('glInvalidateSubFramebuffer');
    public z_InvalidateSubFramebuffer_ovr_0 := GetFuncOrNil&<procedure(target: FramebufferTarget; numAttachments: Int32; var attachments: InvalidateFramebufferAttachment; x: Int32; y: Int32; width: Int32; height: Int32)>(z_InvalidateSubFramebuffer_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure InvalidateSubFramebuffer(target: FramebufferTarget; numAttachments: Int32; attachments: array of InvalidateFramebufferAttachment; x: Int32; y: Int32; width: Int32; height: Int32);
    begin
      z_InvalidateSubFramebuffer_ovr_0(target, numAttachments, attachments[0], x, y, width, height);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure InvalidateSubFramebuffer(target: FramebufferTarget; numAttachments: Int32; var attachments: InvalidateFramebufferAttachment; x: Int32; y: Int32; width: Int32; height: Int32);
    begin
      z_InvalidateSubFramebuffer_ovr_0(target, numAttachments, attachments, x, y, width, height);
    end;
    public z_InvalidateSubFramebuffer_ovr_2 := GetFuncOrNil&<procedure(target: FramebufferTarget; numAttachments: Int32; attachments: IntPtr; x: Int32; y: Int32; width: Int32; height: Int32)>(z_InvalidateSubFramebuffer_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure InvalidateSubFramebuffer(target: FramebufferTarget; numAttachments: Int32; attachments: IntPtr; x: Int32; y: Int32; width: Int32; height: Int32);
    begin
      z_InvalidateSubFramebuffer_ovr_2(target, numAttachments, attachments, x, y, width, height);
    end;
    
    // added in gl4.3
    public z_InvalidateTexImage_adr := GetFuncAdr('glInvalidateTexImage');
    public z_InvalidateTexImage_ovr_0 := GetFuncOrNil&<procedure(texture: UInt32; level: Int32)>(z_InvalidateTexImage_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure InvalidateTexImage(texture: UInt32; level: Int32);
    begin
      z_InvalidateTexImage_ovr_0(texture, level);
    end;
    
    // added in gl4.3
    public z_InvalidateTexSubImage_adr := GetFuncAdr('glInvalidateTexSubImage');
    public z_InvalidateTexSubImage_ovr_0 := GetFuncOrNil&<procedure(texture: UInt32; level: Int32; xoffset: Int32; yoffset: Int32; zoffset: Int32; width: Int32; height: Int32; depth: Int32)>(z_InvalidateTexSubImage_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure InvalidateTexSubImage(texture: UInt32; level: Int32; xoffset: Int32; yoffset: Int32; zoffset: Int32; width: Int32; height: Int32; depth: Int32);
    begin
      z_InvalidateTexSubImage_ovr_0(texture, level, xoffset, yoffset, zoffset, width, height, depth);
    end;
    
    // added in gl1.5
    public z_IsBuffer_adr := GetFuncAdr('glIsBuffer');
    public z_IsBuffer_ovr_0 := GetFuncOrNil&<function(buffer: UInt32): boolean>(z_IsBuffer_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function IsBuffer(buffer: UInt32): boolean;
    begin
      Result := z_IsBuffer_ovr_0(buffer);
    end;
    
    // added in gl1.0
    public static function z_IsEnabled(cap: EnableCap): boolean;
    external 'opengl32.dll' name 'glIsEnabled';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function IsEnabled(cap: EnableCap): boolean := z_IsEnabled;
    
    // added in gl3.0
    public z_IsEnabledi_adr := GetFuncAdr('glIsEnabledi');
    public z_IsEnabledi_ovr_0 := GetFuncOrNil&<function(target: EnableCap; index: UInt32): boolean>(z_IsEnabledi_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function IsEnabledi(target: EnableCap; index: UInt32): boolean;
    begin
      Result := z_IsEnabledi_ovr_0(target, index);
    end;
    
    // added in gl3.0
    public z_IsFramebuffer_adr := GetFuncAdr('glIsFramebuffer');
    public z_IsFramebuffer_ovr_0 := GetFuncOrNil&<function(framebuffer: UInt32): boolean>(z_IsFramebuffer_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function IsFramebuffer(framebuffer: UInt32): boolean;
    begin
      Result := z_IsFramebuffer_ovr_0(framebuffer);
    end;
    
    // added in gl2.0
    public z_IsProgram_adr := GetFuncAdr('glIsProgram');
    public z_IsProgram_ovr_0 := GetFuncOrNil&<function(program: UInt32): boolean>(z_IsProgram_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function IsProgram(program: UInt32): boolean;
    begin
      Result := z_IsProgram_ovr_0(program);
    end;
    
    // added in gl4.1
    public z_IsProgramPipeline_adr := GetFuncAdr('glIsProgramPipeline');
    public z_IsProgramPipeline_ovr_0 := GetFuncOrNil&<function(pipeline: UInt32): boolean>(z_IsProgramPipeline_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function IsProgramPipeline(pipeline: UInt32): boolean;
    begin
      Result := z_IsProgramPipeline_ovr_0(pipeline);
    end;
    
    // added in gl1.5
    public z_IsQuery_adr := GetFuncAdr('glIsQuery');
    public z_IsQuery_ovr_0 := GetFuncOrNil&<function(id: UInt32): boolean>(z_IsQuery_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function IsQuery(id: UInt32): boolean;
    begin
      Result := z_IsQuery_ovr_0(id);
    end;
    
    // added in gl3.0
    public z_IsRenderbuffer_adr := GetFuncAdr('glIsRenderbuffer');
    public z_IsRenderbuffer_ovr_0 := GetFuncOrNil&<function(renderbuffer: UInt32): boolean>(z_IsRenderbuffer_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function IsRenderbuffer(renderbuffer: UInt32): boolean;
    begin
      Result := z_IsRenderbuffer_ovr_0(renderbuffer);
    end;
    
    // added in gl3.3
    public z_IsSampler_adr := GetFuncAdr('glIsSampler');
    public z_IsSampler_ovr_0 := GetFuncOrNil&<function(sampler: UInt32): boolean>(z_IsSampler_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function IsSampler(sampler: UInt32): boolean;
    begin
      Result := z_IsSampler_ovr_0(sampler);
    end;
    
    // added in gl2.0
    public z_IsShader_adr := GetFuncAdr('glIsShader');
    public z_IsShader_ovr_0 := GetFuncOrNil&<function(shader: UInt32): boolean>(z_IsShader_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function IsShader(shader: UInt32): boolean;
    begin
      Result := z_IsShader_ovr_0(shader);
    end;
    
    // added in gl3.2
    public z_IsSync_adr := GetFuncAdr('glIsSync');
    public z_IsSync_ovr_0 := GetFuncOrNil&<function(sync: GLsync): boolean>(z_IsSync_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function IsSync(sync: GLsync): boolean;
    begin
      Result := z_IsSync_ovr_0(sync);
    end;
    
    // added in gl1.1
    public static function z_IsTexture(texture: UInt32): boolean;
    external 'opengl32.dll' name 'glIsTexture';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function IsTexture(texture: UInt32): boolean := z_IsTexture;
    
    // added in gl4.0
    public z_IsTransformFeedback_adr := GetFuncAdr('glIsTransformFeedback');
    public z_IsTransformFeedback_ovr_0 := GetFuncOrNil&<function(id: UInt32): boolean>(z_IsTransformFeedback_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function IsTransformFeedback(id: UInt32): boolean;
    begin
      Result := z_IsTransformFeedback_ovr_0(id);
    end;
    
    // added in gl3.0
    public z_IsVertexArray_adr := GetFuncAdr('glIsVertexArray');
    public z_IsVertexArray_ovr_0 := GetFuncOrNil&<function(array: UInt32): boolean>(z_IsVertexArray_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function IsVertexArray(array: UInt32): boolean;
    begin
      Result := z_IsVertexArray_ovr_0(array);
    end;
    
    // added in gl1.0
    public static procedure z_LineWidth(width: single);
    external 'opengl32.dll' name 'glLineWidth';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure LineWidth(width: single) := z_LineWidth;
    
    // added in gl2.0
    public z_LinkProgram_adr := GetFuncAdr('glLinkProgram');
    public z_LinkProgram_ovr_0 := GetFuncOrNil&<procedure(program: UInt32)>(z_LinkProgram_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure LinkProgram(program: UInt32);
    begin
      z_LinkProgram_ovr_0(program);
    end;
    
    // added in gl1.0
    public static procedure z_LogicOp(opcode: LogicOp);
    external 'opengl32.dll' name 'glLogicOp';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure LogicOp(opcode: LogicOp) := z_LogicOp;
    
    // added in gl1.5
    public z_MapBuffer_adr := GetFuncAdr('glMapBuffer');
    public z_MapBuffer_ovr_0 := GetFuncOrNil&<function(target: BufferTargetARB; access: BufferAccessARB): IntPtr>(z_MapBuffer_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function MapBuffer(target: BufferTargetARB; access: BufferAccessARB): IntPtr;
    begin
      Result := z_MapBuffer_ovr_0(target, access);
    end;
    
    // added in gl3.0
    public z_MapBufferRange_adr := GetFuncAdr('glMapBufferRange');
    public z_MapBufferRange_ovr_0 := GetFuncOrNil&<function(target: BufferTargetARB; offset: IntPtr; length: IntPtr; access: MapBufferAccessMask): IntPtr>(z_MapBufferRange_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function MapBufferRange(target: BufferTargetARB; offset: IntPtr; length: IntPtr; access: MapBufferAccessMask): IntPtr;
    begin
      Result := z_MapBufferRange_ovr_0(target, offset, length, access);
    end;
    
    // added in gl4.5
    public z_MapNamedBuffer_adr := GetFuncAdr('glMapNamedBuffer');
    public z_MapNamedBuffer_ovr_0 := GetFuncOrNil&<function(buffer: UInt32; access: BufferAccessARB): IntPtr>(z_MapNamedBuffer_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function MapNamedBuffer(buffer: UInt32; access: BufferAccessARB): IntPtr;
    begin
      Result := z_MapNamedBuffer_ovr_0(buffer, access);
    end;
    
    // added in gl4.5
    public z_MapNamedBufferRange_adr := GetFuncAdr('glMapNamedBufferRange');
    public z_MapNamedBufferRange_ovr_0 := GetFuncOrNil&<function(buffer: UInt32; offset: IntPtr; length: IntPtr; access: MapBufferAccessMask): IntPtr>(z_MapNamedBufferRange_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function MapNamedBufferRange(buffer: UInt32; offset: IntPtr; length: IntPtr; access: MapBufferAccessMask): IntPtr;
    begin
      Result := z_MapNamedBufferRange_ovr_0(buffer, offset, length, access);
    end;
    
    // added in gl4.2
    public z_MemoryBarrier_adr := GetFuncAdr('glMemoryBarrier');
    public z_MemoryBarrier_ovr_0 := GetFuncOrNil&<procedure(barriers: MemoryBarrierMask)>(z_MemoryBarrier_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MemoryBarrier(barriers: MemoryBarrierMask);
    begin
      z_MemoryBarrier_ovr_0(barriers);
    end;
    
    // added in gl4.5
    public z_MemoryBarrierByRegion_adr := GetFuncAdr('glMemoryBarrierByRegion');
    public z_MemoryBarrierByRegion_ovr_0 := GetFuncOrNil&<procedure(barriers: MemoryBarrierMask)>(z_MemoryBarrierByRegion_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MemoryBarrierByRegion(barriers: MemoryBarrierMask);
    begin
      z_MemoryBarrierByRegion_ovr_0(barriers);
    end;
    
    // added in gl4.0
    public z_MinSampleShading_adr := GetFuncAdr('glMinSampleShading');
    public z_MinSampleShading_ovr_0 := GetFuncOrNil&<procedure(value: single)>(z_MinSampleShading_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MinSampleShading(value: single);
    begin
      z_MinSampleShading_ovr_0(value);
    end;
    
    // added in gl1.4
    public z_MultiDrawArrays_adr := GetFuncAdr('glMultiDrawArrays');
    public z_MultiDrawArrays_ovr_0 := GetFuncOrNil&<procedure(mode: PrimitiveType; var first: Int32; var count: Int32; drawcount: Int32)>(z_MultiDrawArrays_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiDrawArrays(mode: PrimitiveType; first: array of Int32; count: array of Int32; drawcount: Int32);
    begin
      z_MultiDrawArrays_ovr_0(mode, first[0], count[0], drawcount);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiDrawArrays(mode: PrimitiveType; first: array of Int32; var count: Int32; drawcount: Int32);
    begin
      z_MultiDrawArrays_ovr_0(mode, first[0], count, drawcount);
    end;
    public z_MultiDrawArrays_ovr_2 := GetFuncOrNil&<procedure(mode: PrimitiveType; var first: Int32; count: IntPtr; drawcount: Int32)>(z_MultiDrawArrays_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiDrawArrays(mode: PrimitiveType; first: array of Int32; count: IntPtr; drawcount: Int32);
    begin
      z_MultiDrawArrays_ovr_2(mode, first[0], count, drawcount);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiDrawArrays(mode: PrimitiveType; var first: Int32; count: array of Int32; drawcount: Int32);
    begin
      z_MultiDrawArrays_ovr_0(mode, first, count[0], drawcount);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiDrawArrays(mode: PrimitiveType; var first: Int32; var count: Int32; drawcount: Int32);
    begin
      z_MultiDrawArrays_ovr_0(mode, first, count, drawcount);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiDrawArrays(mode: PrimitiveType; var first: Int32; count: IntPtr; drawcount: Int32);
    begin
      z_MultiDrawArrays_ovr_2(mode, first, count, drawcount);
    end;
    public z_MultiDrawArrays_ovr_6 := GetFuncOrNil&<procedure(mode: PrimitiveType; first: IntPtr; var count: Int32; drawcount: Int32)>(z_MultiDrawArrays_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiDrawArrays(mode: PrimitiveType; first: IntPtr; count: array of Int32; drawcount: Int32);
    begin
      z_MultiDrawArrays_ovr_6(mode, first, count[0], drawcount);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiDrawArrays(mode: PrimitiveType; first: IntPtr; var count: Int32; drawcount: Int32);
    begin
      z_MultiDrawArrays_ovr_6(mode, first, count, drawcount);
    end;
    public z_MultiDrawArrays_ovr_8 := GetFuncOrNil&<procedure(mode: PrimitiveType; first: IntPtr; count: IntPtr; drawcount: Int32)>(z_MultiDrawArrays_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiDrawArrays(mode: PrimitiveType; first: IntPtr; count: IntPtr; drawcount: Int32);
    begin
      z_MultiDrawArrays_ovr_8(mode, first, count, drawcount);
    end;
    
    // added in gl4.3
    public z_MultiDrawArraysIndirect_adr := GetFuncAdr('glMultiDrawArraysIndirect');
    public z_MultiDrawArraysIndirect_ovr_0 := GetFuncOrNil&<procedure(mode: PrimitiveType; indirect: IntPtr; drawcount: Int32; stride: Int32)>(z_MultiDrawArraysIndirect_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiDrawArraysIndirect(mode: PrimitiveType; indirect: IntPtr; drawcount: Int32; stride: Int32);
    begin
      z_MultiDrawArraysIndirect_ovr_0(mode, indirect, drawcount, stride);
    end;
    
    // added in gl4.6
    public z_MultiDrawArraysIndirectCount_adr := GetFuncAdr('glMultiDrawArraysIndirectCount');
    public z_MultiDrawArraysIndirectCount_ovr_0 := GetFuncOrNil&<procedure(mode: PrimitiveType; indirect: IntPtr; drawcount: IntPtr; maxdrawcount: Int32; stride: Int32)>(z_MultiDrawArraysIndirectCount_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiDrawArraysIndirectCount(mode: PrimitiveType; indirect: IntPtr; drawcount: IntPtr; maxdrawcount: Int32; stride: Int32);
    begin
      z_MultiDrawArraysIndirectCount_ovr_0(mode, indirect, drawcount, maxdrawcount, stride);
    end;
    
    // added in gl1.4
    public z_MultiDrawElements_adr := GetFuncAdr('glMultiDrawElements');
    public z_MultiDrawElements_ovr_0 := GetFuncOrNil&<procedure(mode: PrimitiveType; var count: Int32; type: DrawElementsType; var indices: IntPtr; drawcount: Int32)>(z_MultiDrawElements_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiDrawElements(mode: PrimitiveType; count: array of Int32; type: DrawElementsType; indices: array of IntPtr; drawcount: Int32);
    begin
      z_MultiDrawElements_ovr_0(mode, count[0], type, indices[0], drawcount);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiDrawElements(mode: PrimitiveType; count: array of Int32; type: DrawElementsType; var indices: IntPtr; drawcount: Int32);
    begin
      z_MultiDrawElements_ovr_0(mode, count[0], type, indices, drawcount);
    end;
    public z_MultiDrawElements_ovr_2 := GetFuncOrNil&<procedure(mode: PrimitiveType; var count: Int32; type: DrawElementsType; indices: IntPtr; drawcount: Int32)>(z_MultiDrawElements_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiDrawElements(mode: PrimitiveType; count: array of Int32; type: DrawElementsType; indices: IntPtr; drawcount: Int32);
    begin
      z_MultiDrawElements_ovr_2(mode, count[0], type, indices, drawcount);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiDrawElements(mode: PrimitiveType; var count: Int32; type: DrawElementsType; indices: array of IntPtr; drawcount: Int32);
    begin
      z_MultiDrawElements_ovr_0(mode, count, type, indices[0], drawcount);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiDrawElements(mode: PrimitiveType; var count: Int32; type: DrawElementsType; var indices: IntPtr; drawcount: Int32);
    begin
      z_MultiDrawElements_ovr_0(mode, count, type, indices, drawcount);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiDrawElements(mode: PrimitiveType; var count: Int32; type: DrawElementsType; indices: IntPtr; drawcount: Int32);
    begin
      z_MultiDrawElements_ovr_2(mode, count, type, indices, drawcount);
    end;
    public z_MultiDrawElements_ovr_6 := GetFuncOrNil&<procedure(mode: PrimitiveType; count: IntPtr; type: DrawElementsType; var indices: IntPtr; drawcount: Int32)>(z_MultiDrawElements_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiDrawElements(mode: PrimitiveType; count: IntPtr; type: DrawElementsType; indices: array of IntPtr; drawcount: Int32);
    begin
      z_MultiDrawElements_ovr_6(mode, count, type, indices[0], drawcount);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiDrawElements(mode: PrimitiveType; count: IntPtr; type: DrawElementsType; var indices: IntPtr; drawcount: Int32);
    begin
      z_MultiDrawElements_ovr_6(mode, count, type, indices, drawcount);
    end;
    public z_MultiDrawElements_ovr_8 := GetFuncOrNil&<procedure(mode: PrimitiveType; count: IntPtr; type: DrawElementsType; indices: IntPtr; drawcount: Int32)>(z_MultiDrawElements_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiDrawElements(mode: PrimitiveType; count: IntPtr; type: DrawElementsType; indices: IntPtr; drawcount: Int32);
    begin
      z_MultiDrawElements_ovr_8(mode, count, type, indices, drawcount);
    end;
    
    // added in gl3.2
    public z_MultiDrawElementsBaseVertex_adr := GetFuncAdr('glMultiDrawElementsBaseVertex');
    public z_MultiDrawElementsBaseVertex_ovr_0 := GetFuncOrNil&<procedure(mode: PrimitiveType; var count: Int32; type: DrawElementsType; var indices: IntPtr; drawcount: Int32; var basevertex: Int32)>(z_MultiDrawElementsBaseVertex_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiDrawElementsBaseVertex(mode: PrimitiveType; count: array of Int32; type: DrawElementsType; indices: array of IntPtr; drawcount: Int32; basevertex: array of Int32);
    begin
      z_MultiDrawElementsBaseVertex_ovr_0(mode, count[0], type, indices[0], drawcount, basevertex[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiDrawElementsBaseVertex(mode: PrimitiveType; count: array of Int32; type: DrawElementsType; indices: array of IntPtr; drawcount: Int32; var basevertex: Int32);
    begin
      z_MultiDrawElementsBaseVertex_ovr_0(mode, count[0], type, indices[0], drawcount, basevertex);
    end;
    public z_MultiDrawElementsBaseVertex_ovr_2 := GetFuncOrNil&<procedure(mode: PrimitiveType; var count: Int32; type: DrawElementsType; var indices: IntPtr; drawcount: Int32; basevertex: IntPtr)>(z_MultiDrawElementsBaseVertex_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiDrawElementsBaseVertex(mode: PrimitiveType; count: array of Int32; type: DrawElementsType; indices: array of IntPtr; drawcount: Int32; basevertex: IntPtr);
    begin
      z_MultiDrawElementsBaseVertex_ovr_2(mode, count[0], type, indices[0], drawcount, basevertex);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiDrawElementsBaseVertex(mode: PrimitiveType; count: array of Int32; type: DrawElementsType; var indices: IntPtr; drawcount: Int32; basevertex: array of Int32);
    begin
      z_MultiDrawElementsBaseVertex_ovr_0(mode, count[0], type, indices, drawcount, basevertex[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiDrawElementsBaseVertex(mode: PrimitiveType; count: array of Int32; type: DrawElementsType; var indices: IntPtr; drawcount: Int32; var basevertex: Int32);
    begin
      z_MultiDrawElementsBaseVertex_ovr_0(mode, count[0], type, indices, drawcount, basevertex);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiDrawElementsBaseVertex(mode: PrimitiveType; count: array of Int32; type: DrawElementsType; var indices: IntPtr; drawcount: Int32; basevertex: IntPtr);
    begin
      z_MultiDrawElementsBaseVertex_ovr_2(mode, count[0], type, indices, drawcount, basevertex);
    end;
    public z_MultiDrawElementsBaseVertex_ovr_6 := GetFuncOrNil&<procedure(mode: PrimitiveType; var count: Int32; type: DrawElementsType; indices: IntPtr; drawcount: Int32; var basevertex: Int32)>(z_MultiDrawElementsBaseVertex_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiDrawElementsBaseVertex(mode: PrimitiveType; count: array of Int32; type: DrawElementsType; indices: IntPtr; drawcount: Int32; basevertex: array of Int32);
    begin
      z_MultiDrawElementsBaseVertex_ovr_6(mode, count[0], type, indices, drawcount, basevertex[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiDrawElementsBaseVertex(mode: PrimitiveType; count: array of Int32; type: DrawElementsType; indices: IntPtr; drawcount: Int32; var basevertex: Int32);
    begin
      z_MultiDrawElementsBaseVertex_ovr_6(mode, count[0], type, indices, drawcount, basevertex);
    end;
    public z_MultiDrawElementsBaseVertex_ovr_8 := GetFuncOrNil&<procedure(mode: PrimitiveType; var count: Int32; type: DrawElementsType; indices: IntPtr; drawcount: Int32; basevertex: IntPtr)>(z_MultiDrawElementsBaseVertex_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiDrawElementsBaseVertex(mode: PrimitiveType; count: array of Int32; type: DrawElementsType; indices: IntPtr; drawcount: Int32; basevertex: IntPtr);
    begin
      z_MultiDrawElementsBaseVertex_ovr_8(mode, count[0], type, indices, drawcount, basevertex);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiDrawElementsBaseVertex(mode: PrimitiveType; var count: Int32; type: DrawElementsType; indices: array of IntPtr; drawcount: Int32; basevertex: array of Int32);
    begin
      z_MultiDrawElementsBaseVertex_ovr_0(mode, count, type, indices[0], drawcount, basevertex[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiDrawElementsBaseVertex(mode: PrimitiveType; var count: Int32; type: DrawElementsType; indices: array of IntPtr; drawcount: Int32; var basevertex: Int32);
    begin
      z_MultiDrawElementsBaseVertex_ovr_0(mode, count, type, indices[0], drawcount, basevertex);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiDrawElementsBaseVertex(mode: PrimitiveType; var count: Int32; type: DrawElementsType; indices: array of IntPtr; drawcount: Int32; basevertex: IntPtr);
    begin
      z_MultiDrawElementsBaseVertex_ovr_2(mode, count, type, indices[0], drawcount, basevertex);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiDrawElementsBaseVertex(mode: PrimitiveType; var count: Int32; type: DrawElementsType; var indices: IntPtr; drawcount: Int32; basevertex: array of Int32);
    begin
      z_MultiDrawElementsBaseVertex_ovr_0(mode, count, type, indices, drawcount, basevertex[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiDrawElementsBaseVertex(mode: PrimitiveType; var count: Int32; type: DrawElementsType; var indices: IntPtr; drawcount: Int32; var basevertex: Int32);
    begin
      z_MultiDrawElementsBaseVertex_ovr_0(mode, count, type, indices, drawcount, basevertex);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiDrawElementsBaseVertex(mode: PrimitiveType; var count: Int32; type: DrawElementsType; var indices: IntPtr; drawcount: Int32; basevertex: IntPtr);
    begin
      z_MultiDrawElementsBaseVertex_ovr_2(mode, count, type, indices, drawcount, basevertex);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiDrawElementsBaseVertex(mode: PrimitiveType; var count: Int32; type: DrawElementsType; indices: IntPtr; drawcount: Int32; basevertex: array of Int32);
    begin
      z_MultiDrawElementsBaseVertex_ovr_6(mode, count, type, indices, drawcount, basevertex[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiDrawElementsBaseVertex(mode: PrimitiveType; var count: Int32; type: DrawElementsType; indices: IntPtr; drawcount: Int32; var basevertex: Int32);
    begin
      z_MultiDrawElementsBaseVertex_ovr_6(mode, count, type, indices, drawcount, basevertex);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiDrawElementsBaseVertex(mode: PrimitiveType; var count: Int32; type: DrawElementsType; indices: IntPtr; drawcount: Int32; basevertex: IntPtr);
    begin
      z_MultiDrawElementsBaseVertex_ovr_8(mode, count, type, indices, drawcount, basevertex);
    end;
    public z_MultiDrawElementsBaseVertex_ovr_18 := GetFuncOrNil&<procedure(mode: PrimitiveType; count: IntPtr; type: DrawElementsType; var indices: IntPtr; drawcount: Int32; var basevertex: Int32)>(z_MultiDrawElementsBaseVertex_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiDrawElementsBaseVertex(mode: PrimitiveType; count: IntPtr; type: DrawElementsType; indices: array of IntPtr; drawcount: Int32; basevertex: array of Int32);
    begin
      z_MultiDrawElementsBaseVertex_ovr_18(mode, count, type, indices[0], drawcount, basevertex[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiDrawElementsBaseVertex(mode: PrimitiveType; count: IntPtr; type: DrawElementsType; indices: array of IntPtr; drawcount: Int32; var basevertex: Int32);
    begin
      z_MultiDrawElementsBaseVertex_ovr_18(mode, count, type, indices[0], drawcount, basevertex);
    end;
    public z_MultiDrawElementsBaseVertex_ovr_20 := GetFuncOrNil&<procedure(mode: PrimitiveType; count: IntPtr; type: DrawElementsType; var indices: IntPtr; drawcount: Int32; basevertex: IntPtr)>(z_MultiDrawElementsBaseVertex_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiDrawElementsBaseVertex(mode: PrimitiveType; count: IntPtr; type: DrawElementsType; indices: array of IntPtr; drawcount: Int32; basevertex: IntPtr);
    begin
      z_MultiDrawElementsBaseVertex_ovr_20(mode, count, type, indices[0], drawcount, basevertex);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiDrawElementsBaseVertex(mode: PrimitiveType; count: IntPtr; type: DrawElementsType; var indices: IntPtr; drawcount: Int32; basevertex: array of Int32);
    begin
      z_MultiDrawElementsBaseVertex_ovr_18(mode, count, type, indices, drawcount, basevertex[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiDrawElementsBaseVertex(mode: PrimitiveType; count: IntPtr; type: DrawElementsType; var indices: IntPtr; drawcount: Int32; var basevertex: Int32);
    begin
      z_MultiDrawElementsBaseVertex_ovr_18(mode, count, type, indices, drawcount, basevertex);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiDrawElementsBaseVertex(mode: PrimitiveType; count: IntPtr; type: DrawElementsType; var indices: IntPtr; drawcount: Int32; basevertex: IntPtr);
    begin
      z_MultiDrawElementsBaseVertex_ovr_20(mode, count, type, indices, drawcount, basevertex);
    end;
    public z_MultiDrawElementsBaseVertex_ovr_24 := GetFuncOrNil&<procedure(mode: PrimitiveType; count: IntPtr; type: DrawElementsType; indices: IntPtr; drawcount: Int32; var basevertex: Int32)>(z_MultiDrawElementsBaseVertex_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiDrawElementsBaseVertex(mode: PrimitiveType; count: IntPtr; type: DrawElementsType; indices: IntPtr; drawcount: Int32; basevertex: array of Int32);
    begin
      z_MultiDrawElementsBaseVertex_ovr_24(mode, count, type, indices, drawcount, basevertex[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiDrawElementsBaseVertex(mode: PrimitiveType; count: IntPtr; type: DrawElementsType; indices: IntPtr; drawcount: Int32; var basevertex: Int32);
    begin
      z_MultiDrawElementsBaseVertex_ovr_24(mode, count, type, indices, drawcount, basevertex);
    end;
    public z_MultiDrawElementsBaseVertex_ovr_26 := GetFuncOrNil&<procedure(mode: PrimitiveType; count: IntPtr; type: DrawElementsType; indices: IntPtr; drawcount: Int32; basevertex: IntPtr)>(z_MultiDrawElementsBaseVertex_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiDrawElementsBaseVertex(mode: PrimitiveType; count: IntPtr; type: DrawElementsType; indices: IntPtr; drawcount: Int32; basevertex: IntPtr);
    begin
      z_MultiDrawElementsBaseVertex_ovr_26(mode, count, type, indices, drawcount, basevertex);
    end;
    
    // added in gl4.3
    public z_MultiDrawElementsIndirect_adr := GetFuncAdr('glMultiDrawElementsIndirect');
    public z_MultiDrawElementsIndirect_ovr_0 := GetFuncOrNil&<procedure(mode: PrimitiveType; type: DrawElementsType; indirect: IntPtr; drawcount: Int32; stride: Int32)>(z_MultiDrawElementsIndirect_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiDrawElementsIndirect(mode: PrimitiveType; type: DrawElementsType; indirect: IntPtr; drawcount: Int32; stride: Int32);
    begin
      z_MultiDrawElementsIndirect_ovr_0(mode, type, indirect, drawcount, stride);
    end;
    
    // added in gl4.6
    public z_MultiDrawElementsIndirectCount_adr := GetFuncAdr('glMultiDrawElementsIndirectCount');
    public z_MultiDrawElementsIndirectCount_ovr_0 := GetFuncOrNil&<procedure(mode: PrimitiveType; type: DrawElementsType; indirect: IntPtr; drawcount: IntPtr; maxdrawcount: Int32; stride: Int32)>(z_MultiDrawElementsIndirectCount_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiDrawElementsIndirectCount(mode: PrimitiveType; type: DrawElementsType; indirect: IntPtr; drawcount: IntPtr; maxdrawcount: Int32; stride: Int32);
    begin
      z_MultiDrawElementsIndirectCount_ovr_0(mode, type, indirect, drawcount, maxdrawcount, stride);
    end;
    
    // added in gl3.3
    public z_MultiTexCoordP1ui_adr := GetFuncAdr('glMultiTexCoordP1ui');
    public z_MultiTexCoordP1ui_ovr_0 := GetFuncOrNil&<procedure(texture: TextureUnit; type: TexCoordPointerType; coords: UInt32)>(z_MultiTexCoordP1ui_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiTexCoordP1ui(texture: TextureUnit; type: TexCoordPointerType; coords: UInt32);
    begin
      z_MultiTexCoordP1ui_ovr_0(texture, type, coords);
    end;
    
    // added in gl3.3
    public z_MultiTexCoordP1uiv_adr := GetFuncAdr('glMultiTexCoordP1uiv');
    public z_MultiTexCoordP1uiv_ovr_0 := GetFuncOrNil&<procedure(texture: TextureUnit; type: TexCoordPointerType; var coords: UInt32)>(z_MultiTexCoordP1uiv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiTexCoordP1uiv(texture: TextureUnit; type: TexCoordPointerType; coords: array of UInt32);
    begin
      z_MultiTexCoordP1uiv_ovr_0(texture, type, coords[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiTexCoordP1uiv(texture: TextureUnit; type: TexCoordPointerType; var coords: UInt32);
    begin
      z_MultiTexCoordP1uiv_ovr_0(texture, type, coords);
    end;
    public z_MultiTexCoordP1uiv_ovr_2 := GetFuncOrNil&<procedure(texture: TextureUnit; type: TexCoordPointerType; coords: IntPtr)>(z_MultiTexCoordP1uiv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiTexCoordP1uiv(texture: TextureUnit; type: TexCoordPointerType; coords: IntPtr);
    begin
      z_MultiTexCoordP1uiv_ovr_2(texture, type, coords);
    end;
    
    // added in gl3.3
    public z_MultiTexCoordP2ui_adr := GetFuncAdr('glMultiTexCoordP2ui');
    public z_MultiTexCoordP2ui_ovr_0 := GetFuncOrNil&<procedure(texture: TextureUnit; type: TexCoordPointerType; coords: UInt32)>(z_MultiTexCoordP2ui_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiTexCoordP2ui(texture: TextureUnit; type: TexCoordPointerType; coords: UInt32);
    begin
      z_MultiTexCoordP2ui_ovr_0(texture, type, coords);
    end;
    
    // added in gl3.3
    public z_MultiTexCoordP2uiv_adr := GetFuncAdr('glMultiTexCoordP2uiv');
    public z_MultiTexCoordP2uiv_ovr_0 := GetFuncOrNil&<procedure(texture: TextureUnit; type: TexCoordPointerType; var coords: UInt32)>(z_MultiTexCoordP2uiv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiTexCoordP2uiv(texture: TextureUnit; type: TexCoordPointerType; coords: array of UInt32);
    begin
      z_MultiTexCoordP2uiv_ovr_0(texture, type, coords[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiTexCoordP2uiv(texture: TextureUnit; type: TexCoordPointerType; var coords: UInt32);
    begin
      z_MultiTexCoordP2uiv_ovr_0(texture, type, coords);
    end;
    public z_MultiTexCoordP2uiv_ovr_2 := GetFuncOrNil&<procedure(texture: TextureUnit; type: TexCoordPointerType; coords: IntPtr)>(z_MultiTexCoordP2uiv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiTexCoordP2uiv(texture: TextureUnit; type: TexCoordPointerType; coords: IntPtr);
    begin
      z_MultiTexCoordP2uiv_ovr_2(texture, type, coords);
    end;
    
    // added in gl3.3
    public z_MultiTexCoordP3ui_adr := GetFuncAdr('glMultiTexCoordP3ui');
    public z_MultiTexCoordP3ui_ovr_0 := GetFuncOrNil&<procedure(texture: TextureUnit; type: TexCoordPointerType; coords: UInt32)>(z_MultiTexCoordP3ui_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiTexCoordP3ui(texture: TextureUnit; type: TexCoordPointerType; coords: UInt32);
    begin
      z_MultiTexCoordP3ui_ovr_0(texture, type, coords);
    end;
    
    // added in gl3.3
    public z_MultiTexCoordP3uiv_adr := GetFuncAdr('glMultiTexCoordP3uiv');
    public z_MultiTexCoordP3uiv_ovr_0 := GetFuncOrNil&<procedure(texture: TextureUnit; type: TexCoordPointerType; var coords: UInt32)>(z_MultiTexCoordP3uiv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiTexCoordP3uiv(texture: TextureUnit; type: TexCoordPointerType; coords: array of UInt32);
    begin
      z_MultiTexCoordP3uiv_ovr_0(texture, type, coords[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiTexCoordP3uiv(texture: TextureUnit; type: TexCoordPointerType; var coords: UInt32);
    begin
      z_MultiTexCoordP3uiv_ovr_0(texture, type, coords);
    end;
    public z_MultiTexCoordP3uiv_ovr_2 := GetFuncOrNil&<procedure(texture: TextureUnit; type: TexCoordPointerType; coords: IntPtr)>(z_MultiTexCoordP3uiv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiTexCoordP3uiv(texture: TextureUnit; type: TexCoordPointerType; coords: IntPtr);
    begin
      z_MultiTexCoordP3uiv_ovr_2(texture, type, coords);
    end;
    
    // added in gl3.3
    public z_MultiTexCoordP4ui_adr := GetFuncAdr('glMultiTexCoordP4ui');
    public z_MultiTexCoordP4ui_ovr_0 := GetFuncOrNil&<procedure(texture: TextureUnit; type: TexCoordPointerType; coords: UInt32)>(z_MultiTexCoordP4ui_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiTexCoordP4ui(texture: TextureUnit; type: TexCoordPointerType; coords: UInt32);
    begin
      z_MultiTexCoordP4ui_ovr_0(texture, type, coords);
    end;
    
    // added in gl3.3
    public z_MultiTexCoordP4uiv_adr := GetFuncAdr('glMultiTexCoordP4uiv');
    public z_MultiTexCoordP4uiv_ovr_0 := GetFuncOrNil&<procedure(texture: TextureUnit; type: TexCoordPointerType; var coords: UInt32)>(z_MultiTexCoordP4uiv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiTexCoordP4uiv(texture: TextureUnit; type: TexCoordPointerType; coords: array of UInt32);
    begin
      z_MultiTexCoordP4uiv_ovr_0(texture, type, coords[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiTexCoordP4uiv(texture: TextureUnit; type: TexCoordPointerType; var coords: UInt32);
    begin
      z_MultiTexCoordP4uiv_ovr_0(texture, type, coords);
    end;
    public z_MultiTexCoordP4uiv_ovr_2 := GetFuncOrNil&<procedure(texture: TextureUnit; type: TexCoordPointerType; coords: IntPtr)>(z_MultiTexCoordP4uiv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiTexCoordP4uiv(texture: TextureUnit; type: TexCoordPointerType; coords: IntPtr);
    begin
      z_MultiTexCoordP4uiv_ovr_2(texture, type, coords);
    end;
    
    // added in gl4.5
    public z_NamedBufferData_adr := GetFuncAdr('glNamedBufferData');
    public z_NamedBufferData_ovr_0 := GetFuncOrNil&<procedure(buffer: UInt32; size: IntPtr; data: IntPtr; usage: VertexBufferObjectUsage)>(z_NamedBufferData_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure NamedBufferData(buffer: UInt32; size: IntPtr; data: IntPtr; usage: VertexBufferObjectUsage);
    begin
      z_NamedBufferData_ovr_0(buffer, size, data, usage);
    end;
    
    // added in gl4.5
    public z_NamedBufferStorage_adr := GetFuncAdr('glNamedBufferStorage');
    public z_NamedBufferStorage_ovr_0 := GetFuncOrNil&<procedure(buffer: UInt32; size: IntPtr; data: IntPtr; flags: BufferStorageMask)>(z_NamedBufferStorage_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure NamedBufferStorage(buffer: UInt32; size: IntPtr; data: IntPtr; flags: BufferStorageMask);
    begin
      z_NamedBufferStorage_ovr_0(buffer, size, data, flags);
    end;
    
    // added in gl4.5
    public z_NamedBufferSubData_adr := GetFuncAdr('glNamedBufferSubData');
    public z_NamedBufferSubData_ovr_0 := GetFuncOrNil&<procedure(buffer: UInt32; offset: IntPtr; size: IntPtr; data: IntPtr)>(z_NamedBufferSubData_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure NamedBufferSubData(buffer: UInt32; offset: IntPtr; size: IntPtr; data: IntPtr);
    begin
      z_NamedBufferSubData_ovr_0(buffer, offset, size, data);
    end;
    
    // added in gl4.5
    public z_NamedFramebufferDrawBuffer_adr := GetFuncAdr('glNamedFramebufferDrawBuffer');
    public z_NamedFramebufferDrawBuffer_ovr_0 := GetFuncOrNil&<procedure(framebuffer: UInt32; buf: ColorBuffer)>(z_NamedFramebufferDrawBuffer_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure NamedFramebufferDrawBuffer(framebuffer: UInt32; buf: ColorBuffer);
    begin
      z_NamedFramebufferDrawBuffer_ovr_0(framebuffer, buf);
    end;
    
    // added in gl4.5
    public z_NamedFramebufferDrawBuffers_adr := GetFuncAdr('glNamedFramebufferDrawBuffers');
    public z_NamedFramebufferDrawBuffers_ovr_0 := GetFuncOrNil&<procedure(framebuffer: UInt32; n: Int32; var bufs: ColorBuffer)>(z_NamedFramebufferDrawBuffers_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure NamedFramebufferDrawBuffers(framebuffer: UInt32; n: Int32; bufs: array of ColorBuffer);
    begin
      z_NamedFramebufferDrawBuffers_ovr_0(framebuffer, n, bufs[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure NamedFramebufferDrawBuffers(framebuffer: UInt32; n: Int32; var bufs: ColorBuffer);
    begin
      z_NamedFramebufferDrawBuffers_ovr_0(framebuffer, n, bufs);
    end;
    public z_NamedFramebufferDrawBuffers_ovr_2 := GetFuncOrNil&<procedure(framebuffer: UInt32; n: Int32; bufs: IntPtr)>(z_NamedFramebufferDrawBuffers_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure NamedFramebufferDrawBuffers(framebuffer: UInt32; n: Int32; bufs: IntPtr);
    begin
      z_NamedFramebufferDrawBuffers_ovr_2(framebuffer, n, bufs);
    end;
    
    // added in gl4.5
    public z_NamedFramebufferParameteri_adr := GetFuncAdr('glNamedFramebufferParameteri');
    public z_NamedFramebufferParameteri_ovr_0 := GetFuncOrNil&<procedure(framebuffer: UInt32; pname: FramebufferParameterName; param: Int32)>(z_NamedFramebufferParameteri_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure NamedFramebufferParameteri(framebuffer: UInt32; pname: FramebufferParameterName; param: Int32);
    begin
      z_NamedFramebufferParameteri_ovr_0(framebuffer, pname, param);
    end;
    
    // added in gl4.5
    public z_NamedFramebufferReadBuffer_adr := GetFuncAdr('glNamedFramebufferReadBuffer');
    public z_NamedFramebufferReadBuffer_ovr_0 := GetFuncOrNil&<procedure(framebuffer: UInt32; src: ColorBuffer)>(z_NamedFramebufferReadBuffer_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure NamedFramebufferReadBuffer(framebuffer: UInt32; src: ColorBuffer);
    begin
      z_NamedFramebufferReadBuffer_ovr_0(framebuffer, src);
    end;
    
    // added in gl4.5
    public z_NamedFramebufferRenderbuffer_adr := GetFuncAdr('glNamedFramebufferRenderbuffer');
    public z_NamedFramebufferRenderbuffer_ovr_0 := GetFuncOrNil&<procedure(framebuffer: UInt32; attachment: FramebufferAttachment; renderbuffertarget: RenderbufferTarget; renderbuffer: UInt32)>(z_NamedFramebufferRenderbuffer_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure NamedFramebufferRenderbuffer(framebuffer: UInt32; attachment: FramebufferAttachment; renderbuffertarget: RenderbufferTarget; renderbuffer: UInt32);
    begin
      z_NamedFramebufferRenderbuffer_ovr_0(framebuffer, attachment, renderbuffertarget, renderbuffer);
    end;
    
    // added in gl4.5
    public z_NamedFramebufferTexture_adr := GetFuncAdr('glNamedFramebufferTexture');
    public z_NamedFramebufferTexture_ovr_0 := GetFuncOrNil&<procedure(framebuffer: UInt32; attachment: FramebufferAttachment; texture: UInt32; level: Int32)>(z_NamedFramebufferTexture_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure NamedFramebufferTexture(framebuffer: UInt32; attachment: FramebufferAttachment; texture: UInt32; level: Int32);
    begin
      z_NamedFramebufferTexture_ovr_0(framebuffer, attachment, texture, level);
    end;
    
    // added in gl4.5
    public z_NamedFramebufferTextureLayer_adr := GetFuncAdr('glNamedFramebufferTextureLayer');
    public z_NamedFramebufferTextureLayer_ovr_0 := GetFuncOrNil&<procedure(framebuffer: UInt32; attachment: FramebufferAttachment; texture: UInt32; level: Int32; layer: Int32)>(z_NamedFramebufferTextureLayer_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure NamedFramebufferTextureLayer(framebuffer: UInt32; attachment: FramebufferAttachment; texture: UInt32; level: Int32; layer: Int32);
    begin
      z_NamedFramebufferTextureLayer_ovr_0(framebuffer, attachment, texture, level, layer);
    end;
    
    // added in gl4.5
    public z_NamedRenderbufferStorage_adr := GetFuncAdr('glNamedRenderbufferStorage');
    public z_NamedRenderbufferStorage_ovr_0 := GetFuncOrNil&<procedure(renderbuffer: UInt32; internalformat: InternalFormat; width: Int32; height: Int32)>(z_NamedRenderbufferStorage_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure NamedRenderbufferStorage(renderbuffer: UInt32; internalformat: InternalFormat; width: Int32; height: Int32);
    begin
      z_NamedRenderbufferStorage_ovr_0(renderbuffer, internalformat, width, height);
    end;
    
    // added in gl4.5
    public z_NamedRenderbufferStorageMultisample_adr := GetFuncAdr('glNamedRenderbufferStorageMultisample');
    public z_NamedRenderbufferStorageMultisample_ovr_0 := GetFuncOrNil&<procedure(renderbuffer: UInt32; samples: Int32; internalformat: InternalFormat; width: Int32; height: Int32)>(z_NamedRenderbufferStorageMultisample_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure NamedRenderbufferStorageMultisample(renderbuffer: UInt32; samples: Int32; internalformat: InternalFormat; width: Int32; height: Int32);
    begin
      z_NamedRenderbufferStorageMultisample_ovr_0(renderbuffer, samples, internalformat, width, height);
    end;
    
    // added in gl3.3
    public z_NormalP3ui_adr := GetFuncAdr('glNormalP3ui');
    public z_NormalP3ui_ovr_0 := GetFuncOrNil&<procedure(type: NormalPointerType; coords: UInt32)>(z_NormalP3ui_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure NormalP3ui(type: NormalPointerType; coords: UInt32);
    begin
      z_NormalP3ui_ovr_0(type, coords);
    end;
    
    // added in gl3.3
    public z_NormalP3uiv_adr := GetFuncAdr('glNormalP3uiv');
    public z_NormalP3uiv_ovr_0 := GetFuncOrNil&<procedure(type: NormalPointerType; var coords: UInt32)>(z_NormalP3uiv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure NormalP3uiv(type: NormalPointerType; coords: array of UInt32);
    begin
      z_NormalP3uiv_ovr_0(type, coords[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure NormalP3uiv(type: NormalPointerType; var coords: UInt32);
    begin
      z_NormalP3uiv_ovr_0(type, coords);
    end;
    public z_NormalP3uiv_ovr_2 := GetFuncOrNil&<procedure(type: NormalPointerType; coords: IntPtr)>(z_NormalP3uiv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure NormalP3uiv(type: NormalPointerType; coords: IntPtr);
    begin
      z_NormalP3uiv_ovr_2(type, coords);
    end;
    
    // added in gl4.3
    public z_ObjectLabel_adr := GetFuncAdr('glObjectLabel');
    public z_ObjectLabel_ovr_0 := GetFuncOrNil&<procedure(identifier: ObjectIdentifier; name: UInt32; length: Int32; label: IntPtr)>(z_ObjectLabel_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ObjectLabel(identifier: ObjectIdentifier; name: UInt32; length: Int32; label: string);
    begin
      var par_4_str_ptr := Marshal.StringToHGlobalAnsi(label);
      z_ObjectLabel_ovr_0(identifier, name, length, par_4_str_ptr);
      Marshal.FreeHGlobal(par_4_str_ptr);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ObjectLabel(identifier: ObjectIdentifier; name: UInt32; length: Int32; label: IntPtr);
    begin
      z_ObjectLabel_ovr_0(identifier, name, length, label);
    end;
    
    // added in gl4.3
    public z_ObjectPtrLabel_adr := GetFuncAdr('glObjectPtrLabel');
    public z_ObjectPtrLabel_ovr_0 := GetFuncOrNil&<procedure(ptr: IntPtr; length: Int32; label: IntPtr)>(z_ObjectPtrLabel_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ObjectPtrLabel(ptr: IntPtr; length: Int32; label: string);
    begin
      var par_3_str_ptr := Marshal.StringToHGlobalAnsi(label);
      z_ObjectPtrLabel_ovr_0(ptr, length, par_3_str_ptr);
      Marshal.FreeHGlobal(par_3_str_ptr);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ObjectPtrLabel(ptr: IntPtr; length: Int32; label: IntPtr);
    begin
      z_ObjectPtrLabel_ovr_0(ptr, length, label);
    end;
    
    // added in gl4.0
    public z_PatchParameterfv_adr := GetFuncAdr('glPatchParameterfv');
    public z_PatchParameterfv_ovr_0 := GetFuncOrNil&<procedure(pname: PatchParameterName; var values: single)>(z_PatchParameterfv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure PatchParameterfv(pname: PatchParameterName; values: array of single);
    begin
      z_PatchParameterfv_ovr_0(pname, values[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure PatchParameterfv(pname: PatchParameterName; var values: single);
    begin
      z_PatchParameterfv_ovr_0(pname, values);
    end;
    public z_PatchParameterfv_ovr_2 := GetFuncOrNil&<procedure(pname: PatchParameterName; values: IntPtr)>(z_PatchParameterfv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure PatchParameterfv(pname: PatchParameterName; values: IntPtr);
    begin
      z_PatchParameterfv_ovr_2(pname, values);
    end;
    
    // added in gl4.0
    public z_PatchParameteri_adr := GetFuncAdr('glPatchParameteri');
    public z_PatchParameteri_ovr_0 := GetFuncOrNil&<procedure(pname: PatchParameterName; value: Int32)>(z_PatchParameteri_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure PatchParameteri(pname: PatchParameterName; value: Int32);
    begin
      z_PatchParameteri_ovr_0(pname, value);
    end;
    
    // added in gl4.0
    public z_PauseTransformFeedback_adr := GetFuncAdr('glPauseTransformFeedback');
    public z_PauseTransformFeedback_ovr_0 := GetFuncOrNil&<procedure>(z_PauseTransformFeedback_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure PauseTransformFeedback;
    begin
      z_PauseTransformFeedback_ovr_0;
    end;
    
    // added in gl1.0
    public static procedure z_PixelStoref(pname: PixelStoreParameter; param: single);
    external 'opengl32.dll' name 'glPixelStoref';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure PixelStoref(pname: PixelStoreParameter; param: single) := z_PixelStoref;
    
    // added in gl1.0
    public static procedure z_PixelStorei(pname: PixelStoreParameter; param: Int32);
    external 'opengl32.dll' name 'glPixelStorei';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure PixelStorei(pname: PixelStoreParameter; param: Int32) := z_PixelStorei;
    
    // added in gl1.4
    public z_PointParameterf_adr := GetFuncAdr('glPointParameterf');
    public z_PointParameterf_ovr_0 := GetFuncOrNil&<procedure(pname: PointParameterNameARB; param: single)>(z_PointParameterf_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure PointParameterf(pname: PointParameterNameARB; param: single);
    begin
      z_PointParameterf_ovr_0(pname, param);
    end;
    
    // added in gl1.4
    public z_PointParameterfv_adr := GetFuncAdr('glPointParameterfv');
    public z_PointParameterfv_ovr_0 := GetFuncOrNil&<procedure(pname: PointParameterNameARB; var params: single)>(z_PointParameterfv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure PointParameterfv(pname: PointParameterNameARB; params: array of single);
    begin
      z_PointParameterfv_ovr_0(pname, params[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure PointParameterfv(pname: PointParameterNameARB; var params: single);
    begin
      z_PointParameterfv_ovr_0(pname, params);
    end;
    public z_PointParameterfv_ovr_2 := GetFuncOrNil&<procedure(pname: PointParameterNameARB; params: IntPtr)>(z_PointParameterfv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure PointParameterfv(pname: PointParameterNameARB; params: IntPtr);
    begin
      z_PointParameterfv_ovr_2(pname, params);
    end;
    
    // added in gl1.4
    public z_PointParameteri_adr := GetFuncAdr('glPointParameteri');
    public z_PointParameteri_ovr_0 := GetFuncOrNil&<procedure(pname: PointParameterNameARB; param: Int32)>(z_PointParameteri_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure PointParameteri(pname: PointParameterNameARB; param: Int32);
    begin
      z_PointParameteri_ovr_0(pname, param);
    end;
    
    // added in gl1.4
    public z_PointParameteriv_adr := GetFuncAdr('glPointParameteriv');
    public z_PointParameteriv_ovr_0 := GetFuncOrNil&<procedure(pname: PointParameterNameARB; var params: Int32)>(z_PointParameteriv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure PointParameteriv(pname: PointParameterNameARB; params: array of Int32);
    begin
      z_PointParameteriv_ovr_0(pname, params[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure PointParameteriv(pname: PointParameterNameARB; var params: Int32);
    begin
      z_PointParameteriv_ovr_0(pname, params);
    end;
    public z_PointParameteriv_ovr_2 := GetFuncOrNil&<procedure(pname: PointParameterNameARB; params: IntPtr)>(z_PointParameteriv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure PointParameteriv(pname: PointParameterNameARB; params: IntPtr);
    begin
      z_PointParameteriv_ovr_2(pname, params);
    end;
    
    // added in gl1.0
    public static procedure z_PointSize(size: single);
    external 'opengl32.dll' name 'glPointSize';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure PointSize(size: single) := z_PointSize;
    
    // added in gl1.0
    public static procedure z_PolygonMode(face: DummyEnum; mode: PolygonMode);
    external 'opengl32.dll' name 'glPolygonMode';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure PolygonMode(face: DummyEnum; mode: PolygonMode) := z_PolygonMode;
    
    // added in gl1.1
    public static procedure z_PolygonOffset(factor: single; units: single);
    external 'opengl32.dll' name 'glPolygonOffset';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure PolygonOffset(factor: single; units: single) := z_PolygonOffset;
    
    // added in gl4.6
    public z_PolygonOffsetClamp_adr := GetFuncAdr('glPolygonOffsetClamp');
    public z_PolygonOffsetClamp_ovr_0 := GetFuncOrNil&<procedure(factor: single; units: single; clamp: single)>(z_PolygonOffsetClamp_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure PolygonOffsetClamp(factor: single; units: single; clamp: single);
    begin
      z_PolygonOffsetClamp_ovr_0(factor, units, clamp);
    end;
    
    // added in gl4.3
    public z_PopDebugGroup_adr := GetFuncAdr('glPopDebugGroup');
    public z_PopDebugGroup_ovr_0 := GetFuncOrNil&<procedure>(z_PopDebugGroup_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure PopDebugGroup;
    begin
      z_PopDebugGroup_ovr_0;
    end;
    
    // added in gl3.1
    public z_PrimitiveRestartIndex_adr := GetFuncAdr('glPrimitiveRestartIndex');
    public z_PrimitiveRestartIndex_ovr_0 := GetFuncOrNil&<procedure(index: UInt32)>(z_PrimitiveRestartIndex_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure PrimitiveRestartIndex(index: UInt32);
    begin
      z_PrimitiveRestartIndex_ovr_0(index);
    end;
    
    // added in gl4.1
    public z_ProgramBinary_adr := GetFuncAdr('glProgramBinary');
    public z_ProgramBinary_ovr_0 := GetFuncOrNil&<procedure(program: UInt32; binaryFormat: DummyEnum; binary: IntPtr; length: Int32)>(z_ProgramBinary_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramBinary(program: UInt32; binaryFormat: DummyEnum; binary: IntPtr; length: Int32);
    begin
      z_ProgramBinary_ovr_0(program, binaryFormat, binary, length);
    end;
    
    // added in gl4.1
    public z_ProgramParameteri_adr := GetFuncAdr('glProgramParameteri');
    public z_ProgramParameteri_ovr_0 := GetFuncOrNil&<procedure(program: UInt32; pname: ProgramParameterPName; value: Int32)>(z_ProgramParameteri_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramParameteri(program: UInt32; pname: ProgramParameterPName; value: Int32);
    begin
      z_ProgramParameteri_ovr_0(program, pname, value);
    end;
    
    // added in gl4.1
    public z_ProgramUniform1d_adr := GetFuncAdr('glProgramUniform1d');
    public z_ProgramUniform1d_ovr_0 := GetFuncOrNil&<procedure(program: UInt32; location: Int32; v0: real)>(z_ProgramUniform1d_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniform1d(program: UInt32; location: Int32; v0: real);
    begin
      z_ProgramUniform1d_ovr_0(program, location, v0);
    end;
    
    // added in gl4.1
    public z_ProgramUniform1dv_adr := GetFuncAdr('glProgramUniform1dv');
    public z_ProgramUniform1dv_ovr_0 := GetFuncOrNil&<procedure(program: UInt32; location: Int32; count: Int32; var value: real)>(z_ProgramUniform1dv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniform1dv(program: UInt32; location: Int32; count: Int32; value: array of real);
    begin
      z_ProgramUniform1dv_ovr_0(program, location, count, value[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniform1dv(program: UInt32; location: Int32; count: Int32; var value: real);
    begin
      z_ProgramUniform1dv_ovr_0(program, location, count, value);
    end;
    public z_ProgramUniform1dv_ovr_2 := GetFuncOrNil&<procedure(program: UInt32; location: Int32; count: Int32; value: IntPtr)>(z_ProgramUniform1dv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniform1dv(program: UInt32; location: Int32; count: Int32; value: IntPtr);
    begin
      z_ProgramUniform1dv_ovr_2(program, location, count, value);
    end;
    
    // added in gl4.1
    public z_ProgramUniform1f_adr := GetFuncAdr('glProgramUniform1f');
    public z_ProgramUniform1f_ovr_0 := GetFuncOrNil&<procedure(program: UInt32; location: Int32; v0: single)>(z_ProgramUniform1f_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniform1f(program: UInt32; location: Int32; v0: single);
    begin
      z_ProgramUniform1f_ovr_0(program, location, v0);
    end;
    
    // added in gl4.1
    public z_ProgramUniform1fv_adr := GetFuncAdr('glProgramUniform1fv');
    public z_ProgramUniform1fv_ovr_0 := GetFuncOrNil&<procedure(program: UInt32; location: Int32; count: Int32; var value: single)>(z_ProgramUniform1fv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniform1fv(program: UInt32; location: Int32; count: Int32; value: array of single);
    begin
      z_ProgramUniform1fv_ovr_0(program, location, count, value[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniform1fv(program: UInt32; location: Int32; count: Int32; var value: single);
    begin
      z_ProgramUniform1fv_ovr_0(program, location, count, value);
    end;
    public z_ProgramUniform1fv_ovr_2 := GetFuncOrNil&<procedure(program: UInt32; location: Int32; count: Int32; value: IntPtr)>(z_ProgramUniform1fv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniform1fv(program: UInt32; location: Int32; count: Int32; value: IntPtr);
    begin
      z_ProgramUniform1fv_ovr_2(program, location, count, value);
    end;
    
    // added in gl4.1
    public z_ProgramUniform1i_adr := GetFuncAdr('glProgramUniform1i');
    public z_ProgramUniform1i_ovr_0 := GetFuncOrNil&<procedure(program: UInt32; location: Int32; v0: Int32)>(z_ProgramUniform1i_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniform1i(program: UInt32; location: Int32; v0: Int32);
    begin
      z_ProgramUniform1i_ovr_0(program, location, v0);
    end;
    
    // added in gl4.1
    public z_ProgramUniform1iv_adr := GetFuncAdr('glProgramUniform1iv');
    public z_ProgramUniform1iv_ovr_0 := GetFuncOrNil&<procedure(program: UInt32; location: Int32; count: Int32; var value: Int32)>(z_ProgramUniform1iv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniform1iv(program: UInt32; location: Int32; count: Int32; value: array of Int32);
    begin
      z_ProgramUniform1iv_ovr_0(program, location, count, value[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniform1iv(program: UInt32; location: Int32; count: Int32; var value: Int32);
    begin
      z_ProgramUniform1iv_ovr_0(program, location, count, value);
    end;
    public z_ProgramUniform1iv_ovr_2 := GetFuncOrNil&<procedure(program: UInt32; location: Int32; count: Int32; value: IntPtr)>(z_ProgramUniform1iv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniform1iv(program: UInt32; location: Int32; count: Int32; value: IntPtr);
    begin
      z_ProgramUniform1iv_ovr_2(program, location, count, value);
    end;
    
    // added in gl4.1
    public z_ProgramUniform1ui_adr := GetFuncAdr('glProgramUniform1ui');
    public z_ProgramUniform1ui_ovr_0 := GetFuncOrNil&<procedure(program: UInt32; location: Int32; v0: UInt32)>(z_ProgramUniform1ui_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniform1ui(program: UInt32; location: Int32; v0: UInt32);
    begin
      z_ProgramUniform1ui_ovr_0(program, location, v0);
    end;
    
    // added in gl4.1
    public z_ProgramUniform1uiv_adr := GetFuncAdr('glProgramUniform1uiv');
    public z_ProgramUniform1uiv_ovr_0 := GetFuncOrNil&<procedure(program: UInt32; location: Int32; count: Int32; var value: UInt32)>(z_ProgramUniform1uiv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniform1uiv(program: UInt32; location: Int32; count: Int32; value: array of UInt32);
    begin
      z_ProgramUniform1uiv_ovr_0(program, location, count, value[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniform1uiv(program: UInt32; location: Int32; count: Int32; var value: UInt32);
    begin
      z_ProgramUniform1uiv_ovr_0(program, location, count, value);
    end;
    public z_ProgramUniform1uiv_ovr_2 := GetFuncOrNil&<procedure(program: UInt32; location: Int32; count: Int32; value: IntPtr)>(z_ProgramUniform1uiv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniform1uiv(program: UInt32; location: Int32; count: Int32; value: IntPtr);
    begin
      z_ProgramUniform1uiv_ovr_2(program, location, count, value);
    end;
    
    // added in gl4.1
    public z_ProgramUniform2d_adr := GetFuncAdr('glProgramUniform2d');
    public z_ProgramUniform2d_ovr_0 := GetFuncOrNil&<procedure(program: UInt32; location: Int32; v0: real; v1: real)>(z_ProgramUniform2d_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniform2d(program: UInt32; location: Int32; v0: real; v1: real);
    begin
      z_ProgramUniform2d_ovr_0(program, location, v0, v1);
    end;
    
    // added in gl4.1
    public z_ProgramUniform2dv_adr := GetFuncAdr('glProgramUniform2dv');
    public z_ProgramUniform2dv_ovr_0 := GetFuncOrNil&<procedure(program: UInt32; location: Int32; count: Int32; var value: real)>(z_ProgramUniform2dv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniform2dv(program: UInt32; location: Int32; count: Int32; value: array of real);
    begin
      z_ProgramUniform2dv_ovr_0(program, location, count, value[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniform2dv(program: UInt32; location: Int32; count: Int32; var value: real);
    begin
      z_ProgramUniform2dv_ovr_0(program, location, count, value);
    end;
    public z_ProgramUniform2dv_ovr_2 := GetFuncOrNil&<procedure(program: UInt32; location: Int32; count: Int32; value: IntPtr)>(z_ProgramUniform2dv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniform2dv(program: UInt32; location: Int32; count: Int32; value: IntPtr);
    begin
      z_ProgramUniform2dv_ovr_2(program, location, count, value);
    end;
    
    // added in gl4.1
    public z_ProgramUniform2f_adr := GetFuncAdr('glProgramUniform2f');
    public z_ProgramUniform2f_ovr_0 := GetFuncOrNil&<procedure(program: UInt32; location: Int32; v0: single; v1: single)>(z_ProgramUniform2f_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniform2f(program: UInt32; location: Int32; v0: single; v1: single);
    begin
      z_ProgramUniform2f_ovr_0(program, location, v0, v1);
    end;
    
    // added in gl4.1
    public z_ProgramUniform2fv_adr := GetFuncAdr('glProgramUniform2fv');
    public z_ProgramUniform2fv_ovr_0 := GetFuncOrNil&<procedure(program: UInt32; location: Int32; count: Int32; var value: single)>(z_ProgramUniform2fv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniform2fv(program: UInt32; location: Int32; count: Int32; value: array of single);
    begin
      z_ProgramUniform2fv_ovr_0(program, location, count, value[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniform2fv(program: UInt32; location: Int32; count: Int32; var value: single);
    begin
      z_ProgramUniform2fv_ovr_0(program, location, count, value);
    end;
    public z_ProgramUniform2fv_ovr_2 := GetFuncOrNil&<procedure(program: UInt32; location: Int32; count: Int32; value: IntPtr)>(z_ProgramUniform2fv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniform2fv(program: UInt32; location: Int32; count: Int32; value: IntPtr);
    begin
      z_ProgramUniform2fv_ovr_2(program, location, count, value);
    end;
    
    // added in gl4.1
    public z_ProgramUniform2i_adr := GetFuncAdr('glProgramUniform2i');
    public z_ProgramUniform2i_ovr_0 := GetFuncOrNil&<procedure(program: UInt32; location: Int32; v0: Int32; v1: Int32)>(z_ProgramUniform2i_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniform2i(program: UInt32; location: Int32; v0: Int32; v1: Int32);
    begin
      z_ProgramUniform2i_ovr_0(program, location, v0, v1);
    end;
    
    // added in gl4.1
    public z_ProgramUniform2iv_adr := GetFuncAdr('glProgramUniform2iv');
    public z_ProgramUniform2iv_ovr_0 := GetFuncOrNil&<procedure(program: UInt32; location: Int32; count: Int32; var value: Int32)>(z_ProgramUniform2iv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniform2iv(program: UInt32; location: Int32; count: Int32; value: array of Int32);
    begin
      z_ProgramUniform2iv_ovr_0(program, location, count, value[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniform2iv(program: UInt32; location: Int32; count: Int32; var value: Int32);
    begin
      z_ProgramUniform2iv_ovr_0(program, location, count, value);
    end;
    public z_ProgramUniform2iv_ovr_2 := GetFuncOrNil&<procedure(program: UInt32; location: Int32; count: Int32; value: IntPtr)>(z_ProgramUniform2iv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniform2iv(program: UInt32; location: Int32; count: Int32; value: IntPtr);
    begin
      z_ProgramUniform2iv_ovr_2(program, location, count, value);
    end;
    
    // added in gl4.1
    public z_ProgramUniform2ui_adr := GetFuncAdr('glProgramUniform2ui');
    public z_ProgramUniform2ui_ovr_0 := GetFuncOrNil&<procedure(program: UInt32; location: Int32; v0: UInt32; v1: UInt32)>(z_ProgramUniform2ui_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniform2ui(program: UInt32; location: Int32; v0: UInt32; v1: UInt32);
    begin
      z_ProgramUniform2ui_ovr_0(program, location, v0, v1);
    end;
    
    // added in gl4.1
    public z_ProgramUniform2uiv_adr := GetFuncAdr('glProgramUniform2uiv');
    public z_ProgramUniform2uiv_ovr_0 := GetFuncOrNil&<procedure(program: UInt32; location: Int32; count: Int32; var value: UInt32)>(z_ProgramUniform2uiv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniform2uiv(program: UInt32; location: Int32; count: Int32; value: array of UInt32);
    begin
      z_ProgramUniform2uiv_ovr_0(program, location, count, value[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniform2uiv(program: UInt32; location: Int32; count: Int32; var value: UInt32);
    begin
      z_ProgramUniform2uiv_ovr_0(program, location, count, value);
    end;
    public z_ProgramUniform2uiv_ovr_2 := GetFuncOrNil&<procedure(program: UInt32; location: Int32; count: Int32; value: IntPtr)>(z_ProgramUniform2uiv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniform2uiv(program: UInt32; location: Int32; count: Int32; value: IntPtr);
    begin
      z_ProgramUniform2uiv_ovr_2(program, location, count, value);
    end;
    
    // added in gl4.1
    public z_ProgramUniform3d_adr := GetFuncAdr('glProgramUniform3d');
    public z_ProgramUniform3d_ovr_0 := GetFuncOrNil&<procedure(program: UInt32; location: Int32; v0: real; v1: real; v2: real)>(z_ProgramUniform3d_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniform3d(program: UInt32; location: Int32; v0: real; v1: real; v2: real);
    begin
      z_ProgramUniform3d_ovr_0(program, location, v0, v1, v2);
    end;
    
    // added in gl4.1
    public z_ProgramUniform3dv_adr := GetFuncAdr('glProgramUniform3dv');
    public z_ProgramUniform3dv_ovr_0 := GetFuncOrNil&<procedure(program: UInt32; location: Int32; count: Int32; var value: real)>(z_ProgramUniform3dv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniform3dv(program: UInt32; location: Int32; count: Int32; value: array of real);
    begin
      z_ProgramUniform3dv_ovr_0(program, location, count, value[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniform3dv(program: UInt32; location: Int32; count: Int32; var value: real);
    begin
      z_ProgramUniform3dv_ovr_0(program, location, count, value);
    end;
    public z_ProgramUniform3dv_ovr_2 := GetFuncOrNil&<procedure(program: UInt32; location: Int32; count: Int32; value: IntPtr)>(z_ProgramUniform3dv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniform3dv(program: UInt32; location: Int32; count: Int32; value: IntPtr);
    begin
      z_ProgramUniform3dv_ovr_2(program, location, count, value);
    end;
    
    // added in gl4.1
    public z_ProgramUniform3f_adr := GetFuncAdr('glProgramUniform3f');
    public z_ProgramUniform3f_ovr_0 := GetFuncOrNil&<procedure(program: UInt32; location: Int32; v0: single; v1: single; v2: single)>(z_ProgramUniform3f_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniform3f(program: UInt32; location: Int32; v0: single; v1: single; v2: single);
    begin
      z_ProgramUniform3f_ovr_0(program, location, v0, v1, v2);
    end;
    
    // added in gl4.1
    public z_ProgramUniform3fv_adr := GetFuncAdr('glProgramUniform3fv');
    public z_ProgramUniform3fv_ovr_0 := GetFuncOrNil&<procedure(program: UInt32; location: Int32; count: Int32; var value: single)>(z_ProgramUniform3fv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniform3fv(program: UInt32; location: Int32; count: Int32; value: array of single);
    begin
      z_ProgramUniform3fv_ovr_0(program, location, count, value[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniform3fv(program: UInt32; location: Int32; count: Int32; var value: single);
    begin
      z_ProgramUniform3fv_ovr_0(program, location, count, value);
    end;
    public z_ProgramUniform3fv_ovr_2 := GetFuncOrNil&<procedure(program: UInt32; location: Int32; count: Int32; value: IntPtr)>(z_ProgramUniform3fv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniform3fv(program: UInt32; location: Int32; count: Int32; value: IntPtr);
    begin
      z_ProgramUniform3fv_ovr_2(program, location, count, value);
    end;
    
    // added in gl4.1
    public z_ProgramUniform3i_adr := GetFuncAdr('glProgramUniform3i');
    public z_ProgramUniform3i_ovr_0 := GetFuncOrNil&<procedure(program: UInt32; location: Int32; v0: Int32; v1: Int32; v2: Int32)>(z_ProgramUniform3i_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniform3i(program: UInt32; location: Int32; v0: Int32; v1: Int32; v2: Int32);
    begin
      z_ProgramUniform3i_ovr_0(program, location, v0, v1, v2);
    end;
    
    // added in gl4.1
    public z_ProgramUniform3iv_adr := GetFuncAdr('glProgramUniform3iv');
    public z_ProgramUniform3iv_ovr_0 := GetFuncOrNil&<procedure(program: UInt32; location: Int32; count: Int32; var value: Int32)>(z_ProgramUniform3iv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniform3iv(program: UInt32; location: Int32; count: Int32; value: array of Int32);
    begin
      z_ProgramUniform3iv_ovr_0(program, location, count, value[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniform3iv(program: UInt32; location: Int32; count: Int32; var value: Int32);
    begin
      z_ProgramUniform3iv_ovr_0(program, location, count, value);
    end;
    public z_ProgramUniform3iv_ovr_2 := GetFuncOrNil&<procedure(program: UInt32; location: Int32; count: Int32; value: IntPtr)>(z_ProgramUniform3iv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniform3iv(program: UInt32; location: Int32; count: Int32; value: IntPtr);
    begin
      z_ProgramUniform3iv_ovr_2(program, location, count, value);
    end;
    
    // added in gl4.1
    public z_ProgramUniform3ui_adr := GetFuncAdr('glProgramUniform3ui');
    public z_ProgramUniform3ui_ovr_0 := GetFuncOrNil&<procedure(program: UInt32; location: Int32; v0: UInt32; v1: UInt32; v2: UInt32)>(z_ProgramUniform3ui_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniform3ui(program: UInt32; location: Int32; v0: UInt32; v1: UInt32; v2: UInt32);
    begin
      z_ProgramUniform3ui_ovr_0(program, location, v0, v1, v2);
    end;
    
    // added in gl4.1
    public z_ProgramUniform3uiv_adr := GetFuncAdr('glProgramUniform3uiv');
    public z_ProgramUniform3uiv_ovr_0 := GetFuncOrNil&<procedure(program: UInt32; location: Int32; count: Int32; var value: UInt32)>(z_ProgramUniform3uiv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniform3uiv(program: UInt32; location: Int32; count: Int32; value: array of UInt32);
    begin
      z_ProgramUniform3uiv_ovr_0(program, location, count, value[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniform3uiv(program: UInt32; location: Int32; count: Int32; var value: UInt32);
    begin
      z_ProgramUniform3uiv_ovr_0(program, location, count, value);
    end;
    public z_ProgramUniform3uiv_ovr_2 := GetFuncOrNil&<procedure(program: UInt32; location: Int32; count: Int32; value: IntPtr)>(z_ProgramUniform3uiv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniform3uiv(program: UInt32; location: Int32; count: Int32; value: IntPtr);
    begin
      z_ProgramUniform3uiv_ovr_2(program, location, count, value);
    end;
    
    // added in gl4.1
    public z_ProgramUniform4d_adr := GetFuncAdr('glProgramUniform4d');
    public z_ProgramUniform4d_ovr_0 := GetFuncOrNil&<procedure(program: UInt32; location: Int32; v0: real; v1: real; v2: real; v3: real)>(z_ProgramUniform4d_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniform4d(program: UInt32; location: Int32; v0: real; v1: real; v2: real; v3: real);
    begin
      z_ProgramUniform4d_ovr_0(program, location, v0, v1, v2, v3);
    end;
    
    // added in gl4.1
    public z_ProgramUniform4dv_adr := GetFuncAdr('glProgramUniform4dv');
    public z_ProgramUniform4dv_ovr_0 := GetFuncOrNil&<procedure(program: UInt32; location: Int32; count: Int32; var value: real)>(z_ProgramUniform4dv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniform4dv(program: UInt32; location: Int32; count: Int32; value: array of real);
    begin
      z_ProgramUniform4dv_ovr_0(program, location, count, value[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniform4dv(program: UInt32; location: Int32; count: Int32; var value: real);
    begin
      z_ProgramUniform4dv_ovr_0(program, location, count, value);
    end;
    public z_ProgramUniform4dv_ovr_2 := GetFuncOrNil&<procedure(program: UInt32; location: Int32; count: Int32; value: IntPtr)>(z_ProgramUniform4dv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniform4dv(program: UInt32; location: Int32; count: Int32; value: IntPtr);
    begin
      z_ProgramUniform4dv_ovr_2(program, location, count, value);
    end;
    
    // added in gl4.1
    public z_ProgramUniform4f_adr := GetFuncAdr('glProgramUniform4f');
    public z_ProgramUniform4f_ovr_0 := GetFuncOrNil&<procedure(program: UInt32; location: Int32; v0: single; v1: single; v2: single; v3: single)>(z_ProgramUniform4f_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniform4f(program: UInt32; location: Int32; v0: single; v1: single; v2: single; v3: single);
    begin
      z_ProgramUniform4f_ovr_0(program, location, v0, v1, v2, v3);
    end;
    
    // added in gl4.1
    public z_ProgramUniform4fv_adr := GetFuncAdr('glProgramUniform4fv');
    public z_ProgramUniform4fv_ovr_0 := GetFuncOrNil&<procedure(program: UInt32; location: Int32; count: Int32; var value: single)>(z_ProgramUniform4fv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniform4fv(program: UInt32; location: Int32; count: Int32; value: array of single);
    begin
      z_ProgramUniform4fv_ovr_0(program, location, count, value[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniform4fv(program: UInt32; location: Int32; count: Int32; var value: single);
    begin
      z_ProgramUniform4fv_ovr_0(program, location, count, value);
    end;
    public z_ProgramUniform4fv_ovr_2 := GetFuncOrNil&<procedure(program: UInt32; location: Int32; count: Int32; value: IntPtr)>(z_ProgramUniform4fv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniform4fv(program: UInt32; location: Int32; count: Int32; value: IntPtr);
    begin
      z_ProgramUniform4fv_ovr_2(program, location, count, value);
    end;
    
    // added in gl4.1
    public z_ProgramUniform4i_adr := GetFuncAdr('glProgramUniform4i');
    public z_ProgramUniform4i_ovr_0 := GetFuncOrNil&<procedure(program: UInt32; location: Int32; v0: Int32; v1: Int32; v2: Int32; v3: Int32)>(z_ProgramUniform4i_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniform4i(program: UInt32; location: Int32; v0: Int32; v1: Int32; v2: Int32; v3: Int32);
    begin
      z_ProgramUniform4i_ovr_0(program, location, v0, v1, v2, v3);
    end;
    
    // added in gl4.1
    public z_ProgramUniform4iv_adr := GetFuncAdr('glProgramUniform4iv');
    public z_ProgramUniform4iv_ovr_0 := GetFuncOrNil&<procedure(program: UInt32; location: Int32; count: Int32; var value: Int32)>(z_ProgramUniform4iv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniform4iv(program: UInt32; location: Int32; count: Int32; value: array of Int32);
    begin
      z_ProgramUniform4iv_ovr_0(program, location, count, value[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniform4iv(program: UInt32; location: Int32; count: Int32; var value: Int32);
    begin
      z_ProgramUniform4iv_ovr_0(program, location, count, value);
    end;
    public z_ProgramUniform4iv_ovr_2 := GetFuncOrNil&<procedure(program: UInt32; location: Int32; count: Int32; value: IntPtr)>(z_ProgramUniform4iv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniform4iv(program: UInt32; location: Int32; count: Int32; value: IntPtr);
    begin
      z_ProgramUniform4iv_ovr_2(program, location, count, value);
    end;
    
    // added in gl4.1
    public z_ProgramUniform4ui_adr := GetFuncAdr('glProgramUniform4ui');
    public z_ProgramUniform4ui_ovr_0 := GetFuncOrNil&<procedure(program: UInt32; location: Int32; v0: UInt32; v1: UInt32; v2: UInt32; v3: UInt32)>(z_ProgramUniform4ui_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniform4ui(program: UInt32; location: Int32; v0: UInt32; v1: UInt32; v2: UInt32; v3: UInt32);
    begin
      z_ProgramUniform4ui_ovr_0(program, location, v0, v1, v2, v3);
    end;
    
    // added in gl4.1
    public z_ProgramUniform4uiv_adr := GetFuncAdr('glProgramUniform4uiv');
    public z_ProgramUniform4uiv_ovr_0 := GetFuncOrNil&<procedure(program: UInt32; location: Int32; count: Int32; var value: UInt32)>(z_ProgramUniform4uiv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniform4uiv(program: UInt32; location: Int32; count: Int32; value: array of UInt32);
    begin
      z_ProgramUniform4uiv_ovr_0(program, location, count, value[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniform4uiv(program: UInt32; location: Int32; count: Int32; var value: UInt32);
    begin
      z_ProgramUniform4uiv_ovr_0(program, location, count, value);
    end;
    public z_ProgramUniform4uiv_ovr_2 := GetFuncOrNil&<procedure(program: UInt32; location: Int32; count: Int32; value: IntPtr)>(z_ProgramUniform4uiv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniform4uiv(program: UInt32; location: Int32; count: Int32; value: IntPtr);
    begin
      z_ProgramUniform4uiv_ovr_2(program, location, count, value);
    end;
    
    // added in gl4.1
    public z_ProgramUniformMatrix2dv_adr := GetFuncAdr('glProgramUniformMatrix2dv');
    public z_ProgramUniformMatrix2dv_ovr_0 := GetFuncOrNil&<procedure(program: UInt32; location: Int32; count: Int32; transpose: boolean; var value: real)>(z_ProgramUniformMatrix2dv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniformMatrix2dv(program: UInt32; location: Int32; count: Int32; transpose: boolean; value: array of real);
    begin
      z_ProgramUniformMatrix2dv_ovr_0(program, location, count, transpose, value[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniformMatrix2dv(program: UInt32; location: Int32; count: Int32; transpose: boolean; var value: real);
    begin
      z_ProgramUniformMatrix2dv_ovr_0(program, location, count, transpose, value);
    end;
    public z_ProgramUniformMatrix2dv_ovr_2 := GetFuncOrNil&<procedure(program: UInt32; location: Int32; count: Int32; transpose: boolean; value: IntPtr)>(z_ProgramUniformMatrix2dv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniformMatrix2dv(program: UInt32; location: Int32; count: Int32; transpose: boolean; value: IntPtr);
    begin
      z_ProgramUniformMatrix2dv_ovr_2(program, location, count, transpose, value);
    end;
    
    // added in gl4.1
    public z_ProgramUniformMatrix2fv_adr := GetFuncAdr('glProgramUniformMatrix2fv');
    public z_ProgramUniformMatrix2fv_ovr_0 := GetFuncOrNil&<procedure(program: UInt32; location: Int32; count: Int32; transpose: boolean; var value: single)>(z_ProgramUniformMatrix2fv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniformMatrix2fv(program: UInt32; location: Int32; count: Int32; transpose: boolean; value: array of single);
    begin
      z_ProgramUniformMatrix2fv_ovr_0(program, location, count, transpose, value[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniformMatrix2fv(program: UInt32; location: Int32; count: Int32; transpose: boolean; var value: single);
    begin
      z_ProgramUniformMatrix2fv_ovr_0(program, location, count, transpose, value);
    end;
    public z_ProgramUniformMatrix2fv_ovr_2 := GetFuncOrNil&<procedure(program: UInt32; location: Int32; count: Int32; transpose: boolean; value: IntPtr)>(z_ProgramUniformMatrix2fv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniformMatrix2fv(program: UInt32; location: Int32; count: Int32; transpose: boolean; value: IntPtr);
    begin
      z_ProgramUniformMatrix2fv_ovr_2(program, location, count, transpose, value);
    end;
    
    // added in gl4.1
    public z_ProgramUniformMatrix2x3dv_adr := GetFuncAdr('glProgramUniformMatrix2x3dv');
    public z_ProgramUniformMatrix2x3dv_ovr_0 := GetFuncOrNil&<procedure(program: UInt32; location: Int32; count: Int32; transpose: boolean; var value: real)>(z_ProgramUniformMatrix2x3dv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniformMatrix2x3dv(program: UInt32; location: Int32; count: Int32; transpose: boolean; value: array of real);
    begin
      z_ProgramUniformMatrix2x3dv_ovr_0(program, location, count, transpose, value[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniformMatrix2x3dv(program: UInt32; location: Int32; count: Int32; transpose: boolean; var value: real);
    begin
      z_ProgramUniformMatrix2x3dv_ovr_0(program, location, count, transpose, value);
    end;
    public z_ProgramUniformMatrix2x3dv_ovr_2 := GetFuncOrNil&<procedure(program: UInt32; location: Int32; count: Int32; transpose: boolean; value: IntPtr)>(z_ProgramUniformMatrix2x3dv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniformMatrix2x3dv(program: UInt32; location: Int32; count: Int32; transpose: boolean; value: IntPtr);
    begin
      z_ProgramUniformMatrix2x3dv_ovr_2(program, location, count, transpose, value);
    end;
    
    // added in gl4.1
    public z_ProgramUniformMatrix2x3fv_adr := GetFuncAdr('glProgramUniformMatrix2x3fv');
    public z_ProgramUniformMatrix2x3fv_ovr_0 := GetFuncOrNil&<procedure(program: UInt32; location: Int32; count: Int32; transpose: boolean; var value: single)>(z_ProgramUniformMatrix2x3fv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniformMatrix2x3fv(program: UInt32; location: Int32; count: Int32; transpose: boolean; value: array of single);
    begin
      z_ProgramUniformMatrix2x3fv_ovr_0(program, location, count, transpose, value[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniformMatrix2x3fv(program: UInt32; location: Int32; count: Int32; transpose: boolean; var value: single);
    begin
      z_ProgramUniformMatrix2x3fv_ovr_0(program, location, count, transpose, value);
    end;
    public z_ProgramUniformMatrix2x3fv_ovr_2 := GetFuncOrNil&<procedure(program: UInt32; location: Int32; count: Int32; transpose: boolean; value: IntPtr)>(z_ProgramUniformMatrix2x3fv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniformMatrix2x3fv(program: UInt32; location: Int32; count: Int32; transpose: boolean; value: IntPtr);
    begin
      z_ProgramUniformMatrix2x3fv_ovr_2(program, location, count, transpose, value);
    end;
    
    // added in gl4.1
    public z_ProgramUniformMatrix2x4dv_adr := GetFuncAdr('glProgramUniformMatrix2x4dv');
    public z_ProgramUniformMatrix2x4dv_ovr_0 := GetFuncOrNil&<procedure(program: UInt32; location: Int32; count: Int32; transpose: boolean; var value: real)>(z_ProgramUniformMatrix2x4dv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniformMatrix2x4dv(program: UInt32; location: Int32; count: Int32; transpose: boolean; value: array of real);
    begin
      z_ProgramUniformMatrix2x4dv_ovr_0(program, location, count, transpose, value[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniformMatrix2x4dv(program: UInt32; location: Int32; count: Int32; transpose: boolean; var value: real);
    begin
      z_ProgramUniformMatrix2x4dv_ovr_0(program, location, count, transpose, value);
    end;
    public z_ProgramUniformMatrix2x4dv_ovr_2 := GetFuncOrNil&<procedure(program: UInt32; location: Int32; count: Int32; transpose: boolean; value: IntPtr)>(z_ProgramUniformMatrix2x4dv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniformMatrix2x4dv(program: UInt32; location: Int32; count: Int32; transpose: boolean; value: IntPtr);
    begin
      z_ProgramUniformMatrix2x4dv_ovr_2(program, location, count, transpose, value);
    end;
    
    // added in gl4.1
    public z_ProgramUniformMatrix2x4fv_adr := GetFuncAdr('glProgramUniformMatrix2x4fv');
    public z_ProgramUniformMatrix2x4fv_ovr_0 := GetFuncOrNil&<procedure(program: UInt32; location: Int32; count: Int32; transpose: boolean; var value: single)>(z_ProgramUniformMatrix2x4fv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniformMatrix2x4fv(program: UInt32; location: Int32; count: Int32; transpose: boolean; value: array of single);
    begin
      z_ProgramUniformMatrix2x4fv_ovr_0(program, location, count, transpose, value[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniformMatrix2x4fv(program: UInt32; location: Int32; count: Int32; transpose: boolean; var value: single);
    begin
      z_ProgramUniformMatrix2x4fv_ovr_0(program, location, count, transpose, value);
    end;
    public z_ProgramUniformMatrix2x4fv_ovr_2 := GetFuncOrNil&<procedure(program: UInt32; location: Int32; count: Int32; transpose: boolean; value: IntPtr)>(z_ProgramUniformMatrix2x4fv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniformMatrix2x4fv(program: UInt32; location: Int32; count: Int32; transpose: boolean; value: IntPtr);
    begin
      z_ProgramUniformMatrix2x4fv_ovr_2(program, location, count, transpose, value);
    end;
    
    // added in gl4.1
    public z_ProgramUniformMatrix3dv_adr := GetFuncAdr('glProgramUniformMatrix3dv');
    public z_ProgramUniformMatrix3dv_ovr_0 := GetFuncOrNil&<procedure(program: UInt32; location: Int32; count: Int32; transpose: boolean; var value: real)>(z_ProgramUniformMatrix3dv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniformMatrix3dv(program: UInt32; location: Int32; count: Int32; transpose: boolean; value: array of real);
    begin
      z_ProgramUniformMatrix3dv_ovr_0(program, location, count, transpose, value[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniformMatrix3dv(program: UInt32; location: Int32; count: Int32; transpose: boolean; var value: real);
    begin
      z_ProgramUniformMatrix3dv_ovr_0(program, location, count, transpose, value);
    end;
    public z_ProgramUniformMatrix3dv_ovr_2 := GetFuncOrNil&<procedure(program: UInt32; location: Int32; count: Int32; transpose: boolean; value: IntPtr)>(z_ProgramUniformMatrix3dv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniformMatrix3dv(program: UInt32; location: Int32; count: Int32; transpose: boolean; value: IntPtr);
    begin
      z_ProgramUniformMatrix3dv_ovr_2(program, location, count, transpose, value);
    end;
    
    // added in gl4.1
    public z_ProgramUniformMatrix3fv_adr := GetFuncAdr('glProgramUniformMatrix3fv');
    public z_ProgramUniformMatrix3fv_ovr_0 := GetFuncOrNil&<procedure(program: UInt32; location: Int32; count: Int32; transpose: boolean; var value: single)>(z_ProgramUniformMatrix3fv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniformMatrix3fv(program: UInt32; location: Int32; count: Int32; transpose: boolean; value: array of single);
    begin
      z_ProgramUniformMatrix3fv_ovr_0(program, location, count, transpose, value[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniformMatrix3fv(program: UInt32; location: Int32; count: Int32; transpose: boolean; var value: single);
    begin
      z_ProgramUniformMatrix3fv_ovr_0(program, location, count, transpose, value);
    end;
    public z_ProgramUniformMatrix3fv_ovr_2 := GetFuncOrNil&<procedure(program: UInt32; location: Int32; count: Int32; transpose: boolean; value: IntPtr)>(z_ProgramUniformMatrix3fv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniformMatrix3fv(program: UInt32; location: Int32; count: Int32; transpose: boolean; value: IntPtr);
    begin
      z_ProgramUniformMatrix3fv_ovr_2(program, location, count, transpose, value);
    end;
    
    // added in gl4.1
    public z_ProgramUniformMatrix3x2dv_adr := GetFuncAdr('glProgramUniformMatrix3x2dv');
    public z_ProgramUniformMatrix3x2dv_ovr_0 := GetFuncOrNil&<procedure(program: UInt32; location: Int32; count: Int32; transpose: boolean; var value: real)>(z_ProgramUniformMatrix3x2dv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniformMatrix3x2dv(program: UInt32; location: Int32; count: Int32; transpose: boolean; value: array of real);
    begin
      z_ProgramUniformMatrix3x2dv_ovr_0(program, location, count, transpose, value[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniformMatrix3x2dv(program: UInt32; location: Int32; count: Int32; transpose: boolean; var value: real);
    begin
      z_ProgramUniformMatrix3x2dv_ovr_0(program, location, count, transpose, value);
    end;
    public z_ProgramUniformMatrix3x2dv_ovr_2 := GetFuncOrNil&<procedure(program: UInt32; location: Int32; count: Int32; transpose: boolean; value: IntPtr)>(z_ProgramUniformMatrix3x2dv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniformMatrix3x2dv(program: UInt32; location: Int32; count: Int32; transpose: boolean; value: IntPtr);
    begin
      z_ProgramUniformMatrix3x2dv_ovr_2(program, location, count, transpose, value);
    end;
    
    // added in gl4.1
    public z_ProgramUniformMatrix3x2fv_adr := GetFuncAdr('glProgramUniformMatrix3x2fv');
    public z_ProgramUniformMatrix3x2fv_ovr_0 := GetFuncOrNil&<procedure(program: UInt32; location: Int32; count: Int32; transpose: boolean; var value: single)>(z_ProgramUniformMatrix3x2fv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniformMatrix3x2fv(program: UInt32; location: Int32; count: Int32; transpose: boolean; value: array of single);
    begin
      z_ProgramUniformMatrix3x2fv_ovr_0(program, location, count, transpose, value[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniformMatrix3x2fv(program: UInt32; location: Int32; count: Int32; transpose: boolean; var value: single);
    begin
      z_ProgramUniformMatrix3x2fv_ovr_0(program, location, count, transpose, value);
    end;
    public z_ProgramUniformMatrix3x2fv_ovr_2 := GetFuncOrNil&<procedure(program: UInt32; location: Int32; count: Int32; transpose: boolean; value: IntPtr)>(z_ProgramUniformMatrix3x2fv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniformMatrix3x2fv(program: UInt32; location: Int32; count: Int32; transpose: boolean; value: IntPtr);
    begin
      z_ProgramUniformMatrix3x2fv_ovr_2(program, location, count, transpose, value);
    end;
    
    // added in gl4.1
    public z_ProgramUniformMatrix3x4dv_adr := GetFuncAdr('glProgramUniformMatrix3x4dv');
    public z_ProgramUniformMatrix3x4dv_ovr_0 := GetFuncOrNil&<procedure(program: UInt32; location: Int32; count: Int32; transpose: boolean; var value: real)>(z_ProgramUniformMatrix3x4dv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniformMatrix3x4dv(program: UInt32; location: Int32; count: Int32; transpose: boolean; value: array of real);
    begin
      z_ProgramUniformMatrix3x4dv_ovr_0(program, location, count, transpose, value[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniformMatrix3x4dv(program: UInt32; location: Int32; count: Int32; transpose: boolean; var value: real);
    begin
      z_ProgramUniformMatrix3x4dv_ovr_0(program, location, count, transpose, value);
    end;
    public z_ProgramUniformMatrix3x4dv_ovr_2 := GetFuncOrNil&<procedure(program: UInt32; location: Int32; count: Int32; transpose: boolean; value: IntPtr)>(z_ProgramUniformMatrix3x4dv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniformMatrix3x4dv(program: UInt32; location: Int32; count: Int32; transpose: boolean; value: IntPtr);
    begin
      z_ProgramUniformMatrix3x4dv_ovr_2(program, location, count, transpose, value);
    end;
    
    // added in gl4.1
    public z_ProgramUniformMatrix3x4fv_adr := GetFuncAdr('glProgramUniformMatrix3x4fv');
    public z_ProgramUniformMatrix3x4fv_ovr_0 := GetFuncOrNil&<procedure(program: UInt32; location: Int32; count: Int32; transpose: boolean; var value: single)>(z_ProgramUniformMatrix3x4fv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniformMatrix3x4fv(program: UInt32; location: Int32; count: Int32; transpose: boolean; value: array of single);
    begin
      z_ProgramUniformMatrix3x4fv_ovr_0(program, location, count, transpose, value[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniformMatrix3x4fv(program: UInt32; location: Int32; count: Int32; transpose: boolean; var value: single);
    begin
      z_ProgramUniformMatrix3x4fv_ovr_0(program, location, count, transpose, value);
    end;
    public z_ProgramUniformMatrix3x4fv_ovr_2 := GetFuncOrNil&<procedure(program: UInt32; location: Int32; count: Int32; transpose: boolean; value: IntPtr)>(z_ProgramUniformMatrix3x4fv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniformMatrix3x4fv(program: UInt32; location: Int32; count: Int32; transpose: boolean; value: IntPtr);
    begin
      z_ProgramUniformMatrix3x4fv_ovr_2(program, location, count, transpose, value);
    end;
    
    // added in gl4.1
    public z_ProgramUniformMatrix4dv_adr := GetFuncAdr('glProgramUniformMatrix4dv');
    public z_ProgramUniformMatrix4dv_ovr_0 := GetFuncOrNil&<procedure(program: UInt32; location: Int32; count: Int32; transpose: boolean; var value: real)>(z_ProgramUniformMatrix4dv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniformMatrix4dv(program: UInt32; location: Int32; count: Int32; transpose: boolean; value: array of real);
    begin
      z_ProgramUniformMatrix4dv_ovr_0(program, location, count, transpose, value[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniformMatrix4dv(program: UInt32; location: Int32; count: Int32; transpose: boolean; var value: real);
    begin
      z_ProgramUniformMatrix4dv_ovr_0(program, location, count, transpose, value);
    end;
    public z_ProgramUniformMatrix4dv_ovr_2 := GetFuncOrNil&<procedure(program: UInt32; location: Int32; count: Int32; transpose: boolean; value: IntPtr)>(z_ProgramUniformMatrix4dv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniformMatrix4dv(program: UInt32; location: Int32; count: Int32; transpose: boolean; value: IntPtr);
    begin
      z_ProgramUniformMatrix4dv_ovr_2(program, location, count, transpose, value);
    end;
    
    // added in gl4.1
    public z_ProgramUniformMatrix4fv_adr := GetFuncAdr('glProgramUniformMatrix4fv');
    public z_ProgramUniformMatrix4fv_ovr_0 := GetFuncOrNil&<procedure(program: UInt32; location: Int32; count: Int32; transpose: boolean; var value: single)>(z_ProgramUniformMatrix4fv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniformMatrix4fv(program: UInt32; location: Int32; count: Int32; transpose: boolean; value: array of single);
    begin
      z_ProgramUniformMatrix4fv_ovr_0(program, location, count, transpose, value[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniformMatrix4fv(program: UInt32; location: Int32; count: Int32; transpose: boolean; var value: single);
    begin
      z_ProgramUniformMatrix4fv_ovr_0(program, location, count, transpose, value);
    end;
    public z_ProgramUniformMatrix4fv_ovr_2 := GetFuncOrNil&<procedure(program: UInt32; location: Int32; count: Int32; transpose: boolean; value: IntPtr)>(z_ProgramUniformMatrix4fv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniformMatrix4fv(program: UInt32; location: Int32; count: Int32; transpose: boolean; value: IntPtr);
    begin
      z_ProgramUniformMatrix4fv_ovr_2(program, location, count, transpose, value);
    end;
    
    // added in gl4.1
    public z_ProgramUniformMatrix4x2dv_adr := GetFuncAdr('glProgramUniformMatrix4x2dv');
    public z_ProgramUniformMatrix4x2dv_ovr_0 := GetFuncOrNil&<procedure(program: UInt32; location: Int32; count: Int32; transpose: boolean; var value: real)>(z_ProgramUniformMatrix4x2dv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniformMatrix4x2dv(program: UInt32; location: Int32; count: Int32; transpose: boolean; value: array of real);
    begin
      z_ProgramUniformMatrix4x2dv_ovr_0(program, location, count, transpose, value[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniformMatrix4x2dv(program: UInt32; location: Int32; count: Int32; transpose: boolean; var value: real);
    begin
      z_ProgramUniformMatrix4x2dv_ovr_0(program, location, count, transpose, value);
    end;
    public z_ProgramUniformMatrix4x2dv_ovr_2 := GetFuncOrNil&<procedure(program: UInt32; location: Int32; count: Int32; transpose: boolean; value: IntPtr)>(z_ProgramUniformMatrix4x2dv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniformMatrix4x2dv(program: UInt32; location: Int32; count: Int32; transpose: boolean; value: IntPtr);
    begin
      z_ProgramUniformMatrix4x2dv_ovr_2(program, location, count, transpose, value);
    end;
    
    // added in gl4.1
    public z_ProgramUniformMatrix4x2fv_adr := GetFuncAdr('glProgramUniformMatrix4x2fv');
    public z_ProgramUniformMatrix4x2fv_ovr_0 := GetFuncOrNil&<procedure(program: UInt32; location: Int32; count: Int32; transpose: boolean; var value: single)>(z_ProgramUniformMatrix4x2fv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniformMatrix4x2fv(program: UInt32; location: Int32; count: Int32; transpose: boolean; value: array of single);
    begin
      z_ProgramUniformMatrix4x2fv_ovr_0(program, location, count, transpose, value[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniformMatrix4x2fv(program: UInt32; location: Int32; count: Int32; transpose: boolean; var value: single);
    begin
      z_ProgramUniformMatrix4x2fv_ovr_0(program, location, count, transpose, value);
    end;
    public z_ProgramUniformMatrix4x2fv_ovr_2 := GetFuncOrNil&<procedure(program: UInt32; location: Int32; count: Int32; transpose: boolean; value: IntPtr)>(z_ProgramUniformMatrix4x2fv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniformMatrix4x2fv(program: UInt32; location: Int32; count: Int32; transpose: boolean; value: IntPtr);
    begin
      z_ProgramUniformMatrix4x2fv_ovr_2(program, location, count, transpose, value);
    end;
    
    // added in gl4.1
    public z_ProgramUniformMatrix4x3dv_adr := GetFuncAdr('glProgramUniformMatrix4x3dv');
    public z_ProgramUniformMatrix4x3dv_ovr_0 := GetFuncOrNil&<procedure(program: UInt32; location: Int32; count: Int32; transpose: boolean; var value: real)>(z_ProgramUniformMatrix4x3dv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniformMatrix4x3dv(program: UInt32; location: Int32; count: Int32; transpose: boolean; value: array of real);
    begin
      z_ProgramUniformMatrix4x3dv_ovr_0(program, location, count, transpose, value[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniformMatrix4x3dv(program: UInt32; location: Int32; count: Int32; transpose: boolean; var value: real);
    begin
      z_ProgramUniformMatrix4x3dv_ovr_0(program, location, count, transpose, value);
    end;
    public z_ProgramUniformMatrix4x3dv_ovr_2 := GetFuncOrNil&<procedure(program: UInt32; location: Int32; count: Int32; transpose: boolean; value: IntPtr)>(z_ProgramUniformMatrix4x3dv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniformMatrix4x3dv(program: UInt32; location: Int32; count: Int32; transpose: boolean; value: IntPtr);
    begin
      z_ProgramUniformMatrix4x3dv_ovr_2(program, location, count, transpose, value);
    end;
    
    // added in gl4.1
    public z_ProgramUniformMatrix4x3fv_adr := GetFuncAdr('glProgramUniformMatrix4x3fv');
    public z_ProgramUniformMatrix4x3fv_ovr_0 := GetFuncOrNil&<procedure(program: UInt32; location: Int32; count: Int32; transpose: boolean; var value: single)>(z_ProgramUniformMatrix4x3fv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniformMatrix4x3fv(program: UInt32; location: Int32; count: Int32; transpose: boolean; value: array of single);
    begin
      z_ProgramUniformMatrix4x3fv_ovr_0(program, location, count, transpose, value[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniformMatrix4x3fv(program: UInt32; location: Int32; count: Int32; transpose: boolean; var value: single);
    begin
      z_ProgramUniformMatrix4x3fv_ovr_0(program, location, count, transpose, value);
    end;
    public z_ProgramUniformMatrix4x3fv_ovr_2 := GetFuncOrNil&<procedure(program: UInt32; location: Int32; count: Int32; transpose: boolean; value: IntPtr)>(z_ProgramUniformMatrix4x3fv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniformMatrix4x3fv(program: UInt32; location: Int32; count: Int32; transpose: boolean; value: IntPtr);
    begin
      z_ProgramUniformMatrix4x3fv_ovr_2(program, location, count, transpose, value);
    end;
    
    // added in gl3.2
    public z_ProvokingVertex_adr := GetFuncAdr('glProvokingVertex');
    public z_ProvokingVertex_ovr_0 := GetFuncOrNil&<procedure(mode: VertexProvokingMode)>(z_ProvokingVertex_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProvokingVertex(mode: VertexProvokingMode);
    begin
      z_ProvokingVertex_ovr_0(mode);
    end;
    
    // added in gl4.3
    public z_PushDebugGroup_adr := GetFuncAdr('glPushDebugGroup');
    public z_PushDebugGroup_ovr_0 := GetFuncOrNil&<procedure(source: DebugSource; id: UInt32; length: Int32; message: IntPtr)>(z_PushDebugGroup_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure PushDebugGroup(source: DebugSource; id: UInt32; length: Int32; message: string);
    begin
      var par_4_str_ptr := Marshal.StringToHGlobalAnsi(message);
      z_PushDebugGroup_ovr_0(source, id, length, par_4_str_ptr);
      Marshal.FreeHGlobal(par_4_str_ptr);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure PushDebugGroup(source: DebugSource; id: UInt32; length: Int32; message: IntPtr);
    begin
      z_PushDebugGroup_ovr_0(source, id, length, message);
    end;
    
    // added in gl3.3
    public z_QueryCounter_adr := GetFuncAdr('glQueryCounter');
    public z_QueryCounter_ovr_0 := GetFuncOrNil&<procedure(id: UInt32; target: QueryCounterTarget)>(z_QueryCounter_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure QueryCounter(id: UInt32; target: QueryCounterTarget);
    begin
      z_QueryCounter_ovr_0(id, target);
    end;
    
    // added in gl1.0
    public static procedure z_ReadBuffer(src: ReadBufferMode);
    external 'opengl32.dll' name 'glReadBuffer';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ReadBuffer(src: ReadBufferMode) := z_ReadBuffer;
    
    // added in gl4.5
    public z_ReadnPixels_adr := GetFuncAdr('glReadnPixels');
    public z_ReadnPixels_ovr_0 := GetFuncOrNil&<procedure(x: Int32; y: Int32; width: Int32; height: Int32; format: PixelFormat; type: PixelType; bufSize: Int32; data: IntPtr)>(z_ReadnPixels_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ReadnPixels(x: Int32; y: Int32; width: Int32; height: Int32; format: PixelFormat; type: PixelType; bufSize: Int32; data: IntPtr);
    begin
      z_ReadnPixels_ovr_0(x, y, width, height, format, type, bufSize, data);
    end;
    
    // added in gl1.0
    public static procedure z_ReadPixels(x: Int32; y: Int32; width: Int32; height: Int32; format: PixelFormat; type: PixelType; pixels: IntPtr);
    external 'opengl32.dll' name 'glReadPixels';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ReadPixels(x: Int32; y: Int32; width: Int32; height: Int32; format: PixelFormat; type: PixelType; pixels: IntPtr) := z_ReadPixels;
    
    // added in gl4.1
    public z_ReleaseShaderCompiler_adr := GetFuncAdr('glReleaseShaderCompiler');
    public z_ReleaseShaderCompiler_ovr_0 := GetFuncOrNil&<procedure>(z_ReleaseShaderCompiler_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ReleaseShaderCompiler;
    begin
      z_ReleaseShaderCompiler_ovr_0;
    end;
    
    // added in gl3.0
    public z_RenderbufferStorage_adr := GetFuncAdr('glRenderbufferStorage');
    public z_RenderbufferStorage_ovr_0 := GetFuncOrNil&<procedure(target: RenderbufferTarget; internalformat: InternalFormat; width: Int32; height: Int32)>(z_RenderbufferStorage_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure RenderbufferStorage(target: RenderbufferTarget; internalformat: InternalFormat; width: Int32; height: Int32);
    begin
      z_RenderbufferStorage_ovr_0(target, internalformat, width, height);
    end;
    
    // added in gl3.0
    public z_RenderbufferStorageMultisample_adr := GetFuncAdr('glRenderbufferStorageMultisample');
    public z_RenderbufferStorageMultisample_ovr_0 := GetFuncOrNil&<procedure(target: RenderbufferTarget; samples: Int32; internalformat: InternalFormat; width: Int32; height: Int32)>(z_RenderbufferStorageMultisample_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure RenderbufferStorageMultisample(target: RenderbufferTarget; samples: Int32; internalformat: InternalFormat; width: Int32; height: Int32);
    begin
      z_RenderbufferStorageMultisample_ovr_0(target, samples, internalformat, width, height);
    end;
    
    // added in gl4.0
    public z_ResumeTransformFeedback_adr := GetFuncAdr('glResumeTransformFeedback');
    public z_ResumeTransformFeedback_ovr_0 := GetFuncOrNil&<procedure>(z_ResumeTransformFeedback_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ResumeTransformFeedback;
    begin
      z_ResumeTransformFeedback_ovr_0;
    end;
    
    // added in gl1.3
    public z_SampleCoverage_adr := GetFuncAdr('glSampleCoverage');
    public z_SampleCoverage_ovr_0 := GetFuncOrNil&<procedure(value: single; invert: boolean)>(z_SampleCoverage_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure SampleCoverage(value: single; invert: boolean);
    begin
      z_SampleCoverage_ovr_0(value, invert);
    end;
    
    // added in gl3.2
    public z_SampleMaski_adr := GetFuncAdr('glSampleMaski');
    public z_SampleMaski_ovr_0 := GetFuncOrNil&<procedure(maskNumber: UInt32; mask: DummyFlags)>(z_SampleMaski_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure SampleMaski(maskNumber: UInt32; mask: DummyFlags);
    begin
      z_SampleMaski_ovr_0(maskNumber, mask);
    end;
    
    // added in gl3.3
    public z_SamplerParameterf_adr := GetFuncAdr('glSamplerParameterf');
    public z_SamplerParameterf_ovr_0 := GetFuncOrNil&<procedure(sampler: UInt32; pname: SamplerParameterF; param: single)>(z_SamplerParameterf_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure SamplerParameterf(sampler: UInt32; pname: SamplerParameterF; param: single);
    begin
      z_SamplerParameterf_ovr_0(sampler, pname, param);
    end;
    
    // added in gl3.3
    public z_SamplerParameterfv_adr := GetFuncAdr('glSamplerParameterfv');
    public z_SamplerParameterfv_ovr_0 := GetFuncOrNil&<procedure(sampler: UInt32; pname: SamplerParameterF; var param: single)>(z_SamplerParameterfv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure SamplerParameterfv(sampler: UInt32; pname: SamplerParameterF; param: array of single);
    begin
      z_SamplerParameterfv_ovr_0(sampler, pname, param[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure SamplerParameterfv(sampler: UInt32; pname: SamplerParameterF; var param: single);
    begin
      z_SamplerParameterfv_ovr_0(sampler, pname, param);
    end;
    public z_SamplerParameterfv_ovr_2 := GetFuncOrNil&<procedure(sampler: UInt32; pname: SamplerParameterF; param: IntPtr)>(z_SamplerParameterfv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure SamplerParameterfv(sampler: UInt32; pname: SamplerParameterF; param: IntPtr);
    begin
      z_SamplerParameterfv_ovr_2(sampler, pname, param);
    end;
    
    // added in gl3.3
    public z_SamplerParameteri_adr := GetFuncAdr('glSamplerParameteri');
    public z_SamplerParameteri_ovr_0 := GetFuncOrNil&<procedure(sampler: UInt32; pname: SamplerParameterI; param: Int32)>(z_SamplerParameteri_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure SamplerParameteri(sampler: UInt32; pname: SamplerParameterI; param: Int32);
    begin
      z_SamplerParameteri_ovr_0(sampler, pname, param);
    end;
    
    // added in gl3.3
    public z_SamplerParameterIiv_adr := GetFuncAdr('glSamplerParameterIiv');
    public z_SamplerParameterIiv_ovr_0 := GetFuncOrNil&<procedure(sampler: UInt32; pname: SamplerParameterI; var param: Int32)>(z_SamplerParameterIiv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure SamplerParameterIiv(sampler: UInt32; pname: SamplerParameterI; param: array of Int32);
    begin
      z_SamplerParameterIiv_ovr_0(sampler, pname, param[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure SamplerParameterIiv(sampler: UInt32; pname: SamplerParameterI; var param: Int32);
    begin
      z_SamplerParameterIiv_ovr_0(sampler, pname, param);
    end;
    public z_SamplerParameterIiv_ovr_2 := GetFuncOrNil&<procedure(sampler: UInt32; pname: SamplerParameterI; param: IntPtr)>(z_SamplerParameterIiv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure SamplerParameterIiv(sampler: UInt32; pname: SamplerParameterI; param: IntPtr);
    begin
      z_SamplerParameterIiv_ovr_2(sampler, pname, param);
    end;
    
    // added in gl3.3
    public z_SamplerParameterIuiv_adr := GetFuncAdr('glSamplerParameterIuiv');
    public z_SamplerParameterIuiv_ovr_0 := GetFuncOrNil&<procedure(sampler: UInt32; pname: SamplerParameterI; var param: UInt32)>(z_SamplerParameterIuiv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure SamplerParameterIuiv(sampler: UInt32; pname: SamplerParameterI; param: array of UInt32);
    begin
      z_SamplerParameterIuiv_ovr_0(sampler, pname, param[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure SamplerParameterIuiv(sampler: UInt32; pname: SamplerParameterI; var param: UInt32);
    begin
      z_SamplerParameterIuiv_ovr_0(sampler, pname, param);
    end;
    public z_SamplerParameterIuiv_ovr_2 := GetFuncOrNil&<procedure(sampler: UInt32; pname: SamplerParameterI; param: IntPtr)>(z_SamplerParameterIuiv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure SamplerParameterIuiv(sampler: UInt32; pname: SamplerParameterI; param: IntPtr);
    begin
      z_SamplerParameterIuiv_ovr_2(sampler, pname, param);
    end;
    
    // added in gl3.3
    public z_SamplerParameteriv_adr := GetFuncAdr('glSamplerParameteriv');
    public z_SamplerParameteriv_ovr_0 := GetFuncOrNil&<procedure(sampler: UInt32; pname: SamplerParameterI; var param: Int32)>(z_SamplerParameteriv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure SamplerParameteriv(sampler: UInt32; pname: SamplerParameterI; param: array of Int32);
    begin
      z_SamplerParameteriv_ovr_0(sampler, pname, param[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure SamplerParameteriv(sampler: UInt32; pname: SamplerParameterI; var param: Int32);
    begin
      z_SamplerParameteriv_ovr_0(sampler, pname, param);
    end;
    public z_SamplerParameteriv_ovr_2 := GetFuncOrNil&<procedure(sampler: UInt32; pname: SamplerParameterI; param: IntPtr)>(z_SamplerParameteriv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure SamplerParameteriv(sampler: UInt32; pname: SamplerParameterI; param: IntPtr);
    begin
      z_SamplerParameteriv_ovr_2(sampler, pname, param);
    end;
    
    // added in gl1.0
    public static procedure z_Scissor(x: Int32; y: Int32; width: Int32; height: Int32);
    external 'opengl32.dll' name 'glScissor';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Scissor(x: Int32; y: Int32; width: Int32; height: Int32) := z_Scissor;
    
    // added in gl4.1
    public z_ScissorArrayv_adr := GetFuncAdr('glScissorArrayv');
    public z_ScissorArrayv_ovr_0 := GetFuncOrNil&<procedure(first: UInt32; count: Int32; var v: Int32)>(z_ScissorArrayv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ScissorArrayv(first: UInt32; count: Int32; v: array of Int32);
    begin
      z_ScissorArrayv_ovr_0(first, count, v[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ScissorArrayv(first: UInt32; count: Int32; var v: Int32);
    begin
      z_ScissorArrayv_ovr_0(first, count, v);
    end;
    public z_ScissorArrayv_ovr_2 := GetFuncOrNil&<procedure(first: UInt32; count: Int32; v: IntPtr)>(z_ScissorArrayv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ScissorArrayv(first: UInt32; count: Int32; v: IntPtr);
    begin
      z_ScissorArrayv_ovr_2(first, count, v);
    end;
    
    // added in gl4.1
    public z_ScissorIndexed_adr := GetFuncAdr('glScissorIndexed');
    public z_ScissorIndexed_ovr_0 := GetFuncOrNil&<procedure(index: UInt32; left: Int32; bottom: Int32; width: Int32; height: Int32)>(z_ScissorIndexed_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ScissorIndexed(index: UInt32; left: Int32; bottom: Int32; width: Int32; height: Int32);
    begin
      z_ScissorIndexed_ovr_0(index, left, bottom, width, height);
    end;
    
    // added in gl4.1
    public z_ScissorIndexedv_adr := GetFuncAdr('glScissorIndexedv');
    public z_ScissorIndexedv_ovr_0 := GetFuncOrNil&<procedure(index: UInt32; var v: Int32)>(z_ScissorIndexedv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ScissorIndexedv(index: UInt32; v: array of Int32);
    begin
      z_ScissorIndexedv_ovr_0(index, v[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ScissorIndexedv(index: UInt32; var v: Int32);
    begin
      z_ScissorIndexedv_ovr_0(index, v);
    end;
    public z_ScissorIndexedv_ovr_2 := GetFuncOrNil&<procedure(index: UInt32; v: IntPtr)>(z_ScissorIndexedv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ScissorIndexedv(index: UInt32; v: IntPtr);
    begin
      z_ScissorIndexedv_ovr_2(index, v);
    end;
    
    // added in gl3.3
    public z_SecondaryColorP3ui_adr := GetFuncAdr('glSecondaryColorP3ui');
    public z_SecondaryColorP3ui_ovr_0 := GetFuncOrNil&<procedure(type: ColorPointerType; color: UInt32)>(z_SecondaryColorP3ui_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure SecondaryColorP3ui(type: ColorPointerType; color: UInt32);
    begin
      z_SecondaryColorP3ui_ovr_0(type, color);
    end;
    
    // added in gl3.3
    public z_SecondaryColorP3uiv_adr := GetFuncAdr('glSecondaryColorP3uiv');
    public z_SecondaryColorP3uiv_ovr_0 := GetFuncOrNil&<procedure(type: ColorPointerType; var color: UInt32)>(z_SecondaryColorP3uiv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure SecondaryColorP3uiv(type: ColorPointerType; color: array of UInt32);
    begin
      z_SecondaryColorP3uiv_ovr_0(type, color[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure SecondaryColorP3uiv(type: ColorPointerType; var color: UInt32);
    begin
      z_SecondaryColorP3uiv_ovr_0(type, color);
    end;
    public z_SecondaryColorP3uiv_ovr_2 := GetFuncOrNil&<procedure(type: ColorPointerType; color: IntPtr)>(z_SecondaryColorP3uiv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure SecondaryColorP3uiv(type: ColorPointerType; color: IntPtr);
    begin
      z_SecondaryColorP3uiv_ovr_2(type, color);
    end;
    
    // added in gl4.1
    public z_ShaderBinary_adr := GetFuncAdr('glShaderBinary');
    public z_ShaderBinary_ovr_0 := GetFuncOrNil&<procedure(count: Int32; var shaders: UInt32; binaryformat: DummyEnum; binary: IntPtr; length: Int32)>(z_ShaderBinary_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ShaderBinary(count: Int32; shaders: array of UInt32; binaryformat: DummyEnum; binary: IntPtr; length: Int32);
    begin
      z_ShaderBinary_ovr_0(count, shaders[0], binaryformat, binary, length);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ShaderBinary(count: Int32; var shaders: UInt32; binaryformat: DummyEnum; binary: IntPtr; length: Int32);
    begin
      z_ShaderBinary_ovr_0(count, shaders, binaryformat, binary, length);
    end;
    public z_ShaderBinary_ovr_2 := GetFuncOrNil&<procedure(count: Int32; shaders: IntPtr; binaryformat: DummyEnum; binary: IntPtr; length: Int32)>(z_ShaderBinary_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ShaderBinary(count: Int32; shaders: IntPtr; binaryformat: DummyEnum; binary: IntPtr; length: Int32);
    begin
      z_ShaderBinary_ovr_2(count, shaders, binaryformat, binary, length);
    end;
    
    // added in gl2.0
    public z_ShaderSource_adr := GetFuncAdr('glShaderSource');
    public z_ShaderSource_ovr_0 := GetFuncOrNil&<procedure(shader: UInt32; count: Int32; var string: IntPtr; var length: Int32)>(z_ShaderSource_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ShaderSource(shader: UInt32; count: Int32; string: array of string; length: array of Int32);
    begin
      var par_3_str_ptr := string.ConvertAll(arr_el1->Marshal.StringToHGlobalAnsi(arr_el1));
      z_ShaderSource_ovr_0(shader, count, par_3_str_ptr[0], length[0]);
      foreach var arr_el1 in par_3_str_ptr do Marshal.FreeHGlobal(arr_el1);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ShaderSource(shader: UInt32; count: Int32; string: array of string; var length: Int32);
    begin
      var par_3_str_ptr := string.ConvertAll(arr_el1->Marshal.StringToHGlobalAnsi(arr_el1));
      z_ShaderSource_ovr_0(shader, count, par_3_str_ptr[0], length);
      foreach var arr_el1 in par_3_str_ptr do Marshal.FreeHGlobal(arr_el1);
    end;
    public z_ShaderSource_ovr_2 := GetFuncOrNil&<procedure(shader: UInt32; count: Int32; var string: IntPtr; length: IntPtr)>(z_ShaderSource_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ShaderSource(shader: UInt32; count: Int32; string: array of string; length: IntPtr);
    begin
      var par_3_str_ptr := string.ConvertAll(arr_el1->Marshal.StringToHGlobalAnsi(arr_el1));
      z_ShaderSource_ovr_2(shader, count, par_3_str_ptr[0], length);
      foreach var arr_el1 in par_3_str_ptr do Marshal.FreeHGlobal(arr_el1);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ShaderSource(shader: UInt32; count: Int32; string: array of IntPtr; length: array of Int32);
    begin
      z_ShaderSource_ovr_0(shader, count, string[0], length[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ShaderSource(shader: UInt32; count: Int32; string: array of IntPtr; var length: Int32);
    begin
      z_ShaderSource_ovr_0(shader, count, string[0], length);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ShaderSource(shader: UInt32; count: Int32; string: array of IntPtr; length: IntPtr);
    begin
      z_ShaderSource_ovr_2(shader, count, string[0], length);
    end;
    public z_ShaderSource_ovr_6 := GetFuncOrNil&<procedure(shader: UInt32; count: Int32; string: IntPtr; var length: Int32)>(z_ShaderSource_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ShaderSource(shader: UInt32; count: Int32; string: IntPtr; length: array of Int32);
    begin
      z_ShaderSource_ovr_6(shader, count, string, length[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ShaderSource(shader: UInt32; count: Int32; string: IntPtr; var length: Int32);
    begin
      z_ShaderSource_ovr_6(shader, count, string, length);
    end;
    public z_ShaderSource_ovr_8 := GetFuncOrNil&<procedure(shader: UInt32; count: Int32; string: IntPtr; length: IntPtr)>(z_ShaderSource_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ShaderSource(shader: UInt32; count: Int32; string: IntPtr; length: IntPtr);
    begin
      z_ShaderSource_ovr_8(shader, count, string, length);
    end;
    
    // added in gl4.3
    public z_ShaderStorageBlockBinding_adr := GetFuncAdr('glShaderStorageBlockBinding');
    public z_ShaderStorageBlockBinding_ovr_0 := GetFuncOrNil&<procedure(program: UInt32; storageBlockIndex: UInt32; storageBlockBinding: UInt32)>(z_ShaderStorageBlockBinding_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ShaderStorageBlockBinding(program: UInt32; storageBlockIndex: UInt32; storageBlockBinding: UInt32);
    begin
      z_ShaderStorageBlockBinding_ovr_0(program, storageBlockIndex, storageBlockBinding);
    end;
    
    // added in gl4.6
    public z_SpecializeShader_adr := GetFuncAdr('glSpecializeShader');
    public z_SpecializeShader_ovr_0 := GetFuncOrNil&<procedure(shader: UInt32; pEntryPoint: IntPtr; numSpecializationConstants: UInt32; var pConstantIndex: UInt32; var pConstantValue: UInt32)>(z_SpecializeShader_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure SpecializeShader(shader: UInt32; pEntryPoint: string; numSpecializationConstants: UInt32; pConstantIndex: array of UInt32; pConstantValue: array of UInt32);
    begin
      var par_2_str_ptr := Marshal.StringToHGlobalAnsi(pEntryPoint);
      z_SpecializeShader_ovr_0(shader, par_2_str_ptr, numSpecializationConstants, pConstantIndex[0], pConstantValue[0]);
      Marshal.FreeHGlobal(par_2_str_ptr);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure SpecializeShader(shader: UInt32; pEntryPoint: string; numSpecializationConstants: UInt32; pConstantIndex: array of UInt32; var pConstantValue: UInt32);
    begin
      var par_2_str_ptr := Marshal.StringToHGlobalAnsi(pEntryPoint);
      z_SpecializeShader_ovr_0(shader, par_2_str_ptr, numSpecializationConstants, pConstantIndex[0], pConstantValue);
      Marshal.FreeHGlobal(par_2_str_ptr);
    end;
    public z_SpecializeShader_ovr_2 := GetFuncOrNil&<procedure(shader: UInt32; pEntryPoint: IntPtr; numSpecializationConstants: UInt32; var pConstantIndex: UInt32; pConstantValue: IntPtr)>(z_SpecializeShader_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure SpecializeShader(shader: UInt32; pEntryPoint: string; numSpecializationConstants: UInt32; pConstantIndex: array of UInt32; pConstantValue: IntPtr);
    begin
      var par_2_str_ptr := Marshal.StringToHGlobalAnsi(pEntryPoint);
      z_SpecializeShader_ovr_2(shader, par_2_str_ptr, numSpecializationConstants, pConstantIndex[0], pConstantValue);
      Marshal.FreeHGlobal(par_2_str_ptr);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure SpecializeShader(shader: UInt32; pEntryPoint: string; numSpecializationConstants: UInt32; var pConstantIndex: UInt32; pConstantValue: array of UInt32);
    begin
      var par_2_str_ptr := Marshal.StringToHGlobalAnsi(pEntryPoint);
      z_SpecializeShader_ovr_0(shader, par_2_str_ptr, numSpecializationConstants, pConstantIndex, pConstantValue[0]);
      Marshal.FreeHGlobal(par_2_str_ptr);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure SpecializeShader(shader: UInt32; pEntryPoint: string; numSpecializationConstants: UInt32; var pConstantIndex: UInt32; var pConstantValue: UInt32);
    begin
      var par_2_str_ptr := Marshal.StringToHGlobalAnsi(pEntryPoint);
      z_SpecializeShader_ovr_0(shader, par_2_str_ptr, numSpecializationConstants, pConstantIndex, pConstantValue);
      Marshal.FreeHGlobal(par_2_str_ptr);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure SpecializeShader(shader: UInt32; pEntryPoint: string; numSpecializationConstants: UInt32; var pConstantIndex: UInt32; pConstantValue: IntPtr);
    begin
      var par_2_str_ptr := Marshal.StringToHGlobalAnsi(pEntryPoint);
      z_SpecializeShader_ovr_2(shader, par_2_str_ptr, numSpecializationConstants, pConstantIndex, pConstantValue);
      Marshal.FreeHGlobal(par_2_str_ptr);
    end;
    public z_SpecializeShader_ovr_6 := GetFuncOrNil&<procedure(shader: UInt32; pEntryPoint: IntPtr; numSpecializationConstants: UInt32; pConstantIndex: IntPtr; var pConstantValue: UInt32)>(z_SpecializeShader_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure SpecializeShader(shader: UInt32; pEntryPoint: string; numSpecializationConstants: UInt32; pConstantIndex: IntPtr; pConstantValue: array of UInt32);
    begin
      var par_2_str_ptr := Marshal.StringToHGlobalAnsi(pEntryPoint);
      z_SpecializeShader_ovr_6(shader, par_2_str_ptr, numSpecializationConstants, pConstantIndex, pConstantValue[0]);
      Marshal.FreeHGlobal(par_2_str_ptr);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure SpecializeShader(shader: UInt32; pEntryPoint: string; numSpecializationConstants: UInt32; pConstantIndex: IntPtr; var pConstantValue: UInt32);
    begin
      var par_2_str_ptr := Marshal.StringToHGlobalAnsi(pEntryPoint);
      z_SpecializeShader_ovr_6(shader, par_2_str_ptr, numSpecializationConstants, pConstantIndex, pConstantValue);
      Marshal.FreeHGlobal(par_2_str_ptr);
    end;
    public z_SpecializeShader_ovr_8 := GetFuncOrNil&<procedure(shader: UInt32; pEntryPoint: IntPtr; numSpecializationConstants: UInt32; pConstantIndex: IntPtr; pConstantValue: IntPtr)>(z_SpecializeShader_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure SpecializeShader(shader: UInt32; pEntryPoint: string; numSpecializationConstants: UInt32; pConstantIndex: IntPtr; pConstantValue: IntPtr);
    begin
      var par_2_str_ptr := Marshal.StringToHGlobalAnsi(pEntryPoint);
      z_SpecializeShader_ovr_8(shader, par_2_str_ptr, numSpecializationConstants, pConstantIndex, pConstantValue);
      Marshal.FreeHGlobal(par_2_str_ptr);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure SpecializeShader(shader: UInt32; pEntryPoint: IntPtr; numSpecializationConstants: UInt32; pConstantIndex: array of UInt32; pConstantValue: array of UInt32);
    begin
      z_SpecializeShader_ovr_0(shader, pEntryPoint, numSpecializationConstants, pConstantIndex[0], pConstantValue[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure SpecializeShader(shader: UInt32; pEntryPoint: IntPtr; numSpecializationConstants: UInt32; pConstantIndex: array of UInt32; var pConstantValue: UInt32);
    begin
      z_SpecializeShader_ovr_0(shader, pEntryPoint, numSpecializationConstants, pConstantIndex[0], pConstantValue);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure SpecializeShader(shader: UInt32; pEntryPoint: IntPtr; numSpecializationConstants: UInt32; pConstantIndex: array of UInt32; pConstantValue: IntPtr);
    begin
      z_SpecializeShader_ovr_2(shader, pEntryPoint, numSpecializationConstants, pConstantIndex[0], pConstantValue);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure SpecializeShader(shader: UInt32; pEntryPoint: IntPtr; numSpecializationConstants: UInt32; var pConstantIndex: UInt32; pConstantValue: array of UInt32);
    begin
      z_SpecializeShader_ovr_0(shader, pEntryPoint, numSpecializationConstants, pConstantIndex, pConstantValue[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure SpecializeShader(shader: UInt32; pEntryPoint: IntPtr; numSpecializationConstants: UInt32; var pConstantIndex: UInt32; var pConstantValue: UInt32);
    begin
      z_SpecializeShader_ovr_0(shader, pEntryPoint, numSpecializationConstants, pConstantIndex, pConstantValue);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure SpecializeShader(shader: UInt32; pEntryPoint: IntPtr; numSpecializationConstants: UInt32; var pConstantIndex: UInt32; pConstantValue: IntPtr);
    begin
      z_SpecializeShader_ovr_2(shader, pEntryPoint, numSpecializationConstants, pConstantIndex, pConstantValue);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure SpecializeShader(shader: UInt32; pEntryPoint: IntPtr; numSpecializationConstants: UInt32; pConstantIndex: IntPtr; pConstantValue: array of UInt32);
    begin
      z_SpecializeShader_ovr_6(shader, pEntryPoint, numSpecializationConstants, pConstantIndex, pConstantValue[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure SpecializeShader(shader: UInt32; pEntryPoint: IntPtr; numSpecializationConstants: UInt32; pConstantIndex: IntPtr; var pConstantValue: UInt32);
    begin
      z_SpecializeShader_ovr_6(shader, pEntryPoint, numSpecializationConstants, pConstantIndex, pConstantValue);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure SpecializeShader(shader: UInt32; pEntryPoint: IntPtr; numSpecializationConstants: UInt32; pConstantIndex: IntPtr; pConstantValue: IntPtr);
    begin
      z_SpecializeShader_ovr_8(shader, pEntryPoint, numSpecializationConstants, pConstantIndex, pConstantValue);
    end;
    
    // added in gl1.0
    public static procedure z_StencilFunc(func: StencilFunction; ref: Int32; mask: UInt32);
    external 'opengl32.dll' name 'glStencilFunc';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure StencilFunc(func: StencilFunction; ref: Int32; mask: UInt32) := z_StencilFunc;
    
    // added in gl2.0
    public z_StencilFuncSeparate_adr := GetFuncAdr('glStencilFuncSeparate');
    public z_StencilFuncSeparate_ovr_0 := GetFuncOrNil&<procedure(face: StencilFaceDirection; func: StencilFunction; ref: Int32; mask: UInt32)>(z_StencilFuncSeparate_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure StencilFuncSeparate(face: StencilFaceDirection; func: StencilFunction; ref: Int32; mask: UInt32);
    begin
      z_StencilFuncSeparate_ovr_0(face, func, ref, mask);
    end;
    
    // added in gl1.0
    public static procedure z_StencilMask(mask: UInt32);
    external 'opengl32.dll' name 'glStencilMask';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure StencilMask(mask: UInt32) := z_StencilMask;
    
    // added in gl2.0
    public z_StencilMaskSeparate_adr := GetFuncAdr('glStencilMaskSeparate');
    public z_StencilMaskSeparate_ovr_0 := GetFuncOrNil&<procedure(face: StencilFaceDirection; mask: UInt32)>(z_StencilMaskSeparate_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure StencilMaskSeparate(face: StencilFaceDirection; mask: UInt32);
    begin
      z_StencilMaskSeparate_ovr_0(face, mask);
    end;
    
    // added in gl1.0
    public static procedure z_StencilOp(fail: StencilOp; zfail: StencilOp; zpass: StencilOp);
    external 'opengl32.dll' name 'glStencilOp';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure StencilOp(fail: StencilOp; zfail: StencilOp; zpass: StencilOp) := z_StencilOp;
    
    // added in gl2.0
    public z_StencilOpSeparate_adr := GetFuncAdr('glStencilOpSeparate');
    public z_StencilOpSeparate_ovr_0 := GetFuncOrNil&<procedure(face: StencilFaceDirection; sfail: StencilOp; dpfail: StencilOp; dppass: StencilOp)>(z_StencilOpSeparate_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure StencilOpSeparate(face: StencilFaceDirection; sfail: StencilOp; dpfail: StencilOp; dppass: StencilOp);
    begin
      z_StencilOpSeparate_ovr_0(face, sfail, dpfail, dppass);
    end;
    
    // added in gl3.1
    public z_TexBuffer_adr := GetFuncAdr('glTexBuffer');
    public z_TexBuffer_ovr_0 := GetFuncOrNil&<procedure(target: TextureTarget; internalformat: InternalFormat; buffer: UInt32)>(z_TexBuffer_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TexBuffer(target: TextureTarget; internalformat: InternalFormat; buffer: UInt32);
    begin
      z_TexBuffer_ovr_0(target, internalformat, buffer);
    end;
    
    // added in gl4.3
    public z_TexBufferRange_adr := GetFuncAdr('glTexBufferRange');
    public z_TexBufferRange_ovr_0 := GetFuncOrNil&<procedure(target: TextureTarget; internalformat: InternalFormat; buffer: UInt32; offset: IntPtr; size: IntPtr)>(z_TexBufferRange_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TexBufferRange(target: TextureTarget; internalformat: InternalFormat; buffer: UInt32; offset: IntPtr; size: IntPtr);
    begin
      z_TexBufferRange_ovr_0(target, internalformat, buffer, offset, size);
    end;
    
    // added in gl3.3
    public z_TexCoordP1ui_adr := GetFuncAdr('glTexCoordP1ui');
    public z_TexCoordP1ui_ovr_0 := GetFuncOrNil&<procedure(type: TexCoordPointerType; coords: UInt32)>(z_TexCoordP1ui_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TexCoordP1ui(type: TexCoordPointerType; coords: UInt32);
    begin
      z_TexCoordP1ui_ovr_0(type, coords);
    end;
    
    // added in gl3.3
    public z_TexCoordP1uiv_adr := GetFuncAdr('glTexCoordP1uiv');
    public z_TexCoordP1uiv_ovr_0 := GetFuncOrNil&<procedure(type: TexCoordPointerType; var coords: UInt32)>(z_TexCoordP1uiv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TexCoordP1uiv(type: TexCoordPointerType; coords: array of UInt32);
    begin
      z_TexCoordP1uiv_ovr_0(type, coords[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TexCoordP1uiv(type: TexCoordPointerType; var coords: UInt32);
    begin
      z_TexCoordP1uiv_ovr_0(type, coords);
    end;
    public z_TexCoordP1uiv_ovr_2 := GetFuncOrNil&<procedure(type: TexCoordPointerType; coords: IntPtr)>(z_TexCoordP1uiv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TexCoordP1uiv(type: TexCoordPointerType; coords: IntPtr);
    begin
      z_TexCoordP1uiv_ovr_2(type, coords);
    end;
    
    // added in gl3.3
    public z_TexCoordP2ui_adr := GetFuncAdr('glTexCoordP2ui');
    public z_TexCoordP2ui_ovr_0 := GetFuncOrNil&<procedure(type: TexCoordPointerType; coords: UInt32)>(z_TexCoordP2ui_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TexCoordP2ui(type: TexCoordPointerType; coords: UInt32);
    begin
      z_TexCoordP2ui_ovr_0(type, coords);
    end;
    
    // added in gl3.3
    public z_TexCoordP2uiv_adr := GetFuncAdr('glTexCoordP2uiv');
    public z_TexCoordP2uiv_ovr_0 := GetFuncOrNil&<procedure(type: TexCoordPointerType; var coords: UInt32)>(z_TexCoordP2uiv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TexCoordP2uiv(type: TexCoordPointerType; coords: array of UInt32);
    begin
      z_TexCoordP2uiv_ovr_0(type, coords[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TexCoordP2uiv(type: TexCoordPointerType; var coords: UInt32);
    begin
      z_TexCoordP2uiv_ovr_0(type, coords);
    end;
    public z_TexCoordP2uiv_ovr_2 := GetFuncOrNil&<procedure(type: TexCoordPointerType; coords: IntPtr)>(z_TexCoordP2uiv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TexCoordP2uiv(type: TexCoordPointerType; coords: IntPtr);
    begin
      z_TexCoordP2uiv_ovr_2(type, coords);
    end;
    
    // added in gl3.3
    public z_TexCoordP3ui_adr := GetFuncAdr('glTexCoordP3ui');
    public z_TexCoordP3ui_ovr_0 := GetFuncOrNil&<procedure(type: TexCoordPointerType; coords: UInt32)>(z_TexCoordP3ui_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TexCoordP3ui(type: TexCoordPointerType; coords: UInt32);
    begin
      z_TexCoordP3ui_ovr_0(type, coords);
    end;
    
    // added in gl3.3
    public z_TexCoordP3uiv_adr := GetFuncAdr('glTexCoordP3uiv');
    public z_TexCoordP3uiv_ovr_0 := GetFuncOrNil&<procedure(type: TexCoordPointerType; var coords: UInt32)>(z_TexCoordP3uiv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TexCoordP3uiv(type: TexCoordPointerType; coords: array of UInt32);
    begin
      z_TexCoordP3uiv_ovr_0(type, coords[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TexCoordP3uiv(type: TexCoordPointerType; var coords: UInt32);
    begin
      z_TexCoordP3uiv_ovr_0(type, coords);
    end;
    public z_TexCoordP3uiv_ovr_2 := GetFuncOrNil&<procedure(type: TexCoordPointerType; coords: IntPtr)>(z_TexCoordP3uiv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TexCoordP3uiv(type: TexCoordPointerType; coords: IntPtr);
    begin
      z_TexCoordP3uiv_ovr_2(type, coords);
    end;
    
    // added in gl3.3
    public z_TexCoordP4ui_adr := GetFuncAdr('glTexCoordP4ui');
    public z_TexCoordP4ui_ovr_0 := GetFuncOrNil&<procedure(type: TexCoordPointerType; coords: UInt32)>(z_TexCoordP4ui_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TexCoordP4ui(type: TexCoordPointerType; coords: UInt32);
    begin
      z_TexCoordP4ui_ovr_0(type, coords);
    end;
    
    // added in gl3.3
    public z_TexCoordP4uiv_adr := GetFuncAdr('glTexCoordP4uiv');
    public z_TexCoordP4uiv_ovr_0 := GetFuncOrNil&<procedure(type: TexCoordPointerType; var coords: UInt32)>(z_TexCoordP4uiv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TexCoordP4uiv(type: TexCoordPointerType; coords: array of UInt32);
    begin
      z_TexCoordP4uiv_ovr_0(type, coords[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TexCoordP4uiv(type: TexCoordPointerType; var coords: UInt32);
    begin
      z_TexCoordP4uiv_ovr_0(type, coords);
    end;
    public z_TexCoordP4uiv_ovr_2 := GetFuncOrNil&<procedure(type: TexCoordPointerType; coords: IntPtr)>(z_TexCoordP4uiv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TexCoordP4uiv(type: TexCoordPointerType; coords: IntPtr);
    begin
      z_TexCoordP4uiv_ovr_2(type, coords);
    end;
    
    // added in gl1.0
    public static procedure z_TexImage1D(target: TextureTarget; level: Int32; internalformat: Int32; width: Int32; border: Int32; format: PixelFormat; type: PixelType; pixels: IntPtr);
    external 'opengl32.dll' name 'glTexImage1D';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TexImage1D(target: TextureTarget; level: Int32; internalformat: Int32; width: Int32; border: Int32; format: PixelFormat; type: PixelType; pixels: IntPtr) := z_TexImage1D;
    
    // added in gl1.0
    public static procedure z_TexImage2D(target: TextureTarget; level: Int32; internalformat: Int32; width: Int32; height: Int32; border: Int32; format: PixelFormat; type: PixelType; pixels: IntPtr);
    external 'opengl32.dll' name 'glTexImage2D';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TexImage2D(target: TextureTarget; level: Int32; internalformat: Int32; width: Int32; height: Int32; border: Int32; format: PixelFormat; type: PixelType; pixels: IntPtr) := z_TexImage2D;
    
    // added in gl3.2
    public z_TexImage2DMultisample_adr := GetFuncAdr('glTexImage2DMultisample');
    public z_TexImage2DMultisample_ovr_0 := GetFuncOrNil&<procedure(target: TextureTarget; samples: Int32; internalformat: InternalFormat; width: Int32; height: Int32; fixedsamplelocations: boolean)>(z_TexImage2DMultisample_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TexImage2DMultisample(target: TextureTarget; samples: Int32; internalformat: InternalFormat; width: Int32; height: Int32; fixedsamplelocations: boolean);
    begin
      z_TexImage2DMultisample_ovr_0(target, samples, internalformat, width, height, fixedsamplelocations);
    end;
    
    // added in gl1.2
    public z_TexImage3D_adr := GetFuncAdr('glTexImage3D');
    public z_TexImage3D_ovr_0 := GetFuncOrNil&<procedure(target: TextureTarget; level: Int32; internalformat: Int32; width: Int32; height: Int32; depth: Int32; border: Int32; format: PixelFormat; type: PixelType; pixels: IntPtr)>(z_TexImage3D_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TexImage3D(target: TextureTarget; level: Int32; internalformat: Int32; width: Int32; height: Int32; depth: Int32; border: Int32; format: PixelFormat; type: PixelType; pixels: IntPtr);
    begin
      z_TexImage3D_ovr_0(target, level, internalformat, width, height, depth, border, format, type, pixels);
    end;
    
    // added in gl3.2
    public z_TexImage3DMultisample_adr := GetFuncAdr('glTexImage3DMultisample');
    public z_TexImage3DMultisample_ovr_0 := GetFuncOrNil&<procedure(target: TextureTarget; samples: Int32; internalformat: InternalFormat; width: Int32; height: Int32; depth: Int32; fixedsamplelocations: boolean)>(z_TexImage3DMultisample_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TexImage3DMultisample(target: TextureTarget; samples: Int32; internalformat: InternalFormat; width: Int32; height: Int32; depth: Int32; fixedsamplelocations: boolean);
    begin
      z_TexImage3DMultisample_ovr_0(target, samples, internalformat, width, height, depth, fixedsamplelocations);
    end;
    
    // added in gl1.0
    public static procedure z_TexParameterf(target: TextureTarget; pname: TextureParameterName; param: single);
    external 'opengl32.dll' name 'glTexParameterf';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TexParameterf(target: TextureTarget; pname: TextureParameterName; param: single) := z_TexParameterf;
    
    // added in gl1.0
    public static procedure z_TexParameterfv(target: TextureTarget; pname: TextureParameterName; [MarshalAs(UnmanagedType.LPArray)] params: array of single);
    external 'opengl32.dll' name 'glTexParameterfv';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TexParameterfv(target: TextureTarget; pname: TextureParameterName; params: array of single) := z_TexParameterfv;
    public static procedure z_TexParameterfv(target: TextureTarget; pname: TextureParameterName; var params: single);
    external 'opengl32.dll' name 'glTexParameterfv';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TexParameterfv(target: TextureTarget; pname: TextureParameterName; var params: single) := z_TexParameterfv;
    public static procedure z_TexParameterfv(target: TextureTarget; pname: TextureParameterName; params: IntPtr);
    external 'opengl32.dll' name 'glTexParameterfv';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TexParameterfv(target: TextureTarget; pname: TextureParameterName; params: IntPtr) := z_TexParameterfv;
    
    // added in gl1.0
    public static procedure z_TexParameteri(target: TextureTarget; pname: TextureParameterName; param: Int32);
    external 'opengl32.dll' name 'glTexParameteri';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TexParameteri(target: TextureTarget; pname: TextureParameterName; param: Int32) := z_TexParameteri;
    
    // added in gl3.0
    public z_TexParameterIiv_adr := GetFuncAdr('glTexParameterIiv');
    public z_TexParameterIiv_ovr_0 := GetFuncOrNil&<procedure(target: TextureTarget; pname: TextureParameterName; var params: Int32)>(z_TexParameterIiv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TexParameterIiv(target: TextureTarget; pname: TextureParameterName; params: array of Int32);
    begin
      z_TexParameterIiv_ovr_0(target, pname, params[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TexParameterIiv(target: TextureTarget; pname: TextureParameterName; var params: Int32);
    begin
      z_TexParameterIiv_ovr_0(target, pname, params);
    end;
    public z_TexParameterIiv_ovr_2 := GetFuncOrNil&<procedure(target: TextureTarget; pname: TextureParameterName; params: IntPtr)>(z_TexParameterIiv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TexParameterIiv(target: TextureTarget; pname: TextureParameterName; params: IntPtr);
    begin
      z_TexParameterIiv_ovr_2(target, pname, params);
    end;
    
    // added in gl3.0
    public z_TexParameterIuiv_adr := GetFuncAdr('glTexParameterIuiv');
    public z_TexParameterIuiv_ovr_0 := GetFuncOrNil&<procedure(target: TextureTarget; pname: TextureParameterName; var params: UInt32)>(z_TexParameterIuiv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TexParameterIuiv(target: TextureTarget; pname: TextureParameterName; params: array of UInt32);
    begin
      z_TexParameterIuiv_ovr_0(target, pname, params[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TexParameterIuiv(target: TextureTarget; pname: TextureParameterName; var params: UInt32);
    begin
      z_TexParameterIuiv_ovr_0(target, pname, params);
    end;
    public z_TexParameterIuiv_ovr_2 := GetFuncOrNil&<procedure(target: TextureTarget; pname: TextureParameterName; params: IntPtr)>(z_TexParameterIuiv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TexParameterIuiv(target: TextureTarget; pname: TextureParameterName; params: IntPtr);
    begin
      z_TexParameterIuiv_ovr_2(target, pname, params);
    end;
    
    // added in gl1.0
    public static procedure z_TexParameteriv(target: TextureTarget; pname: TextureParameterName; [MarshalAs(UnmanagedType.LPArray)] params: array of Int32);
    external 'opengl32.dll' name 'glTexParameteriv';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TexParameteriv(target: TextureTarget; pname: TextureParameterName; params: array of Int32) := z_TexParameteriv;
    public static procedure z_TexParameteriv(target: TextureTarget; pname: TextureParameterName; var params: Int32);
    external 'opengl32.dll' name 'glTexParameteriv';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TexParameteriv(target: TextureTarget; pname: TextureParameterName; var params: Int32) := z_TexParameteriv;
    public static procedure z_TexParameteriv(target: TextureTarget; pname: TextureParameterName; params: IntPtr);
    external 'opengl32.dll' name 'glTexParameteriv';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TexParameteriv(target: TextureTarget; pname: TextureParameterName; params: IntPtr) := z_TexParameteriv;
    
    // added in gl4.2
    public z_TexStorage1D_adr := GetFuncAdr('glTexStorage1D');
    public z_TexStorage1D_ovr_0 := GetFuncOrNil&<procedure(target: TextureTarget; levels: Int32; internalformat: InternalFormat; width: Int32)>(z_TexStorage1D_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TexStorage1D(target: TextureTarget; levels: Int32; internalformat: InternalFormat; width: Int32);
    begin
      z_TexStorage1D_ovr_0(target, levels, internalformat, width);
    end;
    
    // added in gl4.2
    public z_TexStorage2D_adr := GetFuncAdr('glTexStorage2D');
    public z_TexStorage2D_ovr_0 := GetFuncOrNil&<procedure(target: TextureTarget; levels: Int32; internalformat: InternalFormat; width: Int32; height: Int32)>(z_TexStorage2D_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TexStorage2D(target: TextureTarget; levels: Int32; internalformat: InternalFormat; width: Int32; height: Int32);
    begin
      z_TexStorage2D_ovr_0(target, levels, internalformat, width, height);
    end;
    
    // added in gl4.3
    public z_TexStorage2DMultisample_adr := GetFuncAdr('glTexStorage2DMultisample');
    public z_TexStorage2DMultisample_ovr_0 := GetFuncOrNil&<procedure(target: TextureTarget; samples: Int32; internalformat: InternalFormat; width: Int32; height: Int32; fixedsamplelocations: boolean)>(z_TexStorage2DMultisample_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TexStorage2DMultisample(target: TextureTarget; samples: Int32; internalformat: InternalFormat; width: Int32; height: Int32; fixedsamplelocations: boolean);
    begin
      z_TexStorage2DMultisample_ovr_0(target, samples, internalformat, width, height, fixedsamplelocations);
    end;
    
    // added in gl4.2
    public z_TexStorage3D_adr := GetFuncAdr('glTexStorage3D');
    public z_TexStorage3D_ovr_0 := GetFuncOrNil&<procedure(target: TextureTarget; levels: Int32; internalformat: InternalFormat; width: Int32; height: Int32; depth: Int32)>(z_TexStorage3D_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TexStorage3D(target: TextureTarget; levels: Int32; internalformat: InternalFormat; width: Int32; height: Int32; depth: Int32);
    begin
      z_TexStorage3D_ovr_0(target, levels, internalformat, width, height, depth);
    end;
    
    // added in gl4.3
    public z_TexStorage3DMultisample_adr := GetFuncAdr('glTexStorage3DMultisample');
    public z_TexStorage3DMultisample_ovr_0 := GetFuncOrNil&<procedure(target: TextureTarget; samples: Int32; internalformat: InternalFormat; width: Int32; height: Int32; depth: Int32; fixedsamplelocations: boolean)>(z_TexStorage3DMultisample_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TexStorage3DMultisample(target: TextureTarget; samples: Int32; internalformat: InternalFormat; width: Int32; height: Int32; depth: Int32; fixedsamplelocations: boolean);
    begin
      z_TexStorage3DMultisample_ovr_0(target, samples, internalformat, width, height, depth, fixedsamplelocations);
    end;
    
    // added in gl1.1
    public static procedure z_TexSubImage1D(target: TextureTarget; level: Int32; xoffset: Int32; width: Int32; format: PixelFormat; type: PixelType; pixels: IntPtr);
    external 'opengl32.dll' name 'glTexSubImage1D';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TexSubImage1D(target: TextureTarget; level: Int32; xoffset: Int32; width: Int32; format: PixelFormat; type: PixelType; pixels: IntPtr) := z_TexSubImage1D;
    
    // added in gl1.1
    public static procedure z_TexSubImage2D(target: TextureTarget; level: Int32; xoffset: Int32; yoffset: Int32; width: Int32; height: Int32; format: PixelFormat; type: PixelType; pixels: IntPtr);
    external 'opengl32.dll' name 'glTexSubImage2D';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TexSubImage2D(target: TextureTarget; level: Int32; xoffset: Int32; yoffset: Int32; width: Int32; height: Int32; format: PixelFormat; type: PixelType; pixels: IntPtr) := z_TexSubImage2D;
    
    // added in gl1.2
    public z_TexSubImage3D_adr := GetFuncAdr('glTexSubImage3D');
    public z_TexSubImage3D_ovr_0 := GetFuncOrNil&<procedure(target: TextureTarget; level: Int32; xoffset: Int32; yoffset: Int32; zoffset: Int32; width: Int32; height: Int32; depth: Int32; format: PixelFormat; type: PixelType; pixels: IntPtr)>(z_TexSubImage3D_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TexSubImage3D(target: TextureTarget; level: Int32; xoffset: Int32; yoffset: Int32; zoffset: Int32; width: Int32; height: Int32; depth: Int32; format: PixelFormat; type: PixelType; pixels: IntPtr);
    begin
      z_TexSubImage3D_ovr_0(target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels);
    end;
    
    // added in gl4.5
    public z_TextureBarrier_adr := GetFuncAdr('glTextureBarrier');
    public z_TextureBarrier_ovr_0 := GetFuncOrNil&<procedure>(z_TextureBarrier_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TextureBarrier;
    begin
      z_TextureBarrier_ovr_0;
    end;
    
    // added in gl4.5
    public z_TextureBuffer_adr := GetFuncAdr('glTextureBuffer');
    public z_TextureBuffer_ovr_0 := GetFuncOrNil&<procedure(texture: UInt32; internalformat: InternalFormat; buffer: UInt32)>(z_TextureBuffer_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TextureBuffer(texture: UInt32; internalformat: InternalFormat; buffer: UInt32);
    begin
      z_TextureBuffer_ovr_0(texture, internalformat, buffer);
    end;
    
    // added in gl4.5
    public z_TextureBufferRange_adr := GetFuncAdr('glTextureBufferRange');
    public z_TextureBufferRange_ovr_0 := GetFuncOrNil&<procedure(texture: UInt32; internalformat: InternalFormat; buffer: UInt32; offset: IntPtr; size: IntPtr)>(z_TextureBufferRange_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TextureBufferRange(texture: UInt32; internalformat: InternalFormat; buffer: UInt32; offset: IntPtr; size: IntPtr);
    begin
      z_TextureBufferRange_ovr_0(texture, internalformat, buffer, offset, size);
    end;
    
    // added in gl4.5
    public z_TextureParameterf_adr := GetFuncAdr('glTextureParameterf');
    public z_TextureParameterf_ovr_0 := GetFuncOrNil&<procedure(texture: UInt32; pname: TextureParameterName; param: single)>(z_TextureParameterf_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TextureParameterf(texture: UInt32; pname: TextureParameterName; param: single);
    begin
      z_TextureParameterf_ovr_0(texture, pname, param);
    end;
    
    // added in gl4.5
    public z_TextureParameterfv_adr := GetFuncAdr('glTextureParameterfv');
    public z_TextureParameterfv_ovr_0 := GetFuncOrNil&<procedure(texture: UInt32; pname: TextureParameterName; var param: single)>(z_TextureParameterfv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TextureParameterfv(texture: UInt32; pname: TextureParameterName; param: array of single);
    begin
      z_TextureParameterfv_ovr_0(texture, pname, param[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TextureParameterfv(texture: UInt32; pname: TextureParameterName; var param: single);
    begin
      z_TextureParameterfv_ovr_0(texture, pname, param);
    end;
    public z_TextureParameterfv_ovr_2 := GetFuncOrNil&<procedure(texture: UInt32; pname: TextureParameterName; param: IntPtr)>(z_TextureParameterfv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TextureParameterfv(texture: UInt32; pname: TextureParameterName; param: IntPtr);
    begin
      z_TextureParameterfv_ovr_2(texture, pname, param);
    end;
    
    // added in gl4.5
    public z_TextureParameteri_adr := GetFuncAdr('glTextureParameteri');
    public z_TextureParameteri_ovr_0 := GetFuncOrNil&<procedure(texture: UInt32; pname: TextureParameterName; param: Int32)>(z_TextureParameteri_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TextureParameteri(texture: UInt32; pname: TextureParameterName; param: Int32);
    begin
      z_TextureParameteri_ovr_0(texture, pname, param);
    end;
    
    // added in gl4.5
    public z_TextureParameterIiv_adr := GetFuncAdr('glTextureParameterIiv');
    public z_TextureParameterIiv_ovr_0 := GetFuncOrNil&<procedure(texture: UInt32; pname: TextureParameterName; var params: Int32)>(z_TextureParameterIiv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TextureParameterIiv(texture: UInt32; pname: TextureParameterName; params: array of Int32);
    begin
      z_TextureParameterIiv_ovr_0(texture, pname, params[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TextureParameterIiv(texture: UInt32; pname: TextureParameterName; var params: Int32);
    begin
      z_TextureParameterIiv_ovr_0(texture, pname, params);
    end;
    public z_TextureParameterIiv_ovr_2 := GetFuncOrNil&<procedure(texture: UInt32; pname: TextureParameterName; params: IntPtr)>(z_TextureParameterIiv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TextureParameterIiv(texture: UInt32; pname: TextureParameterName; params: IntPtr);
    begin
      z_TextureParameterIiv_ovr_2(texture, pname, params);
    end;
    
    // added in gl4.5
    public z_TextureParameterIuiv_adr := GetFuncAdr('glTextureParameterIuiv');
    public z_TextureParameterIuiv_ovr_0 := GetFuncOrNil&<procedure(texture: UInt32; pname: TextureParameterName; var params: UInt32)>(z_TextureParameterIuiv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TextureParameterIuiv(texture: UInt32; pname: TextureParameterName; params: array of UInt32);
    begin
      z_TextureParameterIuiv_ovr_0(texture, pname, params[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TextureParameterIuiv(texture: UInt32; pname: TextureParameterName; var params: UInt32);
    begin
      z_TextureParameterIuiv_ovr_0(texture, pname, params);
    end;
    public z_TextureParameterIuiv_ovr_2 := GetFuncOrNil&<procedure(texture: UInt32; pname: TextureParameterName; params: IntPtr)>(z_TextureParameterIuiv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TextureParameterIuiv(texture: UInt32; pname: TextureParameterName; params: IntPtr);
    begin
      z_TextureParameterIuiv_ovr_2(texture, pname, params);
    end;
    
    // added in gl4.5
    public z_TextureParameteriv_adr := GetFuncAdr('glTextureParameteriv');
    public z_TextureParameteriv_ovr_0 := GetFuncOrNil&<procedure(texture: UInt32; pname: TextureParameterName; var param: Int32)>(z_TextureParameteriv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TextureParameteriv(texture: UInt32; pname: TextureParameterName; param: array of Int32);
    begin
      z_TextureParameteriv_ovr_0(texture, pname, param[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TextureParameteriv(texture: UInt32; pname: TextureParameterName; var param: Int32);
    begin
      z_TextureParameteriv_ovr_0(texture, pname, param);
    end;
    public z_TextureParameteriv_ovr_2 := GetFuncOrNil&<procedure(texture: UInt32; pname: TextureParameterName; param: IntPtr)>(z_TextureParameteriv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TextureParameteriv(texture: UInt32; pname: TextureParameterName; param: IntPtr);
    begin
      z_TextureParameteriv_ovr_2(texture, pname, param);
    end;
    
    // added in gl4.5
    public z_TextureStorage1D_adr := GetFuncAdr('glTextureStorage1D');
    public z_TextureStorage1D_ovr_0 := GetFuncOrNil&<procedure(texture: UInt32; levels: Int32; internalformat: InternalFormat; width: Int32)>(z_TextureStorage1D_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TextureStorage1D(texture: UInt32; levels: Int32; internalformat: InternalFormat; width: Int32);
    begin
      z_TextureStorage1D_ovr_0(texture, levels, internalformat, width);
    end;
    
    // added in gl4.5
    public z_TextureStorage2D_adr := GetFuncAdr('glTextureStorage2D');
    public z_TextureStorage2D_ovr_0 := GetFuncOrNil&<procedure(texture: UInt32; levels: Int32; internalformat: InternalFormat; width: Int32; height: Int32)>(z_TextureStorage2D_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TextureStorage2D(texture: UInt32; levels: Int32; internalformat: InternalFormat; width: Int32; height: Int32);
    begin
      z_TextureStorage2D_ovr_0(texture, levels, internalformat, width, height);
    end;
    
    // added in gl4.5
    public z_TextureStorage2DMultisample_adr := GetFuncAdr('glTextureStorage2DMultisample');
    public z_TextureStorage2DMultisample_ovr_0 := GetFuncOrNil&<procedure(texture: UInt32; samples: Int32; internalformat: InternalFormat; width: Int32; height: Int32; fixedsamplelocations: boolean)>(z_TextureStorage2DMultisample_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TextureStorage2DMultisample(texture: UInt32; samples: Int32; internalformat: InternalFormat; width: Int32; height: Int32; fixedsamplelocations: boolean);
    begin
      z_TextureStorage2DMultisample_ovr_0(texture, samples, internalformat, width, height, fixedsamplelocations);
    end;
    
    // added in gl4.5
    public z_TextureStorage3D_adr := GetFuncAdr('glTextureStorage3D');
    public z_TextureStorage3D_ovr_0 := GetFuncOrNil&<procedure(texture: UInt32; levels: Int32; internalformat: InternalFormat; width: Int32; height: Int32; depth: Int32)>(z_TextureStorage3D_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TextureStorage3D(texture: UInt32; levels: Int32; internalformat: InternalFormat; width: Int32; height: Int32; depth: Int32);
    begin
      z_TextureStorage3D_ovr_0(texture, levels, internalformat, width, height, depth);
    end;
    
    // added in gl4.5
    public z_TextureStorage3DMultisample_adr := GetFuncAdr('glTextureStorage3DMultisample');
    public z_TextureStorage3DMultisample_ovr_0 := GetFuncOrNil&<procedure(texture: UInt32; samples: Int32; internalformat: InternalFormat; width: Int32; height: Int32; depth: Int32; fixedsamplelocations: boolean)>(z_TextureStorage3DMultisample_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TextureStorage3DMultisample(texture: UInt32; samples: Int32; internalformat: InternalFormat; width: Int32; height: Int32; depth: Int32; fixedsamplelocations: boolean);
    begin
      z_TextureStorage3DMultisample_ovr_0(texture, samples, internalformat, width, height, depth, fixedsamplelocations);
    end;
    
    // added in gl4.5
    public z_TextureSubImage1D_adr := GetFuncAdr('glTextureSubImage1D');
    public z_TextureSubImage1D_ovr_0 := GetFuncOrNil&<procedure(texture: UInt32; level: Int32; xoffset: Int32; width: Int32; format: PixelFormat; type: PixelType; pixels: IntPtr)>(z_TextureSubImage1D_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TextureSubImage1D(texture: UInt32; level: Int32; xoffset: Int32; width: Int32; format: PixelFormat; type: PixelType; pixels: IntPtr);
    begin
      z_TextureSubImage1D_ovr_0(texture, level, xoffset, width, format, type, pixels);
    end;
    
    // added in gl4.5
    public z_TextureSubImage2D_adr := GetFuncAdr('glTextureSubImage2D');
    public z_TextureSubImage2D_ovr_0 := GetFuncOrNil&<procedure(texture: UInt32; level: Int32; xoffset: Int32; yoffset: Int32; width: Int32; height: Int32; format: PixelFormat; type: PixelType; pixels: IntPtr)>(z_TextureSubImage2D_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TextureSubImage2D(texture: UInt32; level: Int32; xoffset: Int32; yoffset: Int32; width: Int32; height: Int32; format: PixelFormat; type: PixelType; pixels: IntPtr);
    begin
      z_TextureSubImage2D_ovr_0(texture, level, xoffset, yoffset, width, height, format, type, pixels);
    end;
    
    // added in gl4.5
    public z_TextureSubImage3D_adr := GetFuncAdr('glTextureSubImage3D');
    public z_TextureSubImage3D_ovr_0 := GetFuncOrNil&<procedure(texture: UInt32; level: Int32; xoffset: Int32; yoffset: Int32; zoffset: Int32; width: Int32; height: Int32; depth: Int32; format: PixelFormat; type: PixelType; pixels: IntPtr)>(z_TextureSubImage3D_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TextureSubImage3D(texture: UInt32; level: Int32; xoffset: Int32; yoffset: Int32; zoffset: Int32; width: Int32; height: Int32; depth: Int32; format: PixelFormat; type: PixelType; pixels: IntPtr);
    begin
      z_TextureSubImage3D_ovr_0(texture, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels);
    end;
    
    // added in gl4.3
    public z_TextureView_adr := GetFuncAdr('glTextureView');
    public z_TextureView_ovr_0 := GetFuncOrNil&<procedure(texture: UInt32; target: TextureTarget; origtexture: UInt32; internalformat: InternalFormat; minlevel: UInt32; numlevels: UInt32; minlayer: UInt32; numlayers: UInt32)>(z_TextureView_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TextureView(texture: UInt32; target: TextureTarget; origtexture: UInt32; internalformat: InternalFormat; minlevel: UInt32; numlevels: UInt32; minlayer: UInt32; numlayers: UInt32);
    begin
      z_TextureView_ovr_0(texture, target, origtexture, internalformat, minlevel, numlevels, minlayer, numlayers);
    end;
    
    // added in gl4.5
    public z_TransformFeedbackBufferBase_adr := GetFuncAdr('glTransformFeedbackBufferBase');
    public z_TransformFeedbackBufferBase_ovr_0 := GetFuncOrNil&<procedure(xfb: UInt32; index: UInt32; buffer: UInt32)>(z_TransformFeedbackBufferBase_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TransformFeedbackBufferBase(xfb: UInt32; index: UInt32; buffer: UInt32);
    begin
      z_TransformFeedbackBufferBase_ovr_0(xfb, index, buffer);
    end;
    
    // added in gl4.5
    public z_TransformFeedbackBufferRange_adr := GetFuncAdr('glTransformFeedbackBufferRange');
    public z_TransformFeedbackBufferRange_ovr_0 := GetFuncOrNil&<procedure(xfb: UInt32; index: UInt32; buffer: UInt32; offset: IntPtr; size: IntPtr)>(z_TransformFeedbackBufferRange_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TransformFeedbackBufferRange(xfb: UInt32; index: UInt32; buffer: UInt32; offset: IntPtr; size: IntPtr);
    begin
      z_TransformFeedbackBufferRange_ovr_0(xfb, index, buffer, offset, size);
    end;
    
    // added in gl3.0
    public z_TransformFeedbackVaryings_adr := GetFuncAdr('glTransformFeedbackVaryings');
    public z_TransformFeedbackVaryings_ovr_0 := GetFuncOrNil&<procedure(program: UInt32; count: Int32; var varyings: IntPtr; bufferMode: TransformFeedbackBufferMode)>(z_TransformFeedbackVaryings_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TransformFeedbackVaryings(program: UInt32; count: Int32; varyings: array of string; bufferMode: TransformFeedbackBufferMode);
    begin
      var par_3_str_ptr := varyings.ConvertAll(arr_el1->Marshal.StringToHGlobalAnsi(arr_el1));
      z_TransformFeedbackVaryings_ovr_0(program, count, par_3_str_ptr[0], bufferMode);
      foreach var arr_el1 in par_3_str_ptr do Marshal.FreeHGlobal(arr_el1);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TransformFeedbackVaryings(program: UInt32; count: Int32; varyings: array of IntPtr; bufferMode: TransformFeedbackBufferMode);
    begin
      z_TransformFeedbackVaryings_ovr_0(program, count, varyings[0], bufferMode);
    end;
    public z_TransformFeedbackVaryings_ovr_2 := GetFuncOrNil&<procedure(program: UInt32; count: Int32; varyings: IntPtr; bufferMode: TransformFeedbackBufferMode)>(z_TransformFeedbackVaryings_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TransformFeedbackVaryings(program: UInt32; count: Int32; varyings: IntPtr; bufferMode: TransformFeedbackBufferMode);
    begin
      z_TransformFeedbackVaryings_ovr_2(program, count, varyings, bufferMode);
    end;
    
    // added in gl4.0
    public z_Uniform1d_adr := GetFuncAdr('glUniform1d');
    public z_Uniform1d_ovr_0 := GetFuncOrNil&<procedure(location: Int32; x: real)>(z_Uniform1d_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Uniform1d(location: Int32; x: real);
    begin
      z_Uniform1d_ovr_0(location, x);
    end;
    
    // added in gl4.0
    public z_Uniform1dv_adr := GetFuncAdr('glUniform1dv');
    public z_Uniform1dv_ovr_0 := GetFuncOrNil&<procedure(location: Int32; count: Int32; var value: real)>(z_Uniform1dv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Uniform1dv(location: Int32; count: Int32; value: array of real);
    begin
      z_Uniform1dv_ovr_0(location, count, value[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Uniform1dv(location: Int32; count: Int32; var value: real);
    begin
      z_Uniform1dv_ovr_0(location, count, value);
    end;
    public z_Uniform1dv_ovr_2 := GetFuncOrNil&<procedure(location: Int32; count: Int32; value: IntPtr)>(z_Uniform1dv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Uniform1dv(location: Int32; count: Int32; value: IntPtr);
    begin
      z_Uniform1dv_ovr_2(location, count, value);
    end;
    
    // added in gl2.0
    public z_Uniform1f_adr := GetFuncAdr('glUniform1f');
    public z_Uniform1f_ovr_0 := GetFuncOrNil&<procedure(location: Int32; v0: single)>(z_Uniform1f_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Uniform1f(location: Int32; v0: single);
    begin
      z_Uniform1f_ovr_0(location, v0);
    end;
    
    // added in gl2.0
    public z_Uniform1fv_adr := GetFuncAdr('glUniform1fv');
    public z_Uniform1fv_ovr_0 := GetFuncOrNil&<procedure(location: Int32; count: Int32; var value: single)>(z_Uniform1fv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Uniform1fv(location: Int32; count: Int32; value: array of single);
    begin
      z_Uniform1fv_ovr_0(location, count, value[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Uniform1fv(location: Int32; count: Int32; var value: single);
    begin
      z_Uniform1fv_ovr_0(location, count, value);
    end;
    public z_Uniform1fv_ovr_2 := GetFuncOrNil&<procedure(location: Int32; count: Int32; value: IntPtr)>(z_Uniform1fv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Uniform1fv(location: Int32; count: Int32; value: IntPtr);
    begin
      z_Uniform1fv_ovr_2(location, count, value);
    end;
    
    // added in gl2.0
    public z_Uniform1i_adr := GetFuncAdr('glUniform1i');
    public z_Uniform1i_ovr_0 := GetFuncOrNil&<procedure(location: Int32; v0: Int32)>(z_Uniform1i_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Uniform1i(location: Int32; v0: Int32);
    begin
      z_Uniform1i_ovr_0(location, v0);
    end;
    
    // added in gl2.0
    public z_Uniform1iv_adr := GetFuncAdr('glUniform1iv');
    public z_Uniform1iv_ovr_0 := GetFuncOrNil&<procedure(location: Int32; count: Int32; var value: Int32)>(z_Uniform1iv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Uniform1iv(location: Int32; count: Int32; value: array of Int32);
    begin
      z_Uniform1iv_ovr_0(location, count, value[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Uniform1iv(location: Int32; count: Int32; var value: Int32);
    begin
      z_Uniform1iv_ovr_0(location, count, value);
    end;
    public z_Uniform1iv_ovr_2 := GetFuncOrNil&<procedure(location: Int32; count: Int32; value: IntPtr)>(z_Uniform1iv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Uniform1iv(location: Int32; count: Int32; value: IntPtr);
    begin
      z_Uniform1iv_ovr_2(location, count, value);
    end;
    
    // added in gl3.0
    public z_Uniform1ui_adr := GetFuncAdr('glUniform1ui');
    public z_Uniform1ui_ovr_0 := GetFuncOrNil&<procedure(location: Int32; v0: UInt32)>(z_Uniform1ui_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Uniform1ui(location: Int32; v0: UInt32);
    begin
      z_Uniform1ui_ovr_0(location, v0);
    end;
    
    // added in gl3.0
    public z_Uniform1uiv_adr := GetFuncAdr('glUniform1uiv');
    public z_Uniform1uiv_ovr_0 := GetFuncOrNil&<procedure(location: Int32; count: Int32; var value: UInt32)>(z_Uniform1uiv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Uniform1uiv(location: Int32; count: Int32; value: array of UInt32);
    begin
      z_Uniform1uiv_ovr_0(location, count, value[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Uniform1uiv(location: Int32; count: Int32; var value: UInt32);
    begin
      z_Uniform1uiv_ovr_0(location, count, value);
    end;
    public z_Uniform1uiv_ovr_2 := GetFuncOrNil&<procedure(location: Int32; count: Int32; value: IntPtr)>(z_Uniform1uiv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Uniform1uiv(location: Int32; count: Int32; value: IntPtr);
    begin
      z_Uniform1uiv_ovr_2(location, count, value);
    end;
    
    // added in gl4.0
    public z_Uniform2d_adr := GetFuncAdr('glUniform2d');
    public z_Uniform2d_ovr_0 := GetFuncOrNil&<procedure(location: Int32; x: real; y: real)>(z_Uniform2d_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Uniform2d(location: Int32; x: real; y: real);
    begin
      z_Uniform2d_ovr_0(location, x, y);
    end;
    
    // added in gl4.0
    public z_Uniform2dv_adr := GetFuncAdr('glUniform2dv');
    public z_Uniform2dv_ovr_0 := GetFuncOrNil&<procedure(location: Int32; count: Int32; var value: real)>(z_Uniform2dv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Uniform2dv(location: Int32; count: Int32; value: array of real);
    begin
      z_Uniform2dv_ovr_0(location, count, value[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Uniform2dv(location: Int32; count: Int32; var value: real);
    begin
      z_Uniform2dv_ovr_0(location, count, value);
    end;
    public z_Uniform2dv_ovr_2 := GetFuncOrNil&<procedure(location: Int32; count: Int32; value: IntPtr)>(z_Uniform2dv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Uniform2dv(location: Int32; count: Int32; value: IntPtr);
    begin
      z_Uniform2dv_ovr_2(location, count, value);
    end;
    
    // added in gl2.0
    public z_Uniform2f_adr := GetFuncAdr('glUniform2f');
    public z_Uniform2f_ovr_0 := GetFuncOrNil&<procedure(location: Int32; v0: single; v1: single)>(z_Uniform2f_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Uniform2f(location: Int32; v0: single; v1: single);
    begin
      z_Uniform2f_ovr_0(location, v0, v1);
    end;
    
    // added in gl2.0
    public z_Uniform2fv_adr := GetFuncAdr('glUniform2fv');
    public z_Uniform2fv_ovr_0 := GetFuncOrNil&<procedure(location: Int32; count: Int32; var value: single)>(z_Uniform2fv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Uniform2fv(location: Int32; count: Int32; value: array of single);
    begin
      z_Uniform2fv_ovr_0(location, count, value[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Uniform2fv(location: Int32; count: Int32; var value: single);
    begin
      z_Uniform2fv_ovr_0(location, count, value);
    end;
    public z_Uniform2fv_ovr_2 := GetFuncOrNil&<procedure(location: Int32; count: Int32; value: IntPtr)>(z_Uniform2fv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Uniform2fv(location: Int32; count: Int32; value: IntPtr);
    begin
      z_Uniform2fv_ovr_2(location, count, value);
    end;
    
    // added in gl2.0
    public z_Uniform2i_adr := GetFuncAdr('glUniform2i');
    public z_Uniform2i_ovr_0 := GetFuncOrNil&<procedure(location: Int32; v0: Int32; v1: Int32)>(z_Uniform2i_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Uniform2i(location: Int32; v0: Int32; v1: Int32);
    begin
      z_Uniform2i_ovr_0(location, v0, v1);
    end;
    
    // added in gl2.0
    public z_Uniform2iv_adr := GetFuncAdr('glUniform2iv');
    public z_Uniform2iv_ovr_0 := GetFuncOrNil&<procedure(location: Int32; count: Int32; var value: Int32)>(z_Uniform2iv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Uniform2iv(location: Int32; count: Int32; value: array of Int32);
    begin
      z_Uniform2iv_ovr_0(location, count, value[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Uniform2iv(location: Int32; count: Int32; var value: Int32);
    begin
      z_Uniform2iv_ovr_0(location, count, value);
    end;
    public z_Uniform2iv_ovr_2 := GetFuncOrNil&<procedure(location: Int32; count: Int32; value: IntPtr)>(z_Uniform2iv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Uniform2iv(location: Int32; count: Int32; value: IntPtr);
    begin
      z_Uniform2iv_ovr_2(location, count, value);
    end;
    
    // added in gl3.0
    public z_Uniform2ui_adr := GetFuncAdr('glUniform2ui');
    public z_Uniform2ui_ovr_0 := GetFuncOrNil&<procedure(location: Int32; v0: UInt32; v1: UInt32)>(z_Uniform2ui_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Uniform2ui(location: Int32; v0: UInt32; v1: UInt32);
    begin
      z_Uniform2ui_ovr_0(location, v0, v1);
    end;
    
    // added in gl3.0
    public z_Uniform2uiv_adr := GetFuncAdr('glUniform2uiv');
    public z_Uniform2uiv_ovr_0 := GetFuncOrNil&<procedure(location: Int32; count: Int32; var value: UInt32)>(z_Uniform2uiv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Uniform2uiv(location: Int32; count: Int32; value: array of UInt32);
    begin
      z_Uniform2uiv_ovr_0(location, count, value[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Uniform2uiv(location: Int32; count: Int32; var value: UInt32);
    begin
      z_Uniform2uiv_ovr_0(location, count, value);
    end;
    public z_Uniform2uiv_ovr_2 := GetFuncOrNil&<procedure(location: Int32; count: Int32; value: IntPtr)>(z_Uniform2uiv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Uniform2uiv(location: Int32; count: Int32; value: IntPtr);
    begin
      z_Uniform2uiv_ovr_2(location, count, value);
    end;
    
    // added in gl4.0
    public z_Uniform3d_adr := GetFuncAdr('glUniform3d');
    public z_Uniform3d_ovr_0 := GetFuncOrNil&<procedure(location: Int32; x: real; y: real; z: real)>(z_Uniform3d_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Uniform3d(location: Int32; x: real; y: real; z: real);
    begin
      z_Uniform3d_ovr_0(location, x, y, z);
    end;
    
    // added in gl4.0
    public z_Uniform3dv_adr := GetFuncAdr('glUniform3dv');
    public z_Uniform3dv_ovr_0 := GetFuncOrNil&<procedure(location: Int32; count: Int32; var value: real)>(z_Uniform3dv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Uniform3dv(location: Int32; count: Int32; value: array of real);
    begin
      z_Uniform3dv_ovr_0(location, count, value[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Uniform3dv(location: Int32; count: Int32; var value: real);
    begin
      z_Uniform3dv_ovr_0(location, count, value);
    end;
    public z_Uniform3dv_ovr_2 := GetFuncOrNil&<procedure(location: Int32; count: Int32; value: IntPtr)>(z_Uniform3dv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Uniform3dv(location: Int32; count: Int32; value: IntPtr);
    begin
      z_Uniform3dv_ovr_2(location, count, value);
    end;
    
    // added in gl2.0
    public z_Uniform3f_adr := GetFuncAdr('glUniform3f');
    public z_Uniform3f_ovr_0 := GetFuncOrNil&<procedure(location: Int32; v0: single; v1: single; v2: single)>(z_Uniform3f_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Uniform3f(location: Int32; v0: single; v1: single; v2: single);
    begin
      z_Uniform3f_ovr_0(location, v0, v1, v2);
    end;
    
    // added in gl2.0
    public z_Uniform3fv_adr := GetFuncAdr('glUniform3fv');
    public z_Uniform3fv_ovr_0 := GetFuncOrNil&<procedure(location: Int32; count: Int32; var value: single)>(z_Uniform3fv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Uniform3fv(location: Int32; count: Int32; value: array of single);
    begin
      z_Uniform3fv_ovr_0(location, count, value[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Uniform3fv(location: Int32; count: Int32; var value: single);
    begin
      z_Uniform3fv_ovr_0(location, count, value);
    end;
    public z_Uniform3fv_ovr_2 := GetFuncOrNil&<procedure(location: Int32; count: Int32; value: IntPtr)>(z_Uniform3fv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Uniform3fv(location: Int32; count: Int32; value: IntPtr);
    begin
      z_Uniform3fv_ovr_2(location, count, value);
    end;
    
    // added in gl2.0
    public z_Uniform3i_adr := GetFuncAdr('glUniform3i');
    public z_Uniform3i_ovr_0 := GetFuncOrNil&<procedure(location: Int32; v0: Int32; v1: Int32; v2: Int32)>(z_Uniform3i_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Uniform3i(location: Int32; v0: Int32; v1: Int32; v2: Int32);
    begin
      z_Uniform3i_ovr_0(location, v0, v1, v2);
    end;
    
    // added in gl2.0
    public z_Uniform3iv_adr := GetFuncAdr('glUniform3iv');
    public z_Uniform3iv_ovr_0 := GetFuncOrNil&<procedure(location: Int32; count: Int32; var value: Int32)>(z_Uniform3iv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Uniform3iv(location: Int32; count: Int32; value: array of Int32);
    begin
      z_Uniform3iv_ovr_0(location, count, value[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Uniform3iv(location: Int32; count: Int32; var value: Int32);
    begin
      z_Uniform3iv_ovr_0(location, count, value);
    end;
    public z_Uniform3iv_ovr_2 := GetFuncOrNil&<procedure(location: Int32; count: Int32; value: IntPtr)>(z_Uniform3iv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Uniform3iv(location: Int32; count: Int32; value: IntPtr);
    begin
      z_Uniform3iv_ovr_2(location, count, value);
    end;
    
    // added in gl3.0
    public z_Uniform3ui_adr := GetFuncAdr('glUniform3ui');
    public z_Uniform3ui_ovr_0 := GetFuncOrNil&<procedure(location: Int32; v0: UInt32; v1: UInt32; v2: UInt32)>(z_Uniform3ui_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Uniform3ui(location: Int32; v0: UInt32; v1: UInt32; v2: UInt32);
    begin
      z_Uniform3ui_ovr_0(location, v0, v1, v2);
    end;
    
    // added in gl3.0
    public z_Uniform3uiv_adr := GetFuncAdr('glUniform3uiv');
    public z_Uniform3uiv_ovr_0 := GetFuncOrNil&<procedure(location: Int32; count: Int32; var value: UInt32)>(z_Uniform3uiv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Uniform3uiv(location: Int32; count: Int32; value: array of UInt32);
    begin
      z_Uniform3uiv_ovr_0(location, count, value[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Uniform3uiv(location: Int32; count: Int32; var value: UInt32);
    begin
      z_Uniform3uiv_ovr_0(location, count, value);
    end;
    public z_Uniform3uiv_ovr_2 := GetFuncOrNil&<procedure(location: Int32; count: Int32; value: IntPtr)>(z_Uniform3uiv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Uniform3uiv(location: Int32; count: Int32; value: IntPtr);
    begin
      z_Uniform3uiv_ovr_2(location, count, value);
    end;
    
    // added in gl4.0
    public z_Uniform4d_adr := GetFuncAdr('glUniform4d');
    public z_Uniform4d_ovr_0 := GetFuncOrNil&<procedure(location: Int32; x: real; y: real; z: real; w: real)>(z_Uniform4d_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Uniform4d(location: Int32; x: real; y: real; z: real; w: real);
    begin
      z_Uniform4d_ovr_0(location, x, y, z, w);
    end;
    
    // added in gl4.0
    public z_Uniform4dv_adr := GetFuncAdr('glUniform4dv');
    public z_Uniform4dv_ovr_0 := GetFuncOrNil&<procedure(location: Int32; count: Int32; var value: real)>(z_Uniform4dv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Uniform4dv(location: Int32; count: Int32; value: array of real);
    begin
      z_Uniform4dv_ovr_0(location, count, value[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Uniform4dv(location: Int32; count: Int32; var value: real);
    begin
      z_Uniform4dv_ovr_0(location, count, value);
    end;
    public z_Uniform4dv_ovr_2 := GetFuncOrNil&<procedure(location: Int32; count: Int32; value: IntPtr)>(z_Uniform4dv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Uniform4dv(location: Int32; count: Int32; value: IntPtr);
    begin
      z_Uniform4dv_ovr_2(location, count, value);
    end;
    
    // added in gl2.0
    public z_Uniform4f_adr := GetFuncAdr('glUniform4f');
    public z_Uniform4f_ovr_0 := GetFuncOrNil&<procedure(location: Int32; v0: single; v1: single; v2: single; v3: single)>(z_Uniform4f_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Uniform4f(location: Int32; v0: single; v1: single; v2: single; v3: single);
    begin
      z_Uniform4f_ovr_0(location, v0, v1, v2, v3);
    end;
    
    // added in gl2.0
    public z_Uniform4fv_adr := GetFuncAdr('glUniform4fv');
    public z_Uniform4fv_ovr_0 := GetFuncOrNil&<procedure(location: Int32; count: Int32; var value: single)>(z_Uniform4fv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Uniform4fv(location: Int32; count: Int32; value: array of single);
    begin
      z_Uniform4fv_ovr_0(location, count, value[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Uniform4fv(location: Int32; count: Int32; var value: single);
    begin
      z_Uniform4fv_ovr_0(location, count, value);
    end;
    public z_Uniform4fv_ovr_2 := GetFuncOrNil&<procedure(location: Int32; count: Int32; value: IntPtr)>(z_Uniform4fv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Uniform4fv(location: Int32; count: Int32; value: IntPtr);
    begin
      z_Uniform4fv_ovr_2(location, count, value);
    end;
    
    // added in gl2.0
    public z_Uniform4i_adr := GetFuncAdr('glUniform4i');
    public z_Uniform4i_ovr_0 := GetFuncOrNil&<procedure(location: Int32; v0: Int32; v1: Int32; v2: Int32; v3: Int32)>(z_Uniform4i_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Uniform4i(location: Int32; v0: Int32; v1: Int32; v2: Int32; v3: Int32);
    begin
      z_Uniform4i_ovr_0(location, v0, v1, v2, v3);
    end;
    
    // added in gl2.0
    public z_Uniform4iv_adr := GetFuncAdr('glUniform4iv');
    public z_Uniform4iv_ovr_0 := GetFuncOrNil&<procedure(location: Int32; count: Int32; var value: Int32)>(z_Uniform4iv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Uniform4iv(location: Int32; count: Int32; value: array of Int32);
    begin
      z_Uniform4iv_ovr_0(location, count, value[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Uniform4iv(location: Int32; count: Int32; var value: Int32);
    begin
      z_Uniform4iv_ovr_0(location, count, value);
    end;
    public z_Uniform4iv_ovr_2 := GetFuncOrNil&<procedure(location: Int32; count: Int32; value: IntPtr)>(z_Uniform4iv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Uniform4iv(location: Int32; count: Int32; value: IntPtr);
    begin
      z_Uniform4iv_ovr_2(location, count, value);
    end;
    
    // added in gl3.0
    public z_Uniform4ui_adr := GetFuncAdr('glUniform4ui');
    public z_Uniform4ui_ovr_0 := GetFuncOrNil&<procedure(location: Int32; v0: UInt32; v1: UInt32; v2: UInt32; v3: UInt32)>(z_Uniform4ui_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Uniform4ui(location: Int32; v0: UInt32; v1: UInt32; v2: UInt32; v3: UInt32);
    begin
      z_Uniform4ui_ovr_0(location, v0, v1, v2, v3);
    end;
    
    // added in gl3.0
    public z_Uniform4uiv_adr := GetFuncAdr('glUniform4uiv');
    public z_Uniform4uiv_ovr_0 := GetFuncOrNil&<procedure(location: Int32; count: Int32; var value: UInt32)>(z_Uniform4uiv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Uniform4uiv(location: Int32; count: Int32; value: array of UInt32);
    begin
      z_Uniform4uiv_ovr_0(location, count, value[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Uniform4uiv(location: Int32; count: Int32; var value: UInt32);
    begin
      z_Uniform4uiv_ovr_0(location, count, value);
    end;
    public z_Uniform4uiv_ovr_2 := GetFuncOrNil&<procedure(location: Int32; count: Int32; value: IntPtr)>(z_Uniform4uiv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Uniform4uiv(location: Int32; count: Int32; value: IntPtr);
    begin
      z_Uniform4uiv_ovr_2(location, count, value);
    end;
    
    // added in gl3.1
    public z_UniformBlockBinding_adr := GetFuncAdr('glUniformBlockBinding');
    public z_UniformBlockBinding_ovr_0 := GetFuncOrNil&<procedure(program: UInt32; uniformBlockIndex: UInt32; uniformBlockBinding: UInt32)>(z_UniformBlockBinding_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure UniformBlockBinding(program: UInt32; uniformBlockIndex: UInt32; uniformBlockBinding: UInt32);
    begin
      z_UniformBlockBinding_ovr_0(program, uniformBlockIndex, uniformBlockBinding);
    end;
    
    // added in gl4.0
    public z_UniformMatrix2dv_adr := GetFuncAdr('glUniformMatrix2dv');
    public z_UniformMatrix2dv_ovr_0 := GetFuncOrNil&<procedure(location: Int32; count: Int32; transpose: boolean; var value: real)>(z_UniformMatrix2dv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure UniformMatrix2dv(location: Int32; count: Int32; transpose: boolean; value: array of real);
    begin
      z_UniformMatrix2dv_ovr_0(location, count, transpose, value[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure UniformMatrix2dv(location: Int32; count: Int32; transpose: boolean; var value: real);
    begin
      z_UniformMatrix2dv_ovr_0(location, count, transpose, value);
    end;
    public z_UniformMatrix2dv_ovr_2 := GetFuncOrNil&<procedure(location: Int32; count: Int32; transpose: boolean; value: IntPtr)>(z_UniformMatrix2dv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure UniformMatrix2dv(location: Int32; count: Int32; transpose: boolean; value: IntPtr);
    begin
      z_UniformMatrix2dv_ovr_2(location, count, transpose, value);
    end;
    
    // added in gl2.0
    public z_UniformMatrix2fv_adr := GetFuncAdr('glUniformMatrix2fv');
    public z_UniformMatrix2fv_ovr_0 := GetFuncOrNil&<procedure(location: Int32; count: Int32; transpose: boolean; var value: single)>(z_UniformMatrix2fv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure UniformMatrix2fv(location: Int32; count: Int32; transpose: boolean; value: array of single);
    begin
      z_UniformMatrix2fv_ovr_0(location, count, transpose, value[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure UniformMatrix2fv(location: Int32; count: Int32; transpose: boolean; var value: single);
    begin
      z_UniformMatrix2fv_ovr_0(location, count, transpose, value);
    end;
    public z_UniformMatrix2fv_ovr_2 := GetFuncOrNil&<procedure(location: Int32; count: Int32; transpose: boolean; value: IntPtr)>(z_UniformMatrix2fv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure UniformMatrix2fv(location: Int32; count: Int32; transpose: boolean; value: IntPtr);
    begin
      z_UniformMatrix2fv_ovr_2(location, count, transpose, value);
    end;
    
    // added in gl4.0
    public z_UniformMatrix2x3dv_adr := GetFuncAdr('glUniformMatrix2x3dv');
    public z_UniformMatrix2x3dv_ovr_0 := GetFuncOrNil&<procedure(location: Int32; count: Int32; transpose: boolean; var value: real)>(z_UniformMatrix2x3dv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure UniformMatrix2x3dv(location: Int32; count: Int32; transpose: boolean; value: array of real);
    begin
      z_UniformMatrix2x3dv_ovr_0(location, count, transpose, value[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure UniformMatrix2x3dv(location: Int32; count: Int32; transpose: boolean; var value: real);
    begin
      z_UniformMatrix2x3dv_ovr_0(location, count, transpose, value);
    end;
    public z_UniformMatrix2x3dv_ovr_2 := GetFuncOrNil&<procedure(location: Int32; count: Int32; transpose: boolean; value: IntPtr)>(z_UniformMatrix2x3dv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure UniformMatrix2x3dv(location: Int32; count: Int32; transpose: boolean; value: IntPtr);
    begin
      z_UniformMatrix2x3dv_ovr_2(location, count, transpose, value);
    end;
    
    // added in gl2.1
    public z_UniformMatrix2x3fv_adr := GetFuncAdr('glUniformMatrix2x3fv');
    public z_UniformMatrix2x3fv_ovr_0 := GetFuncOrNil&<procedure(location: Int32; count: Int32; transpose: boolean; var value: single)>(z_UniformMatrix2x3fv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure UniformMatrix2x3fv(location: Int32; count: Int32; transpose: boolean; value: array of single);
    begin
      z_UniformMatrix2x3fv_ovr_0(location, count, transpose, value[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure UniformMatrix2x3fv(location: Int32; count: Int32; transpose: boolean; var value: single);
    begin
      z_UniformMatrix2x3fv_ovr_0(location, count, transpose, value);
    end;
    public z_UniformMatrix2x3fv_ovr_2 := GetFuncOrNil&<procedure(location: Int32; count: Int32; transpose: boolean; value: IntPtr)>(z_UniformMatrix2x3fv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure UniformMatrix2x3fv(location: Int32; count: Int32; transpose: boolean; value: IntPtr);
    begin
      z_UniformMatrix2x3fv_ovr_2(location, count, transpose, value);
    end;
    
    // added in gl4.0
    public z_UniformMatrix2x4dv_adr := GetFuncAdr('glUniformMatrix2x4dv');
    public z_UniformMatrix2x4dv_ovr_0 := GetFuncOrNil&<procedure(location: Int32; count: Int32; transpose: boolean; var value: real)>(z_UniformMatrix2x4dv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure UniformMatrix2x4dv(location: Int32; count: Int32; transpose: boolean; value: array of real);
    begin
      z_UniformMatrix2x4dv_ovr_0(location, count, transpose, value[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure UniformMatrix2x4dv(location: Int32; count: Int32; transpose: boolean; var value: real);
    begin
      z_UniformMatrix2x4dv_ovr_0(location, count, transpose, value);
    end;
    public z_UniformMatrix2x4dv_ovr_2 := GetFuncOrNil&<procedure(location: Int32; count: Int32; transpose: boolean; value: IntPtr)>(z_UniformMatrix2x4dv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure UniformMatrix2x4dv(location: Int32; count: Int32; transpose: boolean; value: IntPtr);
    begin
      z_UniformMatrix2x4dv_ovr_2(location, count, transpose, value);
    end;
    
    // added in gl2.1
    public z_UniformMatrix2x4fv_adr := GetFuncAdr('glUniformMatrix2x4fv');
    public z_UniformMatrix2x4fv_ovr_0 := GetFuncOrNil&<procedure(location: Int32; count: Int32; transpose: boolean; var value: single)>(z_UniformMatrix2x4fv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure UniformMatrix2x4fv(location: Int32; count: Int32; transpose: boolean; value: array of single);
    begin
      z_UniformMatrix2x4fv_ovr_0(location, count, transpose, value[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure UniformMatrix2x4fv(location: Int32; count: Int32; transpose: boolean; var value: single);
    begin
      z_UniformMatrix2x4fv_ovr_0(location, count, transpose, value);
    end;
    public z_UniformMatrix2x4fv_ovr_2 := GetFuncOrNil&<procedure(location: Int32; count: Int32; transpose: boolean; value: IntPtr)>(z_UniformMatrix2x4fv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure UniformMatrix2x4fv(location: Int32; count: Int32; transpose: boolean; value: IntPtr);
    begin
      z_UniformMatrix2x4fv_ovr_2(location, count, transpose, value);
    end;
    
    // added in gl4.0
    public z_UniformMatrix3dv_adr := GetFuncAdr('glUniformMatrix3dv');
    public z_UniformMatrix3dv_ovr_0 := GetFuncOrNil&<procedure(location: Int32; count: Int32; transpose: boolean; var value: real)>(z_UniformMatrix3dv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure UniformMatrix3dv(location: Int32; count: Int32; transpose: boolean; value: array of real);
    begin
      z_UniformMatrix3dv_ovr_0(location, count, transpose, value[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure UniformMatrix3dv(location: Int32; count: Int32; transpose: boolean; var value: real);
    begin
      z_UniformMatrix3dv_ovr_0(location, count, transpose, value);
    end;
    public z_UniformMatrix3dv_ovr_2 := GetFuncOrNil&<procedure(location: Int32; count: Int32; transpose: boolean; value: IntPtr)>(z_UniformMatrix3dv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure UniformMatrix3dv(location: Int32; count: Int32; transpose: boolean; value: IntPtr);
    begin
      z_UniformMatrix3dv_ovr_2(location, count, transpose, value);
    end;
    
    // added in gl2.0
    public z_UniformMatrix3fv_adr := GetFuncAdr('glUniformMatrix3fv');
    public z_UniformMatrix3fv_ovr_0 := GetFuncOrNil&<procedure(location: Int32; count: Int32; transpose: boolean; var value: single)>(z_UniformMatrix3fv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure UniformMatrix3fv(location: Int32; count: Int32; transpose: boolean; value: array of single);
    begin
      z_UniformMatrix3fv_ovr_0(location, count, transpose, value[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure UniformMatrix3fv(location: Int32; count: Int32; transpose: boolean; var value: single);
    begin
      z_UniformMatrix3fv_ovr_0(location, count, transpose, value);
    end;
    public z_UniformMatrix3fv_ovr_2 := GetFuncOrNil&<procedure(location: Int32; count: Int32; transpose: boolean; value: IntPtr)>(z_UniformMatrix3fv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure UniformMatrix3fv(location: Int32; count: Int32; transpose: boolean; value: IntPtr);
    begin
      z_UniformMatrix3fv_ovr_2(location, count, transpose, value);
    end;
    
    // added in gl4.0
    public z_UniformMatrix3x2dv_adr := GetFuncAdr('glUniformMatrix3x2dv');
    public z_UniformMatrix3x2dv_ovr_0 := GetFuncOrNil&<procedure(location: Int32; count: Int32; transpose: boolean; var value: real)>(z_UniformMatrix3x2dv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure UniformMatrix3x2dv(location: Int32; count: Int32; transpose: boolean; value: array of real);
    begin
      z_UniformMatrix3x2dv_ovr_0(location, count, transpose, value[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure UniformMatrix3x2dv(location: Int32; count: Int32; transpose: boolean; var value: real);
    begin
      z_UniformMatrix3x2dv_ovr_0(location, count, transpose, value);
    end;
    public z_UniformMatrix3x2dv_ovr_2 := GetFuncOrNil&<procedure(location: Int32; count: Int32; transpose: boolean; value: IntPtr)>(z_UniformMatrix3x2dv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure UniformMatrix3x2dv(location: Int32; count: Int32; transpose: boolean; value: IntPtr);
    begin
      z_UniformMatrix3x2dv_ovr_2(location, count, transpose, value);
    end;
    
    // added in gl2.1
    public z_UniformMatrix3x2fv_adr := GetFuncAdr('glUniformMatrix3x2fv');
    public z_UniformMatrix3x2fv_ovr_0 := GetFuncOrNil&<procedure(location: Int32; count: Int32; transpose: boolean; var value: single)>(z_UniformMatrix3x2fv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure UniformMatrix3x2fv(location: Int32; count: Int32; transpose: boolean; value: array of single);
    begin
      z_UniformMatrix3x2fv_ovr_0(location, count, transpose, value[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure UniformMatrix3x2fv(location: Int32; count: Int32; transpose: boolean; var value: single);
    begin
      z_UniformMatrix3x2fv_ovr_0(location, count, transpose, value);
    end;
    public z_UniformMatrix3x2fv_ovr_2 := GetFuncOrNil&<procedure(location: Int32; count: Int32; transpose: boolean; value: IntPtr)>(z_UniformMatrix3x2fv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure UniformMatrix3x2fv(location: Int32; count: Int32; transpose: boolean; value: IntPtr);
    begin
      z_UniformMatrix3x2fv_ovr_2(location, count, transpose, value);
    end;
    
    // added in gl4.0
    public z_UniformMatrix3x4dv_adr := GetFuncAdr('glUniformMatrix3x4dv');
    public z_UniformMatrix3x4dv_ovr_0 := GetFuncOrNil&<procedure(location: Int32; count: Int32; transpose: boolean; var value: real)>(z_UniformMatrix3x4dv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure UniformMatrix3x4dv(location: Int32; count: Int32; transpose: boolean; value: array of real);
    begin
      z_UniformMatrix3x4dv_ovr_0(location, count, transpose, value[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure UniformMatrix3x4dv(location: Int32; count: Int32; transpose: boolean; var value: real);
    begin
      z_UniformMatrix3x4dv_ovr_0(location, count, transpose, value);
    end;
    public z_UniformMatrix3x4dv_ovr_2 := GetFuncOrNil&<procedure(location: Int32; count: Int32; transpose: boolean; value: IntPtr)>(z_UniformMatrix3x4dv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure UniformMatrix3x4dv(location: Int32; count: Int32; transpose: boolean; value: IntPtr);
    begin
      z_UniformMatrix3x4dv_ovr_2(location, count, transpose, value);
    end;
    
    // added in gl2.1
    public z_UniformMatrix3x4fv_adr := GetFuncAdr('glUniformMatrix3x4fv');
    public z_UniformMatrix3x4fv_ovr_0 := GetFuncOrNil&<procedure(location: Int32; count: Int32; transpose: boolean; var value: single)>(z_UniformMatrix3x4fv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure UniformMatrix3x4fv(location: Int32; count: Int32; transpose: boolean; value: array of single);
    begin
      z_UniformMatrix3x4fv_ovr_0(location, count, transpose, value[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure UniformMatrix3x4fv(location: Int32; count: Int32; transpose: boolean; var value: single);
    begin
      z_UniformMatrix3x4fv_ovr_0(location, count, transpose, value);
    end;
    public z_UniformMatrix3x4fv_ovr_2 := GetFuncOrNil&<procedure(location: Int32; count: Int32; transpose: boolean; value: IntPtr)>(z_UniformMatrix3x4fv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure UniformMatrix3x4fv(location: Int32; count: Int32; transpose: boolean; value: IntPtr);
    begin
      z_UniformMatrix3x4fv_ovr_2(location, count, transpose, value);
    end;
    
    // added in gl4.0
    public z_UniformMatrix4dv_adr := GetFuncAdr('glUniformMatrix4dv');
    public z_UniformMatrix4dv_ovr_0 := GetFuncOrNil&<procedure(location: Int32; count: Int32; transpose: boolean; var value: real)>(z_UniformMatrix4dv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure UniformMatrix4dv(location: Int32; count: Int32; transpose: boolean; value: array of real);
    begin
      z_UniformMatrix4dv_ovr_0(location, count, transpose, value[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure UniformMatrix4dv(location: Int32; count: Int32; transpose: boolean; var value: real);
    begin
      z_UniformMatrix4dv_ovr_0(location, count, transpose, value);
    end;
    public z_UniformMatrix4dv_ovr_2 := GetFuncOrNil&<procedure(location: Int32; count: Int32; transpose: boolean; value: IntPtr)>(z_UniformMatrix4dv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure UniformMatrix4dv(location: Int32; count: Int32; transpose: boolean; value: IntPtr);
    begin
      z_UniformMatrix4dv_ovr_2(location, count, transpose, value);
    end;
    
    // added in gl2.0
    public z_UniformMatrix4fv_adr := GetFuncAdr('glUniformMatrix4fv');
    public z_UniformMatrix4fv_ovr_0 := GetFuncOrNil&<procedure(location: Int32; count: Int32; transpose: boolean; var value: single)>(z_UniformMatrix4fv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure UniformMatrix4fv(location: Int32; count: Int32; transpose: boolean; value: array of single);
    begin
      z_UniformMatrix4fv_ovr_0(location, count, transpose, value[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure UniformMatrix4fv(location: Int32; count: Int32; transpose: boolean; var value: single);
    begin
      z_UniformMatrix4fv_ovr_0(location, count, transpose, value);
    end;
    public z_UniformMatrix4fv_ovr_2 := GetFuncOrNil&<procedure(location: Int32; count: Int32; transpose: boolean; value: IntPtr)>(z_UniformMatrix4fv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure UniformMatrix4fv(location: Int32; count: Int32; transpose: boolean; value: IntPtr);
    begin
      z_UniformMatrix4fv_ovr_2(location, count, transpose, value);
    end;
    
    // added in gl4.0
    public z_UniformMatrix4x2dv_adr := GetFuncAdr('glUniformMatrix4x2dv');
    public z_UniformMatrix4x2dv_ovr_0 := GetFuncOrNil&<procedure(location: Int32; count: Int32; transpose: boolean; var value: real)>(z_UniformMatrix4x2dv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure UniformMatrix4x2dv(location: Int32; count: Int32; transpose: boolean; value: array of real);
    begin
      z_UniformMatrix4x2dv_ovr_0(location, count, transpose, value[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure UniformMatrix4x2dv(location: Int32; count: Int32; transpose: boolean; var value: real);
    begin
      z_UniformMatrix4x2dv_ovr_0(location, count, transpose, value);
    end;
    public z_UniformMatrix4x2dv_ovr_2 := GetFuncOrNil&<procedure(location: Int32; count: Int32; transpose: boolean; value: IntPtr)>(z_UniformMatrix4x2dv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure UniformMatrix4x2dv(location: Int32; count: Int32; transpose: boolean; value: IntPtr);
    begin
      z_UniformMatrix4x2dv_ovr_2(location, count, transpose, value);
    end;
    
    // added in gl2.1
    public z_UniformMatrix4x2fv_adr := GetFuncAdr('glUniformMatrix4x2fv');
    public z_UniformMatrix4x2fv_ovr_0 := GetFuncOrNil&<procedure(location: Int32; count: Int32; transpose: boolean; var value: single)>(z_UniformMatrix4x2fv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure UniformMatrix4x2fv(location: Int32; count: Int32; transpose: boolean; value: array of single);
    begin
      z_UniformMatrix4x2fv_ovr_0(location, count, transpose, value[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure UniformMatrix4x2fv(location: Int32; count: Int32; transpose: boolean; var value: single);
    begin
      z_UniformMatrix4x2fv_ovr_0(location, count, transpose, value);
    end;
    public z_UniformMatrix4x2fv_ovr_2 := GetFuncOrNil&<procedure(location: Int32; count: Int32; transpose: boolean; value: IntPtr)>(z_UniformMatrix4x2fv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure UniformMatrix4x2fv(location: Int32; count: Int32; transpose: boolean; value: IntPtr);
    begin
      z_UniformMatrix4x2fv_ovr_2(location, count, transpose, value);
    end;
    
    // added in gl4.0
    public z_UniformMatrix4x3dv_adr := GetFuncAdr('glUniformMatrix4x3dv');
    public z_UniformMatrix4x3dv_ovr_0 := GetFuncOrNil&<procedure(location: Int32; count: Int32; transpose: boolean; var value: real)>(z_UniformMatrix4x3dv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure UniformMatrix4x3dv(location: Int32; count: Int32; transpose: boolean; value: array of real);
    begin
      z_UniformMatrix4x3dv_ovr_0(location, count, transpose, value[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure UniformMatrix4x3dv(location: Int32; count: Int32; transpose: boolean; var value: real);
    begin
      z_UniformMatrix4x3dv_ovr_0(location, count, transpose, value);
    end;
    public z_UniformMatrix4x3dv_ovr_2 := GetFuncOrNil&<procedure(location: Int32; count: Int32; transpose: boolean; value: IntPtr)>(z_UniformMatrix4x3dv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure UniformMatrix4x3dv(location: Int32; count: Int32; transpose: boolean; value: IntPtr);
    begin
      z_UniformMatrix4x3dv_ovr_2(location, count, transpose, value);
    end;
    
    // added in gl2.1
    public z_UniformMatrix4x3fv_adr := GetFuncAdr('glUniformMatrix4x3fv');
    public z_UniformMatrix4x3fv_ovr_0 := GetFuncOrNil&<procedure(location: Int32; count: Int32; transpose: boolean; var value: single)>(z_UniformMatrix4x3fv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure UniformMatrix4x3fv(location: Int32; count: Int32; transpose: boolean; value: array of single);
    begin
      z_UniformMatrix4x3fv_ovr_0(location, count, transpose, value[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure UniformMatrix4x3fv(location: Int32; count: Int32; transpose: boolean; var value: single);
    begin
      z_UniformMatrix4x3fv_ovr_0(location, count, transpose, value);
    end;
    public z_UniformMatrix4x3fv_ovr_2 := GetFuncOrNil&<procedure(location: Int32; count: Int32; transpose: boolean; value: IntPtr)>(z_UniformMatrix4x3fv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure UniformMatrix4x3fv(location: Int32; count: Int32; transpose: boolean; value: IntPtr);
    begin
      z_UniformMatrix4x3fv_ovr_2(location, count, transpose, value);
    end;
    
    // added in gl4.0
    public z_UniformSubroutinesuiv_adr := GetFuncAdr('glUniformSubroutinesuiv');
    public z_UniformSubroutinesuiv_ovr_0 := GetFuncOrNil&<procedure(shadertype: ShaderType; count: Int32; var indices: UInt32)>(z_UniformSubroutinesuiv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure UniformSubroutinesuiv(shadertype: ShaderType; count: Int32; indices: array of UInt32);
    begin
      z_UniformSubroutinesuiv_ovr_0(shadertype, count, indices[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure UniformSubroutinesuiv(shadertype: ShaderType; count: Int32; var indices: UInt32);
    begin
      z_UniformSubroutinesuiv_ovr_0(shadertype, count, indices);
    end;
    public z_UniformSubroutinesuiv_ovr_2 := GetFuncOrNil&<procedure(shadertype: ShaderType; count: Int32; indices: IntPtr)>(z_UniformSubroutinesuiv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure UniformSubroutinesuiv(shadertype: ShaderType; count: Int32; indices: IntPtr);
    begin
      z_UniformSubroutinesuiv_ovr_2(shadertype, count, indices);
    end;
    
    // added in gl1.5
    public z_UnmapBuffer_adr := GetFuncAdr('glUnmapBuffer');
    public z_UnmapBuffer_ovr_0 := GetFuncOrNil&<function(target: BufferTargetARB): boolean>(z_UnmapBuffer_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function UnmapBuffer(target: BufferTargetARB): boolean;
    begin
      Result := z_UnmapBuffer_ovr_0(target);
    end;
    
    // added in gl4.5
    public z_UnmapNamedBuffer_adr := GetFuncAdr('glUnmapNamedBuffer');
    public z_UnmapNamedBuffer_ovr_0 := GetFuncOrNil&<function(buffer: UInt32): boolean>(z_UnmapNamedBuffer_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function UnmapNamedBuffer(buffer: UInt32): boolean;
    begin
      Result := z_UnmapNamedBuffer_ovr_0(buffer);
    end;
    
    // added in gl2.0
    public z_UseProgram_adr := GetFuncAdr('glUseProgram');
    public z_UseProgram_ovr_0 := GetFuncOrNil&<procedure(program: UInt32)>(z_UseProgram_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure UseProgram(program: UInt32);
    begin
      z_UseProgram_ovr_0(program);
    end;
    
    // added in gl4.1
    public z_UseProgramStages_adr := GetFuncAdr('glUseProgramStages');
    public z_UseProgramStages_ovr_0 := GetFuncOrNil&<procedure(pipeline: UInt32; stages: UseProgramStageMask; program: UInt32)>(z_UseProgramStages_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure UseProgramStages(pipeline: UInt32; stages: UseProgramStageMask; program: UInt32);
    begin
      z_UseProgramStages_ovr_0(pipeline, stages, program);
    end;
    
    // added in gl2.0
    public z_ValidateProgram_adr := GetFuncAdr('glValidateProgram');
    public z_ValidateProgram_ovr_0 := GetFuncOrNil&<procedure(program: UInt32)>(z_ValidateProgram_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ValidateProgram(program: UInt32);
    begin
      z_ValidateProgram_ovr_0(program);
    end;
    
    // added in gl4.1
    public z_ValidateProgramPipeline_adr := GetFuncAdr('glValidateProgramPipeline');
    public z_ValidateProgramPipeline_ovr_0 := GetFuncOrNil&<procedure(pipeline: UInt32)>(z_ValidateProgramPipeline_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ValidateProgramPipeline(pipeline: UInt32);
    begin
      z_ValidateProgramPipeline_ovr_0(pipeline);
    end;
    
    // added in gl4.5
    public z_VertexArrayAttribBinding_adr := GetFuncAdr('glVertexArrayAttribBinding');
    public z_VertexArrayAttribBinding_ovr_0 := GetFuncOrNil&<procedure(vaobj: UInt32; attribindex: UInt32; bindingindex: UInt32)>(z_VertexArrayAttribBinding_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexArrayAttribBinding(vaobj: UInt32; attribindex: UInt32; bindingindex: UInt32);
    begin
      z_VertexArrayAttribBinding_ovr_0(vaobj, attribindex, bindingindex);
    end;
    
    // added in gl4.5
    public z_VertexArrayAttribFormat_adr := GetFuncAdr('glVertexArrayAttribFormat');
    public z_VertexArrayAttribFormat_ovr_0 := GetFuncOrNil&<procedure(vaobj: UInt32; attribindex: UInt32; size: Int32; type: VertexAttribType; normalized: boolean; relativeoffset: UInt32)>(z_VertexArrayAttribFormat_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexArrayAttribFormat(vaobj: UInt32; attribindex: UInt32; size: Int32; type: VertexAttribType; normalized: boolean; relativeoffset: UInt32);
    begin
      z_VertexArrayAttribFormat_ovr_0(vaobj, attribindex, size, type, normalized, relativeoffset);
    end;
    
    // added in gl4.5
    public z_VertexArrayAttribIFormat_adr := GetFuncAdr('glVertexArrayAttribIFormat');
    public z_VertexArrayAttribIFormat_ovr_0 := GetFuncOrNil&<procedure(vaobj: UInt32; attribindex: UInt32; size: Int32; type: VertexAttribIType; relativeoffset: UInt32)>(z_VertexArrayAttribIFormat_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexArrayAttribIFormat(vaobj: UInt32; attribindex: UInt32; size: Int32; type: VertexAttribIType; relativeoffset: UInt32);
    begin
      z_VertexArrayAttribIFormat_ovr_0(vaobj, attribindex, size, type, relativeoffset);
    end;
    
    // added in gl4.5
    public z_VertexArrayAttribLFormat_adr := GetFuncAdr('glVertexArrayAttribLFormat');
    public z_VertexArrayAttribLFormat_ovr_0 := GetFuncOrNil&<procedure(vaobj: UInt32; attribindex: UInt32; size: Int32; type: VertexAttribLType; relativeoffset: UInt32)>(z_VertexArrayAttribLFormat_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexArrayAttribLFormat(vaobj: UInt32; attribindex: UInt32; size: Int32; type: VertexAttribLType; relativeoffset: UInt32);
    begin
      z_VertexArrayAttribLFormat_ovr_0(vaobj, attribindex, size, type, relativeoffset);
    end;
    
    // added in gl4.5
    public z_VertexArrayBindingDivisor_adr := GetFuncAdr('glVertexArrayBindingDivisor');
    public z_VertexArrayBindingDivisor_ovr_0 := GetFuncOrNil&<procedure(vaobj: UInt32; bindingindex: UInt32; divisor: UInt32)>(z_VertexArrayBindingDivisor_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexArrayBindingDivisor(vaobj: UInt32; bindingindex: UInt32; divisor: UInt32);
    begin
      z_VertexArrayBindingDivisor_ovr_0(vaobj, bindingindex, divisor);
    end;
    
    // added in gl4.5
    public z_VertexArrayElementBuffer_adr := GetFuncAdr('glVertexArrayElementBuffer');
    public z_VertexArrayElementBuffer_ovr_0 := GetFuncOrNil&<procedure(vaobj: UInt32; buffer: UInt32)>(z_VertexArrayElementBuffer_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexArrayElementBuffer(vaobj: UInt32; buffer: UInt32);
    begin
      z_VertexArrayElementBuffer_ovr_0(vaobj, buffer);
    end;
    
    // added in gl4.5
    public z_VertexArrayVertexBuffer_adr := GetFuncAdr('glVertexArrayVertexBuffer');
    public z_VertexArrayVertexBuffer_ovr_0 := GetFuncOrNil&<procedure(vaobj: UInt32; bindingindex: UInt32; buffer: UInt32; offset: IntPtr; stride: Int32)>(z_VertexArrayVertexBuffer_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexArrayVertexBuffer(vaobj: UInt32; bindingindex: UInt32; buffer: UInt32; offset: IntPtr; stride: Int32);
    begin
      z_VertexArrayVertexBuffer_ovr_0(vaobj, bindingindex, buffer, offset, stride);
    end;
    
    // added in gl4.5
    public z_VertexArrayVertexBuffers_adr := GetFuncAdr('glVertexArrayVertexBuffers');
    public z_VertexArrayVertexBuffers_ovr_0 := GetFuncOrNil&<procedure(vaobj: UInt32; first: UInt32; count: Int32; var buffers: UInt32; var offsets: IntPtr; var strides: Int32)>(z_VertexArrayVertexBuffers_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexArrayVertexBuffers(vaobj: UInt32; first: UInt32; count: Int32; buffers: array of UInt32; offsets: array of IntPtr; strides: array of Int32);
    begin
      z_VertexArrayVertexBuffers_ovr_0(vaobj, first, count, buffers[0], offsets[0], strides[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexArrayVertexBuffers(vaobj: UInt32; first: UInt32; count: Int32; buffers: array of UInt32; offsets: array of IntPtr; var strides: Int32);
    begin
      z_VertexArrayVertexBuffers_ovr_0(vaobj, first, count, buffers[0], offsets[0], strides);
    end;
    public z_VertexArrayVertexBuffers_ovr_2 := GetFuncOrNil&<procedure(vaobj: UInt32; first: UInt32; count: Int32; var buffers: UInt32; var offsets: IntPtr; strides: IntPtr)>(z_VertexArrayVertexBuffers_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexArrayVertexBuffers(vaobj: UInt32; first: UInt32; count: Int32; buffers: array of UInt32; offsets: array of IntPtr; strides: IntPtr);
    begin
      z_VertexArrayVertexBuffers_ovr_2(vaobj, first, count, buffers[0], offsets[0], strides);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexArrayVertexBuffers(vaobj: UInt32; first: UInt32; count: Int32; buffers: array of UInt32; var offsets: IntPtr; strides: array of Int32);
    begin
      z_VertexArrayVertexBuffers_ovr_0(vaobj, first, count, buffers[0], offsets, strides[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexArrayVertexBuffers(vaobj: UInt32; first: UInt32; count: Int32; buffers: array of UInt32; var offsets: IntPtr; var strides: Int32);
    begin
      z_VertexArrayVertexBuffers_ovr_0(vaobj, first, count, buffers[0], offsets, strides);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexArrayVertexBuffers(vaobj: UInt32; first: UInt32; count: Int32; buffers: array of UInt32; var offsets: IntPtr; strides: IntPtr);
    begin
      z_VertexArrayVertexBuffers_ovr_2(vaobj, first, count, buffers[0], offsets, strides);
    end;
    public z_VertexArrayVertexBuffers_ovr_6 := GetFuncOrNil&<procedure(vaobj: UInt32; first: UInt32; count: Int32; var buffers: UInt32; offsets: IntPtr; var strides: Int32)>(z_VertexArrayVertexBuffers_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexArrayVertexBuffers(vaobj: UInt32; first: UInt32; count: Int32; buffers: array of UInt32; offsets: IntPtr; strides: array of Int32);
    begin
      z_VertexArrayVertexBuffers_ovr_6(vaobj, first, count, buffers[0], offsets, strides[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexArrayVertexBuffers(vaobj: UInt32; first: UInt32; count: Int32; buffers: array of UInt32; offsets: IntPtr; var strides: Int32);
    begin
      z_VertexArrayVertexBuffers_ovr_6(vaobj, first, count, buffers[0], offsets, strides);
    end;
    public z_VertexArrayVertexBuffers_ovr_8 := GetFuncOrNil&<procedure(vaobj: UInt32; first: UInt32; count: Int32; var buffers: UInt32; offsets: IntPtr; strides: IntPtr)>(z_VertexArrayVertexBuffers_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexArrayVertexBuffers(vaobj: UInt32; first: UInt32; count: Int32; buffers: array of UInt32; offsets: IntPtr; strides: IntPtr);
    begin
      z_VertexArrayVertexBuffers_ovr_8(vaobj, first, count, buffers[0], offsets, strides);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexArrayVertexBuffers(vaobj: UInt32; first: UInt32; count: Int32; var buffers: UInt32; offsets: array of IntPtr; strides: array of Int32);
    begin
      z_VertexArrayVertexBuffers_ovr_0(vaobj, first, count, buffers, offsets[0], strides[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexArrayVertexBuffers(vaobj: UInt32; first: UInt32; count: Int32; var buffers: UInt32; offsets: array of IntPtr; var strides: Int32);
    begin
      z_VertexArrayVertexBuffers_ovr_0(vaobj, first, count, buffers, offsets[0], strides);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexArrayVertexBuffers(vaobj: UInt32; first: UInt32; count: Int32; var buffers: UInt32; offsets: array of IntPtr; strides: IntPtr);
    begin
      z_VertexArrayVertexBuffers_ovr_2(vaobj, first, count, buffers, offsets[0], strides);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexArrayVertexBuffers(vaobj: UInt32; first: UInt32; count: Int32; var buffers: UInt32; var offsets: IntPtr; strides: array of Int32);
    begin
      z_VertexArrayVertexBuffers_ovr_0(vaobj, first, count, buffers, offsets, strides[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexArrayVertexBuffers(vaobj: UInt32; first: UInt32; count: Int32; var buffers: UInt32; var offsets: IntPtr; var strides: Int32);
    begin
      z_VertexArrayVertexBuffers_ovr_0(vaobj, first, count, buffers, offsets, strides);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexArrayVertexBuffers(vaobj: UInt32; first: UInt32; count: Int32; var buffers: UInt32; var offsets: IntPtr; strides: IntPtr);
    begin
      z_VertexArrayVertexBuffers_ovr_2(vaobj, first, count, buffers, offsets, strides);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexArrayVertexBuffers(vaobj: UInt32; first: UInt32; count: Int32; var buffers: UInt32; offsets: IntPtr; strides: array of Int32);
    begin
      z_VertexArrayVertexBuffers_ovr_6(vaobj, first, count, buffers, offsets, strides[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexArrayVertexBuffers(vaobj: UInt32; first: UInt32; count: Int32; var buffers: UInt32; offsets: IntPtr; var strides: Int32);
    begin
      z_VertexArrayVertexBuffers_ovr_6(vaobj, first, count, buffers, offsets, strides);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexArrayVertexBuffers(vaobj: UInt32; first: UInt32; count: Int32; var buffers: UInt32; offsets: IntPtr; strides: IntPtr);
    begin
      z_VertexArrayVertexBuffers_ovr_8(vaobj, first, count, buffers, offsets, strides);
    end;
    public z_VertexArrayVertexBuffers_ovr_18 := GetFuncOrNil&<procedure(vaobj: UInt32; first: UInt32; count: Int32; buffers: IntPtr; var offsets: IntPtr; var strides: Int32)>(z_VertexArrayVertexBuffers_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexArrayVertexBuffers(vaobj: UInt32; first: UInt32; count: Int32; buffers: IntPtr; offsets: array of IntPtr; strides: array of Int32);
    begin
      z_VertexArrayVertexBuffers_ovr_18(vaobj, first, count, buffers, offsets[0], strides[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexArrayVertexBuffers(vaobj: UInt32; first: UInt32; count: Int32; buffers: IntPtr; offsets: array of IntPtr; var strides: Int32);
    begin
      z_VertexArrayVertexBuffers_ovr_18(vaobj, first, count, buffers, offsets[0], strides);
    end;
    public z_VertexArrayVertexBuffers_ovr_20 := GetFuncOrNil&<procedure(vaobj: UInt32; first: UInt32; count: Int32; buffers: IntPtr; var offsets: IntPtr; strides: IntPtr)>(z_VertexArrayVertexBuffers_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexArrayVertexBuffers(vaobj: UInt32; first: UInt32; count: Int32; buffers: IntPtr; offsets: array of IntPtr; strides: IntPtr);
    begin
      z_VertexArrayVertexBuffers_ovr_20(vaobj, first, count, buffers, offsets[0], strides);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexArrayVertexBuffers(vaobj: UInt32; first: UInt32; count: Int32; buffers: IntPtr; var offsets: IntPtr; strides: array of Int32);
    begin
      z_VertexArrayVertexBuffers_ovr_18(vaobj, first, count, buffers, offsets, strides[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexArrayVertexBuffers(vaobj: UInt32; first: UInt32; count: Int32; buffers: IntPtr; var offsets: IntPtr; var strides: Int32);
    begin
      z_VertexArrayVertexBuffers_ovr_18(vaobj, first, count, buffers, offsets, strides);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexArrayVertexBuffers(vaobj: UInt32; first: UInt32; count: Int32; buffers: IntPtr; var offsets: IntPtr; strides: IntPtr);
    begin
      z_VertexArrayVertexBuffers_ovr_20(vaobj, first, count, buffers, offsets, strides);
    end;
    public z_VertexArrayVertexBuffers_ovr_24 := GetFuncOrNil&<procedure(vaobj: UInt32; first: UInt32; count: Int32; buffers: IntPtr; offsets: IntPtr; var strides: Int32)>(z_VertexArrayVertexBuffers_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexArrayVertexBuffers(vaobj: UInt32; first: UInt32; count: Int32; buffers: IntPtr; offsets: IntPtr; strides: array of Int32);
    begin
      z_VertexArrayVertexBuffers_ovr_24(vaobj, first, count, buffers, offsets, strides[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexArrayVertexBuffers(vaobj: UInt32; first: UInt32; count: Int32; buffers: IntPtr; offsets: IntPtr; var strides: Int32);
    begin
      z_VertexArrayVertexBuffers_ovr_24(vaobj, first, count, buffers, offsets, strides);
    end;
    public z_VertexArrayVertexBuffers_ovr_26 := GetFuncOrNil&<procedure(vaobj: UInt32; first: UInt32; count: Int32; buffers: IntPtr; offsets: IntPtr; strides: IntPtr)>(z_VertexArrayVertexBuffers_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexArrayVertexBuffers(vaobj: UInt32; first: UInt32; count: Int32; buffers: IntPtr; offsets: IntPtr; strides: IntPtr);
    begin
      z_VertexArrayVertexBuffers_ovr_26(vaobj, first, count, buffers, offsets, strides);
    end;
    
    // added in gl2.0
    public z_VertexAttrib1d_adr := GetFuncAdr('glVertexAttrib1d');
    public z_VertexAttrib1d_ovr_0 := GetFuncOrNil&<procedure(index: UInt32; x: real)>(z_VertexAttrib1d_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttrib1d(index: UInt32; x: real);
    begin
      z_VertexAttrib1d_ovr_0(index, x);
    end;
    
    // added in gl2.0
    public z_VertexAttrib1dv_adr := GetFuncAdr('glVertexAttrib1dv');
    public z_VertexAttrib1dv_ovr_0 := GetFuncOrNil&<procedure(index: UInt32; var v: real)>(z_VertexAttrib1dv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttrib1dv(index: UInt32; v: array of real);
    begin
      z_VertexAttrib1dv_ovr_0(index, v[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttrib1dv(index: UInt32; var v: real);
    begin
      z_VertexAttrib1dv_ovr_0(index, v);
    end;
    public z_VertexAttrib1dv_ovr_2 := GetFuncOrNil&<procedure(index: UInt32; v: IntPtr)>(z_VertexAttrib1dv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttrib1dv(index: UInt32; v: IntPtr);
    begin
      z_VertexAttrib1dv_ovr_2(index, v);
    end;
    
    // added in gl2.0
    public z_VertexAttrib1f_adr := GetFuncAdr('glVertexAttrib1f');
    public z_VertexAttrib1f_ovr_0 := GetFuncOrNil&<procedure(index: UInt32; x: single)>(z_VertexAttrib1f_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttrib1f(index: UInt32; x: single);
    begin
      z_VertexAttrib1f_ovr_0(index, x);
    end;
    
    // added in gl2.0
    public z_VertexAttrib1fv_adr := GetFuncAdr('glVertexAttrib1fv');
    public z_VertexAttrib1fv_ovr_0 := GetFuncOrNil&<procedure(index: UInt32; var v: single)>(z_VertexAttrib1fv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttrib1fv(index: UInt32; v: array of single);
    begin
      z_VertexAttrib1fv_ovr_0(index, v[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttrib1fv(index: UInt32; var v: single);
    begin
      z_VertexAttrib1fv_ovr_0(index, v);
    end;
    public z_VertexAttrib1fv_ovr_2 := GetFuncOrNil&<procedure(index: UInt32; v: IntPtr)>(z_VertexAttrib1fv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttrib1fv(index: UInt32; v: IntPtr);
    begin
      z_VertexAttrib1fv_ovr_2(index, v);
    end;
    
    // added in gl2.0
    public z_VertexAttrib1s_adr := GetFuncAdr('glVertexAttrib1s');
    public z_VertexAttrib1s_ovr_0 := GetFuncOrNil&<procedure(index: UInt32; x: Int16)>(z_VertexAttrib1s_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttrib1s(index: UInt32; x: Int16);
    begin
      z_VertexAttrib1s_ovr_0(index, x);
    end;
    
    // added in gl2.0
    public z_VertexAttrib1sv_adr := GetFuncAdr('glVertexAttrib1sv');
    public z_VertexAttrib1sv_ovr_0 := GetFuncOrNil&<procedure(index: UInt32; var v: Int16)>(z_VertexAttrib1sv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttrib1sv(index: UInt32; v: array of Int16);
    begin
      z_VertexAttrib1sv_ovr_0(index, v[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttrib1sv(index: UInt32; var v: Int16);
    begin
      z_VertexAttrib1sv_ovr_0(index, v);
    end;
    public z_VertexAttrib1sv_ovr_2 := GetFuncOrNil&<procedure(index: UInt32; v: IntPtr)>(z_VertexAttrib1sv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttrib1sv(index: UInt32; v: IntPtr);
    begin
      z_VertexAttrib1sv_ovr_2(index, v);
    end;
    
    // added in gl2.0
    public z_VertexAttrib2d_adr := GetFuncAdr('glVertexAttrib2d');
    public z_VertexAttrib2d_ovr_0 := GetFuncOrNil&<procedure(index: UInt32; x: real; y: real)>(z_VertexAttrib2d_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttrib2d(index: UInt32; x: real; y: real);
    begin
      z_VertexAttrib2d_ovr_0(index, x, y);
    end;
    
    // added in gl2.0
    public z_VertexAttrib2dv_adr := GetFuncAdr('glVertexAttrib2dv');
    public z_VertexAttrib2dv_ovr_0 := GetFuncOrNil&<procedure(index: UInt32; var v: real)>(z_VertexAttrib2dv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttrib2dv(index: UInt32; v: array of real);
    begin
      z_VertexAttrib2dv_ovr_0(index, v[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttrib2dv(index: UInt32; var v: real);
    begin
      z_VertexAttrib2dv_ovr_0(index, v);
    end;
    public z_VertexAttrib2dv_ovr_2 := GetFuncOrNil&<procedure(index: UInt32; v: IntPtr)>(z_VertexAttrib2dv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttrib2dv(index: UInt32; v: IntPtr);
    begin
      z_VertexAttrib2dv_ovr_2(index, v);
    end;
    
    // added in gl2.0
    public z_VertexAttrib2f_adr := GetFuncAdr('glVertexAttrib2f');
    public z_VertexAttrib2f_ovr_0 := GetFuncOrNil&<procedure(index: UInt32; x: single; y: single)>(z_VertexAttrib2f_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttrib2f(index: UInt32; x: single; y: single);
    begin
      z_VertexAttrib2f_ovr_0(index, x, y);
    end;
    
    // added in gl2.0
    public z_VertexAttrib2fv_adr := GetFuncAdr('glVertexAttrib2fv');
    public z_VertexAttrib2fv_ovr_0 := GetFuncOrNil&<procedure(index: UInt32; var v: single)>(z_VertexAttrib2fv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttrib2fv(index: UInt32; v: array of single);
    begin
      z_VertexAttrib2fv_ovr_0(index, v[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttrib2fv(index: UInt32; var v: single);
    begin
      z_VertexAttrib2fv_ovr_0(index, v);
    end;
    public z_VertexAttrib2fv_ovr_2 := GetFuncOrNil&<procedure(index: UInt32; v: IntPtr)>(z_VertexAttrib2fv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttrib2fv(index: UInt32; v: IntPtr);
    begin
      z_VertexAttrib2fv_ovr_2(index, v);
    end;
    
    // added in gl2.0
    public z_VertexAttrib2s_adr := GetFuncAdr('glVertexAttrib2s');
    public z_VertexAttrib2s_ovr_0 := GetFuncOrNil&<procedure(index: UInt32; x: Int16; y: Int16)>(z_VertexAttrib2s_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttrib2s(index: UInt32; x: Int16; y: Int16);
    begin
      z_VertexAttrib2s_ovr_0(index, x, y);
    end;
    
    // added in gl2.0
    public z_VertexAttrib2sv_adr := GetFuncAdr('glVertexAttrib2sv');
    public z_VertexAttrib2sv_ovr_0 := GetFuncOrNil&<procedure(index: UInt32; var v: Int16)>(z_VertexAttrib2sv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttrib2sv(index: UInt32; v: array of Int16);
    begin
      z_VertexAttrib2sv_ovr_0(index, v[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttrib2sv(index: UInt32; var v: Int16);
    begin
      z_VertexAttrib2sv_ovr_0(index, v);
    end;
    public z_VertexAttrib2sv_ovr_2 := GetFuncOrNil&<procedure(index: UInt32; v: IntPtr)>(z_VertexAttrib2sv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttrib2sv(index: UInt32; v: IntPtr);
    begin
      z_VertexAttrib2sv_ovr_2(index, v);
    end;
    
    // added in gl2.0
    public z_VertexAttrib3d_adr := GetFuncAdr('glVertexAttrib3d');
    public z_VertexAttrib3d_ovr_0 := GetFuncOrNil&<procedure(index: UInt32; x: real; y: real; z: real)>(z_VertexAttrib3d_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttrib3d(index: UInt32; x: real; y: real; z: real);
    begin
      z_VertexAttrib3d_ovr_0(index, x, y, z);
    end;
    
    // added in gl2.0
    public z_VertexAttrib3dv_adr := GetFuncAdr('glVertexAttrib3dv');
    public z_VertexAttrib3dv_ovr_0 := GetFuncOrNil&<procedure(index: UInt32; var v: real)>(z_VertexAttrib3dv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttrib3dv(index: UInt32; v: array of real);
    begin
      z_VertexAttrib3dv_ovr_0(index, v[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttrib3dv(index: UInt32; var v: real);
    begin
      z_VertexAttrib3dv_ovr_0(index, v);
    end;
    public z_VertexAttrib3dv_ovr_2 := GetFuncOrNil&<procedure(index: UInt32; v: IntPtr)>(z_VertexAttrib3dv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttrib3dv(index: UInt32; v: IntPtr);
    begin
      z_VertexAttrib3dv_ovr_2(index, v);
    end;
    
    // added in gl2.0
    public z_VertexAttrib3f_adr := GetFuncAdr('glVertexAttrib3f');
    public z_VertexAttrib3f_ovr_0 := GetFuncOrNil&<procedure(index: UInt32; x: single; y: single; z: single)>(z_VertexAttrib3f_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttrib3f(index: UInt32; x: single; y: single; z: single);
    begin
      z_VertexAttrib3f_ovr_0(index, x, y, z);
    end;
    
    // added in gl2.0
    public z_VertexAttrib3fv_adr := GetFuncAdr('glVertexAttrib3fv');
    public z_VertexAttrib3fv_ovr_0 := GetFuncOrNil&<procedure(index: UInt32; var v: single)>(z_VertexAttrib3fv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttrib3fv(index: UInt32; v: array of single);
    begin
      z_VertexAttrib3fv_ovr_0(index, v[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttrib3fv(index: UInt32; var v: single);
    begin
      z_VertexAttrib3fv_ovr_0(index, v);
    end;
    public z_VertexAttrib3fv_ovr_2 := GetFuncOrNil&<procedure(index: UInt32; v: IntPtr)>(z_VertexAttrib3fv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttrib3fv(index: UInt32; v: IntPtr);
    begin
      z_VertexAttrib3fv_ovr_2(index, v);
    end;
    
    // added in gl2.0
    public z_VertexAttrib3s_adr := GetFuncAdr('glVertexAttrib3s');
    public z_VertexAttrib3s_ovr_0 := GetFuncOrNil&<procedure(index: UInt32; x: Int16; y: Int16; z: Int16)>(z_VertexAttrib3s_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttrib3s(index: UInt32; x: Int16; y: Int16; z: Int16);
    begin
      z_VertexAttrib3s_ovr_0(index, x, y, z);
    end;
    
    // added in gl2.0
    public z_VertexAttrib3sv_adr := GetFuncAdr('glVertexAttrib3sv');
    public z_VertexAttrib3sv_ovr_0 := GetFuncOrNil&<procedure(index: UInt32; var v: Int16)>(z_VertexAttrib3sv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttrib3sv(index: UInt32; v: array of Int16);
    begin
      z_VertexAttrib3sv_ovr_0(index, v[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttrib3sv(index: UInt32; var v: Int16);
    begin
      z_VertexAttrib3sv_ovr_0(index, v);
    end;
    public z_VertexAttrib3sv_ovr_2 := GetFuncOrNil&<procedure(index: UInt32; v: IntPtr)>(z_VertexAttrib3sv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttrib3sv(index: UInt32; v: IntPtr);
    begin
      z_VertexAttrib3sv_ovr_2(index, v);
    end;
    
    // added in gl2.0
    public z_VertexAttrib4bv_adr := GetFuncAdr('glVertexAttrib4bv');
    public z_VertexAttrib4bv_ovr_0 := GetFuncOrNil&<procedure(index: UInt32; var v: SByte)>(z_VertexAttrib4bv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttrib4bv(index: UInt32; v: array of SByte);
    begin
      z_VertexAttrib4bv_ovr_0(index, v[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttrib4bv(index: UInt32; var v: SByte);
    begin
      z_VertexAttrib4bv_ovr_0(index, v);
    end;
    public z_VertexAttrib4bv_ovr_2 := GetFuncOrNil&<procedure(index: UInt32; v: IntPtr)>(z_VertexAttrib4bv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttrib4bv(index: UInt32; v: IntPtr);
    begin
      z_VertexAttrib4bv_ovr_2(index, v);
    end;
    
    // added in gl2.0
    public z_VertexAttrib4d_adr := GetFuncAdr('glVertexAttrib4d');
    public z_VertexAttrib4d_ovr_0 := GetFuncOrNil&<procedure(index: UInt32; x: real; y: real; z: real; w: real)>(z_VertexAttrib4d_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttrib4d(index: UInt32; x: real; y: real; z: real; w: real);
    begin
      z_VertexAttrib4d_ovr_0(index, x, y, z, w);
    end;
    
    // added in gl2.0
    public z_VertexAttrib4dv_adr := GetFuncAdr('glVertexAttrib4dv');
    public z_VertexAttrib4dv_ovr_0 := GetFuncOrNil&<procedure(index: UInt32; var v: real)>(z_VertexAttrib4dv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttrib4dv(index: UInt32; v: array of real);
    begin
      z_VertexAttrib4dv_ovr_0(index, v[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttrib4dv(index: UInt32; var v: real);
    begin
      z_VertexAttrib4dv_ovr_0(index, v);
    end;
    public z_VertexAttrib4dv_ovr_2 := GetFuncOrNil&<procedure(index: UInt32; v: IntPtr)>(z_VertexAttrib4dv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttrib4dv(index: UInt32; v: IntPtr);
    begin
      z_VertexAttrib4dv_ovr_2(index, v);
    end;
    
    // added in gl2.0
    public z_VertexAttrib4f_adr := GetFuncAdr('glVertexAttrib4f');
    public z_VertexAttrib4f_ovr_0 := GetFuncOrNil&<procedure(index: UInt32; x: single; y: single; z: single; w: single)>(z_VertexAttrib4f_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttrib4f(index: UInt32; x: single; y: single; z: single; w: single);
    begin
      z_VertexAttrib4f_ovr_0(index, x, y, z, w);
    end;
    
    // added in gl2.0
    public z_VertexAttrib4fv_adr := GetFuncAdr('glVertexAttrib4fv');
    public z_VertexAttrib4fv_ovr_0 := GetFuncOrNil&<procedure(index: UInt32; var v: single)>(z_VertexAttrib4fv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttrib4fv(index: UInt32; v: array of single);
    begin
      z_VertexAttrib4fv_ovr_0(index, v[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttrib4fv(index: UInt32; var v: single);
    begin
      z_VertexAttrib4fv_ovr_0(index, v);
    end;
    public z_VertexAttrib4fv_ovr_2 := GetFuncOrNil&<procedure(index: UInt32; v: IntPtr)>(z_VertexAttrib4fv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttrib4fv(index: UInt32; v: IntPtr);
    begin
      z_VertexAttrib4fv_ovr_2(index, v);
    end;
    
    // added in gl2.0
    public z_VertexAttrib4iv_adr := GetFuncAdr('glVertexAttrib4iv');
    public z_VertexAttrib4iv_ovr_0 := GetFuncOrNil&<procedure(index: UInt32; var v: Int32)>(z_VertexAttrib4iv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttrib4iv(index: UInt32; v: array of Int32);
    begin
      z_VertexAttrib4iv_ovr_0(index, v[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttrib4iv(index: UInt32; var v: Int32);
    begin
      z_VertexAttrib4iv_ovr_0(index, v);
    end;
    public z_VertexAttrib4iv_ovr_2 := GetFuncOrNil&<procedure(index: UInt32; v: IntPtr)>(z_VertexAttrib4iv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttrib4iv(index: UInt32; v: IntPtr);
    begin
      z_VertexAttrib4iv_ovr_2(index, v);
    end;
    
    // added in gl2.0
    public z_VertexAttrib4Nbv_adr := GetFuncAdr('glVertexAttrib4Nbv');
    public z_VertexAttrib4Nbv_ovr_0 := GetFuncOrNil&<procedure(index: UInt32; var v: SByte)>(z_VertexAttrib4Nbv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttrib4Nbv(index: UInt32; v: array of SByte);
    begin
      z_VertexAttrib4Nbv_ovr_0(index, v[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttrib4Nbv(index: UInt32; var v: SByte);
    begin
      z_VertexAttrib4Nbv_ovr_0(index, v);
    end;
    public z_VertexAttrib4Nbv_ovr_2 := GetFuncOrNil&<procedure(index: UInt32; v: IntPtr)>(z_VertexAttrib4Nbv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttrib4Nbv(index: UInt32; v: IntPtr);
    begin
      z_VertexAttrib4Nbv_ovr_2(index, v);
    end;
    
    // added in gl2.0
    public z_VertexAttrib4Niv_adr := GetFuncAdr('glVertexAttrib4Niv');
    public z_VertexAttrib4Niv_ovr_0 := GetFuncOrNil&<procedure(index: UInt32; var v: Int32)>(z_VertexAttrib4Niv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttrib4Niv(index: UInt32; v: array of Int32);
    begin
      z_VertexAttrib4Niv_ovr_0(index, v[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttrib4Niv(index: UInt32; var v: Int32);
    begin
      z_VertexAttrib4Niv_ovr_0(index, v);
    end;
    public z_VertexAttrib4Niv_ovr_2 := GetFuncOrNil&<procedure(index: UInt32; v: IntPtr)>(z_VertexAttrib4Niv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttrib4Niv(index: UInt32; v: IntPtr);
    begin
      z_VertexAttrib4Niv_ovr_2(index, v);
    end;
    
    // added in gl2.0
    public z_VertexAttrib4Nsv_adr := GetFuncAdr('glVertexAttrib4Nsv');
    public z_VertexAttrib4Nsv_ovr_0 := GetFuncOrNil&<procedure(index: UInt32; var v: Int16)>(z_VertexAttrib4Nsv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttrib4Nsv(index: UInt32; v: array of Int16);
    begin
      z_VertexAttrib4Nsv_ovr_0(index, v[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttrib4Nsv(index: UInt32; var v: Int16);
    begin
      z_VertexAttrib4Nsv_ovr_0(index, v);
    end;
    public z_VertexAttrib4Nsv_ovr_2 := GetFuncOrNil&<procedure(index: UInt32; v: IntPtr)>(z_VertexAttrib4Nsv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttrib4Nsv(index: UInt32; v: IntPtr);
    begin
      z_VertexAttrib4Nsv_ovr_2(index, v);
    end;
    
    // added in gl2.0
    public z_VertexAttrib4Nub_adr := GetFuncAdr('glVertexAttrib4Nub');
    public z_VertexAttrib4Nub_ovr_0 := GetFuncOrNil&<procedure(index: UInt32; x: Byte; y: Byte; z: Byte; w: Byte)>(z_VertexAttrib4Nub_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttrib4Nub(index: UInt32; x: Byte; y: Byte; z: Byte; w: Byte);
    begin
      z_VertexAttrib4Nub_ovr_0(index, x, y, z, w);
    end;
    
    // added in gl2.0
    public z_VertexAttrib4Nubv_adr := GetFuncAdr('glVertexAttrib4Nubv');
    public z_VertexAttrib4Nubv_ovr_0 := GetFuncOrNil&<procedure(index: UInt32; var v: Byte)>(z_VertexAttrib4Nubv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttrib4Nubv(index: UInt32; v: array of Byte);
    begin
      z_VertexAttrib4Nubv_ovr_0(index, v[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttrib4Nubv(index: UInt32; var v: Byte);
    begin
      z_VertexAttrib4Nubv_ovr_0(index, v);
    end;
    public z_VertexAttrib4Nubv_ovr_2 := GetFuncOrNil&<procedure(index: UInt32; v: IntPtr)>(z_VertexAttrib4Nubv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttrib4Nubv(index: UInt32; v: IntPtr);
    begin
      z_VertexAttrib4Nubv_ovr_2(index, v);
    end;
    
    // added in gl2.0
    public z_VertexAttrib4Nuiv_adr := GetFuncAdr('glVertexAttrib4Nuiv');
    public z_VertexAttrib4Nuiv_ovr_0 := GetFuncOrNil&<procedure(index: UInt32; var v: UInt32)>(z_VertexAttrib4Nuiv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttrib4Nuiv(index: UInt32; v: array of UInt32);
    begin
      z_VertexAttrib4Nuiv_ovr_0(index, v[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttrib4Nuiv(index: UInt32; var v: UInt32);
    begin
      z_VertexAttrib4Nuiv_ovr_0(index, v);
    end;
    public z_VertexAttrib4Nuiv_ovr_2 := GetFuncOrNil&<procedure(index: UInt32; v: IntPtr)>(z_VertexAttrib4Nuiv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttrib4Nuiv(index: UInt32; v: IntPtr);
    begin
      z_VertexAttrib4Nuiv_ovr_2(index, v);
    end;
    
    // added in gl2.0
    public z_VertexAttrib4Nusv_adr := GetFuncAdr('glVertexAttrib4Nusv');
    public z_VertexAttrib4Nusv_ovr_0 := GetFuncOrNil&<procedure(index: UInt32; var v: UInt16)>(z_VertexAttrib4Nusv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttrib4Nusv(index: UInt32; v: array of UInt16);
    begin
      z_VertexAttrib4Nusv_ovr_0(index, v[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttrib4Nusv(index: UInt32; var v: UInt16);
    begin
      z_VertexAttrib4Nusv_ovr_0(index, v);
    end;
    public z_VertexAttrib4Nusv_ovr_2 := GetFuncOrNil&<procedure(index: UInt32; v: IntPtr)>(z_VertexAttrib4Nusv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttrib4Nusv(index: UInt32; v: IntPtr);
    begin
      z_VertexAttrib4Nusv_ovr_2(index, v);
    end;
    
    // added in gl2.0
    public z_VertexAttrib4s_adr := GetFuncAdr('glVertexAttrib4s');
    public z_VertexAttrib4s_ovr_0 := GetFuncOrNil&<procedure(index: UInt32; x: Int16; y: Int16; z: Int16; w: Int16)>(z_VertexAttrib4s_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttrib4s(index: UInt32; x: Int16; y: Int16; z: Int16; w: Int16);
    begin
      z_VertexAttrib4s_ovr_0(index, x, y, z, w);
    end;
    
    // added in gl2.0
    public z_VertexAttrib4sv_adr := GetFuncAdr('glVertexAttrib4sv');
    public z_VertexAttrib4sv_ovr_0 := GetFuncOrNil&<procedure(index: UInt32; var v: Int16)>(z_VertexAttrib4sv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttrib4sv(index: UInt32; v: array of Int16);
    begin
      z_VertexAttrib4sv_ovr_0(index, v[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttrib4sv(index: UInt32; var v: Int16);
    begin
      z_VertexAttrib4sv_ovr_0(index, v);
    end;
    public z_VertexAttrib4sv_ovr_2 := GetFuncOrNil&<procedure(index: UInt32; v: IntPtr)>(z_VertexAttrib4sv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttrib4sv(index: UInt32; v: IntPtr);
    begin
      z_VertexAttrib4sv_ovr_2(index, v);
    end;
    
    // added in gl2.0
    public z_VertexAttrib4ubv_adr := GetFuncAdr('glVertexAttrib4ubv');
    public z_VertexAttrib4ubv_ovr_0 := GetFuncOrNil&<procedure(index: UInt32; var v: Byte)>(z_VertexAttrib4ubv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttrib4ubv(index: UInt32; v: array of Byte);
    begin
      z_VertexAttrib4ubv_ovr_0(index, v[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttrib4ubv(index: UInt32; var v: Byte);
    begin
      z_VertexAttrib4ubv_ovr_0(index, v);
    end;
    public z_VertexAttrib4ubv_ovr_2 := GetFuncOrNil&<procedure(index: UInt32; v: IntPtr)>(z_VertexAttrib4ubv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttrib4ubv(index: UInt32; v: IntPtr);
    begin
      z_VertexAttrib4ubv_ovr_2(index, v);
    end;
    
    // added in gl2.0
    public z_VertexAttrib4uiv_adr := GetFuncAdr('glVertexAttrib4uiv');
    public z_VertexAttrib4uiv_ovr_0 := GetFuncOrNil&<procedure(index: UInt32; var v: UInt32)>(z_VertexAttrib4uiv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttrib4uiv(index: UInt32; v: array of UInt32);
    begin
      z_VertexAttrib4uiv_ovr_0(index, v[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttrib4uiv(index: UInt32; var v: UInt32);
    begin
      z_VertexAttrib4uiv_ovr_0(index, v);
    end;
    public z_VertexAttrib4uiv_ovr_2 := GetFuncOrNil&<procedure(index: UInt32; v: IntPtr)>(z_VertexAttrib4uiv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttrib4uiv(index: UInt32; v: IntPtr);
    begin
      z_VertexAttrib4uiv_ovr_2(index, v);
    end;
    
    // added in gl2.0
    public z_VertexAttrib4usv_adr := GetFuncAdr('glVertexAttrib4usv');
    public z_VertexAttrib4usv_ovr_0 := GetFuncOrNil&<procedure(index: UInt32; var v: UInt16)>(z_VertexAttrib4usv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttrib4usv(index: UInt32; v: array of UInt16);
    begin
      z_VertexAttrib4usv_ovr_0(index, v[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttrib4usv(index: UInt32; var v: UInt16);
    begin
      z_VertexAttrib4usv_ovr_0(index, v);
    end;
    public z_VertexAttrib4usv_ovr_2 := GetFuncOrNil&<procedure(index: UInt32; v: IntPtr)>(z_VertexAttrib4usv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttrib4usv(index: UInt32; v: IntPtr);
    begin
      z_VertexAttrib4usv_ovr_2(index, v);
    end;
    
    // added in gl4.3
    public z_VertexAttribBinding_adr := GetFuncAdr('glVertexAttribBinding');
    public z_VertexAttribBinding_ovr_0 := GetFuncOrNil&<procedure(attribindex: UInt32; bindingindex: UInt32)>(z_VertexAttribBinding_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttribBinding(attribindex: UInt32; bindingindex: UInt32);
    begin
      z_VertexAttribBinding_ovr_0(attribindex, bindingindex);
    end;
    
    // added in gl3.3
    public z_VertexAttribDivisor_adr := GetFuncAdr('glVertexAttribDivisor');
    public z_VertexAttribDivisor_ovr_0 := GetFuncOrNil&<procedure(index: UInt32; divisor: UInt32)>(z_VertexAttribDivisor_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttribDivisor(index: UInt32; divisor: UInt32);
    begin
      z_VertexAttribDivisor_ovr_0(index, divisor);
    end;
    
    // added in gl4.3
    public z_VertexAttribFormat_adr := GetFuncAdr('glVertexAttribFormat');
    public z_VertexAttribFormat_ovr_0 := GetFuncOrNil&<procedure(attribindex: UInt32; size: Int32; type: VertexAttribType; normalized: boolean; relativeoffset: UInt32)>(z_VertexAttribFormat_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttribFormat(attribindex: UInt32; size: Int32; type: VertexAttribType; normalized: boolean; relativeoffset: UInt32);
    begin
      z_VertexAttribFormat_ovr_0(attribindex, size, type, normalized, relativeoffset);
    end;
    
    // added in gl3.0
    public z_VertexAttribI1i_adr := GetFuncAdr('glVertexAttribI1i');
    public z_VertexAttribI1i_ovr_0 := GetFuncOrNil&<procedure(index: UInt32; x: Int32)>(z_VertexAttribI1i_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttribI1i(index: UInt32; x: Int32);
    begin
      z_VertexAttribI1i_ovr_0(index, x);
    end;
    
    // added in gl3.0
    public z_VertexAttribI1iv_adr := GetFuncAdr('glVertexAttribI1iv');
    public z_VertexAttribI1iv_ovr_0 := GetFuncOrNil&<procedure(index: UInt32; var v: Int32)>(z_VertexAttribI1iv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttribI1iv(index: UInt32; v: array of Int32);
    begin
      z_VertexAttribI1iv_ovr_0(index, v[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttribI1iv(index: UInt32; var v: Int32);
    begin
      z_VertexAttribI1iv_ovr_0(index, v);
    end;
    public z_VertexAttribI1iv_ovr_2 := GetFuncOrNil&<procedure(index: UInt32; v: IntPtr)>(z_VertexAttribI1iv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttribI1iv(index: UInt32; v: IntPtr);
    begin
      z_VertexAttribI1iv_ovr_2(index, v);
    end;
    
    // added in gl3.0
    public z_VertexAttribI1ui_adr := GetFuncAdr('glVertexAttribI1ui');
    public z_VertexAttribI1ui_ovr_0 := GetFuncOrNil&<procedure(index: UInt32; x: UInt32)>(z_VertexAttribI1ui_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttribI1ui(index: UInt32; x: UInt32);
    begin
      z_VertexAttribI1ui_ovr_0(index, x);
    end;
    
    // added in gl3.0
    public z_VertexAttribI1uiv_adr := GetFuncAdr('glVertexAttribI1uiv');
    public z_VertexAttribI1uiv_ovr_0 := GetFuncOrNil&<procedure(index: UInt32; var v: UInt32)>(z_VertexAttribI1uiv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttribI1uiv(index: UInt32; v: array of UInt32);
    begin
      z_VertexAttribI1uiv_ovr_0(index, v[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttribI1uiv(index: UInt32; var v: UInt32);
    begin
      z_VertexAttribI1uiv_ovr_0(index, v);
    end;
    public z_VertexAttribI1uiv_ovr_2 := GetFuncOrNil&<procedure(index: UInt32; v: IntPtr)>(z_VertexAttribI1uiv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttribI1uiv(index: UInt32; v: IntPtr);
    begin
      z_VertexAttribI1uiv_ovr_2(index, v);
    end;
    
    // added in gl3.0
    public z_VertexAttribI2i_adr := GetFuncAdr('glVertexAttribI2i');
    public z_VertexAttribI2i_ovr_0 := GetFuncOrNil&<procedure(index: UInt32; x: Int32; y: Int32)>(z_VertexAttribI2i_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttribI2i(index: UInt32; x: Int32; y: Int32);
    begin
      z_VertexAttribI2i_ovr_0(index, x, y);
    end;
    
    // added in gl3.0
    public z_VertexAttribI2iv_adr := GetFuncAdr('glVertexAttribI2iv');
    public z_VertexAttribI2iv_ovr_0 := GetFuncOrNil&<procedure(index: UInt32; var v: Int32)>(z_VertexAttribI2iv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttribI2iv(index: UInt32; v: array of Int32);
    begin
      z_VertexAttribI2iv_ovr_0(index, v[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttribI2iv(index: UInt32; var v: Int32);
    begin
      z_VertexAttribI2iv_ovr_0(index, v);
    end;
    public z_VertexAttribI2iv_ovr_2 := GetFuncOrNil&<procedure(index: UInt32; v: IntPtr)>(z_VertexAttribI2iv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttribI2iv(index: UInt32; v: IntPtr);
    begin
      z_VertexAttribI2iv_ovr_2(index, v);
    end;
    
    // added in gl3.0
    public z_VertexAttribI2ui_adr := GetFuncAdr('glVertexAttribI2ui');
    public z_VertexAttribI2ui_ovr_0 := GetFuncOrNil&<procedure(index: UInt32; x: UInt32; y: UInt32)>(z_VertexAttribI2ui_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttribI2ui(index: UInt32; x: UInt32; y: UInt32);
    begin
      z_VertexAttribI2ui_ovr_0(index, x, y);
    end;
    
    // added in gl3.0
    public z_VertexAttribI2uiv_adr := GetFuncAdr('glVertexAttribI2uiv');
    public z_VertexAttribI2uiv_ovr_0 := GetFuncOrNil&<procedure(index: UInt32; var v: UInt32)>(z_VertexAttribI2uiv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttribI2uiv(index: UInt32; v: array of UInt32);
    begin
      z_VertexAttribI2uiv_ovr_0(index, v[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttribI2uiv(index: UInt32; var v: UInt32);
    begin
      z_VertexAttribI2uiv_ovr_0(index, v);
    end;
    public z_VertexAttribI2uiv_ovr_2 := GetFuncOrNil&<procedure(index: UInt32; v: IntPtr)>(z_VertexAttribI2uiv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttribI2uiv(index: UInt32; v: IntPtr);
    begin
      z_VertexAttribI2uiv_ovr_2(index, v);
    end;
    
    // added in gl3.0
    public z_VertexAttribI3i_adr := GetFuncAdr('glVertexAttribI3i');
    public z_VertexAttribI3i_ovr_0 := GetFuncOrNil&<procedure(index: UInt32; x: Int32; y: Int32; z: Int32)>(z_VertexAttribI3i_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttribI3i(index: UInt32; x: Int32; y: Int32; z: Int32);
    begin
      z_VertexAttribI3i_ovr_0(index, x, y, z);
    end;
    
    // added in gl3.0
    public z_VertexAttribI3iv_adr := GetFuncAdr('glVertexAttribI3iv');
    public z_VertexAttribI3iv_ovr_0 := GetFuncOrNil&<procedure(index: UInt32; var v: Int32)>(z_VertexAttribI3iv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttribI3iv(index: UInt32; v: array of Int32);
    begin
      z_VertexAttribI3iv_ovr_0(index, v[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttribI3iv(index: UInt32; var v: Int32);
    begin
      z_VertexAttribI3iv_ovr_0(index, v);
    end;
    public z_VertexAttribI3iv_ovr_2 := GetFuncOrNil&<procedure(index: UInt32; v: IntPtr)>(z_VertexAttribI3iv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttribI3iv(index: UInt32; v: IntPtr);
    begin
      z_VertexAttribI3iv_ovr_2(index, v);
    end;
    
    // added in gl3.0
    public z_VertexAttribI3ui_adr := GetFuncAdr('glVertexAttribI3ui');
    public z_VertexAttribI3ui_ovr_0 := GetFuncOrNil&<procedure(index: UInt32; x: UInt32; y: UInt32; z: UInt32)>(z_VertexAttribI3ui_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttribI3ui(index: UInt32; x: UInt32; y: UInt32; z: UInt32);
    begin
      z_VertexAttribI3ui_ovr_0(index, x, y, z);
    end;
    
    // added in gl3.0
    public z_VertexAttribI3uiv_adr := GetFuncAdr('glVertexAttribI3uiv');
    public z_VertexAttribI3uiv_ovr_0 := GetFuncOrNil&<procedure(index: UInt32; var v: UInt32)>(z_VertexAttribI3uiv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttribI3uiv(index: UInt32; v: array of UInt32);
    begin
      z_VertexAttribI3uiv_ovr_0(index, v[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttribI3uiv(index: UInt32; var v: UInt32);
    begin
      z_VertexAttribI3uiv_ovr_0(index, v);
    end;
    public z_VertexAttribI3uiv_ovr_2 := GetFuncOrNil&<procedure(index: UInt32; v: IntPtr)>(z_VertexAttribI3uiv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttribI3uiv(index: UInt32; v: IntPtr);
    begin
      z_VertexAttribI3uiv_ovr_2(index, v);
    end;
    
    // added in gl3.0
    public z_VertexAttribI4bv_adr := GetFuncAdr('glVertexAttribI4bv');
    public z_VertexAttribI4bv_ovr_0 := GetFuncOrNil&<procedure(index: UInt32; var v: SByte)>(z_VertexAttribI4bv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttribI4bv(index: UInt32; v: array of SByte);
    begin
      z_VertexAttribI4bv_ovr_0(index, v[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttribI4bv(index: UInt32; var v: SByte);
    begin
      z_VertexAttribI4bv_ovr_0(index, v);
    end;
    public z_VertexAttribI4bv_ovr_2 := GetFuncOrNil&<procedure(index: UInt32; v: IntPtr)>(z_VertexAttribI4bv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttribI4bv(index: UInt32; v: IntPtr);
    begin
      z_VertexAttribI4bv_ovr_2(index, v);
    end;
    
    // added in gl3.0
    public z_VertexAttribI4i_adr := GetFuncAdr('glVertexAttribI4i');
    public z_VertexAttribI4i_ovr_0 := GetFuncOrNil&<procedure(index: UInt32; x: Int32; y: Int32; z: Int32; w: Int32)>(z_VertexAttribI4i_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttribI4i(index: UInt32; x: Int32; y: Int32; z: Int32; w: Int32);
    begin
      z_VertexAttribI4i_ovr_0(index, x, y, z, w);
    end;
    
    // added in gl3.0
    public z_VertexAttribI4iv_adr := GetFuncAdr('glVertexAttribI4iv');
    public z_VertexAttribI4iv_ovr_0 := GetFuncOrNil&<procedure(index: UInt32; var v: Int32)>(z_VertexAttribI4iv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttribI4iv(index: UInt32; v: array of Int32);
    begin
      z_VertexAttribI4iv_ovr_0(index, v[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttribI4iv(index: UInt32; var v: Int32);
    begin
      z_VertexAttribI4iv_ovr_0(index, v);
    end;
    public z_VertexAttribI4iv_ovr_2 := GetFuncOrNil&<procedure(index: UInt32; v: IntPtr)>(z_VertexAttribI4iv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttribI4iv(index: UInt32; v: IntPtr);
    begin
      z_VertexAttribI4iv_ovr_2(index, v);
    end;
    
    // added in gl3.0
    public z_VertexAttribI4sv_adr := GetFuncAdr('glVertexAttribI4sv');
    public z_VertexAttribI4sv_ovr_0 := GetFuncOrNil&<procedure(index: UInt32; var v: Int16)>(z_VertexAttribI4sv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttribI4sv(index: UInt32; v: array of Int16);
    begin
      z_VertexAttribI4sv_ovr_0(index, v[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttribI4sv(index: UInt32; var v: Int16);
    begin
      z_VertexAttribI4sv_ovr_0(index, v);
    end;
    public z_VertexAttribI4sv_ovr_2 := GetFuncOrNil&<procedure(index: UInt32; v: IntPtr)>(z_VertexAttribI4sv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttribI4sv(index: UInt32; v: IntPtr);
    begin
      z_VertexAttribI4sv_ovr_2(index, v);
    end;
    
    // added in gl3.0
    public z_VertexAttribI4ubv_adr := GetFuncAdr('glVertexAttribI4ubv');
    public z_VertexAttribI4ubv_ovr_0 := GetFuncOrNil&<procedure(index: UInt32; var v: Byte)>(z_VertexAttribI4ubv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttribI4ubv(index: UInt32; v: array of Byte);
    begin
      z_VertexAttribI4ubv_ovr_0(index, v[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttribI4ubv(index: UInt32; var v: Byte);
    begin
      z_VertexAttribI4ubv_ovr_0(index, v);
    end;
    public z_VertexAttribI4ubv_ovr_2 := GetFuncOrNil&<procedure(index: UInt32; v: IntPtr)>(z_VertexAttribI4ubv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttribI4ubv(index: UInt32; v: IntPtr);
    begin
      z_VertexAttribI4ubv_ovr_2(index, v);
    end;
    
    // added in gl3.0
    public z_VertexAttribI4ui_adr := GetFuncAdr('glVertexAttribI4ui');
    public z_VertexAttribI4ui_ovr_0 := GetFuncOrNil&<procedure(index: UInt32; x: UInt32; y: UInt32; z: UInt32; w: UInt32)>(z_VertexAttribI4ui_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttribI4ui(index: UInt32; x: UInt32; y: UInt32; z: UInt32; w: UInt32);
    begin
      z_VertexAttribI4ui_ovr_0(index, x, y, z, w);
    end;
    
    // added in gl3.0
    public z_VertexAttribI4uiv_adr := GetFuncAdr('glVertexAttribI4uiv');
    public z_VertexAttribI4uiv_ovr_0 := GetFuncOrNil&<procedure(index: UInt32; var v: UInt32)>(z_VertexAttribI4uiv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttribI4uiv(index: UInt32; v: array of UInt32);
    begin
      z_VertexAttribI4uiv_ovr_0(index, v[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttribI4uiv(index: UInt32; var v: UInt32);
    begin
      z_VertexAttribI4uiv_ovr_0(index, v);
    end;
    public z_VertexAttribI4uiv_ovr_2 := GetFuncOrNil&<procedure(index: UInt32; v: IntPtr)>(z_VertexAttribI4uiv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttribI4uiv(index: UInt32; v: IntPtr);
    begin
      z_VertexAttribI4uiv_ovr_2(index, v);
    end;
    
    // added in gl3.0
    public z_VertexAttribI4usv_adr := GetFuncAdr('glVertexAttribI4usv');
    public z_VertexAttribI4usv_ovr_0 := GetFuncOrNil&<procedure(index: UInt32; var v: UInt16)>(z_VertexAttribI4usv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttribI4usv(index: UInt32; v: array of UInt16);
    begin
      z_VertexAttribI4usv_ovr_0(index, v[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttribI4usv(index: UInt32; var v: UInt16);
    begin
      z_VertexAttribI4usv_ovr_0(index, v);
    end;
    public z_VertexAttribI4usv_ovr_2 := GetFuncOrNil&<procedure(index: UInt32; v: IntPtr)>(z_VertexAttribI4usv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttribI4usv(index: UInt32; v: IntPtr);
    begin
      z_VertexAttribI4usv_ovr_2(index, v);
    end;
    
    // added in gl4.3
    public z_VertexAttribIFormat_adr := GetFuncAdr('glVertexAttribIFormat');
    public z_VertexAttribIFormat_ovr_0 := GetFuncOrNil&<procedure(attribindex: UInt32; size: Int32; type: VertexAttribIType; relativeoffset: UInt32)>(z_VertexAttribIFormat_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttribIFormat(attribindex: UInt32; size: Int32; type: VertexAttribIType; relativeoffset: UInt32);
    begin
      z_VertexAttribIFormat_ovr_0(attribindex, size, type, relativeoffset);
    end;
    
    // added in gl3.0
    public z_VertexAttribIPointer_adr := GetFuncAdr('glVertexAttribIPointer');
    public z_VertexAttribIPointer_ovr_0 := GetFuncOrNil&<procedure(index: UInt32; size: Int32; type: VertexAttribPointerType; stride: Int32; pointer: IntPtr)>(z_VertexAttribIPointer_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttribIPointer(index: UInt32; size: Int32; type: VertexAttribPointerType; stride: Int32; pointer: IntPtr);
    begin
      z_VertexAttribIPointer_ovr_0(index, size, type, stride, pointer);
    end;
    
    // added in gl4.1
    public z_VertexAttribL1d_adr := GetFuncAdr('glVertexAttribL1d');
    public z_VertexAttribL1d_ovr_0 := GetFuncOrNil&<procedure(index: UInt32; x: real)>(z_VertexAttribL1d_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttribL1d(index: UInt32; x: real);
    begin
      z_VertexAttribL1d_ovr_0(index, x);
    end;
    
    // added in gl4.1
    public z_VertexAttribL1dv_adr := GetFuncAdr('glVertexAttribL1dv');
    public z_VertexAttribL1dv_ovr_0 := GetFuncOrNil&<procedure(index: UInt32; var v: real)>(z_VertexAttribL1dv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttribL1dv(index: UInt32; v: array of real);
    begin
      z_VertexAttribL1dv_ovr_0(index, v[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttribL1dv(index: UInt32; var v: real);
    begin
      z_VertexAttribL1dv_ovr_0(index, v);
    end;
    public z_VertexAttribL1dv_ovr_2 := GetFuncOrNil&<procedure(index: UInt32; v: IntPtr)>(z_VertexAttribL1dv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttribL1dv(index: UInt32; v: IntPtr);
    begin
      z_VertexAttribL1dv_ovr_2(index, v);
    end;
    
    // added in gl4.1
    public z_VertexAttribL2d_adr := GetFuncAdr('glVertexAttribL2d');
    public z_VertexAttribL2d_ovr_0 := GetFuncOrNil&<procedure(index: UInt32; x: real; y: real)>(z_VertexAttribL2d_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttribL2d(index: UInt32; x: real; y: real);
    begin
      z_VertexAttribL2d_ovr_0(index, x, y);
    end;
    
    // added in gl4.1
    public z_VertexAttribL2dv_adr := GetFuncAdr('glVertexAttribL2dv');
    public z_VertexAttribL2dv_ovr_0 := GetFuncOrNil&<procedure(index: UInt32; var v: real)>(z_VertexAttribL2dv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttribL2dv(index: UInt32; v: array of real);
    begin
      z_VertexAttribL2dv_ovr_0(index, v[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttribL2dv(index: UInt32; var v: real);
    begin
      z_VertexAttribL2dv_ovr_0(index, v);
    end;
    public z_VertexAttribL2dv_ovr_2 := GetFuncOrNil&<procedure(index: UInt32; v: IntPtr)>(z_VertexAttribL2dv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttribL2dv(index: UInt32; v: IntPtr);
    begin
      z_VertexAttribL2dv_ovr_2(index, v);
    end;
    
    // added in gl4.1
    public z_VertexAttribL3d_adr := GetFuncAdr('glVertexAttribL3d');
    public z_VertexAttribL3d_ovr_0 := GetFuncOrNil&<procedure(index: UInt32; x: real; y: real; z: real)>(z_VertexAttribL3d_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttribL3d(index: UInt32; x: real; y: real; z: real);
    begin
      z_VertexAttribL3d_ovr_0(index, x, y, z);
    end;
    
    // added in gl4.1
    public z_VertexAttribL3dv_adr := GetFuncAdr('glVertexAttribL3dv');
    public z_VertexAttribL3dv_ovr_0 := GetFuncOrNil&<procedure(index: UInt32; var v: real)>(z_VertexAttribL3dv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttribL3dv(index: UInt32; v: array of real);
    begin
      z_VertexAttribL3dv_ovr_0(index, v[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttribL3dv(index: UInt32; var v: real);
    begin
      z_VertexAttribL3dv_ovr_0(index, v);
    end;
    public z_VertexAttribL3dv_ovr_2 := GetFuncOrNil&<procedure(index: UInt32; v: IntPtr)>(z_VertexAttribL3dv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttribL3dv(index: UInt32; v: IntPtr);
    begin
      z_VertexAttribL3dv_ovr_2(index, v);
    end;
    
    // added in gl4.1
    public z_VertexAttribL4d_adr := GetFuncAdr('glVertexAttribL4d');
    public z_VertexAttribL4d_ovr_0 := GetFuncOrNil&<procedure(index: UInt32; x: real; y: real; z: real; w: real)>(z_VertexAttribL4d_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttribL4d(index: UInt32; x: real; y: real; z: real; w: real);
    begin
      z_VertexAttribL4d_ovr_0(index, x, y, z, w);
    end;
    
    // added in gl4.1
    public z_VertexAttribL4dv_adr := GetFuncAdr('glVertexAttribL4dv');
    public z_VertexAttribL4dv_ovr_0 := GetFuncOrNil&<procedure(index: UInt32; var v: real)>(z_VertexAttribL4dv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttribL4dv(index: UInt32; v: array of real);
    begin
      z_VertexAttribL4dv_ovr_0(index, v[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttribL4dv(index: UInt32; var v: real);
    begin
      z_VertexAttribL4dv_ovr_0(index, v);
    end;
    public z_VertexAttribL4dv_ovr_2 := GetFuncOrNil&<procedure(index: UInt32; v: IntPtr)>(z_VertexAttribL4dv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttribL4dv(index: UInt32; v: IntPtr);
    begin
      z_VertexAttribL4dv_ovr_2(index, v);
    end;
    
    // added in gl4.3
    public z_VertexAttribLFormat_adr := GetFuncAdr('glVertexAttribLFormat');
    public z_VertexAttribLFormat_ovr_0 := GetFuncOrNil&<procedure(attribindex: UInt32; size: Int32; type: VertexAttribLType; relativeoffset: UInt32)>(z_VertexAttribLFormat_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttribLFormat(attribindex: UInt32; size: Int32; type: VertexAttribLType; relativeoffset: UInt32);
    begin
      z_VertexAttribLFormat_ovr_0(attribindex, size, type, relativeoffset);
    end;
    
    // added in gl4.1
    public z_VertexAttribLPointer_adr := GetFuncAdr('glVertexAttribLPointer');
    public z_VertexAttribLPointer_ovr_0 := GetFuncOrNil&<procedure(index: UInt32; size: Int32; type: VertexAttribPointerType; stride: Int32; pointer: IntPtr)>(z_VertexAttribLPointer_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttribLPointer(index: UInt32; size: Int32; type: VertexAttribPointerType; stride: Int32; pointer: IntPtr);
    begin
      z_VertexAttribLPointer_ovr_0(index, size, type, stride, pointer);
    end;
    
    // added in gl3.3
    public z_VertexAttribP1ui_adr := GetFuncAdr('glVertexAttribP1ui');
    public z_VertexAttribP1ui_ovr_0 := GetFuncOrNil&<procedure(index: UInt32; type: VertexAttribPointerType; normalized: boolean; value: UInt32)>(z_VertexAttribP1ui_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttribP1ui(index: UInt32; type: VertexAttribPointerType; normalized: boolean; value: UInt32);
    begin
      z_VertexAttribP1ui_ovr_0(index, type, normalized, value);
    end;
    
    // added in gl3.3
    public z_VertexAttribP1uiv_adr := GetFuncAdr('glVertexAttribP1uiv');
    public z_VertexAttribP1uiv_ovr_0 := GetFuncOrNil&<procedure(index: UInt32; type: VertexAttribPointerType; normalized: boolean; var value: UInt32)>(z_VertexAttribP1uiv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttribP1uiv(index: UInt32; type: VertexAttribPointerType; normalized: boolean; value: array of UInt32);
    begin
      z_VertexAttribP1uiv_ovr_0(index, type, normalized, value[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttribP1uiv(index: UInt32; type: VertexAttribPointerType; normalized: boolean; var value: UInt32);
    begin
      z_VertexAttribP1uiv_ovr_0(index, type, normalized, value);
    end;
    public z_VertexAttribP1uiv_ovr_2 := GetFuncOrNil&<procedure(index: UInt32; type: VertexAttribPointerType; normalized: boolean; value: IntPtr)>(z_VertexAttribP1uiv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttribP1uiv(index: UInt32; type: VertexAttribPointerType; normalized: boolean; value: IntPtr);
    begin
      z_VertexAttribP1uiv_ovr_2(index, type, normalized, value);
    end;
    
    // added in gl3.3
    public z_VertexAttribP2ui_adr := GetFuncAdr('glVertexAttribP2ui');
    public z_VertexAttribP2ui_ovr_0 := GetFuncOrNil&<procedure(index: UInt32; type: VertexAttribPointerType; normalized: boolean; value: UInt32)>(z_VertexAttribP2ui_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttribP2ui(index: UInt32; type: VertexAttribPointerType; normalized: boolean; value: UInt32);
    begin
      z_VertexAttribP2ui_ovr_0(index, type, normalized, value);
    end;
    
    // added in gl3.3
    public z_VertexAttribP2uiv_adr := GetFuncAdr('glVertexAttribP2uiv');
    public z_VertexAttribP2uiv_ovr_0 := GetFuncOrNil&<procedure(index: UInt32; type: VertexAttribPointerType; normalized: boolean; var value: UInt32)>(z_VertexAttribP2uiv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttribP2uiv(index: UInt32; type: VertexAttribPointerType; normalized: boolean; value: array of UInt32);
    begin
      z_VertexAttribP2uiv_ovr_0(index, type, normalized, value[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttribP2uiv(index: UInt32; type: VertexAttribPointerType; normalized: boolean; var value: UInt32);
    begin
      z_VertexAttribP2uiv_ovr_0(index, type, normalized, value);
    end;
    public z_VertexAttribP2uiv_ovr_2 := GetFuncOrNil&<procedure(index: UInt32; type: VertexAttribPointerType; normalized: boolean; value: IntPtr)>(z_VertexAttribP2uiv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttribP2uiv(index: UInt32; type: VertexAttribPointerType; normalized: boolean; value: IntPtr);
    begin
      z_VertexAttribP2uiv_ovr_2(index, type, normalized, value);
    end;
    
    // added in gl3.3
    public z_VertexAttribP3ui_adr := GetFuncAdr('glVertexAttribP3ui');
    public z_VertexAttribP3ui_ovr_0 := GetFuncOrNil&<procedure(index: UInt32; type: VertexAttribPointerType; normalized: boolean; value: UInt32)>(z_VertexAttribP3ui_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttribP3ui(index: UInt32; type: VertexAttribPointerType; normalized: boolean; value: UInt32);
    begin
      z_VertexAttribP3ui_ovr_0(index, type, normalized, value);
    end;
    
    // added in gl3.3
    public z_VertexAttribP3uiv_adr := GetFuncAdr('glVertexAttribP3uiv');
    public z_VertexAttribP3uiv_ovr_0 := GetFuncOrNil&<procedure(index: UInt32; type: VertexAttribPointerType; normalized: boolean; var value: UInt32)>(z_VertexAttribP3uiv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttribP3uiv(index: UInt32; type: VertexAttribPointerType; normalized: boolean; value: array of UInt32);
    begin
      z_VertexAttribP3uiv_ovr_0(index, type, normalized, value[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttribP3uiv(index: UInt32; type: VertexAttribPointerType; normalized: boolean; var value: UInt32);
    begin
      z_VertexAttribP3uiv_ovr_0(index, type, normalized, value);
    end;
    public z_VertexAttribP3uiv_ovr_2 := GetFuncOrNil&<procedure(index: UInt32; type: VertexAttribPointerType; normalized: boolean; value: IntPtr)>(z_VertexAttribP3uiv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttribP3uiv(index: UInt32; type: VertexAttribPointerType; normalized: boolean; value: IntPtr);
    begin
      z_VertexAttribP3uiv_ovr_2(index, type, normalized, value);
    end;
    
    // added in gl3.3
    public z_VertexAttribP4ui_adr := GetFuncAdr('glVertexAttribP4ui');
    public z_VertexAttribP4ui_ovr_0 := GetFuncOrNil&<procedure(index: UInt32; type: VertexAttribPointerType; normalized: boolean; value: UInt32)>(z_VertexAttribP4ui_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttribP4ui(index: UInt32; type: VertexAttribPointerType; normalized: boolean; value: UInt32);
    begin
      z_VertexAttribP4ui_ovr_0(index, type, normalized, value);
    end;
    
    // added in gl3.3
    public z_VertexAttribP4uiv_adr := GetFuncAdr('glVertexAttribP4uiv');
    public z_VertexAttribP4uiv_ovr_0 := GetFuncOrNil&<procedure(index: UInt32; type: VertexAttribPointerType; normalized: boolean; var value: UInt32)>(z_VertexAttribP4uiv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttribP4uiv(index: UInt32; type: VertexAttribPointerType; normalized: boolean; value: array of UInt32);
    begin
      z_VertexAttribP4uiv_ovr_0(index, type, normalized, value[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttribP4uiv(index: UInt32; type: VertexAttribPointerType; normalized: boolean; var value: UInt32);
    begin
      z_VertexAttribP4uiv_ovr_0(index, type, normalized, value);
    end;
    public z_VertexAttribP4uiv_ovr_2 := GetFuncOrNil&<procedure(index: UInt32; type: VertexAttribPointerType; normalized: boolean; value: IntPtr)>(z_VertexAttribP4uiv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttribP4uiv(index: UInt32; type: VertexAttribPointerType; normalized: boolean; value: IntPtr);
    begin
      z_VertexAttribP4uiv_ovr_2(index, type, normalized, value);
    end;
    
    // added in gl2.0
    public z_VertexAttribPointer_adr := GetFuncAdr('glVertexAttribPointer');
    public z_VertexAttribPointer_ovr_0 := GetFuncOrNil&<procedure(index: UInt32; size: Int32; type: VertexAttribPointerType; normalized: boolean; stride: Int32; pointer: IntPtr)>(z_VertexAttribPointer_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttribPointer(index: UInt32; size: Int32; type: VertexAttribPointerType; normalized: boolean; stride: Int32; pointer: IntPtr);
    begin
      z_VertexAttribPointer_ovr_0(index, size, type, normalized, stride, pointer);
    end;
    
    // added in gl4.3
    public z_VertexBindingDivisor_adr := GetFuncAdr('glVertexBindingDivisor');
    public z_VertexBindingDivisor_ovr_0 := GetFuncOrNil&<procedure(bindingindex: UInt32; divisor: UInt32)>(z_VertexBindingDivisor_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexBindingDivisor(bindingindex: UInt32; divisor: UInt32);
    begin
      z_VertexBindingDivisor_ovr_0(bindingindex, divisor);
    end;
    
    // added in gl3.3
    public z_VertexP2ui_adr := GetFuncAdr('glVertexP2ui');
    public z_VertexP2ui_ovr_0 := GetFuncOrNil&<procedure(type: VertexPointerType; value: UInt32)>(z_VertexP2ui_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexP2ui(type: VertexPointerType; value: UInt32);
    begin
      z_VertexP2ui_ovr_0(type, value);
    end;
    
    // added in gl3.3
    public z_VertexP2uiv_adr := GetFuncAdr('glVertexP2uiv');
    public z_VertexP2uiv_ovr_0 := GetFuncOrNil&<procedure(type: VertexPointerType; var value: UInt32)>(z_VertexP2uiv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexP2uiv(type: VertexPointerType; value: array of UInt32);
    begin
      z_VertexP2uiv_ovr_0(type, value[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexP2uiv(type: VertexPointerType; var value: UInt32);
    begin
      z_VertexP2uiv_ovr_0(type, value);
    end;
    public z_VertexP2uiv_ovr_2 := GetFuncOrNil&<procedure(type: VertexPointerType; value: IntPtr)>(z_VertexP2uiv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexP2uiv(type: VertexPointerType; value: IntPtr);
    begin
      z_VertexP2uiv_ovr_2(type, value);
    end;
    
    // added in gl3.3
    public z_VertexP3ui_adr := GetFuncAdr('glVertexP3ui');
    public z_VertexP3ui_ovr_0 := GetFuncOrNil&<procedure(type: VertexPointerType; value: UInt32)>(z_VertexP3ui_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexP3ui(type: VertexPointerType; value: UInt32);
    begin
      z_VertexP3ui_ovr_0(type, value);
    end;
    
    // added in gl3.3
    public z_VertexP3uiv_adr := GetFuncAdr('glVertexP3uiv');
    public z_VertexP3uiv_ovr_0 := GetFuncOrNil&<procedure(type: VertexPointerType; var value: UInt32)>(z_VertexP3uiv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexP3uiv(type: VertexPointerType; value: array of UInt32);
    begin
      z_VertexP3uiv_ovr_0(type, value[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexP3uiv(type: VertexPointerType; var value: UInt32);
    begin
      z_VertexP3uiv_ovr_0(type, value);
    end;
    public z_VertexP3uiv_ovr_2 := GetFuncOrNil&<procedure(type: VertexPointerType; value: IntPtr)>(z_VertexP3uiv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexP3uiv(type: VertexPointerType; value: IntPtr);
    begin
      z_VertexP3uiv_ovr_2(type, value);
    end;
    
    // added in gl3.3
    public z_VertexP4ui_adr := GetFuncAdr('glVertexP4ui');
    public z_VertexP4ui_ovr_0 := GetFuncOrNil&<procedure(type: VertexPointerType; value: UInt32)>(z_VertexP4ui_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexP4ui(type: VertexPointerType; value: UInt32);
    begin
      z_VertexP4ui_ovr_0(type, value);
    end;
    
    // added in gl3.3
    public z_VertexP4uiv_adr := GetFuncAdr('glVertexP4uiv');
    public z_VertexP4uiv_ovr_0 := GetFuncOrNil&<procedure(type: VertexPointerType; var value: UInt32)>(z_VertexP4uiv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexP4uiv(type: VertexPointerType; value: array of UInt32);
    begin
      z_VertexP4uiv_ovr_0(type, value[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexP4uiv(type: VertexPointerType; var value: UInt32);
    begin
      z_VertexP4uiv_ovr_0(type, value);
    end;
    public z_VertexP4uiv_ovr_2 := GetFuncOrNil&<procedure(type: VertexPointerType; value: IntPtr)>(z_VertexP4uiv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexP4uiv(type: VertexPointerType; value: IntPtr);
    begin
      z_VertexP4uiv_ovr_2(type, value);
    end;
    
    // added in gl1.0
    public static procedure z_Viewport(x: Int32; y: Int32; width: Int32; height: Int32);
    external 'opengl32.dll' name 'glViewport';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Viewport(x: Int32; y: Int32; width: Int32; height: Int32) := z_Viewport;
    
    // added in gl4.1
    public z_ViewportArrayv_adr := GetFuncAdr('glViewportArrayv');
    public z_ViewportArrayv_ovr_0 := GetFuncOrNil&<procedure(first: UInt32; count: Int32; var v: single)>(z_ViewportArrayv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ViewportArrayv(first: UInt32; count: Int32; v: array of single);
    begin
      z_ViewportArrayv_ovr_0(first, count, v[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ViewportArrayv(first: UInt32; count: Int32; var v: single);
    begin
      z_ViewportArrayv_ovr_0(first, count, v);
    end;
    public z_ViewportArrayv_ovr_2 := GetFuncOrNil&<procedure(first: UInt32; count: Int32; v: IntPtr)>(z_ViewportArrayv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ViewportArrayv(first: UInt32; count: Int32; v: IntPtr);
    begin
      z_ViewportArrayv_ovr_2(first, count, v);
    end;
    
    // added in gl4.1
    public z_ViewportIndexedf_adr := GetFuncAdr('glViewportIndexedf');
    public z_ViewportIndexedf_ovr_0 := GetFuncOrNil&<procedure(index: UInt32; x: single; y: single; w: single; h: single)>(z_ViewportIndexedf_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ViewportIndexedf(index: UInt32; x: single; y: single; w: single; h: single);
    begin
      z_ViewportIndexedf_ovr_0(index, x, y, w, h);
    end;
    
    // added in gl4.1
    public z_ViewportIndexedfv_adr := GetFuncAdr('glViewportIndexedfv');
    public z_ViewportIndexedfv_ovr_0 := GetFuncOrNil&<procedure(index: UInt32; var v: single)>(z_ViewportIndexedfv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ViewportIndexedfv(index: UInt32; v: array of single);
    begin
      z_ViewportIndexedfv_ovr_0(index, v[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ViewportIndexedfv(index: UInt32; var v: single);
    begin
      z_ViewportIndexedfv_ovr_0(index, v);
    end;
    public z_ViewportIndexedfv_ovr_2 := GetFuncOrNil&<procedure(index: UInt32; v: IntPtr)>(z_ViewportIndexedfv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ViewportIndexedfv(index: UInt32; v: IntPtr);
    begin
      z_ViewportIndexedfv_ovr_2(index, v);
    end;
    
    // added in gl3.2
    public z_WaitSync_adr := GetFuncAdr('glWaitSync');
    public z_WaitSync_ovr_0 := GetFuncOrNil&<procedure(sync: GLsync; flags: DummyFlags; timeout: UInt64)>(z_WaitSync_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure WaitSync(sync: GLsync; flags: DummyFlags; timeout: UInt64);
    begin
      z_WaitSync_ovr_0(sync, flags, timeout);
    end;
    
  end;
  
  glD = sealed class
    public static function GetFuncAdr([MarshalAs(UnmanagedType.LPStr)] lpszProc: string): IntPtr;
    external 'opengl32.dll' name 'wglGetProcAddress';
    public static function GetFuncOrNil<T>(fadr: IntPtr) :=
    fadr=IntPtr.Zero ? default(T) :
    Marshal.GetDelegateForFunctionPointer&<T>(fadr);
    
    // added in gl1.0, deprecated in gl3.2
    public static procedure z_Accum(op: AccumOp; value: single);
    external 'opengl32.dll' name 'glAccum';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Accum(op: AccumOp; value: single) := z_Accum;
    
    // added in gl1.0, deprecated in gl3.2
    public static procedure z_AlphaFunc(func: AlphaFunction; ref: single);
    external 'opengl32.dll' name 'glAlphaFunc';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure AlphaFunc(func: AlphaFunction; ref: single) := z_AlphaFunc;
    
    // added in gl1.1, deprecated in gl3.2
    public static function z_AreTexturesResident(n: Int32; [MarshalAs(UnmanagedType.LPArray)] textures: array of UInt32; [MarshalAs(UnmanagedType.LPArray)] residences: array of boolean): boolean;
    external 'opengl32.dll' name 'glAreTexturesResident';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function AreTexturesResident(n: Int32; textures: array of UInt32; residences: array of boolean): boolean := z_AreTexturesResident;
    public static function z_AreTexturesResident(n: Int32; [MarshalAs(UnmanagedType.LPArray)] textures: array of UInt32; var residences: boolean): boolean;
    external 'opengl32.dll' name 'glAreTexturesResident';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function AreTexturesResident(n: Int32; textures: array of UInt32; var residences: boolean): boolean := z_AreTexturesResident;
    public static function z_AreTexturesResident(n: Int32; [MarshalAs(UnmanagedType.LPArray)] textures: array of UInt32; residences: IntPtr): boolean;
    external 'opengl32.dll' name 'glAreTexturesResident';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function AreTexturesResident(n: Int32; textures: array of UInt32; residences: IntPtr): boolean := z_AreTexturesResident;
    public static function z_AreTexturesResident(n: Int32; var textures: UInt32; [MarshalAs(UnmanagedType.LPArray)] residences: array of boolean): boolean;
    external 'opengl32.dll' name 'glAreTexturesResident';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function AreTexturesResident(n: Int32; var textures: UInt32; residences: array of boolean): boolean := z_AreTexturesResident;
    public static function z_AreTexturesResident(n: Int32; var textures: UInt32; var residences: boolean): boolean;
    external 'opengl32.dll' name 'glAreTexturesResident';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function AreTexturesResident(n: Int32; var textures: UInt32; var residences: boolean): boolean := z_AreTexturesResident;
    public static function z_AreTexturesResident(n: Int32; var textures: UInt32; residences: IntPtr): boolean;
    external 'opengl32.dll' name 'glAreTexturesResident';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function AreTexturesResident(n: Int32; var textures: UInt32; residences: IntPtr): boolean := z_AreTexturesResident;
    public static function z_AreTexturesResident(n: Int32; textures: IntPtr; [MarshalAs(UnmanagedType.LPArray)] residences: array of boolean): boolean;
    external 'opengl32.dll' name 'glAreTexturesResident';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function AreTexturesResident(n: Int32; textures: IntPtr; residences: array of boolean): boolean := z_AreTexturesResident;
    public static function z_AreTexturesResident(n: Int32; textures: IntPtr; var residences: boolean): boolean;
    external 'opengl32.dll' name 'glAreTexturesResident';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function AreTexturesResident(n: Int32; textures: IntPtr; var residences: boolean): boolean := z_AreTexturesResident;
    public static function z_AreTexturesResident(n: Int32; textures: IntPtr; residences: IntPtr): boolean;
    external 'opengl32.dll' name 'glAreTexturesResident';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function AreTexturesResident(n: Int32; textures: IntPtr; residences: IntPtr): boolean := z_AreTexturesResident;
    
    // added in gl1.1, deprecated in gl3.2
    public static procedure z_ArrayElement(i: Int32);
    external 'opengl32.dll' name 'glArrayElement';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ArrayElement(i: Int32) := z_ArrayElement;
    
    // added in gl1.0, deprecated in gl3.2
    public static procedure z_Begin(mode: PrimitiveType);
    external 'opengl32.dll' name 'glBegin';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Begin(mode: PrimitiveType) := z_Begin;
    
    // added in gl1.0, deprecated in gl3.2
    public static procedure z_Bitmap(width: Int32; height: Int32; xorig: single; yorig: single; xmove: single; ymove: single; [MarshalAs(UnmanagedType.LPArray)] bitmap: array of Byte);
    external 'opengl32.dll' name 'glBitmap';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Bitmap(width: Int32; height: Int32; xorig: single; yorig: single; xmove: single; ymove: single; bitmap: array of Byte) := z_Bitmap;
    public static procedure z_Bitmap(width: Int32; height: Int32; xorig: single; yorig: single; xmove: single; ymove: single; var bitmap: Byte);
    external 'opengl32.dll' name 'glBitmap';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Bitmap(width: Int32; height: Int32; xorig: single; yorig: single; xmove: single; ymove: single; var bitmap: Byte) := z_Bitmap;
    public static procedure z_Bitmap(width: Int32; height: Int32; xorig: single; yorig: single; xmove: single; ymove: single; bitmap: IntPtr);
    external 'opengl32.dll' name 'glBitmap';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Bitmap(width: Int32; height: Int32; xorig: single; yorig: single; xmove: single; ymove: single; bitmap: IntPtr) := z_Bitmap;
    
    // added in gl1.0, deprecated in gl3.2
    public static procedure z_CallList(list: UInt32);
    external 'opengl32.dll' name 'glCallList';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure CallList(list: UInt32) := z_CallList;
    
    // added in gl1.0, deprecated in gl3.2
    public static procedure z_CallLists(n: Int32; type: ListNameType; lists: IntPtr);
    external 'opengl32.dll' name 'glCallLists';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure CallLists(n: Int32; type: ListNameType; lists: IntPtr) := z_CallLists;
    
    // added in gl1.0, deprecated in gl3.2
    public static procedure z_ClearAccum(red: single; green: single; blue: single; alpha: single);
    external 'opengl32.dll' name 'glClearAccum';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ClearAccum(red: single; green: single; blue: single; alpha: single) := z_ClearAccum;
    
    // added in gl1.0, deprecated in gl3.2
    public static procedure z_ClearIndex(c: single);
    external 'opengl32.dll' name 'glClearIndex';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ClearIndex(c: single) := z_ClearIndex;
    
    // added in gl1.3, deprecated in gl3.2
    public z_ClientActiveTexture_adr := GetFuncAdr('glClientActiveTexture');
    public z_ClientActiveTexture_ovr_0 := GetFuncOrNil&<procedure(texture: TextureUnit)>(z_ClientActiveTexture_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ClientActiveTexture(texture: TextureUnit);
    begin
      z_ClientActiveTexture_ovr_0(texture);
    end;
    
    // added in gl1.0, deprecated in gl3.2
    public static procedure z_ClipPlane(plane: ClipPlaneName; [MarshalAs(UnmanagedType.LPArray)] equation: array of real);
    external 'opengl32.dll' name 'glClipPlane';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ClipPlane(plane: ClipPlaneName; equation: array of real) := z_ClipPlane;
    public static procedure z_ClipPlane(plane: ClipPlaneName; var equation: real);
    external 'opengl32.dll' name 'glClipPlane';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ClipPlane(plane: ClipPlaneName; var equation: real) := z_ClipPlane;
    public static procedure z_ClipPlane(plane: ClipPlaneName; equation: IntPtr);
    external 'opengl32.dll' name 'glClipPlane';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ClipPlane(plane: ClipPlaneName; equation: IntPtr) := z_ClipPlane;
    
    // added in gl1.0, deprecated in gl3.2
    public static procedure z_Color3b(red: SByte; green: SByte; blue: SByte);
    external 'opengl32.dll' name 'glColor3b';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Color3b(red: SByte; green: SByte; blue: SByte) := z_Color3b;
    
    // added in gl1.0, deprecated in gl3.2
    public static procedure z_Color3bv([MarshalAs(UnmanagedType.LPArray)] v: array of SByte);
    external 'opengl32.dll' name 'glColor3bv';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Color3bv(v: array of SByte) := z_Color3bv;
    public static procedure z_Color3bv(var v: SByte);
    external 'opengl32.dll' name 'glColor3bv';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Color3bv(var v: SByte) := z_Color3bv;
    public static procedure z_Color3bv(v: IntPtr);
    external 'opengl32.dll' name 'glColor3bv';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Color3bv(v: IntPtr) := z_Color3bv;
    
    // added in gl1.0, deprecated in gl3.2
    public static procedure z_Color3d(red: real; green: real; blue: real);
    external 'opengl32.dll' name 'glColor3d';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Color3d(red: real; green: real; blue: real) := z_Color3d;
    
    // added in gl1.0, deprecated in gl3.2
    public static procedure z_Color3dv([MarshalAs(UnmanagedType.LPArray)] v: array of real);
    external 'opengl32.dll' name 'glColor3dv';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Color3dv(v: array of real) := z_Color3dv;
    public static procedure z_Color3dv(var v: real);
    external 'opengl32.dll' name 'glColor3dv';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Color3dv(var v: real) := z_Color3dv;
    public static procedure z_Color3dv(v: IntPtr);
    external 'opengl32.dll' name 'glColor3dv';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Color3dv(v: IntPtr) := z_Color3dv;
    
    // added in gl1.0, deprecated in gl3.2
    public static procedure z_Color3f(red: single; green: single; blue: single);
    external 'opengl32.dll' name 'glColor3f';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Color3f(red: single; green: single; blue: single) := z_Color3f;
    
    // added in gl1.0, deprecated in gl3.2
    public static procedure z_Color3fv([MarshalAs(UnmanagedType.LPArray)] v: array of single);
    external 'opengl32.dll' name 'glColor3fv';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Color3fv(v: array of single) := z_Color3fv;
    public static procedure z_Color3fv(var v: single);
    external 'opengl32.dll' name 'glColor3fv';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Color3fv(var v: single) := z_Color3fv;
    public static procedure z_Color3fv(v: IntPtr);
    external 'opengl32.dll' name 'glColor3fv';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Color3fv(v: IntPtr) := z_Color3fv;
    
    // added in gl1.0, deprecated in gl3.2
    public static procedure z_Color3i(red: Int32; green: Int32; blue: Int32);
    external 'opengl32.dll' name 'glColor3i';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Color3i(red: Int32; green: Int32; blue: Int32) := z_Color3i;
    
    // added in gl1.0, deprecated in gl3.2
    public static procedure z_Color3iv([MarshalAs(UnmanagedType.LPArray)] v: array of Int32);
    external 'opengl32.dll' name 'glColor3iv';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Color3iv(v: array of Int32) := z_Color3iv;
    public static procedure z_Color3iv(var v: Int32);
    external 'opengl32.dll' name 'glColor3iv';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Color3iv(var v: Int32) := z_Color3iv;
    public static procedure z_Color3iv(v: IntPtr);
    external 'opengl32.dll' name 'glColor3iv';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Color3iv(v: IntPtr) := z_Color3iv;
    
    // added in gl1.0, deprecated in gl3.2
    public static procedure z_Color3s(red: Int16; green: Int16; blue: Int16);
    external 'opengl32.dll' name 'glColor3s';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Color3s(red: Int16; green: Int16; blue: Int16) := z_Color3s;
    
    // added in gl1.0, deprecated in gl3.2
    public static procedure z_Color3sv([MarshalAs(UnmanagedType.LPArray)] v: array of Int16);
    external 'opengl32.dll' name 'glColor3sv';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Color3sv(v: array of Int16) := z_Color3sv;
    public static procedure z_Color3sv(var v: Int16);
    external 'opengl32.dll' name 'glColor3sv';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Color3sv(var v: Int16) := z_Color3sv;
    public static procedure z_Color3sv(v: IntPtr);
    external 'opengl32.dll' name 'glColor3sv';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Color3sv(v: IntPtr) := z_Color3sv;
    
    // added in gl1.0, deprecated in gl3.2
    public static procedure z_Color3ub(red: Byte; green: Byte; blue: Byte);
    external 'opengl32.dll' name 'glColor3ub';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Color3ub(red: Byte; green: Byte; blue: Byte) := z_Color3ub;
    
    // added in gl1.0, deprecated in gl3.2
    public static procedure z_Color3ubv([MarshalAs(UnmanagedType.LPArray)] v: array of Byte);
    external 'opengl32.dll' name 'glColor3ubv';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Color3ubv(v: array of Byte) := z_Color3ubv;
    public static procedure z_Color3ubv(var v: Byte);
    external 'opengl32.dll' name 'glColor3ubv';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Color3ubv(var v: Byte) := z_Color3ubv;
    public static procedure z_Color3ubv(v: IntPtr);
    external 'opengl32.dll' name 'glColor3ubv';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Color3ubv(v: IntPtr) := z_Color3ubv;
    
    // added in gl1.0, deprecated in gl3.2
    public static procedure z_Color3ui(red: UInt32; green: UInt32; blue: UInt32);
    external 'opengl32.dll' name 'glColor3ui';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Color3ui(red: UInt32; green: UInt32; blue: UInt32) := z_Color3ui;
    
    // added in gl1.0, deprecated in gl3.2
    public static procedure z_Color3uiv([MarshalAs(UnmanagedType.LPArray)] v: array of UInt32);
    external 'opengl32.dll' name 'glColor3uiv';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Color3uiv(v: array of UInt32) := z_Color3uiv;
    public static procedure z_Color3uiv(var v: UInt32);
    external 'opengl32.dll' name 'glColor3uiv';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Color3uiv(var v: UInt32) := z_Color3uiv;
    public static procedure z_Color3uiv(v: IntPtr);
    external 'opengl32.dll' name 'glColor3uiv';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Color3uiv(v: IntPtr) := z_Color3uiv;
    
    // added in gl1.0, deprecated in gl3.2
    public static procedure z_Color3us(red: UInt16; green: UInt16; blue: UInt16);
    external 'opengl32.dll' name 'glColor3us';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Color3us(red: UInt16; green: UInt16; blue: UInt16) := z_Color3us;
    
    // added in gl1.0, deprecated in gl3.2
    public static procedure z_Color3usv([MarshalAs(UnmanagedType.LPArray)] v: array of UInt16);
    external 'opengl32.dll' name 'glColor3usv';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Color3usv(v: array of UInt16) := z_Color3usv;
    public static procedure z_Color3usv(var v: UInt16);
    external 'opengl32.dll' name 'glColor3usv';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Color3usv(var v: UInt16) := z_Color3usv;
    public static procedure z_Color3usv(v: IntPtr);
    external 'opengl32.dll' name 'glColor3usv';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Color3usv(v: IntPtr) := z_Color3usv;
    
    // added in gl1.0, deprecated in gl3.2
    public static procedure z_Color4b(red: SByte; green: SByte; blue: SByte; alpha: SByte);
    external 'opengl32.dll' name 'glColor4b';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Color4b(red: SByte; green: SByte; blue: SByte; alpha: SByte) := z_Color4b;
    
    // added in gl1.0, deprecated in gl3.2
    public static procedure z_Color4bv([MarshalAs(UnmanagedType.LPArray)] v: array of SByte);
    external 'opengl32.dll' name 'glColor4bv';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Color4bv(v: array of SByte) := z_Color4bv;
    public static procedure z_Color4bv(var v: SByte);
    external 'opengl32.dll' name 'glColor4bv';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Color4bv(var v: SByte) := z_Color4bv;
    public static procedure z_Color4bv(v: IntPtr);
    external 'opengl32.dll' name 'glColor4bv';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Color4bv(v: IntPtr) := z_Color4bv;
    
    // added in gl1.0, deprecated in gl3.2
    public static procedure z_Color4d(red: real; green: real; blue: real; alpha: real);
    external 'opengl32.dll' name 'glColor4d';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Color4d(red: real; green: real; blue: real; alpha: real) := z_Color4d;
    
    // added in gl1.0, deprecated in gl3.2
    public static procedure z_Color4dv([MarshalAs(UnmanagedType.LPArray)] v: array of real);
    external 'opengl32.dll' name 'glColor4dv';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Color4dv(v: array of real) := z_Color4dv;
    public static procedure z_Color4dv(var v: real);
    external 'opengl32.dll' name 'glColor4dv';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Color4dv(var v: real) := z_Color4dv;
    public static procedure z_Color4dv(v: IntPtr);
    external 'opengl32.dll' name 'glColor4dv';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Color4dv(v: IntPtr) := z_Color4dv;
    
    // added in gl1.0, deprecated in gl3.2
    public static procedure z_Color4f(red: single; green: single; blue: single; alpha: single);
    external 'opengl32.dll' name 'glColor4f';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Color4f(red: single; green: single; blue: single; alpha: single) := z_Color4f;
    
    // added in gl1.0, deprecated in gl3.2
    public static procedure z_Color4fv([MarshalAs(UnmanagedType.LPArray)] v: array of single);
    external 'opengl32.dll' name 'glColor4fv';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Color4fv(v: array of single) := z_Color4fv;
    public static procedure z_Color4fv(var v: single);
    external 'opengl32.dll' name 'glColor4fv';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Color4fv(var v: single) := z_Color4fv;
    public static procedure z_Color4fv(v: IntPtr);
    external 'opengl32.dll' name 'glColor4fv';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Color4fv(v: IntPtr) := z_Color4fv;
    
    // added in gl1.0, deprecated in gl3.2
    public static procedure z_Color4i(red: Int32; green: Int32; blue: Int32; alpha: Int32);
    external 'opengl32.dll' name 'glColor4i';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Color4i(red: Int32; green: Int32; blue: Int32; alpha: Int32) := z_Color4i;
    
    // added in gl1.0, deprecated in gl3.2
    public static procedure z_Color4iv([MarshalAs(UnmanagedType.LPArray)] v: array of Int32);
    external 'opengl32.dll' name 'glColor4iv';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Color4iv(v: array of Int32) := z_Color4iv;
    public static procedure z_Color4iv(var v: Int32);
    external 'opengl32.dll' name 'glColor4iv';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Color4iv(var v: Int32) := z_Color4iv;
    public static procedure z_Color4iv(v: IntPtr);
    external 'opengl32.dll' name 'glColor4iv';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Color4iv(v: IntPtr) := z_Color4iv;
    
    // added in gl1.0, deprecated in gl3.2
    public static procedure z_Color4s(red: Int16; green: Int16; blue: Int16; alpha: Int16);
    external 'opengl32.dll' name 'glColor4s';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Color4s(red: Int16; green: Int16; blue: Int16; alpha: Int16) := z_Color4s;
    
    // added in gl1.0, deprecated in gl3.2
    public static procedure z_Color4sv([MarshalAs(UnmanagedType.LPArray)] v: array of Int16);
    external 'opengl32.dll' name 'glColor4sv';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Color4sv(v: array of Int16) := z_Color4sv;
    public static procedure z_Color4sv(var v: Int16);
    external 'opengl32.dll' name 'glColor4sv';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Color4sv(var v: Int16) := z_Color4sv;
    public static procedure z_Color4sv(v: IntPtr);
    external 'opengl32.dll' name 'glColor4sv';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Color4sv(v: IntPtr) := z_Color4sv;
    
    // added in gl1.0, deprecated in gl3.2
    public static procedure z_Color4ub(red: Byte; green: Byte; blue: Byte; alpha: Byte);
    external 'opengl32.dll' name 'glColor4ub';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Color4ub(red: Byte; green: Byte; blue: Byte; alpha: Byte) := z_Color4ub;
    
    // added in gl1.0, deprecated in gl3.2
    public static procedure z_Color4ubv([MarshalAs(UnmanagedType.LPArray)] v: array of Byte);
    external 'opengl32.dll' name 'glColor4ubv';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Color4ubv(v: array of Byte) := z_Color4ubv;
    public static procedure z_Color4ubv(var v: Byte);
    external 'opengl32.dll' name 'glColor4ubv';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Color4ubv(var v: Byte) := z_Color4ubv;
    public static procedure z_Color4ubv(v: IntPtr);
    external 'opengl32.dll' name 'glColor4ubv';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Color4ubv(v: IntPtr) := z_Color4ubv;
    
    // added in gl1.0, deprecated in gl3.2
    public static procedure z_Color4ui(red: UInt32; green: UInt32; blue: UInt32; alpha: UInt32);
    external 'opengl32.dll' name 'glColor4ui';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Color4ui(red: UInt32; green: UInt32; blue: UInt32; alpha: UInt32) := z_Color4ui;
    
    // added in gl1.0, deprecated in gl3.2
    public static procedure z_Color4uiv([MarshalAs(UnmanagedType.LPArray)] v: array of UInt32);
    external 'opengl32.dll' name 'glColor4uiv';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Color4uiv(v: array of UInt32) := z_Color4uiv;
    public static procedure z_Color4uiv(var v: UInt32);
    external 'opengl32.dll' name 'glColor4uiv';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Color4uiv(var v: UInt32) := z_Color4uiv;
    public static procedure z_Color4uiv(v: IntPtr);
    external 'opengl32.dll' name 'glColor4uiv';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Color4uiv(v: IntPtr) := z_Color4uiv;
    
    // added in gl1.0, deprecated in gl3.2
    public static procedure z_Color4us(red: UInt16; green: UInt16; blue: UInt16; alpha: UInt16);
    external 'opengl32.dll' name 'glColor4us';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Color4us(red: UInt16; green: UInt16; blue: UInt16; alpha: UInt16) := z_Color4us;
    
    // added in gl1.0, deprecated in gl3.2
    public static procedure z_Color4usv([MarshalAs(UnmanagedType.LPArray)] v: array of UInt16);
    external 'opengl32.dll' name 'glColor4usv';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Color4usv(v: array of UInt16) := z_Color4usv;
    public static procedure z_Color4usv(var v: UInt16);
    external 'opengl32.dll' name 'glColor4usv';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Color4usv(var v: UInt16) := z_Color4usv;
    public static procedure z_Color4usv(v: IntPtr);
    external 'opengl32.dll' name 'glColor4usv';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Color4usv(v: IntPtr) := z_Color4usv;
    
    // added in gl1.0, deprecated in gl3.2
    public static procedure z_ColorMaterial(face: DummyEnum; mode: ColorMaterialParameter);
    external 'opengl32.dll' name 'glColorMaterial';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ColorMaterial(face: DummyEnum; mode: ColorMaterialParameter) := z_ColorMaterial;
    
    // added in gl1.1, deprecated in gl3.2
    public static procedure z_ColorPointer(size: Int32; type: ColorPointerType; stride: Int32; pointer: IntPtr);
    external 'opengl32.dll' name 'glColorPointer';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ColorPointer(size: Int32; type: ColorPointerType; stride: Int32; pointer: IntPtr) := z_ColorPointer;
    
    // added in gl1.0, deprecated in gl3.2
    public static procedure z_CopyPixels(x: Int32; y: Int32; width: Int32; height: Int32; type: PixelCopyType);
    external 'opengl32.dll' name 'glCopyPixels';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure CopyPixels(x: Int32; y: Int32; width: Int32; height: Int32; type: PixelCopyType) := z_CopyPixels;
    
    // added in gl1.0, deprecated in gl3.2
    public static procedure z_DeleteLists(list: UInt32; range: Int32);
    external 'opengl32.dll' name 'glDeleteLists';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure DeleteLists(list: UInt32; range: Int32) := z_DeleteLists;
    
    // added in gl1.1, deprecated in gl3.2
    public static procedure z_DisableClientState(array: EnableCap);
    external 'opengl32.dll' name 'glDisableClientState';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure DisableClientState(array: EnableCap) := z_DisableClientState;
    
    // added in gl1.0, deprecated in gl3.2
    public static procedure z_DrawPixels(width: Int32; height: Int32; format: PixelFormat; type: PixelType; pixels: IntPtr);
    external 'opengl32.dll' name 'glDrawPixels';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure DrawPixels(width: Int32; height: Int32; format: PixelFormat; type: PixelType; pixels: IntPtr) := z_DrawPixels;
    
    // added in gl1.0, deprecated in gl3.2
    public static procedure z_EdgeFlag(flag: boolean);
    external 'opengl32.dll' name 'glEdgeFlag';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure EdgeFlag(flag: boolean) := z_EdgeFlag;
    
    // added in gl1.1, deprecated in gl3.2
    public static procedure z_EdgeFlagPointer(stride: Int32; pointer: IntPtr);
    external 'opengl32.dll' name 'glEdgeFlagPointer';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure EdgeFlagPointer(stride: Int32; pointer: IntPtr) := z_EdgeFlagPointer;
    
    // added in gl1.0, deprecated in gl3.2
    public static procedure z_EdgeFlagv([MarshalAs(UnmanagedType.LPArray)] flag: array of boolean);
    external 'opengl32.dll' name 'glEdgeFlagv';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure EdgeFlagv(flag: array of boolean) := z_EdgeFlagv;
    public static procedure z_EdgeFlagv(var flag: boolean);
    external 'opengl32.dll' name 'glEdgeFlagv';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure EdgeFlagv(var flag: boolean) := z_EdgeFlagv;
    public static procedure z_EdgeFlagv(flag: IntPtr);
    external 'opengl32.dll' name 'glEdgeFlagv';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure EdgeFlagv(flag: IntPtr) := z_EdgeFlagv;
    
    // added in gl1.1, deprecated in gl3.2
    public static procedure z_EnableClientState(array: EnableCap);
    external 'opengl32.dll' name 'glEnableClientState';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure EnableClientState(array: EnableCap) := z_EnableClientState;
    
    // added in gl1.0, deprecated in gl3.2
    public static procedure z_End;
    external 'opengl32.dll' name 'glEnd';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure End := z_End;
    
    // added in gl1.0, deprecated in gl3.2
    public static procedure z_EndList;
    external 'opengl32.dll' name 'glEndList';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure EndList := z_EndList;
    
    // added in gl1.0, deprecated in gl3.2
    public static procedure z_EvalCoord1d(u: real);
    external 'opengl32.dll' name 'glEvalCoord1d';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure EvalCoord1d(u: real) := z_EvalCoord1d;
    
    // added in gl1.0, deprecated in gl3.2
    public static procedure z_EvalCoord1dv([MarshalAs(UnmanagedType.LPArray)] u: array of real);
    external 'opengl32.dll' name 'glEvalCoord1dv';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure EvalCoord1dv(u: array of real) := z_EvalCoord1dv;
    public static procedure z_EvalCoord1dv(var u: real);
    external 'opengl32.dll' name 'glEvalCoord1dv';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure EvalCoord1dv(var u: real) := z_EvalCoord1dv;
    public static procedure z_EvalCoord1dv(u: IntPtr);
    external 'opengl32.dll' name 'glEvalCoord1dv';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure EvalCoord1dv(u: IntPtr) := z_EvalCoord1dv;
    
    // added in gl1.0, deprecated in gl3.2
    public static procedure z_EvalCoord1f(u: single);
    external 'opengl32.dll' name 'glEvalCoord1f';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure EvalCoord1f(u: single) := z_EvalCoord1f;
    
    // added in gl1.0, deprecated in gl3.2
    public static procedure z_EvalCoord1fv([MarshalAs(UnmanagedType.LPArray)] u: array of single);
    external 'opengl32.dll' name 'glEvalCoord1fv';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure EvalCoord1fv(u: array of single) := z_EvalCoord1fv;
    public static procedure z_EvalCoord1fv(var u: single);
    external 'opengl32.dll' name 'glEvalCoord1fv';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure EvalCoord1fv(var u: single) := z_EvalCoord1fv;
    public static procedure z_EvalCoord1fv(u: IntPtr);
    external 'opengl32.dll' name 'glEvalCoord1fv';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure EvalCoord1fv(u: IntPtr) := z_EvalCoord1fv;
    
    // added in gl1.0, deprecated in gl3.2
    public static procedure z_EvalCoord2d(u: real; v: real);
    external 'opengl32.dll' name 'glEvalCoord2d';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure EvalCoord2d(u: real; v: real) := z_EvalCoord2d;
    
    // added in gl1.0, deprecated in gl3.2
    public static procedure z_EvalCoord2dv([MarshalAs(UnmanagedType.LPArray)] u: array of real);
    external 'opengl32.dll' name 'glEvalCoord2dv';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure EvalCoord2dv(u: array of real) := z_EvalCoord2dv;
    public static procedure z_EvalCoord2dv(var u: real);
    external 'opengl32.dll' name 'glEvalCoord2dv';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure EvalCoord2dv(var u: real) := z_EvalCoord2dv;
    public static procedure z_EvalCoord2dv(u: IntPtr);
    external 'opengl32.dll' name 'glEvalCoord2dv';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure EvalCoord2dv(u: IntPtr) := z_EvalCoord2dv;
    
    // added in gl1.0, deprecated in gl3.2
    public static procedure z_EvalCoord2f(u: single; v: single);
    external 'opengl32.dll' name 'glEvalCoord2f';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure EvalCoord2f(u: single; v: single) := z_EvalCoord2f;
    
    // added in gl1.0, deprecated in gl3.2
    public static procedure z_EvalCoord2fv([MarshalAs(UnmanagedType.LPArray)] u: array of single);
    external 'opengl32.dll' name 'glEvalCoord2fv';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure EvalCoord2fv(u: array of single) := z_EvalCoord2fv;
    public static procedure z_EvalCoord2fv(var u: single);
    external 'opengl32.dll' name 'glEvalCoord2fv';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure EvalCoord2fv(var u: single) := z_EvalCoord2fv;
    public static procedure z_EvalCoord2fv(u: IntPtr);
    external 'opengl32.dll' name 'glEvalCoord2fv';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure EvalCoord2fv(u: IntPtr) := z_EvalCoord2fv;
    
    // added in gl1.0, deprecated in gl3.2
    public static procedure z_EvalMesh1(mode: MeshMode1; i1: Int32; i2: Int32);
    external 'opengl32.dll' name 'glEvalMesh1';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure EvalMesh1(mode: MeshMode1; i1: Int32; i2: Int32) := z_EvalMesh1;
    
    // added in gl1.0, deprecated in gl3.2
    public static procedure z_EvalMesh2(mode: MeshMode2; i1: Int32; i2: Int32; j1: Int32; j2: Int32);
    external 'opengl32.dll' name 'glEvalMesh2';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure EvalMesh2(mode: MeshMode2; i1: Int32; i2: Int32; j1: Int32; j2: Int32) := z_EvalMesh2;
    
    // added in gl1.0, deprecated in gl3.2
    public static procedure z_EvalPoint1(i: Int32);
    external 'opengl32.dll' name 'glEvalPoint1';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure EvalPoint1(i: Int32) := z_EvalPoint1;
    
    // added in gl1.0, deprecated in gl3.2
    public static procedure z_EvalPoint2(i: Int32; j: Int32);
    external 'opengl32.dll' name 'glEvalPoint2';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure EvalPoint2(i: Int32; j: Int32) := z_EvalPoint2;
    
    // added in gl1.0, deprecated in gl3.2
    public static procedure z_FeedbackBuffer(size: Int32; type: FeedbackType; [MarshalAs(UnmanagedType.LPArray)] buffer: array of single);
    external 'opengl32.dll' name 'glFeedbackBuffer';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure FeedbackBuffer(size: Int32; type: FeedbackType; buffer: array of single) := z_FeedbackBuffer;
    public static procedure z_FeedbackBuffer(size: Int32; type: FeedbackType; var buffer: single);
    external 'opengl32.dll' name 'glFeedbackBuffer';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure FeedbackBuffer(size: Int32; type: FeedbackType; var buffer: single) := z_FeedbackBuffer;
    public static procedure z_FeedbackBuffer(size: Int32; type: FeedbackType; buffer: IntPtr);
    external 'opengl32.dll' name 'glFeedbackBuffer';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure FeedbackBuffer(size: Int32; type: FeedbackType; buffer: IntPtr) := z_FeedbackBuffer;
    
    // added in gl1.4, deprecated in gl3.2
    public z_FogCoordd_adr := GetFuncAdr('glFogCoordd');
    public z_FogCoordd_ovr_0 := GetFuncOrNil&<procedure(coord: real)>(z_FogCoordd_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure FogCoordd(coord: real);
    begin
      z_FogCoordd_ovr_0(coord);
    end;
    
    // added in gl1.4, deprecated in gl3.2
    public z_FogCoorddv_adr := GetFuncAdr('glFogCoorddv');
    public z_FogCoorddv_ovr_0 := GetFuncOrNil&<procedure(var coord: real)>(z_FogCoorddv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure FogCoorddv(coord: array of real);
    begin
      z_FogCoorddv_ovr_0(coord[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure FogCoorddv(var coord: real);
    begin
      z_FogCoorddv_ovr_0(coord);
    end;
    public z_FogCoorddv_ovr_2 := GetFuncOrNil&<procedure(coord: IntPtr)>(z_FogCoorddv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure FogCoorddv(coord: IntPtr);
    begin
      z_FogCoorddv_ovr_2(coord);
    end;
    
    // added in gl1.4, deprecated in gl3.2
    public z_FogCoordf_adr := GetFuncAdr('glFogCoordf');
    public z_FogCoordf_ovr_0 := GetFuncOrNil&<procedure(coord: single)>(z_FogCoordf_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure FogCoordf(coord: single);
    begin
      z_FogCoordf_ovr_0(coord);
    end;
    
    // added in gl1.4, deprecated in gl3.2
    public z_FogCoordfv_adr := GetFuncAdr('glFogCoordfv');
    public z_FogCoordfv_ovr_0 := GetFuncOrNil&<procedure(var coord: single)>(z_FogCoordfv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure FogCoordfv(coord: array of single);
    begin
      z_FogCoordfv_ovr_0(coord[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure FogCoordfv(var coord: single);
    begin
      z_FogCoordfv_ovr_0(coord);
    end;
    public z_FogCoordfv_ovr_2 := GetFuncOrNil&<procedure(coord: IntPtr)>(z_FogCoordfv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure FogCoordfv(coord: IntPtr);
    begin
      z_FogCoordfv_ovr_2(coord);
    end;
    
    // added in gl1.4, deprecated in gl3.2
    public z_FogCoordPointer_adr := GetFuncAdr('glFogCoordPointer');
    public z_FogCoordPointer_ovr_0 := GetFuncOrNil&<procedure(type: FogPointerTypeEXT; stride: Int32; pointer: IntPtr)>(z_FogCoordPointer_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure FogCoordPointer(type: FogPointerTypeEXT; stride: Int32; pointer: IntPtr);
    begin
      z_FogCoordPointer_ovr_0(type, stride, pointer);
    end;
    
    // added in gl1.0, deprecated in gl3.2
    public static procedure z_Fogf(pname: FogParameter; param: single);
    external 'opengl32.dll' name 'glFogf';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Fogf(pname: FogParameter; param: single) := z_Fogf;
    
    // added in gl1.0, deprecated in gl3.2
    public static procedure z_Fogfv(pname: FogParameter; [MarshalAs(UnmanagedType.LPArray)] params: array of single);
    external 'opengl32.dll' name 'glFogfv';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Fogfv(pname: FogParameter; params: array of single) := z_Fogfv;
    public static procedure z_Fogfv(pname: FogParameter; var params: single);
    external 'opengl32.dll' name 'glFogfv';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Fogfv(pname: FogParameter; var params: single) := z_Fogfv;
    public static procedure z_Fogfv(pname: FogParameter; params: IntPtr);
    external 'opengl32.dll' name 'glFogfv';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Fogfv(pname: FogParameter; params: IntPtr) := z_Fogfv;
    
    // added in gl1.0, deprecated in gl3.2
    public static procedure z_Fogi(pname: FogParameter; param: Int32);
    external 'opengl32.dll' name 'glFogi';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Fogi(pname: FogParameter; param: Int32) := z_Fogi;
    
    // added in gl1.0, deprecated in gl3.2
    public static procedure z_Fogiv(pname: FogParameter; [MarshalAs(UnmanagedType.LPArray)] params: array of Int32);
    external 'opengl32.dll' name 'glFogiv';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Fogiv(pname: FogParameter; params: array of Int32) := z_Fogiv;
    public static procedure z_Fogiv(pname: FogParameter; var params: Int32);
    external 'opengl32.dll' name 'glFogiv';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Fogiv(pname: FogParameter; var params: Int32) := z_Fogiv;
    public static procedure z_Fogiv(pname: FogParameter; params: IntPtr);
    external 'opengl32.dll' name 'glFogiv';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Fogiv(pname: FogParameter; params: IntPtr) := z_Fogiv;
    
    // added in gl1.0, deprecated in gl3.2
    public static procedure z_Frustum(left: real; right: real; bottom: real; top: real; zNear: real; zFar: real);
    external 'opengl32.dll' name 'glFrustum';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Frustum(left: real; right: real; bottom: real; top: real; zNear: real; zFar: real) := z_Frustum;
    
    // added in gl1.0, deprecated in gl3.2
    public static function z_GenLists(range: Int32): UInt32;
    external 'opengl32.dll' name 'glGenLists';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GenLists(range: Int32): UInt32 := z_GenLists;
    
    // added in gl1.0, deprecated in gl3.2
    public static procedure z_GetClipPlane(plane: ClipPlaneName; [MarshalAs(UnmanagedType.LPArray)] equation: array of real);
    external 'opengl32.dll' name 'glGetClipPlane';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetClipPlane(plane: ClipPlaneName; equation: array of real) := z_GetClipPlane;
    public static procedure z_GetClipPlane(plane: ClipPlaneName; var equation: real);
    external 'opengl32.dll' name 'glGetClipPlane';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetClipPlane(plane: ClipPlaneName; var equation: real) := z_GetClipPlane;
    public static procedure z_GetClipPlane(plane: ClipPlaneName; equation: IntPtr);
    external 'opengl32.dll' name 'glGetClipPlane';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetClipPlane(plane: ClipPlaneName; equation: IntPtr) := z_GetClipPlane;
    
    // added in gl1.0, deprecated in gl3.2
    public static procedure z_GetLightfv(light: LightName; pname: LightParameter; [MarshalAs(UnmanagedType.LPArray)] params: array of single);
    external 'opengl32.dll' name 'glGetLightfv';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetLightfv(light: LightName; pname: LightParameter; params: array of single) := z_GetLightfv;
    public static procedure z_GetLightfv(light: LightName; pname: LightParameter; var params: single);
    external 'opengl32.dll' name 'glGetLightfv';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetLightfv(light: LightName; pname: LightParameter; var params: single) := z_GetLightfv;
    public static procedure z_GetLightfv(light: LightName; pname: LightParameter; params: IntPtr);
    external 'opengl32.dll' name 'glGetLightfv';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetLightfv(light: LightName; pname: LightParameter; params: IntPtr) := z_GetLightfv;
    
    // added in gl1.0, deprecated in gl3.2
    public static procedure z_GetLightiv(light: LightName; pname: LightParameter; [MarshalAs(UnmanagedType.LPArray)] params: array of Int32);
    external 'opengl32.dll' name 'glGetLightiv';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetLightiv(light: LightName; pname: LightParameter; params: array of Int32) := z_GetLightiv;
    public static procedure z_GetLightiv(light: LightName; pname: LightParameter; var params: Int32);
    external 'opengl32.dll' name 'glGetLightiv';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetLightiv(light: LightName; pname: LightParameter; var params: Int32) := z_GetLightiv;
    public static procedure z_GetLightiv(light: LightName; pname: LightParameter; params: IntPtr);
    external 'opengl32.dll' name 'glGetLightiv';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetLightiv(light: LightName; pname: LightParameter; params: IntPtr) := z_GetLightiv;
    
    // added in gl1.0, deprecated in gl3.2
    public static procedure z_GetMapdv(target: MapTarget; query: GetMapQuery; [MarshalAs(UnmanagedType.LPArray)] v: array of real);
    external 'opengl32.dll' name 'glGetMapdv';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetMapdv(target: MapTarget; query: GetMapQuery; v: array of real) := z_GetMapdv;
    public static procedure z_GetMapdv(target: MapTarget; query: GetMapQuery; var v: real);
    external 'opengl32.dll' name 'glGetMapdv';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetMapdv(target: MapTarget; query: GetMapQuery; var v: real) := z_GetMapdv;
    public static procedure z_GetMapdv(target: MapTarget; query: GetMapQuery; v: IntPtr);
    external 'opengl32.dll' name 'glGetMapdv';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetMapdv(target: MapTarget; query: GetMapQuery; v: IntPtr) := z_GetMapdv;
    
    // added in gl1.0, deprecated in gl3.2
    public static procedure z_GetMapfv(target: MapTarget; query: GetMapQuery; [MarshalAs(UnmanagedType.LPArray)] v: array of single);
    external 'opengl32.dll' name 'glGetMapfv';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetMapfv(target: MapTarget; query: GetMapQuery; v: array of single) := z_GetMapfv;
    public static procedure z_GetMapfv(target: MapTarget; query: GetMapQuery; var v: single);
    external 'opengl32.dll' name 'glGetMapfv';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetMapfv(target: MapTarget; query: GetMapQuery; var v: single) := z_GetMapfv;
    public static procedure z_GetMapfv(target: MapTarget; query: GetMapQuery; v: IntPtr);
    external 'opengl32.dll' name 'glGetMapfv';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetMapfv(target: MapTarget; query: GetMapQuery; v: IntPtr) := z_GetMapfv;
    
    // added in gl1.0, deprecated in gl3.2
    public static procedure z_GetMapiv(target: MapTarget; query: GetMapQuery; [MarshalAs(UnmanagedType.LPArray)] v: array of Int32);
    external 'opengl32.dll' name 'glGetMapiv';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetMapiv(target: MapTarget; query: GetMapQuery; v: array of Int32) := z_GetMapiv;
    public static procedure z_GetMapiv(target: MapTarget; query: GetMapQuery; var v: Int32);
    external 'opengl32.dll' name 'glGetMapiv';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetMapiv(target: MapTarget; query: GetMapQuery; var v: Int32) := z_GetMapiv;
    public static procedure z_GetMapiv(target: MapTarget; query: GetMapQuery; v: IntPtr);
    external 'opengl32.dll' name 'glGetMapiv';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetMapiv(target: MapTarget; query: GetMapQuery; v: IntPtr) := z_GetMapiv;
    
    // added in gl1.0, deprecated in gl3.2
    public static procedure z_GetMaterialfv(face: DummyEnum; pname: MaterialParameter; [MarshalAs(UnmanagedType.LPArray)] params: array of single);
    external 'opengl32.dll' name 'glGetMaterialfv';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetMaterialfv(face: DummyEnum; pname: MaterialParameter; params: array of single) := z_GetMaterialfv;
    public static procedure z_GetMaterialfv(face: DummyEnum; pname: MaterialParameter; var params: single);
    external 'opengl32.dll' name 'glGetMaterialfv';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetMaterialfv(face: DummyEnum; pname: MaterialParameter; var params: single) := z_GetMaterialfv;
    public static procedure z_GetMaterialfv(face: DummyEnum; pname: MaterialParameter; params: IntPtr);
    external 'opengl32.dll' name 'glGetMaterialfv';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetMaterialfv(face: DummyEnum; pname: MaterialParameter; params: IntPtr) := z_GetMaterialfv;
    
    // added in gl1.0, deprecated in gl3.2
    public static procedure z_GetMaterialiv(face: DummyEnum; pname: MaterialParameter; [MarshalAs(UnmanagedType.LPArray)] params: array of Int32);
    external 'opengl32.dll' name 'glGetMaterialiv';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetMaterialiv(face: DummyEnum; pname: MaterialParameter; params: array of Int32) := z_GetMaterialiv;
    public static procedure z_GetMaterialiv(face: DummyEnum; pname: MaterialParameter; var params: Int32);
    external 'opengl32.dll' name 'glGetMaterialiv';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetMaterialiv(face: DummyEnum; pname: MaterialParameter; var params: Int32) := z_GetMaterialiv;
    public static procedure z_GetMaterialiv(face: DummyEnum; pname: MaterialParameter; params: IntPtr);
    external 'opengl32.dll' name 'glGetMaterialiv';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetMaterialiv(face: DummyEnum; pname: MaterialParameter; params: IntPtr) := z_GetMaterialiv;
    
    // added in gl1.0, deprecated in gl3.2
    public static procedure z_GetPixelMapfv(map: PixelMap; [MarshalAs(UnmanagedType.LPArray)] values: array of single);
    external 'opengl32.dll' name 'glGetPixelMapfv';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetPixelMapfv(map: PixelMap; values: array of single) := z_GetPixelMapfv;
    public static procedure z_GetPixelMapfv(map: PixelMap; var values: single);
    external 'opengl32.dll' name 'glGetPixelMapfv';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetPixelMapfv(map: PixelMap; var values: single) := z_GetPixelMapfv;
    public static procedure z_GetPixelMapfv(map: PixelMap; values: IntPtr);
    external 'opengl32.dll' name 'glGetPixelMapfv';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetPixelMapfv(map: PixelMap; values: IntPtr) := z_GetPixelMapfv;
    
    // added in gl1.0, deprecated in gl3.2
    public static procedure z_GetPixelMapuiv(map: PixelMap; [MarshalAs(UnmanagedType.LPArray)] values: array of UInt32);
    external 'opengl32.dll' name 'glGetPixelMapuiv';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetPixelMapuiv(map: PixelMap; values: array of UInt32) := z_GetPixelMapuiv;
    public static procedure z_GetPixelMapuiv(map: PixelMap; var values: UInt32);
    external 'opengl32.dll' name 'glGetPixelMapuiv';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetPixelMapuiv(map: PixelMap; var values: UInt32) := z_GetPixelMapuiv;
    public static procedure z_GetPixelMapuiv(map: PixelMap; values: IntPtr);
    external 'opengl32.dll' name 'glGetPixelMapuiv';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetPixelMapuiv(map: PixelMap; values: IntPtr) := z_GetPixelMapuiv;
    
    // added in gl1.0, deprecated in gl3.2
    public static procedure z_GetPixelMapusv(map: PixelMap; [MarshalAs(UnmanagedType.LPArray)] values: array of UInt16);
    external 'opengl32.dll' name 'glGetPixelMapusv';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetPixelMapusv(map: PixelMap; values: array of UInt16) := z_GetPixelMapusv;
    public static procedure z_GetPixelMapusv(map: PixelMap; var values: UInt16);
    external 'opengl32.dll' name 'glGetPixelMapusv';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetPixelMapusv(map: PixelMap; var values: UInt16) := z_GetPixelMapusv;
    public static procedure z_GetPixelMapusv(map: PixelMap; values: IntPtr);
    external 'opengl32.dll' name 'glGetPixelMapusv';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetPixelMapusv(map: PixelMap; values: IntPtr) := z_GetPixelMapusv;
    
    // added in gl1.0, deprecated in gl3.2
    public static procedure z_GetPolygonStipple([MarshalAs(UnmanagedType.LPArray)] mask: array of Byte);
    external 'opengl32.dll' name 'glGetPolygonStipple';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetPolygonStipple(mask: array of Byte) := z_GetPolygonStipple;
    public static procedure z_GetPolygonStipple(var mask: Byte);
    external 'opengl32.dll' name 'glGetPolygonStipple';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetPolygonStipple(var mask: Byte) := z_GetPolygonStipple;
    public static procedure z_GetPolygonStipple(mask: IntPtr);
    external 'opengl32.dll' name 'glGetPolygonStipple';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetPolygonStipple(mask: IntPtr) := z_GetPolygonStipple;
    
    // added in gl1.0, deprecated in gl3.2
    public static procedure z_GetTexEnvfv(target: TextureEnvTarget; pname: TextureEnvParameter; [MarshalAs(UnmanagedType.LPArray)] params: array of single);
    external 'opengl32.dll' name 'glGetTexEnvfv';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetTexEnvfv(target: TextureEnvTarget; pname: TextureEnvParameter; params: array of single) := z_GetTexEnvfv;
    public static procedure z_GetTexEnvfv(target: TextureEnvTarget; pname: TextureEnvParameter; var params: single);
    external 'opengl32.dll' name 'glGetTexEnvfv';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetTexEnvfv(target: TextureEnvTarget; pname: TextureEnvParameter; var params: single) := z_GetTexEnvfv;
    public static procedure z_GetTexEnvfv(target: TextureEnvTarget; pname: TextureEnvParameter; params: IntPtr);
    external 'opengl32.dll' name 'glGetTexEnvfv';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetTexEnvfv(target: TextureEnvTarget; pname: TextureEnvParameter; params: IntPtr) := z_GetTexEnvfv;
    
    // added in gl1.0, deprecated in gl3.2
    public static procedure z_GetTexEnviv(target: TextureEnvTarget; pname: TextureEnvParameter; [MarshalAs(UnmanagedType.LPArray)] params: array of Int32);
    external 'opengl32.dll' name 'glGetTexEnviv';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetTexEnviv(target: TextureEnvTarget; pname: TextureEnvParameter; params: array of Int32) := z_GetTexEnviv;
    public static procedure z_GetTexEnviv(target: TextureEnvTarget; pname: TextureEnvParameter; var params: Int32);
    external 'opengl32.dll' name 'glGetTexEnviv';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetTexEnviv(target: TextureEnvTarget; pname: TextureEnvParameter; var params: Int32) := z_GetTexEnviv;
    public static procedure z_GetTexEnviv(target: TextureEnvTarget; pname: TextureEnvParameter; params: IntPtr);
    external 'opengl32.dll' name 'glGetTexEnviv';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetTexEnviv(target: TextureEnvTarget; pname: TextureEnvParameter; params: IntPtr) := z_GetTexEnviv;
    
    // added in gl1.0, deprecated in gl3.2
    public static procedure z_GetTexGendv(coord: TextureCoordName; pname: TextureGenParameter; [MarshalAs(UnmanagedType.LPArray)] params: array of real);
    external 'opengl32.dll' name 'glGetTexGendv';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetTexGendv(coord: TextureCoordName; pname: TextureGenParameter; params: array of real) := z_GetTexGendv;
    public static procedure z_GetTexGendv(coord: TextureCoordName; pname: TextureGenParameter; var params: real);
    external 'opengl32.dll' name 'glGetTexGendv';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetTexGendv(coord: TextureCoordName; pname: TextureGenParameter; var params: real) := z_GetTexGendv;
    public static procedure z_GetTexGendv(coord: TextureCoordName; pname: TextureGenParameter; params: IntPtr);
    external 'opengl32.dll' name 'glGetTexGendv';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetTexGendv(coord: TextureCoordName; pname: TextureGenParameter; params: IntPtr) := z_GetTexGendv;
    
    // added in gl1.0, deprecated in gl3.2
    public static procedure z_GetTexGenfv(coord: TextureCoordName; pname: TextureGenParameter; [MarshalAs(UnmanagedType.LPArray)] params: array of single);
    external 'opengl32.dll' name 'glGetTexGenfv';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetTexGenfv(coord: TextureCoordName; pname: TextureGenParameter; params: array of single) := z_GetTexGenfv;
    public static procedure z_GetTexGenfv(coord: TextureCoordName; pname: TextureGenParameter; var params: single);
    external 'opengl32.dll' name 'glGetTexGenfv';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetTexGenfv(coord: TextureCoordName; pname: TextureGenParameter; var params: single) := z_GetTexGenfv;
    public static procedure z_GetTexGenfv(coord: TextureCoordName; pname: TextureGenParameter; params: IntPtr);
    external 'opengl32.dll' name 'glGetTexGenfv';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetTexGenfv(coord: TextureCoordName; pname: TextureGenParameter; params: IntPtr) := z_GetTexGenfv;
    
    // added in gl1.0, deprecated in gl3.2
    public static procedure z_GetTexGeniv(coord: TextureCoordName; pname: TextureGenParameter; [MarshalAs(UnmanagedType.LPArray)] params: array of Int32);
    external 'opengl32.dll' name 'glGetTexGeniv';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetTexGeniv(coord: TextureCoordName; pname: TextureGenParameter; params: array of Int32) := z_GetTexGeniv;
    public static procedure z_GetTexGeniv(coord: TextureCoordName; pname: TextureGenParameter; var params: Int32);
    external 'opengl32.dll' name 'glGetTexGeniv';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetTexGeniv(coord: TextureCoordName; pname: TextureGenParameter; var params: Int32) := z_GetTexGeniv;
    public static procedure z_GetTexGeniv(coord: TextureCoordName; pname: TextureGenParameter; params: IntPtr);
    external 'opengl32.dll' name 'glGetTexGeniv';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetTexGeniv(coord: TextureCoordName; pname: TextureGenParameter; params: IntPtr) := z_GetTexGeniv;
    
    // added in gl1.0, deprecated in gl3.2
    public static procedure z_Indexd(c: real);
    external 'opengl32.dll' name 'glIndexd';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Indexd(c: real) := z_Indexd;
    
    // added in gl1.0, deprecated in gl3.2
    public static procedure z_Indexdv([MarshalAs(UnmanagedType.LPArray)] c: array of real);
    external 'opengl32.dll' name 'glIndexdv';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Indexdv(c: array of real) := z_Indexdv;
    public static procedure z_Indexdv(var c: real);
    external 'opengl32.dll' name 'glIndexdv';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Indexdv(var c: real) := z_Indexdv;
    public static procedure z_Indexdv(c: IntPtr);
    external 'opengl32.dll' name 'glIndexdv';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Indexdv(c: IntPtr) := z_Indexdv;
    
    // added in gl1.0, deprecated in gl3.2
    public static procedure z_Indexf(c: single);
    external 'opengl32.dll' name 'glIndexf';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Indexf(c: single) := z_Indexf;
    
    // added in gl1.0, deprecated in gl3.2
    public static procedure z_Indexfv([MarshalAs(UnmanagedType.LPArray)] c: array of single);
    external 'opengl32.dll' name 'glIndexfv';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Indexfv(c: array of single) := z_Indexfv;
    public static procedure z_Indexfv(var c: single);
    external 'opengl32.dll' name 'glIndexfv';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Indexfv(var c: single) := z_Indexfv;
    public static procedure z_Indexfv(c: IntPtr);
    external 'opengl32.dll' name 'glIndexfv';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Indexfv(c: IntPtr) := z_Indexfv;
    
    // added in gl1.0, deprecated in gl3.2
    public static procedure z_Indexi(c: Int32);
    external 'opengl32.dll' name 'glIndexi';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Indexi(c: Int32) := z_Indexi;
    
    // added in gl1.0, deprecated in gl3.2
    public static procedure z_Indexiv([MarshalAs(UnmanagedType.LPArray)] c: array of Int32);
    external 'opengl32.dll' name 'glIndexiv';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Indexiv(c: array of Int32) := z_Indexiv;
    public static procedure z_Indexiv(var c: Int32);
    external 'opengl32.dll' name 'glIndexiv';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Indexiv(var c: Int32) := z_Indexiv;
    public static procedure z_Indexiv(c: IntPtr);
    external 'opengl32.dll' name 'glIndexiv';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Indexiv(c: IntPtr) := z_Indexiv;
    
    // added in gl1.0, deprecated in gl3.2
    public static procedure z_IndexMask(mask: UInt32);
    external 'opengl32.dll' name 'glIndexMask';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure IndexMask(mask: UInt32) := z_IndexMask;
    
    // added in gl1.1, deprecated in gl3.2
    public static procedure z_IndexPointer(type: IndexPointerType; stride: Int32; pointer: IntPtr);
    external 'opengl32.dll' name 'glIndexPointer';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure IndexPointer(type: IndexPointerType; stride: Int32; pointer: IntPtr) := z_IndexPointer;
    
    // added in gl1.0, deprecated in gl3.2
    public static procedure z_Indexs(c: Int16);
    external 'opengl32.dll' name 'glIndexs';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Indexs(c: Int16) := z_Indexs;
    
    // added in gl1.0, deprecated in gl3.2
    public static procedure z_Indexsv([MarshalAs(UnmanagedType.LPArray)] c: array of Int16);
    external 'opengl32.dll' name 'glIndexsv';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Indexsv(c: array of Int16) := z_Indexsv;
    public static procedure z_Indexsv(var c: Int16);
    external 'opengl32.dll' name 'glIndexsv';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Indexsv(var c: Int16) := z_Indexsv;
    public static procedure z_Indexsv(c: IntPtr);
    external 'opengl32.dll' name 'glIndexsv';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Indexsv(c: IntPtr) := z_Indexsv;
    
    // added in gl1.1, deprecated in gl3.2
    public static procedure z_Indexub(c: Byte);
    external 'opengl32.dll' name 'glIndexub';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Indexub(c: Byte) := z_Indexub;
    
    // added in gl1.1, deprecated in gl3.2
    public static procedure z_Indexubv([MarshalAs(UnmanagedType.LPArray)] c: array of Byte);
    external 'opengl32.dll' name 'glIndexubv';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Indexubv(c: array of Byte) := z_Indexubv;
    public static procedure z_Indexubv(var c: Byte);
    external 'opengl32.dll' name 'glIndexubv';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Indexubv(var c: Byte) := z_Indexubv;
    public static procedure z_Indexubv(c: IntPtr);
    external 'opengl32.dll' name 'glIndexubv';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Indexubv(c: IntPtr) := z_Indexubv;
    
    // added in gl1.0, deprecated in gl3.2
    public static procedure z_InitNames;
    external 'opengl32.dll' name 'glInitNames';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure InitNames := z_InitNames;
    
    // added in gl1.1, deprecated in gl3.2
    public static procedure z_InterleavedArrays(format: InterleavedArrayFormat; stride: Int32; pointer: IntPtr);
    external 'opengl32.dll' name 'glInterleavedArrays';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure InterleavedArrays(format: InterleavedArrayFormat; stride: Int32; pointer: IntPtr) := z_InterleavedArrays;
    
    // added in gl1.0, deprecated in gl3.2
    public static function z_IsList(list: UInt32): boolean;
    external 'opengl32.dll' name 'glIsList';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function IsList(list: UInt32): boolean := z_IsList;
    
    // added in gl1.0, deprecated in gl3.2
    public static procedure z_Lightf(light: LightName; pname: LightParameter; param: single);
    external 'opengl32.dll' name 'glLightf';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Lightf(light: LightName; pname: LightParameter; param: single) := z_Lightf;
    
    // added in gl1.0, deprecated in gl3.2
    public static procedure z_Lightfv(light: LightName; pname: LightParameter; [MarshalAs(UnmanagedType.LPArray)] params: array of single);
    external 'opengl32.dll' name 'glLightfv';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Lightfv(light: LightName; pname: LightParameter; params: array of single) := z_Lightfv;
    public static procedure z_Lightfv(light: LightName; pname: LightParameter; var params: single);
    external 'opengl32.dll' name 'glLightfv';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Lightfv(light: LightName; pname: LightParameter; var params: single) := z_Lightfv;
    public static procedure z_Lightfv(light: LightName; pname: LightParameter; params: IntPtr);
    external 'opengl32.dll' name 'glLightfv';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Lightfv(light: LightName; pname: LightParameter; params: IntPtr) := z_Lightfv;
    
    // added in gl1.0, deprecated in gl3.2
    public static procedure z_Lighti(light: LightName; pname: LightParameter; param: Int32);
    external 'opengl32.dll' name 'glLighti';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Lighti(light: LightName; pname: LightParameter; param: Int32) := z_Lighti;
    
    // added in gl1.0, deprecated in gl3.2
    public static procedure z_Lightiv(light: LightName; pname: LightParameter; [MarshalAs(UnmanagedType.LPArray)] params: array of Int32);
    external 'opengl32.dll' name 'glLightiv';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Lightiv(light: LightName; pname: LightParameter; params: array of Int32) := z_Lightiv;
    public static procedure z_Lightiv(light: LightName; pname: LightParameter; var params: Int32);
    external 'opengl32.dll' name 'glLightiv';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Lightiv(light: LightName; pname: LightParameter; var params: Int32) := z_Lightiv;
    public static procedure z_Lightiv(light: LightName; pname: LightParameter; params: IntPtr);
    external 'opengl32.dll' name 'glLightiv';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Lightiv(light: LightName; pname: LightParameter; params: IntPtr) := z_Lightiv;
    
    // added in gl1.0, deprecated in gl3.2
    public static procedure z_LightModelf(pname: LightModelParameter; param: single);
    external 'opengl32.dll' name 'glLightModelf';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure LightModelf(pname: LightModelParameter; param: single) := z_LightModelf;
    
    // added in gl1.0, deprecated in gl3.2
    public static procedure z_LightModelfv(pname: LightModelParameter; [MarshalAs(UnmanagedType.LPArray)] params: array of single);
    external 'opengl32.dll' name 'glLightModelfv';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure LightModelfv(pname: LightModelParameter; params: array of single) := z_LightModelfv;
    public static procedure z_LightModelfv(pname: LightModelParameter; var params: single);
    external 'opengl32.dll' name 'glLightModelfv';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure LightModelfv(pname: LightModelParameter; var params: single) := z_LightModelfv;
    public static procedure z_LightModelfv(pname: LightModelParameter; params: IntPtr);
    external 'opengl32.dll' name 'glLightModelfv';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure LightModelfv(pname: LightModelParameter; params: IntPtr) := z_LightModelfv;
    
    // added in gl1.0, deprecated in gl3.2
    public static procedure z_LightModeli(pname: LightModelParameter; param: Int32);
    external 'opengl32.dll' name 'glLightModeli';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure LightModeli(pname: LightModelParameter; param: Int32) := z_LightModeli;
    
    // added in gl1.0, deprecated in gl3.2
    public static procedure z_LightModeliv(pname: LightModelParameter; [MarshalAs(UnmanagedType.LPArray)] params: array of Int32);
    external 'opengl32.dll' name 'glLightModeliv';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure LightModeliv(pname: LightModelParameter; params: array of Int32) := z_LightModeliv;
    public static procedure z_LightModeliv(pname: LightModelParameter; var params: Int32);
    external 'opengl32.dll' name 'glLightModeliv';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure LightModeliv(pname: LightModelParameter; var params: Int32) := z_LightModeliv;
    public static procedure z_LightModeliv(pname: LightModelParameter; params: IntPtr);
    external 'opengl32.dll' name 'glLightModeliv';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure LightModeliv(pname: LightModelParameter; params: IntPtr) := z_LightModeliv;
    
    // added in gl1.0, deprecated in gl3.2
    public static procedure z_LineStipple(factor: Int32; pattern: UInt16);
    external 'opengl32.dll' name 'glLineStipple';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure LineStipple(factor: Int32; pattern: UInt16) := z_LineStipple;
    
    // added in gl1.0, deprecated in gl3.2
    public static procedure z_ListBase(base: UInt32);
    external 'opengl32.dll' name 'glListBase';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ListBase(base: UInt32) := z_ListBase;
    
    // added in gl1.0, deprecated in gl3.2
    public static procedure z_LoadIdentity;
    external 'opengl32.dll' name 'glLoadIdentity';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure LoadIdentity := z_LoadIdentity;
    
    // added in gl1.0, deprecated in gl3.2
    public static procedure z_LoadMatrixd([MarshalAs(UnmanagedType.LPArray)] m: array of real);
    external 'opengl32.dll' name 'glLoadMatrixd';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure LoadMatrixd(m: array of real) := z_LoadMatrixd;
    public static procedure z_LoadMatrixd(var m: real);
    external 'opengl32.dll' name 'glLoadMatrixd';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure LoadMatrixd(var m: real) := z_LoadMatrixd;
    public static procedure z_LoadMatrixd(m: IntPtr);
    external 'opengl32.dll' name 'glLoadMatrixd';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure LoadMatrixd(m: IntPtr) := z_LoadMatrixd;
    
    // added in gl1.0, deprecated in gl3.2
    public static procedure z_LoadMatrixf([MarshalAs(UnmanagedType.LPArray)] m: array of single);
    external 'opengl32.dll' name 'glLoadMatrixf';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure LoadMatrixf(m: array of single) := z_LoadMatrixf;
    public static procedure z_LoadMatrixf(var m: single);
    external 'opengl32.dll' name 'glLoadMatrixf';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure LoadMatrixf(var m: single) := z_LoadMatrixf;
    public static procedure z_LoadMatrixf(m: IntPtr);
    external 'opengl32.dll' name 'glLoadMatrixf';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure LoadMatrixf(m: IntPtr) := z_LoadMatrixf;
    
    // added in gl1.0, deprecated in gl3.2
    public static procedure z_LoadName(name: UInt32);
    external 'opengl32.dll' name 'glLoadName';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure LoadName(name: UInt32) := z_LoadName;
    
    // added in gl1.3, deprecated in gl3.2
    public z_LoadTransposeMatrixd_adr := GetFuncAdr('glLoadTransposeMatrixd');
    public z_LoadTransposeMatrixd_ovr_0 := GetFuncOrNil&<procedure(var m: real)>(z_LoadTransposeMatrixd_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure LoadTransposeMatrixd(m: array of real);
    begin
      z_LoadTransposeMatrixd_ovr_0(m[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure LoadTransposeMatrixd(var m: real);
    begin
      z_LoadTransposeMatrixd_ovr_0(m);
    end;
    public z_LoadTransposeMatrixd_ovr_2 := GetFuncOrNil&<procedure(m: IntPtr)>(z_LoadTransposeMatrixd_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure LoadTransposeMatrixd(m: IntPtr);
    begin
      z_LoadTransposeMatrixd_ovr_2(m);
    end;
    
    // added in gl1.3, deprecated in gl3.2
    public z_LoadTransposeMatrixf_adr := GetFuncAdr('glLoadTransposeMatrixf');
    public z_LoadTransposeMatrixf_ovr_0 := GetFuncOrNil&<procedure(var m: single)>(z_LoadTransposeMatrixf_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure LoadTransposeMatrixf(m: array of single);
    begin
      z_LoadTransposeMatrixf_ovr_0(m[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure LoadTransposeMatrixf(var m: single);
    begin
      z_LoadTransposeMatrixf_ovr_0(m);
    end;
    public z_LoadTransposeMatrixf_ovr_2 := GetFuncOrNil&<procedure(m: IntPtr)>(z_LoadTransposeMatrixf_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure LoadTransposeMatrixf(m: IntPtr);
    begin
      z_LoadTransposeMatrixf_ovr_2(m);
    end;
    
    // added in gl1.0, deprecated in gl3.2
    public static procedure z_Map1d(target: MapTarget; u1: real; u2: real; stride: Int32; order: Int32; [MarshalAs(UnmanagedType.LPArray)] points: array of real);
    external 'opengl32.dll' name 'glMap1d';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Map1d(target: MapTarget; u1: real; u2: real; stride: Int32; order: Int32; points: array of real) := z_Map1d;
    public static procedure z_Map1d(target: MapTarget; u1: real; u2: real; stride: Int32; order: Int32; var points: real);
    external 'opengl32.dll' name 'glMap1d';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Map1d(target: MapTarget; u1: real; u2: real; stride: Int32; order: Int32; var points: real) := z_Map1d;
    public static procedure z_Map1d(target: MapTarget; u1: real; u2: real; stride: Int32; order: Int32; points: IntPtr);
    external 'opengl32.dll' name 'glMap1d';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Map1d(target: MapTarget; u1: real; u2: real; stride: Int32; order: Int32; points: IntPtr) := z_Map1d;
    
    // added in gl1.0, deprecated in gl3.2
    public static procedure z_Map1f(target: MapTarget; u1: single; u2: single; stride: Int32; order: Int32; [MarshalAs(UnmanagedType.LPArray)] points: array of single);
    external 'opengl32.dll' name 'glMap1f';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Map1f(target: MapTarget; u1: single; u2: single; stride: Int32; order: Int32; points: array of single) := z_Map1f;
    public static procedure z_Map1f(target: MapTarget; u1: single; u2: single; stride: Int32; order: Int32; var points: single);
    external 'opengl32.dll' name 'glMap1f';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Map1f(target: MapTarget; u1: single; u2: single; stride: Int32; order: Int32; var points: single) := z_Map1f;
    public static procedure z_Map1f(target: MapTarget; u1: single; u2: single; stride: Int32; order: Int32; points: IntPtr);
    external 'opengl32.dll' name 'glMap1f';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Map1f(target: MapTarget; u1: single; u2: single; stride: Int32; order: Int32; points: IntPtr) := z_Map1f;
    
    // added in gl1.0, deprecated in gl3.2
    public static procedure z_Map2d(target: MapTarget; u1: real; u2: real; ustride: Int32; uorder: Int32; v1: real; v2: real; vstride: Int32; vorder: Int32; [MarshalAs(UnmanagedType.LPArray)] points: array of real);
    external 'opengl32.dll' name 'glMap2d';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Map2d(target: MapTarget; u1: real; u2: real; ustride: Int32; uorder: Int32; v1: real; v2: real; vstride: Int32; vorder: Int32; points: array of real) := z_Map2d;
    public static procedure z_Map2d(target: MapTarget; u1: real; u2: real; ustride: Int32; uorder: Int32; v1: real; v2: real; vstride: Int32; vorder: Int32; var points: real);
    external 'opengl32.dll' name 'glMap2d';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Map2d(target: MapTarget; u1: real; u2: real; ustride: Int32; uorder: Int32; v1: real; v2: real; vstride: Int32; vorder: Int32; var points: real) := z_Map2d;
    public static procedure z_Map2d(target: MapTarget; u1: real; u2: real; ustride: Int32; uorder: Int32; v1: real; v2: real; vstride: Int32; vorder: Int32; points: IntPtr);
    external 'opengl32.dll' name 'glMap2d';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Map2d(target: MapTarget; u1: real; u2: real; ustride: Int32; uorder: Int32; v1: real; v2: real; vstride: Int32; vorder: Int32; points: IntPtr) := z_Map2d;
    
    // added in gl1.0, deprecated in gl3.2
    public static procedure z_Map2f(target: MapTarget; u1: single; u2: single; ustride: Int32; uorder: Int32; v1: single; v2: single; vstride: Int32; vorder: Int32; [MarshalAs(UnmanagedType.LPArray)] points: array of single);
    external 'opengl32.dll' name 'glMap2f';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Map2f(target: MapTarget; u1: single; u2: single; ustride: Int32; uorder: Int32; v1: single; v2: single; vstride: Int32; vorder: Int32; points: array of single) := z_Map2f;
    public static procedure z_Map2f(target: MapTarget; u1: single; u2: single; ustride: Int32; uorder: Int32; v1: single; v2: single; vstride: Int32; vorder: Int32; var points: single);
    external 'opengl32.dll' name 'glMap2f';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Map2f(target: MapTarget; u1: single; u2: single; ustride: Int32; uorder: Int32; v1: single; v2: single; vstride: Int32; vorder: Int32; var points: single) := z_Map2f;
    public static procedure z_Map2f(target: MapTarget; u1: single; u2: single; ustride: Int32; uorder: Int32; v1: single; v2: single; vstride: Int32; vorder: Int32; points: IntPtr);
    external 'opengl32.dll' name 'glMap2f';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Map2f(target: MapTarget; u1: single; u2: single; ustride: Int32; uorder: Int32; v1: single; v2: single; vstride: Int32; vorder: Int32; points: IntPtr) := z_Map2f;
    
    // added in gl1.0, deprecated in gl3.2
    public static procedure z_MapGrid1d(un: Int32; u1: real; u2: real);
    external 'opengl32.dll' name 'glMapGrid1d';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MapGrid1d(un: Int32; u1: real; u2: real) := z_MapGrid1d;
    
    // added in gl1.0, deprecated in gl3.2
    public static procedure z_MapGrid1f(un: Int32; u1: single; u2: single);
    external 'opengl32.dll' name 'glMapGrid1f';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MapGrid1f(un: Int32; u1: single; u2: single) := z_MapGrid1f;
    
    // added in gl1.0, deprecated in gl3.2
    public static procedure z_MapGrid2d(un: Int32; u1: real; u2: real; vn: Int32; v1: real; v2: real);
    external 'opengl32.dll' name 'glMapGrid2d';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MapGrid2d(un: Int32; u1: real; u2: real; vn: Int32; v1: real; v2: real) := z_MapGrid2d;
    
    // added in gl1.0, deprecated in gl3.2
    public static procedure z_MapGrid2f(un: Int32; u1: single; u2: single; vn: Int32; v1: single; v2: single);
    external 'opengl32.dll' name 'glMapGrid2f';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MapGrid2f(un: Int32; u1: single; u2: single; vn: Int32; v1: single; v2: single) := z_MapGrid2f;
    
    // added in gl1.0, deprecated in gl3.2
    public static procedure z_Materialf(face: DummyEnum; pname: MaterialParameter; param: single);
    external 'opengl32.dll' name 'glMaterialf';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Materialf(face: DummyEnum; pname: MaterialParameter; param: single) := z_Materialf;
    
    // added in gl1.0, deprecated in gl3.2
    public static procedure z_Materialfv(face: DummyEnum; pname: MaterialParameter; [MarshalAs(UnmanagedType.LPArray)] params: array of single);
    external 'opengl32.dll' name 'glMaterialfv';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Materialfv(face: DummyEnum; pname: MaterialParameter; params: array of single) := z_Materialfv;
    public static procedure z_Materialfv(face: DummyEnum; pname: MaterialParameter; var params: single);
    external 'opengl32.dll' name 'glMaterialfv';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Materialfv(face: DummyEnum; pname: MaterialParameter; var params: single) := z_Materialfv;
    public static procedure z_Materialfv(face: DummyEnum; pname: MaterialParameter; params: IntPtr);
    external 'opengl32.dll' name 'glMaterialfv';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Materialfv(face: DummyEnum; pname: MaterialParameter; params: IntPtr) := z_Materialfv;
    
    // added in gl1.0, deprecated in gl3.2
    public static procedure z_Materiali(face: DummyEnum; pname: MaterialParameter; param: Int32);
    external 'opengl32.dll' name 'glMateriali';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Materiali(face: DummyEnum; pname: MaterialParameter; param: Int32) := z_Materiali;
    
    // added in gl1.0, deprecated in gl3.2
    public static procedure z_Materialiv(face: DummyEnum; pname: MaterialParameter; [MarshalAs(UnmanagedType.LPArray)] params: array of Int32);
    external 'opengl32.dll' name 'glMaterialiv';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Materialiv(face: DummyEnum; pname: MaterialParameter; params: array of Int32) := z_Materialiv;
    public static procedure z_Materialiv(face: DummyEnum; pname: MaterialParameter; var params: Int32);
    external 'opengl32.dll' name 'glMaterialiv';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Materialiv(face: DummyEnum; pname: MaterialParameter; var params: Int32) := z_Materialiv;
    public static procedure z_Materialiv(face: DummyEnum; pname: MaterialParameter; params: IntPtr);
    external 'opengl32.dll' name 'glMaterialiv';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Materialiv(face: DummyEnum; pname: MaterialParameter; params: IntPtr) := z_Materialiv;
    
    // added in gl1.0, deprecated in gl3.2
    public static procedure z_MatrixMode(mode: MatrixMode);
    external 'opengl32.dll' name 'glMatrixMode';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MatrixMode(mode: MatrixMode) := z_MatrixMode;
    
    // added in gl1.3, deprecated in gl3.2
    public z_MultiTexCoord1d_adr := GetFuncAdr('glMultiTexCoord1d');
    public z_MultiTexCoord1d_ovr_0 := GetFuncOrNil&<procedure(target: TextureUnit; s: real)>(z_MultiTexCoord1d_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiTexCoord1d(target: TextureUnit; s: real);
    begin
      z_MultiTexCoord1d_ovr_0(target, s);
    end;
    
    // added in gl1.3, deprecated in gl3.2
    public z_MultiTexCoord1dv_adr := GetFuncAdr('glMultiTexCoord1dv');
    public z_MultiTexCoord1dv_ovr_0 := GetFuncOrNil&<procedure(target: TextureUnit; var v: real)>(z_MultiTexCoord1dv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiTexCoord1dv(target: TextureUnit; v: array of real);
    begin
      z_MultiTexCoord1dv_ovr_0(target, v[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiTexCoord1dv(target: TextureUnit; var v: real);
    begin
      z_MultiTexCoord1dv_ovr_0(target, v);
    end;
    public z_MultiTexCoord1dv_ovr_2 := GetFuncOrNil&<procedure(target: TextureUnit; v: IntPtr)>(z_MultiTexCoord1dv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiTexCoord1dv(target: TextureUnit; v: IntPtr);
    begin
      z_MultiTexCoord1dv_ovr_2(target, v);
    end;
    
    // added in gl1.3, deprecated in gl3.2
    public z_MultiTexCoord1f_adr := GetFuncAdr('glMultiTexCoord1f');
    public z_MultiTexCoord1f_ovr_0 := GetFuncOrNil&<procedure(target: TextureUnit; s: single)>(z_MultiTexCoord1f_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiTexCoord1f(target: TextureUnit; s: single);
    begin
      z_MultiTexCoord1f_ovr_0(target, s);
    end;
    
    // added in gl1.3, deprecated in gl3.2
    public z_MultiTexCoord1fv_adr := GetFuncAdr('glMultiTexCoord1fv');
    public z_MultiTexCoord1fv_ovr_0 := GetFuncOrNil&<procedure(target: TextureUnit; var v: single)>(z_MultiTexCoord1fv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiTexCoord1fv(target: TextureUnit; v: array of single);
    begin
      z_MultiTexCoord1fv_ovr_0(target, v[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiTexCoord1fv(target: TextureUnit; var v: single);
    begin
      z_MultiTexCoord1fv_ovr_0(target, v);
    end;
    public z_MultiTexCoord1fv_ovr_2 := GetFuncOrNil&<procedure(target: TextureUnit; v: IntPtr)>(z_MultiTexCoord1fv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiTexCoord1fv(target: TextureUnit; v: IntPtr);
    begin
      z_MultiTexCoord1fv_ovr_2(target, v);
    end;
    
    // added in gl1.3, deprecated in gl3.2
    public z_MultiTexCoord1i_adr := GetFuncAdr('glMultiTexCoord1i');
    public z_MultiTexCoord1i_ovr_0 := GetFuncOrNil&<procedure(target: TextureUnit; s: Int32)>(z_MultiTexCoord1i_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiTexCoord1i(target: TextureUnit; s: Int32);
    begin
      z_MultiTexCoord1i_ovr_0(target, s);
    end;
    
    // added in gl1.3, deprecated in gl3.2
    public z_MultiTexCoord1iv_adr := GetFuncAdr('glMultiTexCoord1iv');
    public z_MultiTexCoord1iv_ovr_0 := GetFuncOrNil&<procedure(target: TextureUnit; var v: Int32)>(z_MultiTexCoord1iv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiTexCoord1iv(target: TextureUnit; v: array of Int32);
    begin
      z_MultiTexCoord1iv_ovr_0(target, v[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiTexCoord1iv(target: TextureUnit; var v: Int32);
    begin
      z_MultiTexCoord1iv_ovr_0(target, v);
    end;
    public z_MultiTexCoord1iv_ovr_2 := GetFuncOrNil&<procedure(target: TextureUnit; v: IntPtr)>(z_MultiTexCoord1iv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiTexCoord1iv(target: TextureUnit; v: IntPtr);
    begin
      z_MultiTexCoord1iv_ovr_2(target, v);
    end;
    
    // added in gl1.3, deprecated in gl3.2
    public z_MultiTexCoord1s_adr := GetFuncAdr('glMultiTexCoord1s');
    public z_MultiTexCoord1s_ovr_0 := GetFuncOrNil&<procedure(target: TextureUnit; s: Int16)>(z_MultiTexCoord1s_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiTexCoord1s(target: TextureUnit; s: Int16);
    begin
      z_MultiTexCoord1s_ovr_0(target, s);
    end;
    
    // added in gl1.3, deprecated in gl3.2
    public z_MultiTexCoord1sv_adr := GetFuncAdr('glMultiTexCoord1sv');
    public z_MultiTexCoord1sv_ovr_0 := GetFuncOrNil&<procedure(target: TextureUnit; var v: Int16)>(z_MultiTexCoord1sv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiTexCoord1sv(target: TextureUnit; v: array of Int16);
    begin
      z_MultiTexCoord1sv_ovr_0(target, v[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiTexCoord1sv(target: TextureUnit; var v: Int16);
    begin
      z_MultiTexCoord1sv_ovr_0(target, v);
    end;
    public z_MultiTexCoord1sv_ovr_2 := GetFuncOrNil&<procedure(target: TextureUnit; v: IntPtr)>(z_MultiTexCoord1sv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiTexCoord1sv(target: TextureUnit; v: IntPtr);
    begin
      z_MultiTexCoord1sv_ovr_2(target, v);
    end;
    
    // added in gl1.3, deprecated in gl3.2
    public z_MultiTexCoord2d_adr := GetFuncAdr('glMultiTexCoord2d');
    public z_MultiTexCoord2d_ovr_0 := GetFuncOrNil&<procedure(target: TextureUnit; s: real; t: real)>(z_MultiTexCoord2d_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiTexCoord2d(target: TextureUnit; s: real; t: real);
    begin
      z_MultiTexCoord2d_ovr_0(target, s, t);
    end;
    
    // added in gl1.3, deprecated in gl3.2
    public z_MultiTexCoord2dv_adr := GetFuncAdr('glMultiTexCoord2dv');
    public z_MultiTexCoord2dv_ovr_0 := GetFuncOrNil&<procedure(target: TextureUnit; var v: real)>(z_MultiTexCoord2dv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiTexCoord2dv(target: TextureUnit; v: array of real);
    begin
      z_MultiTexCoord2dv_ovr_0(target, v[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiTexCoord2dv(target: TextureUnit; var v: real);
    begin
      z_MultiTexCoord2dv_ovr_0(target, v);
    end;
    public z_MultiTexCoord2dv_ovr_2 := GetFuncOrNil&<procedure(target: TextureUnit; v: IntPtr)>(z_MultiTexCoord2dv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiTexCoord2dv(target: TextureUnit; v: IntPtr);
    begin
      z_MultiTexCoord2dv_ovr_2(target, v);
    end;
    
    // added in gl1.3, deprecated in gl3.2
    public z_MultiTexCoord2f_adr := GetFuncAdr('glMultiTexCoord2f');
    public z_MultiTexCoord2f_ovr_0 := GetFuncOrNil&<procedure(target: TextureUnit; s: single; t: single)>(z_MultiTexCoord2f_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiTexCoord2f(target: TextureUnit; s: single; t: single);
    begin
      z_MultiTexCoord2f_ovr_0(target, s, t);
    end;
    
    // added in gl1.3, deprecated in gl3.2
    public z_MultiTexCoord2fv_adr := GetFuncAdr('glMultiTexCoord2fv');
    public z_MultiTexCoord2fv_ovr_0 := GetFuncOrNil&<procedure(target: TextureUnit; var v: single)>(z_MultiTexCoord2fv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiTexCoord2fv(target: TextureUnit; v: array of single);
    begin
      z_MultiTexCoord2fv_ovr_0(target, v[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiTexCoord2fv(target: TextureUnit; var v: single);
    begin
      z_MultiTexCoord2fv_ovr_0(target, v);
    end;
    public z_MultiTexCoord2fv_ovr_2 := GetFuncOrNil&<procedure(target: TextureUnit; v: IntPtr)>(z_MultiTexCoord2fv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiTexCoord2fv(target: TextureUnit; v: IntPtr);
    begin
      z_MultiTexCoord2fv_ovr_2(target, v);
    end;
    
    // added in gl1.3, deprecated in gl3.2
    public z_MultiTexCoord2i_adr := GetFuncAdr('glMultiTexCoord2i');
    public z_MultiTexCoord2i_ovr_0 := GetFuncOrNil&<procedure(target: TextureUnit; s: Int32; t: Int32)>(z_MultiTexCoord2i_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiTexCoord2i(target: TextureUnit; s: Int32; t: Int32);
    begin
      z_MultiTexCoord2i_ovr_0(target, s, t);
    end;
    
    // added in gl1.3, deprecated in gl3.2
    public z_MultiTexCoord2iv_adr := GetFuncAdr('glMultiTexCoord2iv');
    public z_MultiTexCoord2iv_ovr_0 := GetFuncOrNil&<procedure(target: TextureUnit; var v: Int32)>(z_MultiTexCoord2iv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiTexCoord2iv(target: TextureUnit; v: array of Int32);
    begin
      z_MultiTexCoord2iv_ovr_0(target, v[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiTexCoord2iv(target: TextureUnit; var v: Int32);
    begin
      z_MultiTexCoord2iv_ovr_0(target, v);
    end;
    public z_MultiTexCoord2iv_ovr_2 := GetFuncOrNil&<procedure(target: TextureUnit; v: IntPtr)>(z_MultiTexCoord2iv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiTexCoord2iv(target: TextureUnit; v: IntPtr);
    begin
      z_MultiTexCoord2iv_ovr_2(target, v);
    end;
    
    // added in gl1.3, deprecated in gl3.2
    public z_MultiTexCoord2s_adr := GetFuncAdr('glMultiTexCoord2s');
    public z_MultiTexCoord2s_ovr_0 := GetFuncOrNil&<procedure(target: TextureUnit; s: Int16; t: Int16)>(z_MultiTexCoord2s_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiTexCoord2s(target: TextureUnit; s: Int16; t: Int16);
    begin
      z_MultiTexCoord2s_ovr_0(target, s, t);
    end;
    
    // added in gl1.3, deprecated in gl3.2
    public z_MultiTexCoord2sv_adr := GetFuncAdr('glMultiTexCoord2sv');
    public z_MultiTexCoord2sv_ovr_0 := GetFuncOrNil&<procedure(target: TextureUnit; var v: Int16)>(z_MultiTexCoord2sv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiTexCoord2sv(target: TextureUnit; v: array of Int16);
    begin
      z_MultiTexCoord2sv_ovr_0(target, v[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiTexCoord2sv(target: TextureUnit; var v: Int16);
    begin
      z_MultiTexCoord2sv_ovr_0(target, v);
    end;
    public z_MultiTexCoord2sv_ovr_2 := GetFuncOrNil&<procedure(target: TextureUnit; v: IntPtr)>(z_MultiTexCoord2sv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiTexCoord2sv(target: TextureUnit; v: IntPtr);
    begin
      z_MultiTexCoord2sv_ovr_2(target, v);
    end;
    
    // added in gl1.3, deprecated in gl3.2
    public z_MultiTexCoord3d_adr := GetFuncAdr('glMultiTexCoord3d');
    public z_MultiTexCoord3d_ovr_0 := GetFuncOrNil&<procedure(target: TextureUnit; s: real; t: real; r: real)>(z_MultiTexCoord3d_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiTexCoord3d(target: TextureUnit; s: real; t: real; r: real);
    begin
      z_MultiTexCoord3d_ovr_0(target, s, t, r);
    end;
    
    // added in gl1.3, deprecated in gl3.2
    public z_MultiTexCoord3dv_adr := GetFuncAdr('glMultiTexCoord3dv');
    public z_MultiTexCoord3dv_ovr_0 := GetFuncOrNil&<procedure(target: TextureUnit; var v: real)>(z_MultiTexCoord3dv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiTexCoord3dv(target: TextureUnit; v: array of real);
    begin
      z_MultiTexCoord3dv_ovr_0(target, v[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiTexCoord3dv(target: TextureUnit; var v: real);
    begin
      z_MultiTexCoord3dv_ovr_0(target, v);
    end;
    public z_MultiTexCoord3dv_ovr_2 := GetFuncOrNil&<procedure(target: TextureUnit; v: IntPtr)>(z_MultiTexCoord3dv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiTexCoord3dv(target: TextureUnit; v: IntPtr);
    begin
      z_MultiTexCoord3dv_ovr_2(target, v);
    end;
    
    // added in gl1.3, deprecated in gl3.2
    public z_MultiTexCoord3f_adr := GetFuncAdr('glMultiTexCoord3f');
    public z_MultiTexCoord3f_ovr_0 := GetFuncOrNil&<procedure(target: TextureUnit; s: single; t: single; r: single)>(z_MultiTexCoord3f_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiTexCoord3f(target: TextureUnit; s: single; t: single; r: single);
    begin
      z_MultiTexCoord3f_ovr_0(target, s, t, r);
    end;
    
    // added in gl1.3, deprecated in gl3.2
    public z_MultiTexCoord3fv_adr := GetFuncAdr('glMultiTexCoord3fv');
    public z_MultiTexCoord3fv_ovr_0 := GetFuncOrNil&<procedure(target: TextureUnit; var v: single)>(z_MultiTexCoord3fv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiTexCoord3fv(target: TextureUnit; v: array of single);
    begin
      z_MultiTexCoord3fv_ovr_0(target, v[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiTexCoord3fv(target: TextureUnit; var v: single);
    begin
      z_MultiTexCoord3fv_ovr_0(target, v);
    end;
    public z_MultiTexCoord3fv_ovr_2 := GetFuncOrNil&<procedure(target: TextureUnit; v: IntPtr)>(z_MultiTexCoord3fv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiTexCoord3fv(target: TextureUnit; v: IntPtr);
    begin
      z_MultiTexCoord3fv_ovr_2(target, v);
    end;
    
    // added in gl1.3, deprecated in gl3.2
    public z_MultiTexCoord3i_adr := GetFuncAdr('glMultiTexCoord3i');
    public z_MultiTexCoord3i_ovr_0 := GetFuncOrNil&<procedure(target: TextureUnit; s: Int32; t: Int32; r: Int32)>(z_MultiTexCoord3i_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiTexCoord3i(target: TextureUnit; s: Int32; t: Int32; r: Int32);
    begin
      z_MultiTexCoord3i_ovr_0(target, s, t, r);
    end;
    
    // added in gl1.3, deprecated in gl3.2
    public z_MultiTexCoord3iv_adr := GetFuncAdr('glMultiTexCoord3iv');
    public z_MultiTexCoord3iv_ovr_0 := GetFuncOrNil&<procedure(target: TextureUnit; var v: Int32)>(z_MultiTexCoord3iv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiTexCoord3iv(target: TextureUnit; v: array of Int32);
    begin
      z_MultiTexCoord3iv_ovr_0(target, v[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiTexCoord3iv(target: TextureUnit; var v: Int32);
    begin
      z_MultiTexCoord3iv_ovr_0(target, v);
    end;
    public z_MultiTexCoord3iv_ovr_2 := GetFuncOrNil&<procedure(target: TextureUnit; v: IntPtr)>(z_MultiTexCoord3iv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiTexCoord3iv(target: TextureUnit; v: IntPtr);
    begin
      z_MultiTexCoord3iv_ovr_2(target, v);
    end;
    
    // added in gl1.3, deprecated in gl3.2
    public z_MultiTexCoord3s_adr := GetFuncAdr('glMultiTexCoord3s');
    public z_MultiTexCoord3s_ovr_0 := GetFuncOrNil&<procedure(target: TextureUnit; s: Int16; t: Int16; r: Int16)>(z_MultiTexCoord3s_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiTexCoord3s(target: TextureUnit; s: Int16; t: Int16; r: Int16);
    begin
      z_MultiTexCoord3s_ovr_0(target, s, t, r);
    end;
    
    // added in gl1.3, deprecated in gl3.2
    public z_MultiTexCoord3sv_adr := GetFuncAdr('glMultiTexCoord3sv');
    public z_MultiTexCoord3sv_ovr_0 := GetFuncOrNil&<procedure(target: TextureUnit; var v: Int16)>(z_MultiTexCoord3sv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiTexCoord3sv(target: TextureUnit; v: array of Int16);
    begin
      z_MultiTexCoord3sv_ovr_0(target, v[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiTexCoord3sv(target: TextureUnit; var v: Int16);
    begin
      z_MultiTexCoord3sv_ovr_0(target, v);
    end;
    public z_MultiTexCoord3sv_ovr_2 := GetFuncOrNil&<procedure(target: TextureUnit; v: IntPtr)>(z_MultiTexCoord3sv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiTexCoord3sv(target: TextureUnit; v: IntPtr);
    begin
      z_MultiTexCoord3sv_ovr_2(target, v);
    end;
    
    // added in gl1.3, deprecated in gl3.2
    public z_MultiTexCoord4d_adr := GetFuncAdr('glMultiTexCoord4d');
    public z_MultiTexCoord4d_ovr_0 := GetFuncOrNil&<procedure(target: TextureUnit; s: real; t: real; r: real; q: real)>(z_MultiTexCoord4d_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiTexCoord4d(target: TextureUnit; s: real; t: real; r: real; q: real);
    begin
      z_MultiTexCoord4d_ovr_0(target, s, t, r, q);
    end;
    
    // added in gl1.3, deprecated in gl3.2
    public z_MultiTexCoord4dv_adr := GetFuncAdr('glMultiTexCoord4dv');
    public z_MultiTexCoord4dv_ovr_0 := GetFuncOrNil&<procedure(target: TextureUnit; var v: real)>(z_MultiTexCoord4dv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiTexCoord4dv(target: TextureUnit; v: array of real);
    begin
      z_MultiTexCoord4dv_ovr_0(target, v[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiTexCoord4dv(target: TextureUnit; var v: real);
    begin
      z_MultiTexCoord4dv_ovr_0(target, v);
    end;
    public z_MultiTexCoord4dv_ovr_2 := GetFuncOrNil&<procedure(target: TextureUnit; v: IntPtr)>(z_MultiTexCoord4dv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiTexCoord4dv(target: TextureUnit; v: IntPtr);
    begin
      z_MultiTexCoord4dv_ovr_2(target, v);
    end;
    
    // added in gl1.3, deprecated in gl3.2
    public z_MultiTexCoord4f_adr := GetFuncAdr('glMultiTexCoord4f');
    public z_MultiTexCoord4f_ovr_0 := GetFuncOrNil&<procedure(target: TextureUnit; s: single; t: single; r: single; q: single)>(z_MultiTexCoord4f_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiTexCoord4f(target: TextureUnit; s: single; t: single; r: single; q: single);
    begin
      z_MultiTexCoord4f_ovr_0(target, s, t, r, q);
    end;
    
    // added in gl1.3, deprecated in gl3.2
    public z_MultiTexCoord4fv_adr := GetFuncAdr('glMultiTexCoord4fv');
    public z_MultiTexCoord4fv_ovr_0 := GetFuncOrNil&<procedure(target: TextureUnit; var v: single)>(z_MultiTexCoord4fv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiTexCoord4fv(target: TextureUnit; v: array of single);
    begin
      z_MultiTexCoord4fv_ovr_0(target, v[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiTexCoord4fv(target: TextureUnit; var v: single);
    begin
      z_MultiTexCoord4fv_ovr_0(target, v);
    end;
    public z_MultiTexCoord4fv_ovr_2 := GetFuncOrNil&<procedure(target: TextureUnit; v: IntPtr)>(z_MultiTexCoord4fv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiTexCoord4fv(target: TextureUnit; v: IntPtr);
    begin
      z_MultiTexCoord4fv_ovr_2(target, v);
    end;
    
    // added in gl1.3, deprecated in gl3.2
    public z_MultiTexCoord4i_adr := GetFuncAdr('glMultiTexCoord4i');
    public z_MultiTexCoord4i_ovr_0 := GetFuncOrNil&<procedure(target: TextureUnit; s: Int32; t: Int32; r: Int32; q: Int32)>(z_MultiTexCoord4i_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiTexCoord4i(target: TextureUnit; s: Int32; t: Int32; r: Int32; q: Int32);
    begin
      z_MultiTexCoord4i_ovr_0(target, s, t, r, q);
    end;
    
    // added in gl1.3, deprecated in gl3.2
    public z_MultiTexCoord4iv_adr := GetFuncAdr('glMultiTexCoord4iv');
    public z_MultiTexCoord4iv_ovr_0 := GetFuncOrNil&<procedure(target: TextureUnit; var v: Int32)>(z_MultiTexCoord4iv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiTexCoord4iv(target: TextureUnit; v: array of Int32);
    begin
      z_MultiTexCoord4iv_ovr_0(target, v[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiTexCoord4iv(target: TextureUnit; var v: Int32);
    begin
      z_MultiTexCoord4iv_ovr_0(target, v);
    end;
    public z_MultiTexCoord4iv_ovr_2 := GetFuncOrNil&<procedure(target: TextureUnit; v: IntPtr)>(z_MultiTexCoord4iv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiTexCoord4iv(target: TextureUnit; v: IntPtr);
    begin
      z_MultiTexCoord4iv_ovr_2(target, v);
    end;
    
    // added in gl1.3, deprecated in gl3.2
    public z_MultiTexCoord4s_adr := GetFuncAdr('glMultiTexCoord4s');
    public z_MultiTexCoord4s_ovr_0 := GetFuncOrNil&<procedure(target: TextureUnit; s: Int16; t: Int16; r: Int16; q: Int16)>(z_MultiTexCoord4s_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiTexCoord4s(target: TextureUnit; s: Int16; t: Int16; r: Int16; q: Int16);
    begin
      z_MultiTexCoord4s_ovr_0(target, s, t, r, q);
    end;
    
    // added in gl1.3, deprecated in gl3.2
    public z_MultiTexCoord4sv_adr := GetFuncAdr('glMultiTexCoord4sv');
    public z_MultiTexCoord4sv_ovr_0 := GetFuncOrNil&<procedure(target: TextureUnit; var v: Int16)>(z_MultiTexCoord4sv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiTexCoord4sv(target: TextureUnit; v: array of Int16);
    begin
      z_MultiTexCoord4sv_ovr_0(target, v[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiTexCoord4sv(target: TextureUnit; var v: Int16);
    begin
      z_MultiTexCoord4sv_ovr_0(target, v);
    end;
    public z_MultiTexCoord4sv_ovr_2 := GetFuncOrNil&<procedure(target: TextureUnit; v: IntPtr)>(z_MultiTexCoord4sv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiTexCoord4sv(target: TextureUnit; v: IntPtr);
    begin
      z_MultiTexCoord4sv_ovr_2(target, v);
    end;
    
    // added in gl1.0, deprecated in gl3.2
    public static procedure z_MultMatrixd([MarshalAs(UnmanagedType.LPArray)] m: array of real);
    external 'opengl32.dll' name 'glMultMatrixd';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultMatrixd(m: array of real) := z_MultMatrixd;
    public static procedure z_MultMatrixd(var m: real);
    external 'opengl32.dll' name 'glMultMatrixd';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultMatrixd(var m: real) := z_MultMatrixd;
    public static procedure z_MultMatrixd(m: IntPtr);
    external 'opengl32.dll' name 'glMultMatrixd';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultMatrixd(m: IntPtr) := z_MultMatrixd;
    
    // added in gl1.0, deprecated in gl3.2
    public static procedure z_MultMatrixf([MarshalAs(UnmanagedType.LPArray)] m: array of single);
    external 'opengl32.dll' name 'glMultMatrixf';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultMatrixf(m: array of single) := z_MultMatrixf;
    public static procedure z_MultMatrixf(var m: single);
    external 'opengl32.dll' name 'glMultMatrixf';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultMatrixf(var m: single) := z_MultMatrixf;
    public static procedure z_MultMatrixf(m: IntPtr);
    external 'opengl32.dll' name 'glMultMatrixf';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultMatrixf(m: IntPtr) := z_MultMatrixf;
    
    // added in gl1.3, deprecated in gl3.2
    public z_MultTransposeMatrixd_adr := GetFuncAdr('glMultTransposeMatrixd');
    public z_MultTransposeMatrixd_ovr_0 := GetFuncOrNil&<procedure(var m: real)>(z_MultTransposeMatrixd_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultTransposeMatrixd(m: array of real);
    begin
      z_MultTransposeMatrixd_ovr_0(m[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultTransposeMatrixd(var m: real);
    begin
      z_MultTransposeMatrixd_ovr_0(m);
    end;
    public z_MultTransposeMatrixd_ovr_2 := GetFuncOrNil&<procedure(m: IntPtr)>(z_MultTransposeMatrixd_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultTransposeMatrixd(m: IntPtr);
    begin
      z_MultTransposeMatrixd_ovr_2(m);
    end;
    
    // added in gl1.3, deprecated in gl3.2
    public z_MultTransposeMatrixf_adr := GetFuncAdr('glMultTransposeMatrixf');
    public z_MultTransposeMatrixf_ovr_0 := GetFuncOrNil&<procedure(var m: single)>(z_MultTransposeMatrixf_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultTransposeMatrixf(m: array of single);
    begin
      z_MultTransposeMatrixf_ovr_0(m[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultTransposeMatrixf(var m: single);
    begin
      z_MultTransposeMatrixf_ovr_0(m);
    end;
    public z_MultTransposeMatrixf_ovr_2 := GetFuncOrNil&<procedure(m: IntPtr)>(z_MultTransposeMatrixf_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultTransposeMatrixf(m: IntPtr);
    begin
      z_MultTransposeMatrixf_ovr_2(m);
    end;
    
    // added in gl1.0, deprecated in gl3.2
    public static procedure z_NewList(list: UInt32; mode: ListMode);
    external 'opengl32.dll' name 'glNewList';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure NewList(list: UInt32; mode: ListMode) := z_NewList;
    
    // added in gl1.0, deprecated in gl3.2
    public static procedure z_Normal3b(nx: SByte; ny: SByte; nz: SByte);
    external 'opengl32.dll' name 'glNormal3b';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Normal3b(nx: SByte; ny: SByte; nz: SByte) := z_Normal3b;
    
    // added in gl1.0, deprecated in gl3.2
    public static procedure z_Normal3bv([MarshalAs(UnmanagedType.LPArray)] v: array of SByte);
    external 'opengl32.dll' name 'glNormal3bv';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Normal3bv(v: array of SByte) := z_Normal3bv;
    public static procedure z_Normal3bv(var v: SByte);
    external 'opengl32.dll' name 'glNormal3bv';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Normal3bv(var v: SByte) := z_Normal3bv;
    public static procedure z_Normal3bv(v: IntPtr);
    external 'opengl32.dll' name 'glNormal3bv';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Normal3bv(v: IntPtr) := z_Normal3bv;
    
    // added in gl1.0, deprecated in gl3.2
    public static procedure z_Normal3d(nx: real; ny: real; nz: real);
    external 'opengl32.dll' name 'glNormal3d';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Normal3d(nx: real; ny: real; nz: real) := z_Normal3d;
    
    // added in gl1.0, deprecated in gl3.2
    public static procedure z_Normal3dv([MarshalAs(UnmanagedType.LPArray)] v: array of real);
    external 'opengl32.dll' name 'glNormal3dv';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Normal3dv(v: array of real) := z_Normal3dv;
    public static procedure z_Normal3dv(var v: real);
    external 'opengl32.dll' name 'glNormal3dv';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Normal3dv(var v: real) := z_Normal3dv;
    public static procedure z_Normal3dv(v: IntPtr);
    external 'opengl32.dll' name 'glNormal3dv';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Normal3dv(v: IntPtr) := z_Normal3dv;
    
    // added in gl1.0, deprecated in gl3.2
    public static procedure z_Normal3f(nx: single; ny: single; nz: single);
    external 'opengl32.dll' name 'glNormal3f';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Normal3f(nx: single; ny: single; nz: single) := z_Normal3f;
    
    // added in gl1.0, deprecated in gl3.2
    public static procedure z_Normal3fv([MarshalAs(UnmanagedType.LPArray)] v: array of single);
    external 'opengl32.dll' name 'glNormal3fv';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Normal3fv(v: array of single) := z_Normal3fv;
    public static procedure z_Normal3fv(var v: single);
    external 'opengl32.dll' name 'glNormal3fv';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Normal3fv(var v: single) := z_Normal3fv;
    public static procedure z_Normal3fv(v: IntPtr);
    external 'opengl32.dll' name 'glNormal3fv';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Normal3fv(v: IntPtr) := z_Normal3fv;
    
    // added in gl1.0, deprecated in gl3.2
    public static procedure z_Normal3i(nx: Int32; ny: Int32; nz: Int32);
    external 'opengl32.dll' name 'glNormal3i';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Normal3i(nx: Int32; ny: Int32; nz: Int32) := z_Normal3i;
    
    // added in gl1.0, deprecated in gl3.2
    public static procedure z_Normal3iv([MarshalAs(UnmanagedType.LPArray)] v: array of Int32);
    external 'opengl32.dll' name 'glNormal3iv';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Normal3iv(v: array of Int32) := z_Normal3iv;
    public static procedure z_Normal3iv(var v: Int32);
    external 'opengl32.dll' name 'glNormal3iv';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Normal3iv(var v: Int32) := z_Normal3iv;
    public static procedure z_Normal3iv(v: IntPtr);
    external 'opengl32.dll' name 'glNormal3iv';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Normal3iv(v: IntPtr) := z_Normal3iv;
    
    // added in gl1.0, deprecated in gl3.2
    public static procedure z_Normal3s(nx: Int16; ny: Int16; nz: Int16);
    external 'opengl32.dll' name 'glNormal3s';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Normal3s(nx: Int16; ny: Int16; nz: Int16) := z_Normal3s;
    
    // added in gl1.0, deprecated in gl3.2
    public static procedure z_Normal3sv([MarshalAs(UnmanagedType.LPArray)] v: array of Int16);
    external 'opengl32.dll' name 'glNormal3sv';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Normal3sv(v: array of Int16) := z_Normal3sv;
    public static procedure z_Normal3sv(var v: Int16);
    external 'opengl32.dll' name 'glNormal3sv';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Normal3sv(var v: Int16) := z_Normal3sv;
    public static procedure z_Normal3sv(v: IntPtr);
    external 'opengl32.dll' name 'glNormal3sv';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Normal3sv(v: IntPtr) := z_Normal3sv;
    
    // added in gl1.1, deprecated in gl3.2
    public static procedure z_NormalPointer(type: NormalPointerType; stride: Int32; pointer: IntPtr);
    external 'opengl32.dll' name 'glNormalPointer';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure NormalPointer(type: NormalPointerType; stride: Int32; pointer: IntPtr) := z_NormalPointer;
    
    // added in gl1.0, deprecated in gl3.2
    public static procedure z_Ortho(left: real; right: real; bottom: real; top: real; zNear: real; zFar: real);
    external 'opengl32.dll' name 'glOrtho';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Ortho(left: real; right: real; bottom: real; top: real; zNear: real; zFar: real) := z_Ortho;
    
    // added in gl1.0, deprecated in gl3.2
    public static procedure z_PassThrough(token: single);
    external 'opengl32.dll' name 'glPassThrough';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure PassThrough(token: single) := z_PassThrough;
    
    // added in gl1.0, deprecated in gl3.2
    public static procedure z_PixelMapfv(map: PixelMap; mapsize: Int32; [MarshalAs(UnmanagedType.LPArray)] values: array of single);
    external 'opengl32.dll' name 'glPixelMapfv';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure PixelMapfv(map: PixelMap; mapsize: Int32; values: array of single) := z_PixelMapfv;
    public static procedure z_PixelMapfv(map: PixelMap; mapsize: Int32; var values: single);
    external 'opengl32.dll' name 'glPixelMapfv';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure PixelMapfv(map: PixelMap; mapsize: Int32; var values: single) := z_PixelMapfv;
    public static procedure z_PixelMapfv(map: PixelMap; mapsize: Int32; values: IntPtr);
    external 'opengl32.dll' name 'glPixelMapfv';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure PixelMapfv(map: PixelMap; mapsize: Int32; values: IntPtr) := z_PixelMapfv;
    
    // added in gl1.0, deprecated in gl3.2
    public static procedure z_PixelMapuiv(map: PixelMap; mapsize: Int32; [MarshalAs(UnmanagedType.LPArray)] values: array of UInt32);
    external 'opengl32.dll' name 'glPixelMapuiv';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure PixelMapuiv(map: PixelMap; mapsize: Int32; values: array of UInt32) := z_PixelMapuiv;
    public static procedure z_PixelMapuiv(map: PixelMap; mapsize: Int32; var values: UInt32);
    external 'opengl32.dll' name 'glPixelMapuiv';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure PixelMapuiv(map: PixelMap; mapsize: Int32; var values: UInt32) := z_PixelMapuiv;
    public static procedure z_PixelMapuiv(map: PixelMap; mapsize: Int32; values: IntPtr);
    external 'opengl32.dll' name 'glPixelMapuiv';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure PixelMapuiv(map: PixelMap; mapsize: Int32; values: IntPtr) := z_PixelMapuiv;
    
    // added in gl1.0, deprecated in gl3.2
    public static procedure z_PixelMapusv(map: PixelMap; mapsize: Int32; [MarshalAs(UnmanagedType.LPArray)] values: array of UInt16);
    external 'opengl32.dll' name 'glPixelMapusv';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure PixelMapusv(map: PixelMap; mapsize: Int32; values: array of UInt16) := z_PixelMapusv;
    public static procedure z_PixelMapusv(map: PixelMap; mapsize: Int32; var values: UInt16);
    external 'opengl32.dll' name 'glPixelMapusv';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure PixelMapusv(map: PixelMap; mapsize: Int32; var values: UInt16) := z_PixelMapusv;
    public static procedure z_PixelMapusv(map: PixelMap; mapsize: Int32; values: IntPtr);
    external 'opengl32.dll' name 'glPixelMapusv';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure PixelMapusv(map: PixelMap; mapsize: Int32; values: IntPtr) := z_PixelMapusv;
    
    // added in gl1.0, deprecated in gl3.2
    public static procedure z_PixelTransferf(pname: PixelTransferParameter; param: single);
    external 'opengl32.dll' name 'glPixelTransferf';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure PixelTransferf(pname: PixelTransferParameter; param: single) := z_PixelTransferf;
    
    // added in gl1.0, deprecated in gl3.2
    public static procedure z_PixelTransferi(pname: PixelTransferParameter; param: Int32);
    external 'opengl32.dll' name 'glPixelTransferi';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure PixelTransferi(pname: PixelTransferParameter; param: Int32) := z_PixelTransferi;
    
    // added in gl1.0, deprecated in gl3.2
    public static procedure z_PixelZoom(xfactor: single; yfactor: single);
    external 'opengl32.dll' name 'glPixelZoom';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure PixelZoom(xfactor: single; yfactor: single) := z_PixelZoom;
    
    // added in gl1.0, deprecated in gl3.2
    public static procedure z_PolygonStipple([MarshalAs(UnmanagedType.LPArray)] mask: array of Byte);
    external 'opengl32.dll' name 'glPolygonStipple';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure PolygonStipple(mask: array of Byte) := z_PolygonStipple;
    public static procedure z_PolygonStipple(var mask: Byte);
    external 'opengl32.dll' name 'glPolygonStipple';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure PolygonStipple(var mask: Byte) := z_PolygonStipple;
    public static procedure z_PolygonStipple(mask: IntPtr);
    external 'opengl32.dll' name 'glPolygonStipple';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure PolygonStipple(mask: IntPtr) := z_PolygonStipple;
    
    // added in gl1.0, deprecated in gl3.2
    public static procedure z_PopAttrib;
    external 'opengl32.dll' name 'glPopAttrib';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure PopAttrib := z_PopAttrib;
    
    // added in gl1.1, deprecated in gl3.2
    public static procedure z_PopClientAttrib;
    external 'opengl32.dll' name 'glPopClientAttrib';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure PopClientAttrib := z_PopClientAttrib;
    
    // added in gl1.0, deprecated in gl3.2
    public static procedure z_PopMatrix;
    external 'opengl32.dll' name 'glPopMatrix';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure PopMatrix := z_PopMatrix;
    
    // added in gl1.0, deprecated in gl3.2
    public static procedure z_PopName;
    external 'opengl32.dll' name 'glPopName';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure PopName := z_PopName;
    
    // added in gl1.1, deprecated in gl3.2
    public static procedure z_PrioritizeTextures(n: Int32; [MarshalAs(UnmanagedType.LPArray)] textures: array of UInt32; [MarshalAs(UnmanagedType.LPArray)] priorities: array of single);
    external 'opengl32.dll' name 'glPrioritizeTextures';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure PrioritizeTextures(n: Int32; textures: array of UInt32; priorities: array of single) := z_PrioritizeTextures;
    public static procedure z_PrioritizeTextures(n: Int32; [MarshalAs(UnmanagedType.LPArray)] textures: array of UInt32; var priorities: single);
    external 'opengl32.dll' name 'glPrioritizeTextures';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure PrioritizeTextures(n: Int32; textures: array of UInt32; var priorities: single) := z_PrioritizeTextures;
    public static procedure z_PrioritizeTextures(n: Int32; [MarshalAs(UnmanagedType.LPArray)] textures: array of UInt32; priorities: IntPtr);
    external 'opengl32.dll' name 'glPrioritizeTextures';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure PrioritizeTextures(n: Int32; textures: array of UInt32; priorities: IntPtr) := z_PrioritizeTextures;
    public static procedure z_PrioritizeTextures(n: Int32; var textures: UInt32; [MarshalAs(UnmanagedType.LPArray)] priorities: array of single);
    external 'opengl32.dll' name 'glPrioritizeTextures';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure PrioritizeTextures(n: Int32; var textures: UInt32; priorities: array of single) := z_PrioritizeTextures;
    public static procedure z_PrioritizeTextures(n: Int32; var textures: UInt32; var priorities: single);
    external 'opengl32.dll' name 'glPrioritizeTextures';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure PrioritizeTextures(n: Int32; var textures: UInt32; var priorities: single) := z_PrioritizeTextures;
    public static procedure z_PrioritizeTextures(n: Int32; var textures: UInt32; priorities: IntPtr);
    external 'opengl32.dll' name 'glPrioritizeTextures';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure PrioritizeTextures(n: Int32; var textures: UInt32; priorities: IntPtr) := z_PrioritizeTextures;
    public static procedure z_PrioritizeTextures(n: Int32; textures: IntPtr; [MarshalAs(UnmanagedType.LPArray)] priorities: array of single);
    external 'opengl32.dll' name 'glPrioritizeTextures';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure PrioritizeTextures(n: Int32; textures: IntPtr; priorities: array of single) := z_PrioritizeTextures;
    public static procedure z_PrioritizeTextures(n: Int32; textures: IntPtr; var priorities: single);
    external 'opengl32.dll' name 'glPrioritizeTextures';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure PrioritizeTextures(n: Int32; textures: IntPtr; var priorities: single) := z_PrioritizeTextures;
    public static procedure z_PrioritizeTextures(n: Int32; textures: IntPtr; priorities: IntPtr);
    external 'opengl32.dll' name 'glPrioritizeTextures';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure PrioritizeTextures(n: Int32; textures: IntPtr; priorities: IntPtr) := z_PrioritizeTextures;
    
    // added in gl1.0, deprecated in gl3.2
    public static procedure z_PushAttrib(mask: AttribMask);
    external 'opengl32.dll' name 'glPushAttrib';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure PushAttrib(mask: AttribMask) := z_PushAttrib;
    
    // added in gl1.1, deprecated in gl3.2
    public static procedure z_PushClientAttrib(mask: ClientAttribMask);
    external 'opengl32.dll' name 'glPushClientAttrib';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure PushClientAttrib(mask: ClientAttribMask) := z_PushClientAttrib;
    
    // added in gl1.0, deprecated in gl3.2
    public static procedure z_PushMatrix;
    external 'opengl32.dll' name 'glPushMatrix';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure PushMatrix := z_PushMatrix;
    
    // added in gl1.0, deprecated in gl3.2
    public static procedure z_PushName(name: UInt32);
    external 'opengl32.dll' name 'glPushName';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure PushName(name: UInt32) := z_PushName;
    
    // added in gl1.0, deprecated in gl3.2
    public static procedure z_RasterPos2d(x: real; y: real);
    external 'opengl32.dll' name 'glRasterPos2d';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure RasterPos2d(x: real; y: real) := z_RasterPos2d;
    
    // added in gl1.0, deprecated in gl3.2
    public static procedure z_RasterPos2dv([MarshalAs(UnmanagedType.LPArray)] v: array of real);
    external 'opengl32.dll' name 'glRasterPos2dv';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure RasterPos2dv(v: array of real) := z_RasterPos2dv;
    public static procedure z_RasterPos2dv(var v: real);
    external 'opengl32.dll' name 'glRasterPos2dv';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure RasterPos2dv(var v: real) := z_RasterPos2dv;
    public static procedure z_RasterPos2dv(v: IntPtr);
    external 'opengl32.dll' name 'glRasterPos2dv';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure RasterPos2dv(v: IntPtr) := z_RasterPos2dv;
    
    // added in gl1.0, deprecated in gl3.2
    public static procedure z_RasterPos2f(x: single; y: single);
    external 'opengl32.dll' name 'glRasterPos2f';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure RasterPos2f(x: single; y: single) := z_RasterPos2f;
    
    // added in gl1.0, deprecated in gl3.2
    public static procedure z_RasterPos2fv([MarshalAs(UnmanagedType.LPArray)] v: array of single);
    external 'opengl32.dll' name 'glRasterPos2fv';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure RasterPos2fv(v: array of single) := z_RasterPos2fv;
    public static procedure z_RasterPos2fv(var v: single);
    external 'opengl32.dll' name 'glRasterPos2fv';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure RasterPos2fv(var v: single) := z_RasterPos2fv;
    public static procedure z_RasterPos2fv(v: IntPtr);
    external 'opengl32.dll' name 'glRasterPos2fv';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure RasterPos2fv(v: IntPtr) := z_RasterPos2fv;
    
    // added in gl1.0, deprecated in gl3.2
    public static procedure z_RasterPos2i(x: Int32; y: Int32);
    external 'opengl32.dll' name 'glRasterPos2i';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure RasterPos2i(x: Int32; y: Int32) := z_RasterPos2i;
    
    // added in gl1.0, deprecated in gl3.2
    public static procedure z_RasterPos2iv([MarshalAs(UnmanagedType.LPArray)] v: array of Int32);
    external 'opengl32.dll' name 'glRasterPos2iv';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure RasterPos2iv(v: array of Int32) := z_RasterPos2iv;
    public static procedure z_RasterPos2iv(var v: Int32);
    external 'opengl32.dll' name 'glRasterPos2iv';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure RasterPos2iv(var v: Int32) := z_RasterPos2iv;
    public static procedure z_RasterPos2iv(v: IntPtr);
    external 'opengl32.dll' name 'glRasterPos2iv';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure RasterPos2iv(v: IntPtr) := z_RasterPos2iv;
    
    // added in gl1.0, deprecated in gl3.2
    public static procedure z_RasterPos2s(x: Int16; y: Int16);
    external 'opengl32.dll' name 'glRasterPos2s';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure RasterPos2s(x: Int16; y: Int16) := z_RasterPos2s;
    
    // added in gl1.0, deprecated in gl3.2
    public static procedure z_RasterPos2sv([MarshalAs(UnmanagedType.LPArray)] v: array of Int16);
    external 'opengl32.dll' name 'glRasterPos2sv';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure RasterPos2sv(v: array of Int16) := z_RasterPos2sv;
    public static procedure z_RasterPos2sv(var v: Int16);
    external 'opengl32.dll' name 'glRasterPos2sv';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure RasterPos2sv(var v: Int16) := z_RasterPos2sv;
    public static procedure z_RasterPos2sv(v: IntPtr);
    external 'opengl32.dll' name 'glRasterPos2sv';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure RasterPos2sv(v: IntPtr) := z_RasterPos2sv;
    
    // added in gl1.0, deprecated in gl3.2
    public static procedure z_RasterPos3d(x: real; y: real; z: real);
    external 'opengl32.dll' name 'glRasterPos3d';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure RasterPos3d(x: real; y: real; z: real) := z_RasterPos3d;
    
    // added in gl1.0, deprecated in gl3.2
    public static procedure z_RasterPos3dv([MarshalAs(UnmanagedType.LPArray)] v: array of real);
    external 'opengl32.dll' name 'glRasterPos3dv';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure RasterPos3dv(v: array of real) := z_RasterPos3dv;
    public static procedure z_RasterPos3dv(var v: real);
    external 'opengl32.dll' name 'glRasterPos3dv';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure RasterPos3dv(var v: real) := z_RasterPos3dv;
    public static procedure z_RasterPos3dv(v: IntPtr);
    external 'opengl32.dll' name 'glRasterPos3dv';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure RasterPos3dv(v: IntPtr) := z_RasterPos3dv;
    
    // added in gl1.0, deprecated in gl3.2
    public static procedure z_RasterPos3f(x: single; y: single; z: single);
    external 'opengl32.dll' name 'glRasterPos3f';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure RasterPos3f(x: single; y: single; z: single) := z_RasterPos3f;
    
    // added in gl1.0, deprecated in gl3.2
    public static procedure z_RasterPos3fv([MarshalAs(UnmanagedType.LPArray)] v: array of single);
    external 'opengl32.dll' name 'glRasterPos3fv';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure RasterPos3fv(v: array of single) := z_RasterPos3fv;
    public static procedure z_RasterPos3fv(var v: single);
    external 'opengl32.dll' name 'glRasterPos3fv';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure RasterPos3fv(var v: single) := z_RasterPos3fv;
    public static procedure z_RasterPos3fv(v: IntPtr);
    external 'opengl32.dll' name 'glRasterPos3fv';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure RasterPos3fv(v: IntPtr) := z_RasterPos3fv;
    
    // added in gl1.0, deprecated in gl3.2
    public static procedure z_RasterPos3i(x: Int32; y: Int32; z: Int32);
    external 'opengl32.dll' name 'glRasterPos3i';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure RasterPos3i(x: Int32; y: Int32; z: Int32) := z_RasterPos3i;
    
    // added in gl1.0, deprecated in gl3.2
    public static procedure z_RasterPos3iv([MarshalAs(UnmanagedType.LPArray)] v: array of Int32);
    external 'opengl32.dll' name 'glRasterPos3iv';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure RasterPos3iv(v: array of Int32) := z_RasterPos3iv;
    public static procedure z_RasterPos3iv(var v: Int32);
    external 'opengl32.dll' name 'glRasterPos3iv';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure RasterPos3iv(var v: Int32) := z_RasterPos3iv;
    public static procedure z_RasterPos3iv(v: IntPtr);
    external 'opengl32.dll' name 'glRasterPos3iv';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure RasterPos3iv(v: IntPtr) := z_RasterPos3iv;
    
    // added in gl1.0, deprecated in gl3.2
    public static procedure z_RasterPos3s(x: Int16; y: Int16; z: Int16);
    external 'opengl32.dll' name 'glRasterPos3s';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure RasterPos3s(x: Int16; y: Int16; z: Int16) := z_RasterPos3s;
    
    // added in gl1.0, deprecated in gl3.2
    public static procedure z_RasterPos3sv([MarshalAs(UnmanagedType.LPArray)] v: array of Int16);
    external 'opengl32.dll' name 'glRasterPos3sv';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure RasterPos3sv(v: array of Int16) := z_RasterPos3sv;
    public static procedure z_RasterPos3sv(var v: Int16);
    external 'opengl32.dll' name 'glRasterPos3sv';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure RasterPos3sv(var v: Int16) := z_RasterPos3sv;
    public static procedure z_RasterPos3sv(v: IntPtr);
    external 'opengl32.dll' name 'glRasterPos3sv';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure RasterPos3sv(v: IntPtr) := z_RasterPos3sv;
    
    // added in gl1.0, deprecated in gl3.2
    public static procedure z_RasterPos4d(x: real; y: real; z: real; w: real);
    external 'opengl32.dll' name 'glRasterPos4d';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure RasterPos4d(x: real; y: real; z: real; w: real) := z_RasterPos4d;
    
    // added in gl1.0, deprecated in gl3.2
    public static procedure z_RasterPos4dv([MarshalAs(UnmanagedType.LPArray)] v: array of real);
    external 'opengl32.dll' name 'glRasterPos4dv';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure RasterPos4dv(v: array of real) := z_RasterPos4dv;
    public static procedure z_RasterPos4dv(var v: real);
    external 'opengl32.dll' name 'glRasterPos4dv';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure RasterPos4dv(var v: real) := z_RasterPos4dv;
    public static procedure z_RasterPos4dv(v: IntPtr);
    external 'opengl32.dll' name 'glRasterPos4dv';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure RasterPos4dv(v: IntPtr) := z_RasterPos4dv;
    
    // added in gl1.0, deprecated in gl3.2
    public static procedure z_RasterPos4f(x: single; y: single; z: single; w: single);
    external 'opengl32.dll' name 'glRasterPos4f';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure RasterPos4f(x: single; y: single; z: single; w: single) := z_RasterPos4f;
    
    // added in gl1.0, deprecated in gl3.2
    public static procedure z_RasterPos4fv([MarshalAs(UnmanagedType.LPArray)] v: array of single);
    external 'opengl32.dll' name 'glRasterPos4fv';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure RasterPos4fv(v: array of single) := z_RasterPos4fv;
    public static procedure z_RasterPos4fv(var v: single);
    external 'opengl32.dll' name 'glRasterPos4fv';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure RasterPos4fv(var v: single) := z_RasterPos4fv;
    public static procedure z_RasterPos4fv(v: IntPtr);
    external 'opengl32.dll' name 'glRasterPos4fv';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure RasterPos4fv(v: IntPtr) := z_RasterPos4fv;
    
    // added in gl1.0, deprecated in gl3.2
    public static procedure z_RasterPos4i(x: Int32; y: Int32; z: Int32; w: Int32);
    external 'opengl32.dll' name 'glRasterPos4i';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure RasterPos4i(x: Int32; y: Int32; z: Int32; w: Int32) := z_RasterPos4i;
    
    // added in gl1.0, deprecated in gl3.2
    public static procedure z_RasterPos4iv([MarshalAs(UnmanagedType.LPArray)] v: array of Int32);
    external 'opengl32.dll' name 'glRasterPos4iv';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure RasterPos4iv(v: array of Int32) := z_RasterPos4iv;
    public static procedure z_RasterPos4iv(var v: Int32);
    external 'opengl32.dll' name 'glRasterPos4iv';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure RasterPos4iv(var v: Int32) := z_RasterPos4iv;
    public static procedure z_RasterPos4iv(v: IntPtr);
    external 'opengl32.dll' name 'glRasterPos4iv';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure RasterPos4iv(v: IntPtr) := z_RasterPos4iv;
    
    // added in gl1.0, deprecated in gl3.2
    public static procedure z_RasterPos4s(x: Int16; y: Int16; z: Int16; w: Int16);
    external 'opengl32.dll' name 'glRasterPos4s';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure RasterPos4s(x: Int16; y: Int16; z: Int16; w: Int16) := z_RasterPos4s;
    
    // added in gl1.0, deprecated in gl3.2
    public static procedure z_RasterPos4sv([MarshalAs(UnmanagedType.LPArray)] v: array of Int16);
    external 'opengl32.dll' name 'glRasterPos4sv';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure RasterPos4sv(v: array of Int16) := z_RasterPos4sv;
    public static procedure z_RasterPos4sv(var v: Int16);
    external 'opengl32.dll' name 'glRasterPos4sv';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure RasterPos4sv(var v: Int16) := z_RasterPos4sv;
    public static procedure z_RasterPos4sv(v: IntPtr);
    external 'opengl32.dll' name 'glRasterPos4sv';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure RasterPos4sv(v: IntPtr) := z_RasterPos4sv;
    
    // added in gl1.0, deprecated in gl3.2
    public static procedure z_Rectd(x1: real; y1: real; x2: real; y2: real);
    external 'opengl32.dll' name 'glRectd';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Rectd(x1: real; y1: real; x2: real; y2: real) := z_Rectd;
    
    // added in gl1.0, deprecated in gl3.2
    public static procedure z_Rectdv([MarshalAs(UnmanagedType.LPArray)] v1: array of real; [MarshalAs(UnmanagedType.LPArray)] v2: array of real);
    external 'opengl32.dll' name 'glRectdv';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Rectdv(v1: array of real; v2: array of real) := z_Rectdv;
    public static procedure z_Rectdv([MarshalAs(UnmanagedType.LPArray)] v1: array of real; var v2: real);
    external 'opengl32.dll' name 'glRectdv';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Rectdv(v1: array of real; var v2: real) := z_Rectdv;
    public static procedure z_Rectdv([MarshalAs(UnmanagedType.LPArray)] v1: array of real; v2: IntPtr);
    external 'opengl32.dll' name 'glRectdv';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Rectdv(v1: array of real; v2: IntPtr) := z_Rectdv;
    public static procedure z_Rectdv(var v1: real; [MarshalAs(UnmanagedType.LPArray)] v2: array of real);
    external 'opengl32.dll' name 'glRectdv';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Rectdv(var v1: real; v2: array of real) := z_Rectdv;
    public static procedure z_Rectdv(var v1: real; var v2: real);
    external 'opengl32.dll' name 'glRectdv';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Rectdv(var v1: real; var v2: real) := z_Rectdv;
    public static procedure z_Rectdv(var v1: real; v2: IntPtr);
    external 'opengl32.dll' name 'glRectdv';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Rectdv(var v1: real; v2: IntPtr) := z_Rectdv;
    public static procedure z_Rectdv(v1: IntPtr; [MarshalAs(UnmanagedType.LPArray)] v2: array of real);
    external 'opengl32.dll' name 'glRectdv';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Rectdv(v1: IntPtr; v2: array of real) := z_Rectdv;
    public static procedure z_Rectdv(v1: IntPtr; var v2: real);
    external 'opengl32.dll' name 'glRectdv';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Rectdv(v1: IntPtr; var v2: real) := z_Rectdv;
    public static procedure z_Rectdv(v1: IntPtr; v2: IntPtr);
    external 'opengl32.dll' name 'glRectdv';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Rectdv(v1: IntPtr; v2: IntPtr) := z_Rectdv;
    
    // added in gl1.0, deprecated in gl3.2
    public static procedure z_Rectf(x1: single; y1: single; x2: single; y2: single);
    external 'opengl32.dll' name 'glRectf';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Rectf(x1: single; y1: single; x2: single; y2: single) := z_Rectf;
    
    // added in gl1.0, deprecated in gl3.2
    public static procedure z_Rectfv([MarshalAs(UnmanagedType.LPArray)] v1: array of single; [MarshalAs(UnmanagedType.LPArray)] v2: array of single);
    external 'opengl32.dll' name 'glRectfv';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Rectfv(v1: array of single; v2: array of single) := z_Rectfv;
    public static procedure z_Rectfv([MarshalAs(UnmanagedType.LPArray)] v1: array of single; var v2: single);
    external 'opengl32.dll' name 'glRectfv';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Rectfv(v1: array of single; var v2: single) := z_Rectfv;
    public static procedure z_Rectfv([MarshalAs(UnmanagedType.LPArray)] v1: array of single; v2: IntPtr);
    external 'opengl32.dll' name 'glRectfv';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Rectfv(v1: array of single; v2: IntPtr) := z_Rectfv;
    public static procedure z_Rectfv(var v1: single; [MarshalAs(UnmanagedType.LPArray)] v2: array of single);
    external 'opengl32.dll' name 'glRectfv';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Rectfv(var v1: single; v2: array of single) := z_Rectfv;
    public static procedure z_Rectfv(var v1: single; var v2: single);
    external 'opengl32.dll' name 'glRectfv';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Rectfv(var v1: single; var v2: single) := z_Rectfv;
    public static procedure z_Rectfv(var v1: single; v2: IntPtr);
    external 'opengl32.dll' name 'glRectfv';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Rectfv(var v1: single; v2: IntPtr) := z_Rectfv;
    public static procedure z_Rectfv(v1: IntPtr; [MarshalAs(UnmanagedType.LPArray)] v2: array of single);
    external 'opengl32.dll' name 'glRectfv';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Rectfv(v1: IntPtr; v2: array of single) := z_Rectfv;
    public static procedure z_Rectfv(v1: IntPtr; var v2: single);
    external 'opengl32.dll' name 'glRectfv';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Rectfv(v1: IntPtr; var v2: single) := z_Rectfv;
    public static procedure z_Rectfv(v1: IntPtr; v2: IntPtr);
    external 'opengl32.dll' name 'glRectfv';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Rectfv(v1: IntPtr; v2: IntPtr) := z_Rectfv;
    
    // added in gl1.0, deprecated in gl3.2
    public static procedure z_Recti(x1: Int32; y1: Int32; x2: Int32; y2: Int32);
    external 'opengl32.dll' name 'glRecti';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Recti(x1: Int32; y1: Int32; x2: Int32; y2: Int32) := z_Recti;
    
    // added in gl1.0, deprecated in gl3.2
    public static procedure z_Rectiv([MarshalAs(UnmanagedType.LPArray)] v1: array of Int32; [MarshalAs(UnmanagedType.LPArray)] v2: array of Int32);
    external 'opengl32.dll' name 'glRectiv';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Rectiv(v1: array of Int32; v2: array of Int32) := z_Rectiv;
    public static procedure z_Rectiv([MarshalAs(UnmanagedType.LPArray)] v1: array of Int32; var v2: Int32);
    external 'opengl32.dll' name 'glRectiv';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Rectiv(v1: array of Int32; var v2: Int32) := z_Rectiv;
    public static procedure z_Rectiv([MarshalAs(UnmanagedType.LPArray)] v1: array of Int32; v2: IntPtr);
    external 'opengl32.dll' name 'glRectiv';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Rectiv(v1: array of Int32; v2: IntPtr) := z_Rectiv;
    public static procedure z_Rectiv(var v1: Int32; [MarshalAs(UnmanagedType.LPArray)] v2: array of Int32);
    external 'opengl32.dll' name 'glRectiv';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Rectiv(var v1: Int32; v2: array of Int32) := z_Rectiv;
    public static procedure z_Rectiv(var v1: Int32; var v2: Int32);
    external 'opengl32.dll' name 'glRectiv';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Rectiv(var v1: Int32; var v2: Int32) := z_Rectiv;
    public static procedure z_Rectiv(var v1: Int32; v2: IntPtr);
    external 'opengl32.dll' name 'glRectiv';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Rectiv(var v1: Int32; v2: IntPtr) := z_Rectiv;
    public static procedure z_Rectiv(v1: IntPtr; [MarshalAs(UnmanagedType.LPArray)] v2: array of Int32);
    external 'opengl32.dll' name 'glRectiv';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Rectiv(v1: IntPtr; v2: array of Int32) := z_Rectiv;
    public static procedure z_Rectiv(v1: IntPtr; var v2: Int32);
    external 'opengl32.dll' name 'glRectiv';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Rectiv(v1: IntPtr; var v2: Int32) := z_Rectiv;
    public static procedure z_Rectiv(v1: IntPtr; v2: IntPtr);
    external 'opengl32.dll' name 'glRectiv';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Rectiv(v1: IntPtr; v2: IntPtr) := z_Rectiv;
    
    // added in gl1.0, deprecated in gl3.2
    public static procedure z_Rects(x1: Int16; y1: Int16; x2: Int16; y2: Int16);
    external 'opengl32.dll' name 'glRects';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Rects(x1: Int16; y1: Int16; x2: Int16; y2: Int16) := z_Rects;
    
    // added in gl1.0, deprecated in gl3.2
    public static procedure z_Rectsv([MarshalAs(UnmanagedType.LPArray)] v1: array of Int16; [MarshalAs(UnmanagedType.LPArray)] v2: array of Int16);
    external 'opengl32.dll' name 'glRectsv';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Rectsv(v1: array of Int16; v2: array of Int16) := z_Rectsv;
    public static procedure z_Rectsv([MarshalAs(UnmanagedType.LPArray)] v1: array of Int16; var v2: Int16);
    external 'opengl32.dll' name 'glRectsv';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Rectsv(v1: array of Int16; var v2: Int16) := z_Rectsv;
    public static procedure z_Rectsv([MarshalAs(UnmanagedType.LPArray)] v1: array of Int16; v2: IntPtr);
    external 'opengl32.dll' name 'glRectsv';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Rectsv(v1: array of Int16; v2: IntPtr) := z_Rectsv;
    public static procedure z_Rectsv(var v1: Int16; [MarshalAs(UnmanagedType.LPArray)] v2: array of Int16);
    external 'opengl32.dll' name 'glRectsv';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Rectsv(var v1: Int16; v2: array of Int16) := z_Rectsv;
    public static procedure z_Rectsv(var v1: Int16; var v2: Int16);
    external 'opengl32.dll' name 'glRectsv';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Rectsv(var v1: Int16; var v2: Int16) := z_Rectsv;
    public static procedure z_Rectsv(var v1: Int16; v2: IntPtr);
    external 'opengl32.dll' name 'glRectsv';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Rectsv(var v1: Int16; v2: IntPtr) := z_Rectsv;
    public static procedure z_Rectsv(v1: IntPtr; [MarshalAs(UnmanagedType.LPArray)] v2: array of Int16);
    external 'opengl32.dll' name 'glRectsv';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Rectsv(v1: IntPtr; v2: array of Int16) := z_Rectsv;
    public static procedure z_Rectsv(v1: IntPtr; var v2: Int16);
    external 'opengl32.dll' name 'glRectsv';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Rectsv(v1: IntPtr; var v2: Int16) := z_Rectsv;
    public static procedure z_Rectsv(v1: IntPtr; v2: IntPtr);
    external 'opengl32.dll' name 'glRectsv';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Rectsv(v1: IntPtr; v2: IntPtr) := z_Rectsv;
    
    // added in gl1.0, deprecated in gl3.2
    public static function z_RenderMode(mode: RenderingMode): Int32;
    external 'opengl32.dll' name 'glRenderMode';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function RenderMode(mode: RenderingMode): Int32 := z_RenderMode;
    
    // added in gl1.0, deprecated in gl3.2
    public static procedure z_Rotated(angle: real; x: real; y: real; z: real);
    external 'opengl32.dll' name 'glRotated';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Rotated(angle: real; x: real; y: real; z: real) := z_Rotated;
    
    // added in gl1.0, deprecated in gl3.2
    public static procedure z_Rotatef(angle: single; x: single; y: single; z: single);
    external 'opengl32.dll' name 'glRotatef';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Rotatef(angle: single; x: single; y: single; z: single) := z_Rotatef;
    
    // added in gl1.0, deprecated in gl3.2
    public static procedure z_Scaled(x: real; y: real; z: real);
    external 'opengl32.dll' name 'glScaled';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Scaled(x: real; y: real; z: real) := z_Scaled;
    
    // added in gl1.0, deprecated in gl3.2
    public static procedure z_Scalef(x: single; y: single; z: single);
    external 'opengl32.dll' name 'glScalef';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Scalef(x: single; y: single; z: single) := z_Scalef;
    
    // added in gl1.4, deprecated in gl3.2
    public z_SecondaryColor3b_adr := GetFuncAdr('glSecondaryColor3b');
    public z_SecondaryColor3b_ovr_0 := GetFuncOrNil&<procedure(red: SByte; green: SByte; blue: SByte)>(z_SecondaryColor3b_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure SecondaryColor3b(red: SByte; green: SByte; blue: SByte);
    begin
      z_SecondaryColor3b_ovr_0(red, green, blue);
    end;
    
    // added in gl1.4, deprecated in gl3.2
    public z_SecondaryColor3bv_adr := GetFuncAdr('glSecondaryColor3bv');
    public z_SecondaryColor3bv_ovr_0 := GetFuncOrNil&<procedure(var v: SByte)>(z_SecondaryColor3bv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure SecondaryColor3bv(v: array of SByte);
    begin
      z_SecondaryColor3bv_ovr_0(v[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure SecondaryColor3bv(var v: SByte);
    begin
      z_SecondaryColor3bv_ovr_0(v);
    end;
    public z_SecondaryColor3bv_ovr_2 := GetFuncOrNil&<procedure(v: IntPtr)>(z_SecondaryColor3bv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure SecondaryColor3bv(v: IntPtr);
    begin
      z_SecondaryColor3bv_ovr_2(v);
    end;
    
    // added in gl1.4, deprecated in gl3.2
    public z_SecondaryColor3d_adr := GetFuncAdr('glSecondaryColor3d');
    public z_SecondaryColor3d_ovr_0 := GetFuncOrNil&<procedure(red: real; green: real; blue: real)>(z_SecondaryColor3d_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure SecondaryColor3d(red: real; green: real; blue: real);
    begin
      z_SecondaryColor3d_ovr_0(red, green, blue);
    end;
    
    // added in gl1.4, deprecated in gl3.2
    public z_SecondaryColor3dv_adr := GetFuncAdr('glSecondaryColor3dv');
    public z_SecondaryColor3dv_ovr_0 := GetFuncOrNil&<procedure(var v: real)>(z_SecondaryColor3dv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure SecondaryColor3dv(v: array of real);
    begin
      z_SecondaryColor3dv_ovr_0(v[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure SecondaryColor3dv(var v: real);
    begin
      z_SecondaryColor3dv_ovr_0(v);
    end;
    public z_SecondaryColor3dv_ovr_2 := GetFuncOrNil&<procedure(v: IntPtr)>(z_SecondaryColor3dv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure SecondaryColor3dv(v: IntPtr);
    begin
      z_SecondaryColor3dv_ovr_2(v);
    end;
    
    // added in gl1.4, deprecated in gl3.2
    public z_SecondaryColor3f_adr := GetFuncAdr('glSecondaryColor3f');
    public z_SecondaryColor3f_ovr_0 := GetFuncOrNil&<procedure(red: single; green: single; blue: single)>(z_SecondaryColor3f_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure SecondaryColor3f(red: single; green: single; blue: single);
    begin
      z_SecondaryColor3f_ovr_0(red, green, blue);
    end;
    
    // added in gl1.4, deprecated in gl3.2
    public z_SecondaryColor3fv_adr := GetFuncAdr('glSecondaryColor3fv');
    public z_SecondaryColor3fv_ovr_0 := GetFuncOrNil&<procedure(var v: single)>(z_SecondaryColor3fv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure SecondaryColor3fv(v: array of single);
    begin
      z_SecondaryColor3fv_ovr_0(v[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure SecondaryColor3fv(var v: single);
    begin
      z_SecondaryColor3fv_ovr_0(v);
    end;
    public z_SecondaryColor3fv_ovr_2 := GetFuncOrNil&<procedure(v: IntPtr)>(z_SecondaryColor3fv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure SecondaryColor3fv(v: IntPtr);
    begin
      z_SecondaryColor3fv_ovr_2(v);
    end;
    
    // added in gl1.4, deprecated in gl3.2
    public z_SecondaryColor3i_adr := GetFuncAdr('glSecondaryColor3i');
    public z_SecondaryColor3i_ovr_0 := GetFuncOrNil&<procedure(red: Int32; green: Int32; blue: Int32)>(z_SecondaryColor3i_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure SecondaryColor3i(red: Int32; green: Int32; blue: Int32);
    begin
      z_SecondaryColor3i_ovr_0(red, green, blue);
    end;
    
    // added in gl1.4, deprecated in gl3.2
    public z_SecondaryColor3iv_adr := GetFuncAdr('glSecondaryColor3iv');
    public z_SecondaryColor3iv_ovr_0 := GetFuncOrNil&<procedure(var v: Int32)>(z_SecondaryColor3iv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure SecondaryColor3iv(v: array of Int32);
    begin
      z_SecondaryColor3iv_ovr_0(v[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure SecondaryColor3iv(var v: Int32);
    begin
      z_SecondaryColor3iv_ovr_0(v);
    end;
    public z_SecondaryColor3iv_ovr_2 := GetFuncOrNil&<procedure(v: IntPtr)>(z_SecondaryColor3iv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure SecondaryColor3iv(v: IntPtr);
    begin
      z_SecondaryColor3iv_ovr_2(v);
    end;
    
    // added in gl1.4, deprecated in gl3.2
    public z_SecondaryColor3s_adr := GetFuncAdr('glSecondaryColor3s');
    public z_SecondaryColor3s_ovr_0 := GetFuncOrNil&<procedure(red: Int16; green: Int16; blue: Int16)>(z_SecondaryColor3s_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure SecondaryColor3s(red: Int16; green: Int16; blue: Int16);
    begin
      z_SecondaryColor3s_ovr_0(red, green, blue);
    end;
    
    // added in gl1.4, deprecated in gl3.2
    public z_SecondaryColor3sv_adr := GetFuncAdr('glSecondaryColor3sv');
    public z_SecondaryColor3sv_ovr_0 := GetFuncOrNil&<procedure(var v: Int16)>(z_SecondaryColor3sv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure SecondaryColor3sv(v: array of Int16);
    begin
      z_SecondaryColor3sv_ovr_0(v[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure SecondaryColor3sv(var v: Int16);
    begin
      z_SecondaryColor3sv_ovr_0(v);
    end;
    public z_SecondaryColor3sv_ovr_2 := GetFuncOrNil&<procedure(v: IntPtr)>(z_SecondaryColor3sv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure SecondaryColor3sv(v: IntPtr);
    begin
      z_SecondaryColor3sv_ovr_2(v);
    end;
    
    // added in gl1.4, deprecated in gl3.2
    public z_SecondaryColor3ub_adr := GetFuncAdr('glSecondaryColor3ub');
    public z_SecondaryColor3ub_ovr_0 := GetFuncOrNil&<procedure(red: Byte; green: Byte; blue: Byte)>(z_SecondaryColor3ub_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure SecondaryColor3ub(red: Byte; green: Byte; blue: Byte);
    begin
      z_SecondaryColor3ub_ovr_0(red, green, blue);
    end;
    
    // added in gl1.4, deprecated in gl3.2
    public z_SecondaryColor3ubv_adr := GetFuncAdr('glSecondaryColor3ubv');
    public z_SecondaryColor3ubv_ovr_0 := GetFuncOrNil&<procedure(var v: Byte)>(z_SecondaryColor3ubv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure SecondaryColor3ubv(v: array of Byte);
    begin
      z_SecondaryColor3ubv_ovr_0(v[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure SecondaryColor3ubv(var v: Byte);
    begin
      z_SecondaryColor3ubv_ovr_0(v);
    end;
    public z_SecondaryColor3ubv_ovr_2 := GetFuncOrNil&<procedure(v: IntPtr)>(z_SecondaryColor3ubv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure SecondaryColor3ubv(v: IntPtr);
    begin
      z_SecondaryColor3ubv_ovr_2(v);
    end;
    
    // added in gl1.4, deprecated in gl3.2
    public z_SecondaryColor3ui_adr := GetFuncAdr('glSecondaryColor3ui');
    public z_SecondaryColor3ui_ovr_0 := GetFuncOrNil&<procedure(red: UInt32; green: UInt32; blue: UInt32)>(z_SecondaryColor3ui_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure SecondaryColor3ui(red: UInt32; green: UInt32; blue: UInt32);
    begin
      z_SecondaryColor3ui_ovr_0(red, green, blue);
    end;
    
    // added in gl1.4, deprecated in gl3.2
    public z_SecondaryColor3uiv_adr := GetFuncAdr('glSecondaryColor3uiv');
    public z_SecondaryColor3uiv_ovr_0 := GetFuncOrNil&<procedure(var v: UInt32)>(z_SecondaryColor3uiv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure SecondaryColor3uiv(v: array of UInt32);
    begin
      z_SecondaryColor3uiv_ovr_0(v[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure SecondaryColor3uiv(var v: UInt32);
    begin
      z_SecondaryColor3uiv_ovr_0(v);
    end;
    public z_SecondaryColor3uiv_ovr_2 := GetFuncOrNil&<procedure(v: IntPtr)>(z_SecondaryColor3uiv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure SecondaryColor3uiv(v: IntPtr);
    begin
      z_SecondaryColor3uiv_ovr_2(v);
    end;
    
    // added in gl1.4, deprecated in gl3.2
    public z_SecondaryColor3us_adr := GetFuncAdr('glSecondaryColor3us');
    public z_SecondaryColor3us_ovr_0 := GetFuncOrNil&<procedure(red: UInt16; green: UInt16; blue: UInt16)>(z_SecondaryColor3us_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure SecondaryColor3us(red: UInt16; green: UInt16; blue: UInt16);
    begin
      z_SecondaryColor3us_ovr_0(red, green, blue);
    end;
    
    // added in gl1.4, deprecated in gl3.2
    public z_SecondaryColor3usv_adr := GetFuncAdr('glSecondaryColor3usv');
    public z_SecondaryColor3usv_ovr_0 := GetFuncOrNil&<procedure(var v: UInt16)>(z_SecondaryColor3usv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure SecondaryColor3usv(v: array of UInt16);
    begin
      z_SecondaryColor3usv_ovr_0(v[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure SecondaryColor3usv(var v: UInt16);
    begin
      z_SecondaryColor3usv_ovr_0(v);
    end;
    public z_SecondaryColor3usv_ovr_2 := GetFuncOrNil&<procedure(v: IntPtr)>(z_SecondaryColor3usv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure SecondaryColor3usv(v: IntPtr);
    begin
      z_SecondaryColor3usv_ovr_2(v);
    end;
    
    // added in gl1.4, deprecated in gl3.2
    public z_SecondaryColorPointer_adr := GetFuncAdr('glSecondaryColorPointer');
    public z_SecondaryColorPointer_ovr_0 := GetFuncOrNil&<procedure(size: Int32; type: ColorPointerType; stride: Int32; pointer: IntPtr)>(z_SecondaryColorPointer_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure SecondaryColorPointer(size: Int32; type: ColorPointerType; stride: Int32; pointer: IntPtr);
    begin
      z_SecondaryColorPointer_ovr_0(size, type, stride, pointer);
    end;
    
    // added in gl1.0, deprecated in gl3.2
    public static procedure z_SelectBuffer(size: Int32; [MarshalAs(UnmanagedType.LPArray)] buffer: array of UInt32);
    external 'opengl32.dll' name 'glSelectBuffer';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure SelectBuffer(size: Int32; buffer: array of UInt32) := z_SelectBuffer;
    public static procedure z_SelectBuffer(size: Int32; var buffer: UInt32);
    external 'opengl32.dll' name 'glSelectBuffer';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure SelectBuffer(size: Int32; var buffer: UInt32) := z_SelectBuffer;
    public static procedure z_SelectBuffer(size: Int32; buffer: IntPtr);
    external 'opengl32.dll' name 'glSelectBuffer';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure SelectBuffer(size: Int32; buffer: IntPtr) := z_SelectBuffer;
    
    // added in gl1.0, deprecated in gl3.2
    public static procedure z_ShadeModel(mode: ShadingModel);
    external 'opengl32.dll' name 'glShadeModel';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ShadeModel(mode: ShadingModel) := z_ShadeModel;
    
    // added in gl1.0, deprecated in gl3.2
    public static procedure z_TexCoord1d(s: real);
    external 'opengl32.dll' name 'glTexCoord1d';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TexCoord1d(s: real) := z_TexCoord1d;
    
    // added in gl1.0, deprecated in gl3.2
    public static procedure z_TexCoord1dv([MarshalAs(UnmanagedType.LPArray)] v: array of real);
    external 'opengl32.dll' name 'glTexCoord1dv';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TexCoord1dv(v: array of real) := z_TexCoord1dv;
    public static procedure z_TexCoord1dv(var v: real);
    external 'opengl32.dll' name 'glTexCoord1dv';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TexCoord1dv(var v: real) := z_TexCoord1dv;
    public static procedure z_TexCoord1dv(v: IntPtr);
    external 'opengl32.dll' name 'glTexCoord1dv';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TexCoord1dv(v: IntPtr) := z_TexCoord1dv;
    
    // added in gl1.0, deprecated in gl3.2
    public static procedure z_TexCoord1f(s: single);
    external 'opengl32.dll' name 'glTexCoord1f';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TexCoord1f(s: single) := z_TexCoord1f;
    
    // added in gl1.0, deprecated in gl3.2
    public static procedure z_TexCoord1fv([MarshalAs(UnmanagedType.LPArray)] v: array of single);
    external 'opengl32.dll' name 'glTexCoord1fv';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TexCoord1fv(v: array of single) := z_TexCoord1fv;
    public static procedure z_TexCoord1fv(var v: single);
    external 'opengl32.dll' name 'glTexCoord1fv';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TexCoord1fv(var v: single) := z_TexCoord1fv;
    public static procedure z_TexCoord1fv(v: IntPtr);
    external 'opengl32.dll' name 'glTexCoord1fv';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TexCoord1fv(v: IntPtr) := z_TexCoord1fv;
    
    // added in gl1.0, deprecated in gl3.2
    public static procedure z_TexCoord1i(s: Int32);
    external 'opengl32.dll' name 'glTexCoord1i';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TexCoord1i(s: Int32) := z_TexCoord1i;
    
    // added in gl1.0, deprecated in gl3.2
    public static procedure z_TexCoord1iv([MarshalAs(UnmanagedType.LPArray)] v: array of Int32);
    external 'opengl32.dll' name 'glTexCoord1iv';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TexCoord1iv(v: array of Int32) := z_TexCoord1iv;
    public static procedure z_TexCoord1iv(var v: Int32);
    external 'opengl32.dll' name 'glTexCoord1iv';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TexCoord1iv(var v: Int32) := z_TexCoord1iv;
    public static procedure z_TexCoord1iv(v: IntPtr);
    external 'opengl32.dll' name 'glTexCoord1iv';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TexCoord1iv(v: IntPtr) := z_TexCoord1iv;
    
    // added in gl1.0, deprecated in gl3.2
    public static procedure z_TexCoord1s(s: Int16);
    external 'opengl32.dll' name 'glTexCoord1s';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TexCoord1s(s: Int16) := z_TexCoord1s;
    
    // added in gl1.0, deprecated in gl3.2
    public static procedure z_TexCoord1sv([MarshalAs(UnmanagedType.LPArray)] v: array of Int16);
    external 'opengl32.dll' name 'glTexCoord1sv';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TexCoord1sv(v: array of Int16) := z_TexCoord1sv;
    public static procedure z_TexCoord1sv(var v: Int16);
    external 'opengl32.dll' name 'glTexCoord1sv';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TexCoord1sv(var v: Int16) := z_TexCoord1sv;
    public static procedure z_TexCoord1sv(v: IntPtr);
    external 'opengl32.dll' name 'glTexCoord1sv';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TexCoord1sv(v: IntPtr) := z_TexCoord1sv;
    
    // added in gl1.0, deprecated in gl3.2
    public static procedure z_TexCoord2d(s: real; t: real);
    external 'opengl32.dll' name 'glTexCoord2d';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TexCoord2d(s: real; t: real) := z_TexCoord2d;
    
    // added in gl1.0, deprecated in gl3.2
    public static procedure z_TexCoord2dv([MarshalAs(UnmanagedType.LPArray)] v: array of real);
    external 'opengl32.dll' name 'glTexCoord2dv';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TexCoord2dv(v: array of real) := z_TexCoord2dv;
    public static procedure z_TexCoord2dv(var v: real);
    external 'opengl32.dll' name 'glTexCoord2dv';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TexCoord2dv(var v: real) := z_TexCoord2dv;
    public static procedure z_TexCoord2dv(v: IntPtr);
    external 'opengl32.dll' name 'glTexCoord2dv';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TexCoord2dv(v: IntPtr) := z_TexCoord2dv;
    
    // added in gl1.0, deprecated in gl3.2
    public static procedure z_TexCoord2f(s: single; t: single);
    external 'opengl32.dll' name 'glTexCoord2f';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TexCoord2f(s: single; t: single) := z_TexCoord2f;
    
    // added in gl1.0, deprecated in gl3.2
    public static procedure z_TexCoord2fv([MarshalAs(UnmanagedType.LPArray)] v: array of single);
    external 'opengl32.dll' name 'glTexCoord2fv';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TexCoord2fv(v: array of single) := z_TexCoord2fv;
    public static procedure z_TexCoord2fv(var v: single);
    external 'opengl32.dll' name 'glTexCoord2fv';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TexCoord2fv(var v: single) := z_TexCoord2fv;
    public static procedure z_TexCoord2fv(v: IntPtr);
    external 'opengl32.dll' name 'glTexCoord2fv';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TexCoord2fv(v: IntPtr) := z_TexCoord2fv;
    
    // added in gl1.0, deprecated in gl3.2
    public static procedure z_TexCoord2i(s: Int32; t: Int32);
    external 'opengl32.dll' name 'glTexCoord2i';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TexCoord2i(s: Int32; t: Int32) := z_TexCoord2i;
    
    // added in gl1.0, deprecated in gl3.2
    public static procedure z_TexCoord2iv([MarshalAs(UnmanagedType.LPArray)] v: array of Int32);
    external 'opengl32.dll' name 'glTexCoord2iv';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TexCoord2iv(v: array of Int32) := z_TexCoord2iv;
    public static procedure z_TexCoord2iv(var v: Int32);
    external 'opengl32.dll' name 'glTexCoord2iv';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TexCoord2iv(var v: Int32) := z_TexCoord2iv;
    public static procedure z_TexCoord2iv(v: IntPtr);
    external 'opengl32.dll' name 'glTexCoord2iv';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TexCoord2iv(v: IntPtr) := z_TexCoord2iv;
    
    // added in gl1.0, deprecated in gl3.2
    public static procedure z_TexCoord2s(s: Int16; t: Int16);
    external 'opengl32.dll' name 'glTexCoord2s';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TexCoord2s(s: Int16; t: Int16) := z_TexCoord2s;
    
    // added in gl1.0, deprecated in gl3.2
    public static procedure z_TexCoord2sv([MarshalAs(UnmanagedType.LPArray)] v: array of Int16);
    external 'opengl32.dll' name 'glTexCoord2sv';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TexCoord2sv(v: array of Int16) := z_TexCoord2sv;
    public static procedure z_TexCoord2sv(var v: Int16);
    external 'opengl32.dll' name 'glTexCoord2sv';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TexCoord2sv(var v: Int16) := z_TexCoord2sv;
    public static procedure z_TexCoord2sv(v: IntPtr);
    external 'opengl32.dll' name 'glTexCoord2sv';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TexCoord2sv(v: IntPtr) := z_TexCoord2sv;
    
    // added in gl1.0, deprecated in gl3.2
    public static procedure z_TexCoord3d(s: real; t: real; r: real);
    external 'opengl32.dll' name 'glTexCoord3d';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TexCoord3d(s: real; t: real; r: real) := z_TexCoord3d;
    
    // added in gl1.0, deprecated in gl3.2
    public static procedure z_TexCoord3dv([MarshalAs(UnmanagedType.LPArray)] v: array of real);
    external 'opengl32.dll' name 'glTexCoord3dv';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TexCoord3dv(v: array of real) := z_TexCoord3dv;
    public static procedure z_TexCoord3dv(var v: real);
    external 'opengl32.dll' name 'glTexCoord3dv';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TexCoord3dv(var v: real) := z_TexCoord3dv;
    public static procedure z_TexCoord3dv(v: IntPtr);
    external 'opengl32.dll' name 'glTexCoord3dv';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TexCoord3dv(v: IntPtr) := z_TexCoord3dv;
    
    // added in gl1.0, deprecated in gl3.2
    public static procedure z_TexCoord3f(s: single; t: single; r: single);
    external 'opengl32.dll' name 'glTexCoord3f';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TexCoord3f(s: single; t: single; r: single) := z_TexCoord3f;
    
    // added in gl1.0, deprecated in gl3.2
    public static procedure z_TexCoord3fv([MarshalAs(UnmanagedType.LPArray)] v: array of single);
    external 'opengl32.dll' name 'glTexCoord3fv';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TexCoord3fv(v: array of single) := z_TexCoord3fv;
    public static procedure z_TexCoord3fv(var v: single);
    external 'opengl32.dll' name 'glTexCoord3fv';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TexCoord3fv(var v: single) := z_TexCoord3fv;
    public static procedure z_TexCoord3fv(v: IntPtr);
    external 'opengl32.dll' name 'glTexCoord3fv';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TexCoord3fv(v: IntPtr) := z_TexCoord3fv;
    
    // added in gl1.0, deprecated in gl3.2
    public static procedure z_TexCoord3i(s: Int32; t: Int32; r: Int32);
    external 'opengl32.dll' name 'glTexCoord3i';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TexCoord3i(s: Int32; t: Int32; r: Int32) := z_TexCoord3i;
    
    // added in gl1.0, deprecated in gl3.2
    public static procedure z_TexCoord3iv([MarshalAs(UnmanagedType.LPArray)] v: array of Int32);
    external 'opengl32.dll' name 'glTexCoord3iv';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TexCoord3iv(v: array of Int32) := z_TexCoord3iv;
    public static procedure z_TexCoord3iv(var v: Int32);
    external 'opengl32.dll' name 'glTexCoord3iv';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TexCoord3iv(var v: Int32) := z_TexCoord3iv;
    public static procedure z_TexCoord3iv(v: IntPtr);
    external 'opengl32.dll' name 'glTexCoord3iv';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TexCoord3iv(v: IntPtr) := z_TexCoord3iv;
    
    // added in gl1.0, deprecated in gl3.2
    public static procedure z_TexCoord3s(s: Int16; t: Int16; r: Int16);
    external 'opengl32.dll' name 'glTexCoord3s';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TexCoord3s(s: Int16; t: Int16; r: Int16) := z_TexCoord3s;
    
    // added in gl1.0, deprecated in gl3.2
    public static procedure z_TexCoord3sv([MarshalAs(UnmanagedType.LPArray)] v: array of Int16);
    external 'opengl32.dll' name 'glTexCoord3sv';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TexCoord3sv(v: array of Int16) := z_TexCoord3sv;
    public static procedure z_TexCoord3sv(var v: Int16);
    external 'opengl32.dll' name 'glTexCoord3sv';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TexCoord3sv(var v: Int16) := z_TexCoord3sv;
    public static procedure z_TexCoord3sv(v: IntPtr);
    external 'opengl32.dll' name 'glTexCoord3sv';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TexCoord3sv(v: IntPtr) := z_TexCoord3sv;
    
    // added in gl1.0, deprecated in gl3.2
    public static procedure z_TexCoord4d(s: real; t: real; r: real; q: real);
    external 'opengl32.dll' name 'glTexCoord4d';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TexCoord4d(s: real; t: real; r: real; q: real) := z_TexCoord4d;
    
    // added in gl1.0, deprecated in gl3.2
    public static procedure z_TexCoord4dv([MarshalAs(UnmanagedType.LPArray)] v: array of real);
    external 'opengl32.dll' name 'glTexCoord4dv';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TexCoord4dv(v: array of real) := z_TexCoord4dv;
    public static procedure z_TexCoord4dv(var v: real);
    external 'opengl32.dll' name 'glTexCoord4dv';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TexCoord4dv(var v: real) := z_TexCoord4dv;
    public static procedure z_TexCoord4dv(v: IntPtr);
    external 'opengl32.dll' name 'glTexCoord4dv';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TexCoord4dv(v: IntPtr) := z_TexCoord4dv;
    
    // added in gl1.0, deprecated in gl3.2
    public static procedure z_TexCoord4f(s: single; t: single; r: single; q: single);
    external 'opengl32.dll' name 'glTexCoord4f';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TexCoord4f(s: single; t: single; r: single; q: single) := z_TexCoord4f;
    
    // added in gl1.0, deprecated in gl3.2
    public static procedure z_TexCoord4fv([MarshalAs(UnmanagedType.LPArray)] v: array of single);
    external 'opengl32.dll' name 'glTexCoord4fv';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TexCoord4fv(v: array of single) := z_TexCoord4fv;
    public static procedure z_TexCoord4fv(var v: single);
    external 'opengl32.dll' name 'glTexCoord4fv';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TexCoord4fv(var v: single) := z_TexCoord4fv;
    public static procedure z_TexCoord4fv(v: IntPtr);
    external 'opengl32.dll' name 'glTexCoord4fv';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TexCoord4fv(v: IntPtr) := z_TexCoord4fv;
    
    // added in gl1.0, deprecated in gl3.2
    public static procedure z_TexCoord4i(s: Int32; t: Int32; r: Int32; q: Int32);
    external 'opengl32.dll' name 'glTexCoord4i';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TexCoord4i(s: Int32; t: Int32; r: Int32; q: Int32) := z_TexCoord4i;
    
    // added in gl1.0, deprecated in gl3.2
    public static procedure z_TexCoord4iv([MarshalAs(UnmanagedType.LPArray)] v: array of Int32);
    external 'opengl32.dll' name 'glTexCoord4iv';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TexCoord4iv(v: array of Int32) := z_TexCoord4iv;
    public static procedure z_TexCoord4iv(var v: Int32);
    external 'opengl32.dll' name 'glTexCoord4iv';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TexCoord4iv(var v: Int32) := z_TexCoord4iv;
    public static procedure z_TexCoord4iv(v: IntPtr);
    external 'opengl32.dll' name 'glTexCoord4iv';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TexCoord4iv(v: IntPtr) := z_TexCoord4iv;
    
    // added in gl1.0, deprecated in gl3.2
    public static procedure z_TexCoord4s(s: Int16; t: Int16; r: Int16; q: Int16);
    external 'opengl32.dll' name 'glTexCoord4s';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TexCoord4s(s: Int16; t: Int16; r: Int16; q: Int16) := z_TexCoord4s;
    
    // added in gl1.0, deprecated in gl3.2
    public static procedure z_TexCoord4sv([MarshalAs(UnmanagedType.LPArray)] v: array of Int16);
    external 'opengl32.dll' name 'glTexCoord4sv';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TexCoord4sv(v: array of Int16) := z_TexCoord4sv;
    public static procedure z_TexCoord4sv(var v: Int16);
    external 'opengl32.dll' name 'glTexCoord4sv';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TexCoord4sv(var v: Int16) := z_TexCoord4sv;
    public static procedure z_TexCoord4sv(v: IntPtr);
    external 'opengl32.dll' name 'glTexCoord4sv';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TexCoord4sv(v: IntPtr) := z_TexCoord4sv;
    
    // added in gl1.1, deprecated in gl3.2
    public static procedure z_TexCoordPointer(size: Int32; type: TexCoordPointerType; stride: Int32; pointer: IntPtr);
    external 'opengl32.dll' name 'glTexCoordPointer';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TexCoordPointer(size: Int32; type: TexCoordPointerType; stride: Int32; pointer: IntPtr) := z_TexCoordPointer;
    
    // added in gl1.0, deprecated in gl3.2
    public static procedure z_TexEnvf(target: TextureEnvTarget; pname: TextureEnvParameter; param: single);
    external 'opengl32.dll' name 'glTexEnvf';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TexEnvf(target: TextureEnvTarget; pname: TextureEnvParameter; param: single) := z_TexEnvf;
    
    // added in gl1.0, deprecated in gl3.2
    public static procedure z_TexEnvfv(target: TextureEnvTarget; pname: TextureEnvParameter; [MarshalAs(UnmanagedType.LPArray)] params: array of single);
    external 'opengl32.dll' name 'glTexEnvfv';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TexEnvfv(target: TextureEnvTarget; pname: TextureEnvParameter; params: array of single) := z_TexEnvfv;
    public static procedure z_TexEnvfv(target: TextureEnvTarget; pname: TextureEnvParameter; var params: single);
    external 'opengl32.dll' name 'glTexEnvfv';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TexEnvfv(target: TextureEnvTarget; pname: TextureEnvParameter; var params: single) := z_TexEnvfv;
    public static procedure z_TexEnvfv(target: TextureEnvTarget; pname: TextureEnvParameter; params: IntPtr);
    external 'opengl32.dll' name 'glTexEnvfv';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TexEnvfv(target: TextureEnvTarget; pname: TextureEnvParameter; params: IntPtr) := z_TexEnvfv;
    
    // added in gl1.0, deprecated in gl3.2
    public static procedure z_TexEnvi(target: TextureEnvTarget; pname: TextureEnvParameter; param: Int32);
    external 'opengl32.dll' name 'glTexEnvi';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TexEnvi(target: TextureEnvTarget; pname: TextureEnvParameter; param: Int32) := z_TexEnvi;
    
    // added in gl1.0, deprecated in gl3.2
    public static procedure z_TexEnviv(target: TextureEnvTarget; pname: TextureEnvParameter; [MarshalAs(UnmanagedType.LPArray)] params: array of Int32);
    external 'opengl32.dll' name 'glTexEnviv';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TexEnviv(target: TextureEnvTarget; pname: TextureEnvParameter; params: array of Int32) := z_TexEnviv;
    public static procedure z_TexEnviv(target: TextureEnvTarget; pname: TextureEnvParameter; var params: Int32);
    external 'opengl32.dll' name 'glTexEnviv';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TexEnviv(target: TextureEnvTarget; pname: TextureEnvParameter; var params: Int32) := z_TexEnviv;
    public static procedure z_TexEnviv(target: TextureEnvTarget; pname: TextureEnvParameter; params: IntPtr);
    external 'opengl32.dll' name 'glTexEnviv';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TexEnviv(target: TextureEnvTarget; pname: TextureEnvParameter; params: IntPtr) := z_TexEnviv;
    
    // added in gl1.0, deprecated in gl3.2
    public static procedure z_TexGend(coord: TextureCoordName; pname: TextureGenParameter; param: real);
    external 'opengl32.dll' name 'glTexGend';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TexGend(coord: TextureCoordName; pname: TextureGenParameter; param: real) := z_TexGend;
    
    // added in gl1.0, deprecated in gl3.2
    public static procedure z_TexGendv(coord: TextureCoordName; pname: TextureGenParameter; [MarshalAs(UnmanagedType.LPArray)] params: array of real);
    external 'opengl32.dll' name 'glTexGendv';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TexGendv(coord: TextureCoordName; pname: TextureGenParameter; params: array of real) := z_TexGendv;
    public static procedure z_TexGendv(coord: TextureCoordName; pname: TextureGenParameter; var params: real);
    external 'opengl32.dll' name 'glTexGendv';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TexGendv(coord: TextureCoordName; pname: TextureGenParameter; var params: real) := z_TexGendv;
    public static procedure z_TexGendv(coord: TextureCoordName; pname: TextureGenParameter; params: IntPtr);
    external 'opengl32.dll' name 'glTexGendv';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TexGendv(coord: TextureCoordName; pname: TextureGenParameter; params: IntPtr) := z_TexGendv;
    
    // added in gl1.0, deprecated in gl3.2
    public static procedure z_TexGenf(coord: TextureCoordName; pname: TextureGenParameter; param: single);
    external 'opengl32.dll' name 'glTexGenf';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TexGenf(coord: TextureCoordName; pname: TextureGenParameter; param: single) := z_TexGenf;
    
    // added in gl1.0, deprecated in gl3.2
    public static procedure z_TexGenfv(coord: TextureCoordName; pname: TextureGenParameter; [MarshalAs(UnmanagedType.LPArray)] params: array of single);
    external 'opengl32.dll' name 'glTexGenfv';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TexGenfv(coord: TextureCoordName; pname: TextureGenParameter; params: array of single) := z_TexGenfv;
    public static procedure z_TexGenfv(coord: TextureCoordName; pname: TextureGenParameter; var params: single);
    external 'opengl32.dll' name 'glTexGenfv';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TexGenfv(coord: TextureCoordName; pname: TextureGenParameter; var params: single) := z_TexGenfv;
    public static procedure z_TexGenfv(coord: TextureCoordName; pname: TextureGenParameter; params: IntPtr);
    external 'opengl32.dll' name 'glTexGenfv';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TexGenfv(coord: TextureCoordName; pname: TextureGenParameter; params: IntPtr) := z_TexGenfv;
    
    // added in gl1.0, deprecated in gl3.2
    public static procedure z_TexGeni(coord: TextureCoordName; pname: TextureGenParameter; param: Int32);
    external 'opengl32.dll' name 'glTexGeni';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TexGeni(coord: TextureCoordName; pname: TextureGenParameter; param: Int32) := z_TexGeni;
    
    // added in gl1.0, deprecated in gl3.2
    public static procedure z_TexGeniv(coord: TextureCoordName; pname: TextureGenParameter; [MarshalAs(UnmanagedType.LPArray)] params: array of Int32);
    external 'opengl32.dll' name 'glTexGeniv';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TexGeniv(coord: TextureCoordName; pname: TextureGenParameter; params: array of Int32) := z_TexGeniv;
    public static procedure z_TexGeniv(coord: TextureCoordName; pname: TextureGenParameter; var params: Int32);
    external 'opengl32.dll' name 'glTexGeniv';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TexGeniv(coord: TextureCoordName; pname: TextureGenParameter; var params: Int32) := z_TexGeniv;
    public static procedure z_TexGeniv(coord: TextureCoordName; pname: TextureGenParameter; params: IntPtr);
    external 'opengl32.dll' name 'glTexGeniv';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TexGeniv(coord: TextureCoordName; pname: TextureGenParameter; params: IntPtr) := z_TexGeniv;
    
    // added in gl1.0, deprecated in gl3.2
    public static procedure z_Translated(x: real; y: real; z: real);
    external 'opengl32.dll' name 'glTranslated';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Translated(x: real; y: real; z: real) := z_Translated;
    
    // added in gl1.0, deprecated in gl3.2
    public static procedure z_Translatef(x: single; y: single; z: single);
    external 'opengl32.dll' name 'glTranslatef';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Translatef(x: single; y: single; z: single) := z_Translatef;
    
    // added in gl1.0, deprecated in gl3.2
    public static procedure z_Vertex2d(x: real; y: real);
    external 'opengl32.dll' name 'glVertex2d';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Vertex2d(x: real; y: real) := z_Vertex2d;
    
    // added in gl1.0, deprecated in gl3.2
    public static procedure z_Vertex2dv([MarshalAs(UnmanagedType.LPArray)] v: array of real);
    external 'opengl32.dll' name 'glVertex2dv';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Vertex2dv(v: array of real) := z_Vertex2dv;
    public static procedure z_Vertex2dv(var v: real);
    external 'opengl32.dll' name 'glVertex2dv';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Vertex2dv(var v: real) := z_Vertex2dv;
    public static procedure z_Vertex2dv(v: IntPtr);
    external 'opengl32.dll' name 'glVertex2dv';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Vertex2dv(v: IntPtr) := z_Vertex2dv;
    
    // added in gl1.0, deprecated in gl3.2
    public static procedure z_Vertex2f(x: single; y: single);
    external 'opengl32.dll' name 'glVertex2f';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Vertex2f(x: single; y: single) := z_Vertex2f;
    
    // added in gl1.0, deprecated in gl3.2
    public static procedure z_Vertex2fv([MarshalAs(UnmanagedType.LPArray)] v: array of single);
    external 'opengl32.dll' name 'glVertex2fv';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Vertex2fv(v: array of single) := z_Vertex2fv;
    public static procedure z_Vertex2fv(var v: single);
    external 'opengl32.dll' name 'glVertex2fv';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Vertex2fv(var v: single) := z_Vertex2fv;
    public static procedure z_Vertex2fv(v: IntPtr);
    external 'opengl32.dll' name 'glVertex2fv';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Vertex2fv(v: IntPtr) := z_Vertex2fv;
    
    // added in gl1.0, deprecated in gl3.2
    public static procedure z_Vertex2i(x: Int32; y: Int32);
    external 'opengl32.dll' name 'glVertex2i';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Vertex2i(x: Int32; y: Int32) := z_Vertex2i;
    
    // added in gl1.0, deprecated in gl3.2
    public static procedure z_Vertex2iv([MarshalAs(UnmanagedType.LPArray)] v: array of Int32);
    external 'opengl32.dll' name 'glVertex2iv';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Vertex2iv(v: array of Int32) := z_Vertex2iv;
    public static procedure z_Vertex2iv(var v: Int32);
    external 'opengl32.dll' name 'glVertex2iv';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Vertex2iv(var v: Int32) := z_Vertex2iv;
    public static procedure z_Vertex2iv(v: IntPtr);
    external 'opengl32.dll' name 'glVertex2iv';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Vertex2iv(v: IntPtr) := z_Vertex2iv;
    
    // added in gl1.0, deprecated in gl3.2
    public static procedure z_Vertex2s(x: Int16; y: Int16);
    external 'opengl32.dll' name 'glVertex2s';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Vertex2s(x: Int16; y: Int16) := z_Vertex2s;
    
    // added in gl1.0, deprecated in gl3.2
    public static procedure z_Vertex2sv([MarshalAs(UnmanagedType.LPArray)] v: array of Int16);
    external 'opengl32.dll' name 'glVertex2sv';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Vertex2sv(v: array of Int16) := z_Vertex2sv;
    public static procedure z_Vertex2sv(var v: Int16);
    external 'opengl32.dll' name 'glVertex2sv';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Vertex2sv(var v: Int16) := z_Vertex2sv;
    public static procedure z_Vertex2sv(v: IntPtr);
    external 'opengl32.dll' name 'glVertex2sv';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Vertex2sv(v: IntPtr) := z_Vertex2sv;
    
    // added in gl1.0, deprecated in gl3.2
    public static procedure z_Vertex3d(x: real; y: real; z: real);
    external 'opengl32.dll' name 'glVertex3d';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Vertex3d(x: real; y: real; z: real) := z_Vertex3d;
    
    // added in gl1.0, deprecated in gl3.2
    public static procedure z_Vertex3dv([MarshalAs(UnmanagedType.LPArray)] v: array of real);
    external 'opengl32.dll' name 'glVertex3dv';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Vertex3dv(v: array of real) := z_Vertex3dv;
    public static procedure z_Vertex3dv(var v: real);
    external 'opengl32.dll' name 'glVertex3dv';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Vertex3dv(var v: real) := z_Vertex3dv;
    public static procedure z_Vertex3dv(v: IntPtr);
    external 'opengl32.dll' name 'glVertex3dv';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Vertex3dv(v: IntPtr) := z_Vertex3dv;
    
    // added in gl1.0, deprecated in gl3.2
    public static procedure z_Vertex3f(x: single; y: single; z: single);
    external 'opengl32.dll' name 'glVertex3f';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Vertex3f(x: single; y: single; z: single) := z_Vertex3f;
    
    // added in gl1.0, deprecated in gl3.2
    public static procedure z_Vertex3fv([MarshalAs(UnmanagedType.LPArray)] v: array of single);
    external 'opengl32.dll' name 'glVertex3fv';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Vertex3fv(v: array of single) := z_Vertex3fv;
    public static procedure z_Vertex3fv(var v: single);
    external 'opengl32.dll' name 'glVertex3fv';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Vertex3fv(var v: single) := z_Vertex3fv;
    public static procedure z_Vertex3fv(v: IntPtr);
    external 'opengl32.dll' name 'glVertex3fv';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Vertex3fv(v: IntPtr) := z_Vertex3fv;
    
    // added in gl1.0, deprecated in gl3.2
    public static procedure z_Vertex3i(x: Int32; y: Int32; z: Int32);
    external 'opengl32.dll' name 'glVertex3i';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Vertex3i(x: Int32; y: Int32; z: Int32) := z_Vertex3i;
    
    // added in gl1.0, deprecated in gl3.2
    public static procedure z_Vertex3iv([MarshalAs(UnmanagedType.LPArray)] v: array of Int32);
    external 'opengl32.dll' name 'glVertex3iv';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Vertex3iv(v: array of Int32) := z_Vertex3iv;
    public static procedure z_Vertex3iv(var v: Int32);
    external 'opengl32.dll' name 'glVertex3iv';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Vertex3iv(var v: Int32) := z_Vertex3iv;
    public static procedure z_Vertex3iv(v: IntPtr);
    external 'opengl32.dll' name 'glVertex3iv';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Vertex3iv(v: IntPtr) := z_Vertex3iv;
    
    // added in gl1.0, deprecated in gl3.2
    public static procedure z_Vertex3s(x: Int16; y: Int16; z: Int16);
    external 'opengl32.dll' name 'glVertex3s';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Vertex3s(x: Int16; y: Int16; z: Int16) := z_Vertex3s;
    
    // added in gl1.0, deprecated in gl3.2
    public static procedure z_Vertex3sv([MarshalAs(UnmanagedType.LPArray)] v: array of Int16);
    external 'opengl32.dll' name 'glVertex3sv';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Vertex3sv(v: array of Int16) := z_Vertex3sv;
    public static procedure z_Vertex3sv(var v: Int16);
    external 'opengl32.dll' name 'glVertex3sv';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Vertex3sv(var v: Int16) := z_Vertex3sv;
    public static procedure z_Vertex3sv(v: IntPtr);
    external 'opengl32.dll' name 'glVertex3sv';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Vertex3sv(v: IntPtr) := z_Vertex3sv;
    
    // added in gl1.0, deprecated in gl3.2
    public static procedure z_Vertex4d(x: real; y: real; z: real; w: real);
    external 'opengl32.dll' name 'glVertex4d';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Vertex4d(x: real; y: real; z: real; w: real) := z_Vertex4d;
    
    // added in gl1.0, deprecated in gl3.2
    public static procedure z_Vertex4dv([MarshalAs(UnmanagedType.LPArray)] v: array of real);
    external 'opengl32.dll' name 'glVertex4dv';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Vertex4dv(v: array of real) := z_Vertex4dv;
    public static procedure z_Vertex4dv(var v: real);
    external 'opengl32.dll' name 'glVertex4dv';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Vertex4dv(var v: real) := z_Vertex4dv;
    public static procedure z_Vertex4dv(v: IntPtr);
    external 'opengl32.dll' name 'glVertex4dv';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Vertex4dv(v: IntPtr) := z_Vertex4dv;
    
    // added in gl1.0, deprecated in gl3.2
    public static procedure z_Vertex4f(x: single; y: single; z: single; w: single);
    external 'opengl32.dll' name 'glVertex4f';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Vertex4f(x: single; y: single; z: single; w: single) := z_Vertex4f;
    
    // added in gl1.0, deprecated in gl3.2
    public static procedure z_Vertex4fv([MarshalAs(UnmanagedType.LPArray)] v: array of single);
    external 'opengl32.dll' name 'glVertex4fv';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Vertex4fv(v: array of single) := z_Vertex4fv;
    public static procedure z_Vertex4fv(var v: single);
    external 'opengl32.dll' name 'glVertex4fv';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Vertex4fv(var v: single) := z_Vertex4fv;
    public static procedure z_Vertex4fv(v: IntPtr);
    external 'opengl32.dll' name 'glVertex4fv';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Vertex4fv(v: IntPtr) := z_Vertex4fv;
    
    // added in gl1.0, deprecated in gl3.2
    public static procedure z_Vertex4i(x: Int32; y: Int32; z: Int32; w: Int32);
    external 'opengl32.dll' name 'glVertex4i';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Vertex4i(x: Int32; y: Int32; z: Int32; w: Int32) := z_Vertex4i;
    
    // added in gl1.0, deprecated in gl3.2
    public static procedure z_Vertex4iv([MarshalAs(UnmanagedType.LPArray)] v: array of Int32);
    external 'opengl32.dll' name 'glVertex4iv';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Vertex4iv(v: array of Int32) := z_Vertex4iv;
    public static procedure z_Vertex4iv(var v: Int32);
    external 'opengl32.dll' name 'glVertex4iv';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Vertex4iv(var v: Int32) := z_Vertex4iv;
    public static procedure z_Vertex4iv(v: IntPtr);
    external 'opengl32.dll' name 'glVertex4iv';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Vertex4iv(v: IntPtr) := z_Vertex4iv;
    
    // added in gl1.0, deprecated in gl3.2
    public static procedure z_Vertex4s(x: Int16; y: Int16; z: Int16; w: Int16);
    external 'opengl32.dll' name 'glVertex4s';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Vertex4s(x: Int16; y: Int16; z: Int16; w: Int16) := z_Vertex4s;
    
    // added in gl1.0, deprecated in gl3.2
    public static procedure z_Vertex4sv([MarshalAs(UnmanagedType.LPArray)] v: array of Int16);
    external 'opengl32.dll' name 'glVertex4sv';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Vertex4sv(v: array of Int16) := z_Vertex4sv;
    public static procedure z_Vertex4sv(var v: Int16);
    external 'opengl32.dll' name 'glVertex4sv';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Vertex4sv(var v: Int16) := z_Vertex4sv;
    public static procedure z_Vertex4sv(v: IntPtr);
    external 'opengl32.dll' name 'glVertex4sv';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Vertex4sv(v: IntPtr) := z_Vertex4sv;
    
    // added in gl1.1, deprecated in gl3.2
    public static procedure z_VertexPointer(size: Int32; type: VertexPointerType; stride: Int32; pointer: IntPtr);
    external 'opengl32.dll' name 'glVertexPointer';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexPointer(size: Int32; type: VertexPointerType; stride: Int32; pointer: IntPtr) := z_VertexPointer;
    
    // added in gl1.4, deprecated in gl3.2
    public z_WindowPos2d_adr := GetFuncAdr('glWindowPos2d');
    public z_WindowPos2d_ovr_0 := GetFuncOrNil&<procedure(x: real; y: real)>(z_WindowPos2d_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure WindowPos2d(x: real; y: real);
    begin
      z_WindowPos2d_ovr_0(x, y);
    end;
    
    // added in gl1.4, deprecated in gl3.2
    public z_WindowPos2dv_adr := GetFuncAdr('glWindowPos2dv');
    public z_WindowPos2dv_ovr_0 := GetFuncOrNil&<procedure(var v: real)>(z_WindowPos2dv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure WindowPos2dv(v: array of real);
    begin
      z_WindowPos2dv_ovr_0(v[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure WindowPos2dv(var v: real);
    begin
      z_WindowPos2dv_ovr_0(v);
    end;
    public z_WindowPos2dv_ovr_2 := GetFuncOrNil&<procedure(v: IntPtr)>(z_WindowPos2dv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure WindowPos2dv(v: IntPtr);
    begin
      z_WindowPos2dv_ovr_2(v);
    end;
    
    // added in gl1.4, deprecated in gl3.2
    public z_WindowPos2f_adr := GetFuncAdr('glWindowPos2f');
    public z_WindowPos2f_ovr_0 := GetFuncOrNil&<procedure(x: single; y: single)>(z_WindowPos2f_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure WindowPos2f(x: single; y: single);
    begin
      z_WindowPos2f_ovr_0(x, y);
    end;
    
    // added in gl1.4, deprecated in gl3.2
    public z_WindowPos2fv_adr := GetFuncAdr('glWindowPos2fv');
    public z_WindowPos2fv_ovr_0 := GetFuncOrNil&<procedure(var v: single)>(z_WindowPos2fv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure WindowPos2fv(v: array of single);
    begin
      z_WindowPos2fv_ovr_0(v[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure WindowPos2fv(var v: single);
    begin
      z_WindowPos2fv_ovr_0(v);
    end;
    public z_WindowPos2fv_ovr_2 := GetFuncOrNil&<procedure(v: IntPtr)>(z_WindowPos2fv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure WindowPos2fv(v: IntPtr);
    begin
      z_WindowPos2fv_ovr_2(v);
    end;
    
    // added in gl1.4, deprecated in gl3.2
    public z_WindowPos2i_adr := GetFuncAdr('glWindowPos2i');
    public z_WindowPos2i_ovr_0 := GetFuncOrNil&<procedure(x: Int32; y: Int32)>(z_WindowPos2i_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure WindowPos2i(x: Int32; y: Int32);
    begin
      z_WindowPos2i_ovr_0(x, y);
    end;
    
    // added in gl1.4, deprecated in gl3.2
    public z_WindowPos2iv_adr := GetFuncAdr('glWindowPos2iv');
    public z_WindowPos2iv_ovr_0 := GetFuncOrNil&<procedure(var v: Int32)>(z_WindowPos2iv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure WindowPos2iv(v: array of Int32);
    begin
      z_WindowPos2iv_ovr_0(v[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure WindowPos2iv(var v: Int32);
    begin
      z_WindowPos2iv_ovr_0(v);
    end;
    public z_WindowPos2iv_ovr_2 := GetFuncOrNil&<procedure(v: IntPtr)>(z_WindowPos2iv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure WindowPos2iv(v: IntPtr);
    begin
      z_WindowPos2iv_ovr_2(v);
    end;
    
    // added in gl1.4, deprecated in gl3.2
    public z_WindowPos2s_adr := GetFuncAdr('glWindowPos2s');
    public z_WindowPos2s_ovr_0 := GetFuncOrNil&<procedure(x: Int16; y: Int16)>(z_WindowPos2s_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure WindowPos2s(x: Int16; y: Int16);
    begin
      z_WindowPos2s_ovr_0(x, y);
    end;
    
    // added in gl1.4, deprecated in gl3.2
    public z_WindowPos2sv_adr := GetFuncAdr('glWindowPos2sv');
    public z_WindowPos2sv_ovr_0 := GetFuncOrNil&<procedure(var v: Int16)>(z_WindowPos2sv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure WindowPos2sv(v: array of Int16);
    begin
      z_WindowPos2sv_ovr_0(v[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure WindowPos2sv(var v: Int16);
    begin
      z_WindowPos2sv_ovr_0(v);
    end;
    public z_WindowPos2sv_ovr_2 := GetFuncOrNil&<procedure(v: IntPtr)>(z_WindowPos2sv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure WindowPos2sv(v: IntPtr);
    begin
      z_WindowPos2sv_ovr_2(v);
    end;
    
    // added in gl1.4, deprecated in gl3.2
    public z_WindowPos3d_adr := GetFuncAdr('glWindowPos3d');
    public z_WindowPos3d_ovr_0 := GetFuncOrNil&<procedure(x: real; y: real; z: real)>(z_WindowPos3d_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure WindowPos3d(x: real; y: real; z: real);
    begin
      z_WindowPos3d_ovr_0(x, y, z);
    end;
    
    // added in gl1.4, deprecated in gl3.2
    public z_WindowPos3dv_adr := GetFuncAdr('glWindowPos3dv');
    public z_WindowPos3dv_ovr_0 := GetFuncOrNil&<procedure(var v: real)>(z_WindowPos3dv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure WindowPos3dv(v: array of real);
    begin
      z_WindowPos3dv_ovr_0(v[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure WindowPos3dv(var v: real);
    begin
      z_WindowPos3dv_ovr_0(v);
    end;
    public z_WindowPos3dv_ovr_2 := GetFuncOrNil&<procedure(v: IntPtr)>(z_WindowPos3dv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure WindowPos3dv(v: IntPtr);
    begin
      z_WindowPos3dv_ovr_2(v);
    end;
    
    // added in gl1.4, deprecated in gl3.2
    public z_WindowPos3f_adr := GetFuncAdr('glWindowPos3f');
    public z_WindowPos3f_ovr_0 := GetFuncOrNil&<procedure(x: single; y: single; z: single)>(z_WindowPos3f_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure WindowPos3f(x: single; y: single; z: single);
    begin
      z_WindowPos3f_ovr_0(x, y, z);
    end;
    
    // added in gl1.4, deprecated in gl3.2
    public z_WindowPos3fv_adr := GetFuncAdr('glWindowPos3fv');
    public z_WindowPos3fv_ovr_0 := GetFuncOrNil&<procedure(var v: single)>(z_WindowPos3fv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure WindowPos3fv(v: array of single);
    begin
      z_WindowPos3fv_ovr_0(v[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure WindowPos3fv(var v: single);
    begin
      z_WindowPos3fv_ovr_0(v);
    end;
    public z_WindowPos3fv_ovr_2 := GetFuncOrNil&<procedure(v: IntPtr)>(z_WindowPos3fv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure WindowPos3fv(v: IntPtr);
    begin
      z_WindowPos3fv_ovr_2(v);
    end;
    
    // added in gl1.4, deprecated in gl3.2
    public z_WindowPos3i_adr := GetFuncAdr('glWindowPos3i');
    public z_WindowPos3i_ovr_0 := GetFuncOrNil&<procedure(x: Int32; y: Int32; z: Int32)>(z_WindowPos3i_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure WindowPos3i(x: Int32; y: Int32; z: Int32);
    begin
      z_WindowPos3i_ovr_0(x, y, z);
    end;
    
    // added in gl1.4, deprecated in gl3.2
    public z_WindowPos3iv_adr := GetFuncAdr('glWindowPos3iv');
    public z_WindowPos3iv_ovr_0 := GetFuncOrNil&<procedure(var v: Int32)>(z_WindowPos3iv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure WindowPos3iv(v: array of Int32);
    begin
      z_WindowPos3iv_ovr_0(v[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure WindowPos3iv(var v: Int32);
    begin
      z_WindowPos3iv_ovr_0(v);
    end;
    public z_WindowPos3iv_ovr_2 := GetFuncOrNil&<procedure(v: IntPtr)>(z_WindowPos3iv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure WindowPos3iv(v: IntPtr);
    begin
      z_WindowPos3iv_ovr_2(v);
    end;
    
    // added in gl1.4, deprecated in gl3.2
    public z_WindowPos3s_adr := GetFuncAdr('glWindowPos3s');
    public z_WindowPos3s_ovr_0 := GetFuncOrNil&<procedure(x: Int16; y: Int16; z: Int16)>(z_WindowPos3s_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure WindowPos3s(x: Int16; y: Int16; z: Int16);
    begin
      z_WindowPos3s_ovr_0(x, y, z);
    end;
    
    // added in gl1.4, deprecated in gl3.2
    public z_WindowPos3sv_adr := GetFuncAdr('glWindowPos3sv');
    public z_WindowPos3sv_ovr_0 := GetFuncOrNil&<procedure(var v: Int16)>(z_WindowPos3sv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure WindowPos3sv(v: array of Int16);
    begin
      z_WindowPos3sv_ovr_0(v[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure WindowPos3sv(var v: Int16);
    begin
      z_WindowPos3sv_ovr_0(v);
    end;
    public z_WindowPos3sv_ovr_2 := GetFuncOrNil&<procedure(v: IntPtr)>(z_WindowPos3sv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure WindowPos3sv(v: IntPtr);
    begin
      z_WindowPos3sv_ovr_2(v);
    end;
    
  end;
  
  wgl = sealed class
    
    // added in wgl1.0
    public z_ChoosePixelFormat_adr := GetFuncAdr('ChoosePixelFormat');
    public z_ChoosePixelFormat_ovr_0 := GetFuncOrNil&<function(hDc: GDI_DC; var pPfd: GDI_PixelFormatDescriptor): Int32>(z_ChoosePixelFormat_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function ChoosePixelFormat(hDc: GDI_DC; pPfd: array of GDI_PixelFormatDescriptor): Int32;
    begin
      Result := z_ChoosePixelFormat_ovr_0(hDc, pPfd[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function ChoosePixelFormat(hDc: GDI_DC; var pPfd: GDI_PixelFormatDescriptor): Int32;
    begin
      Result := z_ChoosePixelFormat_ovr_0(hDc, pPfd);
    end;
    public z_ChoosePixelFormat_ovr_2 := GetFuncOrNil&<function(hDc: GDI_DC; pPfd: IntPtr): Int32>(z_ChoosePixelFormat_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function ChoosePixelFormat(hDc: GDI_DC; pPfd: IntPtr): Int32;
    begin
      Result := z_ChoosePixelFormat_ovr_2(hDc, pPfd);
    end;
    
    // added in wgl1.0
    public z_DescribePixelFormat_adr := GetFuncAdr('DescribePixelFormat');
    public z_DescribePixelFormat_ovr_0 := GetFuncOrNil&<function(hdc: GDI_DC; ipfd: Int32; cjpfd: UInt32; var ppfd: GDI_PixelFormatDescriptor): Int32>(z_DescribePixelFormat_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function DescribePixelFormat(hdc: GDI_DC; ipfd: Int32; cjpfd: UInt32; ppfd: array of GDI_PixelFormatDescriptor): Int32;
    begin
      Result := z_DescribePixelFormat_ovr_0(hdc, ipfd, cjpfd, ppfd[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function DescribePixelFormat(hdc: GDI_DC; ipfd: Int32; cjpfd: UInt32; var ppfd: GDI_PixelFormatDescriptor): Int32;
    begin
      Result := z_DescribePixelFormat_ovr_0(hdc, ipfd, cjpfd, ppfd);
    end;
    public z_DescribePixelFormat_ovr_2 := GetFuncOrNil&<function(hdc: GDI_DC; ipfd: Int32; cjpfd: UInt32; ppfd: IntPtr): Int32>(z_DescribePixelFormat_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function DescribePixelFormat(hdc: GDI_DC; ipfd: Int32; cjpfd: UInt32; ppfd: IntPtr): Int32;
    begin
      Result := z_DescribePixelFormat_ovr_2(hdc, ipfd, cjpfd, ppfd);
    end;
    
    // added in wgl1.0
    public z_GetEnhMetaFilePixelFormat_adr := GetFuncAdr('GetEnhMetaFilePixelFormat');
    public z_GetEnhMetaFilePixelFormat_ovr_0 := GetFuncOrNil&<function(hemf: GDI_HENHMetafile; var ppfd: GDI_PixelFormatDescriptor): UInt32>(z_GetEnhMetaFilePixelFormat_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetEnhMetaFilePixelFormat(hemf: GDI_HENHMetafile; ppfd: array of GDI_PixelFormatDescriptor): UInt32;
    begin
      Result := z_GetEnhMetaFilePixelFormat_ovr_0(hemf, ppfd[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetEnhMetaFilePixelFormat(hemf: GDI_HENHMetafile; var ppfd: GDI_PixelFormatDescriptor): UInt32;
    begin
      Result := z_GetEnhMetaFilePixelFormat_ovr_0(hemf, ppfd);
    end;
    public z_GetEnhMetaFilePixelFormat_ovr_2 := GetFuncOrNil&<function(hemf: GDI_HENHMetafile; ppfd: IntPtr): UInt32>(z_GetEnhMetaFilePixelFormat_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetEnhMetaFilePixelFormat(hemf: GDI_HENHMetafile; ppfd: IntPtr): UInt32;
    begin
      Result := z_GetEnhMetaFilePixelFormat_ovr_2(hemf, ppfd);
    end;
    
    // added in wgl1.0
    public z_GetPixelFormat_adr := GetFuncAdr('GetPixelFormat');
    public z_GetPixelFormat_ovr_0 := GetFuncOrNil&<function(hdc: GDI_DC): Int32>(z_GetPixelFormat_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetPixelFormat(hdc: GDI_DC): Int32;
    begin
      Result := z_GetPixelFormat_ovr_0(hdc);
    end;
    
    // added in wgl1.0
    public z_SetPixelFormat_adr := GetFuncAdr('SetPixelFormat');
    public z_SetPixelFormat_ovr_0 := GetFuncOrNil&<function(hdc: GDI_DC; ipfd: Int32; var ppfd: GDI_PixelFormatDescriptor): UInt32>(z_SetPixelFormat_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function SetPixelFormat(hdc: GDI_DC; ipfd: Int32; ppfd: array of GDI_PixelFormatDescriptor): UInt32;
    begin
      Result := z_SetPixelFormat_ovr_0(hdc, ipfd, ppfd[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function SetPixelFormat(hdc: GDI_DC; ipfd: Int32; var ppfd: GDI_PixelFormatDescriptor): UInt32;
    begin
      Result := z_SetPixelFormat_ovr_0(hdc, ipfd, ppfd);
    end;
    public z_SetPixelFormat_ovr_2 := GetFuncOrNil&<function(hdc: GDI_DC; ipfd: Int32; ppfd: IntPtr): UInt32>(z_SetPixelFormat_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function SetPixelFormat(hdc: GDI_DC; ipfd: Int32; ppfd: IntPtr): UInt32;
    begin
      Result := z_SetPixelFormat_ovr_2(hdc, ipfd, ppfd);
    end;
    
    // added in wgl1.0
    public z_SwapBuffers_adr := GetFuncAdr('SwapBuffers');
    public z_SwapBuffers_ovr_0 := GetFuncOrNil&<function(hdc: GDI_DC): UInt32>(z_SwapBuffers_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function SwapBuffers(hdc: GDI_DC): UInt32;
    begin
      Result := z_SwapBuffers_ovr_0(hdc);
    end;
    
    // added in wgl1.0
    public z_CopyContext_adr := GetFuncAdr('wglCopyContext');
    public z_CopyContext_ovr_0 := GetFuncOrNil&<function(hglrcSrc: GLContext; hglrcDst: GLContext; mask: UInt32): UInt32>(z_CopyContext_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function CopyContext(hglrcSrc: GLContext; hglrcDst: GLContext; mask: UInt32): UInt32;
    begin
      Result := z_CopyContext_ovr_0(hglrcSrc, hglrcDst, mask);
    end;
    
    // added in wgl1.0
    public z_CreateContext_adr := GetFuncAdr('wglCreateContext');
    public z_CreateContext_ovr_0 := GetFuncOrNil&<function(hDc: GDI_DC): GLContext>(z_CreateContext_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function CreateContext(hDc: GDI_DC): GLContext;
    begin
      Result := z_CreateContext_ovr_0(hDc);
    end;
    
    // added in wgl1.0
    public z_CreateLayerContext_adr := GetFuncAdr('wglCreateLayerContext');
    public z_CreateLayerContext_ovr_0 := GetFuncOrNil&<function(hDc: GDI_DC; level: Int32): GLContext>(z_CreateLayerContext_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function CreateLayerContext(hDc: GDI_DC; level: Int32): GLContext;
    begin
      Result := z_CreateLayerContext_ovr_0(hDc, level);
    end;
    
    // added in wgl1.0
    public z_DeleteContext_adr := GetFuncAdr('wglDeleteContext');
    public z_DeleteContext_ovr_0 := GetFuncOrNil&<function(oldContext: GLContext): UInt32>(z_DeleteContext_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function DeleteContext(oldContext: GLContext): UInt32;
    begin
      Result := z_DeleteContext_ovr_0(oldContext);
    end;
    
    // added in wgl1.0
    public z_DescribeLayerPlane_adr := GetFuncAdr('wglDescribeLayerPlane');
    public z_DescribeLayerPlane_ovr_0 := GetFuncOrNil&<function(hDc: GDI_DC; pixelFormat: Int32; layerPlane: Int32; nBytes: UInt32; var plpd: GDI_LayerPlaneDescriptor): UInt32>(z_DescribeLayerPlane_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function DescribeLayerPlane(hDc: GDI_DC; pixelFormat: Int32; layerPlane: Int32; nBytes: UInt32; plpd: array of GDI_LayerPlaneDescriptor): UInt32;
    begin
      Result := z_DescribeLayerPlane_ovr_0(hDc, pixelFormat, layerPlane, nBytes, plpd[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function DescribeLayerPlane(hDc: GDI_DC; pixelFormat: Int32; layerPlane: Int32; nBytes: UInt32; var plpd: GDI_LayerPlaneDescriptor): UInt32;
    begin
      Result := z_DescribeLayerPlane_ovr_0(hDc, pixelFormat, layerPlane, nBytes, plpd);
    end;
    public z_DescribeLayerPlane_ovr_2 := GetFuncOrNil&<function(hDc: GDI_DC; pixelFormat: Int32; layerPlane: Int32; nBytes: UInt32; plpd: IntPtr): UInt32>(z_DescribeLayerPlane_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function DescribeLayerPlane(hDc: GDI_DC; pixelFormat: Int32; layerPlane: Int32; nBytes: UInt32; plpd: IntPtr): UInt32;
    begin
      Result := z_DescribeLayerPlane_ovr_2(hDc, pixelFormat, layerPlane, nBytes, plpd);
    end;
    
    // added in wgl1.0
    public z_GetCurrentContext_adr := GetFuncAdr('wglGetCurrentContext');
    public z_GetCurrentContext_ovr_0 := GetFuncOrNil&<function: GLContext>(z_GetCurrentContext_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetCurrentContext: GLContext;
    begin
      Result := z_GetCurrentContext_ovr_0;
    end;
    
    // added in wgl1.0
    public z_GetCurrentDC_adr := GetFuncAdr('wglGetCurrentDC');
    public z_GetCurrentDC_ovr_0 := GetFuncOrNil&<function: GDI_DC>(z_GetCurrentDC_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetCurrentDC: GDI_DC;
    begin
      Result := z_GetCurrentDC_ovr_0;
    end;
    
    // added in wgl1.0
    public z_GetLayerPaletteEntries_adr := GetFuncAdr('wglGetLayerPaletteEntries');
    public z_GetLayerPaletteEntries_ovr_0 := GetFuncOrNil&<function(hdc: GDI_DC; iLayerPlane: Int32; iStart: Int32; cEntries: Int32; var pcr: GDI_COLORREF): Int32>(z_GetLayerPaletteEntries_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetLayerPaletteEntries(hdc: GDI_DC; iLayerPlane: Int32; iStart: Int32; cEntries: Int32; pcr: array of GDI_COLORREF): Int32;
    begin
      Result := z_GetLayerPaletteEntries_ovr_0(hdc, iLayerPlane, iStart, cEntries, pcr[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetLayerPaletteEntries(hdc: GDI_DC; iLayerPlane: Int32; iStart: Int32; cEntries: Int32; var pcr: GDI_COLORREF): Int32;
    begin
      Result := z_GetLayerPaletteEntries_ovr_0(hdc, iLayerPlane, iStart, cEntries, pcr);
    end;
    public z_GetLayerPaletteEntries_ovr_2 := GetFuncOrNil&<function(hdc: GDI_DC; iLayerPlane: Int32; iStart: Int32; cEntries: Int32; pcr: IntPtr): Int32>(z_GetLayerPaletteEntries_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetLayerPaletteEntries(hdc: GDI_DC; iLayerPlane: Int32; iStart: Int32; cEntries: Int32; pcr: IntPtr): Int32;
    begin
      Result := z_GetLayerPaletteEntries_ovr_2(hdc, iLayerPlane, iStart, cEntries, pcr);
    end;
    
    // added in wgl1.0
    public z_GetProcAddress_adr := GetFuncAdr('wglGetProcAddress');
    public z_GetProcAddress_ovr_0 := GetFuncOrNil&<function(lpszProc: IntPtr): IntPtr>(z_GetProcAddress_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetProcAddress(lpszProc: string): IntPtr;
    begin
      var par_1_str_ptr := Marshal.StringToHGlobalAnsi(lpszProc);
      Result := z_GetProcAddress_ovr_0(par_1_str_ptr);
      Marshal.FreeHGlobal(par_1_str_ptr);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetProcAddress(lpszProc: IntPtr): IntPtr;
    begin
      Result := z_GetProcAddress_ovr_0(lpszProc);
    end;
    
    // added in wgl1.0
    public z_MakeCurrent_adr := GetFuncAdr('wglMakeCurrent');
    public z_MakeCurrent_ovr_0 := GetFuncOrNil&<function(hDc: GDI_DC; newContext: GLContext): UInt32>(z_MakeCurrent_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function MakeCurrent(hDc: GDI_DC; newContext: GLContext): UInt32;
    begin
      Result := z_MakeCurrent_ovr_0(hDc, newContext);
    end;
    
    // added in wgl1.0
    public z_RealizeLayerPalette_adr := GetFuncAdr('wglRealizeLayerPalette');
    public z_RealizeLayerPalette_ovr_0 := GetFuncOrNil&<function(hdc: GDI_DC; iLayerPlane: Int32; bRealize: UInt32): UInt32>(z_RealizeLayerPalette_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function RealizeLayerPalette(hdc: GDI_DC; iLayerPlane: Int32; bRealize: UInt32): UInt32;
    begin
      Result := z_RealizeLayerPalette_ovr_0(hdc, iLayerPlane, bRealize);
    end;
    
    // added in wgl1.0
    public z_SetLayerPaletteEntries_adr := GetFuncAdr('wglSetLayerPaletteEntries');
    public z_SetLayerPaletteEntries_ovr_0 := GetFuncOrNil&<function(hdc: GDI_DC; iLayerPlane: Int32; iStart: Int32; cEntries: Int32; var pcr: GDI_COLORREF): Int32>(z_SetLayerPaletteEntries_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function SetLayerPaletteEntries(hdc: GDI_DC; iLayerPlane: Int32; iStart: Int32; cEntries: Int32; pcr: array of GDI_COLORREF): Int32;
    begin
      Result := z_SetLayerPaletteEntries_ovr_0(hdc, iLayerPlane, iStart, cEntries, pcr[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function SetLayerPaletteEntries(hdc: GDI_DC; iLayerPlane: Int32; iStart: Int32; cEntries: Int32; var pcr: GDI_COLORREF): Int32;
    begin
      Result := z_SetLayerPaletteEntries_ovr_0(hdc, iLayerPlane, iStart, cEntries, pcr);
    end;
    public z_SetLayerPaletteEntries_ovr_2 := GetFuncOrNil&<function(hdc: GDI_DC; iLayerPlane: Int32; iStart: Int32; cEntries: Int32; pcr: IntPtr): Int32>(z_SetLayerPaletteEntries_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function SetLayerPaletteEntries(hdc: GDI_DC; iLayerPlane: Int32; iStart: Int32; cEntries: Int32; pcr: IntPtr): Int32;
    begin
      Result := z_SetLayerPaletteEntries_ovr_2(hdc, iLayerPlane, iStart, cEntries, pcr);
    end;
    
    // added in wgl1.0
    public z_ShareLists_adr := GetFuncAdr('wglShareLists');
    public z_ShareLists_ovr_0 := GetFuncOrNil&<function(hrcSrvShare: GLContext; hrcSrvSource: GLContext): UInt32>(z_ShareLists_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function ShareLists(hrcSrvShare: GLContext; hrcSrvSource: GLContext): UInt32;
    begin
      Result := z_ShareLists_ovr_0(hrcSrvShare, hrcSrvSource);
    end;
    
    // added in wgl1.0
    public z_SwapLayerBuffers_adr := GetFuncAdr('wglSwapLayerBuffers');
    public z_SwapLayerBuffers_ovr_0 := GetFuncOrNil&<function(hdc: GDI_DC; fuFlags: UInt32): UInt32>(z_SwapLayerBuffers_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function SwapLayerBuffers(hdc: GDI_DC; fuFlags: UInt32): UInt32;
    begin
      Result := z_SwapLayerBuffers_ovr_0(hdc, fuFlags);
    end;
    
    // added in wgl1.0
    public z_UseFontBitmaps_adr := GetFuncAdr('wglUseFontBitmaps');
    public z_UseFontBitmaps_ovr_0 := GetFuncOrNil&<function(hDC: GDI_DC; first: UInt32; count: UInt32; listBase: UInt32): UInt32>(z_UseFontBitmaps_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function UseFontBitmaps(hDC: GDI_DC; first: UInt32; count: UInt32; listBase: UInt32): UInt32;
    begin
      Result := z_UseFontBitmaps_ovr_0(hDC, first, count, listBase);
    end;
    
    // added in wgl1.0
    public z_UseFontBitmapsA_adr := GetFuncAdr('wglUseFontBitmapsA');
    public z_UseFontBitmapsA_ovr_0 := GetFuncOrNil&<function(hDC: GDI_DC; first: UInt32; count: UInt32; listBase: UInt32): UInt32>(z_UseFontBitmapsA_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function UseFontBitmapsA(hDC: GDI_DC; first: UInt32; count: UInt32; listBase: UInt32): UInt32;
    begin
      Result := z_UseFontBitmapsA_ovr_0(hDC, first, count, listBase);
    end;
    
    // added in wgl1.0
    public z_UseFontBitmapsW_adr := GetFuncAdr('wglUseFontBitmapsW');
    public z_UseFontBitmapsW_ovr_0 := GetFuncOrNil&<function(hDC: GDI_DC; first: UInt32; count: UInt32; listBase: UInt32): UInt32>(z_UseFontBitmapsW_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function UseFontBitmapsW(hDC: GDI_DC; first: UInt32; count: UInt32; listBase: UInt32): UInt32;
    begin
      Result := z_UseFontBitmapsW_ovr_0(hDC, first, count, listBase);
    end;
    
    // added in wgl1.0
    public z_UseFontOutlines_adr := GetFuncAdr('wglUseFontOutlines');
    public z_UseFontOutlines_ovr_0 := GetFuncOrNil&<function(hDC: GDI_DC; first: UInt32; count: UInt32; listBase: UInt32; deviation: single; extrusion: single; format: Int32; var lpgmf: GDI_GlyphmetricsFloat): UInt32>(z_UseFontOutlines_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function UseFontOutlines(hDC: GDI_DC; first: UInt32; count: UInt32; listBase: UInt32; deviation: single; extrusion: single; format: Int32; lpgmf: array of GDI_GlyphmetricsFloat): UInt32;
    begin
      Result := z_UseFontOutlines_ovr_0(hDC, first, count, listBase, deviation, extrusion, format, lpgmf[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function UseFontOutlines(hDC: GDI_DC; first: UInt32; count: UInt32; listBase: UInt32; deviation: single; extrusion: single; format: Int32; var lpgmf: GDI_GlyphmetricsFloat): UInt32;
    begin
      Result := z_UseFontOutlines_ovr_0(hDC, first, count, listBase, deviation, extrusion, format, lpgmf);
    end;
    public z_UseFontOutlines_ovr_2 := GetFuncOrNil&<function(hDC: GDI_DC; first: UInt32; count: UInt32; listBase: UInt32; deviation: single; extrusion: single; format: Int32; lpgmf: IntPtr): UInt32>(z_UseFontOutlines_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function UseFontOutlines(hDC: GDI_DC; first: UInt32; count: UInt32; listBase: UInt32; deviation: single; extrusion: single; format: Int32; lpgmf: IntPtr): UInt32;
    begin
      Result := z_UseFontOutlines_ovr_2(hDC, first, count, listBase, deviation, extrusion, format, lpgmf);
    end;
    
    // added in wgl1.0
    public z_UseFontOutlinesA_adr := GetFuncAdr('wglUseFontOutlinesA');
    public z_UseFontOutlinesA_ovr_0 := GetFuncOrNil&<function(hDC: GDI_DC; first: UInt32; count: UInt32; listBase: UInt32; deviation: single; extrusion: single; format: Int32; var lpgmf: GDI_GlyphmetricsFloat): UInt32>(z_UseFontOutlinesA_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function UseFontOutlinesA(hDC: GDI_DC; first: UInt32; count: UInt32; listBase: UInt32; deviation: single; extrusion: single; format: Int32; lpgmf: array of GDI_GlyphmetricsFloat): UInt32;
    begin
      Result := z_UseFontOutlinesA_ovr_0(hDC, first, count, listBase, deviation, extrusion, format, lpgmf[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function UseFontOutlinesA(hDC: GDI_DC; first: UInt32; count: UInt32; listBase: UInt32; deviation: single; extrusion: single; format: Int32; var lpgmf: GDI_GlyphmetricsFloat): UInt32;
    begin
      Result := z_UseFontOutlinesA_ovr_0(hDC, first, count, listBase, deviation, extrusion, format, lpgmf);
    end;
    public z_UseFontOutlinesA_ovr_2 := GetFuncOrNil&<function(hDC: GDI_DC; first: UInt32; count: UInt32; listBase: UInt32; deviation: single; extrusion: single; format: Int32; lpgmf: IntPtr): UInt32>(z_UseFontOutlinesA_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function UseFontOutlinesA(hDC: GDI_DC; first: UInt32; count: UInt32; listBase: UInt32; deviation: single; extrusion: single; format: Int32; lpgmf: IntPtr): UInt32;
    begin
      Result := z_UseFontOutlinesA_ovr_2(hDC, first, count, listBase, deviation, extrusion, format, lpgmf);
    end;
    
    // added in wgl1.0
    public z_UseFontOutlinesW_adr := GetFuncAdr('wglUseFontOutlinesW');
    public z_UseFontOutlinesW_ovr_0 := GetFuncOrNil&<function(hDC: GDI_DC; first: UInt32; count: UInt32; listBase: UInt32; deviation: single; extrusion: single; format: Int32; var lpgmf: GDI_GlyphmetricsFloat): UInt32>(z_UseFontOutlinesW_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function UseFontOutlinesW(hDC: GDI_DC; first: UInt32; count: UInt32; listBase: UInt32; deviation: single; extrusion: single; format: Int32; lpgmf: array of GDI_GlyphmetricsFloat): UInt32;
    begin
      Result := z_UseFontOutlinesW_ovr_0(hDC, first, count, listBase, deviation, extrusion, format, lpgmf[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function UseFontOutlinesW(hDC: GDI_DC; first: UInt32; count: UInt32; listBase: UInt32; deviation: single; extrusion: single; format: Int32; var lpgmf: GDI_GlyphmetricsFloat): UInt32;
    begin
      Result := z_UseFontOutlinesW_ovr_0(hDC, first, count, listBase, deviation, extrusion, format, lpgmf);
    end;
    public z_UseFontOutlinesW_ovr_2 := GetFuncOrNil&<function(hDC: GDI_DC; first: UInt32; count: UInt32; listBase: UInt32; deviation: single; extrusion: single; format: Int32; lpgmf: IntPtr): UInt32>(z_UseFontOutlinesW_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function UseFontOutlinesW(hDC: GDI_DC; first: UInt32; count: UInt32; listBase: UInt32; deviation: single; extrusion: single; format: Int32; lpgmf: IntPtr): UInt32;
    begin
      Result := z_UseFontOutlinesW_ovr_2(hDC, first, count, listBase, deviation, extrusion, format, lpgmf);
    end;
    
  end;
  
  glx = sealed class
    
    // added in glx1.3
    public z_ChooseFBConfig_adr := GetFuncAdr('glXChooseFBConfig');
    public z_ChooseFBConfig_ovr_0 := GetFuncOrNil&<function(dpy: PXDisplay; screen: Int32; var attrib_list: Int32; var nelements: Int32): ^GLXFBConfig>(z_ChooseFBConfig_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function ChooseFBConfig(dpy: PXDisplay; screen: Int32; attrib_list: array of Int32; nelements: array of Int32): ^GLXFBConfig;
    begin
      Result := z_ChooseFBConfig_ovr_0(dpy, screen, attrib_list[0], nelements[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function ChooseFBConfig(dpy: PXDisplay; screen: Int32; attrib_list: array of Int32; var nelements: Int32): ^GLXFBConfig;
    begin
      Result := z_ChooseFBConfig_ovr_0(dpy, screen, attrib_list[0], nelements);
    end;
    public z_ChooseFBConfig_ovr_2 := GetFuncOrNil&<function(dpy: PXDisplay; screen: Int32; var attrib_list: Int32; nelements: IntPtr): ^GLXFBConfig>(z_ChooseFBConfig_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function ChooseFBConfig(dpy: PXDisplay; screen: Int32; attrib_list: array of Int32; nelements: IntPtr): ^GLXFBConfig;
    begin
      Result := z_ChooseFBConfig_ovr_2(dpy, screen, attrib_list[0], nelements);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function ChooseFBConfig(dpy: PXDisplay; screen: Int32; var attrib_list: Int32; nelements: array of Int32): ^GLXFBConfig;
    begin
      Result := z_ChooseFBConfig_ovr_0(dpy, screen, attrib_list, nelements[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function ChooseFBConfig(dpy: PXDisplay; screen: Int32; var attrib_list: Int32; var nelements: Int32): ^GLXFBConfig;
    begin
      Result := z_ChooseFBConfig_ovr_0(dpy, screen, attrib_list, nelements);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function ChooseFBConfig(dpy: PXDisplay; screen: Int32; var attrib_list: Int32; nelements: IntPtr): ^GLXFBConfig;
    begin
      Result := z_ChooseFBConfig_ovr_2(dpy, screen, attrib_list, nelements);
    end;
    public z_ChooseFBConfig_ovr_6 := GetFuncOrNil&<function(dpy: PXDisplay; screen: Int32; attrib_list: IntPtr; var nelements: Int32): ^GLXFBConfig>(z_ChooseFBConfig_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function ChooseFBConfig(dpy: PXDisplay; screen: Int32; attrib_list: IntPtr; nelements: array of Int32): ^GLXFBConfig;
    begin
      Result := z_ChooseFBConfig_ovr_6(dpy, screen, attrib_list, nelements[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function ChooseFBConfig(dpy: PXDisplay; screen: Int32; attrib_list: IntPtr; var nelements: Int32): ^GLXFBConfig;
    begin
      Result := z_ChooseFBConfig_ovr_6(dpy, screen, attrib_list, nelements);
    end;
    public z_ChooseFBConfig_ovr_8 := GetFuncOrNil&<function(dpy: PXDisplay; screen: Int32; attrib_list: IntPtr; nelements: IntPtr): ^GLXFBConfig>(z_ChooseFBConfig_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function ChooseFBConfig(dpy: PXDisplay; screen: Int32; attrib_list: IntPtr; nelements: IntPtr): ^GLXFBConfig;
    begin
      Result := z_ChooseFBConfig_ovr_8(dpy, screen, attrib_list, nelements);
    end;
    
    // added in glx1.0
    public z_ChooseVisual_adr := GetFuncAdr('glXChooseVisual');
    public z_ChooseVisual_ovr_0 := GetFuncOrNil&<function(dpy: PXDisplay; screen: Int32; var attribList: Int32): PXVisualInfo>(z_ChooseVisual_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function ChooseVisual(dpy: PXDisplay; screen: Int32; attribList: array of Int32): PXVisualInfo;
    begin
      Result := z_ChooseVisual_ovr_0(dpy, screen, attribList[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function ChooseVisual(dpy: PXDisplay; screen: Int32; var attribList: Int32): PXVisualInfo;
    begin
      Result := z_ChooseVisual_ovr_0(dpy, screen, attribList);
    end;
    public z_ChooseVisual_ovr_2 := GetFuncOrNil&<function(dpy: PXDisplay; screen: Int32; attribList: IntPtr): PXVisualInfo>(z_ChooseVisual_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function ChooseVisual(dpy: PXDisplay; screen: Int32; attribList: IntPtr): PXVisualInfo;
    begin
      Result := z_ChooseVisual_ovr_2(dpy, screen, attribList);
    end;
    
    // added in glx1.0
    public z_CopyContext_adr := GetFuncAdr('glXCopyContext');
    public z_CopyContext_ovr_0 := GetFuncOrNil&<procedure(dpy: PXDisplay; src: GLXContext; dst: GLXContext; mask: UInt64)>(z_CopyContext_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure CopyContext(dpy: PXDisplay; src: GLXContext; dst: GLXContext; mask: UInt64);
    begin
      z_CopyContext_ovr_0(dpy, src, dst, mask);
    end;
    
    // added in glx1.0
    public z_CreateContext_adr := GetFuncAdr('glXCreateContext');
    public z_CreateContext_ovr_0 := GetFuncOrNil&<function(dpy: PXDisplay; vis: PXVisualInfo; shareList: GLXContext; direct: UInt32): GLXContext>(z_CreateContext_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function CreateContext(dpy: PXDisplay; vis: PXVisualInfo; shareList: GLXContext; direct: UInt32): GLXContext;
    begin
      Result := z_CreateContext_ovr_0(dpy, vis, shareList, direct);
    end;
    
    // added in glx1.0
    public z_CreateGLXPixmap_adr := GetFuncAdr('glXCreateGLXPixmap');
    public z_CreateGLXPixmap_ovr_0 := GetFuncOrNil&<function(dpy: PXDisplay; visual: PXVisualInfo; pixmap: XPixmap): GLXPixmap>(z_CreateGLXPixmap_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function CreateGLXPixmap(dpy: PXDisplay; visual: PXVisualInfo; pixmap: XPixmap): GLXPixmap;
    begin
      Result := z_CreateGLXPixmap_ovr_0(dpy, visual, pixmap);
    end;
    
    // added in glx1.3
    public z_CreateNewContext_adr := GetFuncAdr('glXCreateNewContext');
    public z_CreateNewContext_ovr_0 := GetFuncOrNil&<function(dpy: PXDisplay; config: GLXFBConfig; render_type: Int32; share_list: GLXContext; direct: UInt32): GLXContext>(z_CreateNewContext_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function CreateNewContext(dpy: PXDisplay; config: GLXFBConfig; render_type: Int32; share_list: GLXContext; direct: UInt32): GLXContext;
    begin
      Result := z_CreateNewContext_ovr_0(dpy, config, render_type, share_list, direct);
    end;
    
    // added in glx1.3
    public z_CreatePbuffer_adr := GetFuncAdr('glXCreatePbuffer');
    public z_CreatePbuffer_ovr_0 := GetFuncOrNil&<function(dpy: PXDisplay; config: GLXFBConfig; var attrib_list: Int32): GLXPbuffer>(z_CreatePbuffer_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function CreatePbuffer(dpy: PXDisplay; config: GLXFBConfig; attrib_list: array of Int32): GLXPbuffer;
    begin
      Result := z_CreatePbuffer_ovr_0(dpy, config, attrib_list[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function CreatePbuffer(dpy: PXDisplay; config: GLXFBConfig; var attrib_list: Int32): GLXPbuffer;
    begin
      Result := z_CreatePbuffer_ovr_0(dpy, config, attrib_list);
    end;
    public z_CreatePbuffer_ovr_2 := GetFuncOrNil&<function(dpy: PXDisplay; config: GLXFBConfig; attrib_list: IntPtr): GLXPbuffer>(z_CreatePbuffer_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function CreatePbuffer(dpy: PXDisplay; config: GLXFBConfig; attrib_list: IntPtr): GLXPbuffer;
    begin
      Result := z_CreatePbuffer_ovr_2(dpy, config, attrib_list);
    end;
    
    // added in glx1.3
    public z_CreatePixmap_adr := GetFuncAdr('glXCreatePixmap');
    public z_CreatePixmap_ovr_0 := GetFuncOrNil&<function(dpy: PXDisplay; config: GLXFBConfig; pixmap: XPixmap; var attrib_list: Int32): GLXPixmap>(z_CreatePixmap_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function CreatePixmap(dpy: PXDisplay; config: GLXFBConfig; pixmap: XPixmap; attrib_list: array of Int32): GLXPixmap;
    begin
      Result := z_CreatePixmap_ovr_0(dpy, config, pixmap, attrib_list[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function CreatePixmap(dpy: PXDisplay; config: GLXFBConfig; pixmap: XPixmap; var attrib_list: Int32): GLXPixmap;
    begin
      Result := z_CreatePixmap_ovr_0(dpy, config, pixmap, attrib_list);
    end;
    public z_CreatePixmap_ovr_2 := GetFuncOrNil&<function(dpy: PXDisplay; config: GLXFBConfig; pixmap: XPixmap; attrib_list: IntPtr): GLXPixmap>(z_CreatePixmap_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function CreatePixmap(dpy: PXDisplay; config: GLXFBConfig; pixmap: XPixmap; attrib_list: IntPtr): GLXPixmap;
    begin
      Result := z_CreatePixmap_ovr_2(dpy, config, pixmap, attrib_list);
    end;
    
    // added in glx1.3
    public z_CreateWindow_adr := GetFuncAdr('glXCreateWindow');
    public z_CreateWindow_ovr_0 := GetFuncOrNil&<function(dpy: PXDisplay; config: GLXFBConfig; win: XWindow; var attrib_list: Int32): GLXWindow>(z_CreateWindow_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function CreateWindow(dpy: PXDisplay; config: GLXFBConfig; win: XWindow; attrib_list: array of Int32): GLXWindow;
    begin
      Result := z_CreateWindow_ovr_0(dpy, config, win, attrib_list[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function CreateWindow(dpy: PXDisplay; config: GLXFBConfig; win: XWindow; var attrib_list: Int32): GLXWindow;
    begin
      Result := z_CreateWindow_ovr_0(dpy, config, win, attrib_list);
    end;
    public z_CreateWindow_ovr_2 := GetFuncOrNil&<function(dpy: PXDisplay; config: GLXFBConfig; win: XWindow; attrib_list: IntPtr): GLXWindow>(z_CreateWindow_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function CreateWindow(dpy: PXDisplay; config: GLXFBConfig; win: XWindow; attrib_list: IntPtr): GLXWindow;
    begin
      Result := z_CreateWindow_ovr_2(dpy, config, win, attrib_list);
    end;
    
    // added in glx1.0
    public z_DestroyContext_adr := GetFuncAdr('glXDestroyContext');
    public z_DestroyContext_ovr_0 := GetFuncOrNil&<procedure(dpy: PXDisplay; ctx: GLXContext)>(z_DestroyContext_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure DestroyContext(dpy: PXDisplay; ctx: GLXContext);
    begin
      z_DestroyContext_ovr_0(dpy, ctx);
    end;
    
    // added in glx1.0
    public z_DestroyGLXPixmap_adr := GetFuncAdr('glXDestroyGLXPixmap');
    public z_DestroyGLXPixmap_ovr_0 := GetFuncOrNil&<procedure(dpy: PXDisplay; pixmap: GLXPixmap)>(z_DestroyGLXPixmap_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure DestroyGLXPixmap(dpy: PXDisplay; pixmap: GLXPixmap);
    begin
      z_DestroyGLXPixmap_ovr_0(dpy, pixmap);
    end;
    
    // added in glx1.3
    public z_DestroyPbuffer_adr := GetFuncAdr('glXDestroyPbuffer');
    public z_DestroyPbuffer_ovr_0 := GetFuncOrNil&<procedure(dpy: PXDisplay; pbuf: GLXPbuffer)>(z_DestroyPbuffer_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure DestroyPbuffer(dpy: PXDisplay; pbuf: GLXPbuffer);
    begin
      z_DestroyPbuffer_ovr_0(dpy, pbuf);
    end;
    
    // added in glx1.3
    public z_DestroyPixmap_adr := GetFuncAdr('glXDestroyPixmap');
    public z_DestroyPixmap_ovr_0 := GetFuncOrNil&<procedure(dpy: PXDisplay; pixmap: GLXPixmap)>(z_DestroyPixmap_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure DestroyPixmap(dpy: PXDisplay; pixmap: GLXPixmap);
    begin
      z_DestroyPixmap_ovr_0(dpy, pixmap);
    end;
    
    // added in glx1.3
    public z_DestroyWindow_adr := GetFuncAdr('glXDestroyWindow');
    public z_DestroyWindow_ovr_0 := GetFuncOrNil&<procedure(dpy: PXDisplay; win: GLXWindow)>(z_DestroyWindow_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure DestroyWindow(dpy: PXDisplay; win: GLXWindow);
    begin
      z_DestroyWindow_ovr_0(dpy, win);
    end;
    
    // added in glx1.1
    public z_GetClientString_adr := GetFuncAdr('glXGetClientString');
    public z_GetClientString_ovr_0 := GetFuncOrNil&<function(dpy: PXDisplay; name: Int32): IntPtr>(z_GetClientString_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetClientString(dpy: PXDisplay; name: Int32): string;
    begin
      par_0_str_ptr := z_GetClientString_ovr_0(dpy, name);
      Result := Marshal.PtrToStringAnsi(par_0_str_ptr);
    end;
    
    // added in glx1.0
    public z_GetConfig_adr := GetFuncAdr('glXGetConfig');
    public z_GetConfig_ovr_0 := GetFuncOrNil&<function(dpy: PXDisplay; visual: PXVisualInfo; attrib: Int32; var value: Int32): Int32>(z_GetConfig_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetConfig(dpy: PXDisplay; visual: PXVisualInfo; attrib: Int32; value: array of Int32): Int32;
    begin
      Result := z_GetConfig_ovr_0(dpy, visual, attrib, value[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetConfig(dpy: PXDisplay; visual: PXVisualInfo; attrib: Int32; var value: Int32): Int32;
    begin
      Result := z_GetConfig_ovr_0(dpy, visual, attrib, value);
    end;
    public z_GetConfig_ovr_2 := GetFuncOrNil&<function(dpy: PXDisplay; visual: PXVisualInfo; attrib: Int32; value: IntPtr): Int32>(z_GetConfig_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetConfig(dpy: PXDisplay; visual: PXVisualInfo; attrib: Int32; value: IntPtr): Int32;
    begin
      Result := z_GetConfig_ovr_2(dpy, visual, attrib, value);
    end;
    
    // added in glx1.0
    public z_GetCurrentContext_adr := GetFuncAdr('glXGetCurrentContext');
    public z_GetCurrentContext_ovr_0 := GetFuncOrNil&<function: GLXContext>(z_GetCurrentContext_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetCurrentContext: GLXContext;
    begin
      Result := z_GetCurrentContext_ovr_0;
    end;
    
    // added in glx1.2
    public z_GetCurrentDisplay_adr := GetFuncAdr('glXGetCurrentDisplay');
    public z_GetCurrentDisplay_ovr_0 := GetFuncOrNil&<function: PXDisplay>(z_GetCurrentDisplay_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetCurrentDisplay: PXDisplay;
    begin
      Result := z_GetCurrentDisplay_ovr_0;
    end;
    
    // added in glx1.0
    public z_GetCurrentDrawable_adr := GetFuncAdr('glXGetCurrentDrawable');
    public z_GetCurrentDrawable_ovr_0 := GetFuncOrNil&<function: GLXDrawable>(z_GetCurrentDrawable_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetCurrentDrawable: GLXDrawable;
    begin
      Result := z_GetCurrentDrawable_ovr_0;
    end;
    
    // added in glx1.3
    public z_GetCurrentReadDrawable_adr := GetFuncAdr('glXGetCurrentReadDrawable');
    public z_GetCurrentReadDrawable_ovr_0 := GetFuncOrNil&<function: GLXDrawable>(z_GetCurrentReadDrawable_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetCurrentReadDrawable: GLXDrawable;
    begin
      Result := z_GetCurrentReadDrawable_ovr_0;
    end;
    
    // added in glx1.3
    public z_GetFBConfigAttrib_adr := GetFuncAdr('glXGetFBConfigAttrib');
    public z_GetFBConfigAttrib_ovr_0 := GetFuncOrNil&<function(dpy: PXDisplay; config: GLXFBConfig; attribute: Int32; var value: Int32): Int32>(z_GetFBConfigAttrib_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetFBConfigAttrib(dpy: PXDisplay; config: GLXFBConfig; attribute: Int32; value: array of Int32): Int32;
    begin
      Result := z_GetFBConfigAttrib_ovr_0(dpy, config, attribute, value[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetFBConfigAttrib(dpy: PXDisplay; config: GLXFBConfig; attribute: Int32; var value: Int32): Int32;
    begin
      Result := z_GetFBConfigAttrib_ovr_0(dpy, config, attribute, value);
    end;
    public z_GetFBConfigAttrib_ovr_2 := GetFuncOrNil&<function(dpy: PXDisplay; config: GLXFBConfig; attribute: Int32; value: IntPtr): Int32>(z_GetFBConfigAttrib_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetFBConfigAttrib(dpy: PXDisplay; config: GLXFBConfig; attribute: Int32; value: IntPtr): Int32;
    begin
      Result := z_GetFBConfigAttrib_ovr_2(dpy, config, attribute, value);
    end;
    
    // added in glx1.3
    public z_GetFBConfigs_adr := GetFuncAdr('glXGetFBConfigs');
    public z_GetFBConfigs_ovr_0 := GetFuncOrNil&<function(dpy: PXDisplay; screen: Int32; var nelements: Int32): ^GLXFBConfig>(z_GetFBConfigs_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetFBConfigs(dpy: PXDisplay; screen: Int32; nelements: array of Int32): ^GLXFBConfig;
    begin
      Result := z_GetFBConfigs_ovr_0(dpy, screen, nelements[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetFBConfigs(dpy: PXDisplay; screen: Int32; var nelements: Int32): ^GLXFBConfig;
    begin
      Result := z_GetFBConfigs_ovr_0(dpy, screen, nelements);
    end;
    public z_GetFBConfigs_ovr_2 := GetFuncOrNil&<function(dpy: PXDisplay; screen: Int32; nelements: IntPtr): ^GLXFBConfig>(z_GetFBConfigs_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetFBConfigs(dpy: PXDisplay; screen: Int32; nelements: IntPtr): ^GLXFBConfig;
    begin
      Result := z_GetFBConfigs_ovr_2(dpy, screen, nelements);
    end;
    
    // added in glx1.4
    public z_GetProcAddress_adr := GetFuncAdr('glXGetProcAddress');
    public z_GetProcAddress_ovr_0 := GetFuncOrNil&<function(var procName: Byte): IntPtr>(z_GetProcAddress_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetProcAddress(procName: array of Byte): IntPtr;
    begin
      Result := z_GetProcAddress_ovr_0(procName[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetProcAddress(var procName: Byte): IntPtr;
    begin
      Result := z_GetProcAddress_ovr_0(procName);
    end;
    public z_GetProcAddress_ovr_2 := GetFuncOrNil&<function(procName: IntPtr): IntPtr>(z_GetProcAddress_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetProcAddress(procName: IntPtr): IntPtr;
    begin
      Result := z_GetProcAddress_ovr_2(procName);
    end;
    
    // added in glx1.3
    public z_GetSelectedEvent_adr := GetFuncAdr('glXGetSelectedEvent');
    public z_GetSelectedEvent_ovr_0 := GetFuncOrNil&<procedure(dpy: PXDisplay; draw: GLXDrawable; var event_mask: UInt64)>(z_GetSelectedEvent_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetSelectedEvent(dpy: PXDisplay; draw: GLXDrawable; event_mask: array of UInt64);
    begin
      z_GetSelectedEvent_ovr_0(dpy, draw, event_mask[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetSelectedEvent(dpy: PXDisplay; draw: GLXDrawable; var event_mask: UInt64);
    begin
      z_GetSelectedEvent_ovr_0(dpy, draw, event_mask);
    end;
    public z_GetSelectedEvent_ovr_2 := GetFuncOrNil&<procedure(dpy: PXDisplay; draw: GLXDrawable; event_mask: IntPtr)>(z_GetSelectedEvent_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetSelectedEvent(dpy: PXDisplay; draw: GLXDrawable; event_mask: IntPtr);
    begin
      z_GetSelectedEvent_ovr_2(dpy, draw, event_mask);
    end;
    
    // added in glx1.3
    public z_GetVisualFromFBConfig_adr := GetFuncAdr('glXGetVisualFromFBConfig');
    public z_GetVisualFromFBConfig_ovr_0 := GetFuncOrNil&<function(dpy: PXDisplay; config: GLXFBConfig): PXVisualInfo>(z_GetVisualFromFBConfig_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetVisualFromFBConfig(dpy: PXDisplay; config: GLXFBConfig): PXVisualInfo;
    begin
      Result := z_GetVisualFromFBConfig_ovr_0(dpy, config);
    end;
    
    // added in glx1.0
    public z_IsDirect_adr := GetFuncAdr('glXIsDirect');
    public z_IsDirect_ovr_0 := GetFuncOrNil&<function(dpy: PXDisplay; ctx: GLXContext): UInt32>(z_IsDirect_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function IsDirect(dpy: PXDisplay; ctx: GLXContext): UInt32;
    begin
      Result := z_IsDirect_ovr_0(dpy, ctx);
    end;
    
    // added in glx1.3
    public z_MakeContextCurrent_adr := GetFuncAdr('glXMakeContextCurrent');
    public z_MakeContextCurrent_ovr_0 := GetFuncOrNil&<function(dpy: PXDisplay; draw: GLXDrawable; read: GLXDrawable; ctx: GLXContext): UInt32>(z_MakeContextCurrent_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function MakeContextCurrent(dpy: PXDisplay; draw: GLXDrawable; read: GLXDrawable; ctx: GLXContext): UInt32;
    begin
      Result := z_MakeContextCurrent_ovr_0(dpy, draw, read, ctx);
    end;
    
    // added in glx1.0
    public z_MakeCurrent_adr := GetFuncAdr('glXMakeCurrent');
    public z_MakeCurrent_ovr_0 := GetFuncOrNil&<function(dpy: PXDisplay; drawable: GLXDrawable; ctx: GLXContext): UInt32>(z_MakeCurrent_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function MakeCurrent(dpy: PXDisplay; drawable: GLXDrawable; ctx: GLXContext): UInt32;
    begin
      Result := z_MakeCurrent_ovr_0(dpy, drawable, ctx);
    end;
    
    // added in glx1.3
    public z_QueryContext_adr := GetFuncAdr('glXQueryContext');
    public z_QueryContext_ovr_0 := GetFuncOrNil&<function(dpy: PXDisplay; ctx: GLXContext; attribute: Int32; var value: Int32): Int32>(z_QueryContext_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function QueryContext(dpy: PXDisplay; ctx: GLXContext; attribute: Int32; value: array of Int32): Int32;
    begin
      Result := z_QueryContext_ovr_0(dpy, ctx, attribute, value[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function QueryContext(dpy: PXDisplay; ctx: GLXContext; attribute: Int32; var value: Int32): Int32;
    begin
      Result := z_QueryContext_ovr_0(dpy, ctx, attribute, value);
    end;
    public z_QueryContext_ovr_2 := GetFuncOrNil&<function(dpy: PXDisplay; ctx: GLXContext; attribute: Int32; value: IntPtr): Int32>(z_QueryContext_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function QueryContext(dpy: PXDisplay; ctx: GLXContext; attribute: Int32; value: IntPtr): Int32;
    begin
      Result := z_QueryContext_ovr_2(dpy, ctx, attribute, value);
    end;
    
    // added in glx1.3
    public z_QueryDrawable_adr := GetFuncAdr('glXQueryDrawable');
    public z_QueryDrawable_ovr_0 := GetFuncOrNil&<procedure(dpy: PXDisplay; draw: GLXDrawable; attribute: Int32; var value: UInt32)>(z_QueryDrawable_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure QueryDrawable(dpy: PXDisplay; draw: GLXDrawable; attribute: Int32; value: array of UInt32);
    begin
      z_QueryDrawable_ovr_0(dpy, draw, attribute, value[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure QueryDrawable(dpy: PXDisplay; draw: GLXDrawable; attribute: Int32; var value: UInt32);
    begin
      z_QueryDrawable_ovr_0(dpy, draw, attribute, value);
    end;
    public z_QueryDrawable_ovr_2 := GetFuncOrNil&<procedure(dpy: PXDisplay; draw: GLXDrawable; attribute: Int32; value: IntPtr)>(z_QueryDrawable_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure QueryDrawable(dpy: PXDisplay; draw: GLXDrawable; attribute: Int32; value: IntPtr);
    begin
      z_QueryDrawable_ovr_2(dpy, draw, attribute, value);
    end;
    
    // added in glx1.0
    public z_QueryExtension_adr := GetFuncAdr('glXQueryExtension');
    public z_QueryExtension_ovr_0 := GetFuncOrNil&<function(dpy: PXDisplay; var errorb: Int32; var event: Int32): UInt32>(z_QueryExtension_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function QueryExtension(dpy: PXDisplay; errorb: array of Int32; event: array of Int32): UInt32;
    begin
      Result := z_QueryExtension_ovr_0(dpy, errorb[0], event[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function QueryExtension(dpy: PXDisplay; errorb: array of Int32; var event: Int32): UInt32;
    begin
      Result := z_QueryExtension_ovr_0(dpy, errorb[0], event);
    end;
    public z_QueryExtension_ovr_2 := GetFuncOrNil&<function(dpy: PXDisplay; var errorb: Int32; event: IntPtr): UInt32>(z_QueryExtension_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function QueryExtension(dpy: PXDisplay; errorb: array of Int32; event: IntPtr): UInt32;
    begin
      Result := z_QueryExtension_ovr_2(dpy, errorb[0], event);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function QueryExtension(dpy: PXDisplay; var errorb: Int32; event: array of Int32): UInt32;
    begin
      Result := z_QueryExtension_ovr_0(dpy, errorb, event[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function QueryExtension(dpy: PXDisplay; var errorb: Int32; var event: Int32): UInt32;
    begin
      Result := z_QueryExtension_ovr_0(dpy, errorb, event);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function QueryExtension(dpy: PXDisplay; var errorb: Int32; event: IntPtr): UInt32;
    begin
      Result := z_QueryExtension_ovr_2(dpy, errorb, event);
    end;
    public z_QueryExtension_ovr_6 := GetFuncOrNil&<function(dpy: PXDisplay; errorb: IntPtr; var event: Int32): UInt32>(z_QueryExtension_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function QueryExtension(dpy: PXDisplay; errorb: IntPtr; event: array of Int32): UInt32;
    begin
      Result := z_QueryExtension_ovr_6(dpy, errorb, event[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function QueryExtension(dpy: PXDisplay; errorb: IntPtr; var event: Int32): UInt32;
    begin
      Result := z_QueryExtension_ovr_6(dpy, errorb, event);
    end;
    public z_QueryExtension_ovr_8 := GetFuncOrNil&<function(dpy: PXDisplay; errorb: IntPtr; event: IntPtr): UInt32>(z_QueryExtension_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function QueryExtension(dpy: PXDisplay; errorb: IntPtr; event: IntPtr): UInt32;
    begin
      Result := z_QueryExtension_ovr_8(dpy, errorb, event);
    end;
    
    // added in glx1.1
    public z_QueryExtensionsString_adr := GetFuncAdr('glXQueryExtensionsString');
    public z_QueryExtensionsString_ovr_0 := GetFuncOrNil&<function(dpy: PXDisplay; screen: Int32): IntPtr>(z_QueryExtensionsString_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function QueryExtensionsString(dpy: PXDisplay; screen: Int32): string;
    begin
      par_0_str_ptr := z_QueryExtensionsString_ovr_0(dpy, screen);
      Result := Marshal.PtrToStringAnsi(par_0_str_ptr);
    end;
    
    // added in glx1.1
    public z_QueryServerString_adr := GetFuncAdr('glXQueryServerString');
    public z_QueryServerString_ovr_0 := GetFuncOrNil&<function(dpy: PXDisplay; screen: Int32; name: Int32): IntPtr>(z_QueryServerString_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function QueryServerString(dpy: PXDisplay; screen: Int32; name: Int32): string;
    begin
      par_0_str_ptr := z_QueryServerString_ovr_0(dpy, screen, name);
      Result := Marshal.PtrToStringAnsi(par_0_str_ptr);
    end;
    
    // added in glx1.0
    public z_QueryVersion_adr := GetFuncAdr('glXQueryVersion');
    public z_QueryVersion_ovr_0 := GetFuncOrNil&<function(dpy: PXDisplay; var maj: Int32; var min: Int32): UInt32>(z_QueryVersion_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function QueryVersion(dpy: PXDisplay; maj: array of Int32; min: array of Int32): UInt32;
    begin
      Result := z_QueryVersion_ovr_0(dpy, maj[0], min[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function QueryVersion(dpy: PXDisplay; maj: array of Int32; var min: Int32): UInt32;
    begin
      Result := z_QueryVersion_ovr_0(dpy, maj[0], min);
    end;
    public z_QueryVersion_ovr_2 := GetFuncOrNil&<function(dpy: PXDisplay; var maj: Int32; min: IntPtr): UInt32>(z_QueryVersion_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function QueryVersion(dpy: PXDisplay; maj: array of Int32; min: IntPtr): UInt32;
    begin
      Result := z_QueryVersion_ovr_2(dpy, maj[0], min);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function QueryVersion(dpy: PXDisplay; var maj: Int32; min: array of Int32): UInt32;
    begin
      Result := z_QueryVersion_ovr_0(dpy, maj, min[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function QueryVersion(dpy: PXDisplay; var maj: Int32; var min: Int32): UInt32;
    begin
      Result := z_QueryVersion_ovr_0(dpy, maj, min);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function QueryVersion(dpy: PXDisplay; var maj: Int32; min: IntPtr): UInt32;
    begin
      Result := z_QueryVersion_ovr_2(dpy, maj, min);
    end;
    public z_QueryVersion_ovr_6 := GetFuncOrNil&<function(dpy: PXDisplay; maj: IntPtr; var min: Int32): UInt32>(z_QueryVersion_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function QueryVersion(dpy: PXDisplay; maj: IntPtr; min: array of Int32): UInt32;
    begin
      Result := z_QueryVersion_ovr_6(dpy, maj, min[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function QueryVersion(dpy: PXDisplay; maj: IntPtr; var min: Int32): UInt32;
    begin
      Result := z_QueryVersion_ovr_6(dpy, maj, min);
    end;
    public z_QueryVersion_ovr_8 := GetFuncOrNil&<function(dpy: PXDisplay; maj: IntPtr; min: IntPtr): UInt32>(z_QueryVersion_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function QueryVersion(dpy: PXDisplay; maj: IntPtr; min: IntPtr): UInt32;
    begin
      Result := z_QueryVersion_ovr_8(dpy, maj, min);
    end;
    
    // added in glx1.3
    public z_SelectEvent_adr := GetFuncAdr('glXSelectEvent');
    public z_SelectEvent_ovr_0 := GetFuncOrNil&<procedure(dpy: PXDisplay; draw: GLXDrawable; event_mask: UInt64)>(z_SelectEvent_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure SelectEvent(dpy: PXDisplay; draw: GLXDrawable; event_mask: UInt64);
    begin
      z_SelectEvent_ovr_0(dpy, draw, event_mask);
    end;
    
    // added in glx1.0
    public z_SwapBuffers_adr := GetFuncAdr('glXSwapBuffers');
    public z_SwapBuffers_ovr_0 := GetFuncOrNil&<procedure(dpy: PXDisplay; drawable: GLXDrawable)>(z_SwapBuffers_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure SwapBuffers(dpy: PXDisplay; drawable: GLXDrawable);
    begin
      z_SwapBuffers_ovr_0(dpy, drawable);
    end;
    
    // added in glx1.0
    public z_UseXFont_adr := GetFuncAdr('glXUseXFont');
    public z_UseXFont_ovr_0 := GetFuncOrNil&<procedure(font: XFont; first: Int32; count: Int32; list: Int32)>(z_UseXFont_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure UseXFont(font: XFont; first: Int32; count: Int32; list: Int32);
    begin
      z_UseXFont_ovr_0(font, first, count, list);
    end;
    
    // added in glx1.0
    public z_WaitGL_adr := GetFuncAdr('glXWaitGL');
    public z_WaitGL_ovr_0 := GetFuncOrNil&<procedure>(z_WaitGL_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure WaitGL;
    begin
      z_WaitGL_ovr_0;
    end;
    
    // added in glx1.0
    public z_WaitX_adr := GetFuncAdr('glXWaitX');
    public z_WaitX_ovr_0 := GetFuncOrNil&<procedure>(z_WaitX_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure WaitX;
    begin
      z_WaitX_ovr_0;
    end;
    
  end;
  
  
  