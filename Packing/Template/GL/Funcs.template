  
  
  
  gl = sealed class
    public static function GetFuncAdr([MarshalAs(UnmanagedType.LPStr)] lpszProc: string): IntPtr;
    external 'opengl32.dll' name 'wglGetProcAddress';
    public static function GetFuncOrNil<T>(fadr: IntPtr) :=
    fadr=IntPtr.Zero ? default(T) :
    Marshal.GetDelegateForFunctionPointer&<T>(fadr);
    
    // added in gl4.1
    public z_ActiveShaderProgram_adr := GetFuncAdr('glActiveShaderProgram');
    public z_ActiveShaderProgram_ovr_0 := GetFuncOrNil&<procedure(pipeline: ProgramPipelineName; &program: ProgramName)>(z_ActiveShaderProgram_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ActiveShaderProgram(pipeline: ProgramPipelineName; &program: ProgramName);
    begin
      z_ActiveShaderProgram_ovr_0(pipeline, &program);
    end;
    
    // added in gl1.3
    public z_ActiveTexture_adr := GetFuncAdr('glActiveTexture');
    public z_ActiveTexture_ovr_0 := GetFuncOrNil&<procedure(texture: TextureUnit)>(z_ActiveTexture_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ActiveTexture(texture: TextureUnit);
    begin
      z_ActiveTexture_ovr_0(texture);
    end;
    
    // added in gl2.0
    public z_AttachShader_adr := GetFuncAdr('glAttachShader');
    public z_AttachShader_ovr_0 := GetFuncOrNil&<procedure(&program: ProgramName; shader: ShaderName)>(z_AttachShader_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure AttachShader(&program: ProgramName; shader: ShaderName);
    begin
      z_AttachShader_ovr_0(&program, shader);
    end;
    
    // added in gl3.0
    public z_BeginConditionalRender_adr := GetFuncAdr('glBeginConditionalRender');
    public z_BeginConditionalRender_ovr_0 := GetFuncOrNil&<procedure(id: UInt32; mode: ConditionalRenderMode)>(z_BeginConditionalRender_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure BeginConditionalRender(id: UInt32; mode: ConditionalRenderMode);
    begin
      z_BeginConditionalRender_ovr_0(id, mode);
    end;
    
    // added in gl1.5
    public z_BeginQuery_adr := GetFuncAdr('glBeginQuery');
    public z_BeginQuery_ovr_0 := GetFuncOrNil&<procedure(target: QueryTarget; id: QueryName)>(z_BeginQuery_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure BeginQuery(target: QueryTarget; id: QueryName);
    begin
      z_BeginQuery_ovr_0(target, id);
    end;
    
    // added in gl4.0
    public z_BeginQueryIndexed_adr := GetFuncAdr('glBeginQueryIndexed');
    public z_BeginQueryIndexed_ovr_0 := GetFuncOrNil&<procedure(target: QueryTarget; index: UInt32; id: QueryName)>(z_BeginQueryIndexed_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure BeginQueryIndexed(target: QueryTarget; index: UInt32; id: QueryName);
    begin
      z_BeginQueryIndexed_ovr_0(target, index, id);
    end;
    
    // added in gl3.0
    public z_BeginTransformFeedback_adr := GetFuncAdr('glBeginTransformFeedback');
    public z_BeginTransformFeedback_ovr_0 := GetFuncOrNil&<procedure(primitiveMode: PrimitiveType)>(z_BeginTransformFeedback_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure BeginTransformFeedback(primitiveMode: PrimitiveType);
    begin
      z_BeginTransformFeedback_ovr_0(primitiveMode);
    end;
    
    // added in gl2.0
    public z_BindAttribLocation_adr := GetFuncAdr('glBindAttribLocation');
    public z_BindAttribLocation_ovr_0 := GetFuncOrNil&<procedure(&program: ProgramName; index: UInt32; name: IntPtr)>(z_BindAttribLocation_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure BindAttribLocation(&program: ProgramName; index: UInt32; name: string);
    begin
      var par_3_str_ptr := Marshal.StringToHGlobalAnsi(name);
      z_BindAttribLocation_ovr_0(&program, index, par_3_str_ptr);
      Marshal.FreeHGlobal(par_3_str_ptr);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure BindAttribLocation(&program: ProgramName; index: UInt32; name: IntPtr);
    begin
      z_BindAttribLocation_ovr_0(&program, index, name);
    end;
    
    // added in gl1.5
    public z_BindBuffer_adr := GetFuncAdr('glBindBuffer');
    public z_BindBuffer_ovr_0 := GetFuncOrNil&<procedure(target: BufferTargetARB; buffer: BufferName)>(z_BindBuffer_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure BindBuffer(target: BufferTargetARB; buffer: BufferName);
    begin
      z_BindBuffer_ovr_0(target, buffer);
    end;
    
    // added in gl3.1
    public z_BindBufferBase_adr := GetFuncAdr('glBindBufferBase');
    public z_BindBufferBase_ovr_0 := GetFuncOrNil&<procedure(target: BufferTargetARB; index: UInt32; buffer: BufferName)>(z_BindBufferBase_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure BindBufferBase(target: BufferTargetARB; index: UInt32; buffer: BufferName);
    begin
      z_BindBufferBase_ovr_0(target, index, buffer);
    end;
    
    // added in gl3.1
    public z_BindBufferRange_adr := GetFuncAdr('glBindBufferRange');
    public z_BindBufferRange_ovr_0 := GetFuncOrNil&<procedure(target: BufferTargetARB; index: UInt32; buffer: BufferName; offset: IntPtr; size: IntPtr)>(z_BindBufferRange_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure BindBufferRange(target: BufferTargetARB; index: UInt32; buffer: BufferName; offset: IntPtr; size: IntPtr);
    begin
      z_BindBufferRange_ovr_0(target, index, buffer, offset, size);
    end;
    
    // added in gl4.4
    public z_BindBuffersBase_adr := GetFuncAdr('glBindBuffersBase');
    public z_BindBuffersBase_ovr_0 := GetFuncOrNil&<procedure(target: BufferTargetARB; first: UInt32; count: Int32; var buffers: UInt32)>(z_BindBuffersBase_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure BindBuffersBase(target: BufferTargetARB; first: UInt32; count: Int32; buffers: array of UInt32);
    begin
      z_BindBuffersBase_ovr_0(target, first, count, buffers[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure BindBuffersBase(target: BufferTargetARB; first: UInt32; count: Int32; var buffers: UInt32);
    begin
      z_BindBuffersBase_ovr_0(target, first, count, buffers);
    end;
    public z_BindBuffersBase_ovr_2 := GetFuncOrNil&<procedure(target: BufferTargetARB; first: UInt32; count: Int32; buffers: IntPtr)>(z_BindBuffersBase_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure BindBuffersBase(target: BufferTargetARB; first: UInt32; count: Int32; buffers: IntPtr);
    begin
      z_BindBuffersBase_ovr_2(target, first, count, buffers);
    end;
    
    // added in gl4.4
    public z_BindBuffersRange_adr := GetFuncAdr('glBindBuffersRange');
    public z_BindBuffersRange_ovr_0 := GetFuncOrNil&<procedure(target: BufferTargetARB; first: UInt32; count: Int32; var buffers: UInt32; var offsets: IntPtr; var sizes: IntPtr)>(z_BindBuffersRange_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure BindBuffersRange(target: BufferTargetARB; first: UInt32; count: Int32; buffers: array of UInt32; offsets: array of IntPtr; sizes: array of IntPtr);
    begin
      z_BindBuffersRange_ovr_0(target, first, count, buffers[0], offsets[0], sizes[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure BindBuffersRange(target: BufferTargetARB; first: UInt32; count: Int32; buffers: array of UInt32; offsets: array of IntPtr; var sizes: IntPtr);
    begin
      z_BindBuffersRange_ovr_0(target, first, count, buffers[0], offsets[0], sizes);
    end;
    public z_BindBuffersRange_ovr_2 := GetFuncOrNil&<procedure(target: BufferTargetARB; first: UInt32; count: Int32; var buffers: UInt32; var offsets: IntPtr; sizes: pointer)>(z_BindBuffersRange_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure BindBuffersRange(target: BufferTargetARB; first: UInt32; count: Int32; buffers: array of UInt32; offsets: array of IntPtr; sizes: pointer);
    begin
      z_BindBuffersRange_ovr_2(target, first, count, buffers[0], offsets[0], sizes);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure BindBuffersRange(target: BufferTargetARB; first: UInt32; count: Int32; buffers: array of UInt32; var offsets: IntPtr; sizes: array of IntPtr);
    begin
      z_BindBuffersRange_ovr_0(target, first, count, buffers[0], offsets, sizes[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure BindBuffersRange(target: BufferTargetARB; first: UInt32; count: Int32; buffers: array of UInt32; var offsets: IntPtr; var sizes: IntPtr);
    begin
      z_BindBuffersRange_ovr_0(target, first, count, buffers[0], offsets, sizes);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure BindBuffersRange(target: BufferTargetARB; first: UInt32; count: Int32; buffers: array of UInt32; var offsets: IntPtr; sizes: pointer);
    begin
      z_BindBuffersRange_ovr_2(target, first, count, buffers[0], offsets, sizes);
    end;
    public z_BindBuffersRange_ovr_6 := GetFuncOrNil&<procedure(target: BufferTargetARB; first: UInt32; count: Int32; var buffers: UInt32; offsets: pointer; var sizes: IntPtr)>(z_BindBuffersRange_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure BindBuffersRange(target: BufferTargetARB; first: UInt32; count: Int32; buffers: array of UInt32; offsets: pointer; sizes: array of IntPtr);
    begin
      z_BindBuffersRange_ovr_6(target, first, count, buffers[0], offsets, sizes[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure BindBuffersRange(target: BufferTargetARB; first: UInt32; count: Int32; buffers: array of UInt32; offsets: pointer; var sizes: IntPtr);
    begin
      z_BindBuffersRange_ovr_6(target, first, count, buffers[0], offsets, sizes);
    end;
    public z_BindBuffersRange_ovr_8 := GetFuncOrNil&<procedure(target: BufferTargetARB; first: UInt32; count: Int32; var buffers: UInt32; offsets: pointer; sizes: pointer)>(z_BindBuffersRange_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure BindBuffersRange(target: BufferTargetARB; first: UInt32; count: Int32; buffers: array of UInt32; offsets: pointer; sizes: pointer);
    begin
      z_BindBuffersRange_ovr_8(target, first, count, buffers[0], offsets, sizes);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure BindBuffersRange(target: BufferTargetARB; first: UInt32; count: Int32; var buffers: UInt32; offsets: array of IntPtr; sizes: array of IntPtr);
    begin
      z_BindBuffersRange_ovr_0(target, first, count, buffers, offsets[0], sizes[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure BindBuffersRange(target: BufferTargetARB; first: UInt32; count: Int32; var buffers: UInt32; offsets: array of IntPtr; var sizes: IntPtr);
    begin
      z_BindBuffersRange_ovr_0(target, first, count, buffers, offsets[0], sizes);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure BindBuffersRange(target: BufferTargetARB; first: UInt32; count: Int32; var buffers: UInt32; offsets: array of IntPtr; sizes: pointer);
    begin
      z_BindBuffersRange_ovr_2(target, first, count, buffers, offsets[0], sizes);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure BindBuffersRange(target: BufferTargetARB; first: UInt32; count: Int32; var buffers: UInt32; var offsets: IntPtr; sizes: array of IntPtr);
    begin
      z_BindBuffersRange_ovr_0(target, first, count, buffers, offsets, sizes[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure BindBuffersRange(target: BufferTargetARB; first: UInt32; count: Int32; var buffers: UInt32; var offsets: IntPtr; var sizes: IntPtr);
    begin
      z_BindBuffersRange_ovr_0(target, first, count, buffers, offsets, sizes);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure BindBuffersRange(target: BufferTargetARB; first: UInt32; count: Int32; var buffers: UInt32; var offsets: IntPtr; sizes: pointer);
    begin
      z_BindBuffersRange_ovr_2(target, first, count, buffers, offsets, sizes);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure BindBuffersRange(target: BufferTargetARB; first: UInt32; count: Int32; var buffers: UInt32; offsets: pointer; sizes: array of IntPtr);
    begin
      z_BindBuffersRange_ovr_6(target, first, count, buffers, offsets, sizes[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure BindBuffersRange(target: BufferTargetARB; first: UInt32; count: Int32; var buffers: UInt32; offsets: pointer; var sizes: IntPtr);
    begin
      z_BindBuffersRange_ovr_6(target, first, count, buffers, offsets, sizes);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure BindBuffersRange(target: BufferTargetARB; first: UInt32; count: Int32; var buffers: UInt32; offsets: pointer; sizes: pointer);
    begin
      z_BindBuffersRange_ovr_8(target, first, count, buffers, offsets, sizes);
    end;
    public z_BindBuffersRange_ovr_18 := GetFuncOrNil&<procedure(target: BufferTargetARB; first: UInt32; count: Int32; buffers: IntPtr; var offsets: IntPtr; var sizes: IntPtr)>(z_BindBuffersRange_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure BindBuffersRange(target: BufferTargetARB; first: UInt32; count: Int32; buffers: IntPtr; offsets: array of IntPtr; sizes: array of IntPtr);
    begin
      z_BindBuffersRange_ovr_18(target, first, count, buffers, offsets[0], sizes[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure BindBuffersRange(target: BufferTargetARB; first: UInt32; count: Int32; buffers: IntPtr; offsets: array of IntPtr; var sizes: IntPtr);
    begin
      z_BindBuffersRange_ovr_18(target, first, count, buffers, offsets[0], sizes);
    end;
    public z_BindBuffersRange_ovr_20 := GetFuncOrNil&<procedure(target: BufferTargetARB; first: UInt32; count: Int32; buffers: IntPtr; var offsets: IntPtr; sizes: pointer)>(z_BindBuffersRange_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure BindBuffersRange(target: BufferTargetARB; first: UInt32; count: Int32; buffers: IntPtr; offsets: array of IntPtr; sizes: pointer);
    begin
      z_BindBuffersRange_ovr_20(target, first, count, buffers, offsets[0], sizes);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure BindBuffersRange(target: BufferTargetARB; first: UInt32; count: Int32; buffers: IntPtr; var offsets: IntPtr; sizes: array of IntPtr);
    begin
      z_BindBuffersRange_ovr_18(target, first, count, buffers, offsets, sizes[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure BindBuffersRange(target: BufferTargetARB; first: UInt32; count: Int32; buffers: IntPtr; var offsets: IntPtr; var sizes: IntPtr);
    begin
      z_BindBuffersRange_ovr_18(target, first, count, buffers, offsets, sizes);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure BindBuffersRange(target: BufferTargetARB; first: UInt32; count: Int32; buffers: IntPtr; var offsets: IntPtr; sizes: pointer);
    begin
      z_BindBuffersRange_ovr_20(target, first, count, buffers, offsets, sizes);
    end;
    public z_BindBuffersRange_ovr_24 := GetFuncOrNil&<procedure(target: BufferTargetARB; first: UInt32; count: Int32; buffers: IntPtr; offsets: pointer; var sizes: IntPtr)>(z_BindBuffersRange_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure BindBuffersRange(target: BufferTargetARB; first: UInt32; count: Int32; buffers: IntPtr; offsets: pointer; sizes: array of IntPtr);
    begin
      z_BindBuffersRange_ovr_24(target, first, count, buffers, offsets, sizes[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure BindBuffersRange(target: BufferTargetARB; first: UInt32; count: Int32; buffers: IntPtr; offsets: pointer; var sizes: IntPtr);
    begin
      z_BindBuffersRange_ovr_24(target, first, count, buffers, offsets, sizes);
    end;
    public z_BindBuffersRange_ovr_26 := GetFuncOrNil&<procedure(target: BufferTargetARB; first: UInt32; count: Int32; buffers: IntPtr; offsets: pointer; sizes: pointer)>(z_BindBuffersRange_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure BindBuffersRange(target: BufferTargetARB; first: UInt32; count: Int32; buffers: IntPtr; offsets: pointer; sizes: pointer);
    begin
      z_BindBuffersRange_ovr_26(target, first, count, buffers, offsets, sizes);
    end;
    
    // added in gl3.0
    public z_BindFragDataLocation_adr := GetFuncAdr('glBindFragDataLocation');
    public z_BindFragDataLocation_ovr_0 := GetFuncOrNil&<procedure(&program: ProgramName; color: UInt32; name: IntPtr)>(z_BindFragDataLocation_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure BindFragDataLocation(&program: ProgramName; color: UInt32; name: string);
    begin
      var par_3_str_ptr := Marshal.StringToHGlobalAnsi(name);
      z_BindFragDataLocation_ovr_0(&program, color, par_3_str_ptr);
      Marshal.FreeHGlobal(par_3_str_ptr);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure BindFragDataLocation(&program: ProgramName; color: UInt32; name: IntPtr);
    begin
      z_BindFragDataLocation_ovr_0(&program, color, name);
    end;
    
    // added in gl3.3
    public z_BindFragDataLocationIndexed_adr := GetFuncAdr('glBindFragDataLocationIndexed');
    public z_BindFragDataLocationIndexed_ovr_0 := GetFuncOrNil&<procedure(&program: ProgramName; colorNumber: UInt32; index: UInt32; name: IntPtr)>(z_BindFragDataLocationIndexed_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure BindFragDataLocationIndexed(&program: ProgramName; colorNumber: UInt32; index: UInt32; name: string);
    begin
      var par_4_str_ptr := Marshal.StringToHGlobalAnsi(name);
      z_BindFragDataLocationIndexed_ovr_0(&program, colorNumber, index, par_4_str_ptr);
      Marshal.FreeHGlobal(par_4_str_ptr);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure BindFragDataLocationIndexed(&program: ProgramName; colorNumber: UInt32; index: UInt32; name: IntPtr);
    begin
      z_BindFragDataLocationIndexed_ovr_0(&program, colorNumber, index, name);
    end;
    
    // added in gl3.0
    public z_BindFramebuffer_adr := GetFuncAdr('glBindFramebuffer');
    public z_BindFramebuffer_ovr_0 := GetFuncOrNil&<procedure(target: FramebufferTarget; framebuffer: FramebufferName)>(z_BindFramebuffer_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure BindFramebuffer(target: FramebufferTarget; framebuffer: FramebufferName);
    begin
      z_BindFramebuffer_ovr_0(target, framebuffer);
    end;
    
    // added in gl4.2
    public z_BindImageTexture_adr := GetFuncAdr('glBindImageTexture');
    public z_BindImageTexture_ovr_0 := GetFuncOrNil&<procedure(&unit: UInt32; texture: TextureName; level: Int32; layered: boolean; layer: Int32; access: BufferAccessARB; format: InternalFormat)>(z_BindImageTexture_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure BindImageTexture(&unit: UInt32; texture: TextureName; level: Int32; layered: boolean; layer: Int32; access: BufferAccessARB; format: InternalFormat);
    begin
      z_BindImageTexture_ovr_0(&unit, texture, level, layered, layer, access, format);
    end;
    
    // added in gl4.4
    public z_BindImageTextures_adr := GetFuncAdr('glBindImageTextures');
    public z_BindImageTextures_ovr_0 := GetFuncOrNil&<procedure(first: UInt32; count: Int32; var textures: UInt32)>(z_BindImageTextures_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure BindImageTextures(first: UInt32; count: Int32; textures: array of UInt32);
    begin
      z_BindImageTextures_ovr_0(first, count, textures[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure BindImageTextures(first: UInt32; count: Int32; var textures: UInt32);
    begin
      z_BindImageTextures_ovr_0(first, count, textures);
    end;
    public z_BindImageTextures_ovr_2 := GetFuncOrNil&<procedure(first: UInt32; count: Int32; textures: IntPtr)>(z_BindImageTextures_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure BindImageTextures(first: UInt32; count: Int32; textures: IntPtr);
    begin
      z_BindImageTextures_ovr_2(first, count, textures);
    end;
    
    // added in gl4.1
    public z_BindProgramPipeline_adr := GetFuncAdr('glBindProgramPipeline');
    public z_BindProgramPipeline_ovr_0 := GetFuncOrNil&<procedure(pipeline: ProgramPipelineName)>(z_BindProgramPipeline_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure BindProgramPipeline(pipeline: ProgramPipelineName);
    begin
      z_BindProgramPipeline_ovr_0(pipeline);
    end;
    
    // added in gl3.0
    public z_BindRenderbuffer_adr := GetFuncAdr('glBindRenderbuffer');
    public z_BindRenderbuffer_ovr_0 := GetFuncOrNil&<procedure(target: RenderbufferTarget; renderbuffer: RenderbufferName)>(z_BindRenderbuffer_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure BindRenderbuffer(target: RenderbufferTarget; renderbuffer: RenderbufferName);
    begin
      z_BindRenderbuffer_ovr_0(target, renderbuffer);
    end;
    
    // added in gl3.3
    public z_BindSampler_adr := GetFuncAdr('glBindSampler');
    public z_BindSampler_ovr_0 := GetFuncOrNil&<procedure(&unit: UInt32; sampler: SamplerName)>(z_BindSampler_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure BindSampler(&unit: UInt32; sampler: SamplerName);
    begin
      z_BindSampler_ovr_0(&unit, sampler);
    end;
    
    // added in gl4.4
    public z_BindSamplers_adr := GetFuncAdr('glBindSamplers');
    public z_BindSamplers_ovr_0 := GetFuncOrNil&<procedure(first: UInt32; count: Int32; var samplers: UInt32)>(z_BindSamplers_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure BindSamplers(first: UInt32; count: Int32; samplers: array of UInt32);
    begin
      z_BindSamplers_ovr_0(first, count, samplers[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure BindSamplers(first: UInt32; count: Int32; var samplers: UInt32);
    begin
      z_BindSamplers_ovr_0(first, count, samplers);
    end;
    public z_BindSamplers_ovr_2 := GetFuncOrNil&<procedure(first: UInt32; count: Int32; samplers: IntPtr)>(z_BindSamplers_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure BindSamplers(first: UInt32; count: Int32; samplers: IntPtr);
    begin
      z_BindSamplers_ovr_2(first, count, samplers);
    end;
    
    // added in gl1.1
    private static procedure _z_BindTexture_ovr0(target: TextureTarget; texture: TextureName);
    external 'opengl32.dll' name 'glBindTexture';
    public static z_BindTexture_ovr0 := _z_BindTexture_ovr0;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure BindTexture(target: TextureTarget; texture: TextureName) := z_BindTexture_ovr0(target, texture);
    
    // added in gl4.4
    public z_BindTextures_adr := GetFuncAdr('glBindTextures');
    public z_BindTextures_ovr_0 := GetFuncOrNil&<procedure(first: UInt32; count: Int32; var textures: UInt32)>(z_BindTextures_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure BindTextures(first: UInt32; count: Int32; textures: array of UInt32);
    begin
      z_BindTextures_ovr_0(first, count, textures[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure BindTextures(first: UInt32; count: Int32; var textures: UInt32);
    begin
      z_BindTextures_ovr_0(first, count, textures);
    end;
    public z_BindTextures_ovr_2 := GetFuncOrNil&<procedure(first: UInt32; count: Int32; textures: IntPtr)>(z_BindTextures_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure BindTextures(first: UInt32; count: Int32; textures: IntPtr);
    begin
      z_BindTextures_ovr_2(first, count, textures);
    end;
    
    // added in gl4.5
    public z_BindTextureUnit_adr := GetFuncAdr('glBindTextureUnit');
    public z_BindTextureUnit_ovr_0 := GetFuncOrNil&<procedure(&unit: UInt32; texture: TextureName)>(z_BindTextureUnit_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure BindTextureUnit(&unit: UInt32; texture: TextureName);
    begin
      z_BindTextureUnit_ovr_0(&unit, texture);
    end;
    
    // added in gl4.0
    public z_BindTransformFeedback_adr := GetFuncAdr('glBindTransformFeedback');
    public z_BindTransformFeedback_ovr_0 := GetFuncOrNil&<procedure(target: BindTransformFeedbackTarget; id: TransformFeedbackName)>(z_BindTransformFeedback_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure BindTransformFeedback(target: BindTransformFeedbackTarget; id: TransformFeedbackName);
    begin
      z_BindTransformFeedback_ovr_0(target, id);
    end;
    
    // added in gl3.0
    public z_BindVertexArray_adr := GetFuncAdr('glBindVertexArray');
    public z_BindVertexArray_ovr_0 := GetFuncOrNil&<procedure(&array: VertexArrayName)>(z_BindVertexArray_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure BindVertexArray(&array: VertexArrayName);
    begin
      z_BindVertexArray_ovr_0(&array);
    end;
    
    // added in gl4.3
    public z_BindVertexBuffer_adr := GetFuncAdr('glBindVertexBuffer');
    public z_BindVertexBuffer_ovr_0 := GetFuncOrNil&<procedure(bindingindex: UInt32; buffer: BufferName; offset: IntPtr; stride: Int32)>(z_BindVertexBuffer_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure BindVertexBuffer(bindingindex: UInt32; buffer: BufferName; offset: IntPtr; stride: Int32);
    begin
      z_BindVertexBuffer_ovr_0(bindingindex, buffer, offset, stride);
    end;
    
    // added in gl4.4
    public z_BindVertexBuffers_adr := GetFuncAdr('glBindVertexBuffers');
    public z_BindVertexBuffers_ovr_0 := GetFuncOrNil&<procedure(first: UInt32; count: Int32; var buffers: UInt32; var offsets: IntPtr; var strides: Int32)>(z_BindVertexBuffers_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure BindVertexBuffers(first: UInt32; count: Int32; buffers: array of UInt32; offsets: array of IntPtr; strides: array of Int32);
    begin
      z_BindVertexBuffers_ovr_0(first, count, buffers[0], offsets[0], strides[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure BindVertexBuffers(first: UInt32; count: Int32; buffers: array of UInt32; offsets: array of IntPtr; var strides: Int32);
    begin
      z_BindVertexBuffers_ovr_0(first, count, buffers[0], offsets[0], strides);
    end;
    public z_BindVertexBuffers_ovr_2 := GetFuncOrNil&<procedure(first: UInt32; count: Int32; var buffers: UInt32; var offsets: IntPtr; strides: IntPtr)>(z_BindVertexBuffers_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure BindVertexBuffers(first: UInt32; count: Int32; buffers: array of UInt32; offsets: array of IntPtr; strides: IntPtr);
    begin
      z_BindVertexBuffers_ovr_2(first, count, buffers[0], offsets[0], strides);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure BindVertexBuffers(first: UInt32; count: Int32; buffers: array of UInt32; var offsets: IntPtr; strides: array of Int32);
    begin
      z_BindVertexBuffers_ovr_0(first, count, buffers[0], offsets, strides[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure BindVertexBuffers(first: UInt32; count: Int32; buffers: array of UInt32; var offsets: IntPtr; var strides: Int32);
    begin
      z_BindVertexBuffers_ovr_0(first, count, buffers[0], offsets, strides);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure BindVertexBuffers(first: UInt32; count: Int32; buffers: array of UInt32; var offsets: IntPtr; strides: IntPtr);
    begin
      z_BindVertexBuffers_ovr_2(first, count, buffers[0], offsets, strides);
    end;
    public z_BindVertexBuffers_ovr_6 := GetFuncOrNil&<procedure(first: UInt32; count: Int32; var buffers: UInt32; offsets: pointer; var strides: Int32)>(z_BindVertexBuffers_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure BindVertexBuffers(first: UInt32; count: Int32; buffers: array of UInt32; offsets: pointer; strides: array of Int32);
    begin
      z_BindVertexBuffers_ovr_6(first, count, buffers[0], offsets, strides[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure BindVertexBuffers(first: UInt32; count: Int32; buffers: array of UInt32; offsets: pointer; var strides: Int32);
    begin
      z_BindVertexBuffers_ovr_6(first, count, buffers[0], offsets, strides);
    end;
    public z_BindVertexBuffers_ovr_8 := GetFuncOrNil&<procedure(first: UInt32; count: Int32; var buffers: UInt32; offsets: pointer; strides: IntPtr)>(z_BindVertexBuffers_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure BindVertexBuffers(first: UInt32; count: Int32; buffers: array of UInt32; offsets: pointer; strides: IntPtr);
    begin
      z_BindVertexBuffers_ovr_8(first, count, buffers[0], offsets, strides);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure BindVertexBuffers(first: UInt32; count: Int32; var buffers: UInt32; offsets: array of IntPtr; strides: array of Int32);
    begin
      z_BindVertexBuffers_ovr_0(first, count, buffers, offsets[0], strides[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure BindVertexBuffers(first: UInt32; count: Int32; var buffers: UInt32; offsets: array of IntPtr; var strides: Int32);
    begin
      z_BindVertexBuffers_ovr_0(first, count, buffers, offsets[0], strides);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure BindVertexBuffers(first: UInt32; count: Int32; var buffers: UInt32; offsets: array of IntPtr; strides: IntPtr);
    begin
      z_BindVertexBuffers_ovr_2(first, count, buffers, offsets[0], strides);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure BindVertexBuffers(first: UInt32; count: Int32; var buffers: UInt32; var offsets: IntPtr; strides: array of Int32);
    begin
      z_BindVertexBuffers_ovr_0(first, count, buffers, offsets, strides[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure BindVertexBuffers(first: UInt32; count: Int32; var buffers: UInt32; var offsets: IntPtr; var strides: Int32);
    begin
      z_BindVertexBuffers_ovr_0(first, count, buffers, offsets, strides);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure BindVertexBuffers(first: UInt32; count: Int32; var buffers: UInt32; var offsets: IntPtr; strides: IntPtr);
    begin
      z_BindVertexBuffers_ovr_2(first, count, buffers, offsets, strides);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure BindVertexBuffers(first: UInt32; count: Int32; var buffers: UInt32; offsets: pointer; strides: array of Int32);
    begin
      z_BindVertexBuffers_ovr_6(first, count, buffers, offsets, strides[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure BindVertexBuffers(first: UInt32; count: Int32; var buffers: UInt32; offsets: pointer; var strides: Int32);
    begin
      z_BindVertexBuffers_ovr_6(first, count, buffers, offsets, strides);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure BindVertexBuffers(first: UInt32; count: Int32; var buffers: UInt32; offsets: pointer; strides: IntPtr);
    begin
      z_BindVertexBuffers_ovr_8(first, count, buffers, offsets, strides);
    end;
    public z_BindVertexBuffers_ovr_18 := GetFuncOrNil&<procedure(first: UInt32; count: Int32; buffers: IntPtr; var offsets: IntPtr; var strides: Int32)>(z_BindVertexBuffers_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure BindVertexBuffers(first: UInt32; count: Int32; buffers: IntPtr; offsets: array of IntPtr; strides: array of Int32);
    begin
      z_BindVertexBuffers_ovr_18(first, count, buffers, offsets[0], strides[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure BindVertexBuffers(first: UInt32; count: Int32; buffers: IntPtr; offsets: array of IntPtr; var strides: Int32);
    begin
      z_BindVertexBuffers_ovr_18(first, count, buffers, offsets[0], strides);
    end;
    public z_BindVertexBuffers_ovr_20 := GetFuncOrNil&<procedure(first: UInt32; count: Int32; buffers: IntPtr; var offsets: IntPtr; strides: IntPtr)>(z_BindVertexBuffers_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure BindVertexBuffers(first: UInt32; count: Int32; buffers: IntPtr; offsets: array of IntPtr; strides: IntPtr);
    begin
      z_BindVertexBuffers_ovr_20(first, count, buffers, offsets[0], strides);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure BindVertexBuffers(first: UInt32; count: Int32; buffers: IntPtr; var offsets: IntPtr; strides: array of Int32);
    begin
      z_BindVertexBuffers_ovr_18(first, count, buffers, offsets, strides[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure BindVertexBuffers(first: UInt32; count: Int32; buffers: IntPtr; var offsets: IntPtr; var strides: Int32);
    begin
      z_BindVertexBuffers_ovr_18(first, count, buffers, offsets, strides);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure BindVertexBuffers(first: UInt32; count: Int32; buffers: IntPtr; var offsets: IntPtr; strides: IntPtr);
    begin
      z_BindVertexBuffers_ovr_20(first, count, buffers, offsets, strides);
    end;
    public z_BindVertexBuffers_ovr_24 := GetFuncOrNil&<procedure(first: UInt32; count: Int32; buffers: IntPtr; offsets: pointer; var strides: Int32)>(z_BindVertexBuffers_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure BindVertexBuffers(first: UInt32; count: Int32; buffers: IntPtr; offsets: pointer; strides: array of Int32);
    begin
      z_BindVertexBuffers_ovr_24(first, count, buffers, offsets, strides[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure BindVertexBuffers(first: UInt32; count: Int32; buffers: IntPtr; offsets: pointer; var strides: Int32);
    begin
      z_BindVertexBuffers_ovr_24(first, count, buffers, offsets, strides);
    end;
    public z_BindVertexBuffers_ovr_26 := GetFuncOrNil&<procedure(first: UInt32; count: Int32; buffers: IntPtr; offsets: pointer; strides: IntPtr)>(z_BindVertexBuffers_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure BindVertexBuffers(first: UInt32; count: Int32; buffers: IntPtr; offsets: pointer; strides: IntPtr);
    begin
      z_BindVertexBuffers_ovr_26(first, count, buffers, offsets, strides);
    end;
    
    // added in gl1.4
    public z_BlendColor_adr := GetFuncAdr('glBlendColor');
    public z_BlendColor_ovr_0 := GetFuncOrNil&<procedure(red: single; green: single; blue: single; alpha: single)>(z_BlendColor_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure BlendColor(red: single; green: single; blue: single; alpha: single);
    begin
      z_BlendColor_ovr_0(red, green, blue, alpha);
    end;
    
    // added in gl1.4
    public z_BlendEquation_adr := GetFuncAdr('glBlendEquation');
    public z_BlendEquation_ovr_0 := GetFuncOrNil&<procedure(mode: BlendEquationModeEXT)>(z_BlendEquation_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure BlendEquation(mode: BlendEquationModeEXT);
    begin
      z_BlendEquation_ovr_0(mode);
    end;
    
    // added in gl4.0
    public z_BlendEquationi_adr := GetFuncAdr('glBlendEquationi');
    public z_BlendEquationi_ovr_0 := GetFuncOrNil&<procedure(buf: UInt32; mode: BlendEquationModeEXT)>(z_BlendEquationi_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure BlendEquationi(buf: UInt32; mode: BlendEquationModeEXT);
    begin
      z_BlendEquationi_ovr_0(buf, mode);
    end;
    
    // added in gl2.0
    public z_BlendEquationSeparate_adr := GetFuncAdr('glBlendEquationSeparate');
    public z_BlendEquationSeparate_ovr_0 := GetFuncOrNil&<procedure(modeRGB: BlendEquationModeEXT; modeAlpha: BlendEquationModeEXT)>(z_BlendEquationSeparate_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure BlendEquationSeparate(modeRGB: BlendEquationModeEXT; modeAlpha: BlendEquationModeEXT);
    begin
      z_BlendEquationSeparate_ovr_0(modeRGB, modeAlpha);
    end;
    
    // added in gl4.0
    public z_BlendEquationSeparatei_adr := GetFuncAdr('glBlendEquationSeparatei');
    public z_BlendEquationSeparatei_ovr_0 := GetFuncOrNil&<procedure(buf: UInt32; modeRGB: BlendEquationModeEXT; modeAlpha: BlendEquationModeEXT)>(z_BlendEquationSeparatei_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure BlendEquationSeparatei(buf: UInt32; modeRGB: BlendEquationModeEXT; modeAlpha: BlendEquationModeEXT);
    begin
      z_BlendEquationSeparatei_ovr_0(buf, modeRGB, modeAlpha);
    end;
    
    // added in gl1.0
    private static procedure _z_BlendFunc_ovr0(sfactor: BlendingFactor; dfactor: BlendingFactor);
    external 'opengl32.dll' name 'glBlendFunc';
    public static z_BlendFunc_ovr0 := _z_BlendFunc_ovr0;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure BlendFunc(sfactor: BlendingFactor; dfactor: BlendingFactor) := z_BlendFunc_ovr0(sfactor, dfactor);
    
    // added in gl4.0
    public z_BlendFunci_adr := GetFuncAdr('glBlendFunci');
    public z_BlendFunci_ovr_0 := GetFuncOrNil&<procedure(buf: UInt32; src: BlendingFactor; dst: BlendingFactor)>(z_BlendFunci_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure BlendFunci(buf: UInt32; src: BlendingFactor; dst: BlendingFactor);
    begin
      z_BlendFunci_ovr_0(buf, src, dst);
    end;
    
    // added in gl1.4
    public z_BlendFuncSeparate_adr := GetFuncAdr('glBlendFuncSeparate');
    public z_BlendFuncSeparate_ovr_0 := GetFuncOrNil&<procedure(sfactorRGB: BlendingFactor; dfactorRGB: BlendingFactor; sfactorAlpha: BlendingFactor; dfactorAlpha: BlendingFactor)>(z_BlendFuncSeparate_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure BlendFuncSeparate(sfactorRGB: BlendingFactor; dfactorRGB: BlendingFactor; sfactorAlpha: BlendingFactor; dfactorAlpha: BlendingFactor);
    begin
      z_BlendFuncSeparate_ovr_0(sfactorRGB, dfactorRGB, sfactorAlpha, dfactorAlpha);
    end;
    
    // added in gl4.0
    public z_BlendFuncSeparatei_adr := GetFuncAdr('glBlendFuncSeparatei');
    public z_BlendFuncSeparatei_ovr_0 := GetFuncOrNil&<procedure(buf: UInt32; srcRGB: BlendingFactor; dstRGB: BlendingFactor; srcAlpha: BlendingFactor; dstAlpha: BlendingFactor)>(z_BlendFuncSeparatei_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure BlendFuncSeparatei(buf: UInt32; srcRGB: BlendingFactor; dstRGB: BlendingFactor; srcAlpha: BlendingFactor; dstAlpha: BlendingFactor);
    begin
      z_BlendFuncSeparatei_ovr_0(buf, srcRGB, dstRGB, srcAlpha, dstAlpha);
    end;
    
    // added in gl3.0
    public z_BlitFramebuffer_adr := GetFuncAdr('glBlitFramebuffer');
    public z_BlitFramebuffer_ovr_0 := GetFuncOrNil&<procedure(srcX0: Int32; srcY0: Int32; srcX1: Int32; srcY1: Int32; dstX0: Int32; dstY0: Int32; dstX1: Int32; dstY1: Int32; mask: ClearBufferMask; filter: BlitFramebufferFilter)>(z_BlitFramebuffer_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure BlitFramebuffer(srcX0: Int32; srcY0: Int32; srcX1: Int32; srcY1: Int32; dstX0: Int32; dstY0: Int32; dstX1: Int32; dstY1: Int32; mask: ClearBufferMask; filter: BlitFramebufferFilter);
    begin
      z_BlitFramebuffer_ovr_0(srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, mask, filter);
    end;
    
    // added in gl4.5
    public z_BlitNamedFramebuffer_adr := GetFuncAdr('glBlitNamedFramebuffer');
    public z_BlitNamedFramebuffer_ovr_0 := GetFuncOrNil&<procedure(readFramebuffer: UInt32; drawFramebuffer: UInt32; srcX0: Int32; srcY0: Int32; srcX1: Int32; srcY1: Int32; dstX0: Int32; dstY0: Int32; dstX1: Int32; dstY1: Int32; mask: ClearBufferMask; filter: BlitFramebufferFilter)>(z_BlitNamedFramebuffer_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure BlitNamedFramebuffer(readFramebuffer: UInt32; drawFramebuffer: UInt32; srcX0: Int32; srcY0: Int32; srcX1: Int32; srcY1: Int32; dstX0: Int32; dstY0: Int32; dstX1: Int32; dstY1: Int32; mask: ClearBufferMask; filter: BlitFramebufferFilter);
    begin
      z_BlitNamedFramebuffer_ovr_0(readFramebuffer, drawFramebuffer, srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, mask, filter);
    end;
    
    // added in gl1.5
    public z_BufferData_adr := GetFuncAdr('glBufferData');
    public z_BufferData_ovr_0 := GetFuncOrNil&<procedure(target: BufferTargetARB; size: IntPtr; data: IntPtr; usage: BufferUsageARB)>(z_BufferData_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure BufferData(target: BufferTargetARB; size: IntPtr; data: IntPtr; usage: BufferUsageARB);
    begin
      z_BufferData_ovr_0(target, size, data, usage);
    end;
    
    // added in gl4.4
    public z_BufferStorage_adr := GetFuncAdr('glBufferStorage');
    public z_BufferStorage_ovr_0 := GetFuncOrNil&<procedure(target: BufferStorageTarget; size: IntPtr; data: IntPtr; flags: BufferStorageMask)>(z_BufferStorage_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure BufferStorage(target: BufferStorageTarget; size: IntPtr; data: IntPtr; flags: BufferStorageMask);
    begin
      z_BufferStorage_ovr_0(target, size, data, flags);
    end;
    
    // added in gl1.5
    public z_BufferSubData_adr := GetFuncAdr('glBufferSubData');
    public z_BufferSubData_ovr_0 := GetFuncOrNil&<procedure(target: BufferTargetARB; offset: IntPtr; size: IntPtr; data: IntPtr)>(z_BufferSubData_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure BufferSubData(target: BufferTargetARB; offset: IntPtr; size: IntPtr; data: IntPtr);
    begin
      z_BufferSubData_ovr_0(target, offset, size, data);
    end;
    
    // added in gl3.0
    public z_CheckFramebufferStatus_adr := GetFuncAdr('glCheckFramebufferStatus');
    public z_CheckFramebufferStatus_ovr_0 := GetFuncOrNil&<function(target: FramebufferTarget): FramebufferStatus>(z_CheckFramebufferStatus_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function CheckFramebufferStatus(target: FramebufferTarget): FramebufferStatus;
    begin
      Result := z_CheckFramebufferStatus_ovr_0(target);
    end;
    
    // added in gl4.5
    public z_CheckNamedFramebufferStatus_adr := GetFuncAdr('glCheckNamedFramebufferStatus');
    public z_CheckNamedFramebufferStatus_ovr_0 := GetFuncOrNil&<function(framebuffer: UInt32; target: FramebufferTarget): FramebufferStatus>(z_CheckNamedFramebufferStatus_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function CheckNamedFramebufferStatus(framebuffer: UInt32; target: FramebufferTarget): FramebufferStatus;
    begin
      Result := z_CheckNamedFramebufferStatus_ovr_0(framebuffer, target);
    end;
    
    // added in gl3.0
    public z_ClampColor_adr := GetFuncAdr('glClampColor');
    public z_ClampColor_ovr_0 := GetFuncOrNil&<procedure(target: ClampColorTargetARB; clamp: ClampColorModeARB)>(z_ClampColor_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ClampColor(target: ClampColorTargetARB; clamp: ClampColorModeARB);
    begin
      z_ClampColor_ovr_0(target, clamp);
    end;
    
    // added in gl1.0
    private static procedure _z_Clear_ovr0(mask: ClearBufferMask);
    external 'opengl32.dll' name 'glClear';
    public static z_Clear_ovr0 := _z_Clear_ovr0;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Clear(mask: ClearBufferMask) := z_Clear_ovr0(mask);
    
    // added in gl4.3
    public z_ClearBufferData_adr := GetFuncAdr('glClearBufferData');
    public z_ClearBufferData_ovr_0 := GetFuncOrNil&<procedure(target: BufferStorageTarget; _internalformat: InternalFormat; format: PixelFormat; &type: PixelType; data: IntPtr)>(z_ClearBufferData_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ClearBufferData(target: BufferStorageTarget; _internalformat: InternalFormat; format: PixelFormat; &type: PixelType; data: IntPtr);
    begin
      z_ClearBufferData_ovr_0(target, _internalformat, format, &type, data);
    end;
    
    // added in gl3.0
    public z_ClearBufferfi_adr := GetFuncAdr('glClearBufferfi');
    public z_ClearBufferfi_ovr_0 := GetFuncOrNil&<procedure(_buffer: Buffer; drawbuffer: Int32; depth: single; stencil: Int32)>(z_ClearBufferfi_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ClearBufferfi(_buffer: Buffer; drawbuffer: Int32; depth: single; stencil: Int32);
    begin
      z_ClearBufferfi_ovr_0(_buffer, drawbuffer, depth, stencil);
    end;
    
    // added in gl3.0
    public z_ClearBufferfv_adr := GetFuncAdr('glClearBufferfv');
    public z_ClearBufferfv_ovr_0 := GetFuncOrNil&<procedure(_buffer: Buffer; drawbuffer: Int32; var value: single)>(z_ClearBufferfv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ClearBufferfv(_buffer: Buffer; drawbuffer: Int32; value: array of single);
    begin
      z_ClearBufferfv_ovr_0(_buffer, drawbuffer, value[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ClearBufferfv(_buffer: Buffer; drawbuffer: Int32; var value: single);
    begin
      z_ClearBufferfv_ovr_0(_buffer, drawbuffer, value);
    end;
    public z_ClearBufferfv_ovr_2 := GetFuncOrNil&<procedure(_buffer: Buffer; drawbuffer: Int32; value: IntPtr)>(z_ClearBufferfv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ClearBufferfv(_buffer: Buffer; drawbuffer: Int32; value: IntPtr);
    begin
      z_ClearBufferfv_ovr_2(_buffer, drawbuffer, value);
    end;
    
    // added in gl3.0
    public z_ClearBufferiv_adr := GetFuncAdr('glClearBufferiv');
    public z_ClearBufferiv_ovr_0 := GetFuncOrNil&<procedure(_buffer: Buffer; drawbuffer: Int32; var value: Int32)>(z_ClearBufferiv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ClearBufferiv(_buffer: Buffer; drawbuffer: Int32; value: array of Int32);
    begin
      z_ClearBufferiv_ovr_0(_buffer, drawbuffer, value[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ClearBufferiv(_buffer: Buffer; drawbuffer: Int32; var value: Int32);
    begin
      z_ClearBufferiv_ovr_0(_buffer, drawbuffer, value);
    end;
    public z_ClearBufferiv_ovr_2 := GetFuncOrNil&<procedure(_buffer: Buffer; drawbuffer: Int32; value: IntPtr)>(z_ClearBufferiv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ClearBufferiv(_buffer: Buffer; drawbuffer: Int32; value: IntPtr);
    begin
      z_ClearBufferiv_ovr_2(_buffer, drawbuffer, value);
    end;
    
    // added in gl4.3
    public z_ClearBufferSubData_adr := GetFuncAdr('glClearBufferSubData');
    public z_ClearBufferSubData_ovr_0 := GetFuncOrNil&<procedure(target: BufferTargetARB; _internalformat: InternalFormat; offset: IntPtr; size: IntPtr; format: PixelFormat; &type: PixelType; data: IntPtr)>(z_ClearBufferSubData_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ClearBufferSubData(target: BufferTargetARB; _internalformat: InternalFormat; offset: IntPtr; size: IntPtr; format: PixelFormat; &type: PixelType; data: IntPtr);
    begin
      z_ClearBufferSubData_ovr_0(target, _internalformat, offset, size, format, &type, data);
    end;
    
    // added in gl3.0
    public z_ClearBufferuiv_adr := GetFuncAdr('glClearBufferuiv');
    public z_ClearBufferuiv_ovr_0 := GetFuncOrNil&<procedure(_buffer: Buffer; drawbuffer: Int32; var value: UInt32)>(z_ClearBufferuiv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ClearBufferuiv(_buffer: Buffer; drawbuffer: Int32; value: array of UInt32);
    begin
      z_ClearBufferuiv_ovr_0(_buffer, drawbuffer, value[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ClearBufferuiv(_buffer: Buffer; drawbuffer: Int32; var value: UInt32);
    begin
      z_ClearBufferuiv_ovr_0(_buffer, drawbuffer, value);
    end;
    public z_ClearBufferuiv_ovr_2 := GetFuncOrNil&<procedure(_buffer: Buffer; drawbuffer: Int32; value: IntPtr)>(z_ClearBufferuiv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ClearBufferuiv(_buffer: Buffer; drawbuffer: Int32; value: IntPtr);
    begin
      z_ClearBufferuiv_ovr_2(_buffer, drawbuffer, value);
    end;
    
    // added in gl1.0
    private static procedure _z_ClearColor_ovr0(red: single; green: single; blue: single; alpha: single);
    external 'opengl32.dll' name 'glClearColor';
    public static z_ClearColor_ovr0 := _z_ClearColor_ovr0;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ClearColor(red: single; green: single; blue: single; alpha: single) := z_ClearColor_ovr0(red, green, blue, alpha);
    
    // added in gl1.0
    private static procedure _z_ClearDepth_ovr0(depth: real);
    external 'opengl32.dll' name 'glClearDepth';
    public static z_ClearDepth_ovr0 := _z_ClearDepth_ovr0;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ClearDepth(depth: real) := z_ClearDepth_ovr0(depth);
    
    // added in gl4.1
    public z_ClearDepthf_adr := GetFuncAdr('glClearDepthf');
    public z_ClearDepthf_ovr_0 := GetFuncOrNil&<procedure(d: single)>(z_ClearDepthf_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ClearDepthf(d: single);
    begin
      z_ClearDepthf_ovr_0(d);
    end;
    
    // added in gl4.5
    public z_ClearNamedBufferData_adr := GetFuncAdr('glClearNamedBufferData');
    public z_ClearNamedBufferData_ovr_0 := GetFuncOrNil&<procedure(buffer: UInt32; _internalformat: InternalFormat; format: PixelFormat; &type: PixelType; data: IntPtr)>(z_ClearNamedBufferData_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ClearNamedBufferData(buffer: UInt32; _internalformat: InternalFormat; format: PixelFormat; &type: PixelType; data: IntPtr);
    begin
      z_ClearNamedBufferData_ovr_0(buffer, _internalformat, format, &type, data);
    end;
    
    // added in gl4.5
    public z_ClearNamedBufferSubData_adr := GetFuncAdr('glClearNamedBufferSubData');
    public z_ClearNamedBufferSubData_ovr_0 := GetFuncOrNil&<procedure(buffer: UInt32; _internalformat: InternalFormat; offset: IntPtr; size: IntPtr; format: PixelFormat; &type: PixelType; data: IntPtr)>(z_ClearNamedBufferSubData_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ClearNamedBufferSubData(buffer: UInt32; _internalformat: InternalFormat; offset: IntPtr; size: IntPtr; format: PixelFormat; &type: PixelType; data: IntPtr);
    begin
      z_ClearNamedBufferSubData_ovr_0(buffer, _internalformat, offset, size, format, &type, data);
    end;
    
    // added in gl4.5
    public z_ClearNamedFramebufferfi_adr := GetFuncAdr('glClearNamedFramebufferfi');
    public z_ClearNamedFramebufferfi_ovr_0 := GetFuncOrNil&<procedure(framebuffer: UInt32; _buffer: Buffer; drawbuffer: Int32; depth: single; stencil: Int32)>(z_ClearNamedFramebufferfi_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ClearNamedFramebufferfi(framebuffer: UInt32; _buffer: Buffer; drawbuffer: Int32; depth: single; stencil: Int32);
    begin
      z_ClearNamedFramebufferfi_ovr_0(framebuffer, _buffer, drawbuffer, depth, stencil);
    end;
    
    // added in gl4.5
    public z_ClearNamedFramebufferfv_adr := GetFuncAdr('glClearNamedFramebufferfv');
    public z_ClearNamedFramebufferfv_ovr_0 := GetFuncOrNil&<procedure(framebuffer: UInt32; _buffer: Buffer; drawbuffer: Int32; var value: single)>(z_ClearNamedFramebufferfv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ClearNamedFramebufferfv(framebuffer: UInt32; _buffer: Buffer; drawbuffer: Int32; value: array of single);
    begin
      z_ClearNamedFramebufferfv_ovr_0(framebuffer, _buffer, drawbuffer, value[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ClearNamedFramebufferfv(framebuffer: UInt32; _buffer: Buffer; drawbuffer: Int32; var value: single);
    begin
      z_ClearNamedFramebufferfv_ovr_0(framebuffer, _buffer, drawbuffer, value);
    end;
    public z_ClearNamedFramebufferfv_ovr_2 := GetFuncOrNil&<procedure(framebuffer: UInt32; _buffer: Buffer; drawbuffer: Int32; value: IntPtr)>(z_ClearNamedFramebufferfv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ClearNamedFramebufferfv(framebuffer: UInt32; _buffer: Buffer; drawbuffer: Int32; value: IntPtr);
    begin
      z_ClearNamedFramebufferfv_ovr_2(framebuffer, _buffer, drawbuffer, value);
    end;
    
    // added in gl4.5
    public z_ClearNamedFramebufferiv_adr := GetFuncAdr('glClearNamedFramebufferiv');
    public z_ClearNamedFramebufferiv_ovr_0 := GetFuncOrNil&<procedure(framebuffer: UInt32; _buffer: Buffer; drawbuffer: Int32; var value: Int32)>(z_ClearNamedFramebufferiv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ClearNamedFramebufferiv(framebuffer: UInt32; _buffer: Buffer; drawbuffer: Int32; value: array of Int32);
    begin
      z_ClearNamedFramebufferiv_ovr_0(framebuffer, _buffer, drawbuffer, value[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ClearNamedFramebufferiv(framebuffer: UInt32; _buffer: Buffer; drawbuffer: Int32; var value: Int32);
    begin
      z_ClearNamedFramebufferiv_ovr_0(framebuffer, _buffer, drawbuffer, value);
    end;
    public z_ClearNamedFramebufferiv_ovr_2 := GetFuncOrNil&<procedure(framebuffer: UInt32; _buffer: Buffer; drawbuffer: Int32; value: IntPtr)>(z_ClearNamedFramebufferiv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ClearNamedFramebufferiv(framebuffer: UInt32; _buffer: Buffer; drawbuffer: Int32; value: IntPtr);
    begin
      z_ClearNamedFramebufferiv_ovr_2(framebuffer, _buffer, drawbuffer, value);
    end;
    
    // added in gl4.5
    public z_ClearNamedFramebufferuiv_adr := GetFuncAdr('glClearNamedFramebufferuiv');
    public z_ClearNamedFramebufferuiv_ovr_0 := GetFuncOrNil&<procedure(framebuffer: UInt32; _buffer: Buffer; drawbuffer: Int32; var value: UInt32)>(z_ClearNamedFramebufferuiv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ClearNamedFramebufferuiv(framebuffer: UInt32; _buffer: Buffer; drawbuffer: Int32; value: array of UInt32);
    begin
      z_ClearNamedFramebufferuiv_ovr_0(framebuffer, _buffer, drawbuffer, value[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ClearNamedFramebufferuiv(framebuffer: UInt32; _buffer: Buffer; drawbuffer: Int32; var value: UInt32);
    begin
      z_ClearNamedFramebufferuiv_ovr_0(framebuffer, _buffer, drawbuffer, value);
    end;
    public z_ClearNamedFramebufferuiv_ovr_2 := GetFuncOrNil&<procedure(framebuffer: UInt32; _buffer: Buffer; drawbuffer: Int32; value: IntPtr)>(z_ClearNamedFramebufferuiv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ClearNamedFramebufferuiv(framebuffer: UInt32; _buffer: Buffer; drawbuffer: Int32; value: IntPtr);
    begin
      z_ClearNamedFramebufferuiv_ovr_2(framebuffer, _buffer, drawbuffer, value);
    end;
    
    // added in gl1.0
    private static procedure _z_ClearStencil_ovr0(s: Int32);
    external 'opengl32.dll' name 'glClearStencil';
    public static z_ClearStencil_ovr0 := _z_ClearStencil_ovr0;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ClearStencil(s: Int32) := z_ClearStencil_ovr0(s);
    
    // added in gl4.4
    public z_ClearTexImage_adr := GetFuncAdr('glClearTexImage');
    public z_ClearTexImage_ovr_0 := GetFuncOrNil&<procedure(texture: UInt32; level: Int32; format: PixelFormat; &type: PixelType; data: IntPtr)>(z_ClearTexImage_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ClearTexImage(texture: UInt32; level: Int32; format: PixelFormat; &type: PixelType; data: IntPtr);
    begin
      z_ClearTexImage_ovr_0(texture, level, format, &type, data);
    end;
    
    // added in gl4.4
    public z_ClearTexSubImage_adr := GetFuncAdr('glClearTexSubImage');
    public z_ClearTexSubImage_ovr_0 := GetFuncOrNil&<procedure(texture: UInt32; level: Int32; xoffset: Int32; yoffset: Int32; zoffset: Int32; width: Int32; height: Int32; depth: Int32; format: PixelFormat; &type: PixelType; data: IntPtr)>(z_ClearTexSubImage_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ClearTexSubImage(texture: UInt32; level: Int32; xoffset: Int32; yoffset: Int32; zoffset: Int32; width: Int32; height: Int32; depth: Int32; format: PixelFormat; &type: PixelType; data: IntPtr);
    begin
      z_ClearTexSubImage_ovr_0(texture, level, xoffset, yoffset, zoffset, width, height, depth, format, &type, data);
    end;
    
    // added in gl3.2
    public z_ClientWaitSync_adr := GetFuncAdr('glClientWaitSync');
    public z_ClientWaitSync_ovr_0 := GetFuncOrNil&<function(sync: GLsync; flags: SyncObjectMask; timeout: UInt64): SyncStatus>(z_ClientWaitSync_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function ClientWaitSync(sync: GLsync; flags: SyncObjectMask; timeout: UInt64): SyncStatus;
    begin
      Result := z_ClientWaitSync_ovr_0(sync, flags, timeout);
    end;
    
    // added in gl4.5
    public z_ClipControl_adr := GetFuncAdr('glClipControl');
    public z_ClipControl_ovr_0 := GetFuncOrNil&<procedure(origin: ClipControlOrigin; depth: ClipControlDepth)>(z_ClipControl_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ClipControl(origin: ClipControlOrigin; depth: ClipControlDepth);
    begin
      z_ClipControl_ovr_0(origin, depth);
    end;
    
    // added in gl1.0
    private static procedure _z_ColorMask_ovr0(red: boolean; green: boolean; blue: boolean; alpha: boolean);
    external 'opengl32.dll' name 'glColorMask';
    public static z_ColorMask_ovr0 := _z_ColorMask_ovr0;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ColorMask(red: boolean; green: boolean; blue: boolean; alpha: boolean) := z_ColorMask_ovr0(red, green, blue, alpha);
    
    // added in gl3.0
    public z_ColorMaski_adr := GetFuncAdr('glColorMaski');
    public z_ColorMaski_ovr_0 := GetFuncOrNil&<procedure(index: UInt32; r: boolean; g: boolean; b: boolean; a: boolean)>(z_ColorMaski_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ColorMaski(index: UInt32; r: boolean; g: boolean; b: boolean; a: boolean);
    begin
      z_ColorMaski_ovr_0(index, r, g, b, a);
    end;
    
    // added in gl3.3
    public z_ColorP3ui_adr := GetFuncAdr('glColorP3ui');
    public z_ColorP3ui_ovr_0 := GetFuncOrNil&<procedure(&type: ColorPointerType; color: UInt32)>(z_ColorP3ui_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ColorP3ui(&type: ColorPointerType; color: UInt32);
    begin
      z_ColorP3ui_ovr_0(&type, color);
    end;
    
    // added in gl3.3
    public z_ColorP3uiv_adr := GetFuncAdr('glColorP3uiv');
    public z_ColorP3uiv_ovr_0 := GetFuncOrNil&<procedure(&type: ColorPointerType; var color: UInt32)>(z_ColorP3uiv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ColorP3uiv(&type: ColorPointerType; color: array of UInt32);
    begin
      z_ColorP3uiv_ovr_0(&type, color[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ColorP3uiv(&type: ColorPointerType; var color: UInt32);
    begin
      z_ColorP3uiv_ovr_0(&type, color);
    end;
    public z_ColorP3uiv_ovr_2 := GetFuncOrNil&<procedure(&type: ColorPointerType; color: IntPtr)>(z_ColorP3uiv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ColorP3uiv(&type: ColorPointerType; color: IntPtr);
    begin
      z_ColorP3uiv_ovr_2(&type, color);
    end;
    
    // added in gl3.3
    public z_ColorP4ui_adr := GetFuncAdr('glColorP4ui');
    public z_ColorP4ui_ovr_0 := GetFuncOrNil&<procedure(&type: ColorPointerType; color: UInt32)>(z_ColorP4ui_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ColorP4ui(&type: ColorPointerType; color: UInt32);
    begin
      z_ColorP4ui_ovr_0(&type, color);
    end;
    
    // added in gl3.3
    public z_ColorP4uiv_adr := GetFuncAdr('glColorP4uiv');
    public z_ColorP4uiv_ovr_0 := GetFuncOrNil&<procedure(&type: ColorPointerType; var color: UInt32)>(z_ColorP4uiv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ColorP4uiv(&type: ColorPointerType; color: array of UInt32);
    begin
      z_ColorP4uiv_ovr_0(&type, color[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ColorP4uiv(&type: ColorPointerType; var color: UInt32);
    begin
      z_ColorP4uiv_ovr_0(&type, color);
    end;
    public z_ColorP4uiv_ovr_2 := GetFuncOrNil&<procedure(&type: ColorPointerType; color: IntPtr)>(z_ColorP4uiv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ColorP4uiv(&type: ColorPointerType; color: IntPtr);
    begin
      z_ColorP4uiv_ovr_2(&type, color);
    end;
    
    // added in gl2.0
    public z_CompileShader_adr := GetFuncAdr('glCompileShader');
    public z_CompileShader_ovr_0 := GetFuncOrNil&<procedure(shader: ShaderName)>(z_CompileShader_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure CompileShader(shader: ShaderName);
    begin
      z_CompileShader_ovr_0(shader);
    end;
    
    // added in gl1.3
    public z_CompressedTexImage1D_adr := GetFuncAdr('glCompressedTexImage1D');
    public z_CompressedTexImage1D_ovr_0 := GetFuncOrNil&<procedure(target: TextureTarget; level: Int32; _internalformat: InternalFormat; width: Int32; border: Int32; imageSize: Int32; data: IntPtr)>(z_CompressedTexImage1D_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure CompressedTexImage1D(target: TextureTarget; level: Int32; _internalformat: InternalFormat; width: Int32; border: Int32; imageSize: Int32; data: IntPtr);
    begin
      z_CompressedTexImage1D_ovr_0(target, level, _internalformat, width, border, imageSize, data);
    end;
    
    // added in gl1.3
    public z_CompressedTexImage2D_adr := GetFuncAdr('glCompressedTexImage2D');
    public z_CompressedTexImage2D_ovr_0 := GetFuncOrNil&<procedure(target: TextureTarget; level: Int32; _internalformat: InternalFormat; width: Int32; height: Int32; border: Int32; imageSize: Int32; data: IntPtr)>(z_CompressedTexImage2D_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure CompressedTexImage2D(target: TextureTarget; level: Int32; _internalformat: InternalFormat; width: Int32; height: Int32; border: Int32; imageSize: Int32; data: IntPtr);
    begin
      z_CompressedTexImage2D_ovr_0(target, level, _internalformat, width, height, border, imageSize, data);
    end;
    
    // added in gl1.3
    public z_CompressedTexImage3D_adr := GetFuncAdr('glCompressedTexImage3D');
    public z_CompressedTexImage3D_ovr_0 := GetFuncOrNil&<procedure(target: TextureTarget; level: Int32; _internalformat: InternalFormat; width: Int32; height: Int32; depth: Int32; border: Int32; imageSize: Int32; data: IntPtr)>(z_CompressedTexImage3D_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure CompressedTexImage3D(target: TextureTarget; level: Int32; _internalformat: InternalFormat; width: Int32; height: Int32; depth: Int32; border: Int32; imageSize: Int32; data: IntPtr);
    begin
      z_CompressedTexImage3D_ovr_0(target, level, _internalformat, width, height, depth, border, imageSize, data);
    end;
    
    // added in gl1.3
    public z_CompressedTexSubImage1D_adr := GetFuncAdr('glCompressedTexSubImage1D');
    public z_CompressedTexSubImage1D_ovr_0 := GetFuncOrNil&<procedure(target: TextureTarget; level: Int32; xoffset: Int32; width: Int32; format: PixelFormat; imageSize: Int32; data: IntPtr)>(z_CompressedTexSubImage1D_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure CompressedTexSubImage1D(target: TextureTarget; level: Int32; xoffset: Int32; width: Int32; format: PixelFormat; imageSize: Int32; data: IntPtr);
    begin
      z_CompressedTexSubImage1D_ovr_0(target, level, xoffset, width, format, imageSize, data);
    end;
    
    // added in gl1.3
    public z_CompressedTexSubImage2D_adr := GetFuncAdr('glCompressedTexSubImage2D');
    public z_CompressedTexSubImage2D_ovr_0 := GetFuncOrNil&<procedure(target: TextureTarget; level: Int32; xoffset: Int32; yoffset: Int32; width: Int32; height: Int32; format: PixelFormat; imageSize: Int32; data: IntPtr)>(z_CompressedTexSubImage2D_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure CompressedTexSubImage2D(target: TextureTarget; level: Int32; xoffset: Int32; yoffset: Int32; width: Int32; height: Int32; format: PixelFormat; imageSize: Int32; data: IntPtr);
    begin
      z_CompressedTexSubImage2D_ovr_0(target, level, xoffset, yoffset, width, height, format, imageSize, data);
    end;
    
    // added in gl1.3
    public z_CompressedTexSubImage3D_adr := GetFuncAdr('glCompressedTexSubImage3D');
    public z_CompressedTexSubImage3D_ovr_0 := GetFuncOrNil&<procedure(target: TextureTarget; level: Int32; xoffset: Int32; yoffset: Int32; zoffset: Int32; width: Int32; height: Int32; depth: Int32; format: PixelFormat; imageSize: Int32; data: IntPtr)>(z_CompressedTexSubImage3D_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure CompressedTexSubImage3D(target: TextureTarget; level: Int32; xoffset: Int32; yoffset: Int32; zoffset: Int32; width: Int32; height: Int32; depth: Int32; format: PixelFormat; imageSize: Int32; data: IntPtr);
    begin
      z_CompressedTexSubImage3D_ovr_0(target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, data);
    end;
    
    // added in gl4.5
    public z_CompressedTextureSubImage1D_adr := GetFuncAdr('glCompressedTextureSubImage1D');
    public z_CompressedTextureSubImage1D_ovr_0 := GetFuncOrNil&<procedure(texture: UInt32; level: Int32; xoffset: Int32; width: Int32; format: PixelFormat; imageSize: Int32; data: IntPtr)>(z_CompressedTextureSubImage1D_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure CompressedTextureSubImage1D(texture: UInt32; level: Int32; xoffset: Int32; width: Int32; format: PixelFormat; imageSize: Int32; data: IntPtr);
    begin
      z_CompressedTextureSubImage1D_ovr_0(texture, level, xoffset, width, format, imageSize, data);
    end;
    
    // added in gl4.5
    public z_CompressedTextureSubImage2D_adr := GetFuncAdr('glCompressedTextureSubImage2D');
    public z_CompressedTextureSubImage2D_ovr_0 := GetFuncOrNil&<procedure(texture: UInt32; level: Int32; xoffset: Int32; yoffset: Int32; width: Int32; height: Int32; format: PixelFormat; imageSize: Int32; data: IntPtr)>(z_CompressedTextureSubImage2D_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure CompressedTextureSubImage2D(texture: UInt32; level: Int32; xoffset: Int32; yoffset: Int32; width: Int32; height: Int32; format: PixelFormat; imageSize: Int32; data: IntPtr);
    begin
      z_CompressedTextureSubImage2D_ovr_0(texture, level, xoffset, yoffset, width, height, format, imageSize, data);
    end;
    
    // added in gl4.5
    public z_CompressedTextureSubImage3D_adr := GetFuncAdr('glCompressedTextureSubImage3D');
    public z_CompressedTextureSubImage3D_ovr_0 := GetFuncOrNil&<procedure(texture: UInt32; level: Int32; xoffset: Int32; yoffset: Int32; zoffset: Int32; width: Int32; height: Int32; depth: Int32; format: PixelFormat; imageSize: Int32; data: IntPtr)>(z_CompressedTextureSubImage3D_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure CompressedTextureSubImage3D(texture: UInt32; level: Int32; xoffset: Int32; yoffset: Int32; zoffset: Int32; width: Int32; height: Int32; depth: Int32; format: PixelFormat; imageSize: Int32; data: IntPtr);
    begin
      z_CompressedTextureSubImage3D_ovr_0(texture, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, data);
    end;
    
    // added in gl3.1
    public z_CopyBufferSubData_adr := GetFuncAdr('glCopyBufferSubData');
    public z_CopyBufferSubData_ovr_0 := GetFuncOrNil&<procedure(readTarget: CopyBufferSubDataTarget; writeTarget: CopyBufferSubDataTarget; readOffset: IntPtr; writeOffset: IntPtr; size: IntPtr)>(z_CopyBufferSubData_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure CopyBufferSubData(readTarget: CopyBufferSubDataTarget; writeTarget: CopyBufferSubDataTarget; readOffset: IntPtr; writeOffset: IntPtr; size: IntPtr);
    begin
      z_CopyBufferSubData_ovr_0(readTarget, writeTarget, readOffset, writeOffset, size);
    end;
    
    // added in gl4.3
    public z_CopyImageSubData_adr := GetFuncAdr('glCopyImageSubData');
    public z_CopyImageSubData_ovr_0 := GetFuncOrNil&<procedure(srcName: UInt32; srcTarget: CopyImageSubDataTarget; srcLevel: Int32; srcX: Int32; srcY: Int32; srcZ: Int32; dstName: UInt32; dstTarget: CopyImageSubDataTarget; dstLevel: Int32; dstX: Int32; dstY: Int32; dstZ: Int32; srcWidth: Int32; srcHeight: Int32; srcDepth: Int32)>(z_CopyImageSubData_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure CopyImageSubData(srcName: UInt32; srcTarget: CopyImageSubDataTarget; srcLevel: Int32; srcX: Int32; srcY: Int32; srcZ: Int32; dstName: UInt32; dstTarget: CopyImageSubDataTarget; dstLevel: Int32; dstX: Int32; dstY: Int32; dstZ: Int32; srcWidth: Int32; srcHeight: Int32; srcDepth: Int32);
    begin
      z_CopyImageSubData_ovr_0(srcName, srcTarget, srcLevel, srcX, srcY, srcZ, dstName, dstTarget, dstLevel, dstX, dstY, dstZ, srcWidth, srcHeight, srcDepth);
    end;
    
    // added in gl4.5
    public z_CopyNamedBufferSubData_adr := GetFuncAdr('glCopyNamedBufferSubData');
    public z_CopyNamedBufferSubData_ovr_0 := GetFuncOrNil&<procedure(readBuffer: BufferName; writeBuffer: BufferName; readOffset: IntPtr; writeOffset: IntPtr; size: IntPtr)>(z_CopyNamedBufferSubData_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure CopyNamedBufferSubData(readBuffer: BufferName; writeBuffer: BufferName; readOffset: IntPtr; writeOffset: IntPtr; size: IntPtr);
    begin
      z_CopyNamedBufferSubData_ovr_0(readBuffer, writeBuffer, readOffset, writeOffset, size);
    end;
    
    // added in gl1.1
    private static procedure _z_CopyTexImage1D_ovr0(target: TextureTarget; level: Int32; _internalformat: InternalFormat; x: Int32; y: Int32; width: Int32; border: Int32);
    external 'opengl32.dll' name 'glCopyTexImage1D';
    public static z_CopyTexImage1D_ovr0 := _z_CopyTexImage1D_ovr0;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure CopyTexImage1D(target: TextureTarget; level: Int32; _internalformat: InternalFormat; x: Int32; y: Int32; width: Int32; border: Int32) := z_CopyTexImage1D_ovr0(target, level, _internalformat, x, y, width, border);
    
    // added in gl1.1
    private static procedure _z_CopyTexImage2D_ovr0(target: TextureTarget; level: Int32; _internalformat: InternalFormat; x: Int32; y: Int32; width: Int32; height: Int32; border: Int32);
    external 'opengl32.dll' name 'glCopyTexImage2D';
    public static z_CopyTexImage2D_ovr0 := _z_CopyTexImage2D_ovr0;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure CopyTexImage2D(target: TextureTarget; level: Int32; _internalformat: InternalFormat; x: Int32; y: Int32; width: Int32; height: Int32; border: Int32) := z_CopyTexImage2D_ovr0(target, level, _internalformat, x, y, width, height, border);
    
    // added in gl1.1
    private static procedure _z_CopyTexSubImage1D_ovr0(target: TextureTarget; level: Int32; xoffset: Int32; x: Int32; y: Int32; width: Int32);
    external 'opengl32.dll' name 'glCopyTexSubImage1D';
    public static z_CopyTexSubImage1D_ovr0 := _z_CopyTexSubImage1D_ovr0;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure CopyTexSubImage1D(target: TextureTarget; level: Int32; xoffset: Int32; x: Int32; y: Int32; width: Int32) := z_CopyTexSubImage1D_ovr0(target, level, xoffset, x, y, width);
    
    // added in gl1.1
    private static procedure _z_CopyTexSubImage2D_ovr0(target: TextureTarget; level: Int32; xoffset: Int32; yoffset: Int32; x: Int32; y: Int32; width: Int32; height: Int32);
    external 'opengl32.dll' name 'glCopyTexSubImage2D';
    public static z_CopyTexSubImage2D_ovr0 := _z_CopyTexSubImage2D_ovr0;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure CopyTexSubImage2D(target: TextureTarget; level: Int32; xoffset: Int32; yoffset: Int32; x: Int32; y: Int32; width: Int32; height: Int32) := z_CopyTexSubImage2D_ovr0(target, level, xoffset, yoffset, x, y, width, height);
    
    // added in gl1.2
    public z_CopyTexSubImage3D_adr := GetFuncAdr('glCopyTexSubImage3D');
    public z_CopyTexSubImage3D_ovr_0 := GetFuncOrNil&<procedure(target: TextureTarget; level: Int32; xoffset: Int32; yoffset: Int32; zoffset: Int32; x: Int32; y: Int32; width: Int32; height: Int32)>(z_CopyTexSubImage3D_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure CopyTexSubImage3D(target: TextureTarget; level: Int32; xoffset: Int32; yoffset: Int32; zoffset: Int32; x: Int32; y: Int32; width: Int32; height: Int32);
    begin
      z_CopyTexSubImage3D_ovr_0(target, level, xoffset, yoffset, zoffset, x, y, width, height);
    end;
    
    // added in gl4.5
    public z_CopyTextureSubImage1D_adr := GetFuncAdr('glCopyTextureSubImage1D');
    public z_CopyTextureSubImage1D_ovr_0 := GetFuncOrNil&<procedure(texture: TextureName; level: Int32; xoffset: Int32; x: Int32; y: Int32; width: Int32)>(z_CopyTextureSubImage1D_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure CopyTextureSubImage1D(texture: TextureName; level: Int32; xoffset: Int32; x: Int32; y: Int32; width: Int32);
    begin
      z_CopyTextureSubImage1D_ovr_0(texture, level, xoffset, x, y, width);
    end;
    
    // added in gl4.5
    public z_CopyTextureSubImage2D_adr := GetFuncAdr('glCopyTextureSubImage2D');
    public z_CopyTextureSubImage2D_ovr_0 := GetFuncOrNil&<procedure(texture: TextureName; level: Int32; xoffset: Int32; yoffset: Int32; x: Int32; y: Int32; width: Int32; height: Int32)>(z_CopyTextureSubImage2D_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure CopyTextureSubImage2D(texture: TextureName; level: Int32; xoffset: Int32; yoffset: Int32; x: Int32; y: Int32; width: Int32; height: Int32);
    begin
      z_CopyTextureSubImage2D_ovr_0(texture, level, xoffset, yoffset, x, y, width, height);
    end;
    
    // added in gl4.5
    public z_CopyTextureSubImage3D_adr := GetFuncAdr('glCopyTextureSubImage3D');
    public z_CopyTextureSubImage3D_ovr_0 := GetFuncOrNil&<procedure(texture: TextureName; level: Int32; xoffset: Int32; yoffset: Int32; zoffset: Int32; x: Int32; y: Int32; width: Int32; height: Int32)>(z_CopyTextureSubImage3D_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure CopyTextureSubImage3D(texture: TextureName; level: Int32; xoffset: Int32; yoffset: Int32; zoffset: Int32; x: Int32; y: Int32; width: Int32; height: Int32);
    begin
      z_CopyTextureSubImage3D_ovr_0(texture, level, xoffset, yoffset, zoffset, x, y, width, height);
    end;
    
    // added in gl4.5
    public z_CreateBuffers_adr := GetFuncAdr('glCreateBuffers');
    public z_CreateBuffers_ovr_0 := GetFuncOrNil&<procedure(n: Int32; var buffers: BufferName)>(z_CreateBuffers_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure CreateBuffers(n: Int32; buffers: array of BufferName);
    begin
      z_CreateBuffers_ovr_0(n, buffers[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure CreateBuffers(n: Int32; var buffers: BufferName);
    begin
      z_CreateBuffers_ovr_0(n, buffers);
    end;
    public z_CreateBuffers_ovr_2 := GetFuncOrNil&<procedure(n: Int32; buffers: IntPtr)>(z_CreateBuffers_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure CreateBuffers(n: Int32; buffers: IntPtr);
    begin
      z_CreateBuffers_ovr_2(n, buffers);
    end;
    
    // added in gl4.5
    public z_CreateFramebuffers_adr := GetFuncAdr('glCreateFramebuffers');
    public z_CreateFramebuffers_ovr_0 := GetFuncOrNil&<procedure(n: Int32; var framebuffers: UInt32)>(z_CreateFramebuffers_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure CreateFramebuffers(n: Int32; framebuffers: array of UInt32);
    begin
      z_CreateFramebuffers_ovr_0(n, framebuffers[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure CreateFramebuffers(n: Int32; var framebuffers: UInt32);
    begin
      z_CreateFramebuffers_ovr_0(n, framebuffers);
    end;
    public z_CreateFramebuffers_ovr_2 := GetFuncOrNil&<procedure(n: Int32; framebuffers: IntPtr)>(z_CreateFramebuffers_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure CreateFramebuffers(n: Int32; framebuffers: IntPtr);
    begin
      z_CreateFramebuffers_ovr_2(n, framebuffers);
    end;
    
    // added in gl2.0
    public z_CreateProgram_adr := GetFuncAdr('glCreateProgram');
    public z_CreateProgram_ovr_0 := GetFuncOrNil&<function: ProgramName>(z_CreateProgram_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function CreateProgram: ProgramName;
    begin
      Result := z_CreateProgram_ovr_0;
    end;
    
    // added in gl4.5
    public z_CreateProgramPipelines_adr := GetFuncAdr('glCreateProgramPipelines');
    public z_CreateProgramPipelines_ovr_0 := GetFuncOrNil&<procedure(n: Int32; var pipelines: UInt32)>(z_CreateProgramPipelines_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure CreateProgramPipelines(n: Int32; pipelines: array of UInt32);
    begin
      z_CreateProgramPipelines_ovr_0(n, pipelines[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure CreateProgramPipelines(n: Int32; var pipelines: UInt32);
    begin
      z_CreateProgramPipelines_ovr_0(n, pipelines);
    end;
    public z_CreateProgramPipelines_ovr_2 := GetFuncOrNil&<procedure(n: Int32; pipelines: IntPtr)>(z_CreateProgramPipelines_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure CreateProgramPipelines(n: Int32; pipelines: IntPtr);
    begin
      z_CreateProgramPipelines_ovr_2(n, pipelines);
    end;
    
    // added in gl4.5
    public z_CreateQueries_adr := GetFuncAdr('glCreateQueries');
    public z_CreateQueries_ovr_0 := GetFuncOrNil&<procedure(target: QueryTarget; n: Int32; var ids: UInt32)>(z_CreateQueries_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure CreateQueries(target: QueryTarget; n: Int32; ids: array of UInt32);
    begin
      z_CreateQueries_ovr_0(target, n, ids[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure CreateQueries(target: QueryTarget; n: Int32; var ids: UInt32);
    begin
      z_CreateQueries_ovr_0(target, n, ids);
    end;
    public z_CreateQueries_ovr_2 := GetFuncOrNil&<procedure(target: QueryTarget; n: Int32; ids: IntPtr)>(z_CreateQueries_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure CreateQueries(target: QueryTarget; n: Int32; ids: IntPtr);
    begin
      z_CreateQueries_ovr_2(target, n, ids);
    end;
    
    // added in gl4.5
    public z_CreateRenderbuffers_adr := GetFuncAdr('glCreateRenderbuffers');
    public z_CreateRenderbuffers_ovr_0 := GetFuncOrNil&<procedure(n: Int32; var renderbuffers: UInt32)>(z_CreateRenderbuffers_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure CreateRenderbuffers(n: Int32; renderbuffers: array of UInt32);
    begin
      z_CreateRenderbuffers_ovr_0(n, renderbuffers[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure CreateRenderbuffers(n: Int32; var renderbuffers: UInt32);
    begin
      z_CreateRenderbuffers_ovr_0(n, renderbuffers);
    end;
    public z_CreateRenderbuffers_ovr_2 := GetFuncOrNil&<procedure(n: Int32; renderbuffers: IntPtr)>(z_CreateRenderbuffers_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure CreateRenderbuffers(n: Int32; renderbuffers: IntPtr);
    begin
      z_CreateRenderbuffers_ovr_2(n, renderbuffers);
    end;
    
    // added in gl4.5
    public z_CreateSamplers_adr := GetFuncAdr('glCreateSamplers');
    public z_CreateSamplers_ovr_0 := GetFuncOrNil&<procedure(n: Int32; var samplers: UInt32)>(z_CreateSamplers_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure CreateSamplers(n: Int32; samplers: array of UInt32);
    begin
      z_CreateSamplers_ovr_0(n, samplers[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure CreateSamplers(n: Int32; var samplers: UInt32);
    begin
      z_CreateSamplers_ovr_0(n, samplers);
    end;
    public z_CreateSamplers_ovr_2 := GetFuncOrNil&<procedure(n: Int32; samplers: IntPtr)>(z_CreateSamplers_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure CreateSamplers(n: Int32; samplers: IntPtr);
    begin
      z_CreateSamplers_ovr_2(n, samplers);
    end;
    
    // added in gl2.0
    public z_CreateShader_adr := GetFuncAdr('glCreateShader');
    public z_CreateShader_ovr_0 := GetFuncOrNil&<function(&type: ShaderType): ShaderName>(z_CreateShader_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function CreateShader(&type: ShaderType): ShaderName;
    begin
      Result := z_CreateShader_ovr_0(&type);
    end;
    
    // added in gl4.1
    public z_CreateShaderProgramv_adr := GetFuncAdr('glCreateShaderProgramv');
    public z_CreateShaderProgramv_ovr_0 := GetFuncOrNil&<function(&type: ShaderType; count: Int32; var strings: IntPtr): ProgramName>(z_CreateShaderProgramv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function CreateShaderProgramv(&type: ShaderType; count: Int32; strings: array of string): ProgramName;
    begin
      var par_3_str_ptr := strings.ConvertAll(arr_el1->Marshal.StringToHGlobalAnsi(arr_el1));
      Result := z_CreateShaderProgramv_ovr_0(&type, count, par_3_str_ptr[0]);
      foreach var arr_el1 in par_3_str_ptr do Marshal.FreeHGlobal(arr_el1);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function CreateShaderProgramv(&type: ShaderType; count: Int32; strings: array of IntPtr): ProgramName;
    begin
      Result := z_CreateShaderProgramv_ovr_0(&type, count, strings[0]);
    end;
    public z_CreateShaderProgramv_ovr_2 := GetFuncOrNil&<function(&type: ShaderType; count: Int32; strings: IntPtr): ProgramName>(z_CreateShaderProgramv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function CreateShaderProgramv(&type: ShaderType; count: Int32; strings: IntPtr): ProgramName;
    begin
      Result := z_CreateShaderProgramv_ovr_2(&type, count, strings);
    end;
    
    // added in gl4.5
    public z_CreateTextures_adr := GetFuncAdr('glCreateTextures');
    public z_CreateTextures_ovr_0 := GetFuncOrNil&<procedure(target: TextureTarget; n: Int32; var textures: UInt32)>(z_CreateTextures_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure CreateTextures(target: TextureTarget; n: Int32; textures: array of UInt32);
    begin
      z_CreateTextures_ovr_0(target, n, textures[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure CreateTextures(target: TextureTarget; n: Int32; var textures: UInt32);
    begin
      z_CreateTextures_ovr_0(target, n, textures);
    end;
    public z_CreateTextures_ovr_2 := GetFuncOrNil&<procedure(target: TextureTarget; n: Int32; textures: IntPtr)>(z_CreateTextures_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure CreateTextures(target: TextureTarget; n: Int32; textures: IntPtr);
    begin
      z_CreateTextures_ovr_2(target, n, textures);
    end;
    
    // added in gl4.5
    public z_CreateTransformFeedbacks_adr := GetFuncAdr('glCreateTransformFeedbacks');
    public z_CreateTransformFeedbacks_ovr_0 := GetFuncOrNil&<procedure(n: Int32; var ids: UInt32)>(z_CreateTransformFeedbacks_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure CreateTransformFeedbacks(n: Int32; ids: array of UInt32);
    begin
      z_CreateTransformFeedbacks_ovr_0(n, ids[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure CreateTransformFeedbacks(n: Int32; var ids: UInt32);
    begin
      z_CreateTransformFeedbacks_ovr_0(n, ids);
    end;
    public z_CreateTransformFeedbacks_ovr_2 := GetFuncOrNil&<procedure(n: Int32; ids: IntPtr)>(z_CreateTransformFeedbacks_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure CreateTransformFeedbacks(n: Int32; ids: IntPtr);
    begin
      z_CreateTransformFeedbacks_ovr_2(n, ids);
    end;
    
    // added in gl4.5
    public z_CreateVertexArrays_adr := GetFuncAdr('glCreateVertexArrays');
    public z_CreateVertexArrays_ovr_0 := GetFuncOrNil&<procedure(n: Int32; var arrays: UInt32)>(z_CreateVertexArrays_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure CreateVertexArrays(n: Int32; arrays: array of UInt32);
    begin
      z_CreateVertexArrays_ovr_0(n, arrays[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure CreateVertexArrays(n: Int32; var arrays: UInt32);
    begin
      z_CreateVertexArrays_ovr_0(n, arrays);
    end;
    public z_CreateVertexArrays_ovr_2 := GetFuncOrNil&<procedure(n: Int32; arrays: IntPtr)>(z_CreateVertexArrays_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure CreateVertexArrays(n: Int32; arrays: IntPtr);
    begin
      z_CreateVertexArrays_ovr_2(n, arrays);
    end;
    
    // added in gl1.0
    private static procedure _z_CullFace_ovr0(mode: CullFaceMode);
    external 'opengl32.dll' name 'glCullFace';
    public static z_CullFace_ovr0 := _z_CullFace_ovr0;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure CullFace(mode: CullFaceMode) := z_CullFace_ovr0(mode);
    
    // added in gl4.3
    public z_DebugMessageCallback_adr := GetFuncAdr('glDebugMessageCallback');
    public z_DebugMessageCallback_ovr_0 := GetFuncOrNil&<procedure(callback: GLDEBUGPROC; userParam: IntPtr)>(z_DebugMessageCallback_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure DebugMessageCallback(callback: GLDEBUGPROC; userParam: IntPtr);
    begin
      z_DebugMessageCallback_ovr_0(callback, userParam);
    end;
    
    // added in gl4.3
    public z_DebugMessageControl_adr := GetFuncAdr('glDebugMessageControl');
    public z_DebugMessageControl_ovr_0 := GetFuncOrNil&<procedure(source: DebugSource; &type: DebugType; severity: DebugSeverity; count: Int32; var ids: UInt32; enabled: boolean)>(z_DebugMessageControl_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure DebugMessageControl(source: DebugSource; &type: DebugType; severity: DebugSeverity; count: Int32; ids: array of UInt32; enabled: boolean);
    begin
      z_DebugMessageControl_ovr_0(source, &type, severity, count, ids[0], enabled);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure DebugMessageControl(source: DebugSource; &type: DebugType; severity: DebugSeverity; count: Int32; var ids: UInt32; enabled: boolean);
    begin
      z_DebugMessageControl_ovr_0(source, &type, severity, count, ids, enabled);
    end;
    public z_DebugMessageControl_ovr_2 := GetFuncOrNil&<procedure(source: DebugSource; &type: DebugType; severity: DebugSeverity; count: Int32; ids: IntPtr; enabled: boolean)>(z_DebugMessageControl_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure DebugMessageControl(source: DebugSource; &type: DebugType; severity: DebugSeverity; count: Int32; ids: IntPtr; enabled: boolean);
    begin
      z_DebugMessageControl_ovr_2(source, &type, severity, count, ids, enabled);
    end;
    
    // added in gl4.3
    public z_DebugMessageInsert_adr := GetFuncAdr('glDebugMessageInsert');
    public z_DebugMessageInsert_ovr_0 := GetFuncOrNil&<procedure(source: DebugSource; &type: DebugType; id: UInt32; severity: DebugSeverity; length: Int32; buf: IntPtr)>(z_DebugMessageInsert_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure DebugMessageInsert(source: DebugSource; &type: DebugType; id: UInt32; severity: DebugSeverity; length: Int32; buf: string);
    begin
      var par_6_str_ptr := Marshal.StringToHGlobalAnsi(buf);
      z_DebugMessageInsert_ovr_0(source, &type, id, severity, length, par_6_str_ptr);
      Marshal.FreeHGlobal(par_6_str_ptr);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure DebugMessageInsert(source: DebugSource; &type: DebugType; id: UInt32; severity: DebugSeverity; length: Int32; buf: IntPtr);
    begin
      z_DebugMessageInsert_ovr_0(source, &type, id, severity, length, buf);
    end;
    
    // added in gl1.5
    public z_DeleteBuffers_adr := GetFuncAdr('glDeleteBuffers');
    public z_DeleteBuffers_ovr_0 := GetFuncOrNil&<procedure(n: Int32; var buffers: UInt32)>(z_DeleteBuffers_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure DeleteBuffers(n: Int32; buffers: array of UInt32);
    begin
      z_DeleteBuffers_ovr_0(n, buffers[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure DeleteBuffers(n: Int32; var buffers: UInt32);
    begin
      z_DeleteBuffers_ovr_0(n, buffers);
    end;
    public z_DeleteBuffers_ovr_2 := GetFuncOrNil&<procedure(n: Int32; buffers: IntPtr)>(z_DeleteBuffers_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure DeleteBuffers(n: Int32; buffers: IntPtr);
    begin
      z_DeleteBuffers_ovr_2(n, buffers);
    end;
    
    // added in gl3.0
    public z_DeleteFramebuffers_adr := GetFuncAdr('glDeleteFramebuffers');
    public z_DeleteFramebuffers_ovr_0 := GetFuncOrNil&<procedure(n: Int32; var framebuffers: UInt32)>(z_DeleteFramebuffers_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure DeleteFramebuffers(n: Int32; framebuffers: array of UInt32);
    begin
      z_DeleteFramebuffers_ovr_0(n, framebuffers[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure DeleteFramebuffers(n: Int32; var framebuffers: UInt32);
    begin
      z_DeleteFramebuffers_ovr_0(n, framebuffers);
    end;
    public z_DeleteFramebuffers_ovr_2 := GetFuncOrNil&<procedure(n: Int32; framebuffers: IntPtr)>(z_DeleteFramebuffers_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure DeleteFramebuffers(n: Int32; framebuffers: IntPtr);
    begin
      z_DeleteFramebuffers_ovr_2(n, framebuffers);
    end;
    
    // added in gl2.0
    public z_DeleteProgram_adr := GetFuncAdr('glDeleteProgram');
    public z_DeleteProgram_ovr_0 := GetFuncOrNil&<procedure(&program: ProgramName)>(z_DeleteProgram_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure DeleteProgram(&program: ProgramName);
    begin
      z_DeleteProgram_ovr_0(&program);
    end;
    
    // added in gl4.1
    public z_DeleteProgramPipelines_adr := GetFuncAdr('glDeleteProgramPipelines');
    public z_DeleteProgramPipelines_ovr_0 := GetFuncOrNil&<procedure(n: Int32; var pipelines: UInt32)>(z_DeleteProgramPipelines_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure DeleteProgramPipelines(n: Int32; pipelines: array of UInt32);
    begin
      z_DeleteProgramPipelines_ovr_0(n, pipelines[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure DeleteProgramPipelines(n: Int32; var pipelines: UInt32);
    begin
      z_DeleteProgramPipelines_ovr_0(n, pipelines);
    end;
    public z_DeleteProgramPipelines_ovr_2 := GetFuncOrNil&<procedure(n: Int32; pipelines: IntPtr)>(z_DeleteProgramPipelines_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure DeleteProgramPipelines(n: Int32; pipelines: IntPtr);
    begin
      z_DeleteProgramPipelines_ovr_2(n, pipelines);
    end;
    
    // added in gl1.5
    public z_DeleteQueries_adr := GetFuncAdr('glDeleteQueries');
    public z_DeleteQueries_ovr_0 := GetFuncOrNil&<procedure(n: Int32; var ids: UInt32)>(z_DeleteQueries_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure DeleteQueries(n: Int32; ids: array of UInt32);
    begin
      z_DeleteQueries_ovr_0(n, ids[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure DeleteQueries(n: Int32; var ids: UInt32);
    begin
      z_DeleteQueries_ovr_0(n, ids);
    end;
    public z_DeleteQueries_ovr_2 := GetFuncOrNil&<procedure(n: Int32; ids: IntPtr)>(z_DeleteQueries_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure DeleteQueries(n: Int32; ids: IntPtr);
    begin
      z_DeleteQueries_ovr_2(n, ids);
    end;
    
    // added in gl3.0
    public z_DeleteRenderbuffers_adr := GetFuncAdr('glDeleteRenderbuffers');
    public z_DeleteRenderbuffers_ovr_0 := GetFuncOrNil&<procedure(n: Int32; var renderbuffers: UInt32)>(z_DeleteRenderbuffers_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure DeleteRenderbuffers(n: Int32; renderbuffers: array of UInt32);
    begin
      z_DeleteRenderbuffers_ovr_0(n, renderbuffers[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure DeleteRenderbuffers(n: Int32; var renderbuffers: UInt32);
    begin
      z_DeleteRenderbuffers_ovr_0(n, renderbuffers);
    end;
    public z_DeleteRenderbuffers_ovr_2 := GetFuncOrNil&<procedure(n: Int32; renderbuffers: IntPtr)>(z_DeleteRenderbuffers_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure DeleteRenderbuffers(n: Int32; renderbuffers: IntPtr);
    begin
      z_DeleteRenderbuffers_ovr_2(n, renderbuffers);
    end;
    
    // added in gl3.3
    public z_DeleteSamplers_adr := GetFuncAdr('glDeleteSamplers');
    public z_DeleteSamplers_ovr_0 := GetFuncOrNil&<procedure(count: Int32; var samplers: UInt32)>(z_DeleteSamplers_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure DeleteSamplers(count: Int32; samplers: array of UInt32);
    begin
      z_DeleteSamplers_ovr_0(count, samplers[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure DeleteSamplers(count: Int32; var samplers: UInt32);
    begin
      z_DeleteSamplers_ovr_0(count, samplers);
    end;
    public z_DeleteSamplers_ovr_2 := GetFuncOrNil&<procedure(count: Int32; samplers: IntPtr)>(z_DeleteSamplers_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure DeleteSamplers(count: Int32; samplers: IntPtr);
    begin
      z_DeleteSamplers_ovr_2(count, samplers);
    end;
    
    // added in gl2.0
    public z_DeleteShader_adr := GetFuncAdr('glDeleteShader');
    public z_DeleteShader_ovr_0 := GetFuncOrNil&<procedure(shader: ShaderName)>(z_DeleteShader_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure DeleteShader(shader: ShaderName);
    begin
      z_DeleteShader_ovr_0(shader);
    end;
    
    // added in gl3.2
    public z_DeleteSync_adr := GetFuncAdr('glDeleteSync');
    public z_DeleteSync_ovr_0 := GetFuncOrNil&<procedure(sync: GLsync)>(z_DeleteSync_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure DeleteSync(sync: GLsync);
    begin
      z_DeleteSync_ovr_0(sync);
    end;
    
    // added in gl1.1
    private static procedure _z_DeleteTextures_ovr0(n: Int32; [MarshalAs(UnmanagedType.LPArray)] textures: array of UInt32);
    external 'opengl32.dll' name 'glDeleteTextures';
    public static z_DeleteTextures_ovr0 := _z_DeleteTextures_ovr0;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure DeleteTextures(n: Int32; textures: array of UInt32) := z_DeleteTextures_ovr0(n, textures);
    private static procedure _z_DeleteTextures_ovr1(n: Int32; var textures: UInt32);
    external 'opengl32.dll' name 'glDeleteTextures';
    public static z_DeleteTextures_ovr1 := _z_DeleteTextures_ovr1;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure DeleteTextures(n: Int32; var textures: UInt32) := z_DeleteTextures_ovr1(n, textures);
    private static procedure _z_DeleteTextures_ovr2(n: Int32; textures: IntPtr);
    external 'opengl32.dll' name 'glDeleteTextures';
    public static z_DeleteTextures_ovr2 := _z_DeleteTextures_ovr2;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure DeleteTextures(n: Int32; textures: IntPtr) := z_DeleteTextures_ovr2(n, textures);
    
    // added in gl4.0
    public z_DeleteTransformFeedbacks_adr := GetFuncAdr('glDeleteTransformFeedbacks');
    public z_DeleteTransformFeedbacks_ovr_0 := GetFuncOrNil&<procedure(n: Int32; var ids: UInt32)>(z_DeleteTransformFeedbacks_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure DeleteTransformFeedbacks(n: Int32; ids: array of UInt32);
    begin
      z_DeleteTransformFeedbacks_ovr_0(n, ids[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure DeleteTransformFeedbacks(n: Int32; var ids: UInt32);
    begin
      z_DeleteTransformFeedbacks_ovr_0(n, ids);
    end;
    public z_DeleteTransformFeedbacks_ovr_2 := GetFuncOrNil&<procedure(n: Int32; ids: IntPtr)>(z_DeleteTransformFeedbacks_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure DeleteTransformFeedbacks(n: Int32; ids: IntPtr);
    begin
      z_DeleteTransformFeedbacks_ovr_2(n, ids);
    end;
    
    // added in gl3.0
    public z_DeleteVertexArrays_adr := GetFuncAdr('glDeleteVertexArrays');
    public z_DeleteVertexArrays_ovr_0 := GetFuncOrNil&<procedure(n: Int32; var arrays: UInt32)>(z_DeleteVertexArrays_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure DeleteVertexArrays(n: Int32; arrays: array of UInt32);
    begin
      z_DeleteVertexArrays_ovr_0(n, arrays[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure DeleteVertexArrays(n: Int32; var arrays: UInt32);
    begin
      z_DeleteVertexArrays_ovr_0(n, arrays);
    end;
    public z_DeleteVertexArrays_ovr_2 := GetFuncOrNil&<procedure(n: Int32; arrays: IntPtr)>(z_DeleteVertexArrays_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure DeleteVertexArrays(n: Int32; arrays: IntPtr);
    begin
      z_DeleteVertexArrays_ovr_2(n, arrays);
    end;
    
    // added in gl1.0
    private static procedure _z_DepthFunc_ovr0(func: DepthFunction);
    external 'opengl32.dll' name 'glDepthFunc';
    public static z_DepthFunc_ovr0 := _z_DepthFunc_ovr0;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure DepthFunc(func: DepthFunction) := z_DepthFunc_ovr0(func);
    
    // added in gl1.0
    private static procedure _z_DepthMask_ovr0(flag: boolean);
    external 'opengl32.dll' name 'glDepthMask';
    public static z_DepthMask_ovr0 := _z_DepthMask_ovr0;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure DepthMask(flag: boolean) := z_DepthMask_ovr0(flag);
    
    // added in gl1.0
    private static procedure _z_DepthRange_ovr0(n: real; f: real);
    external 'opengl32.dll' name 'glDepthRange';
    public static z_DepthRange_ovr0 := _z_DepthRange_ovr0;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure DepthRange(n: real; f: real) := z_DepthRange_ovr0(n, f);
    
    // added in gl4.1
    public z_DepthRangeArrayv_adr := GetFuncAdr('glDepthRangeArrayv');
    public z_DepthRangeArrayv_ovr_0 := GetFuncOrNil&<procedure(first: UInt32; count: Int32; var v: real)>(z_DepthRangeArrayv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure DepthRangeArrayv(first: UInt32; count: Int32; v: array of real);
    begin
      z_DepthRangeArrayv_ovr_0(first, count, v[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure DepthRangeArrayv(first: UInt32; count: Int32; var v: real);
    begin
      z_DepthRangeArrayv_ovr_0(first, count, v);
    end;
    public z_DepthRangeArrayv_ovr_2 := GetFuncOrNil&<procedure(first: UInt32; count: Int32; v: IntPtr)>(z_DepthRangeArrayv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure DepthRangeArrayv(first: UInt32; count: Int32; v: IntPtr);
    begin
      z_DepthRangeArrayv_ovr_2(first, count, v);
    end;
    
    // added in gl4.1
    public z_DepthRangef_adr := GetFuncAdr('glDepthRangef');
    public z_DepthRangef_ovr_0 := GetFuncOrNil&<procedure(n: single; f: single)>(z_DepthRangef_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure DepthRangef(n: single; f: single);
    begin
      z_DepthRangef_ovr_0(n, f);
    end;
    
    // added in gl4.1
    public z_DepthRangeIndexed_adr := GetFuncAdr('glDepthRangeIndexed');
    public z_DepthRangeIndexed_ovr_0 := GetFuncOrNil&<procedure(index: UInt32; n: real; f: real)>(z_DepthRangeIndexed_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure DepthRangeIndexed(index: UInt32; n: real; f: real);
    begin
      z_DepthRangeIndexed_ovr_0(index, n, f);
    end;
    
    // added in gl2.0
    public z_DetachShader_adr := GetFuncAdr('glDetachShader');
    public z_DetachShader_ovr_0 := GetFuncOrNil&<procedure(&program: ProgramName; shader: ShaderName)>(z_DetachShader_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure DetachShader(&program: ProgramName; shader: ShaderName);
    begin
      z_DetachShader_ovr_0(&program, shader);
    end;
    
    // added in gl1.0
    private static procedure _z_Disable_ovr0(cap: EnableCap);
    external 'opengl32.dll' name 'glDisable';
    public static z_Disable_ovr0 := _z_Disable_ovr0;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Disable(cap: EnableCap) := z_Disable_ovr0(cap);
    
    // added in gl3.0
    public z_Disablei_adr := GetFuncAdr('glDisablei');
    public z_Disablei_ovr_0 := GetFuncOrNil&<procedure(target: EnableCap; index: UInt32)>(z_Disablei_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Disablei(target: EnableCap; index: UInt32);
    begin
      z_Disablei_ovr_0(target, index);
    end;
    
    // added in gl4.5
    public z_DisableVertexArrayAttrib_adr := GetFuncAdr('glDisableVertexArrayAttrib');
    public z_DisableVertexArrayAttrib_ovr_0 := GetFuncOrNil&<procedure(vaobj: VertexArrayName; index: UInt32)>(z_DisableVertexArrayAttrib_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure DisableVertexArrayAttrib(vaobj: VertexArrayName; index: UInt32);
    begin
      z_DisableVertexArrayAttrib_ovr_0(vaobj, index);
    end;
    
    // added in gl2.0
    public z_DisableVertexAttribArray_adr := GetFuncAdr('glDisableVertexAttribArray');
    public z_DisableVertexAttribArray_ovr_0 := GetFuncOrNil&<procedure(index: UInt32)>(z_DisableVertexAttribArray_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure DisableVertexAttribArray(index: UInt32);
    begin
      z_DisableVertexAttribArray_ovr_0(index);
    end;
    
    // added in gl4.3
    public z_DispatchCompute_adr := GetFuncAdr('glDispatchCompute');
    public z_DispatchCompute_ovr_0 := GetFuncOrNil&<procedure(num_groups_x: UInt32; num_groups_y: UInt32; num_groups_z: UInt32)>(z_DispatchCompute_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure DispatchCompute(num_groups_x: UInt32; num_groups_y: UInt32; num_groups_z: UInt32);
    begin
      z_DispatchCompute_ovr_0(num_groups_x, num_groups_y, num_groups_z);
    end;
    
    // added in gl4.3
    public z_DispatchComputeIndirect_adr := GetFuncAdr('glDispatchComputeIndirect');
    public z_DispatchComputeIndirect_ovr_0 := GetFuncOrNil&<procedure(indirect: IntPtr)>(z_DispatchComputeIndirect_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure DispatchComputeIndirect(indirect: IntPtr);
    begin
      z_DispatchComputeIndirect_ovr_0(indirect);
    end;
    
    // added in gl1.1
    private static procedure _z_DrawArrays_ovr0(mode: PrimitiveType; first: Int32; count: Int32);
    external 'opengl32.dll' name 'glDrawArrays';
    public static z_DrawArrays_ovr0 := _z_DrawArrays_ovr0;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure DrawArrays(mode: PrimitiveType; first: Int32; count: Int32) := z_DrawArrays_ovr0(mode, first, count);
    
    // added in gl4.0
    public z_DrawArraysIndirect_adr := GetFuncAdr('glDrawArraysIndirect');
    public z_DrawArraysIndirect_ovr_0 := GetFuncOrNil&<procedure(mode: PrimitiveType; indirect: IntPtr)>(z_DrawArraysIndirect_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure DrawArraysIndirect(mode: PrimitiveType; indirect: IntPtr);
    begin
      z_DrawArraysIndirect_ovr_0(mode, indirect);
    end;
    
    // added in gl3.1
    public z_DrawArraysInstanced_adr := GetFuncAdr('glDrawArraysInstanced');
    public z_DrawArraysInstanced_ovr_0 := GetFuncOrNil&<procedure(mode: PrimitiveType; first: Int32; count: Int32; instancecount: Int32)>(z_DrawArraysInstanced_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure DrawArraysInstanced(mode: PrimitiveType; first: Int32; count: Int32; instancecount: Int32);
    begin
      z_DrawArraysInstanced_ovr_0(mode, first, count, instancecount);
    end;
    
    // added in gl4.2
    public z_DrawArraysInstancedBaseInstance_adr := GetFuncAdr('glDrawArraysInstancedBaseInstance');
    public z_DrawArraysInstancedBaseInstance_ovr_0 := GetFuncOrNil&<procedure(mode: PrimitiveType; first: Int32; count: Int32; instancecount: Int32; baseinstance: UInt32)>(z_DrawArraysInstancedBaseInstance_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure DrawArraysInstancedBaseInstance(mode: PrimitiveType; first: Int32; count: Int32; instancecount: Int32; baseinstance: UInt32);
    begin
      z_DrawArraysInstancedBaseInstance_ovr_0(mode, first, count, instancecount, baseinstance);
    end;
    
    // added in gl1.0
    private static procedure _z_DrawBuffer_ovr0(buf: DrawBufferMode);
    external 'opengl32.dll' name 'glDrawBuffer';
    public static z_DrawBuffer_ovr0 := _z_DrawBuffer_ovr0;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure DrawBuffer(buf: DrawBufferMode) := z_DrawBuffer_ovr0(buf);
    
    // added in gl2.0
    public z_DrawBuffers_adr := GetFuncAdr('glDrawBuffers');
    public z_DrawBuffers_ovr_0 := GetFuncOrNil&<procedure(n: Int32; var bufs: DrawBufferMode)>(z_DrawBuffers_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure DrawBuffers(n: Int32; bufs: array of DrawBufferMode);
    begin
      z_DrawBuffers_ovr_0(n, bufs[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure DrawBuffers(n: Int32; var bufs: DrawBufferMode);
    begin
      z_DrawBuffers_ovr_0(n, bufs);
    end;
    public z_DrawBuffers_ovr_2 := GetFuncOrNil&<procedure(n: Int32; bufs: IntPtr)>(z_DrawBuffers_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure DrawBuffers(n: Int32; bufs: IntPtr);
    begin
      z_DrawBuffers_ovr_2(n, bufs);
    end;
    
    // added in gl1.1
    private static procedure _z_DrawElements_ovr0(mode: PrimitiveType; count: Int32; &type: DrawElementsType; indices: IntPtr);
    external 'opengl32.dll' name 'glDrawElements';
    public static z_DrawElements_ovr0 := _z_DrawElements_ovr0;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure DrawElements(mode: PrimitiveType; count: Int32; &type: DrawElementsType; indices: IntPtr) := z_DrawElements_ovr0(mode, count, &type, indices);
    
    // added in gl3.2
    public z_DrawElementsBaseVertex_adr := GetFuncAdr('glDrawElementsBaseVertex');
    public z_DrawElementsBaseVertex_ovr_0 := GetFuncOrNil&<procedure(mode: PrimitiveType; count: Int32; &type: DrawElementsType; indices: IntPtr; basevertex: Int32)>(z_DrawElementsBaseVertex_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure DrawElementsBaseVertex(mode: PrimitiveType; count: Int32; &type: DrawElementsType; indices: IntPtr; basevertex: Int32);
    begin
      z_DrawElementsBaseVertex_ovr_0(mode, count, &type, indices, basevertex);
    end;
    
    // added in gl4.0
    public z_DrawElementsIndirect_adr := GetFuncAdr('glDrawElementsIndirect');
    public z_DrawElementsIndirect_ovr_0 := GetFuncOrNil&<procedure(mode: PrimitiveType; &type: DrawElementsType; indirect: IntPtr)>(z_DrawElementsIndirect_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure DrawElementsIndirect(mode: PrimitiveType; &type: DrawElementsType; indirect: IntPtr);
    begin
      z_DrawElementsIndirect_ovr_0(mode, &type, indirect);
    end;
    
    // added in gl3.1
    public z_DrawElementsInstanced_adr := GetFuncAdr('glDrawElementsInstanced');
    public z_DrawElementsInstanced_ovr_0 := GetFuncOrNil&<procedure(mode: PrimitiveType; count: Int32; &type: DrawElementsType; indices: IntPtr; instancecount: Int32)>(z_DrawElementsInstanced_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure DrawElementsInstanced(mode: PrimitiveType; count: Int32; &type: DrawElementsType; indices: IntPtr; instancecount: Int32);
    begin
      z_DrawElementsInstanced_ovr_0(mode, count, &type, indices, instancecount);
    end;
    
    // added in gl4.2
    public z_DrawElementsInstancedBaseInstance_adr := GetFuncAdr('glDrawElementsInstancedBaseInstance');
    public z_DrawElementsInstancedBaseInstance_ovr_0 := GetFuncOrNil&<procedure(mode: PrimitiveType; count: Int32; &type: PrimitiveType; indices: IntPtr; instancecount: Int32; baseinstance: UInt32)>(z_DrawElementsInstancedBaseInstance_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure DrawElementsInstancedBaseInstance(mode: PrimitiveType; count: Int32; &type: PrimitiveType; indices: IntPtr; instancecount: Int32; baseinstance: UInt32);
    begin
      z_DrawElementsInstancedBaseInstance_ovr_0(mode, count, &type, indices, instancecount, baseinstance);
    end;
    
    // added in gl3.2
    public z_DrawElementsInstancedBaseVertex_adr := GetFuncAdr('glDrawElementsInstancedBaseVertex');
    public z_DrawElementsInstancedBaseVertex_ovr_0 := GetFuncOrNil&<procedure(mode: PrimitiveType; count: Int32; &type: DrawElementsType; indices: IntPtr; instancecount: Int32; basevertex: Int32)>(z_DrawElementsInstancedBaseVertex_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure DrawElementsInstancedBaseVertex(mode: PrimitiveType; count: Int32; &type: DrawElementsType; indices: IntPtr; instancecount: Int32; basevertex: Int32);
    begin
      z_DrawElementsInstancedBaseVertex_ovr_0(mode, count, &type, indices, instancecount, basevertex);
    end;
    
    // added in gl4.2
    public z_DrawElementsInstancedBaseVertexBaseInstance_adr := GetFuncAdr('glDrawElementsInstancedBaseVertexBaseInstance');
    public z_DrawElementsInstancedBaseVertexBaseInstance_ovr_0 := GetFuncOrNil&<procedure(mode: PrimitiveType; count: Int32; &type: DrawElementsType; indices: IntPtr; instancecount: Int32; basevertex: Int32; baseinstance: UInt32)>(z_DrawElementsInstancedBaseVertexBaseInstance_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure DrawElementsInstancedBaseVertexBaseInstance(mode: PrimitiveType; count: Int32; &type: DrawElementsType; indices: IntPtr; instancecount: Int32; basevertex: Int32; baseinstance: UInt32);
    begin
      z_DrawElementsInstancedBaseVertexBaseInstance_ovr_0(mode, count, &type, indices, instancecount, basevertex, baseinstance);
    end;
    
    // added in gl1.2
    public z_DrawRangeElements_adr := GetFuncAdr('glDrawRangeElements');
    public z_DrawRangeElements_ovr_0 := GetFuncOrNil&<procedure(mode: PrimitiveType; start: UInt32; &end: UInt32; count: Int32; &type: DrawElementsType; indices: IntPtr)>(z_DrawRangeElements_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure DrawRangeElements(mode: PrimitiveType; start: UInt32; &end: UInt32; count: Int32; &type: DrawElementsType; indices: IntPtr);
    begin
      z_DrawRangeElements_ovr_0(mode, start, &end, count, &type, indices);
    end;
    
    // added in gl3.2
    public z_DrawRangeElementsBaseVertex_adr := GetFuncAdr('glDrawRangeElementsBaseVertex');
    public z_DrawRangeElementsBaseVertex_ovr_0 := GetFuncOrNil&<procedure(mode: PrimitiveType; start: UInt32; &end: UInt32; count: Int32; &type: DrawElementsType; indices: IntPtr; basevertex: Int32)>(z_DrawRangeElementsBaseVertex_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure DrawRangeElementsBaseVertex(mode: PrimitiveType; start: UInt32; &end: UInt32; count: Int32; &type: DrawElementsType; indices: IntPtr; basevertex: Int32);
    begin
      z_DrawRangeElementsBaseVertex_ovr_0(mode, start, &end, count, &type, indices, basevertex);
    end;
    
    // added in gl4.0
    public z_DrawTransformFeedback_adr := GetFuncAdr('glDrawTransformFeedback');
    public z_DrawTransformFeedback_ovr_0 := GetFuncOrNil&<procedure(mode: PrimitiveType; id: TransformFeedbackName)>(z_DrawTransformFeedback_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure DrawTransformFeedback(mode: PrimitiveType; id: TransformFeedbackName);
    begin
      z_DrawTransformFeedback_ovr_0(mode, id);
    end;
    
    // added in gl4.2
    public z_DrawTransformFeedbackInstanced_adr := GetFuncAdr('glDrawTransformFeedbackInstanced');
    public z_DrawTransformFeedbackInstanced_ovr_0 := GetFuncOrNil&<procedure(mode: PrimitiveType; id: TransformFeedbackName; instancecount: Int32)>(z_DrawTransformFeedbackInstanced_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure DrawTransformFeedbackInstanced(mode: PrimitiveType; id: TransformFeedbackName; instancecount: Int32);
    begin
      z_DrawTransformFeedbackInstanced_ovr_0(mode, id, instancecount);
    end;
    
    // added in gl4.0
    public z_DrawTransformFeedbackStream_adr := GetFuncAdr('glDrawTransformFeedbackStream');
    public z_DrawTransformFeedbackStream_ovr_0 := GetFuncOrNil&<procedure(mode: PrimitiveType; id: TransformFeedbackName; stream: UInt32)>(z_DrawTransformFeedbackStream_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure DrawTransformFeedbackStream(mode: PrimitiveType; id: TransformFeedbackName; stream: UInt32);
    begin
      z_DrawTransformFeedbackStream_ovr_0(mode, id, stream);
    end;
    
    // added in gl4.2
    public z_DrawTransformFeedbackStreamInstanced_adr := GetFuncAdr('glDrawTransformFeedbackStreamInstanced');
    public z_DrawTransformFeedbackStreamInstanced_ovr_0 := GetFuncOrNil&<procedure(mode: PrimitiveType; id: TransformFeedbackName; stream: UInt32; instancecount: Int32)>(z_DrawTransformFeedbackStreamInstanced_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure DrawTransformFeedbackStreamInstanced(mode: PrimitiveType; id: TransformFeedbackName; stream: UInt32; instancecount: Int32);
    begin
      z_DrawTransformFeedbackStreamInstanced_ovr_0(mode, id, stream, instancecount);
    end;
    
    // added in gl1.0
    private static procedure _z_Enable_ovr0(cap: EnableCap);
    external 'opengl32.dll' name 'glEnable';
    public static z_Enable_ovr0 := _z_Enable_ovr0;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Enable(cap: EnableCap) := z_Enable_ovr0(cap);
    
    // added in gl3.0
    public z_Enablei_adr := GetFuncAdr('glEnablei');
    public z_Enablei_ovr_0 := GetFuncOrNil&<procedure(target: EnableCap; index: UInt32)>(z_Enablei_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Enablei(target: EnableCap; index: UInt32);
    begin
      z_Enablei_ovr_0(target, index);
    end;
    
    // added in gl4.5
    public z_EnableVertexArrayAttrib_adr := GetFuncAdr('glEnableVertexArrayAttrib');
    public z_EnableVertexArrayAttrib_ovr_0 := GetFuncOrNil&<procedure(vaobj: VertexArrayName; index: UInt32)>(z_EnableVertexArrayAttrib_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure EnableVertexArrayAttrib(vaobj: VertexArrayName; index: UInt32);
    begin
      z_EnableVertexArrayAttrib_ovr_0(vaobj, index);
    end;
    
    // added in gl2.0
    public z_EnableVertexAttribArray_adr := GetFuncAdr('glEnableVertexAttribArray');
    public z_EnableVertexAttribArray_ovr_0 := GetFuncOrNil&<procedure(index: UInt32)>(z_EnableVertexAttribArray_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure EnableVertexAttribArray(index: UInt32);
    begin
      z_EnableVertexAttribArray_ovr_0(index);
    end;
    
    // added in gl3.0
    public z_EndConditionalRender_adr := GetFuncAdr('glEndConditionalRender');
    public z_EndConditionalRender_ovr_0 := GetFuncOrNil&<procedure>(z_EndConditionalRender_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure EndConditionalRender;
    begin
      z_EndConditionalRender_ovr_0;
    end;
    
    // added in gl1.5
    public z_EndQuery_adr := GetFuncAdr('glEndQuery');
    public z_EndQuery_ovr_0 := GetFuncOrNil&<procedure(target: QueryTarget)>(z_EndQuery_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure EndQuery(target: QueryTarget);
    begin
      z_EndQuery_ovr_0(target);
    end;
    
    // added in gl4.0
    public z_EndQueryIndexed_adr := GetFuncAdr('glEndQueryIndexed');
    public z_EndQueryIndexed_ovr_0 := GetFuncOrNil&<procedure(target: QueryTarget; index: UInt32)>(z_EndQueryIndexed_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure EndQueryIndexed(target: QueryTarget; index: UInt32);
    begin
      z_EndQueryIndexed_ovr_0(target, index);
    end;
    
    // added in gl3.0
    public z_EndTransformFeedback_adr := GetFuncAdr('glEndTransformFeedback');
    public z_EndTransformFeedback_ovr_0 := GetFuncOrNil&<procedure>(z_EndTransformFeedback_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure EndTransformFeedback;
    begin
      z_EndTransformFeedback_ovr_0;
    end;
    
    // added in gl3.2
    public z_FenceSync_adr := GetFuncAdr('glFenceSync');
    public z_FenceSync_ovr_0 := GetFuncOrNil&<function(condition: SyncCondition; flags: DummyFlags): GLsync>(z_FenceSync_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function FenceSync(condition: SyncCondition; flags: DummyFlags): GLsync;
    begin
      Result := z_FenceSync_ovr_0(condition, flags);
    end;
    
    // added in gl1.0
    private static procedure _z_Finish_ovr0;
    external 'opengl32.dll' name 'glFinish';
    public static z_Finish_ovr0 := _z_Finish_ovr0;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Finish := z_Finish_ovr0;
    
    // added in gl1.0
    private static procedure _z_Flush_ovr0;
    external 'opengl32.dll' name 'glFlush';
    public static z_Flush_ovr0 := _z_Flush_ovr0;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Flush := z_Flush_ovr0;
    
    // added in gl3.0
    public z_FlushMappedBufferRange_adr := GetFuncAdr('glFlushMappedBufferRange');
    public z_FlushMappedBufferRange_ovr_0 := GetFuncOrNil&<procedure(target: BufferTargetARB; offset: IntPtr; length: IntPtr)>(z_FlushMappedBufferRange_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure FlushMappedBufferRange(target: BufferTargetARB; offset: IntPtr; length: IntPtr);
    begin
      z_FlushMappedBufferRange_ovr_0(target, offset, length);
    end;
    
    // added in gl4.5
    public z_FlushMappedNamedBufferRange_adr := GetFuncAdr('glFlushMappedNamedBufferRange');
    public z_FlushMappedNamedBufferRange_ovr_0 := GetFuncOrNil&<procedure(buffer: BufferName; offset: IntPtr; length: IntPtr)>(z_FlushMappedNamedBufferRange_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure FlushMappedNamedBufferRange(buffer: BufferName; offset: IntPtr; length: IntPtr);
    begin
      z_FlushMappedNamedBufferRange_ovr_0(buffer, offset, length);
    end;
    
    // added in gl4.3
    public z_FramebufferParameteri_adr := GetFuncAdr('glFramebufferParameteri');
    public z_FramebufferParameteri_ovr_0 := GetFuncOrNil&<procedure(target: FramebufferTarget; pname: FramebufferParameterName; param: Int32)>(z_FramebufferParameteri_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure FramebufferParameteri(target: FramebufferTarget; pname: FramebufferParameterName; param: Int32);
    begin
      z_FramebufferParameteri_ovr_0(target, pname, param);
    end;
    
    // added in gl3.0
    public z_FramebufferRenderbuffer_adr := GetFuncAdr('glFramebufferRenderbuffer');
    public z_FramebufferRenderbuffer_ovr_0 := GetFuncOrNil&<procedure(target: FramebufferTarget; attachment: FramebufferAttachment; _renderbuffertarget: RenderbufferTarget; renderbuffer: RenderbufferName)>(z_FramebufferRenderbuffer_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure FramebufferRenderbuffer(target: FramebufferTarget; attachment: FramebufferAttachment; _renderbuffertarget: RenderbufferTarget; renderbuffer: RenderbufferName);
    begin
      z_FramebufferRenderbuffer_ovr_0(target, attachment, _renderbuffertarget, renderbuffer);
    end;
    
    // added in gl3.2
    public z_FramebufferTexture_adr := GetFuncAdr('glFramebufferTexture');
    public z_FramebufferTexture_ovr_0 := GetFuncOrNil&<procedure(target: FramebufferTarget; attachment: FramebufferAttachment; texture: TextureName; level: Int32)>(z_FramebufferTexture_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure FramebufferTexture(target: FramebufferTarget; attachment: FramebufferAttachment; texture: TextureName; level: Int32);
    begin
      z_FramebufferTexture_ovr_0(target, attachment, texture, level);
    end;
    
    // added in gl3.0
    public z_FramebufferTexture1D_adr := GetFuncAdr('glFramebufferTexture1D');
    public z_FramebufferTexture1D_ovr_0 := GetFuncOrNil&<procedure(target: FramebufferTarget; attachment: FramebufferAttachment; textarget: TextureTarget; texture: UInt32; level: Int32)>(z_FramebufferTexture1D_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure FramebufferTexture1D(target: FramebufferTarget; attachment: FramebufferAttachment; textarget: TextureTarget; texture: UInt32; level: Int32);
    begin
      z_FramebufferTexture1D_ovr_0(target, attachment, textarget, texture, level);
    end;
    
    // added in gl3.0
    public z_FramebufferTexture2D_adr := GetFuncAdr('glFramebufferTexture2D');
    public z_FramebufferTexture2D_ovr_0 := GetFuncOrNil&<procedure(target: FramebufferTarget; attachment: FramebufferAttachment; textarget: TextureTarget; texture: UInt32; level: Int32)>(z_FramebufferTexture2D_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure FramebufferTexture2D(target: FramebufferTarget; attachment: FramebufferAttachment; textarget: TextureTarget; texture: UInt32; level: Int32);
    begin
      z_FramebufferTexture2D_ovr_0(target, attachment, textarget, texture, level);
    end;
    
    // added in gl3.0
    public z_FramebufferTexture3D_adr := GetFuncAdr('glFramebufferTexture3D');
    public z_FramebufferTexture3D_ovr_0 := GetFuncOrNil&<procedure(target: FramebufferTarget; attachment: FramebufferAttachment; textarget: TextureTarget; texture: UInt32; level: Int32; zoffset: Int32)>(z_FramebufferTexture3D_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure FramebufferTexture3D(target: FramebufferTarget; attachment: FramebufferAttachment; textarget: TextureTarget; texture: UInt32; level: Int32; zoffset: Int32);
    begin
      z_FramebufferTexture3D_ovr_0(target, attachment, textarget, texture, level, zoffset);
    end;
    
    // added in gl3.0
    public z_FramebufferTextureLayer_adr := GetFuncAdr('glFramebufferTextureLayer');
    public z_FramebufferTextureLayer_ovr_0 := GetFuncOrNil&<procedure(target: FramebufferTarget; attachment: FramebufferAttachment; texture: TextureName; level: Int32; layer: Int32)>(z_FramebufferTextureLayer_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure FramebufferTextureLayer(target: FramebufferTarget; attachment: FramebufferAttachment; texture: TextureName; level: Int32; layer: Int32);
    begin
      z_FramebufferTextureLayer_ovr_0(target, attachment, texture, level, layer);
    end;
    
    // added in gl1.0
    private static procedure _z_FrontFace_ovr0(mode: FrontFaceDirection);
    external 'opengl32.dll' name 'glFrontFace';
    public static z_FrontFace_ovr0 := _z_FrontFace_ovr0;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure FrontFace(mode: FrontFaceDirection) := z_FrontFace_ovr0(mode);
    
    // added in gl1.5
    public z_GenBuffers_adr := GetFuncAdr('glGenBuffers');
    public z_GenBuffers_ovr_0 := GetFuncOrNil&<procedure(n: Int32; var buffers: BufferName)>(z_GenBuffers_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GenBuffers(n: Int32; buffers: array of BufferName);
    begin
      z_GenBuffers_ovr_0(n, buffers[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GenBuffers(n: Int32; var buffers: BufferName);
    begin
      z_GenBuffers_ovr_0(n, buffers);
    end;
    public z_GenBuffers_ovr_2 := GetFuncOrNil&<procedure(n: Int32; buffers: IntPtr)>(z_GenBuffers_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GenBuffers(n: Int32; buffers: IntPtr);
    begin
      z_GenBuffers_ovr_2(n, buffers);
    end;
    
    // added in gl3.0
    public z_GenerateMipmap_adr := GetFuncAdr('glGenerateMipmap');
    public z_GenerateMipmap_ovr_0 := GetFuncOrNil&<procedure(target: TextureTarget)>(z_GenerateMipmap_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GenerateMipmap(target: TextureTarget);
    begin
      z_GenerateMipmap_ovr_0(target);
    end;
    
    // added in gl4.5
    public z_GenerateTextureMipmap_adr := GetFuncAdr('glGenerateTextureMipmap');
    public z_GenerateTextureMipmap_ovr_0 := GetFuncOrNil&<procedure(texture: TextureName)>(z_GenerateTextureMipmap_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GenerateTextureMipmap(texture: TextureName);
    begin
      z_GenerateTextureMipmap_ovr_0(texture);
    end;
    
    // added in gl3.0
    public z_GenFramebuffers_adr := GetFuncAdr('glGenFramebuffers');
    public z_GenFramebuffers_ovr_0 := GetFuncOrNil&<procedure(n: Int32; var framebuffers: UInt32)>(z_GenFramebuffers_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GenFramebuffers(n: Int32; framebuffers: array of UInt32);
    begin
      z_GenFramebuffers_ovr_0(n, framebuffers[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GenFramebuffers(n: Int32; var framebuffers: UInt32);
    begin
      z_GenFramebuffers_ovr_0(n, framebuffers);
    end;
    public z_GenFramebuffers_ovr_2 := GetFuncOrNil&<procedure(n: Int32; framebuffers: IntPtr)>(z_GenFramebuffers_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GenFramebuffers(n: Int32; framebuffers: IntPtr);
    begin
      z_GenFramebuffers_ovr_2(n, framebuffers);
    end;
    
    // added in gl4.1
    public z_GenProgramPipelines_adr := GetFuncAdr('glGenProgramPipelines');
    public z_GenProgramPipelines_ovr_0 := GetFuncOrNil&<procedure(n: Int32; var pipelines: UInt32)>(z_GenProgramPipelines_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GenProgramPipelines(n: Int32; pipelines: array of UInt32);
    begin
      z_GenProgramPipelines_ovr_0(n, pipelines[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GenProgramPipelines(n: Int32; var pipelines: UInt32);
    begin
      z_GenProgramPipelines_ovr_0(n, pipelines);
    end;
    public z_GenProgramPipelines_ovr_2 := GetFuncOrNil&<procedure(n: Int32; pipelines: IntPtr)>(z_GenProgramPipelines_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GenProgramPipelines(n: Int32; pipelines: IntPtr);
    begin
      z_GenProgramPipelines_ovr_2(n, pipelines);
    end;
    
    // added in gl1.5
    public z_GenQueries_adr := GetFuncAdr('glGenQueries');
    public z_GenQueries_ovr_0 := GetFuncOrNil&<procedure(n: Int32; var ids: UInt32)>(z_GenQueries_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GenQueries(n: Int32; ids: array of UInt32);
    begin
      z_GenQueries_ovr_0(n, ids[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GenQueries(n: Int32; var ids: UInt32);
    begin
      z_GenQueries_ovr_0(n, ids);
    end;
    public z_GenQueries_ovr_2 := GetFuncOrNil&<procedure(n: Int32; ids: IntPtr)>(z_GenQueries_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GenQueries(n: Int32; ids: IntPtr);
    begin
      z_GenQueries_ovr_2(n, ids);
    end;
    
    // added in gl3.0
    public z_GenRenderbuffers_adr := GetFuncAdr('glGenRenderbuffers');
    public z_GenRenderbuffers_ovr_0 := GetFuncOrNil&<procedure(n: Int32; var renderbuffers: UInt32)>(z_GenRenderbuffers_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GenRenderbuffers(n: Int32; renderbuffers: array of UInt32);
    begin
      z_GenRenderbuffers_ovr_0(n, renderbuffers[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GenRenderbuffers(n: Int32; var renderbuffers: UInt32);
    begin
      z_GenRenderbuffers_ovr_0(n, renderbuffers);
    end;
    public z_GenRenderbuffers_ovr_2 := GetFuncOrNil&<procedure(n: Int32; renderbuffers: IntPtr)>(z_GenRenderbuffers_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GenRenderbuffers(n: Int32; renderbuffers: IntPtr);
    begin
      z_GenRenderbuffers_ovr_2(n, renderbuffers);
    end;
    
    // added in gl3.3
    public z_GenSamplers_adr := GetFuncAdr('glGenSamplers');
    public z_GenSamplers_ovr_0 := GetFuncOrNil&<procedure(count: Int32; var samplers: UInt32)>(z_GenSamplers_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GenSamplers(count: Int32; samplers: array of UInt32);
    begin
      z_GenSamplers_ovr_0(count, samplers[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GenSamplers(count: Int32; var samplers: UInt32);
    begin
      z_GenSamplers_ovr_0(count, samplers);
    end;
    public z_GenSamplers_ovr_2 := GetFuncOrNil&<procedure(count: Int32; samplers: IntPtr)>(z_GenSamplers_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GenSamplers(count: Int32; samplers: IntPtr);
    begin
      z_GenSamplers_ovr_2(count, samplers);
    end;
    
    // added in gl1.1
    private static procedure _z_GenTextures_ovr0(n: Int32; [MarshalAs(UnmanagedType.LPArray)] textures: array of UInt32);
    external 'opengl32.dll' name 'glGenTextures';
    public static z_GenTextures_ovr0 := _z_GenTextures_ovr0;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GenTextures(n: Int32; textures: array of UInt32) := z_GenTextures_ovr0(n, textures);
    private static procedure _z_GenTextures_ovr1(n: Int32; var textures: UInt32);
    external 'opengl32.dll' name 'glGenTextures';
    public static z_GenTextures_ovr1 := _z_GenTextures_ovr1;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GenTextures(n: Int32; var textures: UInt32) := z_GenTextures_ovr1(n, textures);
    private static procedure _z_GenTextures_ovr2(n: Int32; textures: IntPtr);
    external 'opengl32.dll' name 'glGenTextures';
    public static z_GenTextures_ovr2 := _z_GenTextures_ovr2;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GenTextures(n: Int32; textures: IntPtr) := z_GenTextures_ovr2(n, textures);
    
    // added in gl4.0
    public z_GenTransformFeedbacks_adr := GetFuncAdr('glGenTransformFeedbacks');
    public z_GenTransformFeedbacks_ovr_0 := GetFuncOrNil&<procedure(n: Int32; var ids: UInt32)>(z_GenTransformFeedbacks_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GenTransformFeedbacks(n: Int32; ids: array of UInt32);
    begin
      z_GenTransformFeedbacks_ovr_0(n, ids[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GenTransformFeedbacks(n: Int32; var ids: UInt32);
    begin
      z_GenTransformFeedbacks_ovr_0(n, ids);
    end;
    public z_GenTransformFeedbacks_ovr_2 := GetFuncOrNil&<procedure(n: Int32; ids: IntPtr)>(z_GenTransformFeedbacks_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GenTransformFeedbacks(n: Int32; ids: IntPtr);
    begin
      z_GenTransformFeedbacks_ovr_2(n, ids);
    end;
    
    // added in gl3.0
    public z_GenVertexArrays_adr := GetFuncAdr('glGenVertexArrays');
    public z_GenVertexArrays_ovr_0 := GetFuncOrNil&<procedure(n: Int32; var arrays: UInt32)>(z_GenVertexArrays_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GenVertexArrays(n: Int32; arrays: array of UInt32);
    begin
      z_GenVertexArrays_ovr_0(n, arrays[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GenVertexArrays(n: Int32; var arrays: UInt32);
    begin
      z_GenVertexArrays_ovr_0(n, arrays);
    end;
    public z_GenVertexArrays_ovr_2 := GetFuncOrNil&<procedure(n: Int32; arrays: IntPtr)>(z_GenVertexArrays_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GenVertexArrays(n: Int32; arrays: IntPtr);
    begin
      z_GenVertexArrays_ovr_2(n, arrays);
    end;
    
    // added in gl4.2
    public z_GetActiveAtomicCounterBufferiv_adr := GetFuncAdr('glGetActiveAtomicCounterBufferiv');
    public z_GetActiveAtomicCounterBufferiv_ovr_0 := GetFuncOrNil&<procedure(&program: UInt32; bufferIndex: UInt32; pname: AtomicCounterBufferPName; var &params: Int32)>(z_GetActiveAtomicCounterBufferiv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetActiveAtomicCounterBufferiv(&program: UInt32; bufferIndex: UInt32; pname: AtomicCounterBufferPName; &params: array of Int32);
    begin
      z_GetActiveAtomicCounterBufferiv_ovr_0(&program, bufferIndex, pname, &params[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetActiveAtomicCounterBufferiv(&program: UInt32; bufferIndex: UInt32; pname: AtomicCounterBufferPName; var &params: Int32);
    begin
      z_GetActiveAtomicCounterBufferiv_ovr_0(&program, bufferIndex, pname, &params);
    end;
    public z_GetActiveAtomicCounterBufferiv_ovr_2 := GetFuncOrNil&<procedure(&program: UInt32; bufferIndex: UInt32; pname: AtomicCounterBufferPName; &params: IntPtr)>(z_GetActiveAtomicCounterBufferiv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetActiveAtomicCounterBufferiv(&program: UInt32; bufferIndex: UInt32; pname: AtomicCounterBufferPName; &params: IntPtr);
    begin
      z_GetActiveAtomicCounterBufferiv_ovr_2(&program, bufferIndex, pname, &params);
    end;
    
    // added in gl2.0
    public z_GetActiveAttrib_adr := GetFuncAdr('glGetActiveAttrib');
    public z_GetActiveAttrib_ovr_0 := GetFuncOrNil&<procedure(&program: UInt32; index: UInt32; bufSize: Int32; var length: Int32; var size: Int32; var &type: AttributeType; name: IntPtr)>(z_GetActiveAttrib_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetActiveAttrib(&program: UInt32; index: UInt32; bufSize: Int32; length: array of Int32; size: array of Int32; &type: array of AttributeType; name: IntPtr);
    begin
      z_GetActiveAttrib_ovr_0(&program, index, bufSize, length[0], size[0], &type[0], name);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetActiveAttrib(&program: UInt32; index: UInt32; bufSize: Int32; length: array of Int32; size: array of Int32; var &type: AttributeType; name: IntPtr);
    begin
      z_GetActiveAttrib_ovr_0(&program, index, bufSize, length[0], size[0], &type, name);
    end;
    public z_GetActiveAttrib_ovr_2 := GetFuncOrNil&<procedure(&program: UInt32; index: UInt32; bufSize: Int32; var length: Int32; var size: Int32; &type: IntPtr; name: IntPtr)>(z_GetActiveAttrib_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetActiveAttrib(&program: UInt32; index: UInt32; bufSize: Int32; length: array of Int32; size: array of Int32; &type: IntPtr; name: IntPtr);
    begin
      z_GetActiveAttrib_ovr_2(&program, index, bufSize, length[0], size[0], &type, name);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetActiveAttrib(&program: UInt32; index: UInt32; bufSize: Int32; length: array of Int32; var size: Int32; &type: array of AttributeType; name: IntPtr);
    begin
      z_GetActiveAttrib_ovr_0(&program, index, bufSize, length[0], size, &type[0], name);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetActiveAttrib(&program: UInt32; index: UInt32; bufSize: Int32; length: array of Int32; var size: Int32; var &type: AttributeType; name: IntPtr);
    begin
      z_GetActiveAttrib_ovr_0(&program, index, bufSize, length[0], size, &type, name);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetActiveAttrib(&program: UInt32; index: UInt32; bufSize: Int32; length: array of Int32; var size: Int32; &type: IntPtr; name: IntPtr);
    begin
      z_GetActiveAttrib_ovr_2(&program, index, bufSize, length[0], size, &type, name);
    end;
    public z_GetActiveAttrib_ovr_6 := GetFuncOrNil&<procedure(&program: UInt32; index: UInt32; bufSize: Int32; var length: Int32; size: IntPtr; var &type: AttributeType; name: IntPtr)>(z_GetActiveAttrib_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetActiveAttrib(&program: UInt32; index: UInt32; bufSize: Int32; length: array of Int32; size: IntPtr; &type: array of AttributeType; name: IntPtr);
    begin
      z_GetActiveAttrib_ovr_6(&program, index, bufSize, length[0], size, &type[0], name);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetActiveAttrib(&program: UInt32; index: UInt32; bufSize: Int32; length: array of Int32; size: IntPtr; var &type: AttributeType; name: IntPtr);
    begin
      z_GetActiveAttrib_ovr_6(&program, index, bufSize, length[0], size, &type, name);
    end;
    public z_GetActiveAttrib_ovr_8 := GetFuncOrNil&<procedure(&program: UInt32; index: UInt32; bufSize: Int32; var length: Int32; size: IntPtr; &type: IntPtr; name: IntPtr)>(z_GetActiveAttrib_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetActiveAttrib(&program: UInt32; index: UInt32; bufSize: Int32; length: array of Int32; size: IntPtr; &type: IntPtr; name: IntPtr);
    begin
      z_GetActiveAttrib_ovr_8(&program, index, bufSize, length[0], size, &type, name);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetActiveAttrib(&program: UInt32; index: UInt32; bufSize: Int32; var length: Int32; size: array of Int32; &type: array of AttributeType; name: IntPtr);
    begin
      z_GetActiveAttrib_ovr_0(&program, index, bufSize, length, size[0], &type[0], name);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetActiveAttrib(&program: UInt32; index: UInt32; bufSize: Int32; var length: Int32; size: array of Int32; var &type: AttributeType; name: IntPtr);
    begin
      z_GetActiveAttrib_ovr_0(&program, index, bufSize, length, size[0], &type, name);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetActiveAttrib(&program: UInt32; index: UInt32; bufSize: Int32; var length: Int32; size: array of Int32; &type: IntPtr; name: IntPtr);
    begin
      z_GetActiveAttrib_ovr_2(&program, index, bufSize, length, size[0], &type, name);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetActiveAttrib(&program: UInt32; index: UInt32; bufSize: Int32; var length: Int32; var size: Int32; &type: array of AttributeType; name: IntPtr);
    begin
      z_GetActiveAttrib_ovr_0(&program, index, bufSize, length, size, &type[0], name);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetActiveAttrib(&program: UInt32; index: UInt32; bufSize: Int32; var length: Int32; var size: Int32; var &type: AttributeType; name: IntPtr);
    begin
      z_GetActiveAttrib_ovr_0(&program, index, bufSize, length, size, &type, name);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetActiveAttrib(&program: UInt32; index: UInt32; bufSize: Int32; var length: Int32; var size: Int32; &type: IntPtr; name: IntPtr);
    begin
      z_GetActiveAttrib_ovr_2(&program, index, bufSize, length, size, &type, name);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetActiveAttrib(&program: UInt32; index: UInt32; bufSize: Int32; var length: Int32; size: IntPtr; &type: array of AttributeType; name: IntPtr);
    begin
      z_GetActiveAttrib_ovr_6(&program, index, bufSize, length, size, &type[0], name);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetActiveAttrib(&program: UInt32; index: UInt32; bufSize: Int32; var length: Int32; size: IntPtr; var &type: AttributeType; name: IntPtr);
    begin
      z_GetActiveAttrib_ovr_6(&program, index, bufSize, length, size, &type, name);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetActiveAttrib(&program: UInt32; index: UInt32; bufSize: Int32; var length: Int32; size: IntPtr; &type: IntPtr; name: IntPtr);
    begin
      z_GetActiveAttrib_ovr_8(&program, index, bufSize, length, size, &type, name);
    end;
    public z_GetActiveAttrib_ovr_18 := GetFuncOrNil&<procedure(&program: UInt32; index: UInt32; bufSize: Int32; length: IntPtr; var size: Int32; var &type: AttributeType; name: IntPtr)>(z_GetActiveAttrib_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetActiveAttrib(&program: UInt32; index: UInt32; bufSize: Int32; length: IntPtr; size: array of Int32; &type: array of AttributeType; name: IntPtr);
    begin
      z_GetActiveAttrib_ovr_18(&program, index, bufSize, length, size[0], &type[0], name);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetActiveAttrib(&program: UInt32; index: UInt32; bufSize: Int32; length: IntPtr; size: array of Int32; var &type: AttributeType; name: IntPtr);
    begin
      z_GetActiveAttrib_ovr_18(&program, index, bufSize, length, size[0], &type, name);
    end;
    public z_GetActiveAttrib_ovr_20 := GetFuncOrNil&<procedure(&program: UInt32; index: UInt32; bufSize: Int32; length: IntPtr; var size: Int32; &type: IntPtr; name: IntPtr)>(z_GetActiveAttrib_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetActiveAttrib(&program: UInt32; index: UInt32; bufSize: Int32; length: IntPtr; size: array of Int32; &type: IntPtr; name: IntPtr);
    begin
      z_GetActiveAttrib_ovr_20(&program, index, bufSize, length, size[0], &type, name);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetActiveAttrib(&program: UInt32; index: UInt32; bufSize: Int32; length: IntPtr; var size: Int32; &type: array of AttributeType; name: IntPtr);
    begin
      z_GetActiveAttrib_ovr_18(&program, index, bufSize, length, size, &type[0], name);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetActiveAttrib(&program: UInt32; index: UInt32; bufSize: Int32; length: IntPtr; var size: Int32; var &type: AttributeType; name: IntPtr);
    begin
      z_GetActiveAttrib_ovr_18(&program, index, bufSize, length, size, &type, name);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetActiveAttrib(&program: UInt32; index: UInt32; bufSize: Int32; length: IntPtr; var size: Int32; &type: IntPtr; name: IntPtr);
    begin
      z_GetActiveAttrib_ovr_20(&program, index, bufSize, length, size, &type, name);
    end;
    public z_GetActiveAttrib_ovr_24 := GetFuncOrNil&<procedure(&program: UInt32; index: UInt32; bufSize: Int32; length: IntPtr; size: IntPtr; var &type: AttributeType; name: IntPtr)>(z_GetActiveAttrib_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetActiveAttrib(&program: UInt32; index: UInt32; bufSize: Int32; length: IntPtr; size: IntPtr; &type: array of AttributeType; name: IntPtr);
    begin
      z_GetActiveAttrib_ovr_24(&program, index, bufSize, length, size, &type[0], name);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetActiveAttrib(&program: UInt32; index: UInt32; bufSize: Int32; length: IntPtr; size: IntPtr; var &type: AttributeType; name: IntPtr);
    begin
      z_GetActiveAttrib_ovr_24(&program, index, bufSize, length, size, &type, name);
    end;
    public z_GetActiveAttrib_ovr_26 := GetFuncOrNil&<procedure(&program: UInt32; index: UInt32; bufSize: Int32; length: IntPtr; size: IntPtr; &type: IntPtr; name: IntPtr)>(z_GetActiveAttrib_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetActiveAttrib(&program: UInt32; index: UInt32; bufSize: Int32; length: IntPtr; size: IntPtr; &type: IntPtr; name: IntPtr);
    begin
      z_GetActiveAttrib_ovr_26(&program, index, bufSize, length, size, &type, name);
    end;
    
    // added in gl4.0
    public z_GetActiveSubroutineName_adr := GetFuncAdr('glGetActiveSubroutineName');
    public z_GetActiveSubroutineName_ovr_0 := GetFuncOrNil&<procedure(&program: UInt32; _shadertype: ShaderType; index: UInt32; bufSize: Int32; var length: Int32; name: IntPtr)>(z_GetActiveSubroutineName_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetActiveSubroutineName(&program: UInt32; _shadertype: ShaderType; index: UInt32; bufSize: Int32; length: array of Int32; name: IntPtr);
    begin
      z_GetActiveSubroutineName_ovr_0(&program, _shadertype, index, bufSize, length[0], name);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetActiveSubroutineName(&program: UInt32; _shadertype: ShaderType; index: UInt32; bufSize: Int32; var length: Int32; name: IntPtr);
    begin
      z_GetActiveSubroutineName_ovr_0(&program, _shadertype, index, bufSize, length, name);
    end;
    public z_GetActiveSubroutineName_ovr_2 := GetFuncOrNil&<procedure(&program: UInt32; _shadertype: ShaderType; index: UInt32; bufSize: Int32; length: IntPtr; name: IntPtr)>(z_GetActiveSubroutineName_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetActiveSubroutineName(&program: UInt32; _shadertype: ShaderType; index: UInt32; bufSize: Int32; length: IntPtr; name: IntPtr);
    begin
      z_GetActiveSubroutineName_ovr_2(&program, _shadertype, index, bufSize, length, name);
    end;
    
    // added in gl4.0
    public z_GetActiveSubroutineUniformiv_adr := GetFuncAdr('glGetActiveSubroutineUniformiv');
    public z_GetActiveSubroutineUniformiv_ovr_0 := GetFuncOrNil&<procedure(&program: ProgramName; _shadertype: ShaderType; index: UInt32; pname: SubroutineParameterName; var values: Int32)>(z_GetActiveSubroutineUniformiv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetActiveSubroutineUniformiv(&program: ProgramName; _shadertype: ShaderType; index: UInt32; pname: SubroutineParameterName; values: array of Int32);
    begin
      z_GetActiveSubroutineUniformiv_ovr_0(&program, _shadertype, index, pname, values[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetActiveSubroutineUniformiv(&program: ProgramName; _shadertype: ShaderType; index: UInt32; pname: SubroutineParameterName; var values: Int32);
    begin
      z_GetActiveSubroutineUniformiv_ovr_0(&program, _shadertype, index, pname, values);
    end;
    public z_GetActiveSubroutineUniformiv_ovr_2 := GetFuncOrNil&<procedure(&program: ProgramName; _shadertype: ShaderType; index: UInt32; pname: SubroutineParameterName; values: IntPtr)>(z_GetActiveSubroutineUniformiv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetActiveSubroutineUniformiv(&program: ProgramName; _shadertype: ShaderType; index: UInt32; pname: SubroutineParameterName; values: IntPtr);
    begin
      z_GetActiveSubroutineUniformiv_ovr_2(&program, _shadertype, index, pname, values);
    end;
    
    // added in gl4.0
    public z_GetActiveSubroutineUniformName_adr := GetFuncAdr('glGetActiveSubroutineUniformName');
    public z_GetActiveSubroutineUniformName_ovr_0 := GetFuncOrNil&<procedure(&program: UInt32; _shadertype: ShaderType; index: UInt32; bufSize: Int32; var length: Int32; name: IntPtr)>(z_GetActiveSubroutineUniformName_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetActiveSubroutineUniformName(&program: UInt32; _shadertype: ShaderType; index: UInt32; bufSize: Int32; length: array of Int32; name: IntPtr);
    begin
      z_GetActiveSubroutineUniformName_ovr_0(&program, _shadertype, index, bufSize, length[0], name);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetActiveSubroutineUniformName(&program: UInt32; _shadertype: ShaderType; index: UInt32; bufSize: Int32; var length: Int32; name: IntPtr);
    begin
      z_GetActiveSubroutineUniformName_ovr_0(&program, _shadertype, index, bufSize, length, name);
    end;
    public z_GetActiveSubroutineUniformName_ovr_2 := GetFuncOrNil&<procedure(&program: UInt32; _shadertype: ShaderType; index: UInt32; bufSize: Int32; length: IntPtr; name: IntPtr)>(z_GetActiveSubroutineUniformName_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetActiveSubroutineUniformName(&program: UInt32; _shadertype: ShaderType; index: UInt32; bufSize: Int32; length: IntPtr; name: IntPtr);
    begin
      z_GetActiveSubroutineUniformName_ovr_2(&program, _shadertype, index, bufSize, length, name);
    end;
    
    // added in gl2.0
    public z_GetActiveUniform_adr := GetFuncAdr('glGetActiveUniform');
    public z_GetActiveUniform_ovr_0 := GetFuncOrNil&<procedure(&program: UInt32; index: UInt32; bufSize: Int32; var length: Int32; var size: Int32; var &type: UniformType; name: IntPtr)>(z_GetActiveUniform_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetActiveUniform(&program: UInt32; index: UInt32; bufSize: Int32; length: array of Int32; size: array of Int32; &type: array of UniformType; name: IntPtr);
    begin
      z_GetActiveUniform_ovr_0(&program, index, bufSize, length[0], size[0], &type[0], name);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetActiveUniform(&program: UInt32; index: UInt32; bufSize: Int32; length: array of Int32; size: array of Int32; var &type: UniformType; name: IntPtr);
    begin
      z_GetActiveUniform_ovr_0(&program, index, bufSize, length[0], size[0], &type, name);
    end;
    public z_GetActiveUniform_ovr_2 := GetFuncOrNil&<procedure(&program: UInt32; index: UInt32; bufSize: Int32; var length: Int32; var size: Int32; &type: IntPtr; name: IntPtr)>(z_GetActiveUniform_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetActiveUniform(&program: UInt32; index: UInt32; bufSize: Int32; length: array of Int32; size: array of Int32; &type: IntPtr; name: IntPtr);
    begin
      z_GetActiveUniform_ovr_2(&program, index, bufSize, length[0], size[0], &type, name);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetActiveUniform(&program: UInt32; index: UInt32; bufSize: Int32; length: array of Int32; var size: Int32; &type: array of UniformType; name: IntPtr);
    begin
      z_GetActiveUniform_ovr_0(&program, index, bufSize, length[0], size, &type[0], name);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetActiveUniform(&program: UInt32; index: UInt32; bufSize: Int32; length: array of Int32; var size: Int32; var &type: UniformType; name: IntPtr);
    begin
      z_GetActiveUniform_ovr_0(&program, index, bufSize, length[0], size, &type, name);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetActiveUniform(&program: UInt32; index: UInt32; bufSize: Int32; length: array of Int32; var size: Int32; &type: IntPtr; name: IntPtr);
    begin
      z_GetActiveUniform_ovr_2(&program, index, bufSize, length[0], size, &type, name);
    end;
    public z_GetActiveUniform_ovr_6 := GetFuncOrNil&<procedure(&program: UInt32; index: UInt32; bufSize: Int32; var length: Int32; size: IntPtr; var &type: UniformType; name: IntPtr)>(z_GetActiveUniform_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetActiveUniform(&program: UInt32; index: UInt32; bufSize: Int32; length: array of Int32; size: IntPtr; &type: array of UniformType; name: IntPtr);
    begin
      z_GetActiveUniform_ovr_6(&program, index, bufSize, length[0], size, &type[0], name);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetActiveUniform(&program: UInt32; index: UInt32; bufSize: Int32; length: array of Int32; size: IntPtr; var &type: UniformType; name: IntPtr);
    begin
      z_GetActiveUniform_ovr_6(&program, index, bufSize, length[0], size, &type, name);
    end;
    public z_GetActiveUniform_ovr_8 := GetFuncOrNil&<procedure(&program: UInt32; index: UInt32; bufSize: Int32; var length: Int32; size: IntPtr; &type: IntPtr; name: IntPtr)>(z_GetActiveUniform_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetActiveUniform(&program: UInt32; index: UInt32; bufSize: Int32; length: array of Int32; size: IntPtr; &type: IntPtr; name: IntPtr);
    begin
      z_GetActiveUniform_ovr_8(&program, index, bufSize, length[0], size, &type, name);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetActiveUniform(&program: UInt32; index: UInt32; bufSize: Int32; var length: Int32; size: array of Int32; &type: array of UniformType; name: IntPtr);
    begin
      z_GetActiveUniform_ovr_0(&program, index, bufSize, length, size[0], &type[0], name);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetActiveUniform(&program: UInt32; index: UInt32; bufSize: Int32; var length: Int32; size: array of Int32; var &type: UniformType; name: IntPtr);
    begin
      z_GetActiveUniform_ovr_0(&program, index, bufSize, length, size[0], &type, name);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetActiveUniform(&program: UInt32; index: UInt32; bufSize: Int32; var length: Int32; size: array of Int32; &type: IntPtr; name: IntPtr);
    begin
      z_GetActiveUniform_ovr_2(&program, index, bufSize, length, size[0], &type, name);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetActiveUniform(&program: UInt32; index: UInt32; bufSize: Int32; var length: Int32; var size: Int32; &type: array of UniformType; name: IntPtr);
    begin
      z_GetActiveUniform_ovr_0(&program, index, bufSize, length, size, &type[0], name);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetActiveUniform(&program: UInt32; index: UInt32; bufSize: Int32; var length: Int32; var size: Int32; var &type: UniformType; name: IntPtr);
    begin
      z_GetActiveUniform_ovr_0(&program, index, bufSize, length, size, &type, name);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetActiveUniform(&program: UInt32; index: UInt32; bufSize: Int32; var length: Int32; var size: Int32; &type: IntPtr; name: IntPtr);
    begin
      z_GetActiveUniform_ovr_2(&program, index, bufSize, length, size, &type, name);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetActiveUniform(&program: UInt32; index: UInt32; bufSize: Int32; var length: Int32; size: IntPtr; &type: array of UniformType; name: IntPtr);
    begin
      z_GetActiveUniform_ovr_6(&program, index, bufSize, length, size, &type[0], name);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetActiveUniform(&program: UInt32; index: UInt32; bufSize: Int32; var length: Int32; size: IntPtr; var &type: UniformType; name: IntPtr);
    begin
      z_GetActiveUniform_ovr_6(&program, index, bufSize, length, size, &type, name);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetActiveUniform(&program: UInt32; index: UInt32; bufSize: Int32; var length: Int32; size: IntPtr; &type: IntPtr; name: IntPtr);
    begin
      z_GetActiveUniform_ovr_8(&program, index, bufSize, length, size, &type, name);
    end;
    public z_GetActiveUniform_ovr_18 := GetFuncOrNil&<procedure(&program: UInt32; index: UInt32; bufSize: Int32; length: IntPtr; var size: Int32; var &type: UniformType; name: IntPtr)>(z_GetActiveUniform_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetActiveUniform(&program: UInt32; index: UInt32; bufSize: Int32; length: IntPtr; size: array of Int32; &type: array of UniformType; name: IntPtr);
    begin
      z_GetActiveUniform_ovr_18(&program, index, bufSize, length, size[0], &type[0], name);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetActiveUniform(&program: UInt32; index: UInt32; bufSize: Int32; length: IntPtr; size: array of Int32; var &type: UniformType; name: IntPtr);
    begin
      z_GetActiveUniform_ovr_18(&program, index, bufSize, length, size[0], &type, name);
    end;
    public z_GetActiveUniform_ovr_20 := GetFuncOrNil&<procedure(&program: UInt32; index: UInt32; bufSize: Int32; length: IntPtr; var size: Int32; &type: IntPtr; name: IntPtr)>(z_GetActiveUniform_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetActiveUniform(&program: UInt32; index: UInt32; bufSize: Int32; length: IntPtr; size: array of Int32; &type: IntPtr; name: IntPtr);
    begin
      z_GetActiveUniform_ovr_20(&program, index, bufSize, length, size[0], &type, name);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetActiveUniform(&program: UInt32; index: UInt32; bufSize: Int32; length: IntPtr; var size: Int32; &type: array of UniformType; name: IntPtr);
    begin
      z_GetActiveUniform_ovr_18(&program, index, bufSize, length, size, &type[0], name);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetActiveUniform(&program: UInt32; index: UInt32; bufSize: Int32; length: IntPtr; var size: Int32; var &type: UniformType; name: IntPtr);
    begin
      z_GetActiveUniform_ovr_18(&program, index, bufSize, length, size, &type, name);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetActiveUniform(&program: UInt32; index: UInt32; bufSize: Int32; length: IntPtr; var size: Int32; &type: IntPtr; name: IntPtr);
    begin
      z_GetActiveUniform_ovr_20(&program, index, bufSize, length, size, &type, name);
    end;
    public z_GetActiveUniform_ovr_24 := GetFuncOrNil&<procedure(&program: UInt32; index: UInt32; bufSize: Int32; length: IntPtr; size: IntPtr; var &type: UniformType; name: IntPtr)>(z_GetActiveUniform_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetActiveUniform(&program: UInt32; index: UInt32; bufSize: Int32; length: IntPtr; size: IntPtr; &type: array of UniformType; name: IntPtr);
    begin
      z_GetActiveUniform_ovr_24(&program, index, bufSize, length, size, &type[0], name);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetActiveUniform(&program: UInt32; index: UInt32; bufSize: Int32; length: IntPtr; size: IntPtr; var &type: UniformType; name: IntPtr);
    begin
      z_GetActiveUniform_ovr_24(&program, index, bufSize, length, size, &type, name);
    end;
    public z_GetActiveUniform_ovr_26 := GetFuncOrNil&<procedure(&program: UInt32; index: UInt32; bufSize: Int32; length: IntPtr; size: IntPtr; &type: IntPtr; name: IntPtr)>(z_GetActiveUniform_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetActiveUniform(&program: UInt32; index: UInt32; bufSize: Int32; length: IntPtr; size: IntPtr; &type: IntPtr; name: IntPtr);
    begin
      z_GetActiveUniform_ovr_26(&program, index, bufSize, length, size, &type, name);
    end;
    
    // added in gl3.1
    public z_GetActiveUniformBlockiv_adr := GetFuncAdr('glGetActiveUniformBlockiv');
    public z_GetActiveUniformBlockiv_ovr_0 := GetFuncOrNil&<procedure(&program: UInt32; uniformBlockIndex: UInt32; pname: UniformBlockPName; var &params: Int32)>(z_GetActiveUniformBlockiv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetActiveUniformBlockiv(&program: UInt32; uniformBlockIndex: UInt32; pname: UniformBlockPName; &params: array of Int32);
    begin
      z_GetActiveUniformBlockiv_ovr_0(&program, uniformBlockIndex, pname, &params[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetActiveUniformBlockiv(&program: UInt32; uniformBlockIndex: UInt32; pname: UniformBlockPName; var &params: Int32);
    begin
      z_GetActiveUniformBlockiv_ovr_0(&program, uniformBlockIndex, pname, &params);
    end;
    public z_GetActiveUniformBlockiv_ovr_2 := GetFuncOrNil&<procedure(&program: UInt32; uniformBlockIndex: UInt32; pname: UniformBlockPName; &params: IntPtr)>(z_GetActiveUniformBlockiv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetActiveUniformBlockiv(&program: UInt32; uniformBlockIndex: UInt32; pname: UniformBlockPName; &params: IntPtr);
    begin
      z_GetActiveUniformBlockiv_ovr_2(&program, uniformBlockIndex, pname, &params);
    end;
    
    // added in gl3.1
    public z_GetActiveUniformBlockName_adr := GetFuncAdr('glGetActiveUniformBlockName');
    public z_GetActiveUniformBlockName_ovr_0 := GetFuncOrNil&<procedure(&program: UInt32; uniformBlockIndex: UInt32; bufSize: Int32; var length: Int32; uniformBlockName: IntPtr)>(z_GetActiveUniformBlockName_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetActiveUniformBlockName(&program: UInt32; uniformBlockIndex: UInt32; bufSize: Int32; length: array of Int32; uniformBlockName: IntPtr);
    begin
      z_GetActiveUniformBlockName_ovr_0(&program, uniformBlockIndex, bufSize, length[0], uniformBlockName);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetActiveUniformBlockName(&program: UInt32; uniformBlockIndex: UInt32; bufSize: Int32; var length: Int32; uniformBlockName: IntPtr);
    begin
      z_GetActiveUniformBlockName_ovr_0(&program, uniformBlockIndex, bufSize, length, uniformBlockName);
    end;
    public z_GetActiveUniformBlockName_ovr_2 := GetFuncOrNil&<procedure(&program: UInt32; uniformBlockIndex: UInt32; bufSize: Int32; length: IntPtr; uniformBlockName: IntPtr)>(z_GetActiveUniformBlockName_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetActiveUniformBlockName(&program: UInt32; uniformBlockIndex: UInt32; bufSize: Int32; length: IntPtr; uniformBlockName: IntPtr);
    begin
      z_GetActiveUniformBlockName_ovr_2(&program, uniformBlockIndex, bufSize, length, uniformBlockName);
    end;
    
    // added in gl3.1
    public z_GetActiveUniformName_adr := GetFuncAdr('glGetActiveUniformName');
    public z_GetActiveUniformName_ovr_0 := GetFuncOrNil&<procedure(&program: UInt32; uniformIndex: UInt32; bufSize: Int32; var length: Int32; uniformName: IntPtr)>(z_GetActiveUniformName_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetActiveUniformName(&program: UInt32; uniformIndex: UInt32; bufSize: Int32; length: array of Int32; uniformName: IntPtr);
    begin
      z_GetActiveUniformName_ovr_0(&program, uniformIndex, bufSize, length[0], uniformName);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetActiveUniformName(&program: UInt32; uniformIndex: UInt32; bufSize: Int32; var length: Int32; uniformName: IntPtr);
    begin
      z_GetActiveUniformName_ovr_0(&program, uniformIndex, bufSize, length, uniformName);
    end;
    public z_GetActiveUniformName_ovr_2 := GetFuncOrNil&<procedure(&program: UInt32; uniformIndex: UInt32; bufSize: Int32; length: IntPtr; uniformName: IntPtr)>(z_GetActiveUniformName_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetActiveUniformName(&program: UInt32; uniformIndex: UInt32; bufSize: Int32; length: IntPtr; uniformName: IntPtr);
    begin
      z_GetActiveUniformName_ovr_2(&program, uniformIndex, bufSize, length, uniformName);
    end;
    
    // added in gl3.1
    public z_GetActiveUniformsiv_adr := GetFuncAdr('glGetActiveUniformsiv');
    public z_GetActiveUniformsiv_ovr_0 := GetFuncOrNil&<procedure(&program: UInt32; uniformCount: Int32; var uniformIndices: UInt32; pname: UniformPName; var &params: Int32)>(z_GetActiveUniformsiv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetActiveUniformsiv(&program: UInt32; uniformCount: Int32; uniformIndices: array of UInt32; pname: UniformPName; &params: array of Int32);
    begin
      z_GetActiveUniformsiv_ovr_0(&program, uniformCount, uniformIndices[0], pname, &params[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetActiveUniformsiv(&program: UInt32; uniformCount: Int32; uniformIndices: array of UInt32; pname: UniformPName; var &params: Int32);
    begin
      z_GetActiveUniformsiv_ovr_0(&program, uniformCount, uniformIndices[0], pname, &params);
    end;
    public z_GetActiveUniformsiv_ovr_2 := GetFuncOrNil&<procedure(&program: UInt32; uniformCount: Int32; var uniformIndices: UInt32; pname: UniformPName; &params: IntPtr)>(z_GetActiveUniformsiv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetActiveUniformsiv(&program: UInt32; uniformCount: Int32; uniformIndices: array of UInt32; pname: UniformPName; &params: IntPtr);
    begin
      z_GetActiveUniformsiv_ovr_2(&program, uniformCount, uniformIndices[0], pname, &params);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetActiveUniformsiv(&program: UInt32; uniformCount: Int32; var uniformIndices: UInt32; pname: UniformPName; &params: array of Int32);
    begin
      z_GetActiveUniformsiv_ovr_0(&program, uniformCount, uniformIndices, pname, &params[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetActiveUniformsiv(&program: UInt32; uniformCount: Int32; var uniformIndices: UInt32; pname: UniformPName; var &params: Int32);
    begin
      z_GetActiveUniformsiv_ovr_0(&program, uniformCount, uniformIndices, pname, &params);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetActiveUniformsiv(&program: UInt32; uniformCount: Int32; var uniformIndices: UInt32; pname: UniformPName; &params: IntPtr);
    begin
      z_GetActiveUniformsiv_ovr_2(&program, uniformCount, uniformIndices, pname, &params);
    end;
    public z_GetActiveUniformsiv_ovr_6 := GetFuncOrNil&<procedure(&program: UInt32; uniformCount: Int32; uniformIndices: IntPtr; pname: UniformPName; var &params: Int32)>(z_GetActiveUniformsiv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetActiveUniformsiv(&program: UInt32; uniformCount: Int32; uniformIndices: IntPtr; pname: UniformPName; &params: array of Int32);
    begin
      z_GetActiveUniformsiv_ovr_6(&program, uniformCount, uniformIndices, pname, &params[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetActiveUniformsiv(&program: UInt32; uniformCount: Int32; uniformIndices: IntPtr; pname: UniformPName; var &params: Int32);
    begin
      z_GetActiveUniformsiv_ovr_6(&program, uniformCount, uniformIndices, pname, &params);
    end;
    public z_GetActiveUniformsiv_ovr_8 := GetFuncOrNil&<procedure(&program: UInt32; uniformCount: Int32; uniformIndices: IntPtr; pname: UniformPName; &params: IntPtr)>(z_GetActiveUniformsiv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetActiveUniformsiv(&program: UInt32; uniformCount: Int32; uniformIndices: IntPtr; pname: UniformPName; &params: IntPtr);
    begin
      z_GetActiveUniformsiv_ovr_8(&program, uniformCount, uniformIndices, pname, &params);
    end;
    
    // added in gl2.0
    public z_GetAttachedShaders_adr := GetFuncAdr('glGetAttachedShaders');
    public z_GetAttachedShaders_ovr_0 := GetFuncOrNil&<procedure(&program: UInt32; maxCount: Int32; var count: Int32; var shaders: UInt32)>(z_GetAttachedShaders_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetAttachedShaders(&program: UInt32; maxCount: Int32; count: array of Int32; shaders: array of UInt32);
    begin
      z_GetAttachedShaders_ovr_0(&program, maxCount, count[0], shaders[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetAttachedShaders(&program: UInt32; maxCount: Int32; count: array of Int32; var shaders: UInt32);
    begin
      z_GetAttachedShaders_ovr_0(&program, maxCount, count[0], shaders);
    end;
    public z_GetAttachedShaders_ovr_2 := GetFuncOrNil&<procedure(&program: UInt32; maxCount: Int32; var count: Int32; shaders: IntPtr)>(z_GetAttachedShaders_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetAttachedShaders(&program: UInt32; maxCount: Int32; count: array of Int32; shaders: IntPtr);
    begin
      z_GetAttachedShaders_ovr_2(&program, maxCount, count[0], shaders);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetAttachedShaders(&program: UInt32; maxCount: Int32; var count: Int32; shaders: array of UInt32);
    begin
      z_GetAttachedShaders_ovr_0(&program, maxCount, count, shaders[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetAttachedShaders(&program: UInt32; maxCount: Int32; var count: Int32; var shaders: UInt32);
    begin
      z_GetAttachedShaders_ovr_0(&program, maxCount, count, shaders);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetAttachedShaders(&program: UInt32; maxCount: Int32; var count: Int32; shaders: IntPtr);
    begin
      z_GetAttachedShaders_ovr_2(&program, maxCount, count, shaders);
    end;
    public z_GetAttachedShaders_ovr_6 := GetFuncOrNil&<procedure(&program: UInt32; maxCount: Int32; count: IntPtr; var shaders: UInt32)>(z_GetAttachedShaders_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetAttachedShaders(&program: UInt32; maxCount: Int32; count: IntPtr; shaders: array of UInt32);
    begin
      z_GetAttachedShaders_ovr_6(&program, maxCount, count, shaders[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetAttachedShaders(&program: UInt32; maxCount: Int32; count: IntPtr; var shaders: UInt32);
    begin
      z_GetAttachedShaders_ovr_6(&program, maxCount, count, shaders);
    end;
    public z_GetAttachedShaders_ovr_8 := GetFuncOrNil&<procedure(&program: UInt32; maxCount: Int32; count: IntPtr; shaders: IntPtr)>(z_GetAttachedShaders_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetAttachedShaders(&program: UInt32; maxCount: Int32; count: IntPtr; shaders: IntPtr);
    begin
      z_GetAttachedShaders_ovr_8(&program, maxCount, count, shaders);
    end;
    
    // added in gl2.0
    public z_GetAttribLocation_adr := GetFuncAdr('glGetAttribLocation');
    public z_GetAttribLocation_ovr_0 := GetFuncOrNil&<function(&program: ProgramName; name: IntPtr): Int32>(z_GetAttribLocation_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetAttribLocation(&program: ProgramName; name: string): Int32;
    begin
      var par_2_str_ptr := Marshal.StringToHGlobalAnsi(name);
      Result := z_GetAttribLocation_ovr_0(&program, par_2_str_ptr);
      Marshal.FreeHGlobal(par_2_str_ptr);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetAttribLocation(&program: ProgramName; name: IntPtr): Int32;
    begin
      Result := z_GetAttribLocation_ovr_0(&program, name);
    end;
    
    // added in gl3.0
    public z_GetBooleani_v_adr := GetFuncAdr('glGetBooleani_v');
    public z_GetBooleani_v_ovr_0 := GetFuncOrNil&<procedure(target: BufferTargetARB; index: UInt32; var data: boolean)>(z_GetBooleani_v_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetBooleani_v(target: BufferTargetARB; index: UInt32; data: array of boolean);
    begin
      z_GetBooleani_v_ovr_0(target, index, data[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetBooleani_v(target: BufferTargetARB; index: UInt32; var data: boolean);
    begin
      z_GetBooleani_v_ovr_0(target, index, data);
    end;
    public z_GetBooleani_v_ovr_2 := GetFuncOrNil&<procedure(target: BufferTargetARB; index: UInt32; data: IntPtr)>(z_GetBooleani_v_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetBooleani_v(target: BufferTargetARB; index: UInt32; data: IntPtr);
    begin
      z_GetBooleani_v_ovr_2(target, index, data);
    end;
    
    // added in gl1.0
    private static procedure _z_GetBooleanv_ovr0(pname: GetPName; [MarshalAs(UnmanagedType.LPArray)] data: array of boolean);
    external 'opengl32.dll' name 'glGetBooleanv';
    public static z_GetBooleanv_ovr0 := _z_GetBooleanv_ovr0;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetBooleanv(pname: GetPName; data: array of boolean) := z_GetBooleanv_ovr0(pname, data);
    private static procedure _z_GetBooleanv_ovr1(pname: GetPName; var data: boolean);
    external 'opengl32.dll' name 'glGetBooleanv';
    public static z_GetBooleanv_ovr1 := _z_GetBooleanv_ovr1;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetBooleanv(pname: GetPName; var data: boolean) := z_GetBooleanv_ovr1(pname, data);
    private static procedure _z_GetBooleanv_ovr2(pname: GetPName; data: IntPtr);
    external 'opengl32.dll' name 'glGetBooleanv';
    public static z_GetBooleanv_ovr2 := _z_GetBooleanv_ovr2;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetBooleanv(pname: GetPName; data: IntPtr) := z_GetBooleanv_ovr2(pname, data);
    
    // added in gl3.2
    public z_GetBufferParameteri64v_adr := GetFuncAdr('glGetBufferParameteri64v');
    public z_GetBufferParameteri64v_ovr_0 := GetFuncOrNil&<procedure(target: BufferTargetARB; pname: BufferPNameARB; var &params: Int64)>(z_GetBufferParameteri64v_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetBufferParameteri64v(target: BufferTargetARB; pname: BufferPNameARB; &params: array of Int64);
    begin
      z_GetBufferParameteri64v_ovr_0(target, pname, &params[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetBufferParameteri64v(target: BufferTargetARB; pname: BufferPNameARB; var &params: Int64);
    begin
      z_GetBufferParameteri64v_ovr_0(target, pname, &params);
    end;
    public z_GetBufferParameteri64v_ovr_2 := GetFuncOrNil&<procedure(target: BufferTargetARB; pname: BufferPNameARB; &params: IntPtr)>(z_GetBufferParameteri64v_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetBufferParameteri64v(target: BufferTargetARB; pname: BufferPNameARB; &params: IntPtr);
    begin
      z_GetBufferParameteri64v_ovr_2(target, pname, &params);
    end;
    
    // added in gl1.5
    public z_GetBufferParameteriv_adr := GetFuncAdr('glGetBufferParameteriv');
    public z_GetBufferParameteriv_ovr_0 := GetFuncOrNil&<procedure(target: BufferTargetARB; pname: BufferPNameARB; var &params: Int32)>(z_GetBufferParameteriv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetBufferParameteriv(target: BufferTargetARB; pname: BufferPNameARB; &params: array of Int32);
    begin
      z_GetBufferParameteriv_ovr_0(target, pname, &params[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetBufferParameteriv(target: BufferTargetARB; pname: BufferPNameARB; var &params: Int32);
    begin
      z_GetBufferParameteriv_ovr_0(target, pname, &params);
    end;
    public z_GetBufferParameteriv_ovr_2 := GetFuncOrNil&<procedure(target: BufferTargetARB; pname: BufferPNameARB; &params: IntPtr)>(z_GetBufferParameteriv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetBufferParameteriv(target: BufferTargetARB; pname: BufferPNameARB; &params: IntPtr);
    begin
      z_GetBufferParameteriv_ovr_2(target, pname, &params);
    end;
    
    // added in gl1.5
    public z_GetBufferPointerv_adr := GetFuncAdr('glGetBufferPointerv');
    public z_GetBufferPointerv_ovr_0 := GetFuncOrNil&<procedure(target: BufferTargetARB; pname: BufferPointerNameARB; var &params: IntPtr)>(z_GetBufferPointerv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetBufferPointerv(target: BufferTargetARB; pname: BufferPointerNameARB; &params: array of IntPtr);
    begin
      z_GetBufferPointerv_ovr_0(target, pname, &params[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetBufferPointerv(target: BufferTargetARB; pname: BufferPointerNameARB; var &params: IntPtr);
    begin
      z_GetBufferPointerv_ovr_0(target, pname, &params);
    end;
    public z_GetBufferPointerv_ovr_2 := GetFuncOrNil&<procedure(target: BufferTargetARB; pname: BufferPointerNameARB; &params: pointer)>(z_GetBufferPointerv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetBufferPointerv(target: BufferTargetARB; pname: BufferPointerNameARB; &params: pointer);
    begin
      z_GetBufferPointerv_ovr_2(target, pname, &params);
    end;
    
    // added in gl1.5
    public z_GetBufferSubData_adr := GetFuncAdr('glGetBufferSubData');
    public z_GetBufferSubData_ovr_0 := GetFuncOrNil&<procedure(target: BufferTargetARB; offset: IntPtr; size: IntPtr; data: IntPtr)>(z_GetBufferSubData_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetBufferSubData(target: BufferTargetARB; offset: IntPtr; size: IntPtr; data: IntPtr);
    begin
      z_GetBufferSubData_ovr_0(target, offset, size, data);
    end;
    
    // added in gl1.3
    public z_GetCompressedTexImage_adr := GetFuncAdr('glGetCompressedTexImage');
    public z_GetCompressedTexImage_ovr_0 := GetFuncOrNil&<procedure(target: TextureTarget; level: Int32; img: IntPtr)>(z_GetCompressedTexImage_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetCompressedTexImage(target: TextureTarget; level: Int32; img: IntPtr);
    begin
      z_GetCompressedTexImage_ovr_0(target, level, img);
    end;
    
    // added in gl4.5
    public z_GetCompressedTextureImage_adr := GetFuncAdr('glGetCompressedTextureImage');
    public z_GetCompressedTextureImage_ovr_0 := GetFuncOrNil&<procedure(texture: UInt32; level: Int32; bufSize: Int32; pixels: IntPtr)>(z_GetCompressedTextureImage_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetCompressedTextureImage(texture: UInt32; level: Int32; bufSize: Int32; pixels: IntPtr);
    begin
      z_GetCompressedTextureImage_ovr_0(texture, level, bufSize, pixels);
    end;
    
    // added in gl4.5
    public z_GetCompressedTextureSubImage_adr := GetFuncAdr('glGetCompressedTextureSubImage');
    public z_GetCompressedTextureSubImage_ovr_0 := GetFuncOrNil&<procedure(texture: UInt32; level: Int32; xoffset: Int32; yoffset: Int32; zoffset: Int32; width: Int32; height: Int32; depth: Int32; bufSize: Int32; pixels: IntPtr)>(z_GetCompressedTextureSubImage_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetCompressedTextureSubImage(texture: UInt32; level: Int32; xoffset: Int32; yoffset: Int32; zoffset: Int32; width: Int32; height: Int32; depth: Int32; bufSize: Int32; pixels: IntPtr);
    begin
      z_GetCompressedTextureSubImage_ovr_0(texture, level, xoffset, yoffset, zoffset, width, height, depth, bufSize, pixels);
    end;
    
    // added in gl4.3
    public z_GetDebugMessageLog_adr := GetFuncAdr('glGetDebugMessageLog');
    public z_GetDebugMessageLog_ovr_0 := GetFuncOrNil&<function(count: UInt32; bufSize: Int32; var sources: DebugSource; var types: DebugType; var ids: UInt32; var severities: DebugSeverity; var lengths: Int32; messageLog: IntPtr): UInt32>(z_GetDebugMessageLog_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetDebugMessageLog(count: UInt32; bufSize: Int32; var sources: DebugSource; var types: DebugType; var ids: UInt32; var severities: DebugSeverity; var lengths: Int32; messageLog: IntPtr): UInt32;
    begin
      Result := z_GetDebugMessageLog_ovr_0(count, bufSize, sources, types, ids, severities, lengths, messageLog);
    end;
    public z_GetDebugMessageLog_ovr_1 := GetFuncOrNil&<function(count: UInt32; bufSize: Int32; sources: IntPtr; types: IntPtr; ids: IntPtr; severities: IntPtr; lengths: IntPtr; messageLog: IntPtr): UInt32>(z_GetDebugMessageLog_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetDebugMessageLog(count: UInt32; bufSize: Int32; sources: IntPtr; types: IntPtr; ids: IntPtr; severities: IntPtr; lengths: IntPtr; messageLog: IntPtr): UInt32;
    begin
      Result := z_GetDebugMessageLog_ovr_1(count, bufSize, sources, types, ids, severities, lengths, messageLog);
    end;
    
    // added in gl4.1
    public z_GetDoublei_v_adr := GetFuncAdr('glGetDoublei_v');
    public z_GetDoublei_v_ovr_0 := GetFuncOrNil&<procedure(target: DummyEnum; index: UInt32; var data: real)>(z_GetDoublei_v_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetDoublei_v(target: DummyEnum; index: UInt32; data: array of real);
    begin
      z_GetDoublei_v_ovr_0(target, index, data[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetDoublei_v(target: DummyEnum; index: UInt32; var data: real);
    begin
      z_GetDoublei_v_ovr_0(target, index, data);
    end;
    public z_GetDoublei_v_ovr_2 := GetFuncOrNil&<procedure(target: DummyEnum; index: UInt32; data: IntPtr)>(z_GetDoublei_v_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetDoublei_v(target: DummyEnum; index: UInt32; data: IntPtr);
    begin
      z_GetDoublei_v_ovr_2(target, index, data);
    end;
    
    // added in gl1.0
    private static procedure _z_GetDoublev_ovr0(pname: GetPName; [MarshalAs(UnmanagedType.LPArray)] data: array of real);
    external 'opengl32.dll' name 'glGetDoublev';
    public static z_GetDoublev_ovr0 := _z_GetDoublev_ovr0;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetDoublev(pname: GetPName; data: array of real) := z_GetDoublev_ovr0(pname, data);
    private static procedure _z_GetDoublev_ovr1(pname: GetPName; var data: real);
    external 'opengl32.dll' name 'glGetDoublev';
    public static z_GetDoublev_ovr1 := _z_GetDoublev_ovr1;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetDoublev(pname: GetPName; var data: real) := z_GetDoublev_ovr1(pname, data);
    private static procedure _z_GetDoublev_ovr2(pname: GetPName; data: IntPtr);
    external 'opengl32.dll' name 'glGetDoublev';
    public static z_GetDoublev_ovr2 := _z_GetDoublev_ovr2;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetDoublev(pname: GetPName; data: IntPtr) := z_GetDoublev_ovr2(pname, data);
    
    // added in gl1.0
    private static function _z_GetError_ovr0: ErrorCode;
    external 'opengl32.dll' name 'glGetError';
    public static z_GetError_ovr0: function: ErrorCode := _z_GetError_ovr0;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetError: ErrorCode := z_GetError_ovr0;
    
    // added in gl4.1
    public z_GetFloati_v_adr := GetFuncAdr('glGetFloati_v');
    public z_GetFloati_v_ovr_0 := GetFuncOrNil&<procedure(target: DummyEnum; index: UInt32; var data: single)>(z_GetFloati_v_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetFloati_v(target: DummyEnum; index: UInt32; data: array of single);
    begin
      z_GetFloati_v_ovr_0(target, index, data[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetFloati_v(target: DummyEnum; index: UInt32; var data: single);
    begin
      z_GetFloati_v_ovr_0(target, index, data);
    end;
    public z_GetFloati_v_ovr_2 := GetFuncOrNil&<procedure(target: DummyEnum; index: UInt32; data: IntPtr)>(z_GetFloati_v_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetFloati_v(target: DummyEnum; index: UInt32; data: IntPtr);
    begin
      z_GetFloati_v_ovr_2(target, index, data);
    end;
    
    // added in gl1.0
    private static procedure _z_GetFloatv_ovr0(pname: GetPName; [MarshalAs(UnmanagedType.LPArray)] data: array of single);
    external 'opengl32.dll' name 'glGetFloatv';
    public static z_GetFloatv_ovr0 := _z_GetFloatv_ovr0;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetFloatv(pname: GetPName; data: array of single) := z_GetFloatv_ovr0(pname, data);
    private static procedure _z_GetFloatv_ovr1(pname: GetPName; var data: single);
    external 'opengl32.dll' name 'glGetFloatv';
    public static z_GetFloatv_ovr1 := _z_GetFloatv_ovr1;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetFloatv(pname: GetPName; var data: single) := z_GetFloatv_ovr1(pname, data);
    private static procedure _z_GetFloatv_ovr2(pname: GetPName; data: IntPtr);
    external 'opengl32.dll' name 'glGetFloatv';
    public static z_GetFloatv_ovr2 := _z_GetFloatv_ovr2;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetFloatv(pname: GetPName; data: IntPtr) := z_GetFloatv_ovr2(pname, data);
    
    // added in gl3.3
    public z_GetFragDataIndex_adr := GetFuncAdr('glGetFragDataIndex');
    public z_GetFragDataIndex_ovr_0 := GetFuncOrNil&<function(&program: ProgramName; name: IntPtr): Int32>(z_GetFragDataIndex_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetFragDataIndex(&program: ProgramName; name: string): Int32;
    begin
      var par_2_str_ptr := Marshal.StringToHGlobalAnsi(name);
      Result := z_GetFragDataIndex_ovr_0(&program, par_2_str_ptr);
      Marshal.FreeHGlobal(par_2_str_ptr);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetFragDataIndex(&program: ProgramName; name: IntPtr): Int32;
    begin
      Result := z_GetFragDataIndex_ovr_0(&program, name);
    end;
    
    // added in gl3.0
    public z_GetFragDataLocation_adr := GetFuncAdr('glGetFragDataLocation');
    public z_GetFragDataLocation_ovr_0 := GetFuncOrNil&<function(&program: ProgramName; name: IntPtr): Int32>(z_GetFragDataLocation_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetFragDataLocation(&program: ProgramName; name: string): Int32;
    begin
      var par_2_str_ptr := Marshal.StringToHGlobalAnsi(name);
      Result := z_GetFragDataLocation_ovr_0(&program, par_2_str_ptr);
      Marshal.FreeHGlobal(par_2_str_ptr);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetFragDataLocation(&program: ProgramName; name: IntPtr): Int32;
    begin
      Result := z_GetFragDataLocation_ovr_0(&program, name);
    end;
    
    // added in gl3.0
    public z_GetFramebufferAttachmentParameteriv_adr := GetFuncAdr('glGetFramebufferAttachmentParameteriv');
    public z_GetFramebufferAttachmentParameteriv_ovr_0 := GetFuncOrNil&<procedure(target: FramebufferTarget; attachment: FramebufferAttachment; pname: FramebufferAttachmentParameterName; var &params: Int32)>(z_GetFramebufferAttachmentParameteriv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetFramebufferAttachmentParameteriv(target: FramebufferTarget; attachment: FramebufferAttachment; pname: FramebufferAttachmentParameterName; &params: array of Int32);
    begin
      z_GetFramebufferAttachmentParameteriv_ovr_0(target, attachment, pname, &params[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetFramebufferAttachmentParameteriv(target: FramebufferTarget; attachment: FramebufferAttachment; pname: FramebufferAttachmentParameterName; var &params: Int32);
    begin
      z_GetFramebufferAttachmentParameteriv_ovr_0(target, attachment, pname, &params);
    end;
    public z_GetFramebufferAttachmentParameteriv_ovr_2 := GetFuncOrNil&<procedure(target: FramebufferTarget; attachment: FramebufferAttachment; pname: FramebufferAttachmentParameterName; &params: IntPtr)>(z_GetFramebufferAttachmentParameteriv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetFramebufferAttachmentParameteriv(target: FramebufferTarget; attachment: FramebufferAttachment; pname: FramebufferAttachmentParameterName; &params: IntPtr);
    begin
      z_GetFramebufferAttachmentParameteriv_ovr_2(target, attachment, pname, &params);
    end;
    
    // added in gl4.3
    public z_GetFramebufferParameteriv_adr := GetFuncAdr('glGetFramebufferParameteriv');
    public z_GetFramebufferParameteriv_ovr_0 := GetFuncOrNil&<procedure(target: FramebufferTarget; pname: FramebufferAttachmentParameterName; var &params: Int32)>(z_GetFramebufferParameteriv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetFramebufferParameteriv(target: FramebufferTarget; pname: FramebufferAttachmentParameterName; &params: array of Int32);
    begin
      z_GetFramebufferParameteriv_ovr_0(target, pname, &params[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetFramebufferParameteriv(target: FramebufferTarget; pname: FramebufferAttachmentParameterName; var &params: Int32);
    begin
      z_GetFramebufferParameteriv_ovr_0(target, pname, &params);
    end;
    public z_GetFramebufferParameteriv_ovr_2 := GetFuncOrNil&<procedure(target: FramebufferTarget; pname: FramebufferAttachmentParameterName; &params: IntPtr)>(z_GetFramebufferParameteriv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetFramebufferParameteriv(target: FramebufferTarget; pname: FramebufferAttachmentParameterName; &params: IntPtr);
    begin
      z_GetFramebufferParameteriv_ovr_2(target, pname, &params);
    end;
    
    // added in gl4.5
    public z_GetGraphicsResetStatus_adr := GetFuncAdr('glGetGraphicsResetStatus');
    public z_GetGraphicsResetStatus_ovr_0 := GetFuncOrNil&<function: GraphicsResetStatus>(z_GetGraphicsResetStatus_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetGraphicsResetStatus: GraphicsResetStatus;
    begin
      Result := z_GetGraphicsResetStatus_ovr_0;
    end;
    
    // added in gl3.2
    public z_GetInteger64i_v_adr := GetFuncAdr('glGetInteger64i_v');
    public z_GetInteger64i_v_ovr_0 := GetFuncOrNil&<procedure(target: DummyEnum; index: UInt32; var data: Int64)>(z_GetInteger64i_v_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetInteger64i_v(target: DummyEnum; index: UInt32; data: array of Int64);
    begin
      z_GetInteger64i_v_ovr_0(target, index, data[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetInteger64i_v(target: DummyEnum; index: UInt32; var data: Int64);
    begin
      z_GetInteger64i_v_ovr_0(target, index, data);
    end;
    public z_GetInteger64i_v_ovr_2 := GetFuncOrNil&<procedure(target: DummyEnum; index: UInt32; data: IntPtr)>(z_GetInteger64i_v_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetInteger64i_v(target: DummyEnum; index: UInt32; data: IntPtr);
    begin
      z_GetInteger64i_v_ovr_2(target, index, data);
    end;
    
    // added in gl3.2
    public z_GetInteger64v_adr := GetFuncAdr('glGetInteger64v');
    public z_GetInteger64v_ovr_0 := GetFuncOrNil&<procedure(pname: GetPName; var data: Int64)>(z_GetInteger64v_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetInteger64v(pname: GetPName; data: array of Int64);
    begin
      z_GetInteger64v_ovr_0(pname, data[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetInteger64v(pname: GetPName; var data: Int64);
    begin
      z_GetInteger64v_ovr_0(pname, data);
    end;
    public z_GetInteger64v_ovr_2 := GetFuncOrNil&<procedure(pname: GetPName; data: IntPtr)>(z_GetInteger64v_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetInteger64v(pname: GetPName; data: IntPtr);
    begin
      z_GetInteger64v_ovr_2(pname, data);
    end;
    
    // added in gl3.1
    public z_GetIntegeri_v_adr := GetFuncAdr('glGetIntegeri_v');
    public z_GetIntegeri_v_ovr_0 := GetFuncOrNil&<procedure(target: DummyEnum; index: UInt32; var data: Int32)>(z_GetIntegeri_v_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetIntegeri_v(target: DummyEnum; index: UInt32; data: array of Int32);
    begin
      z_GetIntegeri_v_ovr_0(target, index, data[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetIntegeri_v(target: DummyEnum; index: UInt32; var data: Int32);
    begin
      z_GetIntegeri_v_ovr_0(target, index, data);
    end;
    public z_GetIntegeri_v_ovr_2 := GetFuncOrNil&<procedure(target: DummyEnum; index: UInt32; data: IntPtr)>(z_GetIntegeri_v_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetIntegeri_v(target: DummyEnum; index: UInt32; data: IntPtr);
    begin
      z_GetIntegeri_v_ovr_2(target, index, data);
    end;
    
    // added in gl1.0
    private static procedure _z_GetIntegerv_ovr0(pname: GetPName; [MarshalAs(UnmanagedType.LPArray)] data: array of Int32);
    external 'opengl32.dll' name 'glGetIntegerv';
    public static z_GetIntegerv_ovr0 := _z_GetIntegerv_ovr0;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetIntegerv(pname: GetPName; data: array of Int32) := z_GetIntegerv_ovr0(pname, data);
    private static procedure _z_GetIntegerv_ovr1(pname: GetPName; var data: Int32);
    external 'opengl32.dll' name 'glGetIntegerv';
    public static z_GetIntegerv_ovr1 := _z_GetIntegerv_ovr1;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetIntegerv(pname: GetPName; var data: Int32) := z_GetIntegerv_ovr1(pname, data);
    private static procedure _z_GetIntegerv_ovr2(pname: GetPName; data: IntPtr);
    external 'opengl32.dll' name 'glGetIntegerv';
    public static z_GetIntegerv_ovr2 := _z_GetIntegerv_ovr2;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetIntegerv(pname: GetPName; data: IntPtr) := z_GetIntegerv_ovr2(pname, data);
    
    // added in gl4.3
    public z_GetInternalformati64v_adr := GetFuncAdr('glGetInternalformati64v');
    public z_GetInternalformati64v_ovr_0 := GetFuncOrNil&<procedure(target: TextureTarget; _internalformat: InternalFormat; pname: InternalFormatPName; count: Int32; var &params: Int64)>(z_GetInternalformati64v_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetInternalformati64v(target: TextureTarget; _internalformat: InternalFormat; pname: InternalFormatPName; count: Int32; &params: array of Int64);
    begin
      z_GetInternalformati64v_ovr_0(target, _internalformat, pname, count, &params[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetInternalformati64v(target: TextureTarget; _internalformat: InternalFormat; pname: InternalFormatPName; count: Int32; var &params: Int64);
    begin
      z_GetInternalformati64v_ovr_0(target, _internalformat, pname, count, &params);
    end;
    public z_GetInternalformati64v_ovr_2 := GetFuncOrNil&<procedure(target: TextureTarget; _internalformat: InternalFormat; pname: InternalFormatPName; count: Int32; &params: IntPtr)>(z_GetInternalformati64v_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetInternalformati64v(target: TextureTarget; _internalformat: InternalFormat; pname: InternalFormatPName; count: Int32; &params: IntPtr);
    begin
      z_GetInternalformati64v_ovr_2(target, _internalformat, pname, count, &params);
    end;
    
    // added in gl4.2
    public z_GetInternalformativ_adr := GetFuncAdr('glGetInternalformativ');
    public z_GetInternalformativ_ovr_0 := GetFuncOrNil&<procedure(target: TextureTarget; _internalformat: InternalFormat; pname: InternalFormatPName; count: Int32; var &params: Int32)>(z_GetInternalformativ_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetInternalformativ(target: TextureTarget; _internalformat: InternalFormat; pname: InternalFormatPName; count: Int32; &params: array of Int32);
    begin
      z_GetInternalformativ_ovr_0(target, _internalformat, pname, count, &params[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetInternalformativ(target: TextureTarget; _internalformat: InternalFormat; pname: InternalFormatPName; count: Int32; var &params: Int32);
    begin
      z_GetInternalformativ_ovr_0(target, _internalformat, pname, count, &params);
    end;
    public z_GetInternalformativ_ovr_2 := GetFuncOrNil&<procedure(target: TextureTarget; _internalformat: InternalFormat; pname: InternalFormatPName; count: Int32; &params: IntPtr)>(z_GetInternalformativ_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetInternalformativ(target: TextureTarget; _internalformat: InternalFormat; pname: InternalFormatPName; count: Int32; &params: IntPtr);
    begin
      z_GetInternalformativ_ovr_2(target, _internalformat, pname, count, &params);
    end;
    
    // added in gl3.2
    public z_GetMultisamplefv_adr := GetFuncAdr('glGetMultisamplefv');
    public z_GetMultisamplefv_ovr_0 := GetFuncOrNil&<procedure(pname: GetMultisamplePNameNV; index: UInt32; var val: single)>(z_GetMultisamplefv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetMultisamplefv(pname: GetMultisamplePNameNV; index: UInt32; val: array of single);
    begin
      z_GetMultisamplefv_ovr_0(pname, index, val[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetMultisamplefv(pname: GetMultisamplePNameNV; index: UInt32; var val: single);
    begin
      z_GetMultisamplefv_ovr_0(pname, index, val);
    end;
    public z_GetMultisamplefv_ovr_2 := GetFuncOrNil&<procedure(pname: GetMultisamplePNameNV; index: UInt32; val: IntPtr)>(z_GetMultisamplefv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetMultisamplefv(pname: GetMultisamplePNameNV; index: UInt32; val: IntPtr);
    begin
      z_GetMultisamplefv_ovr_2(pname, index, val);
    end;
    
    // added in gl4.5
    public z_GetNamedBufferParameteri64v_adr := GetFuncAdr('glGetNamedBufferParameteri64v');
    public z_GetNamedBufferParameteri64v_ovr_0 := GetFuncOrNil&<procedure(buffer: UInt32; pname: VertexBufferObjectParameter; var &params: Int64)>(z_GetNamedBufferParameteri64v_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetNamedBufferParameteri64v(buffer: UInt32; pname: VertexBufferObjectParameter; &params: array of Int64);
    begin
      z_GetNamedBufferParameteri64v_ovr_0(buffer, pname, &params[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetNamedBufferParameteri64v(buffer: UInt32; pname: VertexBufferObjectParameter; var &params: Int64);
    begin
      z_GetNamedBufferParameteri64v_ovr_0(buffer, pname, &params);
    end;
    public z_GetNamedBufferParameteri64v_ovr_2 := GetFuncOrNil&<procedure(buffer: UInt32; pname: VertexBufferObjectParameter; &params: IntPtr)>(z_GetNamedBufferParameteri64v_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetNamedBufferParameteri64v(buffer: UInt32; pname: VertexBufferObjectParameter; &params: IntPtr);
    begin
      z_GetNamedBufferParameteri64v_ovr_2(buffer, pname, &params);
    end;
    
    // added in gl4.5
    public z_GetNamedBufferParameteriv_adr := GetFuncAdr('glGetNamedBufferParameteriv');
    public z_GetNamedBufferParameteriv_ovr_0 := GetFuncOrNil&<procedure(buffer: UInt32; pname: VertexBufferObjectParameter; var &params: Int32)>(z_GetNamedBufferParameteriv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetNamedBufferParameteriv(buffer: UInt32; pname: VertexBufferObjectParameter; &params: array of Int32);
    begin
      z_GetNamedBufferParameteriv_ovr_0(buffer, pname, &params[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetNamedBufferParameteriv(buffer: UInt32; pname: VertexBufferObjectParameter; var &params: Int32);
    begin
      z_GetNamedBufferParameteriv_ovr_0(buffer, pname, &params);
    end;
    public z_GetNamedBufferParameteriv_ovr_2 := GetFuncOrNil&<procedure(buffer: UInt32; pname: VertexBufferObjectParameter; &params: IntPtr)>(z_GetNamedBufferParameteriv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetNamedBufferParameteriv(buffer: UInt32; pname: VertexBufferObjectParameter; &params: IntPtr);
    begin
      z_GetNamedBufferParameteriv_ovr_2(buffer, pname, &params);
    end;
    
    // added in gl4.5
    public z_GetNamedBufferPointerv_adr := GetFuncAdr('glGetNamedBufferPointerv');
    public z_GetNamedBufferPointerv_ovr_0 := GetFuncOrNil&<procedure(buffer: UInt32; pname: VertexBufferObjectParameter; var &params: IntPtr)>(z_GetNamedBufferPointerv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetNamedBufferPointerv(buffer: UInt32; pname: VertexBufferObjectParameter; &params: array of IntPtr);
    begin
      z_GetNamedBufferPointerv_ovr_0(buffer, pname, &params[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetNamedBufferPointerv(buffer: UInt32; pname: VertexBufferObjectParameter; var &params: IntPtr);
    begin
      z_GetNamedBufferPointerv_ovr_0(buffer, pname, &params);
    end;
    public z_GetNamedBufferPointerv_ovr_2 := GetFuncOrNil&<procedure(buffer: UInt32; pname: VertexBufferObjectParameter; &params: pointer)>(z_GetNamedBufferPointerv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetNamedBufferPointerv(buffer: UInt32; pname: VertexBufferObjectParameter; &params: pointer);
    begin
      z_GetNamedBufferPointerv_ovr_2(buffer, pname, &params);
    end;
    
    // added in gl4.5
    public z_GetNamedBufferSubData_adr := GetFuncAdr('glGetNamedBufferSubData');
    public z_GetNamedBufferSubData_ovr_0 := GetFuncOrNil&<procedure(buffer: UInt32; offset: IntPtr; size: IntPtr; data: IntPtr)>(z_GetNamedBufferSubData_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetNamedBufferSubData(buffer: UInt32; offset: IntPtr; size: IntPtr; data: IntPtr);
    begin
      z_GetNamedBufferSubData_ovr_0(buffer, offset, size, data);
    end;
    
    // added in gl4.5
    public z_GetNamedFramebufferAttachmentParameteriv_adr := GetFuncAdr('glGetNamedFramebufferAttachmentParameteriv');
    public z_GetNamedFramebufferAttachmentParameteriv_ovr_0 := GetFuncOrNil&<procedure(framebuffer: UInt32; attachment: FramebufferAttachment; pname: FramebufferAttachmentParameterName; var &params: Int32)>(z_GetNamedFramebufferAttachmentParameteriv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetNamedFramebufferAttachmentParameteriv(framebuffer: UInt32; attachment: FramebufferAttachment; pname: FramebufferAttachmentParameterName; &params: array of Int32);
    begin
      z_GetNamedFramebufferAttachmentParameteriv_ovr_0(framebuffer, attachment, pname, &params[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetNamedFramebufferAttachmentParameteriv(framebuffer: UInt32; attachment: FramebufferAttachment; pname: FramebufferAttachmentParameterName; var &params: Int32);
    begin
      z_GetNamedFramebufferAttachmentParameteriv_ovr_0(framebuffer, attachment, pname, &params);
    end;
    public z_GetNamedFramebufferAttachmentParameteriv_ovr_2 := GetFuncOrNil&<procedure(framebuffer: UInt32; attachment: FramebufferAttachment; pname: FramebufferAttachmentParameterName; &params: IntPtr)>(z_GetNamedFramebufferAttachmentParameteriv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetNamedFramebufferAttachmentParameteriv(framebuffer: UInt32; attachment: FramebufferAttachment; pname: FramebufferAttachmentParameterName; &params: IntPtr);
    begin
      z_GetNamedFramebufferAttachmentParameteriv_ovr_2(framebuffer, attachment, pname, &params);
    end;
    
    // added in gl4.5
    public z_GetNamedFramebufferParameteriv_adr := GetFuncAdr('glGetNamedFramebufferParameteriv');
    public z_GetNamedFramebufferParameteriv_ovr_0 := GetFuncOrNil&<procedure(framebuffer: UInt32; pname: GetFramebufferParameter; var param: Int32)>(z_GetNamedFramebufferParameteriv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetNamedFramebufferParameteriv(framebuffer: UInt32; pname: GetFramebufferParameter; param: array of Int32);
    begin
      z_GetNamedFramebufferParameteriv_ovr_0(framebuffer, pname, param[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetNamedFramebufferParameteriv(framebuffer: UInt32; pname: GetFramebufferParameter; var param: Int32);
    begin
      z_GetNamedFramebufferParameteriv_ovr_0(framebuffer, pname, param);
    end;
    public z_GetNamedFramebufferParameteriv_ovr_2 := GetFuncOrNil&<procedure(framebuffer: UInt32; pname: GetFramebufferParameter; param: IntPtr)>(z_GetNamedFramebufferParameteriv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetNamedFramebufferParameteriv(framebuffer: UInt32; pname: GetFramebufferParameter; param: IntPtr);
    begin
      z_GetNamedFramebufferParameteriv_ovr_2(framebuffer, pname, param);
    end;
    
    // added in gl4.5
    public z_GetNamedRenderbufferParameteriv_adr := GetFuncAdr('glGetNamedRenderbufferParameteriv');
    public z_GetNamedRenderbufferParameteriv_ovr_0 := GetFuncOrNil&<procedure(renderbuffer: UInt32; pname: RenderbufferParameterName; var &params: Int32)>(z_GetNamedRenderbufferParameteriv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetNamedRenderbufferParameteriv(renderbuffer: UInt32; pname: RenderbufferParameterName; &params: array of Int32);
    begin
      z_GetNamedRenderbufferParameteriv_ovr_0(renderbuffer, pname, &params[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetNamedRenderbufferParameteriv(renderbuffer: UInt32; pname: RenderbufferParameterName; var &params: Int32);
    begin
      z_GetNamedRenderbufferParameteriv_ovr_0(renderbuffer, pname, &params);
    end;
    public z_GetNamedRenderbufferParameteriv_ovr_2 := GetFuncOrNil&<procedure(renderbuffer: UInt32; pname: RenderbufferParameterName; &params: IntPtr)>(z_GetNamedRenderbufferParameteriv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetNamedRenderbufferParameteriv(renderbuffer: UInt32; pname: RenderbufferParameterName; &params: IntPtr);
    begin
      z_GetNamedRenderbufferParameteriv_ovr_2(renderbuffer, pname, &params);
    end;
    
    // added in gl4.5
    public z_GetnColorTable_adr := GetFuncAdr('glGetnColorTable');
    public z_GetnColorTable_ovr_0 := GetFuncOrNil&<procedure(target: ColorTableTarget; format: PixelFormat; &type: PixelType; bufSize: Int32; table: IntPtr)>(z_GetnColorTable_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetnColorTable(target: ColorTableTarget; format: PixelFormat; &type: PixelType; bufSize: Int32; table: IntPtr);
    begin
      z_GetnColorTable_ovr_0(target, format, &type, bufSize, table);
    end;
    
    // added in gl4.5
    public z_GetnCompressedTexImage_adr := GetFuncAdr('glGetnCompressedTexImage');
    public z_GetnCompressedTexImage_ovr_0 := GetFuncOrNil&<procedure(target: TextureTarget; lod: Int32; bufSize: Int32; pixels: IntPtr)>(z_GetnCompressedTexImage_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetnCompressedTexImage(target: TextureTarget; lod: Int32; bufSize: Int32; pixels: IntPtr);
    begin
      z_GetnCompressedTexImage_ovr_0(target, lod, bufSize, pixels);
    end;
    
    // added in gl4.5
    public z_GetnConvolutionFilter_adr := GetFuncAdr('glGetnConvolutionFilter');
    public z_GetnConvolutionFilter_ovr_0 := GetFuncOrNil&<procedure(target: ConvolutionTarget; format: PixelFormat; &type: PixelType; bufSize: Int32; image: IntPtr)>(z_GetnConvolutionFilter_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetnConvolutionFilter(target: ConvolutionTarget; format: PixelFormat; &type: PixelType; bufSize: Int32; image: IntPtr);
    begin
      z_GetnConvolutionFilter_ovr_0(target, format, &type, bufSize, image);
    end;
    
    // added in gl4.5
    public z_GetnHistogram_adr := GetFuncAdr('glGetnHistogram');
    public z_GetnHistogram_ovr_0 := GetFuncOrNil&<procedure(target: HistogramTargetEXT; reset: boolean; format: PixelFormat; &type: PixelType; bufSize: Int32; values: IntPtr)>(z_GetnHistogram_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetnHistogram(target: HistogramTargetEXT; reset: boolean; format: PixelFormat; &type: PixelType; bufSize: Int32; values: IntPtr);
    begin
      z_GetnHistogram_ovr_0(target, reset, format, &type, bufSize, values);
    end;
    
    // added in gl4.5
    public z_GetnMapdv_adr := GetFuncAdr('glGetnMapdv');
    public z_GetnMapdv_ovr_0 := GetFuncOrNil&<procedure(target: MapTarget; query: MapQuery; bufSize: Int32; var v: real)>(z_GetnMapdv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetnMapdv(target: MapTarget; query: MapQuery; bufSize: Int32; v: array of real);
    begin
      z_GetnMapdv_ovr_0(target, query, bufSize, v[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetnMapdv(target: MapTarget; query: MapQuery; bufSize: Int32; var v: real);
    begin
      z_GetnMapdv_ovr_0(target, query, bufSize, v);
    end;
    public z_GetnMapdv_ovr_2 := GetFuncOrNil&<procedure(target: MapTarget; query: MapQuery; bufSize: Int32; v: IntPtr)>(z_GetnMapdv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetnMapdv(target: MapTarget; query: MapQuery; bufSize: Int32; v: IntPtr);
    begin
      z_GetnMapdv_ovr_2(target, query, bufSize, v);
    end;
    
    // added in gl4.5
    public z_GetnMapfv_adr := GetFuncAdr('glGetnMapfv');
    public z_GetnMapfv_ovr_0 := GetFuncOrNil&<procedure(target: MapTarget; query: MapQuery; bufSize: Int32; var v: single)>(z_GetnMapfv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetnMapfv(target: MapTarget; query: MapQuery; bufSize: Int32; v: array of single);
    begin
      z_GetnMapfv_ovr_0(target, query, bufSize, v[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetnMapfv(target: MapTarget; query: MapQuery; bufSize: Int32; var v: single);
    begin
      z_GetnMapfv_ovr_0(target, query, bufSize, v);
    end;
    public z_GetnMapfv_ovr_2 := GetFuncOrNil&<procedure(target: MapTarget; query: MapQuery; bufSize: Int32; v: IntPtr)>(z_GetnMapfv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetnMapfv(target: MapTarget; query: MapQuery; bufSize: Int32; v: IntPtr);
    begin
      z_GetnMapfv_ovr_2(target, query, bufSize, v);
    end;
    
    // added in gl4.5
    public z_GetnMapiv_adr := GetFuncAdr('glGetnMapiv');
    public z_GetnMapiv_ovr_0 := GetFuncOrNil&<procedure(target: MapTarget; query: MapQuery; bufSize: Int32; var v: Int32)>(z_GetnMapiv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetnMapiv(target: MapTarget; query: MapQuery; bufSize: Int32; v: array of Int32);
    begin
      z_GetnMapiv_ovr_0(target, query, bufSize, v[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetnMapiv(target: MapTarget; query: MapQuery; bufSize: Int32; var v: Int32);
    begin
      z_GetnMapiv_ovr_0(target, query, bufSize, v);
    end;
    public z_GetnMapiv_ovr_2 := GetFuncOrNil&<procedure(target: MapTarget; query: MapQuery; bufSize: Int32; v: IntPtr)>(z_GetnMapiv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetnMapiv(target: MapTarget; query: MapQuery; bufSize: Int32; v: IntPtr);
    begin
      z_GetnMapiv_ovr_2(target, query, bufSize, v);
    end;
    
    // added in gl4.5
    public z_GetnMinmax_adr := GetFuncAdr('glGetnMinmax');
    public z_GetnMinmax_ovr_0 := GetFuncOrNil&<procedure(target: MinmaxTargetEXT; reset: boolean; format: PixelFormat; &type: PixelType; bufSize: Int32; values: IntPtr)>(z_GetnMinmax_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetnMinmax(target: MinmaxTargetEXT; reset: boolean; format: PixelFormat; &type: PixelType; bufSize: Int32; values: IntPtr);
    begin
      z_GetnMinmax_ovr_0(target, reset, format, &type, bufSize, values);
    end;
    
    // added in gl4.5
    public z_GetnPixelMapfv_adr := GetFuncAdr('glGetnPixelMapfv');
    public z_GetnPixelMapfv_ovr_0 := GetFuncOrNil&<procedure(map: PixelMap; bufSize: Int32; var values: single)>(z_GetnPixelMapfv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetnPixelMapfv(map: PixelMap; bufSize: Int32; values: array of single);
    begin
      z_GetnPixelMapfv_ovr_0(map, bufSize, values[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetnPixelMapfv(map: PixelMap; bufSize: Int32; var values: single);
    begin
      z_GetnPixelMapfv_ovr_0(map, bufSize, values);
    end;
    public z_GetnPixelMapfv_ovr_2 := GetFuncOrNil&<procedure(map: PixelMap; bufSize: Int32; values: IntPtr)>(z_GetnPixelMapfv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetnPixelMapfv(map: PixelMap; bufSize: Int32; values: IntPtr);
    begin
      z_GetnPixelMapfv_ovr_2(map, bufSize, values);
    end;
    
    // added in gl4.5
    public z_GetnPixelMapuiv_adr := GetFuncAdr('glGetnPixelMapuiv');
    public z_GetnPixelMapuiv_ovr_0 := GetFuncOrNil&<procedure(map: PixelMap; bufSize: Int32; var values: UInt32)>(z_GetnPixelMapuiv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetnPixelMapuiv(map: PixelMap; bufSize: Int32; values: array of UInt32);
    begin
      z_GetnPixelMapuiv_ovr_0(map, bufSize, values[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetnPixelMapuiv(map: PixelMap; bufSize: Int32; var values: UInt32);
    begin
      z_GetnPixelMapuiv_ovr_0(map, bufSize, values);
    end;
    public z_GetnPixelMapuiv_ovr_2 := GetFuncOrNil&<procedure(map: PixelMap; bufSize: Int32; values: IntPtr)>(z_GetnPixelMapuiv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetnPixelMapuiv(map: PixelMap; bufSize: Int32; values: IntPtr);
    begin
      z_GetnPixelMapuiv_ovr_2(map, bufSize, values);
    end;
    
    // added in gl4.5
    public z_GetnPixelMapusv_adr := GetFuncAdr('glGetnPixelMapusv');
    public z_GetnPixelMapusv_ovr_0 := GetFuncOrNil&<procedure(map: PixelMap; bufSize: Int32; var values: UInt16)>(z_GetnPixelMapusv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetnPixelMapusv(map: PixelMap; bufSize: Int32; values: array of UInt16);
    begin
      z_GetnPixelMapusv_ovr_0(map, bufSize, values[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetnPixelMapusv(map: PixelMap; bufSize: Int32; var values: UInt16);
    begin
      z_GetnPixelMapusv_ovr_0(map, bufSize, values);
    end;
    public z_GetnPixelMapusv_ovr_2 := GetFuncOrNil&<procedure(map: PixelMap; bufSize: Int32; values: IntPtr)>(z_GetnPixelMapusv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetnPixelMapusv(map: PixelMap; bufSize: Int32; values: IntPtr);
    begin
      z_GetnPixelMapusv_ovr_2(map, bufSize, values);
    end;
    
    // added in gl4.5
    public z_GetnPolygonStipple_adr := GetFuncAdr('glGetnPolygonStipple');
    public z_GetnPolygonStipple_ovr_0 := GetFuncOrNil&<procedure(bufSize: Int32; var pattern: Byte)>(z_GetnPolygonStipple_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetnPolygonStipple(bufSize: Int32; pattern: array of Byte);
    begin
      z_GetnPolygonStipple_ovr_0(bufSize, pattern[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetnPolygonStipple(bufSize: Int32; var pattern: Byte);
    begin
      z_GetnPolygonStipple_ovr_0(bufSize, pattern);
    end;
    public z_GetnPolygonStipple_ovr_2 := GetFuncOrNil&<procedure(bufSize: Int32; pattern: IntPtr)>(z_GetnPolygonStipple_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetnPolygonStipple(bufSize: Int32; pattern: IntPtr);
    begin
      z_GetnPolygonStipple_ovr_2(bufSize, pattern);
    end;
    
    // added in gl4.5
    public z_GetnSeparableFilter_adr := GetFuncAdr('glGetnSeparableFilter');
    public z_GetnSeparableFilter_ovr_0 := GetFuncOrNil&<procedure(target: SeparableTargetEXT; format: PixelFormat; &type: PixelType; rowBufSize: Int32; row: IntPtr; columnBufSize: Int32; column: IntPtr; span: IntPtr)>(z_GetnSeparableFilter_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetnSeparableFilter(target: SeparableTargetEXT; format: PixelFormat; &type: PixelType; rowBufSize: Int32; row: IntPtr; columnBufSize: Int32; column: IntPtr; span: IntPtr);
    begin
      z_GetnSeparableFilter_ovr_0(target, format, &type, rowBufSize, row, columnBufSize, column, span);
    end;
    
    // added in gl4.5
    public z_GetnTexImage_adr := GetFuncAdr('glGetnTexImage');
    public z_GetnTexImage_ovr_0 := GetFuncOrNil&<procedure(target: TextureTarget; level: Int32; format: PixelFormat; &type: PixelType; bufSize: Int32; pixels: IntPtr)>(z_GetnTexImage_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetnTexImage(target: TextureTarget; level: Int32; format: PixelFormat; &type: PixelType; bufSize: Int32; pixels: IntPtr);
    begin
      z_GetnTexImage_ovr_0(target, level, format, &type, bufSize, pixels);
    end;
    
    // added in gl4.5
    public z_GetnUniformdv_adr := GetFuncAdr('glGetnUniformdv');
    public z_GetnUniformdv_ovr_0 := GetFuncOrNil&<procedure(&program: ProgramName; location: Int32; bufSize: Int32; var &params: real)>(z_GetnUniformdv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetnUniformdv(&program: ProgramName; location: Int32; bufSize: Int32; &params: array of real);
    begin
      z_GetnUniformdv_ovr_0(&program, location, bufSize, &params[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetnUniformdv(&program: ProgramName; location: Int32; bufSize: Int32; var &params: real);
    begin
      z_GetnUniformdv_ovr_0(&program, location, bufSize, &params);
    end;
    public z_GetnUniformdv_ovr_2 := GetFuncOrNil&<procedure(&program: ProgramName; location: Int32; bufSize: Int32; &params: IntPtr)>(z_GetnUniformdv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetnUniformdv(&program: ProgramName; location: Int32; bufSize: Int32; &params: IntPtr);
    begin
      z_GetnUniformdv_ovr_2(&program, location, bufSize, &params);
    end;
    
    // added in gl4.5
    public z_GetnUniformfv_adr := GetFuncAdr('glGetnUniformfv');
    public z_GetnUniformfv_ovr_0 := GetFuncOrNil&<procedure(&program: ProgramName; location: Int32; bufSize: Int32; var &params: single)>(z_GetnUniformfv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetnUniformfv(&program: ProgramName; location: Int32; bufSize: Int32; &params: array of single);
    begin
      z_GetnUniformfv_ovr_0(&program, location, bufSize, &params[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetnUniformfv(&program: ProgramName; location: Int32; bufSize: Int32; var &params: single);
    begin
      z_GetnUniformfv_ovr_0(&program, location, bufSize, &params);
    end;
    public z_GetnUniformfv_ovr_2 := GetFuncOrNil&<procedure(&program: ProgramName; location: Int32; bufSize: Int32; &params: IntPtr)>(z_GetnUniformfv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetnUniformfv(&program: ProgramName; location: Int32; bufSize: Int32; &params: IntPtr);
    begin
      z_GetnUniformfv_ovr_2(&program, location, bufSize, &params);
    end;
    
    // added in gl4.5
    public z_GetnUniformiv_adr := GetFuncAdr('glGetnUniformiv');
    public z_GetnUniformiv_ovr_0 := GetFuncOrNil&<procedure(&program: ProgramName; location: Int32; bufSize: Int32; var &params: Int32)>(z_GetnUniformiv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetnUniformiv(&program: ProgramName; location: Int32; bufSize: Int32; &params: array of Int32);
    begin
      z_GetnUniformiv_ovr_0(&program, location, bufSize, &params[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetnUniformiv(&program: ProgramName; location: Int32; bufSize: Int32; var &params: Int32);
    begin
      z_GetnUniformiv_ovr_0(&program, location, bufSize, &params);
    end;
    public z_GetnUniformiv_ovr_2 := GetFuncOrNil&<procedure(&program: ProgramName; location: Int32; bufSize: Int32; &params: IntPtr)>(z_GetnUniformiv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetnUniformiv(&program: ProgramName; location: Int32; bufSize: Int32; &params: IntPtr);
    begin
      z_GetnUniformiv_ovr_2(&program, location, bufSize, &params);
    end;
    
    // added in gl4.5
    public z_GetnUniformuiv_adr := GetFuncAdr('glGetnUniformuiv');
    public z_GetnUniformuiv_ovr_0 := GetFuncOrNil&<procedure(&program: ProgramName; location: Int32; bufSize: Int32; var &params: UInt32)>(z_GetnUniformuiv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetnUniformuiv(&program: ProgramName; location: Int32; bufSize: Int32; &params: array of UInt32);
    begin
      z_GetnUniformuiv_ovr_0(&program, location, bufSize, &params[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetnUniformuiv(&program: ProgramName; location: Int32; bufSize: Int32; var &params: UInt32);
    begin
      z_GetnUniformuiv_ovr_0(&program, location, bufSize, &params);
    end;
    public z_GetnUniformuiv_ovr_2 := GetFuncOrNil&<procedure(&program: ProgramName; location: Int32; bufSize: Int32; &params: IntPtr)>(z_GetnUniformuiv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetnUniformuiv(&program: ProgramName; location: Int32; bufSize: Int32; &params: IntPtr);
    begin
      z_GetnUniformuiv_ovr_2(&program, location, bufSize, &params);
    end;
    
    // added in gl4.3
    public z_GetObjectLabel_adr := GetFuncAdr('glGetObjectLabel');
    public z_GetObjectLabel_ovr_0 := GetFuncOrNil&<procedure(identifier: ObjectIdentifier; name: UInt32; bufSize: Int32; var length: Int32; &label: IntPtr)>(z_GetObjectLabel_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetObjectLabel(identifier: ObjectIdentifier; name: UInt32; bufSize: Int32; length: array of Int32; &label: IntPtr);
    begin
      z_GetObjectLabel_ovr_0(identifier, name, bufSize, length[0], &label);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetObjectLabel(identifier: ObjectIdentifier; name: UInt32; bufSize: Int32; var length: Int32; &label: IntPtr);
    begin
      z_GetObjectLabel_ovr_0(identifier, name, bufSize, length, &label);
    end;
    public z_GetObjectLabel_ovr_2 := GetFuncOrNil&<procedure(identifier: ObjectIdentifier; name: UInt32; bufSize: Int32; length: IntPtr; &label: IntPtr)>(z_GetObjectLabel_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetObjectLabel(identifier: ObjectIdentifier; name: UInt32; bufSize: Int32; length: IntPtr; &label: IntPtr);
    begin
      z_GetObjectLabel_ovr_2(identifier, name, bufSize, length, &label);
    end;
    
    // added in gl4.3
    public z_GetObjectPtrLabel_adr := GetFuncAdr('glGetObjectPtrLabel');
    public z_GetObjectPtrLabel_ovr_0 := GetFuncOrNil&<procedure(ptr: IntPtr; bufSize: Int32; var length: Int32; &label: IntPtr)>(z_GetObjectPtrLabel_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetObjectPtrLabel(ptr: IntPtr; bufSize: Int32; length: array of Int32; &label: IntPtr);
    begin
      z_GetObjectPtrLabel_ovr_0(ptr, bufSize, length[0], &label);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetObjectPtrLabel(ptr: IntPtr; bufSize: Int32; var length: Int32; &label: IntPtr);
    begin
      z_GetObjectPtrLabel_ovr_0(ptr, bufSize, length, &label);
    end;
    public z_GetObjectPtrLabel_ovr_2 := GetFuncOrNil&<procedure(ptr: IntPtr; bufSize: Int32; length: IntPtr; &label: IntPtr)>(z_GetObjectPtrLabel_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetObjectPtrLabel(ptr: IntPtr; bufSize: Int32; length: IntPtr; &label: IntPtr);
    begin
      z_GetObjectPtrLabel_ovr_2(ptr, bufSize, length, &label);
    end;
    
    // added in gl1.1
    private static procedure _z_GetPointerv_ovr0(pname: GetPointervPName; [MarshalAs(UnmanagedType.LPArray)] &params: array of IntPtr);
    external 'opengl32.dll' name 'glGetPointerv';
    public static z_GetPointerv_ovr0 := _z_GetPointerv_ovr0;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetPointerv(pname: GetPointervPName; &params: array of IntPtr) := z_GetPointerv_ovr0(pname, &params);
    private static procedure _z_GetPointerv_ovr1(pname: GetPointervPName; var &params: IntPtr);
    external 'opengl32.dll' name 'glGetPointerv';
    public static z_GetPointerv_ovr1 := _z_GetPointerv_ovr1;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetPointerv(pname: GetPointervPName; var &params: IntPtr) := z_GetPointerv_ovr1(pname, &params);
    private static procedure _z_GetPointerv_ovr2(pname: GetPointervPName; &params: pointer);
    external 'opengl32.dll' name 'glGetPointerv';
    public static z_GetPointerv_ovr2 := _z_GetPointerv_ovr2;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetPointerv(pname: GetPointervPName; &params: pointer) := z_GetPointerv_ovr2(pname, &params);
    
    // added in gl4.1
    public z_GetProgramBinary_adr := GetFuncAdr('glGetProgramBinary');
    public z_GetProgramBinary_ovr_0 := GetFuncOrNil&<procedure(&program: UInt32; bufSize: Int32; var length: Int32; var binaryFormat: DummyEnum; binary: IntPtr)>(z_GetProgramBinary_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetProgramBinary(&program: UInt32; bufSize: Int32; length: array of Int32; binaryFormat: array of DummyEnum; binary: IntPtr);
    begin
      z_GetProgramBinary_ovr_0(&program, bufSize, length[0], binaryFormat[0], binary);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetProgramBinary(&program: UInt32; bufSize: Int32; length: array of Int32; var binaryFormat: DummyEnum; binary: IntPtr);
    begin
      z_GetProgramBinary_ovr_0(&program, bufSize, length[0], binaryFormat, binary);
    end;
    public z_GetProgramBinary_ovr_2 := GetFuncOrNil&<procedure(&program: UInt32; bufSize: Int32; var length: Int32; binaryFormat: IntPtr; binary: IntPtr)>(z_GetProgramBinary_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetProgramBinary(&program: UInt32; bufSize: Int32; length: array of Int32; binaryFormat: IntPtr; binary: IntPtr);
    begin
      z_GetProgramBinary_ovr_2(&program, bufSize, length[0], binaryFormat, binary);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetProgramBinary(&program: UInt32; bufSize: Int32; var length: Int32; binaryFormat: array of DummyEnum; binary: IntPtr);
    begin
      z_GetProgramBinary_ovr_0(&program, bufSize, length, binaryFormat[0], binary);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetProgramBinary(&program: UInt32; bufSize: Int32; var length: Int32; var binaryFormat: DummyEnum; binary: IntPtr);
    begin
      z_GetProgramBinary_ovr_0(&program, bufSize, length, binaryFormat, binary);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetProgramBinary(&program: UInt32; bufSize: Int32; var length: Int32; binaryFormat: IntPtr; binary: IntPtr);
    begin
      z_GetProgramBinary_ovr_2(&program, bufSize, length, binaryFormat, binary);
    end;
    public z_GetProgramBinary_ovr_6 := GetFuncOrNil&<procedure(&program: UInt32; bufSize: Int32; length: IntPtr; var binaryFormat: DummyEnum; binary: IntPtr)>(z_GetProgramBinary_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetProgramBinary(&program: UInt32; bufSize: Int32; length: IntPtr; binaryFormat: array of DummyEnum; binary: IntPtr);
    begin
      z_GetProgramBinary_ovr_6(&program, bufSize, length, binaryFormat[0], binary);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetProgramBinary(&program: UInt32; bufSize: Int32; length: IntPtr; var binaryFormat: DummyEnum; binary: IntPtr);
    begin
      z_GetProgramBinary_ovr_6(&program, bufSize, length, binaryFormat, binary);
    end;
    public z_GetProgramBinary_ovr_8 := GetFuncOrNil&<procedure(&program: UInt32; bufSize: Int32; length: IntPtr; binaryFormat: IntPtr; binary: IntPtr)>(z_GetProgramBinary_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetProgramBinary(&program: UInt32; bufSize: Int32; length: IntPtr; binaryFormat: IntPtr; binary: IntPtr);
    begin
      z_GetProgramBinary_ovr_8(&program, bufSize, length, binaryFormat, binary);
    end;
    
    // added in gl2.0
    public z_GetProgramInfoLog_adr := GetFuncAdr('glGetProgramInfoLog');
    public z_GetProgramInfoLog_ovr_0 := GetFuncOrNil&<procedure(&program: ProgramName; bufSize: Int32; var length: Int32; infoLog: IntPtr)>(z_GetProgramInfoLog_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetProgramInfoLog(&program: ProgramName; bufSize: Int32; var length: Int32; infoLog: IntPtr);
    begin
      z_GetProgramInfoLog_ovr_0(&program, bufSize, length, infoLog);
    end;
    public z_GetProgramInfoLog_ovr_1 := GetFuncOrNil&<procedure(&program: ProgramName; bufSize: Int32; length: IntPtr; infoLog: IntPtr)>(z_GetProgramInfoLog_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetProgramInfoLog(&program: ProgramName; bufSize: Int32; length: IntPtr; infoLog: IntPtr);
    begin
      z_GetProgramInfoLog_ovr_1(&program, bufSize, length, infoLog);
    end;
    
    // added in gl4.3
    public z_GetProgramInterfaceiv_adr := GetFuncAdr('glGetProgramInterfaceiv');
    public z_GetProgramInterfaceiv_ovr_0 := GetFuncOrNil&<procedure(&program: ProgramName; _programInterface: ProgramInterface; pname: ProgramInterfacePName; var &params: Int32)>(z_GetProgramInterfaceiv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetProgramInterfaceiv(&program: ProgramName; _programInterface: ProgramInterface; pname: ProgramInterfacePName; &params: array of Int32);
    begin
      z_GetProgramInterfaceiv_ovr_0(&program, _programInterface, pname, &params[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetProgramInterfaceiv(&program: ProgramName; _programInterface: ProgramInterface; pname: ProgramInterfacePName; var &params: Int32);
    begin
      z_GetProgramInterfaceiv_ovr_0(&program, _programInterface, pname, &params);
    end;
    public z_GetProgramInterfaceiv_ovr_2 := GetFuncOrNil&<procedure(&program: ProgramName; _programInterface: ProgramInterface; pname: ProgramInterfacePName; &params: IntPtr)>(z_GetProgramInterfaceiv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetProgramInterfaceiv(&program: ProgramName; _programInterface: ProgramInterface; pname: ProgramInterfacePName; &params: IntPtr);
    begin
      z_GetProgramInterfaceiv_ovr_2(&program, _programInterface, pname, &params);
    end;
    
    // added in gl2.0
    public z_GetProgramiv_adr := GetFuncAdr('glGetProgramiv');
    public z_GetProgramiv_ovr_0 := GetFuncOrNil&<procedure(&program: ProgramName; pname: ProgramPropertyARB; var &params: Int32)>(z_GetProgramiv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetProgramiv(&program: ProgramName; pname: ProgramPropertyARB; &params: array of Int32);
    begin
      z_GetProgramiv_ovr_0(&program, pname, &params[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetProgramiv(&program: ProgramName; pname: ProgramPropertyARB; var &params: Int32);
    begin
      z_GetProgramiv_ovr_0(&program, pname, &params);
    end;
    public z_GetProgramiv_ovr_2 := GetFuncOrNil&<procedure(&program: ProgramName; pname: ProgramPropertyARB; &params: IntPtr)>(z_GetProgramiv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetProgramiv(&program: ProgramName; pname: ProgramPropertyARB; &params: IntPtr);
    begin
      z_GetProgramiv_ovr_2(&program, pname, &params);
    end;
    
    // added in gl4.1
    public z_GetProgramPipelineInfoLog_adr := GetFuncAdr('glGetProgramPipelineInfoLog');
    public z_GetProgramPipelineInfoLog_ovr_0 := GetFuncOrNil&<procedure(pipeline: UInt32; bufSize: Int32; var length: Int32; infoLog: IntPtr)>(z_GetProgramPipelineInfoLog_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetProgramPipelineInfoLog(pipeline: UInt32; bufSize: Int32; length: array of Int32; infoLog: IntPtr);
    begin
      z_GetProgramPipelineInfoLog_ovr_0(pipeline, bufSize, length[0], infoLog);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetProgramPipelineInfoLog(pipeline: UInt32; bufSize: Int32; var length: Int32; infoLog: IntPtr);
    begin
      z_GetProgramPipelineInfoLog_ovr_0(pipeline, bufSize, length, infoLog);
    end;
    public z_GetProgramPipelineInfoLog_ovr_2 := GetFuncOrNil&<procedure(pipeline: UInt32; bufSize: Int32; length: IntPtr; infoLog: IntPtr)>(z_GetProgramPipelineInfoLog_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetProgramPipelineInfoLog(pipeline: UInt32; bufSize: Int32; length: IntPtr; infoLog: IntPtr);
    begin
      z_GetProgramPipelineInfoLog_ovr_2(pipeline, bufSize, length, infoLog);
    end;
    
    // added in gl4.1
    public z_GetProgramPipelineiv_adr := GetFuncAdr('glGetProgramPipelineiv');
    public z_GetProgramPipelineiv_ovr_0 := GetFuncOrNil&<procedure(pipeline: UInt32; pname: PipelineParameterName; var &params: Int32)>(z_GetProgramPipelineiv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetProgramPipelineiv(pipeline: UInt32; pname: PipelineParameterName; &params: array of Int32);
    begin
      z_GetProgramPipelineiv_ovr_0(pipeline, pname, &params[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetProgramPipelineiv(pipeline: UInt32; pname: PipelineParameterName; var &params: Int32);
    begin
      z_GetProgramPipelineiv_ovr_0(pipeline, pname, &params);
    end;
    public z_GetProgramPipelineiv_ovr_2 := GetFuncOrNil&<procedure(pipeline: UInt32; pname: PipelineParameterName; &params: IntPtr)>(z_GetProgramPipelineiv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetProgramPipelineiv(pipeline: UInt32; pname: PipelineParameterName; &params: IntPtr);
    begin
      z_GetProgramPipelineiv_ovr_2(pipeline, pname, &params);
    end;
    
    // added in gl4.3
    public z_GetProgramResourceIndex_adr := GetFuncAdr('glGetProgramResourceIndex');
    public z_GetProgramResourceIndex_ovr_0 := GetFuncOrNil&<function(&program: ProgramName; _programInterface: ProgramInterface; name: IntPtr): UInt32>(z_GetProgramResourceIndex_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetProgramResourceIndex(&program: ProgramName; _programInterface: ProgramInterface; name: string): UInt32;
    begin
      var par_3_str_ptr := Marshal.StringToHGlobalAnsi(name);
      Result := z_GetProgramResourceIndex_ovr_0(&program, _programInterface, par_3_str_ptr);
      Marshal.FreeHGlobal(par_3_str_ptr);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetProgramResourceIndex(&program: ProgramName; _programInterface: ProgramInterface; name: IntPtr): UInt32;
    begin
      Result := z_GetProgramResourceIndex_ovr_0(&program, _programInterface, name);
    end;
    
    // added in gl4.3
    public z_GetProgramResourceiv_adr := GetFuncAdr('glGetProgramResourceiv');
    public z_GetProgramResourceiv_ovr_0 := GetFuncOrNil&<procedure(&program: UInt32; _programInterface: ProgramInterface; index: UInt32; propCount: Int32; var props: ProgramResourceProperty; count: Int32; var length: Int32; var &params: Int32)>(z_GetProgramResourceiv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetProgramResourceiv(&program: UInt32; _programInterface: ProgramInterface; index: UInt32; propCount: Int32; props: array of ProgramResourceProperty; count: Int32; length: array of Int32; &params: array of Int32);
    begin
      z_GetProgramResourceiv_ovr_0(&program, _programInterface, index, propCount, props[0], count, length[0], &params[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetProgramResourceiv(&program: UInt32; _programInterface: ProgramInterface; index: UInt32; propCount: Int32; props: array of ProgramResourceProperty; count: Int32; length: array of Int32; var &params: Int32);
    begin
      z_GetProgramResourceiv_ovr_0(&program, _programInterface, index, propCount, props[0], count, length[0], &params);
    end;
    public z_GetProgramResourceiv_ovr_2 := GetFuncOrNil&<procedure(&program: UInt32; _programInterface: ProgramInterface; index: UInt32; propCount: Int32; var props: ProgramResourceProperty; count: Int32; var length: Int32; &params: IntPtr)>(z_GetProgramResourceiv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetProgramResourceiv(&program: UInt32; _programInterface: ProgramInterface; index: UInt32; propCount: Int32; props: array of ProgramResourceProperty; count: Int32; length: array of Int32; &params: IntPtr);
    begin
      z_GetProgramResourceiv_ovr_2(&program, _programInterface, index, propCount, props[0], count, length[0], &params);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetProgramResourceiv(&program: UInt32; _programInterface: ProgramInterface; index: UInt32; propCount: Int32; props: array of ProgramResourceProperty; count: Int32; var length: Int32; &params: array of Int32);
    begin
      z_GetProgramResourceiv_ovr_0(&program, _programInterface, index, propCount, props[0], count, length, &params[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetProgramResourceiv(&program: UInt32; _programInterface: ProgramInterface; index: UInt32; propCount: Int32; props: array of ProgramResourceProperty; count: Int32; var length: Int32; var &params: Int32);
    begin
      z_GetProgramResourceiv_ovr_0(&program, _programInterface, index, propCount, props[0], count, length, &params);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetProgramResourceiv(&program: UInt32; _programInterface: ProgramInterface; index: UInt32; propCount: Int32; props: array of ProgramResourceProperty; count: Int32; var length: Int32; &params: IntPtr);
    begin
      z_GetProgramResourceiv_ovr_2(&program, _programInterface, index, propCount, props[0], count, length, &params);
    end;
    public z_GetProgramResourceiv_ovr_6 := GetFuncOrNil&<procedure(&program: UInt32; _programInterface: ProgramInterface; index: UInt32; propCount: Int32; var props: ProgramResourceProperty; count: Int32; length: IntPtr; var &params: Int32)>(z_GetProgramResourceiv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetProgramResourceiv(&program: UInt32; _programInterface: ProgramInterface; index: UInt32; propCount: Int32; props: array of ProgramResourceProperty; count: Int32; length: IntPtr; &params: array of Int32);
    begin
      z_GetProgramResourceiv_ovr_6(&program, _programInterface, index, propCount, props[0], count, length, &params[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetProgramResourceiv(&program: UInt32; _programInterface: ProgramInterface; index: UInt32; propCount: Int32; props: array of ProgramResourceProperty; count: Int32; length: IntPtr; var &params: Int32);
    begin
      z_GetProgramResourceiv_ovr_6(&program, _programInterface, index, propCount, props[0], count, length, &params);
    end;
    public z_GetProgramResourceiv_ovr_8 := GetFuncOrNil&<procedure(&program: UInt32; _programInterface: ProgramInterface; index: UInt32; propCount: Int32; var props: ProgramResourceProperty; count: Int32; length: IntPtr; &params: IntPtr)>(z_GetProgramResourceiv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetProgramResourceiv(&program: UInt32; _programInterface: ProgramInterface; index: UInt32; propCount: Int32; props: array of ProgramResourceProperty; count: Int32; length: IntPtr; &params: IntPtr);
    begin
      z_GetProgramResourceiv_ovr_8(&program, _programInterface, index, propCount, props[0], count, length, &params);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetProgramResourceiv(&program: UInt32; _programInterface: ProgramInterface; index: UInt32; propCount: Int32; var props: ProgramResourceProperty; count: Int32; length: array of Int32; &params: array of Int32);
    begin
      z_GetProgramResourceiv_ovr_0(&program, _programInterface, index, propCount, props, count, length[0], &params[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetProgramResourceiv(&program: UInt32; _programInterface: ProgramInterface; index: UInt32; propCount: Int32; var props: ProgramResourceProperty; count: Int32; length: array of Int32; var &params: Int32);
    begin
      z_GetProgramResourceiv_ovr_0(&program, _programInterface, index, propCount, props, count, length[0], &params);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetProgramResourceiv(&program: UInt32; _programInterface: ProgramInterface; index: UInt32; propCount: Int32; var props: ProgramResourceProperty; count: Int32; length: array of Int32; &params: IntPtr);
    begin
      z_GetProgramResourceiv_ovr_2(&program, _programInterface, index, propCount, props, count, length[0], &params);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetProgramResourceiv(&program: UInt32; _programInterface: ProgramInterface; index: UInt32; propCount: Int32; var props: ProgramResourceProperty; count: Int32; var length: Int32; &params: array of Int32);
    begin
      z_GetProgramResourceiv_ovr_0(&program, _programInterface, index, propCount, props, count, length, &params[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetProgramResourceiv(&program: UInt32; _programInterface: ProgramInterface; index: UInt32; propCount: Int32; var props: ProgramResourceProperty; count: Int32; var length: Int32; var &params: Int32);
    begin
      z_GetProgramResourceiv_ovr_0(&program, _programInterface, index, propCount, props, count, length, &params);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetProgramResourceiv(&program: UInt32; _programInterface: ProgramInterface; index: UInt32; propCount: Int32; var props: ProgramResourceProperty; count: Int32; var length: Int32; &params: IntPtr);
    begin
      z_GetProgramResourceiv_ovr_2(&program, _programInterface, index, propCount, props, count, length, &params);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetProgramResourceiv(&program: UInt32; _programInterface: ProgramInterface; index: UInt32; propCount: Int32; var props: ProgramResourceProperty; count: Int32; length: IntPtr; &params: array of Int32);
    begin
      z_GetProgramResourceiv_ovr_6(&program, _programInterface, index, propCount, props, count, length, &params[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetProgramResourceiv(&program: UInt32; _programInterface: ProgramInterface; index: UInt32; propCount: Int32; var props: ProgramResourceProperty; count: Int32; length: IntPtr; var &params: Int32);
    begin
      z_GetProgramResourceiv_ovr_6(&program, _programInterface, index, propCount, props, count, length, &params);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetProgramResourceiv(&program: UInt32; _programInterface: ProgramInterface; index: UInt32; propCount: Int32; var props: ProgramResourceProperty; count: Int32; length: IntPtr; &params: IntPtr);
    begin
      z_GetProgramResourceiv_ovr_8(&program, _programInterface, index, propCount, props, count, length, &params);
    end;
    public z_GetProgramResourceiv_ovr_18 := GetFuncOrNil&<procedure(&program: UInt32; _programInterface: ProgramInterface; index: UInt32; propCount: Int32; props: IntPtr; count: Int32; var length: Int32; var &params: Int32)>(z_GetProgramResourceiv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetProgramResourceiv(&program: UInt32; _programInterface: ProgramInterface; index: UInt32; propCount: Int32; props: IntPtr; count: Int32; length: array of Int32; &params: array of Int32);
    begin
      z_GetProgramResourceiv_ovr_18(&program, _programInterface, index, propCount, props, count, length[0], &params[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetProgramResourceiv(&program: UInt32; _programInterface: ProgramInterface; index: UInt32; propCount: Int32; props: IntPtr; count: Int32; length: array of Int32; var &params: Int32);
    begin
      z_GetProgramResourceiv_ovr_18(&program, _programInterface, index, propCount, props, count, length[0], &params);
    end;
    public z_GetProgramResourceiv_ovr_20 := GetFuncOrNil&<procedure(&program: UInt32; _programInterface: ProgramInterface; index: UInt32; propCount: Int32; props: IntPtr; count: Int32; var length: Int32; &params: IntPtr)>(z_GetProgramResourceiv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetProgramResourceiv(&program: UInt32; _programInterface: ProgramInterface; index: UInt32; propCount: Int32; props: IntPtr; count: Int32; length: array of Int32; &params: IntPtr);
    begin
      z_GetProgramResourceiv_ovr_20(&program, _programInterface, index, propCount, props, count, length[0], &params);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetProgramResourceiv(&program: UInt32; _programInterface: ProgramInterface; index: UInt32; propCount: Int32; props: IntPtr; count: Int32; var length: Int32; &params: array of Int32);
    begin
      z_GetProgramResourceiv_ovr_18(&program, _programInterface, index, propCount, props, count, length, &params[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetProgramResourceiv(&program: UInt32; _programInterface: ProgramInterface; index: UInt32; propCount: Int32; props: IntPtr; count: Int32; var length: Int32; var &params: Int32);
    begin
      z_GetProgramResourceiv_ovr_18(&program, _programInterface, index, propCount, props, count, length, &params);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetProgramResourceiv(&program: UInt32; _programInterface: ProgramInterface; index: UInt32; propCount: Int32; props: IntPtr; count: Int32; var length: Int32; &params: IntPtr);
    begin
      z_GetProgramResourceiv_ovr_20(&program, _programInterface, index, propCount, props, count, length, &params);
    end;
    public z_GetProgramResourceiv_ovr_24 := GetFuncOrNil&<procedure(&program: UInt32; _programInterface: ProgramInterface; index: UInt32; propCount: Int32; props: IntPtr; count: Int32; length: IntPtr; var &params: Int32)>(z_GetProgramResourceiv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetProgramResourceiv(&program: UInt32; _programInterface: ProgramInterface; index: UInt32; propCount: Int32; props: IntPtr; count: Int32; length: IntPtr; &params: array of Int32);
    begin
      z_GetProgramResourceiv_ovr_24(&program, _programInterface, index, propCount, props, count, length, &params[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetProgramResourceiv(&program: UInt32; _programInterface: ProgramInterface; index: UInt32; propCount: Int32; props: IntPtr; count: Int32; length: IntPtr; var &params: Int32);
    begin
      z_GetProgramResourceiv_ovr_24(&program, _programInterface, index, propCount, props, count, length, &params);
    end;
    public z_GetProgramResourceiv_ovr_26 := GetFuncOrNil&<procedure(&program: UInt32; _programInterface: ProgramInterface; index: UInt32; propCount: Int32; props: IntPtr; count: Int32; length: IntPtr; &params: IntPtr)>(z_GetProgramResourceiv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetProgramResourceiv(&program: UInt32; _programInterface: ProgramInterface; index: UInt32; propCount: Int32; props: IntPtr; count: Int32; length: IntPtr; &params: IntPtr);
    begin
      z_GetProgramResourceiv_ovr_26(&program, _programInterface, index, propCount, props, count, length, &params);
    end;
    
    // added in gl4.3
    public z_GetProgramResourceLocation_adr := GetFuncAdr('glGetProgramResourceLocation');
    public z_GetProgramResourceLocation_ovr_0 := GetFuncOrNil&<function(&program: ProgramName; _programInterface: ProgramInterface; name: IntPtr): Int32>(z_GetProgramResourceLocation_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetProgramResourceLocation(&program: ProgramName; _programInterface: ProgramInterface; name: string): Int32;
    begin
      var par_3_str_ptr := Marshal.StringToHGlobalAnsi(name);
      Result := z_GetProgramResourceLocation_ovr_0(&program, _programInterface, par_3_str_ptr);
      Marshal.FreeHGlobal(par_3_str_ptr);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetProgramResourceLocation(&program: ProgramName; _programInterface: ProgramInterface; name: IntPtr): Int32;
    begin
      Result := z_GetProgramResourceLocation_ovr_0(&program, _programInterface, name);
    end;
    
    // added in gl4.3
    public z_GetProgramResourceLocationIndex_adr := GetFuncAdr('glGetProgramResourceLocationIndex');
    public z_GetProgramResourceLocationIndex_ovr_0 := GetFuncOrNil&<function(&program: ProgramName; _programInterface: ProgramInterface; name: IntPtr): Int32>(z_GetProgramResourceLocationIndex_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetProgramResourceLocationIndex(&program: ProgramName; _programInterface: ProgramInterface; name: string): Int32;
    begin
      var par_3_str_ptr := Marshal.StringToHGlobalAnsi(name);
      Result := z_GetProgramResourceLocationIndex_ovr_0(&program, _programInterface, par_3_str_ptr);
      Marshal.FreeHGlobal(par_3_str_ptr);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetProgramResourceLocationIndex(&program: ProgramName; _programInterface: ProgramInterface; name: IntPtr): Int32;
    begin
      Result := z_GetProgramResourceLocationIndex_ovr_0(&program, _programInterface, name);
    end;
    
    // added in gl4.3
    public z_GetProgramResourceName_adr := GetFuncAdr('glGetProgramResourceName');
    public z_GetProgramResourceName_ovr_0 := GetFuncOrNil&<procedure(&program: UInt32; _programInterface: ProgramInterface; index: UInt32; bufSize: Int32; var length: Int32; name: IntPtr)>(z_GetProgramResourceName_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetProgramResourceName(&program: UInt32; _programInterface: ProgramInterface; index: UInt32; bufSize: Int32; length: array of Int32; name: IntPtr);
    begin
      z_GetProgramResourceName_ovr_0(&program, _programInterface, index, bufSize, length[0], name);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetProgramResourceName(&program: UInt32; _programInterface: ProgramInterface; index: UInt32; bufSize: Int32; var length: Int32; name: IntPtr);
    begin
      z_GetProgramResourceName_ovr_0(&program, _programInterface, index, bufSize, length, name);
    end;
    public z_GetProgramResourceName_ovr_2 := GetFuncOrNil&<procedure(&program: UInt32; _programInterface: ProgramInterface; index: UInt32; bufSize: Int32; length: IntPtr; name: IntPtr)>(z_GetProgramResourceName_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetProgramResourceName(&program: UInt32; _programInterface: ProgramInterface; index: UInt32; bufSize: Int32; length: IntPtr; name: IntPtr);
    begin
      z_GetProgramResourceName_ovr_2(&program, _programInterface, index, bufSize, length, name);
    end;
    
    // added in gl4.0
    public z_GetProgramStageiv_adr := GetFuncAdr('glGetProgramStageiv');
    public z_GetProgramStageiv_ovr_0 := GetFuncOrNil&<procedure(&program: ProgramName; _shadertype: ShaderType; pname: ProgramStagePName; var values: Int32)>(z_GetProgramStageiv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetProgramStageiv(&program: ProgramName; _shadertype: ShaderType; pname: ProgramStagePName; values: array of Int32);
    begin
      z_GetProgramStageiv_ovr_0(&program, _shadertype, pname, values[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetProgramStageiv(&program: ProgramName; _shadertype: ShaderType; pname: ProgramStagePName; var values: Int32);
    begin
      z_GetProgramStageiv_ovr_0(&program, _shadertype, pname, values);
    end;
    public z_GetProgramStageiv_ovr_2 := GetFuncOrNil&<procedure(&program: ProgramName; _shadertype: ShaderType; pname: ProgramStagePName; values: IntPtr)>(z_GetProgramStageiv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetProgramStageiv(&program: ProgramName; _shadertype: ShaderType; pname: ProgramStagePName; values: IntPtr);
    begin
      z_GetProgramStageiv_ovr_2(&program, _shadertype, pname, values);
    end;
    
    // added in gl4.5
    public z_GetQueryBufferObjecti64v_adr := GetFuncAdr('glGetQueryBufferObjecti64v');
    public z_GetQueryBufferObjecti64v_ovr_0 := GetFuncOrNil&<procedure(id: QueryName; buffer: BufferName; pname: QueryObjectParameterName; offset: IntPtr)>(z_GetQueryBufferObjecti64v_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetQueryBufferObjecti64v(id: QueryName; buffer: BufferName; pname: QueryObjectParameterName; offset: IntPtr);
    begin
      z_GetQueryBufferObjecti64v_ovr_0(id, buffer, pname, offset);
    end;
    
    // added in gl4.5
    public z_GetQueryBufferObjectiv_adr := GetFuncAdr('glGetQueryBufferObjectiv');
    public z_GetQueryBufferObjectiv_ovr_0 := GetFuncOrNil&<procedure(id: QueryName; buffer: BufferName; pname: QueryObjectParameterName; offset: IntPtr)>(z_GetQueryBufferObjectiv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetQueryBufferObjectiv(id: QueryName; buffer: BufferName; pname: QueryObjectParameterName; offset: IntPtr);
    begin
      z_GetQueryBufferObjectiv_ovr_0(id, buffer, pname, offset);
    end;
    
    // added in gl4.5
    public z_GetQueryBufferObjectui64v_adr := GetFuncAdr('glGetQueryBufferObjectui64v');
    public z_GetQueryBufferObjectui64v_ovr_0 := GetFuncOrNil&<procedure(id: QueryName; buffer: BufferName; pname: QueryObjectParameterName; offset: IntPtr)>(z_GetQueryBufferObjectui64v_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetQueryBufferObjectui64v(id: QueryName; buffer: BufferName; pname: QueryObjectParameterName; offset: IntPtr);
    begin
      z_GetQueryBufferObjectui64v_ovr_0(id, buffer, pname, offset);
    end;
    
    // added in gl4.5
    public z_GetQueryBufferObjectuiv_adr := GetFuncAdr('glGetQueryBufferObjectuiv');
    public z_GetQueryBufferObjectuiv_ovr_0 := GetFuncOrNil&<procedure(id: QueryName; buffer: BufferName; pname: QueryObjectParameterName; offset: IntPtr)>(z_GetQueryBufferObjectuiv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetQueryBufferObjectuiv(id: QueryName; buffer: BufferName; pname: QueryObjectParameterName; offset: IntPtr);
    begin
      z_GetQueryBufferObjectuiv_ovr_0(id, buffer, pname, offset);
    end;
    
    // added in gl4.0
    public z_GetQueryIndexediv_adr := GetFuncAdr('glGetQueryIndexediv');
    public z_GetQueryIndexediv_ovr_0 := GetFuncOrNil&<procedure(target: QueryTarget; index: UInt32; pname: QueryParameterName; var &params: Int32)>(z_GetQueryIndexediv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetQueryIndexediv(target: QueryTarget; index: UInt32; pname: QueryParameterName; &params: array of Int32);
    begin
      z_GetQueryIndexediv_ovr_0(target, index, pname, &params[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetQueryIndexediv(target: QueryTarget; index: UInt32; pname: QueryParameterName; var &params: Int32);
    begin
      z_GetQueryIndexediv_ovr_0(target, index, pname, &params);
    end;
    public z_GetQueryIndexediv_ovr_2 := GetFuncOrNil&<procedure(target: QueryTarget; index: UInt32; pname: QueryParameterName; &params: IntPtr)>(z_GetQueryIndexediv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetQueryIndexediv(target: QueryTarget; index: UInt32; pname: QueryParameterName; &params: IntPtr);
    begin
      z_GetQueryIndexediv_ovr_2(target, index, pname, &params);
    end;
    
    // added in gl1.5
    public z_GetQueryiv_adr := GetFuncAdr('glGetQueryiv');
    public z_GetQueryiv_ovr_0 := GetFuncOrNil&<procedure(target: QueryTarget; pname: QueryParameterName; var &params: Int32)>(z_GetQueryiv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetQueryiv(target: QueryTarget; pname: QueryParameterName; &params: array of Int32);
    begin
      z_GetQueryiv_ovr_0(target, pname, &params[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetQueryiv(target: QueryTarget; pname: QueryParameterName; var &params: Int32);
    begin
      z_GetQueryiv_ovr_0(target, pname, &params);
    end;
    public z_GetQueryiv_ovr_2 := GetFuncOrNil&<procedure(target: QueryTarget; pname: QueryParameterName; &params: IntPtr)>(z_GetQueryiv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetQueryiv(target: QueryTarget; pname: QueryParameterName; &params: IntPtr);
    begin
      z_GetQueryiv_ovr_2(target, pname, &params);
    end;
    
    // added in gl3.3
    public z_GetQueryObjecti64v_adr := GetFuncAdr('glGetQueryObjecti64v');
    public z_GetQueryObjecti64v_ovr_0 := GetFuncOrNil&<procedure(id: UInt32; pname: QueryObjectParameterName; var &params: Int64)>(z_GetQueryObjecti64v_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetQueryObjecti64v(id: UInt32; pname: QueryObjectParameterName; &params: array of Int64);
    begin
      z_GetQueryObjecti64v_ovr_0(id, pname, &params[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetQueryObjecti64v(id: UInt32; pname: QueryObjectParameterName; var &params: Int64);
    begin
      z_GetQueryObjecti64v_ovr_0(id, pname, &params);
    end;
    public z_GetQueryObjecti64v_ovr_2 := GetFuncOrNil&<procedure(id: UInt32; pname: QueryObjectParameterName; &params: IntPtr)>(z_GetQueryObjecti64v_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetQueryObjecti64v(id: UInt32; pname: QueryObjectParameterName; &params: IntPtr);
    begin
      z_GetQueryObjecti64v_ovr_2(id, pname, &params);
    end;
    
    // added in gl1.5
    public z_GetQueryObjectiv_adr := GetFuncAdr('glGetQueryObjectiv');
    public z_GetQueryObjectiv_ovr_0 := GetFuncOrNil&<procedure(id: UInt32; pname: QueryObjectParameterName; var &params: Int32)>(z_GetQueryObjectiv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetQueryObjectiv(id: UInt32; pname: QueryObjectParameterName; &params: array of Int32);
    begin
      z_GetQueryObjectiv_ovr_0(id, pname, &params[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetQueryObjectiv(id: UInt32; pname: QueryObjectParameterName; var &params: Int32);
    begin
      z_GetQueryObjectiv_ovr_0(id, pname, &params);
    end;
    public z_GetQueryObjectiv_ovr_2 := GetFuncOrNil&<procedure(id: UInt32; pname: QueryObjectParameterName; &params: IntPtr)>(z_GetQueryObjectiv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetQueryObjectiv(id: UInt32; pname: QueryObjectParameterName; &params: IntPtr);
    begin
      z_GetQueryObjectiv_ovr_2(id, pname, &params);
    end;
    
    // added in gl3.3
    public z_GetQueryObjectui64v_adr := GetFuncAdr('glGetQueryObjectui64v');
    public z_GetQueryObjectui64v_ovr_0 := GetFuncOrNil&<procedure(id: UInt32; pname: QueryObjectParameterName; var &params: UInt64)>(z_GetQueryObjectui64v_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetQueryObjectui64v(id: UInt32; pname: QueryObjectParameterName; &params: array of UInt64);
    begin
      z_GetQueryObjectui64v_ovr_0(id, pname, &params[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetQueryObjectui64v(id: UInt32; pname: QueryObjectParameterName; var &params: UInt64);
    begin
      z_GetQueryObjectui64v_ovr_0(id, pname, &params);
    end;
    public z_GetQueryObjectui64v_ovr_2 := GetFuncOrNil&<procedure(id: UInt32; pname: QueryObjectParameterName; &params: IntPtr)>(z_GetQueryObjectui64v_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetQueryObjectui64v(id: UInt32; pname: QueryObjectParameterName; &params: IntPtr);
    begin
      z_GetQueryObjectui64v_ovr_2(id, pname, &params);
    end;
    
    // added in gl1.5
    public z_GetQueryObjectuiv_adr := GetFuncAdr('glGetQueryObjectuiv');
    public z_GetQueryObjectuiv_ovr_0 := GetFuncOrNil&<procedure(id: UInt32; pname: QueryObjectParameterName; var &params: UInt32)>(z_GetQueryObjectuiv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetQueryObjectuiv(id: UInt32; pname: QueryObjectParameterName; &params: array of UInt32);
    begin
      z_GetQueryObjectuiv_ovr_0(id, pname, &params[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetQueryObjectuiv(id: UInt32; pname: QueryObjectParameterName; var &params: UInt32);
    begin
      z_GetQueryObjectuiv_ovr_0(id, pname, &params);
    end;
    public z_GetQueryObjectuiv_ovr_2 := GetFuncOrNil&<procedure(id: UInt32; pname: QueryObjectParameterName; &params: IntPtr)>(z_GetQueryObjectuiv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetQueryObjectuiv(id: UInt32; pname: QueryObjectParameterName; &params: IntPtr);
    begin
      z_GetQueryObjectuiv_ovr_2(id, pname, &params);
    end;
    
    // added in gl3.0
    public z_GetRenderbufferParameteriv_adr := GetFuncAdr('glGetRenderbufferParameteriv');
    public z_GetRenderbufferParameteriv_ovr_0 := GetFuncOrNil&<procedure(target: RenderbufferTarget; pname: RenderbufferParameterName; var &params: Int32)>(z_GetRenderbufferParameteriv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetRenderbufferParameteriv(target: RenderbufferTarget; pname: RenderbufferParameterName; &params: array of Int32);
    begin
      z_GetRenderbufferParameteriv_ovr_0(target, pname, &params[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetRenderbufferParameteriv(target: RenderbufferTarget; pname: RenderbufferParameterName; var &params: Int32);
    begin
      z_GetRenderbufferParameteriv_ovr_0(target, pname, &params);
    end;
    public z_GetRenderbufferParameteriv_ovr_2 := GetFuncOrNil&<procedure(target: RenderbufferTarget; pname: RenderbufferParameterName; &params: IntPtr)>(z_GetRenderbufferParameteriv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetRenderbufferParameteriv(target: RenderbufferTarget; pname: RenderbufferParameterName; &params: IntPtr);
    begin
      z_GetRenderbufferParameteriv_ovr_2(target, pname, &params);
    end;
    
    // added in gl3.3
    public z_GetSamplerParameterfv_adr := GetFuncAdr('glGetSamplerParameterfv');
    public z_GetSamplerParameterfv_ovr_0 := GetFuncOrNil&<procedure(sampler: UInt32; pname: SamplerParameterF; var &params: single)>(z_GetSamplerParameterfv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetSamplerParameterfv(sampler: UInt32; pname: SamplerParameterF; &params: array of single);
    begin
      z_GetSamplerParameterfv_ovr_0(sampler, pname, &params[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetSamplerParameterfv(sampler: UInt32; pname: SamplerParameterF; var &params: single);
    begin
      z_GetSamplerParameterfv_ovr_0(sampler, pname, &params);
    end;
    public z_GetSamplerParameterfv_ovr_2 := GetFuncOrNil&<procedure(sampler: UInt32; pname: SamplerParameterF; &params: IntPtr)>(z_GetSamplerParameterfv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetSamplerParameterfv(sampler: UInt32; pname: SamplerParameterF; &params: IntPtr);
    begin
      z_GetSamplerParameterfv_ovr_2(sampler, pname, &params);
    end;
    
    // added in gl3.3
    public z_GetSamplerParameterIiv_adr := GetFuncAdr('glGetSamplerParameterIiv');
    public z_GetSamplerParameterIiv_ovr_0 := GetFuncOrNil&<procedure(sampler: UInt32; pname: SamplerParameterI; var &params: Int32)>(z_GetSamplerParameterIiv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetSamplerParameterIiv(sampler: UInt32; pname: SamplerParameterI; &params: array of Int32);
    begin
      z_GetSamplerParameterIiv_ovr_0(sampler, pname, &params[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetSamplerParameterIiv(sampler: UInt32; pname: SamplerParameterI; var &params: Int32);
    begin
      z_GetSamplerParameterIiv_ovr_0(sampler, pname, &params);
    end;
    public z_GetSamplerParameterIiv_ovr_2 := GetFuncOrNil&<procedure(sampler: UInt32; pname: SamplerParameterI; &params: IntPtr)>(z_GetSamplerParameterIiv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetSamplerParameterIiv(sampler: UInt32; pname: SamplerParameterI; &params: IntPtr);
    begin
      z_GetSamplerParameterIiv_ovr_2(sampler, pname, &params);
    end;
    
    // added in gl3.3
    public z_GetSamplerParameterIuiv_adr := GetFuncAdr('glGetSamplerParameterIuiv');
    public z_GetSamplerParameterIuiv_ovr_0 := GetFuncOrNil&<procedure(sampler: UInt32; pname: SamplerParameterI; var &params: UInt32)>(z_GetSamplerParameterIuiv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetSamplerParameterIuiv(sampler: UInt32; pname: SamplerParameterI; &params: array of UInt32);
    begin
      z_GetSamplerParameterIuiv_ovr_0(sampler, pname, &params[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetSamplerParameterIuiv(sampler: UInt32; pname: SamplerParameterI; var &params: UInt32);
    begin
      z_GetSamplerParameterIuiv_ovr_0(sampler, pname, &params);
    end;
    public z_GetSamplerParameterIuiv_ovr_2 := GetFuncOrNil&<procedure(sampler: UInt32; pname: SamplerParameterI; &params: IntPtr)>(z_GetSamplerParameterIuiv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetSamplerParameterIuiv(sampler: UInt32; pname: SamplerParameterI; &params: IntPtr);
    begin
      z_GetSamplerParameterIuiv_ovr_2(sampler, pname, &params);
    end;
    
    // added in gl3.3
    public z_GetSamplerParameteriv_adr := GetFuncAdr('glGetSamplerParameteriv');
    public z_GetSamplerParameteriv_ovr_0 := GetFuncOrNil&<procedure(sampler: UInt32; pname: SamplerParameterI; var &params: Int32)>(z_GetSamplerParameteriv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetSamplerParameteriv(sampler: UInt32; pname: SamplerParameterI; &params: array of Int32);
    begin
      z_GetSamplerParameteriv_ovr_0(sampler, pname, &params[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetSamplerParameteriv(sampler: UInt32; pname: SamplerParameterI; var &params: Int32);
    begin
      z_GetSamplerParameteriv_ovr_0(sampler, pname, &params);
    end;
    public z_GetSamplerParameteriv_ovr_2 := GetFuncOrNil&<procedure(sampler: UInt32; pname: SamplerParameterI; &params: IntPtr)>(z_GetSamplerParameteriv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetSamplerParameteriv(sampler: UInt32; pname: SamplerParameterI; &params: IntPtr);
    begin
      z_GetSamplerParameteriv_ovr_2(sampler, pname, &params);
    end;
    
    // added in gl2.0
    public z_GetShaderInfoLog_adr := GetFuncAdr('glGetShaderInfoLog');
    public z_GetShaderInfoLog_ovr_0 := GetFuncOrNil&<procedure(shader: ShaderName; bufSize: Int32; var length: Int32; infoLog: IntPtr)>(z_GetShaderInfoLog_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetShaderInfoLog(shader: ShaderName; bufSize: Int32; var length: Int32; infoLog: IntPtr);
    begin
      z_GetShaderInfoLog_ovr_0(shader, bufSize, length, infoLog);
    end;
    public z_GetShaderInfoLog_ovr_1 := GetFuncOrNil&<procedure(shader: ShaderName; bufSize: Int32; length: IntPtr; infoLog: IntPtr)>(z_GetShaderInfoLog_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetShaderInfoLog(shader: ShaderName; bufSize: Int32; length: IntPtr; infoLog: IntPtr);
    begin
      z_GetShaderInfoLog_ovr_1(shader, bufSize, length, infoLog);
    end;
    
    // added in gl2.0
    public z_GetShaderiv_adr := GetFuncAdr('glGetShaderiv');
    public z_GetShaderiv_ovr_0 := GetFuncOrNil&<procedure(shader: ShaderName; pname: ShaderParameterName; var &params: Int32)>(z_GetShaderiv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetShaderiv(shader: ShaderName; pname: ShaderParameterName; &params: array of Int32);
    begin
      z_GetShaderiv_ovr_0(shader, pname, &params[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetShaderiv(shader: ShaderName; pname: ShaderParameterName; var &params: Int32);
    begin
      z_GetShaderiv_ovr_0(shader, pname, &params);
    end;
    public z_GetShaderiv_ovr_2 := GetFuncOrNil&<procedure(shader: ShaderName; pname: ShaderParameterName; &params: IntPtr)>(z_GetShaderiv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetShaderiv(shader: ShaderName; pname: ShaderParameterName; &params: IntPtr);
    begin
      z_GetShaderiv_ovr_2(shader, pname, &params);
    end;
    
    // added in gl4.1
    public z_GetShaderPrecisionFormat_adr := GetFuncAdr('glGetShaderPrecisionFormat');
    public z_GetShaderPrecisionFormat_ovr_0 := GetFuncOrNil&<procedure(_shadertype: ShaderType; _precisiontype: PrecisionType; var range: Int32; var precision: Int32)>(z_GetShaderPrecisionFormat_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetShaderPrecisionFormat(_shadertype: ShaderType; _precisiontype: PrecisionType; range: array of Int32; precision: array of Int32);
    begin
      z_GetShaderPrecisionFormat_ovr_0(_shadertype, _precisiontype, range[0], precision[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetShaderPrecisionFormat(_shadertype: ShaderType; _precisiontype: PrecisionType; range: array of Int32; var precision: Int32);
    begin
      z_GetShaderPrecisionFormat_ovr_0(_shadertype, _precisiontype, range[0], precision);
    end;
    public z_GetShaderPrecisionFormat_ovr_2 := GetFuncOrNil&<procedure(_shadertype: ShaderType; _precisiontype: PrecisionType; var range: Int32; precision: IntPtr)>(z_GetShaderPrecisionFormat_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetShaderPrecisionFormat(_shadertype: ShaderType; _precisiontype: PrecisionType; range: array of Int32; precision: IntPtr);
    begin
      z_GetShaderPrecisionFormat_ovr_2(_shadertype, _precisiontype, range[0], precision);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetShaderPrecisionFormat(_shadertype: ShaderType; _precisiontype: PrecisionType; var range: Int32; precision: array of Int32);
    begin
      z_GetShaderPrecisionFormat_ovr_0(_shadertype, _precisiontype, range, precision[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetShaderPrecisionFormat(_shadertype: ShaderType; _precisiontype: PrecisionType; var range: Int32; var precision: Int32);
    begin
      z_GetShaderPrecisionFormat_ovr_0(_shadertype, _precisiontype, range, precision);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetShaderPrecisionFormat(_shadertype: ShaderType; _precisiontype: PrecisionType; var range: Int32; precision: IntPtr);
    begin
      z_GetShaderPrecisionFormat_ovr_2(_shadertype, _precisiontype, range, precision);
    end;
    public z_GetShaderPrecisionFormat_ovr_6 := GetFuncOrNil&<procedure(_shadertype: ShaderType; _precisiontype: PrecisionType; range: IntPtr; var precision: Int32)>(z_GetShaderPrecisionFormat_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetShaderPrecisionFormat(_shadertype: ShaderType; _precisiontype: PrecisionType; range: IntPtr; precision: array of Int32);
    begin
      z_GetShaderPrecisionFormat_ovr_6(_shadertype, _precisiontype, range, precision[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetShaderPrecisionFormat(_shadertype: ShaderType; _precisiontype: PrecisionType; range: IntPtr; var precision: Int32);
    begin
      z_GetShaderPrecisionFormat_ovr_6(_shadertype, _precisiontype, range, precision);
    end;
    public z_GetShaderPrecisionFormat_ovr_8 := GetFuncOrNil&<procedure(_shadertype: ShaderType; _precisiontype: PrecisionType; range: IntPtr; precision: IntPtr)>(z_GetShaderPrecisionFormat_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetShaderPrecisionFormat(_shadertype: ShaderType; _precisiontype: PrecisionType; range: IntPtr; precision: IntPtr);
    begin
      z_GetShaderPrecisionFormat_ovr_8(_shadertype, _precisiontype, range, precision);
    end;
    
    // added in gl2.0
    public z_GetShaderSource_adr := GetFuncAdr('glGetShaderSource');
    public z_GetShaderSource_ovr_0 := GetFuncOrNil&<procedure(shader: UInt32; bufSize: Int32; var length: Int32; source: IntPtr)>(z_GetShaderSource_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetShaderSource(shader: UInt32; bufSize: Int32; length: array of Int32; source: IntPtr);
    begin
      z_GetShaderSource_ovr_0(shader, bufSize, length[0], source);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetShaderSource(shader: UInt32; bufSize: Int32; var length: Int32; source: IntPtr);
    begin
      z_GetShaderSource_ovr_0(shader, bufSize, length, source);
    end;
    public z_GetShaderSource_ovr_2 := GetFuncOrNil&<procedure(shader: UInt32; bufSize: Int32; length: IntPtr; source: IntPtr)>(z_GetShaderSource_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetShaderSource(shader: UInt32; bufSize: Int32; length: IntPtr; source: IntPtr);
    begin
      z_GetShaderSource_ovr_2(shader, bufSize, length, source);
    end;
    
    // added in gl1.0
    private [Result: MarshalAs(UnmanagedType.LPStr)] static function _z_GetString_ovr0(name: StringName): string;
    external 'opengl32.dll' name 'glGetString';
    public static z_GetString_ovr0 := _z_GetString_ovr0;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetString(name: StringName): string := z_GetString_ovr0(name);
    
    // added in gl3.0
    public z_GetStringi_adr := GetFuncAdr('glGetStringi');
    public z_GetStringi_ovr_0 := GetFuncOrNil&<function(name: StringName; index: UInt32): IntPtr>(z_GetStringi_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetStringi(name: StringName; index: UInt32): string;
    begin
      var par_0_str_ptr := z_GetStringi_ovr_0(name, index);
      Result := Marshal.PtrToStringAnsi(par_0_str_ptr);
    end;
    
    // added in gl4.0
    public z_GetSubroutineIndex_adr := GetFuncAdr('glGetSubroutineIndex');
    public z_GetSubroutineIndex_ovr_0 := GetFuncOrNil&<function(&program: ProgramName; _shadertype: ShaderType; name: IntPtr): UInt32>(z_GetSubroutineIndex_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetSubroutineIndex(&program: ProgramName; _shadertype: ShaderType; name: string): UInt32;
    begin
      var par_3_str_ptr := Marshal.StringToHGlobalAnsi(name);
      Result := z_GetSubroutineIndex_ovr_0(&program, _shadertype, par_3_str_ptr);
      Marshal.FreeHGlobal(par_3_str_ptr);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetSubroutineIndex(&program: ProgramName; _shadertype: ShaderType; name: IntPtr): UInt32;
    begin
      Result := z_GetSubroutineIndex_ovr_0(&program, _shadertype, name);
    end;
    
    // added in gl4.0
    public z_GetSubroutineUniformLocation_adr := GetFuncAdr('glGetSubroutineUniformLocation');
    public z_GetSubroutineUniformLocation_ovr_0 := GetFuncOrNil&<function(&program: ProgramName; _shadertype: ShaderType; name: IntPtr): Int32>(z_GetSubroutineUniformLocation_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetSubroutineUniformLocation(&program: ProgramName; _shadertype: ShaderType; name: string): Int32;
    begin
      var par_3_str_ptr := Marshal.StringToHGlobalAnsi(name);
      Result := z_GetSubroutineUniformLocation_ovr_0(&program, _shadertype, par_3_str_ptr);
      Marshal.FreeHGlobal(par_3_str_ptr);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetSubroutineUniformLocation(&program: ProgramName; _shadertype: ShaderType; name: IntPtr): Int32;
    begin
      Result := z_GetSubroutineUniformLocation_ovr_0(&program, _shadertype, name);
    end;
    
    // added in gl3.2
    public z_GetSynciv_adr := GetFuncAdr('glGetSynciv');
    public z_GetSynciv_ovr_0 := GetFuncOrNil&<procedure(sync: GLsync; pname: SyncParameterName; count: Int32; var length: Int32; var values: Int32)>(z_GetSynciv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetSynciv(sync: GLsync; pname: SyncParameterName; count: Int32; length: array of Int32; values: array of Int32);
    begin
      z_GetSynciv_ovr_0(sync, pname, count, length[0], values[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetSynciv(sync: GLsync; pname: SyncParameterName; count: Int32; length: array of Int32; var values: Int32);
    begin
      z_GetSynciv_ovr_0(sync, pname, count, length[0], values);
    end;
    public z_GetSynciv_ovr_2 := GetFuncOrNil&<procedure(sync: GLsync; pname: SyncParameterName; count: Int32; var length: Int32; values: IntPtr)>(z_GetSynciv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetSynciv(sync: GLsync; pname: SyncParameterName; count: Int32; length: array of Int32; values: IntPtr);
    begin
      z_GetSynciv_ovr_2(sync, pname, count, length[0], values);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetSynciv(sync: GLsync; pname: SyncParameterName; count: Int32; var length: Int32; values: array of Int32);
    begin
      z_GetSynciv_ovr_0(sync, pname, count, length, values[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetSynciv(sync: GLsync; pname: SyncParameterName; count: Int32; var length: Int32; var values: Int32);
    begin
      z_GetSynciv_ovr_0(sync, pname, count, length, values);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetSynciv(sync: GLsync; pname: SyncParameterName; count: Int32; var length: Int32; values: IntPtr);
    begin
      z_GetSynciv_ovr_2(sync, pname, count, length, values);
    end;
    public z_GetSynciv_ovr_6 := GetFuncOrNil&<procedure(sync: GLsync; pname: SyncParameterName; count: Int32; length: IntPtr; var values: Int32)>(z_GetSynciv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetSynciv(sync: GLsync; pname: SyncParameterName; count: Int32; length: IntPtr; values: array of Int32);
    begin
      z_GetSynciv_ovr_6(sync, pname, count, length, values[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetSynciv(sync: GLsync; pname: SyncParameterName; count: Int32; length: IntPtr; var values: Int32);
    begin
      z_GetSynciv_ovr_6(sync, pname, count, length, values);
    end;
    public z_GetSynciv_ovr_8 := GetFuncOrNil&<procedure(sync: GLsync; pname: SyncParameterName; count: Int32; length: IntPtr; values: IntPtr)>(z_GetSynciv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetSynciv(sync: GLsync; pname: SyncParameterName; count: Int32; length: IntPtr; values: IntPtr);
    begin
      z_GetSynciv_ovr_8(sync, pname, count, length, values);
    end;
    
    // added in gl1.0
    private static procedure _z_GetTexImage_ovr0(target: TextureTarget; level: Int32; format: PixelFormat; &type: PixelType; pixels: IntPtr);
    external 'opengl32.dll' name 'glGetTexImage';
    public static z_GetTexImage_ovr0 := _z_GetTexImage_ovr0;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetTexImage(target: TextureTarget; level: Int32; format: PixelFormat; &type: PixelType; pixels: IntPtr) := z_GetTexImage_ovr0(target, level, format, &type, pixels);
    
    // added in gl1.0
    private static procedure _z_GetTexLevelParameterfv_ovr0(target: TextureTarget; level: Int32; pname: GetTextureParameter; [MarshalAs(UnmanagedType.LPArray)] &params: array of single);
    external 'opengl32.dll' name 'glGetTexLevelParameterfv';
    public static z_GetTexLevelParameterfv_ovr0 := _z_GetTexLevelParameterfv_ovr0;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetTexLevelParameterfv(target: TextureTarget; level: Int32; pname: GetTextureParameter; &params: array of single) := z_GetTexLevelParameterfv_ovr0(target, level, pname, &params);
    private static procedure _z_GetTexLevelParameterfv_ovr1(target: TextureTarget; level: Int32; pname: GetTextureParameter; var &params: single);
    external 'opengl32.dll' name 'glGetTexLevelParameterfv';
    public static z_GetTexLevelParameterfv_ovr1 := _z_GetTexLevelParameterfv_ovr1;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetTexLevelParameterfv(target: TextureTarget; level: Int32; pname: GetTextureParameter; var &params: single) := z_GetTexLevelParameterfv_ovr1(target, level, pname, &params);
    private static procedure _z_GetTexLevelParameterfv_ovr2(target: TextureTarget; level: Int32; pname: GetTextureParameter; &params: IntPtr);
    external 'opengl32.dll' name 'glGetTexLevelParameterfv';
    public static z_GetTexLevelParameterfv_ovr2 := _z_GetTexLevelParameterfv_ovr2;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetTexLevelParameterfv(target: TextureTarget; level: Int32; pname: GetTextureParameter; &params: IntPtr) := z_GetTexLevelParameterfv_ovr2(target, level, pname, &params);
    
    // added in gl1.0
    private static procedure _z_GetTexLevelParameteriv_ovr0(target: TextureTarget; level: Int32; pname: GetTextureParameter; [MarshalAs(UnmanagedType.LPArray)] &params: array of Int32);
    external 'opengl32.dll' name 'glGetTexLevelParameteriv';
    public static z_GetTexLevelParameteriv_ovr0 := _z_GetTexLevelParameteriv_ovr0;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetTexLevelParameteriv(target: TextureTarget; level: Int32; pname: GetTextureParameter; &params: array of Int32) := z_GetTexLevelParameteriv_ovr0(target, level, pname, &params);
    private static procedure _z_GetTexLevelParameteriv_ovr1(target: TextureTarget; level: Int32; pname: GetTextureParameter; var &params: Int32);
    external 'opengl32.dll' name 'glGetTexLevelParameteriv';
    public static z_GetTexLevelParameteriv_ovr1 := _z_GetTexLevelParameteriv_ovr1;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetTexLevelParameteriv(target: TextureTarget; level: Int32; pname: GetTextureParameter; var &params: Int32) := z_GetTexLevelParameteriv_ovr1(target, level, pname, &params);
    private static procedure _z_GetTexLevelParameteriv_ovr2(target: TextureTarget; level: Int32; pname: GetTextureParameter; &params: IntPtr);
    external 'opengl32.dll' name 'glGetTexLevelParameteriv';
    public static z_GetTexLevelParameteriv_ovr2 := _z_GetTexLevelParameteriv_ovr2;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetTexLevelParameteriv(target: TextureTarget; level: Int32; pname: GetTextureParameter; &params: IntPtr) := z_GetTexLevelParameteriv_ovr2(target, level, pname, &params);
    
    // added in gl1.0
    private static procedure _z_GetTexParameterfv_ovr0(target: TextureTarget; pname: GetTextureParameter; [MarshalAs(UnmanagedType.LPArray)] &params: array of single);
    external 'opengl32.dll' name 'glGetTexParameterfv';
    public static z_GetTexParameterfv_ovr0 := _z_GetTexParameterfv_ovr0;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetTexParameterfv(target: TextureTarget; pname: GetTextureParameter; &params: array of single) := z_GetTexParameterfv_ovr0(target, pname, &params);
    private static procedure _z_GetTexParameterfv_ovr1(target: TextureTarget; pname: GetTextureParameter; var &params: single);
    external 'opengl32.dll' name 'glGetTexParameterfv';
    public static z_GetTexParameterfv_ovr1 := _z_GetTexParameterfv_ovr1;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetTexParameterfv(target: TextureTarget; pname: GetTextureParameter; var &params: single) := z_GetTexParameterfv_ovr1(target, pname, &params);
    private static procedure _z_GetTexParameterfv_ovr2(target: TextureTarget; pname: GetTextureParameter; &params: IntPtr);
    external 'opengl32.dll' name 'glGetTexParameterfv';
    public static z_GetTexParameterfv_ovr2 := _z_GetTexParameterfv_ovr2;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetTexParameterfv(target: TextureTarget; pname: GetTextureParameter; &params: IntPtr) := z_GetTexParameterfv_ovr2(target, pname, &params);
    
    // added in gl3.0
    public z_GetTexParameterIiv_adr := GetFuncAdr('glGetTexParameterIiv');
    public z_GetTexParameterIiv_ovr_0 := GetFuncOrNil&<procedure(target: TextureTarget; pname: GetTextureParameter; var &params: Int32)>(z_GetTexParameterIiv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetTexParameterIiv(target: TextureTarget; pname: GetTextureParameter; &params: array of Int32);
    begin
      z_GetTexParameterIiv_ovr_0(target, pname, &params[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetTexParameterIiv(target: TextureTarget; pname: GetTextureParameter; var &params: Int32);
    begin
      z_GetTexParameterIiv_ovr_0(target, pname, &params);
    end;
    public z_GetTexParameterIiv_ovr_2 := GetFuncOrNil&<procedure(target: TextureTarget; pname: GetTextureParameter; &params: IntPtr)>(z_GetTexParameterIiv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetTexParameterIiv(target: TextureTarget; pname: GetTextureParameter; &params: IntPtr);
    begin
      z_GetTexParameterIiv_ovr_2(target, pname, &params);
    end;
    
    // added in gl3.0
    public z_GetTexParameterIuiv_adr := GetFuncAdr('glGetTexParameterIuiv');
    public z_GetTexParameterIuiv_ovr_0 := GetFuncOrNil&<procedure(target: TextureTarget; pname: GetTextureParameter; var &params: UInt32)>(z_GetTexParameterIuiv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetTexParameterIuiv(target: TextureTarget; pname: GetTextureParameter; &params: array of UInt32);
    begin
      z_GetTexParameterIuiv_ovr_0(target, pname, &params[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetTexParameterIuiv(target: TextureTarget; pname: GetTextureParameter; var &params: UInt32);
    begin
      z_GetTexParameterIuiv_ovr_0(target, pname, &params);
    end;
    public z_GetTexParameterIuiv_ovr_2 := GetFuncOrNil&<procedure(target: TextureTarget; pname: GetTextureParameter; &params: IntPtr)>(z_GetTexParameterIuiv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetTexParameterIuiv(target: TextureTarget; pname: GetTextureParameter; &params: IntPtr);
    begin
      z_GetTexParameterIuiv_ovr_2(target, pname, &params);
    end;
    
    // added in gl1.0
    private static procedure _z_GetTexParameteriv_ovr0(target: TextureTarget; pname: GetTextureParameter; [MarshalAs(UnmanagedType.LPArray)] &params: array of Int32);
    external 'opengl32.dll' name 'glGetTexParameteriv';
    public static z_GetTexParameteriv_ovr0 := _z_GetTexParameteriv_ovr0;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetTexParameteriv(target: TextureTarget; pname: GetTextureParameter; &params: array of Int32) := z_GetTexParameteriv_ovr0(target, pname, &params);
    private static procedure _z_GetTexParameteriv_ovr1(target: TextureTarget; pname: GetTextureParameter; var &params: Int32);
    external 'opengl32.dll' name 'glGetTexParameteriv';
    public static z_GetTexParameteriv_ovr1 := _z_GetTexParameteriv_ovr1;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetTexParameteriv(target: TextureTarget; pname: GetTextureParameter; var &params: Int32) := z_GetTexParameteriv_ovr1(target, pname, &params);
    private static procedure _z_GetTexParameteriv_ovr2(target: TextureTarget; pname: GetTextureParameter; &params: IntPtr);
    external 'opengl32.dll' name 'glGetTexParameteriv';
    public static z_GetTexParameteriv_ovr2 := _z_GetTexParameteriv_ovr2;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetTexParameteriv(target: TextureTarget; pname: GetTextureParameter; &params: IntPtr) := z_GetTexParameteriv_ovr2(target, pname, &params);
    
    // added in gl4.5
    public z_GetTextureImage_adr := GetFuncAdr('glGetTextureImage');
    public z_GetTextureImage_ovr_0 := GetFuncOrNil&<procedure(texture: UInt32; level: Int32; format: PixelFormat; &type: PixelType; bufSize: Int32; pixels: IntPtr)>(z_GetTextureImage_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetTextureImage(texture: UInt32; level: Int32; format: PixelFormat; &type: PixelType; bufSize: Int32; pixels: IntPtr);
    begin
      z_GetTextureImage_ovr_0(texture, level, format, &type, bufSize, pixels);
    end;
    
    // added in gl4.5
    public z_GetTextureLevelParameterfv_adr := GetFuncAdr('glGetTextureLevelParameterfv');
    public z_GetTextureLevelParameterfv_ovr_0 := GetFuncOrNil&<procedure(texture: UInt32; level: Int32; pname: GetTextureParameter; var &params: single)>(z_GetTextureLevelParameterfv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetTextureLevelParameterfv(texture: UInt32; level: Int32; pname: GetTextureParameter; &params: array of single);
    begin
      z_GetTextureLevelParameterfv_ovr_0(texture, level, pname, &params[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetTextureLevelParameterfv(texture: UInt32; level: Int32; pname: GetTextureParameter; var &params: single);
    begin
      z_GetTextureLevelParameterfv_ovr_0(texture, level, pname, &params);
    end;
    public z_GetTextureLevelParameterfv_ovr_2 := GetFuncOrNil&<procedure(texture: UInt32; level: Int32; pname: GetTextureParameter; &params: IntPtr)>(z_GetTextureLevelParameterfv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetTextureLevelParameterfv(texture: UInt32; level: Int32; pname: GetTextureParameter; &params: IntPtr);
    begin
      z_GetTextureLevelParameterfv_ovr_2(texture, level, pname, &params);
    end;
    
    // added in gl4.5
    public z_GetTextureLevelParameteriv_adr := GetFuncAdr('glGetTextureLevelParameteriv');
    public z_GetTextureLevelParameteriv_ovr_0 := GetFuncOrNil&<procedure(texture: UInt32; level: Int32; pname: GetTextureParameter; var &params: Int32)>(z_GetTextureLevelParameteriv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetTextureLevelParameteriv(texture: UInt32; level: Int32; pname: GetTextureParameter; &params: array of Int32);
    begin
      z_GetTextureLevelParameteriv_ovr_0(texture, level, pname, &params[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetTextureLevelParameteriv(texture: UInt32; level: Int32; pname: GetTextureParameter; var &params: Int32);
    begin
      z_GetTextureLevelParameteriv_ovr_0(texture, level, pname, &params);
    end;
    public z_GetTextureLevelParameteriv_ovr_2 := GetFuncOrNil&<procedure(texture: UInt32; level: Int32; pname: GetTextureParameter; &params: IntPtr)>(z_GetTextureLevelParameteriv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetTextureLevelParameteriv(texture: UInt32; level: Int32; pname: GetTextureParameter; &params: IntPtr);
    begin
      z_GetTextureLevelParameteriv_ovr_2(texture, level, pname, &params);
    end;
    
    // added in gl4.5
    public z_GetTextureParameterfv_adr := GetFuncAdr('glGetTextureParameterfv');
    public z_GetTextureParameterfv_ovr_0 := GetFuncOrNil&<procedure(texture: UInt32; pname: GetTextureParameter; var &params: single)>(z_GetTextureParameterfv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetTextureParameterfv(texture: UInt32; pname: GetTextureParameter; &params: array of single);
    begin
      z_GetTextureParameterfv_ovr_0(texture, pname, &params[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetTextureParameterfv(texture: UInt32; pname: GetTextureParameter; var &params: single);
    begin
      z_GetTextureParameterfv_ovr_0(texture, pname, &params);
    end;
    public z_GetTextureParameterfv_ovr_2 := GetFuncOrNil&<procedure(texture: UInt32; pname: GetTextureParameter; &params: IntPtr)>(z_GetTextureParameterfv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetTextureParameterfv(texture: UInt32; pname: GetTextureParameter; &params: IntPtr);
    begin
      z_GetTextureParameterfv_ovr_2(texture, pname, &params);
    end;
    
    // added in gl4.5
    public z_GetTextureParameterIiv_adr := GetFuncAdr('glGetTextureParameterIiv');
    public z_GetTextureParameterIiv_ovr_0 := GetFuncOrNil&<procedure(texture: UInt32; pname: GetTextureParameter; var &params: Int32)>(z_GetTextureParameterIiv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetTextureParameterIiv(texture: UInt32; pname: GetTextureParameter; &params: array of Int32);
    begin
      z_GetTextureParameterIiv_ovr_0(texture, pname, &params[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetTextureParameterIiv(texture: UInt32; pname: GetTextureParameter; var &params: Int32);
    begin
      z_GetTextureParameterIiv_ovr_0(texture, pname, &params);
    end;
    public z_GetTextureParameterIiv_ovr_2 := GetFuncOrNil&<procedure(texture: UInt32; pname: GetTextureParameter; &params: IntPtr)>(z_GetTextureParameterIiv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetTextureParameterIiv(texture: UInt32; pname: GetTextureParameter; &params: IntPtr);
    begin
      z_GetTextureParameterIiv_ovr_2(texture, pname, &params);
    end;
    
    // added in gl4.5
    public z_GetTextureParameterIuiv_adr := GetFuncAdr('glGetTextureParameterIuiv');
    public z_GetTextureParameterIuiv_ovr_0 := GetFuncOrNil&<procedure(texture: UInt32; pname: GetTextureParameter; var &params: UInt32)>(z_GetTextureParameterIuiv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetTextureParameterIuiv(texture: UInt32; pname: GetTextureParameter; &params: array of UInt32);
    begin
      z_GetTextureParameterIuiv_ovr_0(texture, pname, &params[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetTextureParameterIuiv(texture: UInt32; pname: GetTextureParameter; var &params: UInt32);
    begin
      z_GetTextureParameterIuiv_ovr_0(texture, pname, &params);
    end;
    public z_GetTextureParameterIuiv_ovr_2 := GetFuncOrNil&<procedure(texture: UInt32; pname: GetTextureParameter; &params: IntPtr)>(z_GetTextureParameterIuiv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetTextureParameterIuiv(texture: UInt32; pname: GetTextureParameter; &params: IntPtr);
    begin
      z_GetTextureParameterIuiv_ovr_2(texture, pname, &params);
    end;
    
    // added in gl4.5
    public z_GetTextureParameteriv_adr := GetFuncAdr('glGetTextureParameteriv');
    public z_GetTextureParameteriv_ovr_0 := GetFuncOrNil&<procedure(texture: UInt32; pname: GetTextureParameter; var &params: Int32)>(z_GetTextureParameteriv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetTextureParameteriv(texture: UInt32; pname: GetTextureParameter; &params: array of Int32);
    begin
      z_GetTextureParameteriv_ovr_0(texture, pname, &params[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetTextureParameteriv(texture: UInt32; pname: GetTextureParameter; var &params: Int32);
    begin
      z_GetTextureParameteriv_ovr_0(texture, pname, &params);
    end;
    public z_GetTextureParameteriv_ovr_2 := GetFuncOrNil&<procedure(texture: UInt32; pname: GetTextureParameter; &params: IntPtr)>(z_GetTextureParameteriv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetTextureParameteriv(texture: UInt32; pname: GetTextureParameter; &params: IntPtr);
    begin
      z_GetTextureParameteriv_ovr_2(texture, pname, &params);
    end;
    
    // added in gl4.5
    public z_GetTextureSubImage_adr := GetFuncAdr('glGetTextureSubImage');
    public z_GetTextureSubImage_ovr_0 := GetFuncOrNil&<procedure(texture: UInt32; level: Int32; xoffset: Int32; yoffset: Int32; zoffset: Int32; width: Int32; height: Int32; depth: Int32; format: PixelFormat; &type: PixelType; bufSize: Int32; pixels: IntPtr)>(z_GetTextureSubImage_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetTextureSubImage(texture: UInt32; level: Int32; xoffset: Int32; yoffset: Int32; zoffset: Int32; width: Int32; height: Int32; depth: Int32; format: PixelFormat; &type: PixelType; bufSize: Int32; pixels: IntPtr);
    begin
      z_GetTextureSubImage_ovr_0(texture, level, xoffset, yoffset, zoffset, width, height, depth, format, &type, bufSize, pixels);
    end;
    
    // added in gl4.5
    public z_GetTransformFeedbacki_v_adr := GetFuncAdr('glGetTransformFeedbacki_v');
    public z_GetTransformFeedbacki_v_ovr_0 := GetFuncOrNil&<procedure(xfb: UInt32; pname: TransformFeedbackPName; index: UInt32; var param: Int32)>(z_GetTransformFeedbacki_v_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetTransformFeedbacki_v(xfb: UInt32; pname: TransformFeedbackPName; index: UInt32; param: array of Int32);
    begin
      z_GetTransformFeedbacki_v_ovr_0(xfb, pname, index, param[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetTransformFeedbacki_v(xfb: UInt32; pname: TransformFeedbackPName; index: UInt32; var param: Int32);
    begin
      z_GetTransformFeedbacki_v_ovr_0(xfb, pname, index, param);
    end;
    public z_GetTransformFeedbacki_v_ovr_2 := GetFuncOrNil&<procedure(xfb: UInt32; pname: TransformFeedbackPName; index: UInt32; param: IntPtr)>(z_GetTransformFeedbacki_v_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetTransformFeedbacki_v(xfb: UInt32; pname: TransformFeedbackPName; index: UInt32; param: IntPtr);
    begin
      z_GetTransformFeedbacki_v_ovr_2(xfb, pname, index, param);
    end;
    
    // added in gl4.5
    public z_GetTransformFeedbacki64_v_adr := GetFuncAdr('glGetTransformFeedbacki64_v');
    public z_GetTransformFeedbacki64_v_ovr_0 := GetFuncOrNil&<procedure(xfb: UInt32; pname: TransformFeedbackPName; index: UInt32; var param: Int64)>(z_GetTransformFeedbacki64_v_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetTransformFeedbacki64_v(xfb: UInt32; pname: TransformFeedbackPName; index: UInt32; param: array of Int64);
    begin
      z_GetTransformFeedbacki64_v_ovr_0(xfb, pname, index, param[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetTransformFeedbacki64_v(xfb: UInt32; pname: TransformFeedbackPName; index: UInt32; var param: Int64);
    begin
      z_GetTransformFeedbacki64_v_ovr_0(xfb, pname, index, param);
    end;
    public z_GetTransformFeedbacki64_v_ovr_2 := GetFuncOrNil&<procedure(xfb: UInt32; pname: TransformFeedbackPName; index: UInt32; param: IntPtr)>(z_GetTransformFeedbacki64_v_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetTransformFeedbacki64_v(xfb: UInt32; pname: TransformFeedbackPName; index: UInt32; param: IntPtr);
    begin
      z_GetTransformFeedbacki64_v_ovr_2(xfb, pname, index, param);
    end;
    
    // added in gl4.5
    public z_GetTransformFeedbackiv_adr := GetFuncAdr('glGetTransformFeedbackiv');
    public z_GetTransformFeedbackiv_ovr_0 := GetFuncOrNil&<procedure(xfb: UInt32; pname: TransformFeedbackPName; var param: Int32)>(z_GetTransformFeedbackiv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetTransformFeedbackiv(xfb: UInt32; pname: TransformFeedbackPName; param: array of Int32);
    begin
      z_GetTransformFeedbackiv_ovr_0(xfb, pname, param[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetTransformFeedbackiv(xfb: UInt32; pname: TransformFeedbackPName; var param: Int32);
    begin
      z_GetTransformFeedbackiv_ovr_0(xfb, pname, param);
    end;
    public z_GetTransformFeedbackiv_ovr_2 := GetFuncOrNil&<procedure(xfb: UInt32; pname: TransformFeedbackPName; param: IntPtr)>(z_GetTransformFeedbackiv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetTransformFeedbackiv(xfb: UInt32; pname: TransformFeedbackPName; param: IntPtr);
    begin
      z_GetTransformFeedbackiv_ovr_2(xfb, pname, param);
    end;
    
    // added in gl3.0
    public z_GetTransformFeedbackVarying_adr := GetFuncAdr('glGetTransformFeedbackVarying');
    public z_GetTransformFeedbackVarying_ovr_0 := GetFuncOrNil&<procedure(&program: UInt32; index: UInt32; bufSize: Int32; var length: Int32; var size: Int32; var &type: GlslTypeToken; name: IntPtr)>(z_GetTransformFeedbackVarying_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetTransformFeedbackVarying(&program: UInt32; index: UInt32; bufSize: Int32; length: array of Int32; size: array of Int32; &type: array of GlslTypeToken; name: IntPtr);
    begin
      z_GetTransformFeedbackVarying_ovr_0(&program, index, bufSize, length[0], size[0], &type[0], name);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetTransformFeedbackVarying(&program: UInt32; index: UInt32; bufSize: Int32; length: array of Int32; size: array of Int32; var &type: GlslTypeToken; name: IntPtr);
    begin
      z_GetTransformFeedbackVarying_ovr_0(&program, index, bufSize, length[0], size[0], &type, name);
    end;
    public z_GetTransformFeedbackVarying_ovr_2 := GetFuncOrNil&<procedure(&program: UInt32; index: UInt32; bufSize: Int32; var length: Int32; var size: Int32; &type: IntPtr; name: IntPtr)>(z_GetTransformFeedbackVarying_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetTransformFeedbackVarying(&program: UInt32; index: UInt32; bufSize: Int32; length: array of Int32; size: array of Int32; &type: IntPtr; name: IntPtr);
    begin
      z_GetTransformFeedbackVarying_ovr_2(&program, index, bufSize, length[0], size[0], &type, name);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetTransformFeedbackVarying(&program: UInt32; index: UInt32; bufSize: Int32; length: array of Int32; var size: Int32; &type: array of GlslTypeToken; name: IntPtr);
    begin
      z_GetTransformFeedbackVarying_ovr_0(&program, index, bufSize, length[0], size, &type[0], name);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetTransformFeedbackVarying(&program: UInt32; index: UInt32; bufSize: Int32; length: array of Int32; var size: Int32; var &type: GlslTypeToken; name: IntPtr);
    begin
      z_GetTransformFeedbackVarying_ovr_0(&program, index, bufSize, length[0], size, &type, name);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetTransformFeedbackVarying(&program: UInt32; index: UInt32; bufSize: Int32; length: array of Int32; var size: Int32; &type: IntPtr; name: IntPtr);
    begin
      z_GetTransformFeedbackVarying_ovr_2(&program, index, bufSize, length[0], size, &type, name);
    end;
    public z_GetTransformFeedbackVarying_ovr_6 := GetFuncOrNil&<procedure(&program: UInt32; index: UInt32; bufSize: Int32; var length: Int32; size: IntPtr; var &type: GlslTypeToken; name: IntPtr)>(z_GetTransformFeedbackVarying_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetTransformFeedbackVarying(&program: UInt32; index: UInt32; bufSize: Int32; length: array of Int32; size: IntPtr; &type: array of GlslTypeToken; name: IntPtr);
    begin
      z_GetTransformFeedbackVarying_ovr_6(&program, index, bufSize, length[0], size, &type[0], name);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetTransformFeedbackVarying(&program: UInt32; index: UInt32; bufSize: Int32; length: array of Int32; size: IntPtr; var &type: GlslTypeToken; name: IntPtr);
    begin
      z_GetTransformFeedbackVarying_ovr_6(&program, index, bufSize, length[0], size, &type, name);
    end;
    public z_GetTransformFeedbackVarying_ovr_8 := GetFuncOrNil&<procedure(&program: UInt32; index: UInt32; bufSize: Int32; var length: Int32; size: IntPtr; &type: IntPtr; name: IntPtr)>(z_GetTransformFeedbackVarying_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetTransformFeedbackVarying(&program: UInt32; index: UInt32; bufSize: Int32; length: array of Int32; size: IntPtr; &type: IntPtr; name: IntPtr);
    begin
      z_GetTransformFeedbackVarying_ovr_8(&program, index, bufSize, length[0], size, &type, name);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetTransformFeedbackVarying(&program: UInt32; index: UInt32; bufSize: Int32; var length: Int32; size: array of Int32; &type: array of GlslTypeToken; name: IntPtr);
    begin
      z_GetTransformFeedbackVarying_ovr_0(&program, index, bufSize, length, size[0], &type[0], name);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetTransformFeedbackVarying(&program: UInt32; index: UInt32; bufSize: Int32; var length: Int32; size: array of Int32; var &type: GlslTypeToken; name: IntPtr);
    begin
      z_GetTransformFeedbackVarying_ovr_0(&program, index, bufSize, length, size[0], &type, name);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetTransformFeedbackVarying(&program: UInt32; index: UInt32; bufSize: Int32; var length: Int32; size: array of Int32; &type: IntPtr; name: IntPtr);
    begin
      z_GetTransformFeedbackVarying_ovr_2(&program, index, bufSize, length, size[0], &type, name);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetTransformFeedbackVarying(&program: UInt32; index: UInt32; bufSize: Int32; var length: Int32; var size: Int32; &type: array of GlslTypeToken; name: IntPtr);
    begin
      z_GetTransformFeedbackVarying_ovr_0(&program, index, bufSize, length, size, &type[0], name);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetTransformFeedbackVarying(&program: UInt32; index: UInt32; bufSize: Int32; var length: Int32; var size: Int32; var &type: GlslTypeToken; name: IntPtr);
    begin
      z_GetTransformFeedbackVarying_ovr_0(&program, index, bufSize, length, size, &type, name);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetTransformFeedbackVarying(&program: UInt32; index: UInt32; bufSize: Int32; var length: Int32; var size: Int32; &type: IntPtr; name: IntPtr);
    begin
      z_GetTransformFeedbackVarying_ovr_2(&program, index, bufSize, length, size, &type, name);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetTransformFeedbackVarying(&program: UInt32; index: UInt32; bufSize: Int32; var length: Int32; size: IntPtr; &type: array of GlslTypeToken; name: IntPtr);
    begin
      z_GetTransformFeedbackVarying_ovr_6(&program, index, bufSize, length, size, &type[0], name);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetTransformFeedbackVarying(&program: UInt32; index: UInt32; bufSize: Int32; var length: Int32; size: IntPtr; var &type: GlslTypeToken; name: IntPtr);
    begin
      z_GetTransformFeedbackVarying_ovr_6(&program, index, bufSize, length, size, &type, name);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetTransformFeedbackVarying(&program: UInt32; index: UInt32; bufSize: Int32; var length: Int32; size: IntPtr; &type: IntPtr; name: IntPtr);
    begin
      z_GetTransformFeedbackVarying_ovr_8(&program, index, bufSize, length, size, &type, name);
    end;
    public z_GetTransformFeedbackVarying_ovr_18 := GetFuncOrNil&<procedure(&program: UInt32; index: UInt32; bufSize: Int32; length: IntPtr; var size: Int32; var &type: GlslTypeToken; name: IntPtr)>(z_GetTransformFeedbackVarying_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetTransformFeedbackVarying(&program: UInt32; index: UInt32; bufSize: Int32; length: IntPtr; size: array of Int32; &type: array of GlslTypeToken; name: IntPtr);
    begin
      z_GetTransformFeedbackVarying_ovr_18(&program, index, bufSize, length, size[0], &type[0], name);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetTransformFeedbackVarying(&program: UInt32; index: UInt32; bufSize: Int32; length: IntPtr; size: array of Int32; var &type: GlslTypeToken; name: IntPtr);
    begin
      z_GetTransformFeedbackVarying_ovr_18(&program, index, bufSize, length, size[0], &type, name);
    end;
    public z_GetTransformFeedbackVarying_ovr_20 := GetFuncOrNil&<procedure(&program: UInt32; index: UInt32; bufSize: Int32; length: IntPtr; var size: Int32; &type: IntPtr; name: IntPtr)>(z_GetTransformFeedbackVarying_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetTransformFeedbackVarying(&program: UInt32; index: UInt32; bufSize: Int32; length: IntPtr; size: array of Int32; &type: IntPtr; name: IntPtr);
    begin
      z_GetTransformFeedbackVarying_ovr_20(&program, index, bufSize, length, size[0], &type, name);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetTransformFeedbackVarying(&program: UInt32; index: UInt32; bufSize: Int32; length: IntPtr; var size: Int32; &type: array of GlslTypeToken; name: IntPtr);
    begin
      z_GetTransformFeedbackVarying_ovr_18(&program, index, bufSize, length, size, &type[0], name);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetTransformFeedbackVarying(&program: UInt32; index: UInt32; bufSize: Int32; length: IntPtr; var size: Int32; var &type: GlslTypeToken; name: IntPtr);
    begin
      z_GetTransformFeedbackVarying_ovr_18(&program, index, bufSize, length, size, &type, name);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetTransformFeedbackVarying(&program: UInt32; index: UInt32; bufSize: Int32; length: IntPtr; var size: Int32; &type: IntPtr; name: IntPtr);
    begin
      z_GetTransformFeedbackVarying_ovr_20(&program, index, bufSize, length, size, &type, name);
    end;
    public z_GetTransformFeedbackVarying_ovr_24 := GetFuncOrNil&<procedure(&program: UInt32; index: UInt32; bufSize: Int32; length: IntPtr; size: IntPtr; var &type: GlslTypeToken; name: IntPtr)>(z_GetTransformFeedbackVarying_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetTransformFeedbackVarying(&program: UInt32; index: UInt32; bufSize: Int32; length: IntPtr; size: IntPtr; &type: array of GlslTypeToken; name: IntPtr);
    begin
      z_GetTransformFeedbackVarying_ovr_24(&program, index, bufSize, length, size, &type[0], name);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetTransformFeedbackVarying(&program: UInt32; index: UInt32; bufSize: Int32; length: IntPtr; size: IntPtr; var &type: GlslTypeToken; name: IntPtr);
    begin
      z_GetTransformFeedbackVarying_ovr_24(&program, index, bufSize, length, size, &type, name);
    end;
    public z_GetTransformFeedbackVarying_ovr_26 := GetFuncOrNil&<procedure(&program: UInt32; index: UInt32; bufSize: Int32; length: IntPtr; size: IntPtr; &type: IntPtr; name: IntPtr)>(z_GetTransformFeedbackVarying_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetTransformFeedbackVarying(&program: UInt32; index: UInt32; bufSize: Int32; length: IntPtr; size: IntPtr; &type: IntPtr; name: IntPtr);
    begin
      z_GetTransformFeedbackVarying_ovr_26(&program, index, bufSize, length, size, &type, name);
    end;
    
    // added in gl3.1
    public z_GetUniformBlockIndex_adr := GetFuncAdr('glGetUniformBlockIndex');
    public z_GetUniformBlockIndex_ovr_0 := GetFuncOrNil&<function(&program: ProgramName; uniformBlockName: IntPtr): UInt32>(z_GetUniformBlockIndex_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetUniformBlockIndex(&program: ProgramName; uniformBlockName: string): UInt32;
    begin
      var par_2_str_ptr := Marshal.StringToHGlobalAnsi(uniformBlockName);
      Result := z_GetUniformBlockIndex_ovr_0(&program, par_2_str_ptr);
      Marshal.FreeHGlobal(par_2_str_ptr);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetUniformBlockIndex(&program: ProgramName; uniformBlockName: IntPtr): UInt32;
    begin
      Result := z_GetUniformBlockIndex_ovr_0(&program, uniformBlockName);
    end;
    
    // added in gl4.0
    public z_GetUniformdv_adr := GetFuncAdr('glGetUniformdv');
    public z_GetUniformdv_ovr_0 := GetFuncOrNil&<procedure(&program: ProgramName; location: Int32; var &params: real)>(z_GetUniformdv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetUniformdv(&program: ProgramName; location: Int32; &params: array of real);
    begin
      z_GetUniformdv_ovr_0(&program, location, &params[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetUniformdv(&program: ProgramName; location: Int32; var &params: real);
    begin
      z_GetUniformdv_ovr_0(&program, location, &params);
    end;
    public z_GetUniformdv_ovr_2 := GetFuncOrNil&<procedure(&program: ProgramName; location: Int32; &params: IntPtr)>(z_GetUniformdv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetUniformdv(&program: ProgramName; location: Int32; &params: IntPtr);
    begin
      z_GetUniformdv_ovr_2(&program, location, &params);
    end;
    
    // added in gl2.0
    public z_GetUniformfv_adr := GetFuncAdr('glGetUniformfv');
    public z_GetUniformfv_ovr_0 := GetFuncOrNil&<procedure(&program: ProgramName; location: Int32; var &params: single)>(z_GetUniformfv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetUniformfv(&program: ProgramName; location: Int32; &params: array of single);
    begin
      z_GetUniformfv_ovr_0(&program, location, &params[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetUniformfv(&program: ProgramName; location: Int32; var &params: single);
    begin
      z_GetUniformfv_ovr_0(&program, location, &params);
    end;
    public z_GetUniformfv_ovr_2 := GetFuncOrNil&<procedure(&program: ProgramName; location: Int32; &params: IntPtr)>(z_GetUniformfv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetUniformfv(&program: ProgramName; location: Int32; &params: IntPtr);
    begin
      z_GetUniformfv_ovr_2(&program, location, &params);
    end;
    
    // added in gl3.1
    public z_GetUniformIndices_adr := GetFuncAdr('glGetUniformIndices');
    public z_GetUniformIndices_ovr_0 := GetFuncOrNil&<procedure(&program: ProgramName; uniformCount: Int32; var uniformNames: IntPtr; var uniformIndices: UInt32)>(z_GetUniformIndices_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetUniformIndices(&program: ProgramName; uniformCount: Int32; uniformNames: array of string; uniformIndices: array of UInt32);
    begin
      var par_3_str_ptr := uniformNames.ConvertAll(arr_el1->Marshal.StringToHGlobalAnsi(arr_el1));
      z_GetUniformIndices_ovr_0(&program, uniformCount, par_3_str_ptr[0], uniformIndices[0]);
      foreach var arr_el1 in par_3_str_ptr do Marshal.FreeHGlobal(arr_el1);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetUniformIndices(&program: ProgramName; uniformCount: Int32; uniformNames: array of string; var uniformIndices: UInt32);
    begin
      var par_3_str_ptr := uniformNames.ConvertAll(arr_el1->Marshal.StringToHGlobalAnsi(arr_el1));
      z_GetUniformIndices_ovr_0(&program, uniformCount, par_3_str_ptr[0], uniformIndices);
      foreach var arr_el1 in par_3_str_ptr do Marshal.FreeHGlobal(arr_el1);
    end;
    public z_GetUniformIndices_ovr_2 := GetFuncOrNil&<procedure(&program: ProgramName; uniformCount: Int32; var uniformNames: IntPtr; uniformIndices: IntPtr)>(z_GetUniformIndices_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetUniformIndices(&program: ProgramName; uniformCount: Int32; uniformNames: array of string; uniformIndices: IntPtr);
    begin
      var par_3_str_ptr := uniformNames.ConvertAll(arr_el1->Marshal.StringToHGlobalAnsi(arr_el1));
      z_GetUniformIndices_ovr_2(&program, uniformCount, par_3_str_ptr[0], uniformIndices);
      foreach var arr_el1 in par_3_str_ptr do Marshal.FreeHGlobal(arr_el1);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetUniformIndices(&program: ProgramName; uniformCount: Int32; uniformNames: array of IntPtr; uniformIndices: array of UInt32);
    begin
      z_GetUniformIndices_ovr_0(&program, uniformCount, uniformNames[0], uniformIndices[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetUniformIndices(&program: ProgramName; uniformCount: Int32; uniformNames: array of IntPtr; var uniformIndices: UInt32);
    begin
      z_GetUniformIndices_ovr_0(&program, uniformCount, uniformNames[0], uniformIndices);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetUniformIndices(&program: ProgramName; uniformCount: Int32; uniformNames: array of IntPtr; uniformIndices: IntPtr);
    begin
      z_GetUniformIndices_ovr_2(&program, uniformCount, uniformNames[0], uniformIndices);
    end;
    public z_GetUniformIndices_ovr_6 := GetFuncOrNil&<procedure(&program: ProgramName; uniformCount: Int32; uniformNames: IntPtr; var uniformIndices: UInt32)>(z_GetUniformIndices_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetUniformIndices(&program: ProgramName; uniformCount: Int32; uniformNames: IntPtr; uniformIndices: array of UInt32);
    begin
      z_GetUniformIndices_ovr_6(&program, uniformCount, uniformNames, uniformIndices[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetUniformIndices(&program: ProgramName; uniformCount: Int32; uniformNames: IntPtr; var uniformIndices: UInt32);
    begin
      z_GetUniformIndices_ovr_6(&program, uniformCount, uniformNames, uniformIndices);
    end;
    public z_GetUniformIndices_ovr_8 := GetFuncOrNil&<procedure(&program: ProgramName; uniformCount: Int32; uniformNames: IntPtr; uniformIndices: IntPtr)>(z_GetUniformIndices_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetUniformIndices(&program: ProgramName; uniformCount: Int32; uniformNames: IntPtr; uniformIndices: IntPtr);
    begin
      z_GetUniformIndices_ovr_8(&program, uniformCount, uniformNames, uniformIndices);
    end;
    
    // added in gl2.0
    public z_GetUniformiv_adr := GetFuncAdr('glGetUniformiv');
    public z_GetUniformiv_ovr_0 := GetFuncOrNil&<procedure(&program: ProgramName; location: Int32; var &params: Int32)>(z_GetUniformiv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetUniformiv(&program: ProgramName; location: Int32; &params: array of Int32);
    begin
      z_GetUniformiv_ovr_0(&program, location, &params[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetUniformiv(&program: ProgramName; location: Int32; var &params: Int32);
    begin
      z_GetUniformiv_ovr_0(&program, location, &params);
    end;
    public z_GetUniformiv_ovr_2 := GetFuncOrNil&<procedure(&program: ProgramName; location: Int32; &params: IntPtr)>(z_GetUniformiv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetUniformiv(&program: ProgramName; location: Int32; &params: IntPtr);
    begin
      z_GetUniformiv_ovr_2(&program, location, &params);
    end;
    
    // added in gl2.0
    public z_GetUniformLocation_adr := GetFuncAdr('glGetUniformLocation');
    public z_GetUniformLocation_ovr_0 := GetFuncOrNil&<function(&program: ProgramName; name: IntPtr): Int32>(z_GetUniformLocation_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetUniformLocation(&program: ProgramName; name: string): Int32;
    begin
      var par_2_str_ptr := Marshal.StringToHGlobalAnsi(name);
      Result := z_GetUniformLocation_ovr_0(&program, par_2_str_ptr);
      Marshal.FreeHGlobal(par_2_str_ptr);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetUniformLocation(&program: ProgramName; name: IntPtr): Int32;
    begin
      Result := z_GetUniformLocation_ovr_0(&program, name);
    end;
    
    // added in gl4.0
    public z_GetUniformSubroutineuiv_adr := GetFuncAdr('glGetUniformSubroutineuiv');
    public z_GetUniformSubroutineuiv_ovr_0 := GetFuncOrNil&<procedure(_shadertype: ShaderType; location: Int32; var &params: UInt32)>(z_GetUniformSubroutineuiv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetUniformSubroutineuiv(_shadertype: ShaderType; location: Int32; &params: array of UInt32);
    begin
      z_GetUniformSubroutineuiv_ovr_0(_shadertype, location, &params[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetUniformSubroutineuiv(_shadertype: ShaderType; location: Int32; var &params: UInt32);
    begin
      z_GetUniformSubroutineuiv_ovr_0(_shadertype, location, &params);
    end;
    public z_GetUniformSubroutineuiv_ovr_2 := GetFuncOrNil&<procedure(_shadertype: ShaderType; location: Int32; &params: IntPtr)>(z_GetUniformSubroutineuiv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetUniformSubroutineuiv(_shadertype: ShaderType; location: Int32; &params: IntPtr);
    begin
      z_GetUniformSubroutineuiv_ovr_2(_shadertype, location, &params);
    end;
    
    // added in gl3.0
    public z_GetUniformuiv_adr := GetFuncAdr('glGetUniformuiv');
    public z_GetUniformuiv_ovr_0 := GetFuncOrNil&<procedure(&program: ProgramName; location: Int32; var &params: UInt32)>(z_GetUniformuiv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetUniformuiv(&program: ProgramName; location: Int32; &params: array of UInt32);
    begin
      z_GetUniformuiv_ovr_0(&program, location, &params[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetUniformuiv(&program: ProgramName; location: Int32; var &params: UInt32);
    begin
      z_GetUniformuiv_ovr_0(&program, location, &params);
    end;
    public z_GetUniformuiv_ovr_2 := GetFuncOrNil&<procedure(&program: ProgramName; location: Int32; &params: IntPtr)>(z_GetUniformuiv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetUniformuiv(&program: ProgramName; location: Int32; &params: IntPtr);
    begin
      z_GetUniformuiv_ovr_2(&program, location, &params);
    end;
    
    // added in gl4.5
    public z_GetVertexArrayIndexed64iv_adr := GetFuncAdr('glGetVertexArrayIndexed64iv');
    public z_GetVertexArrayIndexed64iv_ovr_0 := GetFuncOrNil&<procedure(vaobj: UInt32; index: UInt32; pname: VertexArrayPName; var param: Int64)>(z_GetVertexArrayIndexed64iv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetVertexArrayIndexed64iv(vaobj: UInt32; index: UInt32; pname: VertexArrayPName; param: array of Int64);
    begin
      z_GetVertexArrayIndexed64iv_ovr_0(vaobj, index, pname, param[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetVertexArrayIndexed64iv(vaobj: UInt32; index: UInt32; pname: VertexArrayPName; var param: Int64);
    begin
      z_GetVertexArrayIndexed64iv_ovr_0(vaobj, index, pname, param);
    end;
    public z_GetVertexArrayIndexed64iv_ovr_2 := GetFuncOrNil&<procedure(vaobj: UInt32; index: UInt32; pname: VertexArrayPName; param: IntPtr)>(z_GetVertexArrayIndexed64iv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetVertexArrayIndexed64iv(vaobj: UInt32; index: UInt32; pname: VertexArrayPName; param: IntPtr);
    begin
      z_GetVertexArrayIndexed64iv_ovr_2(vaobj, index, pname, param);
    end;
    
    // added in gl4.5
    public z_GetVertexArrayIndexediv_adr := GetFuncAdr('glGetVertexArrayIndexediv');
    public z_GetVertexArrayIndexediv_ovr_0 := GetFuncOrNil&<procedure(vaobj: UInt32; index: UInt32; pname: VertexArrayPName; var param: Int32)>(z_GetVertexArrayIndexediv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetVertexArrayIndexediv(vaobj: UInt32; index: UInt32; pname: VertexArrayPName; param: array of Int32);
    begin
      z_GetVertexArrayIndexediv_ovr_0(vaobj, index, pname, param[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetVertexArrayIndexediv(vaobj: UInt32; index: UInt32; pname: VertexArrayPName; var param: Int32);
    begin
      z_GetVertexArrayIndexediv_ovr_0(vaobj, index, pname, param);
    end;
    public z_GetVertexArrayIndexediv_ovr_2 := GetFuncOrNil&<procedure(vaobj: UInt32; index: UInt32; pname: VertexArrayPName; param: IntPtr)>(z_GetVertexArrayIndexediv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetVertexArrayIndexediv(vaobj: UInt32; index: UInt32; pname: VertexArrayPName; param: IntPtr);
    begin
      z_GetVertexArrayIndexediv_ovr_2(vaobj, index, pname, param);
    end;
    
    // added in gl4.5
    public z_GetVertexArrayiv_adr := GetFuncAdr('glGetVertexArrayiv');
    public z_GetVertexArrayiv_ovr_0 := GetFuncOrNil&<procedure(vaobj: UInt32; pname: VertexArrayPName; var param: Int32)>(z_GetVertexArrayiv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetVertexArrayiv(vaobj: UInt32; pname: VertexArrayPName; param: array of Int32);
    begin
      z_GetVertexArrayiv_ovr_0(vaobj, pname, param[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetVertexArrayiv(vaobj: UInt32; pname: VertexArrayPName; var param: Int32);
    begin
      z_GetVertexArrayiv_ovr_0(vaobj, pname, param);
    end;
    public z_GetVertexArrayiv_ovr_2 := GetFuncOrNil&<procedure(vaobj: UInt32; pname: VertexArrayPName; param: IntPtr)>(z_GetVertexArrayiv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetVertexArrayiv(vaobj: UInt32; pname: VertexArrayPName; param: IntPtr);
    begin
      z_GetVertexArrayiv_ovr_2(vaobj, pname, param);
    end;
    
    // added in gl2.0
    public z_GetVertexAttribdv_adr := GetFuncAdr('glGetVertexAttribdv');
    public z_GetVertexAttribdv_ovr_0 := GetFuncOrNil&<procedure(index: UInt32; pname: VertexAttribPropertyARB; var &params: real)>(z_GetVertexAttribdv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetVertexAttribdv(index: UInt32; pname: VertexAttribPropertyARB; &params: array of real);
    begin
      z_GetVertexAttribdv_ovr_0(index, pname, &params[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetVertexAttribdv(index: UInt32; pname: VertexAttribPropertyARB; var &params: real);
    begin
      z_GetVertexAttribdv_ovr_0(index, pname, &params);
    end;
    public z_GetVertexAttribdv_ovr_2 := GetFuncOrNil&<procedure(index: UInt32; pname: VertexAttribPropertyARB; &params: IntPtr)>(z_GetVertexAttribdv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetVertexAttribdv(index: UInt32; pname: VertexAttribPropertyARB; &params: IntPtr);
    begin
      z_GetVertexAttribdv_ovr_2(index, pname, &params);
    end;
    
    // added in gl2.0
    public z_GetVertexAttribfv_adr := GetFuncAdr('glGetVertexAttribfv');
    public z_GetVertexAttribfv_ovr_0 := GetFuncOrNil&<procedure(index: UInt32; pname: VertexAttribPropertyARB; var &params: single)>(z_GetVertexAttribfv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetVertexAttribfv(index: UInt32; pname: VertexAttribPropertyARB; &params: array of single);
    begin
      z_GetVertexAttribfv_ovr_0(index, pname, &params[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetVertexAttribfv(index: UInt32; pname: VertexAttribPropertyARB; var &params: single);
    begin
      z_GetVertexAttribfv_ovr_0(index, pname, &params);
    end;
    public z_GetVertexAttribfv_ovr_2 := GetFuncOrNil&<procedure(index: UInt32; pname: VertexAttribPropertyARB; &params: IntPtr)>(z_GetVertexAttribfv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetVertexAttribfv(index: UInt32; pname: VertexAttribPropertyARB; &params: IntPtr);
    begin
      z_GetVertexAttribfv_ovr_2(index, pname, &params);
    end;
    
    // added in gl3.0
    public z_GetVertexAttribIiv_adr := GetFuncAdr('glGetVertexAttribIiv');
    public z_GetVertexAttribIiv_ovr_0 := GetFuncOrNil&<procedure(index: UInt32; pname: VertexAttribEnum; var &params: Int32)>(z_GetVertexAttribIiv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetVertexAttribIiv(index: UInt32; pname: VertexAttribEnum; &params: array of Int32);
    begin
      z_GetVertexAttribIiv_ovr_0(index, pname, &params[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetVertexAttribIiv(index: UInt32; pname: VertexAttribEnum; var &params: Int32);
    begin
      z_GetVertexAttribIiv_ovr_0(index, pname, &params);
    end;
    public z_GetVertexAttribIiv_ovr_2 := GetFuncOrNil&<procedure(index: UInt32; pname: VertexAttribEnum; &params: IntPtr)>(z_GetVertexAttribIiv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetVertexAttribIiv(index: UInt32; pname: VertexAttribEnum; &params: IntPtr);
    begin
      z_GetVertexAttribIiv_ovr_2(index, pname, &params);
    end;
    
    // added in gl3.0
    public z_GetVertexAttribIuiv_adr := GetFuncAdr('glGetVertexAttribIuiv');
    public z_GetVertexAttribIuiv_ovr_0 := GetFuncOrNil&<procedure(index: UInt32; pname: VertexAttribEnum; var &params: UInt32)>(z_GetVertexAttribIuiv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetVertexAttribIuiv(index: UInt32; pname: VertexAttribEnum; &params: array of UInt32);
    begin
      z_GetVertexAttribIuiv_ovr_0(index, pname, &params[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetVertexAttribIuiv(index: UInt32; pname: VertexAttribEnum; var &params: UInt32);
    begin
      z_GetVertexAttribIuiv_ovr_0(index, pname, &params);
    end;
    public z_GetVertexAttribIuiv_ovr_2 := GetFuncOrNil&<procedure(index: UInt32; pname: VertexAttribEnum; &params: IntPtr)>(z_GetVertexAttribIuiv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetVertexAttribIuiv(index: UInt32; pname: VertexAttribEnum; &params: IntPtr);
    begin
      z_GetVertexAttribIuiv_ovr_2(index, pname, &params);
    end;
    
    // added in gl2.0
    public z_GetVertexAttribiv_adr := GetFuncAdr('glGetVertexAttribiv');
    public z_GetVertexAttribiv_ovr_0 := GetFuncOrNil&<procedure(index: UInt32; pname: VertexAttribPropertyARB; var &params: Int32)>(z_GetVertexAttribiv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetVertexAttribiv(index: UInt32; pname: VertexAttribPropertyARB; &params: array of Int32);
    begin
      z_GetVertexAttribiv_ovr_0(index, pname, &params[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetVertexAttribiv(index: UInt32; pname: VertexAttribPropertyARB; var &params: Int32);
    begin
      z_GetVertexAttribiv_ovr_0(index, pname, &params);
    end;
    public z_GetVertexAttribiv_ovr_2 := GetFuncOrNil&<procedure(index: UInt32; pname: VertexAttribPropertyARB; &params: IntPtr)>(z_GetVertexAttribiv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetVertexAttribiv(index: UInt32; pname: VertexAttribPropertyARB; &params: IntPtr);
    begin
      z_GetVertexAttribiv_ovr_2(index, pname, &params);
    end;
    
    // added in gl4.1
    public z_GetVertexAttribLdv_adr := GetFuncAdr('glGetVertexAttribLdv');
    public z_GetVertexAttribLdv_ovr_0 := GetFuncOrNil&<procedure(index: UInt32; pname: VertexAttribEnum; var &params: real)>(z_GetVertexAttribLdv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetVertexAttribLdv(index: UInt32; pname: VertexAttribEnum; &params: array of real);
    begin
      z_GetVertexAttribLdv_ovr_0(index, pname, &params[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetVertexAttribLdv(index: UInt32; pname: VertexAttribEnum; var &params: real);
    begin
      z_GetVertexAttribLdv_ovr_0(index, pname, &params);
    end;
    public z_GetVertexAttribLdv_ovr_2 := GetFuncOrNil&<procedure(index: UInt32; pname: VertexAttribEnum; &params: IntPtr)>(z_GetVertexAttribLdv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetVertexAttribLdv(index: UInt32; pname: VertexAttribEnum; &params: IntPtr);
    begin
      z_GetVertexAttribLdv_ovr_2(index, pname, &params);
    end;
    
    // added in gl2.0
    public z_GetVertexAttribPointerv_adr := GetFuncAdr('glGetVertexAttribPointerv');
    public z_GetVertexAttribPointerv_ovr_0 := GetFuncOrNil&<procedure(index: UInt32; pname: VertexAttribPointerPropertyARB; var _pointer: IntPtr)>(z_GetVertexAttribPointerv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetVertexAttribPointerv(index: UInt32; pname: VertexAttribPointerPropertyARB; _pointer: array of IntPtr);
    begin
      z_GetVertexAttribPointerv_ovr_0(index, pname, _pointer[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetVertexAttribPointerv(index: UInt32; pname: VertexAttribPointerPropertyARB; var _pointer: IntPtr);
    begin
      z_GetVertexAttribPointerv_ovr_0(index, pname, _pointer);
    end;
    public z_GetVertexAttribPointerv_ovr_2 := GetFuncOrNil&<procedure(index: UInt32; pname: VertexAttribPointerPropertyARB; _pointer: pointer)>(z_GetVertexAttribPointerv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetVertexAttribPointerv(index: UInt32; pname: VertexAttribPointerPropertyARB; _pointer: pointer);
    begin
      z_GetVertexAttribPointerv_ovr_2(index, pname, _pointer);
    end;
    
    // added in gl1.0
    private static procedure _z_Hint_ovr0(target: HintTarget; mode: HintMode);
    external 'opengl32.dll' name 'glHint';
    public static z_Hint_ovr0 := _z_Hint_ovr0;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Hint(target: HintTarget; mode: HintMode) := z_Hint_ovr0(target, mode);
    
    // added in gl4.3
    public z_InvalidateBufferData_adr := GetFuncAdr('glInvalidateBufferData');
    public z_InvalidateBufferData_ovr_0 := GetFuncOrNil&<procedure(buffer: BufferName)>(z_InvalidateBufferData_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure InvalidateBufferData(buffer: BufferName);
    begin
      z_InvalidateBufferData_ovr_0(buffer);
    end;
    
    // added in gl4.3
    public z_InvalidateBufferSubData_adr := GetFuncAdr('glInvalidateBufferSubData');
    public z_InvalidateBufferSubData_ovr_0 := GetFuncOrNil&<procedure(buffer: BufferName; offset: IntPtr; length: IntPtr)>(z_InvalidateBufferSubData_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure InvalidateBufferSubData(buffer: BufferName; offset: IntPtr; length: IntPtr);
    begin
      z_InvalidateBufferSubData_ovr_0(buffer, offset, length);
    end;
    
    // added in gl4.3
    public z_InvalidateFramebuffer_adr := GetFuncAdr('glInvalidateFramebuffer');
    public z_InvalidateFramebuffer_ovr_0 := GetFuncOrNil&<procedure(target: FramebufferTarget; numAttachments: Int32; var attachments: InvalidateFramebufferAttachment)>(z_InvalidateFramebuffer_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure InvalidateFramebuffer(target: FramebufferTarget; numAttachments: Int32; attachments: array of InvalidateFramebufferAttachment);
    begin
      z_InvalidateFramebuffer_ovr_0(target, numAttachments, attachments[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure InvalidateFramebuffer(target: FramebufferTarget; numAttachments: Int32; var attachments: InvalidateFramebufferAttachment);
    begin
      z_InvalidateFramebuffer_ovr_0(target, numAttachments, attachments);
    end;
    public z_InvalidateFramebuffer_ovr_2 := GetFuncOrNil&<procedure(target: FramebufferTarget; numAttachments: Int32; attachments: IntPtr)>(z_InvalidateFramebuffer_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure InvalidateFramebuffer(target: FramebufferTarget; numAttachments: Int32; attachments: IntPtr);
    begin
      z_InvalidateFramebuffer_ovr_2(target, numAttachments, attachments);
    end;
    
    // added in gl4.5
    public z_InvalidateNamedFramebufferData_adr := GetFuncAdr('glInvalidateNamedFramebufferData');
    public z_InvalidateNamedFramebufferData_ovr_0 := GetFuncOrNil&<procedure(framebuffer: UInt32; numAttachments: Int32; var attachments: FramebufferAttachment)>(z_InvalidateNamedFramebufferData_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure InvalidateNamedFramebufferData(framebuffer: UInt32; numAttachments: Int32; attachments: array of FramebufferAttachment);
    begin
      z_InvalidateNamedFramebufferData_ovr_0(framebuffer, numAttachments, attachments[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure InvalidateNamedFramebufferData(framebuffer: UInt32; numAttachments: Int32; var attachments: FramebufferAttachment);
    begin
      z_InvalidateNamedFramebufferData_ovr_0(framebuffer, numAttachments, attachments);
    end;
    public z_InvalidateNamedFramebufferData_ovr_2 := GetFuncOrNil&<procedure(framebuffer: UInt32; numAttachments: Int32; attachments: IntPtr)>(z_InvalidateNamedFramebufferData_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure InvalidateNamedFramebufferData(framebuffer: UInt32; numAttachments: Int32; attachments: IntPtr);
    begin
      z_InvalidateNamedFramebufferData_ovr_2(framebuffer, numAttachments, attachments);
    end;
    
    // added in gl4.5
    public z_InvalidateNamedFramebufferSubData_adr := GetFuncAdr('glInvalidateNamedFramebufferSubData');
    public z_InvalidateNamedFramebufferSubData_ovr_0 := GetFuncOrNil&<procedure(framebuffer: UInt32; numAttachments: Int32; var attachments: FramebufferAttachment; x: Int32; y: Int32; width: Int32; height: Int32)>(z_InvalidateNamedFramebufferSubData_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure InvalidateNamedFramebufferSubData(framebuffer: UInt32; numAttachments: Int32; attachments: array of FramebufferAttachment; x: Int32; y: Int32; width: Int32; height: Int32);
    begin
      z_InvalidateNamedFramebufferSubData_ovr_0(framebuffer, numAttachments, attachments[0], x, y, width, height);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure InvalidateNamedFramebufferSubData(framebuffer: UInt32; numAttachments: Int32; var attachments: FramebufferAttachment; x: Int32; y: Int32; width: Int32; height: Int32);
    begin
      z_InvalidateNamedFramebufferSubData_ovr_0(framebuffer, numAttachments, attachments, x, y, width, height);
    end;
    public z_InvalidateNamedFramebufferSubData_ovr_2 := GetFuncOrNil&<procedure(framebuffer: UInt32; numAttachments: Int32; attachments: IntPtr; x: Int32; y: Int32; width: Int32; height: Int32)>(z_InvalidateNamedFramebufferSubData_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure InvalidateNamedFramebufferSubData(framebuffer: UInt32; numAttachments: Int32; attachments: IntPtr; x: Int32; y: Int32; width: Int32; height: Int32);
    begin
      z_InvalidateNamedFramebufferSubData_ovr_2(framebuffer, numAttachments, attachments, x, y, width, height);
    end;
    
    // added in gl4.3
    public z_InvalidateSubFramebuffer_adr := GetFuncAdr('glInvalidateSubFramebuffer');
    public z_InvalidateSubFramebuffer_ovr_0 := GetFuncOrNil&<procedure(target: FramebufferTarget; numAttachments: Int32; var attachments: InvalidateFramebufferAttachment; x: Int32; y: Int32; width: Int32; height: Int32)>(z_InvalidateSubFramebuffer_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure InvalidateSubFramebuffer(target: FramebufferTarget; numAttachments: Int32; attachments: array of InvalidateFramebufferAttachment; x: Int32; y: Int32; width: Int32; height: Int32);
    begin
      z_InvalidateSubFramebuffer_ovr_0(target, numAttachments, attachments[0], x, y, width, height);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure InvalidateSubFramebuffer(target: FramebufferTarget; numAttachments: Int32; var attachments: InvalidateFramebufferAttachment; x: Int32; y: Int32; width: Int32; height: Int32);
    begin
      z_InvalidateSubFramebuffer_ovr_0(target, numAttachments, attachments, x, y, width, height);
    end;
    public z_InvalidateSubFramebuffer_ovr_2 := GetFuncOrNil&<procedure(target: FramebufferTarget; numAttachments: Int32; attachments: IntPtr; x: Int32; y: Int32; width: Int32; height: Int32)>(z_InvalidateSubFramebuffer_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure InvalidateSubFramebuffer(target: FramebufferTarget; numAttachments: Int32; attachments: IntPtr; x: Int32; y: Int32; width: Int32; height: Int32);
    begin
      z_InvalidateSubFramebuffer_ovr_2(target, numAttachments, attachments, x, y, width, height);
    end;
    
    // added in gl4.3
    public z_InvalidateTexImage_adr := GetFuncAdr('glInvalidateTexImage');
    public z_InvalidateTexImage_ovr_0 := GetFuncOrNil&<procedure(texture: TextureName; level: Int32)>(z_InvalidateTexImage_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure InvalidateTexImage(texture: TextureName; level: Int32);
    begin
      z_InvalidateTexImage_ovr_0(texture, level);
    end;
    
    // added in gl4.3
    public z_InvalidateTexSubImage_adr := GetFuncAdr('glInvalidateTexSubImage');
    public z_InvalidateTexSubImage_ovr_0 := GetFuncOrNil&<procedure(texture: TextureName; level: Int32; xoffset: Int32; yoffset: Int32; zoffset: Int32; width: Int32; height: Int32; depth: Int32)>(z_InvalidateTexSubImage_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure InvalidateTexSubImage(texture: TextureName; level: Int32; xoffset: Int32; yoffset: Int32; zoffset: Int32; width: Int32; height: Int32; depth: Int32);
    begin
      z_InvalidateTexSubImage_ovr_0(texture, level, xoffset, yoffset, zoffset, width, height, depth);
    end;
    
    // added in gl1.5
    public z_IsBuffer_adr := GetFuncAdr('glIsBuffer');
    public z_IsBuffer_ovr_0 := GetFuncOrNil&<function(buffer: BufferName): boolean>(z_IsBuffer_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function IsBuffer(buffer: BufferName): boolean;
    begin
      Result := z_IsBuffer_ovr_0(buffer);
    end;
    
    // added in gl1.0
    private static function _z_IsEnabled_ovr0(cap: EnableCap): boolean;
    external 'opengl32.dll' name 'glIsEnabled';
    public static z_IsEnabled_ovr0 := _z_IsEnabled_ovr0;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function IsEnabled(cap: EnableCap): boolean := z_IsEnabled_ovr0(cap);
    
    // added in gl3.0
    public z_IsEnabledi_adr := GetFuncAdr('glIsEnabledi');
    public z_IsEnabledi_ovr_0 := GetFuncOrNil&<function(target: EnableCap; index: UInt32): boolean>(z_IsEnabledi_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function IsEnabledi(target: EnableCap; index: UInt32): boolean;
    begin
      Result := z_IsEnabledi_ovr_0(target, index);
    end;
    
    // added in gl3.0
    public z_IsFramebuffer_adr := GetFuncAdr('glIsFramebuffer');
    public z_IsFramebuffer_ovr_0 := GetFuncOrNil&<function(framebuffer: FramebufferName): boolean>(z_IsFramebuffer_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function IsFramebuffer(framebuffer: FramebufferName): boolean;
    begin
      Result := z_IsFramebuffer_ovr_0(framebuffer);
    end;
    
    // added in gl2.0
    public z_IsProgram_adr := GetFuncAdr('glIsProgram');
    public z_IsProgram_ovr_0 := GetFuncOrNil&<function(&program: ProgramName): boolean>(z_IsProgram_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function IsProgram(&program: ProgramName): boolean;
    begin
      Result := z_IsProgram_ovr_0(&program);
    end;
    
    // added in gl4.1
    public z_IsProgramPipeline_adr := GetFuncAdr('glIsProgramPipeline');
    public z_IsProgramPipeline_ovr_0 := GetFuncOrNil&<function(pipeline: ProgramPipelineName): boolean>(z_IsProgramPipeline_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function IsProgramPipeline(pipeline: ProgramPipelineName): boolean;
    begin
      Result := z_IsProgramPipeline_ovr_0(pipeline);
    end;
    
    // added in gl1.5
    public z_IsQuery_adr := GetFuncAdr('glIsQuery');
    public z_IsQuery_ovr_0 := GetFuncOrNil&<function(id: QueryName): boolean>(z_IsQuery_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function IsQuery(id: QueryName): boolean;
    begin
      Result := z_IsQuery_ovr_0(id);
    end;
    
    // added in gl3.0
    public z_IsRenderbuffer_adr := GetFuncAdr('glIsRenderbuffer');
    public z_IsRenderbuffer_ovr_0 := GetFuncOrNil&<function(renderbuffer: RenderbufferName): boolean>(z_IsRenderbuffer_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function IsRenderbuffer(renderbuffer: RenderbufferName): boolean;
    begin
      Result := z_IsRenderbuffer_ovr_0(renderbuffer);
    end;
    
    // added in gl3.3
    public z_IsSampler_adr := GetFuncAdr('glIsSampler');
    public z_IsSampler_ovr_0 := GetFuncOrNil&<function(sampler: SamplerName): boolean>(z_IsSampler_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function IsSampler(sampler: SamplerName): boolean;
    begin
      Result := z_IsSampler_ovr_0(sampler);
    end;
    
    // added in gl2.0
    public z_IsShader_adr := GetFuncAdr('glIsShader');
    public z_IsShader_ovr_0 := GetFuncOrNil&<function(shader: ShaderName): boolean>(z_IsShader_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function IsShader(shader: ShaderName): boolean;
    begin
      Result := z_IsShader_ovr_0(shader);
    end;
    
    // added in gl3.2
    public z_IsSync_adr := GetFuncAdr('glIsSync');
    public z_IsSync_ovr_0 := GetFuncOrNil&<function(sync: GLsync): boolean>(z_IsSync_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function IsSync(sync: GLsync): boolean;
    begin
      Result := z_IsSync_ovr_0(sync);
    end;
    
    // added in gl1.1
    private static function _z_IsTexture_ovr0(texture: TextureName): boolean;
    external 'opengl32.dll' name 'glIsTexture';
    public static z_IsTexture_ovr0 := _z_IsTexture_ovr0;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function IsTexture(texture: TextureName): boolean := z_IsTexture_ovr0(texture);
    
    // added in gl4.0
    public z_IsTransformFeedback_adr := GetFuncAdr('glIsTransformFeedback');
    public z_IsTransformFeedback_ovr_0 := GetFuncOrNil&<function(id: TransformFeedbackName): boolean>(z_IsTransformFeedback_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function IsTransformFeedback(id: TransformFeedbackName): boolean;
    begin
      Result := z_IsTransformFeedback_ovr_0(id);
    end;
    
    // added in gl3.0
    public z_IsVertexArray_adr := GetFuncAdr('glIsVertexArray');
    public z_IsVertexArray_ovr_0 := GetFuncOrNil&<function(&array: VertexArrayName): boolean>(z_IsVertexArray_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function IsVertexArray(&array: VertexArrayName): boolean;
    begin
      Result := z_IsVertexArray_ovr_0(&array);
    end;
    
    // added in gl1.0
    private static procedure _z_LineWidth_ovr0(width: single);
    external 'opengl32.dll' name 'glLineWidth';
    public static z_LineWidth_ovr0 := _z_LineWidth_ovr0;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure LineWidth(width: single) := z_LineWidth_ovr0(width);
    
    // added in gl2.0
    public z_LinkProgram_adr := GetFuncAdr('glLinkProgram');
    public z_LinkProgram_ovr_0 := GetFuncOrNil&<procedure(&program: ProgramName)>(z_LinkProgram_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure LinkProgram(&program: ProgramName);
    begin
      z_LinkProgram_ovr_0(&program);
    end;
    
    // added in gl1.0
    private static procedure _z_LogicOp_ovr0(opcode: OpenGL.LogicOp);
    external 'opengl32.dll' name 'glLogicOp';
    public static z_LogicOp_ovr0 := _z_LogicOp_ovr0;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure LogicOp(opcode: OpenGL.LogicOp) := z_LogicOp_ovr0(opcode);
    
    // added in gl1.5
    public z_MapBuffer_adr := GetFuncAdr('glMapBuffer');
    public z_MapBuffer_ovr_0 := GetFuncOrNil&<function(target: BufferTargetARB; access: BufferAccessARB): IntPtr>(z_MapBuffer_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function MapBuffer(target: BufferTargetARB; access: BufferAccessARB): IntPtr;
    begin
      Result := z_MapBuffer_ovr_0(target, access);
    end;
    
    // added in gl3.0
    public z_MapBufferRange_adr := GetFuncAdr('glMapBufferRange');
    public z_MapBufferRange_ovr_0 := GetFuncOrNil&<function(target: BufferTargetARB; offset: IntPtr; length: IntPtr; access: MapBufferAccessMask): IntPtr>(z_MapBufferRange_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function MapBufferRange(target: BufferTargetARB; offset: IntPtr; length: IntPtr; access: MapBufferAccessMask): IntPtr;
    begin
      Result := z_MapBufferRange_ovr_0(target, offset, length, access);
    end;
    
    // added in gl4.5
    public z_MapNamedBuffer_adr := GetFuncAdr('glMapNamedBuffer');
    public z_MapNamedBuffer_ovr_0 := GetFuncOrNil&<function(buffer: BufferName; access: BufferAccessARB): IntPtr>(z_MapNamedBuffer_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function MapNamedBuffer(buffer: BufferName; access: BufferAccessARB): IntPtr;
    begin
      Result := z_MapNamedBuffer_ovr_0(buffer, access);
    end;
    
    // added in gl4.5
    public z_MapNamedBufferRange_adr := GetFuncAdr('glMapNamedBufferRange');
    public z_MapNamedBufferRange_ovr_0 := GetFuncOrNil&<function(buffer: BufferName; offset: IntPtr; length: IntPtr; access: MapBufferAccessMask): IntPtr>(z_MapNamedBufferRange_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function MapNamedBufferRange(buffer: BufferName; offset: IntPtr; length: IntPtr; access: MapBufferAccessMask): IntPtr;
    begin
      Result := z_MapNamedBufferRange_ovr_0(buffer, offset, length, access);
    end;
    
    // added in gl4.2
    public z_MemoryBarrier_adr := GetFuncAdr('glMemoryBarrier');
    public z_MemoryBarrier_ovr_0 := GetFuncOrNil&<procedure(barriers: MemoryBarrierMask)>(z_MemoryBarrier_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MemoryBarrier(barriers: MemoryBarrierMask);
    begin
      z_MemoryBarrier_ovr_0(barriers);
    end;
    
    // added in gl4.5
    public z_MemoryBarrierByRegion_adr := GetFuncAdr('glMemoryBarrierByRegion');
    public z_MemoryBarrierByRegion_ovr_0 := GetFuncOrNil&<procedure(barriers: MemoryBarrierMask)>(z_MemoryBarrierByRegion_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MemoryBarrierByRegion(barriers: MemoryBarrierMask);
    begin
      z_MemoryBarrierByRegion_ovr_0(barriers);
    end;
    
    // added in gl4.0
    public z_MinSampleShading_adr := GetFuncAdr('glMinSampleShading');
    public z_MinSampleShading_ovr_0 := GetFuncOrNil&<procedure(value: single)>(z_MinSampleShading_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MinSampleShading(value: single);
    begin
      z_MinSampleShading_ovr_0(value);
    end;
    
    // added in gl1.4
    public z_MultiDrawArrays_adr := GetFuncAdr('glMultiDrawArrays');
    public z_MultiDrawArrays_ovr_0 := GetFuncOrNil&<procedure(mode: PrimitiveType; var first: Int32; var count: Int32; drawcount: Int32)>(z_MultiDrawArrays_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiDrawArrays(mode: PrimitiveType; first: array of Int32; count: array of Int32; drawcount: Int32);
    begin
      z_MultiDrawArrays_ovr_0(mode, first[0], count[0], drawcount);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiDrawArrays(mode: PrimitiveType; first: array of Int32; var count: Int32; drawcount: Int32);
    begin
      z_MultiDrawArrays_ovr_0(mode, first[0], count, drawcount);
    end;
    public z_MultiDrawArrays_ovr_2 := GetFuncOrNil&<procedure(mode: PrimitiveType; var first: Int32; count: IntPtr; drawcount: Int32)>(z_MultiDrawArrays_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiDrawArrays(mode: PrimitiveType; first: array of Int32; count: IntPtr; drawcount: Int32);
    begin
      z_MultiDrawArrays_ovr_2(mode, first[0], count, drawcount);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiDrawArrays(mode: PrimitiveType; var first: Int32; count: array of Int32; drawcount: Int32);
    begin
      z_MultiDrawArrays_ovr_0(mode, first, count[0], drawcount);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiDrawArrays(mode: PrimitiveType; var first: Int32; var count: Int32; drawcount: Int32);
    begin
      z_MultiDrawArrays_ovr_0(mode, first, count, drawcount);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiDrawArrays(mode: PrimitiveType; var first: Int32; count: IntPtr; drawcount: Int32);
    begin
      z_MultiDrawArrays_ovr_2(mode, first, count, drawcount);
    end;
    public z_MultiDrawArrays_ovr_6 := GetFuncOrNil&<procedure(mode: PrimitiveType; first: IntPtr; var count: Int32; drawcount: Int32)>(z_MultiDrawArrays_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiDrawArrays(mode: PrimitiveType; first: IntPtr; count: array of Int32; drawcount: Int32);
    begin
      z_MultiDrawArrays_ovr_6(mode, first, count[0], drawcount);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiDrawArrays(mode: PrimitiveType; first: IntPtr; var count: Int32; drawcount: Int32);
    begin
      z_MultiDrawArrays_ovr_6(mode, first, count, drawcount);
    end;
    public z_MultiDrawArrays_ovr_8 := GetFuncOrNil&<procedure(mode: PrimitiveType; first: IntPtr; count: IntPtr; drawcount: Int32)>(z_MultiDrawArrays_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiDrawArrays(mode: PrimitiveType; first: IntPtr; count: IntPtr; drawcount: Int32);
    begin
      z_MultiDrawArrays_ovr_8(mode, first, count, drawcount);
    end;
    
    // added in gl4.3
    public z_MultiDrawArraysIndirect_adr := GetFuncAdr('glMultiDrawArraysIndirect');
    public z_MultiDrawArraysIndirect_ovr_0 := GetFuncOrNil&<procedure(mode: PrimitiveType; indirect: IntPtr; drawcount: Int32; stride: Int32)>(z_MultiDrawArraysIndirect_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiDrawArraysIndirect(mode: PrimitiveType; indirect: IntPtr; drawcount: Int32; stride: Int32);
    begin
      z_MultiDrawArraysIndirect_ovr_0(mode, indirect, drawcount, stride);
    end;
    
    // added in gl4.6
    public z_MultiDrawArraysIndirectCount_adr := GetFuncAdr('glMultiDrawArraysIndirectCount');
    public z_MultiDrawArraysIndirectCount_ovr_0 := GetFuncOrNil&<procedure(mode: PrimitiveType; indirect: IntPtr; drawcount: IntPtr; maxdrawcount: Int32; stride: Int32)>(z_MultiDrawArraysIndirectCount_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiDrawArraysIndirectCount(mode: PrimitiveType; indirect: IntPtr; drawcount: IntPtr; maxdrawcount: Int32; stride: Int32);
    begin
      z_MultiDrawArraysIndirectCount_ovr_0(mode, indirect, drawcount, maxdrawcount, stride);
    end;
    
    // added in gl1.4
    public z_MultiDrawElements_adr := GetFuncAdr('glMultiDrawElements');
    public z_MultiDrawElements_ovr_0 := GetFuncOrNil&<procedure(mode: PrimitiveType; var count: Int32; &type: DrawElementsType; var indices: IntPtr; drawcount: Int32)>(z_MultiDrawElements_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiDrawElements(mode: PrimitiveType; count: array of Int32; &type: DrawElementsType; indices: array of IntPtr; drawcount: Int32);
    begin
      z_MultiDrawElements_ovr_0(mode, count[0], &type, indices[0], drawcount);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiDrawElements(mode: PrimitiveType; count: array of Int32; &type: DrawElementsType; var indices: IntPtr; drawcount: Int32);
    begin
      z_MultiDrawElements_ovr_0(mode, count[0], &type, indices, drawcount);
    end;
    public z_MultiDrawElements_ovr_2 := GetFuncOrNil&<procedure(mode: PrimitiveType; var count: Int32; &type: DrawElementsType; indices: pointer; drawcount: Int32)>(z_MultiDrawElements_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiDrawElements(mode: PrimitiveType; count: array of Int32; &type: DrawElementsType; indices: pointer; drawcount: Int32);
    begin
      z_MultiDrawElements_ovr_2(mode, count[0], &type, indices, drawcount);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiDrawElements(mode: PrimitiveType; var count: Int32; &type: DrawElementsType; indices: array of IntPtr; drawcount: Int32);
    begin
      z_MultiDrawElements_ovr_0(mode, count, &type, indices[0], drawcount);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiDrawElements(mode: PrimitiveType; var count: Int32; &type: DrawElementsType; var indices: IntPtr; drawcount: Int32);
    begin
      z_MultiDrawElements_ovr_0(mode, count, &type, indices, drawcount);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiDrawElements(mode: PrimitiveType; var count: Int32; &type: DrawElementsType; indices: pointer; drawcount: Int32);
    begin
      z_MultiDrawElements_ovr_2(mode, count, &type, indices, drawcount);
    end;
    public z_MultiDrawElements_ovr_6 := GetFuncOrNil&<procedure(mode: PrimitiveType; count: IntPtr; &type: DrawElementsType; var indices: IntPtr; drawcount: Int32)>(z_MultiDrawElements_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiDrawElements(mode: PrimitiveType; count: IntPtr; &type: DrawElementsType; indices: array of IntPtr; drawcount: Int32);
    begin
      z_MultiDrawElements_ovr_6(mode, count, &type, indices[0], drawcount);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiDrawElements(mode: PrimitiveType; count: IntPtr; &type: DrawElementsType; var indices: IntPtr; drawcount: Int32);
    begin
      z_MultiDrawElements_ovr_6(mode, count, &type, indices, drawcount);
    end;
    public z_MultiDrawElements_ovr_8 := GetFuncOrNil&<procedure(mode: PrimitiveType; count: IntPtr; &type: DrawElementsType; indices: pointer; drawcount: Int32)>(z_MultiDrawElements_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiDrawElements(mode: PrimitiveType; count: IntPtr; &type: DrawElementsType; indices: pointer; drawcount: Int32);
    begin
      z_MultiDrawElements_ovr_8(mode, count, &type, indices, drawcount);
    end;
    
    // added in gl3.2
    public z_MultiDrawElementsBaseVertex_adr := GetFuncAdr('glMultiDrawElementsBaseVertex');
    public z_MultiDrawElementsBaseVertex_ovr_0 := GetFuncOrNil&<procedure(mode: PrimitiveType; var count: Int32; &type: DrawElementsType; var indices: IntPtr; drawcount: Int32; var basevertex: Int32)>(z_MultiDrawElementsBaseVertex_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiDrawElementsBaseVertex(mode: PrimitiveType; count: array of Int32; &type: DrawElementsType; indices: array of IntPtr; drawcount: Int32; basevertex: array of Int32);
    begin
      z_MultiDrawElementsBaseVertex_ovr_0(mode, count[0], &type, indices[0], drawcount, basevertex[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiDrawElementsBaseVertex(mode: PrimitiveType; count: array of Int32; &type: DrawElementsType; indices: array of IntPtr; drawcount: Int32; var basevertex: Int32);
    begin
      z_MultiDrawElementsBaseVertex_ovr_0(mode, count[0], &type, indices[0], drawcount, basevertex);
    end;
    public z_MultiDrawElementsBaseVertex_ovr_2 := GetFuncOrNil&<procedure(mode: PrimitiveType; var count: Int32; &type: DrawElementsType; var indices: IntPtr; drawcount: Int32; basevertex: IntPtr)>(z_MultiDrawElementsBaseVertex_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiDrawElementsBaseVertex(mode: PrimitiveType; count: array of Int32; &type: DrawElementsType; indices: array of IntPtr; drawcount: Int32; basevertex: IntPtr);
    begin
      z_MultiDrawElementsBaseVertex_ovr_2(mode, count[0], &type, indices[0], drawcount, basevertex);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiDrawElementsBaseVertex(mode: PrimitiveType; count: array of Int32; &type: DrawElementsType; var indices: IntPtr; drawcount: Int32; basevertex: array of Int32);
    begin
      z_MultiDrawElementsBaseVertex_ovr_0(mode, count[0], &type, indices, drawcount, basevertex[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiDrawElementsBaseVertex(mode: PrimitiveType; count: array of Int32; &type: DrawElementsType; var indices: IntPtr; drawcount: Int32; var basevertex: Int32);
    begin
      z_MultiDrawElementsBaseVertex_ovr_0(mode, count[0], &type, indices, drawcount, basevertex);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiDrawElementsBaseVertex(mode: PrimitiveType; count: array of Int32; &type: DrawElementsType; var indices: IntPtr; drawcount: Int32; basevertex: IntPtr);
    begin
      z_MultiDrawElementsBaseVertex_ovr_2(mode, count[0], &type, indices, drawcount, basevertex);
    end;
    public z_MultiDrawElementsBaseVertex_ovr_6 := GetFuncOrNil&<procedure(mode: PrimitiveType; var count: Int32; &type: DrawElementsType; indices: pointer; drawcount: Int32; var basevertex: Int32)>(z_MultiDrawElementsBaseVertex_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiDrawElementsBaseVertex(mode: PrimitiveType; count: array of Int32; &type: DrawElementsType; indices: pointer; drawcount: Int32; basevertex: array of Int32);
    begin
      z_MultiDrawElementsBaseVertex_ovr_6(mode, count[0], &type, indices, drawcount, basevertex[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiDrawElementsBaseVertex(mode: PrimitiveType; count: array of Int32; &type: DrawElementsType; indices: pointer; drawcount: Int32; var basevertex: Int32);
    begin
      z_MultiDrawElementsBaseVertex_ovr_6(mode, count[0], &type, indices, drawcount, basevertex);
    end;
    public z_MultiDrawElementsBaseVertex_ovr_8 := GetFuncOrNil&<procedure(mode: PrimitiveType; var count: Int32; &type: DrawElementsType; indices: pointer; drawcount: Int32; basevertex: IntPtr)>(z_MultiDrawElementsBaseVertex_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiDrawElementsBaseVertex(mode: PrimitiveType; count: array of Int32; &type: DrawElementsType; indices: pointer; drawcount: Int32; basevertex: IntPtr);
    begin
      z_MultiDrawElementsBaseVertex_ovr_8(mode, count[0], &type, indices, drawcount, basevertex);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiDrawElementsBaseVertex(mode: PrimitiveType; var count: Int32; &type: DrawElementsType; indices: array of IntPtr; drawcount: Int32; basevertex: array of Int32);
    begin
      z_MultiDrawElementsBaseVertex_ovr_0(mode, count, &type, indices[0], drawcount, basevertex[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiDrawElementsBaseVertex(mode: PrimitiveType; var count: Int32; &type: DrawElementsType; indices: array of IntPtr; drawcount: Int32; var basevertex: Int32);
    begin
      z_MultiDrawElementsBaseVertex_ovr_0(mode, count, &type, indices[0], drawcount, basevertex);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiDrawElementsBaseVertex(mode: PrimitiveType; var count: Int32; &type: DrawElementsType; indices: array of IntPtr; drawcount: Int32; basevertex: IntPtr);
    begin
      z_MultiDrawElementsBaseVertex_ovr_2(mode, count, &type, indices[0], drawcount, basevertex);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiDrawElementsBaseVertex(mode: PrimitiveType; var count: Int32; &type: DrawElementsType; var indices: IntPtr; drawcount: Int32; basevertex: array of Int32);
    begin
      z_MultiDrawElementsBaseVertex_ovr_0(mode, count, &type, indices, drawcount, basevertex[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiDrawElementsBaseVertex(mode: PrimitiveType; var count: Int32; &type: DrawElementsType; var indices: IntPtr; drawcount: Int32; var basevertex: Int32);
    begin
      z_MultiDrawElementsBaseVertex_ovr_0(mode, count, &type, indices, drawcount, basevertex);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiDrawElementsBaseVertex(mode: PrimitiveType; var count: Int32; &type: DrawElementsType; var indices: IntPtr; drawcount: Int32; basevertex: IntPtr);
    begin
      z_MultiDrawElementsBaseVertex_ovr_2(mode, count, &type, indices, drawcount, basevertex);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiDrawElementsBaseVertex(mode: PrimitiveType; var count: Int32; &type: DrawElementsType; indices: pointer; drawcount: Int32; basevertex: array of Int32);
    begin
      z_MultiDrawElementsBaseVertex_ovr_6(mode, count, &type, indices, drawcount, basevertex[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiDrawElementsBaseVertex(mode: PrimitiveType; var count: Int32; &type: DrawElementsType; indices: pointer; drawcount: Int32; var basevertex: Int32);
    begin
      z_MultiDrawElementsBaseVertex_ovr_6(mode, count, &type, indices, drawcount, basevertex);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiDrawElementsBaseVertex(mode: PrimitiveType; var count: Int32; &type: DrawElementsType; indices: pointer; drawcount: Int32; basevertex: IntPtr);
    begin
      z_MultiDrawElementsBaseVertex_ovr_8(mode, count, &type, indices, drawcount, basevertex);
    end;
    public z_MultiDrawElementsBaseVertex_ovr_18 := GetFuncOrNil&<procedure(mode: PrimitiveType; count: IntPtr; &type: DrawElementsType; var indices: IntPtr; drawcount: Int32; var basevertex: Int32)>(z_MultiDrawElementsBaseVertex_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiDrawElementsBaseVertex(mode: PrimitiveType; count: IntPtr; &type: DrawElementsType; indices: array of IntPtr; drawcount: Int32; basevertex: array of Int32);
    begin
      z_MultiDrawElementsBaseVertex_ovr_18(mode, count, &type, indices[0], drawcount, basevertex[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiDrawElementsBaseVertex(mode: PrimitiveType; count: IntPtr; &type: DrawElementsType; indices: array of IntPtr; drawcount: Int32; var basevertex: Int32);
    begin
      z_MultiDrawElementsBaseVertex_ovr_18(mode, count, &type, indices[0], drawcount, basevertex);
    end;
    public z_MultiDrawElementsBaseVertex_ovr_20 := GetFuncOrNil&<procedure(mode: PrimitiveType; count: IntPtr; &type: DrawElementsType; var indices: IntPtr; drawcount: Int32; basevertex: IntPtr)>(z_MultiDrawElementsBaseVertex_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiDrawElementsBaseVertex(mode: PrimitiveType; count: IntPtr; &type: DrawElementsType; indices: array of IntPtr; drawcount: Int32; basevertex: IntPtr);
    begin
      z_MultiDrawElementsBaseVertex_ovr_20(mode, count, &type, indices[0], drawcount, basevertex);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiDrawElementsBaseVertex(mode: PrimitiveType; count: IntPtr; &type: DrawElementsType; var indices: IntPtr; drawcount: Int32; basevertex: array of Int32);
    begin
      z_MultiDrawElementsBaseVertex_ovr_18(mode, count, &type, indices, drawcount, basevertex[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiDrawElementsBaseVertex(mode: PrimitiveType; count: IntPtr; &type: DrawElementsType; var indices: IntPtr; drawcount: Int32; var basevertex: Int32);
    begin
      z_MultiDrawElementsBaseVertex_ovr_18(mode, count, &type, indices, drawcount, basevertex);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiDrawElementsBaseVertex(mode: PrimitiveType; count: IntPtr; &type: DrawElementsType; var indices: IntPtr; drawcount: Int32; basevertex: IntPtr);
    begin
      z_MultiDrawElementsBaseVertex_ovr_20(mode, count, &type, indices, drawcount, basevertex);
    end;
    public z_MultiDrawElementsBaseVertex_ovr_24 := GetFuncOrNil&<procedure(mode: PrimitiveType; count: IntPtr; &type: DrawElementsType; indices: pointer; drawcount: Int32; var basevertex: Int32)>(z_MultiDrawElementsBaseVertex_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiDrawElementsBaseVertex(mode: PrimitiveType; count: IntPtr; &type: DrawElementsType; indices: pointer; drawcount: Int32; basevertex: array of Int32);
    begin
      z_MultiDrawElementsBaseVertex_ovr_24(mode, count, &type, indices, drawcount, basevertex[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiDrawElementsBaseVertex(mode: PrimitiveType; count: IntPtr; &type: DrawElementsType; indices: pointer; drawcount: Int32; var basevertex: Int32);
    begin
      z_MultiDrawElementsBaseVertex_ovr_24(mode, count, &type, indices, drawcount, basevertex);
    end;
    public z_MultiDrawElementsBaseVertex_ovr_26 := GetFuncOrNil&<procedure(mode: PrimitiveType; count: IntPtr; &type: DrawElementsType; indices: pointer; drawcount: Int32; basevertex: IntPtr)>(z_MultiDrawElementsBaseVertex_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiDrawElementsBaseVertex(mode: PrimitiveType; count: IntPtr; &type: DrawElementsType; indices: pointer; drawcount: Int32; basevertex: IntPtr);
    begin
      z_MultiDrawElementsBaseVertex_ovr_26(mode, count, &type, indices, drawcount, basevertex);
    end;
    
    // added in gl4.3
    public z_MultiDrawElementsIndirect_adr := GetFuncAdr('glMultiDrawElementsIndirect');
    public z_MultiDrawElementsIndirect_ovr_0 := GetFuncOrNil&<procedure(mode: PrimitiveType; &type: DrawElementsType; indirect: IntPtr; drawcount: Int32; stride: Int32)>(z_MultiDrawElementsIndirect_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiDrawElementsIndirect(mode: PrimitiveType; &type: DrawElementsType; indirect: IntPtr; drawcount: Int32; stride: Int32);
    begin
      z_MultiDrawElementsIndirect_ovr_0(mode, &type, indirect, drawcount, stride);
    end;
    
    // added in gl4.6
    public z_MultiDrawElementsIndirectCount_adr := GetFuncAdr('glMultiDrawElementsIndirectCount');
    public z_MultiDrawElementsIndirectCount_ovr_0 := GetFuncOrNil&<procedure(mode: PrimitiveType; &type: DrawElementsType; indirect: IntPtr; drawcount: IntPtr; maxdrawcount: Int32; stride: Int32)>(z_MultiDrawElementsIndirectCount_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiDrawElementsIndirectCount(mode: PrimitiveType; &type: DrawElementsType; indirect: IntPtr; drawcount: IntPtr; maxdrawcount: Int32; stride: Int32);
    begin
      z_MultiDrawElementsIndirectCount_ovr_0(mode, &type, indirect, drawcount, maxdrawcount, stride);
    end;
    
    // added in gl3.3
    public z_MultiTexCoordP1ui_adr := GetFuncAdr('glMultiTexCoordP1ui');
    public z_MultiTexCoordP1ui_ovr_0 := GetFuncOrNil&<procedure(texture: TextureUnit; &type: TexCoordPointerType; coords: UInt32)>(z_MultiTexCoordP1ui_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiTexCoordP1ui(texture: TextureUnit; &type: TexCoordPointerType; coords: UInt32);
    begin
      z_MultiTexCoordP1ui_ovr_0(texture, &type, coords);
    end;
    
    // added in gl3.3
    public z_MultiTexCoordP1uiv_adr := GetFuncAdr('glMultiTexCoordP1uiv');
    public z_MultiTexCoordP1uiv_ovr_0 := GetFuncOrNil&<procedure(texture: TextureUnit; &type: TexCoordPointerType; var coords: UInt32)>(z_MultiTexCoordP1uiv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiTexCoordP1uiv(texture: TextureUnit; &type: TexCoordPointerType; coords: array of UInt32);
    begin
      z_MultiTexCoordP1uiv_ovr_0(texture, &type, coords[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiTexCoordP1uiv(texture: TextureUnit; &type: TexCoordPointerType; var coords: UInt32);
    begin
      z_MultiTexCoordP1uiv_ovr_0(texture, &type, coords);
    end;
    public z_MultiTexCoordP1uiv_ovr_2 := GetFuncOrNil&<procedure(texture: TextureUnit; &type: TexCoordPointerType; coords: IntPtr)>(z_MultiTexCoordP1uiv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiTexCoordP1uiv(texture: TextureUnit; &type: TexCoordPointerType; coords: IntPtr);
    begin
      z_MultiTexCoordP1uiv_ovr_2(texture, &type, coords);
    end;
    
    // added in gl3.3
    public z_MultiTexCoordP2ui_adr := GetFuncAdr('glMultiTexCoordP2ui');
    public z_MultiTexCoordP2ui_ovr_0 := GetFuncOrNil&<procedure(texture: TextureUnit; &type: TexCoordPointerType; coords: UInt32)>(z_MultiTexCoordP2ui_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiTexCoordP2ui(texture: TextureUnit; &type: TexCoordPointerType; coords: UInt32);
    begin
      z_MultiTexCoordP2ui_ovr_0(texture, &type, coords);
    end;
    
    // added in gl3.3
    public z_MultiTexCoordP2uiv_adr := GetFuncAdr('glMultiTexCoordP2uiv');
    public z_MultiTexCoordP2uiv_ovr_0 := GetFuncOrNil&<procedure(texture: TextureUnit; &type: TexCoordPointerType; var coords: UInt32)>(z_MultiTexCoordP2uiv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiTexCoordP2uiv(texture: TextureUnit; &type: TexCoordPointerType; coords: array of UInt32);
    begin
      z_MultiTexCoordP2uiv_ovr_0(texture, &type, coords[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiTexCoordP2uiv(texture: TextureUnit; &type: TexCoordPointerType; var coords: UInt32);
    begin
      z_MultiTexCoordP2uiv_ovr_0(texture, &type, coords);
    end;
    public z_MultiTexCoordP2uiv_ovr_2 := GetFuncOrNil&<procedure(texture: TextureUnit; &type: TexCoordPointerType; coords: IntPtr)>(z_MultiTexCoordP2uiv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiTexCoordP2uiv(texture: TextureUnit; &type: TexCoordPointerType; coords: IntPtr);
    begin
      z_MultiTexCoordP2uiv_ovr_2(texture, &type, coords);
    end;
    
    // added in gl3.3
    public z_MultiTexCoordP3ui_adr := GetFuncAdr('glMultiTexCoordP3ui');
    public z_MultiTexCoordP3ui_ovr_0 := GetFuncOrNil&<procedure(texture: TextureUnit; &type: TexCoordPointerType; coords: UInt32)>(z_MultiTexCoordP3ui_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiTexCoordP3ui(texture: TextureUnit; &type: TexCoordPointerType; coords: UInt32);
    begin
      z_MultiTexCoordP3ui_ovr_0(texture, &type, coords);
    end;
    
    // added in gl3.3
    public z_MultiTexCoordP3uiv_adr := GetFuncAdr('glMultiTexCoordP3uiv');
    public z_MultiTexCoordP3uiv_ovr_0 := GetFuncOrNil&<procedure(texture: TextureUnit; &type: TexCoordPointerType; var coords: UInt32)>(z_MultiTexCoordP3uiv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiTexCoordP3uiv(texture: TextureUnit; &type: TexCoordPointerType; coords: array of UInt32);
    begin
      z_MultiTexCoordP3uiv_ovr_0(texture, &type, coords[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiTexCoordP3uiv(texture: TextureUnit; &type: TexCoordPointerType; var coords: UInt32);
    begin
      z_MultiTexCoordP3uiv_ovr_0(texture, &type, coords);
    end;
    public z_MultiTexCoordP3uiv_ovr_2 := GetFuncOrNil&<procedure(texture: TextureUnit; &type: TexCoordPointerType; coords: IntPtr)>(z_MultiTexCoordP3uiv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiTexCoordP3uiv(texture: TextureUnit; &type: TexCoordPointerType; coords: IntPtr);
    begin
      z_MultiTexCoordP3uiv_ovr_2(texture, &type, coords);
    end;
    
    // added in gl3.3
    public z_MultiTexCoordP4ui_adr := GetFuncAdr('glMultiTexCoordP4ui');
    public z_MultiTexCoordP4ui_ovr_0 := GetFuncOrNil&<procedure(texture: TextureUnit; &type: TexCoordPointerType; coords: UInt32)>(z_MultiTexCoordP4ui_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiTexCoordP4ui(texture: TextureUnit; &type: TexCoordPointerType; coords: UInt32);
    begin
      z_MultiTexCoordP4ui_ovr_0(texture, &type, coords);
    end;
    
    // added in gl3.3
    public z_MultiTexCoordP4uiv_adr := GetFuncAdr('glMultiTexCoordP4uiv');
    public z_MultiTexCoordP4uiv_ovr_0 := GetFuncOrNil&<procedure(texture: TextureUnit; &type: TexCoordPointerType; var coords: UInt32)>(z_MultiTexCoordP4uiv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiTexCoordP4uiv(texture: TextureUnit; &type: TexCoordPointerType; coords: array of UInt32);
    begin
      z_MultiTexCoordP4uiv_ovr_0(texture, &type, coords[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiTexCoordP4uiv(texture: TextureUnit; &type: TexCoordPointerType; var coords: UInt32);
    begin
      z_MultiTexCoordP4uiv_ovr_0(texture, &type, coords);
    end;
    public z_MultiTexCoordP4uiv_ovr_2 := GetFuncOrNil&<procedure(texture: TextureUnit; &type: TexCoordPointerType; coords: IntPtr)>(z_MultiTexCoordP4uiv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiTexCoordP4uiv(texture: TextureUnit; &type: TexCoordPointerType; coords: IntPtr);
    begin
      z_MultiTexCoordP4uiv_ovr_2(texture, &type, coords);
    end;
    
    // added in gl4.5
    public z_NamedBufferData_adr := GetFuncAdr('glNamedBufferData');
    public z_NamedBufferData_ovr_0 := GetFuncOrNil&<procedure(buffer: BufferName; size: IntPtr; var data: Byte; usage: VertexBufferObjectUsage)>(z_NamedBufferData_adr);
    private [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure z_NamedBufferData_ovr_0_temp<T>(buffer: BufferName; size: IntPtr; var data: T; usage: VertexBufferObjectUsage) :=
    z_NamedBufferData_ovr_0(buffer, size, PByte(pointer(@data))^, usage);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure NamedBufferData<T>(buffer: BufferName; size: IntPtr; data: array of T; usage: VertexBufferObjectUsage);
    begin
      z_NamedBufferData_ovr_0_temp(buffer, size, data[0], usage);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure NamedBufferData<T>(buffer: BufferName; size: IntPtr; var data: T; usage: VertexBufferObjectUsage);
    begin
      z_NamedBufferData_ovr_0(buffer, size, PByte(pointer(@data))^, usage);
    end;
    public z_NamedBufferData_ovr_2 := GetFuncOrNil&<procedure(buffer: BufferName; size: IntPtr; data: IntPtr; usage: VertexBufferObjectUsage)>(z_NamedBufferData_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure NamedBufferData(buffer: BufferName; size: IntPtr; data: IntPtr; usage: VertexBufferObjectUsage);
    begin
      z_NamedBufferData_ovr_2(buffer, size, data, usage);
    end;
    
    // added in gl4.5
    public z_NamedBufferStorage_adr := GetFuncAdr('glNamedBufferStorage');
    public z_NamedBufferStorage_ovr_0 := GetFuncOrNil&<procedure(buffer: BufferName; size: IntPtr; data: IntPtr; flags: BufferStorageMask)>(z_NamedBufferStorage_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure NamedBufferStorage(buffer: BufferName; size: IntPtr; data: IntPtr; flags: BufferStorageMask);
    begin
      z_NamedBufferStorage_ovr_0(buffer, size, data, flags);
    end;
    
    // added in gl4.5
    public z_NamedBufferSubData_adr := GetFuncAdr('glNamedBufferSubData');
    public z_NamedBufferSubData_ovr_0 := GetFuncOrNil&<procedure(buffer: UInt32; offset: IntPtr; size: IntPtr; data: IntPtr)>(z_NamedBufferSubData_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure NamedBufferSubData(buffer: UInt32; offset: IntPtr; size: IntPtr; data: IntPtr);
    begin
      z_NamedBufferSubData_ovr_0(buffer, offset, size, data);
    end;
    
    // added in gl4.5
    public z_NamedFramebufferDrawBuffer_adr := GetFuncAdr('glNamedFramebufferDrawBuffer');
    public z_NamedFramebufferDrawBuffer_ovr_0 := GetFuncOrNil&<procedure(framebuffer: FramebufferName; buf: ColorBuffer)>(z_NamedFramebufferDrawBuffer_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure NamedFramebufferDrawBuffer(framebuffer: FramebufferName; buf: ColorBuffer);
    begin
      z_NamedFramebufferDrawBuffer_ovr_0(framebuffer, buf);
    end;
    
    // added in gl4.5
    public z_NamedFramebufferDrawBuffers_adr := GetFuncAdr('glNamedFramebufferDrawBuffers');
    public z_NamedFramebufferDrawBuffers_ovr_0 := GetFuncOrNil&<procedure(framebuffer: UInt32; n: Int32; var bufs: ColorBuffer)>(z_NamedFramebufferDrawBuffers_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure NamedFramebufferDrawBuffers(framebuffer: UInt32; n: Int32; bufs: array of ColorBuffer);
    begin
      z_NamedFramebufferDrawBuffers_ovr_0(framebuffer, n, bufs[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure NamedFramebufferDrawBuffers(framebuffer: UInt32; n: Int32; var bufs: ColorBuffer);
    begin
      z_NamedFramebufferDrawBuffers_ovr_0(framebuffer, n, bufs);
    end;
    public z_NamedFramebufferDrawBuffers_ovr_2 := GetFuncOrNil&<procedure(framebuffer: UInt32; n: Int32; bufs: IntPtr)>(z_NamedFramebufferDrawBuffers_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure NamedFramebufferDrawBuffers(framebuffer: UInt32; n: Int32; bufs: IntPtr);
    begin
      z_NamedFramebufferDrawBuffers_ovr_2(framebuffer, n, bufs);
    end;
    
    // added in gl4.5
    public z_NamedFramebufferParameteri_adr := GetFuncAdr('glNamedFramebufferParameteri');
    public z_NamedFramebufferParameteri_ovr_0 := GetFuncOrNil&<procedure(framebuffer: FramebufferName; pname: FramebufferParameterName; param: Int32)>(z_NamedFramebufferParameteri_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure NamedFramebufferParameteri(framebuffer: FramebufferName; pname: FramebufferParameterName; param: Int32);
    begin
      z_NamedFramebufferParameteri_ovr_0(framebuffer, pname, param);
    end;
    
    // added in gl4.5
    public z_NamedFramebufferReadBuffer_adr := GetFuncAdr('glNamedFramebufferReadBuffer');
    public z_NamedFramebufferReadBuffer_ovr_0 := GetFuncOrNil&<procedure(framebuffer: FramebufferName; src: ColorBuffer)>(z_NamedFramebufferReadBuffer_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure NamedFramebufferReadBuffer(framebuffer: FramebufferName; src: ColorBuffer);
    begin
      z_NamedFramebufferReadBuffer_ovr_0(framebuffer, src);
    end;
    
    // added in gl4.5
    public z_NamedFramebufferRenderbuffer_adr := GetFuncAdr('glNamedFramebufferRenderbuffer');
    public z_NamedFramebufferRenderbuffer_ovr_0 := GetFuncOrNil&<procedure(framebuffer: FramebufferName; attachment: FramebufferAttachment; _renderbuffertarget: RenderbufferTarget; renderbuffer: RenderbufferName)>(z_NamedFramebufferRenderbuffer_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure NamedFramebufferRenderbuffer(framebuffer: FramebufferName; attachment: FramebufferAttachment; _renderbuffertarget: RenderbufferTarget; renderbuffer: RenderbufferName);
    begin
      z_NamedFramebufferRenderbuffer_ovr_0(framebuffer, attachment, _renderbuffertarget, renderbuffer);
    end;
    
    // added in gl4.5
    public z_NamedFramebufferTexture_adr := GetFuncAdr('glNamedFramebufferTexture');
    public z_NamedFramebufferTexture_ovr_0 := GetFuncOrNil&<procedure(framebuffer: FramebufferName; attachment: FramebufferAttachment; texture: TextureName; level: Int32)>(z_NamedFramebufferTexture_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure NamedFramebufferTexture(framebuffer: FramebufferName; attachment: FramebufferAttachment; texture: TextureName; level: Int32);
    begin
      z_NamedFramebufferTexture_ovr_0(framebuffer, attachment, texture, level);
    end;
    
    // added in gl4.5
    public z_NamedFramebufferTextureLayer_adr := GetFuncAdr('glNamedFramebufferTextureLayer');
    public z_NamedFramebufferTextureLayer_ovr_0 := GetFuncOrNil&<procedure(framebuffer: FramebufferName; attachment: FramebufferAttachment; texture: TextureName; level: Int32; layer: Int32)>(z_NamedFramebufferTextureLayer_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure NamedFramebufferTextureLayer(framebuffer: FramebufferName; attachment: FramebufferAttachment; texture: TextureName; level: Int32; layer: Int32);
    begin
      z_NamedFramebufferTextureLayer_ovr_0(framebuffer, attachment, texture, level, layer);
    end;
    
    // added in gl4.5
    public z_NamedRenderbufferStorage_adr := GetFuncAdr('glNamedRenderbufferStorage');
    public z_NamedRenderbufferStorage_ovr_0 := GetFuncOrNil&<procedure(renderbuffer: RenderbufferName; _internalformat: InternalFormat; width: Int32; height: Int32)>(z_NamedRenderbufferStorage_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure NamedRenderbufferStorage(renderbuffer: RenderbufferName; _internalformat: InternalFormat; width: Int32; height: Int32);
    begin
      z_NamedRenderbufferStorage_ovr_0(renderbuffer, _internalformat, width, height);
    end;
    
    // added in gl4.5
    public z_NamedRenderbufferStorageMultisample_adr := GetFuncAdr('glNamedRenderbufferStorageMultisample');
    public z_NamedRenderbufferStorageMultisample_ovr_0 := GetFuncOrNil&<procedure(renderbuffer: RenderbufferName; samples: Int32; _internalformat: InternalFormat; width: Int32; height: Int32)>(z_NamedRenderbufferStorageMultisample_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure NamedRenderbufferStorageMultisample(renderbuffer: RenderbufferName; samples: Int32; _internalformat: InternalFormat; width: Int32; height: Int32);
    begin
      z_NamedRenderbufferStorageMultisample_ovr_0(renderbuffer, samples, _internalformat, width, height);
    end;
    
    // added in gl3.3
    public z_NormalP3ui_adr := GetFuncAdr('glNormalP3ui');
    public z_NormalP3ui_ovr_0 := GetFuncOrNil&<procedure(&type: NormalPointerType; coords: UInt32)>(z_NormalP3ui_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure NormalP3ui(&type: NormalPointerType; coords: UInt32);
    begin
      z_NormalP3ui_ovr_0(&type, coords);
    end;
    
    // added in gl3.3
    public z_NormalP3uiv_adr := GetFuncAdr('glNormalP3uiv');
    public z_NormalP3uiv_ovr_0 := GetFuncOrNil&<procedure(&type: NormalPointerType; var coords: UInt32)>(z_NormalP3uiv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure NormalP3uiv(&type: NormalPointerType; coords: array of UInt32);
    begin
      z_NormalP3uiv_ovr_0(&type, coords[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure NormalP3uiv(&type: NormalPointerType; var coords: UInt32);
    begin
      z_NormalP3uiv_ovr_0(&type, coords);
    end;
    public z_NormalP3uiv_ovr_2 := GetFuncOrNil&<procedure(&type: NormalPointerType; coords: IntPtr)>(z_NormalP3uiv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure NormalP3uiv(&type: NormalPointerType; coords: IntPtr);
    begin
      z_NormalP3uiv_ovr_2(&type, coords);
    end;
    
    // added in gl4.3
    public z_ObjectLabel_adr := GetFuncAdr('glObjectLabel');
    public z_ObjectLabel_ovr_0 := GetFuncOrNil&<procedure(identifier: ObjectIdentifier; name: UInt32; length: Int32; &label: IntPtr)>(z_ObjectLabel_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ObjectLabel(identifier: ObjectIdentifier; name: UInt32; length: Int32; &label: string);
    begin
      var par_4_str_ptr := Marshal.StringToHGlobalAnsi(&label);
      z_ObjectLabel_ovr_0(identifier, name, length, par_4_str_ptr);
      Marshal.FreeHGlobal(par_4_str_ptr);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ObjectLabel(identifier: ObjectIdentifier; name: UInt32; length: Int32; &label: IntPtr);
    begin
      z_ObjectLabel_ovr_0(identifier, name, length, &label);
    end;
    
    // added in gl4.3
    public z_ObjectPtrLabel_adr := GetFuncAdr('glObjectPtrLabel');
    public z_ObjectPtrLabel_ovr_0 := GetFuncOrNil&<procedure(ptr: IntPtr; length: Int32; &label: IntPtr)>(z_ObjectPtrLabel_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ObjectPtrLabel(ptr: IntPtr; length: Int32; &label: string);
    begin
      var par_3_str_ptr := Marshal.StringToHGlobalAnsi(&label);
      z_ObjectPtrLabel_ovr_0(ptr, length, par_3_str_ptr);
      Marshal.FreeHGlobal(par_3_str_ptr);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ObjectPtrLabel(ptr: IntPtr; length: Int32; &label: IntPtr);
    begin
      z_ObjectPtrLabel_ovr_0(ptr, length, &label);
    end;
    
    // added in gl4.0
    public z_PatchParameterfv_adr := GetFuncAdr('glPatchParameterfv');
    public z_PatchParameterfv_ovr_0 := GetFuncOrNil&<procedure(pname: PatchParameterName; var values: single)>(z_PatchParameterfv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure PatchParameterfv(pname: PatchParameterName; values: array of single);
    begin
      z_PatchParameterfv_ovr_0(pname, values[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure PatchParameterfv(pname: PatchParameterName; var values: single);
    begin
      z_PatchParameterfv_ovr_0(pname, values);
    end;
    public z_PatchParameterfv_ovr_2 := GetFuncOrNil&<procedure(pname: PatchParameterName; values: IntPtr)>(z_PatchParameterfv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure PatchParameterfv(pname: PatchParameterName; values: IntPtr);
    begin
      z_PatchParameterfv_ovr_2(pname, values);
    end;
    
    // added in gl4.0
    public z_PatchParameteri_adr := GetFuncAdr('glPatchParameteri');
    public z_PatchParameteri_ovr_0 := GetFuncOrNil&<procedure(pname: PatchParameterName; value: Int32)>(z_PatchParameteri_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure PatchParameteri(pname: PatchParameterName; value: Int32);
    begin
      z_PatchParameteri_ovr_0(pname, value);
    end;
    
    // added in gl4.0
    public z_PauseTransformFeedback_adr := GetFuncAdr('glPauseTransformFeedback');
    public z_PauseTransformFeedback_ovr_0 := GetFuncOrNil&<procedure>(z_PauseTransformFeedback_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure PauseTransformFeedback;
    begin
      z_PauseTransformFeedback_ovr_0;
    end;
    
    // added in gl1.0
    private static procedure _z_PixelStoref_ovr0(pname: PixelStoreParameter; param: single);
    external 'opengl32.dll' name 'glPixelStoref';
    public static z_PixelStoref_ovr0 := _z_PixelStoref_ovr0;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure PixelStoref(pname: PixelStoreParameter; param: single) := z_PixelStoref_ovr0(pname, param);
    
    // added in gl1.0
    private static procedure _z_PixelStorei_ovr0(pname: PixelStoreParameter; param: Int32);
    external 'opengl32.dll' name 'glPixelStorei';
    public static z_PixelStorei_ovr0 := _z_PixelStorei_ovr0;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure PixelStorei(pname: PixelStoreParameter; param: Int32) := z_PixelStorei_ovr0(pname, param);
    
    // added in gl1.4
    public z_PointParameterf_adr := GetFuncAdr('glPointParameterf');
    public z_PointParameterf_ovr_0 := GetFuncOrNil&<procedure(pname: PointParameterNameARB; param: single)>(z_PointParameterf_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure PointParameterf(pname: PointParameterNameARB; param: single);
    begin
      z_PointParameterf_ovr_0(pname, param);
    end;
    
    // added in gl1.4
    public z_PointParameterfv_adr := GetFuncAdr('glPointParameterfv');
    public z_PointParameterfv_ovr_0 := GetFuncOrNil&<procedure(pname: PointParameterNameARB; var &params: single)>(z_PointParameterfv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure PointParameterfv(pname: PointParameterNameARB; &params: array of single);
    begin
      z_PointParameterfv_ovr_0(pname, &params[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure PointParameterfv(pname: PointParameterNameARB; var &params: single);
    begin
      z_PointParameterfv_ovr_0(pname, &params);
    end;
    public z_PointParameterfv_ovr_2 := GetFuncOrNil&<procedure(pname: PointParameterNameARB; &params: IntPtr)>(z_PointParameterfv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure PointParameterfv(pname: PointParameterNameARB; &params: IntPtr);
    begin
      z_PointParameterfv_ovr_2(pname, &params);
    end;
    
    // added in gl1.4
    public z_PointParameteri_adr := GetFuncAdr('glPointParameteri');
    public z_PointParameteri_ovr_0 := GetFuncOrNil&<procedure(pname: PointParameterNameARB; param: Int32)>(z_PointParameteri_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure PointParameteri(pname: PointParameterNameARB; param: Int32);
    begin
      z_PointParameteri_ovr_0(pname, param);
    end;
    
    // added in gl1.4
    public z_PointParameteriv_adr := GetFuncAdr('glPointParameteriv');
    public z_PointParameteriv_ovr_0 := GetFuncOrNil&<procedure(pname: PointParameterNameARB; var &params: Int32)>(z_PointParameteriv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure PointParameteriv(pname: PointParameterNameARB; &params: array of Int32);
    begin
      z_PointParameteriv_ovr_0(pname, &params[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure PointParameteriv(pname: PointParameterNameARB; var &params: Int32);
    begin
      z_PointParameteriv_ovr_0(pname, &params);
    end;
    public z_PointParameteriv_ovr_2 := GetFuncOrNil&<procedure(pname: PointParameterNameARB; &params: IntPtr)>(z_PointParameteriv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure PointParameteriv(pname: PointParameterNameARB; &params: IntPtr);
    begin
      z_PointParameteriv_ovr_2(pname, &params);
    end;
    
    // added in gl1.0
    private static procedure _z_PointSize_ovr0(size: single);
    external 'opengl32.dll' name 'glPointSize';
    public static z_PointSize_ovr0 := _z_PointSize_ovr0;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure PointSize(size: single) := z_PointSize_ovr0(size);
    
    // added in gl1.0
    private static procedure _z_PolygonMode_ovr0(face: DummyEnum; mode: OpenGL.PolygonMode);
    external 'opengl32.dll' name 'glPolygonMode';
    public static z_PolygonMode_ovr0 := _z_PolygonMode_ovr0;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure PolygonMode(face: DummyEnum; mode: OpenGL.PolygonMode) := z_PolygonMode_ovr0(face, mode);
    
    // added in gl1.1
    private static procedure _z_PolygonOffset_ovr0(factor: single; units: single);
    external 'opengl32.dll' name 'glPolygonOffset';
    public static z_PolygonOffset_ovr0 := _z_PolygonOffset_ovr0;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure PolygonOffset(factor: single; units: single) := z_PolygonOffset_ovr0(factor, units);
    
    // added in gl4.6
    public z_PolygonOffsetClamp_adr := GetFuncAdr('glPolygonOffsetClamp');
    public z_PolygonOffsetClamp_ovr_0 := GetFuncOrNil&<procedure(factor: single; units: single; clamp: single)>(z_PolygonOffsetClamp_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure PolygonOffsetClamp(factor: single; units: single; clamp: single);
    begin
      z_PolygonOffsetClamp_ovr_0(factor, units, clamp);
    end;
    
    // added in gl4.3
    public z_PopDebugGroup_adr := GetFuncAdr('glPopDebugGroup');
    public z_PopDebugGroup_ovr_0 := GetFuncOrNil&<procedure>(z_PopDebugGroup_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure PopDebugGroup;
    begin
      z_PopDebugGroup_ovr_0;
    end;
    
    // added in gl3.1
    public z_PrimitiveRestartIndex_adr := GetFuncAdr('glPrimitiveRestartIndex');
    public z_PrimitiveRestartIndex_ovr_0 := GetFuncOrNil&<procedure(index: UInt32)>(z_PrimitiveRestartIndex_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure PrimitiveRestartIndex(index: UInt32);
    begin
      z_PrimitiveRestartIndex_ovr_0(index);
    end;
    
    // added in gl4.1
    public z_ProgramBinary_adr := GetFuncAdr('glProgramBinary');
    public z_ProgramBinary_ovr_0 := GetFuncOrNil&<procedure(&program: UInt32; binaryFormat: DummyEnum; binary: IntPtr; length: Int32)>(z_ProgramBinary_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramBinary(&program: UInt32; binaryFormat: DummyEnum; binary: IntPtr; length: Int32);
    begin
      z_ProgramBinary_ovr_0(&program, binaryFormat, binary, length);
    end;
    
    // added in gl4.1
    public z_ProgramParameteri_adr := GetFuncAdr('glProgramParameteri');
    public z_ProgramParameteri_ovr_0 := GetFuncOrNil&<procedure(&program: ProgramName; pname: ProgramParameterPName; value: Int32)>(z_ProgramParameteri_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramParameteri(&program: ProgramName; pname: ProgramParameterPName; value: Int32);
    begin
      z_ProgramParameteri_ovr_0(&program, pname, value);
    end;
    
    // added in gl4.1
    public z_ProgramUniform1d_adr := GetFuncAdr('glProgramUniform1d');
    public z_ProgramUniform1d_ovr_0 := GetFuncOrNil&<procedure(&program: ProgramName; location: Int32; v0: real)>(z_ProgramUniform1d_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniform1d(&program: ProgramName; location: Int32; v0: real);
    begin
      z_ProgramUniform1d_ovr_0(&program, location, v0);
    end;
    
    // added in gl4.1
    public z_ProgramUniform1dv_adr := GetFuncAdr('glProgramUniform1dv');
    public z_ProgramUniform1dv_ovr_0 := GetFuncOrNil&<procedure(&program: UInt32; location: Int32; count: Int32; var value: real)>(z_ProgramUniform1dv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniform1dv(&program: UInt32; location: Int32; count: Int32; value: array of real);
    begin
      z_ProgramUniform1dv_ovr_0(&program, location, count, value[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniform1dv(&program: UInt32; location: Int32; count: Int32; var value: real);
    begin
      z_ProgramUniform1dv_ovr_0(&program, location, count, value);
    end;
    public z_ProgramUniform1dv_ovr_2 := GetFuncOrNil&<procedure(&program: UInt32; location: Int32; count: Int32; value: IntPtr)>(z_ProgramUniform1dv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniform1dv(&program: UInt32; location: Int32; count: Int32; value: IntPtr);
    begin
      z_ProgramUniform1dv_ovr_2(&program, location, count, value);
    end;
    
    // added in gl4.1
    public z_ProgramUniform1f_adr := GetFuncAdr('glProgramUniform1f');
    public z_ProgramUniform1f_ovr_0 := GetFuncOrNil&<procedure(&program: ProgramName; location: Int32; v0: single)>(z_ProgramUniform1f_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniform1f(&program: ProgramName; location: Int32; v0: single);
    begin
      z_ProgramUniform1f_ovr_0(&program, location, v0);
    end;
    
    // added in gl4.1
    public z_ProgramUniform1fv_adr := GetFuncAdr('glProgramUniform1fv');
    public z_ProgramUniform1fv_ovr_0 := GetFuncOrNil&<procedure(&program: UInt32; location: Int32; count: Int32; var value: single)>(z_ProgramUniform1fv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniform1fv(&program: UInt32; location: Int32; count: Int32; value: array of single);
    begin
      z_ProgramUniform1fv_ovr_0(&program, location, count, value[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniform1fv(&program: UInt32; location: Int32; count: Int32; var value: single);
    begin
      z_ProgramUniform1fv_ovr_0(&program, location, count, value);
    end;
    public z_ProgramUniform1fv_ovr_2 := GetFuncOrNil&<procedure(&program: UInt32; location: Int32; count: Int32; value: IntPtr)>(z_ProgramUniform1fv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniform1fv(&program: UInt32; location: Int32; count: Int32; value: IntPtr);
    begin
      z_ProgramUniform1fv_ovr_2(&program, location, count, value);
    end;
    
    // added in gl4.1
    public z_ProgramUniform1i_adr := GetFuncAdr('glProgramUniform1i');
    public z_ProgramUniform1i_ovr_0 := GetFuncOrNil&<procedure(&program: ProgramName; location: Int32; v0: Int32)>(z_ProgramUniform1i_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniform1i(&program: ProgramName; location: Int32; v0: Int32);
    begin
      z_ProgramUniform1i_ovr_0(&program, location, v0);
    end;
    
    // added in gl4.1
    public z_ProgramUniform1iv_adr := GetFuncAdr('glProgramUniform1iv');
    public z_ProgramUniform1iv_ovr_0 := GetFuncOrNil&<procedure(&program: UInt32; location: Int32; count: Int32; var value: Int32)>(z_ProgramUniform1iv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniform1iv(&program: UInt32; location: Int32; count: Int32; value: array of Int32);
    begin
      z_ProgramUniform1iv_ovr_0(&program, location, count, value[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniform1iv(&program: UInt32; location: Int32; count: Int32; var value: Int32);
    begin
      z_ProgramUniform1iv_ovr_0(&program, location, count, value);
    end;
    public z_ProgramUniform1iv_ovr_2 := GetFuncOrNil&<procedure(&program: UInt32; location: Int32; count: Int32; value: IntPtr)>(z_ProgramUniform1iv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniform1iv(&program: UInt32; location: Int32; count: Int32; value: IntPtr);
    begin
      z_ProgramUniform1iv_ovr_2(&program, location, count, value);
    end;
    
    // added in gl4.1
    public z_ProgramUniform1ui_adr := GetFuncAdr('glProgramUniform1ui');
    public z_ProgramUniform1ui_ovr_0 := GetFuncOrNil&<procedure(&program: ProgramName; location: Int32; v0: UInt32)>(z_ProgramUniform1ui_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniform1ui(&program: ProgramName; location: Int32; v0: UInt32);
    begin
      z_ProgramUniform1ui_ovr_0(&program, location, v0);
    end;
    
    // added in gl4.1
    public z_ProgramUniform1uiv_adr := GetFuncAdr('glProgramUniform1uiv');
    public z_ProgramUniform1uiv_ovr_0 := GetFuncOrNil&<procedure(&program: UInt32; location: Int32; count: Int32; var value: UInt32)>(z_ProgramUniform1uiv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniform1uiv(&program: UInt32; location: Int32; count: Int32; value: array of UInt32);
    begin
      z_ProgramUniform1uiv_ovr_0(&program, location, count, value[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniform1uiv(&program: UInt32; location: Int32; count: Int32; var value: UInt32);
    begin
      z_ProgramUniform1uiv_ovr_0(&program, location, count, value);
    end;
    public z_ProgramUniform1uiv_ovr_2 := GetFuncOrNil&<procedure(&program: UInt32; location: Int32; count: Int32; value: IntPtr)>(z_ProgramUniform1uiv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniform1uiv(&program: UInt32; location: Int32; count: Int32; value: IntPtr);
    begin
      z_ProgramUniform1uiv_ovr_2(&program, location, count, value);
    end;
    
    // added in gl4.1
    public z_ProgramUniform2d_adr := GetFuncAdr('glProgramUniform2d');
    public z_ProgramUniform2d_ovr_0 := GetFuncOrNil&<procedure(&program: ProgramName; location: Int32; v0: real; v1: real)>(z_ProgramUniform2d_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniform2d(&program: ProgramName; location: Int32; v0: real; v1: real);
    begin
      z_ProgramUniform2d_ovr_0(&program, location, v0, v1);
    end;
    
    // added in gl4.1
    public z_ProgramUniform2dv_adr := GetFuncAdr('glProgramUniform2dv');
    public z_ProgramUniform2dv_ovr_0 := GetFuncOrNil&<procedure(&program: UInt32; location: Int32; count: Int32; var value: real)>(z_ProgramUniform2dv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniform2dv(&program: UInt32; location: Int32; count: Int32; value: array of real);
    begin
      z_ProgramUniform2dv_ovr_0(&program, location, count, value[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniform2dv(&program: UInt32; location: Int32; count: Int32; var value: real);
    begin
      z_ProgramUniform2dv_ovr_0(&program, location, count, value);
    end;
    public z_ProgramUniform2dv_ovr_2 := GetFuncOrNil&<procedure(&program: UInt32; location: Int32; count: Int32; value: IntPtr)>(z_ProgramUniform2dv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniform2dv(&program: UInt32; location: Int32; count: Int32; value: IntPtr);
    begin
      z_ProgramUniform2dv_ovr_2(&program, location, count, value);
    end;
    
    // added in gl4.1
    public z_ProgramUniform2f_adr := GetFuncAdr('glProgramUniform2f');
    public z_ProgramUniform2f_ovr_0 := GetFuncOrNil&<procedure(&program: ProgramName; location: Int32; v0: single; v1: single)>(z_ProgramUniform2f_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniform2f(&program: ProgramName; location: Int32; v0: single; v1: single);
    begin
      z_ProgramUniform2f_ovr_0(&program, location, v0, v1);
    end;
    
    // added in gl4.1
    public z_ProgramUniform2fv_adr := GetFuncAdr('glProgramUniform2fv');
    public z_ProgramUniform2fv_ovr_0 := GetFuncOrNil&<procedure(&program: UInt32; location: Int32; count: Int32; var value: single)>(z_ProgramUniform2fv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniform2fv(&program: UInt32; location: Int32; count: Int32; value: array of single);
    begin
      z_ProgramUniform2fv_ovr_0(&program, location, count, value[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniform2fv(&program: UInt32; location: Int32; count: Int32; var value: single);
    begin
      z_ProgramUniform2fv_ovr_0(&program, location, count, value);
    end;
    public z_ProgramUniform2fv_ovr_2 := GetFuncOrNil&<procedure(&program: UInt32; location: Int32; count: Int32; value: IntPtr)>(z_ProgramUniform2fv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniform2fv(&program: UInt32; location: Int32; count: Int32; value: IntPtr);
    begin
      z_ProgramUniform2fv_ovr_2(&program, location, count, value);
    end;
    
    // added in gl4.1
    public z_ProgramUniform2i_adr := GetFuncAdr('glProgramUniform2i');
    public z_ProgramUniform2i_ovr_0 := GetFuncOrNil&<procedure(&program: ProgramName; location: Int32; v0: Int32; v1: Int32)>(z_ProgramUniform2i_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniform2i(&program: ProgramName; location: Int32; v0: Int32; v1: Int32);
    begin
      z_ProgramUniform2i_ovr_0(&program, location, v0, v1);
    end;
    
    // added in gl4.1
    public z_ProgramUniform2iv_adr := GetFuncAdr('glProgramUniform2iv');
    public z_ProgramUniform2iv_ovr_0 := GetFuncOrNil&<procedure(&program: UInt32; location: Int32; count: Int32; var value: Int32)>(z_ProgramUniform2iv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniform2iv(&program: UInt32; location: Int32; count: Int32; value: array of Int32);
    begin
      z_ProgramUniform2iv_ovr_0(&program, location, count, value[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniform2iv(&program: UInt32; location: Int32; count: Int32; var value: Int32);
    begin
      z_ProgramUniform2iv_ovr_0(&program, location, count, value);
    end;
    public z_ProgramUniform2iv_ovr_2 := GetFuncOrNil&<procedure(&program: UInt32; location: Int32; count: Int32; value: IntPtr)>(z_ProgramUniform2iv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniform2iv(&program: UInt32; location: Int32; count: Int32; value: IntPtr);
    begin
      z_ProgramUniform2iv_ovr_2(&program, location, count, value);
    end;
    
    // added in gl4.1
    public z_ProgramUniform2ui_adr := GetFuncAdr('glProgramUniform2ui');
    public z_ProgramUniform2ui_ovr_0 := GetFuncOrNil&<procedure(&program: ProgramName; location: Int32; v0: UInt32; v1: UInt32)>(z_ProgramUniform2ui_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniform2ui(&program: ProgramName; location: Int32; v0: UInt32; v1: UInt32);
    begin
      z_ProgramUniform2ui_ovr_0(&program, location, v0, v1);
    end;
    
    // added in gl4.1
    public z_ProgramUniform2uiv_adr := GetFuncAdr('glProgramUniform2uiv');
    public z_ProgramUniform2uiv_ovr_0 := GetFuncOrNil&<procedure(&program: UInt32; location: Int32; count: Int32; var value: UInt32)>(z_ProgramUniform2uiv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniform2uiv(&program: UInt32; location: Int32; count: Int32; value: array of UInt32);
    begin
      z_ProgramUniform2uiv_ovr_0(&program, location, count, value[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniform2uiv(&program: UInt32; location: Int32; count: Int32; var value: UInt32);
    begin
      z_ProgramUniform2uiv_ovr_0(&program, location, count, value);
    end;
    public z_ProgramUniform2uiv_ovr_2 := GetFuncOrNil&<procedure(&program: UInt32; location: Int32; count: Int32; value: IntPtr)>(z_ProgramUniform2uiv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniform2uiv(&program: UInt32; location: Int32; count: Int32; value: IntPtr);
    begin
      z_ProgramUniform2uiv_ovr_2(&program, location, count, value);
    end;
    
    // added in gl4.1
    public z_ProgramUniform3d_adr := GetFuncAdr('glProgramUniform3d');
    public z_ProgramUniform3d_ovr_0 := GetFuncOrNil&<procedure(&program: ProgramName; location: Int32; v0: real; v1: real; v2: real)>(z_ProgramUniform3d_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniform3d(&program: ProgramName; location: Int32; v0: real; v1: real; v2: real);
    begin
      z_ProgramUniform3d_ovr_0(&program, location, v0, v1, v2);
    end;
    
    // added in gl4.1
    public z_ProgramUniform3dv_adr := GetFuncAdr('glProgramUniform3dv');
    public z_ProgramUniform3dv_ovr_0 := GetFuncOrNil&<procedure(&program: UInt32; location: Int32; count: Int32; var value: real)>(z_ProgramUniform3dv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniform3dv(&program: UInt32; location: Int32; count: Int32; value: array of real);
    begin
      z_ProgramUniform3dv_ovr_0(&program, location, count, value[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniform3dv(&program: UInt32; location: Int32; count: Int32; var value: real);
    begin
      z_ProgramUniform3dv_ovr_0(&program, location, count, value);
    end;
    public z_ProgramUniform3dv_ovr_2 := GetFuncOrNil&<procedure(&program: UInt32; location: Int32; count: Int32; value: IntPtr)>(z_ProgramUniform3dv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniform3dv(&program: UInt32; location: Int32; count: Int32; value: IntPtr);
    begin
      z_ProgramUniform3dv_ovr_2(&program, location, count, value);
    end;
    
    // added in gl4.1
    public z_ProgramUniform3f_adr := GetFuncAdr('glProgramUniform3f');
    public z_ProgramUniform3f_ovr_0 := GetFuncOrNil&<procedure(&program: ProgramName; location: Int32; v0: single; v1: single; v2: single)>(z_ProgramUniform3f_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniform3f(&program: ProgramName; location: Int32; v0: single; v1: single; v2: single);
    begin
      z_ProgramUniform3f_ovr_0(&program, location, v0, v1, v2);
    end;
    
    // added in gl4.1
    public z_ProgramUniform3fv_adr := GetFuncAdr('glProgramUniform3fv');
    public z_ProgramUniform3fv_ovr_0 := GetFuncOrNil&<procedure(&program: UInt32; location: Int32; count: Int32; var value: single)>(z_ProgramUniform3fv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniform3fv(&program: UInt32; location: Int32; count: Int32; value: array of single);
    begin
      z_ProgramUniform3fv_ovr_0(&program, location, count, value[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniform3fv(&program: UInt32; location: Int32; count: Int32; var value: single);
    begin
      z_ProgramUniform3fv_ovr_0(&program, location, count, value);
    end;
    public z_ProgramUniform3fv_ovr_2 := GetFuncOrNil&<procedure(&program: UInt32; location: Int32; count: Int32; value: IntPtr)>(z_ProgramUniform3fv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniform3fv(&program: UInt32; location: Int32; count: Int32; value: IntPtr);
    begin
      z_ProgramUniform3fv_ovr_2(&program, location, count, value);
    end;
    
    // added in gl4.1
    public z_ProgramUniform3i_adr := GetFuncAdr('glProgramUniform3i');
    public z_ProgramUniform3i_ovr_0 := GetFuncOrNil&<procedure(&program: ProgramName; location: Int32; v0: Int32; v1: Int32; v2: Int32)>(z_ProgramUniform3i_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniform3i(&program: ProgramName; location: Int32; v0: Int32; v1: Int32; v2: Int32);
    begin
      z_ProgramUniform3i_ovr_0(&program, location, v0, v1, v2);
    end;
    
    // added in gl4.1
    public z_ProgramUniform3iv_adr := GetFuncAdr('glProgramUniform3iv');
    public z_ProgramUniform3iv_ovr_0 := GetFuncOrNil&<procedure(&program: UInt32; location: Int32; count: Int32; var value: Int32)>(z_ProgramUniform3iv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniform3iv(&program: UInt32; location: Int32; count: Int32; value: array of Int32);
    begin
      z_ProgramUniform3iv_ovr_0(&program, location, count, value[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniform3iv(&program: UInt32; location: Int32; count: Int32; var value: Int32);
    begin
      z_ProgramUniform3iv_ovr_0(&program, location, count, value);
    end;
    public z_ProgramUniform3iv_ovr_2 := GetFuncOrNil&<procedure(&program: UInt32; location: Int32; count: Int32; value: IntPtr)>(z_ProgramUniform3iv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniform3iv(&program: UInt32; location: Int32; count: Int32; value: IntPtr);
    begin
      z_ProgramUniform3iv_ovr_2(&program, location, count, value);
    end;
    
    // added in gl4.1
    public z_ProgramUniform3ui_adr := GetFuncAdr('glProgramUniform3ui');
    public z_ProgramUniform3ui_ovr_0 := GetFuncOrNil&<procedure(&program: ProgramName; location: Int32; v0: UInt32; v1: UInt32; v2: UInt32)>(z_ProgramUniform3ui_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniform3ui(&program: ProgramName; location: Int32; v0: UInt32; v1: UInt32; v2: UInt32);
    begin
      z_ProgramUniform3ui_ovr_0(&program, location, v0, v1, v2);
    end;
    
    // added in gl4.1
    public z_ProgramUniform3uiv_adr := GetFuncAdr('glProgramUniform3uiv');
    public z_ProgramUniform3uiv_ovr_0 := GetFuncOrNil&<procedure(&program: UInt32; location: Int32; count: Int32; var value: UInt32)>(z_ProgramUniform3uiv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniform3uiv(&program: UInt32; location: Int32; count: Int32; value: array of UInt32);
    begin
      z_ProgramUniform3uiv_ovr_0(&program, location, count, value[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniform3uiv(&program: UInt32; location: Int32; count: Int32; var value: UInt32);
    begin
      z_ProgramUniform3uiv_ovr_0(&program, location, count, value);
    end;
    public z_ProgramUniform3uiv_ovr_2 := GetFuncOrNil&<procedure(&program: UInt32; location: Int32; count: Int32; value: IntPtr)>(z_ProgramUniform3uiv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniform3uiv(&program: UInt32; location: Int32; count: Int32; value: IntPtr);
    begin
      z_ProgramUniform3uiv_ovr_2(&program, location, count, value);
    end;
    
    // added in gl4.1
    public z_ProgramUniform4d_adr := GetFuncAdr('glProgramUniform4d');
    public z_ProgramUniform4d_ovr_0 := GetFuncOrNil&<procedure(&program: ProgramName; location: Int32; v0: real; v1: real; v2: real; v3: real)>(z_ProgramUniform4d_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniform4d(&program: ProgramName; location: Int32; v0: real; v1: real; v2: real; v3: real);
    begin
      z_ProgramUniform4d_ovr_0(&program, location, v0, v1, v2, v3);
    end;
    
    // added in gl4.1
    public z_ProgramUniform4dv_adr := GetFuncAdr('glProgramUniform4dv');
    public z_ProgramUniform4dv_ovr_0 := GetFuncOrNil&<procedure(&program: UInt32; location: Int32; count: Int32; var value: real)>(z_ProgramUniform4dv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniform4dv(&program: UInt32; location: Int32; count: Int32; value: array of real);
    begin
      z_ProgramUniform4dv_ovr_0(&program, location, count, value[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniform4dv(&program: UInt32; location: Int32; count: Int32; var value: real);
    begin
      z_ProgramUniform4dv_ovr_0(&program, location, count, value);
    end;
    public z_ProgramUniform4dv_ovr_2 := GetFuncOrNil&<procedure(&program: UInt32; location: Int32; count: Int32; value: IntPtr)>(z_ProgramUniform4dv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniform4dv(&program: UInt32; location: Int32; count: Int32; value: IntPtr);
    begin
      z_ProgramUniform4dv_ovr_2(&program, location, count, value);
    end;
    
    // added in gl4.1
    public z_ProgramUniform4f_adr := GetFuncAdr('glProgramUniform4f');
    public z_ProgramUniform4f_ovr_0 := GetFuncOrNil&<procedure(&program: ProgramName; location: Int32; v0: single; v1: single; v2: single; v3: single)>(z_ProgramUniform4f_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniform4f(&program: ProgramName; location: Int32; v0: single; v1: single; v2: single; v3: single);
    begin
      z_ProgramUniform4f_ovr_0(&program, location, v0, v1, v2, v3);
    end;
    
    // added in gl4.1
    public z_ProgramUniform4fv_adr := GetFuncAdr('glProgramUniform4fv');
    public z_ProgramUniform4fv_ovr_0 := GetFuncOrNil&<procedure(&program: UInt32; location: Int32; count: Int32; var value: single)>(z_ProgramUniform4fv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniform4fv(&program: UInt32; location: Int32; count: Int32; value: array of single);
    begin
      z_ProgramUniform4fv_ovr_0(&program, location, count, value[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniform4fv(&program: UInt32; location: Int32; count: Int32; var value: single);
    begin
      z_ProgramUniform4fv_ovr_0(&program, location, count, value);
    end;
    public z_ProgramUniform4fv_ovr_2 := GetFuncOrNil&<procedure(&program: UInt32; location: Int32; count: Int32; value: IntPtr)>(z_ProgramUniform4fv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniform4fv(&program: UInt32; location: Int32; count: Int32; value: IntPtr);
    begin
      z_ProgramUniform4fv_ovr_2(&program, location, count, value);
    end;
    
    // added in gl4.1
    public z_ProgramUniform4i_adr := GetFuncAdr('glProgramUniform4i');
    public z_ProgramUniform4i_ovr_0 := GetFuncOrNil&<procedure(&program: ProgramName; location: Int32; v0: Int32; v1: Int32; v2: Int32; v3: Int32)>(z_ProgramUniform4i_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniform4i(&program: ProgramName; location: Int32; v0: Int32; v1: Int32; v2: Int32; v3: Int32);
    begin
      z_ProgramUniform4i_ovr_0(&program, location, v0, v1, v2, v3);
    end;
    
    // added in gl4.1
    public z_ProgramUniform4iv_adr := GetFuncAdr('glProgramUniform4iv');
    public z_ProgramUniform4iv_ovr_0 := GetFuncOrNil&<procedure(&program: UInt32; location: Int32; count: Int32; var value: Int32)>(z_ProgramUniform4iv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniform4iv(&program: UInt32; location: Int32; count: Int32; value: array of Int32);
    begin
      z_ProgramUniform4iv_ovr_0(&program, location, count, value[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniform4iv(&program: UInt32; location: Int32; count: Int32; var value: Int32);
    begin
      z_ProgramUniform4iv_ovr_0(&program, location, count, value);
    end;
    public z_ProgramUniform4iv_ovr_2 := GetFuncOrNil&<procedure(&program: UInt32; location: Int32; count: Int32; value: IntPtr)>(z_ProgramUniform4iv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniform4iv(&program: UInt32; location: Int32; count: Int32; value: IntPtr);
    begin
      z_ProgramUniform4iv_ovr_2(&program, location, count, value);
    end;
    
    // added in gl4.1
    public z_ProgramUniform4ui_adr := GetFuncAdr('glProgramUniform4ui');
    public z_ProgramUniform4ui_ovr_0 := GetFuncOrNil&<procedure(&program: ProgramName; location: Int32; v0: UInt32; v1: UInt32; v2: UInt32; v3: UInt32)>(z_ProgramUniform4ui_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniform4ui(&program: ProgramName; location: Int32; v0: UInt32; v1: UInt32; v2: UInt32; v3: UInt32);
    begin
      z_ProgramUniform4ui_ovr_0(&program, location, v0, v1, v2, v3);
    end;
    
    // added in gl4.1
    public z_ProgramUniform4uiv_adr := GetFuncAdr('glProgramUniform4uiv');
    public z_ProgramUniform4uiv_ovr_0 := GetFuncOrNil&<procedure(&program: UInt32; location: Int32; count: Int32; var value: UInt32)>(z_ProgramUniform4uiv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniform4uiv(&program: UInt32; location: Int32; count: Int32; value: array of UInt32);
    begin
      z_ProgramUniform4uiv_ovr_0(&program, location, count, value[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniform4uiv(&program: UInt32; location: Int32; count: Int32; var value: UInt32);
    begin
      z_ProgramUniform4uiv_ovr_0(&program, location, count, value);
    end;
    public z_ProgramUniform4uiv_ovr_2 := GetFuncOrNil&<procedure(&program: UInt32; location: Int32; count: Int32; value: IntPtr)>(z_ProgramUniform4uiv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniform4uiv(&program: UInt32; location: Int32; count: Int32; value: IntPtr);
    begin
      z_ProgramUniform4uiv_ovr_2(&program, location, count, value);
    end;
    
    // added in gl4.1
    public z_ProgramUniformMatrix2dv_adr := GetFuncAdr('glProgramUniformMatrix2dv');
    public z_ProgramUniformMatrix2dv_ovr_0 := GetFuncOrNil&<procedure(&program: UInt32; location: Int32; count: Int32; transpose: boolean; var value: real)>(z_ProgramUniformMatrix2dv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniformMatrix2dv(&program: UInt32; location: Int32; count: Int32; transpose: boolean; value: array of real);
    begin
      z_ProgramUniformMatrix2dv_ovr_0(&program, location, count, transpose, value[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniformMatrix2dv(&program: UInt32; location: Int32; count: Int32; transpose: boolean; var value: real);
    begin
      z_ProgramUniformMatrix2dv_ovr_0(&program, location, count, transpose, value);
    end;
    public z_ProgramUniformMatrix2dv_ovr_2 := GetFuncOrNil&<procedure(&program: UInt32; location: Int32; count: Int32; transpose: boolean; value: IntPtr)>(z_ProgramUniformMatrix2dv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniformMatrix2dv(&program: UInt32; location: Int32; count: Int32; transpose: boolean; value: IntPtr);
    begin
      z_ProgramUniformMatrix2dv_ovr_2(&program, location, count, transpose, value);
    end;
    
    // added in gl4.1
    public z_ProgramUniformMatrix2fv_adr := GetFuncAdr('glProgramUniformMatrix2fv');
    public z_ProgramUniformMatrix2fv_ovr_0 := GetFuncOrNil&<procedure(&program: UInt32; location: Int32; count: Int32; transpose: boolean; var value: single)>(z_ProgramUniformMatrix2fv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniformMatrix2fv(&program: UInt32; location: Int32; count: Int32; transpose: boolean; value: array of single);
    begin
      z_ProgramUniformMatrix2fv_ovr_0(&program, location, count, transpose, value[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniformMatrix2fv(&program: UInt32; location: Int32; count: Int32; transpose: boolean; var value: single);
    begin
      z_ProgramUniformMatrix2fv_ovr_0(&program, location, count, transpose, value);
    end;
    public z_ProgramUniformMatrix2fv_ovr_2 := GetFuncOrNil&<procedure(&program: UInt32; location: Int32; count: Int32; transpose: boolean; value: IntPtr)>(z_ProgramUniformMatrix2fv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniformMatrix2fv(&program: UInt32; location: Int32; count: Int32; transpose: boolean; value: IntPtr);
    begin
      z_ProgramUniformMatrix2fv_ovr_2(&program, location, count, transpose, value);
    end;
    
    // added in gl4.1
    public z_ProgramUniformMatrix2x3dv_adr := GetFuncAdr('glProgramUniformMatrix2x3dv');
    public z_ProgramUniformMatrix2x3dv_ovr_0 := GetFuncOrNil&<procedure(&program: UInt32; location: Int32; count: Int32; transpose: boolean; var value: real)>(z_ProgramUniformMatrix2x3dv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniformMatrix2x3dv(&program: UInt32; location: Int32; count: Int32; transpose: boolean; value: array of real);
    begin
      z_ProgramUniformMatrix2x3dv_ovr_0(&program, location, count, transpose, value[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniformMatrix2x3dv(&program: UInt32; location: Int32; count: Int32; transpose: boolean; var value: real);
    begin
      z_ProgramUniformMatrix2x3dv_ovr_0(&program, location, count, transpose, value);
    end;
    public z_ProgramUniformMatrix2x3dv_ovr_2 := GetFuncOrNil&<procedure(&program: UInt32; location: Int32; count: Int32; transpose: boolean; value: IntPtr)>(z_ProgramUniformMatrix2x3dv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniformMatrix2x3dv(&program: UInt32; location: Int32; count: Int32; transpose: boolean; value: IntPtr);
    begin
      z_ProgramUniformMatrix2x3dv_ovr_2(&program, location, count, transpose, value);
    end;
    
    // added in gl4.1
    public z_ProgramUniformMatrix2x3fv_adr := GetFuncAdr('glProgramUniformMatrix2x3fv');
    public z_ProgramUniformMatrix2x3fv_ovr_0 := GetFuncOrNil&<procedure(&program: UInt32; location: Int32; count: Int32; transpose: boolean; var value: single)>(z_ProgramUniformMatrix2x3fv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniformMatrix2x3fv(&program: UInt32; location: Int32; count: Int32; transpose: boolean; value: array of single);
    begin
      z_ProgramUniformMatrix2x3fv_ovr_0(&program, location, count, transpose, value[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniformMatrix2x3fv(&program: UInt32; location: Int32; count: Int32; transpose: boolean; var value: single);
    begin
      z_ProgramUniformMatrix2x3fv_ovr_0(&program, location, count, transpose, value);
    end;
    public z_ProgramUniformMatrix2x3fv_ovr_2 := GetFuncOrNil&<procedure(&program: UInt32; location: Int32; count: Int32; transpose: boolean; value: IntPtr)>(z_ProgramUniformMatrix2x3fv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniformMatrix2x3fv(&program: UInt32; location: Int32; count: Int32; transpose: boolean; value: IntPtr);
    begin
      z_ProgramUniformMatrix2x3fv_ovr_2(&program, location, count, transpose, value);
    end;
    
    // added in gl4.1
    public z_ProgramUniformMatrix2x4dv_adr := GetFuncAdr('glProgramUniformMatrix2x4dv');
    public z_ProgramUniformMatrix2x4dv_ovr_0 := GetFuncOrNil&<procedure(&program: UInt32; location: Int32; count: Int32; transpose: boolean; var value: real)>(z_ProgramUniformMatrix2x4dv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniformMatrix2x4dv(&program: UInt32; location: Int32; count: Int32; transpose: boolean; value: array of real);
    begin
      z_ProgramUniformMatrix2x4dv_ovr_0(&program, location, count, transpose, value[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniformMatrix2x4dv(&program: UInt32; location: Int32; count: Int32; transpose: boolean; var value: real);
    begin
      z_ProgramUniformMatrix2x4dv_ovr_0(&program, location, count, transpose, value);
    end;
    public z_ProgramUniformMatrix2x4dv_ovr_2 := GetFuncOrNil&<procedure(&program: UInt32; location: Int32; count: Int32; transpose: boolean; value: IntPtr)>(z_ProgramUniformMatrix2x4dv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniformMatrix2x4dv(&program: UInt32; location: Int32; count: Int32; transpose: boolean; value: IntPtr);
    begin
      z_ProgramUniformMatrix2x4dv_ovr_2(&program, location, count, transpose, value);
    end;
    
    // added in gl4.1
    public z_ProgramUniformMatrix2x4fv_adr := GetFuncAdr('glProgramUniformMatrix2x4fv');
    public z_ProgramUniformMatrix2x4fv_ovr_0 := GetFuncOrNil&<procedure(&program: UInt32; location: Int32; count: Int32; transpose: boolean; var value: single)>(z_ProgramUniformMatrix2x4fv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniformMatrix2x4fv(&program: UInt32; location: Int32; count: Int32; transpose: boolean; value: array of single);
    begin
      z_ProgramUniformMatrix2x4fv_ovr_0(&program, location, count, transpose, value[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniformMatrix2x4fv(&program: UInt32; location: Int32; count: Int32; transpose: boolean; var value: single);
    begin
      z_ProgramUniformMatrix2x4fv_ovr_0(&program, location, count, transpose, value);
    end;
    public z_ProgramUniformMatrix2x4fv_ovr_2 := GetFuncOrNil&<procedure(&program: UInt32; location: Int32; count: Int32; transpose: boolean; value: IntPtr)>(z_ProgramUniformMatrix2x4fv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniformMatrix2x4fv(&program: UInt32; location: Int32; count: Int32; transpose: boolean; value: IntPtr);
    begin
      z_ProgramUniformMatrix2x4fv_ovr_2(&program, location, count, transpose, value);
    end;
    
    // added in gl4.1
    public z_ProgramUniformMatrix3dv_adr := GetFuncAdr('glProgramUniformMatrix3dv');
    public z_ProgramUniformMatrix3dv_ovr_0 := GetFuncOrNil&<procedure(&program: UInt32; location: Int32; count: Int32; transpose: boolean; var value: real)>(z_ProgramUniformMatrix3dv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniformMatrix3dv(&program: UInt32; location: Int32; count: Int32; transpose: boolean; value: array of real);
    begin
      z_ProgramUniformMatrix3dv_ovr_0(&program, location, count, transpose, value[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniformMatrix3dv(&program: UInt32; location: Int32; count: Int32; transpose: boolean; var value: real);
    begin
      z_ProgramUniformMatrix3dv_ovr_0(&program, location, count, transpose, value);
    end;
    public z_ProgramUniformMatrix3dv_ovr_2 := GetFuncOrNil&<procedure(&program: UInt32; location: Int32; count: Int32; transpose: boolean; value: IntPtr)>(z_ProgramUniformMatrix3dv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniformMatrix3dv(&program: UInt32; location: Int32; count: Int32; transpose: boolean; value: IntPtr);
    begin
      z_ProgramUniformMatrix3dv_ovr_2(&program, location, count, transpose, value);
    end;
    
    // added in gl4.1
    public z_ProgramUniformMatrix3fv_adr := GetFuncAdr('glProgramUniformMatrix3fv');
    public z_ProgramUniformMatrix3fv_ovr_0 := GetFuncOrNil&<procedure(&program: UInt32; location: Int32; count: Int32; transpose: boolean; var value: single)>(z_ProgramUniformMatrix3fv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniformMatrix3fv(&program: UInt32; location: Int32; count: Int32; transpose: boolean; value: array of single);
    begin
      z_ProgramUniformMatrix3fv_ovr_0(&program, location, count, transpose, value[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniformMatrix3fv(&program: UInt32; location: Int32; count: Int32; transpose: boolean; var value: single);
    begin
      z_ProgramUniformMatrix3fv_ovr_0(&program, location, count, transpose, value);
    end;
    public z_ProgramUniformMatrix3fv_ovr_2 := GetFuncOrNil&<procedure(&program: UInt32; location: Int32; count: Int32; transpose: boolean; value: IntPtr)>(z_ProgramUniformMatrix3fv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniformMatrix3fv(&program: UInt32; location: Int32; count: Int32; transpose: boolean; value: IntPtr);
    begin
      z_ProgramUniformMatrix3fv_ovr_2(&program, location, count, transpose, value);
    end;
    
    // added in gl4.1
    public z_ProgramUniformMatrix3x2dv_adr := GetFuncAdr('glProgramUniformMatrix3x2dv');
    public z_ProgramUniformMatrix3x2dv_ovr_0 := GetFuncOrNil&<procedure(&program: UInt32; location: Int32; count: Int32; transpose: boolean; var value: real)>(z_ProgramUniformMatrix3x2dv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniformMatrix3x2dv(&program: UInt32; location: Int32; count: Int32; transpose: boolean; value: array of real);
    begin
      z_ProgramUniformMatrix3x2dv_ovr_0(&program, location, count, transpose, value[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniformMatrix3x2dv(&program: UInt32; location: Int32; count: Int32; transpose: boolean; var value: real);
    begin
      z_ProgramUniformMatrix3x2dv_ovr_0(&program, location, count, transpose, value);
    end;
    public z_ProgramUniformMatrix3x2dv_ovr_2 := GetFuncOrNil&<procedure(&program: UInt32; location: Int32; count: Int32; transpose: boolean; value: IntPtr)>(z_ProgramUniformMatrix3x2dv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniformMatrix3x2dv(&program: UInt32; location: Int32; count: Int32; transpose: boolean; value: IntPtr);
    begin
      z_ProgramUniformMatrix3x2dv_ovr_2(&program, location, count, transpose, value);
    end;
    
    // added in gl4.1
    public z_ProgramUniformMatrix3x2fv_adr := GetFuncAdr('glProgramUniformMatrix3x2fv');
    public z_ProgramUniformMatrix3x2fv_ovr_0 := GetFuncOrNil&<procedure(&program: UInt32; location: Int32; count: Int32; transpose: boolean; var value: single)>(z_ProgramUniformMatrix3x2fv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniformMatrix3x2fv(&program: UInt32; location: Int32; count: Int32; transpose: boolean; value: array of single);
    begin
      z_ProgramUniformMatrix3x2fv_ovr_0(&program, location, count, transpose, value[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniformMatrix3x2fv(&program: UInt32; location: Int32; count: Int32; transpose: boolean; var value: single);
    begin
      z_ProgramUniformMatrix3x2fv_ovr_0(&program, location, count, transpose, value);
    end;
    public z_ProgramUniformMatrix3x2fv_ovr_2 := GetFuncOrNil&<procedure(&program: UInt32; location: Int32; count: Int32; transpose: boolean; value: IntPtr)>(z_ProgramUniformMatrix3x2fv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniformMatrix3x2fv(&program: UInt32; location: Int32; count: Int32; transpose: boolean; value: IntPtr);
    begin
      z_ProgramUniformMatrix3x2fv_ovr_2(&program, location, count, transpose, value);
    end;
    
    // added in gl4.1
    public z_ProgramUniformMatrix3x4dv_adr := GetFuncAdr('glProgramUniformMatrix3x4dv');
    public z_ProgramUniformMatrix3x4dv_ovr_0 := GetFuncOrNil&<procedure(&program: UInt32; location: Int32; count: Int32; transpose: boolean; var value: real)>(z_ProgramUniformMatrix3x4dv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniformMatrix3x4dv(&program: UInt32; location: Int32; count: Int32; transpose: boolean; value: array of real);
    begin
      z_ProgramUniformMatrix3x4dv_ovr_0(&program, location, count, transpose, value[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniformMatrix3x4dv(&program: UInt32; location: Int32; count: Int32; transpose: boolean; var value: real);
    begin
      z_ProgramUniformMatrix3x4dv_ovr_0(&program, location, count, transpose, value);
    end;
    public z_ProgramUniformMatrix3x4dv_ovr_2 := GetFuncOrNil&<procedure(&program: UInt32; location: Int32; count: Int32; transpose: boolean; value: IntPtr)>(z_ProgramUniformMatrix3x4dv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniformMatrix3x4dv(&program: UInt32; location: Int32; count: Int32; transpose: boolean; value: IntPtr);
    begin
      z_ProgramUniformMatrix3x4dv_ovr_2(&program, location, count, transpose, value);
    end;
    
    // added in gl4.1
    public z_ProgramUniformMatrix3x4fv_adr := GetFuncAdr('glProgramUniformMatrix3x4fv');
    public z_ProgramUniformMatrix3x4fv_ovr_0 := GetFuncOrNil&<procedure(&program: UInt32; location: Int32; count: Int32; transpose: boolean; var value: single)>(z_ProgramUniformMatrix3x4fv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniformMatrix3x4fv(&program: UInt32; location: Int32; count: Int32; transpose: boolean; value: array of single);
    begin
      z_ProgramUniformMatrix3x4fv_ovr_0(&program, location, count, transpose, value[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniformMatrix3x4fv(&program: UInt32; location: Int32; count: Int32; transpose: boolean; var value: single);
    begin
      z_ProgramUniformMatrix3x4fv_ovr_0(&program, location, count, transpose, value);
    end;
    public z_ProgramUniformMatrix3x4fv_ovr_2 := GetFuncOrNil&<procedure(&program: UInt32; location: Int32; count: Int32; transpose: boolean; value: IntPtr)>(z_ProgramUniformMatrix3x4fv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniformMatrix3x4fv(&program: UInt32; location: Int32; count: Int32; transpose: boolean; value: IntPtr);
    begin
      z_ProgramUniformMatrix3x4fv_ovr_2(&program, location, count, transpose, value);
    end;
    
    // added in gl4.1
    public z_ProgramUniformMatrix4dv_adr := GetFuncAdr('glProgramUniformMatrix4dv');
    public z_ProgramUniformMatrix4dv_ovr_0 := GetFuncOrNil&<procedure(&program: UInt32; location: Int32; count: Int32; transpose: boolean; var value: real)>(z_ProgramUniformMatrix4dv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniformMatrix4dv(&program: UInt32; location: Int32; count: Int32; transpose: boolean; value: array of real);
    begin
      z_ProgramUniformMatrix4dv_ovr_0(&program, location, count, transpose, value[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniformMatrix4dv(&program: UInt32; location: Int32; count: Int32; transpose: boolean; var value: real);
    begin
      z_ProgramUniformMatrix4dv_ovr_0(&program, location, count, transpose, value);
    end;
    public z_ProgramUniformMatrix4dv_ovr_2 := GetFuncOrNil&<procedure(&program: UInt32; location: Int32; count: Int32; transpose: boolean; value: IntPtr)>(z_ProgramUniformMatrix4dv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniformMatrix4dv(&program: UInt32; location: Int32; count: Int32; transpose: boolean; value: IntPtr);
    begin
      z_ProgramUniformMatrix4dv_ovr_2(&program, location, count, transpose, value);
    end;
    
    // added in gl4.1
    public z_ProgramUniformMatrix4fv_adr := GetFuncAdr('glProgramUniformMatrix4fv');
    public z_ProgramUniformMatrix4fv_ovr_0 := GetFuncOrNil&<procedure(&program: UInt32; location: Int32; count: Int32; transpose: boolean; var value: single)>(z_ProgramUniformMatrix4fv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniformMatrix4fv(&program: UInt32; location: Int32; count: Int32; transpose: boolean; value: array of single);
    begin
      z_ProgramUniformMatrix4fv_ovr_0(&program, location, count, transpose, value[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniformMatrix4fv(&program: UInt32; location: Int32; count: Int32; transpose: boolean; var value: single);
    begin
      z_ProgramUniformMatrix4fv_ovr_0(&program, location, count, transpose, value);
    end;
    public z_ProgramUniformMatrix4fv_ovr_2 := GetFuncOrNil&<procedure(&program: UInt32; location: Int32; count: Int32; transpose: boolean; value: IntPtr)>(z_ProgramUniformMatrix4fv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniformMatrix4fv(&program: UInt32; location: Int32; count: Int32; transpose: boolean; value: IntPtr);
    begin
      z_ProgramUniformMatrix4fv_ovr_2(&program, location, count, transpose, value);
    end;
    
    // added in gl4.1
    public z_ProgramUniformMatrix4x2dv_adr := GetFuncAdr('glProgramUniformMatrix4x2dv');
    public z_ProgramUniformMatrix4x2dv_ovr_0 := GetFuncOrNil&<procedure(&program: UInt32; location: Int32; count: Int32; transpose: boolean; var value: real)>(z_ProgramUniformMatrix4x2dv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniformMatrix4x2dv(&program: UInt32; location: Int32; count: Int32; transpose: boolean; value: array of real);
    begin
      z_ProgramUniformMatrix4x2dv_ovr_0(&program, location, count, transpose, value[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniformMatrix4x2dv(&program: UInt32; location: Int32; count: Int32; transpose: boolean; var value: real);
    begin
      z_ProgramUniformMatrix4x2dv_ovr_0(&program, location, count, transpose, value);
    end;
    public z_ProgramUniformMatrix4x2dv_ovr_2 := GetFuncOrNil&<procedure(&program: UInt32; location: Int32; count: Int32; transpose: boolean; value: IntPtr)>(z_ProgramUniformMatrix4x2dv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniformMatrix4x2dv(&program: UInt32; location: Int32; count: Int32; transpose: boolean; value: IntPtr);
    begin
      z_ProgramUniformMatrix4x2dv_ovr_2(&program, location, count, transpose, value);
    end;
    
    // added in gl4.1
    public z_ProgramUniformMatrix4x2fv_adr := GetFuncAdr('glProgramUniformMatrix4x2fv');
    public z_ProgramUniformMatrix4x2fv_ovr_0 := GetFuncOrNil&<procedure(&program: UInt32; location: Int32; count: Int32; transpose: boolean; var value: single)>(z_ProgramUniformMatrix4x2fv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniformMatrix4x2fv(&program: UInt32; location: Int32; count: Int32; transpose: boolean; value: array of single);
    begin
      z_ProgramUniformMatrix4x2fv_ovr_0(&program, location, count, transpose, value[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniformMatrix4x2fv(&program: UInt32; location: Int32; count: Int32; transpose: boolean; var value: single);
    begin
      z_ProgramUniformMatrix4x2fv_ovr_0(&program, location, count, transpose, value);
    end;
    public z_ProgramUniformMatrix4x2fv_ovr_2 := GetFuncOrNil&<procedure(&program: UInt32; location: Int32; count: Int32; transpose: boolean; value: IntPtr)>(z_ProgramUniformMatrix4x2fv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniformMatrix4x2fv(&program: UInt32; location: Int32; count: Int32; transpose: boolean; value: IntPtr);
    begin
      z_ProgramUniformMatrix4x2fv_ovr_2(&program, location, count, transpose, value);
    end;
    
    // added in gl4.1
    public z_ProgramUniformMatrix4x3dv_adr := GetFuncAdr('glProgramUniformMatrix4x3dv');
    public z_ProgramUniformMatrix4x3dv_ovr_0 := GetFuncOrNil&<procedure(&program: UInt32; location: Int32; count: Int32; transpose: boolean; var value: real)>(z_ProgramUniformMatrix4x3dv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniformMatrix4x3dv(&program: UInt32; location: Int32; count: Int32; transpose: boolean; value: array of real);
    begin
      z_ProgramUniformMatrix4x3dv_ovr_0(&program, location, count, transpose, value[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniformMatrix4x3dv(&program: UInt32; location: Int32; count: Int32; transpose: boolean; var value: real);
    begin
      z_ProgramUniformMatrix4x3dv_ovr_0(&program, location, count, transpose, value);
    end;
    public z_ProgramUniformMatrix4x3dv_ovr_2 := GetFuncOrNil&<procedure(&program: UInt32; location: Int32; count: Int32; transpose: boolean; value: IntPtr)>(z_ProgramUniformMatrix4x3dv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniformMatrix4x3dv(&program: UInt32; location: Int32; count: Int32; transpose: boolean; value: IntPtr);
    begin
      z_ProgramUniformMatrix4x3dv_ovr_2(&program, location, count, transpose, value);
    end;
    
    // added in gl4.1
    public z_ProgramUniformMatrix4x3fv_adr := GetFuncAdr('glProgramUniformMatrix4x3fv');
    public z_ProgramUniformMatrix4x3fv_ovr_0 := GetFuncOrNil&<procedure(&program: UInt32; location: Int32; count: Int32; transpose: boolean; var value: single)>(z_ProgramUniformMatrix4x3fv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniformMatrix4x3fv(&program: UInt32; location: Int32; count: Int32; transpose: boolean; value: array of single);
    begin
      z_ProgramUniformMatrix4x3fv_ovr_0(&program, location, count, transpose, value[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniformMatrix4x3fv(&program: UInt32; location: Int32; count: Int32; transpose: boolean; var value: single);
    begin
      z_ProgramUniformMatrix4x3fv_ovr_0(&program, location, count, transpose, value);
    end;
    public z_ProgramUniformMatrix4x3fv_ovr_2 := GetFuncOrNil&<procedure(&program: UInt32; location: Int32; count: Int32; transpose: boolean; value: IntPtr)>(z_ProgramUniformMatrix4x3fv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniformMatrix4x3fv(&program: UInt32; location: Int32; count: Int32; transpose: boolean; value: IntPtr);
    begin
      z_ProgramUniformMatrix4x3fv_ovr_2(&program, location, count, transpose, value);
    end;
    
    // added in gl3.2
    public z_ProvokingVertex_adr := GetFuncAdr('glProvokingVertex');
    public z_ProvokingVertex_ovr_0 := GetFuncOrNil&<procedure(mode: VertexProvokingMode)>(z_ProvokingVertex_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProvokingVertex(mode: VertexProvokingMode);
    begin
      z_ProvokingVertex_ovr_0(mode);
    end;
    
    // added in gl4.3
    public z_PushDebugGroup_adr := GetFuncAdr('glPushDebugGroup');
    public z_PushDebugGroup_ovr_0 := GetFuncOrNil&<procedure(source: DebugSource; id: UInt32; length: Int32; message: IntPtr)>(z_PushDebugGroup_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure PushDebugGroup(source: DebugSource; id: UInt32; length: Int32; message: string);
    begin
      var par_4_str_ptr := Marshal.StringToHGlobalAnsi(message);
      z_PushDebugGroup_ovr_0(source, id, length, par_4_str_ptr);
      Marshal.FreeHGlobal(par_4_str_ptr);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure PushDebugGroup(source: DebugSource; id: UInt32; length: Int32; message: IntPtr);
    begin
      z_PushDebugGroup_ovr_0(source, id, length, message);
    end;
    
    // added in gl3.3
    public z_QueryCounter_adr := GetFuncAdr('glQueryCounter');
    public z_QueryCounter_ovr_0 := GetFuncOrNil&<procedure(id: QueryName; target: QueryCounterTarget)>(z_QueryCounter_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure QueryCounter(id: QueryName; target: QueryCounterTarget);
    begin
      z_QueryCounter_ovr_0(id, target);
    end;
    
    // added in gl1.0
    private static procedure _z_ReadBuffer_ovr0(src: ReadBufferMode);
    external 'opengl32.dll' name 'glReadBuffer';
    public static z_ReadBuffer_ovr0 := _z_ReadBuffer_ovr0;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ReadBuffer(src: ReadBufferMode) := z_ReadBuffer_ovr0(src);
    
    // added in gl4.5
    public z_ReadnPixels_adr := GetFuncAdr('glReadnPixels');
    public z_ReadnPixels_ovr_0 := GetFuncOrNil&<procedure(x: Int32; y: Int32; width: Int32; height: Int32; format: PixelFormat; &type: PixelType; bufSize: Int32; data: IntPtr)>(z_ReadnPixels_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ReadnPixels(x: Int32; y: Int32; width: Int32; height: Int32; format: PixelFormat; &type: PixelType; bufSize: Int32; data: IntPtr);
    begin
      z_ReadnPixels_ovr_0(x, y, width, height, format, &type, bufSize, data);
    end;
    
    // added in gl1.0
    private static procedure _z_ReadPixels_ovr0(x: Int32; y: Int32; width: Int32; height: Int32; format: PixelFormat; &type: PixelType; pixels: IntPtr);
    external 'opengl32.dll' name 'glReadPixels';
    public static z_ReadPixels_ovr0 := _z_ReadPixels_ovr0;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ReadPixels(x: Int32; y: Int32; width: Int32; height: Int32; format: PixelFormat; &type: PixelType; pixels: IntPtr) := z_ReadPixels_ovr0(x, y, width, height, format, &type, pixels);
    
    // added in gl4.1
    public z_ReleaseShaderCompiler_adr := GetFuncAdr('glReleaseShaderCompiler');
    public z_ReleaseShaderCompiler_ovr_0 := GetFuncOrNil&<procedure>(z_ReleaseShaderCompiler_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ReleaseShaderCompiler;
    begin
      z_ReleaseShaderCompiler_ovr_0;
    end;
    
    // added in gl3.0
    public z_RenderbufferStorage_adr := GetFuncAdr('glRenderbufferStorage');
    public z_RenderbufferStorage_ovr_0 := GetFuncOrNil&<procedure(target: RenderbufferTarget; _internalformat: InternalFormat; width: Int32; height: Int32)>(z_RenderbufferStorage_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure RenderbufferStorage(target: RenderbufferTarget; _internalformat: InternalFormat; width: Int32; height: Int32);
    begin
      z_RenderbufferStorage_ovr_0(target, _internalformat, width, height);
    end;
    
    // added in gl3.0
    public z_RenderbufferStorageMultisample_adr := GetFuncAdr('glRenderbufferStorageMultisample');
    public z_RenderbufferStorageMultisample_ovr_0 := GetFuncOrNil&<procedure(target: RenderbufferTarget; samples: Int32; _internalformat: InternalFormat; width: Int32; height: Int32)>(z_RenderbufferStorageMultisample_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure RenderbufferStorageMultisample(target: RenderbufferTarget; samples: Int32; _internalformat: InternalFormat; width: Int32; height: Int32);
    begin
      z_RenderbufferStorageMultisample_ovr_0(target, samples, _internalformat, width, height);
    end;
    
    // added in gl4.0
    public z_ResumeTransformFeedback_adr := GetFuncAdr('glResumeTransformFeedback');
    public z_ResumeTransformFeedback_ovr_0 := GetFuncOrNil&<procedure>(z_ResumeTransformFeedback_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ResumeTransformFeedback;
    begin
      z_ResumeTransformFeedback_ovr_0;
    end;
    
    // added in gl1.3
    public z_SampleCoverage_adr := GetFuncAdr('glSampleCoverage');
    public z_SampleCoverage_ovr_0 := GetFuncOrNil&<procedure(value: single; invert: boolean)>(z_SampleCoverage_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure SampleCoverage(value: single; invert: boolean);
    begin
      z_SampleCoverage_ovr_0(value, invert);
    end;
    
    // added in gl3.2
    public z_SampleMaski_adr := GetFuncAdr('glSampleMaski');
    public z_SampleMaski_ovr_0 := GetFuncOrNil&<procedure(maskNumber: UInt32; mask: DummyFlags)>(z_SampleMaski_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure SampleMaski(maskNumber: UInt32; mask: DummyFlags);
    begin
      z_SampleMaski_ovr_0(maskNumber, mask);
    end;
    
    // added in gl3.3
    public z_SamplerParameterf_adr := GetFuncAdr('glSamplerParameterf');
    public z_SamplerParameterf_ovr_0 := GetFuncOrNil&<procedure(sampler: SamplerName; pname: OpenGL.SamplerParameterF; param: single)>(z_SamplerParameterf_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure SamplerParameterf(sampler: SamplerName; pname: OpenGL.SamplerParameterF; param: single);
    begin
      z_SamplerParameterf_ovr_0(sampler, pname, param);
    end;
    
    // added in gl3.3
    public z_SamplerParameterfv_adr := GetFuncAdr('glSamplerParameterfv');
    public z_SamplerParameterfv_ovr_0 := GetFuncOrNil&<procedure(sampler: UInt32; pname: OpenGL.SamplerParameterF; var param: single)>(z_SamplerParameterfv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure SamplerParameterfv(sampler: UInt32; pname: OpenGL.SamplerParameterF; param: array of single);
    begin
      z_SamplerParameterfv_ovr_0(sampler, pname, param[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure SamplerParameterfv(sampler: UInt32; pname: OpenGL.SamplerParameterF; var param: single);
    begin
      z_SamplerParameterfv_ovr_0(sampler, pname, param);
    end;
    public z_SamplerParameterfv_ovr_2 := GetFuncOrNil&<procedure(sampler: UInt32; pname: OpenGL.SamplerParameterF; param: IntPtr)>(z_SamplerParameterfv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure SamplerParameterfv(sampler: UInt32; pname: OpenGL.SamplerParameterF; param: IntPtr);
    begin
      z_SamplerParameterfv_ovr_2(sampler, pname, param);
    end;
    
    // added in gl3.3
    public z_SamplerParameteri_adr := GetFuncAdr('glSamplerParameteri');
    public z_SamplerParameteri_ovr_0 := GetFuncOrNil&<procedure(sampler: UInt32; pname: OpenGL.SamplerParameterI; param: Int32)>(z_SamplerParameteri_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure SamplerParameteri(sampler: UInt32; pname: OpenGL.SamplerParameterI; param: Int32);
    begin
      z_SamplerParameteri_ovr_0(sampler, pname, param);
    end;
    
    // added in gl3.3
    public z_SamplerParameterIiv_adr := GetFuncAdr('glSamplerParameterIiv');
    public z_SamplerParameterIiv_ovr_0 := GetFuncOrNil&<procedure(sampler: UInt32; pname: OpenGL.SamplerParameterI; var param: Int32)>(z_SamplerParameterIiv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure SamplerParameterIiv(sampler: UInt32; pname: OpenGL.SamplerParameterI; param: array of Int32);
    begin
      z_SamplerParameterIiv_ovr_0(sampler, pname, param[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure SamplerParameterIiv(sampler: UInt32; pname: OpenGL.SamplerParameterI; var param: Int32);
    begin
      z_SamplerParameterIiv_ovr_0(sampler, pname, param);
    end;
    public z_SamplerParameterIiv_ovr_2 := GetFuncOrNil&<procedure(sampler: UInt32; pname: OpenGL.SamplerParameterI; param: IntPtr)>(z_SamplerParameterIiv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure SamplerParameterIiv(sampler: UInt32; pname: OpenGL.SamplerParameterI; param: IntPtr);
    begin
      z_SamplerParameterIiv_ovr_2(sampler, pname, param);
    end;
    
    // added in gl3.3
    public z_SamplerParameterIuiv_adr := GetFuncAdr('glSamplerParameterIuiv');
    public z_SamplerParameterIuiv_ovr_0 := GetFuncOrNil&<procedure(sampler: UInt32; pname: OpenGL.SamplerParameterI; var param: UInt32)>(z_SamplerParameterIuiv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure SamplerParameterIuiv(sampler: UInt32; pname: OpenGL.SamplerParameterI; param: array of UInt32);
    begin
      z_SamplerParameterIuiv_ovr_0(sampler, pname, param[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure SamplerParameterIuiv(sampler: UInt32; pname: OpenGL.SamplerParameterI; var param: UInt32);
    begin
      z_SamplerParameterIuiv_ovr_0(sampler, pname, param);
    end;
    public z_SamplerParameterIuiv_ovr_2 := GetFuncOrNil&<procedure(sampler: UInt32; pname: OpenGL.SamplerParameterI; param: IntPtr)>(z_SamplerParameterIuiv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure SamplerParameterIuiv(sampler: UInt32; pname: OpenGL.SamplerParameterI; param: IntPtr);
    begin
      z_SamplerParameterIuiv_ovr_2(sampler, pname, param);
    end;
    
    // added in gl3.3
    public z_SamplerParameteriv_adr := GetFuncAdr('glSamplerParameteriv');
    public z_SamplerParameteriv_ovr_0 := GetFuncOrNil&<procedure(sampler: UInt32; pname: OpenGL.SamplerParameterI; var param: Int32)>(z_SamplerParameteriv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure SamplerParameteriv(sampler: UInt32; pname: OpenGL.SamplerParameterI; param: array of Int32);
    begin
      z_SamplerParameteriv_ovr_0(sampler, pname, param[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure SamplerParameteriv(sampler: UInt32; pname: OpenGL.SamplerParameterI; var param: Int32);
    begin
      z_SamplerParameteriv_ovr_0(sampler, pname, param);
    end;
    public z_SamplerParameteriv_ovr_2 := GetFuncOrNil&<procedure(sampler: UInt32; pname: OpenGL.SamplerParameterI; param: IntPtr)>(z_SamplerParameteriv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure SamplerParameteriv(sampler: UInt32; pname: OpenGL.SamplerParameterI; param: IntPtr);
    begin
      z_SamplerParameteriv_ovr_2(sampler, pname, param);
    end;
    
    // added in gl1.0
    private static procedure _z_Scissor_ovr0(x: Int32; y: Int32; width: Int32; height: Int32);
    external 'opengl32.dll' name 'glScissor';
    public static z_Scissor_ovr0 := _z_Scissor_ovr0;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Scissor(x: Int32; y: Int32; width: Int32; height: Int32) := z_Scissor_ovr0(x, y, width, height);
    
    // added in gl4.1
    public z_ScissorArrayv_adr := GetFuncAdr('glScissorArrayv');
    public z_ScissorArrayv_ovr_0 := GetFuncOrNil&<procedure(first: UInt32; count: Int32; var v: Int32)>(z_ScissorArrayv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ScissorArrayv(first: UInt32; count: Int32; v: array of Int32);
    begin
      z_ScissorArrayv_ovr_0(first, count, v[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ScissorArrayv(first: UInt32; count: Int32; var v: Int32);
    begin
      z_ScissorArrayv_ovr_0(first, count, v);
    end;
    public z_ScissorArrayv_ovr_2 := GetFuncOrNil&<procedure(first: UInt32; count: Int32; v: IntPtr)>(z_ScissorArrayv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ScissorArrayv(first: UInt32; count: Int32; v: IntPtr);
    begin
      z_ScissorArrayv_ovr_2(first, count, v);
    end;
    
    // added in gl4.1
    public z_ScissorIndexed_adr := GetFuncAdr('glScissorIndexed');
    public z_ScissorIndexed_ovr_0 := GetFuncOrNil&<procedure(index: UInt32; left: Int32; bottom: Int32; width: Int32; height: Int32)>(z_ScissorIndexed_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ScissorIndexed(index: UInt32; left: Int32; bottom: Int32; width: Int32; height: Int32);
    begin
      z_ScissorIndexed_ovr_0(index, left, bottom, width, height);
    end;
    
    // added in gl4.1
    public z_ScissorIndexedv_adr := GetFuncAdr('glScissorIndexedv');
    public z_ScissorIndexedv_ovr_0 := GetFuncOrNil&<procedure(index: UInt32; var v: Int32)>(z_ScissorIndexedv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ScissorIndexedv(index: UInt32; v: array of Int32);
    begin
      z_ScissorIndexedv_ovr_0(index, v[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ScissorIndexedv(index: UInt32; var v: Int32);
    begin
      z_ScissorIndexedv_ovr_0(index, v);
    end;
    public z_ScissorIndexedv_ovr_2 := GetFuncOrNil&<procedure(index: UInt32; v: IntPtr)>(z_ScissorIndexedv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ScissorIndexedv(index: UInt32; v: IntPtr);
    begin
      z_ScissorIndexedv_ovr_2(index, v);
    end;
    
    // added in gl3.3
    public z_SecondaryColorP3ui_adr := GetFuncAdr('glSecondaryColorP3ui');
    public z_SecondaryColorP3ui_ovr_0 := GetFuncOrNil&<procedure(&type: ColorPointerType; color: UInt32)>(z_SecondaryColorP3ui_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure SecondaryColorP3ui(&type: ColorPointerType; color: UInt32);
    begin
      z_SecondaryColorP3ui_ovr_0(&type, color);
    end;
    
    // added in gl3.3
    public z_SecondaryColorP3uiv_adr := GetFuncAdr('glSecondaryColorP3uiv');
    public z_SecondaryColorP3uiv_ovr_0 := GetFuncOrNil&<procedure(&type: ColorPointerType; var color: UInt32)>(z_SecondaryColorP3uiv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure SecondaryColorP3uiv(&type: ColorPointerType; color: array of UInt32);
    begin
      z_SecondaryColorP3uiv_ovr_0(&type, color[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure SecondaryColorP3uiv(&type: ColorPointerType; var color: UInt32);
    begin
      z_SecondaryColorP3uiv_ovr_0(&type, color);
    end;
    public z_SecondaryColorP3uiv_ovr_2 := GetFuncOrNil&<procedure(&type: ColorPointerType; color: IntPtr)>(z_SecondaryColorP3uiv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure SecondaryColorP3uiv(&type: ColorPointerType; color: IntPtr);
    begin
      z_SecondaryColorP3uiv_ovr_2(&type, color);
    end;
    
    // added in gl4.1
    public z_ShaderBinary_adr := GetFuncAdr('glShaderBinary');
    public z_ShaderBinary_ovr_0 := GetFuncOrNil&<procedure(count: Int32; var shaders: UInt32; binaryformat: DummyEnum; binary: IntPtr; length: Int32)>(z_ShaderBinary_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ShaderBinary(count: Int32; shaders: array of UInt32; binaryformat: DummyEnum; binary: IntPtr; length: Int32);
    begin
      z_ShaderBinary_ovr_0(count, shaders[0], binaryformat, binary, length);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ShaderBinary(count: Int32; var shaders: UInt32; binaryformat: DummyEnum; binary: IntPtr; length: Int32);
    begin
      z_ShaderBinary_ovr_0(count, shaders, binaryformat, binary, length);
    end;
    public z_ShaderBinary_ovr_2 := GetFuncOrNil&<procedure(count: Int32; shaders: IntPtr; binaryformat: DummyEnum; binary: IntPtr; length: Int32)>(z_ShaderBinary_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ShaderBinary(count: Int32; shaders: IntPtr; binaryformat: DummyEnum; binary: IntPtr; length: Int32);
    begin
      z_ShaderBinary_ovr_2(count, shaders, binaryformat, binary, length);
    end;
    
    // added in gl2.0
    public z_ShaderSource_adr := GetFuncAdr('glShaderSource');
    public z_ShaderSource_ovr_0 := GetFuncOrNil&<procedure(shader: ShaderName; count: Int32; var _string: IntPtr; var length: Int32)>(z_ShaderSource_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ShaderSource(shader: ShaderName; count: Int32; _string: array of string; length: array of Int32);
    begin
      var par_3_str_ptr := _string.ConvertAll(arr_el1->Marshal.StringToHGlobalAnsi(arr_el1));
      z_ShaderSource_ovr_0(shader, count, par_3_str_ptr[0], length[0]);
      foreach var arr_el1 in par_3_str_ptr do Marshal.FreeHGlobal(arr_el1);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ShaderSource(shader: ShaderName; count: Int32; _string: array of string; var length: Int32);
    begin
      var par_3_str_ptr := _string.ConvertAll(arr_el1->Marshal.StringToHGlobalAnsi(arr_el1));
      z_ShaderSource_ovr_0(shader, count, par_3_str_ptr[0], length);
      foreach var arr_el1 in par_3_str_ptr do Marshal.FreeHGlobal(arr_el1);
    end;
    public z_ShaderSource_ovr_2 := GetFuncOrNil&<procedure(shader: ShaderName; count: Int32; var _string: IntPtr; length: IntPtr)>(z_ShaderSource_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ShaderSource(shader: ShaderName; count: Int32; _string: array of string; length: IntPtr);
    begin
      var par_3_str_ptr := _string.ConvertAll(arr_el1->Marshal.StringToHGlobalAnsi(arr_el1));
      z_ShaderSource_ovr_2(shader, count, par_3_str_ptr[0], length);
      foreach var arr_el1 in par_3_str_ptr do Marshal.FreeHGlobal(arr_el1);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ShaderSource(shader: ShaderName; count: Int32; _string: array of IntPtr; length: array of Int32);
    begin
      z_ShaderSource_ovr_0(shader, count, _string[0], length[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ShaderSource(shader: ShaderName; count: Int32; _string: array of IntPtr; var length: Int32);
    begin
      z_ShaderSource_ovr_0(shader, count, _string[0], length);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ShaderSource(shader: ShaderName; count: Int32; _string: array of IntPtr; length: IntPtr);
    begin
      z_ShaderSource_ovr_2(shader, count, _string[0], length);
    end;
    public z_ShaderSource_ovr_6 := GetFuncOrNil&<procedure(shader: ShaderName; count: Int32; _string: IntPtr; var length: Int32)>(z_ShaderSource_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ShaderSource(shader: ShaderName; count: Int32; _string: IntPtr; length: array of Int32);
    begin
      z_ShaderSource_ovr_6(shader, count, _string, length[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ShaderSource(shader: ShaderName; count: Int32; _string: IntPtr; var length: Int32);
    begin
      z_ShaderSource_ovr_6(shader, count, _string, length);
    end;
    public z_ShaderSource_ovr_8 := GetFuncOrNil&<procedure(shader: ShaderName; count: Int32; _string: IntPtr; length: IntPtr)>(z_ShaderSource_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ShaderSource(shader: ShaderName; count: Int32; _string: IntPtr; length: IntPtr);
    begin
      z_ShaderSource_ovr_8(shader, count, _string, length);
    end;
    
    // added in gl4.3
    public z_ShaderStorageBlockBinding_adr := GetFuncAdr('glShaderStorageBlockBinding');
    public z_ShaderStorageBlockBinding_ovr_0 := GetFuncOrNil&<procedure(&program: ProgramName; storageBlockIndex: UInt32; storageBlockBinding: UInt32)>(z_ShaderStorageBlockBinding_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ShaderStorageBlockBinding(&program: ProgramName; storageBlockIndex: UInt32; storageBlockBinding: UInt32);
    begin
      z_ShaderStorageBlockBinding_ovr_0(&program, storageBlockIndex, storageBlockBinding);
    end;
    
    // added in gl4.6
    public z_SpecializeShader_adr := GetFuncAdr('glSpecializeShader');
    public z_SpecializeShader_ovr_0 := GetFuncOrNil&<procedure(shader: UInt32; pEntryPoint: IntPtr; numSpecializationConstants: UInt32; var pConstantIndex: UInt32; var pConstantValue: UInt32)>(z_SpecializeShader_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure SpecializeShader(shader: UInt32; pEntryPoint: string; numSpecializationConstants: UInt32; pConstantIndex: array of UInt32; pConstantValue: array of UInt32);
    begin
      var par_2_str_ptr := Marshal.StringToHGlobalAnsi(pEntryPoint);
      z_SpecializeShader_ovr_0(shader, par_2_str_ptr, numSpecializationConstants, pConstantIndex[0], pConstantValue[0]);
      Marshal.FreeHGlobal(par_2_str_ptr);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure SpecializeShader(shader: UInt32; pEntryPoint: string; numSpecializationConstants: UInt32; pConstantIndex: array of UInt32; var pConstantValue: UInt32);
    begin
      var par_2_str_ptr := Marshal.StringToHGlobalAnsi(pEntryPoint);
      z_SpecializeShader_ovr_0(shader, par_2_str_ptr, numSpecializationConstants, pConstantIndex[0], pConstantValue);
      Marshal.FreeHGlobal(par_2_str_ptr);
    end;
    public z_SpecializeShader_ovr_2 := GetFuncOrNil&<procedure(shader: UInt32; pEntryPoint: IntPtr; numSpecializationConstants: UInt32; var pConstantIndex: UInt32; pConstantValue: IntPtr)>(z_SpecializeShader_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure SpecializeShader(shader: UInt32; pEntryPoint: string; numSpecializationConstants: UInt32; pConstantIndex: array of UInt32; pConstantValue: IntPtr);
    begin
      var par_2_str_ptr := Marshal.StringToHGlobalAnsi(pEntryPoint);
      z_SpecializeShader_ovr_2(shader, par_2_str_ptr, numSpecializationConstants, pConstantIndex[0], pConstantValue);
      Marshal.FreeHGlobal(par_2_str_ptr);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure SpecializeShader(shader: UInt32; pEntryPoint: string; numSpecializationConstants: UInt32; var pConstantIndex: UInt32; pConstantValue: array of UInt32);
    begin
      var par_2_str_ptr := Marshal.StringToHGlobalAnsi(pEntryPoint);
      z_SpecializeShader_ovr_0(shader, par_2_str_ptr, numSpecializationConstants, pConstantIndex, pConstantValue[0]);
      Marshal.FreeHGlobal(par_2_str_ptr);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure SpecializeShader(shader: UInt32; pEntryPoint: string; numSpecializationConstants: UInt32; var pConstantIndex: UInt32; var pConstantValue: UInt32);
    begin
      var par_2_str_ptr := Marshal.StringToHGlobalAnsi(pEntryPoint);
      z_SpecializeShader_ovr_0(shader, par_2_str_ptr, numSpecializationConstants, pConstantIndex, pConstantValue);
      Marshal.FreeHGlobal(par_2_str_ptr);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure SpecializeShader(shader: UInt32; pEntryPoint: string; numSpecializationConstants: UInt32; var pConstantIndex: UInt32; pConstantValue: IntPtr);
    begin
      var par_2_str_ptr := Marshal.StringToHGlobalAnsi(pEntryPoint);
      z_SpecializeShader_ovr_2(shader, par_2_str_ptr, numSpecializationConstants, pConstantIndex, pConstantValue);
      Marshal.FreeHGlobal(par_2_str_ptr);
    end;
    public z_SpecializeShader_ovr_6 := GetFuncOrNil&<procedure(shader: UInt32; pEntryPoint: IntPtr; numSpecializationConstants: UInt32; pConstantIndex: IntPtr; var pConstantValue: UInt32)>(z_SpecializeShader_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure SpecializeShader(shader: UInt32; pEntryPoint: string; numSpecializationConstants: UInt32; pConstantIndex: IntPtr; pConstantValue: array of UInt32);
    begin
      var par_2_str_ptr := Marshal.StringToHGlobalAnsi(pEntryPoint);
      z_SpecializeShader_ovr_6(shader, par_2_str_ptr, numSpecializationConstants, pConstantIndex, pConstantValue[0]);
      Marshal.FreeHGlobal(par_2_str_ptr);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure SpecializeShader(shader: UInt32; pEntryPoint: string; numSpecializationConstants: UInt32; pConstantIndex: IntPtr; var pConstantValue: UInt32);
    begin
      var par_2_str_ptr := Marshal.StringToHGlobalAnsi(pEntryPoint);
      z_SpecializeShader_ovr_6(shader, par_2_str_ptr, numSpecializationConstants, pConstantIndex, pConstantValue);
      Marshal.FreeHGlobal(par_2_str_ptr);
    end;
    public z_SpecializeShader_ovr_8 := GetFuncOrNil&<procedure(shader: UInt32; pEntryPoint: IntPtr; numSpecializationConstants: UInt32; pConstantIndex: IntPtr; pConstantValue: IntPtr)>(z_SpecializeShader_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure SpecializeShader(shader: UInt32; pEntryPoint: string; numSpecializationConstants: UInt32; pConstantIndex: IntPtr; pConstantValue: IntPtr);
    begin
      var par_2_str_ptr := Marshal.StringToHGlobalAnsi(pEntryPoint);
      z_SpecializeShader_ovr_8(shader, par_2_str_ptr, numSpecializationConstants, pConstantIndex, pConstantValue);
      Marshal.FreeHGlobal(par_2_str_ptr);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure SpecializeShader(shader: UInt32; pEntryPoint: IntPtr; numSpecializationConstants: UInt32; pConstantIndex: array of UInt32; pConstantValue: array of UInt32);
    begin
      z_SpecializeShader_ovr_0(shader, pEntryPoint, numSpecializationConstants, pConstantIndex[0], pConstantValue[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure SpecializeShader(shader: UInt32; pEntryPoint: IntPtr; numSpecializationConstants: UInt32; pConstantIndex: array of UInt32; var pConstantValue: UInt32);
    begin
      z_SpecializeShader_ovr_0(shader, pEntryPoint, numSpecializationConstants, pConstantIndex[0], pConstantValue);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure SpecializeShader(shader: UInt32; pEntryPoint: IntPtr; numSpecializationConstants: UInt32; pConstantIndex: array of UInt32; pConstantValue: IntPtr);
    begin
      z_SpecializeShader_ovr_2(shader, pEntryPoint, numSpecializationConstants, pConstantIndex[0], pConstantValue);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure SpecializeShader(shader: UInt32; pEntryPoint: IntPtr; numSpecializationConstants: UInt32; var pConstantIndex: UInt32; pConstantValue: array of UInt32);
    begin
      z_SpecializeShader_ovr_0(shader, pEntryPoint, numSpecializationConstants, pConstantIndex, pConstantValue[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure SpecializeShader(shader: UInt32; pEntryPoint: IntPtr; numSpecializationConstants: UInt32; var pConstantIndex: UInt32; var pConstantValue: UInt32);
    begin
      z_SpecializeShader_ovr_0(shader, pEntryPoint, numSpecializationConstants, pConstantIndex, pConstantValue);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure SpecializeShader(shader: UInt32; pEntryPoint: IntPtr; numSpecializationConstants: UInt32; var pConstantIndex: UInt32; pConstantValue: IntPtr);
    begin
      z_SpecializeShader_ovr_2(shader, pEntryPoint, numSpecializationConstants, pConstantIndex, pConstantValue);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure SpecializeShader(shader: UInt32; pEntryPoint: IntPtr; numSpecializationConstants: UInt32; pConstantIndex: IntPtr; pConstantValue: array of UInt32);
    begin
      z_SpecializeShader_ovr_6(shader, pEntryPoint, numSpecializationConstants, pConstantIndex, pConstantValue[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure SpecializeShader(shader: UInt32; pEntryPoint: IntPtr; numSpecializationConstants: UInt32; pConstantIndex: IntPtr; var pConstantValue: UInt32);
    begin
      z_SpecializeShader_ovr_6(shader, pEntryPoint, numSpecializationConstants, pConstantIndex, pConstantValue);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure SpecializeShader(shader: UInt32; pEntryPoint: IntPtr; numSpecializationConstants: UInt32; pConstantIndex: IntPtr; pConstantValue: IntPtr);
    begin
      z_SpecializeShader_ovr_8(shader, pEntryPoint, numSpecializationConstants, pConstantIndex, pConstantValue);
    end;
    
    // added in gl1.0
    private static procedure _z_StencilFunc_ovr0(func: StencilFunction; ref: Int32; mask: UInt32);
    external 'opengl32.dll' name 'glStencilFunc';
    public static z_StencilFunc_ovr0 := _z_StencilFunc_ovr0;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure StencilFunc(func: StencilFunction; ref: Int32; mask: UInt32) := z_StencilFunc_ovr0(func, ref, mask);
    
    // added in gl2.0
    public z_StencilFuncSeparate_adr := GetFuncAdr('glStencilFuncSeparate');
    public z_StencilFuncSeparate_ovr_0 := GetFuncOrNil&<procedure(face: StencilFaceDirection; func: StencilFunction; ref: Int32; mask: UInt32)>(z_StencilFuncSeparate_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure StencilFuncSeparate(face: StencilFaceDirection; func: StencilFunction; ref: Int32; mask: UInt32);
    begin
      z_StencilFuncSeparate_ovr_0(face, func, ref, mask);
    end;
    
    // added in gl1.0
    private static procedure _z_StencilMask_ovr0(mask: UInt32);
    external 'opengl32.dll' name 'glStencilMask';
    public static z_StencilMask_ovr0 := _z_StencilMask_ovr0;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure StencilMask(mask: UInt32) := z_StencilMask_ovr0(mask);
    
    // added in gl2.0
    public z_StencilMaskSeparate_adr := GetFuncAdr('glStencilMaskSeparate');
    public z_StencilMaskSeparate_ovr_0 := GetFuncOrNil&<procedure(face: StencilFaceDirection; mask: UInt32)>(z_StencilMaskSeparate_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure StencilMaskSeparate(face: StencilFaceDirection; mask: UInt32);
    begin
      z_StencilMaskSeparate_ovr_0(face, mask);
    end;
    
    // added in gl1.0
    private static procedure _z_StencilOp_ovr0(fail: OpenGL.StencilOp; zfail: OpenGL.StencilOp; zpass: OpenGL.StencilOp);
    external 'opengl32.dll' name 'glStencilOp';
    public static z_StencilOp_ovr0 := _z_StencilOp_ovr0;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure StencilOp(fail: OpenGL.StencilOp; zfail: OpenGL.StencilOp; zpass: OpenGL.StencilOp) := z_StencilOp_ovr0(fail, zfail, zpass);
    
    // added in gl2.0
    public z_StencilOpSeparate_adr := GetFuncAdr('glStencilOpSeparate');
    public z_StencilOpSeparate_ovr_0 := GetFuncOrNil&<procedure(face: StencilFaceDirection; sfail: OpenGL.StencilOp; dpfail: OpenGL.StencilOp; dppass: OpenGL.StencilOp)>(z_StencilOpSeparate_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure StencilOpSeparate(face: StencilFaceDirection; sfail: OpenGL.StencilOp; dpfail: OpenGL.StencilOp; dppass: OpenGL.StencilOp);
    begin
      z_StencilOpSeparate_ovr_0(face, sfail, dpfail, dppass);
    end;
    
    // added in gl3.1
    public z_TexBuffer_adr := GetFuncAdr('glTexBuffer');
    public z_TexBuffer_ovr_0 := GetFuncOrNil&<procedure(target: TextureTarget; _internalformat: InternalFormat; buffer: BufferName)>(z_TexBuffer_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TexBuffer(target: TextureTarget; _internalformat: InternalFormat; buffer: BufferName);
    begin
      z_TexBuffer_ovr_0(target, _internalformat, buffer);
    end;
    
    // added in gl4.3
    public z_TexBufferRange_adr := GetFuncAdr('glTexBufferRange');
    public z_TexBufferRange_ovr_0 := GetFuncOrNil&<procedure(target: TextureTarget; _internalformat: InternalFormat; buffer: BufferName; offset: IntPtr; size: IntPtr)>(z_TexBufferRange_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TexBufferRange(target: TextureTarget; _internalformat: InternalFormat; buffer: BufferName; offset: IntPtr; size: IntPtr);
    begin
      z_TexBufferRange_ovr_0(target, _internalformat, buffer, offset, size);
    end;
    
    // added in gl3.3
    public z_TexCoordP1ui_adr := GetFuncAdr('glTexCoordP1ui');
    public z_TexCoordP1ui_ovr_0 := GetFuncOrNil&<procedure(&type: TexCoordPointerType; coords: UInt32)>(z_TexCoordP1ui_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TexCoordP1ui(&type: TexCoordPointerType; coords: UInt32);
    begin
      z_TexCoordP1ui_ovr_0(&type, coords);
    end;
    
    // added in gl3.3
    public z_TexCoordP1uiv_adr := GetFuncAdr('glTexCoordP1uiv');
    public z_TexCoordP1uiv_ovr_0 := GetFuncOrNil&<procedure(&type: TexCoordPointerType; var coords: UInt32)>(z_TexCoordP1uiv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TexCoordP1uiv(&type: TexCoordPointerType; coords: array of UInt32);
    begin
      z_TexCoordP1uiv_ovr_0(&type, coords[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TexCoordP1uiv(&type: TexCoordPointerType; var coords: UInt32);
    begin
      z_TexCoordP1uiv_ovr_0(&type, coords);
    end;
    public z_TexCoordP1uiv_ovr_2 := GetFuncOrNil&<procedure(&type: TexCoordPointerType; coords: IntPtr)>(z_TexCoordP1uiv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TexCoordP1uiv(&type: TexCoordPointerType; coords: IntPtr);
    begin
      z_TexCoordP1uiv_ovr_2(&type, coords);
    end;
    
    // added in gl3.3
    public z_TexCoordP2ui_adr := GetFuncAdr('glTexCoordP2ui');
    public z_TexCoordP2ui_ovr_0 := GetFuncOrNil&<procedure(&type: TexCoordPointerType; coords: UInt32)>(z_TexCoordP2ui_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TexCoordP2ui(&type: TexCoordPointerType; coords: UInt32);
    begin
      z_TexCoordP2ui_ovr_0(&type, coords);
    end;
    
    // added in gl3.3
    public z_TexCoordP2uiv_adr := GetFuncAdr('glTexCoordP2uiv');
    public z_TexCoordP2uiv_ovr_0 := GetFuncOrNil&<procedure(&type: TexCoordPointerType; var coords: UInt32)>(z_TexCoordP2uiv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TexCoordP2uiv(&type: TexCoordPointerType; coords: array of UInt32);
    begin
      z_TexCoordP2uiv_ovr_0(&type, coords[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TexCoordP2uiv(&type: TexCoordPointerType; var coords: UInt32);
    begin
      z_TexCoordP2uiv_ovr_0(&type, coords);
    end;
    public z_TexCoordP2uiv_ovr_2 := GetFuncOrNil&<procedure(&type: TexCoordPointerType; coords: IntPtr)>(z_TexCoordP2uiv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TexCoordP2uiv(&type: TexCoordPointerType; coords: IntPtr);
    begin
      z_TexCoordP2uiv_ovr_2(&type, coords);
    end;
    
    // added in gl3.3
    public z_TexCoordP3ui_adr := GetFuncAdr('glTexCoordP3ui');
    public z_TexCoordP3ui_ovr_0 := GetFuncOrNil&<procedure(&type: TexCoordPointerType; coords: UInt32)>(z_TexCoordP3ui_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TexCoordP3ui(&type: TexCoordPointerType; coords: UInt32);
    begin
      z_TexCoordP3ui_ovr_0(&type, coords);
    end;
    
    // added in gl3.3
    public z_TexCoordP3uiv_adr := GetFuncAdr('glTexCoordP3uiv');
    public z_TexCoordP3uiv_ovr_0 := GetFuncOrNil&<procedure(&type: TexCoordPointerType; var coords: UInt32)>(z_TexCoordP3uiv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TexCoordP3uiv(&type: TexCoordPointerType; coords: array of UInt32);
    begin
      z_TexCoordP3uiv_ovr_0(&type, coords[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TexCoordP3uiv(&type: TexCoordPointerType; var coords: UInt32);
    begin
      z_TexCoordP3uiv_ovr_0(&type, coords);
    end;
    public z_TexCoordP3uiv_ovr_2 := GetFuncOrNil&<procedure(&type: TexCoordPointerType; coords: IntPtr)>(z_TexCoordP3uiv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TexCoordP3uiv(&type: TexCoordPointerType; coords: IntPtr);
    begin
      z_TexCoordP3uiv_ovr_2(&type, coords);
    end;
    
    // added in gl3.3
    public z_TexCoordP4ui_adr := GetFuncAdr('glTexCoordP4ui');
    public z_TexCoordP4ui_ovr_0 := GetFuncOrNil&<procedure(&type: TexCoordPointerType; coords: UInt32)>(z_TexCoordP4ui_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TexCoordP4ui(&type: TexCoordPointerType; coords: UInt32);
    begin
      z_TexCoordP4ui_ovr_0(&type, coords);
    end;
    
    // added in gl3.3
    public z_TexCoordP4uiv_adr := GetFuncAdr('glTexCoordP4uiv');
    public z_TexCoordP4uiv_ovr_0 := GetFuncOrNil&<procedure(&type: TexCoordPointerType; var coords: UInt32)>(z_TexCoordP4uiv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TexCoordP4uiv(&type: TexCoordPointerType; coords: array of UInt32);
    begin
      z_TexCoordP4uiv_ovr_0(&type, coords[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TexCoordP4uiv(&type: TexCoordPointerType; var coords: UInt32);
    begin
      z_TexCoordP4uiv_ovr_0(&type, coords);
    end;
    public z_TexCoordP4uiv_ovr_2 := GetFuncOrNil&<procedure(&type: TexCoordPointerType; coords: IntPtr)>(z_TexCoordP4uiv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TexCoordP4uiv(&type: TexCoordPointerType; coords: IntPtr);
    begin
      z_TexCoordP4uiv_ovr_2(&type, coords);
    end;
    
    // added in gl1.0
    private static procedure _z_TexImage1D_ovr0(target: TextureTarget; level: Int32; internalformat: Int32; width: Int32; border: Int32; format: PixelFormat; &type: PixelType; pixels: IntPtr);
    external 'opengl32.dll' name 'glTexImage1D';
    public static z_TexImage1D_ovr0 := _z_TexImage1D_ovr0;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TexImage1D(target: TextureTarget; level: Int32; internalformat: Int32; width: Int32; border: Int32; format: PixelFormat; &type: PixelType; pixels: IntPtr) := z_TexImage1D_ovr0(target, level, internalformat, width, border, format, &type, pixels);
    
    // added in gl1.0
    private static procedure _z_TexImage2D_ovr0(target: TextureTarget; level: Int32; internalformat: Int32; width: Int32; height: Int32; border: Int32; format: PixelFormat; &type: PixelType; pixels: IntPtr);
    external 'opengl32.dll' name 'glTexImage2D';
    public static z_TexImage2D_ovr0 := _z_TexImage2D_ovr0;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TexImage2D(target: TextureTarget; level: Int32; internalformat: Int32; width: Int32; height: Int32; border: Int32; format: PixelFormat; &type: PixelType; pixels: IntPtr) := z_TexImage2D_ovr0(target, level, internalformat, width, height, border, format, &type, pixels);
    
    // added in gl3.2
    public z_TexImage2DMultisample_adr := GetFuncAdr('glTexImage2DMultisample');
    public z_TexImage2DMultisample_ovr_0 := GetFuncOrNil&<procedure(target: TextureTarget; samples: Int32; _internalformat: InternalFormat; width: Int32; height: Int32; fixedsamplelocations: boolean)>(z_TexImage2DMultisample_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TexImage2DMultisample(target: TextureTarget; samples: Int32; _internalformat: InternalFormat; width: Int32; height: Int32; fixedsamplelocations: boolean);
    begin
      z_TexImage2DMultisample_ovr_0(target, samples, _internalformat, width, height, fixedsamplelocations);
    end;
    
    // added in gl1.2
    public z_TexImage3D_adr := GetFuncAdr('glTexImage3D');
    public z_TexImage3D_ovr_0 := GetFuncOrNil&<procedure(target: TextureTarget; level: Int32; internalformat: Int32; width: Int32; height: Int32; depth: Int32; border: Int32; format: PixelFormat; &type: PixelType; pixels: IntPtr)>(z_TexImage3D_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TexImage3D(target: TextureTarget; level: Int32; internalformat: Int32; width: Int32; height: Int32; depth: Int32; border: Int32; format: PixelFormat; &type: PixelType; pixels: IntPtr);
    begin
      z_TexImage3D_ovr_0(target, level, internalformat, width, height, depth, border, format, &type, pixels);
    end;
    
    // added in gl3.2
    public z_TexImage3DMultisample_adr := GetFuncAdr('glTexImage3DMultisample');
    public z_TexImage3DMultisample_ovr_0 := GetFuncOrNil&<procedure(target: TextureTarget; samples: Int32; _internalformat: InternalFormat; width: Int32; height: Int32; depth: Int32; fixedsamplelocations: boolean)>(z_TexImage3DMultisample_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TexImage3DMultisample(target: TextureTarget; samples: Int32; _internalformat: InternalFormat; width: Int32; height: Int32; depth: Int32; fixedsamplelocations: boolean);
    begin
      z_TexImage3DMultisample_ovr_0(target, samples, _internalformat, width, height, depth, fixedsamplelocations);
    end;
    
    // added in gl1.0
    private static procedure _z_TexParameterf_ovr0(target: TextureTarget; pname: TextureParameterName; param: single);
    external 'opengl32.dll' name 'glTexParameterf';
    public static z_TexParameterf_ovr0 := _z_TexParameterf_ovr0;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TexParameterf(target: TextureTarget; pname: TextureParameterName; param: single) := z_TexParameterf_ovr0(target, pname, param);
    
    // added in gl1.0
    private static procedure _z_TexParameterfv_ovr0(target: TextureTarget; pname: TextureParameterName; [MarshalAs(UnmanagedType.LPArray)] &params: array of single);
    external 'opengl32.dll' name 'glTexParameterfv';
    public static z_TexParameterfv_ovr0 := _z_TexParameterfv_ovr0;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TexParameterfv(target: TextureTarget; pname: TextureParameterName; &params: array of single) := z_TexParameterfv_ovr0(target, pname, &params);
    private static procedure _z_TexParameterfv_ovr1(target: TextureTarget; pname: TextureParameterName; var &params: single);
    external 'opengl32.dll' name 'glTexParameterfv';
    public static z_TexParameterfv_ovr1 := _z_TexParameterfv_ovr1;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TexParameterfv(target: TextureTarget; pname: TextureParameterName; var &params: single) := z_TexParameterfv_ovr1(target, pname, &params);
    private static procedure _z_TexParameterfv_ovr2(target: TextureTarget; pname: TextureParameterName; &params: IntPtr);
    external 'opengl32.dll' name 'glTexParameterfv';
    public static z_TexParameterfv_ovr2 := _z_TexParameterfv_ovr2;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TexParameterfv(target: TextureTarget; pname: TextureParameterName; &params: IntPtr) := z_TexParameterfv_ovr2(target, pname, &params);
    
    // added in gl1.0
    private static procedure _z_TexParameteri_ovr0(target: TextureTarget; pname: TextureParameterName; param: Int32);
    external 'opengl32.dll' name 'glTexParameteri';
    public static z_TexParameteri_ovr0 := _z_TexParameteri_ovr0;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TexParameteri(target: TextureTarget; pname: TextureParameterName; param: Int32) := z_TexParameteri_ovr0(target, pname, param);
    
    // added in gl3.0
    public z_TexParameterIiv_adr := GetFuncAdr('glTexParameterIiv');
    public z_TexParameterIiv_ovr_0 := GetFuncOrNil&<procedure(target: TextureTarget; pname: TextureParameterName; var &params: Int32)>(z_TexParameterIiv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TexParameterIiv(target: TextureTarget; pname: TextureParameterName; &params: array of Int32);
    begin
      z_TexParameterIiv_ovr_0(target, pname, &params[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TexParameterIiv(target: TextureTarget; pname: TextureParameterName; var &params: Int32);
    begin
      z_TexParameterIiv_ovr_0(target, pname, &params);
    end;
    public z_TexParameterIiv_ovr_2 := GetFuncOrNil&<procedure(target: TextureTarget; pname: TextureParameterName; &params: IntPtr)>(z_TexParameterIiv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TexParameterIiv(target: TextureTarget; pname: TextureParameterName; &params: IntPtr);
    begin
      z_TexParameterIiv_ovr_2(target, pname, &params);
    end;
    
    // added in gl3.0
    public z_TexParameterIuiv_adr := GetFuncAdr('glTexParameterIuiv');
    public z_TexParameterIuiv_ovr_0 := GetFuncOrNil&<procedure(target: TextureTarget; pname: TextureParameterName; var &params: UInt32)>(z_TexParameterIuiv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TexParameterIuiv(target: TextureTarget; pname: TextureParameterName; &params: array of UInt32);
    begin
      z_TexParameterIuiv_ovr_0(target, pname, &params[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TexParameterIuiv(target: TextureTarget; pname: TextureParameterName; var &params: UInt32);
    begin
      z_TexParameterIuiv_ovr_0(target, pname, &params);
    end;
    public z_TexParameterIuiv_ovr_2 := GetFuncOrNil&<procedure(target: TextureTarget; pname: TextureParameterName; &params: IntPtr)>(z_TexParameterIuiv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TexParameterIuiv(target: TextureTarget; pname: TextureParameterName; &params: IntPtr);
    begin
      z_TexParameterIuiv_ovr_2(target, pname, &params);
    end;
    
    // added in gl1.0
    private static procedure _z_TexParameteriv_ovr0(target: TextureTarget; pname: TextureParameterName; [MarshalAs(UnmanagedType.LPArray)] &params: array of Int32);
    external 'opengl32.dll' name 'glTexParameteriv';
    public static z_TexParameteriv_ovr0 := _z_TexParameteriv_ovr0;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TexParameteriv(target: TextureTarget; pname: TextureParameterName; &params: array of Int32) := z_TexParameteriv_ovr0(target, pname, &params);
    private static procedure _z_TexParameteriv_ovr1(target: TextureTarget; pname: TextureParameterName; var &params: Int32);
    external 'opengl32.dll' name 'glTexParameteriv';
    public static z_TexParameteriv_ovr1 := _z_TexParameteriv_ovr1;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TexParameteriv(target: TextureTarget; pname: TextureParameterName; var &params: Int32) := z_TexParameteriv_ovr1(target, pname, &params);
    private static procedure _z_TexParameteriv_ovr2(target: TextureTarget; pname: TextureParameterName; &params: IntPtr);
    external 'opengl32.dll' name 'glTexParameteriv';
    public static z_TexParameteriv_ovr2 := _z_TexParameteriv_ovr2;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TexParameteriv(target: TextureTarget; pname: TextureParameterName; &params: IntPtr) := z_TexParameteriv_ovr2(target, pname, &params);
    
    // added in gl4.2
    public z_TexStorage1D_adr := GetFuncAdr('glTexStorage1D');
    public z_TexStorage1D_ovr_0 := GetFuncOrNil&<procedure(target: TextureTarget; levels: Int32; _internalformat: InternalFormat; width: Int32)>(z_TexStorage1D_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TexStorage1D(target: TextureTarget; levels: Int32; _internalformat: InternalFormat; width: Int32);
    begin
      z_TexStorage1D_ovr_0(target, levels, _internalformat, width);
    end;
    
    // added in gl4.2
    public z_TexStorage2D_adr := GetFuncAdr('glTexStorage2D');
    public z_TexStorage2D_ovr_0 := GetFuncOrNil&<procedure(target: TextureTarget; levels: Int32; _internalformat: InternalFormat; width: Int32; height: Int32)>(z_TexStorage2D_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TexStorage2D(target: TextureTarget; levels: Int32; _internalformat: InternalFormat; width: Int32; height: Int32);
    begin
      z_TexStorage2D_ovr_0(target, levels, _internalformat, width, height);
    end;
    
    // added in gl4.3
    public z_TexStorage2DMultisample_adr := GetFuncAdr('glTexStorage2DMultisample');
    public z_TexStorage2DMultisample_ovr_0 := GetFuncOrNil&<procedure(target: TextureTarget; samples: Int32; _internalformat: InternalFormat; width: Int32; height: Int32; fixedsamplelocations: boolean)>(z_TexStorage2DMultisample_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TexStorage2DMultisample(target: TextureTarget; samples: Int32; _internalformat: InternalFormat; width: Int32; height: Int32; fixedsamplelocations: boolean);
    begin
      z_TexStorage2DMultisample_ovr_0(target, samples, _internalformat, width, height, fixedsamplelocations);
    end;
    
    // added in gl4.2
    public z_TexStorage3D_adr := GetFuncAdr('glTexStorage3D');
    public z_TexStorage3D_ovr_0 := GetFuncOrNil&<procedure(target: TextureTarget; levels: Int32; _internalformat: InternalFormat; width: Int32; height: Int32; depth: Int32)>(z_TexStorage3D_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TexStorage3D(target: TextureTarget; levels: Int32; _internalformat: InternalFormat; width: Int32; height: Int32; depth: Int32);
    begin
      z_TexStorage3D_ovr_0(target, levels, _internalformat, width, height, depth);
    end;
    
    // added in gl4.3
    public z_TexStorage3DMultisample_adr := GetFuncAdr('glTexStorage3DMultisample');
    public z_TexStorage3DMultisample_ovr_0 := GetFuncOrNil&<procedure(target: TextureTarget; samples: Int32; _internalformat: InternalFormat; width: Int32; height: Int32; depth: Int32; fixedsamplelocations: boolean)>(z_TexStorage3DMultisample_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TexStorage3DMultisample(target: TextureTarget; samples: Int32; _internalformat: InternalFormat; width: Int32; height: Int32; depth: Int32; fixedsamplelocations: boolean);
    begin
      z_TexStorage3DMultisample_ovr_0(target, samples, _internalformat, width, height, depth, fixedsamplelocations);
    end;
    
    // added in gl1.1
    private static procedure _z_TexSubImage1D_ovr0(target: TextureTarget; level: Int32; xoffset: Int32; width: Int32; format: PixelFormat; &type: PixelType; pixels: IntPtr);
    external 'opengl32.dll' name 'glTexSubImage1D';
    public static z_TexSubImage1D_ovr0 := _z_TexSubImage1D_ovr0;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TexSubImage1D(target: TextureTarget; level: Int32; xoffset: Int32; width: Int32; format: PixelFormat; &type: PixelType; pixels: IntPtr) := z_TexSubImage1D_ovr0(target, level, xoffset, width, format, &type, pixels);
    
    // added in gl1.1
    private static procedure _z_TexSubImage2D_ovr0(target: TextureTarget; level: Int32; xoffset: Int32; yoffset: Int32; width: Int32; height: Int32; format: PixelFormat; &type: PixelType; pixels: IntPtr);
    external 'opengl32.dll' name 'glTexSubImage2D';
    public static z_TexSubImage2D_ovr0 := _z_TexSubImage2D_ovr0;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TexSubImage2D(target: TextureTarget; level: Int32; xoffset: Int32; yoffset: Int32; width: Int32; height: Int32; format: PixelFormat; &type: PixelType; pixels: IntPtr) := z_TexSubImage2D_ovr0(target, level, xoffset, yoffset, width, height, format, &type, pixels);
    
    // added in gl1.2
    public z_TexSubImage3D_adr := GetFuncAdr('glTexSubImage3D');
    public z_TexSubImage3D_ovr_0 := GetFuncOrNil&<procedure(target: TextureTarget; level: Int32; xoffset: Int32; yoffset: Int32; zoffset: Int32; width: Int32; height: Int32; depth: Int32; format: PixelFormat; &type: PixelType; pixels: IntPtr)>(z_TexSubImage3D_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TexSubImage3D(target: TextureTarget; level: Int32; xoffset: Int32; yoffset: Int32; zoffset: Int32; width: Int32; height: Int32; depth: Int32; format: PixelFormat; &type: PixelType; pixels: IntPtr);
    begin
      z_TexSubImage3D_ovr_0(target, level, xoffset, yoffset, zoffset, width, height, depth, format, &type, pixels);
    end;
    
    // added in gl4.5
    public z_TextureBarrier_adr := GetFuncAdr('glTextureBarrier');
    public z_TextureBarrier_ovr_0 := GetFuncOrNil&<procedure>(z_TextureBarrier_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TextureBarrier;
    begin
      z_TextureBarrier_ovr_0;
    end;
    
    // added in gl4.5
    public z_TextureBuffer_adr := GetFuncAdr('glTextureBuffer');
    public z_TextureBuffer_ovr_0 := GetFuncOrNil&<procedure(texture: TextureName; _internalformat: InternalFormat; buffer: BufferName)>(z_TextureBuffer_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TextureBuffer(texture: TextureName; _internalformat: InternalFormat; buffer: BufferName);
    begin
      z_TextureBuffer_ovr_0(texture, _internalformat, buffer);
    end;
    
    // added in gl4.5
    public z_TextureBufferRange_adr := GetFuncAdr('glTextureBufferRange');
    public z_TextureBufferRange_ovr_0 := GetFuncOrNil&<procedure(texture: TextureName; _internalformat: InternalFormat; buffer: BufferName; offset: IntPtr; size: IntPtr)>(z_TextureBufferRange_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TextureBufferRange(texture: TextureName; _internalformat: InternalFormat; buffer: BufferName; offset: IntPtr; size: IntPtr);
    begin
      z_TextureBufferRange_ovr_0(texture, _internalformat, buffer, offset, size);
    end;
    
    // added in gl4.5
    public z_TextureParameterf_adr := GetFuncAdr('glTextureParameterf');
    public z_TextureParameterf_ovr_0 := GetFuncOrNil&<procedure(texture: TextureName; pname: TextureParameterName; param: single)>(z_TextureParameterf_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TextureParameterf(texture: TextureName; pname: TextureParameterName; param: single);
    begin
      z_TextureParameterf_ovr_0(texture, pname, param);
    end;
    
    // added in gl4.5
    public z_TextureParameterfv_adr := GetFuncAdr('glTextureParameterfv');
    public z_TextureParameterfv_ovr_0 := GetFuncOrNil&<procedure(texture: UInt32; pname: TextureParameterName; var param: single)>(z_TextureParameterfv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TextureParameterfv(texture: UInt32; pname: TextureParameterName; param: array of single);
    begin
      z_TextureParameterfv_ovr_0(texture, pname, param[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TextureParameterfv(texture: UInt32; pname: TextureParameterName; var param: single);
    begin
      z_TextureParameterfv_ovr_0(texture, pname, param);
    end;
    public z_TextureParameterfv_ovr_2 := GetFuncOrNil&<procedure(texture: UInt32; pname: TextureParameterName; param: IntPtr)>(z_TextureParameterfv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TextureParameterfv(texture: UInt32; pname: TextureParameterName; param: IntPtr);
    begin
      z_TextureParameterfv_ovr_2(texture, pname, param);
    end;
    
    // added in gl4.5
    public z_TextureParameteri_adr := GetFuncAdr('glTextureParameteri');
    public z_TextureParameteri_ovr_0 := GetFuncOrNil&<procedure(texture: UInt32; pname: TextureParameterName; param: Int32)>(z_TextureParameteri_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TextureParameteri(texture: UInt32; pname: TextureParameterName; param: Int32);
    begin
      z_TextureParameteri_ovr_0(texture, pname, param);
    end;
    
    // added in gl4.5
    public z_TextureParameterIiv_adr := GetFuncAdr('glTextureParameterIiv');
    public z_TextureParameterIiv_ovr_0 := GetFuncOrNil&<procedure(texture: UInt32; pname: TextureParameterName; var &params: Int32)>(z_TextureParameterIiv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TextureParameterIiv(texture: UInt32; pname: TextureParameterName; &params: array of Int32);
    begin
      z_TextureParameterIiv_ovr_0(texture, pname, &params[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TextureParameterIiv(texture: UInt32; pname: TextureParameterName; var &params: Int32);
    begin
      z_TextureParameterIiv_ovr_0(texture, pname, &params);
    end;
    public z_TextureParameterIiv_ovr_2 := GetFuncOrNil&<procedure(texture: UInt32; pname: TextureParameterName; &params: IntPtr)>(z_TextureParameterIiv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TextureParameterIiv(texture: UInt32; pname: TextureParameterName; &params: IntPtr);
    begin
      z_TextureParameterIiv_ovr_2(texture, pname, &params);
    end;
    
    // added in gl4.5
    public z_TextureParameterIuiv_adr := GetFuncAdr('glTextureParameterIuiv');
    public z_TextureParameterIuiv_ovr_0 := GetFuncOrNil&<procedure(texture: UInt32; pname: TextureParameterName; var &params: UInt32)>(z_TextureParameterIuiv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TextureParameterIuiv(texture: UInt32; pname: TextureParameterName; &params: array of UInt32);
    begin
      z_TextureParameterIuiv_ovr_0(texture, pname, &params[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TextureParameterIuiv(texture: UInt32; pname: TextureParameterName; var &params: UInt32);
    begin
      z_TextureParameterIuiv_ovr_0(texture, pname, &params);
    end;
    public z_TextureParameterIuiv_ovr_2 := GetFuncOrNil&<procedure(texture: UInt32; pname: TextureParameterName; &params: IntPtr)>(z_TextureParameterIuiv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TextureParameterIuiv(texture: UInt32; pname: TextureParameterName; &params: IntPtr);
    begin
      z_TextureParameterIuiv_ovr_2(texture, pname, &params);
    end;
    
    // added in gl4.5
    public z_TextureParameteriv_adr := GetFuncAdr('glTextureParameteriv');
    public z_TextureParameteriv_ovr_0 := GetFuncOrNil&<procedure(texture: UInt32; pname: TextureParameterName; var param: Int32)>(z_TextureParameteriv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TextureParameteriv(texture: UInt32; pname: TextureParameterName; param: array of Int32);
    begin
      z_TextureParameteriv_ovr_0(texture, pname, param[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TextureParameteriv(texture: UInt32; pname: TextureParameterName; var param: Int32);
    begin
      z_TextureParameteriv_ovr_0(texture, pname, param);
    end;
    public z_TextureParameteriv_ovr_2 := GetFuncOrNil&<procedure(texture: UInt32; pname: TextureParameterName; param: IntPtr)>(z_TextureParameteriv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TextureParameteriv(texture: UInt32; pname: TextureParameterName; param: IntPtr);
    begin
      z_TextureParameteriv_ovr_2(texture, pname, param);
    end;
    
    // added in gl4.5
    public z_TextureStorage1D_adr := GetFuncAdr('glTextureStorage1D');
    public z_TextureStorage1D_ovr_0 := GetFuncOrNil&<procedure(texture: TextureName; levels: Int32; _internalformat: InternalFormat; width: Int32)>(z_TextureStorage1D_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TextureStorage1D(texture: TextureName; levels: Int32; _internalformat: InternalFormat; width: Int32);
    begin
      z_TextureStorage1D_ovr_0(texture, levels, _internalformat, width);
    end;
    
    // added in gl4.5
    public z_TextureStorage2D_adr := GetFuncAdr('glTextureStorage2D');
    public z_TextureStorage2D_ovr_0 := GetFuncOrNil&<procedure(texture: TextureName; levels: Int32; _internalformat: InternalFormat; width: Int32; height: Int32)>(z_TextureStorage2D_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TextureStorage2D(texture: TextureName; levels: Int32; _internalformat: InternalFormat; width: Int32; height: Int32);
    begin
      z_TextureStorage2D_ovr_0(texture, levels, _internalformat, width, height);
    end;
    
    // added in gl4.5
    public z_TextureStorage2DMultisample_adr := GetFuncAdr('glTextureStorage2DMultisample');
    public z_TextureStorage2DMultisample_ovr_0 := GetFuncOrNil&<procedure(texture: TextureName; samples: Int32; _internalformat: InternalFormat; width: Int32; height: Int32; fixedsamplelocations: boolean)>(z_TextureStorage2DMultisample_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TextureStorage2DMultisample(texture: TextureName; samples: Int32; _internalformat: InternalFormat; width: Int32; height: Int32; fixedsamplelocations: boolean);
    begin
      z_TextureStorage2DMultisample_ovr_0(texture, samples, _internalformat, width, height, fixedsamplelocations);
    end;
    
    // added in gl4.5
    public z_TextureStorage3D_adr := GetFuncAdr('glTextureStorage3D');
    public z_TextureStorage3D_ovr_0 := GetFuncOrNil&<procedure(texture: TextureName; levels: Int32; _internalformat: InternalFormat; width: Int32; height: Int32; depth: Int32)>(z_TextureStorage3D_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TextureStorage3D(texture: TextureName; levels: Int32; _internalformat: InternalFormat; width: Int32; height: Int32; depth: Int32);
    begin
      z_TextureStorage3D_ovr_0(texture, levels, _internalformat, width, height, depth);
    end;
    
    // added in gl4.5
    public z_TextureStorage3DMultisample_adr := GetFuncAdr('glTextureStorage3DMultisample');
    public z_TextureStorage3DMultisample_ovr_0 := GetFuncOrNil&<procedure(texture: TextureName; samples: Int32; _internalformat: InternalFormat; width: Int32; height: Int32; depth: Int32; fixedsamplelocations: boolean)>(z_TextureStorage3DMultisample_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TextureStorage3DMultisample(texture: TextureName; samples: Int32; _internalformat: InternalFormat; width: Int32; height: Int32; depth: Int32; fixedsamplelocations: boolean);
    begin
      z_TextureStorage3DMultisample_ovr_0(texture, samples, _internalformat, width, height, depth, fixedsamplelocations);
    end;
    
    // added in gl4.5
    public z_TextureSubImage1D_adr := GetFuncAdr('glTextureSubImage1D');
    public z_TextureSubImage1D_ovr_0 := GetFuncOrNil&<procedure(texture: UInt32; level: Int32; xoffset: Int32; width: Int32; format: PixelFormat; &type: PixelType; pixels: IntPtr)>(z_TextureSubImage1D_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TextureSubImage1D(texture: UInt32; level: Int32; xoffset: Int32; width: Int32; format: PixelFormat; &type: PixelType; pixels: IntPtr);
    begin
      z_TextureSubImage1D_ovr_0(texture, level, xoffset, width, format, &type, pixels);
    end;
    
    // added in gl4.5
    public z_TextureSubImage2D_adr := GetFuncAdr('glTextureSubImage2D');
    public z_TextureSubImage2D_ovr_0 := GetFuncOrNil&<procedure(texture: UInt32; level: Int32; xoffset: Int32; yoffset: Int32; width: Int32; height: Int32; format: PixelFormat; &type: PixelType; pixels: IntPtr)>(z_TextureSubImage2D_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TextureSubImage2D(texture: UInt32; level: Int32; xoffset: Int32; yoffset: Int32; width: Int32; height: Int32; format: PixelFormat; &type: PixelType; pixels: IntPtr);
    begin
      z_TextureSubImage2D_ovr_0(texture, level, xoffset, yoffset, width, height, format, &type, pixels);
    end;
    
    // added in gl4.5
    public z_TextureSubImage3D_adr := GetFuncAdr('glTextureSubImage3D');
    public z_TextureSubImage3D_ovr_0 := GetFuncOrNil&<procedure(texture: UInt32; level: Int32; xoffset: Int32; yoffset: Int32; zoffset: Int32; width: Int32; height: Int32; depth: Int32; format: PixelFormat; &type: PixelType; pixels: IntPtr)>(z_TextureSubImage3D_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TextureSubImage3D(texture: UInt32; level: Int32; xoffset: Int32; yoffset: Int32; zoffset: Int32; width: Int32; height: Int32; depth: Int32; format: PixelFormat; &type: PixelType; pixels: IntPtr);
    begin
      z_TextureSubImage3D_ovr_0(texture, level, xoffset, yoffset, zoffset, width, height, depth, format, &type, pixels);
    end;
    
    // added in gl4.3
    public z_TextureView_adr := GetFuncAdr('glTextureView');
    public z_TextureView_ovr_0 := GetFuncOrNil&<procedure(texture: TextureName; target: TextureTarget; origtexture: TextureName; _internalformat: InternalFormat; minlevel: UInt32; numlevels: UInt32; minlayer: UInt32; numlayers: UInt32)>(z_TextureView_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TextureView(texture: TextureName; target: TextureTarget; origtexture: TextureName; _internalformat: InternalFormat; minlevel: UInt32; numlevels: UInt32; minlayer: UInt32; numlayers: UInt32);
    begin
      z_TextureView_ovr_0(texture, target, origtexture, _internalformat, minlevel, numlevels, minlayer, numlayers);
    end;
    
    // added in gl4.5
    public z_TransformFeedbackBufferBase_adr := GetFuncAdr('glTransformFeedbackBufferBase');
    public z_TransformFeedbackBufferBase_ovr_0 := GetFuncOrNil&<procedure(xfb: TransformFeedbackName; index: UInt32; buffer: BufferName)>(z_TransformFeedbackBufferBase_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TransformFeedbackBufferBase(xfb: TransformFeedbackName; index: UInt32; buffer: BufferName);
    begin
      z_TransformFeedbackBufferBase_ovr_0(xfb, index, buffer);
    end;
    
    // added in gl4.5
    public z_TransformFeedbackBufferRange_adr := GetFuncAdr('glTransformFeedbackBufferRange');
    public z_TransformFeedbackBufferRange_ovr_0 := GetFuncOrNil&<procedure(xfb: TransformFeedbackName; index: UInt32; buffer: BufferName; offset: IntPtr; size: IntPtr)>(z_TransformFeedbackBufferRange_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TransformFeedbackBufferRange(xfb: TransformFeedbackName; index: UInt32; buffer: BufferName; offset: IntPtr; size: IntPtr);
    begin
      z_TransformFeedbackBufferRange_ovr_0(xfb, index, buffer, offset, size);
    end;
    
    // added in gl3.0
    public z_TransformFeedbackVaryings_adr := GetFuncAdr('glTransformFeedbackVaryings');
    public z_TransformFeedbackVaryings_ovr_0 := GetFuncOrNil&<procedure(&program: UInt32; count: Int32; var varyings: IntPtr; bufferMode: TransformFeedbackBufferMode)>(z_TransformFeedbackVaryings_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TransformFeedbackVaryings(&program: UInt32; count: Int32; varyings: array of string; bufferMode: TransformFeedbackBufferMode);
    begin
      var par_3_str_ptr := varyings.ConvertAll(arr_el1->Marshal.StringToHGlobalAnsi(arr_el1));
      z_TransformFeedbackVaryings_ovr_0(&program, count, par_3_str_ptr[0], bufferMode);
      foreach var arr_el1 in par_3_str_ptr do Marshal.FreeHGlobal(arr_el1);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TransformFeedbackVaryings(&program: UInt32; count: Int32; varyings: array of IntPtr; bufferMode: TransformFeedbackBufferMode);
    begin
      z_TransformFeedbackVaryings_ovr_0(&program, count, varyings[0], bufferMode);
    end;
    public z_TransformFeedbackVaryings_ovr_2 := GetFuncOrNil&<procedure(&program: UInt32; count: Int32; varyings: IntPtr; bufferMode: TransformFeedbackBufferMode)>(z_TransformFeedbackVaryings_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TransformFeedbackVaryings(&program: UInt32; count: Int32; varyings: IntPtr; bufferMode: TransformFeedbackBufferMode);
    begin
      z_TransformFeedbackVaryings_ovr_2(&program, count, varyings, bufferMode);
    end;
    
    // added in gl4.0
    public z_Uniform1d_adr := GetFuncAdr('glUniform1d');
    public z_Uniform1d_ovr_0 := GetFuncOrNil&<procedure(location: Int32; x: real)>(z_Uniform1d_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Uniform1d(location: Int32; x: real);
    begin
      z_Uniform1d_ovr_0(location, x);
    end;
    
    // added in gl4.0
    public z_Uniform1dv_adr := GetFuncAdr('glUniform1dv');
    public z_Uniform1dv_ovr_0 := GetFuncOrNil&<procedure(location: Int32; count: Int32; var value: real)>(z_Uniform1dv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Uniform1dv(location: Int32; count: Int32; value: array of real);
    begin
      z_Uniform1dv_ovr_0(location, count, value[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Uniform1dv(location: Int32; count: Int32; var value: real);
    begin
      z_Uniform1dv_ovr_0(location, count, value);
    end;
    public z_Uniform1dv_ovr_2 := GetFuncOrNil&<procedure(location: Int32; count: Int32; value: IntPtr)>(z_Uniform1dv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Uniform1dv(location: Int32; count: Int32; value: IntPtr);
    begin
      z_Uniform1dv_ovr_2(location, count, value);
    end;
    
    // added in gl2.0
    public z_Uniform1f_adr := GetFuncAdr('glUniform1f');
    public z_Uniform1f_ovr_0 := GetFuncOrNil&<procedure(location: Int32; v0: single)>(z_Uniform1f_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Uniform1f(location: Int32; v0: single);
    begin
      z_Uniform1f_ovr_0(location, v0);
    end;
    
    // added in gl2.0
    public z_Uniform1fv_adr := GetFuncAdr('glUniform1fv');
    public z_Uniform1fv_ovr_0 := GetFuncOrNil&<procedure(location: Int32; count: Int32; var value: single)>(z_Uniform1fv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Uniform1fv(location: Int32; count: Int32; value: array of single);
    begin
      z_Uniform1fv_ovr_0(location, count, value[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Uniform1fv(location: Int32; count: Int32; var value: single);
    begin
      z_Uniform1fv_ovr_0(location, count, value);
    end;
    public z_Uniform1fv_ovr_2 := GetFuncOrNil&<procedure(location: Int32; count: Int32; value: IntPtr)>(z_Uniform1fv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Uniform1fv(location: Int32; count: Int32; value: IntPtr);
    begin
      z_Uniform1fv_ovr_2(location, count, value);
    end;
    
    // added in gl2.0
    public z_Uniform1i_adr := GetFuncAdr('glUniform1i');
    public z_Uniform1i_ovr_0 := GetFuncOrNil&<procedure(location: Int32; v0: Int32)>(z_Uniform1i_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Uniform1i(location: Int32; v0: Int32);
    begin
      z_Uniform1i_ovr_0(location, v0);
    end;
    
    // added in gl2.0
    public z_Uniform1iv_adr := GetFuncAdr('glUniform1iv');
    public z_Uniform1iv_ovr_0 := GetFuncOrNil&<procedure(location: Int32; count: Int32; var value: Int32)>(z_Uniform1iv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Uniform1iv(location: Int32; count: Int32; value: array of Int32);
    begin
      z_Uniform1iv_ovr_0(location, count, value[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Uniform1iv(location: Int32; count: Int32; var value: Int32);
    begin
      z_Uniform1iv_ovr_0(location, count, value);
    end;
    public z_Uniform1iv_ovr_2 := GetFuncOrNil&<procedure(location: Int32; count: Int32; value: IntPtr)>(z_Uniform1iv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Uniform1iv(location: Int32; count: Int32; value: IntPtr);
    begin
      z_Uniform1iv_ovr_2(location, count, value);
    end;
    
    // added in gl3.0
    public z_Uniform1ui_adr := GetFuncAdr('glUniform1ui');
    public z_Uniform1ui_ovr_0 := GetFuncOrNil&<procedure(location: Int32; v0: UInt32)>(z_Uniform1ui_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Uniform1ui(location: Int32; v0: UInt32);
    begin
      z_Uniform1ui_ovr_0(location, v0);
    end;
    
    // added in gl3.0
    public z_Uniform1uiv_adr := GetFuncAdr('glUniform1uiv');
    public z_Uniform1uiv_ovr_0 := GetFuncOrNil&<procedure(location: Int32; count: Int32; var value: UInt32)>(z_Uniform1uiv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Uniform1uiv(location: Int32; count: Int32; value: array of UInt32);
    begin
      z_Uniform1uiv_ovr_0(location, count, value[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Uniform1uiv(location: Int32; count: Int32; var value: UInt32);
    begin
      z_Uniform1uiv_ovr_0(location, count, value);
    end;
    public z_Uniform1uiv_ovr_2 := GetFuncOrNil&<procedure(location: Int32; count: Int32; value: IntPtr)>(z_Uniform1uiv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Uniform1uiv(location: Int32; count: Int32; value: IntPtr);
    begin
      z_Uniform1uiv_ovr_2(location, count, value);
    end;
    
    // added in gl4.0
    public z_Uniform2d_adr := GetFuncAdr('glUniform2d');
    public z_Uniform2d_ovr_0 := GetFuncOrNil&<procedure(location: Int32; x: real; y: real)>(z_Uniform2d_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Uniform2d(location: Int32; x: real; y: real);
    begin
      z_Uniform2d_ovr_0(location, x, y);
    end;
    
    // added in gl4.0
    public z_Uniform2dv_adr := GetFuncAdr('glUniform2dv');
    public z_Uniform2dv_ovr_0 := GetFuncOrNil&<procedure(location: Int32; count: Int32; var value: real)>(z_Uniform2dv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Uniform2dv(location: Int32; count: Int32; value: array of real);
    begin
      z_Uniform2dv_ovr_0(location, count, value[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Uniform2dv(location: Int32; count: Int32; var value: real);
    begin
      z_Uniform2dv_ovr_0(location, count, value);
    end;
    public z_Uniform2dv_ovr_2 := GetFuncOrNil&<procedure(location: Int32; count: Int32; value: IntPtr)>(z_Uniform2dv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Uniform2dv(location: Int32; count: Int32; value: IntPtr);
    begin
      z_Uniform2dv_ovr_2(location, count, value);
    end;
    
    // added in gl2.0
    public z_Uniform2f_adr := GetFuncAdr('glUniform2f');
    public z_Uniform2f_ovr_0 := GetFuncOrNil&<procedure(location: Int32; v0: single; v1: single)>(z_Uniform2f_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Uniform2f(location: Int32; v0: single; v1: single);
    begin
      z_Uniform2f_ovr_0(location, v0, v1);
    end;
    
    // added in gl2.0
    public z_Uniform2fv_adr := GetFuncAdr('glUniform2fv');
    public z_Uniform2fv_ovr_0 := GetFuncOrNil&<procedure(location: Int32; count: Int32; var value: single)>(z_Uniform2fv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Uniform2fv(location: Int32; count: Int32; value: array of single);
    begin
      z_Uniform2fv_ovr_0(location, count, value[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Uniform2fv(location: Int32; count: Int32; var value: single);
    begin
      z_Uniform2fv_ovr_0(location, count, value);
    end;
    public z_Uniform2fv_ovr_2 := GetFuncOrNil&<procedure(location: Int32; count: Int32; value: IntPtr)>(z_Uniform2fv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Uniform2fv(location: Int32; count: Int32; value: IntPtr);
    begin
      z_Uniform2fv_ovr_2(location, count, value);
    end;
    
    // added in gl2.0
    public z_Uniform2i_adr := GetFuncAdr('glUniform2i');
    public z_Uniform2i_ovr_0 := GetFuncOrNil&<procedure(location: Int32; v0: Int32; v1: Int32)>(z_Uniform2i_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Uniform2i(location: Int32; v0: Int32; v1: Int32);
    begin
      z_Uniform2i_ovr_0(location, v0, v1);
    end;
    
    // added in gl2.0
    public z_Uniform2iv_adr := GetFuncAdr('glUniform2iv');
    public z_Uniform2iv_ovr_0 := GetFuncOrNil&<procedure(location: Int32; count: Int32; var value: Int32)>(z_Uniform2iv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Uniform2iv(location: Int32; count: Int32; value: array of Int32);
    begin
      z_Uniform2iv_ovr_0(location, count, value[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Uniform2iv(location: Int32; count: Int32; var value: Int32);
    begin
      z_Uniform2iv_ovr_0(location, count, value);
    end;
    public z_Uniform2iv_ovr_2 := GetFuncOrNil&<procedure(location: Int32; count: Int32; value: IntPtr)>(z_Uniform2iv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Uniform2iv(location: Int32; count: Int32; value: IntPtr);
    begin
      z_Uniform2iv_ovr_2(location, count, value);
    end;
    
    // added in gl3.0
    public z_Uniform2ui_adr := GetFuncAdr('glUniform2ui');
    public z_Uniform2ui_ovr_0 := GetFuncOrNil&<procedure(location: Int32; v0: UInt32; v1: UInt32)>(z_Uniform2ui_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Uniform2ui(location: Int32; v0: UInt32; v1: UInt32);
    begin
      z_Uniform2ui_ovr_0(location, v0, v1);
    end;
    
    // added in gl3.0
    public z_Uniform2uiv_adr := GetFuncAdr('glUniform2uiv');
    public z_Uniform2uiv_ovr_0 := GetFuncOrNil&<procedure(location: Int32; count: Int32; var value: UInt32)>(z_Uniform2uiv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Uniform2uiv(location: Int32; count: Int32; value: array of UInt32);
    begin
      z_Uniform2uiv_ovr_0(location, count, value[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Uniform2uiv(location: Int32; count: Int32; var value: UInt32);
    begin
      z_Uniform2uiv_ovr_0(location, count, value);
    end;
    public z_Uniform2uiv_ovr_2 := GetFuncOrNil&<procedure(location: Int32; count: Int32; value: IntPtr)>(z_Uniform2uiv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Uniform2uiv(location: Int32; count: Int32; value: IntPtr);
    begin
      z_Uniform2uiv_ovr_2(location, count, value);
    end;
    
    // added in gl4.0
    public z_Uniform3d_adr := GetFuncAdr('glUniform3d');
    public z_Uniform3d_ovr_0 := GetFuncOrNil&<procedure(location: Int32; x: real; y: real; z: real)>(z_Uniform3d_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Uniform3d(location: Int32; x: real; y: real; z: real);
    begin
      z_Uniform3d_ovr_0(location, x, y, z);
    end;
    
    // added in gl4.0
    public z_Uniform3dv_adr := GetFuncAdr('glUniform3dv');
    public z_Uniform3dv_ovr_0 := GetFuncOrNil&<procedure(location: Int32; count: Int32; var value: real)>(z_Uniform3dv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Uniform3dv(location: Int32; count: Int32; value: array of real);
    begin
      z_Uniform3dv_ovr_0(location, count, value[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Uniform3dv(location: Int32; count: Int32; var value: real);
    begin
      z_Uniform3dv_ovr_0(location, count, value);
    end;
    public z_Uniform3dv_ovr_2 := GetFuncOrNil&<procedure(location: Int32; count: Int32; value: IntPtr)>(z_Uniform3dv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Uniform3dv(location: Int32; count: Int32; value: IntPtr);
    begin
      z_Uniform3dv_ovr_2(location, count, value);
    end;
    
    // added in gl2.0
    public z_Uniform3f_adr := GetFuncAdr('glUniform3f');
    public z_Uniform3f_ovr_0 := GetFuncOrNil&<procedure(location: Int32; v0: single; v1: single; v2: single)>(z_Uniform3f_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Uniform3f(location: Int32; v0: single; v1: single; v2: single);
    begin
      z_Uniform3f_ovr_0(location, v0, v1, v2);
    end;
    
    // added in gl2.0
    public z_Uniform3fv_adr := GetFuncAdr('glUniform3fv');
    public z_Uniform3fv_ovr_0 := GetFuncOrNil&<procedure(location: Int32; count: Int32; var value: single)>(z_Uniform3fv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Uniform3fv(location: Int32; count: Int32; value: array of single);
    begin
      z_Uniform3fv_ovr_0(location, count, value[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Uniform3fv(location: Int32; count: Int32; var value: single);
    begin
      z_Uniform3fv_ovr_0(location, count, value);
    end;
    public z_Uniform3fv_ovr_2 := GetFuncOrNil&<procedure(location: Int32; count: Int32; value: IntPtr)>(z_Uniform3fv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Uniform3fv(location: Int32; count: Int32; value: IntPtr);
    begin
      z_Uniform3fv_ovr_2(location, count, value);
    end;
    
    // added in gl2.0
    public z_Uniform3i_adr := GetFuncAdr('glUniform3i');
    public z_Uniform3i_ovr_0 := GetFuncOrNil&<procedure(location: Int32; v0: Int32; v1: Int32; v2: Int32)>(z_Uniform3i_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Uniform3i(location: Int32; v0: Int32; v1: Int32; v2: Int32);
    begin
      z_Uniform3i_ovr_0(location, v0, v1, v2);
    end;
    
    // added in gl2.0
    public z_Uniform3iv_adr := GetFuncAdr('glUniform3iv');
    public z_Uniform3iv_ovr_0 := GetFuncOrNil&<procedure(location: Int32; count: Int32; var value: Int32)>(z_Uniform3iv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Uniform3iv(location: Int32; count: Int32; value: array of Int32);
    begin
      z_Uniform3iv_ovr_0(location, count, value[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Uniform3iv(location: Int32; count: Int32; var value: Int32);
    begin
      z_Uniform3iv_ovr_0(location, count, value);
    end;
    public z_Uniform3iv_ovr_2 := GetFuncOrNil&<procedure(location: Int32; count: Int32; value: IntPtr)>(z_Uniform3iv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Uniform3iv(location: Int32; count: Int32; value: IntPtr);
    begin
      z_Uniform3iv_ovr_2(location, count, value);
    end;
    
    // added in gl3.0
    public z_Uniform3ui_adr := GetFuncAdr('glUniform3ui');
    public z_Uniform3ui_ovr_0 := GetFuncOrNil&<procedure(location: Int32; v0: UInt32; v1: UInt32; v2: UInt32)>(z_Uniform3ui_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Uniform3ui(location: Int32; v0: UInt32; v1: UInt32; v2: UInt32);
    begin
      z_Uniform3ui_ovr_0(location, v0, v1, v2);
    end;
    
    // added in gl3.0
    public z_Uniform3uiv_adr := GetFuncAdr('glUniform3uiv');
    public z_Uniform3uiv_ovr_0 := GetFuncOrNil&<procedure(location: Int32; count: Int32; var value: UInt32)>(z_Uniform3uiv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Uniform3uiv(location: Int32; count: Int32; value: array of UInt32);
    begin
      z_Uniform3uiv_ovr_0(location, count, value[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Uniform3uiv(location: Int32; count: Int32; var value: UInt32);
    begin
      z_Uniform3uiv_ovr_0(location, count, value);
    end;
    public z_Uniform3uiv_ovr_2 := GetFuncOrNil&<procedure(location: Int32; count: Int32; value: IntPtr)>(z_Uniform3uiv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Uniform3uiv(location: Int32; count: Int32; value: IntPtr);
    begin
      z_Uniform3uiv_ovr_2(location, count, value);
    end;
    
    // added in gl4.0
    public z_Uniform4d_adr := GetFuncAdr('glUniform4d');
    public z_Uniform4d_ovr_0 := GetFuncOrNil&<procedure(location: Int32; x: real; y: real; z: real; w: real)>(z_Uniform4d_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Uniform4d(location: Int32; x: real; y: real; z: real; w: real);
    begin
      z_Uniform4d_ovr_0(location, x, y, z, w);
    end;
    
    // added in gl4.0
    public z_Uniform4dv_adr := GetFuncAdr('glUniform4dv');
    public z_Uniform4dv_ovr_0 := GetFuncOrNil&<procedure(location: Int32; count: Int32; var value: real)>(z_Uniform4dv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Uniform4dv(location: Int32; count: Int32; value: array of real);
    begin
      z_Uniform4dv_ovr_0(location, count, value[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Uniform4dv(location: Int32; count: Int32; var value: real);
    begin
      z_Uniform4dv_ovr_0(location, count, value);
    end;
    public z_Uniform4dv_ovr_2 := GetFuncOrNil&<procedure(location: Int32; count: Int32; value: IntPtr)>(z_Uniform4dv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Uniform4dv(location: Int32; count: Int32; value: IntPtr);
    begin
      z_Uniform4dv_ovr_2(location, count, value);
    end;
    
    // added in gl2.0
    public z_Uniform4f_adr := GetFuncAdr('glUniform4f');
    public z_Uniform4f_ovr_0 := GetFuncOrNil&<procedure(location: Int32; v0: single; v1: single; v2: single; v3: single)>(z_Uniform4f_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Uniform4f(location: Int32; v0: single; v1: single; v2: single; v3: single);
    begin
      z_Uniform4f_ovr_0(location, v0, v1, v2, v3);
    end;
    
    // added in gl2.0
    public z_Uniform4fv_adr := GetFuncAdr('glUniform4fv');
    public z_Uniform4fv_ovr_0 := GetFuncOrNil&<procedure(location: Int32; count: Int32; var value: single)>(z_Uniform4fv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Uniform4fv(location: Int32; count: Int32; value: array of single);
    begin
      z_Uniform4fv_ovr_0(location, count, value[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Uniform4fv(location: Int32; count: Int32; var value: single);
    begin
      z_Uniform4fv_ovr_0(location, count, value);
    end;
    public z_Uniform4fv_ovr_2 := GetFuncOrNil&<procedure(location: Int32; count: Int32; value: IntPtr)>(z_Uniform4fv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Uniform4fv(location: Int32; count: Int32; value: IntPtr);
    begin
      z_Uniform4fv_ovr_2(location, count, value);
    end;
    
    // added in gl2.0
    public z_Uniform4i_adr := GetFuncAdr('glUniform4i');
    public z_Uniform4i_ovr_0 := GetFuncOrNil&<procedure(location: Int32; v0: Int32; v1: Int32; v2: Int32; v3: Int32)>(z_Uniform4i_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Uniform4i(location: Int32; v0: Int32; v1: Int32; v2: Int32; v3: Int32);
    begin
      z_Uniform4i_ovr_0(location, v0, v1, v2, v3);
    end;
    
    // added in gl2.0
    public z_Uniform4iv_adr := GetFuncAdr('glUniform4iv');
    public z_Uniform4iv_ovr_0 := GetFuncOrNil&<procedure(location: Int32; count: Int32; var value: Int32)>(z_Uniform4iv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Uniform4iv(location: Int32; count: Int32; value: array of Int32);
    begin
      z_Uniform4iv_ovr_0(location, count, value[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Uniform4iv(location: Int32; count: Int32; var value: Int32);
    begin
      z_Uniform4iv_ovr_0(location, count, value);
    end;
    public z_Uniform4iv_ovr_2 := GetFuncOrNil&<procedure(location: Int32; count: Int32; value: IntPtr)>(z_Uniform4iv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Uniform4iv(location: Int32; count: Int32; value: IntPtr);
    begin
      z_Uniform4iv_ovr_2(location, count, value);
    end;
    
    // added in gl3.0
    public z_Uniform4ui_adr := GetFuncAdr('glUniform4ui');
    public z_Uniform4ui_ovr_0 := GetFuncOrNil&<procedure(location: Int32; v0: UInt32; v1: UInt32; v2: UInt32; v3: UInt32)>(z_Uniform4ui_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Uniform4ui(location: Int32; v0: UInt32; v1: UInt32; v2: UInt32; v3: UInt32);
    begin
      z_Uniform4ui_ovr_0(location, v0, v1, v2, v3);
    end;
    
    // added in gl3.0
    public z_Uniform4uiv_adr := GetFuncAdr('glUniform4uiv');
    public z_Uniform4uiv_ovr_0 := GetFuncOrNil&<procedure(location: Int32; count: Int32; var value: UInt32)>(z_Uniform4uiv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Uniform4uiv(location: Int32; count: Int32; value: array of UInt32);
    begin
      z_Uniform4uiv_ovr_0(location, count, value[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Uniform4uiv(location: Int32; count: Int32; var value: UInt32);
    begin
      z_Uniform4uiv_ovr_0(location, count, value);
    end;
    public z_Uniform4uiv_ovr_2 := GetFuncOrNil&<procedure(location: Int32; count: Int32; value: IntPtr)>(z_Uniform4uiv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Uniform4uiv(location: Int32; count: Int32; value: IntPtr);
    begin
      z_Uniform4uiv_ovr_2(location, count, value);
    end;
    
    // added in gl3.1
    public z_UniformBlockBinding_adr := GetFuncAdr('glUniformBlockBinding');
    public z_UniformBlockBinding_ovr_0 := GetFuncOrNil&<procedure(&program: ProgramName; uniformBlockIndex: UInt32; uniformBlockBinding: UInt32)>(z_UniformBlockBinding_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure UniformBlockBinding(&program: ProgramName; uniformBlockIndex: UInt32; uniformBlockBinding: UInt32);
    begin
      z_UniformBlockBinding_ovr_0(&program, uniformBlockIndex, uniformBlockBinding);
    end;
    
    // added in gl4.0
    public z_UniformMatrix2dv_adr := GetFuncAdr('glUniformMatrix2dv');
    public z_UniformMatrix2dv_ovr_0 := GetFuncOrNil&<procedure(location: Int32; count: Int32; transpose: boolean; var value: real)>(z_UniformMatrix2dv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure UniformMatrix2dv(location: Int32; count: Int32; transpose: boolean; value: array of real);
    begin
      z_UniformMatrix2dv_ovr_0(location, count, transpose, value[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure UniformMatrix2dv(location: Int32; count: Int32; transpose: boolean; var value: real);
    begin
      z_UniformMatrix2dv_ovr_0(location, count, transpose, value);
    end;
    public z_UniformMatrix2dv_ovr_2 := GetFuncOrNil&<procedure(location: Int32; count: Int32; transpose: boolean; value: IntPtr)>(z_UniformMatrix2dv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure UniformMatrix2dv(location: Int32; count: Int32; transpose: boolean; value: IntPtr);
    begin
      z_UniformMatrix2dv_ovr_2(location, count, transpose, value);
    end;
    
    // added in gl2.0
    public z_UniformMatrix2fv_adr := GetFuncAdr('glUniformMatrix2fv');
    public z_UniformMatrix2fv_ovr_0 := GetFuncOrNil&<procedure(location: Int32; count: Int32; transpose: boolean; var value: single)>(z_UniformMatrix2fv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure UniformMatrix2fv(location: Int32; count: Int32; transpose: boolean; value: array of single);
    begin
      z_UniformMatrix2fv_ovr_0(location, count, transpose, value[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure UniformMatrix2fv(location: Int32; count: Int32; transpose: boolean; var value: single);
    begin
      z_UniformMatrix2fv_ovr_0(location, count, transpose, value);
    end;
    public z_UniformMatrix2fv_ovr_2 := GetFuncOrNil&<procedure(location: Int32; count: Int32; transpose: boolean; value: IntPtr)>(z_UniformMatrix2fv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure UniformMatrix2fv(location: Int32; count: Int32; transpose: boolean; value: IntPtr);
    begin
      z_UniformMatrix2fv_ovr_2(location, count, transpose, value);
    end;
    
    // added in gl4.0
    public z_UniformMatrix2x3dv_adr := GetFuncAdr('glUniformMatrix2x3dv');
    public z_UniformMatrix2x3dv_ovr_0 := GetFuncOrNil&<procedure(location: Int32; count: Int32; transpose: boolean; var value: real)>(z_UniformMatrix2x3dv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure UniformMatrix2x3dv(location: Int32; count: Int32; transpose: boolean; value: array of real);
    begin
      z_UniformMatrix2x3dv_ovr_0(location, count, transpose, value[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure UniformMatrix2x3dv(location: Int32; count: Int32; transpose: boolean; var value: real);
    begin
      z_UniformMatrix2x3dv_ovr_0(location, count, transpose, value);
    end;
    public z_UniformMatrix2x3dv_ovr_2 := GetFuncOrNil&<procedure(location: Int32; count: Int32; transpose: boolean; value: IntPtr)>(z_UniformMatrix2x3dv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure UniformMatrix2x3dv(location: Int32; count: Int32; transpose: boolean; value: IntPtr);
    begin
      z_UniformMatrix2x3dv_ovr_2(location, count, transpose, value);
    end;
    
    // added in gl2.1
    public z_UniformMatrix2x3fv_adr := GetFuncAdr('glUniformMatrix2x3fv');
    public z_UniformMatrix2x3fv_ovr_0 := GetFuncOrNil&<procedure(location: Int32; count: Int32; transpose: boolean; var value: single)>(z_UniformMatrix2x3fv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure UniformMatrix2x3fv(location: Int32; count: Int32; transpose: boolean; value: array of single);
    begin
      z_UniformMatrix2x3fv_ovr_0(location, count, transpose, value[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure UniformMatrix2x3fv(location: Int32; count: Int32; transpose: boolean; var value: single);
    begin
      z_UniformMatrix2x3fv_ovr_0(location, count, transpose, value);
    end;
    public z_UniformMatrix2x3fv_ovr_2 := GetFuncOrNil&<procedure(location: Int32; count: Int32; transpose: boolean; value: IntPtr)>(z_UniformMatrix2x3fv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure UniformMatrix2x3fv(location: Int32; count: Int32; transpose: boolean; value: IntPtr);
    begin
      z_UniformMatrix2x3fv_ovr_2(location, count, transpose, value);
    end;
    
    // added in gl4.0
    public z_UniformMatrix2x4dv_adr := GetFuncAdr('glUniformMatrix2x4dv');
    public z_UniformMatrix2x4dv_ovr_0 := GetFuncOrNil&<procedure(location: Int32; count: Int32; transpose: boolean; var value: real)>(z_UniformMatrix2x4dv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure UniformMatrix2x4dv(location: Int32; count: Int32; transpose: boolean; value: array of real);
    begin
      z_UniformMatrix2x4dv_ovr_0(location, count, transpose, value[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure UniformMatrix2x4dv(location: Int32; count: Int32; transpose: boolean; var value: real);
    begin
      z_UniformMatrix2x4dv_ovr_0(location, count, transpose, value);
    end;
    public z_UniformMatrix2x4dv_ovr_2 := GetFuncOrNil&<procedure(location: Int32; count: Int32; transpose: boolean; value: IntPtr)>(z_UniformMatrix2x4dv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure UniformMatrix2x4dv(location: Int32; count: Int32; transpose: boolean; value: IntPtr);
    begin
      z_UniformMatrix2x4dv_ovr_2(location, count, transpose, value);
    end;
    
    // added in gl2.1
    public z_UniformMatrix2x4fv_adr := GetFuncAdr('glUniformMatrix2x4fv');
    public z_UniformMatrix2x4fv_ovr_0 := GetFuncOrNil&<procedure(location: Int32; count: Int32; transpose: boolean; var value: single)>(z_UniformMatrix2x4fv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure UniformMatrix2x4fv(location: Int32; count: Int32; transpose: boolean; value: array of single);
    begin
      z_UniformMatrix2x4fv_ovr_0(location, count, transpose, value[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure UniformMatrix2x4fv(location: Int32; count: Int32; transpose: boolean; var value: single);
    begin
      z_UniformMatrix2x4fv_ovr_0(location, count, transpose, value);
    end;
    public z_UniformMatrix2x4fv_ovr_2 := GetFuncOrNil&<procedure(location: Int32; count: Int32; transpose: boolean; value: IntPtr)>(z_UniformMatrix2x4fv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure UniformMatrix2x4fv(location: Int32; count: Int32; transpose: boolean; value: IntPtr);
    begin
      z_UniformMatrix2x4fv_ovr_2(location, count, transpose, value);
    end;
    
    // added in gl4.0
    public z_UniformMatrix3dv_adr := GetFuncAdr('glUniformMatrix3dv');
    public z_UniformMatrix3dv_ovr_0 := GetFuncOrNil&<procedure(location: Int32; count: Int32; transpose: boolean; var value: real)>(z_UniformMatrix3dv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure UniformMatrix3dv(location: Int32; count: Int32; transpose: boolean; value: array of real);
    begin
      z_UniformMatrix3dv_ovr_0(location, count, transpose, value[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure UniformMatrix3dv(location: Int32; count: Int32; transpose: boolean; var value: real);
    begin
      z_UniformMatrix3dv_ovr_0(location, count, transpose, value);
    end;
    public z_UniformMatrix3dv_ovr_2 := GetFuncOrNil&<procedure(location: Int32; count: Int32; transpose: boolean; value: IntPtr)>(z_UniformMatrix3dv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure UniformMatrix3dv(location: Int32; count: Int32; transpose: boolean; value: IntPtr);
    begin
      z_UniformMatrix3dv_ovr_2(location, count, transpose, value);
    end;
    
    // added in gl2.0
    public z_UniformMatrix3fv_adr := GetFuncAdr('glUniformMatrix3fv');
    public z_UniformMatrix3fv_ovr_0 := GetFuncOrNil&<procedure(location: Int32; count: Int32; transpose: boolean; var value: single)>(z_UniformMatrix3fv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure UniformMatrix3fv(location: Int32; count: Int32; transpose: boolean; value: array of single);
    begin
      z_UniformMatrix3fv_ovr_0(location, count, transpose, value[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure UniformMatrix3fv(location: Int32; count: Int32; transpose: boolean; var value: single);
    begin
      z_UniformMatrix3fv_ovr_0(location, count, transpose, value);
    end;
    public z_UniformMatrix3fv_ovr_2 := GetFuncOrNil&<procedure(location: Int32; count: Int32; transpose: boolean; value: IntPtr)>(z_UniformMatrix3fv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure UniformMatrix3fv(location: Int32; count: Int32; transpose: boolean; value: IntPtr);
    begin
      z_UniformMatrix3fv_ovr_2(location, count, transpose, value);
    end;
    
    // added in gl4.0
    public z_UniformMatrix3x2dv_adr := GetFuncAdr('glUniformMatrix3x2dv');
    public z_UniformMatrix3x2dv_ovr_0 := GetFuncOrNil&<procedure(location: Int32; count: Int32; transpose: boolean; var value: real)>(z_UniformMatrix3x2dv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure UniformMatrix3x2dv(location: Int32; count: Int32; transpose: boolean; value: array of real);
    begin
      z_UniformMatrix3x2dv_ovr_0(location, count, transpose, value[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure UniformMatrix3x2dv(location: Int32; count: Int32; transpose: boolean; var value: real);
    begin
      z_UniformMatrix3x2dv_ovr_0(location, count, transpose, value);
    end;
    public z_UniformMatrix3x2dv_ovr_2 := GetFuncOrNil&<procedure(location: Int32; count: Int32; transpose: boolean; value: IntPtr)>(z_UniformMatrix3x2dv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure UniformMatrix3x2dv(location: Int32; count: Int32; transpose: boolean; value: IntPtr);
    begin
      z_UniformMatrix3x2dv_ovr_2(location, count, transpose, value);
    end;
    
    // added in gl2.1
    public z_UniformMatrix3x2fv_adr := GetFuncAdr('glUniformMatrix3x2fv');
    public z_UniformMatrix3x2fv_ovr_0 := GetFuncOrNil&<procedure(location: Int32; count: Int32; transpose: boolean; var value: single)>(z_UniformMatrix3x2fv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure UniformMatrix3x2fv(location: Int32; count: Int32; transpose: boolean; value: array of single);
    begin
      z_UniformMatrix3x2fv_ovr_0(location, count, transpose, value[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure UniformMatrix3x2fv(location: Int32; count: Int32; transpose: boolean; var value: single);
    begin
      z_UniformMatrix3x2fv_ovr_0(location, count, transpose, value);
    end;
    public z_UniformMatrix3x2fv_ovr_2 := GetFuncOrNil&<procedure(location: Int32; count: Int32; transpose: boolean; value: IntPtr)>(z_UniformMatrix3x2fv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure UniformMatrix3x2fv(location: Int32; count: Int32; transpose: boolean; value: IntPtr);
    begin
      z_UniformMatrix3x2fv_ovr_2(location, count, transpose, value);
    end;
    
    // added in gl4.0
    public z_UniformMatrix3x4dv_adr := GetFuncAdr('glUniformMatrix3x4dv');
    public z_UniformMatrix3x4dv_ovr_0 := GetFuncOrNil&<procedure(location: Int32; count: Int32; transpose: boolean; var value: real)>(z_UniformMatrix3x4dv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure UniformMatrix3x4dv(location: Int32; count: Int32; transpose: boolean; value: array of real);
    begin
      z_UniformMatrix3x4dv_ovr_0(location, count, transpose, value[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure UniformMatrix3x4dv(location: Int32; count: Int32; transpose: boolean; var value: real);
    begin
      z_UniformMatrix3x4dv_ovr_0(location, count, transpose, value);
    end;
    public z_UniformMatrix3x4dv_ovr_2 := GetFuncOrNil&<procedure(location: Int32; count: Int32; transpose: boolean; value: IntPtr)>(z_UniformMatrix3x4dv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure UniformMatrix3x4dv(location: Int32; count: Int32; transpose: boolean; value: IntPtr);
    begin
      z_UniformMatrix3x4dv_ovr_2(location, count, transpose, value);
    end;
    
    // added in gl2.1
    public z_UniformMatrix3x4fv_adr := GetFuncAdr('glUniformMatrix3x4fv');
    public z_UniformMatrix3x4fv_ovr_0 := GetFuncOrNil&<procedure(location: Int32; count: Int32; transpose: boolean; var value: single)>(z_UniformMatrix3x4fv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure UniformMatrix3x4fv(location: Int32; count: Int32; transpose: boolean; value: array of single);
    begin
      z_UniformMatrix3x4fv_ovr_0(location, count, transpose, value[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure UniformMatrix3x4fv(location: Int32; count: Int32; transpose: boolean; var value: single);
    begin
      z_UniformMatrix3x4fv_ovr_0(location, count, transpose, value);
    end;
    public z_UniformMatrix3x4fv_ovr_2 := GetFuncOrNil&<procedure(location: Int32; count: Int32; transpose: boolean; value: IntPtr)>(z_UniformMatrix3x4fv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure UniformMatrix3x4fv(location: Int32; count: Int32; transpose: boolean; value: IntPtr);
    begin
      z_UniformMatrix3x4fv_ovr_2(location, count, transpose, value);
    end;
    
    // added in gl4.0
    public z_UniformMatrix4dv_adr := GetFuncAdr('glUniformMatrix4dv');
    public z_UniformMatrix4dv_ovr_0 := GetFuncOrNil&<procedure(location: Int32; count: Int32; transpose: boolean; var value: real)>(z_UniformMatrix4dv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure UniformMatrix4dv(location: Int32; count: Int32; transpose: boolean; value: array of real);
    begin
      z_UniformMatrix4dv_ovr_0(location, count, transpose, value[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure UniformMatrix4dv(location: Int32; count: Int32; transpose: boolean; var value: real);
    begin
      z_UniformMatrix4dv_ovr_0(location, count, transpose, value);
    end;
    public z_UniformMatrix4dv_ovr_2 := GetFuncOrNil&<procedure(location: Int32; count: Int32; transpose: boolean; value: IntPtr)>(z_UniformMatrix4dv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure UniformMatrix4dv(location: Int32; count: Int32; transpose: boolean; value: IntPtr);
    begin
      z_UniformMatrix4dv_ovr_2(location, count, transpose, value);
    end;
    
    // added in gl2.0
    public z_UniformMatrix4fv_adr := GetFuncAdr('glUniformMatrix4fv');
    public z_UniformMatrix4fv_ovr_0 := GetFuncOrNil&<procedure(location: Int32; count: Int32; transpose: boolean; var value: single)>(z_UniformMatrix4fv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure UniformMatrix4fv(location: Int32; count: Int32; transpose: boolean; value: array of single);
    begin
      z_UniformMatrix4fv_ovr_0(location, count, transpose, value[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure UniformMatrix4fv(location: Int32; count: Int32; transpose: boolean; var value: single);
    begin
      z_UniformMatrix4fv_ovr_0(location, count, transpose, value);
    end;
    public z_UniformMatrix4fv_ovr_2 := GetFuncOrNil&<procedure(location: Int32; count: Int32; transpose: boolean; value: IntPtr)>(z_UniformMatrix4fv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure UniformMatrix4fv(location: Int32; count: Int32; transpose: boolean; value: IntPtr);
    begin
      z_UniformMatrix4fv_ovr_2(location, count, transpose, value);
    end;
    
    // added in gl4.0
    public z_UniformMatrix4x2dv_adr := GetFuncAdr('glUniformMatrix4x2dv');
    public z_UniformMatrix4x2dv_ovr_0 := GetFuncOrNil&<procedure(location: Int32; count: Int32; transpose: boolean; var value: real)>(z_UniformMatrix4x2dv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure UniformMatrix4x2dv(location: Int32; count: Int32; transpose: boolean; value: array of real);
    begin
      z_UniformMatrix4x2dv_ovr_0(location, count, transpose, value[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure UniformMatrix4x2dv(location: Int32; count: Int32; transpose: boolean; var value: real);
    begin
      z_UniformMatrix4x2dv_ovr_0(location, count, transpose, value);
    end;
    public z_UniformMatrix4x2dv_ovr_2 := GetFuncOrNil&<procedure(location: Int32; count: Int32; transpose: boolean; value: IntPtr)>(z_UniformMatrix4x2dv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure UniformMatrix4x2dv(location: Int32; count: Int32; transpose: boolean; value: IntPtr);
    begin
      z_UniformMatrix4x2dv_ovr_2(location, count, transpose, value);
    end;
    
    // added in gl2.1
    public z_UniformMatrix4x2fv_adr := GetFuncAdr('glUniformMatrix4x2fv');
    public z_UniformMatrix4x2fv_ovr_0 := GetFuncOrNil&<procedure(location: Int32; count: Int32; transpose: boolean; var value: single)>(z_UniformMatrix4x2fv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure UniformMatrix4x2fv(location: Int32; count: Int32; transpose: boolean; value: array of single);
    begin
      z_UniformMatrix4x2fv_ovr_0(location, count, transpose, value[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure UniformMatrix4x2fv(location: Int32; count: Int32; transpose: boolean; var value: single);
    begin
      z_UniformMatrix4x2fv_ovr_0(location, count, transpose, value);
    end;
    public z_UniformMatrix4x2fv_ovr_2 := GetFuncOrNil&<procedure(location: Int32; count: Int32; transpose: boolean; value: IntPtr)>(z_UniformMatrix4x2fv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure UniformMatrix4x2fv(location: Int32; count: Int32; transpose: boolean; value: IntPtr);
    begin
      z_UniformMatrix4x2fv_ovr_2(location, count, transpose, value);
    end;
    
    // added in gl4.0
    public z_UniformMatrix4x3dv_adr := GetFuncAdr('glUniformMatrix4x3dv');
    public z_UniformMatrix4x3dv_ovr_0 := GetFuncOrNil&<procedure(location: Int32; count: Int32; transpose: boolean; var value: real)>(z_UniformMatrix4x3dv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure UniformMatrix4x3dv(location: Int32; count: Int32; transpose: boolean; value: array of real);
    begin
      z_UniformMatrix4x3dv_ovr_0(location, count, transpose, value[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure UniformMatrix4x3dv(location: Int32; count: Int32; transpose: boolean; var value: real);
    begin
      z_UniformMatrix4x3dv_ovr_0(location, count, transpose, value);
    end;
    public z_UniformMatrix4x3dv_ovr_2 := GetFuncOrNil&<procedure(location: Int32; count: Int32; transpose: boolean; value: IntPtr)>(z_UniformMatrix4x3dv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure UniformMatrix4x3dv(location: Int32; count: Int32; transpose: boolean; value: IntPtr);
    begin
      z_UniformMatrix4x3dv_ovr_2(location, count, transpose, value);
    end;
    
    // added in gl2.1
    public z_UniformMatrix4x3fv_adr := GetFuncAdr('glUniformMatrix4x3fv');
    public z_UniformMatrix4x3fv_ovr_0 := GetFuncOrNil&<procedure(location: Int32; count: Int32; transpose: boolean; var value: single)>(z_UniformMatrix4x3fv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure UniformMatrix4x3fv(location: Int32; count: Int32; transpose: boolean; value: array of single);
    begin
      z_UniformMatrix4x3fv_ovr_0(location, count, transpose, value[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure UniformMatrix4x3fv(location: Int32; count: Int32; transpose: boolean; var value: single);
    begin
      z_UniformMatrix4x3fv_ovr_0(location, count, transpose, value);
    end;
    public z_UniformMatrix4x3fv_ovr_2 := GetFuncOrNil&<procedure(location: Int32; count: Int32; transpose: boolean; value: IntPtr)>(z_UniformMatrix4x3fv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure UniformMatrix4x3fv(location: Int32; count: Int32; transpose: boolean; value: IntPtr);
    begin
      z_UniformMatrix4x3fv_ovr_2(location, count, transpose, value);
    end;
    
    // added in gl4.0
    public z_UniformSubroutinesuiv_adr := GetFuncAdr('glUniformSubroutinesuiv');
    public z_UniformSubroutinesuiv_ovr_0 := GetFuncOrNil&<procedure(_shadertype: ShaderType; count: Int32; var indices: UInt32)>(z_UniformSubroutinesuiv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure UniformSubroutinesuiv(_shadertype: ShaderType; count: Int32; indices: array of UInt32);
    begin
      z_UniformSubroutinesuiv_ovr_0(_shadertype, count, indices[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure UniformSubroutinesuiv(_shadertype: ShaderType; count: Int32; var indices: UInt32);
    begin
      z_UniformSubroutinesuiv_ovr_0(_shadertype, count, indices);
    end;
    public z_UniformSubroutinesuiv_ovr_2 := GetFuncOrNil&<procedure(_shadertype: ShaderType; count: Int32; indices: IntPtr)>(z_UniformSubroutinesuiv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure UniformSubroutinesuiv(_shadertype: ShaderType; count: Int32; indices: IntPtr);
    begin
      z_UniformSubroutinesuiv_ovr_2(_shadertype, count, indices);
    end;
    
    // added in gl1.5
    public z_UnmapBuffer_adr := GetFuncAdr('glUnmapBuffer');
    public z_UnmapBuffer_ovr_0 := GetFuncOrNil&<function(target: BufferTargetARB): boolean>(z_UnmapBuffer_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function UnmapBuffer(target: BufferTargetARB): boolean;
    begin
      Result := z_UnmapBuffer_ovr_0(target);
    end;
    
    // added in gl4.5
    public z_UnmapNamedBuffer_adr := GetFuncAdr('glUnmapNamedBuffer');
    public z_UnmapNamedBuffer_ovr_0 := GetFuncOrNil&<function(buffer: BufferName): boolean>(z_UnmapNamedBuffer_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function UnmapNamedBuffer(buffer: BufferName): boolean;
    begin
      Result := z_UnmapNamedBuffer_ovr_0(buffer);
    end;
    
    // added in gl2.0
    public z_UseProgram_adr := GetFuncAdr('glUseProgram');
    public z_UseProgram_ovr_0 := GetFuncOrNil&<procedure(&program: ProgramName)>(z_UseProgram_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure UseProgram(&program: ProgramName);
    begin
      z_UseProgram_ovr_0(&program);
    end;
    
    // added in gl4.1
    public z_UseProgramStages_adr := GetFuncAdr('glUseProgramStages');
    public z_UseProgramStages_ovr_0 := GetFuncOrNil&<procedure(pipeline: ProgramPipelineName; stages: UseProgramStageMask; &program: ProgramName)>(z_UseProgramStages_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure UseProgramStages(pipeline: ProgramPipelineName; stages: UseProgramStageMask; &program: ProgramName);
    begin
      z_UseProgramStages_ovr_0(pipeline, stages, &program);
    end;
    
    // added in gl2.0
    public z_ValidateProgram_adr := GetFuncAdr('glValidateProgram');
    public z_ValidateProgram_ovr_0 := GetFuncOrNil&<procedure(&program: ProgramName)>(z_ValidateProgram_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ValidateProgram(&program: ProgramName);
    begin
      z_ValidateProgram_ovr_0(&program);
    end;
    
    // added in gl4.1
    public z_ValidateProgramPipeline_adr := GetFuncAdr('glValidateProgramPipeline');
    public z_ValidateProgramPipeline_ovr_0 := GetFuncOrNil&<procedure(pipeline: ProgramPipelineName)>(z_ValidateProgramPipeline_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ValidateProgramPipeline(pipeline: ProgramPipelineName);
    begin
      z_ValidateProgramPipeline_ovr_0(pipeline);
    end;
    
    // added in gl4.5
    public z_VertexArrayAttribBinding_adr := GetFuncAdr('glVertexArrayAttribBinding');
    public z_VertexArrayAttribBinding_ovr_0 := GetFuncOrNil&<procedure(vaobj: VertexArrayName; attribindex: UInt32; bindingindex: UInt32)>(z_VertexArrayAttribBinding_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexArrayAttribBinding(vaobj: VertexArrayName; attribindex: UInt32; bindingindex: UInt32);
    begin
      z_VertexArrayAttribBinding_ovr_0(vaobj, attribindex, bindingindex);
    end;
    
    // added in gl4.5
    public z_VertexArrayAttribFormat_adr := GetFuncAdr('glVertexArrayAttribFormat');
    public z_VertexArrayAttribFormat_ovr_0 := GetFuncOrNil&<procedure(vaobj: VertexArrayName; attribindex: UInt32; size: Int32; &type: VertexAttribType; normalized: boolean; relativeoffset: UInt32)>(z_VertexArrayAttribFormat_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexArrayAttribFormat(vaobj: VertexArrayName; attribindex: UInt32; size: Int32; &type: VertexAttribType; normalized: boolean; relativeoffset: UInt32);
    begin
      z_VertexArrayAttribFormat_ovr_0(vaobj, attribindex, size, &type, normalized, relativeoffset);
    end;
    
    // added in gl4.5
    public z_VertexArrayAttribIFormat_adr := GetFuncAdr('glVertexArrayAttribIFormat');
    public z_VertexArrayAttribIFormat_ovr_0 := GetFuncOrNil&<procedure(vaobj: VertexArrayName; attribindex: UInt32; size: Int32; &type: VertexAttribIType; relativeoffset: UInt32)>(z_VertexArrayAttribIFormat_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexArrayAttribIFormat(vaobj: VertexArrayName; attribindex: UInt32; size: Int32; &type: VertexAttribIType; relativeoffset: UInt32);
    begin
      z_VertexArrayAttribIFormat_ovr_0(vaobj, attribindex, size, &type, relativeoffset);
    end;
    
    // added in gl4.5
    public z_VertexArrayAttribLFormat_adr := GetFuncAdr('glVertexArrayAttribLFormat');
    public z_VertexArrayAttribLFormat_ovr_0 := GetFuncOrNil&<procedure(vaobj: VertexArrayName; attribindex: UInt32; size: Int32; &type: VertexAttribLType; relativeoffset: UInt32)>(z_VertexArrayAttribLFormat_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexArrayAttribLFormat(vaobj: VertexArrayName; attribindex: UInt32; size: Int32; &type: VertexAttribLType; relativeoffset: UInt32);
    begin
      z_VertexArrayAttribLFormat_ovr_0(vaobj, attribindex, size, &type, relativeoffset);
    end;
    
    // added in gl4.5
    public z_VertexArrayBindingDivisor_adr := GetFuncAdr('glVertexArrayBindingDivisor');
    public z_VertexArrayBindingDivisor_ovr_0 := GetFuncOrNil&<procedure(vaobj: VertexArrayName; bindingindex: UInt32; divisor: UInt32)>(z_VertexArrayBindingDivisor_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexArrayBindingDivisor(vaobj: VertexArrayName; bindingindex: UInt32; divisor: UInt32);
    begin
      z_VertexArrayBindingDivisor_ovr_0(vaobj, bindingindex, divisor);
    end;
    
    // added in gl4.5
    public z_VertexArrayElementBuffer_adr := GetFuncAdr('glVertexArrayElementBuffer');
    public z_VertexArrayElementBuffer_ovr_0 := GetFuncOrNil&<procedure(vaobj: VertexArrayName; buffer: BufferName)>(z_VertexArrayElementBuffer_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexArrayElementBuffer(vaobj: VertexArrayName; buffer: BufferName);
    begin
      z_VertexArrayElementBuffer_ovr_0(vaobj, buffer);
    end;
    
    // added in gl4.5
    public z_VertexArrayVertexBuffer_adr := GetFuncAdr('glVertexArrayVertexBuffer');
    public z_VertexArrayVertexBuffer_ovr_0 := GetFuncOrNil&<procedure(vaobj: VertexArrayName; bindingindex: UInt32; buffer: BufferName; offset: IntPtr; stride: Int32)>(z_VertexArrayVertexBuffer_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexArrayVertexBuffer(vaobj: VertexArrayName; bindingindex: UInt32; buffer: BufferName; offset: IntPtr; stride: Int32);
    begin
      z_VertexArrayVertexBuffer_ovr_0(vaobj, bindingindex, buffer, offset, stride);
    end;
    
    // added in gl4.5
    public z_VertexArrayVertexBuffers_adr := GetFuncAdr('glVertexArrayVertexBuffers');
    public z_VertexArrayVertexBuffers_ovr_0 := GetFuncOrNil&<procedure(vaobj: UInt32; first: UInt32; count: Int32; var buffers: UInt32; var offsets: IntPtr; var strides: Int32)>(z_VertexArrayVertexBuffers_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexArrayVertexBuffers(vaobj: UInt32; first: UInt32; count: Int32; buffers: array of UInt32; offsets: array of IntPtr; strides: array of Int32);
    begin
      z_VertexArrayVertexBuffers_ovr_0(vaobj, first, count, buffers[0], offsets[0], strides[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexArrayVertexBuffers(vaobj: UInt32; first: UInt32; count: Int32; buffers: array of UInt32; offsets: array of IntPtr; var strides: Int32);
    begin
      z_VertexArrayVertexBuffers_ovr_0(vaobj, first, count, buffers[0], offsets[0], strides);
    end;
    public z_VertexArrayVertexBuffers_ovr_2 := GetFuncOrNil&<procedure(vaobj: UInt32; first: UInt32; count: Int32; var buffers: UInt32; var offsets: IntPtr; strides: IntPtr)>(z_VertexArrayVertexBuffers_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexArrayVertexBuffers(vaobj: UInt32; first: UInt32; count: Int32; buffers: array of UInt32; offsets: array of IntPtr; strides: IntPtr);
    begin
      z_VertexArrayVertexBuffers_ovr_2(vaobj, first, count, buffers[0], offsets[0], strides);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexArrayVertexBuffers(vaobj: UInt32; first: UInt32; count: Int32; buffers: array of UInt32; var offsets: IntPtr; strides: array of Int32);
    begin
      z_VertexArrayVertexBuffers_ovr_0(vaobj, first, count, buffers[0], offsets, strides[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexArrayVertexBuffers(vaobj: UInt32; first: UInt32; count: Int32; buffers: array of UInt32; var offsets: IntPtr; var strides: Int32);
    begin
      z_VertexArrayVertexBuffers_ovr_0(vaobj, first, count, buffers[0], offsets, strides);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexArrayVertexBuffers(vaobj: UInt32; first: UInt32; count: Int32; buffers: array of UInt32; var offsets: IntPtr; strides: IntPtr);
    begin
      z_VertexArrayVertexBuffers_ovr_2(vaobj, first, count, buffers[0], offsets, strides);
    end;
    public z_VertexArrayVertexBuffers_ovr_6 := GetFuncOrNil&<procedure(vaobj: UInt32; first: UInt32; count: Int32; var buffers: UInt32; offsets: pointer; var strides: Int32)>(z_VertexArrayVertexBuffers_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexArrayVertexBuffers(vaobj: UInt32; first: UInt32; count: Int32; buffers: array of UInt32; offsets: pointer; strides: array of Int32);
    begin
      z_VertexArrayVertexBuffers_ovr_6(vaobj, first, count, buffers[0], offsets, strides[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexArrayVertexBuffers(vaobj: UInt32; first: UInt32; count: Int32; buffers: array of UInt32; offsets: pointer; var strides: Int32);
    begin
      z_VertexArrayVertexBuffers_ovr_6(vaobj, first, count, buffers[0], offsets, strides);
    end;
    public z_VertexArrayVertexBuffers_ovr_8 := GetFuncOrNil&<procedure(vaobj: UInt32; first: UInt32; count: Int32; var buffers: UInt32; offsets: pointer; strides: IntPtr)>(z_VertexArrayVertexBuffers_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexArrayVertexBuffers(vaobj: UInt32; first: UInt32; count: Int32; buffers: array of UInt32; offsets: pointer; strides: IntPtr);
    begin
      z_VertexArrayVertexBuffers_ovr_8(vaobj, first, count, buffers[0], offsets, strides);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexArrayVertexBuffers(vaobj: UInt32; first: UInt32; count: Int32; var buffers: UInt32; offsets: array of IntPtr; strides: array of Int32);
    begin
      z_VertexArrayVertexBuffers_ovr_0(vaobj, first, count, buffers, offsets[0], strides[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexArrayVertexBuffers(vaobj: UInt32; first: UInt32; count: Int32; var buffers: UInt32; offsets: array of IntPtr; var strides: Int32);
    begin
      z_VertexArrayVertexBuffers_ovr_0(vaobj, first, count, buffers, offsets[0], strides);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexArrayVertexBuffers(vaobj: UInt32; first: UInt32; count: Int32; var buffers: UInt32; offsets: array of IntPtr; strides: IntPtr);
    begin
      z_VertexArrayVertexBuffers_ovr_2(vaobj, first, count, buffers, offsets[0], strides);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexArrayVertexBuffers(vaobj: UInt32; first: UInt32; count: Int32; var buffers: UInt32; var offsets: IntPtr; strides: array of Int32);
    begin
      z_VertexArrayVertexBuffers_ovr_0(vaobj, first, count, buffers, offsets, strides[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexArrayVertexBuffers(vaobj: UInt32; first: UInt32; count: Int32; var buffers: UInt32; var offsets: IntPtr; var strides: Int32);
    begin
      z_VertexArrayVertexBuffers_ovr_0(vaobj, first, count, buffers, offsets, strides);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexArrayVertexBuffers(vaobj: UInt32; first: UInt32; count: Int32; var buffers: UInt32; var offsets: IntPtr; strides: IntPtr);
    begin
      z_VertexArrayVertexBuffers_ovr_2(vaobj, first, count, buffers, offsets, strides);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexArrayVertexBuffers(vaobj: UInt32; first: UInt32; count: Int32; var buffers: UInt32; offsets: pointer; strides: array of Int32);
    begin
      z_VertexArrayVertexBuffers_ovr_6(vaobj, first, count, buffers, offsets, strides[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexArrayVertexBuffers(vaobj: UInt32; first: UInt32; count: Int32; var buffers: UInt32; offsets: pointer; var strides: Int32);
    begin
      z_VertexArrayVertexBuffers_ovr_6(vaobj, first, count, buffers, offsets, strides);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexArrayVertexBuffers(vaobj: UInt32; first: UInt32; count: Int32; var buffers: UInt32; offsets: pointer; strides: IntPtr);
    begin
      z_VertexArrayVertexBuffers_ovr_8(vaobj, first, count, buffers, offsets, strides);
    end;
    public z_VertexArrayVertexBuffers_ovr_18 := GetFuncOrNil&<procedure(vaobj: UInt32; first: UInt32; count: Int32; buffers: IntPtr; var offsets: IntPtr; var strides: Int32)>(z_VertexArrayVertexBuffers_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexArrayVertexBuffers(vaobj: UInt32; first: UInt32; count: Int32; buffers: IntPtr; offsets: array of IntPtr; strides: array of Int32);
    begin
      z_VertexArrayVertexBuffers_ovr_18(vaobj, first, count, buffers, offsets[0], strides[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexArrayVertexBuffers(vaobj: UInt32; first: UInt32; count: Int32; buffers: IntPtr; offsets: array of IntPtr; var strides: Int32);
    begin
      z_VertexArrayVertexBuffers_ovr_18(vaobj, first, count, buffers, offsets[0], strides);
    end;
    public z_VertexArrayVertexBuffers_ovr_20 := GetFuncOrNil&<procedure(vaobj: UInt32; first: UInt32; count: Int32; buffers: IntPtr; var offsets: IntPtr; strides: IntPtr)>(z_VertexArrayVertexBuffers_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexArrayVertexBuffers(vaobj: UInt32; first: UInt32; count: Int32; buffers: IntPtr; offsets: array of IntPtr; strides: IntPtr);
    begin
      z_VertexArrayVertexBuffers_ovr_20(vaobj, first, count, buffers, offsets[0], strides);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexArrayVertexBuffers(vaobj: UInt32; first: UInt32; count: Int32; buffers: IntPtr; var offsets: IntPtr; strides: array of Int32);
    begin
      z_VertexArrayVertexBuffers_ovr_18(vaobj, first, count, buffers, offsets, strides[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexArrayVertexBuffers(vaobj: UInt32; first: UInt32; count: Int32; buffers: IntPtr; var offsets: IntPtr; var strides: Int32);
    begin
      z_VertexArrayVertexBuffers_ovr_18(vaobj, first, count, buffers, offsets, strides);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexArrayVertexBuffers(vaobj: UInt32; first: UInt32; count: Int32; buffers: IntPtr; var offsets: IntPtr; strides: IntPtr);
    begin
      z_VertexArrayVertexBuffers_ovr_20(vaobj, first, count, buffers, offsets, strides);
    end;
    public z_VertexArrayVertexBuffers_ovr_24 := GetFuncOrNil&<procedure(vaobj: UInt32; first: UInt32; count: Int32; buffers: IntPtr; offsets: pointer; var strides: Int32)>(z_VertexArrayVertexBuffers_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexArrayVertexBuffers(vaobj: UInt32; first: UInt32; count: Int32; buffers: IntPtr; offsets: pointer; strides: array of Int32);
    begin
      z_VertexArrayVertexBuffers_ovr_24(vaobj, first, count, buffers, offsets, strides[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexArrayVertexBuffers(vaobj: UInt32; first: UInt32; count: Int32; buffers: IntPtr; offsets: pointer; var strides: Int32);
    begin
      z_VertexArrayVertexBuffers_ovr_24(vaobj, first, count, buffers, offsets, strides);
    end;
    public z_VertexArrayVertexBuffers_ovr_26 := GetFuncOrNil&<procedure(vaobj: UInt32; first: UInt32; count: Int32; buffers: IntPtr; offsets: pointer; strides: IntPtr)>(z_VertexArrayVertexBuffers_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexArrayVertexBuffers(vaobj: UInt32; first: UInt32; count: Int32; buffers: IntPtr; offsets: pointer; strides: IntPtr);
    begin
      z_VertexArrayVertexBuffers_ovr_26(vaobj, first, count, buffers, offsets, strides);
    end;
    
    // added in gl2.0
    public z_VertexAttrib1d_adr := GetFuncAdr('glVertexAttrib1d');
    public z_VertexAttrib1d_ovr_0 := GetFuncOrNil&<procedure(index: UInt32; x: real)>(z_VertexAttrib1d_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttrib1d(index: UInt32; x: real);
    begin
      z_VertexAttrib1d_ovr_0(index, x);
    end;
    
    // added in gl2.0
    public z_VertexAttrib1dv_adr := GetFuncAdr('glVertexAttrib1dv');
    public z_VertexAttrib1dv_ovr_0 := GetFuncOrNil&<procedure(index: UInt32; var v: real)>(z_VertexAttrib1dv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttrib1dv(index: UInt32; v: array of real);
    begin
      z_VertexAttrib1dv_ovr_0(index, v[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttrib1dv(index: UInt32; var v: real);
    begin
      z_VertexAttrib1dv_ovr_0(index, v);
    end;
    public z_VertexAttrib1dv_ovr_2 := GetFuncOrNil&<procedure(index: UInt32; v: IntPtr)>(z_VertexAttrib1dv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttrib1dv(index: UInt32; v: IntPtr);
    begin
      z_VertexAttrib1dv_ovr_2(index, v);
    end;
    
    // added in gl2.0
    public z_VertexAttrib1f_adr := GetFuncAdr('glVertexAttrib1f');
    public z_VertexAttrib1f_ovr_0 := GetFuncOrNil&<procedure(index: UInt32; x: single)>(z_VertexAttrib1f_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttrib1f(index: UInt32; x: single);
    begin
      z_VertexAttrib1f_ovr_0(index, x);
    end;
    
    // added in gl2.0
    public z_VertexAttrib1fv_adr := GetFuncAdr('glVertexAttrib1fv');
    public z_VertexAttrib1fv_ovr_0 := GetFuncOrNil&<procedure(index: UInt32; var v: single)>(z_VertexAttrib1fv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttrib1fv(index: UInt32; v: array of single);
    begin
      z_VertexAttrib1fv_ovr_0(index, v[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttrib1fv(index: UInt32; var v: single);
    begin
      z_VertexAttrib1fv_ovr_0(index, v);
    end;
    public z_VertexAttrib1fv_ovr_2 := GetFuncOrNil&<procedure(index: UInt32; v: IntPtr)>(z_VertexAttrib1fv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttrib1fv(index: UInt32; v: IntPtr);
    begin
      z_VertexAttrib1fv_ovr_2(index, v);
    end;
    
    // added in gl2.0
    public z_VertexAttrib1s_adr := GetFuncAdr('glVertexAttrib1s');
    public z_VertexAttrib1s_ovr_0 := GetFuncOrNil&<procedure(index: UInt32; x: Int16)>(z_VertexAttrib1s_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttrib1s(index: UInt32; x: Int16);
    begin
      z_VertexAttrib1s_ovr_0(index, x);
    end;
    
    // added in gl2.0
    public z_VertexAttrib1sv_adr := GetFuncAdr('glVertexAttrib1sv');
    public z_VertexAttrib1sv_ovr_0 := GetFuncOrNil&<procedure(index: UInt32; var v: Int16)>(z_VertexAttrib1sv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttrib1sv(index: UInt32; v: array of Int16);
    begin
      z_VertexAttrib1sv_ovr_0(index, v[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttrib1sv(index: UInt32; var v: Int16);
    begin
      z_VertexAttrib1sv_ovr_0(index, v);
    end;
    public z_VertexAttrib1sv_ovr_2 := GetFuncOrNil&<procedure(index: UInt32; v: IntPtr)>(z_VertexAttrib1sv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttrib1sv(index: UInt32; v: IntPtr);
    begin
      z_VertexAttrib1sv_ovr_2(index, v);
    end;
    
    // added in gl2.0
    public z_VertexAttrib2d_adr := GetFuncAdr('glVertexAttrib2d');
    public z_VertexAttrib2d_ovr_0 := GetFuncOrNil&<procedure(index: UInt32; x: real; y: real)>(z_VertexAttrib2d_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttrib2d(index: UInt32; x: real; y: real);
    begin
      z_VertexAttrib2d_ovr_0(index, x, y);
    end;
    
    // added in gl2.0
    public z_VertexAttrib2dv_adr := GetFuncAdr('glVertexAttrib2dv');
    public z_VertexAttrib2dv_ovr_0 := GetFuncOrNil&<procedure(index: UInt32; var v: real)>(z_VertexAttrib2dv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttrib2dv(index: UInt32; v: array of real);
    begin
      z_VertexAttrib2dv_ovr_0(index, v[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttrib2dv(index: UInt32; var v: real);
    begin
      z_VertexAttrib2dv_ovr_0(index, v);
    end;
    public z_VertexAttrib2dv_ovr_2 := GetFuncOrNil&<procedure(index: UInt32; v: IntPtr)>(z_VertexAttrib2dv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttrib2dv(index: UInt32; v: IntPtr);
    begin
      z_VertexAttrib2dv_ovr_2(index, v);
    end;
    
    // added in gl2.0
    public z_VertexAttrib2f_adr := GetFuncAdr('glVertexAttrib2f');
    public z_VertexAttrib2f_ovr_0 := GetFuncOrNil&<procedure(index: UInt32; x: single; y: single)>(z_VertexAttrib2f_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttrib2f(index: UInt32; x: single; y: single);
    begin
      z_VertexAttrib2f_ovr_0(index, x, y);
    end;
    
    // added in gl2.0
    public z_VertexAttrib2fv_adr := GetFuncAdr('glVertexAttrib2fv');
    public z_VertexAttrib2fv_ovr_0 := GetFuncOrNil&<procedure(index: UInt32; var v: single)>(z_VertexAttrib2fv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttrib2fv(index: UInt32; v: array of single);
    begin
      z_VertexAttrib2fv_ovr_0(index, v[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttrib2fv(index: UInt32; var v: single);
    begin
      z_VertexAttrib2fv_ovr_0(index, v);
    end;
    public z_VertexAttrib2fv_ovr_2 := GetFuncOrNil&<procedure(index: UInt32; v: IntPtr)>(z_VertexAttrib2fv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttrib2fv(index: UInt32; v: IntPtr);
    begin
      z_VertexAttrib2fv_ovr_2(index, v);
    end;
    
    // added in gl2.0
    public z_VertexAttrib2s_adr := GetFuncAdr('glVertexAttrib2s');
    public z_VertexAttrib2s_ovr_0 := GetFuncOrNil&<procedure(index: UInt32; x: Int16; y: Int16)>(z_VertexAttrib2s_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttrib2s(index: UInt32; x: Int16; y: Int16);
    begin
      z_VertexAttrib2s_ovr_0(index, x, y);
    end;
    
    // added in gl2.0
    public z_VertexAttrib2sv_adr := GetFuncAdr('glVertexAttrib2sv');
    public z_VertexAttrib2sv_ovr_0 := GetFuncOrNil&<procedure(index: UInt32; var v: Int16)>(z_VertexAttrib2sv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttrib2sv(index: UInt32; v: array of Int16);
    begin
      z_VertexAttrib2sv_ovr_0(index, v[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttrib2sv(index: UInt32; var v: Int16);
    begin
      z_VertexAttrib2sv_ovr_0(index, v);
    end;
    public z_VertexAttrib2sv_ovr_2 := GetFuncOrNil&<procedure(index: UInt32; v: IntPtr)>(z_VertexAttrib2sv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttrib2sv(index: UInt32; v: IntPtr);
    begin
      z_VertexAttrib2sv_ovr_2(index, v);
    end;
    
    // added in gl2.0
    public z_VertexAttrib3d_adr := GetFuncAdr('glVertexAttrib3d');
    public z_VertexAttrib3d_ovr_0 := GetFuncOrNil&<procedure(index: UInt32; x: real; y: real; z: real)>(z_VertexAttrib3d_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttrib3d(index: UInt32; x: real; y: real; z: real);
    begin
      z_VertexAttrib3d_ovr_0(index, x, y, z);
    end;
    
    // added in gl2.0
    public z_VertexAttrib3dv_adr := GetFuncAdr('glVertexAttrib3dv');
    public z_VertexAttrib3dv_ovr_0 := GetFuncOrNil&<procedure(index: UInt32; var v: real)>(z_VertexAttrib3dv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttrib3dv(index: UInt32; v: array of real);
    begin
      z_VertexAttrib3dv_ovr_0(index, v[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttrib3dv(index: UInt32; var v: real);
    begin
      z_VertexAttrib3dv_ovr_0(index, v);
    end;
    public z_VertexAttrib3dv_ovr_2 := GetFuncOrNil&<procedure(index: UInt32; v: IntPtr)>(z_VertexAttrib3dv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttrib3dv(index: UInt32; v: IntPtr);
    begin
      z_VertexAttrib3dv_ovr_2(index, v);
    end;
    
    // added in gl2.0
    public z_VertexAttrib3f_adr := GetFuncAdr('glVertexAttrib3f');
    public z_VertexAttrib3f_ovr_0 := GetFuncOrNil&<procedure(index: UInt32; x: single; y: single; z: single)>(z_VertexAttrib3f_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttrib3f(index: UInt32; x: single; y: single; z: single);
    begin
      z_VertexAttrib3f_ovr_0(index, x, y, z);
    end;
    
    // added in gl2.0
    public z_VertexAttrib3fv_adr := GetFuncAdr('glVertexAttrib3fv');
    public z_VertexAttrib3fv_ovr_0 := GetFuncOrNil&<procedure(index: UInt32; var v: single)>(z_VertexAttrib3fv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttrib3fv(index: UInt32; v: array of single);
    begin
      z_VertexAttrib3fv_ovr_0(index, v[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttrib3fv(index: UInt32; var v: single);
    begin
      z_VertexAttrib3fv_ovr_0(index, v);
    end;
    public z_VertexAttrib3fv_ovr_2 := GetFuncOrNil&<procedure(index: UInt32; v: IntPtr)>(z_VertexAttrib3fv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttrib3fv(index: UInt32; v: IntPtr);
    begin
      z_VertexAttrib3fv_ovr_2(index, v);
    end;
    
    // added in gl2.0
    public z_VertexAttrib3s_adr := GetFuncAdr('glVertexAttrib3s');
    public z_VertexAttrib3s_ovr_0 := GetFuncOrNil&<procedure(index: UInt32; x: Int16; y: Int16; z: Int16)>(z_VertexAttrib3s_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttrib3s(index: UInt32; x: Int16; y: Int16; z: Int16);
    begin
      z_VertexAttrib3s_ovr_0(index, x, y, z);
    end;
    
    // added in gl2.0
    public z_VertexAttrib3sv_adr := GetFuncAdr('glVertexAttrib3sv');
    public z_VertexAttrib3sv_ovr_0 := GetFuncOrNil&<procedure(index: UInt32; var v: Int16)>(z_VertexAttrib3sv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttrib3sv(index: UInt32; v: array of Int16);
    begin
      z_VertexAttrib3sv_ovr_0(index, v[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttrib3sv(index: UInt32; var v: Int16);
    begin
      z_VertexAttrib3sv_ovr_0(index, v);
    end;
    public z_VertexAttrib3sv_ovr_2 := GetFuncOrNil&<procedure(index: UInt32; v: IntPtr)>(z_VertexAttrib3sv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttrib3sv(index: UInt32; v: IntPtr);
    begin
      z_VertexAttrib3sv_ovr_2(index, v);
    end;
    
    // added in gl2.0
    public z_VertexAttrib4bv_adr := GetFuncAdr('glVertexAttrib4bv');
    public z_VertexAttrib4bv_ovr_0 := GetFuncOrNil&<procedure(index: UInt32; var v: SByte)>(z_VertexAttrib4bv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttrib4bv(index: UInt32; v: array of SByte);
    begin
      z_VertexAttrib4bv_ovr_0(index, v[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttrib4bv(index: UInt32; var v: SByte);
    begin
      z_VertexAttrib4bv_ovr_0(index, v);
    end;
    public z_VertexAttrib4bv_ovr_2 := GetFuncOrNil&<procedure(index: UInt32; v: IntPtr)>(z_VertexAttrib4bv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttrib4bv(index: UInt32; v: IntPtr);
    begin
      z_VertexAttrib4bv_ovr_2(index, v);
    end;
    
    // added in gl2.0
    public z_VertexAttrib4d_adr := GetFuncAdr('glVertexAttrib4d');
    public z_VertexAttrib4d_ovr_0 := GetFuncOrNil&<procedure(index: UInt32; x: real; y: real; z: real; w: real)>(z_VertexAttrib4d_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttrib4d(index: UInt32; x: real; y: real; z: real; w: real);
    begin
      z_VertexAttrib4d_ovr_0(index, x, y, z, w);
    end;
    
    // added in gl2.0
    public z_VertexAttrib4dv_adr := GetFuncAdr('glVertexAttrib4dv');
    public z_VertexAttrib4dv_ovr_0 := GetFuncOrNil&<procedure(index: UInt32; var v: real)>(z_VertexAttrib4dv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttrib4dv(index: UInt32; v: array of real);
    begin
      z_VertexAttrib4dv_ovr_0(index, v[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttrib4dv(index: UInt32; var v: real);
    begin
      z_VertexAttrib4dv_ovr_0(index, v);
    end;
    public z_VertexAttrib4dv_ovr_2 := GetFuncOrNil&<procedure(index: UInt32; v: IntPtr)>(z_VertexAttrib4dv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttrib4dv(index: UInt32; v: IntPtr);
    begin
      z_VertexAttrib4dv_ovr_2(index, v);
    end;
    
    // added in gl2.0
    public z_VertexAttrib4f_adr := GetFuncAdr('glVertexAttrib4f');
    public z_VertexAttrib4f_ovr_0 := GetFuncOrNil&<procedure(index: UInt32; x: single; y: single; z: single; w: single)>(z_VertexAttrib4f_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttrib4f(index: UInt32; x: single; y: single; z: single; w: single);
    begin
      z_VertexAttrib4f_ovr_0(index, x, y, z, w);
    end;
    
    // added in gl2.0
    public z_VertexAttrib4fv_adr := GetFuncAdr('glVertexAttrib4fv');
    public z_VertexAttrib4fv_ovr_0 := GetFuncOrNil&<procedure(index: UInt32; var v: single)>(z_VertexAttrib4fv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttrib4fv(index: UInt32; v: array of single);
    begin
      z_VertexAttrib4fv_ovr_0(index, v[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttrib4fv(index: UInt32; var v: single);
    begin
      z_VertexAttrib4fv_ovr_0(index, v);
    end;
    public z_VertexAttrib4fv_ovr_2 := GetFuncOrNil&<procedure(index: UInt32; v: IntPtr)>(z_VertexAttrib4fv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttrib4fv(index: UInt32; v: IntPtr);
    begin
      z_VertexAttrib4fv_ovr_2(index, v);
    end;
    
    // added in gl2.0
    public z_VertexAttrib4iv_adr := GetFuncAdr('glVertexAttrib4iv');
    public z_VertexAttrib4iv_ovr_0 := GetFuncOrNil&<procedure(index: UInt32; var v: Int32)>(z_VertexAttrib4iv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttrib4iv(index: UInt32; v: array of Int32);
    begin
      z_VertexAttrib4iv_ovr_0(index, v[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttrib4iv(index: UInt32; var v: Int32);
    begin
      z_VertexAttrib4iv_ovr_0(index, v);
    end;
    public z_VertexAttrib4iv_ovr_2 := GetFuncOrNil&<procedure(index: UInt32; v: IntPtr)>(z_VertexAttrib4iv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttrib4iv(index: UInt32; v: IntPtr);
    begin
      z_VertexAttrib4iv_ovr_2(index, v);
    end;
    
    // added in gl2.0
    public z_VertexAttrib4Nbv_adr := GetFuncAdr('glVertexAttrib4Nbv');
    public z_VertexAttrib4Nbv_ovr_0 := GetFuncOrNil&<procedure(index: UInt32; var v: SByte)>(z_VertexAttrib4Nbv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttrib4Nbv(index: UInt32; v: array of SByte);
    begin
      z_VertexAttrib4Nbv_ovr_0(index, v[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttrib4Nbv(index: UInt32; var v: SByte);
    begin
      z_VertexAttrib4Nbv_ovr_0(index, v);
    end;
    public z_VertexAttrib4Nbv_ovr_2 := GetFuncOrNil&<procedure(index: UInt32; v: IntPtr)>(z_VertexAttrib4Nbv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttrib4Nbv(index: UInt32; v: IntPtr);
    begin
      z_VertexAttrib4Nbv_ovr_2(index, v);
    end;
    
    // added in gl2.0
    public z_VertexAttrib4Niv_adr := GetFuncAdr('glVertexAttrib4Niv');
    public z_VertexAttrib4Niv_ovr_0 := GetFuncOrNil&<procedure(index: UInt32; var v: Int32)>(z_VertexAttrib4Niv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttrib4Niv(index: UInt32; v: array of Int32);
    begin
      z_VertexAttrib4Niv_ovr_0(index, v[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttrib4Niv(index: UInt32; var v: Int32);
    begin
      z_VertexAttrib4Niv_ovr_0(index, v);
    end;
    public z_VertexAttrib4Niv_ovr_2 := GetFuncOrNil&<procedure(index: UInt32; v: IntPtr)>(z_VertexAttrib4Niv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttrib4Niv(index: UInt32; v: IntPtr);
    begin
      z_VertexAttrib4Niv_ovr_2(index, v);
    end;
    
    // added in gl2.0
    public z_VertexAttrib4Nsv_adr := GetFuncAdr('glVertexAttrib4Nsv');
    public z_VertexAttrib4Nsv_ovr_0 := GetFuncOrNil&<procedure(index: UInt32; var v: Int16)>(z_VertexAttrib4Nsv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttrib4Nsv(index: UInt32; v: array of Int16);
    begin
      z_VertexAttrib4Nsv_ovr_0(index, v[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttrib4Nsv(index: UInt32; var v: Int16);
    begin
      z_VertexAttrib4Nsv_ovr_0(index, v);
    end;
    public z_VertexAttrib4Nsv_ovr_2 := GetFuncOrNil&<procedure(index: UInt32; v: IntPtr)>(z_VertexAttrib4Nsv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttrib4Nsv(index: UInt32; v: IntPtr);
    begin
      z_VertexAttrib4Nsv_ovr_2(index, v);
    end;
    
    // added in gl2.0
    public z_VertexAttrib4Nub_adr := GetFuncAdr('glVertexAttrib4Nub');
    public z_VertexAttrib4Nub_ovr_0 := GetFuncOrNil&<procedure(index: UInt32; x: Byte; y: Byte; z: Byte; w: Byte)>(z_VertexAttrib4Nub_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttrib4Nub(index: UInt32; x: Byte; y: Byte; z: Byte; w: Byte);
    begin
      z_VertexAttrib4Nub_ovr_0(index, x, y, z, w);
    end;
    
    // added in gl2.0
    public z_VertexAttrib4Nubv_adr := GetFuncAdr('glVertexAttrib4Nubv');
    public z_VertexAttrib4Nubv_ovr_0 := GetFuncOrNil&<procedure(index: UInt32; var v: Byte)>(z_VertexAttrib4Nubv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttrib4Nubv(index: UInt32; v: array of Byte);
    begin
      z_VertexAttrib4Nubv_ovr_0(index, v[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttrib4Nubv(index: UInt32; var v: Byte);
    begin
      z_VertexAttrib4Nubv_ovr_0(index, v);
    end;
    public z_VertexAttrib4Nubv_ovr_2 := GetFuncOrNil&<procedure(index: UInt32; v: IntPtr)>(z_VertexAttrib4Nubv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttrib4Nubv(index: UInt32; v: IntPtr);
    begin
      z_VertexAttrib4Nubv_ovr_2(index, v);
    end;
    
    // added in gl2.0
    public z_VertexAttrib4Nuiv_adr := GetFuncAdr('glVertexAttrib4Nuiv');
    public z_VertexAttrib4Nuiv_ovr_0 := GetFuncOrNil&<procedure(index: UInt32; var v: UInt32)>(z_VertexAttrib4Nuiv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttrib4Nuiv(index: UInt32; v: array of UInt32);
    begin
      z_VertexAttrib4Nuiv_ovr_0(index, v[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttrib4Nuiv(index: UInt32; var v: UInt32);
    begin
      z_VertexAttrib4Nuiv_ovr_0(index, v);
    end;
    public z_VertexAttrib4Nuiv_ovr_2 := GetFuncOrNil&<procedure(index: UInt32; v: IntPtr)>(z_VertexAttrib4Nuiv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttrib4Nuiv(index: UInt32; v: IntPtr);
    begin
      z_VertexAttrib4Nuiv_ovr_2(index, v);
    end;
    
    // added in gl2.0
    public z_VertexAttrib4Nusv_adr := GetFuncAdr('glVertexAttrib4Nusv');
    public z_VertexAttrib4Nusv_ovr_0 := GetFuncOrNil&<procedure(index: UInt32; var v: UInt16)>(z_VertexAttrib4Nusv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttrib4Nusv(index: UInt32; v: array of UInt16);
    begin
      z_VertexAttrib4Nusv_ovr_0(index, v[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttrib4Nusv(index: UInt32; var v: UInt16);
    begin
      z_VertexAttrib4Nusv_ovr_0(index, v);
    end;
    public z_VertexAttrib4Nusv_ovr_2 := GetFuncOrNil&<procedure(index: UInt32; v: IntPtr)>(z_VertexAttrib4Nusv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttrib4Nusv(index: UInt32; v: IntPtr);
    begin
      z_VertexAttrib4Nusv_ovr_2(index, v);
    end;
    
    // added in gl2.0
    public z_VertexAttrib4s_adr := GetFuncAdr('glVertexAttrib4s');
    public z_VertexAttrib4s_ovr_0 := GetFuncOrNil&<procedure(index: UInt32; x: Int16; y: Int16; z: Int16; w: Int16)>(z_VertexAttrib4s_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttrib4s(index: UInt32; x: Int16; y: Int16; z: Int16; w: Int16);
    begin
      z_VertexAttrib4s_ovr_0(index, x, y, z, w);
    end;
    
    // added in gl2.0
    public z_VertexAttrib4sv_adr := GetFuncAdr('glVertexAttrib4sv');
    public z_VertexAttrib4sv_ovr_0 := GetFuncOrNil&<procedure(index: UInt32; var v: Int16)>(z_VertexAttrib4sv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttrib4sv(index: UInt32; v: array of Int16);
    begin
      z_VertexAttrib4sv_ovr_0(index, v[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttrib4sv(index: UInt32; var v: Int16);
    begin
      z_VertexAttrib4sv_ovr_0(index, v);
    end;
    public z_VertexAttrib4sv_ovr_2 := GetFuncOrNil&<procedure(index: UInt32; v: IntPtr)>(z_VertexAttrib4sv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttrib4sv(index: UInt32; v: IntPtr);
    begin
      z_VertexAttrib4sv_ovr_2(index, v);
    end;
    
    // added in gl2.0
    public z_VertexAttrib4ubv_adr := GetFuncAdr('glVertexAttrib4ubv');
    public z_VertexAttrib4ubv_ovr_0 := GetFuncOrNil&<procedure(index: UInt32; var v: Byte)>(z_VertexAttrib4ubv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttrib4ubv(index: UInt32; v: array of Byte);
    begin
      z_VertexAttrib4ubv_ovr_0(index, v[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttrib4ubv(index: UInt32; var v: Byte);
    begin
      z_VertexAttrib4ubv_ovr_0(index, v);
    end;
    public z_VertexAttrib4ubv_ovr_2 := GetFuncOrNil&<procedure(index: UInt32; v: IntPtr)>(z_VertexAttrib4ubv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttrib4ubv(index: UInt32; v: IntPtr);
    begin
      z_VertexAttrib4ubv_ovr_2(index, v);
    end;
    
    // added in gl2.0
    public z_VertexAttrib4uiv_adr := GetFuncAdr('glVertexAttrib4uiv');
    public z_VertexAttrib4uiv_ovr_0 := GetFuncOrNil&<procedure(index: UInt32; var v: UInt32)>(z_VertexAttrib4uiv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttrib4uiv(index: UInt32; v: array of UInt32);
    begin
      z_VertexAttrib4uiv_ovr_0(index, v[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttrib4uiv(index: UInt32; var v: UInt32);
    begin
      z_VertexAttrib4uiv_ovr_0(index, v);
    end;
    public z_VertexAttrib4uiv_ovr_2 := GetFuncOrNil&<procedure(index: UInt32; v: IntPtr)>(z_VertexAttrib4uiv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttrib4uiv(index: UInt32; v: IntPtr);
    begin
      z_VertexAttrib4uiv_ovr_2(index, v);
    end;
    
    // added in gl2.0
    public z_VertexAttrib4usv_adr := GetFuncAdr('glVertexAttrib4usv');
    public z_VertexAttrib4usv_ovr_0 := GetFuncOrNil&<procedure(index: UInt32; var v: UInt16)>(z_VertexAttrib4usv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttrib4usv(index: UInt32; v: array of UInt16);
    begin
      z_VertexAttrib4usv_ovr_0(index, v[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttrib4usv(index: UInt32; var v: UInt16);
    begin
      z_VertexAttrib4usv_ovr_0(index, v);
    end;
    public z_VertexAttrib4usv_ovr_2 := GetFuncOrNil&<procedure(index: UInt32; v: IntPtr)>(z_VertexAttrib4usv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttrib4usv(index: UInt32; v: IntPtr);
    begin
      z_VertexAttrib4usv_ovr_2(index, v);
    end;
    
    // added in gl4.3
    public z_VertexAttribBinding_adr := GetFuncAdr('glVertexAttribBinding');
    public z_VertexAttribBinding_ovr_0 := GetFuncOrNil&<procedure(attribindex: UInt32; bindingindex: UInt32)>(z_VertexAttribBinding_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttribBinding(attribindex: UInt32; bindingindex: UInt32);
    begin
      z_VertexAttribBinding_ovr_0(attribindex, bindingindex);
    end;
    
    // added in gl3.3
    public z_VertexAttribDivisor_adr := GetFuncAdr('glVertexAttribDivisor');
    public z_VertexAttribDivisor_ovr_0 := GetFuncOrNil&<procedure(index: UInt32; divisor: UInt32)>(z_VertexAttribDivisor_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttribDivisor(index: UInt32; divisor: UInt32);
    begin
      z_VertexAttribDivisor_ovr_0(index, divisor);
    end;
    
    // added in gl4.3
    public z_VertexAttribFormat_adr := GetFuncAdr('glVertexAttribFormat');
    public z_VertexAttribFormat_ovr_0 := GetFuncOrNil&<procedure(attribindex: UInt32; size: Int32; &type: VertexAttribType; normalized: boolean; relativeoffset: UInt32)>(z_VertexAttribFormat_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttribFormat(attribindex: UInt32; size: Int32; &type: VertexAttribType; normalized: boolean; relativeoffset: UInt32);
    begin
      z_VertexAttribFormat_ovr_0(attribindex, size, &type, normalized, relativeoffset);
    end;
    
    // added in gl3.0
    public z_VertexAttribI1i_adr := GetFuncAdr('glVertexAttribI1i');
    public z_VertexAttribI1i_ovr_0 := GetFuncOrNil&<procedure(index: UInt32; x: Int32)>(z_VertexAttribI1i_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttribI1i(index: UInt32; x: Int32);
    begin
      z_VertexAttribI1i_ovr_0(index, x);
    end;
    
    // added in gl3.0
    public z_VertexAttribI1iv_adr := GetFuncAdr('glVertexAttribI1iv');
    public z_VertexAttribI1iv_ovr_0 := GetFuncOrNil&<procedure(index: UInt32; var v: Int32)>(z_VertexAttribI1iv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttribI1iv(index: UInt32; v: array of Int32);
    begin
      z_VertexAttribI1iv_ovr_0(index, v[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttribI1iv(index: UInt32; var v: Int32);
    begin
      z_VertexAttribI1iv_ovr_0(index, v);
    end;
    public z_VertexAttribI1iv_ovr_2 := GetFuncOrNil&<procedure(index: UInt32; v: IntPtr)>(z_VertexAttribI1iv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttribI1iv(index: UInt32; v: IntPtr);
    begin
      z_VertexAttribI1iv_ovr_2(index, v);
    end;
    
    // added in gl3.0
    public z_VertexAttribI1ui_adr := GetFuncAdr('glVertexAttribI1ui');
    public z_VertexAttribI1ui_ovr_0 := GetFuncOrNil&<procedure(index: UInt32; x: UInt32)>(z_VertexAttribI1ui_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttribI1ui(index: UInt32; x: UInt32);
    begin
      z_VertexAttribI1ui_ovr_0(index, x);
    end;
    
    // added in gl3.0
    public z_VertexAttribI1uiv_adr := GetFuncAdr('glVertexAttribI1uiv');
    public z_VertexAttribI1uiv_ovr_0 := GetFuncOrNil&<procedure(index: UInt32; var v: UInt32)>(z_VertexAttribI1uiv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttribI1uiv(index: UInt32; v: array of UInt32);
    begin
      z_VertexAttribI1uiv_ovr_0(index, v[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttribI1uiv(index: UInt32; var v: UInt32);
    begin
      z_VertexAttribI1uiv_ovr_0(index, v);
    end;
    public z_VertexAttribI1uiv_ovr_2 := GetFuncOrNil&<procedure(index: UInt32; v: IntPtr)>(z_VertexAttribI1uiv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttribI1uiv(index: UInt32; v: IntPtr);
    begin
      z_VertexAttribI1uiv_ovr_2(index, v);
    end;
    
    // added in gl3.0
    public z_VertexAttribI2i_adr := GetFuncAdr('glVertexAttribI2i');
    public z_VertexAttribI2i_ovr_0 := GetFuncOrNil&<procedure(index: UInt32; x: Int32; y: Int32)>(z_VertexAttribI2i_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttribI2i(index: UInt32; x: Int32; y: Int32);
    begin
      z_VertexAttribI2i_ovr_0(index, x, y);
    end;
    
    // added in gl3.0
    public z_VertexAttribI2iv_adr := GetFuncAdr('glVertexAttribI2iv');
    public z_VertexAttribI2iv_ovr_0 := GetFuncOrNil&<procedure(index: UInt32; var v: Int32)>(z_VertexAttribI2iv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttribI2iv(index: UInt32; v: array of Int32);
    begin
      z_VertexAttribI2iv_ovr_0(index, v[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttribI2iv(index: UInt32; var v: Int32);
    begin
      z_VertexAttribI2iv_ovr_0(index, v);
    end;
    public z_VertexAttribI2iv_ovr_2 := GetFuncOrNil&<procedure(index: UInt32; v: IntPtr)>(z_VertexAttribI2iv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttribI2iv(index: UInt32; v: IntPtr);
    begin
      z_VertexAttribI2iv_ovr_2(index, v);
    end;
    
    // added in gl3.0
    public z_VertexAttribI2ui_adr := GetFuncAdr('glVertexAttribI2ui');
    public z_VertexAttribI2ui_ovr_0 := GetFuncOrNil&<procedure(index: UInt32; x: UInt32; y: UInt32)>(z_VertexAttribI2ui_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttribI2ui(index: UInt32; x: UInt32; y: UInt32);
    begin
      z_VertexAttribI2ui_ovr_0(index, x, y);
    end;
    
    // added in gl3.0
    public z_VertexAttribI2uiv_adr := GetFuncAdr('glVertexAttribI2uiv');
    public z_VertexAttribI2uiv_ovr_0 := GetFuncOrNil&<procedure(index: UInt32; var v: UInt32)>(z_VertexAttribI2uiv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttribI2uiv(index: UInt32; v: array of UInt32);
    begin
      z_VertexAttribI2uiv_ovr_0(index, v[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttribI2uiv(index: UInt32; var v: UInt32);
    begin
      z_VertexAttribI2uiv_ovr_0(index, v);
    end;
    public z_VertexAttribI2uiv_ovr_2 := GetFuncOrNil&<procedure(index: UInt32; v: IntPtr)>(z_VertexAttribI2uiv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttribI2uiv(index: UInt32; v: IntPtr);
    begin
      z_VertexAttribI2uiv_ovr_2(index, v);
    end;
    
    // added in gl3.0
    public z_VertexAttribI3i_adr := GetFuncAdr('glVertexAttribI3i');
    public z_VertexAttribI3i_ovr_0 := GetFuncOrNil&<procedure(index: UInt32; x: Int32; y: Int32; z: Int32)>(z_VertexAttribI3i_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttribI3i(index: UInt32; x: Int32; y: Int32; z: Int32);
    begin
      z_VertexAttribI3i_ovr_0(index, x, y, z);
    end;
    
    // added in gl3.0
    public z_VertexAttribI3iv_adr := GetFuncAdr('glVertexAttribI3iv');
    public z_VertexAttribI3iv_ovr_0 := GetFuncOrNil&<procedure(index: UInt32; var v: Int32)>(z_VertexAttribI3iv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttribI3iv(index: UInt32; v: array of Int32);
    begin
      z_VertexAttribI3iv_ovr_0(index, v[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttribI3iv(index: UInt32; var v: Int32);
    begin
      z_VertexAttribI3iv_ovr_0(index, v);
    end;
    public z_VertexAttribI3iv_ovr_2 := GetFuncOrNil&<procedure(index: UInt32; v: IntPtr)>(z_VertexAttribI3iv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttribI3iv(index: UInt32; v: IntPtr);
    begin
      z_VertexAttribI3iv_ovr_2(index, v);
    end;
    
    // added in gl3.0
    public z_VertexAttribI3ui_adr := GetFuncAdr('glVertexAttribI3ui');
    public z_VertexAttribI3ui_ovr_0 := GetFuncOrNil&<procedure(index: UInt32; x: UInt32; y: UInt32; z: UInt32)>(z_VertexAttribI3ui_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttribI3ui(index: UInt32; x: UInt32; y: UInt32; z: UInt32);
    begin
      z_VertexAttribI3ui_ovr_0(index, x, y, z);
    end;
    
    // added in gl3.0
    public z_VertexAttribI3uiv_adr := GetFuncAdr('glVertexAttribI3uiv');
    public z_VertexAttribI3uiv_ovr_0 := GetFuncOrNil&<procedure(index: UInt32; var v: UInt32)>(z_VertexAttribI3uiv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttribI3uiv(index: UInt32; v: array of UInt32);
    begin
      z_VertexAttribI3uiv_ovr_0(index, v[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttribI3uiv(index: UInt32; var v: UInt32);
    begin
      z_VertexAttribI3uiv_ovr_0(index, v);
    end;
    public z_VertexAttribI3uiv_ovr_2 := GetFuncOrNil&<procedure(index: UInt32; v: IntPtr)>(z_VertexAttribI3uiv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttribI3uiv(index: UInt32; v: IntPtr);
    begin
      z_VertexAttribI3uiv_ovr_2(index, v);
    end;
    
    // added in gl3.0
    public z_VertexAttribI4bv_adr := GetFuncAdr('glVertexAttribI4bv');
    public z_VertexAttribI4bv_ovr_0 := GetFuncOrNil&<procedure(index: UInt32; var v: SByte)>(z_VertexAttribI4bv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttribI4bv(index: UInt32; v: array of SByte);
    begin
      z_VertexAttribI4bv_ovr_0(index, v[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttribI4bv(index: UInt32; var v: SByte);
    begin
      z_VertexAttribI4bv_ovr_0(index, v);
    end;
    public z_VertexAttribI4bv_ovr_2 := GetFuncOrNil&<procedure(index: UInt32; v: IntPtr)>(z_VertexAttribI4bv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttribI4bv(index: UInt32; v: IntPtr);
    begin
      z_VertexAttribI4bv_ovr_2(index, v);
    end;
    
    // added in gl3.0
    public z_VertexAttribI4i_adr := GetFuncAdr('glVertexAttribI4i');
    public z_VertexAttribI4i_ovr_0 := GetFuncOrNil&<procedure(index: UInt32; x: Int32; y: Int32; z: Int32; w: Int32)>(z_VertexAttribI4i_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttribI4i(index: UInt32; x: Int32; y: Int32; z: Int32; w: Int32);
    begin
      z_VertexAttribI4i_ovr_0(index, x, y, z, w);
    end;
    
    // added in gl3.0
    public z_VertexAttribI4iv_adr := GetFuncAdr('glVertexAttribI4iv');
    public z_VertexAttribI4iv_ovr_0 := GetFuncOrNil&<procedure(index: UInt32; var v: Int32)>(z_VertexAttribI4iv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttribI4iv(index: UInt32; v: array of Int32);
    begin
      z_VertexAttribI4iv_ovr_0(index, v[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttribI4iv(index: UInt32; var v: Int32);
    begin
      z_VertexAttribI4iv_ovr_0(index, v);
    end;
    public z_VertexAttribI4iv_ovr_2 := GetFuncOrNil&<procedure(index: UInt32; v: IntPtr)>(z_VertexAttribI4iv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttribI4iv(index: UInt32; v: IntPtr);
    begin
      z_VertexAttribI4iv_ovr_2(index, v);
    end;
    
    // added in gl3.0
    public z_VertexAttribI4sv_adr := GetFuncAdr('glVertexAttribI4sv');
    public z_VertexAttribI4sv_ovr_0 := GetFuncOrNil&<procedure(index: UInt32; var v: Int16)>(z_VertexAttribI4sv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttribI4sv(index: UInt32; v: array of Int16);
    begin
      z_VertexAttribI4sv_ovr_0(index, v[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttribI4sv(index: UInt32; var v: Int16);
    begin
      z_VertexAttribI4sv_ovr_0(index, v);
    end;
    public z_VertexAttribI4sv_ovr_2 := GetFuncOrNil&<procedure(index: UInt32; v: IntPtr)>(z_VertexAttribI4sv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttribI4sv(index: UInt32; v: IntPtr);
    begin
      z_VertexAttribI4sv_ovr_2(index, v);
    end;
    
    // added in gl3.0
    public z_VertexAttribI4ubv_adr := GetFuncAdr('glVertexAttribI4ubv');
    public z_VertexAttribI4ubv_ovr_0 := GetFuncOrNil&<procedure(index: UInt32; var v: Byte)>(z_VertexAttribI4ubv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttribI4ubv(index: UInt32; v: array of Byte);
    begin
      z_VertexAttribI4ubv_ovr_0(index, v[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttribI4ubv(index: UInt32; var v: Byte);
    begin
      z_VertexAttribI4ubv_ovr_0(index, v);
    end;
    public z_VertexAttribI4ubv_ovr_2 := GetFuncOrNil&<procedure(index: UInt32; v: IntPtr)>(z_VertexAttribI4ubv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttribI4ubv(index: UInt32; v: IntPtr);
    begin
      z_VertexAttribI4ubv_ovr_2(index, v);
    end;
    
    // added in gl3.0
    public z_VertexAttribI4ui_adr := GetFuncAdr('glVertexAttribI4ui');
    public z_VertexAttribI4ui_ovr_0 := GetFuncOrNil&<procedure(index: UInt32; x: UInt32; y: UInt32; z: UInt32; w: UInt32)>(z_VertexAttribI4ui_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttribI4ui(index: UInt32; x: UInt32; y: UInt32; z: UInt32; w: UInt32);
    begin
      z_VertexAttribI4ui_ovr_0(index, x, y, z, w);
    end;
    
    // added in gl3.0
    public z_VertexAttribI4uiv_adr := GetFuncAdr('glVertexAttribI4uiv');
    public z_VertexAttribI4uiv_ovr_0 := GetFuncOrNil&<procedure(index: UInt32; var v: UInt32)>(z_VertexAttribI4uiv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttribI4uiv(index: UInt32; v: array of UInt32);
    begin
      z_VertexAttribI4uiv_ovr_0(index, v[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttribI4uiv(index: UInt32; var v: UInt32);
    begin
      z_VertexAttribI4uiv_ovr_0(index, v);
    end;
    public z_VertexAttribI4uiv_ovr_2 := GetFuncOrNil&<procedure(index: UInt32; v: IntPtr)>(z_VertexAttribI4uiv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttribI4uiv(index: UInt32; v: IntPtr);
    begin
      z_VertexAttribI4uiv_ovr_2(index, v);
    end;
    
    // added in gl3.0
    public z_VertexAttribI4usv_adr := GetFuncAdr('glVertexAttribI4usv');
    public z_VertexAttribI4usv_ovr_0 := GetFuncOrNil&<procedure(index: UInt32; var v: UInt16)>(z_VertexAttribI4usv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttribI4usv(index: UInt32; v: array of UInt16);
    begin
      z_VertexAttribI4usv_ovr_0(index, v[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttribI4usv(index: UInt32; var v: UInt16);
    begin
      z_VertexAttribI4usv_ovr_0(index, v);
    end;
    public z_VertexAttribI4usv_ovr_2 := GetFuncOrNil&<procedure(index: UInt32; v: IntPtr)>(z_VertexAttribI4usv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttribI4usv(index: UInt32; v: IntPtr);
    begin
      z_VertexAttribI4usv_ovr_2(index, v);
    end;
    
    // added in gl4.3
    public z_VertexAttribIFormat_adr := GetFuncAdr('glVertexAttribIFormat');
    public z_VertexAttribIFormat_ovr_0 := GetFuncOrNil&<procedure(attribindex: UInt32; size: Int32; &type: VertexAttribIType; relativeoffset: UInt32)>(z_VertexAttribIFormat_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttribIFormat(attribindex: UInt32; size: Int32; &type: VertexAttribIType; relativeoffset: UInt32);
    begin
      z_VertexAttribIFormat_ovr_0(attribindex, size, &type, relativeoffset);
    end;
    
    // added in gl3.0
    public z_VertexAttribIPointer_adr := GetFuncAdr('glVertexAttribIPointer');
    public z_VertexAttribIPointer_ovr_0 := GetFuncOrNil&<procedure(index: UInt32; size: Int32; &type: VertexAttribPointerType; stride: Int32; pointer: IntPtr)>(z_VertexAttribIPointer_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttribIPointer(index: UInt32; size: Int32; &type: VertexAttribPointerType; stride: Int32; pointer: IntPtr);
    begin
      z_VertexAttribIPointer_ovr_0(index, size, &type, stride, pointer);
    end;
    
    // added in gl4.1
    public z_VertexAttribL1d_adr := GetFuncAdr('glVertexAttribL1d');
    public z_VertexAttribL1d_ovr_0 := GetFuncOrNil&<procedure(index: UInt32; x: real)>(z_VertexAttribL1d_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttribL1d(index: UInt32; x: real);
    begin
      z_VertexAttribL1d_ovr_0(index, x);
    end;
    
    // added in gl4.1
    public z_VertexAttribL1dv_adr := GetFuncAdr('glVertexAttribL1dv');
    public z_VertexAttribL1dv_ovr_0 := GetFuncOrNil&<procedure(index: UInt32; var v: real)>(z_VertexAttribL1dv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttribL1dv(index: UInt32; v: array of real);
    begin
      z_VertexAttribL1dv_ovr_0(index, v[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttribL1dv(index: UInt32; var v: real);
    begin
      z_VertexAttribL1dv_ovr_0(index, v);
    end;
    public z_VertexAttribL1dv_ovr_2 := GetFuncOrNil&<procedure(index: UInt32; v: IntPtr)>(z_VertexAttribL1dv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttribL1dv(index: UInt32; v: IntPtr);
    begin
      z_VertexAttribL1dv_ovr_2(index, v);
    end;
    
    // added in gl4.1
    public z_VertexAttribL2d_adr := GetFuncAdr('glVertexAttribL2d');
    public z_VertexAttribL2d_ovr_0 := GetFuncOrNil&<procedure(index: UInt32; x: real; y: real)>(z_VertexAttribL2d_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttribL2d(index: UInt32; x: real; y: real);
    begin
      z_VertexAttribL2d_ovr_0(index, x, y);
    end;
    
    // added in gl4.1
    public z_VertexAttribL2dv_adr := GetFuncAdr('glVertexAttribL2dv');
    public z_VertexAttribL2dv_ovr_0 := GetFuncOrNil&<procedure(index: UInt32; var v: real)>(z_VertexAttribL2dv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttribL2dv(index: UInt32; v: array of real);
    begin
      z_VertexAttribL2dv_ovr_0(index, v[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttribL2dv(index: UInt32; var v: real);
    begin
      z_VertexAttribL2dv_ovr_0(index, v);
    end;
    public z_VertexAttribL2dv_ovr_2 := GetFuncOrNil&<procedure(index: UInt32; v: IntPtr)>(z_VertexAttribL2dv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttribL2dv(index: UInt32; v: IntPtr);
    begin
      z_VertexAttribL2dv_ovr_2(index, v);
    end;
    
    // added in gl4.1
    public z_VertexAttribL3d_adr := GetFuncAdr('glVertexAttribL3d');
    public z_VertexAttribL3d_ovr_0 := GetFuncOrNil&<procedure(index: UInt32; x: real; y: real; z: real)>(z_VertexAttribL3d_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttribL3d(index: UInt32; x: real; y: real; z: real);
    begin
      z_VertexAttribL3d_ovr_0(index, x, y, z);
    end;
    
    // added in gl4.1
    public z_VertexAttribL3dv_adr := GetFuncAdr('glVertexAttribL3dv');
    public z_VertexAttribL3dv_ovr_0 := GetFuncOrNil&<procedure(index: UInt32; var v: real)>(z_VertexAttribL3dv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttribL3dv(index: UInt32; v: array of real);
    begin
      z_VertexAttribL3dv_ovr_0(index, v[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttribL3dv(index: UInt32; var v: real);
    begin
      z_VertexAttribL3dv_ovr_0(index, v);
    end;
    public z_VertexAttribL3dv_ovr_2 := GetFuncOrNil&<procedure(index: UInt32; v: IntPtr)>(z_VertexAttribL3dv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttribL3dv(index: UInt32; v: IntPtr);
    begin
      z_VertexAttribL3dv_ovr_2(index, v);
    end;
    
    // added in gl4.1
    public z_VertexAttribL4d_adr := GetFuncAdr('glVertexAttribL4d');
    public z_VertexAttribL4d_ovr_0 := GetFuncOrNil&<procedure(index: UInt32; x: real; y: real; z: real; w: real)>(z_VertexAttribL4d_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttribL4d(index: UInt32; x: real; y: real; z: real; w: real);
    begin
      z_VertexAttribL4d_ovr_0(index, x, y, z, w);
    end;
    
    // added in gl4.1
    public z_VertexAttribL4dv_adr := GetFuncAdr('glVertexAttribL4dv');
    public z_VertexAttribL4dv_ovr_0 := GetFuncOrNil&<procedure(index: UInt32; var v: real)>(z_VertexAttribL4dv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttribL4dv(index: UInt32; v: array of real);
    begin
      z_VertexAttribL4dv_ovr_0(index, v[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttribL4dv(index: UInt32; var v: real);
    begin
      z_VertexAttribL4dv_ovr_0(index, v);
    end;
    public z_VertexAttribL4dv_ovr_2 := GetFuncOrNil&<procedure(index: UInt32; v: IntPtr)>(z_VertexAttribL4dv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttribL4dv(index: UInt32; v: IntPtr);
    begin
      z_VertexAttribL4dv_ovr_2(index, v);
    end;
    
    // added in gl4.3
    public z_VertexAttribLFormat_adr := GetFuncAdr('glVertexAttribLFormat');
    public z_VertexAttribLFormat_ovr_0 := GetFuncOrNil&<procedure(attribindex: UInt32; size: Int32; &type: VertexAttribLType; relativeoffset: UInt32)>(z_VertexAttribLFormat_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttribLFormat(attribindex: UInt32; size: Int32; &type: VertexAttribLType; relativeoffset: UInt32);
    begin
      z_VertexAttribLFormat_ovr_0(attribindex, size, &type, relativeoffset);
    end;
    
    // added in gl4.1
    public z_VertexAttribLPointer_adr := GetFuncAdr('glVertexAttribLPointer');
    public z_VertexAttribLPointer_ovr_0 := GetFuncOrNil&<procedure(index: UInt32; size: Int32; &type: VertexAttribPointerType; stride: Int32; pointer: IntPtr)>(z_VertexAttribLPointer_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttribLPointer(index: UInt32; size: Int32; &type: VertexAttribPointerType; stride: Int32; pointer: IntPtr);
    begin
      z_VertexAttribLPointer_ovr_0(index, size, &type, stride, pointer);
    end;
    
    // added in gl3.3
    public z_VertexAttribP1ui_adr := GetFuncAdr('glVertexAttribP1ui');
    public z_VertexAttribP1ui_ovr_0 := GetFuncOrNil&<procedure(index: UInt32; &type: VertexAttribPointerType; normalized: boolean; value: UInt32)>(z_VertexAttribP1ui_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttribP1ui(index: UInt32; &type: VertexAttribPointerType; normalized: boolean; value: UInt32);
    begin
      z_VertexAttribP1ui_ovr_0(index, &type, normalized, value);
    end;
    
    // added in gl3.3
    public z_VertexAttribP1uiv_adr := GetFuncAdr('glVertexAttribP1uiv');
    public z_VertexAttribP1uiv_ovr_0 := GetFuncOrNil&<procedure(index: UInt32; &type: VertexAttribPointerType; normalized: boolean; var value: UInt32)>(z_VertexAttribP1uiv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttribP1uiv(index: UInt32; &type: VertexAttribPointerType; normalized: boolean; value: array of UInt32);
    begin
      z_VertexAttribP1uiv_ovr_0(index, &type, normalized, value[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttribP1uiv(index: UInt32; &type: VertexAttribPointerType; normalized: boolean; var value: UInt32);
    begin
      z_VertexAttribP1uiv_ovr_0(index, &type, normalized, value);
    end;
    public z_VertexAttribP1uiv_ovr_2 := GetFuncOrNil&<procedure(index: UInt32; &type: VertexAttribPointerType; normalized: boolean; value: IntPtr)>(z_VertexAttribP1uiv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttribP1uiv(index: UInt32; &type: VertexAttribPointerType; normalized: boolean; value: IntPtr);
    begin
      z_VertexAttribP1uiv_ovr_2(index, &type, normalized, value);
    end;
    
    // added in gl3.3
    public z_VertexAttribP2ui_adr := GetFuncAdr('glVertexAttribP2ui');
    public z_VertexAttribP2ui_ovr_0 := GetFuncOrNil&<procedure(index: UInt32; &type: VertexAttribPointerType; normalized: boolean; value: UInt32)>(z_VertexAttribP2ui_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttribP2ui(index: UInt32; &type: VertexAttribPointerType; normalized: boolean; value: UInt32);
    begin
      z_VertexAttribP2ui_ovr_0(index, &type, normalized, value);
    end;
    
    // added in gl3.3
    public z_VertexAttribP2uiv_adr := GetFuncAdr('glVertexAttribP2uiv');
    public z_VertexAttribP2uiv_ovr_0 := GetFuncOrNil&<procedure(index: UInt32; &type: VertexAttribPointerType; normalized: boolean; var value: UInt32)>(z_VertexAttribP2uiv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttribP2uiv(index: UInt32; &type: VertexAttribPointerType; normalized: boolean; value: array of UInt32);
    begin
      z_VertexAttribP2uiv_ovr_0(index, &type, normalized, value[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttribP2uiv(index: UInt32; &type: VertexAttribPointerType; normalized: boolean; var value: UInt32);
    begin
      z_VertexAttribP2uiv_ovr_0(index, &type, normalized, value);
    end;
    public z_VertexAttribP2uiv_ovr_2 := GetFuncOrNil&<procedure(index: UInt32; &type: VertexAttribPointerType; normalized: boolean; value: IntPtr)>(z_VertexAttribP2uiv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttribP2uiv(index: UInt32; &type: VertexAttribPointerType; normalized: boolean; value: IntPtr);
    begin
      z_VertexAttribP2uiv_ovr_2(index, &type, normalized, value);
    end;
    
    // added in gl3.3
    public z_VertexAttribP3ui_adr := GetFuncAdr('glVertexAttribP3ui');
    public z_VertexAttribP3ui_ovr_0 := GetFuncOrNil&<procedure(index: UInt32; &type: VertexAttribPointerType; normalized: boolean; value: UInt32)>(z_VertexAttribP3ui_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttribP3ui(index: UInt32; &type: VertexAttribPointerType; normalized: boolean; value: UInt32);
    begin
      z_VertexAttribP3ui_ovr_0(index, &type, normalized, value);
    end;
    
    // added in gl3.3
    public z_VertexAttribP3uiv_adr := GetFuncAdr('glVertexAttribP3uiv');
    public z_VertexAttribP3uiv_ovr_0 := GetFuncOrNil&<procedure(index: UInt32; &type: VertexAttribPointerType; normalized: boolean; var value: UInt32)>(z_VertexAttribP3uiv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttribP3uiv(index: UInt32; &type: VertexAttribPointerType; normalized: boolean; value: array of UInt32);
    begin
      z_VertexAttribP3uiv_ovr_0(index, &type, normalized, value[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttribP3uiv(index: UInt32; &type: VertexAttribPointerType; normalized: boolean; var value: UInt32);
    begin
      z_VertexAttribP3uiv_ovr_0(index, &type, normalized, value);
    end;
    public z_VertexAttribP3uiv_ovr_2 := GetFuncOrNil&<procedure(index: UInt32; &type: VertexAttribPointerType; normalized: boolean; value: IntPtr)>(z_VertexAttribP3uiv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttribP3uiv(index: UInt32; &type: VertexAttribPointerType; normalized: boolean; value: IntPtr);
    begin
      z_VertexAttribP3uiv_ovr_2(index, &type, normalized, value);
    end;
    
    // added in gl3.3
    public z_VertexAttribP4ui_adr := GetFuncAdr('glVertexAttribP4ui');
    public z_VertexAttribP4ui_ovr_0 := GetFuncOrNil&<procedure(index: UInt32; &type: VertexAttribPointerType; normalized: boolean; value: UInt32)>(z_VertexAttribP4ui_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttribP4ui(index: UInt32; &type: VertexAttribPointerType; normalized: boolean; value: UInt32);
    begin
      z_VertexAttribP4ui_ovr_0(index, &type, normalized, value);
    end;
    
    // added in gl3.3
    public z_VertexAttribP4uiv_adr := GetFuncAdr('glVertexAttribP4uiv');
    public z_VertexAttribP4uiv_ovr_0 := GetFuncOrNil&<procedure(index: UInt32; &type: VertexAttribPointerType; normalized: boolean; var value: UInt32)>(z_VertexAttribP4uiv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttribP4uiv(index: UInt32; &type: VertexAttribPointerType; normalized: boolean; value: array of UInt32);
    begin
      z_VertexAttribP4uiv_ovr_0(index, &type, normalized, value[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttribP4uiv(index: UInt32; &type: VertexAttribPointerType; normalized: boolean; var value: UInt32);
    begin
      z_VertexAttribP4uiv_ovr_0(index, &type, normalized, value);
    end;
    public z_VertexAttribP4uiv_ovr_2 := GetFuncOrNil&<procedure(index: UInt32; &type: VertexAttribPointerType; normalized: boolean; value: IntPtr)>(z_VertexAttribP4uiv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttribP4uiv(index: UInt32; &type: VertexAttribPointerType; normalized: boolean; value: IntPtr);
    begin
      z_VertexAttribP4uiv_ovr_2(index, &type, normalized, value);
    end;
    
    // added in gl2.0
    public z_VertexAttribPointer_adr := GetFuncAdr('glVertexAttribPointer');
    public z_VertexAttribPointer_ovr_0 := GetFuncOrNil&<procedure(index: UInt32; size: Int32; &type: VertexAttribPointerType; normalized: boolean; stride: Int32; pointer: IntPtr)>(z_VertexAttribPointer_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttribPointer(index: UInt32; size: Int32; &type: VertexAttribPointerType; normalized: boolean; stride: Int32; pointer: IntPtr);
    begin
      z_VertexAttribPointer_ovr_0(index, size, &type, normalized, stride, pointer);
    end;
    
    // added in gl4.3
    public z_VertexBindingDivisor_adr := GetFuncAdr('glVertexBindingDivisor');
    public z_VertexBindingDivisor_ovr_0 := GetFuncOrNil&<procedure(bindingindex: UInt32; divisor: UInt32)>(z_VertexBindingDivisor_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexBindingDivisor(bindingindex: UInt32; divisor: UInt32);
    begin
      z_VertexBindingDivisor_ovr_0(bindingindex, divisor);
    end;
    
    // added in gl3.3
    public z_VertexP2ui_adr := GetFuncAdr('glVertexP2ui');
    public z_VertexP2ui_ovr_0 := GetFuncOrNil&<procedure(&type: VertexPointerType; value: UInt32)>(z_VertexP2ui_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexP2ui(&type: VertexPointerType; value: UInt32);
    begin
      z_VertexP2ui_ovr_0(&type, value);
    end;
    
    // added in gl3.3
    public z_VertexP2uiv_adr := GetFuncAdr('glVertexP2uiv');
    public z_VertexP2uiv_ovr_0 := GetFuncOrNil&<procedure(&type: VertexPointerType; var value: UInt32)>(z_VertexP2uiv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexP2uiv(&type: VertexPointerType; value: array of UInt32);
    begin
      z_VertexP2uiv_ovr_0(&type, value[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexP2uiv(&type: VertexPointerType; var value: UInt32);
    begin
      z_VertexP2uiv_ovr_0(&type, value);
    end;
    public z_VertexP2uiv_ovr_2 := GetFuncOrNil&<procedure(&type: VertexPointerType; value: IntPtr)>(z_VertexP2uiv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexP2uiv(&type: VertexPointerType; value: IntPtr);
    begin
      z_VertexP2uiv_ovr_2(&type, value);
    end;
    
    // added in gl3.3
    public z_VertexP3ui_adr := GetFuncAdr('glVertexP3ui');
    public z_VertexP3ui_ovr_0 := GetFuncOrNil&<procedure(&type: VertexPointerType; value: UInt32)>(z_VertexP3ui_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexP3ui(&type: VertexPointerType; value: UInt32);
    begin
      z_VertexP3ui_ovr_0(&type, value);
    end;
    
    // added in gl3.3
    public z_VertexP3uiv_adr := GetFuncAdr('glVertexP3uiv');
    public z_VertexP3uiv_ovr_0 := GetFuncOrNil&<procedure(&type: VertexPointerType; var value: UInt32)>(z_VertexP3uiv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexP3uiv(&type: VertexPointerType; value: array of UInt32);
    begin
      z_VertexP3uiv_ovr_0(&type, value[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexP3uiv(&type: VertexPointerType; var value: UInt32);
    begin
      z_VertexP3uiv_ovr_0(&type, value);
    end;
    public z_VertexP3uiv_ovr_2 := GetFuncOrNil&<procedure(&type: VertexPointerType; value: IntPtr)>(z_VertexP3uiv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexP3uiv(&type: VertexPointerType; value: IntPtr);
    begin
      z_VertexP3uiv_ovr_2(&type, value);
    end;
    
    // added in gl3.3
    public z_VertexP4ui_adr := GetFuncAdr('glVertexP4ui');
    public z_VertexP4ui_ovr_0 := GetFuncOrNil&<procedure(&type: VertexPointerType; value: UInt32)>(z_VertexP4ui_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexP4ui(&type: VertexPointerType; value: UInt32);
    begin
      z_VertexP4ui_ovr_0(&type, value);
    end;
    
    // added in gl3.3
    public z_VertexP4uiv_adr := GetFuncAdr('glVertexP4uiv');
    public z_VertexP4uiv_ovr_0 := GetFuncOrNil&<procedure(&type: VertexPointerType; var value: UInt32)>(z_VertexP4uiv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexP4uiv(&type: VertexPointerType; value: array of UInt32);
    begin
      z_VertexP4uiv_ovr_0(&type, value[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexP4uiv(&type: VertexPointerType; var value: UInt32);
    begin
      z_VertexP4uiv_ovr_0(&type, value);
    end;
    public z_VertexP4uiv_ovr_2 := GetFuncOrNil&<procedure(&type: VertexPointerType; value: IntPtr)>(z_VertexP4uiv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexP4uiv(&type: VertexPointerType; value: IntPtr);
    begin
      z_VertexP4uiv_ovr_2(&type, value);
    end;
    
    // added in gl1.0
    private static procedure _z_Viewport_ovr0(x: Int32; y: Int32; width: Int32; height: Int32);
    external 'opengl32.dll' name 'glViewport';
    public static z_Viewport_ovr0 := _z_Viewport_ovr0;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Viewport(x: Int32; y: Int32; width: Int32; height: Int32) := z_Viewport_ovr0(x, y, width, height);
    
    // added in gl4.1
    public z_ViewportArrayv_adr := GetFuncAdr('glViewportArrayv');
    public z_ViewportArrayv_ovr_0 := GetFuncOrNil&<procedure(first: UInt32; count: Int32; var v: single)>(z_ViewportArrayv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ViewportArrayv(first: UInt32; count: Int32; v: array of single);
    begin
      z_ViewportArrayv_ovr_0(first, count, v[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ViewportArrayv(first: UInt32; count: Int32; var v: single);
    begin
      z_ViewportArrayv_ovr_0(first, count, v);
    end;
    public z_ViewportArrayv_ovr_2 := GetFuncOrNil&<procedure(first: UInt32; count: Int32; v: IntPtr)>(z_ViewportArrayv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ViewportArrayv(first: UInt32; count: Int32; v: IntPtr);
    begin
      z_ViewportArrayv_ovr_2(first, count, v);
    end;
    
    // added in gl4.1
    public z_ViewportIndexedf_adr := GetFuncAdr('glViewportIndexedf');
    public z_ViewportIndexedf_ovr_0 := GetFuncOrNil&<procedure(index: UInt32; x: single; y: single; w: single; h: single)>(z_ViewportIndexedf_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ViewportIndexedf(index: UInt32; x: single; y: single; w: single; h: single);
    begin
      z_ViewportIndexedf_ovr_0(index, x, y, w, h);
    end;
    
    // added in gl4.1
    public z_ViewportIndexedfv_adr := GetFuncAdr('glViewportIndexedfv');
    public z_ViewportIndexedfv_ovr_0 := GetFuncOrNil&<procedure(index: UInt32; var v: single)>(z_ViewportIndexedfv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ViewportIndexedfv(index: UInt32; v: array of single);
    begin
      z_ViewportIndexedfv_ovr_0(index, v[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ViewportIndexedfv(index: UInt32; var v: single);
    begin
      z_ViewportIndexedfv_ovr_0(index, v);
    end;
    public z_ViewportIndexedfv_ovr_2 := GetFuncOrNil&<procedure(index: UInt32; v: IntPtr)>(z_ViewportIndexedfv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ViewportIndexedfv(index: UInt32; v: IntPtr);
    begin
      z_ViewportIndexedfv_ovr_2(index, v);
    end;
    
    // added in gl3.2
    public z_WaitSync_adr := GetFuncAdr('glWaitSync');
    public z_WaitSync_ovr_0 := GetFuncOrNil&<procedure(sync: GLsync; flags: DummyFlags; timeout: UInt64)>(z_WaitSync_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure WaitSync(sync: GLsync; flags: DummyFlags; timeout: UInt64);
    begin
      z_WaitSync_ovr_0(sync, flags, timeout);
    end;
    
  end;
  
  glD = sealed class
    public static function GetFuncAdr([MarshalAs(UnmanagedType.LPStr)] lpszProc: string): IntPtr;
    external 'opengl32.dll' name 'wglGetProcAddress';
    public static function GetFuncOrNil<T>(fadr: IntPtr) :=
    fadr=IntPtr.Zero ? default(T) :
    Marshal.GetDelegateForFunctionPointer&<T>(fadr);
    
    // added in gl1.0, deprecated in gl3.2
    private static procedure _z_Accum_ovr0(op: AccumOp; value: single);
    external 'opengl32.dll' name 'glAccum';
    public static z_Accum_ovr0 := _z_Accum_ovr0;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Accum(op: AccumOp; value: single) := z_Accum_ovr0(op, value);
    
    // added in gl1.0, deprecated in gl3.2
    private static procedure _z_AlphaFunc_ovr0(func: AlphaFunction; ref: single);
    external 'opengl32.dll' name 'glAlphaFunc';
    public static z_AlphaFunc_ovr0 := _z_AlphaFunc_ovr0;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure AlphaFunc(func: AlphaFunction; ref: single) := z_AlphaFunc_ovr0(func, ref);
    
    // added in gl1.1, deprecated in gl3.2
    private static function _z_AreTexturesResident_ovr0(n: Int32; [MarshalAs(UnmanagedType.LPArray)] textures: array of UInt32; [MarshalAs(UnmanagedType.LPArray)] residences: array of boolean): boolean;
    external 'opengl32.dll' name 'glAreTexturesResident';
    public static z_AreTexturesResident_ovr0 := _z_AreTexturesResident_ovr0;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function AreTexturesResident(n: Int32; textures: array of UInt32; residences: array of boolean): boolean := z_AreTexturesResident_ovr0(n, textures, residences);
    private static function _z_AreTexturesResident_ovr1(n: Int32; [MarshalAs(UnmanagedType.LPArray)] textures: array of UInt32; var residences: boolean): boolean;
    external 'opengl32.dll' name 'glAreTexturesResident';
    public static z_AreTexturesResident_ovr1 := _z_AreTexturesResident_ovr1;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function AreTexturesResident(n: Int32; textures: array of UInt32; var residences: boolean): boolean := z_AreTexturesResident_ovr1(n, textures, residences);
    private static function _z_AreTexturesResident_ovr2(n: Int32; [MarshalAs(UnmanagedType.LPArray)] textures: array of UInt32; residences: IntPtr): boolean;
    external 'opengl32.dll' name 'glAreTexturesResident';
    public static z_AreTexturesResident_ovr2 := _z_AreTexturesResident_ovr2;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function AreTexturesResident(n: Int32; textures: array of UInt32; residences: IntPtr): boolean := z_AreTexturesResident_ovr2(n, textures, residences);
    private static function _z_AreTexturesResident_ovr3(n: Int32; var textures: UInt32; [MarshalAs(UnmanagedType.LPArray)] residences: array of boolean): boolean;
    external 'opengl32.dll' name 'glAreTexturesResident';
    public static z_AreTexturesResident_ovr3 := _z_AreTexturesResident_ovr3;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function AreTexturesResident(n: Int32; var textures: UInt32; residences: array of boolean): boolean := z_AreTexturesResident_ovr3(n, textures, residences);
    private static function _z_AreTexturesResident_ovr4(n: Int32; var textures: UInt32; var residences: boolean): boolean;
    external 'opengl32.dll' name 'glAreTexturesResident';
    public static z_AreTexturesResident_ovr4 := _z_AreTexturesResident_ovr4;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function AreTexturesResident(n: Int32; var textures: UInt32; var residences: boolean): boolean := z_AreTexturesResident_ovr4(n, textures, residences);
    private static function _z_AreTexturesResident_ovr5(n: Int32; var textures: UInt32; residences: IntPtr): boolean;
    external 'opengl32.dll' name 'glAreTexturesResident';
    public static z_AreTexturesResident_ovr5 := _z_AreTexturesResident_ovr5;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function AreTexturesResident(n: Int32; var textures: UInt32; residences: IntPtr): boolean := z_AreTexturesResident_ovr5(n, textures, residences);
    private static function _z_AreTexturesResident_ovr6(n: Int32; textures: IntPtr; [MarshalAs(UnmanagedType.LPArray)] residences: array of boolean): boolean;
    external 'opengl32.dll' name 'glAreTexturesResident';
    public static z_AreTexturesResident_ovr6 := _z_AreTexturesResident_ovr6;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function AreTexturesResident(n: Int32; textures: IntPtr; residences: array of boolean): boolean := z_AreTexturesResident_ovr6(n, textures, residences);
    private static function _z_AreTexturesResident_ovr7(n: Int32; textures: IntPtr; var residences: boolean): boolean;
    external 'opengl32.dll' name 'glAreTexturesResident';
    public static z_AreTexturesResident_ovr7 := _z_AreTexturesResident_ovr7;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function AreTexturesResident(n: Int32; textures: IntPtr; var residences: boolean): boolean := z_AreTexturesResident_ovr7(n, textures, residences);
    private static function _z_AreTexturesResident_ovr8(n: Int32; textures: IntPtr; residences: IntPtr): boolean;
    external 'opengl32.dll' name 'glAreTexturesResident';
    public static z_AreTexturesResident_ovr8 := _z_AreTexturesResident_ovr8;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function AreTexturesResident(n: Int32; textures: IntPtr; residences: IntPtr): boolean := z_AreTexturesResident_ovr8(n, textures, residences);
    
    // added in gl1.1, deprecated in gl3.2
    private static procedure _z_ArrayElement_ovr0(i: Int32);
    external 'opengl32.dll' name 'glArrayElement';
    public static z_ArrayElement_ovr0 := _z_ArrayElement_ovr0;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ArrayElement(i: Int32) := z_ArrayElement_ovr0(i);
    
    // added in gl1.0, deprecated in gl3.2
    private static procedure _z_Begin_ovr0(mode: PrimitiveType);
    external 'opengl32.dll' name 'glBegin';
    public static z_Begin_ovr0 := _z_Begin_ovr0;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure &Begin(mode: PrimitiveType) := z_Begin_ovr0(mode);
    
    // added in gl1.0, deprecated in gl3.2
    private static procedure _z_Bitmap_ovr0(width: Int32; height: Int32; xorig: single; yorig: single; xmove: single; ymove: single; [MarshalAs(UnmanagedType.LPArray)] bitmap: array of Byte);
    external 'opengl32.dll' name 'glBitmap';
    public static z_Bitmap_ovr0 := _z_Bitmap_ovr0;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Bitmap(width: Int32; height: Int32; xorig: single; yorig: single; xmove: single; ymove: single; bitmap: array of Byte) := z_Bitmap_ovr0(width, height, xorig, yorig, xmove, ymove, bitmap);
    private static procedure _z_Bitmap_ovr1(width: Int32; height: Int32; xorig: single; yorig: single; xmove: single; ymove: single; var bitmap: Byte);
    external 'opengl32.dll' name 'glBitmap';
    public static z_Bitmap_ovr1 := _z_Bitmap_ovr1;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Bitmap(width: Int32; height: Int32; xorig: single; yorig: single; xmove: single; ymove: single; var bitmap: Byte) := z_Bitmap_ovr1(width, height, xorig, yorig, xmove, ymove, bitmap);
    private static procedure _z_Bitmap_ovr2(width: Int32; height: Int32; xorig: single; yorig: single; xmove: single; ymove: single; bitmap: IntPtr);
    external 'opengl32.dll' name 'glBitmap';
    public static z_Bitmap_ovr2 := _z_Bitmap_ovr2;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Bitmap(width: Int32; height: Int32; xorig: single; yorig: single; xmove: single; ymove: single; bitmap: IntPtr) := z_Bitmap_ovr2(width, height, xorig, yorig, xmove, ymove, bitmap);
    
    // added in gl1.0, deprecated in gl3.2
    private static procedure _z_CallList_ovr0(list: UInt32);
    external 'opengl32.dll' name 'glCallList';
    public static z_CallList_ovr0 := _z_CallList_ovr0;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure CallList(list: UInt32) := z_CallList_ovr0(list);
    
    // added in gl1.0, deprecated in gl3.2
    private static procedure _z_CallLists_ovr0(n: Int32; &type: ListNameType; lists: IntPtr);
    external 'opengl32.dll' name 'glCallLists';
    public static z_CallLists_ovr0 := _z_CallLists_ovr0;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure CallLists(n: Int32; &type: ListNameType; lists: IntPtr) := z_CallLists_ovr0(n, &type, lists);
    
    // added in gl1.0, deprecated in gl3.2
    private static procedure _z_ClearAccum_ovr0(red: single; green: single; blue: single; alpha: single);
    external 'opengl32.dll' name 'glClearAccum';
    public static z_ClearAccum_ovr0 := _z_ClearAccum_ovr0;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ClearAccum(red: single; green: single; blue: single; alpha: single) := z_ClearAccum_ovr0(red, green, blue, alpha);
    
    // added in gl1.0, deprecated in gl3.2
    private static procedure _z_ClearIndex_ovr0(c: single);
    external 'opengl32.dll' name 'glClearIndex';
    public static z_ClearIndex_ovr0 := _z_ClearIndex_ovr0;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ClearIndex(c: single) := z_ClearIndex_ovr0(c);
    
    // added in gl1.3, deprecated in gl3.2
    public z_ClientActiveTexture_adr := GetFuncAdr('glClientActiveTexture');
    public z_ClientActiveTexture_ovr_0 := GetFuncOrNil&<procedure(texture: TextureUnit)>(z_ClientActiveTexture_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ClientActiveTexture(texture: TextureUnit);
    begin
      z_ClientActiveTexture_ovr_0(texture);
    end;
    
    // added in gl1.0, deprecated in gl3.2
    private static procedure _z_ClipPlane_ovr0(plane: ClipPlaneName; [MarshalAs(UnmanagedType.LPArray)] equation: array of real);
    external 'opengl32.dll' name 'glClipPlane';
    public static z_ClipPlane_ovr0 := _z_ClipPlane_ovr0;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ClipPlane(plane: ClipPlaneName; equation: array of real) := z_ClipPlane_ovr0(plane, equation);
    private static procedure _z_ClipPlane_ovr1(plane: ClipPlaneName; var equation: real);
    external 'opengl32.dll' name 'glClipPlane';
    public static z_ClipPlane_ovr1 := _z_ClipPlane_ovr1;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ClipPlane(plane: ClipPlaneName; var equation: real) := z_ClipPlane_ovr1(plane, equation);
    private static procedure _z_ClipPlane_ovr2(plane: ClipPlaneName; equation: IntPtr);
    external 'opengl32.dll' name 'glClipPlane';
    public static z_ClipPlane_ovr2 := _z_ClipPlane_ovr2;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ClipPlane(plane: ClipPlaneName; equation: IntPtr) := z_ClipPlane_ovr2(plane, equation);
    
    // added in gl1.0, deprecated in gl3.2
    private static procedure _z_Color3b_ovr0(red: SByte; green: SByte; blue: SByte);
    external 'opengl32.dll' name 'glColor3b';
    public static z_Color3b_ovr0 := _z_Color3b_ovr0;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Color3b(red: SByte; green: SByte; blue: SByte) := z_Color3b_ovr0(red, green, blue);
    
    // added in gl1.0, deprecated in gl3.2
    private static procedure _z_Color3bv_ovr0([MarshalAs(UnmanagedType.LPArray)] v: array of SByte);
    external 'opengl32.dll' name 'glColor3bv';
    public static z_Color3bv_ovr0 := _z_Color3bv_ovr0;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Color3bv(v: array of SByte) := z_Color3bv_ovr0(v);
    private static procedure _z_Color3bv_ovr1(var v: SByte);
    external 'opengl32.dll' name 'glColor3bv';
    public static z_Color3bv_ovr1 := _z_Color3bv_ovr1;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Color3bv(var v: SByte) := z_Color3bv_ovr1(v);
    private static procedure _z_Color3bv_ovr2(v: IntPtr);
    external 'opengl32.dll' name 'glColor3bv';
    public static z_Color3bv_ovr2 := _z_Color3bv_ovr2;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Color3bv(v: IntPtr) := z_Color3bv_ovr2(v);
    
    // added in gl1.0, deprecated in gl3.2
    private static procedure _z_Color3d_ovr0(red: real; green: real; blue: real);
    external 'opengl32.dll' name 'glColor3d';
    public static z_Color3d_ovr0 := _z_Color3d_ovr0;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Color3d(red: real; green: real; blue: real) := z_Color3d_ovr0(red, green, blue);
    
    // added in gl1.0, deprecated in gl3.2
    private static procedure _z_Color3dv_ovr0([MarshalAs(UnmanagedType.LPArray)] v: array of real);
    external 'opengl32.dll' name 'glColor3dv';
    public static z_Color3dv_ovr0 := _z_Color3dv_ovr0;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Color3dv(v: array of real) := z_Color3dv_ovr0(v);
    private static procedure _z_Color3dv_ovr1(var v: real);
    external 'opengl32.dll' name 'glColor3dv';
    public static z_Color3dv_ovr1 := _z_Color3dv_ovr1;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Color3dv(var v: real) := z_Color3dv_ovr1(v);
    private static procedure _z_Color3dv_ovr2(v: IntPtr);
    external 'opengl32.dll' name 'glColor3dv';
    public static z_Color3dv_ovr2 := _z_Color3dv_ovr2;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Color3dv(v: IntPtr) := z_Color3dv_ovr2(v);
    
    // added in gl1.0, deprecated in gl3.2
    private static procedure _z_Color3f_ovr0(red: single; green: single; blue: single);
    external 'opengl32.dll' name 'glColor3f';
    public static z_Color3f_ovr0 := _z_Color3f_ovr0;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Color3f(red: single; green: single; blue: single) := z_Color3f_ovr0(red, green, blue);
    
    // added in gl1.0, deprecated in gl3.2
    private static procedure _z_Color3fv_ovr0([MarshalAs(UnmanagedType.LPArray)] v: array of single);
    external 'opengl32.dll' name 'glColor3fv';
    public static z_Color3fv_ovr0 := _z_Color3fv_ovr0;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Color3fv(v: array of single) := z_Color3fv_ovr0(v);
    private static procedure _z_Color3fv_ovr1(var v: single);
    external 'opengl32.dll' name 'glColor3fv';
    public static z_Color3fv_ovr1 := _z_Color3fv_ovr1;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Color3fv(var v: single) := z_Color3fv_ovr1(v);
    private static procedure _z_Color3fv_ovr2(v: IntPtr);
    external 'opengl32.dll' name 'glColor3fv';
    public static z_Color3fv_ovr2 := _z_Color3fv_ovr2;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Color3fv(v: IntPtr) := z_Color3fv_ovr2(v);
    
    // added in gl1.0, deprecated in gl3.2
    private static procedure _z_Color3i_ovr0(red: Int32; green: Int32; blue: Int32);
    external 'opengl32.dll' name 'glColor3i';
    public static z_Color3i_ovr0 := _z_Color3i_ovr0;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Color3i(red: Int32; green: Int32; blue: Int32) := z_Color3i_ovr0(red, green, blue);
    
    // added in gl1.0, deprecated in gl3.2
    private static procedure _z_Color3iv_ovr0([MarshalAs(UnmanagedType.LPArray)] v: array of Int32);
    external 'opengl32.dll' name 'glColor3iv';
    public static z_Color3iv_ovr0 := _z_Color3iv_ovr0;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Color3iv(v: array of Int32) := z_Color3iv_ovr0(v);
    private static procedure _z_Color3iv_ovr1(var v: Int32);
    external 'opengl32.dll' name 'glColor3iv';
    public static z_Color3iv_ovr1 := _z_Color3iv_ovr1;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Color3iv(var v: Int32) := z_Color3iv_ovr1(v);
    private static procedure _z_Color3iv_ovr2(v: IntPtr);
    external 'opengl32.dll' name 'glColor3iv';
    public static z_Color3iv_ovr2 := _z_Color3iv_ovr2;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Color3iv(v: IntPtr) := z_Color3iv_ovr2(v);
    
    // added in gl1.0, deprecated in gl3.2
    private static procedure _z_Color3s_ovr0(red: Int16; green: Int16; blue: Int16);
    external 'opengl32.dll' name 'glColor3s';
    public static z_Color3s_ovr0 := _z_Color3s_ovr0;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Color3s(red: Int16; green: Int16; blue: Int16) := z_Color3s_ovr0(red, green, blue);
    
    // added in gl1.0, deprecated in gl3.2
    private static procedure _z_Color3sv_ovr0([MarshalAs(UnmanagedType.LPArray)] v: array of Int16);
    external 'opengl32.dll' name 'glColor3sv';
    public static z_Color3sv_ovr0 := _z_Color3sv_ovr0;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Color3sv(v: array of Int16) := z_Color3sv_ovr0(v);
    private static procedure _z_Color3sv_ovr1(var v: Int16);
    external 'opengl32.dll' name 'glColor3sv';
    public static z_Color3sv_ovr1 := _z_Color3sv_ovr1;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Color3sv(var v: Int16) := z_Color3sv_ovr1(v);
    private static procedure _z_Color3sv_ovr2(v: IntPtr);
    external 'opengl32.dll' name 'glColor3sv';
    public static z_Color3sv_ovr2 := _z_Color3sv_ovr2;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Color3sv(v: IntPtr) := z_Color3sv_ovr2(v);
    
    // added in gl1.0, deprecated in gl3.2
    private static procedure _z_Color3ub_ovr0(red: Byte; green: Byte; blue: Byte);
    external 'opengl32.dll' name 'glColor3ub';
    public static z_Color3ub_ovr0 := _z_Color3ub_ovr0;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Color3ub(red: Byte; green: Byte; blue: Byte) := z_Color3ub_ovr0(red, green, blue);
    
    // added in gl1.0, deprecated in gl3.2
    private static procedure _z_Color3ubv_ovr0([MarshalAs(UnmanagedType.LPArray)] v: array of Byte);
    external 'opengl32.dll' name 'glColor3ubv';
    public static z_Color3ubv_ovr0 := _z_Color3ubv_ovr0;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Color3ubv(v: array of Byte) := z_Color3ubv_ovr0(v);
    private static procedure _z_Color3ubv_ovr1(var v: Byte);
    external 'opengl32.dll' name 'glColor3ubv';
    public static z_Color3ubv_ovr1 := _z_Color3ubv_ovr1;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Color3ubv(var v: Byte) := z_Color3ubv_ovr1(v);
    private static procedure _z_Color3ubv_ovr2(v: IntPtr);
    external 'opengl32.dll' name 'glColor3ubv';
    public static z_Color3ubv_ovr2 := _z_Color3ubv_ovr2;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Color3ubv(v: IntPtr) := z_Color3ubv_ovr2(v);
    
    // added in gl1.0, deprecated in gl3.2
    private static procedure _z_Color3ui_ovr0(red: UInt32; green: UInt32; blue: UInt32);
    external 'opengl32.dll' name 'glColor3ui';
    public static z_Color3ui_ovr0 := _z_Color3ui_ovr0;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Color3ui(red: UInt32; green: UInt32; blue: UInt32) := z_Color3ui_ovr0(red, green, blue);
    
    // added in gl1.0, deprecated in gl3.2
    private static procedure _z_Color3uiv_ovr0([MarshalAs(UnmanagedType.LPArray)] v: array of UInt32);
    external 'opengl32.dll' name 'glColor3uiv';
    public static z_Color3uiv_ovr0 := _z_Color3uiv_ovr0;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Color3uiv(v: array of UInt32) := z_Color3uiv_ovr0(v);
    private static procedure _z_Color3uiv_ovr1(var v: UInt32);
    external 'opengl32.dll' name 'glColor3uiv';
    public static z_Color3uiv_ovr1 := _z_Color3uiv_ovr1;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Color3uiv(var v: UInt32) := z_Color3uiv_ovr1(v);
    private static procedure _z_Color3uiv_ovr2(v: IntPtr);
    external 'opengl32.dll' name 'glColor3uiv';
    public static z_Color3uiv_ovr2 := _z_Color3uiv_ovr2;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Color3uiv(v: IntPtr) := z_Color3uiv_ovr2(v);
    
    // added in gl1.0, deprecated in gl3.2
    private static procedure _z_Color3us_ovr0(red: UInt16; green: UInt16; blue: UInt16);
    external 'opengl32.dll' name 'glColor3us';
    public static z_Color3us_ovr0 := _z_Color3us_ovr0;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Color3us(red: UInt16; green: UInt16; blue: UInt16) := z_Color3us_ovr0(red, green, blue);
    
    // added in gl1.0, deprecated in gl3.2
    private static procedure _z_Color3usv_ovr0([MarshalAs(UnmanagedType.LPArray)] v: array of UInt16);
    external 'opengl32.dll' name 'glColor3usv';
    public static z_Color3usv_ovr0 := _z_Color3usv_ovr0;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Color3usv(v: array of UInt16) := z_Color3usv_ovr0(v);
    private static procedure _z_Color3usv_ovr1(var v: UInt16);
    external 'opengl32.dll' name 'glColor3usv';
    public static z_Color3usv_ovr1 := _z_Color3usv_ovr1;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Color3usv(var v: UInt16) := z_Color3usv_ovr1(v);
    private static procedure _z_Color3usv_ovr2(v: IntPtr);
    external 'opengl32.dll' name 'glColor3usv';
    public static z_Color3usv_ovr2 := _z_Color3usv_ovr2;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Color3usv(v: IntPtr) := z_Color3usv_ovr2(v);
    
    // added in gl1.0, deprecated in gl3.2
    private static procedure _z_Color4b_ovr0(red: SByte; green: SByte; blue: SByte; alpha: SByte);
    external 'opengl32.dll' name 'glColor4b';
    public static z_Color4b_ovr0 := _z_Color4b_ovr0;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Color4b(red: SByte; green: SByte; blue: SByte; alpha: SByte) := z_Color4b_ovr0(red, green, blue, alpha);
    
    // added in gl1.0, deprecated in gl3.2
    private static procedure _z_Color4bv_ovr0([MarshalAs(UnmanagedType.LPArray)] v: array of SByte);
    external 'opengl32.dll' name 'glColor4bv';
    public static z_Color4bv_ovr0 := _z_Color4bv_ovr0;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Color4bv(v: array of SByte) := z_Color4bv_ovr0(v);
    private static procedure _z_Color4bv_ovr1(var v: SByte);
    external 'opengl32.dll' name 'glColor4bv';
    public static z_Color4bv_ovr1 := _z_Color4bv_ovr1;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Color4bv(var v: SByte) := z_Color4bv_ovr1(v);
    private static procedure _z_Color4bv_ovr2(v: IntPtr);
    external 'opengl32.dll' name 'glColor4bv';
    public static z_Color4bv_ovr2 := _z_Color4bv_ovr2;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Color4bv(v: IntPtr) := z_Color4bv_ovr2(v);
    
    // added in gl1.0, deprecated in gl3.2
    private static procedure _z_Color4d_ovr0(red: real; green: real; blue: real; alpha: real);
    external 'opengl32.dll' name 'glColor4d';
    public static z_Color4d_ovr0 := _z_Color4d_ovr0;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Color4d(red: real; green: real; blue: real; alpha: real) := z_Color4d_ovr0(red, green, blue, alpha);
    
    // added in gl1.0, deprecated in gl3.2
    private static procedure _z_Color4dv_ovr0([MarshalAs(UnmanagedType.LPArray)] v: array of real);
    external 'opengl32.dll' name 'glColor4dv';
    public static z_Color4dv_ovr0 := _z_Color4dv_ovr0;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Color4dv(v: array of real) := z_Color4dv_ovr0(v);
    private static procedure _z_Color4dv_ovr1(var v: real);
    external 'opengl32.dll' name 'glColor4dv';
    public static z_Color4dv_ovr1 := _z_Color4dv_ovr1;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Color4dv(var v: real) := z_Color4dv_ovr1(v);
    private static procedure _z_Color4dv_ovr2(v: IntPtr);
    external 'opengl32.dll' name 'glColor4dv';
    public static z_Color4dv_ovr2 := _z_Color4dv_ovr2;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Color4dv(v: IntPtr) := z_Color4dv_ovr2(v);
    
    // added in gl1.0, deprecated in gl3.2
    private static procedure _z_Color4f_ovr0(red: single; green: single; blue: single; alpha: single);
    external 'opengl32.dll' name 'glColor4f';
    public static z_Color4f_ovr0 := _z_Color4f_ovr0;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Color4f(red: single; green: single; blue: single; alpha: single) := z_Color4f_ovr0(red, green, blue, alpha);
    
    // added in gl1.0, deprecated in gl3.2
    private static procedure _z_Color4fv_ovr0([MarshalAs(UnmanagedType.LPArray)] v: array of single);
    external 'opengl32.dll' name 'glColor4fv';
    public static z_Color4fv_ovr0 := _z_Color4fv_ovr0;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Color4fv(v: array of single) := z_Color4fv_ovr0(v);
    private static procedure _z_Color4fv_ovr1(var v: single);
    external 'opengl32.dll' name 'glColor4fv';
    public static z_Color4fv_ovr1 := _z_Color4fv_ovr1;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Color4fv(var v: single) := z_Color4fv_ovr1(v);
    private static procedure _z_Color4fv_ovr2(v: IntPtr);
    external 'opengl32.dll' name 'glColor4fv';
    public static z_Color4fv_ovr2 := _z_Color4fv_ovr2;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Color4fv(v: IntPtr) := z_Color4fv_ovr2(v);
    
    // added in gl1.0, deprecated in gl3.2
    private static procedure _z_Color4i_ovr0(red: Int32; green: Int32; blue: Int32; alpha: Int32);
    external 'opengl32.dll' name 'glColor4i';
    public static z_Color4i_ovr0 := _z_Color4i_ovr0;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Color4i(red: Int32; green: Int32; blue: Int32; alpha: Int32) := z_Color4i_ovr0(red, green, blue, alpha);
    
    // added in gl1.0, deprecated in gl3.2
    private static procedure _z_Color4iv_ovr0([MarshalAs(UnmanagedType.LPArray)] v: array of Int32);
    external 'opengl32.dll' name 'glColor4iv';
    public static z_Color4iv_ovr0 := _z_Color4iv_ovr0;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Color4iv(v: array of Int32) := z_Color4iv_ovr0(v);
    private static procedure _z_Color4iv_ovr1(var v: Int32);
    external 'opengl32.dll' name 'glColor4iv';
    public static z_Color4iv_ovr1 := _z_Color4iv_ovr1;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Color4iv(var v: Int32) := z_Color4iv_ovr1(v);
    private static procedure _z_Color4iv_ovr2(v: IntPtr);
    external 'opengl32.dll' name 'glColor4iv';
    public static z_Color4iv_ovr2 := _z_Color4iv_ovr2;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Color4iv(v: IntPtr) := z_Color4iv_ovr2(v);
    
    // added in gl1.0, deprecated in gl3.2
    private static procedure _z_Color4s_ovr0(red: Int16; green: Int16; blue: Int16; alpha: Int16);
    external 'opengl32.dll' name 'glColor4s';
    public static z_Color4s_ovr0 := _z_Color4s_ovr0;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Color4s(red: Int16; green: Int16; blue: Int16; alpha: Int16) := z_Color4s_ovr0(red, green, blue, alpha);
    
    // added in gl1.0, deprecated in gl3.2
    private static procedure _z_Color4sv_ovr0([MarshalAs(UnmanagedType.LPArray)] v: array of Int16);
    external 'opengl32.dll' name 'glColor4sv';
    public static z_Color4sv_ovr0 := _z_Color4sv_ovr0;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Color4sv(v: array of Int16) := z_Color4sv_ovr0(v);
    private static procedure _z_Color4sv_ovr1(var v: Int16);
    external 'opengl32.dll' name 'glColor4sv';
    public static z_Color4sv_ovr1 := _z_Color4sv_ovr1;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Color4sv(var v: Int16) := z_Color4sv_ovr1(v);
    private static procedure _z_Color4sv_ovr2(v: IntPtr);
    external 'opengl32.dll' name 'glColor4sv';
    public static z_Color4sv_ovr2 := _z_Color4sv_ovr2;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Color4sv(v: IntPtr) := z_Color4sv_ovr2(v);
    
    // added in gl1.0, deprecated in gl3.2
    private static procedure _z_Color4ub_ovr0(red: Byte; green: Byte; blue: Byte; alpha: Byte);
    external 'opengl32.dll' name 'glColor4ub';
    public static z_Color4ub_ovr0 := _z_Color4ub_ovr0;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Color4ub(red: Byte; green: Byte; blue: Byte; alpha: Byte) := z_Color4ub_ovr0(red, green, blue, alpha);
    
    // added in gl1.0, deprecated in gl3.2
    private static procedure _z_Color4ubv_ovr0([MarshalAs(UnmanagedType.LPArray)] v: array of Byte);
    external 'opengl32.dll' name 'glColor4ubv';
    public static z_Color4ubv_ovr0 := _z_Color4ubv_ovr0;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Color4ubv(v: array of Byte) := z_Color4ubv_ovr0(v);
    private static procedure _z_Color4ubv_ovr1(var v: Byte);
    external 'opengl32.dll' name 'glColor4ubv';
    public static z_Color4ubv_ovr1 := _z_Color4ubv_ovr1;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Color4ubv(var v: Byte) := z_Color4ubv_ovr1(v);
    private static procedure _z_Color4ubv_ovr2(v: IntPtr);
    external 'opengl32.dll' name 'glColor4ubv';
    public static z_Color4ubv_ovr2 := _z_Color4ubv_ovr2;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Color4ubv(v: IntPtr) := z_Color4ubv_ovr2(v);
    
    // added in gl1.0, deprecated in gl3.2
    private static procedure _z_Color4ui_ovr0(red: UInt32; green: UInt32; blue: UInt32; alpha: UInt32);
    external 'opengl32.dll' name 'glColor4ui';
    public static z_Color4ui_ovr0 := _z_Color4ui_ovr0;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Color4ui(red: UInt32; green: UInt32; blue: UInt32; alpha: UInt32) := z_Color4ui_ovr0(red, green, blue, alpha);
    
    // added in gl1.0, deprecated in gl3.2
    private static procedure _z_Color4uiv_ovr0([MarshalAs(UnmanagedType.LPArray)] v: array of UInt32);
    external 'opengl32.dll' name 'glColor4uiv';
    public static z_Color4uiv_ovr0 := _z_Color4uiv_ovr0;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Color4uiv(v: array of UInt32) := z_Color4uiv_ovr0(v);
    private static procedure _z_Color4uiv_ovr1(var v: UInt32);
    external 'opengl32.dll' name 'glColor4uiv';
    public static z_Color4uiv_ovr1 := _z_Color4uiv_ovr1;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Color4uiv(var v: UInt32) := z_Color4uiv_ovr1(v);
    private static procedure _z_Color4uiv_ovr2(v: IntPtr);
    external 'opengl32.dll' name 'glColor4uiv';
    public static z_Color4uiv_ovr2 := _z_Color4uiv_ovr2;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Color4uiv(v: IntPtr) := z_Color4uiv_ovr2(v);
    
    // added in gl1.0, deprecated in gl3.2
    private static procedure _z_Color4us_ovr0(red: UInt16; green: UInt16; blue: UInt16; alpha: UInt16);
    external 'opengl32.dll' name 'glColor4us';
    public static z_Color4us_ovr0 := _z_Color4us_ovr0;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Color4us(red: UInt16; green: UInt16; blue: UInt16; alpha: UInt16) := z_Color4us_ovr0(red, green, blue, alpha);
    
    // added in gl1.0, deprecated in gl3.2
    private static procedure _z_Color4usv_ovr0([MarshalAs(UnmanagedType.LPArray)] v: array of UInt16);
    external 'opengl32.dll' name 'glColor4usv';
    public static z_Color4usv_ovr0 := _z_Color4usv_ovr0;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Color4usv(v: array of UInt16) := z_Color4usv_ovr0(v);
    private static procedure _z_Color4usv_ovr1(var v: UInt16);
    external 'opengl32.dll' name 'glColor4usv';
    public static z_Color4usv_ovr1 := _z_Color4usv_ovr1;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Color4usv(var v: UInt16) := z_Color4usv_ovr1(v);
    private static procedure _z_Color4usv_ovr2(v: IntPtr);
    external 'opengl32.dll' name 'glColor4usv';
    public static z_Color4usv_ovr2 := _z_Color4usv_ovr2;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Color4usv(v: IntPtr) := z_Color4usv_ovr2(v);
    
    // added in gl1.0, deprecated in gl3.2
    private static procedure _z_ColorMaterial_ovr0(face: DummyEnum; mode: ColorMaterialParameter);
    external 'opengl32.dll' name 'glColorMaterial';
    public static z_ColorMaterial_ovr0 := _z_ColorMaterial_ovr0;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ColorMaterial(face: DummyEnum; mode: ColorMaterialParameter) := z_ColorMaterial_ovr0(face, mode);
    
    // added in gl1.1, deprecated in gl3.2
    private static procedure _z_ColorPointer_ovr0(size: Int32; &type: ColorPointerType; stride: Int32; pointer: IntPtr);
    external 'opengl32.dll' name 'glColorPointer';
    public static z_ColorPointer_ovr0 := _z_ColorPointer_ovr0;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ColorPointer(size: Int32; &type: ColorPointerType; stride: Int32; pointer: IntPtr) := z_ColorPointer_ovr0(size, &type, stride, pointer);
    
    // added in gl1.0, deprecated in gl3.2
    private static procedure _z_CopyPixels_ovr0(x: Int32; y: Int32; width: Int32; height: Int32; &type: PixelCopyType);
    external 'opengl32.dll' name 'glCopyPixels';
    public static z_CopyPixels_ovr0 := _z_CopyPixels_ovr0;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure CopyPixels(x: Int32; y: Int32; width: Int32; height: Int32; &type: PixelCopyType) := z_CopyPixels_ovr0(x, y, width, height, &type);
    
    // added in gl1.0, deprecated in gl3.2
    private static procedure _z_DeleteLists_ovr0(list: UInt32; range: Int32);
    external 'opengl32.dll' name 'glDeleteLists';
    public static z_DeleteLists_ovr0 := _z_DeleteLists_ovr0;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure DeleteLists(list: UInt32; range: Int32) := z_DeleteLists_ovr0(list, range);
    
    // added in gl1.1, deprecated in gl3.2
    private static procedure _z_DisableClientState_ovr0(&array: EnableCap);
    external 'opengl32.dll' name 'glDisableClientState';
    public static z_DisableClientState_ovr0 := _z_DisableClientState_ovr0;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure DisableClientState(&array: EnableCap) := z_DisableClientState_ovr0(&array);
    
    // added in gl1.0, deprecated in gl3.2
    private static procedure _z_DrawPixels_ovr0(width: Int32; height: Int32; format: PixelFormat; &type: PixelType; pixels: IntPtr);
    external 'opengl32.dll' name 'glDrawPixels';
    public static z_DrawPixels_ovr0 := _z_DrawPixels_ovr0;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure DrawPixels(width: Int32; height: Int32; format: PixelFormat; &type: PixelType; pixels: IntPtr) := z_DrawPixels_ovr0(width, height, format, &type, pixels);
    
    // added in gl1.0, deprecated in gl3.2
    private static procedure _z_EdgeFlag_ovr0(flag: boolean);
    external 'opengl32.dll' name 'glEdgeFlag';
    public static z_EdgeFlag_ovr0 := _z_EdgeFlag_ovr0;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure EdgeFlag(flag: boolean) := z_EdgeFlag_ovr0(flag);
    
    // added in gl1.1, deprecated in gl3.2
    private static procedure _z_EdgeFlagPointer_ovr0(stride: Int32; pointer: IntPtr);
    external 'opengl32.dll' name 'glEdgeFlagPointer';
    public static z_EdgeFlagPointer_ovr0 := _z_EdgeFlagPointer_ovr0;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure EdgeFlagPointer(stride: Int32; pointer: IntPtr) := z_EdgeFlagPointer_ovr0(stride, pointer);
    
    // added in gl1.0, deprecated in gl3.2
    private static procedure _z_EdgeFlagv_ovr0([MarshalAs(UnmanagedType.LPArray)] flag: array of boolean);
    external 'opengl32.dll' name 'glEdgeFlagv';
    public static z_EdgeFlagv_ovr0 := _z_EdgeFlagv_ovr0;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure EdgeFlagv(flag: array of boolean) := z_EdgeFlagv_ovr0(flag);
    private static procedure _z_EdgeFlagv_ovr1(var flag: boolean);
    external 'opengl32.dll' name 'glEdgeFlagv';
    public static z_EdgeFlagv_ovr1 := _z_EdgeFlagv_ovr1;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure EdgeFlagv(var flag: boolean) := z_EdgeFlagv_ovr1(flag);
    private static procedure _z_EdgeFlagv_ovr2(flag: IntPtr);
    external 'opengl32.dll' name 'glEdgeFlagv';
    public static z_EdgeFlagv_ovr2 := _z_EdgeFlagv_ovr2;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure EdgeFlagv(flag: IntPtr) := z_EdgeFlagv_ovr2(flag);
    
    // added in gl1.1, deprecated in gl3.2
    private static procedure _z_EnableClientState_ovr0(&array: EnableCap);
    external 'opengl32.dll' name 'glEnableClientState';
    public static z_EnableClientState_ovr0 := _z_EnableClientState_ovr0;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure EnableClientState(&array: EnableCap) := z_EnableClientState_ovr0(&array);
    
    // added in gl1.0, deprecated in gl3.2
    private static procedure _z_End_ovr0;
    external 'opengl32.dll' name 'glEnd';
    public static z_End_ovr0 := _z_End_ovr0;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure &End := z_End_ovr0;
    
    // added in gl1.0, deprecated in gl3.2
    private static procedure _z_EndList_ovr0;
    external 'opengl32.dll' name 'glEndList';
    public static z_EndList_ovr0 := _z_EndList_ovr0;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure EndList := z_EndList_ovr0;
    
    // added in gl1.0, deprecated in gl3.2
    private static procedure _z_EvalCoord1d_ovr0(u: real);
    external 'opengl32.dll' name 'glEvalCoord1d';
    public static z_EvalCoord1d_ovr0 := _z_EvalCoord1d_ovr0;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure EvalCoord1d(u: real) := z_EvalCoord1d_ovr0(u);
    
    // added in gl1.0, deprecated in gl3.2
    private static procedure _z_EvalCoord1dv_ovr0([MarshalAs(UnmanagedType.LPArray)] u: array of real);
    external 'opengl32.dll' name 'glEvalCoord1dv';
    public static z_EvalCoord1dv_ovr0 := _z_EvalCoord1dv_ovr0;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure EvalCoord1dv(u: array of real) := z_EvalCoord1dv_ovr0(u);
    private static procedure _z_EvalCoord1dv_ovr1(var u: real);
    external 'opengl32.dll' name 'glEvalCoord1dv';
    public static z_EvalCoord1dv_ovr1 := _z_EvalCoord1dv_ovr1;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure EvalCoord1dv(var u: real) := z_EvalCoord1dv_ovr1(u);
    private static procedure _z_EvalCoord1dv_ovr2(u: IntPtr);
    external 'opengl32.dll' name 'glEvalCoord1dv';
    public static z_EvalCoord1dv_ovr2 := _z_EvalCoord1dv_ovr2;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure EvalCoord1dv(u: IntPtr) := z_EvalCoord1dv_ovr2(u);
    
    // added in gl1.0, deprecated in gl3.2
    private static procedure _z_EvalCoord1f_ovr0(u: single);
    external 'opengl32.dll' name 'glEvalCoord1f';
    public static z_EvalCoord1f_ovr0 := _z_EvalCoord1f_ovr0;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure EvalCoord1f(u: single) := z_EvalCoord1f_ovr0(u);
    
    // added in gl1.0, deprecated in gl3.2
    private static procedure _z_EvalCoord1fv_ovr0([MarshalAs(UnmanagedType.LPArray)] u: array of single);
    external 'opengl32.dll' name 'glEvalCoord1fv';
    public static z_EvalCoord1fv_ovr0 := _z_EvalCoord1fv_ovr0;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure EvalCoord1fv(u: array of single) := z_EvalCoord1fv_ovr0(u);
    private static procedure _z_EvalCoord1fv_ovr1(var u: single);
    external 'opengl32.dll' name 'glEvalCoord1fv';
    public static z_EvalCoord1fv_ovr1 := _z_EvalCoord1fv_ovr1;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure EvalCoord1fv(var u: single) := z_EvalCoord1fv_ovr1(u);
    private static procedure _z_EvalCoord1fv_ovr2(u: IntPtr);
    external 'opengl32.dll' name 'glEvalCoord1fv';
    public static z_EvalCoord1fv_ovr2 := _z_EvalCoord1fv_ovr2;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure EvalCoord1fv(u: IntPtr) := z_EvalCoord1fv_ovr2(u);
    
    // added in gl1.0, deprecated in gl3.2
    private static procedure _z_EvalCoord2d_ovr0(u: real; v: real);
    external 'opengl32.dll' name 'glEvalCoord2d';
    public static z_EvalCoord2d_ovr0 := _z_EvalCoord2d_ovr0;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure EvalCoord2d(u: real; v: real) := z_EvalCoord2d_ovr0(u, v);
    
    // added in gl1.0, deprecated in gl3.2
    private static procedure _z_EvalCoord2dv_ovr0([MarshalAs(UnmanagedType.LPArray)] u: array of real);
    external 'opengl32.dll' name 'glEvalCoord2dv';
    public static z_EvalCoord2dv_ovr0 := _z_EvalCoord2dv_ovr0;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure EvalCoord2dv(u: array of real) := z_EvalCoord2dv_ovr0(u);
    private static procedure _z_EvalCoord2dv_ovr1(var u: real);
    external 'opengl32.dll' name 'glEvalCoord2dv';
    public static z_EvalCoord2dv_ovr1 := _z_EvalCoord2dv_ovr1;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure EvalCoord2dv(var u: real) := z_EvalCoord2dv_ovr1(u);
    private static procedure _z_EvalCoord2dv_ovr2(u: IntPtr);
    external 'opengl32.dll' name 'glEvalCoord2dv';
    public static z_EvalCoord2dv_ovr2 := _z_EvalCoord2dv_ovr2;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure EvalCoord2dv(u: IntPtr) := z_EvalCoord2dv_ovr2(u);
    
    // added in gl1.0, deprecated in gl3.2
    private static procedure _z_EvalCoord2f_ovr0(u: single; v: single);
    external 'opengl32.dll' name 'glEvalCoord2f';
    public static z_EvalCoord2f_ovr0 := _z_EvalCoord2f_ovr0;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure EvalCoord2f(u: single; v: single) := z_EvalCoord2f_ovr0(u, v);
    
    // added in gl1.0, deprecated in gl3.2
    private static procedure _z_EvalCoord2fv_ovr0([MarshalAs(UnmanagedType.LPArray)] u: array of single);
    external 'opengl32.dll' name 'glEvalCoord2fv';
    public static z_EvalCoord2fv_ovr0 := _z_EvalCoord2fv_ovr0;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure EvalCoord2fv(u: array of single) := z_EvalCoord2fv_ovr0(u);
    private static procedure _z_EvalCoord2fv_ovr1(var u: single);
    external 'opengl32.dll' name 'glEvalCoord2fv';
    public static z_EvalCoord2fv_ovr1 := _z_EvalCoord2fv_ovr1;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure EvalCoord2fv(var u: single) := z_EvalCoord2fv_ovr1(u);
    private static procedure _z_EvalCoord2fv_ovr2(u: IntPtr);
    external 'opengl32.dll' name 'glEvalCoord2fv';
    public static z_EvalCoord2fv_ovr2 := _z_EvalCoord2fv_ovr2;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure EvalCoord2fv(u: IntPtr) := z_EvalCoord2fv_ovr2(u);
    
    // added in gl1.0, deprecated in gl3.2
    private static procedure _z_EvalMesh1_ovr0(mode: MeshMode1; i1: Int32; i2: Int32);
    external 'opengl32.dll' name 'glEvalMesh1';
    public static z_EvalMesh1_ovr0 := _z_EvalMesh1_ovr0;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure EvalMesh1(mode: MeshMode1; i1: Int32; i2: Int32) := z_EvalMesh1_ovr0(mode, i1, i2);
    
    // added in gl1.0, deprecated in gl3.2
    private static procedure _z_EvalMesh2_ovr0(mode: MeshMode2; i1: Int32; i2: Int32; j1: Int32; j2: Int32);
    external 'opengl32.dll' name 'glEvalMesh2';
    public static z_EvalMesh2_ovr0 := _z_EvalMesh2_ovr0;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure EvalMesh2(mode: MeshMode2; i1: Int32; i2: Int32; j1: Int32; j2: Int32) := z_EvalMesh2_ovr0(mode, i1, i2, j1, j2);
    
    // added in gl1.0, deprecated in gl3.2
    private static procedure _z_EvalPoint1_ovr0(i: Int32);
    external 'opengl32.dll' name 'glEvalPoint1';
    public static z_EvalPoint1_ovr0 := _z_EvalPoint1_ovr0;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure EvalPoint1(i: Int32) := z_EvalPoint1_ovr0(i);
    
    // added in gl1.0, deprecated in gl3.2
    private static procedure _z_EvalPoint2_ovr0(i: Int32; j: Int32);
    external 'opengl32.dll' name 'glEvalPoint2';
    public static z_EvalPoint2_ovr0 := _z_EvalPoint2_ovr0;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure EvalPoint2(i: Int32; j: Int32) := z_EvalPoint2_ovr0(i, j);
    
    // added in gl1.0, deprecated in gl3.2
    private static procedure _z_FeedbackBuffer_ovr0(size: Int32; &type: FeedbackType; [MarshalAs(UnmanagedType.LPArray)] buffer: array of single);
    external 'opengl32.dll' name 'glFeedbackBuffer';
    public static z_FeedbackBuffer_ovr0 := _z_FeedbackBuffer_ovr0;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure FeedbackBuffer(size: Int32; &type: FeedbackType; buffer: array of single) := z_FeedbackBuffer_ovr0(size, &type, buffer);
    private static procedure _z_FeedbackBuffer_ovr1(size: Int32; &type: FeedbackType; var buffer: single);
    external 'opengl32.dll' name 'glFeedbackBuffer';
    public static z_FeedbackBuffer_ovr1 := _z_FeedbackBuffer_ovr1;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure FeedbackBuffer(size: Int32; &type: FeedbackType; var buffer: single) := z_FeedbackBuffer_ovr1(size, &type, buffer);
    private static procedure _z_FeedbackBuffer_ovr2(size: Int32; &type: FeedbackType; buffer: IntPtr);
    external 'opengl32.dll' name 'glFeedbackBuffer';
    public static z_FeedbackBuffer_ovr2 := _z_FeedbackBuffer_ovr2;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure FeedbackBuffer(size: Int32; &type: FeedbackType; buffer: IntPtr) := z_FeedbackBuffer_ovr2(size, &type, buffer);
    
    // added in gl1.4, deprecated in gl3.2
    public z_FogCoordd_adr := GetFuncAdr('glFogCoordd');
    public z_FogCoordd_ovr_0 := GetFuncOrNil&<procedure(coord: real)>(z_FogCoordd_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure FogCoordd(coord: real);
    begin
      z_FogCoordd_ovr_0(coord);
    end;
    
    // added in gl1.4, deprecated in gl3.2
    public z_FogCoorddv_adr := GetFuncAdr('glFogCoorddv');
    public z_FogCoorddv_ovr_0 := GetFuncOrNil&<procedure(var coord: real)>(z_FogCoorddv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure FogCoorddv(coord: array of real);
    begin
      z_FogCoorddv_ovr_0(coord[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure FogCoorddv(var coord: real);
    begin
      z_FogCoorddv_ovr_0(coord);
    end;
    public z_FogCoorddv_ovr_2 := GetFuncOrNil&<procedure(coord: IntPtr)>(z_FogCoorddv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure FogCoorddv(coord: IntPtr);
    begin
      z_FogCoorddv_ovr_2(coord);
    end;
    
    // added in gl1.4, deprecated in gl3.2
    public z_FogCoordf_adr := GetFuncAdr('glFogCoordf');
    public z_FogCoordf_ovr_0 := GetFuncOrNil&<procedure(coord: single)>(z_FogCoordf_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure FogCoordf(coord: single);
    begin
      z_FogCoordf_ovr_0(coord);
    end;
    
    // added in gl1.4, deprecated in gl3.2
    public z_FogCoordfv_adr := GetFuncAdr('glFogCoordfv');
    public z_FogCoordfv_ovr_0 := GetFuncOrNil&<procedure(var coord: single)>(z_FogCoordfv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure FogCoordfv(coord: array of single);
    begin
      z_FogCoordfv_ovr_0(coord[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure FogCoordfv(var coord: single);
    begin
      z_FogCoordfv_ovr_0(coord);
    end;
    public z_FogCoordfv_ovr_2 := GetFuncOrNil&<procedure(coord: IntPtr)>(z_FogCoordfv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure FogCoordfv(coord: IntPtr);
    begin
      z_FogCoordfv_ovr_2(coord);
    end;
    
    // added in gl1.4, deprecated in gl3.2
    public z_FogCoordPointer_adr := GetFuncAdr('glFogCoordPointer');
    public z_FogCoordPointer_ovr_0 := GetFuncOrNil&<procedure(&type: FogPointerTypeEXT; stride: Int32; pointer: IntPtr)>(z_FogCoordPointer_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure FogCoordPointer(&type: FogPointerTypeEXT; stride: Int32; pointer: IntPtr);
    begin
      z_FogCoordPointer_ovr_0(&type, stride, pointer);
    end;
    
    // added in gl1.0, deprecated in gl3.2
    private static procedure _z_Fogf_ovr0(pname: FogParameter; param: single);
    external 'opengl32.dll' name 'glFogf';
    public static z_Fogf_ovr0 := _z_Fogf_ovr0;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Fogf(pname: FogParameter; param: single) := z_Fogf_ovr0(pname, param);
    
    // added in gl1.0, deprecated in gl3.2
    private static procedure _z_Fogfv_ovr0(pname: FogParameter; [MarshalAs(UnmanagedType.LPArray)] &params: array of single);
    external 'opengl32.dll' name 'glFogfv';
    public static z_Fogfv_ovr0 := _z_Fogfv_ovr0;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Fogfv(pname: FogParameter; &params: array of single) := z_Fogfv_ovr0(pname, &params);
    private static procedure _z_Fogfv_ovr1(pname: FogParameter; var &params: single);
    external 'opengl32.dll' name 'glFogfv';
    public static z_Fogfv_ovr1 := _z_Fogfv_ovr1;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Fogfv(pname: FogParameter; var &params: single) := z_Fogfv_ovr1(pname, &params);
    private static procedure _z_Fogfv_ovr2(pname: FogParameter; &params: IntPtr);
    external 'opengl32.dll' name 'glFogfv';
    public static z_Fogfv_ovr2 := _z_Fogfv_ovr2;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Fogfv(pname: FogParameter; &params: IntPtr) := z_Fogfv_ovr2(pname, &params);
    
    // added in gl1.0, deprecated in gl3.2
    private static procedure _z_Fogi_ovr0(pname: FogParameter; param: Int32);
    external 'opengl32.dll' name 'glFogi';
    public static z_Fogi_ovr0 := _z_Fogi_ovr0;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Fogi(pname: FogParameter; param: Int32) := z_Fogi_ovr0(pname, param);
    
    // added in gl1.0, deprecated in gl3.2
    private static procedure _z_Fogiv_ovr0(pname: FogParameter; [MarshalAs(UnmanagedType.LPArray)] &params: array of Int32);
    external 'opengl32.dll' name 'glFogiv';
    public static z_Fogiv_ovr0 := _z_Fogiv_ovr0;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Fogiv(pname: FogParameter; &params: array of Int32) := z_Fogiv_ovr0(pname, &params);
    private static procedure _z_Fogiv_ovr1(pname: FogParameter; var &params: Int32);
    external 'opengl32.dll' name 'glFogiv';
    public static z_Fogiv_ovr1 := _z_Fogiv_ovr1;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Fogiv(pname: FogParameter; var &params: Int32) := z_Fogiv_ovr1(pname, &params);
    private static procedure _z_Fogiv_ovr2(pname: FogParameter; &params: IntPtr);
    external 'opengl32.dll' name 'glFogiv';
    public static z_Fogiv_ovr2 := _z_Fogiv_ovr2;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Fogiv(pname: FogParameter; &params: IntPtr) := z_Fogiv_ovr2(pname, &params);
    
    // added in gl1.0, deprecated in gl3.2
    private static procedure _z_Frustum_ovr0(left: real; right: real; bottom: real; top: real; zNear: real; zFar: real);
    external 'opengl32.dll' name 'glFrustum';
    public static z_Frustum_ovr0 := _z_Frustum_ovr0;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Frustum(left: real; right: real; bottom: real; top: real; zNear: real; zFar: real) := z_Frustum_ovr0(left, right, bottom, top, zNear, zFar);
    
    // added in gl1.0, deprecated in gl3.2
    private static function _z_GenLists_ovr0(range: Int32): UInt32;
    external 'opengl32.dll' name 'glGenLists';
    public static z_GenLists_ovr0 := _z_GenLists_ovr0;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GenLists(range: Int32): UInt32 := z_GenLists_ovr0(range);
    
    // added in gl1.0, deprecated in gl3.2
    private static procedure _z_GetClipPlane_ovr0(plane: ClipPlaneName; [MarshalAs(UnmanagedType.LPArray)] equation: array of real);
    external 'opengl32.dll' name 'glGetClipPlane';
    public static z_GetClipPlane_ovr0 := _z_GetClipPlane_ovr0;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetClipPlane(plane: ClipPlaneName; equation: array of real) := z_GetClipPlane_ovr0(plane, equation);
    private static procedure _z_GetClipPlane_ovr1(plane: ClipPlaneName; var equation: real);
    external 'opengl32.dll' name 'glGetClipPlane';
    public static z_GetClipPlane_ovr1 := _z_GetClipPlane_ovr1;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetClipPlane(plane: ClipPlaneName; var equation: real) := z_GetClipPlane_ovr1(plane, equation);
    private static procedure _z_GetClipPlane_ovr2(plane: ClipPlaneName; equation: IntPtr);
    external 'opengl32.dll' name 'glGetClipPlane';
    public static z_GetClipPlane_ovr2 := _z_GetClipPlane_ovr2;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetClipPlane(plane: ClipPlaneName; equation: IntPtr) := z_GetClipPlane_ovr2(plane, equation);
    
    // added in gl1.0, deprecated in gl3.2
    private static procedure _z_GetLightfv_ovr0(light: LightName; pname: LightParameter; [MarshalAs(UnmanagedType.LPArray)] &params: array of single);
    external 'opengl32.dll' name 'glGetLightfv';
    public static z_GetLightfv_ovr0 := _z_GetLightfv_ovr0;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetLightfv(light: LightName; pname: LightParameter; &params: array of single) := z_GetLightfv_ovr0(light, pname, &params);
    private static procedure _z_GetLightfv_ovr1(light: LightName; pname: LightParameter; var &params: single);
    external 'opengl32.dll' name 'glGetLightfv';
    public static z_GetLightfv_ovr1 := _z_GetLightfv_ovr1;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetLightfv(light: LightName; pname: LightParameter; var &params: single) := z_GetLightfv_ovr1(light, pname, &params);
    private static procedure _z_GetLightfv_ovr2(light: LightName; pname: LightParameter; &params: IntPtr);
    external 'opengl32.dll' name 'glGetLightfv';
    public static z_GetLightfv_ovr2 := _z_GetLightfv_ovr2;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetLightfv(light: LightName; pname: LightParameter; &params: IntPtr) := z_GetLightfv_ovr2(light, pname, &params);
    
    // added in gl1.0, deprecated in gl3.2
    private static procedure _z_GetLightiv_ovr0(light: LightName; pname: LightParameter; [MarshalAs(UnmanagedType.LPArray)] &params: array of Int32);
    external 'opengl32.dll' name 'glGetLightiv';
    public static z_GetLightiv_ovr0 := _z_GetLightiv_ovr0;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetLightiv(light: LightName; pname: LightParameter; &params: array of Int32) := z_GetLightiv_ovr0(light, pname, &params);
    private static procedure _z_GetLightiv_ovr1(light: LightName; pname: LightParameter; var &params: Int32);
    external 'opengl32.dll' name 'glGetLightiv';
    public static z_GetLightiv_ovr1 := _z_GetLightiv_ovr1;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetLightiv(light: LightName; pname: LightParameter; var &params: Int32) := z_GetLightiv_ovr1(light, pname, &params);
    private static procedure _z_GetLightiv_ovr2(light: LightName; pname: LightParameter; &params: IntPtr);
    external 'opengl32.dll' name 'glGetLightiv';
    public static z_GetLightiv_ovr2 := _z_GetLightiv_ovr2;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetLightiv(light: LightName; pname: LightParameter; &params: IntPtr) := z_GetLightiv_ovr2(light, pname, &params);
    
    // added in gl1.0, deprecated in gl3.2
    private static procedure _z_GetMapdv_ovr0(target: MapTarget; query: GetMapQuery; [MarshalAs(UnmanagedType.LPArray)] v: array of real);
    external 'opengl32.dll' name 'glGetMapdv';
    public static z_GetMapdv_ovr0 := _z_GetMapdv_ovr0;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetMapdv(target: MapTarget; query: GetMapQuery; v: array of real) := z_GetMapdv_ovr0(target, query, v);
    private static procedure _z_GetMapdv_ovr1(target: MapTarget; query: GetMapQuery; var v: real);
    external 'opengl32.dll' name 'glGetMapdv';
    public static z_GetMapdv_ovr1 := _z_GetMapdv_ovr1;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetMapdv(target: MapTarget; query: GetMapQuery; var v: real) := z_GetMapdv_ovr1(target, query, v);
    private static procedure _z_GetMapdv_ovr2(target: MapTarget; query: GetMapQuery; v: IntPtr);
    external 'opengl32.dll' name 'glGetMapdv';
    public static z_GetMapdv_ovr2 := _z_GetMapdv_ovr2;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetMapdv(target: MapTarget; query: GetMapQuery; v: IntPtr) := z_GetMapdv_ovr2(target, query, v);
    
    // added in gl1.0, deprecated in gl3.2
    private static procedure _z_GetMapfv_ovr0(target: MapTarget; query: GetMapQuery; [MarshalAs(UnmanagedType.LPArray)] v: array of single);
    external 'opengl32.dll' name 'glGetMapfv';
    public static z_GetMapfv_ovr0 := _z_GetMapfv_ovr0;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetMapfv(target: MapTarget; query: GetMapQuery; v: array of single) := z_GetMapfv_ovr0(target, query, v);
    private static procedure _z_GetMapfv_ovr1(target: MapTarget; query: GetMapQuery; var v: single);
    external 'opengl32.dll' name 'glGetMapfv';
    public static z_GetMapfv_ovr1 := _z_GetMapfv_ovr1;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetMapfv(target: MapTarget; query: GetMapQuery; var v: single) := z_GetMapfv_ovr1(target, query, v);
    private static procedure _z_GetMapfv_ovr2(target: MapTarget; query: GetMapQuery; v: IntPtr);
    external 'opengl32.dll' name 'glGetMapfv';
    public static z_GetMapfv_ovr2 := _z_GetMapfv_ovr2;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetMapfv(target: MapTarget; query: GetMapQuery; v: IntPtr) := z_GetMapfv_ovr2(target, query, v);
    
    // added in gl1.0, deprecated in gl3.2
    private static procedure _z_GetMapiv_ovr0(target: MapTarget; query: GetMapQuery; [MarshalAs(UnmanagedType.LPArray)] v: array of Int32);
    external 'opengl32.dll' name 'glGetMapiv';
    public static z_GetMapiv_ovr0 := _z_GetMapiv_ovr0;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetMapiv(target: MapTarget; query: GetMapQuery; v: array of Int32) := z_GetMapiv_ovr0(target, query, v);
    private static procedure _z_GetMapiv_ovr1(target: MapTarget; query: GetMapQuery; var v: Int32);
    external 'opengl32.dll' name 'glGetMapiv';
    public static z_GetMapiv_ovr1 := _z_GetMapiv_ovr1;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetMapiv(target: MapTarget; query: GetMapQuery; var v: Int32) := z_GetMapiv_ovr1(target, query, v);
    private static procedure _z_GetMapiv_ovr2(target: MapTarget; query: GetMapQuery; v: IntPtr);
    external 'opengl32.dll' name 'glGetMapiv';
    public static z_GetMapiv_ovr2 := _z_GetMapiv_ovr2;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetMapiv(target: MapTarget; query: GetMapQuery; v: IntPtr) := z_GetMapiv_ovr2(target, query, v);
    
    // added in gl1.0, deprecated in gl3.2
    private static procedure _z_GetMaterialfv_ovr0(face: DummyEnum; pname: MaterialParameter; [MarshalAs(UnmanagedType.LPArray)] &params: array of single);
    external 'opengl32.dll' name 'glGetMaterialfv';
    public static z_GetMaterialfv_ovr0 := _z_GetMaterialfv_ovr0;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetMaterialfv(face: DummyEnum; pname: MaterialParameter; &params: array of single) := z_GetMaterialfv_ovr0(face, pname, &params);
    private static procedure _z_GetMaterialfv_ovr1(face: DummyEnum; pname: MaterialParameter; var &params: single);
    external 'opengl32.dll' name 'glGetMaterialfv';
    public static z_GetMaterialfv_ovr1 := _z_GetMaterialfv_ovr1;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetMaterialfv(face: DummyEnum; pname: MaterialParameter; var &params: single) := z_GetMaterialfv_ovr1(face, pname, &params);
    private static procedure _z_GetMaterialfv_ovr2(face: DummyEnum; pname: MaterialParameter; &params: IntPtr);
    external 'opengl32.dll' name 'glGetMaterialfv';
    public static z_GetMaterialfv_ovr2 := _z_GetMaterialfv_ovr2;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetMaterialfv(face: DummyEnum; pname: MaterialParameter; &params: IntPtr) := z_GetMaterialfv_ovr2(face, pname, &params);
    
    // added in gl1.0, deprecated in gl3.2
    private static procedure _z_GetMaterialiv_ovr0(face: DummyEnum; pname: MaterialParameter; [MarshalAs(UnmanagedType.LPArray)] &params: array of Int32);
    external 'opengl32.dll' name 'glGetMaterialiv';
    public static z_GetMaterialiv_ovr0 := _z_GetMaterialiv_ovr0;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetMaterialiv(face: DummyEnum; pname: MaterialParameter; &params: array of Int32) := z_GetMaterialiv_ovr0(face, pname, &params);
    private static procedure _z_GetMaterialiv_ovr1(face: DummyEnum; pname: MaterialParameter; var &params: Int32);
    external 'opengl32.dll' name 'glGetMaterialiv';
    public static z_GetMaterialiv_ovr1 := _z_GetMaterialiv_ovr1;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetMaterialiv(face: DummyEnum; pname: MaterialParameter; var &params: Int32) := z_GetMaterialiv_ovr1(face, pname, &params);
    private static procedure _z_GetMaterialiv_ovr2(face: DummyEnum; pname: MaterialParameter; &params: IntPtr);
    external 'opengl32.dll' name 'glGetMaterialiv';
    public static z_GetMaterialiv_ovr2 := _z_GetMaterialiv_ovr2;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetMaterialiv(face: DummyEnum; pname: MaterialParameter; &params: IntPtr) := z_GetMaterialiv_ovr2(face, pname, &params);
    
    // added in gl1.0, deprecated in gl3.2
    private static procedure _z_GetPixelMapfv_ovr0(map: PixelMap; [MarshalAs(UnmanagedType.LPArray)] values: array of single);
    external 'opengl32.dll' name 'glGetPixelMapfv';
    public static z_GetPixelMapfv_ovr0 := _z_GetPixelMapfv_ovr0;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetPixelMapfv(map: PixelMap; values: array of single) := z_GetPixelMapfv_ovr0(map, values);
    private static procedure _z_GetPixelMapfv_ovr1(map: PixelMap; var values: single);
    external 'opengl32.dll' name 'glGetPixelMapfv';
    public static z_GetPixelMapfv_ovr1 := _z_GetPixelMapfv_ovr1;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetPixelMapfv(map: PixelMap; var values: single) := z_GetPixelMapfv_ovr1(map, values);
    private static procedure _z_GetPixelMapfv_ovr2(map: PixelMap; values: IntPtr);
    external 'opengl32.dll' name 'glGetPixelMapfv';
    public static z_GetPixelMapfv_ovr2 := _z_GetPixelMapfv_ovr2;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetPixelMapfv(map: PixelMap; values: IntPtr) := z_GetPixelMapfv_ovr2(map, values);
    
    // added in gl1.0, deprecated in gl3.2
    private static procedure _z_GetPixelMapuiv_ovr0(map: PixelMap; [MarshalAs(UnmanagedType.LPArray)] values: array of UInt32);
    external 'opengl32.dll' name 'glGetPixelMapuiv';
    public static z_GetPixelMapuiv_ovr0 := _z_GetPixelMapuiv_ovr0;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetPixelMapuiv(map: PixelMap; values: array of UInt32) := z_GetPixelMapuiv_ovr0(map, values);
    private static procedure _z_GetPixelMapuiv_ovr1(map: PixelMap; var values: UInt32);
    external 'opengl32.dll' name 'glGetPixelMapuiv';
    public static z_GetPixelMapuiv_ovr1 := _z_GetPixelMapuiv_ovr1;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetPixelMapuiv(map: PixelMap; var values: UInt32) := z_GetPixelMapuiv_ovr1(map, values);
    private static procedure _z_GetPixelMapuiv_ovr2(map: PixelMap; values: IntPtr);
    external 'opengl32.dll' name 'glGetPixelMapuiv';
    public static z_GetPixelMapuiv_ovr2 := _z_GetPixelMapuiv_ovr2;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetPixelMapuiv(map: PixelMap; values: IntPtr) := z_GetPixelMapuiv_ovr2(map, values);
    
    // added in gl1.0, deprecated in gl3.2
    private static procedure _z_GetPixelMapusv_ovr0(map: PixelMap; [MarshalAs(UnmanagedType.LPArray)] values: array of UInt16);
    external 'opengl32.dll' name 'glGetPixelMapusv';
    public static z_GetPixelMapusv_ovr0 := _z_GetPixelMapusv_ovr0;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetPixelMapusv(map: PixelMap; values: array of UInt16) := z_GetPixelMapusv_ovr0(map, values);
    private static procedure _z_GetPixelMapusv_ovr1(map: PixelMap; var values: UInt16);
    external 'opengl32.dll' name 'glGetPixelMapusv';
    public static z_GetPixelMapusv_ovr1 := _z_GetPixelMapusv_ovr1;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetPixelMapusv(map: PixelMap; var values: UInt16) := z_GetPixelMapusv_ovr1(map, values);
    private static procedure _z_GetPixelMapusv_ovr2(map: PixelMap; values: IntPtr);
    external 'opengl32.dll' name 'glGetPixelMapusv';
    public static z_GetPixelMapusv_ovr2 := _z_GetPixelMapusv_ovr2;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetPixelMapusv(map: PixelMap; values: IntPtr) := z_GetPixelMapusv_ovr2(map, values);
    
    // added in gl1.0, deprecated in gl3.2
    private static procedure _z_GetPolygonStipple_ovr0([MarshalAs(UnmanagedType.LPArray)] mask: array of Byte);
    external 'opengl32.dll' name 'glGetPolygonStipple';
    public static z_GetPolygonStipple_ovr0 := _z_GetPolygonStipple_ovr0;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetPolygonStipple(mask: array of Byte) := z_GetPolygonStipple_ovr0(mask);
    private static procedure _z_GetPolygonStipple_ovr1(var mask: Byte);
    external 'opengl32.dll' name 'glGetPolygonStipple';
    public static z_GetPolygonStipple_ovr1 := _z_GetPolygonStipple_ovr1;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetPolygonStipple(var mask: Byte) := z_GetPolygonStipple_ovr1(mask);
    private static procedure _z_GetPolygonStipple_ovr2(mask: IntPtr);
    external 'opengl32.dll' name 'glGetPolygonStipple';
    public static z_GetPolygonStipple_ovr2 := _z_GetPolygonStipple_ovr2;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetPolygonStipple(mask: IntPtr) := z_GetPolygonStipple_ovr2(mask);
    
    // added in gl1.0, deprecated in gl3.2
    private static procedure _z_GetTexEnvfv_ovr0(target: TextureEnvTarget; pname: TextureEnvParameter; [MarshalAs(UnmanagedType.LPArray)] &params: array of single);
    external 'opengl32.dll' name 'glGetTexEnvfv';
    public static z_GetTexEnvfv_ovr0 := _z_GetTexEnvfv_ovr0;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetTexEnvfv(target: TextureEnvTarget; pname: TextureEnvParameter; &params: array of single) := z_GetTexEnvfv_ovr0(target, pname, &params);
    private static procedure _z_GetTexEnvfv_ovr1(target: TextureEnvTarget; pname: TextureEnvParameter; var &params: single);
    external 'opengl32.dll' name 'glGetTexEnvfv';
    public static z_GetTexEnvfv_ovr1 := _z_GetTexEnvfv_ovr1;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetTexEnvfv(target: TextureEnvTarget; pname: TextureEnvParameter; var &params: single) := z_GetTexEnvfv_ovr1(target, pname, &params);
    private static procedure _z_GetTexEnvfv_ovr2(target: TextureEnvTarget; pname: TextureEnvParameter; &params: IntPtr);
    external 'opengl32.dll' name 'glGetTexEnvfv';
    public static z_GetTexEnvfv_ovr2 := _z_GetTexEnvfv_ovr2;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetTexEnvfv(target: TextureEnvTarget; pname: TextureEnvParameter; &params: IntPtr) := z_GetTexEnvfv_ovr2(target, pname, &params);
    
    // added in gl1.0, deprecated in gl3.2
    private static procedure _z_GetTexEnviv_ovr0(target: TextureEnvTarget; pname: TextureEnvParameter; [MarshalAs(UnmanagedType.LPArray)] &params: array of Int32);
    external 'opengl32.dll' name 'glGetTexEnviv';
    public static z_GetTexEnviv_ovr0 := _z_GetTexEnviv_ovr0;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetTexEnviv(target: TextureEnvTarget; pname: TextureEnvParameter; &params: array of Int32) := z_GetTexEnviv_ovr0(target, pname, &params);
    private static procedure _z_GetTexEnviv_ovr1(target: TextureEnvTarget; pname: TextureEnvParameter; var &params: Int32);
    external 'opengl32.dll' name 'glGetTexEnviv';
    public static z_GetTexEnviv_ovr1 := _z_GetTexEnviv_ovr1;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetTexEnviv(target: TextureEnvTarget; pname: TextureEnvParameter; var &params: Int32) := z_GetTexEnviv_ovr1(target, pname, &params);
    private static procedure _z_GetTexEnviv_ovr2(target: TextureEnvTarget; pname: TextureEnvParameter; &params: IntPtr);
    external 'opengl32.dll' name 'glGetTexEnviv';
    public static z_GetTexEnviv_ovr2 := _z_GetTexEnviv_ovr2;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetTexEnviv(target: TextureEnvTarget; pname: TextureEnvParameter; &params: IntPtr) := z_GetTexEnviv_ovr2(target, pname, &params);
    
    // added in gl1.0, deprecated in gl3.2
    private static procedure _z_GetTexGendv_ovr0(coord: TextureCoordName; pname: TextureGenParameter; [MarshalAs(UnmanagedType.LPArray)] &params: array of real);
    external 'opengl32.dll' name 'glGetTexGendv';
    public static z_GetTexGendv_ovr0 := _z_GetTexGendv_ovr0;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetTexGendv(coord: TextureCoordName; pname: TextureGenParameter; &params: array of real) := z_GetTexGendv_ovr0(coord, pname, &params);
    private static procedure _z_GetTexGendv_ovr1(coord: TextureCoordName; pname: TextureGenParameter; var &params: real);
    external 'opengl32.dll' name 'glGetTexGendv';
    public static z_GetTexGendv_ovr1 := _z_GetTexGendv_ovr1;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetTexGendv(coord: TextureCoordName; pname: TextureGenParameter; var &params: real) := z_GetTexGendv_ovr1(coord, pname, &params);
    private static procedure _z_GetTexGendv_ovr2(coord: TextureCoordName; pname: TextureGenParameter; &params: IntPtr);
    external 'opengl32.dll' name 'glGetTexGendv';
    public static z_GetTexGendv_ovr2 := _z_GetTexGendv_ovr2;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetTexGendv(coord: TextureCoordName; pname: TextureGenParameter; &params: IntPtr) := z_GetTexGendv_ovr2(coord, pname, &params);
    
    // added in gl1.0, deprecated in gl3.2
    private static procedure _z_GetTexGenfv_ovr0(coord: TextureCoordName; pname: TextureGenParameter; [MarshalAs(UnmanagedType.LPArray)] &params: array of single);
    external 'opengl32.dll' name 'glGetTexGenfv';
    public static z_GetTexGenfv_ovr0 := _z_GetTexGenfv_ovr0;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetTexGenfv(coord: TextureCoordName; pname: TextureGenParameter; &params: array of single) := z_GetTexGenfv_ovr0(coord, pname, &params);
    private static procedure _z_GetTexGenfv_ovr1(coord: TextureCoordName; pname: TextureGenParameter; var &params: single);
    external 'opengl32.dll' name 'glGetTexGenfv';
    public static z_GetTexGenfv_ovr1 := _z_GetTexGenfv_ovr1;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetTexGenfv(coord: TextureCoordName; pname: TextureGenParameter; var &params: single) := z_GetTexGenfv_ovr1(coord, pname, &params);
    private static procedure _z_GetTexGenfv_ovr2(coord: TextureCoordName; pname: TextureGenParameter; &params: IntPtr);
    external 'opengl32.dll' name 'glGetTexGenfv';
    public static z_GetTexGenfv_ovr2 := _z_GetTexGenfv_ovr2;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetTexGenfv(coord: TextureCoordName; pname: TextureGenParameter; &params: IntPtr) := z_GetTexGenfv_ovr2(coord, pname, &params);
    
    // added in gl1.0, deprecated in gl3.2
    private static procedure _z_GetTexGeniv_ovr0(coord: TextureCoordName; pname: TextureGenParameter; [MarshalAs(UnmanagedType.LPArray)] &params: array of Int32);
    external 'opengl32.dll' name 'glGetTexGeniv';
    public static z_GetTexGeniv_ovr0 := _z_GetTexGeniv_ovr0;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetTexGeniv(coord: TextureCoordName; pname: TextureGenParameter; &params: array of Int32) := z_GetTexGeniv_ovr0(coord, pname, &params);
    private static procedure _z_GetTexGeniv_ovr1(coord: TextureCoordName; pname: TextureGenParameter; var &params: Int32);
    external 'opengl32.dll' name 'glGetTexGeniv';
    public static z_GetTexGeniv_ovr1 := _z_GetTexGeniv_ovr1;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetTexGeniv(coord: TextureCoordName; pname: TextureGenParameter; var &params: Int32) := z_GetTexGeniv_ovr1(coord, pname, &params);
    private static procedure _z_GetTexGeniv_ovr2(coord: TextureCoordName; pname: TextureGenParameter; &params: IntPtr);
    external 'opengl32.dll' name 'glGetTexGeniv';
    public static z_GetTexGeniv_ovr2 := _z_GetTexGeniv_ovr2;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetTexGeniv(coord: TextureCoordName; pname: TextureGenParameter; &params: IntPtr) := z_GetTexGeniv_ovr2(coord, pname, &params);
    
    // added in gl1.0, deprecated in gl3.2
    private static procedure _z_Indexd_ovr0(c: real);
    external 'opengl32.dll' name 'glIndexd';
    public static z_Indexd_ovr0 := _z_Indexd_ovr0;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Indexd(c: real) := z_Indexd_ovr0(c);
    
    // added in gl1.0, deprecated in gl3.2
    private static procedure _z_Indexdv_ovr0([MarshalAs(UnmanagedType.LPArray)] c: array of real);
    external 'opengl32.dll' name 'glIndexdv';
    public static z_Indexdv_ovr0 := _z_Indexdv_ovr0;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Indexdv(c: array of real) := z_Indexdv_ovr0(c);
    private static procedure _z_Indexdv_ovr1(var c: real);
    external 'opengl32.dll' name 'glIndexdv';
    public static z_Indexdv_ovr1 := _z_Indexdv_ovr1;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Indexdv(var c: real) := z_Indexdv_ovr1(c);
    private static procedure _z_Indexdv_ovr2(c: IntPtr);
    external 'opengl32.dll' name 'glIndexdv';
    public static z_Indexdv_ovr2 := _z_Indexdv_ovr2;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Indexdv(c: IntPtr) := z_Indexdv_ovr2(c);
    
    // added in gl1.0, deprecated in gl3.2
    private static procedure _z_Indexf_ovr0(c: single);
    external 'opengl32.dll' name 'glIndexf';
    public static z_Indexf_ovr0 := _z_Indexf_ovr0;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Indexf(c: single) := z_Indexf_ovr0(c);
    
    // added in gl1.0, deprecated in gl3.2
    private static procedure _z_Indexfv_ovr0([MarshalAs(UnmanagedType.LPArray)] c: array of single);
    external 'opengl32.dll' name 'glIndexfv';
    public static z_Indexfv_ovr0 := _z_Indexfv_ovr0;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Indexfv(c: array of single) := z_Indexfv_ovr0(c);
    private static procedure _z_Indexfv_ovr1(var c: single);
    external 'opengl32.dll' name 'glIndexfv';
    public static z_Indexfv_ovr1 := _z_Indexfv_ovr1;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Indexfv(var c: single) := z_Indexfv_ovr1(c);
    private static procedure _z_Indexfv_ovr2(c: IntPtr);
    external 'opengl32.dll' name 'glIndexfv';
    public static z_Indexfv_ovr2 := _z_Indexfv_ovr2;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Indexfv(c: IntPtr) := z_Indexfv_ovr2(c);
    
    // added in gl1.0, deprecated in gl3.2
    private static procedure _z_Indexi_ovr0(c: Int32);
    external 'opengl32.dll' name 'glIndexi';
    public static z_Indexi_ovr0 := _z_Indexi_ovr0;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Indexi(c: Int32) := z_Indexi_ovr0(c);
    
    // added in gl1.0, deprecated in gl3.2
    private static procedure _z_Indexiv_ovr0([MarshalAs(UnmanagedType.LPArray)] c: array of Int32);
    external 'opengl32.dll' name 'glIndexiv';
    public static z_Indexiv_ovr0 := _z_Indexiv_ovr0;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Indexiv(c: array of Int32) := z_Indexiv_ovr0(c);
    private static procedure _z_Indexiv_ovr1(var c: Int32);
    external 'opengl32.dll' name 'glIndexiv';
    public static z_Indexiv_ovr1 := _z_Indexiv_ovr1;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Indexiv(var c: Int32) := z_Indexiv_ovr1(c);
    private static procedure _z_Indexiv_ovr2(c: IntPtr);
    external 'opengl32.dll' name 'glIndexiv';
    public static z_Indexiv_ovr2 := _z_Indexiv_ovr2;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Indexiv(c: IntPtr) := z_Indexiv_ovr2(c);
    
    // added in gl1.0, deprecated in gl3.2
    private static procedure _z_IndexMask_ovr0(mask: UInt32);
    external 'opengl32.dll' name 'glIndexMask';
    public static z_IndexMask_ovr0 := _z_IndexMask_ovr0;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure IndexMask(mask: UInt32) := z_IndexMask_ovr0(mask);
    
    // added in gl1.1, deprecated in gl3.2
    private static procedure _z_IndexPointer_ovr0(&type: IndexPointerType; stride: Int32; pointer: IntPtr);
    external 'opengl32.dll' name 'glIndexPointer';
    public static z_IndexPointer_ovr0 := _z_IndexPointer_ovr0;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure IndexPointer(&type: IndexPointerType; stride: Int32; pointer: IntPtr) := z_IndexPointer_ovr0(&type, stride, pointer);
    
    // added in gl1.0, deprecated in gl3.2
    private static procedure _z_Indexs_ovr0(c: Int16);
    external 'opengl32.dll' name 'glIndexs';
    public static z_Indexs_ovr0 := _z_Indexs_ovr0;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Indexs(c: Int16) := z_Indexs_ovr0(c);
    
    // added in gl1.0, deprecated in gl3.2
    private static procedure _z_Indexsv_ovr0([MarshalAs(UnmanagedType.LPArray)] c: array of Int16);
    external 'opengl32.dll' name 'glIndexsv';
    public static z_Indexsv_ovr0 := _z_Indexsv_ovr0;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Indexsv(c: array of Int16) := z_Indexsv_ovr0(c);
    private static procedure _z_Indexsv_ovr1(var c: Int16);
    external 'opengl32.dll' name 'glIndexsv';
    public static z_Indexsv_ovr1 := _z_Indexsv_ovr1;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Indexsv(var c: Int16) := z_Indexsv_ovr1(c);
    private static procedure _z_Indexsv_ovr2(c: IntPtr);
    external 'opengl32.dll' name 'glIndexsv';
    public static z_Indexsv_ovr2 := _z_Indexsv_ovr2;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Indexsv(c: IntPtr) := z_Indexsv_ovr2(c);
    
    // added in gl1.1, deprecated in gl3.2
    private static procedure _z_Indexub_ovr0(c: Byte);
    external 'opengl32.dll' name 'glIndexub';
    public static z_Indexub_ovr0 := _z_Indexub_ovr0;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Indexub(c: Byte) := z_Indexub_ovr0(c);
    
    // added in gl1.1, deprecated in gl3.2
    private static procedure _z_Indexubv_ovr0([MarshalAs(UnmanagedType.LPArray)] c: array of Byte);
    external 'opengl32.dll' name 'glIndexubv';
    public static z_Indexubv_ovr0 := _z_Indexubv_ovr0;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Indexubv(c: array of Byte) := z_Indexubv_ovr0(c);
    private static procedure _z_Indexubv_ovr1(var c: Byte);
    external 'opengl32.dll' name 'glIndexubv';
    public static z_Indexubv_ovr1 := _z_Indexubv_ovr1;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Indexubv(var c: Byte) := z_Indexubv_ovr1(c);
    private static procedure _z_Indexubv_ovr2(c: IntPtr);
    external 'opengl32.dll' name 'glIndexubv';
    public static z_Indexubv_ovr2 := _z_Indexubv_ovr2;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Indexubv(c: IntPtr) := z_Indexubv_ovr2(c);
    
    // added in gl1.0, deprecated in gl3.2
    private static procedure _z_InitNames_ovr0;
    external 'opengl32.dll' name 'glInitNames';
    public static z_InitNames_ovr0 := _z_InitNames_ovr0;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure InitNames := z_InitNames_ovr0;
    
    // added in gl1.1, deprecated in gl3.2
    private static procedure _z_InterleavedArrays_ovr0(format: InterleavedArrayFormat; stride: Int32; pointer: IntPtr);
    external 'opengl32.dll' name 'glInterleavedArrays';
    public static z_InterleavedArrays_ovr0 := _z_InterleavedArrays_ovr0;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure InterleavedArrays(format: InterleavedArrayFormat; stride: Int32; pointer: IntPtr) := z_InterleavedArrays_ovr0(format, stride, pointer);
    
    // added in gl1.0, deprecated in gl3.2
    private static function _z_IsList_ovr0(list: UInt32): boolean;
    external 'opengl32.dll' name 'glIsList';
    public static z_IsList_ovr0 := _z_IsList_ovr0;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function IsList(list: UInt32): boolean := z_IsList_ovr0(list);
    
    // added in gl1.0, deprecated in gl3.2
    private static procedure _z_Lightf_ovr0(light: LightName; pname: LightParameter; param: single);
    external 'opengl32.dll' name 'glLightf';
    public static z_Lightf_ovr0 := _z_Lightf_ovr0;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Lightf(light: LightName; pname: LightParameter; param: single) := z_Lightf_ovr0(light, pname, param);
    
    // added in gl1.0, deprecated in gl3.2
    private static procedure _z_Lightfv_ovr0(light: LightName; pname: LightParameter; [MarshalAs(UnmanagedType.LPArray)] &params: array of single);
    external 'opengl32.dll' name 'glLightfv';
    public static z_Lightfv_ovr0 := _z_Lightfv_ovr0;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Lightfv(light: LightName; pname: LightParameter; &params: array of single) := z_Lightfv_ovr0(light, pname, &params);
    private static procedure _z_Lightfv_ovr1(light: LightName; pname: LightParameter; var &params: single);
    external 'opengl32.dll' name 'glLightfv';
    public static z_Lightfv_ovr1 := _z_Lightfv_ovr1;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Lightfv(light: LightName; pname: LightParameter; var &params: single) := z_Lightfv_ovr1(light, pname, &params);
    private static procedure _z_Lightfv_ovr2(light: LightName; pname: LightParameter; &params: IntPtr);
    external 'opengl32.dll' name 'glLightfv';
    public static z_Lightfv_ovr2 := _z_Lightfv_ovr2;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Lightfv(light: LightName; pname: LightParameter; &params: IntPtr) := z_Lightfv_ovr2(light, pname, &params);
    
    // added in gl1.0, deprecated in gl3.2
    private static procedure _z_Lighti_ovr0(light: LightName; pname: LightParameter; param: Int32);
    external 'opengl32.dll' name 'glLighti';
    public static z_Lighti_ovr0 := _z_Lighti_ovr0;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Lighti(light: LightName; pname: LightParameter; param: Int32) := z_Lighti_ovr0(light, pname, param);
    
    // added in gl1.0, deprecated in gl3.2
    private static procedure _z_Lightiv_ovr0(light: LightName; pname: LightParameter; [MarshalAs(UnmanagedType.LPArray)] &params: array of Int32);
    external 'opengl32.dll' name 'glLightiv';
    public static z_Lightiv_ovr0 := _z_Lightiv_ovr0;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Lightiv(light: LightName; pname: LightParameter; &params: array of Int32) := z_Lightiv_ovr0(light, pname, &params);
    private static procedure _z_Lightiv_ovr1(light: LightName; pname: LightParameter; var &params: Int32);
    external 'opengl32.dll' name 'glLightiv';
    public static z_Lightiv_ovr1 := _z_Lightiv_ovr1;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Lightiv(light: LightName; pname: LightParameter; var &params: Int32) := z_Lightiv_ovr1(light, pname, &params);
    private static procedure _z_Lightiv_ovr2(light: LightName; pname: LightParameter; &params: IntPtr);
    external 'opengl32.dll' name 'glLightiv';
    public static z_Lightiv_ovr2 := _z_Lightiv_ovr2;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Lightiv(light: LightName; pname: LightParameter; &params: IntPtr) := z_Lightiv_ovr2(light, pname, &params);
    
    // added in gl1.0, deprecated in gl3.2
    private static procedure _z_LightModelf_ovr0(pname: LightModelParameter; param: single);
    external 'opengl32.dll' name 'glLightModelf';
    public static z_LightModelf_ovr0 := _z_LightModelf_ovr0;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure LightModelf(pname: LightModelParameter; param: single) := z_LightModelf_ovr0(pname, param);
    
    // added in gl1.0, deprecated in gl3.2
    private static procedure _z_LightModelfv_ovr0(pname: LightModelParameter; [MarshalAs(UnmanagedType.LPArray)] &params: array of single);
    external 'opengl32.dll' name 'glLightModelfv';
    public static z_LightModelfv_ovr0 := _z_LightModelfv_ovr0;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure LightModelfv(pname: LightModelParameter; &params: array of single) := z_LightModelfv_ovr0(pname, &params);
    private static procedure _z_LightModelfv_ovr1(pname: LightModelParameter; var &params: single);
    external 'opengl32.dll' name 'glLightModelfv';
    public static z_LightModelfv_ovr1 := _z_LightModelfv_ovr1;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure LightModelfv(pname: LightModelParameter; var &params: single) := z_LightModelfv_ovr1(pname, &params);
    private static procedure _z_LightModelfv_ovr2(pname: LightModelParameter; &params: IntPtr);
    external 'opengl32.dll' name 'glLightModelfv';
    public static z_LightModelfv_ovr2 := _z_LightModelfv_ovr2;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure LightModelfv(pname: LightModelParameter; &params: IntPtr) := z_LightModelfv_ovr2(pname, &params);
    
    // added in gl1.0, deprecated in gl3.2
    private static procedure _z_LightModeli_ovr0(pname: LightModelParameter; param: Int32);
    external 'opengl32.dll' name 'glLightModeli';
    public static z_LightModeli_ovr0 := _z_LightModeli_ovr0;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure LightModeli(pname: LightModelParameter; param: Int32) := z_LightModeli_ovr0(pname, param);
    
    // added in gl1.0, deprecated in gl3.2
    private static procedure _z_LightModeliv_ovr0(pname: LightModelParameter; [MarshalAs(UnmanagedType.LPArray)] &params: array of Int32);
    external 'opengl32.dll' name 'glLightModeliv';
    public static z_LightModeliv_ovr0 := _z_LightModeliv_ovr0;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure LightModeliv(pname: LightModelParameter; &params: array of Int32) := z_LightModeliv_ovr0(pname, &params);
    private static procedure _z_LightModeliv_ovr1(pname: LightModelParameter; var &params: Int32);
    external 'opengl32.dll' name 'glLightModeliv';
    public static z_LightModeliv_ovr1 := _z_LightModeliv_ovr1;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure LightModeliv(pname: LightModelParameter; var &params: Int32) := z_LightModeliv_ovr1(pname, &params);
    private static procedure _z_LightModeliv_ovr2(pname: LightModelParameter; &params: IntPtr);
    external 'opengl32.dll' name 'glLightModeliv';
    public static z_LightModeliv_ovr2 := _z_LightModeliv_ovr2;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure LightModeliv(pname: LightModelParameter; &params: IntPtr) := z_LightModeliv_ovr2(pname, &params);
    
    // added in gl1.0, deprecated in gl3.2
    private static procedure _z_LineStipple_ovr0(factor: Int32; pattern: UInt16);
    external 'opengl32.dll' name 'glLineStipple';
    public static z_LineStipple_ovr0 := _z_LineStipple_ovr0;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure LineStipple(factor: Int32; pattern: UInt16) := z_LineStipple_ovr0(factor, pattern);
    
    // added in gl1.0, deprecated in gl3.2
    private static procedure _z_ListBase_ovr0(base: UInt32);
    external 'opengl32.dll' name 'glListBase';
    public static z_ListBase_ovr0 := _z_ListBase_ovr0;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ListBase(base: UInt32) := z_ListBase_ovr0(base);
    
    // added in gl1.0, deprecated in gl3.2
    private static procedure _z_LoadIdentity_ovr0;
    external 'opengl32.dll' name 'glLoadIdentity';
    public static z_LoadIdentity_ovr0 := _z_LoadIdentity_ovr0;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure LoadIdentity := z_LoadIdentity_ovr0;
    
    // added in gl1.0, deprecated in gl3.2
    private static procedure _z_LoadMatrixd_ovr0([MarshalAs(UnmanagedType.LPArray)] m: array of real);
    external 'opengl32.dll' name 'glLoadMatrixd';
    public static z_LoadMatrixd_ovr0 := _z_LoadMatrixd_ovr0;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure LoadMatrixd(m: array of real) := z_LoadMatrixd_ovr0(m);
    private static procedure _z_LoadMatrixd_ovr1(var m: real);
    external 'opengl32.dll' name 'glLoadMatrixd';
    public static z_LoadMatrixd_ovr1 := _z_LoadMatrixd_ovr1;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure LoadMatrixd(var m: real) := z_LoadMatrixd_ovr1(m);
    private static procedure _z_LoadMatrixd_ovr2(m: IntPtr);
    external 'opengl32.dll' name 'glLoadMatrixd';
    public static z_LoadMatrixd_ovr2 := _z_LoadMatrixd_ovr2;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure LoadMatrixd(m: IntPtr) := z_LoadMatrixd_ovr2(m);
    
    // added in gl1.0, deprecated in gl3.2
    private static procedure _z_LoadMatrixf_ovr0([MarshalAs(UnmanagedType.LPArray)] m: array of single);
    external 'opengl32.dll' name 'glLoadMatrixf';
    public static z_LoadMatrixf_ovr0 := _z_LoadMatrixf_ovr0;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure LoadMatrixf(m: array of single) := z_LoadMatrixf_ovr0(m);
    private static procedure _z_LoadMatrixf_ovr1(var m: single);
    external 'opengl32.dll' name 'glLoadMatrixf';
    public static z_LoadMatrixf_ovr1 := _z_LoadMatrixf_ovr1;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure LoadMatrixf(var m: single) := z_LoadMatrixf_ovr1(m);
    private static procedure _z_LoadMatrixf_ovr2(m: IntPtr);
    external 'opengl32.dll' name 'glLoadMatrixf';
    public static z_LoadMatrixf_ovr2 := _z_LoadMatrixf_ovr2;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure LoadMatrixf(m: IntPtr) := z_LoadMatrixf_ovr2(m);
    
    // added in gl1.0, deprecated in gl3.2
    private static procedure _z_LoadName_ovr0(name: UInt32);
    external 'opengl32.dll' name 'glLoadName';
    public static z_LoadName_ovr0 := _z_LoadName_ovr0;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure LoadName(name: UInt32) := z_LoadName_ovr0(name);
    
    // added in gl1.3, deprecated in gl3.2
    public z_LoadTransposeMatrixd_adr := GetFuncAdr('glLoadTransposeMatrixd');
    public z_LoadTransposeMatrixd_ovr_0 := GetFuncOrNil&<procedure(var m: real)>(z_LoadTransposeMatrixd_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure LoadTransposeMatrixd(m: array of real);
    begin
      z_LoadTransposeMatrixd_ovr_0(m[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure LoadTransposeMatrixd(var m: real);
    begin
      z_LoadTransposeMatrixd_ovr_0(m);
    end;
    public z_LoadTransposeMatrixd_ovr_2 := GetFuncOrNil&<procedure(m: IntPtr)>(z_LoadTransposeMatrixd_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure LoadTransposeMatrixd(m: IntPtr);
    begin
      z_LoadTransposeMatrixd_ovr_2(m);
    end;
    
    // added in gl1.3, deprecated in gl3.2
    public z_LoadTransposeMatrixf_adr := GetFuncAdr('glLoadTransposeMatrixf');
    public z_LoadTransposeMatrixf_ovr_0 := GetFuncOrNil&<procedure(var m: single)>(z_LoadTransposeMatrixf_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure LoadTransposeMatrixf(m: array of single);
    begin
      z_LoadTransposeMatrixf_ovr_0(m[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure LoadTransposeMatrixf(var m: single);
    begin
      z_LoadTransposeMatrixf_ovr_0(m);
    end;
    public z_LoadTransposeMatrixf_ovr_2 := GetFuncOrNil&<procedure(m: IntPtr)>(z_LoadTransposeMatrixf_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure LoadTransposeMatrixf(m: IntPtr);
    begin
      z_LoadTransposeMatrixf_ovr_2(m);
    end;
    
    // added in gl1.0, deprecated in gl3.2
    private static procedure _z_Map1d_ovr0(target: MapTarget; u1: real; u2: real; stride: Int32; order: Int32; [MarshalAs(UnmanagedType.LPArray)] points: array of real);
    external 'opengl32.dll' name 'glMap1d';
    public static z_Map1d_ovr0 := _z_Map1d_ovr0;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Map1d(target: MapTarget; u1: real; u2: real; stride: Int32; order: Int32; points: array of real) := z_Map1d_ovr0(target, u1, u2, stride, order, points);
    private static procedure _z_Map1d_ovr1(target: MapTarget; u1: real; u2: real; stride: Int32; order: Int32; var points: real);
    external 'opengl32.dll' name 'glMap1d';
    public static z_Map1d_ovr1 := _z_Map1d_ovr1;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Map1d(target: MapTarget; u1: real; u2: real; stride: Int32; order: Int32; var points: real) := z_Map1d_ovr1(target, u1, u2, stride, order, points);
    private static procedure _z_Map1d_ovr2(target: MapTarget; u1: real; u2: real; stride: Int32; order: Int32; points: IntPtr);
    external 'opengl32.dll' name 'glMap1d';
    public static z_Map1d_ovr2 := _z_Map1d_ovr2;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Map1d(target: MapTarget; u1: real; u2: real; stride: Int32; order: Int32; points: IntPtr) := z_Map1d_ovr2(target, u1, u2, stride, order, points);
    
    // added in gl1.0, deprecated in gl3.2
    private static procedure _z_Map1f_ovr0(target: MapTarget; u1: single; u2: single; stride: Int32; order: Int32; [MarshalAs(UnmanagedType.LPArray)] points: array of single);
    external 'opengl32.dll' name 'glMap1f';
    public static z_Map1f_ovr0 := _z_Map1f_ovr0;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Map1f(target: MapTarget; u1: single; u2: single; stride: Int32; order: Int32; points: array of single) := z_Map1f_ovr0(target, u1, u2, stride, order, points);
    private static procedure _z_Map1f_ovr1(target: MapTarget; u1: single; u2: single; stride: Int32; order: Int32; var points: single);
    external 'opengl32.dll' name 'glMap1f';
    public static z_Map1f_ovr1 := _z_Map1f_ovr1;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Map1f(target: MapTarget; u1: single; u2: single; stride: Int32; order: Int32; var points: single) := z_Map1f_ovr1(target, u1, u2, stride, order, points);
    private static procedure _z_Map1f_ovr2(target: MapTarget; u1: single; u2: single; stride: Int32; order: Int32; points: IntPtr);
    external 'opengl32.dll' name 'glMap1f';
    public static z_Map1f_ovr2 := _z_Map1f_ovr2;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Map1f(target: MapTarget; u1: single; u2: single; stride: Int32; order: Int32; points: IntPtr) := z_Map1f_ovr2(target, u1, u2, stride, order, points);
    
    // added in gl1.0, deprecated in gl3.2
    private static procedure _z_Map2d_ovr0(target: MapTarget; u1: real; u2: real; ustride: Int32; uorder: Int32; v1: real; v2: real; vstride: Int32; vorder: Int32; [MarshalAs(UnmanagedType.LPArray)] points: array of real);
    external 'opengl32.dll' name 'glMap2d';
    public static z_Map2d_ovr0 := _z_Map2d_ovr0;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Map2d(target: MapTarget; u1: real; u2: real; ustride: Int32; uorder: Int32; v1: real; v2: real; vstride: Int32; vorder: Int32; points: array of real) := z_Map2d_ovr0(target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, points);
    private static procedure _z_Map2d_ovr1(target: MapTarget; u1: real; u2: real; ustride: Int32; uorder: Int32; v1: real; v2: real; vstride: Int32; vorder: Int32; var points: real);
    external 'opengl32.dll' name 'glMap2d';
    public static z_Map2d_ovr1 := _z_Map2d_ovr1;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Map2d(target: MapTarget; u1: real; u2: real; ustride: Int32; uorder: Int32; v1: real; v2: real; vstride: Int32; vorder: Int32; var points: real) := z_Map2d_ovr1(target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, points);
    private static procedure _z_Map2d_ovr2(target: MapTarget; u1: real; u2: real; ustride: Int32; uorder: Int32; v1: real; v2: real; vstride: Int32; vorder: Int32; points: IntPtr);
    external 'opengl32.dll' name 'glMap2d';
    public static z_Map2d_ovr2 := _z_Map2d_ovr2;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Map2d(target: MapTarget; u1: real; u2: real; ustride: Int32; uorder: Int32; v1: real; v2: real; vstride: Int32; vorder: Int32; points: IntPtr) := z_Map2d_ovr2(target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, points);
    
    // added in gl1.0, deprecated in gl3.2
    private static procedure _z_Map2f_ovr0(target: MapTarget; u1: single; u2: single; ustride: Int32; uorder: Int32; v1: single; v2: single; vstride: Int32; vorder: Int32; [MarshalAs(UnmanagedType.LPArray)] points: array of single);
    external 'opengl32.dll' name 'glMap2f';
    public static z_Map2f_ovr0 := _z_Map2f_ovr0;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Map2f(target: MapTarget; u1: single; u2: single; ustride: Int32; uorder: Int32; v1: single; v2: single; vstride: Int32; vorder: Int32; points: array of single) := z_Map2f_ovr0(target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, points);
    private static procedure _z_Map2f_ovr1(target: MapTarget; u1: single; u2: single; ustride: Int32; uorder: Int32; v1: single; v2: single; vstride: Int32; vorder: Int32; var points: single);
    external 'opengl32.dll' name 'glMap2f';
    public static z_Map2f_ovr1 := _z_Map2f_ovr1;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Map2f(target: MapTarget; u1: single; u2: single; ustride: Int32; uorder: Int32; v1: single; v2: single; vstride: Int32; vorder: Int32; var points: single) := z_Map2f_ovr1(target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, points);
    private static procedure _z_Map2f_ovr2(target: MapTarget; u1: single; u2: single; ustride: Int32; uorder: Int32; v1: single; v2: single; vstride: Int32; vorder: Int32; points: IntPtr);
    external 'opengl32.dll' name 'glMap2f';
    public static z_Map2f_ovr2 := _z_Map2f_ovr2;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Map2f(target: MapTarget; u1: single; u2: single; ustride: Int32; uorder: Int32; v1: single; v2: single; vstride: Int32; vorder: Int32; points: IntPtr) := z_Map2f_ovr2(target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, points);
    
    // added in gl1.0, deprecated in gl3.2
    private static procedure _z_MapGrid1d_ovr0(un: Int32; u1: real; u2: real);
    external 'opengl32.dll' name 'glMapGrid1d';
    public static z_MapGrid1d_ovr0 := _z_MapGrid1d_ovr0;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MapGrid1d(un: Int32; u1: real; u2: real) := z_MapGrid1d_ovr0(un, u1, u2);
    
    // added in gl1.0, deprecated in gl3.2
    private static procedure _z_MapGrid1f_ovr0(un: Int32; u1: single; u2: single);
    external 'opengl32.dll' name 'glMapGrid1f';
    public static z_MapGrid1f_ovr0 := _z_MapGrid1f_ovr0;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MapGrid1f(un: Int32; u1: single; u2: single) := z_MapGrid1f_ovr0(un, u1, u2);
    
    // added in gl1.0, deprecated in gl3.2
    private static procedure _z_MapGrid2d_ovr0(un: Int32; u1: real; u2: real; vn: Int32; v1: real; v2: real);
    external 'opengl32.dll' name 'glMapGrid2d';
    public static z_MapGrid2d_ovr0 := _z_MapGrid2d_ovr0;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MapGrid2d(un: Int32; u1: real; u2: real; vn: Int32; v1: real; v2: real) := z_MapGrid2d_ovr0(un, u1, u2, vn, v1, v2);
    
    // added in gl1.0, deprecated in gl3.2
    private static procedure _z_MapGrid2f_ovr0(un: Int32; u1: single; u2: single; vn: Int32; v1: single; v2: single);
    external 'opengl32.dll' name 'glMapGrid2f';
    public static z_MapGrid2f_ovr0 := _z_MapGrid2f_ovr0;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MapGrid2f(un: Int32; u1: single; u2: single; vn: Int32; v1: single; v2: single) := z_MapGrid2f_ovr0(un, u1, u2, vn, v1, v2);
    
    // added in gl1.0, deprecated in gl3.2
    private static procedure _z_Materialf_ovr0(face: DummyEnum; pname: MaterialParameter; param: single);
    external 'opengl32.dll' name 'glMaterialf';
    public static z_Materialf_ovr0 := _z_Materialf_ovr0;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Materialf(face: DummyEnum; pname: MaterialParameter; param: single) := z_Materialf_ovr0(face, pname, param);
    
    // added in gl1.0, deprecated in gl3.2
    private static procedure _z_Materialfv_ovr0(face: DummyEnum; pname: MaterialParameter; [MarshalAs(UnmanagedType.LPArray)] &params: array of single);
    external 'opengl32.dll' name 'glMaterialfv';
    public static z_Materialfv_ovr0 := _z_Materialfv_ovr0;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Materialfv(face: DummyEnum; pname: MaterialParameter; &params: array of single) := z_Materialfv_ovr0(face, pname, &params);
    private static procedure _z_Materialfv_ovr1(face: DummyEnum; pname: MaterialParameter; var &params: single);
    external 'opengl32.dll' name 'glMaterialfv';
    public static z_Materialfv_ovr1 := _z_Materialfv_ovr1;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Materialfv(face: DummyEnum; pname: MaterialParameter; var &params: single) := z_Materialfv_ovr1(face, pname, &params);
    private static procedure _z_Materialfv_ovr2(face: DummyEnum; pname: MaterialParameter; &params: IntPtr);
    external 'opengl32.dll' name 'glMaterialfv';
    public static z_Materialfv_ovr2 := _z_Materialfv_ovr2;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Materialfv(face: DummyEnum; pname: MaterialParameter; &params: IntPtr) := z_Materialfv_ovr2(face, pname, &params);
    
    // added in gl1.0, deprecated in gl3.2
    private static procedure _z_Materiali_ovr0(face: DummyEnum; pname: MaterialParameter; param: Int32);
    external 'opengl32.dll' name 'glMateriali';
    public static z_Materiali_ovr0 := _z_Materiali_ovr0;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Materiali(face: DummyEnum; pname: MaterialParameter; param: Int32) := z_Materiali_ovr0(face, pname, param);
    
    // added in gl1.0, deprecated in gl3.2
    private static procedure _z_Materialiv_ovr0(face: DummyEnum; pname: MaterialParameter; [MarshalAs(UnmanagedType.LPArray)] &params: array of Int32);
    external 'opengl32.dll' name 'glMaterialiv';
    public static z_Materialiv_ovr0 := _z_Materialiv_ovr0;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Materialiv(face: DummyEnum; pname: MaterialParameter; &params: array of Int32) := z_Materialiv_ovr0(face, pname, &params);
    private static procedure _z_Materialiv_ovr1(face: DummyEnum; pname: MaterialParameter; var &params: Int32);
    external 'opengl32.dll' name 'glMaterialiv';
    public static z_Materialiv_ovr1 := _z_Materialiv_ovr1;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Materialiv(face: DummyEnum; pname: MaterialParameter; var &params: Int32) := z_Materialiv_ovr1(face, pname, &params);
    private static procedure _z_Materialiv_ovr2(face: DummyEnum; pname: MaterialParameter; &params: IntPtr);
    external 'opengl32.dll' name 'glMaterialiv';
    public static z_Materialiv_ovr2 := _z_Materialiv_ovr2;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Materialiv(face: DummyEnum; pname: MaterialParameter; &params: IntPtr) := z_Materialiv_ovr2(face, pname, &params);
    
    // added in gl1.0, deprecated in gl3.2
    private static procedure _z_MatrixMode_ovr0(mode: OpenGL.MatrixMode);
    external 'opengl32.dll' name 'glMatrixMode';
    public static z_MatrixMode_ovr0 := _z_MatrixMode_ovr0;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MatrixMode(mode: OpenGL.MatrixMode) := z_MatrixMode_ovr0(mode);
    
    // added in gl1.3, deprecated in gl3.2
    public z_MultiTexCoord1d_adr := GetFuncAdr('glMultiTexCoord1d');
    public z_MultiTexCoord1d_ovr_0 := GetFuncOrNil&<procedure(target: TextureUnit; s: real)>(z_MultiTexCoord1d_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiTexCoord1d(target: TextureUnit; s: real);
    begin
      z_MultiTexCoord1d_ovr_0(target, s);
    end;
    
    // added in gl1.3, deprecated in gl3.2
    public z_MultiTexCoord1dv_adr := GetFuncAdr('glMultiTexCoord1dv');
    public z_MultiTexCoord1dv_ovr_0 := GetFuncOrNil&<procedure(target: TextureUnit; var v: real)>(z_MultiTexCoord1dv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiTexCoord1dv(target: TextureUnit; v: array of real);
    begin
      z_MultiTexCoord1dv_ovr_0(target, v[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiTexCoord1dv(target: TextureUnit; var v: real);
    begin
      z_MultiTexCoord1dv_ovr_0(target, v);
    end;
    public z_MultiTexCoord1dv_ovr_2 := GetFuncOrNil&<procedure(target: TextureUnit; v: IntPtr)>(z_MultiTexCoord1dv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiTexCoord1dv(target: TextureUnit; v: IntPtr);
    begin
      z_MultiTexCoord1dv_ovr_2(target, v);
    end;
    
    // added in gl1.3, deprecated in gl3.2
    public z_MultiTexCoord1f_adr := GetFuncAdr('glMultiTexCoord1f');
    public z_MultiTexCoord1f_ovr_0 := GetFuncOrNil&<procedure(target: TextureUnit; s: single)>(z_MultiTexCoord1f_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiTexCoord1f(target: TextureUnit; s: single);
    begin
      z_MultiTexCoord1f_ovr_0(target, s);
    end;
    
    // added in gl1.3, deprecated in gl3.2
    public z_MultiTexCoord1fv_adr := GetFuncAdr('glMultiTexCoord1fv');
    public z_MultiTexCoord1fv_ovr_0 := GetFuncOrNil&<procedure(target: TextureUnit; var v: single)>(z_MultiTexCoord1fv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiTexCoord1fv(target: TextureUnit; v: array of single);
    begin
      z_MultiTexCoord1fv_ovr_0(target, v[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiTexCoord1fv(target: TextureUnit; var v: single);
    begin
      z_MultiTexCoord1fv_ovr_0(target, v);
    end;
    public z_MultiTexCoord1fv_ovr_2 := GetFuncOrNil&<procedure(target: TextureUnit; v: IntPtr)>(z_MultiTexCoord1fv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiTexCoord1fv(target: TextureUnit; v: IntPtr);
    begin
      z_MultiTexCoord1fv_ovr_2(target, v);
    end;
    
    // added in gl1.3, deprecated in gl3.2
    public z_MultiTexCoord1i_adr := GetFuncAdr('glMultiTexCoord1i');
    public z_MultiTexCoord1i_ovr_0 := GetFuncOrNil&<procedure(target: TextureUnit; s: Int32)>(z_MultiTexCoord1i_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiTexCoord1i(target: TextureUnit; s: Int32);
    begin
      z_MultiTexCoord1i_ovr_0(target, s);
    end;
    
    // added in gl1.3, deprecated in gl3.2
    public z_MultiTexCoord1iv_adr := GetFuncAdr('glMultiTexCoord1iv');
    public z_MultiTexCoord1iv_ovr_0 := GetFuncOrNil&<procedure(target: TextureUnit; var v: Int32)>(z_MultiTexCoord1iv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiTexCoord1iv(target: TextureUnit; v: array of Int32);
    begin
      z_MultiTexCoord1iv_ovr_0(target, v[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiTexCoord1iv(target: TextureUnit; var v: Int32);
    begin
      z_MultiTexCoord1iv_ovr_0(target, v);
    end;
    public z_MultiTexCoord1iv_ovr_2 := GetFuncOrNil&<procedure(target: TextureUnit; v: IntPtr)>(z_MultiTexCoord1iv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiTexCoord1iv(target: TextureUnit; v: IntPtr);
    begin
      z_MultiTexCoord1iv_ovr_2(target, v);
    end;
    
    // added in gl1.3, deprecated in gl3.2
    public z_MultiTexCoord1s_adr := GetFuncAdr('glMultiTexCoord1s');
    public z_MultiTexCoord1s_ovr_0 := GetFuncOrNil&<procedure(target: TextureUnit; s: Int16)>(z_MultiTexCoord1s_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiTexCoord1s(target: TextureUnit; s: Int16);
    begin
      z_MultiTexCoord1s_ovr_0(target, s);
    end;
    
    // added in gl1.3, deprecated in gl3.2
    public z_MultiTexCoord1sv_adr := GetFuncAdr('glMultiTexCoord1sv');
    public z_MultiTexCoord1sv_ovr_0 := GetFuncOrNil&<procedure(target: TextureUnit; var v: Int16)>(z_MultiTexCoord1sv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiTexCoord1sv(target: TextureUnit; v: array of Int16);
    begin
      z_MultiTexCoord1sv_ovr_0(target, v[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiTexCoord1sv(target: TextureUnit; var v: Int16);
    begin
      z_MultiTexCoord1sv_ovr_0(target, v);
    end;
    public z_MultiTexCoord1sv_ovr_2 := GetFuncOrNil&<procedure(target: TextureUnit; v: IntPtr)>(z_MultiTexCoord1sv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiTexCoord1sv(target: TextureUnit; v: IntPtr);
    begin
      z_MultiTexCoord1sv_ovr_2(target, v);
    end;
    
    // added in gl1.3, deprecated in gl3.2
    public z_MultiTexCoord2d_adr := GetFuncAdr('glMultiTexCoord2d');
    public z_MultiTexCoord2d_ovr_0 := GetFuncOrNil&<procedure(target: TextureUnit; s: real; t: real)>(z_MultiTexCoord2d_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiTexCoord2d(target: TextureUnit; s: real; t: real);
    begin
      z_MultiTexCoord2d_ovr_0(target, s, t);
    end;
    
    // added in gl1.3, deprecated in gl3.2
    public z_MultiTexCoord2dv_adr := GetFuncAdr('glMultiTexCoord2dv');
    public z_MultiTexCoord2dv_ovr_0 := GetFuncOrNil&<procedure(target: TextureUnit; var v: real)>(z_MultiTexCoord2dv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiTexCoord2dv(target: TextureUnit; v: array of real);
    begin
      z_MultiTexCoord2dv_ovr_0(target, v[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiTexCoord2dv(target: TextureUnit; var v: real);
    begin
      z_MultiTexCoord2dv_ovr_0(target, v);
    end;
    public z_MultiTexCoord2dv_ovr_2 := GetFuncOrNil&<procedure(target: TextureUnit; v: IntPtr)>(z_MultiTexCoord2dv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiTexCoord2dv(target: TextureUnit; v: IntPtr);
    begin
      z_MultiTexCoord2dv_ovr_2(target, v);
    end;
    
    // added in gl1.3, deprecated in gl3.2
    public z_MultiTexCoord2f_adr := GetFuncAdr('glMultiTexCoord2f');
    public z_MultiTexCoord2f_ovr_0 := GetFuncOrNil&<procedure(target: TextureUnit; s: single; t: single)>(z_MultiTexCoord2f_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiTexCoord2f(target: TextureUnit; s: single; t: single);
    begin
      z_MultiTexCoord2f_ovr_0(target, s, t);
    end;
    
    // added in gl1.3, deprecated in gl3.2
    public z_MultiTexCoord2fv_adr := GetFuncAdr('glMultiTexCoord2fv');
    public z_MultiTexCoord2fv_ovr_0 := GetFuncOrNil&<procedure(target: TextureUnit; var v: single)>(z_MultiTexCoord2fv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiTexCoord2fv(target: TextureUnit; v: array of single);
    begin
      z_MultiTexCoord2fv_ovr_0(target, v[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiTexCoord2fv(target: TextureUnit; var v: single);
    begin
      z_MultiTexCoord2fv_ovr_0(target, v);
    end;
    public z_MultiTexCoord2fv_ovr_2 := GetFuncOrNil&<procedure(target: TextureUnit; v: IntPtr)>(z_MultiTexCoord2fv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiTexCoord2fv(target: TextureUnit; v: IntPtr);
    begin
      z_MultiTexCoord2fv_ovr_2(target, v);
    end;
    
    // added in gl1.3, deprecated in gl3.2
    public z_MultiTexCoord2i_adr := GetFuncAdr('glMultiTexCoord2i');
    public z_MultiTexCoord2i_ovr_0 := GetFuncOrNil&<procedure(target: TextureUnit; s: Int32; t: Int32)>(z_MultiTexCoord2i_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiTexCoord2i(target: TextureUnit; s: Int32; t: Int32);
    begin
      z_MultiTexCoord2i_ovr_0(target, s, t);
    end;
    
    // added in gl1.3, deprecated in gl3.2
    public z_MultiTexCoord2iv_adr := GetFuncAdr('glMultiTexCoord2iv');
    public z_MultiTexCoord2iv_ovr_0 := GetFuncOrNil&<procedure(target: TextureUnit; var v: Int32)>(z_MultiTexCoord2iv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiTexCoord2iv(target: TextureUnit; v: array of Int32);
    begin
      z_MultiTexCoord2iv_ovr_0(target, v[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiTexCoord2iv(target: TextureUnit; var v: Int32);
    begin
      z_MultiTexCoord2iv_ovr_0(target, v);
    end;
    public z_MultiTexCoord2iv_ovr_2 := GetFuncOrNil&<procedure(target: TextureUnit; v: IntPtr)>(z_MultiTexCoord2iv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiTexCoord2iv(target: TextureUnit; v: IntPtr);
    begin
      z_MultiTexCoord2iv_ovr_2(target, v);
    end;
    
    // added in gl1.3, deprecated in gl3.2
    public z_MultiTexCoord2s_adr := GetFuncAdr('glMultiTexCoord2s');
    public z_MultiTexCoord2s_ovr_0 := GetFuncOrNil&<procedure(target: TextureUnit; s: Int16; t: Int16)>(z_MultiTexCoord2s_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiTexCoord2s(target: TextureUnit; s: Int16; t: Int16);
    begin
      z_MultiTexCoord2s_ovr_0(target, s, t);
    end;
    
    // added in gl1.3, deprecated in gl3.2
    public z_MultiTexCoord2sv_adr := GetFuncAdr('glMultiTexCoord2sv');
    public z_MultiTexCoord2sv_ovr_0 := GetFuncOrNil&<procedure(target: TextureUnit; var v: Int16)>(z_MultiTexCoord2sv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiTexCoord2sv(target: TextureUnit; v: array of Int16);
    begin
      z_MultiTexCoord2sv_ovr_0(target, v[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiTexCoord2sv(target: TextureUnit; var v: Int16);
    begin
      z_MultiTexCoord2sv_ovr_0(target, v);
    end;
    public z_MultiTexCoord2sv_ovr_2 := GetFuncOrNil&<procedure(target: TextureUnit; v: IntPtr)>(z_MultiTexCoord2sv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiTexCoord2sv(target: TextureUnit; v: IntPtr);
    begin
      z_MultiTexCoord2sv_ovr_2(target, v);
    end;
    
    // added in gl1.3, deprecated in gl3.2
    public z_MultiTexCoord3d_adr := GetFuncAdr('glMultiTexCoord3d');
    public z_MultiTexCoord3d_ovr_0 := GetFuncOrNil&<procedure(target: TextureUnit; s: real; t: real; r: real)>(z_MultiTexCoord3d_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiTexCoord3d(target: TextureUnit; s: real; t: real; r: real);
    begin
      z_MultiTexCoord3d_ovr_0(target, s, t, r);
    end;
    
    // added in gl1.3, deprecated in gl3.2
    public z_MultiTexCoord3dv_adr := GetFuncAdr('glMultiTexCoord3dv');
    public z_MultiTexCoord3dv_ovr_0 := GetFuncOrNil&<procedure(target: TextureUnit; var v: real)>(z_MultiTexCoord3dv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiTexCoord3dv(target: TextureUnit; v: array of real);
    begin
      z_MultiTexCoord3dv_ovr_0(target, v[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiTexCoord3dv(target: TextureUnit; var v: real);
    begin
      z_MultiTexCoord3dv_ovr_0(target, v);
    end;
    public z_MultiTexCoord3dv_ovr_2 := GetFuncOrNil&<procedure(target: TextureUnit; v: IntPtr)>(z_MultiTexCoord3dv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiTexCoord3dv(target: TextureUnit; v: IntPtr);
    begin
      z_MultiTexCoord3dv_ovr_2(target, v);
    end;
    
    // added in gl1.3, deprecated in gl3.2
    public z_MultiTexCoord3f_adr := GetFuncAdr('glMultiTexCoord3f');
    public z_MultiTexCoord3f_ovr_0 := GetFuncOrNil&<procedure(target: TextureUnit; s: single; t: single; r: single)>(z_MultiTexCoord3f_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiTexCoord3f(target: TextureUnit; s: single; t: single; r: single);
    begin
      z_MultiTexCoord3f_ovr_0(target, s, t, r);
    end;
    
    // added in gl1.3, deprecated in gl3.2
    public z_MultiTexCoord3fv_adr := GetFuncAdr('glMultiTexCoord3fv');
    public z_MultiTexCoord3fv_ovr_0 := GetFuncOrNil&<procedure(target: TextureUnit; var v: single)>(z_MultiTexCoord3fv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiTexCoord3fv(target: TextureUnit; v: array of single);
    begin
      z_MultiTexCoord3fv_ovr_0(target, v[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiTexCoord3fv(target: TextureUnit; var v: single);
    begin
      z_MultiTexCoord3fv_ovr_0(target, v);
    end;
    public z_MultiTexCoord3fv_ovr_2 := GetFuncOrNil&<procedure(target: TextureUnit; v: IntPtr)>(z_MultiTexCoord3fv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiTexCoord3fv(target: TextureUnit; v: IntPtr);
    begin
      z_MultiTexCoord3fv_ovr_2(target, v);
    end;
    
    // added in gl1.3, deprecated in gl3.2
    public z_MultiTexCoord3i_adr := GetFuncAdr('glMultiTexCoord3i');
    public z_MultiTexCoord3i_ovr_0 := GetFuncOrNil&<procedure(target: TextureUnit; s: Int32; t: Int32; r: Int32)>(z_MultiTexCoord3i_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiTexCoord3i(target: TextureUnit; s: Int32; t: Int32; r: Int32);
    begin
      z_MultiTexCoord3i_ovr_0(target, s, t, r);
    end;
    
    // added in gl1.3, deprecated in gl3.2
    public z_MultiTexCoord3iv_adr := GetFuncAdr('glMultiTexCoord3iv');
    public z_MultiTexCoord3iv_ovr_0 := GetFuncOrNil&<procedure(target: TextureUnit; var v: Int32)>(z_MultiTexCoord3iv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiTexCoord3iv(target: TextureUnit; v: array of Int32);
    begin
      z_MultiTexCoord3iv_ovr_0(target, v[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiTexCoord3iv(target: TextureUnit; var v: Int32);
    begin
      z_MultiTexCoord3iv_ovr_0(target, v);
    end;
    public z_MultiTexCoord3iv_ovr_2 := GetFuncOrNil&<procedure(target: TextureUnit; v: IntPtr)>(z_MultiTexCoord3iv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiTexCoord3iv(target: TextureUnit; v: IntPtr);
    begin
      z_MultiTexCoord3iv_ovr_2(target, v);
    end;
    
    // added in gl1.3, deprecated in gl3.2
    public z_MultiTexCoord3s_adr := GetFuncAdr('glMultiTexCoord3s');
    public z_MultiTexCoord3s_ovr_0 := GetFuncOrNil&<procedure(target: TextureUnit; s: Int16; t: Int16; r: Int16)>(z_MultiTexCoord3s_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiTexCoord3s(target: TextureUnit; s: Int16; t: Int16; r: Int16);
    begin
      z_MultiTexCoord3s_ovr_0(target, s, t, r);
    end;
    
    // added in gl1.3, deprecated in gl3.2
    public z_MultiTexCoord3sv_adr := GetFuncAdr('glMultiTexCoord3sv');
    public z_MultiTexCoord3sv_ovr_0 := GetFuncOrNil&<procedure(target: TextureUnit; var v: Int16)>(z_MultiTexCoord3sv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiTexCoord3sv(target: TextureUnit; v: array of Int16);
    begin
      z_MultiTexCoord3sv_ovr_0(target, v[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiTexCoord3sv(target: TextureUnit; var v: Int16);
    begin
      z_MultiTexCoord3sv_ovr_0(target, v);
    end;
    public z_MultiTexCoord3sv_ovr_2 := GetFuncOrNil&<procedure(target: TextureUnit; v: IntPtr)>(z_MultiTexCoord3sv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiTexCoord3sv(target: TextureUnit; v: IntPtr);
    begin
      z_MultiTexCoord3sv_ovr_2(target, v);
    end;
    
    // added in gl1.3, deprecated in gl3.2
    public z_MultiTexCoord4d_adr := GetFuncAdr('glMultiTexCoord4d');
    public z_MultiTexCoord4d_ovr_0 := GetFuncOrNil&<procedure(target: TextureUnit; s: real; t: real; r: real; q: real)>(z_MultiTexCoord4d_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiTexCoord4d(target: TextureUnit; s: real; t: real; r: real; q: real);
    begin
      z_MultiTexCoord4d_ovr_0(target, s, t, r, q);
    end;
    
    // added in gl1.3, deprecated in gl3.2
    public z_MultiTexCoord4dv_adr := GetFuncAdr('glMultiTexCoord4dv');
    public z_MultiTexCoord4dv_ovr_0 := GetFuncOrNil&<procedure(target: TextureUnit; var v: real)>(z_MultiTexCoord4dv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiTexCoord4dv(target: TextureUnit; v: array of real);
    begin
      z_MultiTexCoord4dv_ovr_0(target, v[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiTexCoord4dv(target: TextureUnit; var v: real);
    begin
      z_MultiTexCoord4dv_ovr_0(target, v);
    end;
    public z_MultiTexCoord4dv_ovr_2 := GetFuncOrNil&<procedure(target: TextureUnit; v: IntPtr)>(z_MultiTexCoord4dv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiTexCoord4dv(target: TextureUnit; v: IntPtr);
    begin
      z_MultiTexCoord4dv_ovr_2(target, v);
    end;
    
    // added in gl1.3, deprecated in gl3.2
    public z_MultiTexCoord4f_adr := GetFuncAdr('glMultiTexCoord4f');
    public z_MultiTexCoord4f_ovr_0 := GetFuncOrNil&<procedure(target: TextureUnit; s: single; t: single; r: single; q: single)>(z_MultiTexCoord4f_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiTexCoord4f(target: TextureUnit; s: single; t: single; r: single; q: single);
    begin
      z_MultiTexCoord4f_ovr_0(target, s, t, r, q);
    end;
    
    // added in gl1.3, deprecated in gl3.2
    public z_MultiTexCoord4fv_adr := GetFuncAdr('glMultiTexCoord4fv');
    public z_MultiTexCoord4fv_ovr_0 := GetFuncOrNil&<procedure(target: TextureUnit; var v: single)>(z_MultiTexCoord4fv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiTexCoord4fv(target: TextureUnit; v: array of single);
    begin
      z_MultiTexCoord4fv_ovr_0(target, v[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiTexCoord4fv(target: TextureUnit; var v: single);
    begin
      z_MultiTexCoord4fv_ovr_0(target, v);
    end;
    public z_MultiTexCoord4fv_ovr_2 := GetFuncOrNil&<procedure(target: TextureUnit; v: IntPtr)>(z_MultiTexCoord4fv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiTexCoord4fv(target: TextureUnit; v: IntPtr);
    begin
      z_MultiTexCoord4fv_ovr_2(target, v);
    end;
    
    // added in gl1.3, deprecated in gl3.2
    public z_MultiTexCoord4i_adr := GetFuncAdr('glMultiTexCoord4i');
    public z_MultiTexCoord4i_ovr_0 := GetFuncOrNil&<procedure(target: TextureUnit; s: Int32; t: Int32; r: Int32; q: Int32)>(z_MultiTexCoord4i_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiTexCoord4i(target: TextureUnit; s: Int32; t: Int32; r: Int32; q: Int32);
    begin
      z_MultiTexCoord4i_ovr_0(target, s, t, r, q);
    end;
    
    // added in gl1.3, deprecated in gl3.2
    public z_MultiTexCoord4iv_adr := GetFuncAdr('glMultiTexCoord4iv');
    public z_MultiTexCoord4iv_ovr_0 := GetFuncOrNil&<procedure(target: TextureUnit; var v: Int32)>(z_MultiTexCoord4iv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiTexCoord4iv(target: TextureUnit; v: array of Int32);
    begin
      z_MultiTexCoord4iv_ovr_0(target, v[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiTexCoord4iv(target: TextureUnit; var v: Int32);
    begin
      z_MultiTexCoord4iv_ovr_0(target, v);
    end;
    public z_MultiTexCoord4iv_ovr_2 := GetFuncOrNil&<procedure(target: TextureUnit; v: IntPtr)>(z_MultiTexCoord4iv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiTexCoord4iv(target: TextureUnit; v: IntPtr);
    begin
      z_MultiTexCoord4iv_ovr_2(target, v);
    end;
    
    // added in gl1.3, deprecated in gl3.2
    public z_MultiTexCoord4s_adr := GetFuncAdr('glMultiTexCoord4s');
    public z_MultiTexCoord4s_ovr_0 := GetFuncOrNil&<procedure(target: TextureUnit; s: Int16; t: Int16; r: Int16; q: Int16)>(z_MultiTexCoord4s_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiTexCoord4s(target: TextureUnit; s: Int16; t: Int16; r: Int16; q: Int16);
    begin
      z_MultiTexCoord4s_ovr_0(target, s, t, r, q);
    end;
    
    // added in gl1.3, deprecated in gl3.2
    public z_MultiTexCoord4sv_adr := GetFuncAdr('glMultiTexCoord4sv');
    public z_MultiTexCoord4sv_ovr_0 := GetFuncOrNil&<procedure(target: TextureUnit; var v: Int16)>(z_MultiTexCoord4sv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiTexCoord4sv(target: TextureUnit; v: array of Int16);
    begin
      z_MultiTexCoord4sv_ovr_0(target, v[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiTexCoord4sv(target: TextureUnit; var v: Int16);
    begin
      z_MultiTexCoord4sv_ovr_0(target, v);
    end;
    public z_MultiTexCoord4sv_ovr_2 := GetFuncOrNil&<procedure(target: TextureUnit; v: IntPtr)>(z_MultiTexCoord4sv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiTexCoord4sv(target: TextureUnit; v: IntPtr);
    begin
      z_MultiTexCoord4sv_ovr_2(target, v);
    end;
    
    // added in gl1.0, deprecated in gl3.2
    private static procedure _z_MultMatrixd_ovr0([MarshalAs(UnmanagedType.LPArray)] m: array of real);
    external 'opengl32.dll' name 'glMultMatrixd';
    public static z_MultMatrixd_ovr0 := _z_MultMatrixd_ovr0;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultMatrixd(m: array of real) := z_MultMatrixd_ovr0(m);
    private static procedure _z_MultMatrixd_ovr1(var m: real);
    external 'opengl32.dll' name 'glMultMatrixd';
    public static z_MultMatrixd_ovr1 := _z_MultMatrixd_ovr1;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultMatrixd(var m: real) := z_MultMatrixd_ovr1(m);
    private static procedure _z_MultMatrixd_ovr2(m: IntPtr);
    external 'opengl32.dll' name 'glMultMatrixd';
    public static z_MultMatrixd_ovr2 := _z_MultMatrixd_ovr2;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultMatrixd(m: IntPtr) := z_MultMatrixd_ovr2(m);
    
    // added in gl1.0, deprecated in gl3.2
    private static procedure _z_MultMatrixf_ovr0([MarshalAs(UnmanagedType.LPArray)] m: array of single);
    external 'opengl32.dll' name 'glMultMatrixf';
    public static z_MultMatrixf_ovr0 := _z_MultMatrixf_ovr0;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultMatrixf(m: array of single) := z_MultMatrixf_ovr0(m);
    private static procedure _z_MultMatrixf_ovr1(var m: single);
    external 'opengl32.dll' name 'glMultMatrixf';
    public static z_MultMatrixf_ovr1 := _z_MultMatrixf_ovr1;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultMatrixf(var m: single) := z_MultMatrixf_ovr1(m);
    private static procedure _z_MultMatrixf_ovr2(m: IntPtr);
    external 'opengl32.dll' name 'glMultMatrixf';
    public static z_MultMatrixf_ovr2 := _z_MultMatrixf_ovr2;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultMatrixf(m: IntPtr) := z_MultMatrixf_ovr2(m);
    
    // added in gl1.3, deprecated in gl3.2
    public z_MultTransposeMatrixd_adr := GetFuncAdr('glMultTransposeMatrixd');
    public z_MultTransposeMatrixd_ovr_0 := GetFuncOrNil&<procedure(var m: real)>(z_MultTransposeMatrixd_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultTransposeMatrixd(m: array of real);
    begin
      z_MultTransposeMatrixd_ovr_0(m[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultTransposeMatrixd(var m: real);
    begin
      z_MultTransposeMatrixd_ovr_0(m);
    end;
    public z_MultTransposeMatrixd_ovr_2 := GetFuncOrNil&<procedure(m: IntPtr)>(z_MultTransposeMatrixd_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultTransposeMatrixd(m: IntPtr);
    begin
      z_MultTransposeMatrixd_ovr_2(m);
    end;
    
    // added in gl1.3, deprecated in gl3.2
    public z_MultTransposeMatrixf_adr := GetFuncAdr('glMultTransposeMatrixf');
    public z_MultTransposeMatrixf_ovr_0 := GetFuncOrNil&<procedure(var m: single)>(z_MultTransposeMatrixf_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultTransposeMatrixf(m: array of single);
    begin
      z_MultTransposeMatrixf_ovr_0(m[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultTransposeMatrixf(var m: single);
    begin
      z_MultTransposeMatrixf_ovr_0(m);
    end;
    public z_MultTransposeMatrixf_ovr_2 := GetFuncOrNil&<procedure(m: IntPtr)>(z_MultTransposeMatrixf_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultTransposeMatrixf(m: IntPtr);
    begin
      z_MultTransposeMatrixf_ovr_2(m);
    end;
    
    // added in gl1.0, deprecated in gl3.2
    private static procedure _z_NewList_ovr0(list: UInt32; mode: ListMode);
    external 'opengl32.dll' name 'glNewList';
    public static z_NewList_ovr0 := _z_NewList_ovr0;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure NewList(list: UInt32; mode: ListMode) := z_NewList_ovr0(list, mode);
    
    // added in gl1.0, deprecated in gl3.2
    private static procedure _z_Normal3b_ovr0(nx: SByte; ny: SByte; nz: SByte);
    external 'opengl32.dll' name 'glNormal3b';
    public static z_Normal3b_ovr0 := _z_Normal3b_ovr0;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Normal3b(nx: SByte; ny: SByte; nz: SByte) := z_Normal3b_ovr0(nx, ny, nz);
    
    // added in gl1.0, deprecated in gl3.2
    private static procedure _z_Normal3bv_ovr0([MarshalAs(UnmanagedType.LPArray)] v: array of SByte);
    external 'opengl32.dll' name 'glNormal3bv';
    public static z_Normal3bv_ovr0 := _z_Normal3bv_ovr0;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Normal3bv(v: array of SByte) := z_Normal3bv_ovr0(v);
    private static procedure _z_Normal3bv_ovr1(var v: SByte);
    external 'opengl32.dll' name 'glNormal3bv';
    public static z_Normal3bv_ovr1 := _z_Normal3bv_ovr1;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Normal3bv(var v: SByte) := z_Normal3bv_ovr1(v);
    private static procedure _z_Normal3bv_ovr2(v: IntPtr);
    external 'opengl32.dll' name 'glNormal3bv';
    public static z_Normal3bv_ovr2 := _z_Normal3bv_ovr2;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Normal3bv(v: IntPtr) := z_Normal3bv_ovr2(v);
    
    // added in gl1.0, deprecated in gl3.2
    private static procedure _z_Normal3d_ovr0(nx: real; ny: real; nz: real);
    external 'opengl32.dll' name 'glNormal3d';
    public static z_Normal3d_ovr0 := _z_Normal3d_ovr0;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Normal3d(nx: real; ny: real; nz: real) := z_Normal3d_ovr0(nx, ny, nz);
    
    // added in gl1.0, deprecated in gl3.2
    private static procedure _z_Normal3dv_ovr0([MarshalAs(UnmanagedType.LPArray)] v: array of real);
    external 'opengl32.dll' name 'glNormal3dv';
    public static z_Normal3dv_ovr0 := _z_Normal3dv_ovr0;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Normal3dv(v: array of real) := z_Normal3dv_ovr0(v);
    private static procedure _z_Normal3dv_ovr1(var v: real);
    external 'opengl32.dll' name 'glNormal3dv';
    public static z_Normal3dv_ovr1 := _z_Normal3dv_ovr1;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Normal3dv(var v: real) := z_Normal3dv_ovr1(v);
    private static procedure _z_Normal3dv_ovr2(v: IntPtr);
    external 'opengl32.dll' name 'glNormal3dv';
    public static z_Normal3dv_ovr2 := _z_Normal3dv_ovr2;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Normal3dv(v: IntPtr) := z_Normal3dv_ovr2(v);
    
    // added in gl1.0, deprecated in gl3.2
    private static procedure _z_Normal3f_ovr0(nx: single; ny: single; nz: single);
    external 'opengl32.dll' name 'glNormal3f';
    public static z_Normal3f_ovr0 := _z_Normal3f_ovr0;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Normal3f(nx: single; ny: single; nz: single) := z_Normal3f_ovr0(nx, ny, nz);
    
    // added in gl1.0, deprecated in gl3.2
    private static procedure _z_Normal3fv_ovr0([MarshalAs(UnmanagedType.LPArray)] v: array of single);
    external 'opengl32.dll' name 'glNormal3fv';
    public static z_Normal3fv_ovr0 := _z_Normal3fv_ovr0;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Normal3fv(v: array of single) := z_Normal3fv_ovr0(v);
    private static procedure _z_Normal3fv_ovr1(var v: single);
    external 'opengl32.dll' name 'glNormal3fv';
    public static z_Normal3fv_ovr1 := _z_Normal3fv_ovr1;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Normal3fv(var v: single) := z_Normal3fv_ovr1(v);
    private static procedure _z_Normal3fv_ovr2(v: IntPtr);
    external 'opengl32.dll' name 'glNormal3fv';
    public static z_Normal3fv_ovr2 := _z_Normal3fv_ovr2;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Normal3fv(v: IntPtr) := z_Normal3fv_ovr2(v);
    
    // added in gl1.0, deprecated in gl3.2
    private static procedure _z_Normal3i_ovr0(nx: Int32; ny: Int32; nz: Int32);
    external 'opengl32.dll' name 'glNormal3i';
    public static z_Normal3i_ovr0 := _z_Normal3i_ovr0;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Normal3i(nx: Int32; ny: Int32; nz: Int32) := z_Normal3i_ovr0(nx, ny, nz);
    
    // added in gl1.0, deprecated in gl3.2
    private static procedure _z_Normal3iv_ovr0([MarshalAs(UnmanagedType.LPArray)] v: array of Int32);
    external 'opengl32.dll' name 'glNormal3iv';
    public static z_Normal3iv_ovr0 := _z_Normal3iv_ovr0;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Normal3iv(v: array of Int32) := z_Normal3iv_ovr0(v);
    private static procedure _z_Normal3iv_ovr1(var v: Int32);
    external 'opengl32.dll' name 'glNormal3iv';
    public static z_Normal3iv_ovr1 := _z_Normal3iv_ovr1;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Normal3iv(var v: Int32) := z_Normal3iv_ovr1(v);
    private static procedure _z_Normal3iv_ovr2(v: IntPtr);
    external 'opengl32.dll' name 'glNormal3iv';
    public static z_Normal3iv_ovr2 := _z_Normal3iv_ovr2;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Normal3iv(v: IntPtr) := z_Normal3iv_ovr2(v);
    
    // added in gl1.0, deprecated in gl3.2
    private static procedure _z_Normal3s_ovr0(nx: Int16; ny: Int16; nz: Int16);
    external 'opengl32.dll' name 'glNormal3s';
    public static z_Normal3s_ovr0 := _z_Normal3s_ovr0;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Normal3s(nx: Int16; ny: Int16; nz: Int16) := z_Normal3s_ovr0(nx, ny, nz);
    
    // added in gl1.0, deprecated in gl3.2
    private static procedure _z_Normal3sv_ovr0([MarshalAs(UnmanagedType.LPArray)] v: array of Int16);
    external 'opengl32.dll' name 'glNormal3sv';
    public static z_Normal3sv_ovr0 := _z_Normal3sv_ovr0;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Normal3sv(v: array of Int16) := z_Normal3sv_ovr0(v);
    private static procedure _z_Normal3sv_ovr1(var v: Int16);
    external 'opengl32.dll' name 'glNormal3sv';
    public static z_Normal3sv_ovr1 := _z_Normal3sv_ovr1;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Normal3sv(var v: Int16) := z_Normal3sv_ovr1(v);
    private static procedure _z_Normal3sv_ovr2(v: IntPtr);
    external 'opengl32.dll' name 'glNormal3sv';
    public static z_Normal3sv_ovr2 := _z_Normal3sv_ovr2;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Normal3sv(v: IntPtr) := z_Normal3sv_ovr2(v);
    
    // added in gl1.1, deprecated in gl3.2
    private static procedure _z_NormalPointer_ovr0(&type: NormalPointerType; stride: Int32; pointer: IntPtr);
    external 'opengl32.dll' name 'glNormalPointer';
    public static z_NormalPointer_ovr0 := _z_NormalPointer_ovr0;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure NormalPointer(&type: NormalPointerType; stride: Int32; pointer: IntPtr) := z_NormalPointer_ovr0(&type, stride, pointer);
    
    // added in gl1.0, deprecated in gl3.2
    private static procedure _z_Ortho_ovr0(left: real; right: real; bottom: real; top: real; zNear: real; zFar: real);
    external 'opengl32.dll' name 'glOrtho';
    public static z_Ortho_ovr0 := _z_Ortho_ovr0;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Ortho(left: real; right: real; bottom: real; top: real; zNear: real; zFar: real) := z_Ortho_ovr0(left, right, bottom, top, zNear, zFar);
    
    // added in gl1.0, deprecated in gl3.2
    private static procedure _z_PassThrough_ovr0(token: single);
    external 'opengl32.dll' name 'glPassThrough';
    public static z_PassThrough_ovr0 := _z_PassThrough_ovr0;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure PassThrough(token: single) := z_PassThrough_ovr0(token);
    
    // added in gl1.0, deprecated in gl3.2
    private static procedure _z_PixelMapfv_ovr0(map: PixelMap; mapsize: Int32; [MarshalAs(UnmanagedType.LPArray)] values: array of single);
    external 'opengl32.dll' name 'glPixelMapfv';
    public static z_PixelMapfv_ovr0 := _z_PixelMapfv_ovr0;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure PixelMapfv(map: PixelMap; mapsize: Int32; values: array of single) := z_PixelMapfv_ovr0(map, mapsize, values);
    private static procedure _z_PixelMapfv_ovr1(map: PixelMap; mapsize: Int32; var values: single);
    external 'opengl32.dll' name 'glPixelMapfv';
    public static z_PixelMapfv_ovr1 := _z_PixelMapfv_ovr1;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure PixelMapfv(map: PixelMap; mapsize: Int32; var values: single) := z_PixelMapfv_ovr1(map, mapsize, values);
    private static procedure _z_PixelMapfv_ovr2(map: PixelMap; mapsize: Int32; values: IntPtr);
    external 'opengl32.dll' name 'glPixelMapfv';
    public static z_PixelMapfv_ovr2 := _z_PixelMapfv_ovr2;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure PixelMapfv(map: PixelMap; mapsize: Int32; values: IntPtr) := z_PixelMapfv_ovr2(map, mapsize, values);
    
    // added in gl1.0, deprecated in gl3.2
    private static procedure _z_PixelMapuiv_ovr0(map: PixelMap; mapsize: Int32; [MarshalAs(UnmanagedType.LPArray)] values: array of UInt32);
    external 'opengl32.dll' name 'glPixelMapuiv';
    public static z_PixelMapuiv_ovr0 := _z_PixelMapuiv_ovr0;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure PixelMapuiv(map: PixelMap; mapsize: Int32; values: array of UInt32) := z_PixelMapuiv_ovr0(map, mapsize, values);
    private static procedure _z_PixelMapuiv_ovr1(map: PixelMap; mapsize: Int32; var values: UInt32);
    external 'opengl32.dll' name 'glPixelMapuiv';
    public static z_PixelMapuiv_ovr1 := _z_PixelMapuiv_ovr1;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure PixelMapuiv(map: PixelMap; mapsize: Int32; var values: UInt32) := z_PixelMapuiv_ovr1(map, mapsize, values);
    private static procedure _z_PixelMapuiv_ovr2(map: PixelMap; mapsize: Int32; values: IntPtr);
    external 'opengl32.dll' name 'glPixelMapuiv';
    public static z_PixelMapuiv_ovr2 := _z_PixelMapuiv_ovr2;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure PixelMapuiv(map: PixelMap; mapsize: Int32; values: IntPtr) := z_PixelMapuiv_ovr2(map, mapsize, values);
    
    // added in gl1.0, deprecated in gl3.2
    private static procedure _z_PixelMapusv_ovr0(map: PixelMap; mapsize: Int32; [MarshalAs(UnmanagedType.LPArray)] values: array of UInt16);
    external 'opengl32.dll' name 'glPixelMapusv';
    public static z_PixelMapusv_ovr0 := _z_PixelMapusv_ovr0;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure PixelMapusv(map: PixelMap; mapsize: Int32; values: array of UInt16) := z_PixelMapusv_ovr0(map, mapsize, values);
    private static procedure _z_PixelMapusv_ovr1(map: PixelMap; mapsize: Int32; var values: UInt16);
    external 'opengl32.dll' name 'glPixelMapusv';
    public static z_PixelMapusv_ovr1 := _z_PixelMapusv_ovr1;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure PixelMapusv(map: PixelMap; mapsize: Int32; var values: UInt16) := z_PixelMapusv_ovr1(map, mapsize, values);
    private static procedure _z_PixelMapusv_ovr2(map: PixelMap; mapsize: Int32; values: IntPtr);
    external 'opengl32.dll' name 'glPixelMapusv';
    public static z_PixelMapusv_ovr2 := _z_PixelMapusv_ovr2;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure PixelMapusv(map: PixelMap; mapsize: Int32; values: IntPtr) := z_PixelMapusv_ovr2(map, mapsize, values);
    
    // added in gl1.0, deprecated in gl3.2
    private static procedure _z_PixelTransferf_ovr0(pname: PixelTransferParameter; param: single);
    external 'opengl32.dll' name 'glPixelTransferf';
    public static z_PixelTransferf_ovr0 := _z_PixelTransferf_ovr0;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure PixelTransferf(pname: PixelTransferParameter; param: single) := z_PixelTransferf_ovr0(pname, param);
    
    // added in gl1.0, deprecated in gl3.2
    private static procedure _z_PixelTransferi_ovr0(pname: PixelTransferParameter; param: Int32);
    external 'opengl32.dll' name 'glPixelTransferi';
    public static z_PixelTransferi_ovr0 := _z_PixelTransferi_ovr0;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure PixelTransferi(pname: PixelTransferParameter; param: Int32) := z_PixelTransferi_ovr0(pname, param);
    
    // added in gl1.0, deprecated in gl3.2
    private static procedure _z_PixelZoom_ovr0(xfactor: single; yfactor: single);
    external 'opengl32.dll' name 'glPixelZoom';
    public static z_PixelZoom_ovr0 := _z_PixelZoom_ovr0;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure PixelZoom(xfactor: single; yfactor: single) := z_PixelZoom_ovr0(xfactor, yfactor);
    
    // added in gl1.0, deprecated in gl3.2
    private static procedure _z_PolygonStipple_ovr0([MarshalAs(UnmanagedType.LPArray)] mask: array of Byte);
    external 'opengl32.dll' name 'glPolygonStipple';
    public static z_PolygonStipple_ovr0 := _z_PolygonStipple_ovr0;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure PolygonStipple(mask: array of Byte) := z_PolygonStipple_ovr0(mask);
    private static procedure _z_PolygonStipple_ovr1(var mask: Byte);
    external 'opengl32.dll' name 'glPolygonStipple';
    public static z_PolygonStipple_ovr1 := _z_PolygonStipple_ovr1;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure PolygonStipple(var mask: Byte) := z_PolygonStipple_ovr1(mask);
    private static procedure _z_PolygonStipple_ovr2(mask: IntPtr);
    external 'opengl32.dll' name 'glPolygonStipple';
    public static z_PolygonStipple_ovr2 := _z_PolygonStipple_ovr2;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure PolygonStipple(mask: IntPtr) := z_PolygonStipple_ovr2(mask);
    
    // added in gl1.0, deprecated in gl3.2
    private static procedure _z_PopAttrib_ovr0;
    external 'opengl32.dll' name 'glPopAttrib';
    public static z_PopAttrib_ovr0 := _z_PopAttrib_ovr0;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure PopAttrib := z_PopAttrib_ovr0;
    
    // added in gl1.1, deprecated in gl3.2
    private static procedure _z_PopClientAttrib_ovr0;
    external 'opengl32.dll' name 'glPopClientAttrib';
    public static z_PopClientAttrib_ovr0 := _z_PopClientAttrib_ovr0;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure PopClientAttrib := z_PopClientAttrib_ovr0;
    
    // added in gl1.0, deprecated in gl3.2
    private static procedure _z_PopMatrix_ovr0;
    external 'opengl32.dll' name 'glPopMatrix';
    public static z_PopMatrix_ovr0 := _z_PopMatrix_ovr0;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure PopMatrix := z_PopMatrix_ovr0;
    
    // added in gl1.0, deprecated in gl3.2
    private static procedure _z_PopName_ovr0;
    external 'opengl32.dll' name 'glPopName';
    public static z_PopName_ovr0 := _z_PopName_ovr0;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure PopName := z_PopName_ovr0;
    
    // added in gl1.1, deprecated in gl3.2
    private static procedure _z_PrioritizeTextures_ovr0(n: Int32; [MarshalAs(UnmanagedType.LPArray)] textures: array of UInt32; [MarshalAs(UnmanagedType.LPArray)] priorities: array of single);
    external 'opengl32.dll' name 'glPrioritizeTextures';
    public static z_PrioritizeTextures_ovr0 := _z_PrioritizeTextures_ovr0;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure PrioritizeTextures(n: Int32; textures: array of UInt32; priorities: array of single) := z_PrioritizeTextures_ovr0(n, textures, priorities);
    private static procedure _z_PrioritizeTextures_ovr1(n: Int32; [MarshalAs(UnmanagedType.LPArray)] textures: array of UInt32; var priorities: single);
    external 'opengl32.dll' name 'glPrioritizeTextures';
    public static z_PrioritizeTextures_ovr1 := _z_PrioritizeTextures_ovr1;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure PrioritizeTextures(n: Int32; textures: array of UInt32; var priorities: single) := z_PrioritizeTextures_ovr1(n, textures, priorities);
    private static procedure _z_PrioritizeTextures_ovr2(n: Int32; [MarshalAs(UnmanagedType.LPArray)] textures: array of UInt32; priorities: IntPtr);
    external 'opengl32.dll' name 'glPrioritizeTextures';
    public static z_PrioritizeTextures_ovr2 := _z_PrioritizeTextures_ovr2;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure PrioritizeTextures(n: Int32; textures: array of UInt32; priorities: IntPtr) := z_PrioritizeTextures_ovr2(n, textures, priorities);
    private static procedure _z_PrioritizeTextures_ovr3(n: Int32; var textures: UInt32; [MarshalAs(UnmanagedType.LPArray)] priorities: array of single);
    external 'opengl32.dll' name 'glPrioritizeTextures';
    public static z_PrioritizeTextures_ovr3 := _z_PrioritizeTextures_ovr3;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure PrioritizeTextures(n: Int32; var textures: UInt32; priorities: array of single) := z_PrioritizeTextures_ovr3(n, textures, priorities);
    private static procedure _z_PrioritizeTextures_ovr4(n: Int32; var textures: UInt32; var priorities: single);
    external 'opengl32.dll' name 'glPrioritizeTextures';
    public static z_PrioritizeTextures_ovr4 := _z_PrioritizeTextures_ovr4;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure PrioritizeTextures(n: Int32; var textures: UInt32; var priorities: single) := z_PrioritizeTextures_ovr4(n, textures, priorities);
    private static procedure _z_PrioritizeTextures_ovr5(n: Int32; var textures: UInt32; priorities: IntPtr);
    external 'opengl32.dll' name 'glPrioritizeTextures';
    public static z_PrioritizeTextures_ovr5 := _z_PrioritizeTextures_ovr5;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure PrioritizeTextures(n: Int32; var textures: UInt32; priorities: IntPtr) := z_PrioritizeTextures_ovr5(n, textures, priorities);
    private static procedure _z_PrioritizeTextures_ovr6(n: Int32; textures: IntPtr; [MarshalAs(UnmanagedType.LPArray)] priorities: array of single);
    external 'opengl32.dll' name 'glPrioritizeTextures';
    public static z_PrioritizeTextures_ovr6 := _z_PrioritizeTextures_ovr6;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure PrioritizeTextures(n: Int32; textures: IntPtr; priorities: array of single) := z_PrioritizeTextures_ovr6(n, textures, priorities);
    private static procedure _z_PrioritizeTextures_ovr7(n: Int32; textures: IntPtr; var priorities: single);
    external 'opengl32.dll' name 'glPrioritizeTextures';
    public static z_PrioritizeTextures_ovr7 := _z_PrioritizeTextures_ovr7;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure PrioritizeTextures(n: Int32; textures: IntPtr; var priorities: single) := z_PrioritizeTextures_ovr7(n, textures, priorities);
    private static procedure _z_PrioritizeTextures_ovr8(n: Int32; textures: IntPtr; priorities: IntPtr);
    external 'opengl32.dll' name 'glPrioritizeTextures';
    public static z_PrioritizeTextures_ovr8 := _z_PrioritizeTextures_ovr8;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure PrioritizeTextures(n: Int32; textures: IntPtr; priorities: IntPtr) := z_PrioritizeTextures_ovr8(n, textures, priorities);
    
    // added in gl1.0, deprecated in gl3.2
    private static procedure _z_PushAttrib_ovr0(mask: AttribMask);
    external 'opengl32.dll' name 'glPushAttrib';
    public static z_PushAttrib_ovr0 := _z_PushAttrib_ovr0;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure PushAttrib(mask: AttribMask) := z_PushAttrib_ovr0(mask);
    
    // added in gl1.1, deprecated in gl3.2
    private static procedure _z_PushClientAttrib_ovr0(mask: ClientAttribMask);
    external 'opengl32.dll' name 'glPushClientAttrib';
    public static z_PushClientAttrib_ovr0 := _z_PushClientAttrib_ovr0;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure PushClientAttrib(mask: ClientAttribMask) := z_PushClientAttrib_ovr0(mask);
    
    // added in gl1.0, deprecated in gl3.2
    private static procedure _z_PushMatrix_ovr0;
    external 'opengl32.dll' name 'glPushMatrix';
    public static z_PushMatrix_ovr0 := _z_PushMatrix_ovr0;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure PushMatrix := z_PushMatrix_ovr0;
    
    // added in gl1.0, deprecated in gl3.2
    private static procedure _z_PushName_ovr0(name: UInt32);
    external 'opengl32.dll' name 'glPushName';
    public static z_PushName_ovr0 := _z_PushName_ovr0;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure PushName(name: UInt32) := z_PushName_ovr0(name);
    
    // added in gl1.0, deprecated in gl3.2
    private static procedure _z_RasterPos2d_ovr0(x: real; y: real);
    external 'opengl32.dll' name 'glRasterPos2d';
    public static z_RasterPos2d_ovr0 := _z_RasterPos2d_ovr0;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure RasterPos2d(x: real; y: real) := z_RasterPos2d_ovr0(x, y);
    
    // added in gl1.0, deprecated in gl3.2
    private static procedure _z_RasterPos2dv_ovr0([MarshalAs(UnmanagedType.LPArray)] v: array of real);
    external 'opengl32.dll' name 'glRasterPos2dv';
    public static z_RasterPos2dv_ovr0 := _z_RasterPos2dv_ovr0;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure RasterPos2dv(v: array of real) := z_RasterPos2dv_ovr0(v);
    private static procedure _z_RasterPos2dv_ovr1(var v: real);
    external 'opengl32.dll' name 'glRasterPos2dv';
    public static z_RasterPos2dv_ovr1 := _z_RasterPos2dv_ovr1;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure RasterPos2dv(var v: real) := z_RasterPos2dv_ovr1(v);
    private static procedure _z_RasterPos2dv_ovr2(v: IntPtr);
    external 'opengl32.dll' name 'glRasterPos2dv';
    public static z_RasterPos2dv_ovr2 := _z_RasterPos2dv_ovr2;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure RasterPos2dv(v: IntPtr) := z_RasterPos2dv_ovr2(v);
    
    // added in gl1.0, deprecated in gl3.2
    private static procedure _z_RasterPos2f_ovr0(x: single; y: single);
    external 'opengl32.dll' name 'glRasterPos2f';
    public static z_RasterPos2f_ovr0 := _z_RasterPos2f_ovr0;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure RasterPos2f(x: single; y: single) := z_RasterPos2f_ovr0(x, y);
    
    // added in gl1.0, deprecated in gl3.2
    private static procedure _z_RasterPos2fv_ovr0([MarshalAs(UnmanagedType.LPArray)] v: array of single);
    external 'opengl32.dll' name 'glRasterPos2fv';
    public static z_RasterPos2fv_ovr0 := _z_RasterPos2fv_ovr0;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure RasterPos2fv(v: array of single) := z_RasterPos2fv_ovr0(v);
    private static procedure _z_RasterPos2fv_ovr1(var v: single);
    external 'opengl32.dll' name 'glRasterPos2fv';
    public static z_RasterPos2fv_ovr1 := _z_RasterPos2fv_ovr1;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure RasterPos2fv(var v: single) := z_RasterPos2fv_ovr1(v);
    private static procedure _z_RasterPos2fv_ovr2(v: IntPtr);
    external 'opengl32.dll' name 'glRasterPos2fv';
    public static z_RasterPos2fv_ovr2 := _z_RasterPos2fv_ovr2;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure RasterPos2fv(v: IntPtr) := z_RasterPos2fv_ovr2(v);
    
    // added in gl1.0, deprecated in gl3.2
    private static procedure _z_RasterPos2i_ovr0(x: Int32; y: Int32);
    external 'opengl32.dll' name 'glRasterPos2i';
    public static z_RasterPos2i_ovr0 := _z_RasterPos2i_ovr0;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure RasterPos2i(x: Int32; y: Int32) := z_RasterPos2i_ovr0(x, y);
    
    // added in gl1.0, deprecated in gl3.2
    private static procedure _z_RasterPos2iv_ovr0([MarshalAs(UnmanagedType.LPArray)] v: array of Int32);
    external 'opengl32.dll' name 'glRasterPos2iv';
    public static z_RasterPos2iv_ovr0 := _z_RasterPos2iv_ovr0;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure RasterPos2iv(v: array of Int32) := z_RasterPos2iv_ovr0(v);
    private static procedure _z_RasterPos2iv_ovr1(var v: Int32);
    external 'opengl32.dll' name 'glRasterPos2iv';
    public static z_RasterPos2iv_ovr1 := _z_RasterPos2iv_ovr1;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure RasterPos2iv(var v: Int32) := z_RasterPos2iv_ovr1(v);
    private static procedure _z_RasterPos2iv_ovr2(v: IntPtr);
    external 'opengl32.dll' name 'glRasterPos2iv';
    public static z_RasterPos2iv_ovr2 := _z_RasterPos2iv_ovr2;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure RasterPos2iv(v: IntPtr) := z_RasterPos2iv_ovr2(v);
    
    // added in gl1.0, deprecated in gl3.2
    private static procedure _z_RasterPos2s_ovr0(x: Int16; y: Int16);
    external 'opengl32.dll' name 'glRasterPos2s';
    public static z_RasterPos2s_ovr0 := _z_RasterPos2s_ovr0;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure RasterPos2s(x: Int16; y: Int16) := z_RasterPos2s_ovr0(x, y);
    
    // added in gl1.0, deprecated in gl3.2
    private static procedure _z_RasterPos2sv_ovr0([MarshalAs(UnmanagedType.LPArray)] v: array of Int16);
    external 'opengl32.dll' name 'glRasterPos2sv';
    public static z_RasterPos2sv_ovr0 := _z_RasterPos2sv_ovr0;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure RasterPos2sv(v: array of Int16) := z_RasterPos2sv_ovr0(v);
    private static procedure _z_RasterPos2sv_ovr1(var v: Int16);
    external 'opengl32.dll' name 'glRasterPos2sv';
    public static z_RasterPos2sv_ovr1 := _z_RasterPos2sv_ovr1;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure RasterPos2sv(var v: Int16) := z_RasterPos2sv_ovr1(v);
    private static procedure _z_RasterPos2sv_ovr2(v: IntPtr);
    external 'opengl32.dll' name 'glRasterPos2sv';
    public static z_RasterPos2sv_ovr2 := _z_RasterPos2sv_ovr2;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure RasterPos2sv(v: IntPtr) := z_RasterPos2sv_ovr2(v);
    
    // added in gl1.0, deprecated in gl3.2
    private static procedure _z_RasterPos3d_ovr0(x: real; y: real; z: real);
    external 'opengl32.dll' name 'glRasterPos3d';
    public static z_RasterPos3d_ovr0 := _z_RasterPos3d_ovr0;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure RasterPos3d(x: real; y: real; z: real) := z_RasterPos3d_ovr0(x, y, z);
    
    // added in gl1.0, deprecated in gl3.2
    private static procedure _z_RasterPos3dv_ovr0([MarshalAs(UnmanagedType.LPArray)] v: array of real);
    external 'opengl32.dll' name 'glRasterPos3dv';
    public static z_RasterPos3dv_ovr0 := _z_RasterPos3dv_ovr0;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure RasterPos3dv(v: array of real) := z_RasterPos3dv_ovr0(v);
    private static procedure _z_RasterPos3dv_ovr1(var v: real);
    external 'opengl32.dll' name 'glRasterPos3dv';
    public static z_RasterPos3dv_ovr1 := _z_RasterPos3dv_ovr1;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure RasterPos3dv(var v: real) := z_RasterPos3dv_ovr1(v);
    private static procedure _z_RasterPos3dv_ovr2(v: IntPtr);
    external 'opengl32.dll' name 'glRasterPos3dv';
    public static z_RasterPos3dv_ovr2 := _z_RasterPos3dv_ovr2;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure RasterPos3dv(v: IntPtr) := z_RasterPos3dv_ovr2(v);
    
    // added in gl1.0, deprecated in gl3.2
    private static procedure _z_RasterPos3f_ovr0(x: single; y: single; z: single);
    external 'opengl32.dll' name 'glRasterPos3f';
    public static z_RasterPos3f_ovr0 := _z_RasterPos3f_ovr0;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure RasterPos3f(x: single; y: single; z: single) := z_RasterPos3f_ovr0(x, y, z);
    
    // added in gl1.0, deprecated in gl3.2
    private static procedure _z_RasterPos3fv_ovr0([MarshalAs(UnmanagedType.LPArray)] v: array of single);
    external 'opengl32.dll' name 'glRasterPos3fv';
    public static z_RasterPos3fv_ovr0 := _z_RasterPos3fv_ovr0;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure RasterPos3fv(v: array of single) := z_RasterPos3fv_ovr0(v);
    private static procedure _z_RasterPos3fv_ovr1(var v: single);
    external 'opengl32.dll' name 'glRasterPos3fv';
    public static z_RasterPos3fv_ovr1 := _z_RasterPos3fv_ovr1;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure RasterPos3fv(var v: single) := z_RasterPos3fv_ovr1(v);
    private static procedure _z_RasterPos3fv_ovr2(v: IntPtr);
    external 'opengl32.dll' name 'glRasterPos3fv';
    public static z_RasterPos3fv_ovr2 := _z_RasterPos3fv_ovr2;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure RasterPos3fv(v: IntPtr) := z_RasterPos3fv_ovr2(v);
    
    // added in gl1.0, deprecated in gl3.2
    private static procedure _z_RasterPos3i_ovr0(x: Int32; y: Int32; z: Int32);
    external 'opengl32.dll' name 'glRasterPos3i';
    public static z_RasterPos3i_ovr0 := _z_RasterPos3i_ovr0;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure RasterPos3i(x: Int32; y: Int32; z: Int32) := z_RasterPos3i_ovr0(x, y, z);
    
    // added in gl1.0, deprecated in gl3.2
    private static procedure _z_RasterPos3iv_ovr0([MarshalAs(UnmanagedType.LPArray)] v: array of Int32);
    external 'opengl32.dll' name 'glRasterPos3iv';
    public static z_RasterPos3iv_ovr0 := _z_RasterPos3iv_ovr0;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure RasterPos3iv(v: array of Int32) := z_RasterPos3iv_ovr0(v);
    private static procedure _z_RasterPos3iv_ovr1(var v: Int32);
    external 'opengl32.dll' name 'glRasterPos3iv';
    public static z_RasterPos3iv_ovr1 := _z_RasterPos3iv_ovr1;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure RasterPos3iv(var v: Int32) := z_RasterPos3iv_ovr1(v);
    private static procedure _z_RasterPos3iv_ovr2(v: IntPtr);
    external 'opengl32.dll' name 'glRasterPos3iv';
    public static z_RasterPos3iv_ovr2 := _z_RasterPos3iv_ovr2;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure RasterPos3iv(v: IntPtr) := z_RasterPos3iv_ovr2(v);
    
    // added in gl1.0, deprecated in gl3.2
    private static procedure _z_RasterPos3s_ovr0(x: Int16; y: Int16; z: Int16);
    external 'opengl32.dll' name 'glRasterPos3s';
    public static z_RasterPos3s_ovr0 := _z_RasterPos3s_ovr0;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure RasterPos3s(x: Int16; y: Int16; z: Int16) := z_RasterPos3s_ovr0(x, y, z);
    
    // added in gl1.0, deprecated in gl3.2
    private static procedure _z_RasterPos3sv_ovr0([MarshalAs(UnmanagedType.LPArray)] v: array of Int16);
    external 'opengl32.dll' name 'glRasterPos3sv';
    public static z_RasterPos3sv_ovr0 := _z_RasterPos3sv_ovr0;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure RasterPos3sv(v: array of Int16) := z_RasterPos3sv_ovr0(v);
    private static procedure _z_RasterPos3sv_ovr1(var v: Int16);
    external 'opengl32.dll' name 'glRasterPos3sv';
    public static z_RasterPos3sv_ovr1 := _z_RasterPos3sv_ovr1;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure RasterPos3sv(var v: Int16) := z_RasterPos3sv_ovr1(v);
    private static procedure _z_RasterPos3sv_ovr2(v: IntPtr);
    external 'opengl32.dll' name 'glRasterPos3sv';
    public static z_RasterPos3sv_ovr2 := _z_RasterPos3sv_ovr2;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure RasterPos3sv(v: IntPtr) := z_RasterPos3sv_ovr2(v);
    
    // added in gl1.0, deprecated in gl3.2
    private static procedure _z_RasterPos4d_ovr0(x: real; y: real; z: real; w: real);
    external 'opengl32.dll' name 'glRasterPos4d';
    public static z_RasterPos4d_ovr0 := _z_RasterPos4d_ovr0;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure RasterPos4d(x: real; y: real; z: real; w: real) := z_RasterPos4d_ovr0(x, y, z, w);
    
    // added in gl1.0, deprecated in gl3.2
    private static procedure _z_RasterPos4dv_ovr0([MarshalAs(UnmanagedType.LPArray)] v: array of real);
    external 'opengl32.dll' name 'glRasterPos4dv';
    public static z_RasterPos4dv_ovr0 := _z_RasterPos4dv_ovr0;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure RasterPos4dv(v: array of real) := z_RasterPos4dv_ovr0(v);
    private static procedure _z_RasterPos4dv_ovr1(var v: real);
    external 'opengl32.dll' name 'glRasterPos4dv';
    public static z_RasterPos4dv_ovr1 := _z_RasterPos4dv_ovr1;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure RasterPos4dv(var v: real) := z_RasterPos4dv_ovr1(v);
    private static procedure _z_RasterPos4dv_ovr2(v: IntPtr);
    external 'opengl32.dll' name 'glRasterPos4dv';
    public static z_RasterPos4dv_ovr2 := _z_RasterPos4dv_ovr2;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure RasterPos4dv(v: IntPtr) := z_RasterPos4dv_ovr2(v);
    
    // added in gl1.0, deprecated in gl3.2
    private static procedure _z_RasterPos4f_ovr0(x: single; y: single; z: single; w: single);
    external 'opengl32.dll' name 'glRasterPos4f';
    public static z_RasterPos4f_ovr0 := _z_RasterPos4f_ovr0;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure RasterPos4f(x: single; y: single; z: single; w: single) := z_RasterPos4f_ovr0(x, y, z, w);
    
    // added in gl1.0, deprecated in gl3.2
    private static procedure _z_RasterPos4fv_ovr0([MarshalAs(UnmanagedType.LPArray)] v: array of single);
    external 'opengl32.dll' name 'glRasterPos4fv';
    public static z_RasterPos4fv_ovr0 := _z_RasterPos4fv_ovr0;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure RasterPos4fv(v: array of single) := z_RasterPos4fv_ovr0(v);
    private static procedure _z_RasterPos4fv_ovr1(var v: single);
    external 'opengl32.dll' name 'glRasterPos4fv';
    public static z_RasterPos4fv_ovr1 := _z_RasterPos4fv_ovr1;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure RasterPos4fv(var v: single) := z_RasterPos4fv_ovr1(v);
    private static procedure _z_RasterPos4fv_ovr2(v: IntPtr);
    external 'opengl32.dll' name 'glRasterPos4fv';
    public static z_RasterPos4fv_ovr2 := _z_RasterPos4fv_ovr2;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure RasterPos4fv(v: IntPtr) := z_RasterPos4fv_ovr2(v);
    
    // added in gl1.0, deprecated in gl3.2
    private static procedure _z_RasterPos4i_ovr0(x: Int32; y: Int32; z: Int32; w: Int32);
    external 'opengl32.dll' name 'glRasterPos4i';
    public static z_RasterPos4i_ovr0 := _z_RasterPos4i_ovr0;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure RasterPos4i(x: Int32; y: Int32; z: Int32; w: Int32) := z_RasterPos4i_ovr0(x, y, z, w);
    
    // added in gl1.0, deprecated in gl3.2
    private static procedure _z_RasterPos4iv_ovr0([MarshalAs(UnmanagedType.LPArray)] v: array of Int32);
    external 'opengl32.dll' name 'glRasterPos4iv';
    public static z_RasterPos4iv_ovr0 := _z_RasterPos4iv_ovr0;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure RasterPos4iv(v: array of Int32) := z_RasterPos4iv_ovr0(v);
    private static procedure _z_RasterPos4iv_ovr1(var v: Int32);
    external 'opengl32.dll' name 'glRasterPos4iv';
    public static z_RasterPos4iv_ovr1 := _z_RasterPos4iv_ovr1;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure RasterPos4iv(var v: Int32) := z_RasterPos4iv_ovr1(v);
    private static procedure _z_RasterPos4iv_ovr2(v: IntPtr);
    external 'opengl32.dll' name 'glRasterPos4iv';
    public static z_RasterPos4iv_ovr2 := _z_RasterPos4iv_ovr2;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure RasterPos4iv(v: IntPtr) := z_RasterPos4iv_ovr2(v);
    
    // added in gl1.0, deprecated in gl3.2
    private static procedure _z_RasterPos4s_ovr0(x: Int16; y: Int16; z: Int16; w: Int16);
    external 'opengl32.dll' name 'glRasterPos4s';
    public static z_RasterPos4s_ovr0 := _z_RasterPos4s_ovr0;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure RasterPos4s(x: Int16; y: Int16; z: Int16; w: Int16) := z_RasterPos4s_ovr0(x, y, z, w);
    
    // added in gl1.0, deprecated in gl3.2
    private static procedure _z_RasterPos4sv_ovr0([MarshalAs(UnmanagedType.LPArray)] v: array of Int16);
    external 'opengl32.dll' name 'glRasterPos4sv';
    public static z_RasterPos4sv_ovr0 := _z_RasterPos4sv_ovr0;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure RasterPos4sv(v: array of Int16) := z_RasterPos4sv_ovr0(v);
    private static procedure _z_RasterPos4sv_ovr1(var v: Int16);
    external 'opengl32.dll' name 'glRasterPos4sv';
    public static z_RasterPos4sv_ovr1 := _z_RasterPos4sv_ovr1;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure RasterPos4sv(var v: Int16) := z_RasterPos4sv_ovr1(v);
    private static procedure _z_RasterPos4sv_ovr2(v: IntPtr);
    external 'opengl32.dll' name 'glRasterPos4sv';
    public static z_RasterPos4sv_ovr2 := _z_RasterPos4sv_ovr2;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure RasterPos4sv(v: IntPtr) := z_RasterPos4sv_ovr2(v);
    
    // added in gl1.0, deprecated in gl3.2
    private static procedure _z_Rectd_ovr0(x1: real; y1: real; x2: real; y2: real);
    external 'opengl32.dll' name 'glRectd';
    public static z_Rectd_ovr0 := _z_Rectd_ovr0;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Rectd(x1: real; y1: real; x2: real; y2: real) := z_Rectd_ovr0(x1, y1, x2, y2);
    
    // added in gl1.0, deprecated in gl3.2
    private static procedure _z_Rectdv_ovr0([MarshalAs(UnmanagedType.LPArray)] v1: array of real; [MarshalAs(UnmanagedType.LPArray)] v2: array of real);
    external 'opengl32.dll' name 'glRectdv';
    public static z_Rectdv_ovr0 := _z_Rectdv_ovr0;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Rectdv(v1: array of real; v2: array of real) := z_Rectdv_ovr0(v1, v2);
    private static procedure _z_Rectdv_ovr1([MarshalAs(UnmanagedType.LPArray)] v1: array of real; var v2: real);
    external 'opengl32.dll' name 'glRectdv';
    public static z_Rectdv_ovr1 := _z_Rectdv_ovr1;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Rectdv(v1: array of real; var v2: real) := z_Rectdv_ovr1(v1, v2);
    private static procedure _z_Rectdv_ovr2([MarshalAs(UnmanagedType.LPArray)] v1: array of real; v2: IntPtr);
    external 'opengl32.dll' name 'glRectdv';
    public static z_Rectdv_ovr2 := _z_Rectdv_ovr2;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Rectdv(v1: array of real; v2: IntPtr) := z_Rectdv_ovr2(v1, v2);
    private static procedure _z_Rectdv_ovr3(var v1: real; [MarshalAs(UnmanagedType.LPArray)] v2: array of real);
    external 'opengl32.dll' name 'glRectdv';
    public static z_Rectdv_ovr3 := _z_Rectdv_ovr3;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Rectdv(var v1: real; v2: array of real) := z_Rectdv_ovr3(v1, v2);
    private static procedure _z_Rectdv_ovr4(var v1: real; var v2: real);
    external 'opengl32.dll' name 'glRectdv';
    public static z_Rectdv_ovr4 := _z_Rectdv_ovr4;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Rectdv(var v1: real; var v2: real) := z_Rectdv_ovr4(v1, v2);
    private static procedure _z_Rectdv_ovr5(var v1: real; v2: IntPtr);
    external 'opengl32.dll' name 'glRectdv';
    public static z_Rectdv_ovr5 := _z_Rectdv_ovr5;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Rectdv(var v1: real; v2: IntPtr) := z_Rectdv_ovr5(v1, v2);
    private static procedure _z_Rectdv_ovr6(v1: IntPtr; [MarshalAs(UnmanagedType.LPArray)] v2: array of real);
    external 'opengl32.dll' name 'glRectdv';
    public static z_Rectdv_ovr6 := _z_Rectdv_ovr6;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Rectdv(v1: IntPtr; v2: array of real) := z_Rectdv_ovr6(v1, v2);
    private static procedure _z_Rectdv_ovr7(v1: IntPtr; var v2: real);
    external 'opengl32.dll' name 'glRectdv';
    public static z_Rectdv_ovr7 := _z_Rectdv_ovr7;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Rectdv(v1: IntPtr; var v2: real) := z_Rectdv_ovr7(v1, v2);
    private static procedure _z_Rectdv_ovr8(v1: IntPtr; v2: IntPtr);
    external 'opengl32.dll' name 'glRectdv';
    public static z_Rectdv_ovr8 := _z_Rectdv_ovr8;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Rectdv(v1: IntPtr; v2: IntPtr) := z_Rectdv_ovr8(v1, v2);
    
    // added in gl1.0, deprecated in gl3.2
    private static procedure _z_Rectf_ovr0(x1: single; y1: single; x2: single; y2: single);
    external 'opengl32.dll' name 'glRectf';
    public static z_Rectf_ovr0 := _z_Rectf_ovr0;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Rectf(x1: single; y1: single; x2: single; y2: single) := z_Rectf_ovr0(x1, y1, x2, y2);
    
    // added in gl1.0, deprecated in gl3.2
    private static procedure _z_Rectfv_ovr0([MarshalAs(UnmanagedType.LPArray)] v1: array of single; [MarshalAs(UnmanagedType.LPArray)] v2: array of single);
    external 'opengl32.dll' name 'glRectfv';
    public static z_Rectfv_ovr0 := _z_Rectfv_ovr0;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Rectfv(v1: array of single; v2: array of single) := z_Rectfv_ovr0(v1, v2);
    private static procedure _z_Rectfv_ovr1([MarshalAs(UnmanagedType.LPArray)] v1: array of single; var v2: single);
    external 'opengl32.dll' name 'glRectfv';
    public static z_Rectfv_ovr1 := _z_Rectfv_ovr1;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Rectfv(v1: array of single; var v2: single) := z_Rectfv_ovr1(v1, v2);
    private static procedure _z_Rectfv_ovr2([MarshalAs(UnmanagedType.LPArray)] v1: array of single; v2: IntPtr);
    external 'opengl32.dll' name 'glRectfv';
    public static z_Rectfv_ovr2 := _z_Rectfv_ovr2;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Rectfv(v1: array of single; v2: IntPtr) := z_Rectfv_ovr2(v1, v2);
    private static procedure _z_Rectfv_ovr3(var v1: single; [MarshalAs(UnmanagedType.LPArray)] v2: array of single);
    external 'opengl32.dll' name 'glRectfv';
    public static z_Rectfv_ovr3 := _z_Rectfv_ovr3;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Rectfv(var v1: single; v2: array of single) := z_Rectfv_ovr3(v1, v2);
    private static procedure _z_Rectfv_ovr4(var v1: single; var v2: single);
    external 'opengl32.dll' name 'glRectfv';
    public static z_Rectfv_ovr4 := _z_Rectfv_ovr4;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Rectfv(var v1: single; var v2: single) := z_Rectfv_ovr4(v1, v2);
    private static procedure _z_Rectfv_ovr5(var v1: single; v2: IntPtr);
    external 'opengl32.dll' name 'glRectfv';
    public static z_Rectfv_ovr5 := _z_Rectfv_ovr5;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Rectfv(var v1: single; v2: IntPtr) := z_Rectfv_ovr5(v1, v2);
    private static procedure _z_Rectfv_ovr6(v1: IntPtr; [MarshalAs(UnmanagedType.LPArray)] v2: array of single);
    external 'opengl32.dll' name 'glRectfv';
    public static z_Rectfv_ovr6 := _z_Rectfv_ovr6;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Rectfv(v1: IntPtr; v2: array of single) := z_Rectfv_ovr6(v1, v2);
    private static procedure _z_Rectfv_ovr7(v1: IntPtr; var v2: single);
    external 'opengl32.dll' name 'glRectfv';
    public static z_Rectfv_ovr7 := _z_Rectfv_ovr7;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Rectfv(v1: IntPtr; var v2: single) := z_Rectfv_ovr7(v1, v2);
    private static procedure _z_Rectfv_ovr8(v1: IntPtr; v2: IntPtr);
    external 'opengl32.dll' name 'glRectfv';
    public static z_Rectfv_ovr8 := _z_Rectfv_ovr8;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Rectfv(v1: IntPtr; v2: IntPtr) := z_Rectfv_ovr8(v1, v2);
    
    // added in gl1.0, deprecated in gl3.2
    private static procedure _z_Recti_ovr0(x1: Int32; y1: Int32; x2: Int32; y2: Int32);
    external 'opengl32.dll' name 'glRecti';
    public static z_Recti_ovr0 := _z_Recti_ovr0;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Recti(x1: Int32; y1: Int32; x2: Int32; y2: Int32) := z_Recti_ovr0(x1, y1, x2, y2);
    
    // added in gl1.0, deprecated in gl3.2
    private static procedure _z_Rectiv_ovr0([MarshalAs(UnmanagedType.LPArray)] v1: array of Int32; [MarshalAs(UnmanagedType.LPArray)] v2: array of Int32);
    external 'opengl32.dll' name 'glRectiv';
    public static z_Rectiv_ovr0 := _z_Rectiv_ovr0;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Rectiv(v1: array of Int32; v2: array of Int32) := z_Rectiv_ovr0(v1, v2);
    private static procedure _z_Rectiv_ovr1([MarshalAs(UnmanagedType.LPArray)] v1: array of Int32; var v2: Int32);
    external 'opengl32.dll' name 'glRectiv';
    public static z_Rectiv_ovr1 := _z_Rectiv_ovr1;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Rectiv(v1: array of Int32; var v2: Int32) := z_Rectiv_ovr1(v1, v2);
    private static procedure _z_Rectiv_ovr2([MarshalAs(UnmanagedType.LPArray)] v1: array of Int32; v2: IntPtr);
    external 'opengl32.dll' name 'glRectiv';
    public static z_Rectiv_ovr2 := _z_Rectiv_ovr2;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Rectiv(v1: array of Int32; v2: IntPtr) := z_Rectiv_ovr2(v1, v2);
    private static procedure _z_Rectiv_ovr3(var v1: Int32; [MarshalAs(UnmanagedType.LPArray)] v2: array of Int32);
    external 'opengl32.dll' name 'glRectiv';
    public static z_Rectiv_ovr3 := _z_Rectiv_ovr3;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Rectiv(var v1: Int32; v2: array of Int32) := z_Rectiv_ovr3(v1, v2);
    private static procedure _z_Rectiv_ovr4(var v1: Int32; var v2: Int32);
    external 'opengl32.dll' name 'glRectiv';
    public static z_Rectiv_ovr4 := _z_Rectiv_ovr4;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Rectiv(var v1: Int32; var v2: Int32) := z_Rectiv_ovr4(v1, v2);
    private static procedure _z_Rectiv_ovr5(var v1: Int32; v2: IntPtr);
    external 'opengl32.dll' name 'glRectiv';
    public static z_Rectiv_ovr5 := _z_Rectiv_ovr5;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Rectiv(var v1: Int32; v2: IntPtr) := z_Rectiv_ovr5(v1, v2);
    private static procedure _z_Rectiv_ovr6(v1: IntPtr; [MarshalAs(UnmanagedType.LPArray)] v2: array of Int32);
    external 'opengl32.dll' name 'glRectiv';
    public static z_Rectiv_ovr6 := _z_Rectiv_ovr6;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Rectiv(v1: IntPtr; v2: array of Int32) := z_Rectiv_ovr6(v1, v2);
    private static procedure _z_Rectiv_ovr7(v1: IntPtr; var v2: Int32);
    external 'opengl32.dll' name 'glRectiv';
    public static z_Rectiv_ovr7 := _z_Rectiv_ovr7;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Rectiv(v1: IntPtr; var v2: Int32) := z_Rectiv_ovr7(v1, v2);
    private static procedure _z_Rectiv_ovr8(v1: IntPtr; v2: IntPtr);
    external 'opengl32.dll' name 'glRectiv';
    public static z_Rectiv_ovr8 := _z_Rectiv_ovr8;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Rectiv(v1: IntPtr; v2: IntPtr) := z_Rectiv_ovr8(v1, v2);
    
    // added in gl1.0, deprecated in gl3.2
    private static procedure _z_Rects_ovr0(x1: Int16; y1: Int16; x2: Int16; y2: Int16);
    external 'opengl32.dll' name 'glRects';
    public static z_Rects_ovr0 := _z_Rects_ovr0;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Rects(x1: Int16; y1: Int16; x2: Int16; y2: Int16) := z_Rects_ovr0(x1, y1, x2, y2);
    
    // added in gl1.0, deprecated in gl3.2
    private static procedure _z_Rectsv_ovr0([MarshalAs(UnmanagedType.LPArray)] v1: array of Int16; [MarshalAs(UnmanagedType.LPArray)] v2: array of Int16);
    external 'opengl32.dll' name 'glRectsv';
    public static z_Rectsv_ovr0 := _z_Rectsv_ovr0;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Rectsv(v1: array of Int16; v2: array of Int16) := z_Rectsv_ovr0(v1, v2);
    private static procedure _z_Rectsv_ovr1([MarshalAs(UnmanagedType.LPArray)] v1: array of Int16; var v2: Int16);
    external 'opengl32.dll' name 'glRectsv';
    public static z_Rectsv_ovr1 := _z_Rectsv_ovr1;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Rectsv(v1: array of Int16; var v2: Int16) := z_Rectsv_ovr1(v1, v2);
    private static procedure _z_Rectsv_ovr2([MarshalAs(UnmanagedType.LPArray)] v1: array of Int16; v2: IntPtr);
    external 'opengl32.dll' name 'glRectsv';
    public static z_Rectsv_ovr2 := _z_Rectsv_ovr2;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Rectsv(v1: array of Int16; v2: IntPtr) := z_Rectsv_ovr2(v1, v2);
    private static procedure _z_Rectsv_ovr3(var v1: Int16; [MarshalAs(UnmanagedType.LPArray)] v2: array of Int16);
    external 'opengl32.dll' name 'glRectsv';
    public static z_Rectsv_ovr3 := _z_Rectsv_ovr3;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Rectsv(var v1: Int16; v2: array of Int16) := z_Rectsv_ovr3(v1, v2);
    private static procedure _z_Rectsv_ovr4(var v1: Int16; var v2: Int16);
    external 'opengl32.dll' name 'glRectsv';
    public static z_Rectsv_ovr4 := _z_Rectsv_ovr4;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Rectsv(var v1: Int16; var v2: Int16) := z_Rectsv_ovr4(v1, v2);
    private static procedure _z_Rectsv_ovr5(var v1: Int16; v2: IntPtr);
    external 'opengl32.dll' name 'glRectsv';
    public static z_Rectsv_ovr5 := _z_Rectsv_ovr5;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Rectsv(var v1: Int16; v2: IntPtr) := z_Rectsv_ovr5(v1, v2);
    private static procedure _z_Rectsv_ovr6(v1: IntPtr; [MarshalAs(UnmanagedType.LPArray)] v2: array of Int16);
    external 'opengl32.dll' name 'glRectsv';
    public static z_Rectsv_ovr6 := _z_Rectsv_ovr6;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Rectsv(v1: IntPtr; v2: array of Int16) := z_Rectsv_ovr6(v1, v2);
    private static procedure _z_Rectsv_ovr7(v1: IntPtr; var v2: Int16);
    external 'opengl32.dll' name 'glRectsv';
    public static z_Rectsv_ovr7 := _z_Rectsv_ovr7;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Rectsv(v1: IntPtr; var v2: Int16) := z_Rectsv_ovr7(v1, v2);
    private static procedure _z_Rectsv_ovr8(v1: IntPtr; v2: IntPtr);
    external 'opengl32.dll' name 'glRectsv';
    public static z_Rectsv_ovr8 := _z_Rectsv_ovr8;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Rectsv(v1: IntPtr; v2: IntPtr) := z_Rectsv_ovr8(v1, v2);
    
    // added in gl1.0, deprecated in gl3.2
    private static function _z_RenderMode_ovr0(mode: RenderingMode): Int32;
    external 'opengl32.dll' name 'glRenderMode';
    public static z_RenderMode_ovr0 := _z_RenderMode_ovr0;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function RenderMode(mode: RenderingMode): Int32 := z_RenderMode_ovr0(mode);
    
    // added in gl1.0, deprecated in gl3.2
    private static procedure _z_Rotated_ovr0(angle: real; x: real; y: real; z: real);
    external 'opengl32.dll' name 'glRotated';
    public static z_Rotated_ovr0 := _z_Rotated_ovr0;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Rotated(angle: real; x: real; y: real; z: real) := z_Rotated_ovr0(angle, x, y, z);
    
    // added in gl1.0, deprecated in gl3.2
    private static procedure _z_Rotatef_ovr0(angle: single; x: single; y: single; z: single);
    external 'opengl32.dll' name 'glRotatef';
    public static z_Rotatef_ovr0 := _z_Rotatef_ovr0;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Rotatef(angle: single; x: single; y: single; z: single) := z_Rotatef_ovr0(angle, x, y, z);
    
    // added in gl1.0, deprecated in gl3.2
    private static procedure _z_Scaled_ovr0(x: real; y: real; z: real);
    external 'opengl32.dll' name 'glScaled';
    public static z_Scaled_ovr0 := _z_Scaled_ovr0;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Scaled(x: real; y: real; z: real) := z_Scaled_ovr0(x, y, z);
    
    // added in gl1.0, deprecated in gl3.2
    private static procedure _z_Scalef_ovr0(x: single; y: single; z: single);
    external 'opengl32.dll' name 'glScalef';
    public static z_Scalef_ovr0 := _z_Scalef_ovr0;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Scalef(x: single; y: single; z: single) := z_Scalef_ovr0(x, y, z);
    
    // added in gl1.4, deprecated in gl3.2
    public z_SecondaryColor3b_adr := GetFuncAdr('glSecondaryColor3b');
    public z_SecondaryColor3b_ovr_0 := GetFuncOrNil&<procedure(red: SByte; green: SByte; blue: SByte)>(z_SecondaryColor3b_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure SecondaryColor3b(red: SByte; green: SByte; blue: SByte);
    begin
      z_SecondaryColor3b_ovr_0(red, green, blue);
    end;
    
    // added in gl1.4, deprecated in gl3.2
    public z_SecondaryColor3bv_adr := GetFuncAdr('glSecondaryColor3bv');
    public z_SecondaryColor3bv_ovr_0 := GetFuncOrNil&<procedure(var v: SByte)>(z_SecondaryColor3bv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure SecondaryColor3bv(v: array of SByte);
    begin
      z_SecondaryColor3bv_ovr_0(v[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure SecondaryColor3bv(var v: SByte);
    begin
      z_SecondaryColor3bv_ovr_0(v);
    end;
    public z_SecondaryColor3bv_ovr_2 := GetFuncOrNil&<procedure(v: IntPtr)>(z_SecondaryColor3bv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure SecondaryColor3bv(v: IntPtr);
    begin
      z_SecondaryColor3bv_ovr_2(v);
    end;
    
    // added in gl1.4, deprecated in gl3.2
    public z_SecondaryColor3d_adr := GetFuncAdr('glSecondaryColor3d');
    public z_SecondaryColor3d_ovr_0 := GetFuncOrNil&<procedure(red: real; green: real; blue: real)>(z_SecondaryColor3d_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure SecondaryColor3d(red: real; green: real; blue: real);
    begin
      z_SecondaryColor3d_ovr_0(red, green, blue);
    end;
    
    // added in gl1.4, deprecated in gl3.2
    public z_SecondaryColor3dv_adr := GetFuncAdr('glSecondaryColor3dv');
    public z_SecondaryColor3dv_ovr_0 := GetFuncOrNil&<procedure(var v: real)>(z_SecondaryColor3dv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure SecondaryColor3dv(v: array of real);
    begin
      z_SecondaryColor3dv_ovr_0(v[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure SecondaryColor3dv(var v: real);
    begin
      z_SecondaryColor3dv_ovr_0(v);
    end;
    public z_SecondaryColor3dv_ovr_2 := GetFuncOrNil&<procedure(v: IntPtr)>(z_SecondaryColor3dv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure SecondaryColor3dv(v: IntPtr);
    begin
      z_SecondaryColor3dv_ovr_2(v);
    end;
    
    // added in gl1.4, deprecated in gl3.2
    public z_SecondaryColor3f_adr := GetFuncAdr('glSecondaryColor3f');
    public z_SecondaryColor3f_ovr_0 := GetFuncOrNil&<procedure(red: single; green: single; blue: single)>(z_SecondaryColor3f_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure SecondaryColor3f(red: single; green: single; blue: single);
    begin
      z_SecondaryColor3f_ovr_0(red, green, blue);
    end;
    
    // added in gl1.4, deprecated in gl3.2
    public z_SecondaryColor3fv_adr := GetFuncAdr('glSecondaryColor3fv');
    public z_SecondaryColor3fv_ovr_0 := GetFuncOrNil&<procedure(var v: single)>(z_SecondaryColor3fv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure SecondaryColor3fv(v: array of single);
    begin
      z_SecondaryColor3fv_ovr_0(v[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure SecondaryColor3fv(var v: single);
    begin
      z_SecondaryColor3fv_ovr_0(v);
    end;
    public z_SecondaryColor3fv_ovr_2 := GetFuncOrNil&<procedure(v: IntPtr)>(z_SecondaryColor3fv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure SecondaryColor3fv(v: IntPtr);
    begin
      z_SecondaryColor3fv_ovr_2(v);
    end;
    
    // added in gl1.4, deprecated in gl3.2
    public z_SecondaryColor3i_adr := GetFuncAdr('glSecondaryColor3i');
    public z_SecondaryColor3i_ovr_0 := GetFuncOrNil&<procedure(red: Int32; green: Int32; blue: Int32)>(z_SecondaryColor3i_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure SecondaryColor3i(red: Int32; green: Int32; blue: Int32);
    begin
      z_SecondaryColor3i_ovr_0(red, green, blue);
    end;
    
    // added in gl1.4, deprecated in gl3.2
    public z_SecondaryColor3iv_adr := GetFuncAdr('glSecondaryColor3iv');
    public z_SecondaryColor3iv_ovr_0 := GetFuncOrNil&<procedure(var v: Int32)>(z_SecondaryColor3iv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure SecondaryColor3iv(v: array of Int32);
    begin
      z_SecondaryColor3iv_ovr_0(v[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure SecondaryColor3iv(var v: Int32);
    begin
      z_SecondaryColor3iv_ovr_0(v);
    end;
    public z_SecondaryColor3iv_ovr_2 := GetFuncOrNil&<procedure(v: IntPtr)>(z_SecondaryColor3iv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure SecondaryColor3iv(v: IntPtr);
    begin
      z_SecondaryColor3iv_ovr_2(v);
    end;
    
    // added in gl1.4, deprecated in gl3.2
    public z_SecondaryColor3s_adr := GetFuncAdr('glSecondaryColor3s');
    public z_SecondaryColor3s_ovr_0 := GetFuncOrNil&<procedure(red: Int16; green: Int16; blue: Int16)>(z_SecondaryColor3s_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure SecondaryColor3s(red: Int16; green: Int16; blue: Int16);
    begin
      z_SecondaryColor3s_ovr_0(red, green, blue);
    end;
    
    // added in gl1.4, deprecated in gl3.2
    public z_SecondaryColor3sv_adr := GetFuncAdr('glSecondaryColor3sv');
    public z_SecondaryColor3sv_ovr_0 := GetFuncOrNil&<procedure(var v: Int16)>(z_SecondaryColor3sv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure SecondaryColor3sv(v: array of Int16);
    begin
      z_SecondaryColor3sv_ovr_0(v[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure SecondaryColor3sv(var v: Int16);
    begin
      z_SecondaryColor3sv_ovr_0(v);
    end;
    public z_SecondaryColor3sv_ovr_2 := GetFuncOrNil&<procedure(v: IntPtr)>(z_SecondaryColor3sv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure SecondaryColor3sv(v: IntPtr);
    begin
      z_SecondaryColor3sv_ovr_2(v);
    end;
    
    // added in gl1.4, deprecated in gl3.2
    public z_SecondaryColor3ub_adr := GetFuncAdr('glSecondaryColor3ub');
    public z_SecondaryColor3ub_ovr_0 := GetFuncOrNil&<procedure(red: Byte; green: Byte; blue: Byte)>(z_SecondaryColor3ub_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure SecondaryColor3ub(red: Byte; green: Byte; blue: Byte);
    begin
      z_SecondaryColor3ub_ovr_0(red, green, blue);
    end;
    
    // added in gl1.4, deprecated in gl3.2
    public z_SecondaryColor3ubv_adr := GetFuncAdr('glSecondaryColor3ubv');
    public z_SecondaryColor3ubv_ovr_0 := GetFuncOrNil&<procedure(var v: Byte)>(z_SecondaryColor3ubv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure SecondaryColor3ubv(v: array of Byte);
    begin
      z_SecondaryColor3ubv_ovr_0(v[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure SecondaryColor3ubv(var v: Byte);
    begin
      z_SecondaryColor3ubv_ovr_0(v);
    end;
    public z_SecondaryColor3ubv_ovr_2 := GetFuncOrNil&<procedure(v: IntPtr)>(z_SecondaryColor3ubv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure SecondaryColor3ubv(v: IntPtr);
    begin
      z_SecondaryColor3ubv_ovr_2(v);
    end;
    
    // added in gl1.4, deprecated in gl3.2
    public z_SecondaryColor3ui_adr := GetFuncAdr('glSecondaryColor3ui');
    public z_SecondaryColor3ui_ovr_0 := GetFuncOrNil&<procedure(red: UInt32; green: UInt32; blue: UInt32)>(z_SecondaryColor3ui_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure SecondaryColor3ui(red: UInt32; green: UInt32; blue: UInt32);
    begin
      z_SecondaryColor3ui_ovr_0(red, green, blue);
    end;
    
    // added in gl1.4, deprecated in gl3.2
    public z_SecondaryColor3uiv_adr := GetFuncAdr('glSecondaryColor3uiv');
    public z_SecondaryColor3uiv_ovr_0 := GetFuncOrNil&<procedure(var v: UInt32)>(z_SecondaryColor3uiv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure SecondaryColor3uiv(v: array of UInt32);
    begin
      z_SecondaryColor3uiv_ovr_0(v[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure SecondaryColor3uiv(var v: UInt32);
    begin
      z_SecondaryColor3uiv_ovr_0(v);
    end;
    public z_SecondaryColor3uiv_ovr_2 := GetFuncOrNil&<procedure(v: IntPtr)>(z_SecondaryColor3uiv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure SecondaryColor3uiv(v: IntPtr);
    begin
      z_SecondaryColor3uiv_ovr_2(v);
    end;
    
    // added in gl1.4, deprecated in gl3.2
    public z_SecondaryColor3us_adr := GetFuncAdr('glSecondaryColor3us');
    public z_SecondaryColor3us_ovr_0 := GetFuncOrNil&<procedure(red: UInt16; green: UInt16; blue: UInt16)>(z_SecondaryColor3us_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure SecondaryColor3us(red: UInt16; green: UInt16; blue: UInt16);
    begin
      z_SecondaryColor3us_ovr_0(red, green, blue);
    end;
    
    // added in gl1.4, deprecated in gl3.2
    public z_SecondaryColor3usv_adr := GetFuncAdr('glSecondaryColor3usv');
    public z_SecondaryColor3usv_ovr_0 := GetFuncOrNil&<procedure(var v: UInt16)>(z_SecondaryColor3usv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure SecondaryColor3usv(v: array of UInt16);
    begin
      z_SecondaryColor3usv_ovr_0(v[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure SecondaryColor3usv(var v: UInt16);
    begin
      z_SecondaryColor3usv_ovr_0(v);
    end;
    public z_SecondaryColor3usv_ovr_2 := GetFuncOrNil&<procedure(v: IntPtr)>(z_SecondaryColor3usv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure SecondaryColor3usv(v: IntPtr);
    begin
      z_SecondaryColor3usv_ovr_2(v);
    end;
    
    // added in gl1.4, deprecated in gl3.2
    public z_SecondaryColorPointer_adr := GetFuncAdr('glSecondaryColorPointer');
    public z_SecondaryColorPointer_ovr_0 := GetFuncOrNil&<procedure(size: Int32; &type: ColorPointerType; stride: Int32; pointer: IntPtr)>(z_SecondaryColorPointer_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure SecondaryColorPointer(size: Int32; &type: ColorPointerType; stride: Int32; pointer: IntPtr);
    begin
      z_SecondaryColorPointer_ovr_0(size, &type, stride, pointer);
    end;
    
    // added in gl1.0, deprecated in gl3.2
    private static procedure _z_SelectBuffer_ovr0(size: Int32; [MarshalAs(UnmanagedType.LPArray)] buffer: array of UInt32);
    external 'opengl32.dll' name 'glSelectBuffer';
    public static z_SelectBuffer_ovr0 := _z_SelectBuffer_ovr0;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure SelectBuffer(size: Int32; buffer: array of UInt32) := z_SelectBuffer_ovr0(size, buffer);
    private static procedure _z_SelectBuffer_ovr1(size: Int32; var buffer: UInt32);
    external 'opengl32.dll' name 'glSelectBuffer';
    public static z_SelectBuffer_ovr1 := _z_SelectBuffer_ovr1;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure SelectBuffer(size: Int32; var buffer: UInt32) := z_SelectBuffer_ovr1(size, buffer);
    private static procedure _z_SelectBuffer_ovr2(size: Int32; buffer: IntPtr);
    external 'opengl32.dll' name 'glSelectBuffer';
    public static z_SelectBuffer_ovr2 := _z_SelectBuffer_ovr2;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure SelectBuffer(size: Int32; buffer: IntPtr) := z_SelectBuffer_ovr2(size, buffer);
    
    // added in gl1.0, deprecated in gl3.2
    private static procedure _z_ShadeModel_ovr0(mode: ShadingModel);
    external 'opengl32.dll' name 'glShadeModel';
    public static z_ShadeModel_ovr0 := _z_ShadeModel_ovr0;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ShadeModel(mode: ShadingModel) := z_ShadeModel_ovr0(mode);
    
    // added in gl1.0, deprecated in gl3.2
    private static procedure _z_TexCoord1d_ovr0(s: real);
    external 'opengl32.dll' name 'glTexCoord1d';
    public static z_TexCoord1d_ovr0 := _z_TexCoord1d_ovr0;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TexCoord1d(s: real) := z_TexCoord1d_ovr0(s);
    
    // added in gl1.0, deprecated in gl3.2
    private static procedure _z_TexCoord1dv_ovr0([MarshalAs(UnmanagedType.LPArray)] v: array of real);
    external 'opengl32.dll' name 'glTexCoord1dv';
    public static z_TexCoord1dv_ovr0 := _z_TexCoord1dv_ovr0;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TexCoord1dv(v: array of real) := z_TexCoord1dv_ovr0(v);
    private static procedure _z_TexCoord1dv_ovr1(var v: real);
    external 'opengl32.dll' name 'glTexCoord1dv';
    public static z_TexCoord1dv_ovr1 := _z_TexCoord1dv_ovr1;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TexCoord1dv(var v: real) := z_TexCoord1dv_ovr1(v);
    private static procedure _z_TexCoord1dv_ovr2(v: IntPtr);
    external 'opengl32.dll' name 'glTexCoord1dv';
    public static z_TexCoord1dv_ovr2 := _z_TexCoord1dv_ovr2;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TexCoord1dv(v: IntPtr) := z_TexCoord1dv_ovr2(v);
    
    // added in gl1.0, deprecated in gl3.2
    private static procedure _z_TexCoord1f_ovr0(s: single);
    external 'opengl32.dll' name 'glTexCoord1f';
    public static z_TexCoord1f_ovr0 := _z_TexCoord1f_ovr0;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TexCoord1f(s: single) := z_TexCoord1f_ovr0(s);
    
    // added in gl1.0, deprecated in gl3.2
    private static procedure _z_TexCoord1fv_ovr0([MarshalAs(UnmanagedType.LPArray)] v: array of single);
    external 'opengl32.dll' name 'glTexCoord1fv';
    public static z_TexCoord1fv_ovr0 := _z_TexCoord1fv_ovr0;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TexCoord1fv(v: array of single) := z_TexCoord1fv_ovr0(v);
    private static procedure _z_TexCoord1fv_ovr1(var v: single);
    external 'opengl32.dll' name 'glTexCoord1fv';
    public static z_TexCoord1fv_ovr1 := _z_TexCoord1fv_ovr1;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TexCoord1fv(var v: single) := z_TexCoord1fv_ovr1(v);
    private static procedure _z_TexCoord1fv_ovr2(v: IntPtr);
    external 'opengl32.dll' name 'glTexCoord1fv';
    public static z_TexCoord1fv_ovr2 := _z_TexCoord1fv_ovr2;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TexCoord1fv(v: IntPtr) := z_TexCoord1fv_ovr2(v);
    
    // added in gl1.0, deprecated in gl3.2
    private static procedure _z_TexCoord1i_ovr0(s: Int32);
    external 'opengl32.dll' name 'glTexCoord1i';
    public static z_TexCoord1i_ovr0 := _z_TexCoord1i_ovr0;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TexCoord1i(s: Int32) := z_TexCoord1i_ovr0(s);
    
    // added in gl1.0, deprecated in gl3.2
    private static procedure _z_TexCoord1iv_ovr0([MarshalAs(UnmanagedType.LPArray)] v: array of Int32);
    external 'opengl32.dll' name 'glTexCoord1iv';
    public static z_TexCoord1iv_ovr0 := _z_TexCoord1iv_ovr0;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TexCoord1iv(v: array of Int32) := z_TexCoord1iv_ovr0(v);
    private static procedure _z_TexCoord1iv_ovr1(var v: Int32);
    external 'opengl32.dll' name 'glTexCoord1iv';
    public static z_TexCoord1iv_ovr1 := _z_TexCoord1iv_ovr1;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TexCoord1iv(var v: Int32) := z_TexCoord1iv_ovr1(v);
    private static procedure _z_TexCoord1iv_ovr2(v: IntPtr);
    external 'opengl32.dll' name 'glTexCoord1iv';
    public static z_TexCoord1iv_ovr2 := _z_TexCoord1iv_ovr2;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TexCoord1iv(v: IntPtr) := z_TexCoord1iv_ovr2(v);
    
    // added in gl1.0, deprecated in gl3.2
    private static procedure _z_TexCoord1s_ovr0(s: Int16);
    external 'opengl32.dll' name 'glTexCoord1s';
    public static z_TexCoord1s_ovr0 := _z_TexCoord1s_ovr0;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TexCoord1s(s: Int16) := z_TexCoord1s_ovr0(s);
    
    // added in gl1.0, deprecated in gl3.2
    private static procedure _z_TexCoord1sv_ovr0([MarshalAs(UnmanagedType.LPArray)] v: array of Int16);
    external 'opengl32.dll' name 'glTexCoord1sv';
    public static z_TexCoord1sv_ovr0 := _z_TexCoord1sv_ovr0;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TexCoord1sv(v: array of Int16) := z_TexCoord1sv_ovr0(v);
    private static procedure _z_TexCoord1sv_ovr1(var v: Int16);
    external 'opengl32.dll' name 'glTexCoord1sv';
    public static z_TexCoord1sv_ovr1 := _z_TexCoord1sv_ovr1;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TexCoord1sv(var v: Int16) := z_TexCoord1sv_ovr1(v);
    private static procedure _z_TexCoord1sv_ovr2(v: IntPtr);
    external 'opengl32.dll' name 'glTexCoord1sv';
    public static z_TexCoord1sv_ovr2 := _z_TexCoord1sv_ovr2;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TexCoord1sv(v: IntPtr) := z_TexCoord1sv_ovr2(v);
    
    // added in gl1.0, deprecated in gl3.2
    private static procedure _z_TexCoord2d_ovr0(s: real; t: real);
    external 'opengl32.dll' name 'glTexCoord2d';
    public static z_TexCoord2d_ovr0 := _z_TexCoord2d_ovr0;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TexCoord2d(s: real; t: real) := z_TexCoord2d_ovr0(s, t);
    
    // added in gl1.0, deprecated in gl3.2
    private static procedure _z_TexCoord2dv_ovr0([MarshalAs(UnmanagedType.LPArray)] v: array of real);
    external 'opengl32.dll' name 'glTexCoord2dv';
    public static z_TexCoord2dv_ovr0 := _z_TexCoord2dv_ovr0;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TexCoord2dv(v: array of real) := z_TexCoord2dv_ovr0(v);
    private static procedure _z_TexCoord2dv_ovr1(var v: real);
    external 'opengl32.dll' name 'glTexCoord2dv';
    public static z_TexCoord2dv_ovr1 := _z_TexCoord2dv_ovr1;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TexCoord2dv(var v: real) := z_TexCoord2dv_ovr1(v);
    private static procedure _z_TexCoord2dv_ovr2(v: IntPtr);
    external 'opengl32.dll' name 'glTexCoord2dv';
    public static z_TexCoord2dv_ovr2 := _z_TexCoord2dv_ovr2;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TexCoord2dv(v: IntPtr) := z_TexCoord2dv_ovr2(v);
    
    // added in gl1.0, deprecated in gl3.2
    private static procedure _z_TexCoord2f_ovr0(s: single; t: single);
    external 'opengl32.dll' name 'glTexCoord2f';
    public static z_TexCoord2f_ovr0 := _z_TexCoord2f_ovr0;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TexCoord2f(s: single; t: single) := z_TexCoord2f_ovr0(s, t);
    
    // added in gl1.0, deprecated in gl3.2
    private static procedure _z_TexCoord2fv_ovr0([MarshalAs(UnmanagedType.LPArray)] v: array of single);
    external 'opengl32.dll' name 'glTexCoord2fv';
    public static z_TexCoord2fv_ovr0 := _z_TexCoord2fv_ovr0;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TexCoord2fv(v: array of single) := z_TexCoord2fv_ovr0(v);
    private static procedure _z_TexCoord2fv_ovr1(var v: single);
    external 'opengl32.dll' name 'glTexCoord2fv';
    public static z_TexCoord2fv_ovr1 := _z_TexCoord2fv_ovr1;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TexCoord2fv(var v: single) := z_TexCoord2fv_ovr1(v);
    private static procedure _z_TexCoord2fv_ovr2(v: IntPtr);
    external 'opengl32.dll' name 'glTexCoord2fv';
    public static z_TexCoord2fv_ovr2 := _z_TexCoord2fv_ovr2;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TexCoord2fv(v: IntPtr) := z_TexCoord2fv_ovr2(v);
    
    // added in gl1.0, deprecated in gl3.2
    private static procedure _z_TexCoord2i_ovr0(s: Int32; t: Int32);
    external 'opengl32.dll' name 'glTexCoord2i';
    public static z_TexCoord2i_ovr0 := _z_TexCoord2i_ovr0;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TexCoord2i(s: Int32; t: Int32) := z_TexCoord2i_ovr0(s, t);
    
    // added in gl1.0, deprecated in gl3.2
    private static procedure _z_TexCoord2iv_ovr0([MarshalAs(UnmanagedType.LPArray)] v: array of Int32);
    external 'opengl32.dll' name 'glTexCoord2iv';
    public static z_TexCoord2iv_ovr0 := _z_TexCoord2iv_ovr0;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TexCoord2iv(v: array of Int32) := z_TexCoord2iv_ovr0(v);
    private static procedure _z_TexCoord2iv_ovr1(var v: Int32);
    external 'opengl32.dll' name 'glTexCoord2iv';
    public static z_TexCoord2iv_ovr1 := _z_TexCoord2iv_ovr1;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TexCoord2iv(var v: Int32) := z_TexCoord2iv_ovr1(v);
    private static procedure _z_TexCoord2iv_ovr2(v: IntPtr);
    external 'opengl32.dll' name 'glTexCoord2iv';
    public static z_TexCoord2iv_ovr2 := _z_TexCoord2iv_ovr2;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TexCoord2iv(v: IntPtr) := z_TexCoord2iv_ovr2(v);
    
    // added in gl1.0, deprecated in gl3.2
    private static procedure _z_TexCoord2s_ovr0(s: Int16; t: Int16);
    external 'opengl32.dll' name 'glTexCoord2s';
    public static z_TexCoord2s_ovr0 := _z_TexCoord2s_ovr0;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TexCoord2s(s: Int16; t: Int16) := z_TexCoord2s_ovr0(s, t);
    
    // added in gl1.0, deprecated in gl3.2
    private static procedure _z_TexCoord2sv_ovr0([MarshalAs(UnmanagedType.LPArray)] v: array of Int16);
    external 'opengl32.dll' name 'glTexCoord2sv';
    public static z_TexCoord2sv_ovr0 := _z_TexCoord2sv_ovr0;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TexCoord2sv(v: array of Int16) := z_TexCoord2sv_ovr0(v);
    private static procedure _z_TexCoord2sv_ovr1(var v: Int16);
    external 'opengl32.dll' name 'glTexCoord2sv';
    public static z_TexCoord2sv_ovr1 := _z_TexCoord2sv_ovr1;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TexCoord2sv(var v: Int16) := z_TexCoord2sv_ovr1(v);
    private static procedure _z_TexCoord2sv_ovr2(v: IntPtr);
    external 'opengl32.dll' name 'glTexCoord2sv';
    public static z_TexCoord2sv_ovr2 := _z_TexCoord2sv_ovr2;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TexCoord2sv(v: IntPtr) := z_TexCoord2sv_ovr2(v);
    
    // added in gl1.0, deprecated in gl3.2
    private static procedure _z_TexCoord3d_ovr0(s: real; t: real; r: real);
    external 'opengl32.dll' name 'glTexCoord3d';
    public static z_TexCoord3d_ovr0 := _z_TexCoord3d_ovr0;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TexCoord3d(s: real; t: real; r: real) := z_TexCoord3d_ovr0(s, t, r);
    
    // added in gl1.0, deprecated in gl3.2
    private static procedure _z_TexCoord3dv_ovr0([MarshalAs(UnmanagedType.LPArray)] v: array of real);
    external 'opengl32.dll' name 'glTexCoord3dv';
    public static z_TexCoord3dv_ovr0 := _z_TexCoord3dv_ovr0;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TexCoord3dv(v: array of real) := z_TexCoord3dv_ovr0(v);
    private static procedure _z_TexCoord3dv_ovr1(var v: real);
    external 'opengl32.dll' name 'glTexCoord3dv';
    public static z_TexCoord3dv_ovr1 := _z_TexCoord3dv_ovr1;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TexCoord3dv(var v: real) := z_TexCoord3dv_ovr1(v);
    private static procedure _z_TexCoord3dv_ovr2(v: IntPtr);
    external 'opengl32.dll' name 'glTexCoord3dv';
    public static z_TexCoord3dv_ovr2 := _z_TexCoord3dv_ovr2;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TexCoord3dv(v: IntPtr) := z_TexCoord3dv_ovr2(v);
    
    // added in gl1.0, deprecated in gl3.2
    private static procedure _z_TexCoord3f_ovr0(s: single; t: single; r: single);
    external 'opengl32.dll' name 'glTexCoord3f';
    public static z_TexCoord3f_ovr0 := _z_TexCoord3f_ovr0;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TexCoord3f(s: single; t: single; r: single) := z_TexCoord3f_ovr0(s, t, r);
    
    // added in gl1.0, deprecated in gl3.2
    private static procedure _z_TexCoord3fv_ovr0([MarshalAs(UnmanagedType.LPArray)] v: array of single);
    external 'opengl32.dll' name 'glTexCoord3fv';
    public static z_TexCoord3fv_ovr0 := _z_TexCoord3fv_ovr0;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TexCoord3fv(v: array of single) := z_TexCoord3fv_ovr0(v);
    private static procedure _z_TexCoord3fv_ovr1(var v: single);
    external 'opengl32.dll' name 'glTexCoord3fv';
    public static z_TexCoord3fv_ovr1 := _z_TexCoord3fv_ovr1;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TexCoord3fv(var v: single) := z_TexCoord3fv_ovr1(v);
    private static procedure _z_TexCoord3fv_ovr2(v: IntPtr);
    external 'opengl32.dll' name 'glTexCoord3fv';
    public static z_TexCoord3fv_ovr2 := _z_TexCoord3fv_ovr2;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TexCoord3fv(v: IntPtr) := z_TexCoord3fv_ovr2(v);
    
    // added in gl1.0, deprecated in gl3.2
    private static procedure _z_TexCoord3i_ovr0(s: Int32; t: Int32; r: Int32);
    external 'opengl32.dll' name 'glTexCoord3i';
    public static z_TexCoord3i_ovr0 := _z_TexCoord3i_ovr0;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TexCoord3i(s: Int32; t: Int32; r: Int32) := z_TexCoord3i_ovr0(s, t, r);
    
    // added in gl1.0, deprecated in gl3.2
    private static procedure _z_TexCoord3iv_ovr0([MarshalAs(UnmanagedType.LPArray)] v: array of Int32);
    external 'opengl32.dll' name 'glTexCoord3iv';
    public static z_TexCoord3iv_ovr0 := _z_TexCoord3iv_ovr0;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TexCoord3iv(v: array of Int32) := z_TexCoord3iv_ovr0(v);
    private static procedure _z_TexCoord3iv_ovr1(var v: Int32);
    external 'opengl32.dll' name 'glTexCoord3iv';
    public static z_TexCoord3iv_ovr1 := _z_TexCoord3iv_ovr1;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TexCoord3iv(var v: Int32) := z_TexCoord3iv_ovr1(v);
    private static procedure _z_TexCoord3iv_ovr2(v: IntPtr);
    external 'opengl32.dll' name 'glTexCoord3iv';
    public static z_TexCoord3iv_ovr2 := _z_TexCoord3iv_ovr2;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TexCoord3iv(v: IntPtr) := z_TexCoord3iv_ovr2(v);
    
    // added in gl1.0, deprecated in gl3.2
    private static procedure _z_TexCoord3s_ovr0(s: Int16; t: Int16; r: Int16);
    external 'opengl32.dll' name 'glTexCoord3s';
    public static z_TexCoord3s_ovr0 := _z_TexCoord3s_ovr0;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TexCoord3s(s: Int16; t: Int16; r: Int16) := z_TexCoord3s_ovr0(s, t, r);
    
    // added in gl1.0, deprecated in gl3.2
    private static procedure _z_TexCoord3sv_ovr0([MarshalAs(UnmanagedType.LPArray)] v: array of Int16);
    external 'opengl32.dll' name 'glTexCoord3sv';
    public static z_TexCoord3sv_ovr0 := _z_TexCoord3sv_ovr0;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TexCoord3sv(v: array of Int16) := z_TexCoord3sv_ovr0(v);
    private static procedure _z_TexCoord3sv_ovr1(var v: Int16);
    external 'opengl32.dll' name 'glTexCoord3sv';
    public static z_TexCoord3sv_ovr1 := _z_TexCoord3sv_ovr1;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TexCoord3sv(var v: Int16) := z_TexCoord3sv_ovr1(v);
    private static procedure _z_TexCoord3sv_ovr2(v: IntPtr);
    external 'opengl32.dll' name 'glTexCoord3sv';
    public static z_TexCoord3sv_ovr2 := _z_TexCoord3sv_ovr2;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TexCoord3sv(v: IntPtr) := z_TexCoord3sv_ovr2(v);
    
    // added in gl1.0, deprecated in gl3.2
    private static procedure _z_TexCoord4d_ovr0(s: real; t: real; r: real; q: real);
    external 'opengl32.dll' name 'glTexCoord4d';
    public static z_TexCoord4d_ovr0 := _z_TexCoord4d_ovr0;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TexCoord4d(s: real; t: real; r: real; q: real) := z_TexCoord4d_ovr0(s, t, r, q);
    
    // added in gl1.0, deprecated in gl3.2
    private static procedure _z_TexCoord4dv_ovr0([MarshalAs(UnmanagedType.LPArray)] v: array of real);
    external 'opengl32.dll' name 'glTexCoord4dv';
    public static z_TexCoord4dv_ovr0 := _z_TexCoord4dv_ovr0;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TexCoord4dv(v: array of real) := z_TexCoord4dv_ovr0(v);
    private static procedure _z_TexCoord4dv_ovr1(var v: real);
    external 'opengl32.dll' name 'glTexCoord4dv';
    public static z_TexCoord4dv_ovr1 := _z_TexCoord4dv_ovr1;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TexCoord4dv(var v: real) := z_TexCoord4dv_ovr1(v);
    private static procedure _z_TexCoord4dv_ovr2(v: IntPtr);
    external 'opengl32.dll' name 'glTexCoord4dv';
    public static z_TexCoord4dv_ovr2 := _z_TexCoord4dv_ovr2;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TexCoord4dv(v: IntPtr) := z_TexCoord4dv_ovr2(v);
    
    // added in gl1.0, deprecated in gl3.2
    private static procedure _z_TexCoord4f_ovr0(s: single; t: single; r: single; q: single);
    external 'opengl32.dll' name 'glTexCoord4f';
    public static z_TexCoord4f_ovr0 := _z_TexCoord4f_ovr0;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TexCoord4f(s: single; t: single; r: single; q: single) := z_TexCoord4f_ovr0(s, t, r, q);
    
    // added in gl1.0, deprecated in gl3.2
    private static procedure _z_TexCoord4fv_ovr0([MarshalAs(UnmanagedType.LPArray)] v: array of single);
    external 'opengl32.dll' name 'glTexCoord4fv';
    public static z_TexCoord4fv_ovr0 := _z_TexCoord4fv_ovr0;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TexCoord4fv(v: array of single) := z_TexCoord4fv_ovr0(v);
    private static procedure _z_TexCoord4fv_ovr1(var v: single);
    external 'opengl32.dll' name 'glTexCoord4fv';
    public static z_TexCoord4fv_ovr1 := _z_TexCoord4fv_ovr1;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TexCoord4fv(var v: single) := z_TexCoord4fv_ovr1(v);
    private static procedure _z_TexCoord4fv_ovr2(v: IntPtr);
    external 'opengl32.dll' name 'glTexCoord4fv';
    public static z_TexCoord4fv_ovr2 := _z_TexCoord4fv_ovr2;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TexCoord4fv(v: IntPtr) := z_TexCoord4fv_ovr2(v);
    
    // added in gl1.0, deprecated in gl3.2
    private static procedure _z_TexCoord4i_ovr0(s: Int32; t: Int32; r: Int32; q: Int32);
    external 'opengl32.dll' name 'glTexCoord4i';
    public static z_TexCoord4i_ovr0 := _z_TexCoord4i_ovr0;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TexCoord4i(s: Int32; t: Int32; r: Int32; q: Int32) := z_TexCoord4i_ovr0(s, t, r, q);
    
    // added in gl1.0, deprecated in gl3.2
    private static procedure _z_TexCoord4iv_ovr0([MarshalAs(UnmanagedType.LPArray)] v: array of Int32);
    external 'opengl32.dll' name 'glTexCoord4iv';
    public static z_TexCoord4iv_ovr0 := _z_TexCoord4iv_ovr0;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TexCoord4iv(v: array of Int32) := z_TexCoord4iv_ovr0(v);
    private static procedure _z_TexCoord4iv_ovr1(var v: Int32);
    external 'opengl32.dll' name 'glTexCoord4iv';
    public static z_TexCoord4iv_ovr1 := _z_TexCoord4iv_ovr1;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TexCoord4iv(var v: Int32) := z_TexCoord4iv_ovr1(v);
    private static procedure _z_TexCoord4iv_ovr2(v: IntPtr);
    external 'opengl32.dll' name 'glTexCoord4iv';
    public static z_TexCoord4iv_ovr2 := _z_TexCoord4iv_ovr2;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TexCoord4iv(v: IntPtr) := z_TexCoord4iv_ovr2(v);
    
    // added in gl1.0, deprecated in gl3.2
    private static procedure _z_TexCoord4s_ovr0(s: Int16; t: Int16; r: Int16; q: Int16);
    external 'opengl32.dll' name 'glTexCoord4s';
    public static z_TexCoord4s_ovr0 := _z_TexCoord4s_ovr0;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TexCoord4s(s: Int16; t: Int16; r: Int16; q: Int16) := z_TexCoord4s_ovr0(s, t, r, q);
    
    // added in gl1.0, deprecated in gl3.2
    private static procedure _z_TexCoord4sv_ovr0([MarshalAs(UnmanagedType.LPArray)] v: array of Int16);
    external 'opengl32.dll' name 'glTexCoord4sv';
    public static z_TexCoord4sv_ovr0 := _z_TexCoord4sv_ovr0;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TexCoord4sv(v: array of Int16) := z_TexCoord4sv_ovr0(v);
    private static procedure _z_TexCoord4sv_ovr1(var v: Int16);
    external 'opengl32.dll' name 'glTexCoord4sv';
    public static z_TexCoord4sv_ovr1 := _z_TexCoord4sv_ovr1;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TexCoord4sv(var v: Int16) := z_TexCoord4sv_ovr1(v);
    private static procedure _z_TexCoord4sv_ovr2(v: IntPtr);
    external 'opengl32.dll' name 'glTexCoord4sv';
    public static z_TexCoord4sv_ovr2 := _z_TexCoord4sv_ovr2;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TexCoord4sv(v: IntPtr) := z_TexCoord4sv_ovr2(v);
    
    // added in gl1.1, deprecated in gl3.2
    private static procedure _z_TexCoordPointer_ovr0(size: Int32; &type: TexCoordPointerType; stride: Int32; pointer: IntPtr);
    external 'opengl32.dll' name 'glTexCoordPointer';
    public static z_TexCoordPointer_ovr0 := _z_TexCoordPointer_ovr0;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TexCoordPointer(size: Int32; &type: TexCoordPointerType; stride: Int32; pointer: IntPtr) := z_TexCoordPointer_ovr0(size, &type, stride, pointer);
    
    // added in gl1.0, deprecated in gl3.2
    private static procedure _z_TexEnvf_ovr0(target: TextureEnvTarget; pname: TextureEnvParameter; param: single);
    external 'opengl32.dll' name 'glTexEnvf';
    public static z_TexEnvf_ovr0 := _z_TexEnvf_ovr0;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TexEnvf(target: TextureEnvTarget; pname: TextureEnvParameter; param: single) := z_TexEnvf_ovr0(target, pname, param);
    
    // added in gl1.0, deprecated in gl3.2
    private static procedure _z_TexEnvfv_ovr0(target: TextureEnvTarget; pname: TextureEnvParameter; [MarshalAs(UnmanagedType.LPArray)] &params: array of single);
    external 'opengl32.dll' name 'glTexEnvfv';
    public static z_TexEnvfv_ovr0 := _z_TexEnvfv_ovr0;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TexEnvfv(target: TextureEnvTarget; pname: TextureEnvParameter; &params: array of single) := z_TexEnvfv_ovr0(target, pname, &params);
    private static procedure _z_TexEnvfv_ovr1(target: TextureEnvTarget; pname: TextureEnvParameter; var &params: single);
    external 'opengl32.dll' name 'glTexEnvfv';
    public static z_TexEnvfv_ovr1 := _z_TexEnvfv_ovr1;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TexEnvfv(target: TextureEnvTarget; pname: TextureEnvParameter; var &params: single) := z_TexEnvfv_ovr1(target, pname, &params);
    private static procedure _z_TexEnvfv_ovr2(target: TextureEnvTarget; pname: TextureEnvParameter; &params: IntPtr);
    external 'opengl32.dll' name 'glTexEnvfv';
    public static z_TexEnvfv_ovr2 := _z_TexEnvfv_ovr2;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TexEnvfv(target: TextureEnvTarget; pname: TextureEnvParameter; &params: IntPtr) := z_TexEnvfv_ovr2(target, pname, &params);
    
    // added in gl1.0, deprecated in gl3.2
    private static procedure _z_TexEnvi_ovr0(target: TextureEnvTarget; pname: TextureEnvParameter; param: Int32);
    external 'opengl32.dll' name 'glTexEnvi';
    public static z_TexEnvi_ovr0 := _z_TexEnvi_ovr0;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TexEnvi(target: TextureEnvTarget; pname: TextureEnvParameter; param: Int32) := z_TexEnvi_ovr0(target, pname, param);
    
    // added in gl1.0, deprecated in gl3.2
    private static procedure _z_TexEnviv_ovr0(target: TextureEnvTarget; pname: TextureEnvParameter; [MarshalAs(UnmanagedType.LPArray)] &params: array of Int32);
    external 'opengl32.dll' name 'glTexEnviv';
    public static z_TexEnviv_ovr0 := _z_TexEnviv_ovr0;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TexEnviv(target: TextureEnvTarget; pname: TextureEnvParameter; &params: array of Int32) := z_TexEnviv_ovr0(target, pname, &params);
    private static procedure _z_TexEnviv_ovr1(target: TextureEnvTarget; pname: TextureEnvParameter; var &params: Int32);
    external 'opengl32.dll' name 'glTexEnviv';
    public static z_TexEnviv_ovr1 := _z_TexEnviv_ovr1;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TexEnviv(target: TextureEnvTarget; pname: TextureEnvParameter; var &params: Int32) := z_TexEnviv_ovr1(target, pname, &params);
    private static procedure _z_TexEnviv_ovr2(target: TextureEnvTarget; pname: TextureEnvParameter; &params: IntPtr);
    external 'opengl32.dll' name 'glTexEnviv';
    public static z_TexEnviv_ovr2 := _z_TexEnviv_ovr2;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TexEnviv(target: TextureEnvTarget; pname: TextureEnvParameter; &params: IntPtr) := z_TexEnviv_ovr2(target, pname, &params);
    
    // added in gl1.0, deprecated in gl3.2
    private static procedure _z_TexGend_ovr0(coord: TextureCoordName; pname: TextureGenParameter; param: real);
    external 'opengl32.dll' name 'glTexGend';
    public static z_TexGend_ovr0 := _z_TexGend_ovr0;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TexGend(coord: TextureCoordName; pname: TextureGenParameter; param: real) := z_TexGend_ovr0(coord, pname, param);
    
    // added in gl1.0, deprecated in gl3.2
    private static procedure _z_TexGendv_ovr0(coord: TextureCoordName; pname: TextureGenParameter; [MarshalAs(UnmanagedType.LPArray)] &params: array of real);
    external 'opengl32.dll' name 'glTexGendv';
    public static z_TexGendv_ovr0 := _z_TexGendv_ovr0;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TexGendv(coord: TextureCoordName; pname: TextureGenParameter; &params: array of real) := z_TexGendv_ovr0(coord, pname, &params);
    private static procedure _z_TexGendv_ovr1(coord: TextureCoordName; pname: TextureGenParameter; var &params: real);
    external 'opengl32.dll' name 'glTexGendv';
    public static z_TexGendv_ovr1 := _z_TexGendv_ovr1;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TexGendv(coord: TextureCoordName; pname: TextureGenParameter; var &params: real) := z_TexGendv_ovr1(coord, pname, &params);
    private static procedure _z_TexGendv_ovr2(coord: TextureCoordName; pname: TextureGenParameter; &params: IntPtr);
    external 'opengl32.dll' name 'glTexGendv';
    public static z_TexGendv_ovr2 := _z_TexGendv_ovr2;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TexGendv(coord: TextureCoordName; pname: TextureGenParameter; &params: IntPtr) := z_TexGendv_ovr2(coord, pname, &params);
    
    // added in gl1.0, deprecated in gl3.2
    private static procedure _z_TexGenf_ovr0(coord: TextureCoordName; pname: TextureGenParameter; param: single);
    external 'opengl32.dll' name 'glTexGenf';
    public static z_TexGenf_ovr0 := _z_TexGenf_ovr0;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TexGenf(coord: TextureCoordName; pname: TextureGenParameter; param: single) := z_TexGenf_ovr0(coord, pname, param);
    
    // added in gl1.0, deprecated in gl3.2
    private static procedure _z_TexGenfv_ovr0(coord: TextureCoordName; pname: TextureGenParameter; [MarshalAs(UnmanagedType.LPArray)] &params: array of single);
    external 'opengl32.dll' name 'glTexGenfv';
    public static z_TexGenfv_ovr0 := _z_TexGenfv_ovr0;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TexGenfv(coord: TextureCoordName; pname: TextureGenParameter; &params: array of single) := z_TexGenfv_ovr0(coord, pname, &params);
    private static procedure _z_TexGenfv_ovr1(coord: TextureCoordName; pname: TextureGenParameter; var &params: single);
    external 'opengl32.dll' name 'glTexGenfv';
    public static z_TexGenfv_ovr1 := _z_TexGenfv_ovr1;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TexGenfv(coord: TextureCoordName; pname: TextureGenParameter; var &params: single) := z_TexGenfv_ovr1(coord, pname, &params);
    private static procedure _z_TexGenfv_ovr2(coord: TextureCoordName; pname: TextureGenParameter; &params: IntPtr);
    external 'opengl32.dll' name 'glTexGenfv';
    public static z_TexGenfv_ovr2 := _z_TexGenfv_ovr2;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TexGenfv(coord: TextureCoordName; pname: TextureGenParameter; &params: IntPtr) := z_TexGenfv_ovr2(coord, pname, &params);
    
    // added in gl1.0, deprecated in gl3.2
    private static procedure _z_TexGeni_ovr0(coord: TextureCoordName; pname: TextureGenParameter; param: Int32);
    external 'opengl32.dll' name 'glTexGeni';
    public static z_TexGeni_ovr0 := _z_TexGeni_ovr0;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TexGeni(coord: TextureCoordName; pname: TextureGenParameter; param: Int32) := z_TexGeni_ovr0(coord, pname, param);
    
    // added in gl1.0, deprecated in gl3.2
    private static procedure _z_TexGeniv_ovr0(coord: TextureCoordName; pname: TextureGenParameter; [MarshalAs(UnmanagedType.LPArray)] &params: array of Int32);
    external 'opengl32.dll' name 'glTexGeniv';
    public static z_TexGeniv_ovr0 := _z_TexGeniv_ovr0;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TexGeniv(coord: TextureCoordName; pname: TextureGenParameter; &params: array of Int32) := z_TexGeniv_ovr0(coord, pname, &params);
    private static procedure _z_TexGeniv_ovr1(coord: TextureCoordName; pname: TextureGenParameter; var &params: Int32);
    external 'opengl32.dll' name 'glTexGeniv';
    public static z_TexGeniv_ovr1 := _z_TexGeniv_ovr1;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TexGeniv(coord: TextureCoordName; pname: TextureGenParameter; var &params: Int32) := z_TexGeniv_ovr1(coord, pname, &params);
    private static procedure _z_TexGeniv_ovr2(coord: TextureCoordName; pname: TextureGenParameter; &params: IntPtr);
    external 'opengl32.dll' name 'glTexGeniv';
    public static z_TexGeniv_ovr2 := _z_TexGeniv_ovr2;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TexGeniv(coord: TextureCoordName; pname: TextureGenParameter; &params: IntPtr) := z_TexGeniv_ovr2(coord, pname, &params);
    
    // added in gl1.0, deprecated in gl3.2
    private static procedure _z_Translated_ovr0(x: real; y: real; z: real);
    external 'opengl32.dll' name 'glTranslated';
    public static z_Translated_ovr0 := _z_Translated_ovr0;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Translated(x: real; y: real; z: real) := z_Translated_ovr0(x, y, z);
    
    // added in gl1.0, deprecated in gl3.2
    private static procedure _z_Translatef_ovr0(x: single; y: single; z: single);
    external 'opengl32.dll' name 'glTranslatef';
    public static z_Translatef_ovr0 := _z_Translatef_ovr0;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Translatef(x: single; y: single; z: single) := z_Translatef_ovr0(x, y, z);
    
    // added in gl1.0, deprecated in gl3.2
    private static procedure _z_Vertex2d_ovr0(x: real; y: real);
    external 'opengl32.dll' name 'glVertex2d';
    public static z_Vertex2d_ovr0 := _z_Vertex2d_ovr0;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Vertex2d(x: real; y: real) := z_Vertex2d_ovr0(x, y);
    
    // added in gl1.0, deprecated in gl3.2
    private static procedure _z_Vertex2dv_ovr0([MarshalAs(UnmanagedType.LPArray)] v: array of real);
    external 'opengl32.dll' name 'glVertex2dv';
    public static z_Vertex2dv_ovr0 := _z_Vertex2dv_ovr0;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Vertex2dv(v: array of real) := z_Vertex2dv_ovr0(v);
    private static procedure _z_Vertex2dv_ovr1(var v: real);
    external 'opengl32.dll' name 'glVertex2dv';
    public static z_Vertex2dv_ovr1 := _z_Vertex2dv_ovr1;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Vertex2dv(var v: real) := z_Vertex2dv_ovr1(v);
    private static procedure _z_Vertex2dv_ovr2(v: IntPtr);
    external 'opengl32.dll' name 'glVertex2dv';
    public static z_Vertex2dv_ovr2 := _z_Vertex2dv_ovr2;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Vertex2dv(v: IntPtr) := z_Vertex2dv_ovr2(v);
    
    // added in gl1.0, deprecated in gl3.2
    private static procedure _z_Vertex2f_ovr0(x: single; y: single);
    external 'opengl32.dll' name 'glVertex2f';
    public static z_Vertex2f_ovr0 := _z_Vertex2f_ovr0;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Vertex2f(x: single; y: single) := z_Vertex2f_ovr0(x, y);
    
    // added in gl1.0, deprecated in gl3.2
    private static procedure _z_Vertex2fv_ovr0([MarshalAs(UnmanagedType.LPArray)] v: array of single);
    external 'opengl32.dll' name 'glVertex2fv';
    public static z_Vertex2fv_ovr0 := _z_Vertex2fv_ovr0;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Vertex2fv(v: array of single) := z_Vertex2fv_ovr0(v);
    private static procedure _z_Vertex2fv_ovr1(var v: single);
    external 'opengl32.dll' name 'glVertex2fv';
    public static z_Vertex2fv_ovr1 := _z_Vertex2fv_ovr1;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Vertex2fv(var v: single) := z_Vertex2fv_ovr1(v);
    private static procedure _z_Vertex2fv_ovr2(v: IntPtr);
    external 'opengl32.dll' name 'glVertex2fv';
    public static z_Vertex2fv_ovr2 := _z_Vertex2fv_ovr2;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Vertex2fv(v: IntPtr) := z_Vertex2fv_ovr2(v);
    
    // added in gl1.0, deprecated in gl3.2
    private static procedure _z_Vertex2i_ovr0(x: Int32; y: Int32);
    external 'opengl32.dll' name 'glVertex2i';
    public static z_Vertex2i_ovr0 := _z_Vertex2i_ovr0;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Vertex2i(x: Int32; y: Int32) := z_Vertex2i_ovr0(x, y);
    
    // added in gl1.0, deprecated in gl3.2
    private static procedure _z_Vertex2iv_ovr0([MarshalAs(UnmanagedType.LPArray)] v: array of Int32);
    external 'opengl32.dll' name 'glVertex2iv';
    public static z_Vertex2iv_ovr0 := _z_Vertex2iv_ovr0;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Vertex2iv(v: array of Int32) := z_Vertex2iv_ovr0(v);
    private static procedure _z_Vertex2iv_ovr1(var v: Int32);
    external 'opengl32.dll' name 'glVertex2iv';
    public static z_Vertex2iv_ovr1 := _z_Vertex2iv_ovr1;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Vertex2iv(var v: Int32) := z_Vertex2iv_ovr1(v);
    private static procedure _z_Vertex2iv_ovr2(v: IntPtr);
    external 'opengl32.dll' name 'glVertex2iv';
    public static z_Vertex2iv_ovr2 := _z_Vertex2iv_ovr2;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Vertex2iv(v: IntPtr) := z_Vertex2iv_ovr2(v);
    
    // added in gl1.0, deprecated in gl3.2
    private static procedure _z_Vertex2s_ovr0(x: Int16; y: Int16);
    external 'opengl32.dll' name 'glVertex2s';
    public static z_Vertex2s_ovr0 := _z_Vertex2s_ovr0;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Vertex2s(x: Int16; y: Int16) := z_Vertex2s_ovr0(x, y);
    
    // added in gl1.0, deprecated in gl3.2
    private static procedure _z_Vertex2sv_ovr0([MarshalAs(UnmanagedType.LPArray)] v: array of Int16);
    external 'opengl32.dll' name 'glVertex2sv';
    public static z_Vertex2sv_ovr0 := _z_Vertex2sv_ovr0;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Vertex2sv(v: array of Int16) := z_Vertex2sv_ovr0(v);
    private static procedure _z_Vertex2sv_ovr1(var v: Int16);
    external 'opengl32.dll' name 'glVertex2sv';
    public static z_Vertex2sv_ovr1 := _z_Vertex2sv_ovr1;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Vertex2sv(var v: Int16) := z_Vertex2sv_ovr1(v);
    private static procedure _z_Vertex2sv_ovr2(v: IntPtr);
    external 'opengl32.dll' name 'glVertex2sv';
    public static z_Vertex2sv_ovr2 := _z_Vertex2sv_ovr2;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Vertex2sv(v: IntPtr) := z_Vertex2sv_ovr2(v);
    
    // added in gl1.0, deprecated in gl3.2
    private static procedure _z_Vertex3d_ovr0(x: real; y: real; z: real);
    external 'opengl32.dll' name 'glVertex3d';
    public static z_Vertex3d_ovr0 := _z_Vertex3d_ovr0;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Vertex3d(x: real; y: real; z: real) := z_Vertex3d_ovr0(x, y, z);
    
    // added in gl1.0, deprecated in gl3.2
    private static procedure _z_Vertex3dv_ovr0([MarshalAs(UnmanagedType.LPArray)] v: array of real);
    external 'opengl32.dll' name 'glVertex3dv';
    public static z_Vertex3dv_ovr0 := _z_Vertex3dv_ovr0;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Vertex3dv(v: array of real) := z_Vertex3dv_ovr0(v);
    private static procedure _z_Vertex3dv_ovr1(var v: real);
    external 'opengl32.dll' name 'glVertex3dv';
    public static z_Vertex3dv_ovr1 := _z_Vertex3dv_ovr1;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Vertex3dv(var v: real) := z_Vertex3dv_ovr1(v);
    private static procedure _z_Vertex3dv_ovr2(v: IntPtr);
    external 'opengl32.dll' name 'glVertex3dv';
    public static z_Vertex3dv_ovr2 := _z_Vertex3dv_ovr2;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Vertex3dv(v: IntPtr) := z_Vertex3dv_ovr2(v);
    
    // added in gl1.0, deprecated in gl3.2
    private static procedure _z_Vertex3f_ovr0(x: single; y: single; z: single);
    external 'opengl32.dll' name 'glVertex3f';
    public static z_Vertex3f_ovr0 := _z_Vertex3f_ovr0;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Vertex3f(x: single; y: single; z: single) := z_Vertex3f_ovr0(x, y, z);
    
    // added in gl1.0, deprecated in gl3.2
    private static procedure _z_Vertex3fv_ovr0([MarshalAs(UnmanagedType.LPArray)] v: array of single);
    external 'opengl32.dll' name 'glVertex3fv';
    public static z_Vertex3fv_ovr0 := _z_Vertex3fv_ovr0;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Vertex3fv(v: array of single) := z_Vertex3fv_ovr0(v);
    private static procedure _z_Vertex3fv_ovr1(var v: single);
    external 'opengl32.dll' name 'glVertex3fv';
    public static z_Vertex3fv_ovr1 := _z_Vertex3fv_ovr1;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Vertex3fv(var v: single) := z_Vertex3fv_ovr1(v);
    private static procedure _z_Vertex3fv_ovr2(v: IntPtr);
    external 'opengl32.dll' name 'glVertex3fv';
    public static z_Vertex3fv_ovr2 := _z_Vertex3fv_ovr2;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Vertex3fv(v: IntPtr) := z_Vertex3fv_ovr2(v);
    
    // added in gl1.0, deprecated in gl3.2
    private static procedure _z_Vertex3i_ovr0(x: Int32; y: Int32; z: Int32);
    external 'opengl32.dll' name 'glVertex3i';
    public static z_Vertex3i_ovr0 := _z_Vertex3i_ovr0;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Vertex3i(x: Int32; y: Int32; z: Int32) := z_Vertex3i_ovr0(x, y, z);
    
    // added in gl1.0, deprecated in gl3.2
    private static procedure _z_Vertex3iv_ovr0([MarshalAs(UnmanagedType.LPArray)] v: array of Int32);
    external 'opengl32.dll' name 'glVertex3iv';
    public static z_Vertex3iv_ovr0 := _z_Vertex3iv_ovr0;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Vertex3iv(v: array of Int32) := z_Vertex3iv_ovr0(v);
    private static procedure _z_Vertex3iv_ovr1(var v: Int32);
    external 'opengl32.dll' name 'glVertex3iv';
    public static z_Vertex3iv_ovr1 := _z_Vertex3iv_ovr1;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Vertex3iv(var v: Int32) := z_Vertex3iv_ovr1(v);
    private static procedure _z_Vertex3iv_ovr2(v: IntPtr);
    external 'opengl32.dll' name 'glVertex3iv';
    public static z_Vertex3iv_ovr2 := _z_Vertex3iv_ovr2;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Vertex3iv(v: IntPtr) := z_Vertex3iv_ovr2(v);
    
    // added in gl1.0, deprecated in gl3.2
    private static procedure _z_Vertex3s_ovr0(x: Int16; y: Int16; z: Int16);
    external 'opengl32.dll' name 'glVertex3s';
    public static z_Vertex3s_ovr0 := _z_Vertex3s_ovr0;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Vertex3s(x: Int16; y: Int16; z: Int16) := z_Vertex3s_ovr0(x, y, z);
    
    // added in gl1.0, deprecated in gl3.2
    private static procedure _z_Vertex3sv_ovr0([MarshalAs(UnmanagedType.LPArray)] v: array of Int16);
    external 'opengl32.dll' name 'glVertex3sv';
    public static z_Vertex3sv_ovr0 := _z_Vertex3sv_ovr0;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Vertex3sv(v: array of Int16) := z_Vertex3sv_ovr0(v);
    private static procedure _z_Vertex3sv_ovr1(var v: Int16);
    external 'opengl32.dll' name 'glVertex3sv';
    public static z_Vertex3sv_ovr1 := _z_Vertex3sv_ovr1;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Vertex3sv(var v: Int16) := z_Vertex3sv_ovr1(v);
    private static procedure _z_Vertex3sv_ovr2(v: IntPtr);
    external 'opengl32.dll' name 'glVertex3sv';
    public static z_Vertex3sv_ovr2 := _z_Vertex3sv_ovr2;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Vertex3sv(v: IntPtr) := z_Vertex3sv_ovr2(v);
    
    // added in gl1.0, deprecated in gl3.2
    private static procedure _z_Vertex4d_ovr0(x: real; y: real; z: real; w: real);
    external 'opengl32.dll' name 'glVertex4d';
    public static z_Vertex4d_ovr0 := _z_Vertex4d_ovr0;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Vertex4d(x: real; y: real; z: real; w: real) := z_Vertex4d_ovr0(x, y, z, w);
    
    // added in gl1.0, deprecated in gl3.2
    private static procedure _z_Vertex4dv_ovr0([MarshalAs(UnmanagedType.LPArray)] v: array of real);
    external 'opengl32.dll' name 'glVertex4dv';
    public static z_Vertex4dv_ovr0 := _z_Vertex4dv_ovr0;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Vertex4dv(v: array of real) := z_Vertex4dv_ovr0(v);
    private static procedure _z_Vertex4dv_ovr1(var v: real);
    external 'opengl32.dll' name 'glVertex4dv';
    public static z_Vertex4dv_ovr1 := _z_Vertex4dv_ovr1;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Vertex4dv(var v: real) := z_Vertex4dv_ovr1(v);
    private static procedure _z_Vertex4dv_ovr2(v: IntPtr);
    external 'opengl32.dll' name 'glVertex4dv';
    public static z_Vertex4dv_ovr2 := _z_Vertex4dv_ovr2;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Vertex4dv(v: IntPtr) := z_Vertex4dv_ovr2(v);
    
    // added in gl1.0, deprecated in gl3.2
    private static procedure _z_Vertex4f_ovr0(x: single; y: single; z: single; w: single);
    external 'opengl32.dll' name 'glVertex4f';
    public static z_Vertex4f_ovr0 := _z_Vertex4f_ovr0;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Vertex4f(x: single; y: single; z: single; w: single) := z_Vertex4f_ovr0(x, y, z, w);
    
    // added in gl1.0, deprecated in gl3.2
    private static procedure _z_Vertex4fv_ovr0([MarshalAs(UnmanagedType.LPArray)] v: array of single);
    external 'opengl32.dll' name 'glVertex4fv';
    public static z_Vertex4fv_ovr0 := _z_Vertex4fv_ovr0;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Vertex4fv(v: array of single) := z_Vertex4fv_ovr0(v);
    private static procedure _z_Vertex4fv_ovr1(var v: single);
    external 'opengl32.dll' name 'glVertex4fv';
    public static z_Vertex4fv_ovr1 := _z_Vertex4fv_ovr1;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Vertex4fv(var v: single) := z_Vertex4fv_ovr1(v);
    private static procedure _z_Vertex4fv_ovr2(v: IntPtr);
    external 'opengl32.dll' name 'glVertex4fv';
    public static z_Vertex4fv_ovr2 := _z_Vertex4fv_ovr2;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Vertex4fv(v: IntPtr) := z_Vertex4fv_ovr2(v);
    
    // added in gl1.0, deprecated in gl3.2
    private static procedure _z_Vertex4i_ovr0(x: Int32; y: Int32; z: Int32; w: Int32);
    external 'opengl32.dll' name 'glVertex4i';
    public static z_Vertex4i_ovr0 := _z_Vertex4i_ovr0;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Vertex4i(x: Int32; y: Int32; z: Int32; w: Int32) := z_Vertex4i_ovr0(x, y, z, w);
    
    // added in gl1.0, deprecated in gl3.2
    private static procedure _z_Vertex4iv_ovr0([MarshalAs(UnmanagedType.LPArray)] v: array of Int32);
    external 'opengl32.dll' name 'glVertex4iv';
    public static z_Vertex4iv_ovr0 := _z_Vertex4iv_ovr0;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Vertex4iv(v: array of Int32) := z_Vertex4iv_ovr0(v);
    private static procedure _z_Vertex4iv_ovr1(var v: Int32);
    external 'opengl32.dll' name 'glVertex4iv';
    public static z_Vertex4iv_ovr1 := _z_Vertex4iv_ovr1;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Vertex4iv(var v: Int32) := z_Vertex4iv_ovr1(v);
    private static procedure _z_Vertex4iv_ovr2(v: IntPtr);
    external 'opengl32.dll' name 'glVertex4iv';
    public static z_Vertex4iv_ovr2 := _z_Vertex4iv_ovr2;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Vertex4iv(v: IntPtr) := z_Vertex4iv_ovr2(v);
    
    // added in gl1.0, deprecated in gl3.2
    private static procedure _z_Vertex4s_ovr0(x: Int16; y: Int16; z: Int16; w: Int16);
    external 'opengl32.dll' name 'glVertex4s';
    public static z_Vertex4s_ovr0 := _z_Vertex4s_ovr0;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Vertex4s(x: Int16; y: Int16; z: Int16; w: Int16) := z_Vertex4s_ovr0(x, y, z, w);
    
    // added in gl1.0, deprecated in gl3.2
    private static procedure _z_Vertex4sv_ovr0([MarshalAs(UnmanagedType.LPArray)] v: array of Int16);
    external 'opengl32.dll' name 'glVertex4sv';
    public static z_Vertex4sv_ovr0 := _z_Vertex4sv_ovr0;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Vertex4sv(v: array of Int16) := z_Vertex4sv_ovr0(v);
    private static procedure _z_Vertex4sv_ovr1(var v: Int16);
    external 'opengl32.dll' name 'glVertex4sv';
    public static z_Vertex4sv_ovr1 := _z_Vertex4sv_ovr1;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Vertex4sv(var v: Int16) := z_Vertex4sv_ovr1(v);
    private static procedure _z_Vertex4sv_ovr2(v: IntPtr);
    external 'opengl32.dll' name 'glVertex4sv';
    public static z_Vertex4sv_ovr2 := _z_Vertex4sv_ovr2;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Vertex4sv(v: IntPtr) := z_Vertex4sv_ovr2(v);
    
    // added in gl1.1, deprecated in gl3.2
    private static procedure _z_VertexPointer_ovr0(size: Int32; &type: VertexPointerType; stride: Int32; pointer: IntPtr);
    external 'opengl32.dll' name 'glVertexPointer';
    public static z_VertexPointer_ovr0 := _z_VertexPointer_ovr0;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexPointer(size: Int32; &type: VertexPointerType; stride: Int32; pointer: IntPtr) := z_VertexPointer_ovr0(size, &type, stride, pointer);
    
    // added in gl1.4, deprecated in gl3.2
    public z_WindowPos2d_adr := GetFuncAdr('glWindowPos2d');
    public z_WindowPos2d_ovr_0 := GetFuncOrNil&<procedure(x: real; y: real)>(z_WindowPos2d_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure WindowPos2d(x: real; y: real);
    begin
      z_WindowPos2d_ovr_0(x, y);
    end;
    
    // added in gl1.4, deprecated in gl3.2
    public z_WindowPos2dv_adr := GetFuncAdr('glWindowPos2dv');
    public z_WindowPos2dv_ovr_0 := GetFuncOrNil&<procedure(var v: real)>(z_WindowPos2dv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure WindowPos2dv(v: array of real);
    begin
      z_WindowPos2dv_ovr_0(v[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure WindowPos2dv(var v: real);
    begin
      z_WindowPos2dv_ovr_0(v);
    end;
    public z_WindowPos2dv_ovr_2 := GetFuncOrNil&<procedure(v: IntPtr)>(z_WindowPos2dv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure WindowPos2dv(v: IntPtr);
    begin
      z_WindowPos2dv_ovr_2(v);
    end;
    
    // added in gl1.4, deprecated in gl3.2
    public z_WindowPos2f_adr := GetFuncAdr('glWindowPos2f');
    public z_WindowPos2f_ovr_0 := GetFuncOrNil&<procedure(x: single; y: single)>(z_WindowPos2f_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure WindowPos2f(x: single; y: single);
    begin
      z_WindowPos2f_ovr_0(x, y);
    end;
    
    // added in gl1.4, deprecated in gl3.2
    public z_WindowPos2fv_adr := GetFuncAdr('glWindowPos2fv');
    public z_WindowPos2fv_ovr_0 := GetFuncOrNil&<procedure(var v: single)>(z_WindowPos2fv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure WindowPos2fv(v: array of single);
    begin
      z_WindowPos2fv_ovr_0(v[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure WindowPos2fv(var v: single);
    begin
      z_WindowPos2fv_ovr_0(v);
    end;
    public z_WindowPos2fv_ovr_2 := GetFuncOrNil&<procedure(v: IntPtr)>(z_WindowPos2fv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure WindowPos2fv(v: IntPtr);
    begin
      z_WindowPos2fv_ovr_2(v);
    end;
    
    // added in gl1.4, deprecated in gl3.2
    public z_WindowPos2i_adr := GetFuncAdr('glWindowPos2i');
    public z_WindowPos2i_ovr_0 := GetFuncOrNil&<procedure(x: Int32; y: Int32)>(z_WindowPos2i_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure WindowPos2i(x: Int32; y: Int32);
    begin
      z_WindowPos2i_ovr_0(x, y);
    end;
    
    // added in gl1.4, deprecated in gl3.2
    public z_WindowPos2iv_adr := GetFuncAdr('glWindowPos2iv');
    public z_WindowPos2iv_ovr_0 := GetFuncOrNil&<procedure(var v: Int32)>(z_WindowPos2iv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure WindowPos2iv(v: array of Int32);
    begin
      z_WindowPos2iv_ovr_0(v[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure WindowPos2iv(var v: Int32);
    begin
      z_WindowPos2iv_ovr_0(v);
    end;
    public z_WindowPos2iv_ovr_2 := GetFuncOrNil&<procedure(v: IntPtr)>(z_WindowPos2iv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure WindowPos2iv(v: IntPtr);
    begin
      z_WindowPos2iv_ovr_2(v);
    end;
    
    // added in gl1.4, deprecated in gl3.2
    public z_WindowPos2s_adr := GetFuncAdr('glWindowPos2s');
    public z_WindowPos2s_ovr_0 := GetFuncOrNil&<procedure(x: Int16; y: Int16)>(z_WindowPos2s_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure WindowPos2s(x: Int16; y: Int16);
    begin
      z_WindowPos2s_ovr_0(x, y);
    end;
    
    // added in gl1.4, deprecated in gl3.2
    public z_WindowPos2sv_adr := GetFuncAdr('glWindowPos2sv');
    public z_WindowPos2sv_ovr_0 := GetFuncOrNil&<procedure(var v: Int16)>(z_WindowPos2sv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure WindowPos2sv(v: array of Int16);
    begin
      z_WindowPos2sv_ovr_0(v[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure WindowPos2sv(var v: Int16);
    begin
      z_WindowPos2sv_ovr_0(v);
    end;
    public z_WindowPos2sv_ovr_2 := GetFuncOrNil&<procedure(v: IntPtr)>(z_WindowPos2sv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure WindowPos2sv(v: IntPtr);
    begin
      z_WindowPos2sv_ovr_2(v);
    end;
    
    // added in gl1.4, deprecated in gl3.2
    public z_WindowPos3d_adr := GetFuncAdr('glWindowPos3d');
    public z_WindowPos3d_ovr_0 := GetFuncOrNil&<procedure(x: real; y: real; z: real)>(z_WindowPos3d_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure WindowPos3d(x: real; y: real; z: real);
    begin
      z_WindowPos3d_ovr_0(x, y, z);
    end;
    
    // added in gl1.4, deprecated in gl3.2
    public z_WindowPos3dv_adr := GetFuncAdr('glWindowPos3dv');
    public z_WindowPos3dv_ovr_0 := GetFuncOrNil&<procedure(var v: real)>(z_WindowPos3dv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure WindowPos3dv(v: array of real);
    begin
      z_WindowPos3dv_ovr_0(v[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure WindowPos3dv(var v: real);
    begin
      z_WindowPos3dv_ovr_0(v);
    end;
    public z_WindowPos3dv_ovr_2 := GetFuncOrNil&<procedure(v: IntPtr)>(z_WindowPos3dv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure WindowPos3dv(v: IntPtr);
    begin
      z_WindowPos3dv_ovr_2(v);
    end;
    
    // added in gl1.4, deprecated in gl3.2
    public z_WindowPos3f_adr := GetFuncAdr('glWindowPos3f');
    public z_WindowPos3f_ovr_0 := GetFuncOrNil&<procedure(x: single; y: single; z: single)>(z_WindowPos3f_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure WindowPos3f(x: single; y: single; z: single);
    begin
      z_WindowPos3f_ovr_0(x, y, z);
    end;
    
    // added in gl1.4, deprecated in gl3.2
    public z_WindowPos3fv_adr := GetFuncAdr('glWindowPos3fv');
    public z_WindowPos3fv_ovr_0 := GetFuncOrNil&<procedure(var v: single)>(z_WindowPos3fv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure WindowPos3fv(v: array of single);
    begin
      z_WindowPos3fv_ovr_0(v[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure WindowPos3fv(var v: single);
    begin
      z_WindowPos3fv_ovr_0(v);
    end;
    public z_WindowPos3fv_ovr_2 := GetFuncOrNil&<procedure(v: IntPtr)>(z_WindowPos3fv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure WindowPos3fv(v: IntPtr);
    begin
      z_WindowPos3fv_ovr_2(v);
    end;
    
    // added in gl1.4, deprecated in gl3.2
    public z_WindowPos3i_adr := GetFuncAdr('glWindowPos3i');
    public z_WindowPos3i_ovr_0 := GetFuncOrNil&<procedure(x: Int32; y: Int32; z: Int32)>(z_WindowPos3i_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure WindowPos3i(x: Int32; y: Int32; z: Int32);
    begin
      z_WindowPos3i_ovr_0(x, y, z);
    end;
    
    // added in gl1.4, deprecated in gl3.2
    public z_WindowPos3iv_adr := GetFuncAdr('glWindowPos3iv');
    public z_WindowPos3iv_ovr_0 := GetFuncOrNil&<procedure(var v: Int32)>(z_WindowPos3iv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure WindowPos3iv(v: array of Int32);
    begin
      z_WindowPos3iv_ovr_0(v[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure WindowPos3iv(var v: Int32);
    begin
      z_WindowPos3iv_ovr_0(v);
    end;
    public z_WindowPos3iv_ovr_2 := GetFuncOrNil&<procedure(v: IntPtr)>(z_WindowPos3iv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure WindowPos3iv(v: IntPtr);
    begin
      z_WindowPos3iv_ovr_2(v);
    end;
    
    // added in gl1.4, deprecated in gl3.2
    public z_WindowPos3s_adr := GetFuncAdr('glWindowPos3s');
    public z_WindowPos3s_ovr_0 := GetFuncOrNil&<procedure(x: Int16; y: Int16; z: Int16)>(z_WindowPos3s_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure WindowPos3s(x: Int16; y: Int16; z: Int16);
    begin
      z_WindowPos3s_ovr_0(x, y, z);
    end;
    
    // added in gl1.4, deprecated in gl3.2
    public z_WindowPos3sv_adr := GetFuncAdr('glWindowPos3sv');
    public z_WindowPos3sv_ovr_0 := GetFuncOrNil&<procedure(var v: Int16)>(z_WindowPos3sv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure WindowPos3sv(v: array of Int16);
    begin
      z_WindowPos3sv_ovr_0(v[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure WindowPos3sv(var v: Int16);
    begin
      z_WindowPos3sv_ovr_0(v);
    end;
    public z_WindowPos3sv_ovr_2 := GetFuncOrNil&<procedure(v: IntPtr)>(z_WindowPos3sv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure WindowPos3sv(v: IntPtr);
    begin
      z_WindowPos3sv_ovr_2(v);
    end;
    
  end;
  
  wgl = static class
    
    // added in wgl1.0
    private static function _z_CopyContext_ovr0(hglrcSrc: GLContext; hglrcDst: GLContext; mask: UInt32): UInt32;
    external 'opengl32.dll' name 'wglCopyContext';
    public static z_CopyContext_ovr0 := _z_CopyContext_ovr0;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function CopyContext(hglrcSrc: GLContext; hglrcDst: GLContext; mask: UInt32): UInt32 := z_CopyContext_ovr0(hglrcSrc, hglrcDst, mask);
    
    // added in wgl1.0
    private static function _z_CreateContext_ovr0(hDc: GDI_DC): GLContext;
    external 'opengl32.dll' name 'wglCreateContext';
    public static z_CreateContext_ovr0 := _z_CreateContext_ovr0;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function CreateContext(hDc: GDI_DC): GLContext := z_CreateContext_ovr0(hDc);
    
    // added in wgl1.0
    private static function _z_CreateLayerContext_ovr0(hDc: GDI_DC; level: Int32): GLContext;
    external 'opengl32.dll' name 'wglCreateLayerContext';
    public static z_CreateLayerContext_ovr0 := _z_CreateLayerContext_ovr0;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function CreateLayerContext(hDc: GDI_DC; level: Int32): GLContext := z_CreateLayerContext_ovr0(hDc, level);
    
    // added in wgl1.0
    private static function _z_DeleteContext_ovr0(oldContext: GLContext): UInt32;
    external 'opengl32.dll' name 'wglDeleteContext';
    public static z_DeleteContext_ovr0 := _z_DeleteContext_ovr0;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function DeleteContext(oldContext: GLContext): UInt32 := z_DeleteContext_ovr0(oldContext);
    
    // added in wgl1.0
    private static function _z_DescribeLayerPlane_ovr0(hDc: GDI_DC; pixelFormat: Int32; layerPlane: Int32; nBytes: UInt32; [MarshalAs(UnmanagedType.LPArray)] plpd: array of GDI_LayerPlaneDescriptor): UInt32;
    external 'opengl32.dll' name 'wglDescribeLayerPlane';
    public static z_DescribeLayerPlane_ovr0 := _z_DescribeLayerPlane_ovr0;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function DescribeLayerPlane(hDc: GDI_DC; pixelFormat: Int32; layerPlane: Int32; nBytes: UInt32; plpd: array of GDI_LayerPlaneDescriptor): UInt32 := z_DescribeLayerPlane_ovr0(hDc, pixelFormat, layerPlane, nBytes, plpd);
    private static function _z_DescribeLayerPlane_ovr1(hDc: GDI_DC; pixelFormat: Int32; layerPlane: Int32; nBytes: UInt32; var plpd: GDI_LayerPlaneDescriptor): UInt32;
    external 'opengl32.dll' name 'wglDescribeLayerPlane';
    public static z_DescribeLayerPlane_ovr1 := _z_DescribeLayerPlane_ovr1;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function DescribeLayerPlane(hDc: GDI_DC; pixelFormat: Int32; layerPlane: Int32; nBytes: UInt32; var plpd: GDI_LayerPlaneDescriptor): UInt32 := z_DescribeLayerPlane_ovr1(hDc, pixelFormat, layerPlane, nBytes, plpd);
    private static function _z_DescribeLayerPlane_ovr2(hDc: GDI_DC; pixelFormat: Int32; layerPlane: Int32; nBytes: UInt32; plpd: IntPtr): UInt32;
    external 'opengl32.dll' name 'wglDescribeLayerPlane';
    public static z_DescribeLayerPlane_ovr2 := _z_DescribeLayerPlane_ovr2;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function DescribeLayerPlane(hDc: GDI_DC; pixelFormat: Int32; layerPlane: Int32; nBytes: UInt32; plpd: IntPtr): UInt32 := z_DescribeLayerPlane_ovr2(hDc, pixelFormat, layerPlane, nBytes, plpd);
    
    // added in wgl1.0
    private static function _z_GetCurrentContext_ovr0: GLContext;
    external 'opengl32.dll' name 'wglGetCurrentContext';
    public static z_GetCurrentContext_ovr0: function: GLContext := _z_GetCurrentContext_ovr0;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function GetCurrentContext: GLContext := z_GetCurrentContext_ovr0;
    
    // added in wgl1.0
    private static function _z_GetCurrentDC_ovr0: GDI_DC;
    external 'opengl32.dll' name 'wglGetCurrentDC';
    public static z_GetCurrentDC_ovr0: function: GDI_DC := _z_GetCurrentDC_ovr0;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function GetCurrentDC: GDI_DC := z_GetCurrentDC_ovr0;
    
    // added in wgl1.0
    private static function _z_GetLayerPaletteEntries_ovr0(hdc: GDI_DC; iLayerPlane: Int32; iStart: Int32; cEntries: Int32; [MarshalAs(UnmanagedType.LPArray)] pcr: array of GDI_COLORREF): Int32;
    external 'opengl32.dll' name 'wglGetLayerPaletteEntries';
    public static z_GetLayerPaletteEntries_ovr0 := _z_GetLayerPaletteEntries_ovr0;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function GetLayerPaletteEntries(hdc: GDI_DC; iLayerPlane: Int32; iStart: Int32; cEntries: Int32; pcr: array of GDI_COLORREF): Int32 := z_GetLayerPaletteEntries_ovr0(hdc, iLayerPlane, iStart, cEntries, pcr);
    private static function _z_GetLayerPaletteEntries_ovr1(hdc: GDI_DC; iLayerPlane: Int32; iStart: Int32; cEntries: Int32; var pcr: GDI_COLORREF): Int32;
    external 'opengl32.dll' name 'wglGetLayerPaletteEntries';
    public static z_GetLayerPaletteEntries_ovr1 := _z_GetLayerPaletteEntries_ovr1;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function GetLayerPaletteEntries(hdc: GDI_DC; iLayerPlane: Int32; iStart: Int32; cEntries: Int32; var pcr: GDI_COLORREF): Int32 := z_GetLayerPaletteEntries_ovr1(hdc, iLayerPlane, iStart, cEntries, pcr);
    private static function _z_GetLayerPaletteEntries_ovr2(hdc: GDI_DC; iLayerPlane: Int32; iStart: Int32; cEntries: Int32; pcr: IntPtr): Int32;
    external 'opengl32.dll' name 'wglGetLayerPaletteEntries';
    public static z_GetLayerPaletteEntries_ovr2 := _z_GetLayerPaletteEntries_ovr2;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function GetLayerPaletteEntries(hdc: GDI_DC; iLayerPlane: Int32; iStart: Int32; cEntries: Int32; pcr: IntPtr): Int32 := z_GetLayerPaletteEntries_ovr2(hdc, iLayerPlane, iStart, cEntries, pcr);
    
    // added in wgl1.0
    private static function _z_GetProcAddress_ovr0(lpszProc: IntPtr): IntPtr;
    external 'opengl32.dll' name 'wglGetProcAddress';
    public static z_GetProcAddress_ovr0 := _z_GetProcAddress_ovr0;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function GetProcAddress(lpszProc: IntPtr): IntPtr := z_GetProcAddress_ovr0(lpszProc);
    
    // added in wgl1.0
    private static function _z_MakeCurrent_ovr0(hDc: GDI_DC; newContext: GLContext): UInt32;
    external 'opengl32.dll' name 'wglMakeCurrent';
    public static z_MakeCurrent_ovr0 := _z_MakeCurrent_ovr0;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function MakeCurrent(hDc: GDI_DC; newContext: GLContext): UInt32 := z_MakeCurrent_ovr0(hDc, newContext);
    
    // added in wgl1.0
    private static function _z_RealizeLayerPalette_ovr0(hdc: GDI_DC; iLayerPlane: Int32; bRealize: UInt32): UInt32;
    external 'opengl32.dll' name 'wglRealizeLayerPalette';
    public static z_RealizeLayerPalette_ovr0 := _z_RealizeLayerPalette_ovr0;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function RealizeLayerPalette(hdc: GDI_DC; iLayerPlane: Int32; bRealize: UInt32): UInt32 := z_RealizeLayerPalette_ovr0(hdc, iLayerPlane, bRealize);
    
    // added in wgl1.0
    private static function _z_SetLayerPaletteEntries_ovr0(hdc: GDI_DC; iLayerPlane: Int32; iStart: Int32; cEntries: Int32; [MarshalAs(UnmanagedType.LPArray)] pcr: array of GDI_COLORREF): Int32;
    external 'opengl32.dll' name 'wglSetLayerPaletteEntries';
    public static z_SetLayerPaletteEntries_ovr0 := _z_SetLayerPaletteEntries_ovr0;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function SetLayerPaletteEntries(hdc: GDI_DC; iLayerPlane: Int32; iStart: Int32; cEntries: Int32; pcr: array of GDI_COLORREF): Int32 := z_SetLayerPaletteEntries_ovr0(hdc, iLayerPlane, iStart, cEntries, pcr);
    private static function _z_SetLayerPaletteEntries_ovr1(hdc: GDI_DC; iLayerPlane: Int32; iStart: Int32; cEntries: Int32; var pcr: GDI_COLORREF): Int32;
    external 'opengl32.dll' name 'wglSetLayerPaletteEntries';
    public static z_SetLayerPaletteEntries_ovr1 := _z_SetLayerPaletteEntries_ovr1;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function SetLayerPaletteEntries(hdc: GDI_DC; iLayerPlane: Int32; iStart: Int32; cEntries: Int32; var pcr: GDI_COLORREF): Int32 := z_SetLayerPaletteEntries_ovr1(hdc, iLayerPlane, iStart, cEntries, pcr);
    private static function _z_SetLayerPaletteEntries_ovr2(hdc: GDI_DC; iLayerPlane: Int32; iStart: Int32; cEntries: Int32; pcr: IntPtr): Int32;
    external 'opengl32.dll' name 'wglSetLayerPaletteEntries';
    public static z_SetLayerPaletteEntries_ovr2 := _z_SetLayerPaletteEntries_ovr2;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function SetLayerPaletteEntries(hdc: GDI_DC; iLayerPlane: Int32; iStart: Int32; cEntries: Int32; pcr: IntPtr): Int32 := z_SetLayerPaletteEntries_ovr2(hdc, iLayerPlane, iStart, cEntries, pcr);
    
    // added in wgl1.0
    private static function _z_ShareLists_ovr0(hrcSrvShare: GLContext; hrcSrvSource: GLContext): UInt32;
    external 'opengl32.dll' name 'wglShareLists';
    public static z_ShareLists_ovr0 := _z_ShareLists_ovr0;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function ShareLists(hrcSrvShare: GLContext; hrcSrvSource: GLContext): UInt32 := z_ShareLists_ovr0(hrcSrvShare, hrcSrvSource);
    
    // added in wgl1.0
    private static function _z_SwapLayerBuffers_ovr0(hdc: GDI_DC; fuFlags: UInt32): UInt32;
    external 'opengl32.dll' name 'wglSwapLayerBuffers';
    public static z_SwapLayerBuffers_ovr0 := _z_SwapLayerBuffers_ovr0;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function SwapLayerBuffers(hdc: GDI_DC; fuFlags: UInt32): UInt32 := z_SwapLayerBuffers_ovr0(hdc, fuFlags);
    
    // added in wgl1.0
    private static function _z_UseFontBitmaps_ovr0(hDC: GDI_DC; first: UInt32; count: UInt32; listBase: UInt32): UInt32;
    external 'opengl32.dll' name 'wglUseFontBitmaps';
    public static z_UseFontBitmaps_ovr0 := _z_UseFontBitmaps_ovr0;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function UseFontBitmaps(hDC: GDI_DC; first: UInt32; count: UInt32; listBase: UInt32): UInt32 := z_UseFontBitmaps_ovr0(hDC, first, count, listBase);
    
    // added in wgl1.0
    private static function _z_UseFontBitmapsA_ovr0(hDC: GDI_DC; first: UInt32; count: UInt32; listBase: UInt32): UInt32;
    external 'opengl32.dll' name 'wglUseFontBitmapsA';
    public static z_UseFontBitmapsA_ovr0 := _z_UseFontBitmapsA_ovr0;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function UseFontBitmapsA(hDC: GDI_DC; first: UInt32; count: UInt32; listBase: UInt32): UInt32 := z_UseFontBitmapsA_ovr0(hDC, first, count, listBase);
    
    // added in wgl1.0
    private static function _z_UseFontBitmapsW_ovr0(hDC: GDI_DC; first: UInt32; count: UInt32; listBase: UInt32): UInt32;
    external 'opengl32.dll' name 'wglUseFontBitmapsW';
    public static z_UseFontBitmapsW_ovr0 := _z_UseFontBitmapsW_ovr0;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function UseFontBitmapsW(hDC: GDI_DC; first: UInt32; count: UInt32; listBase: UInt32): UInt32 := z_UseFontBitmapsW_ovr0(hDC, first, count, listBase);
    
    // added in wgl1.0
    private static function _z_UseFontOutlines_ovr0(hDC: GDI_DC; first: UInt32; count: UInt32; listBase: UInt32; deviation: single; extrusion: single; format: Int32; [MarshalAs(UnmanagedType.LPArray)] lpgmf: array of GDI_GlyphmetricsFloat): UInt32;
    external 'opengl32.dll' name 'wglUseFontOutlines';
    public static z_UseFontOutlines_ovr0 := _z_UseFontOutlines_ovr0;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function UseFontOutlines(hDC: GDI_DC; first: UInt32; count: UInt32; listBase: UInt32; deviation: single; extrusion: single; format: Int32; lpgmf: array of GDI_GlyphmetricsFloat): UInt32 := z_UseFontOutlines_ovr0(hDC, first, count, listBase, deviation, extrusion, format, lpgmf);
    private static function _z_UseFontOutlines_ovr1(hDC: GDI_DC; first: UInt32; count: UInt32; listBase: UInt32; deviation: single; extrusion: single; format: Int32; var lpgmf: GDI_GlyphmetricsFloat): UInt32;
    external 'opengl32.dll' name 'wglUseFontOutlines';
    public static z_UseFontOutlines_ovr1 := _z_UseFontOutlines_ovr1;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function UseFontOutlines(hDC: GDI_DC; first: UInt32; count: UInt32; listBase: UInt32; deviation: single; extrusion: single; format: Int32; var lpgmf: GDI_GlyphmetricsFloat): UInt32 := z_UseFontOutlines_ovr1(hDC, first, count, listBase, deviation, extrusion, format, lpgmf);
    private static function _z_UseFontOutlines_ovr2(hDC: GDI_DC; first: UInt32; count: UInt32; listBase: UInt32; deviation: single; extrusion: single; format: Int32; lpgmf: IntPtr): UInt32;
    external 'opengl32.dll' name 'wglUseFontOutlines';
    public static z_UseFontOutlines_ovr2 := _z_UseFontOutlines_ovr2;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function UseFontOutlines(hDC: GDI_DC; first: UInt32; count: UInt32; listBase: UInt32; deviation: single; extrusion: single; format: Int32; lpgmf: IntPtr): UInt32 := z_UseFontOutlines_ovr2(hDC, first, count, listBase, deviation, extrusion, format, lpgmf);
    
    // added in wgl1.0
    private static function _z_UseFontOutlinesA_ovr0(hDC: GDI_DC; first: UInt32; count: UInt32; listBase: UInt32; deviation: single; extrusion: single; format: Int32; [MarshalAs(UnmanagedType.LPArray)] lpgmf: array of GDI_GlyphmetricsFloat): UInt32;
    external 'opengl32.dll' name 'wglUseFontOutlinesA';
    public static z_UseFontOutlinesA_ovr0 := _z_UseFontOutlinesA_ovr0;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function UseFontOutlinesA(hDC: GDI_DC; first: UInt32; count: UInt32; listBase: UInt32; deviation: single; extrusion: single; format: Int32; lpgmf: array of GDI_GlyphmetricsFloat): UInt32 := z_UseFontOutlinesA_ovr0(hDC, first, count, listBase, deviation, extrusion, format, lpgmf);
    private static function _z_UseFontOutlinesA_ovr1(hDC: GDI_DC; first: UInt32; count: UInt32; listBase: UInt32; deviation: single; extrusion: single; format: Int32; var lpgmf: GDI_GlyphmetricsFloat): UInt32;
    external 'opengl32.dll' name 'wglUseFontOutlinesA';
    public static z_UseFontOutlinesA_ovr1 := _z_UseFontOutlinesA_ovr1;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function UseFontOutlinesA(hDC: GDI_DC; first: UInt32; count: UInt32; listBase: UInt32; deviation: single; extrusion: single; format: Int32; var lpgmf: GDI_GlyphmetricsFloat): UInt32 := z_UseFontOutlinesA_ovr1(hDC, first, count, listBase, deviation, extrusion, format, lpgmf);
    private static function _z_UseFontOutlinesA_ovr2(hDC: GDI_DC; first: UInt32; count: UInt32; listBase: UInt32; deviation: single; extrusion: single; format: Int32; lpgmf: IntPtr): UInt32;
    external 'opengl32.dll' name 'wglUseFontOutlinesA';
    public static z_UseFontOutlinesA_ovr2 := _z_UseFontOutlinesA_ovr2;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function UseFontOutlinesA(hDC: GDI_DC; first: UInt32; count: UInt32; listBase: UInt32; deviation: single; extrusion: single; format: Int32; lpgmf: IntPtr): UInt32 := z_UseFontOutlinesA_ovr2(hDC, first, count, listBase, deviation, extrusion, format, lpgmf);
    
    // added in wgl1.0
    private static function _z_UseFontOutlinesW_ovr0(hDC: GDI_DC; first: UInt32; count: UInt32; listBase: UInt32; deviation: single; extrusion: single; format: Int32; [MarshalAs(UnmanagedType.LPArray)] lpgmf: array of GDI_GlyphmetricsFloat): UInt32;
    external 'opengl32.dll' name 'wglUseFontOutlinesW';
    public static z_UseFontOutlinesW_ovr0 := _z_UseFontOutlinesW_ovr0;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function UseFontOutlinesW(hDC: GDI_DC; first: UInt32; count: UInt32; listBase: UInt32; deviation: single; extrusion: single; format: Int32; lpgmf: array of GDI_GlyphmetricsFloat): UInt32 := z_UseFontOutlinesW_ovr0(hDC, first, count, listBase, deviation, extrusion, format, lpgmf);
    private static function _z_UseFontOutlinesW_ovr1(hDC: GDI_DC; first: UInt32; count: UInt32; listBase: UInt32; deviation: single; extrusion: single; format: Int32; var lpgmf: GDI_GlyphmetricsFloat): UInt32;
    external 'opengl32.dll' name 'wglUseFontOutlinesW';
    public static z_UseFontOutlinesW_ovr1 := _z_UseFontOutlinesW_ovr1;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function UseFontOutlinesW(hDC: GDI_DC; first: UInt32; count: UInt32; listBase: UInt32; deviation: single; extrusion: single; format: Int32; var lpgmf: GDI_GlyphmetricsFloat): UInt32 := z_UseFontOutlinesW_ovr1(hDC, first, count, listBase, deviation, extrusion, format, lpgmf);
    private static function _z_UseFontOutlinesW_ovr2(hDC: GDI_DC; first: UInt32; count: UInt32; listBase: UInt32; deviation: single; extrusion: single; format: Int32; lpgmf: IntPtr): UInt32;
    external 'opengl32.dll' name 'wglUseFontOutlinesW';
    public static z_UseFontOutlinesW_ovr2 := _z_UseFontOutlinesW_ovr2;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function UseFontOutlinesW(hDC: GDI_DC; first: UInt32; count: UInt32; listBase: UInt32; deviation: single; extrusion: single; format: Int32; lpgmf: IntPtr): UInt32 := z_UseFontOutlinesW_ovr2(hDC, first, count, listBase, deviation, extrusion, format, lpgmf);
    
  end;
  
  gdi = static class
    
    private static function _z_ChoosePixelFormat_ovr0(hDc: GDI_DC; [MarshalAs(UnmanagedType.LPArray)] pPfd: array of GDI_PixelFormatDescriptor): Int32;
    external 'gdi32.dll' name 'ChoosePixelFormat';
    public static z_ChoosePixelFormat_ovr0 := _z_ChoosePixelFormat_ovr0;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function ChoosePixelFormat(hDc: GDI_DC; pPfd: array of GDI_PixelFormatDescriptor): Int32 := z_ChoosePixelFormat_ovr0(hDc, pPfd);
    private static function _z_ChoosePixelFormat_ovr1(hDc: GDI_DC; var pPfd: GDI_PixelFormatDescriptor): Int32;
    external 'gdi32.dll' name 'ChoosePixelFormat';
    public static z_ChoosePixelFormat_ovr1 := _z_ChoosePixelFormat_ovr1;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function ChoosePixelFormat(hDc: GDI_DC; var pPfd: GDI_PixelFormatDescriptor): Int32 := z_ChoosePixelFormat_ovr1(hDc, pPfd);
    private static function _z_ChoosePixelFormat_ovr2(hDc: GDI_DC; pPfd: IntPtr): Int32;
    external 'gdi32.dll' name 'ChoosePixelFormat';
    public static z_ChoosePixelFormat_ovr2 := _z_ChoosePixelFormat_ovr2;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function ChoosePixelFormat(hDc: GDI_DC; pPfd: IntPtr): Int32 := z_ChoosePixelFormat_ovr2(hDc, pPfd);
    
    private static function _z_DescribePixelFormat_ovr0(hdc: GDI_DC; ipfd: Int32; cjpfd: UInt32; [MarshalAs(UnmanagedType.LPArray)] ppfd: array of GDI_PixelFormatDescriptor): Int32;
    external 'gdi32.dll' name 'DescribePixelFormat';
    public static z_DescribePixelFormat_ovr0 := _z_DescribePixelFormat_ovr0;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function DescribePixelFormat(hdc: GDI_DC; ipfd: Int32; cjpfd: UInt32; ppfd: array of GDI_PixelFormatDescriptor): Int32 := z_DescribePixelFormat_ovr0(hdc, ipfd, cjpfd, ppfd);
    private static function _z_DescribePixelFormat_ovr1(hdc: GDI_DC; ipfd: Int32; cjpfd: UInt32; var ppfd: GDI_PixelFormatDescriptor): Int32;
    external 'gdi32.dll' name 'DescribePixelFormat';
    public static z_DescribePixelFormat_ovr1 := _z_DescribePixelFormat_ovr1;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function DescribePixelFormat(hdc: GDI_DC; ipfd: Int32; cjpfd: UInt32; var ppfd: GDI_PixelFormatDescriptor): Int32 := z_DescribePixelFormat_ovr1(hdc, ipfd, cjpfd, ppfd);
    private static function _z_DescribePixelFormat_ovr2(hdc: GDI_DC; ipfd: Int32; cjpfd: UInt32; ppfd: IntPtr): Int32;
    external 'gdi32.dll' name 'DescribePixelFormat';
    public static z_DescribePixelFormat_ovr2 := _z_DescribePixelFormat_ovr2;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function DescribePixelFormat(hdc: GDI_DC; ipfd: Int32; cjpfd: UInt32; ppfd: IntPtr): Int32 := z_DescribePixelFormat_ovr2(hdc, ipfd, cjpfd, ppfd);
    
    private static function _z_GetEnhMetaFilePixelFormat_ovr0(hemf: GDI_HENHMetafile; [MarshalAs(UnmanagedType.LPArray)] ppfd: array of GDI_PixelFormatDescriptor): UInt32;
    external 'gdi32.dll' name 'GetEnhMetaFilePixelFormat';
    public static z_GetEnhMetaFilePixelFormat_ovr0 := _z_GetEnhMetaFilePixelFormat_ovr0;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function GetEnhMetaFilePixelFormat(hemf: GDI_HENHMetafile; ppfd: array of GDI_PixelFormatDescriptor): UInt32 := z_GetEnhMetaFilePixelFormat_ovr0(hemf, ppfd);
    private static function _z_GetEnhMetaFilePixelFormat_ovr1(hemf: GDI_HENHMetafile; var ppfd: GDI_PixelFormatDescriptor): UInt32;
    external 'gdi32.dll' name 'GetEnhMetaFilePixelFormat';
    public static z_GetEnhMetaFilePixelFormat_ovr1 := _z_GetEnhMetaFilePixelFormat_ovr1;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function GetEnhMetaFilePixelFormat(hemf: GDI_HENHMetafile; var ppfd: GDI_PixelFormatDescriptor): UInt32 := z_GetEnhMetaFilePixelFormat_ovr1(hemf, ppfd);
    private static function _z_GetEnhMetaFilePixelFormat_ovr2(hemf: GDI_HENHMetafile; ppfd: IntPtr): UInt32;
    external 'gdi32.dll' name 'GetEnhMetaFilePixelFormat';
    public static z_GetEnhMetaFilePixelFormat_ovr2 := _z_GetEnhMetaFilePixelFormat_ovr2;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function GetEnhMetaFilePixelFormat(hemf: GDI_HENHMetafile; ppfd: IntPtr): UInt32 := z_GetEnhMetaFilePixelFormat_ovr2(hemf, ppfd);
    
    private static function _z_GetPixelFormat_ovr0(hdc: GDI_DC): Int32;
    external 'gdi32.dll' name 'GetPixelFormat';
    public static z_GetPixelFormat_ovr0 := _z_GetPixelFormat_ovr0;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function GetPixelFormat(hdc: GDI_DC): Int32 := z_GetPixelFormat_ovr0(hdc);
    
    private static function _z_SetPixelFormat_ovr0(hdc: GDI_DC; ipfd: Int32; [MarshalAs(UnmanagedType.LPArray)] ppfd: array of GDI_PixelFormatDescriptor): UInt32;
    external 'gdi32.dll' name 'SetPixelFormat';
    public static z_SetPixelFormat_ovr0 := _z_SetPixelFormat_ovr0;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function SetPixelFormat(hdc: GDI_DC; ipfd: Int32; ppfd: array of GDI_PixelFormatDescriptor): UInt32 := z_SetPixelFormat_ovr0(hdc, ipfd, ppfd);
    private static function _z_SetPixelFormat_ovr1(hdc: GDI_DC; ipfd: Int32; var ppfd: GDI_PixelFormatDescriptor): UInt32;
    external 'gdi32.dll' name 'SetPixelFormat';
    public static z_SetPixelFormat_ovr1 := _z_SetPixelFormat_ovr1;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function SetPixelFormat(hdc: GDI_DC; ipfd: Int32; var ppfd: GDI_PixelFormatDescriptor): UInt32 := z_SetPixelFormat_ovr1(hdc, ipfd, ppfd);
    private static function _z_SetPixelFormat_ovr2(hdc: GDI_DC; ipfd: Int32; ppfd: IntPtr): UInt32;
    external 'gdi32.dll' name 'SetPixelFormat';
    public static z_SetPixelFormat_ovr2 := _z_SetPixelFormat_ovr2;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function SetPixelFormat(hdc: GDI_DC; ipfd: Int32; ppfd: IntPtr): UInt32 := z_SetPixelFormat_ovr2(hdc, ipfd, ppfd);
    
    private static function _z_SwapBuffers_ovr0(hdc: GDI_DC): UInt32;
    external 'gdi32.dll' name 'SwapBuffers';
    public static z_SwapBuffers_ovr0 := _z_SwapBuffers_ovr0;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function SwapBuffers(hdc: GDI_DC): UInt32 := z_SwapBuffers_ovr0(hdc);
    
  end;
  
  {region Extensions}
  
  glTbuffer3DFX = sealed class
    public static function GetFuncAdr([MarshalAs(UnmanagedType.LPStr)] lpszProc: string): IntPtr;
    external 'opengl32.dll' name 'wglGetProcAddress';
    public static function GetFuncOrNil<T>(fadr: IntPtr) :=
    fadr=IntPtr.Zero ? default(T) :
    Marshal.GetDelegateForFunctionPointer&<T>(fadr);
    
    public z_TbufferMask3DFX_adr := GetFuncAdr('glTbufferMask3DFX');
    public z_TbufferMask3DFX_ovr_0 := GetFuncOrNil&<procedure(mask: UInt32)>(z_TbufferMask3DFX_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TbufferMask3DFX(mask: UInt32);
    begin
      z_TbufferMask3DFX_ovr_0(mask);
    end;
    
  end;
  
  glDebugOutputAMD = sealed class
    public static function GetFuncAdr([MarshalAs(UnmanagedType.LPStr)] lpszProc: string): IntPtr;
    external 'opengl32.dll' name 'wglGetProcAddress';
    public static function GetFuncOrNil<T>(fadr: IntPtr) :=
    fadr=IntPtr.Zero ? default(T) :
    Marshal.GetDelegateForFunctionPointer&<T>(fadr);
    
    public z_DebugMessageEnableAMD_adr := GetFuncAdr('glDebugMessageEnableAMD');
    public z_DebugMessageEnableAMD_ovr_0 := GetFuncOrNil&<procedure(category: DummyEnum; severity: DebugSeverity; count: Int32; var ids: UInt32; enabled: boolean)>(z_DebugMessageEnableAMD_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure DebugMessageEnableAMD(category: DummyEnum; severity: DebugSeverity; count: Int32; ids: array of UInt32; enabled: boolean);
    begin
      z_DebugMessageEnableAMD_ovr_0(category, severity, count, ids[0], enabled);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure DebugMessageEnableAMD(category: DummyEnum; severity: DebugSeverity; count: Int32; var ids: UInt32; enabled: boolean);
    begin
      z_DebugMessageEnableAMD_ovr_0(category, severity, count, ids, enabled);
    end;
    public z_DebugMessageEnableAMD_ovr_2 := GetFuncOrNil&<procedure(category: DummyEnum; severity: DebugSeverity; count: Int32; ids: IntPtr; enabled: boolean)>(z_DebugMessageEnableAMD_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure DebugMessageEnableAMD(category: DummyEnum; severity: DebugSeverity; count: Int32; ids: IntPtr; enabled: boolean);
    begin
      z_DebugMessageEnableAMD_ovr_2(category, severity, count, ids, enabled);
    end;
    
    public z_DebugMessageInsertAMD_adr := GetFuncAdr('glDebugMessageInsertAMD');
    public z_DebugMessageInsertAMD_ovr_0 := GetFuncOrNil&<procedure(category: DummyEnum; severity: DebugSeverity; id: UInt32; length: Int32; buf: IntPtr)>(z_DebugMessageInsertAMD_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure DebugMessageInsertAMD(category: DummyEnum; severity: DebugSeverity; id: UInt32; length: Int32; buf: string);
    begin
      var par_5_str_ptr := Marshal.StringToHGlobalAnsi(buf);
      z_DebugMessageInsertAMD_ovr_0(category, severity, id, length, par_5_str_ptr);
      Marshal.FreeHGlobal(par_5_str_ptr);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure DebugMessageInsertAMD(category: DummyEnum; severity: DebugSeverity; id: UInt32; length: Int32; buf: IntPtr);
    begin
      z_DebugMessageInsertAMD_ovr_0(category, severity, id, length, buf);
    end;
    
    public z_DebugMessageCallbackAMD_adr := GetFuncAdr('glDebugMessageCallbackAMD');
    public z_DebugMessageCallbackAMD_ovr_0 := GetFuncOrNil&<procedure(callback: GLDEBUGPROC; userParam: IntPtr)>(z_DebugMessageCallbackAMD_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure DebugMessageCallbackAMD(callback: GLDEBUGPROC; userParam: IntPtr);
    begin
      z_DebugMessageCallbackAMD_ovr_0(callback, userParam);
    end;
    
    public z_GetDebugMessageLogAMD_adr := GetFuncAdr('glGetDebugMessageLogAMD');
    public z_GetDebugMessageLogAMD_ovr_0 := GetFuncOrNil&<function(count: UInt32; bufSize: Int32; var categories: DummyEnum; var severities: UInt32; var ids: UInt32; var lengths: Int32; message: IntPtr): UInt32>(z_GetDebugMessageLogAMD_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetDebugMessageLogAMD(count: UInt32; bufSize: Int32; var categories: DummyEnum; var severities: UInt32; var ids: UInt32; var lengths: Int32; message: IntPtr): UInt32;
    begin
      Result := z_GetDebugMessageLogAMD_ovr_0(count, bufSize, categories, severities, ids, lengths, message);
    end;
    public z_GetDebugMessageLogAMD_ovr_1 := GetFuncOrNil&<function(count: UInt32; bufSize: Int32; categories: IntPtr; severities: IntPtr; ids: IntPtr; lengths: IntPtr; message: IntPtr): UInt32>(z_GetDebugMessageLogAMD_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetDebugMessageLogAMD(count: UInt32; bufSize: Int32; categories: IntPtr; severities: IntPtr; ids: IntPtr; lengths: IntPtr; message: IntPtr): UInt32;
    begin
      Result := z_GetDebugMessageLogAMD_ovr_1(count, bufSize, categories, severities, ids, lengths, message);
    end;
    
  end;
  
  glDrawBuffersBlendAMD = sealed class
    public static function GetFuncAdr([MarshalAs(UnmanagedType.LPStr)] lpszProc: string): IntPtr;
    external 'opengl32.dll' name 'wglGetProcAddress';
    public static function GetFuncOrNil<T>(fadr: IntPtr) :=
    fadr=IntPtr.Zero ? default(T) :
    Marshal.GetDelegateForFunctionPointer&<T>(fadr);
    
    public z_BlendFuncIndexedAMD_adr := GetFuncAdr('glBlendFuncIndexedAMD');
    public z_BlendFuncIndexedAMD_ovr_0 := GetFuncOrNil&<procedure(buf: UInt32; src: DummyEnum; dst: DummyEnum)>(z_BlendFuncIndexedAMD_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure BlendFuncIndexedAMD(buf: UInt32; src: DummyEnum; dst: DummyEnum);
    begin
      z_BlendFuncIndexedAMD_ovr_0(buf, src, dst);
    end;
    
    public z_BlendFuncSeparateIndexedAMD_adr := GetFuncAdr('glBlendFuncSeparateIndexedAMD');
    public z_BlendFuncSeparateIndexedAMD_ovr_0 := GetFuncOrNil&<procedure(buf: UInt32; srcRGB: BlendingFactor; dstRGB: BlendingFactor; srcAlpha: BlendingFactor; dstAlpha: BlendingFactor)>(z_BlendFuncSeparateIndexedAMD_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure BlendFuncSeparateIndexedAMD(buf: UInt32; srcRGB: BlendingFactor; dstRGB: BlendingFactor; srcAlpha: BlendingFactor; dstAlpha: BlendingFactor);
    begin
      z_BlendFuncSeparateIndexedAMD_ovr_0(buf, srcRGB, dstRGB, srcAlpha, dstAlpha);
    end;
    
    public z_BlendEquationIndexedAMD_adr := GetFuncAdr('glBlendEquationIndexedAMD');
    public z_BlendEquationIndexedAMD_ovr_0 := GetFuncOrNil&<procedure(buf: UInt32; mode: BlendEquationModeEXT)>(z_BlendEquationIndexedAMD_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure BlendEquationIndexedAMD(buf: UInt32; mode: BlendEquationModeEXT);
    begin
      z_BlendEquationIndexedAMD_ovr_0(buf, mode);
    end;
    
    public z_BlendEquationSeparateIndexedAMD_adr := GetFuncAdr('glBlendEquationSeparateIndexedAMD');
    public z_BlendEquationSeparateIndexedAMD_ovr_0 := GetFuncOrNil&<procedure(buf: UInt32; modeRGB: BlendEquationModeEXT; modeAlpha: BlendEquationModeEXT)>(z_BlendEquationSeparateIndexedAMD_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure BlendEquationSeparateIndexedAMD(buf: UInt32; modeRGB: BlendEquationModeEXT; modeAlpha: BlendEquationModeEXT);
    begin
      z_BlendEquationSeparateIndexedAMD_ovr_0(buf, modeRGB, modeAlpha);
    end;
    
  end;
  
  glFramebufferMultisampleAdvancedAMD = sealed class
    public static function GetFuncAdr([MarshalAs(UnmanagedType.LPStr)] lpszProc: string): IntPtr;
    external 'opengl32.dll' name 'wglGetProcAddress';
    public static function GetFuncOrNil<T>(fadr: IntPtr) :=
    fadr=IntPtr.Zero ? default(T) :
    Marshal.GetDelegateForFunctionPointer&<T>(fadr);
    
    public z_RenderbufferStorageMultisampleAdvancedAMD_adr := GetFuncAdr('glRenderbufferStorageMultisampleAdvancedAMD');
    public z_RenderbufferStorageMultisampleAdvancedAMD_ovr_0 := GetFuncOrNil&<procedure(target: RenderbufferTarget; samples: Int32; storageSamples: Int32; _internalformat: InternalFormat; width: Int32; height: Int32)>(z_RenderbufferStorageMultisampleAdvancedAMD_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure RenderbufferStorageMultisampleAdvancedAMD(target: RenderbufferTarget; samples: Int32; storageSamples: Int32; _internalformat: InternalFormat; width: Int32; height: Int32);
    begin
      z_RenderbufferStorageMultisampleAdvancedAMD_ovr_0(target, samples, storageSamples, _internalformat, width, height);
    end;
    
    public z_NamedRenderbufferStorageMultisampleAdvancedAMD_adr := GetFuncAdr('glNamedRenderbufferStorageMultisampleAdvancedAMD');
    public z_NamedRenderbufferStorageMultisampleAdvancedAMD_ovr_0 := GetFuncOrNil&<procedure(renderbuffer: UInt32; samples: Int32; storageSamples: Int32; _internalformat: InternalFormat; width: Int32; height: Int32)>(z_NamedRenderbufferStorageMultisampleAdvancedAMD_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure NamedRenderbufferStorageMultisampleAdvancedAMD(renderbuffer: UInt32; samples: Int32; storageSamples: Int32; _internalformat: InternalFormat; width: Int32; height: Int32);
    begin
      z_NamedRenderbufferStorageMultisampleAdvancedAMD_ovr_0(renderbuffer, samples, storageSamples, _internalformat, width, height);
    end;
    
  end;
  
  glFramebufferSamplePositionsAMD = sealed class
    public static function GetFuncAdr([MarshalAs(UnmanagedType.LPStr)] lpszProc: string): IntPtr;
    external 'opengl32.dll' name 'wglGetProcAddress';
    public static function GetFuncOrNil<T>(fadr: IntPtr) :=
    fadr=IntPtr.Zero ? default(T) :
    Marshal.GetDelegateForFunctionPointer&<T>(fadr);
    
    public z_FramebufferSamplePositionsfvAMD_adr := GetFuncAdr('glFramebufferSamplePositionsfvAMD');
    public z_FramebufferSamplePositionsfvAMD_ovr_0 := GetFuncOrNil&<procedure(target: FramebufferTarget; numsamples: UInt32; pixelindex: UInt32; var values: single)>(z_FramebufferSamplePositionsfvAMD_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure FramebufferSamplePositionsfvAMD(target: FramebufferTarget; numsamples: UInt32; pixelindex: UInt32; values: array of single);
    begin
      z_FramebufferSamplePositionsfvAMD_ovr_0(target, numsamples, pixelindex, values[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure FramebufferSamplePositionsfvAMD(target: FramebufferTarget; numsamples: UInt32; pixelindex: UInt32; var values: single);
    begin
      z_FramebufferSamplePositionsfvAMD_ovr_0(target, numsamples, pixelindex, values);
    end;
    public z_FramebufferSamplePositionsfvAMD_ovr_2 := GetFuncOrNil&<procedure(target: FramebufferTarget; numsamples: UInt32; pixelindex: UInt32; values: IntPtr)>(z_FramebufferSamplePositionsfvAMD_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure FramebufferSamplePositionsfvAMD(target: FramebufferTarget; numsamples: UInt32; pixelindex: UInt32; values: IntPtr);
    begin
      z_FramebufferSamplePositionsfvAMD_ovr_2(target, numsamples, pixelindex, values);
    end;
    
    public z_NamedFramebufferSamplePositionsfvAMD_adr := GetFuncAdr('glNamedFramebufferSamplePositionsfvAMD');
    public z_NamedFramebufferSamplePositionsfvAMD_ovr_0 := GetFuncOrNil&<procedure(framebuffer: UInt32; numsamples: UInt32; pixelindex: UInt32; var values: single)>(z_NamedFramebufferSamplePositionsfvAMD_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure NamedFramebufferSamplePositionsfvAMD(framebuffer: UInt32; numsamples: UInt32; pixelindex: UInt32; values: array of single);
    begin
      z_NamedFramebufferSamplePositionsfvAMD_ovr_0(framebuffer, numsamples, pixelindex, values[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure NamedFramebufferSamplePositionsfvAMD(framebuffer: UInt32; numsamples: UInt32; pixelindex: UInt32; var values: single);
    begin
      z_NamedFramebufferSamplePositionsfvAMD_ovr_0(framebuffer, numsamples, pixelindex, values);
    end;
    public z_NamedFramebufferSamplePositionsfvAMD_ovr_2 := GetFuncOrNil&<procedure(framebuffer: UInt32; numsamples: UInt32; pixelindex: UInt32; values: IntPtr)>(z_NamedFramebufferSamplePositionsfvAMD_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure NamedFramebufferSamplePositionsfvAMD(framebuffer: UInt32; numsamples: UInt32; pixelindex: UInt32; values: IntPtr);
    begin
      z_NamedFramebufferSamplePositionsfvAMD_ovr_2(framebuffer, numsamples, pixelindex, values);
    end;
    
    public z_GetFramebufferParameterfvAMD_adr := GetFuncAdr('glGetFramebufferParameterfvAMD');
    public z_GetFramebufferParameterfvAMD_ovr_0 := GetFuncOrNil&<procedure(target: FramebufferTarget; pname: FramebufferAttachmentParameterName; numsamples: UInt32; pixelindex: UInt32; size: Int32; var values: single)>(z_GetFramebufferParameterfvAMD_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetFramebufferParameterfvAMD(target: FramebufferTarget; pname: FramebufferAttachmentParameterName; numsamples: UInt32; pixelindex: UInt32; size: Int32; values: array of single);
    begin
      z_GetFramebufferParameterfvAMD_ovr_0(target, pname, numsamples, pixelindex, size, values[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetFramebufferParameterfvAMD(target: FramebufferTarget; pname: FramebufferAttachmentParameterName; numsamples: UInt32; pixelindex: UInt32; size: Int32; var values: single);
    begin
      z_GetFramebufferParameterfvAMD_ovr_0(target, pname, numsamples, pixelindex, size, values);
    end;
    public z_GetFramebufferParameterfvAMD_ovr_2 := GetFuncOrNil&<procedure(target: FramebufferTarget; pname: FramebufferAttachmentParameterName; numsamples: UInt32; pixelindex: UInt32; size: Int32; values: IntPtr)>(z_GetFramebufferParameterfvAMD_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetFramebufferParameterfvAMD(target: FramebufferTarget; pname: FramebufferAttachmentParameterName; numsamples: UInt32; pixelindex: UInt32; size: Int32; values: IntPtr);
    begin
      z_GetFramebufferParameterfvAMD_ovr_2(target, pname, numsamples, pixelindex, size, values);
    end;
    
    public z_GetNamedFramebufferParameterfvAMD_adr := GetFuncAdr('glGetNamedFramebufferParameterfvAMD');
    public z_GetNamedFramebufferParameterfvAMD_ovr_0 := GetFuncOrNil&<procedure(framebuffer: UInt32; pname: DummyEnum; numsamples: UInt32; pixelindex: UInt32; size: Int32; var values: single)>(z_GetNamedFramebufferParameterfvAMD_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetNamedFramebufferParameterfvAMD(framebuffer: UInt32; pname: DummyEnum; numsamples: UInt32; pixelindex: UInt32; size: Int32; values: array of single);
    begin
      z_GetNamedFramebufferParameterfvAMD_ovr_0(framebuffer, pname, numsamples, pixelindex, size, values[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetNamedFramebufferParameterfvAMD(framebuffer: UInt32; pname: DummyEnum; numsamples: UInt32; pixelindex: UInt32; size: Int32; var values: single);
    begin
      z_GetNamedFramebufferParameterfvAMD_ovr_0(framebuffer, pname, numsamples, pixelindex, size, values);
    end;
    public z_GetNamedFramebufferParameterfvAMD_ovr_2 := GetFuncOrNil&<procedure(framebuffer: UInt32; pname: DummyEnum; numsamples: UInt32; pixelindex: UInt32; size: Int32; values: IntPtr)>(z_GetNamedFramebufferParameterfvAMD_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetNamedFramebufferParameterfvAMD(framebuffer: UInt32; pname: DummyEnum; numsamples: UInt32; pixelindex: UInt32; size: Int32; values: IntPtr);
    begin
      z_GetNamedFramebufferParameterfvAMD_ovr_2(framebuffer, pname, numsamples, pixelindex, size, values);
    end;
    
  end;
  
  glGpuShaderInt64AMD = sealed class
    public static function GetFuncAdr([MarshalAs(UnmanagedType.LPStr)] lpszProc: string): IntPtr;
    external 'opengl32.dll' name 'wglGetProcAddress';
    public static function GetFuncOrNil<T>(fadr: IntPtr) :=
    fadr=IntPtr.Zero ? default(T) :
    Marshal.GetDelegateForFunctionPointer&<T>(fadr);
    
    public z_Uniform1i64NV_adr := GetFuncAdr('glUniform1i64NV');
    public z_Uniform1i64NV_ovr_0 := GetFuncOrNil&<procedure(location: Int32; x: Int64)>(z_Uniform1i64NV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Uniform1i64NV(location: Int32; x: Int64);
    begin
      z_Uniform1i64NV_ovr_0(location, x);
    end;
    
    public z_Uniform2i64NV_adr := GetFuncAdr('glUniform2i64NV');
    public z_Uniform2i64NV_ovr_0 := GetFuncOrNil&<procedure(location: Int32; x: Int64; y: Int64)>(z_Uniform2i64NV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Uniform2i64NV(location: Int32; x: Int64; y: Int64);
    begin
      z_Uniform2i64NV_ovr_0(location, x, y);
    end;
    
    public z_Uniform3i64NV_adr := GetFuncAdr('glUniform3i64NV');
    public z_Uniform3i64NV_ovr_0 := GetFuncOrNil&<procedure(location: Int32; x: Int64; y: Int64; z: Int64)>(z_Uniform3i64NV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Uniform3i64NV(location: Int32; x: Int64; y: Int64; z: Int64);
    begin
      z_Uniform3i64NV_ovr_0(location, x, y, z);
    end;
    
    public z_Uniform4i64NV_adr := GetFuncAdr('glUniform4i64NV');
    public z_Uniform4i64NV_ovr_0 := GetFuncOrNil&<procedure(location: Int32; x: Int64; y: Int64; z: Int64; w: Int64)>(z_Uniform4i64NV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Uniform4i64NV(location: Int32; x: Int64; y: Int64; z: Int64; w: Int64);
    begin
      z_Uniform4i64NV_ovr_0(location, x, y, z, w);
    end;
    
    public z_Uniform1i64vNV_adr := GetFuncAdr('glUniform1i64vNV');
    public z_Uniform1i64vNV_ovr_0 := GetFuncOrNil&<procedure(location: Int32; count: Int32; var value: Int64)>(z_Uniform1i64vNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Uniform1i64vNV(location: Int32; count: Int32; value: array of Int64);
    begin
      z_Uniform1i64vNV_ovr_0(location, count, value[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Uniform1i64vNV(location: Int32; count: Int32; var value: Int64);
    begin
      z_Uniform1i64vNV_ovr_0(location, count, value);
    end;
    public z_Uniform1i64vNV_ovr_2 := GetFuncOrNil&<procedure(location: Int32; count: Int32; value: IntPtr)>(z_Uniform1i64vNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Uniform1i64vNV(location: Int32; count: Int32; value: IntPtr);
    begin
      z_Uniform1i64vNV_ovr_2(location, count, value);
    end;
    
    public z_Uniform2i64vNV_adr := GetFuncAdr('glUniform2i64vNV');
    public z_Uniform2i64vNV_ovr_0 := GetFuncOrNil&<procedure(location: Int32; count: Int32; var value: Int64)>(z_Uniform2i64vNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Uniform2i64vNV(location: Int32; count: Int32; value: array of Int64);
    begin
      z_Uniform2i64vNV_ovr_0(location, count, value[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Uniform2i64vNV(location: Int32; count: Int32; var value: Int64);
    begin
      z_Uniform2i64vNV_ovr_0(location, count, value);
    end;
    public z_Uniform2i64vNV_ovr_2 := GetFuncOrNil&<procedure(location: Int32; count: Int32; value: IntPtr)>(z_Uniform2i64vNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Uniform2i64vNV(location: Int32; count: Int32; value: IntPtr);
    begin
      z_Uniform2i64vNV_ovr_2(location, count, value);
    end;
    
    public z_Uniform3i64vNV_adr := GetFuncAdr('glUniform3i64vNV');
    public z_Uniform3i64vNV_ovr_0 := GetFuncOrNil&<procedure(location: Int32; count: Int32; var value: Int64)>(z_Uniform3i64vNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Uniform3i64vNV(location: Int32; count: Int32; value: array of Int64);
    begin
      z_Uniform3i64vNV_ovr_0(location, count, value[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Uniform3i64vNV(location: Int32; count: Int32; var value: Int64);
    begin
      z_Uniform3i64vNV_ovr_0(location, count, value);
    end;
    public z_Uniform3i64vNV_ovr_2 := GetFuncOrNil&<procedure(location: Int32; count: Int32; value: IntPtr)>(z_Uniform3i64vNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Uniform3i64vNV(location: Int32; count: Int32; value: IntPtr);
    begin
      z_Uniform3i64vNV_ovr_2(location, count, value);
    end;
    
    public z_Uniform4i64vNV_adr := GetFuncAdr('glUniform4i64vNV');
    public z_Uniform4i64vNV_ovr_0 := GetFuncOrNil&<procedure(location: Int32; count: Int32; var value: Int64)>(z_Uniform4i64vNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Uniform4i64vNV(location: Int32; count: Int32; value: array of Int64);
    begin
      z_Uniform4i64vNV_ovr_0(location, count, value[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Uniform4i64vNV(location: Int32; count: Int32; var value: Int64);
    begin
      z_Uniform4i64vNV_ovr_0(location, count, value);
    end;
    public z_Uniform4i64vNV_ovr_2 := GetFuncOrNil&<procedure(location: Int32; count: Int32; value: IntPtr)>(z_Uniform4i64vNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Uniform4i64vNV(location: Int32; count: Int32; value: IntPtr);
    begin
      z_Uniform4i64vNV_ovr_2(location, count, value);
    end;
    
    public z_Uniform1ui64NV_adr := GetFuncAdr('glUniform1ui64NV');
    public z_Uniform1ui64NV_ovr_0 := GetFuncOrNil&<procedure(location: Int32; x: UInt64)>(z_Uniform1ui64NV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Uniform1ui64NV(location: Int32; x: UInt64);
    begin
      z_Uniform1ui64NV_ovr_0(location, x);
    end;
    
    public z_Uniform2ui64NV_adr := GetFuncAdr('glUniform2ui64NV');
    public z_Uniform2ui64NV_ovr_0 := GetFuncOrNil&<procedure(location: Int32; x: UInt64; y: UInt64)>(z_Uniform2ui64NV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Uniform2ui64NV(location: Int32; x: UInt64; y: UInt64);
    begin
      z_Uniform2ui64NV_ovr_0(location, x, y);
    end;
    
    public z_Uniform3ui64NV_adr := GetFuncAdr('glUniform3ui64NV');
    public z_Uniform3ui64NV_ovr_0 := GetFuncOrNil&<procedure(location: Int32; x: UInt64; y: UInt64; z: UInt64)>(z_Uniform3ui64NV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Uniform3ui64NV(location: Int32; x: UInt64; y: UInt64; z: UInt64);
    begin
      z_Uniform3ui64NV_ovr_0(location, x, y, z);
    end;
    
    public z_Uniform4ui64NV_adr := GetFuncAdr('glUniform4ui64NV');
    public z_Uniform4ui64NV_ovr_0 := GetFuncOrNil&<procedure(location: Int32; x: UInt64; y: UInt64; z: UInt64; w: UInt64)>(z_Uniform4ui64NV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Uniform4ui64NV(location: Int32; x: UInt64; y: UInt64; z: UInt64; w: UInt64);
    begin
      z_Uniform4ui64NV_ovr_0(location, x, y, z, w);
    end;
    
    public z_Uniform1ui64vNV_adr := GetFuncAdr('glUniform1ui64vNV');
    public z_Uniform1ui64vNV_ovr_0 := GetFuncOrNil&<procedure(location: Int32; count: Int32; var value: UInt64)>(z_Uniform1ui64vNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Uniform1ui64vNV(location: Int32; count: Int32; value: array of UInt64);
    begin
      z_Uniform1ui64vNV_ovr_0(location, count, value[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Uniform1ui64vNV(location: Int32; count: Int32; var value: UInt64);
    begin
      z_Uniform1ui64vNV_ovr_0(location, count, value);
    end;
    public z_Uniform1ui64vNV_ovr_2 := GetFuncOrNil&<procedure(location: Int32; count: Int32; value: IntPtr)>(z_Uniform1ui64vNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Uniform1ui64vNV(location: Int32; count: Int32; value: IntPtr);
    begin
      z_Uniform1ui64vNV_ovr_2(location, count, value);
    end;
    
    public z_Uniform2ui64vNV_adr := GetFuncAdr('glUniform2ui64vNV');
    public z_Uniform2ui64vNV_ovr_0 := GetFuncOrNil&<procedure(location: Int32; count: Int32; var value: UInt64)>(z_Uniform2ui64vNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Uniform2ui64vNV(location: Int32; count: Int32; value: array of UInt64);
    begin
      z_Uniform2ui64vNV_ovr_0(location, count, value[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Uniform2ui64vNV(location: Int32; count: Int32; var value: UInt64);
    begin
      z_Uniform2ui64vNV_ovr_0(location, count, value);
    end;
    public z_Uniform2ui64vNV_ovr_2 := GetFuncOrNil&<procedure(location: Int32; count: Int32; value: IntPtr)>(z_Uniform2ui64vNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Uniform2ui64vNV(location: Int32; count: Int32; value: IntPtr);
    begin
      z_Uniform2ui64vNV_ovr_2(location, count, value);
    end;
    
    public z_Uniform3ui64vNV_adr := GetFuncAdr('glUniform3ui64vNV');
    public z_Uniform3ui64vNV_ovr_0 := GetFuncOrNil&<procedure(location: Int32; count: Int32; var value: UInt64)>(z_Uniform3ui64vNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Uniform3ui64vNV(location: Int32; count: Int32; value: array of UInt64);
    begin
      z_Uniform3ui64vNV_ovr_0(location, count, value[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Uniform3ui64vNV(location: Int32; count: Int32; var value: UInt64);
    begin
      z_Uniform3ui64vNV_ovr_0(location, count, value);
    end;
    public z_Uniform3ui64vNV_ovr_2 := GetFuncOrNil&<procedure(location: Int32; count: Int32; value: IntPtr)>(z_Uniform3ui64vNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Uniform3ui64vNV(location: Int32; count: Int32; value: IntPtr);
    begin
      z_Uniform3ui64vNV_ovr_2(location, count, value);
    end;
    
    public z_Uniform4ui64vNV_adr := GetFuncAdr('glUniform4ui64vNV');
    public z_Uniform4ui64vNV_ovr_0 := GetFuncOrNil&<procedure(location: Int32; count: Int32; var value: UInt64)>(z_Uniform4ui64vNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Uniform4ui64vNV(location: Int32; count: Int32; value: array of UInt64);
    begin
      z_Uniform4ui64vNV_ovr_0(location, count, value[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Uniform4ui64vNV(location: Int32; count: Int32; var value: UInt64);
    begin
      z_Uniform4ui64vNV_ovr_0(location, count, value);
    end;
    public z_Uniform4ui64vNV_ovr_2 := GetFuncOrNil&<procedure(location: Int32; count: Int32; value: IntPtr)>(z_Uniform4ui64vNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Uniform4ui64vNV(location: Int32; count: Int32; value: IntPtr);
    begin
      z_Uniform4ui64vNV_ovr_2(location, count, value);
    end;
    
    public z_GetUniformi64vNV_adr := GetFuncAdr('glGetUniformi64vNV');
    public z_GetUniformi64vNV_ovr_0 := GetFuncOrNil&<procedure(&program: UInt32; location: Int32; var &params: Int64)>(z_GetUniformi64vNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetUniformi64vNV(&program: UInt32; location: Int32; &params: array of Int64);
    begin
      z_GetUniformi64vNV_ovr_0(&program, location, &params[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetUniformi64vNV(&program: UInt32; location: Int32; var &params: Int64);
    begin
      z_GetUniformi64vNV_ovr_0(&program, location, &params);
    end;
    public z_GetUniformi64vNV_ovr_2 := GetFuncOrNil&<procedure(&program: UInt32; location: Int32; &params: IntPtr)>(z_GetUniformi64vNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetUniformi64vNV(&program: UInt32; location: Int32; &params: IntPtr);
    begin
      z_GetUniformi64vNV_ovr_2(&program, location, &params);
    end;
    
    public z_GetUniformui64vNV_adr := GetFuncAdr('glGetUniformui64vNV');
    public z_GetUniformui64vNV_ovr_0 := GetFuncOrNil&<procedure(&program: UInt32; location: Int32; var &params: UInt64)>(z_GetUniformui64vNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetUniformui64vNV(&program: UInt32; location: Int32; &params: array of UInt64);
    begin
      z_GetUniformui64vNV_ovr_0(&program, location, &params[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetUniformui64vNV(&program: UInt32; location: Int32; var &params: UInt64);
    begin
      z_GetUniformui64vNV_ovr_0(&program, location, &params);
    end;
    public z_GetUniformui64vNV_ovr_2 := GetFuncOrNil&<procedure(&program: UInt32; location: Int32; &params: IntPtr)>(z_GetUniformui64vNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetUniformui64vNV(&program: UInt32; location: Int32; &params: IntPtr);
    begin
      z_GetUniformui64vNV_ovr_2(&program, location, &params);
    end;
    
    public z_ProgramUniform1i64NV_adr := GetFuncAdr('glProgramUniform1i64NV');
    public z_ProgramUniform1i64NV_ovr_0 := GetFuncOrNil&<procedure(&program: UInt32; location: Int32; x: Int64)>(z_ProgramUniform1i64NV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniform1i64NV(&program: UInt32; location: Int32; x: Int64);
    begin
      z_ProgramUniform1i64NV_ovr_0(&program, location, x);
    end;
    
    public z_ProgramUniform2i64NV_adr := GetFuncAdr('glProgramUniform2i64NV');
    public z_ProgramUniform2i64NV_ovr_0 := GetFuncOrNil&<procedure(&program: UInt32; location: Int32; x: Int64; y: Int64)>(z_ProgramUniform2i64NV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniform2i64NV(&program: UInt32; location: Int32; x: Int64; y: Int64);
    begin
      z_ProgramUniform2i64NV_ovr_0(&program, location, x, y);
    end;
    
    public z_ProgramUniform3i64NV_adr := GetFuncAdr('glProgramUniform3i64NV');
    public z_ProgramUniform3i64NV_ovr_0 := GetFuncOrNil&<procedure(&program: UInt32; location: Int32; x: Int64; y: Int64; z: Int64)>(z_ProgramUniform3i64NV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniform3i64NV(&program: UInt32; location: Int32; x: Int64; y: Int64; z: Int64);
    begin
      z_ProgramUniform3i64NV_ovr_0(&program, location, x, y, z);
    end;
    
    public z_ProgramUniform4i64NV_adr := GetFuncAdr('glProgramUniform4i64NV');
    public z_ProgramUniform4i64NV_ovr_0 := GetFuncOrNil&<procedure(&program: UInt32; location: Int32; x: Int64; y: Int64; z: Int64; w: Int64)>(z_ProgramUniform4i64NV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniform4i64NV(&program: UInt32; location: Int32; x: Int64; y: Int64; z: Int64; w: Int64);
    begin
      z_ProgramUniform4i64NV_ovr_0(&program, location, x, y, z, w);
    end;
    
    public z_ProgramUniform1i64vNV_adr := GetFuncAdr('glProgramUniform1i64vNV');
    public z_ProgramUniform1i64vNV_ovr_0 := GetFuncOrNil&<procedure(&program: UInt32; location: Int32; count: Int32; var value: Int64)>(z_ProgramUniform1i64vNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniform1i64vNV(&program: UInt32; location: Int32; count: Int32; value: array of Int64);
    begin
      z_ProgramUniform1i64vNV_ovr_0(&program, location, count, value[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniform1i64vNV(&program: UInt32; location: Int32; count: Int32; var value: Int64);
    begin
      z_ProgramUniform1i64vNV_ovr_0(&program, location, count, value);
    end;
    public z_ProgramUniform1i64vNV_ovr_2 := GetFuncOrNil&<procedure(&program: UInt32; location: Int32; count: Int32; value: IntPtr)>(z_ProgramUniform1i64vNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniform1i64vNV(&program: UInt32; location: Int32; count: Int32; value: IntPtr);
    begin
      z_ProgramUniform1i64vNV_ovr_2(&program, location, count, value);
    end;
    
    public z_ProgramUniform2i64vNV_adr := GetFuncAdr('glProgramUniform2i64vNV');
    public z_ProgramUniform2i64vNV_ovr_0 := GetFuncOrNil&<procedure(&program: UInt32; location: Int32; count: Int32; var value: Int64)>(z_ProgramUniform2i64vNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniform2i64vNV(&program: UInt32; location: Int32; count: Int32; value: array of Int64);
    begin
      z_ProgramUniform2i64vNV_ovr_0(&program, location, count, value[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniform2i64vNV(&program: UInt32; location: Int32; count: Int32; var value: Int64);
    begin
      z_ProgramUniform2i64vNV_ovr_0(&program, location, count, value);
    end;
    public z_ProgramUniform2i64vNV_ovr_2 := GetFuncOrNil&<procedure(&program: UInt32; location: Int32; count: Int32; value: IntPtr)>(z_ProgramUniform2i64vNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniform2i64vNV(&program: UInt32; location: Int32; count: Int32; value: IntPtr);
    begin
      z_ProgramUniform2i64vNV_ovr_2(&program, location, count, value);
    end;
    
    public z_ProgramUniform3i64vNV_adr := GetFuncAdr('glProgramUniform3i64vNV');
    public z_ProgramUniform3i64vNV_ovr_0 := GetFuncOrNil&<procedure(&program: UInt32; location: Int32; count: Int32; var value: Int64)>(z_ProgramUniform3i64vNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniform3i64vNV(&program: UInt32; location: Int32; count: Int32; value: array of Int64);
    begin
      z_ProgramUniform3i64vNV_ovr_0(&program, location, count, value[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniform3i64vNV(&program: UInt32; location: Int32; count: Int32; var value: Int64);
    begin
      z_ProgramUniform3i64vNV_ovr_0(&program, location, count, value);
    end;
    public z_ProgramUniform3i64vNV_ovr_2 := GetFuncOrNil&<procedure(&program: UInt32; location: Int32; count: Int32; value: IntPtr)>(z_ProgramUniform3i64vNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniform3i64vNV(&program: UInt32; location: Int32; count: Int32; value: IntPtr);
    begin
      z_ProgramUniform3i64vNV_ovr_2(&program, location, count, value);
    end;
    
    public z_ProgramUniform4i64vNV_adr := GetFuncAdr('glProgramUniform4i64vNV');
    public z_ProgramUniform4i64vNV_ovr_0 := GetFuncOrNil&<procedure(&program: UInt32; location: Int32; count: Int32; var value: Int64)>(z_ProgramUniform4i64vNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniform4i64vNV(&program: UInt32; location: Int32; count: Int32; value: array of Int64);
    begin
      z_ProgramUniform4i64vNV_ovr_0(&program, location, count, value[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniform4i64vNV(&program: UInt32; location: Int32; count: Int32; var value: Int64);
    begin
      z_ProgramUniform4i64vNV_ovr_0(&program, location, count, value);
    end;
    public z_ProgramUniform4i64vNV_ovr_2 := GetFuncOrNil&<procedure(&program: UInt32; location: Int32; count: Int32; value: IntPtr)>(z_ProgramUniform4i64vNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniform4i64vNV(&program: UInt32; location: Int32; count: Int32; value: IntPtr);
    begin
      z_ProgramUniform4i64vNV_ovr_2(&program, location, count, value);
    end;
    
    public z_ProgramUniform1ui64NV_adr := GetFuncAdr('glProgramUniform1ui64NV');
    public z_ProgramUniform1ui64NV_ovr_0 := GetFuncOrNil&<procedure(&program: UInt32; location: Int32; x: UInt64)>(z_ProgramUniform1ui64NV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniform1ui64NV(&program: UInt32; location: Int32; x: UInt64);
    begin
      z_ProgramUniform1ui64NV_ovr_0(&program, location, x);
    end;
    
    public z_ProgramUniform2ui64NV_adr := GetFuncAdr('glProgramUniform2ui64NV');
    public z_ProgramUniform2ui64NV_ovr_0 := GetFuncOrNil&<procedure(&program: UInt32; location: Int32; x: UInt64; y: UInt64)>(z_ProgramUniform2ui64NV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniform2ui64NV(&program: UInt32; location: Int32; x: UInt64; y: UInt64);
    begin
      z_ProgramUniform2ui64NV_ovr_0(&program, location, x, y);
    end;
    
    public z_ProgramUniform3ui64NV_adr := GetFuncAdr('glProgramUniform3ui64NV');
    public z_ProgramUniform3ui64NV_ovr_0 := GetFuncOrNil&<procedure(&program: UInt32; location: Int32; x: UInt64; y: UInt64; z: UInt64)>(z_ProgramUniform3ui64NV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniform3ui64NV(&program: UInt32; location: Int32; x: UInt64; y: UInt64; z: UInt64);
    begin
      z_ProgramUniform3ui64NV_ovr_0(&program, location, x, y, z);
    end;
    
    public z_ProgramUniform4ui64NV_adr := GetFuncAdr('glProgramUniform4ui64NV');
    public z_ProgramUniform4ui64NV_ovr_0 := GetFuncOrNil&<procedure(&program: UInt32; location: Int32; x: UInt64; y: UInt64; z: UInt64; w: UInt64)>(z_ProgramUniform4ui64NV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniform4ui64NV(&program: UInt32; location: Int32; x: UInt64; y: UInt64; z: UInt64; w: UInt64);
    begin
      z_ProgramUniform4ui64NV_ovr_0(&program, location, x, y, z, w);
    end;
    
    public z_ProgramUniform1ui64vNV_adr := GetFuncAdr('glProgramUniform1ui64vNV');
    public z_ProgramUniform1ui64vNV_ovr_0 := GetFuncOrNil&<procedure(&program: UInt32; location: Int32; count: Int32; var value: UInt64)>(z_ProgramUniform1ui64vNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniform1ui64vNV(&program: UInt32; location: Int32; count: Int32; value: array of UInt64);
    begin
      z_ProgramUniform1ui64vNV_ovr_0(&program, location, count, value[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniform1ui64vNV(&program: UInt32; location: Int32; count: Int32; var value: UInt64);
    begin
      z_ProgramUniform1ui64vNV_ovr_0(&program, location, count, value);
    end;
    public z_ProgramUniform1ui64vNV_ovr_2 := GetFuncOrNil&<procedure(&program: UInt32; location: Int32; count: Int32; value: IntPtr)>(z_ProgramUniform1ui64vNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniform1ui64vNV(&program: UInt32; location: Int32; count: Int32; value: IntPtr);
    begin
      z_ProgramUniform1ui64vNV_ovr_2(&program, location, count, value);
    end;
    
    public z_ProgramUniform2ui64vNV_adr := GetFuncAdr('glProgramUniform2ui64vNV');
    public z_ProgramUniform2ui64vNV_ovr_0 := GetFuncOrNil&<procedure(&program: UInt32; location: Int32; count: Int32; var value: UInt64)>(z_ProgramUniform2ui64vNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniform2ui64vNV(&program: UInt32; location: Int32; count: Int32; value: array of UInt64);
    begin
      z_ProgramUniform2ui64vNV_ovr_0(&program, location, count, value[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniform2ui64vNV(&program: UInt32; location: Int32; count: Int32; var value: UInt64);
    begin
      z_ProgramUniform2ui64vNV_ovr_0(&program, location, count, value);
    end;
    public z_ProgramUniform2ui64vNV_ovr_2 := GetFuncOrNil&<procedure(&program: UInt32; location: Int32; count: Int32; value: IntPtr)>(z_ProgramUniform2ui64vNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniform2ui64vNV(&program: UInt32; location: Int32; count: Int32; value: IntPtr);
    begin
      z_ProgramUniform2ui64vNV_ovr_2(&program, location, count, value);
    end;
    
    public z_ProgramUniform3ui64vNV_adr := GetFuncAdr('glProgramUniform3ui64vNV');
    public z_ProgramUniform3ui64vNV_ovr_0 := GetFuncOrNil&<procedure(&program: UInt32; location: Int32; count: Int32; var value: UInt64)>(z_ProgramUniform3ui64vNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniform3ui64vNV(&program: UInt32; location: Int32; count: Int32; value: array of UInt64);
    begin
      z_ProgramUniform3ui64vNV_ovr_0(&program, location, count, value[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniform3ui64vNV(&program: UInt32; location: Int32; count: Int32; var value: UInt64);
    begin
      z_ProgramUniform3ui64vNV_ovr_0(&program, location, count, value);
    end;
    public z_ProgramUniform3ui64vNV_ovr_2 := GetFuncOrNil&<procedure(&program: UInt32; location: Int32; count: Int32; value: IntPtr)>(z_ProgramUniform3ui64vNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniform3ui64vNV(&program: UInt32; location: Int32; count: Int32; value: IntPtr);
    begin
      z_ProgramUniform3ui64vNV_ovr_2(&program, location, count, value);
    end;
    
    public z_ProgramUniform4ui64vNV_adr := GetFuncAdr('glProgramUniform4ui64vNV');
    public z_ProgramUniform4ui64vNV_ovr_0 := GetFuncOrNil&<procedure(&program: UInt32; location: Int32; count: Int32; var value: UInt64)>(z_ProgramUniform4ui64vNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniform4ui64vNV(&program: UInt32; location: Int32; count: Int32; value: array of UInt64);
    begin
      z_ProgramUniform4ui64vNV_ovr_0(&program, location, count, value[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniform4ui64vNV(&program: UInt32; location: Int32; count: Int32; var value: UInt64);
    begin
      z_ProgramUniform4ui64vNV_ovr_0(&program, location, count, value);
    end;
    public z_ProgramUniform4ui64vNV_ovr_2 := GetFuncOrNil&<procedure(&program: UInt32; location: Int32; count: Int32; value: IntPtr)>(z_ProgramUniform4ui64vNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniform4ui64vNV(&program: UInt32; location: Int32; count: Int32; value: IntPtr);
    begin
      z_ProgramUniform4ui64vNV_ovr_2(&program, location, count, value);
    end;
    
  end;
  
  glInterleavedElementsAMD = sealed class
    public static function GetFuncAdr([MarshalAs(UnmanagedType.LPStr)] lpszProc: string): IntPtr;
    external 'opengl32.dll' name 'wglGetProcAddress';
    public static function GetFuncOrNil<T>(fadr: IntPtr) :=
    fadr=IntPtr.Zero ? default(T) :
    Marshal.GetDelegateForFunctionPointer&<T>(fadr);
    
    public z_VertexAttribParameteriAMD_adr := GetFuncAdr('glVertexAttribParameteriAMD');
    public z_VertexAttribParameteriAMD_ovr_0 := GetFuncOrNil&<procedure(index: UInt32; pname: DummyEnum; param: Int32)>(z_VertexAttribParameteriAMD_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttribParameteriAMD(index: UInt32; pname: DummyEnum; param: Int32);
    begin
      z_VertexAttribParameteriAMD_ovr_0(index, pname, param);
    end;
    
  end;
  
  glMultiDrawIndirectAMD = sealed class
    public static function GetFuncAdr([MarshalAs(UnmanagedType.LPStr)] lpszProc: string): IntPtr;
    external 'opengl32.dll' name 'wglGetProcAddress';
    public static function GetFuncOrNil<T>(fadr: IntPtr) :=
    fadr=IntPtr.Zero ? default(T) :
    Marshal.GetDelegateForFunctionPointer&<T>(fadr);
    
    public z_MultiDrawArraysIndirectAMD_adr := GetFuncAdr('glMultiDrawArraysIndirectAMD');
    public z_MultiDrawArraysIndirectAMD_ovr_0 := GetFuncOrNil&<procedure(mode: PrimitiveType; indirect: IntPtr; primcount: Int32; stride: Int32)>(z_MultiDrawArraysIndirectAMD_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiDrawArraysIndirectAMD(mode: PrimitiveType; indirect: IntPtr; primcount: Int32; stride: Int32);
    begin
      z_MultiDrawArraysIndirectAMD_ovr_0(mode, indirect, primcount, stride);
    end;
    
    public z_MultiDrawElementsIndirectAMD_adr := GetFuncAdr('glMultiDrawElementsIndirectAMD');
    public z_MultiDrawElementsIndirectAMD_ovr_0 := GetFuncOrNil&<procedure(mode: PrimitiveType; &type: DrawElementsType; indirect: IntPtr; primcount: Int32; stride: Int32)>(z_MultiDrawElementsIndirectAMD_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiDrawElementsIndirectAMD(mode: PrimitiveType; &type: DrawElementsType; indirect: IntPtr; primcount: Int32; stride: Int32);
    begin
      z_MultiDrawElementsIndirectAMD_ovr_0(mode, &type, indirect, primcount, stride);
    end;
    
  end;
  
  glNameGenDeleteAMD = sealed class
    public static function GetFuncAdr([MarshalAs(UnmanagedType.LPStr)] lpszProc: string): IntPtr;
    external 'opengl32.dll' name 'wglGetProcAddress';
    public static function GetFuncOrNil<T>(fadr: IntPtr) :=
    fadr=IntPtr.Zero ? default(T) :
    Marshal.GetDelegateForFunctionPointer&<T>(fadr);
    
    public z_GenNamesAMD_adr := GetFuncAdr('glGenNamesAMD');
    public z_GenNamesAMD_ovr_0 := GetFuncOrNil&<procedure(identifier: DummyEnum; num: UInt32; var names: UInt32)>(z_GenNamesAMD_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GenNamesAMD(identifier: DummyEnum; num: UInt32; names: array of UInt32);
    begin
      z_GenNamesAMD_ovr_0(identifier, num, names[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GenNamesAMD(identifier: DummyEnum; num: UInt32; var names: UInt32);
    begin
      z_GenNamesAMD_ovr_0(identifier, num, names);
    end;
    public z_GenNamesAMD_ovr_2 := GetFuncOrNil&<procedure(identifier: DummyEnum; num: UInt32; names: IntPtr)>(z_GenNamesAMD_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GenNamesAMD(identifier: DummyEnum; num: UInt32; names: IntPtr);
    begin
      z_GenNamesAMD_ovr_2(identifier, num, names);
    end;
    
    public z_DeleteNamesAMD_adr := GetFuncAdr('glDeleteNamesAMD');
    public z_DeleteNamesAMD_ovr_0 := GetFuncOrNil&<procedure(identifier: DummyEnum; num: UInt32; var names: UInt32)>(z_DeleteNamesAMD_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure DeleteNamesAMD(identifier: DummyEnum; num: UInt32; names: array of UInt32);
    begin
      z_DeleteNamesAMD_ovr_0(identifier, num, names[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure DeleteNamesAMD(identifier: DummyEnum; num: UInt32; var names: UInt32);
    begin
      z_DeleteNamesAMD_ovr_0(identifier, num, names);
    end;
    public z_DeleteNamesAMD_ovr_2 := GetFuncOrNil&<procedure(identifier: DummyEnum; num: UInt32; names: IntPtr)>(z_DeleteNamesAMD_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure DeleteNamesAMD(identifier: DummyEnum; num: UInt32; names: IntPtr);
    begin
      z_DeleteNamesAMD_ovr_2(identifier, num, names);
    end;
    
    public z_IsNameAMD_adr := GetFuncAdr('glIsNameAMD');
    public z_IsNameAMD_ovr_0 := GetFuncOrNil&<function(identifier: DummyEnum; name: UInt32): boolean>(z_IsNameAMD_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function IsNameAMD(identifier: DummyEnum; name: UInt32): boolean;
    begin
      Result := z_IsNameAMD_ovr_0(identifier, name);
    end;
    
  end;
  
  glOcclusionQueryEventAMD = sealed class
    public static function GetFuncAdr([MarshalAs(UnmanagedType.LPStr)] lpszProc: string): IntPtr;
    external 'opengl32.dll' name 'wglGetProcAddress';
    public static function GetFuncOrNil<T>(fadr: IntPtr) :=
    fadr=IntPtr.Zero ? default(T) :
    Marshal.GetDelegateForFunctionPointer&<T>(fadr);
    
    public z_QueryObjectParameteruiAMD_adr := GetFuncAdr('glQueryObjectParameteruiAMD');
    public z_QueryObjectParameteruiAMD_ovr_0 := GetFuncOrNil&<procedure(target: QueryTarget; id: UInt32; pname: DummyEnum; param: UInt32)>(z_QueryObjectParameteruiAMD_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure QueryObjectParameteruiAMD(target: QueryTarget; id: UInt32; pname: DummyEnum; param: UInt32);
    begin
      z_QueryObjectParameteruiAMD_ovr_0(target, id, pname, param);
    end;
    
  end;
  
  glPerformanceMonitorAMD = sealed class
    public static function GetFuncAdr([MarshalAs(UnmanagedType.LPStr)] lpszProc: string): IntPtr;
    external 'opengl32.dll' name 'wglGetProcAddress';
    public static function GetFuncOrNil<T>(fadr: IntPtr) :=
    fadr=IntPtr.Zero ? default(T) :
    Marshal.GetDelegateForFunctionPointer&<T>(fadr);
    
    public z_GetPerfMonitorGroupsAMD_adr := GetFuncAdr('glGetPerfMonitorGroupsAMD');
    public z_GetPerfMonitorGroupsAMD_ovr_0 := GetFuncOrNil&<procedure(var numGroups: Int32; groupsSize: Int32; var groups: UInt32)>(z_GetPerfMonitorGroupsAMD_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetPerfMonitorGroupsAMD(numGroups: array of Int32; groupsSize: Int32; groups: array of UInt32);
    begin
      z_GetPerfMonitorGroupsAMD_ovr_0(numGroups[0], groupsSize, groups[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetPerfMonitorGroupsAMD(numGroups: array of Int32; groupsSize: Int32; var groups: UInt32);
    begin
      z_GetPerfMonitorGroupsAMD_ovr_0(numGroups[0], groupsSize, groups);
    end;
    public z_GetPerfMonitorGroupsAMD_ovr_2 := GetFuncOrNil&<procedure(var numGroups: Int32; groupsSize: Int32; groups: IntPtr)>(z_GetPerfMonitorGroupsAMD_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetPerfMonitorGroupsAMD(numGroups: array of Int32; groupsSize: Int32; groups: IntPtr);
    begin
      z_GetPerfMonitorGroupsAMD_ovr_2(numGroups[0], groupsSize, groups);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetPerfMonitorGroupsAMD(var numGroups: Int32; groupsSize: Int32; groups: array of UInt32);
    begin
      z_GetPerfMonitorGroupsAMD_ovr_0(numGroups, groupsSize, groups[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetPerfMonitorGroupsAMD(var numGroups: Int32; groupsSize: Int32; var groups: UInt32);
    begin
      z_GetPerfMonitorGroupsAMD_ovr_0(numGroups, groupsSize, groups);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetPerfMonitorGroupsAMD(var numGroups: Int32; groupsSize: Int32; groups: IntPtr);
    begin
      z_GetPerfMonitorGroupsAMD_ovr_2(numGroups, groupsSize, groups);
    end;
    public z_GetPerfMonitorGroupsAMD_ovr_6 := GetFuncOrNil&<procedure(numGroups: IntPtr; groupsSize: Int32; var groups: UInt32)>(z_GetPerfMonitorGroupsAMD_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetPerfMonitorGroupsAMD(numGroups: IntPtr; groupsSize: Int32; groups: array of UInt32);
    begin
      z_GetPerfMonitorGroupsAMD_ovr_6(numGroups, groupsSize, groups[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetPerfMonitorGroupsAMD(numGroups: IntPtr; groupsSize: Int32; var groups: UInt32);
    begin
      z_GetPerfMonitorGroupsAMD_ovr_6(numGroups, groupsSize, groups);
    end;
    public z_GetPerfMonitorGroupsAMD_ovr_8 := GetFuncOrNil&<procedure(numGroups: IntPtr; groupsSize: Int32; groups: IntPtr)>(z_GetPerfMonitorGroupsAMD_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetPerfMonitorGroupsAMD(numGroups: IntPtr; groupsSize: Int32; groups: IntPtr);
    begin
      z_GetPerfMonitorGroupsAMD_ovr_8(numGroups, groupsSize, groups);
    end;
    
    public z_GetPerfMonitorCountersAMD_adr := GetFuncAdr('glGetPerfMonitorCountersAMD');
    public z_GetPerfMonitorCountersAMD_ovr_0 := GetFuncOrNil&<procedure(group: UInt32; var numCounters: Int32; var maxActiveCounters: Int32; counterSize: Int32; var counters: UInt32)>(z_GetPerfMonitorCountersAMD_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetPerfMonitorCountersAMD(group: UInt32; numCounters: array of Int32; maxActiveCounters: array of Int32; counterSize: Int32; counters: array of UInt32);
    begin
      z_GetPerfMonitorCountersAMD_ovr_0(group, numCounters[0], maxActiveCounters[0], counterSize, counters[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetPerfMonitorCountersAMD(group: UInt32; numCounters: array of Int32; maxActiveCounters: array of Int32; counterSize: Int32; var counters: UInt32);
    begin
      z_GetPerfMonitorCountersAMD_ovr_0(group, numCounters[0], maxActiveCounters[0], counterSize, counters);
    end;
    public z_GetPerfMonitorCountersAMD_ovr_2 := GetFuncOrNil&<procedure(group: UInt32; var numCounters: Int32; var maxActiveCounters: Int32; counterSize: Int32; counters: IntPtr)>(z_GetPerfMonitorCountersAMD_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetPerfMonitorCountersAMD(group: UInt32; numCounters: array of Int32; maxActiveCounters: array of Int32; counterSize: Int32; counters: IntPtr);
    begin
      z_GetPerfMonitorCountersAMD_ovr_2(group, numCounters[0], maxActiveCounters[0], counterSize, counters);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetPerfMonitorCountersAMD(group: UInt32; numCounters: array of Int32; var maxActiveCounters: Int32; counterSize: Int32; counters: array of UInt32);
    begin
      z_GetPerfMonitorCountersAMD_ovr_0(group, numCounters[0], maxActiveCounters, counterSize, counters[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetPerfMonitorCountersAMD(group: UInt32; numCounters: array of Int32; var maxActiveCounters: Int32; counterSize: Int32; var counters: UInt32);
    begin
      z_GetPerfMonitorCountersAMD_ovr_0(group, numCounters[0], maxActiveCounters, counterSize, counters);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetPerfMonitorCountersAMD(group: UInt32; numCounters: array of Int32; var maxActiveCounters: Int32; counterSize: Int32; counters: IntPtr);
    begin
      z_GetPerfMonitorCountersAMD_ovr_2(group, numCounters[0], maxActiveCounters, counterSize, counters);
    end;
    public z_GetPerfMonitorCountersAMD_ovr_6 := GetFuncOrNil&<procedure(group: UInt32; var numCounters: Int32; maxActiveCounters: IntPtr; counterSize: Int32; var counters: UInt32)>(z_GetPerfMonitorCountersAMD_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetPerfMonitorCountersAMD(group: UInt32; numCounters: array of Int32; maxActiveCounters: IntPtr; counterSize: Int32; counters: array of UInt32);
    begin
      z_GetPerfMonitorCountersAMD_ovr_6(group, numCounters[0], maxActiveCounters, counterSize, counters[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetPerfMonitorCountersAMD(group: UInt32; numCounters: array of Int32; maxActiveCounters: IntPtr; counterSize: Int32; var counters: UInt32);
    begin
      z_GetPerfMonitorCountersAMD_ovr_6(group, numCounters[0], maxActiveCounters, counterSize, counters);
    end;
    public z_GetPerfMonitorCountersAMD_ovr_8 := GetFuncOrNil&<procedure(group: UInt32; var numCounters: Int32; maxActiveCounters: IntPtr; counterSize: Int32; counters: IntPtr)>(z_GetPerfMonitorCountersAMD_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetPerfMonitorCountersAMD(group: UInt32; numCounters: array of Int32; maxActiveCounters: IntPtr; counterSize: Int32; counters: IntPtr);
    begin
      z_GetPerfMonitorCountersAMD_ovr_8(group, numCounters[0], maxActiveCounters, counterSize, counters);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetPerfMonitorCountersAMD(group: UInt32; var numCounters: Int32; maxActiveCounters: array of Int32; counterSize: Int32; counters: array of UInt32);
    begin
      z_GetPerfMonitorCountersAMD_ovr_0(group, numCounters, maxActiveCounters[0], counterSize, counters[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetPerfMonitorCountersAMD(group: UInt32; var numCounters: Int32; maxActiveCounters: array of Int32; counterSize: Int32; var counters: UInt32);
    begin
      z_GetPerfMonitorCountersAMD_ovr_0(group, numCounters, maxActiveCounters[0], counterSize, counters);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetPerfMonitorCountersAMD(group: UInt32; var numCounters: Int32; maxActiveCounters: array of Int32; counterSize: Int32; counters: IntPtr);
    begin
      z_GetPerfMonitorCountersAMD_ovr_2(group, numCounters, maxActiveCounters[0], counterSize, counters);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetPerfMonitorCountersAMD(group: UInt32; var numCounters: Int32; var maxActiveCounters: Int32; counterSize: Int32; counters: array of UInt32);
    begin
      z_GetPerfMonitorCountersAMD_ovr_0(group, numCounters, maxActiveCounters, counterSize, counters[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetPerfMonitorCountersAMD(group: UInt32; var numCounters: Int32; var maxActiveCounters: Int32; counterSize: Int32; var counters: UInt32);
    begin
      z_GetPerfMonitorCountersAMD_ovr_0(group, numCounters, maxActiveCounters, counterSize, counters);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetPerfMonitorCountersAMD(group: UInt32; var numCounters: Int32; var maxActiveCounters: Int32; counterSize: Int32; counters: IntPtr);
    begin
      z_GetPerfMonitorCountersAMD_ovr_2(group, numCounters, maxActiveCounters, counterSize, counters);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetPerfMonitorCountersAMD(group: UInt32; var numCounters: Int32; maxActiveCounters: IntPtr; counterSize: Int32; counters: array of UInt32);
    begin
      z_GetPerfMonitorCountersAMD_ovr_6(group, numCounters, maxActiveCounters, counterSize, counters[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetPerfMonitorCountersAMD(group: UInt32; var numCounters: Int32; maxActiveCounters: IntPtr; counterSize: Int32; var counters: UInt32);
    begin
      z_GetPerfMonitorCountersAMD_ovr_6(group, numCounters, maxActiveCounters, counterSize, counters);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetPerfMonitorCountersAMD(group: UInt32; var numCounters: Int32; maxActiveCounters: IntPtr; counterSize: Int32; counters: IntPtr);
    begin
      z_GetPerfMonitorCountersAMD_ovr_8(group, numCounters, maxActiveCounters, counterSize, counters);
    end;
    public z_GetPerfMonitorCountersAMD_ovr_18 := GetFuncOrNil&<procedure(group: UInt32; numCounters: IntPtr; var maxActiveCounters: Int32; counterSize: Int32; var counters: UInt32)>(z_GetPerfMonitorCountersAMD_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetPerfMonitorCountersAMD(group: UInt32; numCounters: IntPtr; maxActiveCounters: array of Int32; counterSize: Int32; counters: array of UInt32);
    begin
      z_GetPerfMonitorCountersAMD_ovr_18(group, numCounters, maxActiveCounters[0], counterSize, counters[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetPerfMonitorCountersAMD(group: UInt32; numCounters: IntPtr; maxActiveCounters: array of Int32; counterSize: Int32; var counters: UInt32);
    begin
      z_GetPerfMonitorCountersAMD_ovr_18(group, numCounters, maxActiveCounters[0], counterSize, counters);
    end;
    public z_GetPerfMonitorCountersAMD_ovr_20 := GetFuncOrNil&<procedure(group: UInt32; numCounters: IntPtr; var maxActiveCounters: Int32; counterSize: Int32; counters: IntPtr)>(z_GetPerfMonitorCountersAMD_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetPerfMonitorCountersAMD(group: UInt32; numCounters: IntPtr; maxActiveCounters: array of Int32; counterSize: Int32; counters: IntPtr);
    begin
      z_GetPerfMonitorCountersAMD_ovr_20(group, numCounters, maxActiveCounters[0], counterSize, counters);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetPerfMonitorCountersAMD(group: UInt32; numCounters: IntPtr; var maxActiveCounters: Int32; counterSize: Int32; counters: array of UInt32);
    begin
      z_GetPerfMonitorCountersAMD_ovr_18(group, numCounters, maxActiveCounters, counterSize, counters[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetPerfMonitorCountersAMD(group: UInt32; numCounters: IntPtr; var maxActiveCounters: Int32; counterSize: Int32; var counters: UInt32);
    begin
      z_GetPerfMonitorCountersAMD_ovr_18(group, numCounters, maxActiveCounters, counterSize, counters);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetPerfMonitorCountersAMD(group: UInt32; numCounters: IntPtr; var maxActiveCounters: Int32; counterSize: Int32; counters: IntPtr);
    begin
      z_GetPerfMonitorCountersAMD_ovr_20(group, numCounters, maxActiveCounters, counterSize, counters);
    end;
    public z_GetPerfMonitorCountersAMD_ovr_24 := GetFuncOrNil&<procedure(group: UInt32; numCounters: IntPtr; maxActiveCounters: IntPtr; counterSize: Int32; var counters: UInt32)>(z_GetPerfMonitorCountersAMD_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetPerfMonitorCountersAMD(group: UInt32; numCounters: IntPtr; maxActiveCounters: IntPtr; counterSize: Int32; counters: array of UInt32);
    begin
      z_GetPerfMonitorCountersAMD_ovr_24(group, numCounters, maxActiveCounters, counterSize, counters[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetPerfMonitorCountersAMD(group: UInt32; numCounters: IntPtr; maxActiveCounters: IntPtr; counterSize: Int32; var counters: UInt32);
    begin
      z_GetPerfMonitorCountersAMD_ovr_24(group, numCounters, maxActiveCounters, counterSize, counters);
    end;
    public z_GetPerfMonitorCountersAMD_ovr_26 := GetFuncOrNil&<procedure(group: UInt32; numCounters: IntPtr; maxActiveCounters: IntPtr; counterSize: Int32; counters: IntPtr)>(z_GetPerfMonitorCountersAMD_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetPerfMonitorCountersAMD(group: UInt32; numCounters: IntPtr; maxActiveCounters: IntPtr; counterSize: Int32; counters: IntPtr);
    begin
      z_GetPerfMonitorCountersAMD_ovr_26(group, numCounters, maxActiveCounters, counterSize, counters);
    end;
    
    public z_GetPerfMonitorGroupStringAMD_adr := GetFuncAdr('glGetPerfMonitorGroupStringAMD');
    public z_GetPerfMonitorGroupStringAMD_ovr_0 := GetFuncOrNil&<procedure(group: UInt32; bufSize: Int32; var length: Int32; groupString: IntPtr)>(z_GetPerfMonitorGroupStringAMD_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetPerfMonitorGroupStringAMD(group: UInt32; bufSize: Int32; length: array of Int32; groupString: IntPtr);
    begin
      z_GetPerfMonitorGroupStringAMD_ovr_0(group, bufSize, length[0], groupString);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetPerfMonitorGroupStringAMD(group: UInt32; bufSize: Int32; var length: Int32; groupString: IntPtr);
    begin
      z_GetPerfMonitorGroupStringAMD_ovr_0(group, bufSize, length, groupString);
    end;
    public z_GetPerfMonitorGroupStringAMD_ovr_2 := GetFuncOrNil&<procedure(group: UInt32; bufSize: Int32; length: IntPtr; groupString: IntPtr)>(z_GetPerfMonitorGroupStringAMD_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetPerfMonitorGroupStringAMD(group: UInt32; bufSize: Int32; length: IntPtr; groupString: IntPtr);
    begin
      z_GetPerfMonitorGroupStringAMD_ovr_2(group, bufSize, length, groupString);
    end;
    
    public z_GetPerfMonitorCounterStringAMD_adr := GetFuncAdr('glGetPerfMonitorCounterStringAMD');
    public z_GetPerfMonitorCounterStringAMD_ovr_0 := GetFuncOrNil&<procedure(group: UInt32; counter: UInt32; bufSize: Int32; var length: Int32; counterString: IntPtr)>(z_GetPerfMonitorCounterStringAMD_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetPerfMonitorCounterStringAMD(group: UInt32; counter: UInt32; bufSize: Int32; length: array of Int32; counterString: IntPtr);
    begin
      z_GetPerfMonitorCounterStringAMD_ovr_0(group, counter, bufSize, length[0], counterString);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetPerfMonitorCounterStringAMD(group: UInt32; counter: UInt32; bufSize: Int32; var length: Int32; counterString: IntPtr);
    begin
      z_GetPerfMonitorCounterStringAMD_ovr_0(group, counter, bufSize, length, counterString);
    end;
    public z_GetPerfMonitorCounterStringAMD_ovr_2 := GetFuncOrNil&<procedure(group: UInt32; counter: UInt32; bufSize: Int32; length: IntPtr; counterString: IntPtr)>(z_GetPerfMonitorCounterStringAMD_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetPerfMonitorCounterStringAMD(group: UInt32; counter: UInt32; bufSize: Int32; length: IntPtr; counterString: IntPtr);
    begin
      z_GetPerfMonitorCounterStringAMD_ovr_2(group, counter, bufSize, length, counterString);
    end;
    
    public z_GetPerfMonitorCounterInfoAMD_adr := GetFuncAdr('glGetPerfMonitorCounterInfoAMD');
    public z_GetPerfMonitorCounterInfoAMD_ovr_0 := GetFuncOrNil&<procedure(group: UInt32; counter: UInt32; pname: DummyEnum; data: IntPtr)>(z_GetPerfMonitorCounterInfoAMD_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetPerfMonitorCounterInfoAMD(group: UInt32; counter: UInt32; pname: DummyEnum; data: IntPtr);
    begin
      z_GetPerfMonitorCounterInfoAMD_ovr_0(group, counter, pname, data);
    end;
    
    public z_GenPerfMonitorsAMD_adr := GetFuncAdr('glGenPerfMonitorsAMD');
    public z_GenPerfMonitorsAMD_ovr_0 := GetFuncOrNil&<procedure(n: Int32; var monitors: UInt32)>(z_GenPerfMonitorsAMD_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GenPerfMonitorsAMD(n: Int32; monitors: array of UInt32);
    begin
      z_GenPerfMonitorsAMD_ovr_0(n, monitors[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GenPerfMonitorsAMD(n: Int32; var monitors: UInt32);
    begin
      z_GenPerfMonitorsAMD_ovr_0(n, monitors);
    end;
    public z_GenPerfMonitorsAMD_ovr_2 := GetFuncOrNil&<procedure(n: Int32; monitors: IntPtr)>(z_GenPerfMonitorsAMD_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GenPerfMonitorsAMD(n: Int32; monitors: IntPtr);
    begin
      z_GenPerfMonitorsAMD_ovr_2(n, monitors);
    end;
    
    public z_DeletePerfMonitorsAMD_adr := GetFuncAdr('glDeletePerfMonitorsAMD');
    public z_DeletePerfMonitorsAMD_ovr_0 := GetFuncOrNil&<procedure(n: Int32; var monitors: UInt32)>(z_DeletePerfMonitorsAMD_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure DeletePerfMonitorsAMD(n: Int32; monitors: array of UInt32);
    begin
      z_DeletePerfMonitorsAMD_ovr_0(n, monitors[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure DeletePerfMonitorsAMD(n: Int32; var monitors: UInt32);
    begin
      z_DeletePerfMonitorsAMD_ovr_0(n, monitors);
    end;
    public z_DeletePerfMonitorsAMD_ovr_2 := GetFuncOrNil&<procedure(n: Int32; monitors: IntPtr)>(z_DeletePerfMonitorsAMD_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure DeletePerfMonitorsAMD(n: Int32; monitors: IntPtr);
    begin
      z_DeletePerfMonitorsAMD_ovr_2(n, monitors);
    end;
    
    public z_SelectPerfMonitorCountersAMD_adr := GetFuncAdr('glSelectPerfMonitorCountersAMD');
    public z_SelectPerfMonitorCountersAMD_ovr_0 := GetFuncOrNil&<procedure(monitor: UInt32; enable: boolean; group: UInt32; numCounters: Int32; var counterList: UInt32)>(z_SelectPerfMonitorCountersAMD_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure SelectPerfMonitorCountersAMD(monitor: UInt32; enable: boolean; group: UInt32; numCounters: Int32; counterList: array of UInt32);
    begin
      z_SelectPerfMonitorCountersAMD_ovr_0(monitor, enable, group, numCounters, counterList[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure SelectPerfMonitorCountersAMD(monitor: UInt32; enable: boolean; group: UInt32; numCounters: Int32; var counterList: UInt32);
    begin
      z_SelectPerfMonitorCountersAMD_ovr_0(monitor, enable, group, numCounters, counterList);
    end;
    public z_SelectPerfMonitorCountersAMD_ovr_2 := GetFuncOrNil&<procedure(monitor: UInt32; enable: boolean; group: UInt32; numCounters: Int32; counterList: IntPtr)>(z_SelectPerfMonitorCountersAMD_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure SelectPerfMonitorCountersAMD(monitor: UInt32; enable: boolean; group: UInt32; numCounters: Int32; counterList: IntPtr);
    begin
      z_SelectPerfMonitorCountersAMD_ovr_2(monitor, enable, group, numCounters, counterList);
    end;
    
    public z_BeginPerfMonitorAMD_adr := GetFuncAdr('glBeginPerfMonitorAMD');
    public z_BeginPerfMonitorAMD_ovr_0 := GetFuncOrNil&<procedure(monitor: UInt32)>(z_BeginPerfMonitorAMD_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure BeginPerfMonitorAMD(monitor: UInt32);
    begin
      z_BeginPerfMonitorAMD_ovr_0(monitor);
    end;
    
    public z_EndPerfMonitorAMD_adr := GetFuncAdr('glEndPerfMonitorAMD');
    public z_EndPerfMonitorAMD_ovr_0 := GetFuncOrNil&<procedure(monitor: UInt32)>(z_EndPerfMonitorAMD_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure EndPerfMonitorAMD(monitor: UInt32);
    begin
      z_EndPerfMonitorAMD_ovr_0(monitor);
    end;
    
    public z_GetPerfMonitorCounterDataAMD_adr := GetFuncAdr('glGetPerfMonitorCounterDataAMD');
    public z_GetPerfMonitorCounterDataAMD_ovr_0 := GetFuncOrNil&<procedure(monitor: UInt32; pname: DummyEnum; dataSize: Int32; var data: UInt32; var bytesWritten: Int32)>(z_GetPerfMonitorCounterDataAMD_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetPerfMonitorCounterDataAMD(monitor: UInt32; pname: DummyEnum; dataSize: Int32; data: array of UInt32; bytesWritten: array of Int32);
    begin
      z_GetPerfMonitorCounterDataAMD_ovr_0(monitor, pname, dataSize, data[0], bytesWritten[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetPerfMonitorCounterDataAMD(monitor: UInt32; pname: DummyEnum; dataSize: Int32; data: array of UInt32; var bytesWritten: Int32);
    begin
      z_GetPerfMonitorCounterDataAMD_ovr_0(monitor, pname, dataSize, data[0], bytesWritten);
    end;
    public z_GetPerfMonitorCounterDataAMD_ovr_2 := GetFuncOrNil&<procedure(monitor: UInt32; pname: DummyEnum; dataSize: Int32; var data: UInt32; bytesWritten: IntPtr)>(z_GetPerfMonitorCounterDataAMD_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetPerfMonitorCounterDataAMD(monitor: UInt32; pname: DummyEnum; dataSize: Int32; data: array of UInt32; bytesWritten: IntPtr);
    begin
      z_GetPerfMonitorCounterDataAMD_ovr_2(monitor, pname, dataSize, data[0], bytesWritten);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetPerfMonitorCounterDataAMD(monitor: UInt32; pname: DummyEnum; dataSize: Int32; var data: UInt32; bytesWritten: array of Int32);
    begin
      z_GetPerfMonitorCounterDataAMD_ovr_0(monitor, pname, dataSize, data, bytesWritten[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetPerfMonitorCounterDataAMD(monitor: UInt32; pname: DummyEnum; dataSize: Int32; var data: UInt32; var bytesWritten: Int32);
    begin
      z_GetPerfMonitorCounterDataAMD_ovr_0(monitor, pname, dataSize, data, bytesWritten);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetPerfMonitorCounterDataAMD(monitor: UInt32; pname: DummyEnum; dataSize: Int32; var data: UInt32; bytesWritten: IntPtr);
    begin
      z_GetPerfMonitorCounterDataAMD_ovr_2(monitor, pname, dataSize, data, bytesWritten);
    end;
    public z_GetPerfMonitorCounterDataAMD_ovr_6 := GetFuncOrNil&<procedure(monitor: UInt32; pname: DummyEnum; dataSize: Int32; data: IntPtr; var bytesWritten: Int32)>(z_GetPerfMonitorCounterDataAMD_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetPerfMonitorCounterDataAMD(monitor: UInt32; pname: DummyEnum; dataSize: Int32; data: IntPtr; bytesWritten: array of Int32);
    begin
      z_GetPerfMonitorCounterDataAMD_ovr_6(monitor, pname, dataSize, data, bytesWritten[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetPerfMonitorCounterDataAMD(monitor: UInt32; pname: DummyEnum; dataSize: Int32; data: IntPtr; var bytesWritten: Int32);
    begin
      z_GetPerfMonitorCounterDataAMD_ovr_6(monitor, pname, dataSize, data, bytesWritten);
    end;
    public z_GetPerfMonitorCounterDataAMD_ovr_8 := GetFuncOrNil&<procedure(monitor: UInt32; pname: DummyEnum; dataSize: Int32; data: IntPtr; bytesWritten: IntPtr)>(z_GetPerfMonitorCounterDataAMD_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetPerfMonitorCounterDataAMD(monitor: UInt32; pname: DummyEnum; dataSize: Int32; data: IntPtr; bytesWritten: IntPtr);
    begin
      z_GetPerfMonitorCounterDataAMD_ovr_8(monitor, pname, dataSize, data, bytesWritten);
    end;
    
  end;
  
  glSamplePositionsAMD = sealed class
    public static function GetFuncAdr([MarshalAs(UnmanagedType.LPStr)] lpszProc: string): IntPtr;
    external 'opengl32.dll' name 'wglGetProcAddress';
    public static function GetFuncOrNil<T>(fadr: IntPtr) :=
    fadr=IntPtr.Zero ? default(T) :
    Marshal.GetDelegateForFunctionPointer&<T>(fadr);
    
    public z_SetMultisamplefvAMD_adr := GetFuncAdr('glSetMultisamplefvAMD');
    public z_SetMultisamplefvAMD_ovr_0 := GetFuncOrNil&<procedure(pname: DummyEnum; index: UInt32; var val: single)>(z_SetMultisamplefvAMD_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure SetMultisamplefvAMD(pname: DummyEnum; index: UInt32; val: array of single);
    begin
      z_SetMultisamplefvAMD_ovr_0(pname, index, val[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure SetMultisamplefvAMD(pname: DummyEnum; index: UInt32; var val: single);
    begin
      z_SetMultisamplefvAMD_ovr_0(pname, index, val);
    end;
    public z_SetMultisamplefvAMD_ovr_2 := GetFuncOrNil&<procedure(pname: DummyEnum; index: UInt32; val: IntPtr)>(z_SetMultisamplefvAMD_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure SetMultisamplefvAMD(pname: DummyEnum; index: UInt32; val: IntPtr);
    begin
      z_SetMultisamplefvAMD_ovr_2(pname, index, val);
    end;
    
  end;
  
  glSparseTextureAMD = sealed class
    public static function GetFuncAdr([MarshalAs(UnmanagedType.LPStr)] lpszProc: string): IntPtr;
    external 'opengl32.dll' name 'wglGetProcAddress';
    public static function GetFuncOrNil<T>(fadr: IntPtr) :=
    fadr=IntPtr.Zero ? default(T) :
    Marshal.GetDelegateForFunctionPointer&<T>(fadr);
    
    public z_TexStorageSparseAMD_adr := GetFuncAdr('glTexStorageSparseAMD');
    public z_TexStorageSparseAMD_ovr_0 := GetFuncOrNil&<procedure(target: TextureTarget; _internalFormat: InternalFormat; width: Int32; height: Int32; depth: Int32; layers: Int32; flags: TextureStorageMaskAMD)>(z_TexStorageSparseAMD_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TexStorageSparseAMD(target: TextureTarget; _internalFormat: InternalFormat; width: Int32; height: Int32; depth: Int32; layers: Int32; flags: TextureStorageMaskAMD);
    begin
      z_TexStorageSparseAMD_ovr_0(target, _internalFormat, width, height, depth, layers, flags);
    end;
    
    public z_TextureStorageSparseAMD_adr := GetFuncAdr('glTextureStorageSparseAMD');
    public z_TextureStorageSparseAMD_ovr_0 := GetFuncOrNil&<procedure(texture: UInt32; target: DummyEnum; _internalFormat: InternalFormat; width: Int32; height: Int32; depth: Int32; layers: Int32; flags: TextureStorageMaskAMD)>(z_TextureStorageSparseAMD_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TextureStorageSparseAMD(texture: UInt32; target: DummyEnum; _internalFormat: InternalFormat; width: Int32; height: Int32; depth: Int32; layers: Int32; flags: TextureStorageMaskAMD);
    begin
      z_TextureStorageSparseAMD_ovr_0(texture, target, _internalFormat, width, height, depth, layers, flags);
    end;
    
  end;
  
  glStencilOperationExtendedAMD = sealed class
    public static function GetFuncAdr([MarshalAs(UnmanagedType.LPStr)] lpszProc: string): IntPtr;
    external 'opengl32.dll' name 'wglGetProcAddress';
    public static function GetFuncOrNil<T>(fadr: IntPtr) :=
    fadr=IntPtr.Zero ? default(T) :
    Marshal.GetDelegateForFunctionPointer&<T>(fadr);
    
    public z_StencilOpValueAMD_adr := GetFuncAdr('glStencilOpValueAMD');
    public z_StencilOpValueAMD_ovr_0 := GetFuncOrNil&<procedure(face: StencilFaceDirection; value: UInt32)>(z_StencilOpValueAMD_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure StencilOpValueAMD(face: StencilFaceDirection; value: UInt32);
    begin
      z_StencilOpValueAMD_ovr_0(face, value);
    end;
    
  end;
  
  glVertexShaderTessellatorAMD = sealed class
    public static function GetFuncAdr([MarshalAs(UnmanagedType.LPStr)] lpszProc: string): IntPtr;
    external 'opengl32.dll' name 'wglGetProcAddress';
    public static function GetFuncOrNil<T>(fadr: IntPtr) :=
    fadr=IntPtr.Zero ? default(T) :
    Marshal.GetDelegateForFunctionPointer&<T>(fadr);
    
    public z_TessellationFactorAMD_adr := GetFuncAdr('glTessellationFactorAMD');
    public z_TessellationFactorAMD_ovr_0 := GetFuncOrNil&<procedure(factor: single)>(z_TessellationFactorAMD_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TessellationFactorAMD(factor: single);
    begin
      z_TessellationFactorAMD_ovr_0(factor);
    end;
    
    public z_TessellationModeAMD_adr := GetFuncAdr('glTessellationModeAMD');
    public z_TessellationModeAMD_ovr_0 := GetFuncOrNil&<procedure(mode: DummyEnum)>(z_TessellationModeAMD_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TessellationModeAMD(mode: DummyEnum);
    begin
      z_TessellationModeAMD_ovr_0(mode);
    end;
    
  end;
  
  glElementArrayAPPLE = sealed class
    public static function GetFuncAdr([MarshalAs(UnmanagedType.LPStr)] lpszProc: string): IntPtr;
    external 'opengl32.dll' name 'wglGetProcAddress';
    public static function GetFuncOrNil<T>(fadr: IntPtr) :=
    fadr=IntPtr.Zero ? default(T) :
    Marshal.GetDelegateForFunctionPointer&<T>(fadr);
    
    public z_ElementPointerAPPLE_adr := GetFuncAdr('glElementPointerAPPLE');
    public z_ElementPointerAPPLE_ovr_0 := GetFuncOrNil&<procedure(&type: ElementPointerTypeATI; pointer: IntPtr)>(z_ElementPointerAPPLE_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ElementPointerAPPLE(&type: ElementPointerTypeATI; pointer: IntPtr);
    begin
      z_ElementPointerAPPLE_ovr_0(&type, pointer);
    end;
    
    public z_DrawElementArrayAPPLE_adr := GetFuncAdr('glDrawElementArrayAPPLE');
    public z_DrawElementArrayAPPLE_ovr_0 := GetFuncOrNil&<procedure(mode: PrimitiveType; first: Int32; count: Int32)>(z_DrawElementArrayAPPLE_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure DrawElementArrayAPPLE(mode: PrimitiveType; first: Int32; count: Int32);
    begin
      z_DrawElementArrayAPPLE_ovr_0(mode, first, count);
    end;
    
    public z_DrawRangeElementArrayAPPLE_adr := GetFuncAdr('glDrawRangeElementArrayAPPLE');
    public z_DrawRangeElementArrayAPPLE_ovr_0 := GetFuncOrNil&<procedure(mode: PrimitiveType; start: UInt32; &end: UInt32; first: Int32; count: Int32)>(z_DrawRangeElementArrayAPPLE_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure DrawRangeElementArrayAPPLE(mode: PrimitiveType; start: UInt32; &end: UInt32; first: Int32; count: Int32);
    begin
      z_DrawRangeElementArrayAPPLE_ovr_0(mode, start, &end, first, count);
    end;
    
    public z_MultiDrawElementArrayAPPLE_adr := GetFuncAdr('glMultiDrawElementArrayAPPLE');
    public z_MultiDrawElementArrayAPPLE_ovr_0 := GetFuncOrNil&<procedure(mode: PrimitiveType; var first: Int32; var count: Int32; primcount: Int32)>(z_MultiDrawElementArrayAPPLE_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiDrawElementArrayAPPLE(mode: PrimitiveType; first: array of Int32; count: array of Int32; primcount: Int32);
    begin
      z_MultiDrawElementArrayAPPLE_ovr_0(mode, first[0], count[0], primcount);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiDrawElementArrayAPPLE(mode: PrimitiveType; first: array of Int32; var count: Int32; primcount: Int32);
    begin
      z_MultiDrawElementArrayAPPLE_ovr_0(mode, first[0], count, primcount);
    end;
    public z_MultiDrawElementArrayAPPLE_ovr_2 := GetFuncOrNil&<procedure(mode: PrimitiveType; var first: Int32; count: IntPtr; primcount: Int32)>(z_MultiDrawElementArrayAPPLE_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiDrawElementArrayAPPLE(mode: PrimitiveType; first: array of Int32; count: IntPtr; primcount: Int32);
    begin
      z_MultiDrawElementArrayAPPLE_ovr_2(mode, first[0], count, primcount);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiDrawElementArrayAPPLE(mode: PrimitiveType; var first: Int32; count: array of Int32; primcount: Int32);
    begin
      z_MultiDrawElementArrayAPPLE_ovr_0(mode, first, count[0], primcount);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiDrawElementArrayAPPLE(mode: PrimitiveType; var first: Int32; var count: Int32; primcount: Int32);
    begin
      z_MultiDrawElementArrayAPPLE_ovr_0(mode, first, count, primcount);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiDrawElementArrayAPPLE(mode: PrimitiveType; var first: Int32; count: IntPtr; primcount: Int32);
    begin
      z_MultiDrawElementArrayAPPLE_ovr_2(mode, first, count, primcount);
    end;
    public z_MultiDrawElementArrayAPPLE_ovr_6 := GetFuncOrNil&<procedure(mode: PrimitiveType; first: IntPtr; var count: Int32; primcount: Int32)>(z_MultiDrawElementArrayAPPLE_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiDrawElementArrayAPPLE(mode: PrimitiveType; first: IntPtr; count: array of Int32; primcount: Int32);
    begin
      z_MultiDrawElementArrayAPPLE_ovr_6(mode, first, count[0], primcount);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiDrawElementArrayAPPLE(mode: PrimitiveType; first: IntPtr; var count: Int32; primcount: Int32);
    begin
      z_MultiDrawElementArrayAPPLE_ovr_6(mode, first, count, primcount);
    end;
    public z_MultiDrawElementArrayAPPLE_ovr_8 := GetFuncOrNil&<procedure(mode: PrimitiveType; first: IntPtr; count: IntPtr; primcount: Int32)>(z_MultiDrawElementArrayAPPLE_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiDrawElementArrayAPPLE(mode: PrimitiveType; first: IntPtr; count: IntPtr; primcount: Int32);
    begin
      z_MultiDrawElementArrayAPPLE_ovr_8(mode, first, count, primcount);
    end;
    
    public z_MultiDrawRangeElementArrayAPPLE_adr := GetFuncAdr('glMultiDrawRangeElementArrayAPPLE');
    public z_MultiDrawRangeElementArrayAPPLE_ovr_0 := GetFuncOrNil&<procedure(mode: PrimitiveType; start: UInt32; &end: UInt32; var first: Int32; var count: Int32; primcount: Int32)>(z_MultiDrawRangeElementArrayAPPLE_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiDrawRangeElementArrayAPPLE(mode: PrimitiveType; start: UInt32; &end: UInt32; first: array of Int32; count: array of Int32; primcount: Int32);
    begin
      z_MultiDrawRangeElementArrayAPPLE_ovr_0(mode, start, &end, first[0], count[0], primcount);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiDrawRangeElementArrayAPPLE(mode: PrimitiveType; start: UInt32; &end: UInt32; first: array of Int32; var count: Int32; primcount: Int32);
    begin
      z_MultiDrawRangeElementArrayAPPLE_ovr_0(mode, start, &end, first[0], count, primcount);
    end;
    public z_MultiDrawRangeElementArrayAPPLE_ovr_2 := GetFuncOrNil&<procedure(mode: PrimitiveType; start: UInt32; &end: UInt32; var first: Int32; count: IntPtr; primcount: Int32)>(z_MultiDrawRangeElementArrayAPPLE_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiDrawRangeElementArrayAPPLE(mode: PrimitiveType; start: UInt32; &end: UInt32; first: array of Int32; count: IntPtr; primcount: Int32);
    begin
      z_MultiDrawRangeElementArrayAPPLE_ovr_2(mode, start, &end, first[0], count, primcount);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiDrawRangeElementArrayAPPLE(mode: PrimitiveType; start: UInt32; &end: UInt32; var first: Int32; count: array of Int32; primcount: Int32);
    begin
      z_MultiDrawRangeElementArrayAPPLE_ovr_0(mode, start, &end, first, count[0], primcount);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiDrawRangeElementArrayAPPLE(mode: PrimitiveType; start: UInt32; &end: UInt32; var first: Int32; var count: Int32; primcount: Int32);
    begin
      z_MultiDrawRangeElementArrayAPPLE_ovr_0(mode, start, &end, first, count, primcount);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiDrawRangeElementArrayAPPLE(mode: PrimitiveType; start: UInt32; &end: UInt32; var first: Int32; count: IntPtr; primcount: Int32);
    begin
      z_MultiDrawRangeElementArrayAPPLE_ovr_2(mode, start, &end, first, count, primcount);
    end;
    public z_MultiDrawRangeElementArrayAPPLE_ovr_6 := GetFuncOrNil&<procedure(mode: PrimitiveType; start: UInt32; &end: UInt32; first: IntPtr; var count: Int32; primcount: Int32)>(z_MultiDrawRangeElementArrayAPPLE_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiDrawRangeElementArrayAPPLE(mode: PrimitiveType; start: UInt32; &end: UInt32; first: IntPtr; count: array of Int32; primcount: Int32);
    begin
      z_MultiDrawRangeElementArrayAPPLE_ovr_6(mode, start, &end, first, count[0], primcount);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiDrawRangeElementArrayAPPLE(mode: PrimitiveType; start: UInt32; &end: UInt32; first: IntPtr; var count: Int32; primcount: Int32);
    begin
      z_MultiDrawRangeElementArrayAPPLE_ovr_6(mode, start, &end, first, count, primcount);
    end;
    public z_MultiDrawRangeElementArrayAPPLE_ovr_8 := GetFuncOrNil&<procedure(mode: PrimitiveType; start: UInt32; &end: UInt32; first: IntPtr; count: IntPtr; primcount: Int32)>(z_MultiDrawRangeElementArrayAPPLE_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiDrawRangeElementArrayAPPLE(mode: PrimitiveType; start: UInt32; &end: UInt32; first: IntPtr; count: IntPtr; primcount: Int32);
    begin
      z_MultiDrawRangeElementArrayAPPLE_ovr_8(mode, start, &end, first, count, primcount);
    end;
    
  end;
  
  glFenceAPPLE = sealed class
    public static function GetFuncAdr([MarshalAs(UnmanagedType.LPStr)] lpszProc: string): IntPtr;
    external 'opengl32.dll' name 'wglGetProcAddress';
    public static function GetFuncOrNil<T>(fadr: IntPtr) :=
    fadr=IntPtr.Zero ? default(T) :
    Marshal.GetDelegateForFunctionPointer&<T>(fadr);
    
    public z_GenFencesAPPLE_adr := GetFuncAdr('glGenFencesAPPLE');
    public z_GenFencesAPPLE_ovr_0 := GetFuncOrNil&<procedure(n: Int32; var fences: UInt32)>(z_GenFencesAPPLE_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GenFencesAPPLE(n: Int32; fences: array of UInt32);
    begin
      z_GenFencesAPPLE_ovr_0(n, fences[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GenFencesAPPLE(n: Int32; var fences: UInt32);
    begin
      z_GenFencesAPPLE_ovr_0(n, fences);
    end;
    public z_GenFencesAPPLE_ovr_2 := GetFuncOrNil&<procedure(n: Int32; fences: IntPtr)>(z_GenFencesAPPLE_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GenFencesAPPLE(n: Int32; fences: IntPtr);
    begin
      z_GenFencesAPPLE_ovr_2(n, fences);
    end;
    
    public z_DeleteFencesAPPLE_adr := GetFuncAdr('glDeleteFencesAPPLE');
    public z_DeleteFencesAPPLE_ovr_0 := GetFuncOrNil&<procedure(n: Int32; var fences: UInt32)>(z_DeleteFencesAPPLE_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure DeleteFencesAPPLE(n: Int32; fences: array of UInt32);
    begin
      z_DeleteFencesAPPLE_ovr_0(n, fences[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure DeleteFencesAPPLE(n: Int32; var fences: UInt32);
    begin
      z_DeleteFencesAPPLE_ovr_0(n, fences);
    end;
    public z_DeleteFencesAPPLE_ovr_2 := GetFuncOrNil&<procedure(n: Int32; fences: IntPtr)>(z_DeleteFencesAPPLE_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure DeleteFencesAPPLE(n: Int32; fences: IntPtr);
    begin
      z_DeleteFencesAPPLE_ovr_2(n, fences);
    end;
    
    public z_SetFenceAPPLE_adr := GetFuncAdr('glSetFenceAPPLE');
    public z_SetFenceAPPLE_ovr_0 := GetFuncOrNil&<procedure(fence: UInt32)>(z_SetFenceAPPLE_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure SetFenceAPPLE(fence: UInt32);
    begin
      z_SetFenceAPPLE_ovr_0(fence);
    end;
    
    public z_IsFenceAPPLE_adr := GetFuncAdr('glIsFenceAPPLE');
    public z_IsFenceAPPLE_ovr_0 := GetFuncOrNil&<function(fence: UInt32): boolean>(z_IsFenceAPPLE_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function IsFenceAPPLE(fence: UInt32): boolean;
    begin
      Result := z_IsFenceAPPLE_ovr_0(fence);
    end;
    
    public z_TestFenceAPPLE_adr := GetFuncAdr('glTestFenceAPPLE');
    public z_TestFenceAPPLE_ovr_0 := GetFuncOrNil&<function(fence: UInt32): boolean>(z_TestFenceAPPLE_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function TestFenceAPPLE(fence: UInt32): boolean;
    begin
      Result := z_TestFenceAPPLE_ovr_0(fence);
    end;
    
    public z_FinishFenceAPPLE_adr := GetFuncAdr('glFinishFenceAPPLE');
    public z_FinishFenceAPPLE_ovr_0 := GetFuncOrNil&<procedure(fence: UInt32)>(z_FinishFenceAPPLE_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure FinishFenceAPPLE(fence: UInt32);
    begin
      z_FinishFenceAPPLE_ovr_0(fence);
    end;
    
    public z_TestObjectAPPLE_adr := GetFuncAdr('glTestObjectAPPLE');
    public z_TestObjectAPPLE_ovr_0 := GetFuncOrNil&<function(object: ObjectTypeAPPLE; name: UInt32): boolean>(z_TestObjectAPPLE_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function TestObjectAPPLE(object: ObjectTypeAPPLE; name: UInt32): boolean;
    begin
      Result := z_TestObjectAPPLE_ovr_0(object, name);
    end;
    
    public z_FinishObjectAPPLE_adr := GetFuncAdr('glFinishObjectAPPLE');
    public z_FinishObjectAPPLE_ovr_0 := GetFuncOrNil&<procedure(object: ObjectTypeAPPLE; name: Int32)>(z_FinishObjectAPPLE_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure FinishObjectAPPLE(object: ObjectTypeAPPLE; name: Int32);
    begin
      z_FinishObjectAPPLE_ovr_0(object, name);
    end;
    
  end;
  
  glFlushBufferRangeAPPLE = sealed class
    public static function GetFuncAdr([MarshalAs(UnmanagedType.LPStr)] lpszProc: string): IntPtr;
    external 'opengl32.dll' name 'wglGetProcAddress';
    public static function GetFuncOrNil<T>(fadr: IntPtr) :=
    fadr=IntPtr.Zero ? default(T) :
    Marshal.GetDelegateForFunctionPointer&<T>(fadr);
    
    public z_BufferParameteriAPPLE_adr := GetFuncAdr('glBufferParameteriAPPLE');
    public z_BufferParameteriAPPLE_ovr_0 := GetFuncOrNil&<procedure(target: DummyEnum; pname: DummyEnum; param: Int32)>(z_BufferParameteriAPPLE_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure BufferParameteriAPPLE(target: DummyEnum; pname: DummyEnum; param: Int32);
    begin
      z_BufferParameteriAPPLE_ovr_0(target, pname, param);
    end;
    
    public z_FlushMappedBufferRangeAPPLE_adr := GetFuncAdr('glFlushMappedBufferRangeAPPLE');
    public z_FlushMappedBufferRangeAPPLE_ovr_0 := GetFuncOrNil&<procedure(target: BufferTargetARB; offset: IntPtr; size: IntPtr)>(z_FlushMappedBufferRangeAPPLE_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure FlushMappedBufferRangeAPPLE(target: BufferTargetARB; offset: IntPtr; size: IntPtr);
    begin
      z_FlushMappedBufferRangeAPPLE_ovr_0(target, offset, size);
    end;
    
  end;
  
  glObjectPurgeableAPPLE = sealed class
    public static function GetFuncAdr([MarshalAs(UnmanagedType.LPStr)] lpszProc: string): IntPtr;
    external 'opengl32.dll' name 'wglGetProcAddress';
    public static function GetFuncOrNil<T>(fadr: IntPtr) :=
    fadr=IntPtr.Zero ? default(T) :
    Marshal.GetDelegateForFunctionPointer&<T>(fadr);
    
    public z_ObjectPurgeableAPPLE_adr := GetFuncAdr('glObjectPurgeableAPPLE');
    public z_ObjectPurgeableAPPLE_ovr_0 := GetFuncOrNil&<function(objectType: DummyEnum; name: UInt32; option: DummyEnum): DummyEnum>(z_ObjectPurgeableAPPLE_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function ObjectPurgeableAPPLE(objectType: DummyEnum; name: UInt32; option: DummyEnum): DummyEnum;
    begin
      Result := z_ObjectPurgeableAPPLE_ovr_0(objectType, name, option);
    end;
    
    public z_ObjectUnpurgeableAPPLE_adr := GetFuncAdr('glObjectUnpurgeableAPPLE');
    public z_ObjectUnpurgeableAPPLE_ovr_0 := GetFuncOrNil&<function(objectType: DummyEnum; name: UInt32; option: DummyEnum): DummyEnum>(z_ObjectUnpurgeableAPPLE_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function ObjectUnpurgeableAPPLE(objectType: DummyEnum; name: UInt32; option: DummyEnum): DummyEnum;
    begin
      Result := z_ObjectUnpurgeableAPPLE_ovr_0(objectType, name, option);
    end;
    
    public z_GetObjectParameterivAPPLE_adr := GetFuncAdr('glGetObjectParameterivAPPLE');
    public z_GetObjectParameterivAPPLE_ovr_0 := GetFuncOrNil&<procedure(objectType: DummyEnum; name: UInt32; pname: DummyEnum; var &params: Int32)>(z_GetObjectParameterivAPPLE_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetObjectParameterivAPPLE(objectType: DummyEnum; name: UInt32; pname: DummyEnum; &params: array of Int32);
    begin
      z_GetObjectParameterivAPPLE_ovr_0(objectType, name, pname, &params[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetObjectParameterivAPPLE(objectType: DummyEnum; name: UInt32; pname: DummyEnum; var &params: Int32);
    begin
      z_GetObjectParameterivAPPLE_ovr_0(objectType, name, pname, &params);
    end;
    public z_GetObjectParameterivAPPLE_ovr_2 := GetFuncOrNil&<procedure(objectType: DummyEnum; name: UInt32; pname: DummyEnum; &params: IntPtr)>(z_GetObjectParameterivAPPLE_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetObjectParameterivAPPLE(objectType: DummyEnum; name: UInt32; pname: DummyEnum; &params: IntPtr);
    begin
      z_GetObjectParameterivAPPLE_ovr_2(objectType, name, pname, &params);
    end;
    
  end;
  
  glTextureRangeAPPLE = sealed class
    public static function GetFuncAdr([MarshalAs(UnmanagedType.LPStr)] lpszProc: string): IntPtr;
    external 'opengl32.dll' name 'wglGetProcAddress';
    public static function GetFuncOrNil<T>(fadr: IntPtr) :=
    fadr=IntPtr.Zero ? default(T) :
    Marshal.GetDelegateForFunctionPointer&<T>(fadr);
    
    public z_TextureRangeAPPLE_adr := GetFuncAdr('glTextureRangeAPPLE');
    public z_TextureRangeAPPLE_ovr_0 := GetFuncOrNil&<procedure(target: DummyEnum; length: Int32; pointer: IntPtr)>(z_TextureRangeAPPLE_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TextureRangeAPPLE(target: DummyEnum; length: Int32; pointer: IntPtr);
    begin
      z_TextureRangeAPPLE_ovr_0(target, length, pointer);
    end;
    
    public z_GetTexParameterPointervAPPLE_adr := GetFuncAdr('glGetTexParameterPointervAPPLE');
    public z_GetTexParameterPointervAPPLE_ovr_0 := GetFuncOrNil&<procedure(target: DummyEnum; pname: DummyEnum; var &params: IntPtr)>(z_GetTexParameterPointervAPPLE_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetTexParameterPointervAPPLE(target: DummyEnum; pname: DummyEnum; &params: array of IntPtr);
    begin
      z_GetTexParameterPointervAPPLE_ovr_0(target, pname, &params[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetTexParameterPointervAPPLE(target: DummyEnum; pname: DummyEnum; var &params: IntPtr);
    begin
      z_GetTexParameterPointervAPPLE_ovr_0(target, pname, &params);
    end;
    public z_GetTexParameterPointervAPPLE_ovr_2 := GetFuncOrNil&<procedure(target: DummyEnum; pname: DummyEnum; &params: pointer)>(z_GetTexParameterPointervAPPLE_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetTexParameterPointervAPPLE(target: DummyEnum; pname: DummyEnum; &params: pointer);
    begin
      z_GetTexParameterPointervAPPLE_ovr_2(target, pname, &params);
    end;
    
  end;
  
  glVertexArrayObjectAPPLE = sealed class
    public static function GetFuncAdr([MarshalAs(UnmanagedType.LPStr)] lpszProc: string): IntPtr;
    external 'opengl32.dll' name 'wglGetProcAddress';
    public static function GetFuncOrNil<T>(fadr: IntPtr) :=
    fadr=IntPtr.Zero ? default(T) :
    Marshal.GetDelegateForFunctionPointer&<T>(fadr);
    
    public z_BindVertexArrayAPPLE_adr := GetFuncAdr('glBindVertexArrayAPPLE');
    public z_BindVertexArrayAPPLE_ovr_0 := GetFuncOrNil&<procedure(&array: UInt32)>(z_BindVertexArrayAPPLE_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure BindVertexArrayAPPLE(&array: UInt32);
    begin
      z_BindVertexArrayAPPLE_ovr_0(&array);
    end;
    
    public z_DeleteVertexArraysAPPLE_adr := GetFuncAdr('glDeleteVertexArraysAPPLE');
    public z_DeleteVertexArraysAPPLE_ovr_0 := GetFuncOrNil&<procedure(n: Int32; var arrays: UInt32)>(z_DeleteVertexArraysAPPLE_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure DeleteVertexArraysAPPLE(n: Int32; arrays: array of UInt32);
    begin
      z_DeleteVertexArraysAPPLE_ovr_0(n, arrays[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure DeleteVertexArraysAPPLE(n: Int32; var arrays: UInt32);
    begin
      z_DeleteVertexArraysAPPLE_ovr_0(n, arrays);
    end;
    public z_DeleteVertexArraysAPPLE_ovr_2 := GetFuncOrNil&<procedure(n: Int32; arrays: IntPtr)>(z_DeleteVertexArraysAPPLE_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure DeleteVertexArraysAPPLE(n: Int32; arrays: IntPtr);
    begin
      z_DeleteVertexArraysAPPLE_ovr_2(n, arrays);
    end;
    
    public z_GenVertexArraysAPPLE_adr := GetFuncAdr('glGenVertexArraysAPPLE');
    public z_GenVertexArraysAPPLE_ovr_0 := GetFuncOrNil&<procedure(n: Int32; var arrays: UInt32)>(z_GenVertexArraysAPPLE_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GenVertexArraysAPPLE(n: Int32; arrays: array of UInt32);
    begin
      z_GenVertexArraysAPPLE_ovr_0(n, arrays[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GenVertexArraysAPPLE(n: Int32; var arrays: UInt32);
    begin
      z_GenVertexArraysAPPLE_ovr_0(n, arrays);
    end;
    public z_GenVertexArraysAPPLE_ovr_2 := GetFuncOrNil&<procedure(n: Int32; arrays: IntPtr)>(z_GenVertexArraysAPPLE_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GenVertexArraysAPPLE(n: Int32; arrays: IntPtr);
    begin
      z_GenVertexArraysAPPLE_ovr_2(n, arrays);
    end;
    
    public z_IsVertexArrayAPPLE_adr := GetFuncAdr('glIsVertexArrayAPPLE');
    public z_IsVertexArrayAPPLE_ovr_0 := GetFuncOrNil&<function(&array: UInt32): boolean>(z_IsVertexArrayAPPLE_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function IsVertexArrayAPPLE(&array: UInt32): boolean;
    begin
      Result := z_IsVertexArrayAPPLE_ovr_0(&array);
    end;
    
  end;
  
  glVertexArrayRangeAPPLE = sealed class
    public static function GetFuncAdr([MarshalAs(UnmanagedType.LPStr)] lpszProc: string): IntPtr;
    external 'opengl32.dll' name 'wglGetProcAddress';
    public static function GetFuncOrNil<T>(fadr: IntPtr) :=
    fadr=IntPtr.Zero ? default(T) :
    Marshal.GetDelegateForFunctionPointer&<T>(fadr);
    
    public z_VertexArrayRangeAPPLE_adr := GetFuncAdr('glVertexArrayRangeAPPLE');
    public z_VertexArrayRangeAPPLE_ovr_0 := GetFuncOrNil&<procedure(length: Int32; pointer: IntPtr)>(z_VertexArrayRangeAPPLE_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexArrayRangeAPPLE(length: Int32; pointer: IntPtr);
    begin
      z_VertexArrayRangeAPPLE_ovr_0(length, pointer);
    end;
    
    public z_FlushVertexArrayRangeAPPLE_adr := GetFuncAdr('glFlushVertexArrayRangeAPPLE');
    public z_FlushVertexArrayRangeAPPLE_ovr_0 := GetFuncOrNil&<procedure(length: Int32; pointer: IntPtr)>(z_FlushVertexArrayRangeAPPLE_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure FlushVertexArrayRangeAPPLE(length: Int32; pointer: IntPtr);
    begin
      z_FlushVertexArrayRangeAPPLE_ovr_0(length, pointer);
    end;
    
    public z_VertexArrayParameteriAPPLE_adr := GetFuncAdr('glVertexArrayParameteriAPPLE');
    public z_VertexArrayParameteriAPPLE_ovr_0 := GetFuncOrNil&<procedure(pname: VertexArrayPNameAPPLE; param: Int32)>(z_VertexArrayParameteriAPPLE_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexArrayParameteriAPPLE(pname: VertexArrayPNameAPPLE; param: Int32);
    begin
      z_VertexArrayParameteriAPPLE_ovr_0(pname, param);
    end;
    
  end;
  
  glVertexProgramEvaluatorsAPPLE = sealed class
    public static function GetFuncAdr([MarshalAs(UnmanagedType.LPStr)] lpszProc: string): IntPtr;
    external 'opengl32.dll' name 'wglGetProcAddress';
    public static function GetFuncOrNil<T>(fadr: IntPtr) :=
    fadr=IntPtr.Zero ? default(T) :
    Marshal.GetDelegateForFunctionPointer&<T>(fadr);
    
    public z_EnableVertexAttribAPPLE_adr := GetFuncAdr('glEnableVertexAttribAPPLE');
    public z_EnableVertexAttribAPPLE_ovr_0 := GetFuncOrNil&<procedure(index: UInt32; pname: DummyEnum)>(z_EnableVertexAttribAPPLE_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure EnableVertexAttribAPPLE(index: UInt32; pname: DummyEnum);
    begin
      z_EnableVertexAttribAPPLE_ovr_0(index, pname);
    end;
    
    public z_DisableVertexAttribAPPLE_adr := GetFuncAdr('glDisableVertexAttribAPPLE');
    public z_DisableVertexAttribAPPLE_ovr_0 := GetFuncOrNil&<procedure(index: UInt32; pname: DummyEnum)>(z_DisableVertexAttribAPPLE_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure DisableVertexAttribAPPLE(index: UInt32; pname: DummyEnum);
    begin
      z_DisableVertexAttribAPPLE_ovr_0(index, pname);
    end;
    
    public z_IsVertexAttribEnabledAPPLE_adr := GetFuncAdr('glIsVertexAttribEnabledAPPLE');
    public z_IsVertexAttribEnabledAPPLE_ovr_0 := GetFuncOrNil&<function(index: UInt32; pname: DummyEnum): boolean>(z_IsVertexAttribEnabledAPPLE_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function IsVertexAttribEnabledAPPLE(index: UInt32; pname: DummyEnum): boolean;
    begin
      Result := z_IsVertexAttribEnabledAPPLE_ovr_0(index, pname);
    end;
    
    public z_MapVertexAttrib1dAPPLE_adr := GetFuncAdr('glMapVertexAttrib1dAPPLE');
    public z_MapVertexAttrib1dAPPLE_ovr_0 := GetFuncOrNil&<procedure(index: UInt32; size: UInt32; u1: real; u2: real; stride: Int32; order: Int32; var points: real)>(z_MapVertexAttrib1dAPPLE_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MapVertexAttrib1dAPPLE(index: UInt32; size: UInt32; u1: real; u2: real; stride: Int32; order: Int32; points: array of real);
    begin
      z_MapVertexAttrib1dAPPLE_ovr_0(index, size, u1, u2, stride, order, points[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MapVertexAttrib1dAPPLE(index: UInt32; size: UInt32; u1: real; u2: real; stride: Int32; order: Int32; var points: real);
    begin
      z_MapVertexAttrib1dAPPLE_ovr_0(index, size, u1, u2, stride, order, points);
    end;
    public z_MapVertexAttrib1dAPPLE_ovr_2 := GetFuncOrNil&<procedure(index: UInt32; size: UInt32; u1: real; u2: real; stride: Int32; order: Int32; points: IntPtr)>(z_MapVertexAttrib1dAPPLE_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MapVertexAttrib1dAPPLE(index: UInt32; size: UInt32; u1: real; u2: real; stride: Int32; order: Int32; points: IntPtr);
    begin
      z_MapVertexAttrib1dAPPLE_ovr_2(index, size, u1, u2, stride, order, points);
    end;
    
    public z_MapVertexAttrib1fAPPLE_adr := GetFuncAdr('glMapVertexAttrib1fAPPLE');
    public z_MapVertexAttrib1fAPPLE_ovr_0 := GetFuncOrNil&<procedure(index: UInt32; size: UInt32; u1: single; u2: single; stride: Int32; order: Int32; var points: single)>(z_MapVertexAttrib1fAPPLE_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MapVertexAttrib1fAPPLE(index: UInt32; size: UInt32; u1: single; u2: single; stride: Int32; order: Int32; points: array of single);
    begin
      z_MapVertexAttrib1fAPPLE_ovr_0(index, size, u1, u2, stride, order, points[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MapVertexAttrib1fAPPLE(index: UInt32; size: UInt32; u1: single; u2: single; stride: Int32; order: Int32; var points: single);
    begin
      z_MapVertexAttrib1fAPPLE_ovr_0(index, size, u1, u2, stride, order, points);
    end;
    public z_MapVertexAttrib1fAPPLE_ovr_2 := GetFuncOrNil&<procedure(index: UInt32; size: UInt32; u1: single; u2: single; stride: Int32; order: Int32; points: IntPtr)>(z_MapVertexAttrib1fAPPLE_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MapVertexAttrib1fAPPLE(index: UInt32; size: UInt32; u1: single; u2: single; stride: Int32; order: Int32; points: IntPtr);
    begin
      z_MapVertexAttrib1fAPPLE_ovr_2(index, size, u1, u2, stride, order, points);
    end;
    
    public z_MapVertexAttrib2dAPPLE_adr := GetFuncAdr('glMapVertexAttrib2dAPPLE');
    public z_MapVertexAttrib2dAPPLE_ovr_0 := GetFuncOrNil&<procedure(index: UInt32; size: UInt32; u1: real; u2: real; ustride: Int32; uorder: Int32; v1: real; v2: real; vstride: Int32; vorder: Int32; var points: real)>(z_MapVertexAttrib2dAPPLE_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MapVertexAttrib2dAPPLE(index: UInt32; size: UInt32; u1: real; u2: real; ustride: Int32; uorder: Int32; v1: real; v2: real; vstride: Int32; vorder: Int32; points: array of real);
    begin
      z_MapVertexAttrib2dAPPLE_ovr_0(index, size, u1, u2, ustride, uorder, v1, v2, vstride, vorder, points[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MapVertexAttrib2dAPPLE(index: UInt32; size: UInt32; u1: real; u2: real; ustride: Int32; uorder: Int32; v1: real; v2: real; vstride: Int32; vorder: Int32; var points: real);
    begin
      z_MapVertexAttrib2dAPPLE_ovr_0(index, size, u1, u2, ustride, uorder, v1, v2, vstride, vorder, points);
    end;
    public z_MapVertexAttrib2dAPPLE_ovr_2 := GetFuncOrNil&<procedure(index: UInt32; size: UInt32; u1: real; u2: real; ustride: Int32; uorder: Int32; v1: real; v2: real; vstride: Int32; vorder: Int32; points: IntPtr)>(z_MapVertexAttrib2dAPPLE_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MapVertexAttrib2dAPPLE(index: UInt32; size: UInt32; u1: real; u2: real; ustride: Int32; uorder: Int32; v1: real; v2: real; vstride: Int32; vorder: Int32; points: IntPtr);
    begin
      z_MapVertexAttrib2dAPPLE_ovr_2(index, size, u1, u2, ustride, uorder, v1, v2, vstride, vorder, points);
    end;
    
    public z_MapVertexAttrib2fAPPLE_adr := GetFuncAdr('glMapVertexAttrib2fAPPLE');
    public z_MapVertexAttrib2fAPPLE_ovr_0 := GetFuncOrNil&<procedure(index: UInt32; size: UInt32; u1: single; u2: single; ustride: Int32; uorder: Int32; v1: single; v2: single; vstride: Int32; vorder: Int32; var points: single)>(z_MapVertexAttrib2fAPPLE_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MapVertexAttrib2fAPPLE(index: UInt32; size: UInt32; u1: single; u2: single; ustride: Int32; uorder: Int32; v1: single; v2: single; vstride: Int32; vorder: Int32; points: array of single);
    begin
      z_MapVertexAttrib2fAPPLE_ovr_0(index, size, u1, u2, ustride, uorder, v1, v2, vstride, vorder, points[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MapVertexAttrib2fAPPLE(index: UInt32; size: UInt32; u1: single; u2: single; ustride: Int32; uorder: Int32; v1: single; v2: single; vstride: Int32; vorder: Int32; var points: single);
    begin
      z_MapVertexAttrib2fAPPLE_ovr_0(index, size, u1, u2, ustride, uorder, v1, v2, vstride, vorder, points);
    end;
    public z_MapVertexAttrib2fAPPLE_ovr_2 := GetFuncOrNil&<procedure(index: UInt32; size: UInt32; u1: single; u2: single; ustride: Int32; uorder: Int32; v1: single; v2: single; vstride: Int32; vorder: Int32; points: IntPtr)>(z_MapVertexAttrib2fAPPLE_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MapVertexAttrib2fAPPLE(index: UInt32; size: UInt32; u1: single; u2: single; ustride: Int32; uorder: Int32; v1: single; v2: single; vstride: Int32; vorder: Int32; points: IntPtr);
    begin
      z_MapVertexAttrib2fAPPLE_ovr_2(index, size, u1, u2, ustride, uorder, v1, v2, vstride, vorder, points);
    end;
    
  end;
  
  glES2CompatibilityARB = sealed class
    public static function GetFuncAdr([MarshalAs(UnmanagedType.LPStr)] lpszProc: string): IntPtr;
    external 'opengl32.dll' name 'wglGetProcAddress';
    public static function GetFuncOrNil<T>(fadr: IntPtr) :=
    fadr=IntPtr.Zero ? default(T) :
    Marshal.GetDelegateForFunctionPointer&<T>(fadr);
    
    public z_ReleaseShaderCompiler_adr := GetFuncAdr('glReleaseShaderCompiler');
    public z_ReleaseShaderCompiler_ovr_0 := GetFuncOrNil&<procedure>(z_ReleaseShaderCompiler_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ReleaseShaderCompiler;
    begin
      z_ReleaseShaderCompiler_ovr_0;
    end;
    
    public z_ShaderBinary_adr := GetFuncAdr('glShaderBinary');
    public z_ShaderBinary_ovr_0 := GetFuncOrNil&<procedure(count: Int32; var shaders: UInt32; binaryformat: DummyEnum; binary: IntPtr; length: Int32)>(z_ShaderBinary_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ShaderBinary(count: Int32; shaders: array of UInt32; binaryformat: DummyEnum; binary: IntPtr; length: Int32);
    begin
      z_ShaderBinary_ovr_0(count, shaders[0], binaryformat, binary, length);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ShaderBinary(count: Int32; var shaders: UInt32; binaryformat: DummyEnum; binary: IntPtr; length: Int32);
    begin
      z_ShaderBinary_ovr_0(count, shaders, binaryformat, binary, length);
    end;
    public z_ShaderBinary_ovr_2 := GetFuncOrNil&<procedure(count: Int32; shaders: IntPtr; binaryformat: DummyEnum; binary: IntPtr; length: Int32)>(z_ShaderBinary_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ShaderBinary(count: Int32; shaders: IntPtr; binaryformat: DummyEnum; binary: IntPtr; length: Int32);
    begin
      z_ShaderBinary_ovr_2(count, shaders, binaryformat, binary, length);
    end;
    
    public z_GetShaderPrecisionFormat_adr := GetFuncAdr('glGetShaderPrecisionFormat');
    public z_GetShaderPrecisionFormat_ovr_0 := GetFuncOrNil&<procedure(_shadertype: ShaderType; _precisiontype: PrecisionType; var range: Int32; var precision: Int32)>(z_GetShaderPrecisionFormat_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetShaderPrecisionFormat(_shadertype: ShaderType; _precisiontype: PrecisionType; range: array of Int32; precision: array of Int32);
    begin
      z_GetShaderPrecisionFormat_ovr_0(_shadertype, _precisiontype, range[0], precision[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetShaderPrecisionFormat(_shadertype: ShaderType; _precisiontype: PrecisionType; range: array of Int32; var precision: Int32);
    begin
      z_GetShaderPrecisionFormat_ovr_0(_shadertype, _precisiontype, range[0], precision);
    end;
    public z_GetShaderPrecisionFormat_ovr_2 := GetFuncOrNil&<procedure(_shadertype: ShaderType; _precisiontype: PrecisionType; var range: Int32; precision: IntPtr)>(z_GetShaderPrecisionFormat_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetShaderPrecisionFormat(_shadertype: ShaderType; _precisiontype: PrecisionType; range: array of Int32; precision: IntPtr);
    begin
      z_GetShaderPrecisionFormat_ovr_2(_shadertype, _precisiontype, range[0], precision);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetShaderPrecisionFormat(_shadertype: ShaderType; _precisiontype: PrecisionType; var range: Int32; precision: array of Int32);
    begin
      z_GetShaderPrecisionFormat_ovr_0(_shadertype, _precisiontype, range, precision[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetShaderPrecisionFormat(_shadertype: ShaderType; _precisiontype: PrecisionType; var range: Int32; var precision: Int32);
    begin
      z_GetShaderPrecisionFormat_ovr_0(_shadertype, _precisiontype, range, precision);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetShaderPrecisionFormat(_shadertype: ShaderType; _precisiontype: PrecisionType; var range: Int32; precision: IntPtr);
    begin
      z_GetShaderPrecisionFormat_ovr_2(_shadertype, _precisiontype, range, precision);
    end;
    public z_GetShaderPrecisionFormat_ovr_6 := GetFuncOrNil&<procedure(_shadertype: ShaderType; _precisiontype: PrecisionType; range: IntPtr; var precision: Int32)>(z_GetShaderPrecisionFormat_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetShaderPrecisionFormat(_shadertype: ShaderType; _precisiontype: PrecisionType; range: IntPtr; precision: array of Int32);
    begin
      z_GetShaderPrecisionFormat_ovr_6(_shadertype, _precisiontype, range, precision[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetShaderPrecisionFormat(_shadertype: ShaderType; _precisiontype: PrecisionType; range: IntPtr; var precision: Int32);
    begin
      z_GetShaderPrecisionFormat_ovr_6(_shadertype, _precisiontype, range, precision);
    end;
    public z_GetShaderPrecisionFormat_ovr_8 := GetFuncOrNil&<procedure(_shadertype: ShaderType; _precisiontype: PrecisionType; range: IntPtr; precision: IntPtr)>(z_GetShaderPrecisionFormat_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetShaderPrecisionFormat(_shadertype: ShaderType; _precisiontype: PrecisionType; range: IntPtr; precision: IntPtr);
    begin
      z_GetShaderPrecisionFormat_ovr_8(_shadertype, _precisiontype, range, precision);
    end;
    
    public z_DepthRangef_adr := GetFuncAdr('glDepthRangef');
    public z_DepthRangef_ovr_0 := GetFuncOrNil&<procedure(n: single; f: single)>(z_DepthRangef_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure DepthRangef(n: single; f: single);
    begin
      z_DepthRangef_ovr_0(n, f);
    end;
    
    public z_ClearDepthf_adr := GetFuncAdr('glClearDepthf');
    public z_ClearDepthf_ovr_0 := GetFuncOrNil&<procedure(d: single)>(z_ClearDepthf_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ClearDepthf(d: single);
    begin
      z_ClearDepthf_ovr_0(d);
    end;
    
  end;
  
  glES31CompatibilityARB = sealed class
    public static function GetFuncAdr([MarshalAs(UnmanagedType.LPStr)] lpszProc: string): IntPtr;
    external 'opengl32.dll' name 'wglGetProcAddress';
    public static function GetFuncOrNil<T>(fadr: IntPtr) :=
    fadr=IntPtr.Zero ? default(T) :
    Marshal.GetDelegateForFunctionPointer&<T>(fadr);
    
    public z_MemoryBarrierByRegion_adr := GetFuncAdr('glMemoryBarrierByRegion');
    public z_MemoryBarrierByRegion_ovr_0 := GetFuncOrNil&<procedure(barriers: MemoryBarrierMask)>(z_MemoryBarrierByRegion_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MemoryBarrierByRegion(barriers: MemoryBarrierMask);
    begin
      z_MemoryBarrierByRegion_ovr_0(barriers);
    end;
    
  end;
  
  glES32CompatibilityARB = sealed class
    public static function GetFuncAdr([MarshalAs(UnmanagedType.LPStr)] lpszProc: string): IntPtr;
    external 'opengl32.dll' name 'wglGetProcAddress';
    public static function GetFuncOrNil<T>(fadr: IntPtr) :=
    fadr=IntPtr.Zero ? default(T) :
    Marshal.GetDelegateForFunctionPointer&<T>(fadr);
    
    public z_PrimitiveBoundingBoxARB_adr := GetFuncAdr('glPrimitiveBoundingBoxARB');
    public z_PrimitiveBoundingBoxARB_ovr_0 := GetFuncOrNil&<procedure(minX: single; minY: single; minZ: single; minW: single; maxX: single; maxY: single; maxZ: single; maxW: single)>(z_PrimitiveBoundingBoxARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure PrimitiveBoundingBoxARB(minX: single; minY: single; minZ: single; minW: single; maxX: single; maxY: single; maxZ: single; maxW: single);
    begin
      z_PrimitiveBoundingBoxARB_ovr_0(minX, minY, minZ, minW, maxX, maxY, maxZ, maxW);
    end;
    
  end;
  
  glBaseInstanceARB = sealed class
    public static function GetFuncAdr([MarshalAs(UnmanagedType.LPStr)] lpszProc: string): IntPtr;
    external 'opengl32.dll' name 'wglGetProcAddress';
    public static function GetFuncOrNil<T>(fadr: IntPtr) :=
    fadr=IntPtr.Zero ? default(T) :
    Marshal.GetDelegateForFunctionPointer&<T>(fadr);
    
    public z_DrawArraysInstancedBaseInstance_adr := GetFuncAdr('glDrawArraysInstancedBaseInstance');
    public z_DrawArraysInstancedBaseInstance_ovr_0 := GetFuncOrNil&<procedure(mode: PrimitiveType; first: Int32; count: Int32; instancecount: Int32; baseinstance: UInt32)>(z_DrawArraysInstancedBaseInstance_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure DrawArraysInstancedBaseInstance(mode: PrimitiveType; first: Int32; count: Int32; instancecount: Int32; baseinstance: UInt32);
    begin
      z_DrawArraysInstancedBaseInstance_ovr_0(mode, first, count, instancecount, baseinstance);
    end;
    
    public z_DrawElementsInstancedBaseInstance_adr := GetFuncAdr('glDrawElementsInstancedBaseInstance');
    public z_DrawElementsInstancedBaseInstance_ovr_0 := GetFuncOrNil&<procedure(mode: PrimitiveType; count: Int32; &type: PrimitiveType; indices: IntPtr; instancecount: Int32; baseinstance: UInt32)>(z_DrawElementsInstancedBaseInstance_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure DrawElementsInstancedBaseInstance(mode: PrimitiveType; count: Int32; &type: PrimitiveType; indices: IntPtr; instancecount: Int32; baseinstance: UInt32);
    begin
      z_DrawElementsInstancedBaseInstance_ovr_0(mode, count, &type, indices, instancecount, baseinstance);
    end;
    
    public z_DrawElementsInstancedBaseVertexBaseInstance_adr := GetFuncAdr('glDrawElementsInstancedBaseVertexBaseInstance');
    public z_DrawElementsInstancedBaseVertexBaseInstance_ovr_0 := GetFuncOrNil&<procedure(mode: PrimitiveType; count: Int32; &type: DrawElementsType; indices: IntPtr; instancecount: Int32; basevertex: Int32; baseinstance: UInt32)>(z_DrawElementsInstancedBaseVertexBaseInstance_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure DrawElementsInstancedBaseVertexBaseInstance(mode: PrimitiveType; count: Int32; &type: DrawElementsType; indices: IntPtr; instancecount: Int32; basevertex: Int32; baseinstance: UInt32);
    begin
      z_DrawElementsInstancedBaseVertexBaseInstance_ovr_0(mode, count, &type, indices, instancecount, basevertex, baseinstance);
    end;
    
  end;
  
  glBindlessTextureARB = sealed class
    public static function GetFuncAdr([MarshalAs(UnmanagedType.LPStr)] lpszProc: string): IntPtr;
    external 'opengl32.dll' name 'wglGetProcAddress';
    public static function GetFuncOrNil<T>(fadr: IntPtr) :=
    fadr=IntPtr.Zero ? default(T) :
    Marshal.GetDelegateForFunctionPointer&<T>(fadr);
    
    public z_GetTextureHandleARB_adr := GetFuncAdr('glGetTextureHandleARB');
    public z_GetTextureHandleARB_ovr_0 := GetFuncOrNil&<function(texture: UInt32): UInt64>(z_GetTextureHandleARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetTextureHandleARB(texture: UInt32): UInt64;
    begin
      Result := z_GetTextureHandleARB_ovr_0(texture);
    end;
    
    public z_GetTextureSamplerHandleARB_adr := GetFuncAdr('glGetTextureSamplerHandleARB');
    public z_GetTextureSamplerHandleARB_ovr_0 := GetFuncOrNil&<function(texture: UInt32; sampler: UInt32): UInt64>(z_GetTextureSamplerHandleARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetTextureSamplerHandleARB(texture: UInt32; sampler: UInt32): UInt64;
    begin
      Result := z_GetTextureSamplerHandleARB_ovr_0(texture, sampler);
    end;
    
    public z_MakeTextureHandleResidentARB_adr := GetFuncAdr('glMakeTextureHandleResidentARB');
    public z_MakeTextureHandleResidentARB_ovr_0 := GetFuncOrNil&<procedure(handle: UInt64)>(z_MakeTextureHandleResidentARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MakeTextureHandleResidentARB(handle: UInt64);
    begin
      z_MakeTextureHandleResidentARB_ovr_0(handle);
    end;
    
    public z_MakeTextureHandleNonResidentARB_adr := GetFuncAdr('glMakeTextureHandleNonResidentARB');
    public z_MakeTextureHandleNonResidentARB_ovr_0 := GetFuncOrNil&<procedure(handle: UInt64)>(z_MakeTextureHandleNonResidentARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MakeTextureHandleNonResidentARB(handle: UInt64);
    begin
      z_MakeTextureHandleNonResidentARB_ovr_0(handle);
    end;
    
    public z_GetImageHandleARB_adr := GetFuncAdr('glGetImageHandleARB');
    public z_GetImageHandleARB_ovr_0 := GetFuncOrNil&<function(texture: UInt32; level: Int32; layered: boolean; layer: Int32; format: PixelFormat): UInt64>(z_GetImageHandleARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetImageHandleARB(texture: UInt32; level: Int32; layered: boolean; layer: Int32; format: PixelFormat): UInt64;
    begin
      Result := z_GetImageHandleARB_ovr_0(texture, level, layered, layer, format);
    end;
    
    public z_MakeImageHandleResidentARB_adr := GetFuncAdr('glMakeImageHandleResidentARB');
    public z_MakeImageHandleResidentARB_ovr_0 := GetFuncOrNil&<procedure(handle: UInt64; access: DummyEnum)>(z_MakeImageHandleResidentARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MakeImageHandleResidentARB(handle: UInt64; access: DummyEnum);
    begin
      z_MakeImageHandleResidentARB_ovr_0(handle, access);
    end;
    
    public z_MakeImageHandleNonResidentARB_adr := GetFuncAdr('glMakeImageHandleNonResidentARB');
    public z_MakeImageHandleNonResidentARB_ovr_0 := GetFuncOrNil&<procedure(handle: UInt64)>(z_MakeImageHandleNonResidentARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MakeImageHandleNonResidentARB(handle: UInt64);
    begin
      z_MakeImageHandleNonResidentARB_ovr_0(handle);
    end;
    
    public z_UniformHandleui64ARB_adr := GetFuncAdr('glUniformHandleui64ARB');
    public z_UniformHandleui64ARB_ovr_0 := GetFuncOrNil&<procedure(location: Int32; value: UInt64)>(z_UniformHandleui64ARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure UniformHandleui64ARB(location: Int32; value: UInt64);
    begin
      z_UniformHandleui64ARB_ovr_0(location, value);
    end;
    
    public z_UniformHandleui64vARB_adr := GetFuncAdr('glUniformHandleui64vARB');
    public z_UniformHandleui64vARB_ovr_0 := GetFuncOrNil&<procedure(location: Int32; count: Int32; var value: UInt64)>(z_UniformHandleui64vARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure UniformHandleui64vARB(location: Int32; count: Int32; value: array of UInt64);
    begin
      z_UniformHandleui64vARB_ovr_0(location, count, value[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure UniformHandleui64vARB(location: Int32; count: Int32; var value: UInt64);
    begin
      z_UniformHandleui64vARB_ovr_0(location, count, value);
    end;
    public z_UniformHandleui64vARB_ovr_2 := GetFuncOrNil&<procedure(location: Int32; count: Int32; value: IntPtr)>(z_UniformHandleui64vARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure UniformHandleui64vARB(location: Int32; count: Int32; value: IntPtr);
    begin
      z_UniformHandleui64vARB_ovr_2(location, count, value);
    end;
    
    public z_ProgramUniformHandleui64ARB_adr := GetFuncAdr('glProgramUniformHandleui64ARB');
    public z_ProgramUniformHandleui64ARB_ovr_0 := GetFuncOrNil&<procedure(&program: UInt32; location: Int32; value: UInt64)>(z_ProgramUniformHandleui64ARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniformHandleui64ARB(&program: UInt32; location: Int32; value: UInt64);
    begin
      z_ProgramUniformHandleui64ARB_ovr_0(&program, location, value);
    end;
    
    public z_ProgramUniformHandleui64vARB_adr := GetFuncAdr('glProgramUniformHandleui64vARB');
    public z_ProgramUniformHandleui64vARB_ovr_0 := GetFuncOrNil&<procedure(&program: UInt32; location: Int32; count: Int32; var values: UInt64)>(z_ProgramUniformHandleui64vARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniformHandleui64vARB(&program: UInt32; location: Int32; count: Int32; values: array of UInt64);
    begin
      z_ProgramUniformHandleui64vARB_ovr_0(&program, location, count, values[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniformHandleui64vARB(&program: UInt32; location: Int32; count: Int32; var values: UInt64);
    begin
      z_ProgramUniformHandleui64vARB_ovr_0(&program, location, count, values);
    end;
    public z_ProgramUniformHandleui64vARB_ovr_2 := GetFuncOrNil&<procedure(&program: UInt32; location: Int32; count: Int32; values: IntPtr)>(z_ProgramUniformHandleui64vARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniformHandleui64vARB(&program: UInt32; location: Int32; count: Int32; values: IntPtr);
    begin
      z_ProgramUniformHandleui64vARB_ovr_2(&program, location, count, values);
    end;
    
    public z_IsTextureHandleResidentARB_adr := GetFuncAdr('glIsTextureHandleResidentARB');
    public z_IsTextureHandleResidentARB_ovr_0 := GetFuncOrNil&<function(handle: UInt64): boolean>(z_IsTextureHandleResidentARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function IsTextureHandleResidentARB(handle: UInt64): boolean;
    begin
      Result := z_IsTextureHandleResidentARB_ovr_0(handle);
    end;
    
    public z_IsImageHandleResidentARB_adr := GetFuncAdr('glIsImageHandleResidentARB');
    public z_IsImageHandleResidentARB_ovr_0 := GetFuncOrNil&<function(handle: UInt64): boolean>(z_IsImageHandleResidentARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function IsImageHandleResidentARB(handle: UInt64): boolean;
    begin
      Result := z_IsImageHandleResidentARB_ovr_0(handle);
    end;
    
    public z_VertexAttribL1ui64ARB_adr := GetFuncAdr('glVertexAttribL1ui64ARB');
    public z_VertexAttribL1ui64ARB_ovr_0 := GetFuncOrNil&<procedure(index: UInt32; x: UInt64)>(z_VertexAttribL1ui64ARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttribL1ui64ARB(index: UInt32; x: UInt64);
    begin
      z_VertexAttribL1ui64ARB_ovr_0(index, x);
    end;
    
    public z_VertexAttribL1ui64vARB_adr := GetFuncAdr('glVertexAttribL1ui64vARB');
    public z_VertexAttribL1ui64vARB_ovr_0 := GetFuncOrNil&<procedure(index: UInt32; var v: UInt64)>(z_VertexAttribL1ui64vARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttribL1ui64vARB(index: UInt32; v: array of UInt64);
    begin
      z_VertexAttribL1ui64vARB_ovr_0(index, v[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttribL1ui64vARB(index: UInt32; var v: UInt64);
    begin
      z_VertexAttribL1ui64vARB_ovr_0(index, v);
    end;
    public z_VertexAttribL1ui64vARB_ovr_2 := GetFuncOrNil&<procedure(index: UInt32; v: IntPtr)>(z_VertexAttribL1ui64vARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttribL1ui64vARB(index: UInt32; v: IntPtr);
    begin
      z_VertexAttribL1ui64vARB_ovr_2(index, v);
    end;
    
    public z_GetVertexAttribLui64vARB_adr := GetFuncAdr('glGetVertexAttribLui64vARB');
    public z_GetVertexAttribLui64vARB_ovr_0 := GetFuncOrNil&<procedure(index: UInt32; pname: VertexAttribEnum; var &params: UInt64)>(z_GetVertexAttribLui64vARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetVertexAttribLui64vARB(index: UInt32; pname: VertexAttribEnum; &params: array of UInt64);
    begin
      z_GetVertexAttribLui64vARB_ovr_0(index, pname, &params[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetVertexAttribLui64vARB(index: UInt32; pname: VertexAttribEnum; var &params: UInt64);
    begin
      z_GetVertexAttribLui64vARB_ovr_0(index, pname, &params);
    end;
    public z_GetVertexAttribLui64vARB_ovr_2 := GetFuncOrNil&<procedure(index: UInt32; pname: VertexAttribEnum; &params: IntPtr)>(z_GetVertexAttribLui64vARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetVertexAttribLui64vARB(index: UInt32; pname: VertexAttribEnum; &params: IntPtr);
    begin
      z_GetVertexAttribLui64vARB_ovr_2(index, pname, &params);
    end;
    
  end;
  
  glBlendFuncExtendedARB = sealed class
    public static function GetFuncAdr([MarshalAs(UnmanagedType.LPStr)] lpszProc: string): IntPtr;
    external 'opengl32.dll' name 'wglGetProcAddress';
    public static function GetFuncOrNil<T>(fadr: IntPtr) :=
    fadr=IntPtr.Zero ? default(T) :
    Marshal.GetDelegateForFunctionPointer&<T>(fadr);
    
    public z_BindFragDataLocationIndexed_adr := GetFuncAdr('glBindFragDataLocationIndexed');
    public z_BindFragDataLocationIndexed_ovr_0 := GetFuncOrNil&<procedure(&program: ProgramName; colorNumber: UInt32; index: UInt32; name: IntPtr)>(z_BindFragDataLocationIndexed_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure BindFragDataLocationIndexed(&program: ProgramName; colorNumber: UInt32; index: UInt32; name: string);
    begin
      var par_4_str_ptr := Marshal.StringToHGlobalAnsi(name);
      z_BindFragDataLocationIndexed_ovr_0(&program, colorNumber, index, par_4_str_ptr);
      Marshal.FreeHGlobal(par_4_str_ptr);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure BindFragDataLocationIndexed(&program: ProgramName; colorNumber: UInt32; index: UInt32; name: IntPtr);
    begin
      z_BindFragDataLocationIndexed_ovr_0(&program, colorNumber, index, name);
    end;
    
    public z_GetFragDataIndex_adr := GetFuncAdr('glGetFragDataIndex');
    public z_GetFragDataIndex_ovr_0 := GetFuncOrNil&<function(&program: ProgramName; name: IntPtr): Int32>(z_GetFragDataIndex_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetFragDataIndex(&program: ProgramName; name: string): Int32;
    begin
      var par_2_str_ptr := Marshal.StringToHGlobalAnsi(name);
      Result := z_GetFragDataIndex_ovr_0(&program, par_2_str_ptr);
      Marshal.FreeHGlobal(par_2_str_ptr);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetFragDataIndex(&program: ProgramName; name: IntPtr): Int32;
    begin
      Result := z_GetFragDataIndex_ovr_0(&program, name);
    end;
    
  end;
  
  glBufferStorageARB = sealed class
    public static function GetFuncAdr([MarshalAs(UnmanagedType.LPStr)] lpszProc: string): IntPtr;
    external 'opengl32.dll' name 'wglGetProcAddress';
    public static function GetFuncOrNil<T>(fadr: IntPtr) :=
    fadr=IntPtr.Zero ? default(T) :
    Marshal.GetDelegateForFunctionPointer&<T>(fadr);
    
    public z_BufferStorage_adr := GetFuncAdr('glBufferStorage');
    public z_BufferStorage_ovr_0 := GetFuncOrNil&<procedure(target: BufferStorageTarget; size: IntPtr; data: IntPtr; flags: BufferStorageMask)>(z_BufferStorage_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure BufferStorage(target: BufferStorageTarget; size: IntPtr; data: IntPtr; flags: BufferStorageMask);
    begin
      z_BufferStorage_ovr_0(target, size, data, flags);
    end;
    
  end;
  
  glClEventARB = sealed class
    public static function GetFuncAdr([MarshalAs(UnmanagedType.LPStr)] lpszProc: string): IntPtr;
    external 'opengl32.dll' name 'wglGetProcAddress';
    public static function GetFuncOrNil<T>(fadr: IntPtr) :=
    fadr=IntPtr.Zero ? default(T) :
    Marshal.GetDelegateForFunctionPointer&<T>(fadr);
    
    public z_CreateSyncFromCLeventARB_adr := GetFuncAdr('glCreateSyncFromCLeventARB');
    public z_CreateSyncFromCLeventARB_ovr_0 := GetFuncOrNil&<function(var context: cl_context; var &event: cl_event; flags: DummyFlags): GLsync>(z_CreateSyncFromCLeventARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function CreateSyncFromCLeventARB(context: array of cl_context; &event: array of cl_event; flags: DummyFlags): GLsync;
    begin
      Result := z_CreateSyncFromCLeventARB_ovr_0(context[0], &event[0], flags);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function CreateSyncFromCLeventARB(context: array of cl_context; var &event: cl_event; flags: DummyFlags): GLsync;
    begin
      Result := z_CreateSyncFromCLeventARB_ovr_0(context[0], &event, flags);
    end;
    public z_CreateSyncFromCLeventARB_ovr_2 := GetFuncOrNil&<function(var context: cl_context; &event: IntPtr; flags: DummyFlags): GLsync>(z_CreateSyncFromCLeventARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function CreateSyncFromCLeventARB(context: array of cl_context; &event: IntPtr; flags: DummyFlags): GLsync;
    begin
      Result := z_CreateSyncFromCLeventARB_ovr_2(context[0], &event, flags);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function CreateSyncFromCLeventARB(var context: cl_context; &event: array of cl_event; flags: DummyFlags): GLsync;
    begin
      Result := z_CreateSyncFromCLeventARB_ovr_0(context, &event[0], flags);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function CreateSyncFromCLeventARB(var context: cl_context; var &event: cl_event; flags: DummyFlags): GLsync;
    begin
      Result := z_CreateSyncFromCLeventARB_ovr_0(context, &event, flags);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function CreateSyncFromCLeventARB(var context: cl_context; &event: IntPtr; flags: DummyFlags): GLsync;
    begin
      Result := z_CreateSyncFromCLeventARB_ovr_2(context, &event, flags);
    end;
    public z_CreateSyncFromCLeventARB_ovr_6 := GetFuncOrNil&<function(context: IntPtr; var &event: cl_event; flags: DummyFlags): GLsync>(z_CreateSyncFromCLeventARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function CreateSyncFromCLeventARB(context: IntPtr; &event: array of cl_event; flags: DummyFlags): GLsync;
    begin
      Result := z_CreateSyncFromCLeventARB_ovr_6(context, &event[0], flags);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function CreateSyncFromCLeventARB(context: IntPtr; var &event: cl_event; flags: DummyFlags): GLsync;
    begin
      Result := z_CreateSyncFromCLeventARB_ovr_6(context, &event, flags);
    end;
    public z_CreateSyncFromCLeventARB_ovr_8 := GetFuncOrNil&<function(context: IntPtr; &event: IntPtr; flags: DummyFlags): GLsync>(z_CreateSyncFromCLeventARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function CreateSyncFromCLeventARB(context: IntPtr; &event: IntPtr; flags: DummyFlags): GLsync;
    begin
      Result := z_CreateSyncFromCLeventARB_ovr_8(context, &event, flags);
    end;
    
  end;
  
  glClearBufferObjectARB = sealed class
    public static function GetFuncAdr([MarshalAs(UnmanagedType.LPStr)] lpszProc: string): IntPtr;
    external 'opengl32.dll' name 'wglGetProcAddress';
    public static function GetFuncOrNil<T>(fadr: IntPtr) :=
    fadr=IntPtr.Zero ? default(T) :
    Marshal.GetDelegateForFunctionPointer&<T>(fadr);
    
    public z_ClearBufferData_adr := GetFuncAdr('glClearBufferData');
    public z_ClearBufferData_ovr_0 := GetFuncOrNil&<procedure(target: BufferStorageTarget; _internalformat: InternalFormat; format: PixelFormat; &type: PixelType; data: IntPtr)>(z_ClearBufferData_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ClearBufferData(target: BufferStorageTarget; _internalformat: InternalFormat; format: PixelFormat; &type: PixelType; data: IntPtr);
    begin
      z_ClearBufferData_ovr_0(target, _internalformat, format, &type, data);
    end;
    
    public z_ClearBufferSubData_adr := GetFuncAdr('glClearBufferSubData');
    public z_ClearBufferSubData_ovr_0 := GetFuncOrNil&<procedure(target: BufferTargetARB; _internalformat: InternalFormat; offset: IntPtr; size: IntPtr; format: PixelFormat; &type: PixelType; data: IntPtr)>(z_ClearBufferSubData_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ClearBufferSubData(target: BufferTargetARB; _internalformat: InternalFormat; offset: IntPtr; size: IntPtr; format: PixelFormat; &type: PixelType; data: IntPtr);
    begin
      z_ClearBufferSubData_ovr_0(target, _internalformat, offset, size, format, &type, data);
    end;
    
  end;
  
  glClearTextureARB = sealed class
    public static function GetFuncAdr([MarshalAs(UnmanagedType.LPStr)] lpszProc: string): IntPtr;
    external 'opengl32.dll' name 'wglGetProcAddress';
    public static function GetFuncOrNil<T>(fadr: IntPtr) :=
    fadr=IntPtr.Zero ? default(T) :
    Marshal.GetDelegateForFunctionPointer&<T>(fadr);
    
    public z_ClearTexImage_adr := GetFuncAdr('glClearTexImage');
    public z_ClearTexImage_ovr_0 := GetFuncOrNil&<procedure(texture: UInt32; level: Int32; format: PixelFormat; &type: PixelType; data: IntPtr)>(z_ClearTexImage_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ClearTexImage(texture: UInt32; level: Int32; format: PixelFormat; &type: PixelType; data: IntPtr);
    begin
      z_ClearTexImage_ovr_0(texture, level, format, &type, data);
    end;
    
    public z_ClearTexSubImage_adr := GetFuncAdr('glClearTexSubImage');
    public z_ClearTexSubImage_ovr_0 := GetFuncOrNil&<procedure(texture: UInt32; level: Int32; xoffset: Int32; yoffset: Int32; zoffset: Int32; width: Int32; height: Int32; depth: Int32; format: PixelFormat; &type: PixelType; data: IntPtr)>(z_ClearTexSubImage_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ClearTexSubImage(texture: UInt32; level: Int32; xoffset: Int32; yoffset: Int32; zoffset: Int32; width: Int32; height: Int32; depth: Int32; format: PixelFormat; &type: PixelType; data: IntPtr);
    begin
      z_ClearTexSubImage_ovr_0(texture, level, xoffset, yoffset, zoffset, width, height, depth, format, &type, data);
    end;
    
  end;
  
  glClipControlARB = sealed class
    public static function GetFuncAdr([MarshalAs(UnmanagedType.LPStr)] lpszProc: string): IntPtr;
    external 'opengl32.dll' name 'wglGetProcAddress';
    public static function GetFuncOrNil<T>(fadr: IntPtr) :=
    fadr=IntPtr.Zero ? default(T) :
    Marshal.GetDelegateForFunctionPointer&<T>(fadr);
    
    public z_ClipControl_adr := GetFuncAdr('glClipControl');
    public z_ClipControl_ovr_0 := GetFuncOrNil&<procedure(origin: ClipControlOrigin; depth: ClipControlDepth)>(z_ClipControl_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ClipControl(origin: ClipControlOrigin; depth: ClipControlDepth);
    begin
      z_ClipControl_ovr_0(origin, depth);
    end;
    
  end;
  
  glColorBufferFloatARB = sealed class
    public static function GetFuncAdr([MarshalAs(UnmanagedType.LPStr)] lpszProc: string): IntPtr;
    external 'opengl32.dll' name 'wglGetProcAddress';
    public static function GetFuncOrNil<T>(fadr: IntPtr) :=
    fadr=IntPtr.Zero ? default(T) :
    Marshal.GetDelegateForFunctionPointer&<T>(fadr);
    
    public z_ClampColorARB_adr := GetFuncAdr('glClampColorARB');
    public z_ClampColorARB_ovr_0 := GetFuncOrNil&<procedure(target: ClampColorTargetARB; clamp: ClampColorModeARB)>(z_ClampColorARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ClampColorARB(target: ClampColorTargetARB; clamp: ClampColorModeARB);
    begin
      z_ClampColorARB_ovr_0(target, clamp);
    end;
    
  end;
  
  glComputeShaderARB = sealed class
    public static function GetFuncAdr([MarshalAs(UnmanagedType.LPStr)] lpszProc: string): IntPtr;
    external 'opengl32.dll' name 'wglGetProcAddress';
    public static function GetFuncOrNil<T>(fadr: IntPtr) :=
    fadr=IntPtr.Zero ? default(T) :
    Marshal.GetDelegateForFunctionPointer&<T>(fadr);
    
    public z_DispatchCompute_adr := GetFuncAdr('glDispatchCompute');
    public z_DispatchCompute_ovr_0 := GetFuncOrNil&<procedure(num_groups_x: UInt32; num_groups_y: UInt32; num_groups_z: UInt32)>(z_DispatchCompute_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure DispatchCompute(num_groups_x: UInt32; num_groups_y: UInt32; num_groups_z: UInt32);
    begin
      z_DispatchCompute_ovr_0(num_groups_x, num_groups_y, num_groups_z);
    end;
    
    public z_DispatchComputeIndirect_adr := GetFuncAdr('glDispatchComputeIndirect');
    public z_DispatchComputeIndirect_ovr_0 := GetFuncOrNil&<procedure(indirect: IntPtr)>(z_DispatchComputeIndirect_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure DispatchComputeIndirect(indirect: IntPtr);
    begin
      z_DispatchComputeIndirect_ovr_0(indirect);
    end;
    
  end;
  
  glComputeVariableGroupSizeARB = sealed class
    public static function GetFuncAdr([MarshalAs(UnmanagedType.LPStr)] lpszProc: string): IntPtr;
    external 'opengl32.dll' name 'wglGetProcAddress';
    public static function GetFuncOrNil<T>(fadr: IntPtr) :=
    fadr=IntPtr.Zero ? default(T) :
    Marshal.GetDelegateForFunctionPointer&<T>(fadr);
    
    public z_DispatchComputeGroupSizeARB_adr := GetFuncAdr('glDispatchComputeGroupSizeARB');
    public z_DispatchComputeGroupSizeARB_ovr_0 := GetFuncOrNil&<procedure(num_groups_x: UInt32; num_groups_y: UInt32; num_groups_z: UInt32; group_size_x: UInt32; group_size_y: UInt32; group_size_z: UInt32)>(z_DispatchComputeGroupSizeARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure DispatchComputeGroupSizeARB(num_groups_x: UInt32; num_groups_y: UInt32; num_groups_z: UInt32; group_size_x: UInt32; group_size_y: UInt32; group_size_z: UInt32);
    begin
      z_DispatchComputeGroupSizeARB_ovr_0(num_groups_x, num_groups_y, num_groups_z, group_size_x, group_size_y, group_size_z);
    end;
    
  end;
  
  glCopyBufferARB = sealed class
    public static function GetFuncAdr([MarshalAs(UnmanagedType.LPStr)] lpszProc: string): IntPtr;
    external 'opengl32.dll' name 'wglGetProcAddress';
    public static function GetFuncOrNil<T>(fadr: IntPtr) :=
    fadr=IntPtr.Zero ? default(T) :
    Marshal.GetDelegateForFunctionPointer&<T>(fadr);
    
    public z_CopyBufferSubData_adr := GetFuncAdr('glCopyBufferSubData');
    public z_CopyBufferSubData_ovr_0 := GetFuncOrNil&<procedure(readTarget: CopyBufferSubDataTarget; writeTarget: CopyBufferSubDataTarget; readOffset: IntPtr; writeOffset: IntPtr; size: IntPtr)>(z_CopyBufferSubData_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure CopyBufferSubData(readTarget: CopyBufferSubDataTarget; writeTarget: CopyBufferSubDataTarget; readOffset: IntPtr; writeOffset: IntPtr; size: IntPtr);
    begin
      z_CopyBufferSubData_ovr_0(readTarget, writeTarget, readOffset, writeOffset, size);
    end;
    
  end;
  
  glCopyImageARB = sealed class
    public static function GetFuncAdr([MarshalAs(UnmanagedType.LPStr)] lpszProc: string): IntPtr;
    external 'opengl32.dll' name 'wglGetProcAddress';
    public static function GetFuncOrNil<T>(fadr: IntPtr) :=
    fadr=IntPtr.Zero ? default(T) :
    Marshal.GetDelegateForFunctionPointer&<T>(fadr);
    
    public z_CopyImageSubData_adr := GetFuncAdr('glCopyImageSubData');
    public z_CopyImageSubData_ovr_0 := GetFuncOrNil&<procedure(srcName: UInt32; srcTarget: CopyImageSubDataTarget; srcLevel: Int32; srcX: Int32; srcY: Int32; srcZ: Int32; dstName: UInt32; dstTarget: CopyImageSubDataTarget; dstLevel: Int32; dstX: Int32; dstY: Int32; dstZ: Int32; srcWidth: Int32; srcHeight: Int32; srcDepth: Int32)>(z_CopyImageSubData_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure CopyImageSubData(srcName: UInt32; srcTarget: CopyImageSubDataTarget; srcLevel: Int32; srcX: Int32; srcY: Int32; srcZ: Int32; dstName: UInt32; dstTarget: CopyImageSubDataTarget; dstLevel: Int32; dstX: Int32; dstY: Int32; dstZ: Int32; srcWidth: Int32; srcHeight: Int32; srcDepth: Int32);
    begin
      z_CopyImageSubData_ovr_0(srcName, srcTarget, srcLevel, srcX, srcY, srcZ, dstName, dstTarget, dstLevel, dstX, dstY, dstZ, srcWidth, srcHeight, srcDepth);
    end;
    
  end;
  
  glDebugOutputARB = sealed class
    public static function GetFuncAdr([MarshalAs(UnmanagedType.LPStr)] lpszProc: string): IntPtr;
    external 'opengl32.dll' name 'wglGetProcAddress';
    public static function GetFuncOrNil<T>(fadr: IntPtr) :=
    fadr=IntPtr.Zero ? default(T) :
    Marshal.GetDelegateForFunctionPointer&<T>(fadr);
    
    public z_DebugMessageControlARB_adr := GetFuncAdr('glDebugMessageControlARB');
    public z_DebugMessageControlARB_ovr_0 := GetFuncOrNil&<procedure(source: DebugSource; &type: DebugType; severity: DebugSeverity; count: Int32; var ids: UInt32; enabled: boolean)>(z_DebugMessageControlARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure DebugMessageControlARB(source: DebugSource; &type: DebugType; severity: DebugSeverity; count: Int32; ids: array of UInt32; enabled: boolean);
    begin
      z_DebugMessageControlARB_ovr_0(source, &type, severity, count, ids[0], enabled);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure DebugMessageControlARB(source: DebugSource; &type: DebugType; severity: DebugSeverity; count: Int32; var ids: UInt32; enabled: boolean);
    begin
      z_DebugMessageControlARB_ovr_0(source, &type, severity, count, ids, enabled);
    end;
    public z_DebugMessageControlARB_ovr_2 := GetFuncOrNil&<procedure(source: DebugSource; &type: DebugType; severity: DebugSeverity; count: Int32; ids: IntPtr; enabled: boolean)>(z_DebugMessageControlARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure DebugMessageControlARB(source: DebugSource; &type: DebugType; severity: DebugSeverity; count: Int32; ids: IntPtr; enabled: boolean);
    begin
      z_DebugMessageControlARB_ovr_2(source, &type, severity, count, ids, enabled);
    end;
    
    public z_DebugMessageInsertARB_adr := GetFuncAdr('glDebugMessageInsertARB');
    public z_DebugMessageInsertARB_ovr_0 := GetFuncOrNil&<procedure(source: DebugSource; &type: DebugType; id: UInt32; severity: DebugSeverity; length: Int32; buf: IntPtr)>(z_DebugMessageInsertARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure DebugMessageInsertARB(source: DebugSource; &type: DebugType; id: UInt32; severity: DebugSeverity; length: Int32; buf: string);
    begin
      var par_6_str_ptr := Marshal.StringToHGlobalAnsi(buf);
      z_DebugMessageInsertARB_ovr_0(source, &type, id, severity, length, par_6_str_ptr);
      Marshal.FreeHGlobal(par_6_str_ptr);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure DebugMessageInsertARB(source: DebugSource; &type: DebugType; id: UInt32; severity: DebugSeverity; length: Int32; buf: IntPtr);
    begin
      z_DebugMessageInsertARB_ovr_0(source, &type, id, severity, length, buf);
    end;
    
    public z_DebugMessageCallbackARB_adr := GetFuncAdr('glDebugMessageCallbackARB');
    public z_DebugMessageCallbackARB_ovr_0 := GetFuncOrNil&<procedure(callback: GLDEBUGPROC; userParam: IntPtr)>(z_DebugMessageCallbackARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure DebugMessageCallbackARB(callback: GLDEBUGPROC; userParam: IntPtr);
    begin
      z_DebugMessageCallbackARB_ovr_0(callback, userParam);
    end;
    
    public z_GetDebugMessageLogARB_adr := GetFuncAdr('glGetDebugMessageLogARB');
    public z_GetDebugMessageLogARB_ovr_0 := GetFuncOrNil&<function(count: UInt32; bufSize: Int32; var sources: DebugSource; var types: DebugType; var ids: UInt32; var severities: DebugSeverity; var lengths: Int32; messageLog: IntPtr): UInt32>(z_GetDebugMessageLogARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetDebugMessageLogARB(count: UInt32; bufSize: Int32; var sources: DebugSource; var types: DebugType; var ids: UInt32; var severities: DebugSeverity; var lengths: Int32; messageLog: IntPtr): UInt32;
    begin
      Result := z_GetDebugMessageLogARB_ovr_0(count, bufSize, sources, types, ids, severities, lengths, messageLog);
    end;
    public z_GetDebugMessageLogARB_ovr_1 := GetFuncOrNil&<function(count: UInt32; bufSize: Int32; sources: IntPtr; types: IntPtr; ids: IntPtr; severities: IntPtr; lengths: IntPtr; messageLog: IntPtr): UInt32>(z_GetDebugMessageLogARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetDebugMessageLogARB(count: UInt32; bufSize: Int32; sources: IntPtr; types: IntPtr; ids: IntPtr; severities: IntPtr; lengths: IntPtr; messageLog: IntPtr): UInt32;
    begin
      Result := z_GetDebugMessageLogARB_ovr_1(count, bufSize, sources, types, ids, severities, lengths, messageLog);
    end;
    
  end;
  
  glDirectStateAccessARB = sealed class
    public static function GetFuncAdr([MarshalAs(UnmanagedType.LPStr)] lpszProc: string): IntPtr;
    external 'opengl32.dll' name 'wglGetProcAddress';
    public static function GetFuncOrNil<T>(fadr: IntPtr) :=
    fadr=IntPtr.Zero ? default(T) :
    Marshal.GetDelegateForFunctionPointer&<T>(fadr);
    
    public z_CreateTransformFeedbacks_adr := GetFuncAdr('glCreateTransformFeedbacks');
    public z_CreateTransformFeedbacks_ovr_0 := GetFuncOrNil&<procedure(n: Int32; var ids: UInt32)>(z_CreateTransformFeedbacks_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure CreateTransformFeedbacks(n: Int32; ids: array of UInt32);
    begin
      z_CreateTransformFeedbacks_ovr_0(n, ids[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure CreateTransformFeedbacks(n: Int32; var ids: UInt32);
    begin
      z_CreateTransformFeedbacks_ovr_0(n, ids);
    end;
    public z_CreateTransformFeedbacks_ovr_2 := GetFuncOrNil&<procedure(n: Int32; ids: IntPtr)>(z_CreateTransformFeedbacks_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure CreateTransformFeedbacks(n: Int32; ids: IntPtr);
    begin
      z_CreateTransformFeedbacks_ovr_2(n, ids);
    end;
    
    public z_TransformFeedbackBufferBase_adr := GetFuncAdr('glTransformFeedbackBufferBase');
    public z_TransformFeedbackBufferBase_ovr_0 := GetFuncOrNil&<procedure(xfb: TransformFeedbackName; index: UInt32; buffer: BufferName)>(z_TransformFeedbackBufferBase_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TransformFeedbackBufferBase(xfb: TransformFeedbackName; index: UInt32; buffer: BufferName);
    begin
      z_TransformFeedbackBufferBase_ovr_0(xfb, index, buffer);
    end;
    
    public z_TransformFeedbackBufferRange_adr := GetFuncAdr('glTransformFeedbackBufferRange');
    public z_TransformFeedbackBufferRange_ovr_0 := GetFuncOrNil&<procedure(xfb: TransformFeedbackName; index: UInt32; buffer: BufferName; offset: IntPtr; size: IntPtr)>(z_TransformFeedbackBufferRange_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TransformFeedbackBufferRange(xfb: TransformFeedbackName; index: UInt32; buffer: BufferName; offset: IntPtr; size: IntPtr);
    begin
      z_TransformFeedbackBufferRange_ovr_0(xfb, index, buffer, offset, size);
    end;
    
    public z_GetTransformFeedbackiv_adr := GetFuncAdr('glGetTransformFeedbackiv');
    public z_GetTransformFeedbackiv_ovr_0 := GetFuncOrNil&<procedure(xfb: UInt32; pname: TransformFeedbackPName; var param: Int32)>(z_GetTransformFeedbackiv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetTransformFeedbackiv(xfb: UInt32; pname: TransformFeedbackPName; param: array of Int32);
    begin
      z_GetTransformFeedbackiv_ovr_0(xfb, pname, param[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetTransformFeedbackiv(xfb: UInt32; pname: TransformFeedbackPName; var param: Int32);
    begin
      z_GetTransformFeedbackiv_ovr_0(xfb, pname, param);
    end;
    public z_GetTransformFeedbackiv_ovr_2 := GetFuncOrNil&<procedure(xfb: UInt32; pname: TransformFeedbackPName; param: IntPtr)>(z_GetTransformFeedbackiv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetTransformFeedbackiv(xfb: UInt32; pname: TransformFeedbackPName; param: IntPtr);
    begin
      z_GetTransformFeedbackiv_ovr_2(xfb, pname, param);
    end;
    
    public z_GetTransformFeedbacki_v_adr := GetFuncAdr('glGetTransformFeedbacki_v');
    public z_GetTransformFeedbacki_v_ovr_0 := GetFuncOrNil&<procedure(xfb: UInt32; pname: TransformFeedbackPName; index: UInt32; var param: Int32)>(z_GetTransformFeedbacki_v_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetTransformFeedbacki_v(xfb: UInt32; pname: TransformFeedbackPName; index: UInt32; param: array of Int32);
    begin
      z_GetTransformFeedbacki_v_ovr_0(xfb, pname, index, param[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetTransformFeedbacki_v(xfb: UInt32; pname: TransformFeedbackPName; index: UInt32; var param: Int32);
    begin
      z_GetTransformFeedbacki_v_ovr_0(xfb, pname, index, param);
    end;
    public z_GetTransformFeedbacki_v_ovr_2 := GetFuncOrNil&<procedure(xfb: UInt32; pname: TransformFeedbackPName; index: UInt32; param: IntPtr)>(z_GetTransformFeedbacki_v_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetTransformFeedbacki_v(xfb: UInt32; pname: TransformFeedbackPName; index: UInt32; param: IntPtr);
    begin
      z_GetTransformFeedbacki_v_ovr_2(xfb, pname, index, param);
    end;
    
    public z_GetTransformFeedbacki64_v_adr := GetFuncAdr('glGetTransformFeedbacki64_v');
    public z_GetTransformFeedbacki64_v_ovr_0 := GetFuncOrNil&<procedure(xfb: UInt32; pname: TransformFeedbackPName; index: UInt32; var param: Int64)>(z_GetTransformFeedbacki64_v_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetTransformFeedbacki64_v(xfb: UInt32; pname: TransformFeedbackPName; index: UInt32; param: array of Int64);
    begin
      z_GetTransformFeedbacki64_v_ovr_0(xfb, pname, index, param[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetTransformFeedbacki64_v(xfb: UInt32; pname: TransformFeedbackPName; index: UInt32; var param: Int64);
    begin
      z_GetTransformFeedbacki64_v_ovr_0(xfb, pname, index, param);
    end;
    public z_GetTransformFeedbacki64_v_ovr_2 := GetFuncOrNil&<procedure(xfb: UInt32; pname: TransformFeedbackPName; index: UInt32; param: IntPtr)>(z_GetTransformFeedbacki64_v_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetTransformFeedbacki64_v(xfb: UInt32; pname: TransformFeedbackPName; index: UInt32; param: IntPtr);
    begin
      z_GetTransformFeedbacki64_v_ovr_2(xfb, pname, index, param);
    end;
    
    public z_CreateBuffers_adr := GetFuncAdr('glCreateBuffers');
    public z_CreateBuffers_ovr_0 := GetFuncOrNil&<procedure(n: Int32; var buffers: BufferName)>(z_CreateBuffers_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure CreateBuffers(n: Int32; buffers: array of BufferName);
    begin
      z_CreateBuffers_ovr_0(n, buffers[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure CreateBuffers(n: Int32; var buffers: BufferName);
    begin
      z_CreateBuffers_ovr_0(n, buffers);
    end;
    public z_CreateBuffers_ovr_2 := GetFuncOrNil&<procedure(n: Int32; buffers: IntPtr)>(z_CreateBuffers_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure CreateBuffers(n: Int32; buffers: IntPtr);
    begin
      z_CreateBuffers_ovr_2(n, buffers);
    end;
    
    public z_NamedBufferStorage_adr := GetFuncAdr('glNamedBufferStorage');
    public z_NamedBufferStorage_ovr_0 := GetFuncOrNil&<procedure(buffer: BufferName; size: IntPtr; data: IntPtr; flags: BufferStorageMask)>(z_NamedBufferStorage_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure NamedBufferStorage(buffer: BufferName; size: IntPtr; data: IntPtr; flags: BufferStorageMask);
    begin
      z_NamedBufferStorage_ovr_0(buffer, size, data, flags);
    end;
    
    public z_NamedBufferData_adr := GetFuncAdr('glNamedBufferData');
    public z_NamedBufferData_ovr_0 := GetFuncOrNil&<procedure(buffer: BufferName; size: IntPtr; var data: Byte; usage: VertexBufferObjectUsage)>(z_NamedBufferData_adr);
    private [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure z_NamedBufferData_ovr_0_temp<T>(buffer: BufferName; size: IntPtr; var data: T; usage: VertexBufferObjectUsage) :=
    z_NamedBufferData_ovr_0(buffer, size, PByte(pointer(@data))^, usage);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure NamedBufferData<T>(buffer: BufferName; size: IntPtr; data: array of T; usage: VertexBufferObjectUsage);
    begin
      z_NamedBufferData_ovr_0_temp(buffer, size, data[0], usage);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure NamedBufferData<T>(buffer: BufferName; size: IntPtr; var data: T; usage: VertexBufferObjectUsage);
    begin
      z_NamedBufferData_ovr_0(buffer, size, PByte(pointer(@data))^, usage);
    end;
    public z_NamedBufferData_ovr_2 := GetFuncOrNil&<procedure(buffer: BufferName; size: IntPtr; data: IntPtr; usage: VertexBufferObjectUsage)>(z_NamedBufferData_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure NamedBufferData(buffer: BufferName; size: IntPtr; data: IntPtr; usage: VertexBufferObjectUsage);
    begin
      z_NamedBufferData_ovr_2(buffer, size, data, usage);
    end;
    
    public z_NamedBufferSubData_adr := GetFuncAdr('glNamedBufferSubData');
    public z_NamedBufferSubData_ovr_0 := GetFuncOrNil&<procedure(buffer: UInt32; offset: IntPtr; size: IntPtr; data: IntPtr)>(z_NamedBufferSubData_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure NamedBufferSubData(buffer: UInt32; offset: IntPtr; size: IntPtr; data: IntPtr);
    begin
      z_NamedBufferSubData_ovr_0(buffer, offset, size, data);
    end;
    
    public z_CopyNamedBufferSubData_adr := GetFuncAdr('glCopyNamedBufferSubData');
    public z_CopyNamedBufferSubData_ovr_0 := GetFuncOrNil&<procedure(readBuffer: BufferName; writeBuffer: BufferName; readOffset: IntPtr; writeOffset: IntPtr; size: IntPtr)>(z_CopyNamedBufferSubData_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure CopyNamedBufferSubData(readBuffer: BufferName; writeBuffer: BufferName; readOffset: IntPtr; writeOffset: IntPtr; size: IntPtr);
    begin
      z_CopyNamedBufferSubData_ovr_0(readBuffer, writeBuffer, readOffset, writeOffset, size);
    end;
    
    public z_ClearNamedBufferData_adr := GetFuncAdr('glClearNamedBufferData');
    public z_ClearNamedBufferData_ovr_0 := GetFuncOrNil&<procedure(buffer: UInt32; _internalformat: InternalFormat; format: PixelFormat; &type: PixelType; data: IntPtr)>(z_ClearNamedBufferData_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ClearNamedBufferData(buffer: UInt32; _internalformat: InternalFormat; format: PixelFormat; &type: PixelType; data: IntPtr);
    begin
      z_ClearNamedBufferData_ovr_0(buffer, _internalformat, format, &type, data);
    end;
    
    public z_ClearNamedBufferSubData_adr := GetFuncAdr('glClearNamedBufferSubData');
    public z_ClearNamedBufferSubData_ovr_0 := GetFuncOrNil&<procedure(buffer: UInt32; _internalformat: InternalFormat; offset: IntPtr; size: IntPtr; format: PixelFormat; &type: PixelType; data: IntPtr)>(z_ClearNamedBufferSubData_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ClearNamedBufferSubData(buffer: UInt32; _internalformat: InternalFormat; offset: IntPtr; size: IntPtr; format: PixelFormat; &type: PixelType; data: IntPtr);
    begin
      z_ClearNamedBufferSubData_ovr_0(buffer, _internalformat, offset, size, format, &type, data);
    end;
    
    public z_MapNamedBuffer_adr := GetFuncAdr('glMapNamedBuffer');
    public z_MapNamedBuffer_ovr_0 := GetFuncOrNil&<function(buffer: BufferName; access: BufferAccessARB): IntPtr>(z_MapNamedBuffer_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function MapNamedBuffer(buffer: BufferName; access: BufferAccessARB): IntPtr;
    begin
      Result := z_MapNamedBuffer_ovr_0(buffer, access);
    end;
    
    public z_MapNamedBufferRange_adr := GetFuncAdr('glMapNamedBufferRange');
    public z_MapNamedBufferRange_ovr_0 := GetFuncOrNil&<function(buffer: BufferName; offset: IntPtr; length: IntPtr; access: MapBufferAccessMask): IntPtr>(z_MapNamedBufferRange_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function MapNamedBufferRange(buffer: BufferName; offset: IntPtr; length: IntPtr; access: MapBufferAccessMask): IntPtr;
    begin
      Result := z_MapNamedBufferRange_ovr_0(buffer, offset, length, access);
    end;
    
    public z_UnmapNamedBuffer_adr := GetFuncAdr('glUnmapNamedBuffer');
    public z_UnmapNamedBuffer_ovr_0 := GetFuncOrNil&<function(buffer: BufferName): boolean>(z_UnmapNamedBuffer_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function UnmapNamedBuffer(buffer: BufferName): boolean;
    begin
      Result := z_UnmapNamedBuffer_ovr_0(buffer);
    end;
    
    public z_FlushMappedNamedBufferRange_adr := GetFuncAdr('glFlushMappedNamedBufferRange');
    public z_FlushMappedNamedBufferRange_ovr_0 := GetFuncOrNil&<procedure(buffer: BufferName; offset: IntPtr; length: IntPtr)>(z_FlushMappedNamedBufferRange_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure FlushMappedNamedBufferRange(buffer: BufferName; offset: IntPtr; length: IntPtr);
    begin
      z_FlushMappedNamedBufferRange_ovr_0(buffer, offset, length);
    end;
    
    public z_GetNamedBufferParameteriv_adr := GetFuncAdr('glGetNamedBufferParameteriv');
    public z_GetNamedBufferParameteriv_ovr_0 := GetFuncOrNil&<procedure(buffer: UInt32; pname: VertexBufferObjectParameter; var &params: Int32)>(z_GetNamedBufferParameteriv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetNamedBufferParameteriv(buffer: UInt32; pname: VertexBufferObjectParameter; &params: array of Int32);
    begin
      z_GetNamedBufferParameteriv_ovr_0(buffer, pname, &params[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetNamedBufferParameteriv(buffer: UInt32; pname: VertexBufferObjectParameter; var &params: Int32);
    begin
      z_GetNamedBufferParameteriv_ovr_0(buffer, pname, &params);
    end;
    public z_GetNamedBufferParameteriv_ovr_2 := GetFuncOrNil&<procedure(buffer: UInt32; pname: VertexBufferObjectParameter; &params: IntPtr)>(z_GetNamedBufferParameteriv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetNamedBufferParameteriv(buffer: UInt32; pname: VertexBufferObjectParameter; &params: IntPtr);
    begin
      z_GetNamedBufferParameteriv_ovr_2(buffer, pname, &params);
    end;
    
    public z_GetNamedBufferParameteri64v_adr := GetFuncAdr('glGetNamedBufferParameteri64v');
    public z_GetNamedBufferParameteri64v_ovr_0 := GetFuncOrNil&<procedure(buffer: UInt32; pname: VertexBufferObjectParameter; var &params: Int64)>(z_GetNamedBufferParameteri64v_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetNamedBufferParameteri64v(buffer: UInt32; pname: VertexBufferObjectParameter; &params: array of Int64);
    begin
      z_GetNamedBufferParameteri64v_ovr_0(buffer, pname, &params[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetNamedBufferParameteri64v(buffer: UInt32; pname: VertexBufferObjectParameter; var &params: Int64);
    begin
      z_GetNamedBufferParameteri64v_ovr_0(buffer, pname, &params);
    end;
    public z_GetNamedBufferParameteri64v_ovr_2 := GetFuncOrNil&<procedure(buffer: UInt32; pname: VertexBufferObjectParameter; &params: IntPtr)>(z_GetNamedBufferParameteri64v_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetNamedBufferParameteri64v(buffer: UInt32; pname: VertexBufferObjectParameter; &params: IntPtr);
    begin
      z_GetNamedBufferParameteri64v_ovr_2(buffer, pname, &params);
    end;
    
    public z_GetNamedBufferPointerv_adr := GetFuncAdr('glGetNamedBufferPointerv');
    public z_GetNamedBufferPointerv_ovr_0 := GetFuncOrNil&<procedure(buffer: UInt32; pname: VertexBufferObjectParameter; var &params: IntPtr)>(z_GetNamedBufferPointerv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetNamedBufferPointerv(buffer: UInt32; pname: VertexBufferObjectParameter; &params: array of IntPtr);
    begin
      z_GetNamedBufferPointerv_ovr_0(buffer, pname, &params[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetNamedBufferPointerv(buffer: UInt32; pname: VertexBufferObjectParameter; var &params: IntPtr);
    begin
      z_GetNamedBufferPointerv_ovr_0(buffer, pname, &params);
    end;
    public z_GetNamedBufferPointerv_ovr_2 := GetFuncOrNil&<procedure(buffer: UInt32; pname: VertexBufferObjectParameter; &params: pointer)>(z_GetNamedBufferPointerv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetNamedBufferPointerv(buffer: UInt32; pname: VertexBufferObjectParameter; &params: pointer);
    begin
      z_GetNamedBufferPointerv_ovr_2(buffer, pname, &params);
    end;
    
    public z_GetNamedBufferSubData_adr := GetFuncAdr('glGetNamedBufferSubData');
    public z_GetNamedBufferSubData_ovr_0 := GetFuncOrNil&<procedure(buffer: UInt32; offset: IntPtr; size: IntPtr; data: IntPtr)>(z_GetNamedBufferSubData_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetNamedBufferSubData(buffer: UInt32; offset: IntPtr; size: IntPtr; data: IntPtr);
    begin
      z_GetNamedBufferSubData_ovr_0(buffer, offset, size, data);
    end;
    
    public z_CreateFramebuffers_adr := GetFuncAdr('glCreateFramebuffers');
    public z_CreateFramebuffers_ovr_0 := GetFuncOrNil&<procedure(n: Int32; var framebuffers: UInt32)>(z_CreateFramebuffers_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure CreateFramebuffers(n: Int32; framebuffers: array of UInt32);
    begin
      z_CreateFramebuffers_ovr_0(n, framebuffers[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure CreateFramebuffers(n: Int32; var framebuffers: UInt32);
    begin
      z_CreateFramebuffers_ovr_0(n, framebuffers);
    end;
    public z_CreateFramebuffers_ovr_2 := GetFuncOrNil&<procedure(n: Int32; framebuffers: IntPtr)>(z_CreateFramebuffers_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure CreateFramebuffers(n: Int32; framebuffers: IntPtr);
    begin
      z_CreateFramebuffers_ovr_2(n, framebuffers);
    end;
    
    public z_NamedFramebufferRenderbuffer_adr := GetFuncAdr('glNamedFramebufferRenderbuffer');
    public z_NamedFramebufferRenderbuffer_ovr_0 := GetFuncOrNil&<procedure(framebuffer: FramebufferName; attachment: FramebufferAttachment; _renderbuffertarget: RenderbufferTarget; renderbuffer: RenderbufferName)>(z_NamedFramebufferRenderbuffer_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure NamedFramebufferRenderbuffer(framebuffer: FramebufferName; attachment: FramebufferAttachment; _renderbuffertarget: RenderbufferTarget; renderbuffer: RenderbufferName);
    begin
      z_NamedFramebufferRenderbuffer_ovr_0(framebuffer, attachment, _renderbuffertarget, renderbuffer);
    end;
    
    public z_NamedFramebufferParameteri_adr := GetFuncAdr('glNamedFramebufferParameteri');
    public z_NamedFramebufferParameteri_ovr_0 := GetFuncOrNil&<procedure(framebuffer: FramebufferName; pname: FramebufferParameterName; param: Int32)>(z_NamedFramebufferParameteri_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure NamedFramebufferParameteri(framebuffer: FramebufferName; pname: FramebufferParameterName; param: Int32);
    begin
      z_NamedFramebufferParameteri_ovr_0(framebuffer, pname, param);
    end;
    
    public z_NamedFramebufferTexture_adr := GetFuncAdr('glNamedFramebufferTexture');
    public z_NamedFramebufferTexture_ovr_0 := GetFuncOrNil&<procedure(framebuffer: FramebufferName; attachment: FramebufferAttachment; texture: TextureName; level: Int32)>(z_NamedFramebufferTexture_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure NamedFramebufferTexture(framebuffer: FramebufferName; attachment: FramebufferAttachment; texture: TextureName; level: Int32);
    begin
      z_NamedFramebufferTexture_ovr_0(framebuffer, attachment, texture, level);
    end;
    
    public z_NamedFramebufferTextureLayer_adr := GetFuncAdr('glNamedFramebufferTextureLayer');
    public z_NamedFramebufferTextureLayer_ovr_0 := GetFuncOrNil&<procedure(framebuffer: FramebufferName; attachment: FramebufferAttachment; texture: TextureName; level: Int32; layer: Int32)>(z_NamedFramebufferTextureLayer_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure NamedFramebufferTextureLayer(framebuffer: FramebufferName; attachment: FramebufferAttachment; texture: TextureName; level: Int32; layer: Int32);
    begin
      z_NamedFramebufferTextureLayer_ovr_0(framebuffer, attachment, texture, level, layer);
    end;
    
    public z_NamedFramebufferDrawBuffer_adr := GetFuncAdr('glNamedFramebufferDrawBuffer');
    public z_NamedFramebufferDrawBuffer_ovr_0 := GetFuncOrNil&<procedure(framebuffer: FramebufferName; buf: ColorBuffer)>(z_NamedFramebufferDrawBuffer_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure NamedFramebufferDrawBuffer(framebuffer: FramebufferName; buf: ColorBuffer);
    begin
      z_NamedFramebufferDrawBuffer_ovr_0(framebuffer, buf);
    end;
    
    public z_NamedFramebufferDrawBuffers_adr := GetFuncAdr('glNamedFramebufferDrawBuffers');
    public z_NamedFramebufferDrawBuffers_ovr_0 := GetFuncOrNil&<procedure(framebuffer: UInt32; n: Int32; var bufs: ColorBuffer)>(z_NamedFramebufferDrawBuffers_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure NamedFramebufferDrawBuffers(framebuffer: UInt32; n: Int32; bufs: array of ColorBuffer);
    begin
      z_NamedFramebufferDrawBuffers_ovr_0(framebuffer, n, bufs[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure NamedFramebufferDrawBuffers(framebuffer: UInt32; n: Int32; var bufs: ColorBuffer);
    begin
      z_NamedFramebufferDrawBuffers_ovr_0(framebuffer, n, bufs);
    end;
    public z_NamedFramebufferDrawBuffers_ovr_2 := GetFuncOrNil&<procedure(framebuffer: UInt32; n: Int32; bufs: IntPtr)>(z_NamedFramebufferDrawBuffers_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure NamedFramebufferDrawBuffers(framebuffer: UInt32; n: Int32; bufs: IntPtr);
    begin
      z_NamedFramebufferDrawBuffers_ovr_2(framebuffer, n, bufs);
    end;
    
    public z_NamedFramebufferReadBuffer_adr := GetFuncAdr('glNamedFramebufferReadBuffer');
    public z_NamedFramebufferReadBuffer_ovr_0 := GetFuncOrNil&<procedure(framebuffer: FramebufferName; src: ColorBuffer)>(z_NamedFramebufferReadBuffer_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure NamedFramebufferReadBuffer(framebuffer: FramebufferName; src: ColorBuffer);
    begin
      z_NamedFramebufferReadBuffer_ovr_0(framebuffer, src);
    end;
    
    public z_InvalidateNamedFramebufferData_adr := GetFuncAdr('glInvalidateNamedFramebufferData');
    public z_InvalidateNamedFramebufferData_ovr_0 := GetFuncOrNil&<procedure(framebuffer: UInt32; numAttachments: Int32; var attachments: FramebufferAttachment)>(z_InvalidateNamedFramebufferData_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure InvalidateNamedFramebufferData(framebuffer: UInt32; numAttachments: Int32; attachments: array of FramebufferAttachment);
    begin
      z_InvalidateNamedFramebufferData_ovr_0(framebuffer, numAttachments, attachments[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure InvalidateNamedFramebufferData(framebuffer: UInt32; numAttachments: Int32; var attachments: FramebufferAttachment);
    begin
      z_InvalidateNamedFramebufferData_ovr_0(framebuffer, numAttachments, attachments);
    end;
    public z_InvalidateNamedFramebufferData_ovr_2 := GetFuncOrNil&<procedure(framebuffer: UInt32; numAttachments: Int32; attachments: IntPtr)>(z_InvalidateNamedFramebufferData_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure InvalidateNamedFramebufferData(framebuffer: UInt32; numAttachments: Int32; attachments: IntPtr);
    begin
      z_InvalidateNamedFramebufferData_ovr_2(framebuffer, numAttachments, attachments);
    end;
    
    public z_InvalidateNamedFramebufferSubData_adr := GetFuncAdr('glInvalidateNamedFramebufferSubData');
    public z_InvalidateNamedFramebufferSubData_ovr_0 := GetFuncOrNil&<procedure(framebuffer: UInt32; numAttachments: Int32; var attachments: FramebufferAttachment; x: Int32; y: Int32; width: Int32; height: Int32)>(z_InvalidateNamedFramebufferSubData_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure InvalidateNamedFramebufferSubData(framebuffer: UInt32; numAttachments: Int32; attachments: array of FramebufferAttachment; x: Int32; y: Int32; width: Int32; height: Int32);
    begin
      z_InvalidateNamedFramebufferSubData_ovr_0(framebuffer, numAttachments, attachments[0], x, y, width, height);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure InvalidateNamedFramebufferSubData(framebuffer: UInt32; numAttachments: Int32; var attachments: FramebufferAttachment; x: Int32; y: Int32; width: Int32; height: Int32);
    begin
      z_InvalidateNamedFramebufferSubData_ovr_0(framebuffer, numAttachments, attachments, x, y, width, height);
    end;
    public z_InvalidateNamedFramebufferSubData_ovr_2 := GetFuncOrNil&<procedure(framebuffer: UInt32; numAttachments: Int32; attachments: IntPtr; x: Int32; y: Int32; width: Int32; height: Int32)>(z_InvalidateNamedFramebufferSubData_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure InvalidateNamedFramebufferSubData(framebuffer: UInt32; numAttachments: Int32; attachments: IntPtr; x: Int32; y: Int32; width: Int32; height: Int32);
    begin
      z_InvalidateNamedFramebufferSubData_ovr_2(framebuffer, numAttachments, attachments, x, y, width, height);
    end;
    
    public z_ClearNamedFramebufferiv_adr := GetFuncAdr('glClearNamedFramebufferiv');
    public z_ClearNamedFramebufferiv_ovr_0 := GetFuncOrNil&<procedure(framebuffer: UInt32; _buffer: Buffer; drawbuffer: Int32; var value: Int32)>(z_ClearNamedFramebufferiv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ClearNamedFramebufferiv(framebuffer: UInt32; _buffer: Buffer; drawbuffer: Int32; value: array of Int32);
    begin
      z_ClearNamedFramebufferiv_ovr_0(framebuffer, _buffer, drawbuffer, value[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ClearNamedFramebufferiv(framebuffer: UInt32; _buffer: Buffer; drawbuffer: Int32; var value: Int32);
    begin
      z_ClearNamedFramebufferiv_ovr_0(framebuffer, _buffer, drawbuffer, value);
    end;
    public z_ClearNamedFramebufferiv_ovr_2 := GetFuncOrNil&<procedure(framebuffer: UInt32; _buffer: Buffer; drawbuffer: Int32; value: IntPtr)>(z_ClearNamedFramebufferiv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ClearNamedFramebufferiv(framebuffer: UInt32; _buffer: Buffer; drawbuffer: Int32; value: IntPtr);
    begin
      z_ClearNamedFramebufferiv_ovr_2(framebuffer, _buffer, drawbuffer, value);
    end;
    
    public z_ClearNamedFramebufferuiv_adr := GetFuncAdr('glClearNamedFramebufferuiv');
    public z_ClearNamedFramebufferuiv_ovr_0 := GetFuncOrNil&<procedure(framebuffer: UInt32; _buffer: Buffer; drawbuffer: Int32; var value: UInt32)>(z_ClearNamedFramebufferuiv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ClearNamedFramebufferuiv(framebuffer: UInt32; _buffer: Buffer; drawbuffer: Int32; value: array of UInt32);
    begin
      z_ClearNamedFramebufferuiv_ovr_0(framebuffer, _buffer, drawbuffer, value[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ClearNamedFramebufferuiv(framebuffer: UInt32; _buffer: Buffer; drawbuffer: Int32; var value: UInt32);
    begin
      z_ClearNamedFramebufferuiv_ovr_0(framebuffer, _buffer, drawbuffer, value);
    end;
    public z_ClearNamedFramebufferuiv_ovr_2 := GetFuncOrNil&<procedure(framebuffer: UInt32; _buffer: Buffer; drawbuffer: Int32; value: IntPtr)>(z_ClearNamedFramebufferuiv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ClearNamedFramebufferuiv(framebuffer: UInt32; _buffer: Buffer; drawbuffer: Int32; value: IntPtr);
    begin
      z_ClearNamedFramebufferuiv_ovr_2(framebuffer, _buffer, drawbuffer, value);
    end;
    
    public z_ClearNamedFramebufferfv_adr := GetFuncAdr('glClearNamedFramebufferfv');
    public z_ClearNamedFramebufferfv_ovr_0 := GetFuncOrNil&<procedure(framebuffer: UInt32; _buffer: Buffer; drawbuffer: Int32; var value: single)>(z_ClearNamedFramebufferfv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ClearNamedFramebufferfv(framebuffer: UInt32; _buffer: Buffer; drawbuffer: Int32; value: array of single);
    begin
      z_ClearNamedFramebufferfv_ovr_0(framebuffer, _buffer, drawbuffer, value[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ClearNamedFramebufferfv(framebuffer: UInt32; _buffer: Buffer; drawbuffer: Int32; var value: single);
    begin
      z_ClearNamedFramebufferfv_ovr_0(framebuffer, _buffer, drawbuffer, value);
    end;
    public z_ClearNamedFramebufferfv_ovr_2 := GetFuncOrNil&<procedure(framebuffer: UInt32; _buffer: Buffer; drawbuffer: Int32; value: IntPtr)>(z_ClearNamedFramebufferfv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ClearNamedFramebufferfv(framebuffer: UInt32; _buffer: Buffer; drawbuffer: Int32; value: IntPtr);
    begin
      z_ClearNamedFramebufferfv_ovr_2(framebuffer, _buffer, drawbuffer, value);
    end;
    
    public z_ClearNamedFramebufferfi_adr := GetFuncAdr('glClearNamedFramebufferfi');
    public z_ClearNamedFramebufferfi_ovr_0 := GetFuncOrNil&<procedure(framebuffer: UInt32; _buffer: Buffer; drawbuffer: Int32; depth: single; stencil: Int32)>(z_ClearNamedFramebufferfi_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ClearNamedFramebufferfi(framebuffer: UInt32; _buffer: Buffer; drawbuffer: Int32; depth: single; stencil: Int32);
    begin
      z_ClearNamedFramebufferfi_ovr_0(framebuffer, _buffer, drawbuffer, depth, stencil);
    end;
    
    public z_BlitNamedFramebuffer_adr := GetFuncAdr('glBlitNamedFramebuffer');
    public z_BlitNamedFramebuffer_ovr_0 := GetFuncOrNil&<procedure(readFramebuffer: UInt32; drawFramebuffer: UInt32; srcX0: Int32; srcY0: Int32; srcX1: Int32; srcY1: Int32; dstX0: Int32; dstY0: Int32; dstX1: Int32; dstY1: Int32; mask: ClearBufferMask; filter: BlitFramebufferFilter)>(z_BlitNamedFramebuffer_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure BlitNamedFramebuffer(readFramebuffer: UInt32; drawFramebuffer: UInt32; srcX0: Int32; srcY0: Int32; srcX1: Int32; srcY1: Int32; dstX0: Int32; dstY0: Int32; dstX1: Int32; dstY1: Int32; mask: ClearBufferMask; filter: BlitFramebufferFilter);
    begin
      z_BlitNamedFramebuffer_ovr_0(readFramebuffer, drawFramebuffer, srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, mask, filter);
    end;
    
    public z_CheckNamedFramebufferStatus_adr := GetFuncAdr('glCheckNamedFramebufferStatus');
    public z_CheckNamedFramebufferStatus_ovr_0 := GetFuncOrNil&<function(framebuffer: UInt32; target: FramebufferTarget): FramebufferStatus>(z_CheckNamedFramebufferStatus_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function CheckNamedFramebufferStatus(framebuffer: UInt32; target: FramebufferTarget): FramebufferStatus;
    begin
      Result := z_CheckNamedFramebufferStatus_ovr_0(framebuffer, target);
    end;
    
    public z_GetNamedFramebufferParameteriv_adr := GetFuncAdr('glGetNamedFramebufferParameteriv');
    public z_GetNamedFramebufferParameteriv_ovr_0 := GetFuncOrNil&<procedure(framebuffer: UInt32; pname: GetFramebufferParameter; var param: Int32)>(z_GetNamedFramebufferParameteriv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetNamedFramebufferParameteriv(framebuffer: UInt32; pname: GetFramebufferParameter; param: array of Int32);
    begin
      z_GetNamedFramebufferParameteriv_ovr_0(framebuffer, pname, param[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetNamedFramebufferParameteriv(framebuffer: UInt32; pname: GetFramebufferParameter; var param: Int32);
    begin
      z_GetNamedFramebufferParameteriv_ovr_0(framebuffer, pname, param);
    end;
    public z_GetNamedFramebufferParameteriv_ovr_2 := GetFuncOrNil&<procedure(framebuffer: UInt32; pname: GetFramebufferParameter; param: IntPtr)>(z_GetNamedFramebufferParameteriv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetNamedFramebufferParameteriv(framebuffer: UInt32; pname: GetFramebufferParameter; param: IntPtr);
    begin
      z_GetNamedFramebufferParameteriv_ovr_2(framebuffer, pname, param);
    end;
    
    public z_GetNamedFramebufferAttachmentParameteriv_adr := GetFuncAdr('glGetNamedFramebufferAttachmentParameteriv');
    public z_GetNamedFramebufferAttachmentParameteriv_ovr_0 := GetFuncOrNil&<procedure(framebuffer: UInt32; attachment: FramebufferAttachment; pname: FramebufferAttachmentParameterName; var &params: Int32)>(z_GetNamedFramebufferAttachmentParameteriv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetNamedFramebufferAttachmentParameteriv(framebuffer: UInt32; attachment: FramebufferAttachment; pname: FramebufferAttachmentParameterName; &params: array of Int32);
    begin
      z_GetNamedFramebufferAttachmentParameteriv_ovr_0(framebuffer, attachment, pname, &params[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetNamedFramebufferAttachmentParameteriv(framebuffer: UInt32; attachment: FramebufferAttachment; pname: FramebufferAttachmentParameterName; var &params: Int32);
    begin
      z_GetNamedFramebufferAttachmentParameteriv_ovr_0(framebuffer, attachment, pname, &params);
    end;
    public z_GetNamedFramebufferAttachmentParameteriv_ovr_2 := GetFuncOrNil&<procedure(framebuffer: UInt32; attachment: FramebufferAttachment; pname: FramebufferAttachmentParameterName; &params: IntPtr)>(z_GetNamedFramebufferAttachmentParameteriv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetNamedFramebufferAttachmentParameteriv(framebuffer: UInt32; attachment: FramebufferAttachment; pname: FramebufferAttachmentParameterName; &params: IntPtr);
    begin
      z_GetNamedFramebufferAttachmentParameteriv_ovr_2(framebuffer, attachment, pname, &params);
    end;
    
    public z_CreateRenderbuffers_adr := GetFuncAdr('glCreateRenderbuffers');
    public z_CreateRenderbuffers_ovr_0 := GetFuncOrNil&<procedure(n: Int32; var renderbuffers: UInt32)>(z_CreateRenderbuffers_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure CreateRenderbuffers(n: Int32; renderbuffers: array of UInt32);
    begin
      z_CreateRenderbuffers_ovr_0(n, renderbuffers[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure CreateRenderbuffers(n: Int32; var renderbuffers: UInt32);
    begin
      z_CreateRenderbuffers_ovr_0(n, renderbuffers);
    end;
    public z_CreateRenderbuffers_ovr_2 := GetFuncOrNil&<procedure(n: Int32; renderbuffers: IntPtr)>(z_CreateRenderbuffers_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure CreateRenderbuffers(n: Int32; renderbuffers: IntPtr);
    begin
      z_CreateRenderbuffers_ovr_2(n, renderbuffers);
    end;
    
    public z_NamedRenderbufferStorage_adr := GetFuncAdr('glNamedRenderbufferStorage');
    public z_NamedRenderbufferStorage_ovr_0 := GetFuncOrNil&<procedure(renderbuffer: RenderbufferName; _internalformat: InternalFormat; width: Int32; height: Int32)>(z_NamedRenderbufferStorage_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure NamedRenderbufferStorage(renderbuffer: RenderbufferName; _internalformat: InternalFormat; width: Int32; height: Int32);
    begin
      z_NamedRenderbufferStorage_ovr_0(renderbuffer, _internalformat, width, height);
    end;
    
    public z_NamedRenderbufferStorageMultisample_adr := GetFuncAdr('glNamedRenderbufferStorageMultisample');
    public z_NamedRenderbufferStorageMultisample_ovr_0 := GetFuncOrNil&<procedure(renderbuffer: RenderbufferName; samples: Int32; _internalformat: InternalFormat; width: Int32; height: Int32)>(z_NamedRenderbufferStorageMultisample_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure NamedRenderbufferStorageMultisample(renderbuffer: RenderbufferName; samples: Int32; _internalformat: InternalFormat; width: Int32; height: Int32);
    begin
      z_NamedRenderbufferStorageMultisample_ovr_0(renderbuffer, samples, _internalformat, width, height);
    end;
    
    public z_GetNamedRenderbufferParameteriv_adr := GetFuncAdr('glGetNamedRenderbufferParameteriv');
    public z_GetNamedRenderbufferParameteriv_ovr_0 := GetFuncOrNil&<procedure(renderbuffer: UInt32; pname: RenderbufferParameterName; var &params: Int32)>(z_GetNamedRenderbufferParameteriv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetNamedRenderbufferParameteriv(renderbuffer: UInt32; pname: RenderbufferParameterName; &params: array of Int32);
    begin
      z_GetNamedRenderbufferParameteriv_ovr_0(renderbuffer, pname, &params[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetNamedRenderbufferParameteriv(renderbuffer: UInt32; pname: RenderbufferParameterName; var &params: Int32);
    begin
      z_GetNamedRenderbufferParameteriv_ovr_0(renderbuffer, pname, &params);
    end;
    public z_GetNamedRenderbufferParameteriv_ovr_2 := GetFuncOrNil&<procedure(renderbuffer: UInt32; pname: RenderbufferParameterName; &params: IntPtr)>(z_GetNamedRenderbufferParameteriv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetNamedRenderbufferParameteriv(renderbuffer: UInt32; pname: RenderbufferParameterName; &params: IntPtr);
    begin
      z_GetNamedRenderbufferParameteriv_ovr_2(renderbuffer, pname, &params);
    end;
    
    public z_CreateTextures_adr := GetFuncAdr('glCreateTextures');
    public z_CreateTextures_ovr_0 := GetFuncOrNil&<procedure(target: TextureTarget; n: Int32; var textures: UInt32)>(z_CreateTextures_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure CreateTextures(target: TextureTarget; n: Int32; textures: array of UInt32);
    begin
      z_CreateTextures_ovr_0(target, n, textures[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure CreateTextures(target: TextureTarget; n: Int32; var textures: UInt32);
    begin
      z_CreateTextures_ovr_0(target, n, textures);
    end;
    public z_CreateTextures_ovr_2 := GetFuncOrNil&<procedure(target: TextureTarget; n: Int32; textures: IntPtr)>(z_CreateTextures_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure CreateTextures(target: TextureTarget; n: Int32; textures: IntPtr);
    begin
      z_CreateTextures_ovr_2(target, n, textures);
    end;
    
    public z_TextureBuffer_adr := GetFuncAdr('glTextureBuffer');
    public z_TextureBuffer_ovr_0 := GetFuncOrNil&<procedure(texture: TextureName; _internalformat: InternalFormat; buffer: BufferName)>(z_TextureBuffer_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TextureBuffer(texture: TextureName; _internalformat: InternalFormat; buffer: BufferName);
    begin
      z_TextureBuffer_ovr_0(texture, _internalformat, buffer);
    end;
    
    public z_TextureBufferRange_adr := GetFuncAdr('glTextureBufferRange');
    public z_TextureBufferRange_ovr_0 := GetFuncOrNil&<procedure(texture: TextureName; _internalformat: InternalFormat; buffer: BufferName; offset: IntPtr; size: IntPtr)>(z_TextureBufferRange_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TextureBufferRange(texture: TextureName; _internalformat: InternalFormat; buffer: BufferName; offset: IntPtr; size: IntPtr);
    begin
      z_TextureBufferRange_ovr_0(texture, _internalformat, buffer, offset, size);
    end;
    
    public z_TextureStorage1D_adr := GetFuncAdr('glTextureStorage1D');
    public z_TextureStorage1D_ovr_0 := GetFuncOrNil&<procedure(texture: TextureName; levels: Int32; _internalformat: InternalFormat; width: Int32)>(z_TextureStorage1D_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TextureStorage1D(texture: TextureName; levels: Int32; _internalformat: InternalFormat; width: Int32);
    begin
      z_TextureStorage1D_ovr_0(texture, levels, _internalformat, width);
    end;
    
    public z_TextureStorage2D_adr := GetFuncAdr('glTextureStorage2D');
    public z_TextureStorage2D_ovr_0 := GetFuncOrNil&<procedure(texture: TextureName; levels: Int32; _internalformat: InternalFormat; width: Int32; height: Int32)>(z_TextureStorage2D_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TextureStorage2D(texture: TextureName; levels: Int32; _internalformat: InternalFormat; width: Int32; height: Int32);
    begin
      z_TextureStorage2D_ovr_0(texture, levels, _internalformat, width, height);
    end;
    
    public z_TextureStorage3D_adr := GetFuncAdr('glTextureStorage3D');
    public z_TextureStorage3D_ovr_0 := GetFuncOrNil&<procedure(texture: TextureName; levels: Int32; _internalformat: InternalFormat; width: Int32; height: Int32; depth: Int32)>(z_TextureStorage3D_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TextureStorage3D(texture: TextureName; levels: Int32; _internalformat: InternalFormat; width: Int32; height: Int32; depth: Int32);
    begin
      z_TextureStorage3D_ovr_0(texture, levels, _internalformat, width, height, depth);
    end;
    
    public z_TextureStorage2DMultisample_adr := GetFuncAdr('glTextureStorage2DMultisample');
    public z_TextureStorage2DMultisample_ovr_0 := GetFuncOrNil&<procedure(texture: TextureName; samples: Int32; _internalformat: InternalFormat; width: Int32; height: Int32; fixedsamplelocations: boolean)>(z_TextureStorage2DMultisample_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TextureStorage2DMultisample(texture: TextureName; samples: Int32; _internalformat: InternalFormat; width: Int32; height: Int32; fixedsamplelocations: boolean);
    begin
      z_TextureStorage2DMultisample_ovr_0(texture, samples, _internalformat, width, height, fixedsamplelocations);
    end;
    
    public z_TextureStorage3DMultisample_adr := GetFuncAdr('glTextureStorage3DMultisample');
    public z_TextureStorage3DMultisample_ovr_0 := GetFuncOrNil&<procedure(texture: TextureName; samples: Int32; _internalformat: InternalFormat; width: Int32; height: Int32; depth: Int32; fixedsamplelocations: boolean)>(z_TextureStorage3DMultisample_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TextureStorage3DMultisample(texture: TextureName; samples: Int32; _internalformat: InternalFormat; width: Int32; height: Int32; depth: Int32; fixedsamplelocations: boolean);
    begin
      z_TextureStorage3DMultisample_ovr_0(texture, samples, _internalformat, width, height, depth, fixedsamplelocations);
    end;
    
    public z_TextureSubImage1D_adr := GetFuncAdr('glTextureSubImage1D');
    public z_TextureSubImage1D_ovr_0 := GetFuncOrNil&<procedure(texture: UInt32; level: Int32; xoffset: Int32; width: Int32; format: PixelFormat; &type: PixelType; pixels: IntPtr)>(z_TextureSubImage1D_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TextureSubImage1D(texture: UInt32; level: Int32; xoffset: Int32; width: Int32; format: PixelFormat; &type: PixelType; pixels: IntPtr);
    begin
      z_TextureSubImage1D_ovr_0(texture, level, xoffset, width, format, &type, pixels);
    end;
    
    public z_TextureSubImage2D_adr := GetFuncAdr('glTextureSubImage2D');
    public z_TextureSubImage2D_ovr_0 := GetFuncOrNil&<procedure(texture: UInt32; level: Int32; xoffset: Int32; yoffset: Int32; width: Int32; height: Int32; format: PixelFormat; &type: PixelType; pixels: IntPtr)>(z_TextureSubImage2D_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TextureSubImage2D(texture: UInt32; level: Int32; xoffset: Int32; yoffset: Int32; width: Int32; height: Int32; format: PixelFormat; &type: PixelType; pixels: IntPtr);
    begin
      z_TextureSubImage2D_ovr_0(texture, level, xoffset, yoffset, width, height, format, &type, pixels);
    end;
    
    public z_TextureSubImage3D_adr := GetFuncAdr('glTextureSubImage3D');
    public z_TextureSubImage3D_ovr_0 := GetFuncOrNil&<procedure(texture: UInt32; level: Int32; xoffset: Int32; yoffset: Int32; zoffset: Int32; width: Int32; height: Int32; depth: Int32; format: PixelFormat; &type: PixelType; pixels: IntPtr)>(z_TextureSubImage3D_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TextureSubImage3D(texture: UInt32; level: Int32; xoffset: Int32; yoffset: Int32; zoffset: Int32; width: Int32; height: Int32; depth: Int32; format: PixelFormat; &type: PixelType; pixels: IntPtr);
    begin
      z_TextureSubImage3D_ovr_0(texture, level, xoffset, yoffset, zoffset, width, height, depth, format, &type, pixels);
    end;
    
    public z_CompressedTextureSubImage1D_adr := GetFuncAdr('glCompressedTextureSubImage1D');
    public z_CompressedTextureSubImage1D_ovr_0 := GetFuncOrNil&<procedure(texture: UInt32; level: Int32; xoffset: Int32; width: Int32; format: PixelFormat; imageSize: Int32; data: IntPtr)>(z_CompressedTextureSubImage1D_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure CompressedTextureSubImage1D(texture: UInt32; level: Int32; xoffset: Int32; width: Int32; format: PixelFormat; imageSize: Int32; data: IntPtr);
    begin
      z_CompressedTextureSubImage1D_ovr_0(texture, level, xoffset, width, format, imageSize, data);
    end;
    
    public z_CompressedTextureSubImage2D_adr := GetFuncAdr('glCompressedTextureSubImage2D');
    public z_CompressedTextureSubImage2D_ovr_0 := GetFuncOrNil&<procedure(texture: UInt32; level: Int32; xoffset: Int32; yoffset: Int32; width: Int32; height: Int32; format: PixelFormat; imageSize: Int32; data: IntPtr)>(z_CompressedTextureSubImage2D_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure CompressedTextureSubImage2D(texture: UInt32; level: Int32; xoffset: Int32; yoffset: Int32; width: Int32; height: Int32; format: PixelFormat; imageSize: Int32; data: IntPtr);
    begin
      z_CompressedTextureSubImage2D_ovr_0(texture, level, xoffset, yoffset, width, height, format, imageSize, data);
    end;
    
    public z_CompressedTextureSubImage3D_adr := GetFuncAdr('glCompressedTextureSubImage3D');
    public z_CompressedTextureSubImage3D_ovr_0 := GetFuncOrNil&<procedure(texture: UInt32; level: Int32; xoffset: Int32; yoffset: Int32; zoffset: Int32; width: Int32; height: Int32; depth: Int32; format: PixelFormat; imageSize: Int32; data: IntPtr)>(z_CompressedTextureSubImage3D_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure CompressedTextureSubImage3D(texture: UInt32; level: Int32; xoffset: Int32; yoffset: Int32; zoffset: Int32; width: Int32; height: Int32; depth: Int32; format: PixelFormat; imageSize: Int32; data: IntPtr);
    begin
      z_CompressedTextureSubImage3D_ovr_0(texture, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, data);
    end;
    
    public z_CopyTextureSubImage1D_adr := GetFuncAdr('glCopyTextureSubImage1D');
    public z_CopyTextureSubImage1D_ovr_0 := GetFuncOrNil&<procedure(texture: TextureName; level: Int32; xoffset: Int32; x: Int32; y: Int32; width: Int32)>(z_CopyTextureSubImage1D_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure CopyTextureSubImage1D(texture: TextureName; level: Int32; xoffset: Int32; x: Int32; y: Int32; width: Int32);
    begin
      z_CopyTextureSubImage1D_ovr_0(texture, level, xoffset, x, y, width);
    end;
    
    public z_CopyTextureSubImage2D_adr := GetFuncAdr('glCopyTextureSubImage2D');
    public z_CopyTextureSubImage2D_ovr_0 := GetFuncOrNil&<procedure(texture: TextureName; level: Int32; xoffset: Int32; yoffset: Int32; x: Int32; y: Int32; width: Int32; height: Int32)>(z_CopyTextureSubImage2D_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure CopyTextureSubImage2D(texture: TextureName; level: Int32; xoffset: Int32; yoffset: Int32; x: Int32; y: Int32; width: Int32; height: Int32);
    begin
      z_CopyTextureSubImage2D_ovr_0(texture, level, xoffset, yoffset, x, y, width, height);
    end;
    
    public z_CopyTextureSubImage3D_adr := GetFuncAdr('glCopyTextureSubImage3D');
    public z_CopyTextureSubImage3D_ovr_0 := GetFuncOrNil&<procedure(texture: TextureName; level: Int32; xoffset: Int32; yoffset: Int32; zoffset: Int32; x: Int32; y: Int32; width: Int32; height: Int32)>(z_CopyTextureSubImage3D_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure CopyTextureSubImage3D(texture: TextureName; level: Int32; xoffset: Int32; yoffset: Int32; zoffset: Int32; x: Int32; y: Int32; width: Int32; height: Int32);
    begin
      z_CopyTextureSubImage3D_ovr_0(texture, level, xoffset, yoffset, zoffset, x, y, width, height);
    end;
    
    public z_TextureParameterf_adr := GetFuncAdr('glTextureParameterf');
    public z_TextureParameterf_ovr_0 := GetFuncOrNil&<procedure(texture: TextureName; pname: TextureParameterName; param: single)>(z_TextureParameterf_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TextureParameterf(texture: TextureName; pname: TextureParameterName; param: single);
    begin
      z_TextureParameterf_ovr_0(texture, pname, param);
    end;
    
    public z_TextureParameterfv_adr := GetFuncAdr('glTextureParameterfv');
    public z_TextureParameterfv_ovr_0 := GetFuncOrNil&<procedure(texture: UInt32; pname: TextureParameterName; var param: single)>(z_TextureParameterfv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TextureParameterfv(texture: UInt32; pname: TextureParameterName; param: array of single);
    begin
      z_TextureParameterfv_ovr_0(texture, pname, param[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TextureParameterfv(texture: UInt32; pname: TextureParameterName; var param: single);
    begin
      z_TextureParameterfv_ovr_0(texture, pname, param);
    end;
    public z_TextureParameterfv_ovr_2 := GetFuncOrNil&<procedure(texture: UInt32; pname: TextureParameterName; param: IntPtr)>(z_TextureParameterfv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TextureParameterfv(texture: UInt32; pname: TextureParameterName; param: IntPtr);
    begin
      z_TextureParameterfv_ovr_2(texture, pname, param);
    end;
    
    public z_TextureParameteri_adr := GetFuncAdr('glTextureParameteri');
    public z_TextureParameteri_ovr_0 := GetFuncOrNil&<procedure(texture: UInt32; pname: TextureParameterName; param: Int32)>(z_TextureParameteri_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TextureParameteri(texture: UInt32; pname: TextureParameterName; param: Int32);
    begin
      z_TextureParameteri_ovr_0(texture, pname, param);
    end;
    
    public z_TextureParameterIiv_adr := GetFuncAdr('glTextureParameterIiv');
    public z_TextureParameterIiv_ovr_0 := GetFuncOrNil&<procedure(texture: UInt32; pname: TextureParameterName; var &params: Int32)>(z_TextureParameterIiv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TextureParameterIiv(texture: UInt32; pname: TextureParameterName; &params: array of Int32);
    begin
      z_TextureParameterIiv_ovr_0(texture, pname, &params[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TextureParameterIiv(texture: UInt32; pname: TextureParameterName; var &params: Int32);
    begin
      z_TextureParameterIiv_ovr_0(texture, pname, &params);
    end;
    public z_TextureParameterIiv_ovr_2 := GetFuncOrNil&<procedure(texture: UInt32; pname: TextureParameterName; &params: IntPtr)>(z_TextureParameterIiv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TextureParameterIiv(texture: UInt32; pname: TextureParameterName; &params: IntPtr);
    begin
      z_TextureParameterIiv_ovr_2(texture, pname, &params);
    end;
    
    public z_TextureParameterIuiv_adr := GetFuncAdr('glTextureParameterIuiv');
    public z_TextureParameterIuiv_ovr_0 := GetFuncOrNil&<procedure(texture: UInt32; pname: TextureParameterName; var &params: UInt32)>(z_TextureParameterIuiv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TextureParameterIuiv(texture: UInt32; pname: TextureParameterName; &params: array of UInt32);
    begin
      z_TextureParameterIuiv_ovr_0(texture, pname, &params[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TextureParameterIuiv(texture: UInt32; pname: TextureParameterName; var &params: UInt32);
    begin
      z_TextureParameterIuiv_ovr_0(texture, pname, &params);
    end;
    public z_TextureParameterIuiv_ovr_2 := GetFuncOrNil&<procedure(texture: UInt32; pname: TextureParameterName; &params: IntPtr)>(z_TextureParameterIuiv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TextureParameterIuiv(texture: UInt32; pname: TextureParameterName; &params: IntPtr);
    begin
      z_TextureParameterIuiv_ovr_2(texture, pname, &params);
    end;
    
    public z_TextureParameteriv_adr := GetFuncAdr('glTextureParameteriv');
    public z_TextureParameteriv_ovr_0 := GetFuncOrNil&<procedure(texture: UInt32; pname: TextureParameterName; var param: Int32)>(z_TextureParameteriv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TextureParameteriv(texture: UInt32; pname: TextureParameterName; param: array of Int32);
    begin
      z_TextureParameteriv_ovr_0(texture, pname, param[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TextureParameteriv(texture: UInt32; pname: TextureParameterName; var param: Int32);
    begin
      z_TextureParameteriv_ovr_0(texture, pname, param);
    end;
    public z_TextureParameteriv_ovr_2 := GetFuncOrNil&<procedure(texture: UInt32; pname: TextureParameterName; param: IntPtr)>(z_TextureParameteriv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TextureParameteriv(texture: UInt32; pname: TextureParameterName; param: IntPtr);
    begin
      z_TextureParameteriv_ovr_2(texture, pname, param);
    end;
    
    public z_GenerateTextureMipmap_adr := GetFuncAdr('glGenerateTextureMipmap');
    public z_GenerateTextureMipmap_ovr_0 := GetFuncOrNil&<procedure(texture: TextureName)>(z_GenerateTextureMipmap_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GenerateTextureMipmap(texture: TextureName);
    begin
      z_GenerateTextureMipmap_ovr_0(texture);
    end;
    
    public z_BindTextureUnit_adr := GetFuncAdr('glBindTextureUnit');
    public z_BindTextureUnit_ovr_0 := GetFuncOrNil&<procedure(&unit: UInt32; texture: TextureName)>(z_BindTextureUnit_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure BindTextureUnit(&unit: UInt32; texture: TextureName);
    begin
      z_BindTextureUnit_ovr_0(&unit, texture);
    end;
    
    public z_GetTextureImage_adr := GetFuncAdr('glGetTextureImage');
    public z_GetTextureImage_ovr_0 := GetFuncOrNil&<procedure(texture: UInt32; level: Int32; format: PixelFormat; &type: PixelType; bufSize: Int32; pixels: IntPtr)>(z_GetTextureImage_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetTextureImage(texture: UInt32; level: Int32; format: PixelFormat; &type: PixelType; bufSize: Int32; pixels: IntPtr);
    begin
      z_GetTextureImage_ovr_0(texture, level, format, &type, bufSize, pixels);
    end;
    
    public z_GetCompressedTextureImage_adr := GetFuncAdr('glGetCompressedTextureImage');
    public z_GetCompressedTextureImage_ovr_0 := GetFuncOrNil&<procedure(texture: UInt32; level: Int32; bufSize: Int32; pixels: IntPtr)>(z_GetCompressedTextureImage_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetCompressedTextureImage(texture: UInt32; level: Int32; bufSize: Int32; pixels: IntPtr);
    begin
      z_GetCompressedTextureImage_ovr_0(texture, level, bufSize, pixels);
    end;
    
    public z_GetTextureLevelParameterfv_adr := GetFuncAdr('glGetTextureLevelParameterfv');
    public z_GetTextureLevelParameterfv_ovr_0 := GetFuncOrNil&<procedure(texture: UInt32; level: Int32; pname: GetTextureParameter; var &params: single)>(z_GetTextureLevelParameterfv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetTextureLevelParameterfv(texture: UInt32; level: Int32; pname: GetTextureParameter; &params: array of single);
    begin
      z_GetTextureLevelParameterfv_ovr_0(texture, level, pname, &params[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetTextureLevelParameterfv(texture: UInt32; level: Int32; pname: GetTextureParameter; var &params: single);
    begin
      z_GetTextureLevelParameterfv_ovr_0(texture, level, pname, &params);
    end;
    public z_GetTextureLevelParameterfv_ovr_2 := GetFuncOrNil&<procedure(texture: UInt32; level: Int32; pname: GetTextureParameter; &params: IntPtr)>(z_GetTextureLevelParameterfv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetTextureLevelParameterfv(texture: UInt32; level: Int32; pname: GetTextureParameter; &params: IntPtr);
    begin
      z_GetTextureLevelParameterfv_ovr_2(texture, level, pname, &params);
    end;
    
    public z_GetTextureLevelParameteriv_adr := GetFuncAdr('glGetTextureLevelParameteriv');
    public z_GetTextureLevelParameteriv_ovr_0 := GetFuncOrNil&<procedure(texture: UInt32; level: Int32; pname: GetTextureParameter; var &params: Int32)>(z_GetTextureLevelParameteriv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetTextureLevelParameteriv(texture: UInt32; level: Int32; pname: GetTextureParameter; &params: array of Int32);
    begin
      z_GetTextureLevelParameteriv_ovr_0(texture, level, pname, &params[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetTextureLevelParameteriv(texture: UInt32; level: Int32; pname: GetTextureParameter; var &params: Int32);
    begin
      z_GetTextureLevelParameteriv_ovr_0(texture, level, pname, &params);
    end;
    public z_GetTextureLevelParameteriv_ovr_2 := GetFuncOrNil&<procedure(texture: UInt32; level: Int32; pname: GetTextureParameter; &params: IntPtr)>(z_GetTextureLevelParameteriv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetTextureLevelParameteriv(texture: UInt32; level: Int32; pname: GetTextureParameter; &params: IntPtr);
    begin
      z_GetTextureLevelParameteriv_ovr_2(texture, level, pname, &params);
    end;
    
    public z_GetTextureParameterfv_adr := GetFuncAdr('glGetTextureParameterfv');
    public z_GetTextureParameterfv_ovr_0 := GetFuncOrNil&<procedure(texture: UInt32; pname: GetTextureParameter; var &params: single)>(z_GetTextureParameterfv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetTextureParameterfv(texture: UInt32; pname: GetTextureParameter; &params: array of single);
    begin
      z_GetTextureParameterfv_ovr_0(texture, pname, &params[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetTextureParameterfv(texture: UInt32; pname: GetTextureParameter; var &params: single);
    begin
      z_GetTextureParameterfv_ovr_0(texture, pname, &params);
    end;
    public z_GetTextureParameterfv_ovr_2 := GetFuncOrNil&<procedure(texture: UInt32; pname: GetTextureParameter; &params: IntPtr)>(z_GetTextureParameterfv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetTextureParameterfv(texture: UInt32; pname: GetTextureParameter; &params: IntPtr);
    begin
      z_GetTextureParameterfv_ovr_2(texture, pname, &params);
    end;
    
    public z_GetTextureParameterIiv_adr := GetFuncAdr('glGetTextureParameterIiv');
    public z_GetTextureParameterIiv_ovr_0 := GetFuncOrNil&<procedure(texture: UInt32; pname: GetTextureParameter; var &params: Int32)>(z_GetTextureParameterIiv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetTextureParameterIiv(texture: UInt32; pname: GetTextureParameter; &params: array of Int32);
    begin
      z_GetTextureParameterIiv_ovr_0(texture, pname, &params[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetTextureParameterIiv(texture: UInt32; pname: GetTextureParameter; var &params: Int32);
    begin
      z_GetTextureParameterIiv_ovr_0(texture, pname, &params);
    end;
    public z_GetTextureParameterIiv_ovr_2 := GetFuncOrNil&<procedure(texture: UInt32; pname: GetTextureParameter; &params: IntPtr)>(z_GetTextureParameterIiv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetTextureParameterIiv(texture: UInt32; pname: GetTextureParameter; &params: IntPtr);
    begin
      z_GetTextureParameterIiv_ovr_2(texture, pname, &params);
    end;
    
    public z_GetTextureParameterIuiv_adr := GetFuncAdr('glGetTextureParameterIuiv');
    public z_GetTextureParameterIuiv_ovr_0 := GetFuncOrNil&<procedure(texture: UInt32; pname: GetTextureParameter; var &params: UInt32)>(z_GetTextureParameterIuiv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetTextureParameterIuiv(texture: UInt32; pname: GetTextureParameter; &params: array of UInt32);
    begin
      z_GetTextureParameterIuiv_ovr_0(texture, pname, &params[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetTextureParameterIuiv(texture: UInt32; pname: GetTextureParameter; var &params: UInt32);
    begin
      z_GetTextureParameterIuiv_ovr_0(texture, pname, &params);
    end;
    public z_GetTextureParameterIuiv_ovr_2 := GetFuncOrNil&<procedure(texture: UInt32; pname: GetTextureParameter; &params: IntPtr)>(z_GetTextureParameterIuiv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetTextureParameterIuiv(texture: UInt32; pname: GetTextureParameter; &params: IntPtr);
    begin
      z_GetTextureParameterIuiv_ovr_2(texture, pname, &params);
    end;
    
    public z_GetTextureParameteriv_adr := GetFuncAdr('glGetTextureParameteriv');
    public z_GetTextureParameteriv_ovr_0 := GetFuncOrNil&<procedure(texture: UInt32; pname: GetTextureParameter; var &params: Int32)>(z_GetTextureParameteriv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetTextureParameteriv(texture: UInt32; pname: GetTextureParameter; &params: array of Int32);
    begin
      z_GetTextureParameteriv_ovr_0(texture, pname, &params[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetTextureParameteriv(texture: UInt32; pname: GetTextureParameter; var &params: Int32);
    begin
      z_GetTextureParameteriv_ovr_0(texture, pname, &params);
    end;
    public z_GetTextureParameteriv_ovr_2 := GetFuncOrNil&<procedure(texture: UInt32; pname: GetTextureParameter; &params: IntPtr)>(z_GetTextureParameteriv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetTextureParameteriv(texture: UInt32; pname: GetTextureParameter; &params: IntPtr);
    begin
      z_GetTextureParameteriv_ovr_2(texture, pname, &params);
    end;
    
    public z_CreateVertexArrays_adr := GetFuncAdr('glCreateVertexArrays');
    public z_CreateVertexArrays_ovr_0 := GetFuncOrNil&<procedure(n: Int32; var arrays: UInt32)>(z_CreateVertexArrays_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure CreateVertexArrays(n: Int32; arrays: array of UInt32);
    begin
      z_CreateVertexArrays_ovr_0(n, arrays[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure CreateVertexArrays(n: Int32; var arrays: UInt32);
    begin
      z_CreateVertexArrays_ovr_0(n, arrays);
    end;
    public z_CreateVertexArrays_ovr_2 := GetFuncOrNil&<procedure(n: Int32; arrays: IntPtr)>(z_CreateVertexArrays_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure CreateVertexArrays(n: Int32; arrays: IntPtr);
    begin
      z_CreateVertexArrays_ovr_2(n, arrays);
    end;
    
    public z_DisableVertexArrayAttrib_adr := GetFuncAdr('glDisableVertexArrayAttrib');
    public z_DisableVertexArrayAttrib_ovr_0 := GetFuncOrNil&<procedure(vaobj: VertexArrayName; index: UInt32)>(z_DisableVertexArrayAttrib_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure DisableVertexArrayAttrib(vaobj: VertexArrayName; index: UInt32);
    begin
      z_DisableVertexArrayAttrib_ovr_0(vaobj, index);
    end;
    
    public z_EnableVertexArrayAttrib_adr := GetFuncAdr('glEnableVertexArrayAttrib');
    public z_EnableVertexArrayAttrib_ovr_0 := GetFuncOrNil&<procedure(vaobj: VertexArrayName; index: UInt32)>(z_EnableVertexArrayAttrib_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure EnableVertexArrayAttrib(vaobj: VertexArrayName; index: UInt32);
    begin
      z_EnableVertexArrayAttrib_ovr_0(vaobj, index);
    end;
    
    public z_VertexArrayElementBuffer_adr := GetFuncAdr('glVertexArrayElementBuffer');
    public z_VertexArrayElementBuffer_ovr_0 := GetFuncOrNil&<procedure(vaobj: VertexArrayName; buffer: BufferName)>(z_VertexArrayElementBuffer_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexArrayElementBuffer(vaobj: VertexArrayName; buffer: BufferName);
    begin
      z_VertexArrayElementBuffer_ovr_0(vaobj, buffer);
    end;
    
    public z_VertexArrayVertexBuffer_adr := GetFuncAdr('glVertexArrayVertexBuffer');
    public z_VertexArrayVertexBuffer_ovr_0 := GetFuncOrNil&<procedure(vaobj: VertexArrayName; bindingindex: UInt32; buffer: BufferName; offset: IntPtr; stride: Int32)>(z_VertexArrayVertexBuffer_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexArrayVertexBuffer(vaobj: VertexArrayName; bindingindex: UInt32; buffer: BufferName; offset: IntPtr; stride: Int32);
    begin
      z_VertexArrayVertexBuffer_ovr_0(vaobj, bindingindex, buffer, offset, stride);
    end;
    
    public z_VertexArrayVertexBuffers_adr := GetFuncAdr('glVertexArrayVertexBuffers');
    public z_VertexArrayVertexBuffers_ovr_0 := GetFuncOrNil&<procedure(vaobj: UInt32; first: UInt32; count: Int32; var buffers: UInt32; var offsets: IntPtr; var strides: Int32)>(z_VertexArrayVertexBuffers_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexArrayVertexBuffers(vaobj: UInt32; first: UInt32; count: Int32; buffers: array of UInt32; offsets: array of IntPtr; strides: array of Int32);
    begin
      z_VertexArrayVertexBuffers_ovr_0(vaobj, first, count, buffers[0], offsets[0], strides[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexArrayVertexBuffers(vaobj: UInt32; first: UInt32; count: Int32; buffers: array of UInt32; offsets: array of IntPtr; var strides: Int32);
    begin
      z_VertexArrayVertexBuffers_ovr_0(vaobj, first, count, buffers[0], offsets[0], strides);
    end;
    public z_VertexArrayVertexBuffers_ovr_2 := GetFuncOrNil&<procedure(vaobj: UInt32; first: UInt32; count: Int32; var buffers: UInt32; var offsets: IntPtr; strides: IntPtr)>(z_VertexArrayVertexBuffers_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexArrayVertexBuffers(vaobj: UInt32; first: UInt32; count: Int32; buffers: array of UInt32; offsets: array of IntPtr; strides: IntPtr);
    begin
      z_VertexArrayVertexBuffers_ovr_2(vaobj, first, count, buffers[0], offsets[0], strides);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexArrayVertexBuffers(vaobj: UInt32; first: UInt32; count: Int32; buffers: array of UInt32; var offsets: IntPtr; strides: array of Int32);
    begin
      z_VertexArrayVertexBuffers_ovr_0(vaobj, first, count, buffers[0], offsets, strides[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexArrayVertexBuffers(vaobj: UInt32; first: UInt32; count: Int32; buffers: array of UInt32; var offsets: IntPtr; var strides: Int32);
    begin
      z_VertexArrayVertexBuffers_ovr_0(vaobj, first, count, buffers[0], offsets, strides);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexArrayVertexBuffers(vaobj: UInt32; first: UInt32; count: Int32; buffers: array of UInt32; var offsets: IntPtr; strides: IntPtr);
    begin
      z_VertexArrayVertexBuffers_ovr_2(vaobj, first, count, buffers[0], offsets, strides);
    end;
    public z_VertexArrayVertexBuffers_ovr_6 := GetFuncOrNil&<procedure(vaobj: UInt32; first: UInt32; count: Int32; var buffers: UInt32; offsets: pointer; var strides: Int32)>(z_VertexArrayVertexBuffers_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexArrayVertexBuffers(vaobj: UInt32; first: UInt32; count: Int32; buffers: array of UInt32; offsets: pointer; strides: array of Int32);
    begin
      z_VertexArrayVertexBuffers_ovr_6(vaobj, first, count, buffers[0], offsets, strides[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexArrayVertexBuffers(vaobj: UInt32; first: UInt32; count: Int32; buffers: array of UInt32; offsets: pointer; var strides: Int32);
    begin
      z_VertexArrayVertexBuffers_ovr_6(vaobj, first, count, buffers[0], offsets, strides);
    end;
    public z_VertexArrayVertexBuffers_ovr_8 := GetFuncOrNil&<procedure(vaobj: UInt32; first: UInt32; count: Int32; var buffers: UInt32; offsets: pointer; strides: IntPtr)>(z_VertexArrayVertexBuffers_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexArrayVertexBuffers(vaobj: UInt32; first: UInt32; count: Int32; buffers: array of UInt32; offsets: pointer; strides: IntPtr);
    begin
      z_VertexArrayVertexBuffers_ovr_8(vaobj, first, count, buffers[0], offsets, strides);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexArrayVertexBuffers(vaobj: UInt32; first: UInt32; count: Int32; var buffers: UInt32; offsets: array of IntPtr; strides: array of Int32);
    begin
      z_VertexArrayVertexBuffers_ovr_0(vaobj, first, count, buffers, offsets[0], strides[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexArrayVertexBuffers(vaobj: UInt32; first: UInt32; count: Int32; var buffers: UInt32; offsets: array of IntPtr; var strides: Int32);
    begin
      z_VertexArrayVertexBuffers_ovr_0(vaobj, first, count, buffers, offsets[0], strides);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexArrayVertexBuffers(vaobj: UInt32; first: UInt32; count: Int32; var buffers: UInt32; offsets: array of IntPtr; strides: IntPtr);
    begin
      z_VertexArrayVertexBuffers_ovr_2(vaobj, first, count, buffers, offsets[0], strides);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexArrayVertexBuffers(vaobj: UInt32; first: UInt32; count: Int32; var buffers: UInt32; var offsets: IntPtr; strides: array of Int32);
    begin
      z_VertexArrayVertexBuffers_ovr_0(vaobj, first, count, buffers, offsets, strides[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexArrayVertexBuffers(vaobj: UInt32; first: UInt32; count: Int32; var buffers: UInt32; var offsets: IntPtr; var strides: Int32);
    begin
      z_VertexArrayVertexBuffers_ovr_0(vaobj, first, count, buffers, offsets, strides);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexArrayVertexBuffers(vaobj: UInt32; first: UInt32; count: Int32; var buffers: UInt32; var offsets: IntPtr; strides: IntPtr);
    begin
      z_VertexArrayVertexBuffers_ovr_2(vaobj, first, count, buffers, offsets, strides);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexArrayVertexBuffers(vaobj: UInt32; first: UInt32; count: Int32; var buffers: UInt32; offsets: pointer; strides: array of Int32);
    begin
      z_VertexArrayVertexBuffers_ovr_6(vaobj, first, count, buffers, offsets, strides[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexArrayVertexBuffers(vaobj: UInt32; first: UInt32; count: Int32; var buffers: UInt32; offsets: pointer; var strides: Int32);
    begin
      z_VertexArrayVertexBuffers_ovr_6(vaobj, first, count, buffers, offsets, strides);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexArrayVertexBuffers(vaobj: UInt32; first: UInt32; count: Int32; var buffers: UInt32; offsets: pointer; strides: IntPtr);
    begin
      z_VertexArrayVertexBuffers_ovr_8(vaobj, first, count, buffers, offsets, strides);
    end;
    public z_VertexArrayVertexBuffers_ovr_18 := GetFuncOrNil&<procedure(vaobj: UInt32; first: UInt32; count: Int32; buffers: IntPtr; var offsets: IntPtr; var strides: Int32)>(z_VertexArrayVertexBuffers_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexArrayVertexBuffers(vaobj: UInt32; first: UInt32; count: Int32; buffers: IntPtr; offsets: array of IntPtr; strides: array of Int32);
    begin
      z_VertexArrayVertexBuffers_ovr_18(vaobj, first, count, buffers, offsets[0], strides[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexArrayVertexBuffers(vaobj: UInt32; first: UInt32; count: Int32; buffers: IntPtr; offsets: array of IntPtr; var strides: Int32);
    begin
      z_VertexArrayVertexBuffers_ovr_18(vaobj, first, count, buffers, offsets[0], strides);
    end;
    public z_VertexArrayVertexBuffers_ovr_20 := GetFuncOrNil&<procedure(vaobj: UInt32; first: UInt32; count: Int32; buffers: IntPtr; var offsets: IntPtr; strides: IntPtr)>(z_VertexArrayVertexBuffers_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexArrayVertexBuffers(vaobj: UInt32; first: UInt32; count: Int32; buffers: IntPtr; offsets: array of IntPtr; strides: IntPtr);
    begin
      z_VertexArrayVertexBuffers_ovr_20(vaobj, first, count, buffers, offsets[0], strides);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexArrayVertexBuffers(vaobj: UInt32; first: UInt32; count: Int32; buffers: IntPtr; var offsets: IntPtr; strides: array of Int32);
    begin
      z_VertexArrayVertexBuffers_ovr_18(vaobj, first, count, buffers, offsets, strides[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexArrayVertexBuffers(vaobj: UInt32; first: UInt32; count: Int32; buffers: IntPtr; var offsets: IntPtr; var strides: Int32);
    begin
      z_VertexArrayVertexBuffers_ovr_18(vaobj, first, count, buffers, offsets, strides);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexArrayVertexBuffers(vaobj: UInt32; first: UInt32; count: Int32; buffers: IntPtr; var offsets: IntPtr; strides: IntPtr);
    begin
      z_VertexArrayVertexBuffers_ovr_20(vaobj, first, count, buffers, offsets, strides);
    end;
    public z_VertexArrayVertexBuffers_ovr_24 := GetFuncOrNil&<procedure(vaobj: UInt32; first: UInt32; count: Int32; buffers: IntPtr; offsets: pointer; var strides: Int32)>(z_VertexArrayVertexBuffers_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexArrayVertexBuffers(vaobj: UInt32; first: UInt32; count: Int32; buffers: IntPtr; offsets: pointer; strides: array of Int32);
    begin
      z_VertexArrayVertexBuffers_ovr_24(vaobj, first, count, buffers, offsets, strides[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexArrayVertexBuffers(vaobj: UInt32; first: UInt32; count: Int32; buffers: IntPtr; offsets: pointer; var strides: Int32);
    begin
      z_VertexArrayVertexBuffers_ovr_24(vaobj, first, count, buffers, offsets, strides);
    end;
    public z_VertexArrayVertexBuffers_ovr_26 := GetFuncOrNil&<procedure(vaobj: UInt32; first: UInt32; count: Int32; buffers: IntPtr; offsets: pointer; strides: IntPtr)>(z_VertexArrayVertexBuffers_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexArrayVertexBuffers(vaobj: UInt32; first: UInt32; count: Int32; buffers: IntPtr; offsets: pointer; strides: IntPtr);
    begin
      z_VertexArrayVertexBuffers_ovr_26(vaobj, first, count, buffers, offsets, strides);
    end;
    
    public z_VertexArrayAttribBinding_adr := GetFuncAdr('glVertexArrayAttribBinding');
    public z_VertexArrayAttribBinding_ovr_0 := GetFuncOrNil&<procedure(vaobj: VertexArrayName; attribindex: UInt32; bindingindex: UInt32)>(z_VertexArrayAttribBinding_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexArrayAttribBinding(vaobj: VertexArrayName; attribindex: UInt32; bindingindex: UInt32);
    begin
      z_VertexArrayAttribBinding_ovr_0(vaobj, attribindex, bindingindex);
    end;
    
    public z_VertexArrayAttribFormat_adr := GetFuncAdr('glVertexArrayAttribFormat');
    public z_VertexArrayAttribFormat_ovr_0 := GetFuncOrNil&<procedure(vaobj: VertexArrayName; attribindex: UInt32; size: Int32; &type: VertexAttribType; normalized: boolean; relativeoffset: UInt32)>(z_VertexArrayAttribFormat_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexArrayAttribFormat(vaobj: VertexArrayName; attribindex: UInt32; size: Int32; &type: VertexAttribType; normalized: boolean; relativeoffset: UInt32);
    begin
      z_VertexArrayAttribFormat_ovr_0(vaobj, attribindex, size, &type, normalized, relativeoffset);
    end;
    
    public z_VertexArrayAttribIFormat_adr := GetFuncAdr('glVertexArrayAttribIFormat');
    public z_VertexArrayAttribIFormat_ovr_0 := GetFuncOrNil&<procedure(vaobj: VertexArrayName; attribindex: UInt32; size: Int32; &type: VertexAttribIType; relativeoffset: UInt32)>(z_VertexArrayAttribIFormat_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexArrayAttribIFormat(vaobj: VertexArrayName; attribindex: UInt32; size: Int32; &type: VertexAttribIType; relativeoffset: UInt32);
    begin
      z_VertexArrayAttribIFormat_ovr_0(vaobj, attribindex, size, &type, relativeoffset);
    end;
    
    public z_VertexArrayAttribLFormat_adr := GetFuncAdr('glVertexArrayAttribLFormat');
    public z_VertexArrayAttribLFormat_ovr_0 := GetFuncOrNil&<procedure(vaobj: VertexArrayName; attribindex: UInt32; size: Int32; &type: VertexAttribLType; relativeoffset: UInt32)>(z_VertexArrayAttribLFormat_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexArrayAttribLFormat(vaobj: VertexArrayName; attribindex: UInt32; size: Int32; &type: VertexAttribLType; relativeoffset: UInt32);
    begin
      z_VertexArrayAttribLFormat_ovr_0(vaobj, attribindex, size, &type, relativeoffset);
    end;
    
    public z_VertexArrayBindingDivisor_adr := GetFuncAdr('glVertexArrayBindingDivisor');
    public z_VertexArrayBindingDivisor_ovr_0 := GetFuncOrNil&<procedure(vaobj: VertexArrayName; bindingindex: UInt32; divisor: UInt32)>(z_VertexArrayBindingDivisor_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexArrayBindingDivisor(vaobj: VertexArrayName; bindingindex: UInt32; divisor: UInt32);
    begin
      z_VertexArrayBindingDivisor_ovr_0(vaobj, bindingindex, divisor);
    end;
    
    public z_GetVertexArrayiv_adr := GetFuncAdr('glGetVertexArrayiv');
    public z_GetVertexArrayiv_ovr_0 := GetFuncOrNil&<procedure(vaobj: UInt32; pname: VertexArrayPName; var param: Int32)>(z_GetVertexArrayiv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetVertexArrayiv(vaobj: UInt32; pname: VertexArrayPName; param: array of Int32);
    begin
      z_GetVertexArrayiv_ovr_0(vaobj, pname, param[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetVertexArrayiv(vaobj: UInt32; pname: VertexArrayPName; var param: Int32);
    begin
      z_GetVertexArrayiv_ovr_0(vaobj, pname, param);
    end;
    public z_GetVertexArrayiv_ovr_2 := GetFuncOrNil&<procedure(vaobj: UInt32; pname: VertexArrayPName; param: IntPtr)>(z_GetVertexArrayiv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetVertexArrayiv(vaobj: UInt32; pname: VertexArrayPName; param: IntPtr);
    begin
      z_GetVertexArrayiv_ovr_2(vaobj, pname, param);
    end;
    
    public z_GetVertexArrayIndexediv_adr := GetFuncAdr('glGetVertexArrayIndexediv');
    public z_GetVertexArrayIndexediv_ovr_0 := GetFuncOrNil&<procedure(vaobj: UInt32; index: UInt32; pname: VertexArrayPName; var param: Int32)>(z_GetVertexArrayIndexediv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetVertexArrayIndexediv(vaobj: UInt32; index: UInt32; pname: VertexArrayPName; param: array of Int32);
    begin
      z_GetVertexArrayIndexediv_ovr_0(vaobj, index, pname, param[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetVertexArrayIndexediv(vaobj: UInt32; index: UInt32; pname: VertexArrayPName; var param: Int32);
    begin
      z_GetVertexArrayIndexediv_ovr_0(vaobj, index, pname, param);
    end;
    public z_GetVertexArrayIndexediv_ovr_2 := GetFuncOrNil&<procedure(vaobj: UInt32; index: UInt32; pname: VertexArrayPName; param: IntPtr)>(z_GetVertexArrayIndexediv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetVertexArrayIndexediv(vaobj: UInt32; index: UInt32; pname: VertexArrayPName; param: IntPtr);
    begin
      z_GetVertexArrayIndexediv_ovr_2(vaobj, index, pname, param);
    end;
    
    public z_GetVertexArrayIndexed64iv_adr := GetFuncAdr('glGetVertexArrayIndexed64iv');
    public z_GetVertexArrayIndexed64iv_ovr_0 := GetFuncOrNil&<procedure(vaobj: UInt32; index: UInt32; pname: VertexArrayPName; var param: Int64)>(z_GetVertexArrayIndexed64iv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetVertexArrayIndexed64iv(vaobj: UInt32; index: UInt32; pname: VertexArrayPName; param: array of Int64);
    begin
      z_GetVertexArrayIndexed64iv_ovr_0(vaobj, index, pname, param[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetVertexArrayIndexed64iv(vaobj: UInt32; index: UInt32; pname: VertexArrayPName; var param: Int64);
    begin
      z_GetVertexArrayIndexed64iv_ovr_0(vaobj, index, pname, param);
    end;
    public z_GetVertexArrayIndexed64iv_ovr_2 := GetFuncOrNil&<procedure(vaobj: UInt32; index: UInt32; pname: VertexArrayPName; param: IntPtr)>(z_GetVertexArrayIndexed64iv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetVertexArrayIndexed64iv(vaobj: UInt32; index: UInt32; pname: VertexArrayPName; param: IntPtr);
    begin
      z_GetVertexArrayIndexed64iv_ovr_2(vaobj, index, pname, param);
    end;
    
    public z_CreateSamplers_adr := GetFuncAdr('glCreateSamplers');
    public z_CreateSamplers_ovr_0 := GetFuncOrNil&<procedure(n: Int32; var samplers: UInt32)>(z_CreateSamplers_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure CreateSamplers(n: Int32; samplers: array of UInt32);
    begin
      z_CreateSamplers_ovr_0(n, samplers[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure CreateSamplers(n: Int32; var samplers: UInt32);
    begin
      z_CreateSamplers_ovr_0(n, samplers);
    end;
    public z_CreateSamplers_ovr_2 := GetFuncOrNil&<procedure(n: Int32; samplers: IntPtr)>(z_CreateSamplers_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure CreateSamplers(n: Int32; samplers: IntPtr);
    begin
      z_CreateSamplers_ovr_2(n, samplers);
    end;
    
    public z_CreateProgramPipelines_adr := GetFuncAdr('glCreateProgramPipelines');
    public z_CreateProgramPipelines_ovr_0 := GetFuncOrNil&<procedure(n: Int32; var pipelines: UInt32)>(z_CreateProgramPipelines_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure CreateProgramPipelines(n: Int32; pipelines: array of UInt32);
    begin
      z_CreateProgramPipelines_ovr_0(n, pipelines[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure CreateProgramPipelines(n: Int32; var pipelines: UInt32);
    begin
      z_CreateProgramPipelines_ovr_0(n, pipelines);
    end;
    public z_CreateProgramPipelines_ovr_2 := GetFuncOrNil&<procedure(n: Int32; pipelines: IntPtr)>(z_CreateProgramPipelines_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure CreateProgramPipelines(n: Int32; pipelines: IntPtr);
    begin
      z_CreateProgramPipelines_ovr_2(n, pipelines);
    end;
    
    public z_CreateQueries_adr := GetFuncAdr('glCreateQueries');
    public z_CreateQueries_ovr_0 := GetFuncOrNil&<procedure(target: QueryTarget; n: Int32; var ids: UInt32)>(z_CreateQueries_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure CreateQueries(target: QueryTarget; n: Int32; ids: array of UInt32);
    begin
      z_CreateQueries_ovr_0(target, n, ids[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure CreateQueries(target: QueryTarget; n: Int32; var ids: UInt32);
    begin
      z_CreateQueries_ovr_0(target, n, ids);
    end;
    public z_CreateQueries_ovr_2 := GetFuncOrNil&<procedure(target: QueryTarget; n: Int32; ids: IntPtr)>(z_CreateQueries_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure CreateQueries(target: QueryTarget; n: Int32; ids: IntPtr);
    begin
      z_CreateQueries_ovr_2(target, n, ids);
    end;
    
    public z_GetQueryBufferObjecti64v_adr := GetFuncAdr('glGetQueryBufferObjecti64v');
    public z_GetQueryBufferObjecti64v_ovr_0 := GetFuncOrNil&<procedure(id: QueryName; buffer: BufferName; pname: QueryObjectParameterName; offset: IntPtr)>(z_GetQueryBufferObjecti64v_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetQueryBufferObjecti64v(id: QueryName; buffer: BufferName; pname: QueryObjectParameterName; offset: IntPtr);
    begin
      z_GetQueryBufferObjecti64v_ovr_0(id, buffer, pname, offset);
    end;
    
    public z_GetQueryBufferObjectiv_adr := GetFuncAdr('glGetQueryBufferObjectiv');
    public z_GetQueryBufferObjectiv_ovr_0 := GetFuncOrNil&<procedure(id: QueryName; buffer: BufferName; pname: QueryObjectParameterName; offset: IntPtr)>(z_GetQueryBufferObjectiv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetQueryBufferObjectiv(id: QueryName; buffer: BufferName; pname: QueryObjectParameterName; offset: IntPtr);
    begin
      z_GetQueryBufferObjectiv_ovr_0(id, buffer, pname, offset);
    end;
    
    public z_GetQueryBufferObjectui64v_adr := GetFuncAdr('glGetQueryBufferObjectui64v');
    public z_GetQueryBufferObjectui64v_ovr_0 := GetFuncOrNil&<procedure(id: QueryName; buffer: BufferName; pname: QueryObjectParameterName; offset: IntPtr)>(z_GetQueryBufferObjectui64v_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetQueryBufferObjectui64v(id: QueryName; buffer: BufferName; pname: QueryObjectParameterName; offset: IntPtr);
    begin
      z_GetQueryBufferObjectui64v_ovr_0(id, buffer, pname, offset);
    end;
    
    public z_GetQueryBufferObjectuiv_adr := GetFuncAdr('glGetQueryBufferObjectuiv');
    public z_GetQueryBufferObjectuiv_ovr_0 := GetFuncOrNil&<procedure(id: QueryName; buffer: BufferName; pname: QueryObjectParameterName; offset: IntPtr)>(z_GetQueryBufferObjectuiv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetQueryBufferObjectuiv(id: QueryName; buffer: BufferName; pname: QueryObjectParameterName; offset: IntPtr);
    begin
      z_GetQueryBufferObjectuiv_ovr_0(id, buffer, pname, offset);
    end;
    
  end;
  
  glDrawBuffersARB = sealed class
    public static function GetFuncAdr([MarshalAs(UnmanagedType.LPStr)] lpszProc: string): IntPtr;
    external 'opengl32.dll' name 'wglGetProcAddress';
    public static function GetFuncOrNil<T>(fadr: IntPtr) :=
    fadr=IntPtr.Zero ? default(T) :
    Marshal.GetDelegateForFunctionPointer&<T>(fadr);
    
    public z_DrawBuffersARB_adr := GetFuncAdr('glDrawBuffersARB');
    public z_DrawBuffersARB_ovr_0 := GetFuncOrNil&<procedure(n: Int32; var bufs: DrawBufferMode)>(z_DrawBuffersARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure DrawBuffersARB(n: Int32; bufs: array of DrawBufferMode);
    begin
      z_DrawBuffersARB_ovr_0(n, bufs[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure DrawBuffersARB(n: Int32; var bufs: DrawBufferMode);
    begin
      z_DrawBuffersARB_ovr_0(n, bufs);
    end;
    public z_DrawBuffersARB_ovr_2 := GetFuncOrNil&<procedure(n: Int32; bufs: IntPtr)>(z_DrawBuffersARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure DrawBuffersARB(n: Int32; bufs: IntPtr);
    begin
      z_DrawBuffersARB_ovr_2(n, bufs);
    end;
    
  end;
  
  glDrawBuffersBlendARB = sealed class
    public static function GetFuncAdr([MarshalAs(UnmanagedType.LPStr)] lpszProc: string): IntPtr;
    external 'opengl32.dll' name 'wglGetProcAddress';
    public static function GetFuncOrNil<T>(fadr: IntPtr) :=
    fadr=IntPtr.Zero ? default(T) :
    Marshal.GetDelegateForFunctionPointer&<T>(fadr);
    
    public z_BlendEquationiARB_adr := GetFuncAdr('glBlendEquationiARB');
    public z_BlendEquationiARB_ovr_0 := GetFuncOrNil&<procedure(buf: UInt32; mode: BlendEquationModeEXT)>(z_BlendEquationiARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure BlendEquationiARB(buf: UInt32; mode: BlendEquationModeEXT);
    begin
      z_BlendEquationiARB_ovr_0(buf, mode);
    end;
    
    public z_BlendEquationSeparateiARB_adr := GetFuncAdr('glBlendEquationSeparateiARB');
    public z_BlendEquationSeparateiARB_ovr_0 := GetFuncOrNil&<procedure(buf: UInt32; modeRGB: BlendEquationModeEXT; modeAlpha: BlendEquationModeEXT)>(z_BlendEquationSeparateiARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure BlendEquationSeparateiARB(buf: UInt32; modeRGB: BlendEquationModeEXT; modeAlpha: BlendEquationModeEXT);
    begin
      z_BlendEquationSeparateiARB_ovr_0(buf, modeRGB, modeAlpha);
    end;
    
    public z_BlendFunciARB_adr := GetFuncAdr('glBlendFunciARB');
    public z_BlendFunciARB_ovr_0 := GetFuncOrNil&<procedure(buf: UInt32; src: BlendingFactor; dst: BlendingFactor)>(z_BlendFunciARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure BlendFunciARB(buf: UInt32; src: BlendingFactor; dst: BlendingFactor);
    begin
      z_BlendFunciARB_ovr_0(buf, src, dst);
    end;
    
    public z_BlendFuncSeparateiARB_adr := GetFuncAdr('glBlendFuncSeparateiARB');
    public z_BlendFuncSeparateiARB_ovr_0 := GetFuncOrNil&<procedure(buf: UInt32; srcRGB: BlendingFactor; dstRGB: BlendingFactor; srcAlpha: BlendingFactor; dstAlpha: BlendingFactor)>(z_BlendFuncSeparateiARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure BlendFuncSeparateiARB(buf: UInt32; srcRGB: BlendingFactor; dstRGB: BlendingFactor; srcAlpha: BlendingFactor; dstAlpha: BlendingFactor);
    begin
      z_BlendFuncSeparateiARB_ovr_0(buf, srcRGB, dstRGB, srcAlpha, dstAlpha);
    end;
    
  end;
  
  glDrawElementsBaseVertexARB = sealed class
    public static function GetFuncAdr([MarshalAs(UnmanagedType.LPStr)] lpszProc: string): IntPtr;
    external 'opengl32.dll' name 'wglGetProcAddress';
    public static function GetFuncOrNil<T>(fadr: IntPtr) :=
    fadr=IntPtr.Zero ? default(T) :
    Marshal.GetDelegateForFunctionPointer&<T>(fadr);
    
    public z_DrawElementsBaseVertex_adr := GetFuncAdr('glDrawElementsBaseVertex');
    public z_DrawElementsBaseVertex_ovr_0 := GetFuncOrNil&<procedure(mode: PrimitiveType; count: Int32; &type: DrawElementsType; indices: IntPtr; basevertex: Int32)>(z_DrawElementsBaseVertex_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure DrawElementsBaseVertex(mode: PrimitiveType; count: Int32; &type: DrawElementsType; indices: IntPtr; basevertex: Int32);
    begin
      z_DrawElementsBaseVertex_ovr_0(mode, count, &type, indices, basevertex);
    end;
    
    public z_DrawRangeElementsBaseVertex_adr := GetFuncAdr('glDrawRangeElementsBaseVertex');
    public z_DrawRangeElementsBaseVertex_ovr_0 := GetFuncOrNil&<procedure(mode: PrimitiveType; start: UInt32; &end: UInt32; count: Int32; &type: DrawElementsType; indices: IntPtr; basevertex: Int32)>(z_DrawRangeElementsBaseVertex_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure DrawRangeElementsBaseVertex(mode: PrimitiveType; start: UInt32; &end: UInt32; count: Int32; &type: DrawElementsType; indices: IntPtr; basevertex: Int32);
    begin
      z_DrawRangeElementsBaseVertex_ovr_0(mode, start, &end, count, &type, indices, basevertex);
    end;
    
    public z_DrawElementsInstancedBaseVertex_adr := GetFuncAdr('glDrawElementsInstancedBaseVertex');
    public z_DrawElementsInstancedBaseVertex_ovr_0 := GetFuncOrNil&<procedure(mode: PrimitiveType; count: Int32; &type: DrawElementsType; indices: IntPtr; instancecount: Int32; basevertex: Int32)>(z_DrawElementsInstancedBaseVertex_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure DrawElementsInstancedBaseVertex(mode: PrimitiveType; count: Int32; &type: DrawElementsType; indices: IntPtr; instancecount: Int32; basevertex: Int32);
    begin
      z_DrawElementsInstancedBaseVertex_ovr_0(mode, count, &type, indices, instancecount, basevertex);
    end;
    
    public z_MultiDrawElementsBaseVertex_adr := GetFuncAdr('glMultiDrawElementsBaseVertex');
    public z_MultiDrawElementsBaseVertex_ovr_0 := GetFuncOrNil&<procedure(mode: PrimitiveType; var count: Int32; &type: DrawElementsType; var indices: IntPtr; drawcount: Int32; var basevertex: Int32)>(z_MultiDrawElementsBaseVertex_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiDrawElementsBaseVertex(mode: PrimitiveType; count: array of Int32; &type: DrawElementsType; indices: array of IntPtr; drawcount: Int32; basevertex: array of Int32);
    begin
      z_MultiDrawElementsBaseVertex_ovr_0(mode, count[0], &type, indices[0], drawcount, basevertex[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiDrawElementsBaseVertex(mode: PrimitiveType; count: array of Int32; &type: DrawElementsType; indices: array of IntPtr; drawcount: Int32; var basevertex: Int32);
    begin
      z_MultiDrawElementsBaseVertex_ovr_0(mode, count[0], &type, indices[0], drawcount, basevertex);
    end;
    public z_MultiDrawElementsBaseVertex_ovr_2 := GetFuncOrNil&<procedure(mode: PrimitiveType; var count: Int32; &type: DrawElementsType; var indices: IntPtr; drawcount: Int32; basevertex: IntPtr)>(z_MultiDrawElementsBaseVertex_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiDrawElementsBaseVertex(mode: PrimitiveType; count: array of Int32; &type: DrawElementsType; indices: array of IntPtr; drawcount: Int32; basevertex: IntPtr);
    begin
      z_MultiDrawElementsBaseVertex_ovr_2(mode, count[0], &type, indices[0], drawcount, basevertex);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiDrawElementsBaseVertex(mode: PrimitiveType; count: array of Int32; &type: DrawElementsType; var indices: IntPtr; drawcount: Int32; basevertex: array of Int32);
    begin
      z_MultiDrawElementsBaseVertex_ovr_0(mode, count[0], &type, indices, drawcount, basevertex[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiDrawElementsBaseVertex(mode: PrimitiveType; count: array of Int32; &type: DrawElementsType; var indices: IntPtr; drawcount: Int32; var basevertex: Int32);
    begin
      z_MultiDrawElementsBaseVertex_ovr_0(mode, count[0], &type, indices, drawcount, basevertex);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiDrawElementsBaseVertex(mode: PrimitiveType; count: array of Int32; &type: DrawElementsType; var indices: IntPtr; drawcount: Int32; basevertex: IntPtr);
    begin
      z_MultiDrawElementsBaseVertex_ovr_2(mode, count[0], &type, indices, drawcount, basevertex);
    end;
    public z_MultiDrawElementsBaseVertex_ovr_6 := GetFuncOrNil&<procedure(mode: PrimitiveType; var count: Int32; &type: DrawElementsType; indices: pointer; drawcount: Int32; var basevertex: Int32)>(z_MultiDrawElementsBaseVertex_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiDrawElementsBaseVertex(mode: PrimitiveType; count: array of Int32; &type: DrawElementsType; indices: pointer; drawcount: Int32; basevertex: array of Int32);
    begin
      z_MultiDrawElementsBaseVertex_ovr_6(mode, count[0], &type, indices, drawcount, basevertex[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiDrawElementsBaseVertex(mode: PrimitiveType; count: array of Int32; &type: DrawElementsType; indices: pointer; drawcount: Int32; var basevertex: Int32);
    begin
      z_MultiDrawElementsBaseVertex_ovr_6(mode, count[0], &type, indices, drawcount, basevertex);
    end;
    public z_MultiDrawElementsBaseVertex_ovr_8 := GetFuncOrNil&<procedure(mode: PrimitiveType; var count: Int32; &type: DrawElementsType; indices: pointer; drawcount: Int32; basevertex: IntPtr)>(z_MultiDrawElementsBaseVertex_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiDrawElementsBaseVertex(mode: PrimitiveType; count: array of Int32; &type: DrawElementsType; indices: pointer; drawcount: Int32; basevertex: IntPtr);
    begin
      z_MultiDrawElementsBaseVertex_ovr_8(mode, count[0], &type, indices, drawcount, basevertex);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiDrawElementsBaseVertex(mode: PrimitiveType; var count: Int32; &type: DrawElementsType; indices: array of IntPtr; drawcount: Int32; basevertex: array of Int32);
    begin
      z_MultiDrawElementsBaseVertex_ovr_0(mode, count, &type, indices[0], drawcount, basevertex[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiDrawElementsBaseVertex(mode: PrimitiveType; var count: Int32; &type: DrawElementsType; indices: array of IntPtr; drawcount: Int32; var basevertex: Int32);
    begin
      z_MultiDrawElementsBaseVertex_ovr_0(mode, count, &type, indices[0], drawcount, basevertex);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiDrawElementsBaseVertex(mode: PrimitiveType; var count: Int32; &type: DrawElementsType; indices: array of IntPtr; drawcount: Int32; basevertex: IntPtr);
    begin
      z_MultiDrawElementsBaseVertex_ovr_2(mode, count, &type, indices[0], drawcount, basevertex);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiDrawElementsBaseVertex(mode: PrimitiveType; var count: Int32; &type: DrawElementsType; var indices: IntPtr; drawcount: Int32; basevertex: array of Int32);
    begin
      z_MultiDrawElementsBaseVertex_ovr_0(mode, count, &type, indices, drawcount, basevertex[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiDrawElementsBaseVertex(mode: PrimitiveType; var count: Int32; &type: DrawElementsType; var indices: IntPtr; drawcount: Int32; var basevertex: Int32);
    begin
      z_MultiDrawElementsBaseVertex_ovr_0(mode, count, &type, indices, drawcount, basevertex);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiDrawElementsBaseVertex(mode: PrimitiveType; var count: Int32; &type: DrawElementsType; var indices: IntPtr; drawcount: Int32; basevertex: IntPtr);
    begin
      z_MultiDrawElementsBaseVertex_ovr_2(mode, count, &type, indices, drawcount, basevertex);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiDrawElementsBaseVertex(mode: PrimitiveType; var count: Int32; &type: DrawElementsType; indices: pointer; drawcount: Int32; basevertex: array of Int32);
    begin
      z_MultiDrawElementsBaseVertex_ovr_6(mode, count, &type, indices, drawcount, basevertex[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiDrawElementsBaseVertex(mode: PrimitiveType; var count: Int32; &type: DrawElementsType; indices: pointer; drawcount: Int32; var basevertex: Int32);
    begin
      z_MultiDrawElementsBaseVertex_ovr_6(mode, count, &type, indices, drawcount, basevertex);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiDrawElementsBaseVertex(mode: PrimitiveType; var count: Int32; &type: DrawElementsType; indices: pointer; drawcount: Int32; basevertex: IntPtr);
    begin
      z_MultiDrawElementsBaseVertex_ovr_8(mode, count, &type, indices, drawcount, basevertex);
    end;
    public z_MultiDrawElementsBaseVertex_ovr_18 := GetFuncOrNil&<procedure(mode: PrimitiveType; count: IntPtr; &type: DrawElementsType; var indices: IntPtr; drawcount: Int32; var basevertex: Int32)>(z_MultiDrawElementsBaseVertex_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiDrawElementsBaseVertex(mode: PrimitiveType; count: IntPtr; &type: DrawElementsType; indices: array of IntPtr; drawcount: Int32; basevertex: array of Int32);
    begin
      z_MultiDrawElementsBaseVertex_ovr_18(mode, count, &type, indices[0], drawcount, basevertex[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiDrawElementsBaseVertex(mode: PrimitiveType; count: IntPtr; &type: DrawElementsType; indices: array of IntPtr; drawcount: Int32; var basevertex: Int32);
    begin
      z_MultiDrawElementsBaseVertex_ovr_18(mode, count, &type, indices[0], drawcount, basevertex);
    end;
    public z_MultiDrawElementsBaseVertex_ovr_20 := GetFuncOrNil&<procedure(mode: PrimitiveType; count: IntPtr; &type: DrawElementsType; var indices: IntPtr; drawcount: Int32; basevertex: IntPtr)>(z_MultiDrawElementsBaseVertex_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiDrawElementsBaseVertex(mode: PrimitiveType; count: IntPtr; &type: DrawElementsType; indices: array of IntPtr; drawcount: Int32; basevertex: IntPtr);
    begin
      z_MultiDrawElementsBaseVertex_ovr_20(mode, count, &type, indices[0], drawcount, basevertex);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiDrawElementsBaseVertex(mode: PrimitiveType; count: IntPtr; &type: DrawElementsType; var indices: IntPtr; drawcount: Int32; basevertex: array of Int32);
    begin
      z_MultiDrawElementsBaseVertex_ovr_18(mode, count, &type, indices, drawcount, basevertex[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiDrawElementsBaseVertex(mode: PrimitiveType; count: IntPtr; &type: DrawElementsType; var indices: IntPtr; drawcount: Int32; var basevertex: Int32);
    begin
      z_MultiDrawElementsBaseVertex_ovr_18(mode, count, &type, indices, drawcount, basevertex);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiDrawElementsBaseVertex(mode: PrimitiveType; count: IntPtr; &type: DrawElementsType; var indices: IntPtr; drawcount: Int32; basevertex: IntPtr);
    begin
      z_MultiDrawElementsBaseVertex_ovr_20(mode, count, &type, indices, drawcount, basevertex);
    end;
    public z_MultiDrawElementsBaseVertex_ovr_24 := GetFuncOrNil&<procedure(mode: PrimitiveType; count: IntPtr; &type: DrawElementsType; indices: pointer; drawcount: Int32; var basevertex: Int32)>(z_MultiDrawElementsBaseVertex_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiDrawElementsBaseVertex(mode: PrimitiveType; count: IntPtr; &type: DrawElementsType; indices: pointer; drawcount: Int32; basevertex: array of Int32);
    begin
      z_MultiDrawElementsBaseVertex_ovr_24(mode, count, &type, indices, drawcount, basevertex[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiDrawElementsBaseVertex(mode: PrimitiveType; count: IntPtr; &type: DrawElementsType; indices: pointer; drawcount: Int32; var basevertex: Int32);
    begin
      z_MultiDrawElementsBaseVertex_ovr_24(mode, count, &type, indices, drawcount, basevertex);
    end;
    public z_MultiDrawElementsBaseVertex_ovr_26 := GetFuncOrNil&<procedure(mode: PrimitiveType; count: IntPtr; &type: DrawElementsType; indices: pointer; drawcount: Int32; basevertex: IntPtr)>(z_MultiDrawElementsBaseVertex_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiDrawElementsBaseVertex(mode: PrimitiveType; count: IntPtr; &type: DrawElementsType; indices: pointer; drawcount: Int32; basevertex: IntPtr);
    begin
      z_MultiDrawElementsBaseVertex_ovr_26(mode, count, &type, indices, drawcount, basevertex);
    end;
    
  end;
  
  glDrawIndirectARB = sealed class
    public static function GetFuncAdr([MarshalAs(UnmanagedType.LPStr)] lpszProc: string): IntPtr;
    external 'opengl32.dll' name 'wglGetProcAddress';
    public static function GetFuncOrNil<T>(fadr: IntPtr) :=
    fadr=IntPtr.Zero ? default(T) :
    Marshal.GetDelegateForFunctionPointer&<T>(fadr);
    
    public z_DrawArraysIndirect_adr := GetFuncAdr('glDrawArraysIndirect');
    public z_DrawArraysIndirect_ovr_0 := GetFuncOrNil&<procedure(mode: PrimitiveType; indirect: IntPtr)>(z_DrawArraysIndirect_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure DrawArraysIndirect(mode: PrimitiveType; indirect: IntPtr);
    begin
      z_DrawArraysIndirect_ovr_0(mode, indirect);
    end;
    
    public z_DrawElementsIndirect_adr := GetFuncAdr('glDrawElementsIndirect');
    public z_DrawElementsIndirect_ovr_0 := GetFuncOrNil&<procedure(mode: PrimitiveType; &type: DrawElementsType; indirect: IntPtr)>(z_DrawElementsIndirect_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure DrawElementsIndirect(mode: PrimitiveType; &type: DrawElementsType; indirect: IntPtr);
    begin
      z_DrawElementsIndirect_ovr_0(mode, &type, indirect);
    end;
    
  end;
  
  glDrawInstancedARB = sealed class
    public static function GetFuncAdr([MarshalAs(UnmanagedType.LPStr)] lpszProc: string): IntPtr;
    external 'opengl32.dll' name 'wglGetProcAddress';
    public static function GetFuncOrNil<T>(fadr: IntPtr) :=
    fadr=IntPtr.Zero ? default(T) :
    Marshal.GetDelegateForFunctionPointer&<T>(fadr);
    
    public z_DrawArraysInstancedARB_adr := GetFuncAdr('glDrawArraysInstancedARB');
    public z_DrawArraysInstancedARB_ovr_0 := GetFuncOrNil&<procedure(mode: PrimitiveType; first: Int32; count: Int32; primcount: Int32)>(z_DrawArraysInstancedARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure DrawArraysInstancedARB(mode: PrimitiveType; first: Int32; count: Int32; primcount: Int32);
    begin
      z_DrawArraysInstancedARB_ovr_0(mode, first, count, primcount);
    end;
    
    public z_DrawElementsInstancedARB_adr := GetFuncAdr('glDrawElementsInstancedARB');
    public z_DrawElementsInstancedARB_ovr_0 := GetFuncOrNil&<procedure(mode: PrimitiveType; count: Int32; &type: DrawElementsType; indices: IntPtr; primcount: Int32)>(z_DrawElementsInstancedARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure DrawElementsInstancedARB(mode: PrimitiveType; count: Int32; &type: DrawElementsType; indices: IntPtr; primcount: Int32);
    begin
      z_DrawElementsInstancedARB_ovr_0(mode, count, &type, indices, primcount);
    end;
    
  end;
  
  glFragmentProgramARB = sealed class
    public static function GetFuncAdr([MarshalAs(UnmanagedType.LPStr)] lpszProc: string): IntPtr;
    external 'opengl32.dll' name 'wglGetProcAddress';
    public static function GetFuncOrNil<T>(fadr: IntPtr) :=
    fadr=IntPtr.Zero ? default(T) :
    Marshal.GetDelegateForFunctionPointer&<T>(fadr);
    
    public z_ProgramStringARB_adr := GetFuncAdr('glProgramStringARB');
    public z_ProgramStringARB_ovr_0 := GetFuncOrNil&<procedure(target: ProgramTarget; format: ProgramFormat; len: Int32; string: IntPtr)>(z_ProgramStringARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramStringARB(target: ProgramTarget; format: ProgramFormat; len: Int32; string: IntPtr);
    begin
      z_ProgramStringARB_ovr_0(target, format, len, string);
    end;
    
    public z_BindProgramARB_adr := GetFuncAdr('glBindProgramARB');
    public z_BindProgramARB_ovr_0 := GetFuncOrNil&<procedure(target: ProgramTarget; &program: UInt32)>(z_BindProgramARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure BindProgramARB(target: ProgramTarget; &program: UInt32);
    begin
      z_BindProgramARB_ovr_0(target, &program);
    end;
    
    public z_DeleteProgramsARB_adr := GetFuncAdr('glDeleteProgramsARB');
    public z_DeleteProgramsARB_ovr_0 := GetFuncOrNil&<procedure(n: Int32; var programs: UInt32)>(z_DeleteProgramsARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure DeleteProgramsARB(n: Int32; programs: array of UInt32);
    begin
      z_DeleteProgramsARB_ovr_0(n, programs[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure DeleteProgramsARB(n: Int32; var programs: UInt32);
    begin
      z_DeleteProgramsARB_ovr_0(n, programs);
    end;
    public z_DeleteProgramsARB_ovr_2 := GetFuncOrNil&<procedure(n: Int32; programs: IntPtr)>(z_DeleteProgramsARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure DeleteProgramsARB(n: Int32; programs: IntPtr);
    begin
      z_DeleteProgramsARB_ovr_2(n, programs);
    end;
    
    public z_GenProgramsARB_adr := GetFuncAdr('glGenProgramsARB');
    public z_GenProgramsARB_ovr_0 := GetFuncOrNil&<procedure(n: Int32; var programs: UInt32)>(z_GenProgramsARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GenProgramsARB(n: Int32; programs: array of UInt32);
    begin
      z_GenProgramsARB_ovr_0(n, programs[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GenProgramsARB(n: Int32; var programs: UInt32);
    begin
      z_GenProgramsARB_ovr_0(n, programs);
    end;
    public z_GenProgramsARB_ovr_2 := GetFuncOrNil&<procedure(n: Int32; programs: IntPtr)>(z_GenProgramsARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GenProgramsARB(n: Int32; programs: IntPtr);
    begin
      z_GenProgramsARB_ovr_2(n, programs);
    end;
    
    public z_ProgramEnvParameter4dARB_adr := GetFuncAdr('glProgramEnvParameter4dARB');
    public z_ProgramEnvParameter4dARB_ovr_0 := GetFuncOrNil&<procedure(target: ProgramTarget; index: UInt32; x: real; y: real; z: real; w: real)>(z_ProgramEnvParameter4dARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramEnvParameter4dARB(target: ProgramTarget; index: UInt32; x: real; y: real; z: real; w: real);
    begin
      z_ProgramEnvParameter4dARB_ovr_0(target, index, x, y, z, w);
    end;
    
    public z_ProgramEnvParameter4dvARB_adr := GetFuncAdr('glProgramEnvParameter4dvARB');
    public z_ProgramEnvParameter4dvARB_ovr_0 := GetFuncOrNil&<procedure(target: ProgramTarget; index: UInt32; var &params: real)>(z_ProgramEnvParameter4dvARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramEnvParameter4dvARB(target: ProgramTarget; index: UInt32; &params: array of real);
    begin
      z_ProgramEnvParameter4dvARB_ovr_0(target, index, &params[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramEnvParameter4dvARB(target: ProgramTarget; index: UInt32; var &params: real);
    begin
      z_ProgramEnvParameter4dvARB_ovr_0(target, index, &params);
    end;
    public z_ProgramEnvParameter4dvARB_ovr_2 := GetFuncOrNil&<procedure(target: ProgramTarget; index: UInt32; &params: IntPtr)>(z_ProgramEnvParameter4dvARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramEnvParameter4dvARB(target: ProgramTarget; index: UInt32; &params: IntPtr);
    begin
      z_ProgramEnvParameter4dvARB_ovr_2(target, index, &params);
    end;
    
    public z_ProgramEnvParameter4fARB_adr := GetFuncAdr('glProgramEnvParameter4fARB');
    public z_ProgramEnvParameter4fARB_ovr_0 := GetFuncOrNil&<procedure(target: ProgramTarget; index: UInt32; x: single; y: single; z: single; w: single)>(z_ProgramEnvParameter4fARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramEnvParameter4fARB(target: ProgramTarget; index: UInt32; x: single; y: single; z: single; w: single);
    begin
      z_ProgramEnvParameter4fARB_ovr_0(target, index, x, y, z, w);
    end;
    
    public z_ProgramEnvParameter4fvARB_adr := GetFuncAdr('glProgramEnvParameter4fvARB');
    public z_ProgramEnvParameter4fvARB_ovr_0 := GetFuncOrNil&<procedure(target: ProgramTarget; index: UInt32; var &params: single)>(z_ProgramEnvParameter4fvARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramEnvParameter4fvARB(target: ProgramTarget; index: UInt32; &params: array of single);
    begin
      z_ProgramEnvParameter4fvARB_ovr_0(target, index, &params[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramEnvParameter4fvARB(target: ProgramTarget; index: UInt32; var &params: single);
    begin
      z_ProgramEnvParameter4fvARB_ovr_0(target, index, &params);
    end;
    public z_ProgramEnvParameter4fvARB_ovr_2 := GetFuncOrNil&<procedure(target: ProgramTarget; index: UInt32; &params: IntPtr)>(z_ProgramEnvParameter4fvARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramEnvParameter4fvARB(target: ProgramTarget; index: UInt32; &params: IntPtr);
    begin
      z_ProgramEnvParameter4fvARB_ovr_2(target, index, &params);
    end;
    
    public z_ProgramLocalParameter4dARB_adr := GetFuncAdr('glProgramLocalParameter4dARB');
    public z_ProgramLocalParameter4dARB_ovr_0 := GetFuncOrNil&<procedure(target: ProgramTarget; index: UInt32; x: real; y: real; z: real; w: real)>(z_ProgramLocalParameter4dARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramLocalParameter4dARB(target: ProgramTarget; index: UInt32; x: real; y: real; z: real; w: real);
    begin
      z_ProgramLocalParameter4dARB_ovr_0(target, index, x, y, z, w);
    end;
    
    public z_ProgramLocalParameter4dvARB_adr := GetFuncAdr('glProgramLocalParameter4dvARB');
    public z_ProgramLocalParameter4dvARB_ovr_0 := GetFuncOrNil&<procedure(target: ProgramTarget; index: UInt32; var &params: real)>(z_ProgramLocalParameter4dvARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramLocalParameter4dvARB(target: ProgramTarget; index: UInt32; &params: array of real);
    begin
      z_ProgramLocalParameter4dvARB_ovr_0(target, index, &params[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramLocalParameter4dvARB(target: ProgramTarget; index: UInt32; var &params: real);
    begin
      z_ProgramLocalParameter4dvARB_ovr_0(target, index, &params);
    end;
    public z_ProgramLocalParameter4dvARB_ovr_2 := GetFuncOrNil&<procedure(target: ProgramTarget; index: UInt32; &params: IntPtr)>(z_ProgramLocalParameter4dvARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramLocalParameter4dvARB(target: ProgramTarget; index: UInt32; &params: IntPtr);
    begin
      z_ProgramLocalParameter4dvARB_ovr_2(target, index, &params);
    end;
    
    public z_ProgramLocalParameter4fARB_adr := GetFuncAdr('glProgramLocalParameter4fARB');
    public z_ProgramLocalParameter4fARB_ovr_0 := GetFuncOrNil&<procedure(target: ProgramTarget; index: UInt32; x: single; y: single; z: single; w: single)>(z_ProgramLocalParameter4fARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramLocalParameter4fARB(target: ProgramTarget; index: UInt32; x: single; y: single; z: single; w: single);
    begin
      z_ProgramLocalParameter4fARB_ovr_0(target, index, x, y, z, w);
    end;
    
    public z_ProgramLocalParameter4fvARB_adr := GetFuncAdr('glProgramLocalParameter4fvARB');
    public z_ProgramLocalParameter4fvARB_ovr_0 := GetFuncOrNil&<procedure(target: ProgramTarget; index: UInt32; var &params: single)>(z_ProgramLocalParameter4fvARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramLocalParameter4fvARB(target: ProgramTarget; index: UInt32; &params: array of single);
    begin
      z_ProgramLocalParameter4fvARB_ovr_0(target, index, &params[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramLocalParameter4fvARB(target: ProgramTarget; index: UInt32; var &params: single);
    begin
      z_ProgramLocalParameter4fvARB_ovr_0(target, index, &params);
    end;
    public z_ProgramLocalParameter4fvARB_ovr_2 := GetFuncOrNil&<procedure(target: ProgramTarget; index: UInt32; &params: IntPtr)>(z_ProgramLocalParameter4fvARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramLocalParameter4fvARB(target: ProgramTarget; index: UInt32; &params: IntPtr);
    begin
      z_ProgramLocalParameter4fvARB_ovr_2(target, index, &params);
    end;
    
    public z_GetProgramEnvParameterdvARB_adr := GetFuncAdr('glGetProgramEnvParameterdvARB');
    public z_GetProgramEnvParameterdvARB_ovr_0 := GetFuncOrNil&<procedure(target: ProgramTarget; index: UInt32; var &params: real)>(z_GetProgramEnvParameterdvARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetProgramEnvParameterdvARB(target: ProgramTarget; index: UInt32; &params: array of real);
    begin
      z_GetProgramEnvParameterdvARB_ovr_0(target, index, &params[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetProgramEnvParameterdvARB(target: ProgramTarget; index: UInt32; var &params: real);
    begin
      z_GetProgramEnvParameterdvARB_ovr_0(target, index, &params);
    end;
    public z_GetProgramEnvParameterdvARB_ovr_2 := GetFuncOrNil&<procedure(target: ProgramTarget; index: UInt32; &params: IntPtr)>(z_GetProgramEnvParameterdvARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetProgramEnvParameterdvARB(target: ProgramTarget; index: UInt32; &params: IntPtr);
    begin
      z_GetProgramEnvParameterdvARB_ovr_2(target, index, &params);
    end;
    
    public z_GetProgramEnvParameterfvARB_adr := GetFuncAdr('glGetProgramEnvParameterfvARB');
    public z_GetProgramEnvParameterfvARB_ovr_0 := GetFuncOrNil&<procedure(target: ProgramTarget; index: UInt32; var &params: single)>(z_GetProgramEnvParameterfvARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetProgramEnvParameterfvARB(target: ProgramTarget; index: UInt32; &params: array of single);
    begin
      z_GetProgramEnvParameterfvARB_ovr_0(target, index, &params[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetProgramEnvParameterfvARB(target: ProgramTarget; index: UInt32; var &params: single);
    begin
      z_GetProgramEnvParameterfvARB_ovr_0(target, index, &params);
    end;
    public z_GetProgramEnvParameterfvARB_ovr_2 := GetFuncOrNil&<procedure(target: ProgramTarget; index: UInt32; &params: IntPtr)>(z_GetProgramEnvParameterfvARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetProgramEnvParameterfvARB(target: ProgramTarget; index: UInt32; &params: IntPtr);
    begin
      z_GetProgramEnvParameterfvARB_ovr_2(target, index, &params);
    end;
    
    public z_GetProgramLocalParameterdvARB_adr := GetFuncAdr('glGetProgramLocalParameterdvARB');
    public z_GetProgramLocalParameterdvARB_ovr_0 := GetFuncOrNil&<procedure(target: ProgramTarget; index: UInt32; var &params: real)>(z_GetProgramLocalParameterdvARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetProgramLocalParameterdvARB(target: ProgramTarget; index: UInt32; &params: array of real);
    begin
      z_GetProgramLocalParameterdvARB_ovr_0(target, index, &params[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetProgramLocalParameterdvARB(target: ProgramTarget; index: UInt32; var &params: real);
    begin
      z_GetProgramLocalParameterdvARB_ovr_0(target, index, &params);
    end;
    public z_GetProgramLocalParameterdvARB_ovr_2 := GetFuncOrNil&<procedure(target: ProgramTarget; index: UInt32; &params: IntPtr)>(z_GetProgramLocalParameterdvARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetProgramLocalParameterdvARB(target: ProgramTarget; index: UInt32; &params: IntPtr);
    begin
      z_GetProgramLocalParameterdvARB_ovr_2(target, index, &params);
    end;
    
    public z_GetProgramLocalParameterfvARB_adr := GetFuncAdr('glGetProgramLocalParameterfvARB');
    public z_GetProgramLocalParameterfvARB_ovr_0 := GetFuncOrNil&<procedure(target: ProgramTarget; index: UInt32; var &params: single)>(z_GetProgramLocalParameterfvARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetProgramLocalParameterfvARB(target: ProgramTarget; index: UInt32; &params: array of single);
    begin
      z_GetProgramLocalParameterfvARB_ovr_0(target, index, &params[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetProgramLocalParameterfvARB(target: ProgramTarget; index: UInt32; var &params: single);
    begin
      z_GetProgramLocalParameterfvARB_ovr_0(target, index, &params);
    end;
    public z_GetProgramLocalParameterfvARB_ovr_2 := GetFuncOrNil&<procedure(target: ProgramTarget; index: UInt32; &params: IntPtr)>(z_GetProgramLocalParameterfvARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetProgramLocalParameterfvARB(target: ProgramTarget; index: UInt32; &params: IntPtr);
    begin
      z_GetProgramLocalParameterfvARB_ovr_2(target, index, &params);
    end;
    
    public z_GetProgramivARB_adr := GetFuncAdr('glGetProgramivARB');
    public z_GetProgramivARB_ovr_0 := GetFuncOrNil&<procedure(target: ProgramTarget; pname: ProgramPropertyARB; var &params: Int32)>(z_GetProgramivARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetProgramivARB(target: ProgramTarget; pname: ProgramPropertyARB; &params: array of Int32);
    begin
      z_GetProgramivARB_ovr_0(target, pname, &params[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetProgramivARB(target: ProgramTarget; pname: ProgramPropertyARB; var &params: Int32);
    begin
      z_GetProgramivARB_ovr_0(target, pname, &params);
    end;
    public z_GetProgramivARB_ovr_2 := GetFuncOrNil&<procedure(target: ProgramTarget; pname: ProgramPropertyARB; &params: IntPtr)>(z_GetProgramivARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetProgramivARB(target: ProgramTarget; pname: ProgramPropertyARB; &params: IntPtr);
    begin
      z_GetProgramivARB_ovr_2(target, pname, &params);
    end;
    
    public z_GetProgramStringARB_adr := GetFuncAdr('glGetProgramStringARB');
    public z_GetProgramStringARB_ovr_0 := GetFuncOrNil&<procedure(target: ProgramTarget; pname: ProgramStringProperty; string: IntPtr)>(z_GetProgramStringARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetProgramStringARB(target: ProgramTarget; pname: ProgramStringProperty; string: IntPtr);
    begin
      z_GetProgramStringARB_ovr_0(target, pname, string);
    end;
    
    public z_IsProgramARB_adr := GetFuncAdr('glIsProgramARB');
    public z_IsProgramARB_ovr_0 := GetFuncOrNil&<function(&program: UInt32): boolean>(z_IsProgramARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function IsProgramARB(&program: UInt32): boolean;
    begin
      Result := z_IsProgramARB_ovr_0(&program);
    end;
    
  end;
  
  glFramebufferNoAttachmentsARB = sealed class
    public static function GetFuncAdr([MarshalAs(UnmanagedType.LPStr)] lpszProc: string): IntPtr;
    external 'opengl32.dll' name 'wglGetProcAddress';
    public static function GetFuncOrNil<T>(fadr: IntPtr) :=
    fadr=IntPtr.Zero ? default(T) :
    Marshal.GetDelegateForFunctionPointer&<T>(fadr);
    
    public z_FramebufferParameteri_adr := GetFuncAdr('glFramebufferParameteri');
    public z_FramebufferParameteri_ovr_0 := GetFuncOrNil&<procedure(target: FramebufferTarget; pname: FramebufferParameterName; param: Int32)>(z_FramebufferParameteri_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure FramebufferParameteri(target: FramebufferTarget; pname: FramebufferParameterName; param: Int32);
    begin
      z_FramebufferParameteri_ovr_0(target, pname, param);
    end;
    
    public z_GetFramebufferParameteriv_adr := GetFuncAdr('glGetFramebufferParameteriv');
    public z_GetFramebufferParameteriv_ovr_0 := GetFuncOrNil&<procedure(target: FramebufferTarget; pname: FramebufferAttachmentParameterName; var &params: Int32)>(z_GetFramebufferParameteriv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetFramebufferParameteriv(target: FramebufferTarget; pname: FramebufferAttachmentParameterName; &params: array of Int32);
    begin
      z_GetFramebufferParameteriv_ovr_0(target, pname, &params[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetFramebufferParameteriv(target: FramebufferTarget; pname: FramebufferAttachmentParameterName; var &params: Int32);
    begin
      z_GetFramebufferParameteriv_ovr_0(target, pname, &params);
    end;
    public z_GetFramebufferParameteriv_ovr_2 := GetFuncOrNil&<procedure(target: FramebufferTarget; pname: FramebufferAttachmentParameterName; &params: IntPtr)>(z_GetFramebufferParameteriv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetFramebufferParameteriv(target: FramebufferTarget; pname: FramebufferAttachmentParameterName; &params: IntPtr);
    begin
      z_GetFramebufferParameteriv_ovr_2(target, pname, &params);
    end;
    
  end;
  
  glFramebufferObjectARB = sealed class
    public static function GetFuncAdr([MarshalAs(UnmanagedType.LPStr)] lpszProc: string): IntPtr;
    external 'opengl32.dll' name 'wglGetProcAddress';
    public static function GetFuncOrNil<T>(fadr: IntPtr) :=
    fadr=IntPtr.Zero ? default(T) :
    Marshal.GetDelegateForFunctionPointer&<T>(fadr);
    
    public z_IsRenderbuffer_adr := GetFuncAdr('glIsRenderbuffer');
    public z_IsRenderbuffer_ovr_0 := GetFuncOrNil&<function(renderbuffer: RenderbufferName): boolean>(z_IsRenderbuffer_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function IsRenderbuffer(renderbuffer: RenderbufferName): boolean;
    begin
      Result := z_IsRenderbuffer_ovr_0(renderbuffer);
    end;
    
    public z_BindRenderbuffer_adr := GetFuncAdr('glBindRenderbuffer');
    public z_BindRenderbuffer_ovr_0 := GetFuncOrNil&<procedure(target: RenderbufferTarget; renderbuffer: RenderbufferName)>(z_BindRenderbuffer_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure BindRenderbuffer(target: RenderbufferTarget; renderbuffer: RenderbufferName);
    begin
      z_BindRenderbuffer_ovr_0(target, renderbuffer);
    end;
    
    public z_DeleteRenderbuffers_adr := GetFuncAdr('glDeleteRenderbuffers');
    public z_DeleteRenderbuffers_ovr_0 := GetFuncOrNil&<procedure(n: Int32; var renderbuffers: UInt32)>(z_DeleteRenderbuffers_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure DeleteRenderbuffers(n: Int32; renderbuffers: array of UInt32);
    begin
      z_DeleteRenderbuffers_ovr_0(n, renderbuffers[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure DeleteRenderbuffers(n: Int32; var renderbuffers: UInt32);
    begin
      z_DeleteRenderbuffers_ovr_0(n, renderbuffers);
    end;
    public z_DeleteRenderbuffers_ovr_2 := GetFuncOrNil&<procedure(n: Int32; renderbuffers: IntPtr)>(z_DeleteRenderbuffers_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure DeleteRenderbuffers(n: Int32; renderbuffers: IntPtr);
    begin
      z_DeleteRenderbuffers_ovr_2(n, renderbuffers);
    end;
    
    public z_GenRenderbuffers_adr := GetFuncAdr('glGenRenderbuffers');
    public z_GenRenderbuffers_ovr_0 := GetFuncOrNil&<procedure(n: Int32; var renderbuffers: UInt32)>(z_GenRenderbuffers_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GenRenderbuffers(n: Int32; renderbuffers: array of UInt32);
    begin
      z_GenRenderbuffers_ovr_0(n, renderbuffers[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GenRenderbuffers(n: Int32; var renderbuffers: UInt32);
    begin
      z_GenRenderbuffers_ovr_0(n, renderbuffers);
    end;
    public z_GenRenderbuffers_ovr_2 := GetFuncOrNil&<procedure(n: Int32; renderbuffers: IntPtr)>(z_GenRenderbuffers_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GenRenderbuffers(n: Int32; renderbuffers: IntPtr);
    begin
      z_GenRenderbuffers_ovr_2(n, renderbuffers);
    end;
    
    public z_RenderbufferStorage_adr := GetFuncAdr('glRenderbufferStorage');
    public z_RenderbufferStorage_ovr_0 := GetFuncOrNil&<procedure(target: RenderbufferTarget; _internalformat: InternalFormat; width: Int32; height: Int32)>(z_RenderbufferStorage_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure RenderbufferStorage(target: RenderbufferTarget; _internalformat: InternalFormat; width: Int32; height: Int32);
    begin
      z_RenderbufferStorage_ovr_0(target, _internalformat, width, height);
    end;
    
    public z_GetRenderbufferParameteriv_adr := GetFuncAdr('glGetRenderbufferParameteriv');
    public z_GetRenderbufferParameteriv_ovr_0 := GetFuncOrNil&<procedure(target: RenderbufferTarget; pname: RenderbufferParameterName; var &params: Int32)>(z_GetRenderbufferParameteriv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetRenderbufferParameteriv(target: RenderbufferTarget; pname: RenderbufferParameterName; &params: array of Int32);
    begin
      z_GetRenderbufferParameteriv_ovr_0(target, pname, &params[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetRenderbufferParameteriv(target: RenderbufferTarget; pname: RenderbufferParameterName; var &params: Int32);
    begin
      z_GetRenderbufferParameteriv_ovr_0(target, pname, &params);
    end;
    public z_GetRenderbufferParameteriv_ovr_2 := GetFuncOrNil&<procedure(target: RenderbufferTarget; pname: RenderbufferParameterName; &params: IntPtr)>(z_GetRenderbufferParameteriv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetRenderbufferParameteriv(target: RenderbufferTarget; pname: RenderbufferParameterName; &params: IntPtr);
    begin
      z_GetRenderbufferParameteriv_ovr_2(target, pname, &params);
    end;
    
    public z_IsFramebuffer_adr := GetFuncAdr('glIsFramebuffer');
    public z_IsFramebuffer_ovr_0 := GetFuncOrNil&<function(framebuffer: FramebufferName): boolean>(z_IsFramebuffer_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function IsFramebuffer(framebuffer: FramebufferName): boolean;
    begin
      Result := z_IsFramebuffer_ovr_0(framebuffer);
    end;
    
    public z_BindFramebuffer_adr := GetFuncAdr('glBindFramebuffer');
    public z_BindFramebuffer_ovr_0 := GetFuncOrNil&<procedure(target: FramebufferTarget; framebuffer: FramebufferName)>(z_BindFramebuffer_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure BindFramebuffer(target: FramebufferTarget; framebuffer: FramebufferName);
    begin
      z_BindFramebuffer_ovr_0(target, framebuffer);
    end;
    
    public z_DeleteFramebuffers_adr := GetFuncAdr('glDeleteFramebuffers');
    public z_DeleteFramebuffers_ovr_0 := GetFuncOrNil&<procedure(n: Int32; var framebuffers: UInt32)>(z_DeleteFramebuffers_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure DeleteFramebuffers(n: Int32; framebuffers: array of UInt32);
    begin
      z_DeleteFramebuffers_ovr_0(n, framebuffers[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure DeleteFramebuffers(n: Int32; var framebuffers: UInt32);
    begin
      z_DeleteFramebuffers_ovr_0(n, framebuffers);
    end;
    public z_DeleteFramebuffers_ovr_2 := GetFuncOrNil&<procedure(n: Int32; framebuffers: IntPtr)>(z_DeleteFramebuffers_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure DeleteFramebuffers(n: Int32; framebuffers: IntPtr);
    begin
      z_DeleteFramebuffers_ovr_2(n, framebuffers);
    end;
    
    public z_GenFramebuffers_adr := GetFuncAdr('glGenFramebuffers');
    public z_GenFramebuffers_ovr_0 := GetFuncOrNil&<procedure(n: Int32; var framebuffers: UInt32)>(z_GenFramebuffers_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GenFramebuffers(n: Int32; framebuffers: array of UInt32);
    begin
      z_GenFramebuffers_ovr_0(n, framebuffers[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GenFramebuffers(n: Int32; var framebuffers: UInt32);
    begin
      z_GenFramebuffers_ovr_0(n, framebuffers);
    end;
    public z_GenFramebuffers_ovr_2 := GetFuncOrNil&<procedure(n: Int32; framebuffers: IntPtr)>(z_GenFramebuffers_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GenFramebuffers(n: Int32; framebuffers: IntPtr);
    begin
      z_GenFramebuffers_ovr_2(n, framebuffers);
    end;
    
    public z_CheckFramebufferStatus_adr := GetFuncAdr('glCheckFramebufferStatus');
    public z_CheckFramebufferStatus_ovr_0 := GetFuncOrNil&<function(target: FramebufferTarget): FramebufferStatus>(z_CheckFramebufferStatus_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function CheckFramebufferStatus(target: FramebufferTarget): FramebufferStatus;
    begin
      Result := z_CheckFramebufferStatus_ovr_0(target);
    end;
    
    public z_FramebufferTexture1D_adr := GetFuncAdr('glFramebufferTexture1D');
    public z_FramebufferTexture1D_ovr_0 := GetFuncOrNil&<procedure(target: FramebufferTarget; attachment: FramebufferAttachment; textarget: TextureTarget; texture: UInt32; level: Int32)>(z_FramebufferTexture1D_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure FramebufferTexture1D(target: FramebufferTarget; attachment: FramebufferAttachment; textarget: TextureTarget; texture: UInt32; level: Int32);
    begin
      z_FramebufferTexture1D_ovr_0(target, attachment, textarget, texture, level);
    end;
    
    public z_FramebufferTexture2D_adr := GetFuncAdr('glFramebufferTexture2D');
    public z_FramebufferTexture2D_ovr_0 := GetFuncOrNil&<procedure(target: FramebufferTarget; attachment: FramebufferAttachment; textarget: TextureTarget; texture: UInt32; level: Int32)>(z_FramebufferTexture2D_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure FramebufferTexture2D(target: FramebufferTarget; attachment: FramebufferAttachment; textarget: TextureTarget; texture: UInt32; level: Int32);
    begin
      z_FramebufferTexture2D_ovr_0(target, attachment, textarget, texture, level);
    end;
    
    public z_FramebufferTexture3D_adr := GetFuncAdr('glFramebufferTexture3D');
    public z_FramebufferTexture3D_ovr_0 := GetFuncOrNil&<procedure(target: FramebufferTarget; attachment: FramebufferAttachment; textarget: TextureTarget; texture: UInt32; level: Int32; zoffset: Int32)>(z_FramebufferTexture3D_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure FramebufferTexture3D(target: FramebufferTarget; attachment: FramebufferAttachment; textarget: TextureTarget; texture: UInt32; level: Int32; zoffset: Int32);
    begin
      z_FramebufferTexture3D_ovr_0(target, attachment, textarget, texture, level, zoffset);
    end;
    
    public z_FramebufferRenderbuffer_adr := GetFuncAdr('glFramebufferRenderbuffer');
    public z_FramebufferRenderbuffer_ovr_0 := GetFuncOrNil&<procedure(target: FramebufferTarget; attachment: FramebufferAttachment; _renderbuffertarget: RenderbufferTarget; renderbuffer: RenderbufferName)>(z_FramebufferRenderbuffer_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure FramebufferRenderbuffer(target: FramebufferTarget; attachment: FramebufferAttachment; _renderbuffertarget: RenderbufferTarget; renderbuffer: RenderbufferName);
    begin
      z_FramebufferRenderbuffer_ovr_0(target, attachment, _renderbuffertarget, renderbuffer);
    end;
    
    public z_GetFramebufferAttachmentParameteriv_adr := GetFuncAdr('glGetFramebufferAttachmentParameteriv');
    public z_GetFramebufferAttachmentParameteriv_ovr_0 := GetFuncOrNil&<procedure(target: FramebufferTarget; attachment: FramebufferAttachment; pname: FramebufferAttachmentParameterName; var &params: Int32)>(z_GetFramebufferAttachmentParameteriv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetFramebufferAttachmentParameteriv(target: FramebufferTarget; attachment: FramebufferAttachment; pname: FramebufferAttachmentParameterName; &params: array of Int32);
    begin
      z_GetFramebufferAttachmentParameteriv_ovr_0(target, attachment, pname, &params[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetFramebufferAttachmentParameteriv(target: FramebufferTarget; attachment: FramebufferAttachment; pname: FramebufferAttachmentParameterName; var &params: Int32);
    begin
      z_GetFramebufferAttachmentParameteriv_ovr_0(target, attachment, pname, &params);
    end;
    public z_GetFramebufferAttachmentParameteriv_ovr_2 := GetFuncOrNil&<procedure(target: FramebufferTarget; attachment: FramebufferAttachment; pname: FramebufferAttachmentParameterName; &params: IntPtr)>(z_GetFramebufferAttachmentParameteriv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetFramebufferAttachmentParameteriv(target: FramebufferTarget; attachment: FramebufferAttachment; pname: FramebufferAttachmentParameterName; &params: IntPtr);
    begin
      z_GetFramebufferAttachmentParameteriv_ovr_2(target, attachment, pname, &params);
    end;
    
    public z_GenerateMipmap_adr := GetFuncAdr('glGenerateMipmap');
    public z_GenerateMipmap_ovr_0 := GetFuncOrNil&<procedure(target: TextureTarget)>(z_GenerateMipmap_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GenerateMipmap(target: TextureTarget);
    begin
      z_GenerateMipmap_ovr_0(target);
    end;
    
    public z_BlitFramebuffer_adr := GetFuncAdr('glBlitFramebuffer');
    public z_BlitFramebuffer_ovr_0 := GetFuncOrNil&<procedure(srcX0: Int32; srcY0: Int32; srcX1: Int32; srcY1: Int32; dstX0: Int32; dstY0: Int32; dstX1: Int32; dstY1: Int32; mask: ClearBufferMask; filter: BlitFramebufferFilter)>(z_BlitFramebuffer_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure BlitFramebuffer(srcX0: Int32; srcY0: Int32; srcX1: Int32; srcY1: Int32; dstX0: Int32; dstY0: Int32; dstX1: Int32; dstY1: Int32; mask: ClearBufferMask; filter: BlitFramebufferFilter);
    begin
      z_BlitFramebuffer_ovr_0(srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, mask, filter);
    end;
    
    public z_RenderbufferStorageMultisample_adr := GetFuncAdr('glRenderbufferStorageMultisample');
    public z_RenderbufferStorageMultisample_ovr_0 := GetFuncOrNil&<procedure(target: RenderbufferTarget; samples: Int32; _internalformat: InternalFormat; width: Int32; height: Int32)>(z_RenderbufferStorageMultisample_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure RenderbufferStorageMultisample(target: RenderbufferTarget; samples: Int32; _internalformat: InternalFormat; width: Int32; height: Int32);
    begin
      z_RenderbufferStorageMultisample_ovr_0(target, samples, _internalformat, width, height);
    end;
    
    public z_FramebufferTextureLayer_adr := GetFuncAdr('glFramebufferTextureLayer');
    public z_FramebufferTextureLayer_ovr_0 := GetFuncOrNil&<procedure(target: FramebufferTarget; attachment: FramebufferAttachment; texture: TextureName; level: Int32; layer: Int32)>(z_FramebufferTextureLayer_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure FramebufferTextureLayer(target: FramebufferTarget; attachment: FramebufferAttachment; texture: TextureName; level: Int32; layer: Int32);
    begin
      z_FramebufferTextureLayer_ovr_0(target, attachment, texture, level, layer);
    end;
    
  end;
  
  glGeometryShader4ARB = sealed class
    public static function GetFuncAdr([MarshalAs(UnmanagedType.LPStr)] lpszProc: string): IntPtr;
    external 'opengl32.dll' name 'wglGetProcAddress';
    public static function GetFuncOrNil<T>(fadr: IntPtr) :=
    fadr=IntPtr.Zero ? default(T) :
    Marshal.GetDelegateForFunctionPointer&<T>(fadr);
    
    public z_ProgramParameteriARB_adr := GetFuncAdr('glProgramParameteriARB');
    public z_ProgramParameteriARB_ovr_0 := GetFuncOrNil&<procedure(&program: UInt32; pname: ProgramParameterPName; value: Int32)>(z_ProgramParameteriARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramParameteriARB(&program: UInt32; pname: ProgramParameterPName; value: Int32);
    begin
      z_ProgramParameteriARB_ovr_0(&program, pname, value);
    end;
    
    public z_FramebufferTextureARB_adr := GetFuncAdr('glFramebufferTextureARB');
    public z_FramebufferTextureARB_ovr_0 := GetFuncOrNil&<procedure(target: FramebufferTarget; attachment: FramebufferAttachment; texture: UInt32; level: Int32)>(z_FramebufferTextureARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure FramebufferTextureARB(target: FramebufferTarget; attachment: FramebufferAttachment; texture: UInt32; level: Int32);
    begin
      z_FramebufferTextureARB_ovr_0(target, attachment, texture, level);
    end;
    
    public z_FramebufferTextureLayerARB_adr := GetFuncAdr('glFramebufferTextureLayerARB');
    public z_FramebufferTextureLayerARB_ovr_0 := GetFuncOrNil&<procedure(target: FramebufferTarget; attachment: FramebufferAttachment; texture: UInt32; level: Int32; layer: Int32)>(z_FramebufferTextureLayerARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure FramebufferTextureLayerARB(target: FramebufferTarget; attachment: FramebufferAttachment; texture: UInt32; level: Int32; layer: Int32);
    begin
      z_FramebufferTextureLayerARB_ovr_0(target, attachment, texture, level, layer);
    end;
    
    public z_FramebufferTextureFaceARB_adr := GetFuncAdr('glFramebufferTextureFaceARB');
    public z_FramebufferTextureFaceARB_ovr_0 := GetFuncOrNil&<procedure(target: FramebufferTarget; attachment: FramebufferAttachment; texture: UInt32; level: Int32; face: TextureTarget)>(z_FramebufferTextureFaceARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure FramebufferTextureFaceARB(target: FramebufferTarget; attachment: FramebufferAttachment; texture: UInt32; level: Int32; face: TextureTarget);
    begin
      z_FramebufferTextureFaceARB_ovr_0(target, attachment, texture, level, face);
    end;
    
  end;
  
  glGetProgramBinaryARB = sealed class
    public static function GetFuncAdr([MarshalAs(UnmanagedType.LPStr)] lpszProc: string): IntPtr;
    external 'opengl32.dll' name 'wglGetProcAddress';
    public static function GetFuncOrNil<T>(fadr: IntPtr) :=
    fadr=IntPtr.Zero ? default(T) :
    Marshal.GetDelegateForFunctionPointer&<T>(fadr);
    
    public z_GetProgramBinary_adr := GetFuncAdr('glGetProgramBinary');
    public z_GetProgramBinary_ovr_0 := GetFuncOrNil&<procedure(&program: UInt32; bufSize: Int32; var length: Int32; var binaryFormat: DummyEnum; binary: IntPtr)>(z_GetProgramBinary_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetProgramBinary(&program: UInt32; bufSize: Int32; length: array of Int32; binaryFormat: array of DummyEnum; binary: IntPtr);
    begin
      z_GetProgramBinary_ovr_0(&program, bufSize, length[0], binaryFormat[0], binary);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetProgramBinary(&program: UInt32; bufSize: Int32; length: array of Int32; var binaryFormat: DummyEnum; binary: IntPtr);
    begin
      z_GetProgramBinary_ovr_0(&program, bufSize, length[0], binaryFormat, binary);
    end;
    public z_GetProgramBinary_ovr_2 := GetFuncOrNil&<procedure(&program: UInt32; bufSize: Int32; var length: Int32; binaryFormat: IntPtr; binary: IntPtr)>(z_GetProgramBinary_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetProgramBinary(&program: UInt32; bufSize: Int32; length: array of Int32; binaryFormat: IntPtr; binary: IntPtr);
    begin
      z_GetProgramBinary_ovr_2(&program, bufSize, length[0], binaryFormat, binary);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetProgramBinary(&program: UInt32; bufSize: Int32; var length: Int32; binaryFormat: array of DummyEnum; binary: IntPtr);
    begin
      z_GetProgramBinary_ovr_0(&program, bufSize, length, binaryFormat[0], binary);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetProgramBinary(&program: UInt32; bufSize: Int32; var length: Int32; var binaryFormat: DummyEnum; binary: IntPtr);
    begin
      z_GetProgramBinary_ovr_0(&program, bufSize, length, binaryFormat, binary);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetProgramBinary(&program: UInt32; bufSize: Int32; var length: Int32; binaryFormat: IntPtr; binary: IntPtr);
    begin
      z_GetProgramBinary_ovr_2(&program, bufSize, length, binaryFormat, binary);
    end;
    public z_GetProgramBinary_ovr_6 := GetFuncOrNil&<procedure(&program: UInt32; bufSize: Int32; length: IntPtr; var binaryFormat: DummyEnum; binary: IntPtr)>(z_GetProgramBinary_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetProgramBinary(&program: UInt32; bufSize: Int32; length: IntPtr; binaryFormat: array of DummyEnum; binary: IntPtr);
    begin
      z_GetProgramBinary_ovr_6(&program, bufSize, length, binaryFormat[0], binary);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetProgramBinary(&program: UInt32; bufSize: Int32; length: IntPtr; var binaryFormat: DummyEnum; binary: IntPtr);
    begin
      z_GetProgramBinary_ovr_6(&program, bufSize, length, binaryFormat, binary);
    end;
    public z_GetProgramBinary_ovr_8 := GetFuncOrNil&<procedure(&program: UInt32; bufSize: Int32; length: IntPtr; binaryFormat: IntPtr; binary: IntPtr)>(z_GetProgramBinary_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetProgramBinary(&program: UInt32; bufSize: Int32; length: IntPtr; binaryFormat: IntPtr; binary: IntPtr);
    begin
      z_GetProgramBinary_ovr_8(&program, bufSize, length, binaryFormat, binary);
    end;
    
    public z_ProgramBinary_adr := GetFuncAdr('glProgramBinary');
    public z_ProgramBinary_ovr_0 := GetFuncOrNil&<procedure(&program: UInt32; binaryFormat: DummyEnum; binary: IntPtr; length: Int32)>(z_ProgramBinary_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramBinary(&program: UInt32; binaryFormat: DummyEnum; binary: IntPtr; length: Int32);
    begin
      z_ProgramBinary_ovr_0(&program, binaryFormat, binary, length);
    end;
    
    public z_ProgramParameteri_adr := GetFuncAdr('glProgramParameteri');
    public z_ProgramParameteri_ovr_0 := GetFuncOrNil&<procedure(&program: ProgramName; pname: ProgramParameterPName; value: Int32)>(z_ProgramParameteri_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramParameteri(&program: ProgramName; pname: ProgramParameterPName; value: Int32);
    begin
      z_ProgramParameteri_ovr_0(&program, pname, value);
    end;
    
  end;
  
  glGetTextureSubImageARB = sealed class
    public static function GetFuncAdr([MarshalAs(UnmanagedType.LPStr)] lpszProc: string): IntPtr;
    external 'opengl32.dll' name 'wglGetProcAddress';
    public static function GetFuncOrNil<T>(fadr: IntPtr) :=
    fadr=IntPtr.Zero ? default(T) :
    Marshal.GetDelegateForFunctionPointer&<T>(fadr);
    
    public z_GetTextureSubImage_adr := GetFuncAdr('glGetTextureSubImage');
    public z_GetTextureSubImage_ovr_0 := GetFuncOrNil&<procedure(texture: UInt32; level: Int32; xoffset: Int32; yoffset: Int32; zoffset: Int32; width: Int32; height: Int32; depth: Int32; format: PixelFormat; &type: PixelType; bufSize: Int32; pixels: IntPtr)>(z_GetTextureSubImage_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetTextureSubImage(texture: UInt32; level: Int32; xoffset: Int32; yoffset: Int32; zoffset: Int32; width: Int32; height: Int32; depth: Int32; format: PixelFormat; &type: PixelType; bufSize: Int32; pixels: IntPtr);
    begin
      z_GetTextureSubImage_ovr_0(texture, level, xoffset, yoffset, zoffset, width, height, depth, format, &type, bufSize, pixels);
    end;
    
    public z_GetCompressedTextureSubImage_adr := GetFuncAdr('glGetCompressedTextureSubImage');
    public z_GetCompressedTextureSubImage_ovr_0 := GetFuncOrNil&<procedure(texture: UInt32; level: Int32; xoffset: Int32; yoffset: Int32; zoffset: Int32; width: Int32; height: Int32; depth: Int32; bufSize: Int32; pixels: IntPtr)>(z_GetCompressedTextureSubImage_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetCompressedTextureSubImage(texture: UInt32; level: Int32; xoffset: Int32; yoffset: Int32; zoffset: Int32; width: Int32; height: Int32; depth: Int32; bufSize: Int32; pixels: IntPtr);
    begin
      z_GetCompressedTextureSubImage_ovr_0(texture, level, xoffset, yoffset, zoffset, width, height, depth, bufSize, pixels);
    end;
    
  end;
  
  glGlSpirvARB = sealed class
    public static function GetFuncAdr([MarshalAs(UnmanagedType.LPStr)] lpszProc: string): IntPtr;
    external 'opengl32.dll' name 'wglGetProcAddress';
    public static function GetFuncOrNil<T>(fadr: IntPtr) :=
    fadr=IntPtr.Zero ? default(T) :
    Marshal.GetDelegateForFunctionPointer&<T>(fadr);
    
    public z_SpecializeShaderARB_adr := GetFuncAdr('glSpecializeShaderARB');
    public z_SpecializeShaderARB_ovr_0 := GetFuncOrNil&<procedure(shader: UInt32; pEntryPoint: IntPtr; numSpecializationConstants: UInt32; var pConstantIndex: UInt32; var pConstantValue: UInt32)>(z_SpecializeShaderARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure SpecializeShaderARB(shader: UInt32; pEntryPoint: string; numSpecializationConstants: UInt32; pConstantIndex: array of UInt32; pConstantValue: array of UInt32);
    begin
      var par_2_str_ptr := Marshal.StringToHGlobalAnsi(pEntryPoint);
      z_SpecializeShaderARB_ovr_0(shader, par_2_str_ptr, numSpecializationConstants, pConstantIndex[0], pConstantValue[0]);
      Marshal.FreeHGlobal(par_2_str_ptr);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure SpecializeShaderARB(shader: UInt32; pEntryPoint: string; numSpecializationConstants: UInt32; pConstantIndex: array of UInt32; var pConstantValue: UInt32);
    begin
      var par_2_str_ptr := Marshal.StringToHGlobalAnsi(pEntryPoint);
      z_SpecializeShaderARB_ovr_0(shader, par_2_str_ptr, numSpecializationConstants, pConstantIndex[0], pConstantValue);
      Marshal.FreeHGlobal(par_2_str_ptr);
    end;
    public z_SpecializeShaderARB_ovr_2 := GetFuncOrNil&<procedure(shader: UInt32; pEntryPoint: IntPtr; numSpecializationConstants: UInt32; var pConstantIndex: UInt32; pConstantValue: IntPtr)>(z_SpecializeShaderARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure SpecializeShaderARB(shader: UInt32; pEntryPoint: string; numSpecializationConstants: UInt32; pConstantIndex: array of UInt32; pConstantValue: IntPtr);
    begin
      var par_2_str_ptr := Marshal.StringToHGlobalAnsi(pEntryPoint);
      z_SpecializeShaderARB_ovr_2(shader, par_2_str_ptr, numSpecializationConstants, pConstantIndex[0], pConstantValue);
      Marshal.FreeHGlobal(par_2_str_ptr);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure SpecializeShaderARB(shader: UInt32; pEntryPoint: string; numSpecializationConstants: UInt32; var pConstantIndex: UInt32; pConstantValue: array of UInt32);
    begin
      var par_2_str_ptr := Marshal.StringToHGlobalAnsi(pEntryPoint);
      z_SpecializeShaderARB_ovr_0(shader, par_2_str_ptr, numSpecializationConstants, pConstantIndex, pConstantValue[0]);
      Marshal.FreeHGlobal(par_2_str_ptr);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure SpecializeShaderARB(shader: UInt32; pEntryPoint: string; numSpecializationConstants: UInt32; var pConstantIndex: UInt32; var pConstantValue: UInt32);
    begin
      var par_2_str_ptr := Marshal.StringToHGlobalAnsi(pEntryPoint);
      z_SpecializeShaderARB_ovr_0(shader, par_2_str_ptr, numSpecializationConstants, pConstantIndex, pConstantValue);
      Marshal.FreeHGlobal(par_2_str_ptr);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure SpecializeShaderARB(shader: UInt32; pEntryPoint: string; numSpecializationConstants: UInt32; var pConstantIndex: UInt32; pConstantValue: IntPtr);
    begin
      var par_2_str_ptr := Marshal.StringToHGlobalAnsi(pEntryPoint);
      z_SpecializeShaderARB_ovr_2(shader, par_2_str_ptr, numSpecializationConstants, pConstantIndex, pConstantValue);
      Marshal.FreeHGlobal(par_2_str_ptr);
    end;
    public z_SpecializeShaderARB_ovr_6 := GetFuncOrNil&<procedure(shader: UInt32; pEntryPoint: IntPtr; numSpecializationConstants: UInt32; pConstantIndex: IntPtr; var pConstantValue: UInt32)>(z_SpecializeShaderARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure SpecializeShaderARB(shader: UInt32; pEntryPoint: string; numSpecializationConstants: UInt32; pConstantIndex: IntPtr; pConstantValue: array of UInt32);
    begin
      var par_2_str_ptr := Marshal.StringToHGlobalAnsi(pEntryPoint);
      z_SpecializeShaderARB_ovr_6(shader, par_2_str_ptr, numSpecializationConstants, pConstantIndex, pConstantValue[0]);
      Marshal.FreeHGlobal(par_2_str_ptr);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure SpecializeShaderARB(shader: UInt32; pEntryPoint: string; numSpecializationConstants: UInt32; pConstantIndex: IntPtr; var pConstantValue: UInt32);
    begin
      var par_2_str_ptr := Marshal.StringToHGlobalAnsi(pEntryPoint);
      z_SpecializeShaderARB_ovr_6(shader, par_2_str_ptr, numSpecializationConstants, pConstantIndex, pConstantValue);
      Marshal.FreeHGlobal(par_2_str_ptr);
    end;
    public z_SpecializeShaderARB_ovr_8 := GetFuncOrNil&<procedure(shader: UInt32; pEntryPoint: IntPtr; numSpecializationConstants: UInt32; pConstantIndex: IntPtr; pConstantValue: IntPtr)>(z_SpecializeShaderARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure SpecializeShaderARB(shader: UInt32; pEntryPoint: string; numSpecializationConstants: UInt32; pConstantIndex: IntPtr; pConstantValue: IntPtr);
    begin
      var par_2_str_ptr := Marshal.StringToHGlobalAnsi(pEntryPoint);
      z_SpecializeShaderARB_ovr_8(shader, par_2_str_ptr, numSpecializationConstants, pConstantIndex, pConstantValue);
      Marshal.FreeHGlobal(par_2_str_ptr);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure SpecializeShaderARB(shader: UInt32; pEntryPoint: IntPtr; numSpecializationConstants: UInt32; pConstantIndex: array of UInt32; pConstantValue: array of UInt32);
    begin
      z_SpecializeShaderARB_ovr_0(shader, pEntryPoint, numSpecializationConstants, pConstantIndex[0], pConstantValue[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure SpecializeShaderARB(shader: UInt32; pEntryPoint: IntPtr; numSpecializationConstants: UInt32; pConstantIndex: array of UInt32; var pConstantValue: UInt32);
    begin
      z_SpecializeShaderARB_ovr_0(shader, pEntryPoint, numSpecializationConstants, pConstantIndex[0], pConstantValue);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure SpecializeShaderARB(shader: UInt32; pEntryPoint: IntPtr; numSpecializationConstants: UInt32; pConstantIndex: array of UInt32; pConstantValue: IntPtr);
    begin
      z_SpecializeShaderARB_ovr_2(shader, pEntryPoint, numSpecializationConstants, pConstantIndex[0], pConstantValue);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure SpecializeShaderARB(shader: UInt32; pEntryPoint: IntPtr; numSpecializationConstants: UInt32; var pConstantIndex: UInt32; pConstantValue: array of UInt32);
    begin
      z_SpecializeShaderARB_ovr_0(shader, pEntryPoint, numSpecializationConstants, pConstantIndex, pConstantValue[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure SpecializeShaderARB(shader: UInt32; pEntryPoint: IntPtr; numSpecializationConstants: UInt32; var pConstantIndex: UInt32; var pConstantValue: UInt32);
    begin
      z_SpecializeShaderARB_ovr_0(shader, pEntryPoint, numSpecializationConstants, pConstantIndex, pConstantValue);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure SpecializeShaderARB(shader: UInt32; pEntryPoint: IntPtr; numSpecializationConstants: UInt32; var pConstantIndex: UInt32; pConstantValue: IntPtr);
    begin
      z_SpecializeShaderARB_ovr_2(shader, pEntryPoint, numSpecializationConstants, pConstantIndex, pConstantValue);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure SpecializeShaderARB(shader: UInt32; pEntryPoint: IntPtr; numSpecializationConstants: UInt32; pConstantIndex: IntPtr; pConstantValue: array of UInt32);
    begin
      z_SpecializeShaderARB_ovr_6(shader, pEntryPoint, numSpecializationConstants, pConstantIndex, pConstantValue[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure SpecializeShaderARB(shader: UInt32; pEntryPoint: IntPtr; numSpecializationConstants: UInt32; pConstantIndex: IntPtr; var pConstantValue: UInt32);
    begin
      z_SpecializeShaderARB_ovr_6(shader, pEntryPoint, numSpecializationConstants, pConstantIndex, pConstantValue);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure SpecializeShaderARB(shader: UInt32; pEntryPoint: IntPtr; numSpecializationConstants: UInt32; pConstantIndex: IntPtr; pConstantValue: IntPtr);
    begin
      z_SpecializeShaderARB_ovr_8(shader, pEntryPoint, numSpecializationConstants, pConstantIndex, pConstantValue);
    end;
    
  end;
  
  glGpuShaderFp64ARB = sealed class
    public static function GetFuncAdr([MarshalAs(UnmanagedType.LPStr)] lpszProc: string): IntPtr;
    external 'opengl32.dll' name 'wglGetProcAddress';
    public static function GetFuncOrNil<T>(fadr: IntPtr) :=
    fadr=IntPtr.Zero ? default(T) :
    Marshal.GetDelegateForFunctionPointer&<T>(fadr);
    
    public z_Uniform1d_adr := GetFuncAdr('glUniform1d');
    public z_Uniform1d_ovr_0 := GetFuncOrNil&<procedure(location: Int32; x: real)>(z_Uniform1d_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Uniform1d(location: Int32; x: real);
    begin
      z_Uniform1d_ovr_0(location, x);
    end;
    
    public z_Uniform2d_adr := GetFuncAdr('glUniform2d');
    public z_Uniform2d_ovr_0 := GetFuncOrNil&<procedure(location: Int32; x: real; y: real)>(z_Uniform2d_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Uniform2d(location: Int32; x: real; y: real);
    begin
      z_Uniform2d_ovr_0(location, x, y);
    end;
    
    public z_Uniform3d_adr := GetFuncAdr('glUniform3d');
    public z_Uniform3d_ovr_0 := GetFuncOrNil&<procedure(location: Int32; x: real; y: real; z: real)>(z_Uniform3d_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Uniform3d(location: Int32; x: real; y: real; z: real);
    begin
      z_Uniform3d_ovr_0(location, x, y, z);
    end;
    
    public z_Uniform4d_adr := GetFuncAdr('glUniform4d');
    public z_Uniform4d_ovr_0 := GetFuncOrNil&<procedure(location: Int32; x: real; y: real; z: real; w: real)>(z_Uniform4d_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Uniform4d(location: Int32; x: real; y: real; z: real; w: real);
    begin
      z_Uniform4d_ovr_0(location, x, y, z, w);
    end;
    
    public z_Uniform1dv_adr := GetFuncAdr('glUniform1dv');
    public z_Uniform1dv_ovr_0 := GetFuncOrNil&<procedure(location: Int32; count: Int32; var value: real)>(z_Uniform1dv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Uniform1dv(location: Int32; count: Int32; value: array of real);
    begin
      z_Uniform1dv_ovr_0(location, count, value[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Uniform1dv(location: Int32; count: Int32; var value: real);
    begin
      z_Uniform1dv_ovr_0(location, count, value);
    end;
    public z_Uniform1dv_ovr_2 := GetFuncOrNil&<procedure(location: Int32; count: Int32; value: IntPtr)>(z_Uniform1dv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Uniform1dv(location: Int32; count: Int32; value: IntPtr);
    begin
      z_Uniform1dv_ovr_2(location, count, value);
    end;
    
    public z_Uniform2dv_adr := GetFuncAdr('glUniform2dv');
    public z_Uniform2dv_ovr_0 := GetFuncOrNil&<procedure(location: Int32; count: Int32; var value: real)>(z_Uniform2dv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Uniform2dv(location: Int32; count: Int32; value: array of real);
    begin
      z_Uniform2dv_ovr_0(location, count, value[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Uniform2dv(location: Int32; count: Int32; var value: real);
    begin
      z_Uniform2dv_ovr_0(location, count, value);
    end;
    public z_Uniform2dv_ovr_2 := GetFuncOrNil&<procedure(location: Int32; count: Int32; value: IntPtr)>(z_Uniform2dv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Uniform2dv(location: Int32; count: Int32; value: IntPtr);
    begin
      z_Uniform2dv_ovr_2(location, count, value);
    end;
    
    public z_Uniform3dv_adr := GetFuncAdr('glUniform3dv');
    public z_Uniform3dv_ovr_0 := GetFuncOrNil&<procedure(location: Int32; count: Int32; var value: real)>(z_Uniform3dv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Uniform3dv(location: Int32; count: Int32; value: array of real);
    begin
      z_Uniform3dv_ovr_0(location, count, value[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Uniform3dv(location: Int32; count: Int32; var value: real);
    begin
      z_Uniform3dv_ovr_0(location, count, value);
    end;
    public z_Uniform3dv_ovr_2 := GetFuncOrNil&<procedure(location: Int32; count: Int32; value: IntPtr)>(z_Uniform3dv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Uniform3dv(location: Int32; count: Int32; value: IntPtr);
    begin
      z_Uniform3dv_ovr_2(location, count, value);
    end;
    
    public z_Uniform4dv_adr := GetFuncAdr('glUniform4dv');
    public z_Uniform4dv_ovr_0 := GetFuncOrNil&<procedure(location: Int32; count: Int32; var value: real)>(z_Uniform4dv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Uniform4dv(location: Int32; count: Int32; value: array of real);
    begin
      z_Uniform4dv_ovr_0(location, count, value[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Uniform4dv(location: Int32; count: Int32; var value: real);
    begin
      z_Uniform4dv_ovr_0(location, count, value);
    end;
    public z_Uniform4dv_ovr_2 := GetFuncOrNil&<procedure(location: Int32; count: Int32; value: IntPtr)>(z_Uniform4dv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Uniform4dv(location: Int32; count: Int32; value: IntPtr);
    begin
      z_Uniform4dv_ovr_2(location, count, value);
    end;
    
    public z_UniformMatrix2dv_adr := GetFuncAdr('glUniformMatrix2dv');
    public z_UniformMatrix2dv_ovr_0 := GetFuncOrNil&<procedure(location: Int32; count: Int32; transpose: boolean; var value: real)>(z_UniformMatrix2dv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure UniformMatrix2dv(location: Int32; count: Int32; transpose: boolean; value: array of real);
    begin
      z_UniformMatrix2dv_ovr_0(location, count, transpose, value[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure UniformMatrix2dv(location: Int32; count: Int32; transpose: boolean; var value: real);
    begin
      z_UniformMatrix2dv_ovr_0(location, count, transpose, value);
    end;
    public z_UniformMatrix2dv_ovr_2 := GetFuncOrNil&<procedure(location: Int32; count: Int32; transpose: boolean; value: IntPtr)>(z_UniformMatrix2dv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure UniformMatrix2dv(location: Int32; count: Int32; transpose: boolean; value: IntPtr);
    begin
      z_UniformMatrix2dv_ovr_2(location, count, transpose, value);
    end;
    
    public z_UniformMatrix3dv_adr := GetFuncAdr('glUniformMatrix3dv');
    public z_UniformMatrix3dv_ovr_0 := GetFuncOrNil&<procedure(location: Int32; count: Int32; transpose: boolean; var value: real)>(z_UniformMatrix3dv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure UniformMatrix3dv(location: Int32; count: Int32; transpose: boolean; value: array of real);
    begin
      z_UniformMatrix3dv_ovr_0(location, count, transpose, value[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure UniformMatrix3dv(location: Int32; count: Int32; transpose: boolean; var value: real);
    begin
      z_UniformMatrix3dv_ovr_0(location, count, transpose, value);
    end;
    public z_UniformMatrix3dv_ovr_2 := GetFuncOrNil&<procedure(location: Int32; count: Int32; transpose: boolean; value: IntPtr)>(z_UniformMatrix3dv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure UniformMatrix3dv(location: Int32; count: Int32; transpose: boolean; value: IntPtr);
    begin
      z_UniformMatrix3dv_ovr_2(location, count, transpose, value);
    end;
    
    public z_UniformMatrix4dv_adr := GetFuncAdr('glUniformMatrix4dv');
    public z_UniformMatrix4dv_ovr_0 := GetFuncOrNil&<procedure(location: Int32; count: Int32; transpose: boolean; var value: real)>(z_UniformMatrix4dv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure UniformMatrix4dv(location: Int32; count: Int32; transpose: boolean; value: array of real);
    begin
      z_UniformMatrix4dv_ovr_0(location, count, transpose, value[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure UniformMatrix4dv(location: Int32; count: Int32; transpose: boolean; var value: real);
    begin
      z_UniformMatrix4dv_ovr_0(location, count, transpose, value);
    end;
    public z_UniformMatrix4dv_ovr_2 := GetFuncOrNil&<procedure(location: Int32; count: Int32; transpose: boolean; value: IntPtr)>(z_UniformMatrix4dv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure UniformMatrix4dv(location: Int32; count: Int32; transpose: boolean; value: IntPtr);
    begin
      z_UniformMatrix4dv_ovr_2(location, count, transpose, value);
    end;
    
    public z_UniformMatrix2x3dv_adr := GetFuncAdr('glUniformMatrix2x3dv');
    public z_UniformMatrix2x3dv_ovr_0 := GetFuncOrNil&<procedure(location: Int32; count: Int32; transpose: boolean; var value: real)>(z_UniformMatrix2x3dv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure UniformMatrix2x3dv(location: Int32; count: Int32; transpose: boolean; value: array of real);
    begin
      z_UniformMatrix2x3dv_ovr_0(location, count, transpose, value[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure UniformMatrix2x3dv(location: Int32; count: Int32; transpose: boolean; var value: real);
    begin
      z_UniformMatrix2x3dv_ovr_0(location, count, transpose, value);
    end;
    public z_UniformMatrix2x3dv_ovr_2 := GetFuncOrNil&<procedure(location: Int32; count: Int32; transpose: boolean; value: IntPtr)>(z_UniformMatrix2x3dv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure UniformMatrix2x3dv(location: Int32; count: Int32; transpose: boolean; value: IntPtr);
    begin
      z_UniformMatrix2x3dv_ovr_2(location, count, transpose, value);
    end;
    
    public z_UniformMatrix2x4dv_adr := GetFuncAdr('glUniformMatrix2x4dv');
    public z_UniformMatrix2x4dv_ovr_0 := GetFuncOrNil&<procedure(location: Int32; count: Int32; transpose: boolean; var value: real)>(z_UniformMatrix2x4dv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure UniformMatrix2x4dv(location: Int32; count: Int32; transpose: boolean; value: array of real);
    begin
      z_UniformMatrix2x4dv_ovr_0(location, count, transpose, value[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure UniformMatrix2x4dv(location: Int32; count: Int32; transpose: boolean; var value: real);
    begin
      z_UniformMatrix2x4dv_ovr_0(location, count, transpose, value);
    end;
    public z_UniformMatrix2x4dv_ovr_2 := GetFuncOrNil&<procedure(location: Int32; count: Int32; transpose: boolean; value: IntPtr)>(z_UniformMatrix2x4dv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure UniformMatrix2x4dv(location: Int32; count: Int32; transpose: boolean; value: IntPtr);
    begin
      z_UniformMatrix2x4dv_ovr_2(location, count, transpose, value);
    end;
    
    public z_UniformMatrix3x2dv_adr := GetFuncAdr('glUniformMatrix3x2dv');
    public z_UniformMatrix3x2dv_ovr_0 := GetFuncOrNil&<procedure(location: Int32; count: Int32; transpose: boolean; var value: real)>(z_UniformMatrix3x2dv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure UniformMatrix3x2dv(location: Int32; count: Int32; transpose: boolean; value: array of real);
    begin
      z_UniformMatrix3x2dv_ovr_0(location, count, transpose, value[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure UniformMatrix3x2dv(location: Int32; count: Int32; transpose: boolean; var value: real);
    begin
      z_UniformMatrix3x2dv_ovr_0(location, count, transpose, value);
    end;
    public z_UniformMatrix3x2dv_ovr_2 := GetFuncOrNil&<procedure(location: Int32; count: Int32; transpose: boolean; value: IntPtr)>(z_UniformMatrix3x2dv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure UniformMatrix3x2dv(location: Int32; count: Int32; transpose: boolean; value: IntPtr);
    begin
      z_UniformMatrix3x2dv_ovr_2(location, count, transpose, value);
    end;
    
    public z_UniformMatrix3x4dv_adr := GetFuncAdr('glUniformMatrix3x4dv');
    public z_UniformMatrix3x4dv_ovr_0 := GetFuncOrNil&<procedure(location: Int32; count: Int32; transpose: boolean; var value: real)>(z_UniformMatrix3x4dv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure UniformMatrix3x4dv(location: Int32; count: Int32; transpose: boolean; value: array of real);
    begin
      z_UniformMatrix3x4dv_ovr_0(location, count, transpose, value[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure UniformMatrix3x4dv(location: Int32; count: Int32; transpose: boolean; var value: real);
    begin
      z_UniformMatrix3x4dv_ovr_0(location, count, transpose, value);
    end;
    public z_UniformMatrix3x4dv_ovr_2 := GetFuncOrNil&<procedure(location: Int32; count: Int32; transpose: boolean; value: IntPtr)>(z_UniformMatrix3x4dv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure UniformMatrix3x4dv(location: Int32; count: Int32; transpose: boolean; value: IntPtr);
    begin
      z_UniformMatrix3x4dv_ovr_2(location, count, transpose, value);
    end;
    
    public z_UniformMatrix4x2dv_adr := GetFuncAdr('glUniformMatrix4x2dv');
    public z_UniformMatrix4x2dv_ovr_0 := GetFuncOrNil&<procedure(location: Int32; count: Int32; transpose: boolean; var value: real)>(z_UniformMatrix4x2dv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure UniformMatrix4x2dv(location: Int32; count: Int32; transpose: boolean; value: array of real);
    begin
      z_UniformMatrix4x2dv_ovr_0(location, count, transpose, value[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure UniformMatrix4x2dv(location: Int32; count: Int32; transpose: boolean; var value: real);
    begin
      z_UniformMatrix4x2dv_ovr_0(location, count, transpose, value);
    end;
    public z_UniformMatrix4x2dv_ovr_2 := GetFuncOrNil&<procedure(location: Int32; count: Int32; transpose: boolean; value: IntPtr)>(z_UniformMatrix4x2dv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure UniformMatrix4x2dv(location: Int32; count: Int32; transpose: boolean; value: IntPtr);
    begin
      z_UniformMatrix4x2dv_ovr_2(location, count, transpose, value);
    end;
    
    public z_UniformMatrix4x3dv_adr := GetFuncAdr('glUniformMatrix4x3dv');
    public z_UniformMatrix4x3dv_ovr_0 := GetFuncOrNil&<procedure(location: Int32; count: Int32; transpose: boolean; var value: real)>(z_UniformMatrix4x3dv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure UniformMatrix4x3dv(location: Int32; count: Int32; transpose: boolean; value: array of real);
    begin
      z_UniformMatrix4x3dv_ovr_0(location, count, transpose, value[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure UniformMatrix4x3dv(location: Int32; count: Int32; transpose: boolean; var value: real);
    begin
      z_UniformMatrix4x3dv_ovr_0(location, count, transpose, value);
    end;
    public z_UniformMatrix4x3dv_ovr_2 := GetFuncOrNil&<procedure(location: Int32; count: Int32; transpose: boolean; value: IntPtr)>(z_UniformMatrix4x3dv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure UniformMatrix4x3dv(location: Int32; count: Int32; transpose: boolean; value: IntPtr);
    begin
      z_UniformMatrix4x3dv_ovr_2(location, count, transpose, value);
    end;
    
    public z_GetUniformdv_adr := GetFuncAdr('glGetUniformdv');
    public z_GetUniformdv_ovr_0 := GetFuncOrNil&<procedure(&program: ProgramName; location: Int32; var &params: real)>(z_GetUniformdv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetUniformdv(&program: ProgramName; location: Int32; &params: array of real);
    begin
      z_GetUniformdv_ovr_0(&program, location, &params[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetUniformdv(&program: ProgramName; location: Int32; var &params: real);
    begin
      z_GetUniformdv_ovr_0(&program, location, &params);
    end;
    public z_GetUniformdv_ovr_2 := GetFuncOrNil&<procedure(&program: ProgramName; location: Int32; &params: IntPtr)>(z_GetUniformdv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetUniformdv(&program: ProgramName; location: Int32; &params: IntPtr);
    begin
      z_GetUniformdv_ovr_2(&program, location, &params);
    end;
    
  end;
  
  glGpuShaderInt64ARB = sealed class
    public static function GetFuncAdr([MarshalAs(UnmanagedType.LPStr)] lpszProc: string): IntPtr;
    external 'opengl32.dll' name 'wglGetProcAddress';
    public static function GetFuncOrNil<T>(fadr: IntPtr) :=
    fadr=IntPtr.Zero ? default(T) :
    Marshal.GetDelegateForFunctionPointer&<T>(fadr);
    
    public z_Uniform1i64ARB_adr := GetFuncAdr('glUniform1i64ARB');
    public z_Uniform1i64ARB_ovr_0 := GetFuncOrNil&<procedure(location: Int32; x: Int64)>(z_Uniform1i64ARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Uniform1i64ARB(location: Int32; x: Int64);
    begin
      z_Uniform1i64ARB_ovr_0(location, x);
    end;
    
    public z_Uniform2i64ARB_adr := GetFuncAdr('glUniform2i64ARB');
    public z_Uniform2i64ARB_ovr_0 := GetFuncOrNil&<procedure(location: Int32; x: Int64; y: Int64)>(z_Uniform2i64ARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Uniform2i64ARB(location: Int32; x: Int64; y: Int64);
    begin
      z_Uniform2i64ARB_ovr_0(location, x, y);
    end;
    
    public z_Uniform3i64ARB_adr := GetFuncAdr('glUniform3i64ARB');
    public z_Uniform3i64ARB_ovr_0 := GetFuncOrNil&<procedure(location: Int32; x: Int64; y: Int64; z: Int64)>(z_Uniform3i64ARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Uniform3i64ARB(location: Int32; x: Int64; y: Int64; z: Int64);
    begin
      z_Uniform3i64ARB_ovr_0(location, x, y, z);
    end;
    
    public z_Uniform4i64ARB_adr := GetFuncAdr('glUniform4i64ARB');
    public z_Uniform4i64ARB_ovr_0 := GetFuncOrNil&<procedure(location: Int32; x: Int64; y: Int64; z: Int64; w: Int64)>(z_Uniform4i64ARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Uniform4i64ARB(location: Int32; x: Int64; y: Int64; z: Int64; w: Int64);
    begin
      z_Uniform4i64ARB_ovr_0(location, x, y, z, w);
    end;
    
    public z_Uniform1i64vARB_adr := GetFuncAdr('glUniform1i64vARB');
    public z_Uniform1i64vARB_ovr_0 := GetFuncOrNil&<procedure(location: Int32; count: Int32; var value: Int64)>(z_Uniform1i64vARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Uniform1i64vARB(location: Int32; count: Int32; value: array of Int64);
    begin
      z_Uniform1i64vARB_ovr_0(location, count, value[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Uniform1i64vARB(location: Int32; count: Int32; var value: Int64);
    begin
      z_Uniform1i64vARB_ovr_0(location, count, value);
    end;
    public z_Uniform1i64vARB_ovr_2 := GetFuncOrNil&<procedure(location: Int32; count: Int32; value: IntPtr)>(z_Uniform1i64vARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Uniform1i64vARB(location: Int32; count: Int32; value: IntPtr);
    begin
      z_Uniform1i64vARB_ovr_2(location, count, value);
    end;
    
    public z_Uniform2i64vARB_adr := GetFuncAdr('glUniform2i64vARB');
    public z_Uniform2i64vARB_ovr_0 := GetFuncOrNil&<procedure(location: Int32; count: Int32; var value: Int64)>(z_Uniform2i64vARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Uniform2i64vARB(location: Int32; count: Int32; value: array of Int64);
    begin
      z_Uniform2i64vARB_ovr_0(location, count, value[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Uniform2i64vARB(location: Int32; count: Int32; var value: Int64);
    begin
      z_Uniform2i64vARB_ovr_0(location, count, value);
    end;
    public z_Uniform2i64vARB_ovr_2 := GetFuncOrNil&<procedure(location: Int32; count: Int32; value: IntPtr)>(z_Uniform2i64vARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Uniform2i64vARB(location: Int32; count: Int32; value: IntPtr);
    begin
      z_Uniform2i64vARB_ovr_2(location, count, value);
    end;
    
    public z_Uniform3i64vARB_adr := GetFuncAdr('glUniform3i64vARB');
    public z_Uniform3i64vARB_ovr_0 := GetFuncOrNil&<procedure(location: Int32; count: Int32; var value: Int64)>(z_Uniform3i64vARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Uniform3i64vARB(location: Int32; count: Int32; value: array of Int64);
    begin
      z_Uniform3i64vARB_ovr_0(location, count, value[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Uniform3i64vARB(location: Int32; count: Int32; var value: Int64);
    begin
      z_Uniform3i64vARB_ovr_0(location, count, value);
    end;
    public z_Uniform3i64vARB_ovr_2 := GetFuncOrNil&<procedure(location: Int32; count: Int32; value: IntPtr)>(z_Uniform3i64vARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Uniform3i64vARB(location: Int32; count: Int32; value: IntPtr);
    begin
      z_Uniform3i64vARB_ovr_2(location, count, value);
    end;
    
    public z_Uniform4i64vARB_adr := GetFuncAdr('glUniform4i64vARB');
    public z_Uniform4i64vARB_ovr_0 := GetFuncOrNil&<procedure(location: Int32; count: Int32; var value: Int64)>(z_Uniform4i64vARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Uniform4i64vARB(location: Int32; count: Int32; value: array of Int64);
    begin
      z_Uniform4i64vARB_ovr_0(location, count, value[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Uniform4i64vARB(location: Int32; count: Int32; var value: Int64);
    begin
      z_Uniform4i64vARB_ovr_0(location, count, value);
    end;
    public z_Uniform4i64vARB_ovr_2 := GetFuncOrNil&<procedure(location: Int32; count: Int32; value: IntPtr)>(z_Uniform4i64vARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Uniform4i64vARB(location: Int32; count: Int32; value: IntPtr);
    begin
      z_Uniform4i64vARB_ovr_2(location, count, value);
    end;
    
    public z_Uniform1ui64ARB_adr := GetFuncAdr('glUniform1ui64ARB');
    public z_Uniform1ui64ARB_ovr_0 := GetFuncOrNil&<procedure(location: Int32; x: UInt64)>(z_Uniform1ui64ARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Uniform1ui64ARB(location: Int32; x: UInt64);
    begin
      z_Uniform1ui64ARB_ovr_0(location, x);
    end;
    
    public z_Uniform2ui64ARB_adr := GetFuncAdr('glUniform2ui64ARB');
    public z_Uniform2ui64ARB_ovr_0 := GetFuncOrNil&<procedure(location: Int32; x: UInt64; y: UInt64)>(z_Uniform2ui64ARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Uniform2ui64ARB(location: Int32; x: UInt64; y: UInt64);
    begin
      z_Uniform2ui64ARB_ovr_0(location, x, y);
    end;
    
    public z_Uniform3ui64ARB_adr := GetFuncAdr('glUniform3ui64ARB');
    public z_Uniform3ui64ARB_ovr_0 := GetFuncOrNil&<procedure(location: Int32; x: UInt64; y: UInt64; z: UInt64)>(z_Uniform3ui64ARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Uniform3ui64ARB(location: Int32; x: UInt64; y: UInt64; z: UInt64);
    begin
      z_Uniform3ui64ARB_ovr_0(location, x, y, z);
    end;
    
    public z_Uniform4ui64ARB_adr := GetFuncAdr('glUniform4ui64ARB');
    public z_Uniform4ui64ARB_ovr_0 := GetFuncOrNil&<procedure(location: Int32; x: UInt64; y: UInt64; z: UInt64; w: UInt64)>(z_Uniform4ui64ARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Uniform4ui64ARB(location: Int32; x: UInt64; y: UInt64; z: UInt64; w: UInt64);
    begin
      z_Uniform4ui64ARB_ovr_0(location, x, y, z, w);
    end;
    
    public z_Uniform1ui64vARB_adr := GetFuncAdr('glUniform1ui64vARB');
    public z_Uniform1ui64vARB_ovr_0 := GetFuncOrNil&<procedure(location: Int32; count: Int32; var value: UInt64)>(z_Uniform1ui64vARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Uniform1ui64vARB(location: Int32; count: Int32; value: array of UInt64);
    begin
      z_Uniform1ui64vARB_ovr_0(location, count, value[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Uniform1ui64vARB(location: Int32; count: Int32; var value: UInt64);
    begin
      z_Uniform1ui64vARB_ovr_0(location, count, value);
    end;
    public z_Uniform1ui64vARB_ovr_2 := GetFuncOrNil&<procedure(location: Int32; count: Int32; value: IntPtr)>(z_Uniform1ui64vARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Uniform1ui64vARB(location: Int32; count: Int32; value: IntPtr);
    begin
      z_Uniform1ui64vARB_ovr_2(location, count, value);
    end;
    
    public z_Uniform2ui64vARB_adr := GetFuncAdr('glUniform2ui64vARB');
    public z_Uniform2ui64vARB_ovr_0 := GetFuncOrNil&<procedure(location: Int32; count: Int32; var value: UInt64)>(z_Uniform2ui64vARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Uniform2ui64vARB(location: Int32; count: Int32; value: array of UInt64);
    begin
      z_Uniform2ui64vARB_ovr_0(location, count, value[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Uniform2ui64vARB(location: Int32; count: Int32; var value: UInt64);
    begin
      z_Uniform2ui64vARB_ovr_0(location, count, value);
    end;
    public z_Uniform2ui64vARB_ovr_2 := GetFuncOrNil&<procedure(location: Int32; count: Int32; value: IntPtr)>(z_Uniform2ui64vARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Uniform2ui64vARB(location: Int32; count: Int32; value: IntPtr);
    begin
      z_Uniform2ui64vARB_ovr_2(location, count, value);
    end;
    
    public z_Uniform3ui64vARB_adr := GetFuncAdr('glUniform3ui64vARB');
    public z_Uniform3ui64vARB_ovr_0 := GetFuncOrNil&<procedure(location: Int32; count: Int32; var value: UInt64)>(z_Uniform3ui64vARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Uniform3ui64vARB(location: Int32; count: Int32; value: array of UInt64);
    begin
      z_Uniform3ui64vARB_ovr_0(location, count, value[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Uniform3ui64vARB(location: Int32; count: Int32; var value: UInt64);
    begin
      z_Uniform3ui64vARB_ovr_0(location, count, value);
    end;
    public z_Uniform3ui64vARB_ovr_2 := GetFuncOrNil&<procedure(location: Int32; count: Int32; value: IntPtr)>(z_Uniform3ui64vARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Uniform3ui64vARB(location: Int32; count: Int32; value: IntPtr);
    begin
      z_Uniform3ui64vARB_ovr_2(location, count, value);
    end;
    
    public z_Uniform4ui64vARB_adr := GetFuncAdr('glUniform4ui64vARB');
    public z_Uniform4ui64vARB_ovr_0 := GetFuncOrNil&<procedure(location: Int32; count: Int32; var value: UInt64)>(z_Uniform4ui64vARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Uniform4ui64vARB(location: Int32; count: Int32; value: array of UInt64);
    begin
      z_Uniform4ui64vARB_ovr_0(location, count, value[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Uniform4ui64vARB(location: Int32; count: Int32; var value: UInt64);
    begin
      z_Uniform4ui64vARB_ovr_0(location, count, value);
    end;
    public z_Uniform4ui64vARB_ovr_2 := GetFuncOrNil&<procedure(location: Int32; count: Int32; value: IntPtr)>(z_Uniform4ui64vARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Uniform4ui64vARB(location: Int32; count: Int32; value: IntPtr);
    begin
      z_Uniform4ui64vARB_ovr_2(location, count, value);
    end;
    
    public z_GetUniformi64vARB_adr := GetFuncAdr('glGetUniformi64vARB');
    public z_GetUniformi64vARB_ovr_0 := GetFuncOrNil&<procedure(&program: UInt32; location: Int32; var &params: Int64)>(z_GetUniformi64vARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetUniformi64vARB(&program: UInt32; location: Int32; &params: array of Int64);
    begin
      z_GetUniformi64vARB_ovr_0(&program, location, &params[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetUniformi64vARB(&program: UInt32; location: Int32; var &params: Int64);
    begin
      z_GetUniformi64vARB_ovr_0(&program, location, &params);
    end;
    public z_GetUniformi64vARB_ovr_2 := GetFuncOrNil&<procedure(&program: UInt32; location: Int32; &params: IntPtr)>(z_GetUniformi64vARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetUniformi64vARB(&program: UInt32; location: Int32; &params: IntPtr);
    begin
      z_GetUniformi64vARB_ovr_2(&program, location, &params);
    end;
    
    public z_GetUniformui64vARB_adr := GetFuncAdr('glGetUniformui64vARB');
    public z_GetUniformui64vARB_ovr_0 := GetFuncOrNil&<procedure(&program: UInt32; location: Int32; var &params: UInt64)>(z_GetUniformui64vARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetUniformui64vARB(&program: UInt32; location: Int32; &params: array of UInt64);
    begin
      z_GetUniformui64vARB_ovr_0(&program, location, &params[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetUniformui64vARB(&program: UInt32; location: Int32; var &params: UInt64);
    begin
      z_GetUniformui64vARB_ovr_0(&program, location, &params);
    end;
    public z_GetUniformui64vARB_ovr_2 := GetFuncOrNil&<procedure(&program: UInt32; location: Int32; &params: IntPtr)>(z_GetUniformui64vARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetUniformui64vARB(&program: UInt32; location: Int32; &params: IntPtr);
    begin
      z_GetUniformui64vARB_ovr_2(&program, location, &params);
    end;
    
    public z_GetnUniformi64vARB_adr := GetFuncAdr('glGetnUniformi64vARB');
    public z_GetnUniformi64vARB_ovr_0 := GetFuncOrNil&<procedure(&program: UInt32; location: Int32; bufSize: Int32; var &params: Int64)>(z_GetnUniformi64vARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetnUniformi64vARB(&program: UInt32; location: Int32; bufSize: Int32; &params: array of Int64);
    begin
      z_GetnUniformi64vARB_ovr_0(&program, location, bufSize, &params[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetnUniformi64vARB(&program: UInt32; location: Int32; bufSize: Int32; var &params: Int64);
    begin
      z_GetnUniformi64vARB_ovr_0(&program, location, bufSize, &params);
    end;
    public z_GetnUniformi64vARB_ovr_2 := GetFuncOrNil&<procedure(&program: UInt32; location: Int32; bufSize: Int32; &params: IntPtr)>(z_GetnUniformi64vARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetnUniformi64vARB(&program: UInt32; location: Int32; bufSize: Int32; &params: IntPtr);
    begin
      z_GetnUniformi64vARB_ovr_2(&program, location, bufSize, &params);
    end;
    
    public z_GetnUniformui64vARB_adr := GetFuncAdr('glGetnUniformui64vARB');
    public z_GetnUniformui64vARB_ovr_0 := GetFuncOrNil&<procedure(&program: UInt32; location: Int32; bufSize: Int32; var &params: UInt64)>(z_GetnUniformui64vARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetnUniformui64vARB(&program: UInt32; location: Int32; bufSize: Int32; &params: array of UInt64);
    begin
      z_GetnUniformui64vARB_ovr_0(&program, location, bufSize, &params[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetnUniformui64vARB(&program: UInt32; location: Int32; bufSize: Int32; var &params: UInt64);
    begin
      z_GetnUniformui64vARB_ovr_0(&program, location, bufSize, &params);
    end;
    public z_GetnUniformui64vARB_ovr_2 := GetFuncOrNil&<procedure(&program: UInt32; location: Int32; bufSize: Int32; &params: IntPtr)>(z_GetnUniformui64vARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetnUniformui64vARB(&program: UInt32; location: Int32; bufSize: Int32; &params: IntPtr);
    begin
      z_GetnUniformui64vARB_ovr_2(&program, location, bufSize, &params);
    end;
    
    public z_ProgramUniform1i64ARB_adr := GetFuncAdr('glProgramUniform1i64ARB');
    public z_ProgramUniform1i64ARB_ovr_0 := GetFuncOrNil&<procedure(&program: UInt32; location: Int32; x: Int64)>(z_ProgramUniform1i64ARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniform1i64ARB(&program: UInt32; location: Int32; x: Int64);
    begin
      z_ProgramUniform1i64ARB_ovr_0(&program, location, x);
    end;
    
    public z_ProgramUniform2i64ARB_adr := GetFuncAdr('glProgramUniform2i64ARB');
    public z_ProgramUniform2i64ARB_ovr_0 := GetFuncOrNil&<procedure(&program: UInt32; location: Int32; x: Int64; y: Int64)>(z_ProgramUniform2i64ARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniform2i64ARB(&program: UInt32; location: Int32; x: Int64; y: Int64);
    begin
      z_ProgramUniform2i64ARB_ovr_0(&program, location, x, y);
    end;
    
    public z_ProgramUniform3i64ARB_adr := GetFuncAdr('glProgramUniform3i64ARB');
    public z_ProgramUniform3i64ARB_ovr_0 := GetFuncOrNil&<procedure(&program: UInt32; location: Int32; x: Int64; y: Int64; z: Int64)>(z_ProgramUniform3i64ARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniform3i64ARB(&program: UInt32; location: Int32; x: Int64; y: Int64; z: Int64);
    begin
      z_ProgramUniform3i64ARB_ovr_0(&program, location, x, y, z);
    end;
    
    public z_ProgramUniform4i64ARB_adr := GetFuncAdr('glProgramUniform4i64ARB');
    public z_ProgramUniform4i64ARB_ovr_0 := GetFuncOrNil&<procedure(&program: UInt32; location: Int32; x: Int64; y: Int64; z: Int64; w: Int64)>(z_ProgramUniform4i64ARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniform4i64ARB(&program: UInt32; location: Int32; x: Int64; y: Int64; z: Int64; w: Int64);
    begin
      z_ProgramUniform4i64ARB_ovr_0(&program, location, x, y, z, w);
    end;
    
    public z_ProgramUniform1i64vARB_adr := GetFuncAdr('glProgramUniform1i64vARB');
    public z_ProgramUniform1i64vARB_ovr_0 := GetFuncOrNil&<procedure(&program: UInt32; location: Int32; count: Int32; var value: Int64)>(z_ProgramUniform1i64vARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniform1i64vARB(&program: UInt32; location: Int32; count: Int32; value: array of Int64);
    begin
      z_ProgramUniform1i64vARB_ovr_0(&program, location, count, value[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniform1i64vARB(&program: UInt32; location: Int32; count: Int32; var value: Int64);
    begin
      z_ProgramUniform1i64vARB_ovr_0(&program, location, count, value);
    end;
    public z_ProgramUniform1i64vARB_ovr_2 := GetFuncOrNil&<procedure(&program: UInt32; location: Int32; count: Int32; value: IntPtr)>(z_ProgramUniform1i64vARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniform1i64vARB(&program: UInt32; location: Int32; count: Int32; value: IntPtr);
    begin
      z_ProgramUniform1i64vARB_ovr_2(&program, location, count, value);
    end;
    
    public z_ProgramUniform2i64vARB_adr := GetFuncAdr('glProgramUniform2i64vARB');
    public z_ProgramUniform2i64vARB_ovr_0 := GetFuncOrNil&<procedure(&program: UInt32; location: Int32; count: Int32; var value: Int64)>(z_ProgramUniform2i64vARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniform2i64vARB(&program: UInt32; location: Int32; count: Int32; value: array of Int64);
    begin
      z_ProgramUniform2i64vARB_ovr_0(&program, location, count, value[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniform2i64vARB(&program: UInt32; location: Int32; count: Int32; var value: Int64);
    begin
      z_ProgramUniform2i64vARB_ovr_0(&program, location, count, value);
    end;
    public z_ProgramUniform2i64vARB_ovr_2 := GetFuncOrNil&<procedure(&program: UInt32; location: Int32; count: Int32; value: IntPtr)>(z_ProgramUniform2i64vARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniform2i64vARB(&program: UInt32; location: Int32; count: Int32; value: IntPtr);
    begin
      z_ProgramUniform2i64vARB_ovr_2(&program, location, count, value);
    end;
    
    public z_ProgramUniform3i64vARB_adr := GetFuncAdr('glProgramUniform3i64vARB');
    public z_ProgramUniform3i64vARB_ovr_0 := GetFuncOrNil&<procedure(&program: UInt32; location: Int32; count: Int32; var value: Int64)>(z_ProgramUniform3i64vARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniform3i64vARB(&program: UInt32; location: Int32; count: Int32; value: array of Int64);
    begin
      z_ProgramUniform3i64vARB_ovr_0(&program, location, count, value[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniform3i64vARB(&program: UInt32; location: Int32; count: Int32; var value: Int64);
    begin
      z_ProgramUniform3i64vARB_ovr_0(&program, location, count, value);
    end;
    public z_ProgramUniform3i64vARB_ovr_2 := GetFuncOrNil&<procedure(&program: UInt32; location: Int32; count: Int32; value: IntPtr)>(z_ProgramUniform3i64vARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniform3i64vARB(&program: UInt32; location: Int32; count: Int32; value: IntPtr);
    begin
      z_ProgramUniform3i64vARB_ovr_2(&program, location, count, value);
    end;
    
    public z_ProgramUniform4i64vARB_adr := GetFuncAdr('glProgramUniform4i64vARB');
    public z_ProgramUniform4i64vARB_ovr_0 := GetFuncOrNil&<procedure(&program: UInt32; location: Int32; count: Int32; var value: Int64)>(z_ProgramUniform4i64vARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniform4i64vARB(&program: UInt32; location: Int32; count: Int32; value: array of Int64);
    begin
      z_ProgramUniform4i64vARB_ovr_0(&program, location, count, value[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniform4i64vARB(&program: UInt32; location: Int32; count: Int32; var value: Int64);
    begin
      z_ProgramUniform4i64vARB_ovr_0(&program, location, count, value);
    end;
    public z_ProgramUniform4i64vARB_ovr_2 := GetFuncOrNil&<procedure(&program: UInt32; location: Int32; count: Int32; value: IntPtr)>(z_ProgramUniform4i64vARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniform4i64vARB(&program: UInt32; location: Int32; count: Int32; value: IntPtr);
    begin
      z_ProgramUniform4i64vARB_ovr_2(&program, location, count, value);
    end;
    
    public z_ProgramUniform1ui64ARB_adr := GetFuncAdr('glProgramUniform1ui64ARB');
    public z_ProgramUniform1ui64ARB_ovr_0 := GetFuncOrNil&<procedure(&program: UInt32; location: Int32; x: UInt64)>(z_ProgramUniform1ui64ARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniform1ui64ARB(&program: UInt32; location: Int32; x: UInt64);
    begin
      z_ProgramUniform1ui64ARB_ovr_0(&program, location, x);
    end;
    
    public z_ProgramUniform2ui64ARB_adr := GetFuncAdr('glProgramUniform2ui64ARB');
    public z_ProgramUniform2ui64ARB_ovr_0 := GetFuncOrNil&<procedure(&program: UInt32; location: Int32; x: UInt64; y: UInt64)>(z_ProgramUniform2ui64ARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniform2ui64ARB(&program: UInt32; location: Int32; x: UInt64; y: UInt64);
    begin
      z_ProgramUniform2ui64ARB_ovr_0(&program, location, x, y);
    end;
    
    public z_ProgramUniform3ui64ARB_adr := GetFuncAdr('glProgramUniform3ui64ARB');
    public z_ProgramUniform3ui64ARB_ovr_0 := GetFuncOrNil&<procedure(&program: UInt32; location: Int32; x: UInt64; y: UInt64; z: UInt64)>(z_ProgramUniform3ui64ARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniform3ui64ARB(&program: UInt32; location: Int32; x: UInt64; y: UInt64; z: UInt64);
    begin
      z_ProgramUniform3ui64ARB_ovr_0(&program, location, x, y, z);
    end;
    
    public z_ProgramUniform4ui64ARB_adr := GetFuncAdr('glProgramUniform4ui64ARB');
    public z_ProgramUniform4ui64ARB_ovr_0 := GetFuncOrNil&<procedure(&program: UInt32; location: Int32; x: UInt64; y: UInt64; z: UInt64; w: UInt64)>(z_ProgramUniform4ui64ARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniform4ui64ARB(&program: UInt32; location: Int32; x: UInt64; y: UInt64; z: UInt64; w: UInt64);
    begin
      z_ProgramUniform4ui64ARB_ovr_0(&program, location, x, y, z, w);
    end;
    
    public z_ProgramUniform1ui64vARB_adr := GetFuncAdr('glProgramUniform1ui64vARB');
    public z_ProgramUniform1ui64vARB_ovr_0 := GetFuncOrNil&<procedure(&program: UInt32; location: Int32; count: Int32; var value: UInt64)>(z_ProgramUniform1ui64vARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniform1ui64vARB(&program: UInt32; location: Int32; count: Int32; value: array of UInt64);
    begin
      z_ProgramUniform1ui64vARB_ovr_0(&program, location, count, value[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniform1ui64vARB(&program: UInt32; location: Int32; count: Int32; var value: UInt64);
    begin
      z_ProgramUniform1ui64vARB_ovr_0(&program, location, count, value);
    end;
    public z_ProgramUniform1ui64vARB_ovr_2 := GetFuncOrNil&<procedure(&program: UInt32; location: Int32; count: Int32; value: IntPtr)>(z_ProgramUniform1ui64vARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniform1ui64vARB(&program: UInt32; location: Int32; count: Int32; value: IntPtr);
    begin
      z_ProgramUniform1ui64vARB_ovr_2(&program, location, count, value);
    end;
    
    public z_ProgramUniform2ui64vARB_adr := GetFuncAdr('glProgramUniform2ui64vARB');
    public z_ProgramUniform2ui64vARB_ovr_0 := GetFuncOrNil&<procedure(&program: UInt32; location: Int32; count: Int32; var value: UInt64)>(z_ProgramUniform2ui64vARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniform2ui64vARB(&program: UInt32; location: Int32; count: Int32; value: array of UInt64);
    begin
      z_ProgramUniform2ui64vARB_ovr_0(&program, location, count, value[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniform2ui64vARB(&program: UInt32; location: Int32; count: Int32; var value: UInt64);
    begin
      z_ProgramUniform2ui64vARB_ovr_0(&program, location, count, value);
    end;
    public z_ProgramUniform2ui64vARB_ovr_2 := GetFuncOrNil&<procedure(&program: UInt32; location: Int32; count: Int32; value: IntPtr)>(z_ProgramUniform2ui64vARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniform2ui64vARB(&program: UInt32; location: Int32; count: Int32; value: IntPtr);
    begin
      z_ProgramUniform2ui64vARB_ovr_2(&program, location, count, value);
    end;
    
    public z_ProgramUniform3ui64vARB_adr := GetFuncAdr('glProgramUniform3ui64vARB');
    public z_ProgramUniform3ui64vARB_ovr_0 := GetFuncOrNil&<procedure(&program: UInt32; location: Int32; count: Int32; var value: UInt64)>(z_ProgramUniform3ui64vARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniform3ui64vARB(&program: UInt32; location: Int32; count: Int32; value: array of UInt64);
    begin
      z_ProgramUniform3ui64vARB_ovr_0(&program, location, count, value[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniform3ui64vARB(&program: UInt32; location: Int32; count: Int32; var value: UInt64);
    begin
      z_ProgramUniform3ui64vARB_ovr_0(&program, location, count, value);
    end;
    public z_ProgramUniform3ui64vARB_ovr_2 := GetFuncOrNil&<procedure(&program: UInt32; location: Int32; count: Int32; value: IntPtr)>(z_ProgramUniform3ui64vARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniform3ui64vARB(&program: UInt32; location: Int32; count: Int32; value: IntPtr);
    begin
      z_ProgramUniform3ui64vARB_ovr_2(&program, location, count, value);
    end;
    
    public z_ProgramUniform4ui64vARB_adr := GetFuncAdr('glProgramUniform4ui64vARB');
    public z_ProgramUniform4ui64vARB_ovr_0 := GetFuncOrNil&<procedure(&program: UInt32; location: Int32; count: Int32; var value: UInt64)>(z_ProgramUniform4ui64vARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniform4ui64vARB(&program: UInt32; location: Int32; count: Int32; value: array of UInt64);
    begin
      z_ProgramUniform4ui64vARB_ovr_0(&program, location, count, value[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniform4ui64vARB(&program: UInt32; location: Int32; count: Int32; var value: UInt64);
    begin
      z_ProgramUniform4ui64vARB_ovr_0(&program, location, count, value);
    end;
    public z_ProgramUniform4ui64vARB_ovr_2 := GetFuncOrNil&<procedure(&program: UInt32; location: Int32; count: Int32; value: IntPtr)>(z_ProgramUniform4ui64vARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniform4ui64vARB(&program: UInt32; location: Int32; count: Int32; value: IntPtr);
    begin
      z_ProgramUniform4ui64vARB_ovr_2(&program, location, count, value);
    end;
    
  end;
  
  glImagingARB = sealed class
    public static function GetFuncAdr([MarshalAs(UnmanagedType.LPStr)] lpszProc: string): IntPtr;
    external 'opengl32.dll' name 'wglGetProcAddress';
    public static function GetFuncOrNil<T>(fadr: IntPtr) :=
    fadr=IntPtr.Zero ? default(T) :
    Marshal.GetDelegateForFunctionPointer&<T>(fadr);
    
    public z_BlendColor_adr := GetFuncAdr('glBlendColor');
    public z_BlendColor_ovr_0 := GetFuncOrNil&<procedure(red: single; green: single; blue: single; alpha: single)>(z_BlendColor_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure BlendColor(red: single; green: single; blue: single; alpha: single);
    begin
      z_BlendColor_ovr_0(red, green, blue, alpha);
    end;
    
    public z_BlendEquation_adr := GetFuncAdr('glBlendEquation');
    public z_BlendEquation_ovr_0 := GetFuncOrNil&<procedure(mode: BlendEquationModeEXT)>(z_BlendEquation_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure BlendEquation(mode: BlendEquationModeEXT);
    begin
      z_BlendEquation_ovr_0(mode);
    end;
    
    public z_ColorTable_adr := GetFuncAdr('glColorTable');
    public z_ColorTable_ovr_0 := GetFuncOrNil&<procedure(target: ColorTableTarget; _internalformat: InternalFormat; width: Int32; format: PixelFormat; &type: PixelType; table: IntPtr)>(z_ColorTable_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ColorTable(target: ColorTableTarget; _internalformat: InternalFormat; width: Int32; format: PixelFormat; &type: PixelType; table: IntPtr);
    begin
      z_ColorTable_ovr_0(target, _internalformat, width, format, &type, table);
    end;
    
    public z_ColorTableParameterfv_adr := GetFuncAdr('glColorTableParameterfv');
    public z_ColorTableParameterfv_ovr_0 := GetFuncOrNil&<procedure(target: ColorTableTarget; pname: DummyEnum; var &params: single)>(z_ColorTableParameterfv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ColorTableParameterfv(target: ColorTableTarget; pname: DummyEnum; &params: array of single);
    begin
      z_ColorTableParameterfv_ovr_0(target, pname, &params[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ColorTableParameterfv(target: ColorTableTarget; pname: DummyEnum; var &params: single);
    begin
      z_ColorTableParameterfv_ovr_0(target, pname, &params);
    end;
    public z_ColorTableParameterfv_ovr_2 := GetFuncOrNil&<procedure(target: ColorTableTarget; pname: DummyEnum; &params: IntPtr)>(z_ColorTableParameterfv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ColorTableParameterfv(target: ColorTableTarget; pname: DummyEnum; &params: IntPtr);
    begin
      z_ColorTableParameterfv_ovr_2(target, pname, &params);
    end;
    
    public z_ColorTableParameteriv_adr := GetFuncAdr('glColorTableParameteriv');
    public z_ColorTableParameteriv_ovr_0 := GetFuncOrNil&<procedure(target: ColorTableTarget; pname: DummyEnum; var &params: Int32)>(z_ColorTableParameteriv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ColorTableParameteriv(target: ColorTableTarget; pname: DummyEnum; &params: array of Int32);
    begin
      z_ColorTableParameteriv_ovr_0(target, pname, &params[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ColorTableParameteriv(target: ColorTableTarget; pname: DummyEnum; var &params: Int32);
    begin
      z_ColorTableParameteriv_ovr_0(target, pname, &params);
    end;
    public z_ColorTableParameteriv_ovr_2 := GetFuncOrNil&<procedure(target: ColorTableTarget; pname: DummyEnum; &params: IntPtr)>(z_ColorTableParameteriv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ColorTableParameteriv(target: ColorTableTarget; pname: DummyEnum; &params: IntPtr);
    begin
      z_ColorTableParameteriv_ovr_2(target, pname, &params);
    end;
    
    public z_CopyColorTable_adr := GetFuncAdr('glCopyColorTable');
    public z_CopyColorTable_ovr_0 := GetFuncOrNil&<procedure(target: ColorTableTarget; _internalformat: InternalFormat; x: Int32; y: Int32; width: Int32)>(z_CopyColorTable_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure CopyColorTable(target: ColorTableTarget; _internalformat: InternalFormat; x: Int32; y: Int32; width: Int32);
    begin
      z_CopyColorTable_ovr_0(target, _internalformat, x, y, width);
    end;
    
    public z_GetColorTable_adr := GetFuncAdr('glGetColorTable');
    public z_GetColorTable_ovr_0 := GetFuncOrNil&<procedure(target: ColorTableTarget; format: PixelFormat; &type: PixelType; table: IntPtr)>(z_GetColorTable_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetColorTable(target: ColorTableTarget; format: PixelFormat; &type: PixelType; table: IntPtr);
    begin
      z_GetColorTable_ovr_0(target, format, &type, table);
    end;
    
    public z_GetColorTableParameterfv_adr := GetFuncAdr('glGetColorTableParameterfv');
    public z_GetColorTableParameterfv_ovr_0 := GetFuncOrNil&<procedure(target: ColorTableTarget; pname: GetColorTableParameterPNameSGI; var &params: single)>(z_GetColorTableParameterfv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetColorTableParameterfv(target: ColorTableTarget; pname: GetColorTableParameterPNameSGI; &params: array of single);
    begin
      z_GetColorTableParameterfv_ovr_0(target, pname, &params[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetColorTableParameterfv(target: ColorTableTarget; pname: GetColorTableParameterPNameSGI; var &params: single);
    begin
      z_GetColorTableParameterfv_ovr_0(target, pname, &params);
    end;
    public z_GetColorTableParameterfv_ovr_2 := GetFuncOrNil&<procedure(target: ColorTableTarget; pname: GetColorTableParameterPNameSGI; &params: IntPtr)>(z_GetColorTableParameterfv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetColorTableParameterfv(target: ColorTableTarget; pname: GetColorTableParameterPNameSGI; &params: IntPtr);
    begin
      z_GetColorTableParameterfv_ovr_2(target, pname, &params);
    end;
    
    public z_GetColorTableParameteriv_adr := GetFuncAdr('glGetColorTableParameteriv');
    public z_GetColorTableParameteriv_ovr_0 := GetFuncOrNil&<procedure(target: ColorTableTarget; pname: GetColorTableParameterPNameSGI; var &params: Int32)>(z_GetColorTableParameteriv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetColorTableParameteriv(target: ColorTableTarget; pname: GetColorTableParameterPNameSGI; &params: array of Int32);
    begin
      z_GetColorTableParameteriv_ovr_0(target, pname, &params[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetColorTableParameteriv(target: ColorTableTarget; pname: GetColorTableParameterPNameSGI; var &params: Int32);
    begin
      z_GetColorTableParameteriv_ovr_0(target, pname, &params);
    end;
    public z_GetColorTableParameteriv_ovr_2 := GetFuncOrNil&<procedure(target: ColorTableTarget; pname: GetColorTableParameterPNameSGI; &params: IntPtr)>(z_GetColorTableParameteriv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetColorTableParameteriv(target: ColorTableTarget; pname: GetColorTableParameterPNameSGI; &params: IntPtr);
    begin
      z_GetColorTableParameteriv_ovr_2(target, pname, &params);
    end;
    
    public z_ColorSubTable_adr := GetFuncAdr('glColorSubTable');
    public z_ColorSubTable_ovr_0 := GetFuncOrNil&<procedure(target: ColorTableTarget; start: Int32; count: Int32; format: PixelFormat; &type: PixelType; data: IntPtr)>(z_ColorSubTable_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ColorSubTable(target: ColorTableTarget; start: Int32; count: Int32; format: PixelFormat; &type: PixelType; data: IntPtr);
    begin
      z_ColorSubTable_ovr_0(target, start, count, format, &type, data);
    end;
    
    public z_CopyColorSubTable_adr := GetFuncAdr('glCopyColorSubTable');
    public z_CopyColorSubTable_ovr_0 := GetFuncOrNil&<procedure(target: ColorTableTarget; start: Int32; x: Int32; y: Int32; width: Int32)>(z_CopyColorSubTable_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure CopyColorSubTable(target: ColorTableTarget; start: Int32; x: Int32; y: Int32; width: Int32);
    begin
      z_CopyColorSubTable_ovr_0(target, start, x, y, width);
    end;
    
    public z_ConvolutionFilter1D_adr := GetFuncAdr('glConvolutionFilter1D');
    public z_ConvolutionFilter1D_ovr_0 := GetFuncOrNil&<procedure(target: ConvolutionTarget; _internalformat: InternalFormat; width: Int32; format: PixelFormat; &type: PixelType; image: IntPtr)>(z_ConvolutionFilter1D_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ConvolutionFilter1D(target: ConvolutionTarget; _internalformat: InternalFormat; width: Int32; format: PixelFormat; &type: PixelType; image: IntPtr);
    begin
      z_ConvolutionFilter1D_ovr_0(target, _internalformat, width, format, &type, image);
    end;
    
    public z_ConvolutionFilter2D_adr := GetFuncAdr('glConvolutionFilter2D');
    public z_ConvolutionFilter2D_ovr_0 := GetFuncOrNil&<procedure(target: ConvolutionTarget; _internalformat: InternalFormat; width: Int32; height: Int32; format: PixelFormat; &type: PixelType; image: IntPtr)>(z_ConvolutionFilter2D_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ConvolutionFilter2D(target: ConvolutionTarget; _internalformat: InternalFormat; width: Int32; height: Int32; format: PixelFormat; &type: PixelType; image: IntPtr);
    begin
      z_ConvolutionFilter2D_ovr_0(target, _internalformat, width, height, format, &type, image);
    end;
    
    public z_ConvolutionParameterf_adr := GetFuncAdr('glConvolutionParameterf');
    public z_ConvolutionParameterf_ovr_0 := GetFuncOrNil&<procedure(target: ConvolutionTarget; pname: ConvolutionParameterEXT; &params: single)>(z_ConvolutionParameterf_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ConvolutionParameterf(target: ConvolutionTarget; pname: ConvolutionParameterEXT; &params: single);
    begin
      z_ConvolutionParameterf_ovr_0(target, pname, &params);
    end;
    
    public z_ConvolutionParameterfv_adr := GetFuncAdr('glConvolutionParameterfv');
    public z_ConvolutionParameterfv_ovr_0 := GetFuncOrNil&<procedure(target: ConvolutionTarget; pname: ConvolutionParameterEXT; var &params: single)>(z_ConvolutionParameterfv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ConvolutionParameterfv(target: ConvolutionTarget; pname: ConvolutionParameterEXT; &params: array of single);
    begin
      z_ConvolutionParameterfv_ovr_0(target, pname, &params[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ConvolutionParameterfv(target: ConvolutionTarget; pname: ConvolutionParameterEXT; var &params: single);
    begin
      z_ConvolutionParameterfv_ovr_0(target, pname, &params);
    end;
    public z_ConvolutionParameterfv_ovr_2 := GetFuncOrNil&<procedure(target: ConvolutionTarget; pname: ConvolutionParameterEXT; &params: IntPtr)>(z_ConvolutionParameterfv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ConvolutionParameterfv(target: ConvolutionTarget; pname: ConvolutionParameterEXT; &params: IntPtr);
    begin
      z_ConvolutionParameterfv_ovr_2(target, pname, &params);
    end;
    
    public z_ConvolutionParameteri_adr := GetFuncAdr('glConvolutionParameteri');
    public z_ConvolutionParameteri_ovr_0 := GetFuncOrNil&<procedure(target: ConvolutionTarget; pname: ConvolutionParameterEXT; &params: Int32)>(z_ConvolutionParameteri_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ConvolutionParameteri(target: ConvolutionTarget; pname: ConvolutionParameterEXT; &params: Int32);
    begin
      z_ConvolutionParameteri_ovr_0(target, pname, &params);
    end;
    
    public z_ConvolutionParameteriv_adr := GetFuncAdr('glConvolutionParameteriv');
    public z_ConvolutionParameteriv_ovr_0 := GetFuncOrNil&<procedure(target: ConvolutionTarget; pname: ConvolutionParameterEXT; var &params: Int32)>(z_ConvolutionParameteriv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ConvolutionParameteriv(target: ConvolutionTarget; pname: ConvolutionParameterEXT; &params: array of Int32);
    begin
      z_ConvolutionParameteriv_ovr_0(target, pname, &params[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ConvolutionParameteriv(target: ConvolutionTarget; pname: ConvolutionParameterEXT; var &params: Int32);
    begin
      z_ConvolutionParameteriv_ovr_0(target, pname, &params);
    end;
    public z_ConvolutionParameteriv_ovr_2 := GetFuncOrNil&<procedure(target: ConvolutionTarget; pname: ConvolutionParameterEXT; &params: IntPtr)>(z_ConvolutionParameteriv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ConvolutionParameteriv(target: ConvolutionTarget; pname: ConvolutionParameterEXT; &params: IntPtr);
    begin
      z_ConvolutionParameteriv_ovr_2(target, pname, &params);
    end;
    
    public z_CopyConvolutionFilter1D_adr := GetFuncAdr('glCopyConvolutionFilter1D');
    public z_CopyConvolutionFilter1D_ovr_0 := GetFuncOrNil&<procedure(target: ConvolutionTarget; _internalformat: InternalFormat; x: Int32; y: Int32; width: Int32)>(z_CopyConvolutionFilter1D_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure CopyConvolutionFilter1D(target: ConvolutionTarget; _internalformat: InternalFormat; x: Int32; y: Int32; width: Int32);
    begin
      z_CopyConvolutionFilter1D_ovr_0(target, _internalformat, x, y, width);
    end;
    
    public z_CopyConvolutionFilter2D_adr := GetFuncAdr('glCopyConvolutionFilter2D');
    public z_CopyConvolutionFilter2D_ovr_0 := GetFuncOrNil&<procedure(target: ConvolutionTarget; _internalformat: InternalFormat; x: Int32; y: Int32; width: Int32; height: Int32)>(z_CopyConvolutionFilter2D_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure CopyConvolutionFilter2D(target: ConvolutionTarget; _internalformat: InternalFormat; x: Int32; y: Int32; width: Int32; height: Int32);
    begin
      z_CopyConvolutionFilter2D_ovr_0(target, _internalformat, x, y, width, height);
    end;
    
    public z_GetConvolutionFilter_adr := GetFuncAdr('glGetConvolutionFilter');
    public z_GetConvolutionFilter_ovr_0 := GetFuncOrNil&<procedure(target: ConvolutionTarget; format: PixelFormat; &type: PixelType; image: IntPtr)>(z_GetConvolutionFilter_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetConvolutionFilter(target: ConvolutionTarget; format: PixelFormat; &type: PixelType; image: IntPtr);
    begin
      z_GetConvolutionFilter_ovr_0(target, format, &type, image);
    end;
    
    public z_GetConvolutionParameterfv_adr := GetFuncAdr('glGetConvolutionParameterfv');
    public z_GetConvolutionParameterfv_ovr_0 := GetFuncOrNil&<procedure(target: ConvolutionTarget; pname: ConvolutionParameterEXT; var &params: single)>(z_GetConvolutionParameterfv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetConvolutionParameterfv(target: ConvolutionTarget; pname: ConvolutionParameterEXT; &params: array of single);
    begin
      z_GetConvolutionParameterfv_ovr_0(target, pname, &params[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetConvolutionParameterfv(target: ConvolutionTarget; pname: ConvolutionParameterEXT; var &params: single);
    begin
      z_GetConvolutionParameterfv_ovr_0(target, pname, &params);
    end;
    public z_GetConvolutionParameterfv_ovr_2 := GetFuncOrNil&<procedure(target: ConvolutionTarget; pname: ConvolutionParameterEXT; &params: IntPtr)>(z_GetConvolutionParameterfv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetConvolutionParameterfv(target: ConvolutionTarget; pname: ConvolutionParameterEXT; &params: IntPtr);
    begin
      z_GetConvolutionParameterfv_ovr_2(target, pname, &params);
    end;
    
    public z_GetConvolutionParameteriv_adr := GetFuncAdr('glGetConvolutionParameteriv');
    public z_GetConvolutionParameteriv_ovr_0 := GetFuncOrNil&<procedure(target: ConvolutionTarget; pname: ConvolutionParameterEXT; var &params: Int32)>(z_GetConvolutionParameteriv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetConvolutionParameteriv(target: ConvolutionTarget; pname: ConvolutionParameterEXT; &params: array of Int32);
    begin
      z_GetConvolutionParameteriv_ovr_0(target, pname, &params[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetConvolutionParameteriv(target: ConvolutionTarget; pname: ConvolutionParameterEXT; var &params: Int32);
    begin
      z_GetConvolutionParameteriv_ovr_0(target, pname, &params);
    end;
    public z_GetConvolutionParameteriv_ovr_2 := GetFuncOrNil&<procedure(target: ConvolutionTarget; pname: ConvolutionParameterEXT; &params: IntPtr)>(z_GetConvolutionParameteriv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetConvolutionParameteriv(target: ConvolutionTarget; pname: ConvolutionParameterEXT; &params: IntPtr);
    begin
      z_GetConvolutionParameteriv_ovr_2(target, pname, &params);
    end;
    
    public z_GetSeparableFilter_adr := GetFuncAdr('glGetSeparableFilter');
    public z_GetSeparableFilter_ovr_0 := GetFuncOrNil&<procedure(target: SeparableTargetEXT; format: PixelFormat; &type: PixelType; row: IntPtr; column: IntPtr; span: IntPtr)>(z_GetSeparableFilter_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetSeparableFilter(target: SeparableTargetEXT; format: PixelFormat; &type: PixelType; row: IntPtr; column: IntPtr; span: IntPtr);
    begin
      z_GetSeparableFilter_ovr_0(target, format, &type, row, column, span);
    end;
    
    public z_SeparableFilter2D_adr := GetFuncAdr('glSeparableFilter2D');
    public z_SeparableFilter2D_ovr_0 := GetFuncOrNil&<procedure(target: SeparableTargetEXT; _internalformat: InternalFormat; width: Int32; height: Int32; format: PixelFormat; &type: PixelType; row: IntPtr; column: IntPtr)>(z_SeparableFilter2D_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure SeparableFilter2D(target: SeparableTargetEXT; _internalformat: InternalFormat; width: Int32; height: Int32; format: PixelFormat; &type: PixelType; row: IntPtr; column: IntPtr);
    begin
      z_SeparableFilter2D_ovr_0(target, _internalformat, width, height, format, &type, row, column);
    end;
    
    public z_GetHistogram_adr := GetFuncAdr('glGetHistogram');
    public z_GetHistogram_ovr_0 := GetFuncOrNil&<procedure(target: HistogramTargetEXT; reset: boolean; format: PixelFormat; &type: PixelType; values: IntPtr)>(z_GetHistogram_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetHistogram(target: HistogramTargetEXT; reset: boolean; format: PixelFormat; &type: PixelType; values: IntPtr);
    begin
      z_GetHistogram_ovr_0(target, reset, format, &type, values);
    end;
    
    public z_GetHistogramParameterfv_adr := GetFuncAdr('glGetHistogramParameterfv');
    public z_GetHistogramParameterfv_ovr_0 := GetFuncOrNil&<procedure(target: HistogramTargetEXT; pname: GetHistogramParameterPNameEXT; var &params: single)>(z_GetHistogramParameterfv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetHistogramParameterfv(target: HistogramTargetEXT; pname: GetHistogramParameterPNameEXT; &params: array of single);
    begin
      z_GetHistogramParameterfv_ovr_0(target, pname, &params[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetHistogramParameterfv(target: HistogramTargetEXT; pname: GetHistogramParameterPNameEXT; var &params: single);
    begin
      z_GetHistogramParameterfv_ovr_0(target, pname, &params);
    end;
    public z_GetHistogramParameterfv_ovr_2 := GetFuncOrNil&<procedure(target: HistogramTargetEXT; pname: GetHistogramParameterPNameEXT; &params: IntPtr)>(z_GetHistogramParameterfv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetHistogramParameterfv(target: HistogramTargetEXT; pname: GetHistogramParameterPNameEXT; &params: IntPtr);
    begin
      z_GetHistogramParameterfv_ovr_2(target, pname, &params);
    end;
    
    public z_GetHistogramParameteriv_adr := GetFuncAdr('glGetHistogramParameteriv');
    public z_GetHistogramParameteriv_ovr_0 := GetFuncOrNil&<procedure(target: HistogramTargetEXT; pname: GetHistogramParameterPNameEXT; var &params: Int32)>(z_GetHistogramParameteriv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetHistogramParameteriv(target: HistogramTargetEXT; pname: GetHistogramParameterPNameEXT; &params: array of Int32);
    begin
      z_GetHistogramParameteriv_ovr_0(target, pname, &params[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetHistogramParameteriv(target: HistogramTargetEXT; pname: GetHistogramParameterPNameEXT; var &params: Int32);
    begin
      z_GetHistogramParameteriv_ovr_0(target, pname, &params);
    end;
    public z_GetHistogramParameteriv_ovr_2 := GetFuncOrNil&<procedure(target: HistogramTargetEXT; pname: GetHistogramParameterPNameEXT; &params: IntPtr)>(z_GetHistogramParameteriv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetHistogramParameteriv(target: HistogramTargetEXT; pname: GetHistogramParameterPNameEXT; &params: IntPtr);
    begin
      z_GetHistogramParameteriv_ovr_2(target, pname, &params);
    end;
    
    public z_GetMinmax_adr := GetFuncAdr('glGetMinmax');
    public z_GetMinmax_ovr_0 := GetFuncOrNil&<procedure(target: MinmaxTargetEXT; reset: boolean; format: PixelFormat; &type: PixelType; values: IntPtr)>(z_GetMinmax_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetMinmax(target: MinmaxTargetEXT; reset: boolean; format: PixelFormat; &type: PixelType; values: IntPtr);
    begin
      z_GetMinmax_ovr_0(target, reset, format, &type, values);
    end;
    
    public z_GetMinmaxParameterfv_adr := GetFuncAdr('glGetMinmaxParameterfv');
    public z_GetMinmaxParameterfv_ovr_0 := GetFuncOrNil&<procedure(target: MinmaxTargetEXT; pname: GetMinmaxParameterPNameEXT; var &params: single)>(z_GetMinmaxParameterfv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetMinmaxParameterfv(target: MinmaxTargetEXT; pname: GetMinmaxParameterPNameEXT; &params: array of single);
    begin
      z_GetMinmaxParameterfv_ovr_0(target, pname, &params[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetMinmaxParameterfv(target: MinmaxTargetEXT; pname: GetMinmaxParameterPNameEXT; var &params: single);
    begin
      z_GetMinmaxParameterfv_ovr_0(target, pname, &params);
    end;
    public z_GetMinmaxParameterfv_ovr_2 := GetFuncOrNil&<procedure(target: MinmaxTargetEXT; pname: GetMinmaxParameterPNameEXT; &params: IntPtr)>(z_GetMinmaxParameterfv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetMinmaxParameterfv(target: MinmaxTargetEXT; pname: GetMinmaxParameterPNameEXT; &params: IntPtr);
    begin
      z_GetMinmaxParameterfv_ovr_2(target, pname, &params);
    end;
    
    public z_GetMinmaxParameteriv_adr := GetFuncAdr('glGetMinmaxParameteriv');
    public z_GetMinmaxParameteriv_ovr_0 := GetFuncOrNil&<procedure(target: MinmaxTargetEXT; pname: GetMinmaxParameterPNameEXT; var &params: Int32)>(z_GetMinmaxParameteriv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetMinmaxParameteriv(target: MinmaxTargetEXT; pname: GetMinmaxParameterPNameEXT; &params: array of Int32);
    begin
      z_GetMinmaxParameteriv_ovr_0(target, pname, &params[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetMinmaxParameteriv(target: MinmaxTargetEXT; pname: GetMinmaxParameterPNameEXT; var &params: Int32);
    begin
      z_GetMinmaxParameteriv_ovr_0(target, pname, &params);
    end;
    public z_GetMinmaxParameteriv_ovr_2 := GetFuncOrNil&<procedure(target: MinmaxTargetEXT; pname: GetMinmaxParameterPNameEXT; &params: IntPtr)>(z_GetMinmaxParameteriv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetMinmaxParameteriv(target: MinmaxTargetEXT; pname: GetMinmaxParameterPNameEXT; &params: IntPtr);
    begin
      z_GetMinmaxParameteriv_ovr_2(target, pname, &params);
    end;
    
    public z_Histogram_adr := GetFuncAdr('glHistogram');
    public z_Histogram_ovr_0 := GetFuncOrNil&<procedure(target: HistogramTargetEXT; width: Int32; _internalformat: InternalFormat; sink: boolean)>(z_Histogram_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Histogram(target: HistogramTargetEXT; width: Int32; _internalformat: InternalFormat; sink: boolean);
    begin
      z_Histogram_ovr_0(target, width, _internalformat, sink);
    end;
    
    public z_Minmax_adr := GetFuncAdr('glMinmax');
    public z_Minmax_ovr_0 := GetFuncOrNil&<procedure(target: MinmaxTargetEXT; _internalformat: InternalFormat; sink: boolean)>(z_Minmax_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Minmax(target: MinmaxTargetEXT; _internalformat: InternalFormat; sink: boolean);
    begin
      z_Minmax_ovr_0(target, _internalformat, sink);
    end;
    
    public z_ResetHistogram_adr := GetFuncAdr('glResetHistogram');
    public z_ResetHistogram_ovr_0 := GetFuncOrNil&<procedure(target: HistogramTargetEXT)>(z_ResetHistogram_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ResetHistogram(target: HistogramTargetEXT);
    begin
      z_ResetHistogram_ovr_0(target);
    end;
    
    public z_ResetMinmax_adr := GetFuncAdr('glResetMinmax');
    public z_ResetMinmax_ovr_0 := GetFuncOrNil&<procedure(target: MinmaxTargetEXT)>(z_ResetMinmax_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ResetMinmax(target: MinmaxTargetEXT);
    begin
      z_ResetMinmax_ovr_0(target);
    end;
    
  end;
  
  glIndirectParametersARB = sealed class
    public static function GetFuncAdr([MarshalAs(UnmanagedType.LPStr)] lpszProc: string): IntPtr;
    external 'opengl32.dll' name 'wglGetProcAddress';
    public static function GetFuncOrNil<T>(fadr: IntPtr) :=
    fadr=IntPtr.Zero ? default(T) :
    Marshal.GetDelegateForFunctionPointer&<T>(fadr);
    
    public z_MultiDrawArraysIndirectCountARB_adr := GetFuncAdr('glMultiDrawArraysIndirectCountARB');
    public z_MultiDrawArraysIndirectCountARB_ovr_0 := GetFuncOrNil&<procedure(mode: PrimitiveType; indirect: IntPtr; drawcount: IntPtr; maxdrawcount: Int32; stride: Int32)>(z_MultiDrawArraysIndirectCountARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiDrawArraysIndirectCountARB(mode: PrimitiveType; indirect: IntPtr; drawcount: IntPtr; maxdrawcount: Int32; stride: Int32);
    begin
      z_MultiDrawArraysIndirectCountARB_ovr_0(mode, indirect, drawcount, maxdrawcount, stride);
    end;
    
    public z_MultiDrawElementsIndirectCountARB_adr := GetFuncAdr('glMultiDrawElementsIndirectCountARB');
    public z_MultiDrawElementsIndirectCountARB_ovr_0 := GetFuncOrNil&<procedure(mode: PrimitiveType; &type: DrawElementsType; indirect: IntPtr; drawcount: IntPtr; maxdrawcount: Int32; stride: Int32)>(z_MultiDrawElementsIndirectCountARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiDrawElementsIndirectCountARB(mode: PrimitiveType; &type: DrawElementsType; indirect: IntPtr; drawcount: IntPtr; maxdrawcount: Int32; stride: Int32);
    begin
      z_MultiDrawElementsIndirectCountARB_ovr_0(mode, &type, indirect, drawcount, maxdrawcount, stride);
    end;
    
  end;
  
  glInstancedArraysARB = sealed class
    public static function GetFuncAdr([MarshalAs(UnmanagedType.LPStr)] lpszProc: string): IntPtr;
    external 'opengl32.dll' name 'wglGetProcAddress';
    public static function GetFuncOrNil<T>(fadr: IntPtr) :=
    fadr=IntPtr.Zero ? default(T) :
    Marshal.GetDelegateForFunctionPointer&<T>(fadr);
    
    public z_VertexAttribDivisorARB_adr := GetFuncAdr('glVertexAttribDivisorARB');
    public z_VertexAttribDivisorARB_ovr_0 := GetFuncOrNil&<procedure(index: UInt32; divisor: UInt32)>(z_VertexAttribDivisorARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttribDivisorARB(index: UInt32; divisor: UInt32);
    begin
      z_VertexAttribDivisorARB_ovr_0(index, divisor);
    end;
    
  end;
  
  glInternalformatQueryARB = sealed class
    public static function GetFuncAdr([MarshalAs(UnmanagedType.LPStr)] lpszProc: string): IntPtr;
    external 'opengl32.dll' name 'wglGetProcAddress';
    public static function GetFuncOrNil<T>(fadr: IntPtr) :=
    fadr=IntPtr.Zero ? default(T) :
    Marshal.GetDelegateForFunctionPointer&<T>(fadr);
    
    public z_GetInternalformativ_adr := GetFuncAdr('glGetInternalformativ');
    public z_GetInternalformativ_ovr_0 := GetFuncOrNil&<procedure(target: TextureTarget; _internalformat: InternalFormat; pname: InternalFormatPName; count: Int32; var &params: Int32)>(z_GetInternalformativ_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetInternalformativ(target: TextureTarget; _internalformat: InternalFormat; pname: InternalFormatPName; count: Int32; &params: array of Int32);
    begin
      z_GetInternalformativ_ovr_0(target, _internalformat, pname, count, &params[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetInternalformativ(target: TextureTarget; _internalformat: InternalFormat; pname: InternalFormatPName; count: Int32; var &params: Int32);
    begin
      z_GetInternalformativ_ovr_0(target, _internalformat, pname, count, &params);
    end;
    public z_GetInternalformativ_ovr_2 := GetFuncOrNil&<procedure(target: TextureTarget; _internalformat: InternalFormat; pname: InternalFormatPName; count: Int32; &params: IntPtr)>(z_GetInternalformativ_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetInternalformativ(target: TextureTarget; _internalformat: InternalFormat; pname: InternalFormatPName; count: Int32; &params: IntPtr);
    begin
      z_GetInternalformativ_ovr_2(target, _internalformat, pname, count, &params);
    end;
    
  end;
  
  glInternalformatQuery2ARB = sealed class
    public static function GetFuncAdr([MarshalAs(UnmanagedType.LPStr)] lpszProc: string): IntPtr;
    external 'opengl32.dll' name 'wglGetProcAddress';
    public static function GetFuncOrNil<T>(fadr: IntPtr) :=
    fadr=IntPtr.Zero ? default(T) :
    Marshal.GetDelegateForFunctionPointer&<T>(fadr);
    
    public z_GetInternalformati64v_adr := GetFuncAdr('glGetInternalformati64v');
    public z_GetInternalformati64v_ovr_0 := GetFuncOrNil&<procedure(target: TextureTarget; _internalformat: InternalFormat; pname: InternalFormatPName; count: Int32; var &params: Int64)>(z_GetInternalformati64v_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetInternalformati64v(target: TextureTarget; _internalformat: InternalFormat; pname: InternalFormatPName; count: Int32; &params: array of Int64);
    begin
      z_GetInternalformati64v_ovr_0(target, _internalformat, pname, count, &params[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetInternalformati64v(target: TextureTarget; _internalformat: InternalFormat; pname: InternalFormatPName; count: Int32; var &params: Int64);
    begin
      z_GetInternalformati64v_ovr_0(target, _internalformat, pname, count, &params);
    end;
    public z_GetInternalformati64v_ovr_2 := GetFuncOrNil&<procedure(target: TextureTarget; _internalformat: InternalFormat; pname: InternalFormatPName; count: Int32; &params: IntPtr)>(z_GetInternalformati64v_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetInternalformati64v(target: TextureTarget; _internalformat: InternalFormat; pname: InternalFormatPName; count: Int32; &params: IntPtr);
    begin
      z_GetInternalformati64v_ovr_2(target, _internalformat, pname, count, &params);
    end;
    
  end;
  
  glInvalidateSubdataARB = sealed class
    public static function GetFuncAdr([MarshalAs(UnmanagedType.LPStr)] lpszProc: string): IntPtr;
    external 'opengl32.dll' name 'wglGetProcAddress';
    public static function GetFuncOrNil<T>(fadr: IntPtr) :=
    fadr=IntPtr.Zero ? default(T) :
    Marshal.GetDelegateForFunctionPointer&<T>(fadr);
    
    public z_InvalidateTexSubImage_adr := GetFuncAdr('glInvalidateTexSubImage');
    public z_InvalidateTexSubImage_ovr_0 := GetFuncOrNil&<procedure(texture: TextureName; level: Int32; xoffset: Int32; yoffset: Int32; zoffset: Int32; width: Int32; height: Int32; depth: Int32)>(z_InvalidateTexSubImage_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure InvalidateTexSubImage(texture: TextureName; level: Int32; xoffset: Int32; yoffset: Int32; zoffset: Int32; width: Int32; height: Int32; depth: Int32);
    begin
      z_InvalidateTexSubImage_ovr_0(texture, level, xoffset, yoffset, zoffset, width, height, depth);
    end;
    
    public z_InvalidateTexImage_adr := GetFuncAdr('glInvalidateTexImage');
    public z_InvalidateTexImage_ovr_0 := GetFuncOrNil&<procedure(texture: TextureName; level: Int32)>(z_InvalidateTexImage_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure InvalidateTexImage(texture: TextureName; level: Int32);
    begin
      z_InvalidateTexImage_ovr_0(texture, level);
    end;
    
    public z_InvalidateBufferSubData_adr := GetFuncAdr('glInvalidateBufferSubData');
    public z_InvalidateBufferSubData_ovr_0 := GetFuncOrNil&<procedure(buffer: BufferName; offset: IntPtr; length: IntPtr)>(z_InvalidateBufferSubData_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure InvalidateBufferSubData(buffer: BufferName; offset: IntPtr; length: IntPtr);
    begin
      z_InvalidateBufferSubData_ovr_0(buffer, offset, length);
    end;
    
    public z_InvalidateBufferData_adr := GetFuncAdr('glInvalidateBufferData');
    public z_InvalidateBufferData_ovr_0 := GetFuncOrNil&<procedure(buffer: BufferName)>(z_InvalidateBufferData_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure InvalidateBufferData(buffer: BufferName);
    begin
      z_InvalidateBufferData_ovr_0(buffer);
    end;
    
    public z_InvalidateFramebuffer_adr := GetFuncAdr('glInvalidateFramebuffer');
    public z_InvalidateFramebuffer_ovr_0 := GetFuncOrNil&<procedure(target: FramebufferTarget; numAttachments: Int32; var attachments: InvalidateFramebufferAttachment)>(z_InvalidateFramebuffer_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure InvalidateFramebuffer(target: FramebufferTarget; numAttachments: Int32; attachments: array of InvalidateFramebufferAttachment);
    begin
      z_InvalidateFramebuffer_ovr_0(target, numAttachments, attachments[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure InvalidateFramebuffer(target: FramebufferTarget; numAttachments: Int32; var attachments: InvalidateFramebufferAttachment);
    begin
      z_InvalidateFramebuffer_ovr_0(target, numAttachments, attachments);
    end;
    public z_InvalidateFramebuffer_ovr_2 := GetFuncOrNil&<procedure(target: FramebufferTarget; numAttachments: Int32; attachments: IntPtr)>(z_InvalidateFramebuffer_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure InvalidateFramebuffer(target: FramebufferTarget; numAttachments: Int32; attachments: IntPtr);
    begin
      z_InvalidateFramebuffer_ovr_2(target, numAttachments, attachments);
    end;
    
    public z_InvalidateSubFramebuffer_adr := GetFuncAdr('glInvalidateSubFramebuffer');
    public z_InvalidateSubFramebuffer_ovr_0 := GetFuncOrNil&<procedure(target: FramebufferTarget; numAttachments: Int32; var attachments: InvalidateFramebufferAttachment; x: Int32; y: Int32; width: Int32; height: Int32)>(z_InvalidateSubFramebuffer_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure InvalidateSubFramebuffer(target: FramebufferTarget; numAttachments: Int32; attachments: array of InvalidateFramebufferAttachment; x: Int32; y: Int32; width: Int32; height: Int32);
    begin
      z_InvalidateSubFramebuffer_ovr_0(target, numAttachments, attachments[0], x, y, width, height);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure InvalidateSubFramebuffer(target: FramebufferTarget; numAttachments: Int32; var attachments: InvalidateFramebufferAttachment; x: Int32; y: Int32; width: Int32; height: Int32);
    begin
      z_InvalidateSubFramebuffer_ovr_0(target, numAttachments, attachments, x, y, width, height);
    end;
    public z_InvalidateSubFramebuffer_ovr_2 := GetFuncOrNil&<procedure(target: FramebufferTarget; numAttachments: Int32; attachments: IntPtr; x: Int32; y: Int32; width: Int32; height: Int32)>(z_InvalidateSubFramebuffer_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure InvalidateSubFramebuffer(target: FramebufferTarget; numAttachments: Int32; attachments: IntPtr; x: Int32; y: Int32; width: Int32; height: Int32);
    begin
      z_InvalidateSubFramebuffer_ovr_2(target, numAttachments, attachments, x, y, width, height);
    end;
    
  end;
  
  glMapBufferRangeARB = sealed class
    public static function GetFuncAdr([MarshalAs(UnmanagedType.LPStr)] lpszProc: string): IntPtr;
    external 'opengl32.dll' name 'wglGetProcAddress';
    public static function GetFuncOrNil<T>(fadr: IntPtr) :=
    fadr=IntPtr.Zero ? default(T) :
    Marshal.GetDelegateForFunctionPointer&<T>(fadr);
    
    public z_MapBufferRange_adr := GetFuncAdr('glMapBufferRange');
    public z_MapBufferRange_ovr_0 := GetFuncOrNil&<function(target: BufferTargetARB; offset: IntPtr; length: IntPtr; access: MapBufferAccessMask): IntPtr>(z_MapBufferRange_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function MapBufferRange(target: BufferTargetARB; offset: IntPtr; length: IntPtr; access: MapBufferAccessMask): IntPtr;
    begin
      Result := z_MapBufferRange_ovr_0(target, offset, length, access);
    end;
    
    public z_FlushMappedBufferRange_adr := GetFuncAdr('glFlushMappedBufferRange');
    public z_FlushMappedBufferRange_ovr_0 := GetFuncOrNil&<procedure(target: BufferTargetARB; offset: IntPtr; length: IntPtr)>(z_FlushMappedBufferRange_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure FlushMappedBufferRange(target: BufferTargetARB; offset: IntPtr; length: IntPtr);
    begin
      z_FlushMappedBufferRange_ovr_0(target, offset, length);
    end;
    
  end;
  
  glMatrixPaletteARB = sealed class
    public static function GetFuncAdr([MarshalAs(UnmanagedType.LPStr)] lpszProc: string): IntPtr;
    external 'opengl32.dll' name 'wglGetProcAddress';
    public static function GetFuncOrNil<T>(fadr: IntPtr) :=
    fadr=IntPtr.Zero ? default(T) :
    Marshal.GetDelegateForFunctionPointer&<T>(fadr);
    
    public z_CurrentPaletteMatrixARB_adr := GetFuncAdr('glCurrentPaletteMatrixARB');
    public z_CurrentPaletteMatrixARB_ovr_0 := GetFuncOrNil&<procedure(index: Int32)>(z_CurrentPaletteMatrixARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure CurrentPaletteMatrixARB(index: Int32);
    begin
      z_CurrentPaletteMatrixARB_ovr_0(index);
    end;
    
    public z_MatrixIndexubvARB_adr := GetFuncAdr('glMatrixIndexubvARB');
    public z_MatrixIndexubvARB_ovr_0 := GetFuncOrNil&<procedure(size: Int32; var indices: Byte)>(z_MatrixIndexubvARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MatrixIndexubvARB(size: Int32; indices: array of Byte);
    begin
      z_MatrixIndexubvARB_ovr_0(size, indices[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MatrixIndexubvARB(size: Int32; var indices: Byte);
    begin
      z_MatrixIndexubvARB_ovr_0(size, indices);
    end;
    public z_MatrixIndexubvARB_ovr_2 := GetFuncOrNil&<procedure(size: Int32; indices: IntPtr)>(z_MatrixIndexubvARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MatrixIndexubvARB(size: Int32; indices: IntPtr);
    begin
      z_MatrixIndexubvARB_ovr_2(size, indices);
    end;
    
    public z_MatrixIndexusvARB_adr := GetFuncAdr('glMatrixIndexusvARB');
    public z_MatrixIndexusvARB_ovr_0 := GetFuncOrNil&<procedure(size: Int32; var indices: UInt16)>(z_MatrixIndexusvARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MatrixIndexusvARB(size: Int32; indices: array of UInt16);
    begin
      z_MatrixIndexusvARB_ovr_0(size, indices[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MatrixIndexusvARB(size: Int32; var indices: UInt16);
    begin
      z_MatrixIndexusvARB_ovr_0(size, indices);
    end;
    public z_MatrixIndexusvARB_ovr_2 := GetFuncOrNil&<procedure(size: Int32; indices: IntPtr)>(z_MatrixIndexusvARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MatrixIndexusvARB(size: Int32; indices: IntPtr);
    begin
      z_MatrixIndexusvARB_ovr_2(size, indices);
    end;
    
    public z_MatrixIndexuivARB_adr := GetFuncAdr('glMatrixIndexuivARB');
    public z_MatrixIndexuivARB_ovr_0 := GetFuncOrNil&<procedure(size: Int32; var indices: UInt32)>(z_MatrixIndexuivARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MatrixIndexuivARB(size: Int32; indices: array of UInt32);
    begin
      z_MatrixIndexuivARB_ovr_0(size, indices[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MatrixIndexuivARB(size: Int32; var indices: UInt32);
    begin
      z_MatrixIndexuivARB_ovr_0(size, indices);
    end;
    public z_MatrixIndexuivARB_ovr_2 := GetFuncOrNil&<procedure(size: Int32; indices: IntPtr)>(z_MatrixIndexuivARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MatrixIndexuivARB(size: Int32; indices: IntPtr);
    begin
      z_MatrixIndexuivARB_ovr_2(size, indices);
    end;
    
    public z_MatrixIndexPointerARB_adr := GetFuncAdr('glMatrixIndexPointerARB');
    public z_MatrixIndexPointerARB_ovr_0 := GetFuncOrNil&<procedure(size: Int32; &type: MatrixIndexPointerTypeARB; stride: Int32; pointer: IntPtr)>(z_MatrixIndexPointerARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MatrixIndexPointerARB(size: Int32; &type: MatrixIndexPointerTypeARB; stride: Int32; pointer: IntPtr);
    begin
      z_MatrixIndexPointerARB_ovr_0(size, &type, stride, pointer);
    end;
    
  end;
  
  glMultiBindARB = sealed class
    public static function GetFuncAdr([MarshalAs(UnmanagedType.LPStr)] lpszProc: string): IntPtr;
    external 'opengl32.dll' name 'wglGetProcAddress';
    public static function GetFuncOrNil<T>(fadr: IntPtr) :=
    fadr=IntPtr.Zero ? default(T) :
    Marshal.GetDelegateForFunctionPointer&<T>(fadr);
    
    public z_BindBuffersBase_adr := GetFuncAdr('glBindBuffersBase');
    public z_BindBuffersBase_ovr_0 := GetFuncOrNil&<procedure(target: BufferTargetARB; first: UInt32; count: Int32; var buffers: UInt32)>(z_BindBuffersBase_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure BindBuffersBase(target: BufferTargetARB; first: UInt32; count: Int32; buffers: array of UInt32);
    begin
      z_BindBuffersBase_ovr_0(target, first, count, buffers[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure BindBuffersBase(target: BufferTargetARB; first: UInt32; count: Int32; var buffers: UInt32);
    begin
      z_BindBuffersBase_ovr_0(target, first, count, buffers);
    end;
    public z_BindBuffersBase_ovr_2 := GetFuncOrNil&<procedure(target: BufferTargetARB; first: UInt32; count: Int32; buffers: IntPtr)>(z_BindBuffersBase_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure BindBuffersBase(target: BufferTargetARB; first: UInt32; count: Int32; buffers: IntPtr);
    begin
      z_BindBuffersBase_ovr_2(target, first, count, buffers);
    end;
    
    public z_BindBuffersRange_adr := GetFuncAdr('glBindBuffersRange');
    public z_BindBuffersRange_ovr_0 := GetFuncOrNil&<procedure(target: BufferTargetARB; first: UInt32; count: Int32; var buffers: UInt32; var offsets: IntPtr; var sizes: IntPtr)>(z_BindBuffersRange_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure BindBuffersRange(target: BufferTargetARB; first: UInt32; count: Int32; buffers: array of UInt32; offsets: array of IntPtr; sizes: array of IntPtr);
    begin
      z_BindBuffersRange_ovr_0(target, first, count, buffers[0], offsets[0], sizes[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure BindBuffersRange(target: BufferTargetARB; first: UInt32; count: Int32; buffers: array of UInt32; offsets: array of IntPtr; var sizes: IntPtr);
    begin
      z_BindBuffersRange_ovr_0(target, first, count, buffers[0], offsets[0], sizes);
    end;
    public z_BindBuffersRange_ovr_2 := GetFuncOrNil&<procedure(target: BufferTargetARB; first: UInt32; count: Int32; var buffers: UInt32; var offsets: IntPtr; sizes: pointer)>(z_BindBuffersRange_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure BindBuffersRange(target: BufferTargetARB; first: UInt32; count: Int32; buffers: array of UInt32; offsets: array of IntPtr; sizes: pointer);
    begin
      z_BindBuffersRange_ovr_2(target, first, count, buffers[0], offsets[0], sizes);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure BindBuffersRange(target: BufferTargetARB; first: UInt32; count: Int32; buffers: array of UInt32; var offsets: IntPtr; sizes: array of IntPtr);
    begin
      z_BindBuffersRange_ovr_0(target, first, count, buffers[0], offsets, sizes[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure BindBuffersRange(target: BufferTargetARB; first: UInt32; count: Int32; buffers: array of UInt32; var offsets: IntPtr; var sizes: IntPtr);
    begin
      z_BindBuffersRange_ovr_0(target, first, count, buffers[0], offsets, sizes);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure BindBuffersRange(target: BufferTargetARB; first: UInt32; count: Int32; buffers: array of UInt32; var offsets: IntPtr; sizes: pointer);
    begin
      z_BindBuffersRange_ovr_2(target, first, count, buffers[0], offsets, sizes);
    end;
    public z_BindBuffersRange_ovr_6 := GetFuncOrNil&<procedure(target: BufferTargetARB; first: UInt32; count: Int32; var buffers: UInt32; offsets: pointer; var sizes: IntPtr)>(z_BindBuffersRange_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure BindBuffersRange(target: BufferTargetARB; first: UInt32; count: Int32; buffers: array of UInt32; offsets: pointer; sizes: array of IntPtr);
    begin
      z_BindBuffersRange_ovr_6(target, first, count, buffers[0], offsets, sizes[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure BindBuffersRange(target: BufferTargetARB; first: UInt32; count: Int32; buffers: array of UInt32; offsets: pointer; var sizes: IntPtr);
    begin
      z_BindBuffersRange_ovr_6(target, first, count, buffers[0], offsets, sizes);
    end;
    public z_BindBuffersRange_ovr_8 := GetFuncOrNil&<procedure(target: BufferTargetARB; first: UInt32; count: Int32; var buffers: UInt32; offsets: pointer; sizes: pointer)>(z_BindBuffersRange_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure BindBuffersRange(target: BufferTargetARB; first: UInt32; count: Int32; buffers: array of UInt32; offsets: pointer; sizes: pointer);
    begin
      z_BindBuffersRange_ovr_8(target, first, count, buffers[0], offsets, sizes);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure BindBuffersRange(target: BufferTargetARB; first: UInt32; count: Int32; var buffers: UInt32; offsets: array of IntPtr; sizes: array of IntPtr);
    begin
      z_BindBuffersRange_ovr_0(target, first, count, buffers, offsets[0], sizes[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure BindBuffersRange(target: BufferTargetARB; first: UInt32; count: Int32; var buffers: UInt32; offsets: array of IntPtr; var sizes: IntPtr);
    begin
      z_BindBuffersRange_ovr_0(target, first, count, buffers, offsets[0], sizes);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure BindBuffersRange(target: BufferTargetARB; first: UInt32; count: Int32; var buffers: UInt32; offsets: array of IntPtr; sizes: pointer);
    begin
      z_BindBuffersRange_ovr_2(target, first, count, buffers, offsets[0], sizes);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure BindBuffersRange(target: BufferTargetARB; first: UInt32; count: Int32; var buffers: UInt32; var offsets: IntPtr; sizes: array of IntPtr);
    begin
      z_BindBuffersRange_ovr_0(target, first, count, buffers, offsets, sizes[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure BindBuffersRange(target: BufferTargetARB; first: UInt32; count: Int32; var buffers: UInt32; var offsets: IntPtr; var sizes: IntPtr);
    begin
      z_BindBuffersRange_ovr_0(target, first, count, buffers, offsets, sizes);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure BindBuffersRange(target: BufferTargetARB; first: UInt32; count: Int32; var buffers: UInt32; var offsets: IntPtr; sizes: pointer);
    begin
      z_BindBuffersRange_ovr_2(target, first, count, buffers, offsets, sizes);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure BindBuffersRange(target: BufferTargetARB; first: UInt32; count: Int32; var buffers: UInt32; offsets: pointer; sizes: array of IntPtr);
    begin
      z_BindBuffersRange_ovr_6(target, first, count, buffers, offsets, sizes[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure BindBuffersRange(target: BufferTargetARB; first: UInt32; count: Int32; var buffers: UInt32; offsets: pointer; var sizes: IntPtr);
    begin
      z_BindBuffersRange_ovr_6(target, first, count, buffers, offsets, sizes);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure BindBuffersRange(target: BufferTargetARB; first: UInt32; count: Int32; var buffers: UInt32; offsets: pointer; sizes: pointer);
    begin
      z_BindBuffersRange_ovr_8(target, first, count, buffers, offsets, sizes);
    end;
    public z_BindBuffersRange_ovr_18 := GetFuncOrNil&<procedure(target: BufferTargetARB; first: UInt32; count: Int32; buffers: IntPtr; var offsets: IntPtr; var sizes: IntPtr)>(z_BindBuffersRange_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure BindBuffersRange(target: BufferTargetARB; first: UInt32; count: Int32; buffers: IntPtr; offsets: array of IntPtr; sizes: array of IntPtr);
    begin
      z_BindBuffersRange_ovr_18(target, first, count, buffers, offsets[0], sizes[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure BindBuffersRange(target: BufferTargetARB; first: UInt32; count: Int32; buffers: IntPtr; offsets: array of IntPtr; var sizes: IntPtr);
    begin
      z_BindBuffersRange_ovr_18(target, first, count, buffers, offsets[0], sizes);
    end;
    public z_BindBuffersRange_ovr_20 := GetFuncOrNil&<procedure(target: BufferTargetARB; first: UInt32; count: Int32; buffers: IntPtr; var offsets: IntPtr; sizes: pointer)>(z_BindBuffersRange_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure BindBuffersRange(target: BufferTargetARB; first: UInt32; count: Int32; buffers: IntPtr; offsets: array of IntPtr; sizes: pointer);
    begin
      z_BindBuffersRange_ovr_20(target, first, count, buffers, offsets[0], sizes);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure BindBuffersRange(target: BufferTargetARB; first: UInt32; count: Int32; buffers: IntPtr; var offsets: IntPtr; sizes: array of IntPtr);
    begin
      z_BindBuffersRange_ovr_18(target, first, count, buffers, offsets, sizes[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure BindBuffersRange(target: BufferTargetARB; first: UInt32; count: Int32; buffers: IntPtr; var offsets: IntPtr; var sizes: IntPtr);
    begin
      z_BindBuffersRange_ovr_18(target, first, count, buffers, offsets, sizes);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure BindBuffersRange(target: BufferTargetARB; first: UInt32; count: Int32; buffers: IntPtr; var offsets: IntPtr; sizes: pointer);
    begin
      z_BindBuffersRange_ovr_20(target, first, count, buffers, offsets, sizes);
    end;
    public z_BindBuffersRange_ovr_24 := GetFuncOrNil&<procedure(target: BufferTargetARB; first: UInt32; count: Int32; buffers: IntPtr; offsets: pointer; var sizes: IntPtr)>(z_BindBuffersRange_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure BindBuffersRange(target: BufferTargetARB; first: UInt32; count: Int32; buffers: IntPtr; offsets: pointer; sizes: array of IntPtr);
    begin
      z_BindBuffersRange_ovr_24(target, first, count, buffers, offsets, sizes[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure BindBuffersRange(target: BufferTargetARB; first: UInt32; count: Int32; buffers: IntPtr; offsets: pointer; var sizes: IntPtr);
    begin
      z_BindBuffersRange_ovr_24(target, first, count, buffers, offsets, sizes);
    end;
    public z_BindBuffersRange_ovr_26 := GetFuncOrNil&<procedure(target: BufferTargetARB; first: UInt32; count: Int32; buffers: IntPtr; offsets: pointer; sizes: pointer)>(z_BindBuffersRange_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure BindBuffersRange(target: BufferTargetARB; first: UInt32; count: Int32; buffers: IntPtr; offsets: pointer; sizes: pointer);
    begin
      z_BindBuffersRange_ovr_26(target, first, count, buffers, offsets, sizes);
    end;
    
    public z_BindTextures_adr := GetFuncAdr('glBindTextures');
    public z_BindTextures_ovr_0 := GetFuncOrNil&<procedure(first: UInt32; count: Int32; var textures: UInt32)>(z_BindTextures_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure BindTextures(first: UInt32; count: Int32; textures: array of UInt32);
    begin
      z_BindTextures_ovr_0(first, count, textures[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure BindTextures(first: UInt32; count: Int32; var textures: UInt32);
    begin
      z_BindTextures_ovr_0(first, count, textures);
    end;
    public z_BindTextures_ovr_2 := GetFuncOrNil&<procedure(first: UInt32; count: Int32; textures: IntPtr)>(z_BindTextures_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure BindTextures(first: UInt32; count: Int32; textures: IntPtr);
    begin
      z_BindTextures_ovr_2(first, count, textures);
    end;
    
    public z_BindSamplers_adr := GetFuncAdr('glBindSamplers');
    public z_BindSamplers_ovr_0 := GetFuncOrNil&<procedure(first: UInt32; count: Int32; var samplers: UInt32)>(z_BindSamplers_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure BindSamplers(first: UInt32; count: Int32; samplers: array of UInt32);
    begin
      z_BindSamplers_ovr_0(first, count, samplers[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure BindSamplers(first: UInt32; count: Int32; var samplers: UInt32);
    begin
      z_BindSamplers_ovr_0(first, count, samplers);
    end;
    public z_BindSamplers_ovr_2 := GetFuncOrNil&<procedure(first: UInt32; count: Int32; samplers: IntPtr)>(z_BindSamplers_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure BindSamplers(first: UInt32; count: Int32; samplers: IntPtr);
    begin
      z_BindSamplers_ovr_2(first, count, samplers);
    end;
    
    public z_BindImageTextures_adr := GetFuncAdr('glBindImageTextures');
    public z_BindImageTextures_ovr_0 := GetFuncOrNil&<procedure(first: UInt32; count: Int32; var textures: UInt32)>(z_BindImageTextures_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure BindImageTextures(first: UInt32; count: Int32; textures: array of UInt32);
    begin
      z_BindImageTextures_ovr_0(first, count, textures[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure BindImageTextures(first: UInt32; count: Int32; var textures: UInt32);
    begin
      z_BindImageTextures_ovr_0(first, count, textures);
    end;
    public z_BindImageTextures_ovr_2 := GetFuncOrNil&<procedure(first: UInt32; count: Int32; textures: IntPtr)>(z_BindImageTextures_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure BindImageTextures(first: UInt32; count: Int32; textures: IntPtr);
    begin
      z_BindImageTextures_ovr_2(first, count, textures);
    end;
    
    public z_BindVertexBuffers_adr := GetFuncAdr('glBindVertexBuffers');
    public z_BindVertexBuffers_ovr_0 := GetFuncOrNil&<procedure(first: UInt32; count: Int32; var buffers: UInt32; var offsets: IntPtr; var strides: Int32)>(z_BindVertexBuffers_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure BindVertexBuffers(first: UInt32; count: Int32; buffers: array of UInt32; offsets: array of IntPtr; strides: array of Int32);
    begin
      z_BindVertexBuffers_ovr_0(first, count, buffers[0], offsets[0], strides[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure BindVertexBuffers(first: UInt32; count: Int32; buffers: array of UInt32; offsets: array of IntPtr; var strides: Int32);
    begin
      z_BindVertexBuffers_ovr_0(first, count, buffers[0], offsets[0], strides);
    end;
    public z_BindVertexBuffers_ovr_2 := GetFuncOrNil&<procedure(first: UInt32; count: Int32; var buffers: UInt32; var offsets: IntPtr; strides: IntPtr)>(z_BindVertexBuffers_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure BindVertexBuffers(first: UInt32; count: Int32; buffers: array of UInt32; offsets: array of IntPtr; strides: IntPtr);
    begin
      z_BindVertexBuffers_ovr_2(first, count, buffers[0], offsets[0], strides);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure BindVertexBuffers(first: UInt32; count: Int32; buffers: array of UInt32; var offsets: IntPtr; strides: array of Int32);
    begin
      z_BindVertexBuffers_ovr_0(first, count, buffers[0], offsets, strides[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure BindVertexBuffers(first: UInt32; count: Int32; buffers: array of UInt32; var offsets: IntPtr; var strides: Int32);
    begin
      z_BindVertexBuffers_ovr_0(first, count, buffers[0], offsets, strides);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure BindVertexBuffers(first: UInt32; count: Int32; buffers: array of UInt32; var offsets: IntPtr; strides: IntPtr);
    begin
      z_BindVertexBuffers_ovr_2(first, count, buffers[0], offsets, strides);
    end;
    public z_BindVertexBuffers_ovr_6 := GetFuncOrNil&<procedure(first: UInt32; count: Int32; var buffers: UInt32; offsets: pointer; var strides: Int32)>(z_BindVertexBuffers_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure BindVertexBuffers(first: UInt32; count: Int32; buffers: array of UInt32; offsets: pointer; strides: array of Int32);
    begin
      z_BindVertexBuffers_ovr_6(first, count, buffers[0], offsets, strides[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure BindVertexBuffers(first: UInt32; count: Int32; buffers: array of UInt32; offsets: pointer; var strides: Int32);
    begin
      z_BindVertexBuffers_ovr_6(first, count, buffers[0], offsets, strides);
    end;
    public z_BindVertexBuffers_ovr_8 := GetFuncOrNil&<procedure(first: UInt32; count: Int32; var buffers: UInt32; offsets: pointer; strides: IntPtr)>(z_BindVertexBuffers_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure BindVertexBuffers(first: UInt32; count: Int32; buffers: array of UInt32; offsets: pointer; strides: IntPtr);
    begin
      z_BindVertexBuffers_ovr_8(first, count, buffers[0], offsets, strides);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure BindVertexBuffers(first: UInt32; count: Int32; var buffers: UInt32; offsets: array of IntPtr; strides: array of Int32);
    begin
      z_BindVertexBuffers_ovr_0(first, count, buffers, offsets[0], strides[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure BindVertexBuffers(first: UInt32; count: Int32; var buffers: UInt32; offsets: array of IntPtr; var strides: Int32);
    begin
      z_BindVertexBuffers_ovr_0(first, count, buffers, offsets[0], strides);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure BindVertexBuffers(first: UInt32; count: Int32; var buffers: UInt32; offsets: array of IntPtr; strides: IntPtr);
    begin
      z_BindVertexBuffers_ovr_2(first, count, buffers, offsets[0], strides);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure BindVertexBuffers(first: UInt32; count: Int32; var buffers: UInt32; var offsets: IntPtr; strides: array of Int32);
    begin
      z_BindVertexBuffers_ovr_0(first, count, buffers, offsets, strides[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure BindVertexBuffers(first: UInt32; count: Int32; var buffers: UInt32; var offsets: IntPtr; var strides: Int32);
    begin
      z_BindVertexBuffers_ovr_0(first, count, buffers, offsets, strides);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure BindVertexBuffers(first: UInt32; count: Int32; var buffers: UInt32; var offsets: IntPtr; strides: IntPtr);
    begin
      z_BindVertexBuffers_ovr_2(first, count, buffers, offsets, strides);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure BindVertexBuffers(first: UInt32; count: Int32; var buffers: UInt32; offsets: pointer; strides: array of Int32);
    begin
      z_BindVertexBuffers_ovr_6(first, count, buffers, offsets, strides[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure BindVertexBuffers(first: UInt32; count: Int32; var buffers: UInt32; offsets: pointer; var strides: Int32);
    begin
      z_BindVertexBuffers_ovr_6(first, count, buffers, offsets, strides);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure BindVertexBuffers(first: UInt32; count: Int32; var buffers: UInt32; offsets: pointer; strides: IntPtr);
    begin
      z_BindVertexBuffers_ovr_8(first, count, buffers, offsets, strides);
    end;
    public z_BindVertexBuffers_ovr_18 := GetFuncOrNil&<procedure(first: UInt32; count: Int32; buffers: IntPtr; var offsets: IntPtr; var strides: Int32)>(z_BindVertexBuffers_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure BindVertexBuffers(first: UInt32; count: Int32; buffers: IntPtr; offsets: array of IntPtr; strides: array of Int32);
    begin
      z_BindVertexBuffers_ovr_18(first, count, buffers, offsets[0], strides[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure BindVertexBuffers(first: UInt32; count: Int32; buffers: IntPtr; offsets: array of IntPtr; var strides: Int32);
    begin
      z_BindVertexBuffers_ovr_18(first, count, buffers, offsets[0], strides);
    end;
    public z_BindVertexBuffers_ovr_20 := GetFuncOrNil&<procedure(first: UInt32; count: Int32; buffers: IntPtr; var offsets: IntPtr; strides: IntPtr)>(z_BindVertexBuffers_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure BindVertexBuffers(first: UInt32; count: Int32; buffers: IntPtr; offsets: array of IntPtr; strides: IntPtr);
    begin
      z_BindVertexBuffers_ovr_20(first, count, buffers, offsets[0], strides);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure BindVertexBuffers(first: UInt32; count: Int32; buffers: IntPtr; var offsets: IntPtr; strides: array of Int32);
    begin
      z_BindVertexBuffers_ovr_18(first, count, buffers, offsets, strides[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure BindVertexBuffers(first: UInt32; count: Int32; buffers: IntPtr; var offsets: IntPtr; var strides: Int32);
    begin
      z_BindVertexBuffers_ovr_18(first, count, buffers, offsets, strides);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure BindVertexBuffers(first: UInt32; count: Int32; buffers: IntPtr; var offsets: IntPtr; strides: IntPtr);
    begin
      z_BindVertexBuffers_ovr_20(first, count, buffers, offsets, strides);
    end;
    public z_BindVertexBuffers_ovr_24 := GetFuncOrNil&<procedure(first: UInt32; count: Int32; buffers: IntPtr; offsets: pointer; var strides: Int32)>(z_BindVertexBuffers_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure BindVertexBuffers(first: UInt32; count: Int32; buffers: IntPtr; offsets: pointer; strides: array of Int32);
    begin
      z_BindVertexBuffers_ovr_24(first, count, buffers, offsets, strides[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure BindVertexBuffers(first: UInt32; count: Int32; buffers: IntPtr; offsets: pointer; var strides: Int32);
    begin
      z_BindVertexBuffers_ovr_24(first, count, buffers, offsets, strides);
    end;
    public z_BindVertexBuffers_ovr_26 := GetFuncOrNil&<procedure(first: UInt32; count: Int32; buffers: IntPtr; offsets: pointer; strides: IntPtr)>(z_BindVertexBuffers_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure BindVertexBuffers(first: UInt32; count: Int32; buffers: IntPtr; offsets: pointer; strides: IntPtr);
    begin
      z_BindVertexBuffers_ovr_26(first, count, buffers, offsets, strides);
    end;
    
  end;
  
  glMultiDrawIndirectARB = sealed class
    public static function GetFuncAdr([MarshalAs(UnmanagedType.LPStr)] lpszProc: string): IntPtr;
    external 'opengl32.dll' name 'wglGetProcAddress';
    public static function GetFuncOrNil<T>(fadr: IntPtr) :=
    fadr=IntPtr.Zero ? default(T) :
    Marshal.GetDelegateForFunctionPointer&<T>(fadr);
    
    public z_MultiDrawArraysIndirect_adr := GetFuncAdr('glMultiDrawArraysIndirect');
    public z_MultiDrawArraysIndirect_ovr_0 := GetFuncOrNil&<procedure(mode: PrimitiveType; indirect: IntPtr; drawcount: Int32; stride: Int32)>(z_MultiDrawArraysIndirect_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiDrawArraysIndirect(mode: PrimitiveType; indirect: IntPtr; drawcount: Int32; stride: Int32);
    begin
      z_MultiDrawArraysIndirect_ovr_0(mode, indirect, drawcount, stride);
    end;
    
    public z_MultiDrawElementsIndirect_adr := GetFuncAdr('glMultiDrawElementsIndirect');
    public z_MultiDrawElementsIndirect_ovr_0 := GetFuncOrNil&<procedure(mode: PrimitiveType; &type: DrawElementsType; indirect: IntPtr; drawcount: Int32; stride: Int32)>(z_MultiDrawElementsIndirect_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiDrawElementsIndirect(mode: PrimitiveType; &type: DrawElementsType; indirect: IntPtr; drawcount: Int32; stride: Int32);
    begin
      z_MultiDrawElementsIndirect_ovr_0(mode, &type, indirect, drawcount, stride);
    end;
    
  end;
  
  glMultisampleARB = sealed class
    public static function GetFuncAdr([MarshalAs(UnmanagedType.LPStr)] lpszProc: string): IntPtr;
    external 'opengl32.dll' name 'wglGetProcAddress';
    public static function GetFuncOrNil<T>(fadr: IntPtr) :=
    fadr=IntPtr.Zero ? default(T) :
    Marshal.GetDelegateForFunctionPointer&<T>(fadr);
    
    public z_SampleCoverageARB_adr := GetFuncAdr('glSampleCoverageARB');
    public z_SampleCoverageARB_ovr_0 := GetFuncOrNil&<procedure(value: single; invert: boolean)>(z_SampleCoverageARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure SampleCoverageARB(value: single; invert: boolean);
    begin
      z_SampleCoverageARB_ovr_0(value, invert);
    end;
    
  end;
  
  glMultitextureARB = sealed class
    public static function GetFuncAdr([MarshalAs(UnmanagedType.LPStr)] lpszProc: string): IntPtr;
    external 'opengl32.dll' name 'wglGetProcAddress';
    public static function GetFuncOrNil<T>(fadr: IntPtr) :=
    fadr=IntPtr.Zero ? default(T) :
    Marshal.GetDelegateForFunctionPointer&<T>(fadr);
    
    public z_ActiveTextureARB_adr := GetFuncAdr('glActiveTextureARB');
    public z_ActiveTextureARB_ovr_0 := GetFuncOrNil&<procedure(texture: TextureUnit)>(z_ActiveTextureARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ActiveTextureARB(texture: TextureUnit);
    begin
      z_ActiveTextureARB_ovr_0(texture);
    end;
    
    public z_ClientActiveTextureARB_adr := GetFuncAdr('glClientActiveTextureARB');
    public z_ClientActiveTextureARB_ovr_0 := GetFuncOrNil&<procedure(texture: TextureUnit)>(z_ClientActiveTextureARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ClientActiveTextureARB(texture: TextureUnit);
    begin
      z_ClientActiveTextureARB_ovr_0(texture);
    end;
    
    public z_MultiTexCoord1dARB_adr := GetFuncAdr('glMultiTexCoord1dARB');
    public z_MultiTexCoord1dARB_ovr_0 := GetFuncOrNil&<procedure(target: TextureUnit; s: real)>(z_MultiTexCoord1dARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiTexCoord1dARB(target: TextureUnit; s: real);
    begin
      z_MultiTexCoord1dARB_ovr_0(target, s);
    end;
    
    public z_MultiTexCoord1dvARB_adr := GetFuncAdr('glMultiTexCoord1dvARB');
    public z_MultiTexCoord1dvARB_ovr_0 := GetFuncOrNil&<procedure(target: TextureUnit; var v: real)>(z_MultiTexCoord1dvARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiTexCoord1dvARB(target: TextureUnit; v: array of real);
    begin
      z_MultiTexCoord1dvARB_ovr_0(target, v[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiTexCoord1dvARB(target: TextureUnit; var v: real);
    begin
      z_MultiTexCoord1dvARB_ovr_0(target, v);
    end;
    public z_MultiTexCoord1dvARB_ovr_2 := GetFuncOrNil&<procedure(target: TextureUnit; v: IntPtr)>(z_MultiTexCoord1dvARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiTexCoord1dvARB(target: TextureUnit; v: IntPtr);
    begin
      z_MultiTexCoord1dvARB_ovr_2(target, v);
    end;
    
    public z_MultiTexCoord1fARB_adr := GetFuncAdr('glMultiTexCoord1fARB');
    public z_MultiTexCoord1fARB_ovr_0 := GetFuncOrNil&<procedure(target: TextureUnit; s: single)>(z_MultiTexCoord1fARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiTexCoord1fARB(target: TextureUnit; s: single);
    begin
      z_MultiTexCoord1fARB_ovr_0(target, s);
    end;
    
    public z_MultiTexCoord1fvARB_adr := GetFuncAdr('glMultiTexCoord1fvARB');
    public z_MultiTexCoord1fvARB_ovr_0 := GetFuncOrNil&<procedure(target: TextureUnit; var v: single)>(z_MultiTexCoord1fvARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiTexCoord1fvARB(target: TextureUnit; v: array of single);
    begin
      z_MultiTexCoord1fvARB_ovr_0(target, v[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiTexCoord1fvARB(target: TextureUnit; var v: single);
    begin
      z_MultiTexCoord1fvARB_ovr_0(target, v);
    end;
    public z_MultiTexCoord1fvARB_ovr_2 := GetFuncOrNil&<procedure(target: TextureUnit; v: IntPtr)>(z_MultiTexCoord1fvARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiTexCoord1fvARB(target: TextureUnit; v: IntPtr);
    begin
      z_MultiTexCoord1fvARB_ovr_2(target, v);
    end;
    
    public z_MultiTexCoord1iARB_adr := GetFuncAdr('glMultiTexCoord1iARB');
    public z_MultiTexCoord1iARB_ovr_0 := GetFuncOrNil&<procedure(target: TextureUnit; s: Int32)>(z_MultiTexCoord1iARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiTexCoord1iARB(target: TextureUnit; s: Int32);
    begin
      z_MultiTexCoord1iARB_ovr_0(target, s);
    end;
    
    public z_MultiTexCoord1ivARB_adr := GetFuncAdr('glMultiTexCoord1ivARB');
    public z_MultiTexCoord1ivARB_ovr_0 := GetFuncOrNil&<procedure(target: TextureUnit; var v: Int32)>(z_MultiTexCoord1ivARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiTexCoord1ivARB(target: TextureUnit; v: array of Int32);
    begin
      z_MultiTexCoord1ivARB_ovr_0(target, v[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiTexCoord1ivARB(target: TextureUnit; var v: Int32);
    begin
      z_MultiTexCoord1ivARB_ovr_0(target, v);
    end;
    public z_MultiTexCoord1ivARB_ovr_2 := GetFuncOrNil&<procedure(target: TextureUnit; v: IntPtr)>(z_MultiTexCoord1ivARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiTexCoord1ivARB(target: TextureUnit; v: IntPtr);
    begin
      z_MultiTexCoord1ivARB_ovr_2(target, v);
    end;
    
    public z_MultiTexCoord1sARB_adr := GetFuncAdr('glMultiTexCoord1sARB');
    public z_MultiTexCoord1sARB_ovr_0 := GetFuncOrNil&<procedure(target: TextureUnit; s: Int16)>(z_MultiTexCoord1sARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiTexCoord1sARB(target: TextureUnit; s: Int16);
    begin
      z_MultiTexCoord1sARB_ovr_0(target, s);
    end;
    
    public z_MultiTexCoord1svARB_adr := GetFuncAdr('glMultiTexCoord1svARB');
    public z_MultiTexCoord1svARB_ovr_0 := GetFuncOrNil&<procedure(target: TextureUnit; var v: Int16)>(z_MultiTexCoord1svARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiTexCoord1svARB(target: TextureUnit; v: array of Int16);
    begin
      z_MultiTexCoord1svARB_ovr_0(target, v[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiTexCoord1svARB(target: TextureUnit; var v: Int16);
    begin
      z_MultiTexCoord1svARB_ovr_0(target, v);
    end;
    public z_MultiTexCoord1svARB_ovr_2 := GetFuncOrNil&<procedure(target: TextureUnit; v: IntPtr)>(z_MultiTexCoord1svARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiTexCoord1svARB(target: TextureUnit; v: IntPtr);
    begin
      z_MultiTexCoord1svARB_ovr_2(target, v);
    end;
    
    public z_MultiTexCoord2dARB_adr := GetFuncAdr('glMultiTexCoord2dARB');
    public z_MultiTexCoord2dARB_ovr_0 := GetFuncOrNil&<procedure(target: TextureUnit; s: real; t: real)>(z_MultiTexCoord2dARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiTexCoord2dARB(target: TextureUnit; s: real; t: real);
    begin
      z_MultiTexCoord2dARB_ovr_0(target, s, t);
    end;
    
    public z_MultiTexCoord2dvARB_adr := GetFuncAdr('glMultiTexCoord2dvARB');
    public z_MultiTexCoord2dvARB_ovr_0 := GetFuncOrNil&<procedure(target: TextureUnit; var v: real)>(z_MultiTexCoord2dvARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiTexCoord2dvARB(target: TextureUnit; v: array of real);
    begin
      z_MultiTexCoord2dvARB_ovr_0(target, v[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiTexCoord2dvARB(target: TextureUnit; var v: real);
    begin
      z_MultiTexCoord2dvARB_ovr_0(target, v);
    end;
    public z_MultiTexCoord2dvARB_ovr_2 := GetFuncOrNil&<procedure(target: TextureUnit; v: IntPtr)>(z_MultiTexCoord2dvARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiTexCoord2dvARB(target: TextureUnit; v: IntPtr);
    begin
      z_MultiTexCoord2dvARB_ovr_2(target, v);
    end;
    
    public z_MultiTexCoord2fARB_adr := GetFuncAdr('glMultiTexCoord2fARB');
    public z_MultiTexCoord2fARB_ovr_0 := GetFuncOrNil&<procedure(target: TextureUnit; s: single; t: single)>(z_MultiTexCoord2fARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiTexCoord2fARB(target: TextureUnit; s: single; t: single);
    begin
      z_MultiTexCoord2fARB_ovr_0(target, s, t);
    end;
    
    public z_MultiTexCoord2fvARB_adr := GetFuncAdr('glMultiTexCoord2fvARB');
    public z_MultiTexCoord2fvARB_ovr_0 := GetFuncOrNil&<procedure(target: TextureUnit; var v: single)>(z_MultiTexCoord2fvARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiTexCoord2fvARB(target: TextureUnit; v: array of single);
    begin
      z_MultiTexCoord2fvARB_ovr_0(target, v[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiTexCoord2fvARB(target: TextureUnit; var v: single);
    begin
      z_MultiTexCoord2fvARB_ovr_0(target, v);
    end;
    public z_MultiTexCoord2fvARB_ovr_2 := GetFuncOrNil&<procedure(target: TextureUnit; v: IntPtr)>(z_MultiTexCoord2fvARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiTexCoord2fvARB(target: TextureUnit; v: IntPtr);
    begin
      z_MultiTexCoord2fvARB_ovr_2(target, v);
    end;
    
    public z_MultiTexCoord2iARB_adr := GetFuncAdr('glMultiTexCoord2iARB');
    public z_MultiTexCoord2iARB_ovr_0 := GetFuncOrNil&<procedure(target: TextureUnit; s: Int32; t: Int32)>(z_MultiTexCoord2iARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiTexCoord2iARB(target: TextureUnit; s: Int32; t: Int32);
    begin
      z_MultiTexCoord2iARB_ovr_0(target, s, t);
    end;
    
    public z_MultiTexCoord2ivARB_adr := GetFuncAdr('glMultiTexCoord2ivARB');
    public z_MultiTexCoord2ivARB_ovr_0 := GetFuncOrNil&<procedure(target: TextureUnit; var v: Int32)>(z_MultiTexCoord2ivARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiTexCoord2ivARB(target: TextureUnit; v: array of Int32);
    begin
      z_MultiTexCoord2ivARB_ovr_0(target, v[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiTexCoord2ivARB(target: TextureUnit; var v: Int32);
    begin
      z_MultiTexCoord2ivARB_ovr_0(target, v);
    end;
    public z_MultiTexCoord2ivARB_ovr_2 := GetFuncOrNil&<procedure(target: TextureUnit; v: IntPtr)>(z_MultiTexCoord2ivARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiTexCoord2ivARB(target: TextureUnit; v: IntPtr);
    begin
      z_MultiTexCoord2ivARB_ovr_2(target, v);
    end;
    
    public z_MultiTexCoord2sARB_adr := GetFuncAdr('glMultiTexCoord2sARB');
    public z_MultiTexCoord2sARB_ovr_0 := GetFuncOrNil&<procedure(target: TextureUnit; s: Int16; t: Int16)>(z_MultiTexCoord2sARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiTexCoord2sARB(target: TextureUnit; s: Int16; t: Int16);
    begin
      z_MultiTexCoord2sARB_ovr_0(target, s, t);
    end;
    
    public z_MultiTexCoord2svARB_adr := GetFuncAdr('glMultiTexCoord2svARB');
    public z_MultiTexCoord2svARB_ovr_0 := GetFuncOrNil&<procedure(target: TextureUnit; var v: Int16)>(z_MultiTexCoord2svARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiTexCoord2svARB(target: TextureUnit; v: array of Int16);
    begin
      z_MultiTexCoord2svARB_ovr_0(target, v[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiTexCoord2svARB(target: TextureUnit; var v: Int16);
    begin
      z_MultiTexCoord2svARB_ovr_0(target, v);
    end;
    public z_MultiTexCoord2svARB_ovr_2 := GetFuncOrNil&<procedure(target: TextureUnit; v: IntPtr)>(z_MultiTexCoord2svARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiTexCoord2svARB(target: TextureUnit; v: IntPtr);
    begin
      z_MultiTexCoord2svARB_ovr_2(target, v);
    end;
    
    public z_MultiTexCoord3dARB_adr := GetFuncAdr('glMultiTexCoord3dARB');
    public z_MultiTexCoord3dARB_ovr_0 := GetFuncOrNil&<procedure(target: TextureUnit; s: real; t: real; r: real)>(z_MultiTexCoord3dARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiTexCoord3dARB(target: TextureUnit; s: real; t: real; r: real);
    begin
      z_MultiTexCoord3dARB_ovr_0(target, s, t, r);
    end;
    
    public z_MultiTexCoord3dvARB_adr := GetFuncAdr('glMultiTexCoord3dvARB');
    public z_MultiTexCoord3dvARB_ovr_0 := GetFuncOrNil&<procedure(target: TextureUnit; var v: real)>(z_MultiTexCoord3dvARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiTexCoord3dvARB(target: TextureUnit; v: array of real);
    begin
      z_MultiTexCoord3dvARB_ovr_0(target, v[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiTexCoord3dvARB(target: TextureUnit; var v: real);
    begin
      z_MultiTexCoord3dvARB_ovr_0(target, v);
    end;
    public z_MultiTexCoord3dvARB_ovr_2 := GetFuncOrNil&<procedure(target: TextureUnit; v: IntPtr)>(z_MultiTexCoord3dvARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiTexCoord3dvARB(target: TextureUnit; v: IntPtr);
    begin
      z_MultiTexCoord3dvARB_ovr_2(target, v);
    end;
    
    public z_MultiTexCoord3fARB_adr := GetFuncAdr('glMultiTexCoord3fARB');
    public z_MultiTexCoord3fARB_ovr_0 := GetFuncOrNil&<procedure(target: TextureUnit; s: single; t: single; r: single)>(z_MultiTexCoord3fARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiTexCoord3fARB(target: TextureUnit; s: single; t: single; r: single);
    begin
      z_MultiTexCoord3fARB_ovr_0(target, s, t, r);
    end;
    
    public z_MultiTexCoord3fvARB_adr := GetFuncAdr('glMultiTexCoord3fvARB');
    public z_MultiTexCoord3fvARB_ovr_0 := GetFuncOrNil&<procedure(target: TextureUnit; var v: single)>(z_MultiTexCoord3fvARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiTexCoord3fvARB(target: TextureUnit; v: array of single);
    begin
      z_MultiTexCoord3fvARB_ovr_0(target, v[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiTexCoord3fvARB(target: TextureUnit; var v: single);
    begin
      z_MultiTexCoord3fvARB_ovr_0(target, v);
    end;
    public z_MultiTexCoord3fvARB_ovr_2 := GetFuncOrNil&<procedure(target: TextureUnit; v: IntPtr)>(z_MultiTexCoord3fvARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiTexCoord3fvARB(target: TextureUnit; v: IntPtr);
    begin
      z_MultiTexCoord3fvARB_ovr_2(target, v);
    end;
    
    public z_MultiTexCoord3iARB_adr := GetFuncAdr('glMultiTexCoord3iARB');
    public z_MultiTexCoord3iARB_ovr_0 := GetFuncOrNil&<procedure(target: TextureUnit; s: Int32; t: Int32; r: Int32)>(z_MultiTexCoord3iARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiTexCoord3iARB(target: TextureUnit; s: Int32; t: Int32; r: Int32);
    begin
      z_MultiTexCoord3iARB_ovr_0(target, s, t, r);
    end;
    
    public z_MultiTexCoord3ivARB_adr := GetFuncAdr('glMultiTexCoord3ivARB');
    public z_MultiTexCoord3ivARB_ovr_0 := GetFuncOrNil&<procedure(target: TextureUnit; var v: Int32)>(z_MultiTexCoord3ivARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiTexCoord3ivARB(target: TextureUnit; v: array of Int32);
    begin
      z_MultiTexCoord3ivARB_ovr_0(target, v[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiTexCoord3ivARB(target: TextureUnit; var v: Int32);
    begin
      z_MultiTexCoord3ivARB_ovr_0(target, v);
    end;
    public z_MultiTexCoord3ivARB_ovr_2 := GetFuncOrNil&<procedure(target: TextureUnit; v: IntPtr)>(z_MultiTexCoord3ivARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiTexCoord3ivARB(target: TextureUnit; v: IntPtr);
    begin
      z_MultiTexCoord3ivARB_ovr_2(target, v);
    end;
    
    public z_MultiTexCoord3sARB_adr := GetFuncAdr('glMultiTexCoord3sARB');
    public z_MultiTexCoord3sARB_ovr_0 := GetFuncOrNil&<procedure(target: TextureUnit; s: Int16; t: Int16; r: Int16)>(z_MultiTexCoord3sARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiTexCoord3sARB(target: TextureUnit; s: Int16; t: Int16; r: Int16);
    begin
      z_MultiTexCoord3sARB_ovr_0(target, s, t, r);
    end;
    
    public z_MultiTexCoord3svARB_adr := GetFuncAdr('glMultiTexCoord3svARB');
    public z_MultiTexCoord3svARB_ovr_0 := GetFuncOrNil&<procedure(target: TextureUnit; var v: Int16)>(z_MultiTexCoord3svARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiTexCoord3svARB(target: TextureUnit; v: array of Int16);
    begin
      z_MultiTexCoord3svARB_ovr_0(target, v[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiTexCoord3svARB(target: TextureUnit; var v: Int16);
    begin
      z_MultiTexCoord3svARB_ovr_0(target, v);
    end;
    public z_MultiTexCoord3svARB_ovr_2 := GetFuncOrNil&<procedure(target: TextureUnit; v: IntPtr)>(z_MultiTexCoord3svARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiTexCoord3svARB(target: TextureUnit; v: IntPtr);
    begin
      z_MultiTexCoord3svARB_ovr_2(target, v);
    end;
    
    public z_MultiTexCoord4dARB_adr := GetFuncAdr('glMultiTexCoord4dARB');
    public z_MultiTexCoord4dARB_ovr_0 := GetFuncOrNil&<procedure(target: TextureUnit; s: real; t: real; r: real; q: real)>(z_MultiTexCoord4dARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiTexCoord4dARB(target: TextureUnit; s: real; t: real; r: real; q: real);
    begin
      z_MultiTexCoord4dARB_ovr_0(target, s, t, r, q);
    end;
    
    public z_MultiTexCoord4dvARB_adr := GetFuncAdr('glMultiTexCoord4dvARB');
    public z_MultiTexCoord4dvARB_ovr_0 := GetFuncOrNil&<procedure(target: TextureUnit; var v: real)>(z_MultiTexCoord4dvARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiTexCoord4dvARB(target: TextureUnit; v: array of real);
    begin
      z_MultiTexCoord4dvARB_ovr_0(target, v[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiTexCoord4dvARB(target: TextureUnit; var v: real);
    begin
      z_MultiTexCoord4dvARB_ovr_0(target, v);
    end;
    public z_MultiTexCoord4dvARB_ovr_2 := GetFuncOrNil&<procedure(target: TextureUnit; v: IntPtr)>(z_MultiTexCoord4dvARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiTexCoord4dvARB(target: TextureUnit; v: IntPtr);
    begin
      z_MultiTexCoord4dvARB_ovr_2(target, v);
    end;
    
    public z_MultiTexCoord4fARB_adr := GetFuncAdr('glMultiTexCoord4fARB');
    public z_MultiTexCoord4fARB_ovr_0 := GetFuncOrNil&<procedure(target: TextureUnit; s: single; t: single; r: single; q: single)>(z_MultiTexCoord4fARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiTexCoord4fARB(target: TextureUnit; s: single; t: single; r: single; q: single);
    begin
      z_MultiTexCoord4fARB_ovr_0(target, s, t, r, q);
    end;
    
    public z_MultiTexCoord4fvARB_adr := GetFuncAdr('glMultiTexCoord4fvARB');
    public z_MultiTexCoord4fvARB_ovr_0 := GetFuncOrNil&<procedure(target: TextureUnit; var v: single)>(z_MultiTexCoord4fvARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiTexCoord4fvARB(target: TextureUnit; v: array of single);
    begin
      z_MultiTexCoord4fvARB_ovr_0(target, v[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiTexCoord4fvARB(target: TextureUnit; var v: single);
    begin
      z_MultiTexCoord4fvARB_ovr_0(target, v);
    end;
    public z_MultiTexCoord4fvARB_ovr_2 := GetFuncOrNil&<procedure(target: TextureUnit; v: IntPtr)>(z_MultiTexCoord4fvARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiTexCoord4fvARB(target: TextureUnit; v: IntPtr);
    begin
      z_MultiTexCoord4fvARB_ovr_2(target, v);
    end;
    
    public z_MultiTexCoord4iARB_adr := GetFuncAdr('glMultiTexCoord4iARB');
    public z_MultiTexCoord4iARB_ovr_0 := GetFuncOrNil&<procedure(target: TextureUnit; s: Int32; t: Int32; r: Int32; q: Int32)>(z_MultiTexCoord4iARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiTexCoord4iARB(target: TextureUnit; s: Int32; t: Int32; r: Int32; q: Int32);
    begin
      z_MultiTexCoord4iARB_ovr_0(target, s, t, r, q);
    end;
    
    public z_MultiTexCoord4ivARB_adr := GetFuncAdr('glMultiTexCoord4ivARB');
    public z_MultiTexCoord4ivARB_ovr_0 := GetFuncOrNil&<procedure(target: TextureUnit; var v: Int32)>(z_MultiTexCoord4ivARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiTexCoord4ivARB(target: TextureUnit; v: array of Int32);
    begin
      z_MultiTexCoord4ivARB_ovr_0(target, v[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiTexCoord4ivARB(target: TextureUnit; var v: Int32);
    begin
      z_MultiTexCoord4ivARB_ovr_0(target, v);
    end;
    public z_MultiTexCoord4ivARB_ovr_2 := GetFuncOrNil&<procedure(target: TextureUnit; v: IntPtr)>(z_MultiTexCoord4ivARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiTexCoord4ivARB(target: TextureUnit; v: IntPtr);
    begin
      z_MultiTexCoord4ivARB_ovr_2(target, v);
    end;
    
    public z_MultiTexCoord4sARB_adr := GetFuncAdr('glMultiTexCoord4sARB');
    public z_MultiTexCoord4sARB_ovr_0 := GetFuncOrNil&<procedure(target: TextureUnit; s: Int16; t: Int16; r: Int16; q: Int16)>(z_MultiTexCoord4sARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiTexCoord4sARB(target: TextureUnit; s: Int16; t: Int16; r: Int16; q: Int16);
    begin
      z_MultiTexCoord4sARB_ovr_0(target, s, t, r, q);
    end;
    
    public z_MultiTexCoord4svARB_adr := GetFuncAdr('glMultiTexCoord4svARB');
    public z_MultiTexCoord4svARB_ovr_0 := GetFuncOrNil&<procedure(target: TextureUnit; var v: Int16)>(z_MultiTexCoord4svARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiTexCoord4svARB(target: TextureUnit; v: array of Int16);
    begin
      z_MultiTexCoord4svARB_ovr_0(target, v[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiTexCoord4svARB(target: TextureUnit; var v: Int16);
    begin
      z_MultiTexCoord4svARB_ovr_0(target, v);
    end;
    public z_MultiTexCoord4svARB_ovr_2 := GetFuncOrNil&<procedure(target: TextureUnit; v: IntPtr)>(z_MultiTexCoord4svARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiTexCoord4svARB(target: TextureUnit; v: IntPtr);
    begin
      z_MultiTexCoord4svARB_ovr_2(target, v);
    end;
    
  end;
  
  glOcclusionQueryARB = sealed class
    public static function GetFuncAdr([MarshalAs(UnmanagedType.LPStr)] lpszProc: string): IntPtr;
    external 'opengl32.dll' name 'wglGetProcAddress';
    public static function GetFuncOrNil<T>(fadr: IntPtr) :=
    fadr=IntPtr.Zero ? default(T) :
    Marshal.GetDelegateForFunctionPointer&<T>(fadr);
    
    public z_GenQueriesARB_adr := GetFuncAdr('glGenQueriesARB');
    public z_GenQueriesARB_ovr_0 := GetFuncOrNil&<procedure(n: Int32; var ids: UInt32)>(z_GenQueriesARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GenQueriesARB(n: Int32; ids: array of UInt32);
    begin
      z_GenQueriesARB_ovr_0(n, ids[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GenQueriesARB(n: Int32; var ids: UInt32);
    begin
      z_GenQueriesARB_ovr_0(n, ids);
    end;
    public z_GenQueriesARB_ovr_2 := GetFuncOrNil&<procedure(n: Int32; ids: IntPtr)>(z_GenQueriesARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GenQueriesARB(n: Int32; ids: IntPtr);
    begin
      z_GenQueriesARB_ovr_2(n, ids);
    end;
    
    public z_DeleteQueriesARB_adr := GetFuncAdr('glDeleteQueriesARB');
    public z_DeleteQueriesARB_ovr_0 := GetFuncOrNil&<procedure(n: Int32; var ids: UInt32)>(z_DeleteQueriesARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure DeleteQueriesARB(n: Int32; ids: array of UInt32);
    begin
      z_DeleteQueriesARB_ovr_0(n, ids[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure DeleteQueriesARB(n: Int32; var ids: UInt32);
    begin
      z_DeleteQueriesARB_ovr_0(n, ids);
    end;
    public z_DeleteQueriesARB_ovr_2 := GetFuncOrNil&<procedure(n: Int32; ids: IntPtr)>(z_DeleteQueriesARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure DeleteQueriesARB(n: Int32; ids: IntPtr);
    begin
      z_DeleteQueriesARB_ovr_2(n, ids);
    end;
    
    public z_IsQueryARB_adr := GetFuncAdr('glIsQueryARB');
    public z_IsQueryARB_ovr_0 := GetFuncOrNil&<function(id: UInt32): boolean>(z_IsQueryARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function IsQueryARB(id: UInt32): boolean;
    begin
      Result := z_IsQueryARB_ovr_0(id);
    end;
    
    public z_BeginQueryARB_adr := GetFuncAdr('glBeginQueryARB');
    public z_BeginQueryARB_ovr_0 := GetFuncOrNil&<procedure(target: DummyEnum; id: UInt32)>(z_BeginQueryARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure BeginQueryARB(target: DummyEnum; id: UInt32);
    begin
      z_BeginQueryARB_ovr_0(target, id);
    end;
    
    public z_EndQueryARB_adr := GetFuncAdr('glEndQueryARB');
    public z_EndQueryARB_ovr_0 := GetFuncOrNil&<procedure(target: QueryTarget)>(z_EndQueryARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure EndQueryARB(target: QueryTarget);
    begin
      z_EndQueryARB_ovr_0(target);
    end;
    
    public z_GetQueryivARB_adr := GetFuncAdr('glGetQueryivARB');
    public z_GetQueryivARB_ovr_0 := GetFuncOrNil&<procedure(target: QueryTarget; pname: QueryParameterName; var &params: Int32)>(z_GetQueryivARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetQueryivARB(target: QueryTarget; pname: QueryParameterName; &params: array of Int32);
    begin
      z_GetQueryivARB_ovr_0(target, pname, &params[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetQueryivARB(target: QueryTarget; pname: QueryParameterName; var &params: Int32);
    begin
      z_GetQueryivARB_ovr_0(target, pname, &params);
    end;
    public z_GetQueryivARB_ovr_2 := GetFuncOrNil&<procedure(target: QueryTarget; pname: QueryParameterName; &params: IntPtr)>(z_GetQueryivARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetQueryivARB(target: QueryTarget; pname: QueryParameterName; &params: IntPtr);
    begin
      z_GetQueryivARB_ovr_2(target, pname, &params);
    end;
    
    public z_GetQueryObjectivARB_adr := GetFuncAdr('glGetQueryObjectivARB');
    public z_GetQueryObjectivARB_ovr_0 := GetFuncOrNil&<procedure(id: UInt32; pname: QueryObjectParameterName; var &params: Int32)>(z_GetQueryObjectivARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetQueryObjectivARB(id: UInt32; pname: QueryObjectParameterName; &params: array of Int32);
    begin
      z_GetQueryObjectivARB_ovr_0(id, pname, &params[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetQueryObjectivARB(id: UInt32; pname: QueryObjectParameterName; var &params: Int32);
    begin
      z_GetQueryObjectivARB_ovr_0(id, pname, &params);
    end;
    public z_GetQueryObjectivARB_ovr_2 := GetFuncOrNil&<procedure(id: UInt32; pname: QueryObjectParameterName; &params: IntPtr)>(z_GetQueryObjectivARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetQueryObjectivARB(id: UInt32; pname: QueryObjectParameterName; &params: IntPtr);
    begin
      z_GetQueryObjectivARB_ovr_2(id, pname, &params);
    end;
    
    public z_GetQueryObjectuivARB_adr := GetFuncAdr('glGetQueryObjectuivARB');
    public z_GetQueryObjectuivARB_ovr_0 := GetFuncOrNil&<procedure(id: UInt32; pname: QueryObjectParameterName; var &params: UInt32)>(z_GetQueryObjectuivARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetQueryObjectuivARB(id: UInt32; pname: QueryObjectParameterName; &params: array of UInt32);
    begin
      z_GetQueryObjectuivARB_ovr_0(id, pname, &params[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetQueryObjectuivARB(id: UInt32; pname: QueryObjectParameterName; var &params: UInt32);
    begin
      z_GetQueryObjectuivARB_ovr_0(id, pname, &params);
    end;
    public z_GetQueryObjectuivARB_ovr_2 := GetFuncOrNil&<procedure(id: UInt32; pname: QueryObjectParameterName; &params: IntPtr)>(z_GetQueryObjectuivARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetQueryObjectuivARB(id: UInt32; pname: QueryObjectParameterName; &params: IntPtr);
    begin
      z_GetQueryObjectuivARB_ovr_2(id, pname, &params);
    end;
    
  end;
  
  glParallelShaderCompileARB = sealed class
    public static function GetFuncAdr([MarshalAs(UnmanagedType.LPStr)] lpszProc: string): IntPtr;
    external 'opengl32.dll' name 'wglGetProcAddress';
    public static function GetFuncOrNil<T>(fadr: IntPtr) :=
    fadr=IntPtr.Zero ? default(T) :
    Marshal.GetDelegateForFunctionPointer&<T>(fadr);
    
    public z_MaxShaderCompilerThreadsARB_adr := GetFuncAdr('glMaxShaderCompilerThreadsARB');
    public z_MaxShaderCompilerThreadsARB_ovr_0 := GetFuncOrNil&<procedure(count: UInt32)>(z_MaxShaderCompilerThreadsARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MaxShaderCompilerThreadsARB(count: UInt32);
    begin
      z_MaxShaderCompilerThreadsARB_ovr_0(count);
    end;
    
  end;
  
  glPointParametersARB = sealed class
    public static function GetFuncAdr([MarshalAs(UnmanagedType.LPStr)] lpszProc: string): IntPtr;
    external 'opengl32.dll' name 'wglGetProcAddress';
    public static function GetFuncOrNil<T>(fadr: IntPtr) :=
    fadr=IntPtr.Zero ? default(T) :
    Marshal.GetDelegateForFunctionPointer&<T>(fadr);
    
    public z_PointParameterfARB_adr := GetFuncAdr('glPointParameterfARB');
    public z_PointParameterfARB_ovr_0 := GetFuncOrNil&<procedure(pname: PointParameterNameARB; param: single)>(z_PointParameterfARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure PointParameterfARB(pname: PointParameterNameARB; param: single);
    begin
      z_PointParameterfARB_ovr_0(pname, param);
    end;
    
    public z_PointParameterfvARB_adr := GetFuncAdr('glPointParameterfvARB');
    public z_PointParameterfvARB_ovr_0 := GetFuncOrNil&<procedure(pname: PointParameterNameARB; var &params: single)>(z_PointParameterfvARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure PointParameterfvARB(pname: PointParameterNameARB; &params: array of single);
    begin
      z_PointParameterfvARB_ovr_0(pname, &params[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure PointParameterfvARB(pname: PointParameterNameARB; var &params: single);
    begin
      z_PointParameterfvARB_ovr_0(pname, &params);
    end;
    public z_PointParameterfvARB_ovr_2 := GetFuncOrNil&<procedure(pname: PointParameterNameARB; &params: IntPtr)>(z_PointParameterfvARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure PointParameterfvARB(pname: PointParameterNameARB; &params: IntPtr);
    begin
      z_PointParameterfvARB_ovr_2(pname, &params);
    end;
    
  end;
  
  glPolygonOffsetClampARB = sealed class
    public static function GetFuncAdr([MarshalAs(UnmanagedType.LPStr)] lpszProc: string): IntPtr;
    external 'opengl32.dll' name 'wglGetProcAddress';
    public static function GetFuncOrNil<T>(fadr: IntPtr) :=
    fadr=IntPtr.Zero ? default(T) :
    Marshal.GetDelegateForFunctionPointer&<T>(fadr);
    
    public z_PolygonOffsetClamp_adr := GetFuncAdr('glPolygonOffsetClamp');
    public z_PolygonOffsetClamp_ovr_0 := GetFuncOrNil&<procedure(factor: single; units: single; clamp: single)>(z_PolygonOffsetClamp_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure PolygonOffsetClamp(factor: single; units: single; clamp: single);
    begin
      z_PolygonOffsetClamp_ovr_0(factor, units, clamp);
    end;
    
  end;
  
  glProgramInterfaceQueryARB = sealed class
    public static function GetFuncAdr([MarshalAs(UnmanagedType.LPStr)] lpszProc: string): IntPtr;
    external 'opengl32.dll' name 'wglGetProcAddress';
    public static function GetFuncOrNil<T>(fadr: IntPtr) :=
    fadr=IntPtr.Zero ? default(T) :
    Marshal.GetDelegateForFunctionPointer&<T>(fadr);
    
    public z_GetProgramInterfaceiv_adr := GetFuncAdr('glGetProgramInterfaceiv');
    public z_GetProgramInterfaceiv_ovr_0 := GetFuncOrNil&<procedure(&program: ProgramName; _programInterface: ProgramInterface; pname: ProgramInterfacePName; var &params: Int32)>(z_GetProgramInterfaceiv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetProgramInterfaceiv(&program: ProgramName; _programInterface: ProgramInterface; pname: ProgramInterfacePName; &params: array of Int32);
    begin
      z_GetProgramInterfaceiv_ovr_0(&program, _programInterface, pname, &params[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetProgramInterfaceiv(&program: ProgramName; _programInterface: ProgramInterface; pname: ProgramInterfacePName; var &params: Int32);
    begin
      z_GetProgramInterfaceiv_ovr_0(&program, _programInterface, pname, &params);
    end;
    public z_GetProgramInterfaceiv_ovr_2 := GetFuncOrNil&<procedure(&program: ProgramName; _programInterface: ProgramInterface; pname: ProgramInterfacePName; &params: IntPtr)>(z_GetProgramInterfaceiv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetProgramInterfaceiv(&program: ProgramName; _programInterface: ProgramInterface; pname: ProgramInterfacePName; &params: IntPtr);
    begin
      z_GetProgramInterfaceiv_ovr_2(&program, _programInterface, pname, &params);
    end;
    
    public z_GetProgramResourceIndex_adr := GetFuncAdr('glGetProgramResourceIndex');
    public z_GetProgramResourceIndex_ovr_0 := GetFuncOrNil&<function(&program: ProgramName; _programInterface: ProgramInterface; name: IntPtr): UInt32>(z_GetProgramResourceIndex_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetProgramResourceIndex(&program: ProgramName; _programInterface: ProgramInterface; name: string): UInt32;
    begin
      var par_3_str_ptr := Marshal.StringToHGlobalAnsi(name);
      Result := z_GetProgramResourceIndex_ovr_0(&program, _programInterface, par_3_str_ptr);
      Marshal.FreeHGlobal(par_3_str_ptr);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetProgramResourceIndex(&program: ProgramName; _programInterface: ProgramInterface; name: IntPtr): UInt32;
    begin
      Result := z_GetProgramResourceIndex_ovr_0(&program, _programInterface, name);
    end;
    
    public z_GetProgramResourceName_adr := GetFuncAdr('glGetProgramResourceName');
    public z_GetProgramResourceName_ovr_0 := GetFuncOrNil&<procedure(&program: UInt32; _programInterface: ProgramInterface; index: UInt32; bufSize: Int32; var length: Int32; name: IntPtr)>(z_GetProgramResourceName_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetProgramResourceName(&program: UInt32; _programInterface: ProgramInterface; index: UInt32; bufSize: Int32; length: array of Int32; name: IntPtr);
    begin
      z_GetProgramResourceName_ovr_0(&program, _programInterface, index, bufSize, length[0], name);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetProgramResourceName(&program: UInt32; _programInterface: ProgramInterface; index: UInt32; bufSize: Int32; var length: Int32; name: IntPtr);
    begin
      z_GetProgramResourceName_ovr_0(&program, _programInterface, index, bufSize, length, name);
    end;
    public z_GetProgramResourceName_ovr_2 := GetFuncOrNil&<procedure(&program: UInt32; _programInterface: ProgramInterface; index: UInt32; bufSize: Int32; length: IntPtr; name: IntPtr)>(z_GetProgramResourceName_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetProgramResourceName(&program: UInt32; _programInterface: ProgramInterface; index: UInt32; bufSize: Int32; length: IntPtr; name: IntPtr);
    begin
      z_GetProgramResourceName_ovr_2(&program, _programInterface, index, bufSize, length, name);
    end;
    
    public z_GetProgramResourceiv_adr := GetFuncAdr('glGetProgramResourceiv');
    public z_GetProgramResourceiv_ovr_0 := GetFuncOrNil&<procedure(&program: UInt32; _programInterface: ProgramInterface; index: UInt32; propCount: Int32; var props: ProgramResourceProperty; count: Int32; var length: Int32; var &params: Int32)>(z_GetProgramResourceiv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetProgramResourceiv(&program: UInt32; _programInterface: ProgramInterface; index: UInt32; propCount: Int32; props: array of ProgramResourceProperty; count: Int32; length: array of Int32; &params: array of Int32);
    begin
      z_GetProgramResourceiv_ovr_0(&program, _programInterface, index, propCount, props[0], count, length[0], &params[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetProgramResourceiv(&program: UInt32; _programInterface: ProgramInterface; index: UInt32; propCount: Int32; props: array of ProgramResourceProperty; count: Int32; length: array of Int32; var &params: Int32);
    begin
      z_GetProgramResourceiv_ovr_0(&program, _programInterface, index, propCount, props[0], count, length[0], &params);
    end;
    public z_GetProgramResourceiv_ovr_2 := GetFuncOrNil&<procedure(&program: UInt32; _programInterface: ProgramInterface; index: UInt32; propCount: Int32; var props: ProgramResourceProperty; count: Int32; var length: Int32; &params: IntPtr)>(z_GetProgramResourceiv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetProgramResourceiv(&program: UInt32; _programInterface: ProgramInterface; index: UInt32; propCount: Int32; props: array of ProgramResourceProperty; count: Int32; length: array of Int32; &params: IntPtr);
    begin
      z_GetProgramResourceiv_ovr_2(&program, _programInterface, index, propCount, props[0], count, length[0], &params);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetProgramResourceiv(&program: UInt32; _programInterface: ProgramInterface; index: UInt32; propCount: Int32; props: array of ProgramResourceProperty; count: Int32; var length: Int32; &params: array of Int32);
    begin
      z_GetProgramResourceiv_ovr_0(&program, _programInterface, index, propCount, props[0], count, length, &params[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetProgramResourceiv(&program: UInt32; _programInterface: ProgramInterface; index: UInt32; propCount: Int32; props: array of ProgramResourceProperty; count: Int32; var length: Int32; var &params: Int32);
    begin
      z_GetProgramResourceiv_ovr_0(&program, _programInterface, index, propCount, props[0], count, length, &params);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetProgramResourceiv(&program: UInt32; _programInterface: ProgramInterface; index: UInt32; propCount: Int32; props: array of ProgramResourceProperty; count: Int32; var length: Int32; &params: IntPtr);
    begin
      z_GetProgramResourceiv_ovr_2(&program, _programInterface, index, propCount, props[0], count, length, &params);
    end;
    public z_GetProgramResourceiv_ovr_6 := GetFuncOrNil&<procedure(&program: UInt32; _programInterface: ProgramInterface; index: UInt32; propCount: Int32; var props: ProgramResourceProperty; count: Int32; length: IntPtr; var &params: Int32)>(z_GetProgramResourceiv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetProgramResourceiv(&program: UInt32; _programInterface: ProgramInterface; index: UInt32; propCount: Int32; props: array of ProgramResourceProperty; count: Int32; length: IntPtr; &params: array of Int32);
    begin
      z_GetProgramResourceiv_ovr_6(&program, _programInterface, index, propCount, props[0], count, length, &params[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetProgramResourceiv(&program: UInt32; _programInterface: ProgramInterface; index: UInt32; propCount: Int32; props: array of ProgramResourceProperty; count: Int32; length: IntPtr; var &params: Int32);
    begin
      z_GetProgramResourceiv_ovr_6(&program, _programInterface, index, propCount, props[0], count, length, &params);
    end;
    public z_GetProgramResourceiv_ovr_8 := GetFuncOrNil&<procedure(&program: UInt32; _programInterface: ProgramInterface; index: UInt32; propCount: Int32; var props: ProgramResourceProperty; count: Int32; length: IntPtr; &params: IntPtr)>(z_GetProgramResourceiv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetProgramResourceiv(&program: UInt32; _programInterface: ProgramInterface; index: UInt32; propCount: Int32; props: array of ProgramResourceProperty; count: Int32; length: IntPtr; &params: IntPtr);
    begin
      z_GetProgramResourceiv_ovr_8(&program, _programInterface, index, propCount, props[0], count, length, &params);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetProgramResourceiv(&program: UInt32; _programInterface: ProgramInterface; index: UInt32; propCount: Int32; var props: ProgramResourceProperty; count: Int32; length: array of Int32; &params: array of Int32);
    begin
      z_GetProgramResourceiv_ovr_0(&program, _programInterface, index, propCount, props, count, length[0], &params[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetProgramResourceiv(&program: UInt32; _programInterface: ProgramInterface; index: UInt32; propCount: Int32; var props: ProgramResourceProperty; count: Int32; length: array of Int32; var &params: Int32);
    begin
      z_GetProgramResourceiv_ovr_0(&program, _programInterface, index, propCount, props, count, length[0], &params);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetProgramResourceiv(&program: UInt32; _programInterface: ProgramInterface; index: UInt32; propCount: Int32; var props: ProgramResourceProperty; count: Int32; length: array of Int32; &params: IntPtr);
    begin
      z_GetProgramResourceiv_ovr_2(&program, _programInterface, index, propCount, props, count, length[0], &params);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetProgramResourceiv(&program: UInt32; _programInterface: ProgramInterface; index: UInt32; propCount: Int32; var props: ProgramResourceProperty; count: Int32; var length: Int32; &params: array of Int32);
    begin
      z_GetProgramResourceiv_ovr_0(&program, _programInterface, index, propCount, props, count, length, &params[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetProgramResourceiv(&program: UInt32; _programInterface: ProgramInterface; index: UInt32; propCount: Int32; var props: ProgramResourceProperty; count: Int32; var length: Int32; var &params: Int32);
    begin
      z_GetProgramResourceiv_ovr_0(&program, _programInterface, index, propCount, props, count, length, &params);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetProgramResourceiv(&program: UInt32; _programInterface: ProgramInterface; index: UInt32; propCount: Int32; var props: ProgramResourceProperty; count: Int32; var length: Int32; &params: IntPtr);
    begin
      z_GetProgramResourceiv_ovr_2(&program, _programInterface, index, propCount, props, count, length, &params);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetProgramResourceiv(&program: UInt32; _programInterface: ProgramInterface; index: UInt32; propCount: Int32; var props: ProgramResourceProperty; count: Int32; length: IntPtr; &params: array of Int32);
    begin
      z_GetProgramResourceiv_ovr_6(&program, _programInterface, index, propCount, props, count, length, &params[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetProgramResourceiv(&program: UInt32; _programInterface: ProgramInterface; index: UInt32; propCount: Int32; var props: ProgramResourceProperty; count: Int32; length: IntPtr; var &params: Int32);
    begin
      z_GetProgramResourceiv_ovr_6(&program, _programInterface, index, propCount, props, count, length, &params);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetProgramResourceiv(&program: UInt32; _programInterface: ProgramInterface; index: UInt32; propCount: Int32; var props: ProgramResourceProperty; count: Int32; length: IntPtr; &params: IntPtr);
    begin
      z_GetProgramResourceiv_ovr_8(&program, _programInterface, index, propCount, props, count, length, &params);
    end;
    public z_GetProgramResourceiv_ovr_18 := GetFuncOrNil&<procedure(&program: UInt32; _programInterface: ProgramInterface; index: UInt32; propCount: Int32; props: IntPtr; count: Int32; var length: Int32; var &params: Int32)>(z_GetProgramResourceiv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetProgramResourceiv(&program: UInt32; _programInterface: ProgramInterface; index: UInt32; propCount: Int32; props: IntPtr; count: Int32; length: array of Int32; &params: array of Int32);
    begin
      z_GetProgramResourceiv_ovr_18(&program, _programInterface, index, propCount, props, count, length[0], &params[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetProgramResourceiv(&program: UInt32; _programInterface: ProgramInterface; index: UInt32; propCount: Int32; props: IntPtr; count: Int32; length: array of Int32; var &params: Int32);
    begin
      z_GetProgramResourceiv_ovr_18(&program, _programInterface, index, propCount, props, count, length[0], &params);
    end;
    public z_GetProgramResourceiv_ovr_20 := GetFuncOrNil&<procedure(&program: UInt32; _programInterface: ProgramInterface; index: UInt32; propCount: Int32; props: IntPtr; count: Int32; var length: Int32; &params: IntPtr)>(z_GetProgramResourceiv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetProgramResourceiv(&program: UInt32; _programInterface: ProgramInterface; index: UInt32; propCount: Int32; props: IntPtr; count: Int32; length: array of Int32; &params: IntPtr);
    begin
      z_GetProgramResourceiv_ovr_20(&program, _programInterface, index, propCount, props, count, length[0], &params);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetProgramResourceiv(&program: UInt32; _programInterface: ProgramInterface; index: UInt32; propCount: Int32; props: IntPtr; count: Int32; var length: Int32; &params: array of Int32);
    begin
      z_GetProgramResourceiv_ovr_18(&program, _programInterface, index, propCount, props, count, length, &params[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetProgramResourceiv(&program: UInt32; _programInterface: ProgramInterface; index: UInt32; propCount: Int32; props: IntPtr; count: Int32; var length: Int32; var &params: Int32);
    begin
      z_GetProgramResourceiv_ovr_18(&program, _programInterface, index, propCount, props, count, length, &params);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetProgramResourceiv(&program: UInt32; _programInterface: ProgramInterface; index: UInt32; propCount: Int32; props: IntPtr; count: Int32; var length: Int32; &params: IntPtr);
    begin
      z_GetProgramResourceiv_ovr_20(&program, _programInterface, index, propCount, props, count, length, &params);
    end;
    public z_GetProgramResourceiv_ovr_24 := GetFuncOrNil&<procedure(&program: UInt32; _programInterface: ProgramInterface; index: UInt32; propCount: Int32; props: IntPtr; count: Int32; length: IntPtr; var &params: Int32)>(z_GetProgramResourceiv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetProgramResourceiv(&program: UInt32; _programInterface: ProgramInterface; index: UInt32; propCount: Int32; props: IntPtr; count: Int32; length: IntPtr; &params: array of Int32);
    begin
      z_GetProgramResourceiv_ovr_24(&program, _programInterface, index, propCount, props, count, length, &params[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetProgramResourceiv(&program: UInt32; _programInterface: ProgramInterface; index: UInt32; propCount: Int32; props: IntPtr; count: Int32; length: IntPtr; var &params: Int32);
    begin
      z_GetProgramResourceiv_ovr_24(&program, _programInterface, index, propCount, props, count, length, &params);
    end;
    public z_GetProgramResourceiv_ovr_26 := GetFuncOrNil&<procedure(&program: UInt32; _programInterface: ProgramInterface; index: UInt32; propCount: Int32; props: IntPtr; count: Int32; length: IntPtr; &params: IntPtr)>(z_GetProgramResourceiv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetProgramResourceiv(&program: UInt32; _programInterface: ProgramInterface; index: UInt32; propCount: Int32; props: IntPtr; count: Int32; length: IntPtr; &params: IntPtr);
    begin
      z_GetProgramResourceiv_ovr_26(&program, _programInterface, index, propCount, props, count, length, &params);
    end;
    
    public z_GetProgramResourceLocation_adr := GetFuncAdr('glGetProgramResourceLocation');
    public z_GetProgramResourceLocation_ovr_0 := GetFuncOrNil&<function(&program: ProgramName; _programInterface: ProgramInterface; name: IntPtr): Int32>(z_GetProgramResourceLocation_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetProgramResourceLocation(&program: ProgramName; _programInterface: ProgramInterface; name: string): Int32;
    begin
      var par_3_str_ptr := Marshal.StringToHGlobalAnsi(name);
      Result := z_GetProgramResourceLocation_ovr_0(&program, _programInterface, par_3_str_ptr);
      Marshal.FreeHGlobal(par_3_str_ptr);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetProgramResourceLocation(&program: ProgramName; _programInterface: ProgramInterface; name: IntPtr): Int32;
    begin
      Result := z_GetProgramResourceLocation_ovr_0(&program, _programInterface, name);
    end;
    
    public z_GetProgramResourceLocationIndex_adr := GetFuncAdr('glGetProgramResourceLocationIndex');
    public z_GetProgramResourceLocationIndex_ovr_0 := GetFuncOrNil&<function(&program: ProgramName; _programInterface: ProgramInterface; name: IntPtr): Int32>(z_GetProgramResourceLocationIndex_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetProgramResourceLocationIndex(&program: ProgramName; _programInterface: ProgramInterface; name: string): Int32;
    begin
      var par_3_str_ptr := Marshal.StringToHGlobalAnsi(name);
      Result := z_GetProgramResourceLocationIndex_ovr_0(&program, _programInterface, par_3_str_ptr);
      Marshal.FreeHGlobal(par_3_str_ptr);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetProgramResourceLocationIndex(&program: ProgramName; _programInterface: ProgramInterface; name: IntPtr): Int32;
    begin
      Result := z_GetProgramResourceLocationIndex_ovr_0(&program, _programInterface, name);
    end;
    
  end;
  
  glProvokingVertexARB = sealed class
    public static function GetFuncAdr([MarshalAs(UnmanagedType.LPStr)] lpszProc: string): IntPtr;
    external 'opengl32.dll' name 'wglGetProcAddress';
    public static function GetFuncOrNil<T>(fadr: IntPtr) :=
    fadr=IntPtr.Zero ? default(T) :
    Marshal.GetDelegateForFunctionPointer&<T>(fadr);
    
    public z_ProvokingVertex_adr := GetFuncAdr('glProvokingVertex');
    public z_ProvokingVertex_ovr_0 := GetFuncOrNil&<procedure(mode: VertexProvokingMode)>(z_ProvokingVertex_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProvokingVertex(mode: VertexProvokingMode);
    begin
      z_ProvokingVertex_ovr_0(mode);
    end;
    
  end;
  
  glRobustnessARB = sealed class
    public static function GetFuncAdr([MarshalAs(UnmanagedType.LPStr)] lpszProc: string): IntPtr;
    external 'opengl32.dll' name 'wglGetProcAddress';
    public static function GetFuncOrNil<T>(fadr: IntPtr) :=
    fadr=IntPtr.Zero ? default(T) :
    Marshal.GetDelegateForFunctionPointer&<T>(fadr);
    
    public z_GetGraphicsResetStatusARB_adr := GetFuncAdr('glGetGraphicsResetStatusARB');
    public z_GetGraphicsResetStatusARB_ovr_0 := GetFuncOrNil&<function: GraphicsResetStatus>(z_GetGraphicsResetStatusARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetGraphicsResetStatusARB: GraphicsResetStatus;
    begin
      Result := z_GetGraphicsResetStatusARB_ovr_0;
    end;
    
    public z_GetnTexImageARB_adr := GetFuncAdr('glGetnTexImageARB');
    public z_GetnTexImageARB_ovr_0 := GetFuncOrNil&<procedure(target: TextureTarget; level: Int32; format: PixelFormat; &type: PixelType; bufSize: Int32; img: IntPtr)>(z_GetnTexImageARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetnTexImageARB(target: TextureTarget; level: Int32; format: PixelFormat; &type: PixelType; bufSize: Int32; img: IntPtr);
    begin
      z_GetnTexImageARB_ovr_0(target, level, format, &type, bufSize, img);
    end;
    
    public z_ReadnPixelsARB_adr := GetFuncAdr('glReadnPixelsARB');
    public z_ReadnPixelsARB_ovr_0 := GetFuncOrNil&<procedure(x: Int32; y: Int32; width: Int32; height: Int32; format: PixelFormat; &type: PixelType; bufSize: Int32; data: IntPtr)>(z_ReadnPixelsARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ReadnPixelsARB(x: Int32; y: Int32; width: Int32; height: Int32; format: PixelFormat; &type: PixelType; bufSize: Int32; data: IntPtr);
    begin
      z_ReadnPixelsARB_ovr_0(x, y, width, height, format, &type, bufSize, data);
    end;
    
    public z_GetnCompressedTexImageARB_adr := GetFuncAdr('glGetnCompressedTexImageARB');
    public z_GetnCompressedTexImageARB_ovr_0 := GetFuncOrNil&<procedure(target: TextureTarget; lod: Int32; bufSize: Int32; img: IntPtr)>(z_GetnCompressedTexImageARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetnCompressedTexImageARB(target: TextureTarget; lod: Int32; bufSize: Int32; img: IntPtr);
    begin
      z_GetnCompressedTexImageARB_ovr_0(target, lod, bufSize, img);
    end;
    
    public z_GetnUniformfvARB_adr := GetFuncAdr('glGetnUniformfvARB');
    public z_GetnUniformfvARB_ovr_0 := GetFuncOrNil&<procedure(&program: UInt32; location: Int32; bufSize: Int32; var &params: single)>(z_GetnUniformfvARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetnUniformfvARB(&program: UInt32; location: Int32; bufSize: Int32; &params: array of single);
    begin
      z_GetnUniformfvARB_ovr_0(&program, location, bufSize, &params[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetnUniformfvARB(&program: UInt32; location: Int32; bufSize: Int32; var &params: single);
    begin
      z_GetnUniformfvARB_ovr_0(&program, location, bufSize, &params);
    end;
    public z_GetnUniformfvARB_ovr_2 := GetFuncOrNil&<procedure(&program: UInt32; location: Int32; bufSize: Int32; &params: IntPtr)>(z_GetnUniformfvARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetnUniformfvARB(&program: UInt32; location: Int32; bufSize: Int32; &params: IntPtr);
    begin
      z_GetnUniformfvARB_ovr_2(&program, location, bufSize, &params);
    end;
    
    public z_GetnUniformivARB_adr := GetFuncAdr('glGetnUniformivARB');
    public z_GetnUniformivARB_ovr_0 := GetFuncOrNil&<procedure(&program: UInt32; location: Int32; bufSize: Int32; var &params: Int32)>(z_GetnUniformivARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetnUniformivARB(&program: UInt32; location: Int32; bufSize: Int32; &params: array of Int32);
    begin
      z_GetnUniformivARB_ovr_0(&program, location, bufSize, &params[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetnUniformivARB(&program: UInt32; location: Int32; bufSize: Int32; var &params: Int32);
    begin
      z_GetnUniformivARB_ovr_0(&program, location, bufSize, &params);
    end;
    public z_GetnUniformivARB_ovr_2 := GetFuncOrNil&<procedure(&program: UInt32; location: Int32; bufSize: Int32; &params: IntPtr)>(z_GetnUniformivARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetnUniformivARB(&program: UInt32; location: Int32; bufSize: Int32; &params: IntPtr);
    begin
      z_GetnUniformivARB_ovr_2(&program, location, bufSize, &params);
    end;
    
    public z_GetnUniformuivARB_adr := GetFuncAdr('glGetnUniformuivARB');
    public z_GetnUniformuivARB_ovr_0 := GetFuncOrNil&<procedure(&program: UInt32; location: Int32; bufSize: Int32; var &params: UInt32)>(z_GetnUniformuivARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetnUniformuivARB(&program: UInt32; location: Int32; bufSize: Int32; &params: array of UInt32);
    begin
      z_GetnUniformuivARB_ovr_0(&program, location, bufSize, &params[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetnUniformuivARB(&program: UInt32; location: Int32; bufSize: Int32; var &params: UInt32);
    begin
      z_GetnUniformuivARB_ovr_0(&program, location, bufSize, &params);
    end;
    public z_GetnUniformuivARB_ovr_2 := GetFuncOrNil&<procedure(&program: UInt32; location: Int32; bufSize: Int32; &params: IntPtr)>(z_GetnUniformuivARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetnUniformuivARB(&program: UInt32; location: Int32; bufSize: Int32; &params: IntPtr);
    begin
      z_GetnUniformuivARB_ovr_2(&program, location, bufSize, &params);
    end;
    
    public z_GetnUniformdvARB_adr := GetFuncAdr('glGetnUniformdvARB');
    public z_GetnUniformdvARB_ovr_0 := GetFuncOrNil&<procedure(&program: UInt32; location: Int32; bufSize: Int32; var &params: real)>(z_GetnUniformdvARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetnUniformdvARB(&program: UInt32; location: Int32; bufSize: Int32; &params: array of real);
    begin
      z_GetnUniformdvARB_ovr_0(&program, location, bufSize, &params[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetnUniformdvARB(&program: UInt32; location: Int32; bufSize: Int32; var &params: real);
    begin
      z_GetnUniformdvARB_ovr_0(&program, location, bufSize, &params);
    end;
    public z_GetnUniformdvARB_ovr_2 := GetFuncOrNil&<procedure(&program: UInt32; location: Int32; bufSize: Int32; &params: IntPtr)>(z_GetnUniformdvARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetnUniformdvARB(&program: UInt32; location: Int32; bufSize: Int32; &params: IntPtr);
    begin
      z_GetnUniformdvARB_ovr_2(&program, location, bufSize, &params);
    end;
    
    public z_GetnMapdvARB_adr := GetFuncAdr('glGetnMapdvARB');
    public z_GetnMapdvARB_ovr_0 := GetFuncOrNil&<procedure(target: MapTarget; query: MapQuery; bufSize: Int32; var v: real)>(z_GetnMapdvARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetnMapdvARB(target: MapTarget; query: MapQuery; bufSize: Int32; v: array of real);
    begin
      z_GetnMapdvARB_ovr_0(target, query, bufSize, v[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetnMapdvARB(target: MapTarget; query: MapQuery; bufSize: Int32; var v: real);
    begin
      z_GetnMapdvARB_ovr_0(target, query, bufSize, v);
    end;
    public z_GetnMapdvARB_ovr_2 := GetFuncOrNil&<procedure(target: MapTarget; query: MapQuery; bufSize: Int32; v: IntPtr)>(z_GetnMapdvARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetnMapdvARB(target: MapTarget; query: MapQuery; bufSize: Int32; v: IntPtr);
    begin
      z_GetnMapdvARB_ovr_2(target, query, bufSize, v);
    end;
    
    public z_GetnMapfvARB_adr := GetFuncAdr('glGetnMapfvARB');
    public z_GetnMapfvARB_ovr_0 := GetFuncOrNil&<procedure(target: MapTarget; query: MapQuery; bufSize: Int32; var v: single)>(z_GetnMapfvARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetnMapfvARB(target: MapTarget; query: MapQuery; bufSize: Int32; v: array of single);
    begin
      z_GetnMapfvARB_ovr_0(target, query, bufSize, v[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetnMapfvARB(target: MapTarget; query: MapQuery; bufSize: Int32; var v: single);
    begin
      z_GetnMapfvARB_ovr_0(target, query, bufSize, v);
    end;
    public z_GetnMapfvARB_ovr_2 := GetFuncOrNil&<procedure(target: MapTarget; query: MapQuery; bufSize: Int32; v: IntPtr)>(z_GetnMapfvARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetnMapfvARB(target: MapTarget; query: MapQuery; bufSize: Int32; v: IntPtr);
    begin
      z_GetnMapfvARB_ovr_2(target, query, bufSize, v);
    end;
    
    public z_GetnMapivARB_adr := GetFuncAdr('glGetnMapivARB');
    public z_GetnMapivARB_ovr_0 := GetFuncOrNil&<procedure(target: MapTarget; query: MapQuery; bufSize: Int32; var v: Int32)>(z_GetnMapivARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetnMapivARB(target: MapTarget; query: MapQuery; bufSize: Int32; v: array of Int32);
    begin
      z_GetnMapivARB_ovr_0(target, query, bufSize, v[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetnMapivARB(target: MapTarget; query: MapQuery; bufSize: Int32; var v: Int32);
    begin
      z_GetnMapivARB_ovr_0(target, query, bufSize, v);
    end;
    public z_GetnMapivARB_ovr_2 := GetFuncOrNil&<procedure(target: MapTarget; query: MapQuery; bufSize: Int32; v: IntPtr)>(z_GetnMapivARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetnMapivARB(target: MapTarget; query: MapQuery; bufSize: Int32; v: IntPtr);
    begin
      z_GetnMapivARB_ovr_2(target, query, bufSize, v);
    end;
    
    public z_GetnPixelMapfvARB_adr := GetFuncAdr('glGetnPixelMapfvARB');
    public z_GetnPixelMapfvARB_ovr_0 := GetFuncOrNil&<procedure(map: PixelMap; bufSize: Int32; var values: single)>(z_GetnPixelMapfvARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetnPixelMapfvARB(map: PixelMap; bufSize: Int32; values: array of single);
    begin
      z_GetnPixelMapfvARB_ovr_0(map, bufSize, values[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetnPixelMapfvARB(map: PixelMap; bufSize: Int32; var values: single);
    begin
      z_GetnPixelMapfvARB_ovr_0(map, bufSize, values);
    end;
    public z_GetnPixelMapfvARB_ovr_2 := GetFuncOrNil&<procedure(map: PixelMap; bufSize: Int32; values: IntPtr)>(z_GetnPixelMapfvARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetnPixelMapfvARB(map: PixelMap; bufSize: Int32; values: IntPtr);
    begin
      z_GetnPixelMapfvARB_ovr_2(map, bufSize, values);
    end;
    
    public z_GetnPixelMapuivARB_adr := GetFuncAdr('glGetnPixelMapuivARB');
    public z_GetnPixelMapuivARB_ovr_0 := GetFuncOrNil&<procedure(map: PixelMap; bufSize: Int32; var values: UInt32)>(z_GetnPixelMapuivARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetnPixelMapuivARB(map: PixelMap; bufSize: Int32; values: array of UInt32);
    begin
      z_GetnPixelMapuivARB_ovr_0(map, bufSize, values[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetnPixelMapuivARB(map: PixelMap; bufSize: Int32; var values: UInt32);
    begin
      z_GetnPixelMapuivARB_ovr_0(map, bufSize, values);
    end;
    public z_GetnPixelMapuivARB_ovr_2 := GetFuncOrNil&<procedure(map: PixelMap; bufSize: Int32; values: IntPtr)>(z_GetnPixelMapuivARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetnPixelMapuivARB(map: PixelMap; bufSize: Int32; values: IntPtr);
    begin
      z_GetnPixelMapuivARB_ovr_2(map, bufSize, values);
    end;
    
    public z_GetnPixelMapusvARB_adr := GetFuncAdr('glGetnPixelMapusvARB');
    public z_GetnPixelMapusvARB_ovr_0 := GetFuncOrNil&<procedure(map: PixelMap; bufSize: Int32; var values: UInt16)>(z_GetnPixelMapusvARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetnPixelMapusvARB(map: PixelMap; bufSize: Int32; values: array of UInt16);
    begin
      z_GetnPixelMapusvARB_ovr_0(map, bufSize, values[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetnPixelMapusvARB(map: PixelMap; bufSize: Int32; var values: UInt16);
    begin
      z_GetnPixelMapusvARB_ovr_0(map, bufSize, values);
    end;
    public z_GetnPixelMapusvARB_ovr_2 := GetFuncOrNil&<procedure(map: PixelMap; bufSize: Int32; values: IntPtr)>(z_GetnPixelMapusvARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetnPixelMapusvARB(map: PixelMap; bufSize: Int32; values: IntPtr);
    begin
      z_GetnPixelMapusvARB_ovr_2(map, bufSize, values);
    end;
    
    public z_GetnPolygonStippleARB_adr := GetFuncAdr('glGetnPolygonStippleARB');
    public z_GetnPolygonStippleARB_ovr_0 := GetFuncOrNil&<procedure(bufSize: Int32; var pattern: Byte)>(z_GetnPolygonStippleARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetnPolygonStippleARB(bufSize: Int32; pattern: array of Byte);
    begin
      z_GetnPolygonStippleARB_ovr_0(bufSize, pattern[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetnPolygonStippleARB(bufSize: Int32; var pattern: Byte);
    begin
      z_GetnPolygonStippleARB_ovr_0(bufSize, pattern);
    end;
    public z_GetnPolygonStippleARB_ovr_2 := GetFuncOrNil&<procedure(bufSize: Int32; pattern: IntPtr)>(z_GetnPolygonStippleARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetnPolygonStippleARB(bufSize: Int32; pattern: IntPtr);
    begin
      z_GetnPolygonStippleARB_ovr_2(bufSize, pattern);
    end;
    
    public z_GetnColorTableARB_adr := GetFuncAdr('glGetnColorTableARB');
    public z_GetnColorTableARB_ovr_0 := GetFuncOrNil&<procedure(target: ColorTableTarget; format: PixelFormat; &type: PixelType; bufSize: Int32; table: IntPtr)>(z_GetnColorTableARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetnColorTableARB(target: ColorTableTarget; format: PixelFormat; &type: PixelType; bufSize: Int32; table: IntPtr);
    begin
      z_GetnColorTableARB_ovr_0(target, format, &type, bufSize, table);
    end;
    
    public z_GetnConvolutionFilterARB_adr := GetFuncAdr('glGetnConvolutionFilterARB');
    public z_GetnConvolutionFilterARB_ovr_0 := GetFuncOrNil&<procedure(target: ConvolutionTarget; format: PixelFormat; &type: PixelType; bufSize: Int32; image: IntPtr)>(z_GetnConvolutionFilterARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetnConvolutionFilterARB(target: ConvolutionTarget; format: PixelFormat; &type: PixelType; bufSize: Int32; image: IntPtr);
    begin
      z_GetnConvolutionFilterARB_ovr_0(target, format, &type, bufSize, image);
    end;
    
    public z_GetnSeparableFilterARB_adr := GetFuncAdr('glGetnSeparableFilterARB');
    public z_GetnSeparableFilterARB_ovr_0 := GetFuncOrNil&<procedure(target: SeparableTargetEXT; format: PixelFormat; &type: PixelType; rowBufSize: Int32; row: IntPtr; columnBufSize: Int32; column: IntPtr; span: IntPtr)>(z_GetnSeparableFilterARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetnSeparableFilterARB(target: SeparableTargetEXT; format: PixelFormat; &type: PixelType; rowBufSize: Int32; row: IntPtr; columnBufSize: Int32; column: IntPtr; span: IntPtr);
    begin
      z_GetnSeparableFilterARB_ovr_0(target, format, &type, rowBufSize, row, columnBufSize, column, span);
    end;
    
    public z_GetnHistogramARB_adr := GetFuncAdr('glGetnHistogramARB');
    public z_GetnHistogramARB_ovr_0 := GetFuncOrNil&<procedure(target: HistogramTargetEXT; reset: boolean; format: PixelFormat; &type: PixelType; bufSize: Int32; values: IntPtr)>(z_GetnHistogramARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetnHistogramARB(target: HistogramTargetEXT; reset: boolean; format: PixelFormat; &type: PixelType; bufSize: Int32; values: IntPtr);
    begin
      z_GetnHistogramARB_ovr_0(target, reset, format, &type, bufSize, values);
    end;
    
    public z_GetnMinmaxARB_adr := GetFuncAdr('glGetnMinmaxARB');
    public z_GetnMinmaxARB_ovr_0 := GetFuncOrNil&<procedure(target: MinmaxTargetEXT; reset: boolean; format: PixelFormat; &type: PixelType; bufSize: Int32; values: IntPtr)>(z_GetnMinmaxARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetnMinmaxARB(target: MinmaxTargetEXT; reset: boolean; format: PixelFormat; &type: PixelType; bufSize: Int32; values: IntPtr);
    begin
      z_GetnMinmaxARB_ovr_0(target, reset, format, &type, bufSize, values);
    end;
    
  end;
  
  glSampleLocationsARB = sealed class
    public static function GetFuncAdr([MarshalAs(UnmanagedType.LPStr)] lpszProc: string): IntPtr;
    external 'opengl32.dll' name 'wglGetProcAddress';
    public static function GetFuncOrNil<T>(fadr: IntPtr) :=
    fadr=IntPtr.Zero ? default(T) :
    Marshal.GetDelegateForFunctionPointer&<T>(fadr);
    
    public z_FramebufferSampleLocationsfvARB_adr := GetFuncAdr('glFramebufferSampleLocationsfvARB');
    public z_FramebufferSampleLocationsfvARB_ovr_0 := GetFuncOrNil&<procedure(target: FramebufferTarget; start: UInt32; count: Int32; var v: single)>(z_FramebufferSampleLocationsfvARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure FramebufferSampleLocationsfvARB(target: FramebufferTarget; start: UInt32; count: Int32; v: array of single);
    begin
      z_FramebufferSampleLocationsfvARB_ovr_0(target, start, count, v[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure FramebufferSampleLocationsfvARB(target: FramebufferTarget; start: UInt32; count: Int32; var v: single);
    begin
      z_FramebufferSampleLocationsfvARB_ovr_0(target, start, count, v);
    end;
    public z_FramebufferSampleLocationsfvARB_ovr_2 := GetFuncOrNil&<procedure(target: FramebufferTarget; start: UInt32; count: Int32; v: IntPtr)>(z_FramebufferSampleLocationsfvARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure FramebufferSampleLocationsfvARB(target: FramebufferTarget; start: UInt32; count: Int32; v: IntPtr);
    begin
      z_FramebufferSampleLocationsfvARB_ovr_2(target, start, count, v);
    end;
    
    public z_NamedFramebufferSampleLocationsfvARB_adr := GetFuncAdr('glNamedFramebufferSampleLocationsfvARB');
    public z_NamedFramebufferSampleLocationsfvARB_ovr_0 := GetFuncOrNil&<procedure(framebuffer: UInt32; start: UInt32; count: Int32; var v: single)>(z_NamedFramebufferSampleLocationsfvARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure NamedFramebufferSampleLocationsfvARB(framebuffer: UInt32; start: UInt32; count: Int32; v: array of single);
    begin
      z_NamedFramebufferSampleLocationsfvARB_ovr_0(framebuffer, start, count, v[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure NamedFramebufferSampleLocationsfvARB(framebuffer: UInt32; start: UInt32; count: Int32; var v: single);
    begin
      z_NamedFramebufferSampleLocationsfvARB_ovr_0(framebuffer, start, count, v);
    end;
    public z_NamedFramebufferSampleLocationsfvARB_ovr_2 := GetFuncOrNil&<procedure(framebuffer: UInt32; start: UInt32; count: Int32; v: IntPtr)>(z_NamedFramebufferSampleLocationsfvARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure NamedFramebufferSampleLocationsfvARB(framebuffer: UInt32; start: UInt32; count: Int32; v: IntPtr);
    begin
      z_NamedFramebufferSampleLocationsfvARB_ovr_2(framebuffer, start, count, v);
    end;
    
    public z_EvaluateDepthValuesARB_adr := GetFuncAdr('glEvaluateDepthValuesARB');
    public z_EvaluateDepthValuesARB_ovr_0 := GetFuncOrNil&<procedure>(z_EvaluateDepthValuesARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure EvaluateDepthValuesARB;
    begin
      z_EvaluateDepthValuesARB_ovr_0;
    end;
    
  end;
  
  glSampleShadingARB = sealed class
    public static function GetFuncAdr([MarshalAs(UnmanagedType.LPStr)] lpszProc: string): IntPtr;
    external 'opengl32.dll' name 'wglGetProcAddress';
    public static function GetFuncOrNil<T>(fadr: IntPtr) :=
    fadr=IntPtr.Zero ? default(T) :
    Marshal.GetDelegateForFunctionPointer&<T>(fadr);
    
    public z_MinSampleShadingARB_adr := GetFuncAdr('glMinSampleShadingARB');
    public z_MinSampleShadingARB_ovr_0 := GetFuncOrNil&<procedure(value: single)>(z_MinSampleShadingARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MinSampleShadingARB(value: single);
    begin
      z_MinSampleShadingARB_ovr_0(value);
    end;
    
  end;
  
  glSamplerObjectsARB = sealed class
    public static function GetFuncAdr([MarshalAs(UnmanagedType.LPStr)] lpszProc: string): IntPtr;
    external 'opengl32.dll' name 'wglGetProcAddress';
    public static function GetFuncOrNil<T>(fadr: IntPtr) :=
    fadr=IntPtr.Zero ? default(T) :
    Marshal.GetDelegateForFunctionPointer&<T>(fadr);
    
    public z_GenSamplers_adr := GetFuncAdr('glGenSamplers');
    public z_GenSamplers_ovr_0 := GetFuncOrNil&<procedure(count: Int32; var samplers: UInt32)>(z_GenSamplers_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GenSamplers(count: Int32; samplers: array of UInt32);
    begin
      z_GenSamplers_ovr_0(count, samplers[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GenSamplers(count: Int32; var samplers: UInt32);
    begin
      z_GenSamplers_ovr_0(count, samplers);
    end;
    public z_GenSamplers_ovr_2 := GetFuncOrNil&<procedure(count: Int32; samplers: IntPtr)>(z_GenSamplers_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GenSamplers(count: Int32; samplers: IntPtr);
    begin
      z_GenSamplers_ovr_2(count, samplers);
    end;
    
    public z_DeleteSamplers_adr := GetFuncAdr('glDeleteSamplers');
    public z_DeleteSamplers_ovr_0 := GetFuncOrNil&<procedure(count: Int32; var samplers: UInt32)>(z_DeleteSamplers_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure DeleteSamplers(count: Int32; samplers: array of UInt32);
    begin
      z_DeleteSamplers_ovr_0(count, samplers[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure DeleteSamplers(count: Int32; var samplers: UInt32);
    begin
      z_DeleteSamplers_ovr_0(count, samplers);
    end;
    public z_DeleteSamplers_ovr_2 := GetFuncOrNil&<procedure(count: Int32; samplers: IntPtr)>(z_DeleteSamplers_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure DeleteSamplers(count: Int32; samplers: IntPtr);
    begin
      z_DeleteSamplers_ovr_2(count, samplers);
    end;
    
    public z_IsSampler_adr := GetFuncAdr('glIsSampler');
    public z_IsSampler_ovr_0 := GetFuncOrNil&<function(sampler: SamplerName): boolean>(z_IsSampler_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function IsSampler(sampler: SamplerName): boolean;
    begin
      Result := z_IsSampler_ovr_0(sampler);
    end;
    
    public z_BindSampler_adr := GetFuncAdr('glBindSampler');
    public z_BindSampler_ovr_0 := GetFuncOrNil&<procedure(&unit: UInt32; sampler: SamplerName)>(z_BindSampler_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure BindSampler(&unit: UInt32; sampler: SamplerName);
    begin
      z_BindSampler_ovr_0(&unit, sampler);
    end;
    
    public z_SamplerParameteri_adr := GetFuncAdr('glSamplerParameteri');
    public z_SamplerParameteri_ovr_0 := GetFuncOrNil&<procedure(sampler: UInt32; pname: OpenGL.SamplerParameterI; param: Int32)>(z_SamplerParameteri_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure SamplerParameteri(sampler: UInt32; pname: OpenGL.SamplerParameterI; param: Int32);
    begin
      z_SamplerParameteri_ovr_0(sampler, pname, param);
    end;
    
    public z_SamplerParameteriv_adr := GetFuncAdr('glSamplerParameteriv');
    public z_SamplerParameteriv_ovr_0 := GetFuncOrNil&<procedure(sampler: UInt32; pname: OpenGL.SamplerParameterI; var param: Int32)>(z_SamplerParameteriv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure SamplerParameteriv(sampler: UInt32; pname: OpenGL.SamplerParameterI; param: array of Int32);
    begin
      z_SamplerParameteriv_ovr_0(sampler, pname, param[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure SamplerParameteriv(sampler: UInt32; pname: OpenGL.SamplerParameterI; var param: Int32);
    begin
      z_SamplerParameteriv_ovr_0(sampler, pname, param);
    end;
    public z_SamplerParameteriv_ovr_2 := GetFuncOrNil&<procedure(sampler: UInt32; pname: OpenGL.SamplerParameterI; param: IntPtr)>(z_SamplerParameteriv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure SamplerParameteriv(sampler: UInt32; pname: OpenGL.SamplerParameterI; param: IntPtr);
    begin
      z_SamplerParameteriv_ovr_2(sampler, pname, param);
    end;
    
    public z_SamplerParameterf_adr := GetFuncAdr('glSamplerParameterf');
    public z_SamplerParameterf_ovr_0 := GetFuncOrNil&<procedure(sampler: SamplerName; pname: OpenGL.SamplerParameterF; param: single)>(z_SamplerParameterf_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure SamplerParameterf(sampler: SamplerName; pname: OpenGL.SamplerParameterF; param: single);
    begin
      z_SamplerParameterf_ovr_0(sampler, pname, param);
    end;
    
    public z_SamplerParameterfv_adr := GetFuncAdr('glSamplerParameterfv');
    public z_SamplerParameterfv_ovr_0 := GetFuncOrNil&<procedure(sampler: UInt32; pname: OpenGL.SamplerParameterF; var param: single)>(z_SamplerParameterfv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure SamplerParameterfv(sampler: UInt32; pname: OpenGL.SamplerParameterF; param: array of single);
    begin
      z_SamplerParameterfv_ovr_0(sampler, pname, param[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure SamplerParameterfv(sampler: UInt32; pname: OpenGL.SamplerParameterF; var param: single);
    begin
      z_SamplerParameterfv_ovr_0(sampler, pname, param);
    end;
    public z_SamplerParameterfv_ovr_2 := GetFuncOrNil&<procedure(sampler: UInt32; pname: OpenGL.SamplerParameterF; param: IntPtr)>(z_SamplerParameterfv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure SamplerParameterfv(sampler: UInt32; pname: OpenGL.SamplerParameterF; param: IntPtr);
    begin
      z_SamplerParameterfv_ovr_2(sampler, pname, param);
    end;
    
    public z_SamplerParameterIiv_adr := GetFuncAdr('glSamplerParameterIiv');
    public z_SamplerParameterIiv_ovr_0 := GetFuncOrNil&<procedure(sampler: UInt32; pname: OpenGL.SamplerParameterI; var param: Int32)>(z_SamplerParameterIiv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure SamplerParameterIiv(sampler: UInt32; pname: OpenGL.SamplerParameterI; param: array of Int32);
    begin
      z_SamplerParameterIiv_ovr_0(sampler, pname, param[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure SamplerParameterIiv(sampler: UInt32; pname: OpenGL.SamplerParameterI; var param: Int32);
    begin
      z_SamplerParameterIiv_ovr_0(sampler, pname, param);
    end;
    public z_SamplerParameterIiv_ovr_2 := GetFuncOrNil&<procedure(sampler: UInt32; pname: OpenGL.SamplerParameterI; param: IntPtr)>(z_SamplerParameterIiv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure SamplerParameterIiv(sampler: UInt32; pname: OpenGL.SamplerParameterI; param: IntPtr);
    begin
      z_SamplerParameterIiv_ovr_2(sampler, pname, param);
    end;
    
    public z_SamplerParameterIuiv_adr := GetFuncAdr('glSamplerParameterIuiv');
    public z_SamplerParameterIuiv_ovr_0 := GetFuncOrNil&<procedure(sampler: UInt32; pname: OpenGL.SamplerParameterI; var param: UInt32)>(z_SamplerParameterIuiv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure SamplerParameterIuiv(sampler: UInt32; pname: OpenGL.SamplerParameterI; param: array of UInt32);
    begin
      z_SamplerParameterIuiv_ovr_0(sampler, pname, param[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure SamplerParameterIuiv(sampler: UInt32; pname: OpenGL.SamplerParameterI; var param: UInt32);
    begin
      z_SamplerParameterIuiv_ovr_0(sampler, pname, param);
    end;
    public z_SamplerParameterIuiv_ovr_2 := GetFuncOrNil&<procedure(sampler: UInt32; pname: OpenGL.SamplerParameterI; param: IntPtr)>(z_SamplerParameterIuiv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure SamplerParameterIuiv(sampler: UInt32; pname: OpenGL.SamplerParameterI; param: IntPtr);
    begin
      z_SamplerParameterIuiv_ovr_2(sampler, pname, param);
    end;
    
    public z_GetSamplerParameteriv_adr := GetFuncAdr('glGetSamplerParameteriv');
    public z_GetSamplerParameteriv_ovr_0 := GetFuncOrNil&<procedure(sampler: UInt32; pname: OpenGL.SamplerParameterI; var &params: Int32)>(z_GetSamplerParameteriv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetSamplerParameteriv(sampler: UInt32; pname: OpenGL.SamplerParameterI; &params: array of Int32);
    begin
      z_GetSamplerParameteriv_ovr_0(sampler, pname, &params[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetSamplerParameteriv(sampler: UInt32; pname: OpenGL.SamplerParameterI; var &params: Int32);
    begin
      z_GetSamplerParameteriv_ovr_0(sampler, pname, &params);
    end;
    public z_GetSamplerParameteriv_ovr_2 := GetFuncOrNil&<procedure(sampler: UInt32; pname: OpenGL.SamplerParameterI; &params: IntPtr)>(z_GetSamplerParameteriv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetSamplerParameteriv(sampler: UInt32; pname: OpenGL.SamplerParameterI; &params: IntPtr);
    begin
      z_GetSamplerParameteriv_ovr_2(sampler, pname, &params);
    end;
    
    public z_GetSamplerParameterIiv_adr := GetFuncAdr('glGetSamplerParameterIiv');
    public z_GetSamplerParameterIiv_ovr_0 := GetFuncOrNil&<procedure(sampler: UInt32; pname: OpenGL.SamplerParameterI; var &params: Int32)>(z_GetSamplerParameterIiv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetSamplerParameterIiv(sampler: UInt32; pname: OpenGL.SamplerParameterI; &params: array of Int32);
    begin
      z_GetSamplerParameterIiv_ovr_0(sampler, pname, &params[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetSamplerParameterIiv(sampler: UInt32; pname: OpenGL.SamplerParameterI; var &params: Int32);
    begin
      z_GetSamplerParameterIiv_ovr_0(sampler, pname, &params);
    end;
    public z_GetSamplerParameterIiv_ovr_2 := GetFuncOrNil&<procedure(sampler: UInt32; pname: OpenGL.SamplerParameterI; &params: IntPtr)>(z_GetSamplerParameterIiv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetSamplerParameterIiv(sampler: UInt32; pname: OpenGL.SamplerParameterI; &params: IntPtr);
    begin
      z_GetSamplerParameterIiv_ovr_2(sampler, pname, &params);
    end;
    
    public z_GetSamplerParameterfv_adr := GetFuncAdr('glGetSamplerParameterfv');
    public z_GetSamplerParameterfv_ovr_0 := GetFuncOrNil&<procedure(sampler: UInt32; pname: OpenGL.SamplerParameterF; var &params: single)>(z_GetSamplerParameterfv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetSamplerParameterfv(sampler: UInt32; pname: OpenGL.SamplerParameterF; &params: array of single);
    begin
      z_GetSamplerParameterfv_ovr_0(sampler, pname, &params[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetSamplerParameterfv(sampler: UInt32; pname: OpenGL.SamplerParameterF; var &params: single);
    begin
      z_GetSamplerParameterfv_ovr_0(sampler, pname, &params);
    end;
    public z_GetSamplerParameterfv_ovr_2 := GetFuncOrNil&<procedure(sampler: UInt32; pname: OpenGL.SamplerParameterF; &params: IntPtr)>(z_GetSamplerParameterfv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetSamplerParameterfv(sampler: UInt32; pname: OpenGL.SamplerParameterF; &params: IntPtr);
    begin
      z_GetSamplerParameterfv_ovr_2(sampler, pname, &params);
    end;
    
    public z_GetSamplerParameterIuiv_adr := GetFuncAdr('glGetSamplerParameterIuiv');
    public z_GetSamplerParameterIuiv_ovr_0 := GetFuncOrNil&<procedure(sampler: UInt32; pname: OpenGL.SamplerParameterI; var &params: UInt32)>(z_GetSamplerParameterIuiv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetSamplerParameterIuiv(sampler: UInt32; pname: OpenGL.SamplerParameterI; &params: array of UInt32);
    begin
      z_GetSamplerParameterIuiv_ovr_0(sampler, pname, &params[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetSamplerParameterIuiv(sampler: UInt32; pname: OpenGL.SamplerParameterI; var &params: UInt32);
    begin
      z_GetSamplerParameterIuiv_ovr_0(sampler, pname, &params);
    end;
    public z_GetSamplerParameterIuiv_ovr_2 := GetFuncOrNil&<procedure(sampler: UInt32; pname: OpenGL.SamplerParameterI; &params: IntPtr)>(z_GetSamplerParameterIuiv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetSamplerParameterIuiv(sampler: UInt32; pname: OpenGL.SamplerParameterI; &params: IntPtr);
    begin
      z_GetSamplerParameterIuiv_ovr_2(sampler, pname, &params);
    end;
    
  end;
  
  glSeparateShaderObjectsARB = sealed class
    public static function GetFuncAdr([MarshalAs(UnmanagedType.LPStr)] lpszProc: string): IntPtr;
    external 'opengl32.dll' name 'wglGetProcAddress';
    public static function GetFuncOrNil<T>(fadr: IntPtr) :=
    fadr=IntPtr.Zero ? default(T) :
    Marshal.GetDelegateForFunctionPointer&<T>(fadr);
    
    public z_UseProgramStages_adr := GetFuncAdr('glUseProgramStages');
    public z_UseProgramStages_ovr_0 := GetFuncOrNil&<procedure(pipeline: ProgramPipelineName; stages: UseProgramStageMask; &program: ProgramName)>(z_UseProgramStages_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure UseProgramStages(pipeline: ProgramPipelineName; stages: UseProgramStageMask; &program: ProgramName);
    begin
      z_UseProgramStages_ovr_0(pipeline, stages, &program);
    end;
    
    public z_ActiveShaderProgram_adr := GetFuncAdr('glActiveShaderProgram');
    public z_ActiveShaderProgram_ovr_0 := GetFuncOrNil&<procedure(pipeline: ProgramPipelineName; &program: ProgramName)>(z_ActiveShaderProgram_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ActiveShaderProgram(pipeline: ProgramPipelineName; &program: ProgramName);
    begin
      z_ActiveShaderProgram_ovr_0(pipeline, &program);
    end;
    
    public z_CreateShaderProgramv_adr := GetFuncAdr('glCreateShaderProgramv');
    public z_CreateShaderProgramv_ovr_0 := GetFuncOrNil&<function(&type: ShaderType; count: Int32; var strings: IntPtr): ProgramName>(z_CreateShaderProgramv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function CreateShaderProgramv(&type: ShaderType; count: Int32; strings: array of string): ProgramName;
    begin
      var par_3_str_ptr := strings.ConvertAll(arr_el1->Marshal.StringToHGlobalAnsi(arr_el1));
      Result := z_CreateShaderProgramv_ovr_0(&type, count, par_3_str_ptr[0]);
      foreach var arr_el1 in par_3_str_ptr do Marshal.FreeHGlobal(arr_el1);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function CreateShaderProgramv(&type: ShaderType; count: Int32; strings: array of IntPtr): ProgramName;
    begin
      Result := z_CreateShaderProgramv_ovr_0(&type, count, strings[0]);
    end;
    public z_CreateShaderProgramv_ovr_2 := GetFuncOrNil&<function(&type: ShaderType; count: Int32; strings: IntPtr): ProgramName>(z_CreateShaderProgramv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function CreateShaderProgramv(&type: ShaderType; count: Int32; strings: IntPtr): ProgramName;
    begin
      Result := z_CreateShaderProgramv_ovr_2(&type, count, strings);
    end;
    
    public z_BindProgramPipeline_adr := GetFuncAdr('glBindProgramPipeline');
    public z_BindProgramPipeline_ovr_0 := GetFuncOrNil&<procedure(pipeline: ProgramPipelineName)>(z_BindProgramPipeline_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure BindProgramPipeline(pipeline: ProgramPipelineName);
    begin
      z_BindProgramPipeline_ovr_0(pipeline);
    end;
    
    public z_DeleteProgramPipelines_adr := GetFuncAdr('glDeleteProgramPipelines');
    public z_DeleteProgramPipelines_ovr_0 := GetFuncOrNil&<procedure(n: Int32; var pipelines: UInt32)>(z_DeleteProgramPipelines_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure DeleteProgramPipelines(n: Int32; pipelines: array of UInt32);
    begin
      z_DeleteProgramPipelines_ovr_0(n, pipelines[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure DeleteProgramPipelines(n: Int32; var pipelines: UInt32);
    begin
      z_DeleteProgramPipelines_ovr_0(n, pipelines);
    end;
    public z_DeleteProgramPipelines_ovr_2 := GetFuncOrNil&<procedure(n: Int32; pipelines: IntPtr)>(z_DeleteProgramPipelines_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure DeleteProgramPipelines(n: Int32; pipelines: IntPtr);
    begin
      z_DeleteProgramPipelines_ovr_2(n, pipelines);
    end;
    
    public z_GenProgramPipelines_adr := GetFuncAdr('glGenProgramPipelines');
    public z_GenProgramPipelines_ovr_0 := GetFuncOrNil&<procedure(n: Int32; var pipelines: UInt32)>(z_GenProgramPipelines_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GenProgramPipelines(n: Int32; pipelines: array of UInt32);
    begin
      z_GenProgramPipelines_ovr_0(n, pipelines[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GenProgramPipelines(n: Int32; var pipelines: UInt32);
    begin
      z_GenProgramPipelines_ovr_0(n, pipelines);
    end;
    public z_GenProgramPipelines_ovr_2 := GetFuncOrNil&<procedure(n: Int32; pipelines: IntPtr)>(z_GenProgramPipelines_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GenProgramPipelines(n: Int32; pipelines: IntPtr);
    begin
      z_GenProgramPipelines_ovr_2(n, pipelines);
    end;
    
    public z_IsProgramPipeline_adr := GetFuncAdr('glIsProgramPipeline');
    public z_IsProgramPipeline_ovr_0 := GetFuncOrNil&<function(pipeline: ProgramPipelineName): boolean>(z_IsProgramPipeline_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function IsProgramPipeline(pipeline: ProgramPipelineName): boolean;
    begin
      Result := z_IsProgramPipeline_ovr_0(pipeline);
    end;
    
    public z_GetProgramPipelineiv_adr := GetFuncAdr('glGetProgramPipelineiv');
    public z_GetProgramPipelineiv_ovr_0 := GetFuncOrNil&<procedure(pipeline: UInt32; pname: PipelineParameterName; var &params: Int32)>(z_GetProgramPipelineiv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetProgramPipelineiv(pipeline: UInt32; pname: PipelineParameterName; &params: array of Int32);
    begin
      z_GetProgramPipelineiv_ovr_0(pipeline, pname, &params[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetProgramPipelineiv(pipeline: UInt32; pname: PipelineParameterName; var &params: Int32);
    begin
      z_GetProgramPipelineiv_ovr_0(pipeline, pname, &params);
    end;
    public z_GetProgramPipelineiv_ovr_2 := GetFuncOrNil&<procedure(pipeline: UInt32; pname: PipelineParameterName; &params: IntPtr)>(z_GetProgramPipelineiv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetProgramPipelineiv(pipeline: UInt32; pname: PipelineParameterName; &params: IntPtr);
    begin
      z_GetProgramPipelineiv_ovr_2(pipeline, pname, &params);
    end;
    
    public z_ProgramParameteri_adr := GetFuncAdr('glProgramParameteri');
    public z_ProgramParameteri_ovr_0 := GetFuncOrNil&<procedure(&program: ProgramName; pname: ProgramParameterPName; value: Int32)>(z_ProgramParameteri_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramParameteri(&program: ProgramName; pname: ProgramParameterPName; value: Int32);
    begin
      z_ProgramParameteri_ovr_0(&program, pname, value);
    end;
    
    public z_ProgramUniform1i_adr := GetFuncAdr('glProgramUniform1i');
    public z_ProgramUniform1i_ovr_0 := GetFuncOrNil&<procedure(&program: ProgramName; location: Int32; v0: Int32)>(z_ProgramUniform1i_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniform1i(&program: ProgramName; location: Int32; v0: Int32);
    begin
      z_ProgramUniform1i_ovr_0(&program, location, v0);
    end;
    
    public z_ProgramUniform1iv_adr := GetFuncAdr('glProgramUniform1iv');
    public z_ProgramUniform1iv_ovr_0 := GetFuncOrNil&<procedure(&program: UInt32; location: Int32; count: Int32; var value: Int32)>(z_ProgramUniform1iv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniform1iv(&program: UInt32; location: Int32; count: Int32; value: array of Int32);
    begin
      z_ProgramUniform1iv_ovr_0(&program, location, count, value[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniform1iv(&program: UInt32; location: Int32; count: Int32; var value: Int32);
    begin
      z_ProgramUniform1iv_ovr_0(&program, location, count, value);
    end;
    public z_ProgramUniform1iv_ovr_2 := GetFuncOrNil&<procedure(&program: UInt32; location: Int32; count: Int32; value: IntPtr)>(z_ProgramUniform1iv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniform1iv(&program: UInt32; location: Int32; count: Int32; value: IntPtr);
    begin
      z_ProgramUniform1iv_ovr_2(&program, location, count, value);
    end;
    
    public z_ProgramUniform1f_adr := GetFuncAdr('glProgramUniform1f');
    public z_ProgramUniform1f_ovr_0 := GetFuncOrNil&<procedure(&program: ProgramName; location: Int32; v0: single)>(z_ProgramUniform1f_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniform1f(&program: ProgramName; location: Int32; v0: single);
    begin
      z_ProgramUniform1f_ovr_0(&program, location, v0);
    end;
    
    public z_ProgramUniform1fv_adr := GetFuncAdr('glProgramUniform1fv');
    public z_ProgramUniform1fv_ovr_0 := GetFuncOrNil&<procedure(&program: UInt32; location: Int32; count: Int32; var value: single)>(z_ProgramUniform1fv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniform1fv(&program: UInt32; location: Int32; count: Int32; value: array of single);
    begin
      z_ProgramUniform1fv_ovr_0(&program, location, count, value[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniform1fv(&program: UInt32; location: Int32; count: Int32; var value: single);
    begin
      z_ProgramUniform1fv_ovr_0(&program, location, count, value);
    end;
    public z_ProgramUniform1fv_ovr_2 := GetFuncOrNil&<procedure(&program: UInt32; location: Int32; count: Int32; value: IntPtr)>(z_ProgramUniform1fv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniform1fv(&program: UInt32; location: Int32; count: Int32; value: IntPtr);
    begin
      z_ProgramUniform1fv_ovr_2(&program, location, count, value);
    end;
    
    public z_ProgramUniform1d_adr := GetFuncAdr('glProgramUniform1d');
    public z_ProgramUniform1d_ovr_0 := GetFuncOrNil&<procedure(&program: ProgramName; location: Int32; v0: real)>(z_ProgramUniform1d_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniform1d(&program: ProgramName; location: Int32; v0: real);
    begin
      z_ProgramUniform1d_ovr_0(&program, location, v0);
    end;
    
    public z_ProgramUniform1dv_adr := GetFuncAdr('glProgramUniform1dv');
    public z_ProgramUniform1dv_ovr_0 := GetFuncOrNil&<procedure(&program: UInt32; location: Int32; count: Int32; var value: real)>(z_ProgramUniform1dv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniform1dv(&program: UInt32; location: Int32; count: Int32; value: array of real);
    begin
      z_ProgramUniform1dv_ovr_0(&program, location, count, value[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniform1dv(&program: UInt32; location: Int32; count: Int32; var value: real);
    begin
      z_ProgramUniform1dv_ovr_0(&program, location, count, value);
    end;
    public z_ProgramUniform1dv_ovr_2 := GetFuncOrNil&<procedure(&program: UInt32; location: Int32; count: Int32; value: IntPtr)>(z_ProgramUniform1dv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniform1dv(&program: UInt32; location: Int32; count: Int32; value: IntPtr);
    begin
      z_ProgramUniform1dv_ovr_2(&program, location, count, value);
    end;
    
    public z_ProgramUniform1ui_adr := GetFuncAdr('glProgramUniform1ui');
    public z_ProgramUniform1ui_ovr_0 := GetFuncOrNil&<procedure(&program: ProgramName; location: Int32; v0: UInt32)>(z_ProgramUniform1ui_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniform1ui(&program: ProgramName; location: Int32; v0: UInt32);
    begin
      z_ProgramUniform1ui_ovr_0(&program, location, v0);
    end;
    
    public z_ProgramUniform1uiv_adr := GetFuncAdr('glProgramUniform1uiv');
    public z_ProgramUniform1uiv_ovr_0 := GetFuncOrNil&<procedure(&program: UInt32; location: Int32; count: Int32; var value: UInt32)>(z_ProgramUniform1uiv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniform1uiv(&program: UInt32; location: Int32; count: Int32; value: array of UInt32);
    begin
      z_ProgramUniform1uiv_ovr_0(&program, location, count, value[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniform1uiv(&program: UInt32; location: Int32; count: Int32; var value: UInt32);
    begin
      z_ProgramUniform1uiv_ovr_0(&program, location, count, value);
    end;
    public z_ProgramUniform1uiv_ovr_2 := GetFuncOrNil&<procedure(&program: UInt32; location: Int32; count: Int32; value: IntPtr)>(z_ProgramUniform1uiv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniform1uiv(&program: UInt32; location: Int32; count: Int32; value: IntPtr);
    begin
      z_ProgramUniform1uiv_ovr_2(&program, location, count, value);
    end;
    
    public z_ProgramUniform2i_adr := GetFuncAdr('glProgramUniform2i');
    public z_ProgramUniform2i_ovr_0 := GetFuncOrNil&<procedure(&program: ProgramName; location: Int32; v0: Int32; v1: Int32)>(z_ProgramUniform2i_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniform2i(&program: ProgramName; location: Int32; v0: Int32; v1: Int32);
    begin
      z_ProgramUniform2i_ovr_0(&program, location, v0, v1);
    end;
    
    public z_ProgramUniform2iv_adr := GetFuncAdr('glProgramUniform2iv');
    public z_ProgramUniform2iv_ovr_0 := GetFuncOrNil&<procedure(&program: UInt32; location: Int32; count: Int32; var value: Int32)>(z_ProgramUniform2iv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniform2iv(&program: UInt32; location: Int32; count: Int32; value: array of Int32);
    begin
      z_ProgramUniform2iv_ovr_0(&program, location, count, value[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniform2iv(&program: UInt32; location: Int32; count: Int32; var value: Int32);
    begin
      z_ProgramUniform2iv_ovr_0(&program, location, count, value);
    end;
    public z_ProgramUniform2iv_ovr_2 := GetFuncOrNil&<procedure(&program: UInt32; location: Int32; count: Int32; value: IntPtr)>(z_ProgramUniform2iv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniform2iv(&program: UInt32; location: Int32; count: Int32; value: IntPtr);
    begin
      z_ProgramUniform2iv_ovr_2(&program, location, count, value);
    end;
    
    public z_ProgramUniform2f_adr := GetFuncAdr('glProgramUniform2f');
    public z_ProgramUniform2f_ovr_0 := GetFuncOrNil&<procedure(&program: ProgramName; location: Int32; v0: single; v1: single)>(z_ProgramUniform2f_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniform2f(&program: ProgramName; location: Int32; v0: single; v1: single);
    begin
      z_ProgramUniform2f_ovr_0(&program, location, v0, v1);
    end;
    
    public z_ProgramUniform2fv_adr := GetFuncAdr('glProgramUniform2fv');
    public z_ProgramUniform2fv_ovr_0 := GetFuncOrNil&<procedure(&program: UInt32; location: Int32; count: Int32; var value: single)>(z_ProgramUniform2fv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniform2fv(&program: UInt32; location: Int32; count: Int32; value: array of single);
    begin
      z_ProgramUniform2fv_ovr_0(&program, location, count, value[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniform2fv(&program: UInt32; location: Int32; count: Int32; var value: single);
    begin
      z_ProgramUniform2fv_ovr_0(&program, location, count, value);
    end;
    public z_ProgramUniform2fv_ovr_2 := GetFuncOrNil&<procedure(&program: UInt32; location: Int32; count: Int32; value: IntPtr)>(z_ProgramUniform2fv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniform2fv(&program: UInt32; location: Int32; count: Int32; value: IntPtr);
    begin
      z_ProgramUniform2fv_ovr_2(&program, location, count, value);
    end;
    
    public z_ProgramUniform2d_adr := GetFuncAdr('glProgramUniform2d');
    public z_ProgramUniform2d_ovr_0 := GetFuncOrNil&<procedure(&program: ProgramName; location: Int32; v0: real; v1: real)>(z_ProgramUniform2d_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniform2d(&program: ProgramName; location: Int32; v0: real; v1: real);
    begin
      z_ProgramUniform2d_ovr_0(&program, location, v0, v1);
    end;
    
    public z_ProgramUniform2dv_adr := GetFuncAdr('glProgramUniform2dv');
    public z_ProgramUniform2dv_ovr_0 := GetFuncOrNil&<procedure(&program: UInt32; location: Int32; count: Int32; var value: real)>(z_ProgramUniform2dv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniform2dv(&program: UInt32; location: Int32; count: Int32; value: array of real);
    begin
      z_ProgramUniform2dv_ovr_0(&program, location, count, value[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniform2dv(&program: UInt32; location: Int32; count: Int32; var value: real);
    begin
      z_ProgramUniform2dv_ovr_0(&program, location, count, value);
    end;
    public z_ProgramUniform2dv_ovr_2 := GetFuncOrNil&<procedure(&program: UInt32; location: Int32; count: Int32; value: IntPtr)>(z_ProgramUniform2dv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniform2dv(&program: UInt32; location: Int32; count: Int32; value: IntPtr);
    begin
      z_ProgramUniform2dv_ovr_2(&program, location, count, value);
    end;
    
    public z_ProgramUniform2ui_adr := GetFuncAdr('glProgramUniform2ui');
    public z_ProgramUniform2ui_ovr_0 := GetFuncOrNil&<procedure(&program: ProgramName; location: Int32; v0: UInt32; v1: UInt32)>(z_ProgramUniform2ui_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniform2ui(&program: ProgramName; location: Int32; v0: UInt32; v1: UInt32);
    begin
      z_ProgramUniform2ui_ovr_0(&program, location, v0, v1);
    end;
    
    public z_ProgramUniform2uiv_adr := GetFuncAdr('glProgramUniform2uiv');
    public z_ProgramUniform2uiv_ovr_0 := GetFuncOrNil&<procedure(&program: UInt32; location: Int32; count: Int32; var value: UInt32)>(z_ProgramUniform2uiv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniform2uiv(&program: UInt32; location: Int32; count: Int32; value: array of UInt32);
    begin
      z_ProgramUniform2uiv_ovr_0(&program, location, count, value[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniform2uiv(&program: UInt32; location: Int32; count: Int32; var value: UInt32);
    begin
      z_ProgramUniform2uiv_ovr_0(&program, location, count, value);
    end;
    public z_ProgramUniform2uiv_ovr_2 := GetFuncOrNil&<procedure(&program: UInt32; location: Int32; count: Int32; value: IntPtr)>(z_ProgramUniform2uiv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniform2uiv(&program: UInt32; location: Int32; count: Int32; value: IntPtr);
    begin
      z_ProgramUniform2uiv_ovr_2(&program, location, count, value);
    end;
    
    public z_ProgramUniform3i_adr := GetFuncAdr('glProgramUniform3i');
    public z_ProgramUniform3i_ovr_0 := GetFuncOrNil&<procedure(&program: ProgramName; location: Int32; v0: Int32; v1: Int32; v2: Int32)>(z_ProgramUniform3i_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniform3i(&program: ProgramName; location: Int32; v0: Int32; v1: Int32; v2: Int32);
    begin
      z_ProgramUniform3i_ovr_0(&program, location, v0, v1, v2);
    end;
    
    public z_ProgramUniform3iv_adr := GetFuncAdr('glProgramUniform3iv');
    public z_ProgramUniform3iv_ovr_0 := GetFuncOrNil&<procedure(&program: UInt32; location: Int32; count: Int32; var value: Int32)>(z_ProgramUniform3iv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniform3iv(&program: UInt32; location: Int32; count: Int32; value: array of Int32);
    begin
      z_ProgramUniform3iv_ovr_0(&program, location, count, value[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniform3iv(&program: UInt32; location: Int32; count: Int32; var value: Int32);
    begin
      z_ProgramUniform3iv_ovr_0(&program, location, count, value);
    end;
    public z_ProgramUniform3iv_ovr_2 := GetFuncOrNil&<procedure(&program: UInt32; location: Int32; count: Int32; value: IntPtr)>(z_ProgramUniform3iv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniform3iv(&program: UInt32; location: Int32; count: Int32; value: IntPtr);
    begin
      z_ProgramUniform3iv_ovr_2(&program, location, count, value);
    end;
    
    public z_ProgramUniform3f_adr := GetFuncAdr('glProgramUniform3f');
    public z_ProgramUniform3f_ovr_0 := GetFuncOrNil&<procedure(&program: ProgramName; location: Int32; v0: single; v1: single; v2: single)>(z_ProgramUniform3f_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniform3f(&program: ProgramName; location: Int32; v0: single; v1: single; v2: single);
    begin
      z_ProgramUniform3f_ovr_0(&program, location, v0, v1, v2);
    end;
    
    public z_ProgramUniform3fv_adr := GetFuncAdr('glProgramUniform3fv');
    public z_ProgramUniform3fv_ovr_0 := GetFuncOrNil&<procedure(&program: UInt32; location: Int32; count: Int32; var value: single)>(z_ProgramUniform3fv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniform3fv(&program: UInt32; location: Int32; count: Int32; value: array of single);
    begin
      z_ProgramUniform3fv_ovr_0(&program, location, count, value[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniform3fv(&program: UInt32; location: Int32; count: Int32; var value: single);
    begin
      z_ProgramUniform3fv_ovr_0(&program, location, count, value);
    end;
    public z_ProgramUniform3fv_ovr_2 := GetFuncOrNil&<procedure(&program: UInt32; location: Int32; count: Int32; value: IntPtr)>(z_ProgramUniform3fv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniform3fv(&program: UInt32; location: Int32; count: Int32; value: IntPtr);
    begin
      z_ProgramUniform3fv_ovr_2(&program, location, count, value);
    end;
    
    public z_ProgramUniform3d_adr := GetFuncAdr('glProgramUniform3d');
    public z_ProgramUniform3d_ovr_0 := GetFuncOrNil&<procedure(&program: ProgramName; location: Int32; v0: real; v1: real; v2: real)>(z_ProgramUniform3d_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniform3d(&program: ProgramName; location: Int32; v0: real; v1: real; v2: real);
    begin
      z_ProgramUniform3d_ovr_0(&program, location, v0, v1, v2);
    end;
    
    public z_ProgramUniform3dv_adr := GetFuncAdr('glProgramUniform3dv');
    public z_ProgramUniform3dv_ovr_0 := GetFuncOrNil&<procedure(&program: UInt32; location: Int32; count: Int32; var value: real)>(z_ProgramUniform3dv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniform3dv(&program: UInt32; location: Int32; count: Int32; value: array of real);
    begin
      z_ProgramUniform3dv_ovr_0(&program, location, count, value[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniform3dv(&program: UInt32; location: Int32; count: Int32; var value: real);
    begin
      z_ProgramUniform3dv_ovr_0(&program, location, count, value);
    end;
    public z_ProgramUniform3dv_ovr_2 := GetFuncOrNil&<procedure(&program: UInt32; location: Int32; count: Int32; value: IntPtr)>(z_ProgramUniform3dv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniform3dv(&program: UInt32; location: Int32; count: Int32; value: IntPtr);
    begin
      z_ProgramUniform3dv_ovr_2(&program, location, count, value);
    end;
    
    public z_ProgramUniform3ui_adr := GetFuncAdr('glProgramUniform3ui');
    public z_ProgramUniform3ui_ovr_0 := GetFuncOrNil&<procedure(&program: ProgramName; location: Int32; v0: UInt32; v1: UInt32; v2: UInt32)>(z_ProgramUniform3ui_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniform3ui(&program: ProgramName; location: Int32; v0: UInt32; v1: UInt32; v2: UInt32);
    begin
      z_ProgramUniform3ui_ovr_0(&program, location, v0, v1, v2);
    end;
    
    public z_ProgramUniform3uiv_adr := GetFuncAdr('glProgramUniform3uiv');
    public z_ProgramUniform3uiv_ovr_0 := GetFuncOrNil&<procedure(&program: UInt32; location: Int32; count: Int32; var value: UInt32)>(z_ProgramUniform3uiv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniform3uiv(&program: UInt32; location: Int32; count: Int32; value: array of UInt32);
    begin
      z_ProgramUniform3uiv_ovr_0(&program, location, count, value[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniform3uiv(&program: UInt32; location: Int32; count: Int32; var value: UInt32);
    begin
      z_ProgramUniform3uiv_ovr_0(&program, location, count, value);
    end;
    public z_ProgramUniform3uiv_ovr_2 := GetFuncOrNil&<procedure(&program: UInt32; location: Int32; count: Int32; value: IntPtr)>(z_ProgramUniform3uiv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniform3uiv(&program: UInt32; location: Int32; count: Int32; value: IntPtr);
    begin
      z_ProgramUniform3uiv_ovr_2(&program, location, count, value);
    end;
    
    public z_ProgramUniform4i_adr := GetFuncAdr('glProgramUniform4i');
    public z_ProgramUniform4i_ovr_0 := GetFuncOrNil&<procedure(&program: ProgramName; location: Int32; v0: Int32; v1: Int32; v2: Int32; v3: Int32)>(z_ProgramUniform4i_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniform4i(&program: ProgramName; location: Int32; v0: Int32; v1: Int32; v2: Int32; v3: Int32);
    begin
      z_ProgramUniform4i_ovr_0(&program, location, v0, v1, v2, v3);
    end;
    
    public z_ProgramUniform4iv_adr := GetFuncAdr('glProgramUniform4iv');
    public z_ProgramUniform4iv_ovr_0 := GetFuncOrNil&<procedure(&program: UInt32; location: Int32; count: Int32; var value: Int32)>(z_ProgramUniform4iv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniform4iv(&program: UInt32; location: Int32; count: Int32; value: array of Int32);
    begin
      z_ProgramUniform4iv_ovr_0(&program, location, count, value[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniform4iv(&program: UInt32; location: Int32; count: Int32; var value: Int32);
    begin
      z_ProgramUniform4iv_ovr_0(&program, location, count, value);
    end;
    public z_ProgramUniform4iv_ovr_2 := GetFuncOrNil&<procedure(&program: UInt32; location: Int32; count: Int32; value: IntPtr)>(z_ProgramUniform4iv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniform4iv(&program: UInt32; location: Int32; count: Int32; value: IntPtr);
    begin
      z_ProgramUniform4iv_ovr_2(&program, location, count, value);
    end;
    
    public z_ProgramUniform4f_adr := GetFuncAdr('glProgramUniform4f');
    public z_ProgramUniform4f_ovr_0 := GetFuncOrNil&<procedure(&program: ProgramName; location: Int32; v0: single; v1: single; v2: single; v3: single)>(z_ProgramUniform4f_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniform4f(&program: ProgramName; location: Int32; v0: single; v1: single; v2: single; v3: single);
    begin
      z_ProgramUniform4f_ovr_0(&program, location, v0, v1, v2, v3);
    end;
    
    public z_ProgramUniform4fv_adr := GetFuncAdr('glProgramUniform4fv');
    public z_ProgramUniform4fv_ovr_0 := GetFuncOrNil&<procedure(&program: UInt32; location: Int32; count: Int32; var value: single)>(z_ProgramUniform4fv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniform4fv(&program: UInt32; location: Int32; count: Int32; value: array of single);
    begin
      z_ProgramUniform4fv_ovr_0(&program, location, count, value[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniform4fv(&program: UInt32; location: Int32; count: Int32; var value: single);
    begin
      z_ProgramUniform4fv_ovr_0(&program, location, count, value);
    end;
    public z_ProgramUniform4fv_ovr_2 := GetFuncOrNil&<procedure(&program: UInt32; location: Int32; count: Int32; value: IntPtr)>(z_ProgramUniform4fv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniform4fv(&program: UInt32; location: Int32; count: Int32; value: IntPtr);
    begin
      z_ProgramUniform4fv_ovr_2(&program, location, count, value);
    end;
    
    public z_ProgramUniform4d_adr := GetFuncAdr('glProgramUniform4d');
    public z_ProgramUniform4d_ovr_0 := GetFuncOrNil&<procedure(&program: ProgramName; location: Int32; v0: real; v1: real; v2: real; v3: real)>(z_ProgramUniform4d_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniform4d(&program: ProgramName; location: Int32; v0: real; v1: real; v2: real; v3: real);
    begin
      z_ProgramUniform4d_ovr_0(&program, location, v0, v1, v2, v3);
    end;
    
    public z_ProgramUniform4dv_adr := GetFuncAdr('glProgramUniform4dv');
    public z_ProgramUniform4dv_ovr_0 := GetFuncOrNil&<procedure(&program: UInt32; location: Int32; count: Int32; var value: real)>(z_ProgramUniform4dv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniform4dv(&program: UInt32; location: Int32; count: Int32; value: array of real);
    begin
      z_ProgramUniform4dv_ovr_0(&program, location, count, value[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniform4dv(&program: UInt32; location: Int32; count: Int32; var value: real);
    begin
      z_ProgramUniform4dv_ovr_0(&program, location, count, value);
    end;
    public z_ProgramUniform4dv_ovr_2 := GetFuncOrNil&<procedure(&program: UInt32; location: Int32; count: Int32; value: IntPtr)>(z_ProgramUniform4dv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniform4dv(&program: UInt32; location: Int32; count: Int32; value: IntPtr);
    begin
      z_ProgramUniform4dv_ovr_2(&program, location, count, value);
    end;
    
    public z_ProgramUniform4ui_adr := GetFuncAdr('glProgramUniform4ui');
    public z_ProgramUniform4ui_ovr_0 := GetFuncOrNil&<procedure(&program: ProgramName; location: Int32; v0: UInt32; v1: UInt32; v2: UInt32; v3: UInt32)>(z_ProgramUniform4ui_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniform4ui(&program: ProgramName; location: Int32; v0: UInt32; v1: UInt32; v2: UInt32; v3: UInt32);
    begin
      z_ProgramUniform4ui_ovr_0(&program, location, v0, v1, v2, v3);
    end;
    
    public z_ProgramUniform4uiv_adr := GetFuncAdr('glProgramUniform4uiv');
    public z_ProgramUniform4uiv_ovr_0 := GetFuncOrNil&<procedure(&program: UInt32; location: Int32; count: Int32; var value: UInt32)>(z_ProgramUniform4uiv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniform4uiv(&program: UInt32; location: Int32; count: Int32; value: array of UInt32);
    begin
      z_ProgramUniform4uiv_ovr_0(&program, location, count, value[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniform4uiv(&program: UInt32; location: Int32; count: Int32; var value: UInt32);
    begin
      z_ProgramUniform4uiv_ovr_0(&program, location, count, value);
    end;
    public z_ProgramUniform4uiv_ovr_2 := GetFuncOrNil&<procedure(&program: UInt32; location: Int32; count: Int32; value: IntPtr)>(z_ProgramUniform4uiv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniform4uiv(&program: UInt32; location: Int32; count: Int32; value: IntPtr);
    begin
      z_ProgramUniform4uiv_ovr_2(&program, location, count, value);
    end;
    
    public z_ProgramUniformMatrix2fv_adr := GetFuncAdr('glProgramUniformMatrix2fv');
    public z_ProgramUniformMatrix2fv_ovr_0 := GetFuncOrNil&<procedure(&program: UInt32; location: Int32; count: Int32; transpose: boolean; var value: single)>(z_ProgramUniformMatrix2fv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniformMatrix2fv(&program: UInt32; location: Int32; count: Int32; transpose: boolean; value: array of single);
    begin
      z_ProgramUniformMatrix2fv_ovr_0(&program, location, count, transpose, value[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniformMatrix2fv(&program: UInt32; location: Int32; count: Int32; transpose: boolean; var value: single);
    begin
      z_ProgramUniformMatrix2fv_ovr_0(&program, location, count, transpose, value);
    end;
    public z_ProgramUniformMatrix2fv_ovr_2 := GetFuncOrNil&<procedure(&program: UInt32; location: Int32; count: Int32; transpose: boolean; value: IntPtr)>(z_ProgramUniformMatrix2fv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniformMatrix2fv(&program: UInt32; location: Int32; count: Int32; transpose: boolean; value: IntPtr);
    begin
      z_ProgramUniformMatrix2fv_ovr_2(&program, location, count, transpose, value);
    end;
    
    public z_ProgramUniformMatrix3fv_adr := GetFuncAdr('glProgramUniformMatrix3fv');
    public z_ProgramUniformMatrix3fv_ovr_0 := GetFuncOrNil&<procedure(&program: UInt32; location: Int32; count: Int32; transpose: boolean; var value: single)>(z_ProgramUniformMatrix3fv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniformMatrix3fv(&program: UInt32; location: Int32; count: Int32; transpose: boolean; value: array of single);
    begin
      z_ProgramUniformMatrix3fv_ovr_0(&program, location, count, transpose, value[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniformMatrix3fv(&program: UInt32; location: Int32; count: Int32; transpose: boolean; var value: single);
    begin
      z_ProgramUniformMatrix3fv_ovr_0(&program, location, count, transpose, value);
    end;
    public z_ProgramUniformMatrix3fv_ovr_2 := GetFuncOrNil&<procedure(&program: UInt32; location: Int32; count: Int32; transpose: boolean; value: IntPtr)>(z_ProgramUniformMatrix3fv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniformMatrix3fv(&program: UInt32; location: Int32; count: Int32; transpose: boolean; value: IntPtr);
    begin
      z_ProgramUniformMatrix3fv_ovr_2(&program, location, count, transpose, value);
    end;
    
    public z_ProgramUniformMatrix4fv_adr := GetFuncAdr('glProgramUniformMatrix4fv');
    public z_ProgramUniformMatrix4fv_ovr_0 := GetFuncOrNil&<procedure(&program: UInt32; location: Int32; count: Int32; transpose: boolean; var value: single)>(z_ProgramUniformMatrix4fv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniformMatrix4fv(&program: UInt32; location: Int32; count: Int32; transpose: boolean; value: array of single);
    begin
      z_ProgramUniformMatrix4fv_ovr_0(&program, location, count, transpose, value[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniformMatrix4fv(&program: UInt32; location: Int32; count: Int32; transpose: boolean; var value: single);
    begin
      z_ProgramUniformMatrix4fv_ovr_0(&program, location, count, transpose, value);
    end;
    public z_ProgramUniformMatrix4fv_ovr_2 := GetFuncOrNil&<procedure(&program: UInt32; location: Int32; count: Int32; transpose: boolean; value: IntPtr)>(z_ProgramUniformMatrix4fv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniformMatrix4fv(&program: UInt32; location: Int32; count: Int32; transpose: boolean; value: IntPtr);
    begin
      z_ProgramUniformMatrix4fv_ovr_2(&program, location, count, transpose, value);
    end;
    
    public z_ProgramUniformMatrix2dv_adr := GetFuncAdr('glProgramUniformMatrix2dv');
    public z_ProgramUniformMatrix2dv_ovr_0 := GetFuncOrNil&<procedure(&program: UInt32; location: Int32; count: Int32; transpose: boolean; var value: real)>(z_ProgramUniformMatrix2dv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniformMatrix2dv(&program: UInt32; location: Int32; count: Int32; transpose: boolean; value: array of real);
    begin
      z_ProgramUniformMatrix2dv_ovr_0(&program, location, count, transpose, value[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniformMatrix2dv(&program: UInt32; location: Int32; count: Int32; transpose: boolean; var value: real);
    begin
      z_ProgramUniformMatrix2dv_ovr_0(&program, location, count, transpose, value);
    end;
    public z_ProgramUniformMatrix2dv_ovr_2 := GetFuncOrNil&<procedure(&program: UInt32; location: Int32; count: Int32; transpose: boolean; value: IntPtr)>(z_ProgramUniformMatrix2dv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniformMatrix2dv(&program: UInt32; location: Int32; count: Int32; transpose: boolean; value: IntPtr);
    begin
      z_ProgramUniformMatrix2dv_ovr_2(&program, location, count, transpose, value);
    end;
    
    public z_ProgramUniformMatrix3dv_adr := GetFuncAdr('glProgramUniformMatrix3dv');
    public z_ProgramUniformMatrix3dv_ovr_0 := GetFuncOrNil&<procedure(&program: UInt32; location: Int32; count: Int32; transpose: boolean; var value: real)>(z_ProgramUniformMatrix3dv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniformMatrix3dv(&program: UInt32; location: Int32; count: Int32; transpose: boolean; value: array of real);
    begin
      z_ProgramUniformMatrix3dv_ovr_0(&program, location, count, transpose, value[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniformMatrix3dv(&program: UInt32; location: Int32; count: Int32; transpose: boolean; var value: real);
    begin
      z_ProgramUniformMatrix3dv_ovr_0(&program, location, count, transpose, value);
    end;
    public z_ProgramUniformMatrix3dv_ovr_2 := GetFuncOrNil&<procedure(&program: UInt32; location: Int32; count: Int32; transpose: boolean; value: IntPtr)>(z_ProgramUniformMatrix3dv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniformMatrix3dv(&program: UInt32; location: Int32; count: Int32; transpose: boolean; value: IntPtr);
    begin
      z_ProgramUniformMatrix3dv_ovr_2(&program, location, count, transpose, value);
    end;
    
    public z_ProgramUniformMatrix4dv_adr := GetFuncAdr('glProgramUniformMatrix4dv');
    public z_ProgramUniformMatrix4dv_ovr_0 := GetFuncOrNil&<procedure(&program: UInt32; location: Int32; count: Int32; transpose: boolean; var value: real)>(z_ProgramUniformMatrix4dv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniformMatrix4dv(&program: UInt32; location: Int32; count: Int32; transpose: boolean; value: array of real);
    begin
      z_ProgramUniformMatrix4dv_ovr_0(&program, location, count, transpose, value[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniformMatrix4dv(&program: UInt32; location: Int32; count: Int32; transpose: boolean; var value: real);
    begin
      z_ProgramUniformMatrix4dv_ovr_0(&program, location, count, transpose, value);
    end;
    public z_ProgramUniformMatrix4dv_ovr_2 := GetFuncOrNil&<procedure(&program: UInt32; location: Int32; count: Int32; transpose: boolean; value: IntPtr)>(z_ProgramUniformMatrix4dv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniformMatrix4dv(&program: UInt32; location: Int32; count: Int32; transpose: boolean; value: IntPtr);
    begin
      z_ProgramUniformMatrix4dv_ovr_2(&program, location, count, transpose, value);
    end;
    
    public z_ProgramUniformMatrix2x3fv_adr := GetFuncAdr('glProgramUniformMatrix2x3fv');
    public z_ProgramUniformMatrix2x3fv_ovr_0 := GetFuncOrNil&<procedure(&program: UInt32; location: Int32; count: Int32; transpose: boolean; var value: single)>(z_ProgramUniformMatrix2x3fv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniformMatrix2x3fv(&program: UInt32; location: Int32; count: Int32; transpose: boolean; value: array of single);
    begin
      z_ProgramUniformMatrix2x3fv_ovr_0(&program, location, count, transpose, value[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniformMatrix2x3fv(&program: UInt32; location: Int32; count: Int32; transpose: boolean; var value: single);
    begin
      z_ProgramUniformMatrix2x3fv_ovr_0(&program, location, count, transpose, value);
    end;
    public z_ProgramUniformMatrix2x3fv_ovr_2 := GetFuncOrNil&<procedure(&program: UInt32; location: Int32; count: Int32; transpose: boolean; value: IntPtr)>(z_ProgramUniformMatrix2x3fv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniformMatrix2x3fv(&program: UInt32; location: Int32; count: Int32; transpose: boolean; value: IntPtr);
    begin
      z_ProgramUniformMatrix2x3fv_ovr_2(&program, location, count, transpose, value);
    end;
    
    public z_ProgramUniformMatrix3x2fv_adr := GetFuncAdr('glProgramUniformMatrix3x2fv');
    public z_ProgramUniformMatrix3x2fv_ovr_0 := GetFuncOrNil&<procedure(&program: UInt32; location: Int32; count: Int32; transpose: boolean; var value: single)>(z_ProgramUniformMatrix3x2fv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniformMatrix3x2fv(&program: UInt32; location: Int32; count: Int32; transpose: boolean; value: array of single);
    begin
      z_ProgramUniformMatrix3x2fv_ovr_0(&program, location, count, transpose, value[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniformMatrix3x2fv(&program: UInt32; location: Int32; count: Int32; transpose: boolean; var value: single);
    begin
      z_ProgramUniformMatrix3x2fv_ovr_0(&program, location, count, transpose, value);
    end;
    public z_ProgramUniformMatrix3x2fv_ovr_2 := GetFuncOrNil&<procedure(&program: UInt32; location: Int32; count: Int32; transpose: boolean; value: IntPtr)>(z_ProgramUniformMatrix3x2fv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniformMatrix3x2fv(&program: UInt32; location: Int32; count: Int32; transpose: boolean; value: IntPtr);
    begin
      z_ProgramUniformMatrix3x2fv_ovr_2(&program, location, count, transpose, value);
    end;
    
    public z_ProgramUniformMatrix2x4fv_adr := GetFuncAdr('glProgramUniformMatrix2x4fv');
    public z_ProgramUniformMatrix2x4fv_ovr_0 := GetFuncOrNil&<procedure(&program: UInt32; location: Int32; count: Int32; transpose: boolean; var value: single)>(z_ProgramUniformMatrix2x4fv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniformMatrix2x4fv(&program: UInt32; location: Int32; count: Int32; transpose: boolean; value: array of single);
    begin
      z_ProgramUniformMatrix2x4fv_ovr_0(&program, location, count, transpose, value[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniformMatrix2x4fv(&program: UInt32; location: Int32; count: Int32; transpose: boolean; var value: single);
    begin
      z_ProgramUniformMatrix2x4fv_ovr_0(&program, location, count, transpose, value);
    end;
    public z_ProgramUniformMatrix2x4fv_ovr_2 := GetFuncOrNil&<procedure(&program: UInt32; location: Int32; count: Int32; transpose: boolean; value: IntPtr)>(z_ProgramUniformMatrix2x4fv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniformMatrix2x4fv(&program: UInt32; location: Int32; count: Int32; transpose: boolean; value: IntPtr);
    begin
      z_ProgramUniformMatrix2x4fv_ovr_2(&program, location, count, transpose, value);
    end;
    
    public z_ProgramUniformMatrix4x2fv_adr := GetFuncAdr('glProgramUniformMatrix4x2fv');
    public z_ProgramUniformMatrix4x2fv_ovr_0 := GetFuncOrNil&<procedure(&program: UInt32; location: Int32; count: Int32; transpose: boolean; var value: single)>(z_ProgramUniformMatrix4x2fv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniformMatrix4x2fv(&program: UInt32; location: Int32; count: Int32; transpose: boolean; value: array of single);
    begin
      z_ProgramUniformMatrix4x2fv_ovr_0(&program, location, count, transpose, value[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniformMatrix4x2fv(&program: UInt32; location: Int32; count: Int32; transpose: boolean; var value: single);
    begin
      z_ProgramUniformMatrix4x2fv_ovr_0(&program, location, count, transpose, value);
    end;
    public z_ProgramUniformMatrix4x2fv_ovr_2 := GetFuncOrNil&<procedure(&program: UInt32; location: Int32; count: Int32; transpose: boolean; value: IntPtr)>(z_ProgramUniformMatrix4x2fv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniformMatrix4x2fv(&program: UInt32; location: Int32; count: Int32; transpose: boolean; value: IntPtr);
    begin
      z_ProgramUniformMatrix4x2fv_ovr_2(&program, location, count, transpose, value);
    end;
    
    public z_ProgramUniformMatrix3x4fv_adr := GetFuncAdr('glProgramUniformMatrix3x4fv');
    public z_ProgramUniformMatrix3x4fv_ovr_0 := GetFuncOrNil&<procedure(&program: UInt32; location: Int32; count: Int32; transpose: boolean; var value: single)>(z_ProgramUniformMatrix3x4fv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniformMatrix3x4fv(&program: UInt32; location: Int32; count: Int32; transpose: boolean; value: array of single);
    begin
      z_ProgramUniformMatrix3x4fv_ovr_0(&program, location, count, transpose, value[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniformMatrix3x4fv(&program: UInt32; location: Int32; count: Int32; transpose: boolean; var value: single);
    begin
      z_ProgramUniformMatrix3x4fv_ovr_0(&program, location, count, transpose, value);
    end;
    public z_ProgramUniformMatrix3x4fv_ovr_2 := GetFuncOrNil&<procedure(&program: UInt32; location: Int32; count: Int32; transpose: boolean; value: IntPtr)>(z_ProgramUniformMatrix3x4fv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniformMatrix3x4fv(&program: UInt32; location: Int32; count: Int32; transpose: boolean; value: IntPtr);
    begin
      z_ProgramUniformMatrix3x4fv_ovr_2(&program, location, count, transpose, value);
    end;
    
    public z_ProgramUniformMatrix4x3fv_adr := GetFuncAdr('glProgramUniformMatrix4x3fv');
    public z_ProgramUniformMatrix4x3fv_ovr_0 := GetFuncOrNil&<procedure(&program: UInt32; location: Int32; count: Int32; transpose: boolean; var value: single)>(z_ProgramUniformMatrix4x3fv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniformMatrix4x3fv(&program: UInt32; location: Int32; count: Int32; transpose: boolean; value: array of single);
    begin
      z_ProgramUniformMatrix4x3fv_ovr_0(&program, location, count, transpose, value[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniformMatrix4x3fv(&program: UInt32; location: Int32; count: Int32; transpose: boolean; var value: single);
    begin
      z_ProgramUniformMatrix4x3fv_ovr_0(&program, location, count, transpose, value);
    end;
    public z_ProgramUniformMatrix4x3fv_ovr_2 := GetFuncOrNil&<procedure(&program: UInt32; location: Int32; count: Int32; transpose: boolean; value: IntPtr)>(z_ProgramUniformMatrix4x3fv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniformMatrix4x3fv(&program: UInt32; location: Int32; count: Int32; transpose: boolean; value: IntPtr);
    begin
      z_ProgramUniformMatrix4x3fv_ovr_2(&program, location, count, transpose, value);
    end;
    
    public z_ProgramUniformMatrix2x3dv_adr := GetFuncAdr('glProgramUniformMatrix2x3dv');
    public z_ProgramUniformMatrix2x3dv_ovr_0 := GetFuncOrNil&<procedure(&program: UInt32; location: Int32; count: Int32; transpose: boolean; var value: real)>(z_ProgramUniformMatrix2x3dv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniformMatrix2x3dv(&program: UInt32; location: Int32; count: Int32; transpose: boolean; value: array of real);
    begin
      z_ProgramUniformMatrix2x3dv_ovr_0(&program, location, count, transpose, value[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniformMatrix2x3dv(&program: UInt32; location: Int32; count: Int32; transpose: boolean; var value: real);
    begin
      z_ProgramUniformMatrix2x3dv_ovr_0(&program, location, count, transpose, value);
    end;
    public z_ProgramUniformMatrix2x3dv_ovr_2 := GetFuncOrNil&<procedure(&program: UInt32; location: Int32; count: Int32; transpose: boolean; value: IntPtr)>(z_ProgramUniformMatrix2x3dv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniformMatrix2x3dv(&program: UInt32; location: Int32; count: Int32; transpose: boolean; value: IntPtr);
    begin
      z_ProgramUniformMatrix2x3dv_ovr_2(&program, location, count, transpose, value);
    end;
    
    public z_ProgramUniformMatrix3x2dv_adr := GetFuncAdr('glProgramUniformMatrix3x2dv');
    public z_ProgramUniformMatrix3x2dv_ovr_0 := GetFuncOrNil&<procedure(&program: UInt32; location: Int32; count: Int32; transpose: boolean; var value: real)>(z_ProgramUniformMatrix3x2dv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniformMatrix3x2dv(&program: UInt32; location: Int32; count: Int32; transpose: boolean; value: array of real);
    begin
      z_ProgramUniformMatrix3x2dv_ovr_0(&program, location, count, transpose, value[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniformMatrix3x2dv(&program: UInt32; location: Int32; count: Int32; transpose: boolean; var value: real);
    begin
      z_ProgramUniformMatrix3x2dv_ovr_0(&program, location, count, transpose, value);
    end;
    public z_ProgramUniformMatrix3x2dv_ovr_2 := GetFuncOrNil&<procedure(&program: UInt32; location: Int32; count: Int32; transpose: boolean; value: IntPtr)>(z_ProgramUniformMatrix3x2dv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniformMatrix3x2dv(&program: UInt32; location: Int32; count: Int32; transpose: boolean; value: IntPtr);
    begin
      z_ProgramUniformMatrix3x2dv_ovr_2(&program, location, count, transpose, value);
    end;
    
    public z_ProgramUniformMatrix2x4dv_adr := GetFuncAdr('glProgramUniformMatrix2x4dv');
    public z_ProgramUniformMatrix2x4dv_ovr_0 := GetFuncOrNil&<procedure(&program: UInt32; location: Int32; count: Int32; transpose: boolean; var value: real)>(z_ProgramUniformMatrix2x4dv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniformMatrix2x4dv(&program: UInt32; location: Int32; count: Int32; transpose: boolean; value: array of real);
    begin
      z_ProgramUniformMatrix2x4dv_ovr_0(&program, location, count, transpose, value[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniformMatrix2x4dv(&program: UInt32; location: Int32; count: Int32; transpose: boolean; var value: real);
    begin
      z_ProgramUniformMatrix2x4dv_ovr_0(&program, location, count, transpose, value);
    end;
    public z_ProgramUniformMatrix2x4dv_ovr_2 := GetFuncOrNil&<procedure(&program: UInt32; location: Int32; count: Int32; transpose: boolean; value: IntPtr)>(z_ProgramUniformMatrix2x4dv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniformMatrix2x4dv(&program: UInt32; location: Int32; count: Int32; transpose: boolean; value: IntPtr);
    begin
      z_ProgramUniformMatrix2x4dv_ovr_2(&program, location, count, transpose, value);
    end;
    
    public z_ProgramUniformMatrix4x2dv_adr := GetFuncAdr('glProgramUniformMatrix4x2dv');
    public z_ProgramUniformMatrix4x2dv_ovr_0 := GetFuncOrNil&<procedure(&program: UInt32; location: Int32; count: Int32; transpose: boolean; var value: real)>(z_ProgramUniformMatrix4x2dv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniformMatrix4x2dv(&program: UInt32; location: Int32; count: Int32; transpose: boolean; value: array of real);
    begin
      z_ProgramUniformMatrix4x2dv_ovr_0(&program, location, count, transpose, value[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniformMatrix4x2dv(&program: UInt32; location: Int32; count: Int32; transpose: boolean; var value: real);
    begin
      z_ProgramUniformMatrix4x2dv_ovr_0(&program, location, count, transpose, value);
    end;
    public z_ProgramUniformMatrix4x2dv_ovr_2 := GetFuncOrNil&<procedure(&program: UInt32; location: Int32; count: Int32; transpose: boolean; value: IntPtr)>(z_ProgramUniformMatrix4x2dv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniformMatrix4x2dv(&program: UInt32; location: Int32; count: Int32; transpose: boolean; value: IntPtr);
    begin
      z_ProgramUniformMatrix4x2dv_ovr_2(&program, location, count, transpose, value);
    end;
    
    public z_ProgramUniformMatrix3x4dv_adr := GetFuncAdr('glProgramUniformMatrix3x4dv');
    public z_ProgramUniformMatrix3x4dv_ovr_0 := GetFuncOrNil&<procedure(&program: UInt32; location: Int32; count: Int32; transpose: boolean; var value: real)>(z_ProgramUniformMatrix3x4dv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniformMatrix3x4dv(&program: UInt32; location: Int32; count: Int32; transpose: boolean; value: array of real);
    begin
      z_ProgramUniformMatrix3x4dv_ovr_0(&program, location, count, transpose, value[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniformMatrix3x4dv(&program: UInt32; location: Int32; count: Int32; transpose: boolean; var value: real);
    begin
      z_ProgramUniformMatrix3x4dv_ovr_0(&program, location, count, transpose, value);
    end;
    public z_ProgramUniformMatrix3x4dv_ovr_2 := GetFuncOrNil&<procedure(&program: UInt32; location: Int32; count: Int32; transpose: boolean; value: IntPtr)>(z_ProgramUniformMatrix3x4dv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniformMatrix3x4dv(&program: UInt32; location: Int32; count: Int32; transpose: boolean; value: IntPtr);
    begin
      z_ProgramUniformMatrix3x4dv_ovr_2(&program, location, count, transpose, value);
    end;
    
    public z_ProgramUniformMatrix4x3dv_adr := GetFuncAdr('glProgramUniformMatrix4x3dv');
    public z_ProgramUniformMatrix4x3dv_ovr_0 := GetFuncOrNil&<procedure(&program: UInt32; location: Int32; count: Int32; transpose: boolean; var value: real)>(z_ProgramUniformMatrix4x3dv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniformMatrix4x3dv(&program: UInt32; location: Int32; count: Int32; transpose: boolean; value: array of real);
    begin
      z_ProgramUniformMatrix4x3dv_ovr_0(&program, location, count, transpose, value[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniformMatrix4x3dv(&program: UInt32; location: Int32; count: Int32; transpose: boolean; var value: real);
    begin
      z_ProgramUniformMatrix4x3dv_ovr_0(&program, location, count, transpose, value);
    end;
    public z_ProgramUniformMatrix4x3dv_ovr_2 := GetFuncOrNil&<procedure(&program: UInt32; location: Int32; count: Int32; transpose: boolean; value: IntPtr)>(z_ProgramUniformMatrix4x3dv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniformMatrix4x3dv(&program: UInt32; location: Int32; count: Int32; transpose: boolean; value: IntPtr);
    begin
      z_ProgramUniformMatrix4x3dv_ovr_2(&program, location, count, transpose, value);
    end;
    
    public z_ValidateProgramPipeline_adr := GetFuncAdr('glValidateProgramPipeline');
    public z_ValidateProgramPipeline_ovr_0 := GetFuncOrNil&<procedure(pipeline: ProgramPipelineName)>(z_ValidateProgramPipeline_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ValidateProgramPipeline(pipeline: ProgramPipelineName);
    begin
      z_ValidateProgramPipeline_ovr_0(pipeline);
    end;
    
    public z_GetProgramPipelineInfoLog_adr := GetFuncAdr('glGetProgramPipelineInfoLog');
    public z_GetProgramPipelineInfoLog_ovr_0 := GetFuncOrNil&<procedure(pipeline: UInt32; bufSize: Int32; var length: Int32; infoLog: IntPtr)>(z_GetProgramPipelineInfoLog_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetProgramPipelineInfoLog(pipeline: UInt32; bufSize: Int32; length: array of Int32; infoLog: IntPtr);
    begin
      z_GetProgramPipelineInfoLog_ovr_0(pipeline, bufSize, length[0], infoLog);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetProgramPipelineInfoLog(pipeline: UInt32; bufSize: Int32; var length: Int32; infoLog: IntPtr);
    begin
      z_GetProgramPipelineInfoLog_ovr_0(pipeline, bufSize, length, infoLog);
    end;
    public z_GetProgramPipelineInfoLog_ovr_2 := GetFuncOrNil&<procedure(pipeline: UInt32; bufSize: Int32; length: IntPtr; infoLog: IntPtr)>(z_GetProgramPipelineInfoLog_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetProgramPipelineInfoLog(pipeline: UInt32; bufSize: Int32; length: IntPtr; infoLog: IntPtr);
    begin
      z_GetProgramPipelineInfoLog_ovr_2(pipeline, bufSize, length, infoLog);
    end;
    
  end;
  
  glShaderAtomicCountersARB = sealed class
    public static function GetFuncAdr([MarshalAs(UnmanagedType.LPStr)] lpszProc: string): IntPtr;
    external 'opengl32.dll' name 'wglGetProcAddress';
    public static function GetFuncOrNil<T>(fadr: IntPtr) :=
    fadr=IntPtr.Zero ? default(T) :
    Marshal.GetDelegateForFunctionPointer&<T>(fadr);
    
    public z_GetActiveAtomicCounterBufferiv_adr := GetFuncAdr('glGetActiveAtomicCounterBufferiv');
    public z_GetActiveAtomicCounterBufferiv_ovr_0 := GetFuncOrNil&<procedure(&program: UInt32; bufferIndex: UInt32; pname: AtomicCounterBufferPName; var &params: Int32)>(z_GetActiveAtomicCounterBufferiv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetActiveAtomicCounterBufferiv(&program: UInt32; bufferIndex: UInt32; pname: AtomicCounterBufferPName; &params: array of Int32);
    begin
      z_GetActiveAtomicCounterBufferiv_ovr_0(&program, bufferIndex, pname, &params[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetActiveAtomicCounterBufferiv(&program: UInt32; bufferIndex: UInt32; pname: AtomicCounterBufferPName; var &params: Int32);
    begin
      z_GetActiveAtomicCounterBufferiv_ovr_0(&program, bufferIndex, pname, &params);
    end;
    public z_GetActiveAtomicCounterBufferiv_ovr_2 := GetFuncOrNil&<procedure(&program: UInt32; bufferIndex: UInt32; pname: AtomicCounterBufferPName; &params: IntPtr)>(z_GetActiveAtomicCounterBufferiv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetActiveAtomicCounterBufferiv(&program: UInt32; bufferIndex: UInt32; pname: AtomicCounterBufferPName; &params: IntPtr);
    begin
      z_GetActiveAtomicCounterBufferiv_ovr_2(&program, bufferIndex, pname, &params);
    end;
    
  end;
  
  glShaderImageLoadStoreARB = sealed class
    public static function GetFuncAdr([MarshalAs(UnmanagedType.LPStr)] lpszProc: string): IntPtr;
    external 'opengl32.dll' name 'wglGetProcAddress';
    public static function GetFuncOrNil<T>(fadr: IntPtr) :=
    fadr=IntPtr.Zero ? default(T) :
    Marshal.GetDelegateForFunctionPointer&<T>(fadr);
    
    public z_BindImageTexture_adr := GetFuncAdr('glBindImageTexture');
    public z_BindImageTexture_ovr_0 := GetFuncOrNil&<procedure(&unit: UInt32; texture: TextureName; level: Int32; layered: boolean; layer: Int32; access: BufferAccessARB; format: InternalFormat)>(z_BindImageTexture_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure BindImageTexture(&unit: UInt32; texture: TextureName; level: Int32; layered: boolean; layer: Int32; access: BufferAccessARB; format: InternalFormat);
    begin
      z_BindImageTexture_ovr_0(&unit, texture, level, layered, layer, access, format);
    end;
    
    public z_MemoryBarrier_adr := GetFuncAdr('glMemoryBarrier');
    public z_MemoryBarrier_ovr_0 := GetFuncOrNil&<procedure(barriers: MemoryBarrierMask)>(z_MemoryBarrier_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MemoryBarrier(barriers: MemoryBarrierMask);
    begin
      z_MemoryBarrier_ovr_0(barriers);
    end;
    
  end;
  
  glShaderObjectsARB = sealed class
    public static function GetFuncAdr([MarshalAs(UnmanagedType.LPStr)] lpszProc: string): IntPtr;
    external 'opengl32.dll' name 'wglGetProcAddress';
    public static function GetFuncOrNil<T>(fadr: IntPtr) :=
    fadr=IntPtr.Zero ? default(T) :
    Marshal.GetDelegateForFunctionPointer&<T>(fadr);
    
    public z_DeleteObjectARB_adr := GetFuncAdr('glDeleteObjectARB');
    public z_DeleteObjectARB_ovr_0 := GetFuncOrNil&<procedure(obj: GLhandleARB)>(z_DeleteObjectARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure DeleteObjectARB(obj: GLhandleARB);
    begin
      z_DeleteObjectARB_ovr_0(obj);
    end;
    
    public z_GetHandleARB_adr := GetFuncAdr('glGetHandleARB');
    public z_GetHandleARB_ovr_0 := GetFuncOrNil&<function(pname: DummyEnum): GLhandleARB>(z_GetHandleARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetHandleARB(pname: DummyEnum): GLhandleARB;
    begin
      Result := z_GetHandleARB_ovr_0(pname);
    end;
    
    public z_DetachObjectARB_adr := GetFuncAdr('glDetachObjectARB');
    public z_DetachObjectARB_ovr_0 := GetFuncOrNil&<procedure(containerObj: GLhandleARB; attachedObj: GLhandleARB)>(z_DetachObjectARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure DetachObjectARB(containerObj: GLhandleARB; attachedObj: GLhandleARB);
    begin
      z_DetachObjectARB_ovr_0(containerObj, attachedObj);
    end;
    
    public z_CreateShaderObjectARB_adr := GetFuncAdr('glCreateShaderObjectARB');
    public z_CreateShaderObjectARB_ovr_0 := GetFuncOrNil&<function(_shaderType: ShaderType): GLhandleARB>(z_CreateShaderObjectARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function CreateShaderObjectARB(_shaderType: ShaderType): GLhandleARB;
    begin
      Result := z_CreateShaderObjectARB_ovr_0(_shaderType);
    end;
    
    public z_ShaderSourceARB_adr := GetFuncAdr('glShaderSourceARB');
    public z_ShaderSourceARB_ovr_0 := GetFuncOrNil&<procedure(shaderObj: GLhandleARB; count: Int32; var _string: IntPtr; var length: Int32)>(z_ShaderSourceARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ShaderSourceARB(shaderObj: GLhandleARB; count: Int32; _string: array of string; length: array of Int32);
    begin
      var par_3_str_ptr := _string.ConvertAll(arr_el1->Marshal.StringToHGlobalAnsi(arr_el1));
      z_ShaderSourceARB_ovr_0(shaderObj, count, par_3_str_ptr[0], length[0]);
      foreach var arr_el1 in par_3_str_ptr do Marshal.FreeHGlobal(arr_el1);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ShaderSourceARB(shaderObj: GLhandleARB; count: Int32; _string: array of string; var length: Int32);
    begin
      var par_3_str_ptr := _string.ConvertAll(arr_el1->Marshal.StringToHGlobalAnsi(arr_el1));
      z_ShaderSourceARB_ovr_0(shaderObj, count, par_3_str_ptr[0], length);
      foreach var arr_el1 in par_3_str_ptr do Marshal.FreeHGlobal(arr_el1);
    end;
    public z_ShaderSourceARB_ovr_2 := GetFuncOrNil&<procedure(shaderObj: GLhandleARB; count: Int32; var _string: IntPtr; length: IntPtr)>(z_ShaderSourceARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ShaderSourceARB(shaderObj: GLhandleARB; count: Int32; _string: array of string; length: IntPtr);
    begin
      var par_3_str_ptr := _string.ConvertAll(arr_el1->Marshal.StringToHGlobalAnsi(arr_el1));
      z_ShaderSourceARB_ovr_2(shaderObj, count, par_3_str_ptr[0], length);
      foreach var arr_el1 in par_3_str_ptr do Marshal.FreeHGlobal(arr_el1);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ShaderSourceARB(shaderObj: GLhandleARB; count: Int32; _string: array of IntPtr; length: array of Int32);
    begin
      z_ShaderSourceARB_ovr_0(shaderObj, count, _string[0], length[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ShaderSourceARB(shaderObj: GLhandleARB; count: Int32; _string: array of IntPtr; var length: Int32);
    begin
      z_ShaderSourceARB_ovr_0(shaderObj, count, _string[0], length);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ShaderSourceARB(shaderObj: GLhandleARB; count: Int32; _string: array of IntPtr; length: IntPtr);
    begin
      z_ShaderSourceARB_ovr_2(shaderObj, count, _string[0], length);
    end;
    public z_ShaderSourceARB_ovr_6 := GetFuncOrNil&<procedure(shaderObj: GLhandleARB; count: Int32; _string: IntPtr; var length: Int32)>(z_ShaderSourceARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ShaderSourceARB(shaderObj: GLhandleARB; count: Int32; _string: IntPtr; length: array of Int32);
    begin
      z_ShaderSourceARB_ovr_6(shaderObj, count, _string, length[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ShaderSourceARB(shaderObj: GLhandleARB; count: Int32; _string: IntPtr; var length: Int32);
    begin
      z_ShaderSourceARB_ovr_6(shaderObj, count, _string, length);
    end;
    public z_ShaderSourceARB_ovr_8 := GetFuncOrNil&<procedure(shaderObj: GLhandleARB; count: Int32; _string: IntPtr; length: IntPtr)>(z_ShaderSourceARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ShaderSourceARB(shaderObj: GLhandleARB; count: Int32; _string: IntPtr; length: IntPtr);
    begin
      z_ShaderSourceARB_ovr_8(shaderObj, count, _string, length);
    end;
    
    public z_CompileShaderARB_adr := GetFuncAdr('glCompileShaderARB');
    public z_CompileShaderARB_ovr_0 := GetFuncOrNil&<procedure(shaderObj: GLhandleARB)>(z_CompileShaderARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure CompileShaderARB(shaderObj: GLhandleARB);
    begin
      z_CompileShaderARB_ovr_0(shaderObj);
    end;
    
    public z_CreateProgramObjectARB_adr := GetFuncAdr('glCreateProgramObjectARB');
    public z_CreateProgramObjectARB_ovr_0 := GetFuncOrNil&<function: GLhandleARB>(z_CreateProgramObjectARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function CreateProgramObjectARB: GLhandleARB;
    begin
      Result := z_CreateProgramObjectARB_ovr_0;
    end;
    
    public z_AttachObjectARB_adr := GetFuncAdr('glAttachObjectARB');
    public z_AttachObjectARB_ovr_0 := GetFuncOrNil&<procedure(containerObj: GLhandleARB; obj: GLhandleARB)>(z_AttachObjectARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure AttachObjectARB(containerObj: GLhandleARB; obj: GLhandleARB);
    begin
      z_AttachObjectARB_ovr_0(containerObj, obj);
    end;
    
    public z_LinkProgramARB_adr := GetFuncAdr('glLinkProgramARB');
    public z_LinkProgramARB_ovr_0 := GetFuncOrNil&<procedure(programObj: GLhandleARB)>(z_LinkProgramARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure LinkProgramARB(programObj: GLhandleARB);
    begin
      z_LinkProgramARB_ovr_0(programObj);
    end;
    
    public z_UseProgramObjectARB_adr := GetFuncAdr('glUseProgramObjectARB');
    public z_UseProgramObjectARB_ovr_0 := GetFuncOrNil&<procedure(programObj: GLhandleARB)>(z_UseProgramObjectARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure UseProgramObjectARB(programObj: GLhandleARB);
    begin
      z_UseProgramObjectARB_ovr_0(programObj);
    end;
    
    public z_ValidateProgramARB_adr := GetFuncAdr('glValidateProgramARB');
    public z_ValidateProgramARB_ovr_0 := GetFuncOrNil&<procedure(programObj: GLhandleARB)>(z_ValidateProgramARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ValidateProgramARB(programObj: GLhandleARB);
    begin
      z_ValidateProgramARB_ovr_0(programObj);
    end;
    
    public z_Uniform1fARB_adr := GetFuncAdr('glUniform1fARB');
    public z_Uniform1fARB_ovr_0 := GetFuncOrNil&<procedure(location: Int32; v0: single)>(z_Uniform1fARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Uniform1fARB(location: Int32; v0: single);
    begin
      z_Uniform1fARB_ovr_0(location, v0);
    end;
    
    public z_Uniform2fARB_adr := GetFuncAdr('glUniform2fARB');
    public z_Uniform2fARB_ovr_0 := GetFuncOrNil&<procedure(location: Int32; v0: single; v1: single)>(z_Uniform2fARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Uniform2fARB(location: Int32; v0: single; v1: single);
    begin
      z_Uniform2fARB_ovr_0(location, v0, v1);
    end;
    
    public z_Uniform3fARB_adr := GetFuncAdr('glUniform3fARB');
    public z_Uniform3fARB_ovr_0 := GetFuncOrNil&<procedure(location: Int32; v0: single; v1: single; v2: single)>(z_Uniform3fARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Uniform3fARB(location: Int32; v0: single; v1: single; v2: single);
    begin
      z_Uniform3fARB_ovr_0(location, v0, v1, v2);
    end;
    
    public z_Uniform4fARB_adr := GetFuncAdr('glUniform4fARB');
    public z_Uniform4fARB_ovr_0 := GetFuncOrNil&<procedure(location: Int32; v0: single; v1: single; v2: single; v3: single)>(z_Uniform4fARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Uniform4fARB(location: Int32; v0: single; v1: single; v2: single; v3: single);
    begin
      z_Uniform4fARB_ovr_0(location, v0, v1, v2, v3);
    end;
    
    public z_Uniform1iARB_adr := GetFuncAdr('glUniform1iARB');
    public z_Uniform1iARB_ovr_0 := GetFuncOrNil&<procedure(location: Int32; v0: Int32)>(z_Uniform1iARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Uniform1iARB(location: Int32; v0: Int32);
    begin
      z_Uniform1iARB_ovr_0(location, v0);
    end;
    
    public z_Uniform2iARB_adr := GetFuncAdr('glUniform2iARB');
    public z_Uniform2iARB_ovr_0 := GetFuncOrNil&<procedure(location: Int32; v0: Int32; v1: Int32)>(z_Uniform2iARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Uniform2iARB(location: Int32; v0: Int32; v1: Int32);
    begin
      z_Uniform2iARB_ovr_0(location, v0, v1);
    end;
    
    public z_Uniform3iARB_adr := GetFuncAdr('glUniform3iARB');
    public z_Uniform3iARB_ovr_0 := GetFuncOrNil&<procedure(location: Int32; v0: Int32; v1: Int32; v2: Int32)>(z_Uniform3iARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Uniform3iARB(location: Int32; v0: Int32; v1: Int32; v2: Int32);
    begin
      z_Uniform3iARB_ovr_0(location, v0, v1, v2);
    end;
    
    public z_Uniform4iARB_adr := GetFuncAdr('glUniform4iARB');
    public z_Uniform4iARB_ovr_0 := GetFuncOrNil&<procedure(location: Int32; v0: Int32; v1: Int32; v2: Int32; v3: Int32)>(z_Uniform4iARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Uniform4iARB(location: Int32; v0: Int32; v1: Int32; v2: Int32; v3: Int32);
    begin
      z_Uniform4iARB_ovr_0(location, v0, v1, v2, v3);
    end;
    
    public z_Uniform1fvARB_adr := GetFuncAdr('glUniform1fvARB');
    public z_Uniform1fvARB_ovr_0 := GetFuncOrNil&<procedure(location: Int32; count: Int32; var value: single)>(z_Uniform1fvARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Uniform1fvARB(location: Int32; count: Int32; value: array of single);
    begin
      z_Uniform1fvARB_ovr_0(location, count, value[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Uniform1fvARB(location: Int32; count: Int32; var value: single);
    begin
      z_Uniform1fvARB_ovr_0(location, count, value);
    end;
    public z_Uniform1fvARB_ovr_2 := GetFuncOrNil&<procedure(location: Int32; count: Int32; value: IntPtr)>(z_Uniform1fvARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Uniform1fvARB(location: Int32; count: Int32; value: IntPtr);
    begin
      z_Uniform1fvARB_ovr_2(location, count, value);
    end;
    
    public z_Uniform2fvARB_adr := GetFuncAdr('glUniform2fvARB');
    public z_Uniform2fvARB_ovr_0 := GetFuncOrNil&<procedure(location: Int32; count: Int32; var value: single)>(z_Uniform2fvARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Uniform2fvARB(location: Int32; count: Int32; value: array of single);
    begin
      z_Uniform2fvARB_ovr_0(location, count, value[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Uniform2fvARB(location: Int32; count: Int32; var value: single);
    begin
      z_Uniform2fvARB_ovr_0(location, count, value);
    end;
    public z_Uniform2fvARB_ovr_2 := GetFuncOrNil&<procedure(location: Int32; count: Int32; value: IntPtr)>(z_Uniform2fvARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Uniform2fvARB(location: Int32; count: Int32; value: IntPtr);
    begin
      z_Uniform2fvARB_ovr_2(location, count, value);
    end;
    
    public z_Uniform3fvARB_adr := GetFuncAdr('glUniform3fvARB');
    public z_Uniform3fvARB_ovr_0 := GetFuncOrNil&<procedure(location: Int32; count: Int32; var value: single)>(z_Uniform3fvARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Uniform3fvARB(location: Int32; count: Int32; value: array of single);
    begin
      z_Uniform3fvARB_ovr_0(location, count, value[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Uniform3fvARB(location: Int32; count: Int32; var value: single);
    begin
      z_Uniform3fvARB_ovr_0(location, count, value);
    end;
    public z_Uniform3fvARB_ovr_2 := GetFuncOrNil&<procedure(location: Int32; count: Int32; value: IntPtr)>(z_Uniform3fvARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Uniform3fvARB(location: Int32; count: Int32; value: IntPtr);
    begin
      z_Uniform3fvARB_ovr_2(location, count, value);
    end;
    
    public z_Uniform4fvARB_adr := GetFuncAdr('glUniform4fvARB');
    public z_Uniform4fvARB_ovr_0 := GetFuncOrNil&<procedure(location: Int32; count: Int32; var value: single)>(z_Uniform4fvARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Uniform4fvARB(location: Int32; count: Int32; value: array of single);
    begin
      z_Uniform4fvARB_ovr_0(location, count, value[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Uniform4fvARB(location: Int32; count: Int32; var value: single);
    begin
      z_Uniform4fvARB_ovr_0(location, count, value);
    end;
    public z_Uniform4fvARB_ovr_2 := GetFuncOrNil&<procedure(location: Int32; count: Int32; value: IntPtr)>(z_Uniform4fvARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Uniform4fvARB(location: Int32; count: Int32; value: IntPtr);
    begin
      z_Uniform4fvARB_ovr_2(location, count, value);
    end;
    
    public z_Uniform1ivARB_adr := GetFuncAdr('glUniform1ivARB');
    public z_Uniform1ivARB_ovr_0 := GetFuncOrNil&<procedure(location: Int32; count: Int32; var value: Int32)>(z_Uniform1ivARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Uniform1ivARB(location: Int32; count: Int32; value: array of Int32);
    begin
      z_Uniform1ivARB_ovr_0(location, count, value[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Uniform1ivARB(location: Int32; count: Int32; var value: Int32);
    begin
      z_Uniform1ivARB_ovr_0(location, count, value);
    end;
    public z_Uniform1ivARB_ovr_2 := GetFuncOrNil&<procedure(location: Int32; count: Int32; value: IntPtr)>(z_Uniform1ivARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Uniform1ivARB(location: Int32; count: Int32; value: IntPtr);
    begin
      z_Uniform1ivARB_ovr_2(location, count, value);
    end;
    
    public z_Uniform2ivARB_adr := GetFuncAdr('glUniform2ivARB');
    public z_Uniform2ivARB_ovr_0 := GetFuncOrNil&<procedure(location: Int32; count: Int32; var value: Int32)>(z_Uniform2ivARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Uniform2ivARB(location: Int32; count: Int32; value: array of Int32);
    begin
      z_Uniform2ivARB_ovr_0(location, count, value[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Uniform2ivARB(location: Int32; count: Int32; var value: Int32);
    begin
      z_Uniform2ivARB_ovr_0(location, count, value);
    end;
    public z_Uniform2ivARB_ovr_2 := GetFuncOrNil&<procedure(location: Int32; count: Int32; value: IntPtr)>(z_Uniform2ivARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Uniform2ivARB(location: Int32; count: Int32; value: IntPtr);
    begin
      z_Uniform2ivARB_ovr_2(location, count, value);
    end;
    
    public z_Uniform3ivARB_adr := GetFuncAdr('glUniform3ivARB');
    public z_Uniform3ivARB_ovr_0 := GetFuncOrNil&<procedure(location: Int32; count: Int32; var value: Int32)>(z_Uniform3ivARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Uniform3ivARB(location: Int32; count: Int32; value: array of Int32);
    begin
      z_Uniform3ivARB_ovr_0(location, count, value[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Uniform3ivARB(location: Int32; count: Int32; var value: Int32);
    begin
      z_Uniform3ivARB_ovr_0(location, count, value);
    end;
    public z_Uniform3ivARB_ovr_2 := GetFuncOrNil&<procedure(location: Int32; count: Int32; value: IntPtr)>(z_Uniform3ivARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Uniform3ivARB(location: Int32; count: Int32; value: IntPtr);
    begin
      z_Uniform3ivARB_ovr_2(location, count, value);
    end;
    
    public z_Uniform4ivARB_adr := GetFuncAdr('glUniform4ivARB');
    public z_Uniform4ivARB_ovr_0 := GetFuncOrNil&<procedure(location: Int32; count: Int32; var value: Int32)>(z_Uniform4ivARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Uniform4ivARB(location: Int32; count: Int32; value: array of Int32);
    begin
      z_Uniform4ivARB_ovr_0(location, count, value[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Uniform4ivARB(location: Int32; count: Int32; var value: Int32);
    begin
      z_Uniform4ivARB_ovr_0(location, count, value);
    end;
    public z_Uniform4ivARB_ovr_2 := GetFuncOrNil&<procedure(location: Int32; count: Int32; value: IntPtr)>(z_Uniform4ivARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Uniform4ivARB(location: Int32; count: Int32; value: IntPtr);
    begin
      z_Uniform4ivARB_ovr_2(location, count, value);
    end;
    
    public z_UniformMatrix2fvARB_adr := GetFuncAdr('glUniformMatrix2fvARB');
    public z_UniformMatrix2fvARB_ovr_0 := GetFuncOrNil&<procedure(location: Int32; count: Int32; transpose: boolean; var value: single)>(z_UniformMatrix2fvARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure UniformMatrix2fvARB(location: Int32; count: Int32; transpose: boolean; value: array of single);
    begin
      z_UniformMatrix2fvARB_ovr_0(location, count, transpose, value[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure UniformMatrix2fvARB(location: Int32; count: Int32; transpose: boolean; var value: single);
    begin
      z_UniformMatrix2fvARB_ovr_0(location, count, transpose, value);
    end;
    public z_UniformMatrix2fvARB_ovr_2 := GetFuncOrNil&<procedure(location: Int32; count: Int32; transpose: boolean; value: IntPtr)>(z_UniformMatrix2fvARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure UniformMatrix2fvARB(location: Int32; count: Int32; transpose: boolean; value: IntPtr);
    begin
      z_UniformMatrix2fvARB_ovr_2(location, count, transpose, value);
    end;
    
    public z_UniformMatrix3fvARB_adr := GetFuncAdr('glUniformMatrix3fvARB');
    public z_UniformMatrix3fvARB_ovr_0 := GetFuncOrNil&<procedure(location: Int32; count: Int32; transpose: boolean; var value: single)>(z_UniformMatrix3fvARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure UniformMatrix3fvARB(location: Int32; count: Int32; transpose: boolean; value: array of single);
    begin
      z_UniformMatrix3fvARB_ovr_0(location, count, transpose, value[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure UniformMatrix3fvARB(location: Int32; count: Int32; transpose: boolean; var value: single);
    begin
      z_UniformMatrix3fvARB_ovr_0(location, count, transpose, value);
    end;
    public z_UniformMatrix3fvARB_ovr_2 := GetFuncOrNil&<procedure(location: Int32; count: Int32; transpose: boolean; value: IntPtr)>(z_UniformMatrix3fvARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure UniformMatrix3fvARB(location: Int32; count: Int32; transpose: boolean; value: IntPtr);
    begin
      z_UniformMatrix3fvARB_ovr_2(location, count, transpose, value);
    end;
    
    public z_UniformMatrix4fvARB_adr := GetFuncAdr('glUniformMatrix4fvARB');
    public z_UniformMatrix4fvARB_ovr_0 := GetFuncOrNil&<procedure(location: Int32; count: Int32; transpose: boolean; var value: single)>(z_UniformMatrix4fvARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure UniformMatrix4fvARB(location: Int32; count: Int32; transpose: boolean; value: array of single);
    begin
      z_UniformMatrix4fvARB_ovr_0(location, count, transpose, value[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure UniformMatrix4fvARB(location: Int32; count: Int32; transpose: boolean; var value: single);
    begin
      z_UniformMatrix4fvARB_ovr_0(location, count, transpose, value);
    end;
    public z_UniformMatrix4fvARB_ovr_2 := GetFuncOrNil&<procedure(location: Int32; count: Int32; transpose: boolean; value: IntPtr)>(z_UniformMatrix4fvARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure UniformMatrix4fvARB(location: Int32; count: Int32; transpose: boolean; value: IntPtr);
    begin
      z_UniformMatrix4fvARB_ovr_2(location, count, transpose, value);
    end;
    
    public z_GetObjectParameterfvARB_adr := GetFuncAdr('glGetObjectParameterfvARB');
    public z_GetObjectParameterfvARB_ovr_0 := GetFuncOrNil&<procedure(obj: GLhandleARB; pname: DummyEnum; var &params: single)>(z_GetObjectParameterfvARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetObjectParameterfvARB(obj: GLhandleARB; pname: DummyEnum; &params: array of single);
    begin
      z_GetObjectParameterfvARB_ovr_0(obj, pname, &params[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetObjectParameterfvARB(obj: GLhandleARB; pname: DummyEnum; var &params: single);
    begin
      z_GetObjectParameterfvARB_ovr_0(obj, pname, &params);
    end;
    public z_GetObjectParameterfvARB_ovr_2 := GetFuncOrNil&<procedure(obj: GLhandleARB; pname: DummyEnum; &params: IntPtr)>(z_GetObjectParameterfvARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetObjectParameterfvARB(obj: GLhandleARB; pname: DummyEnum; &params: IntPtr);
    begin
      z_GetObjectParameterfvARB_ovr_2(obj, pname, &params);
    end;
    
    public z_GetObjectParameterivARB_adr := GetFuncAdr('glGetObjectParameterivARB');
    public z_GetObjectParameterivARB_ovr_0 := GetFuncOrNil&<procedure(obj: GLhandleARB; pname: DummyEnum; var &params: Int32)>(z_GetObjectParameterivARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetObjectParameterivARB(obj: GLhandleARB; pname: DummyEnum; &params: array of Int32);
    begin
      z_GetObjectParameterivARB_ovr_0(obj, pname, &params[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetObjectParameterivARB(obj: GLhandleARB; pname: DummyEnum; var &params: Int32);
    begin
      z_GetObjectParameterivARB_ovr_0(obj, pname, &params);
    end;
    public z_GetObjectParameterivARB_ovr_2 := GetFuncOrNil&<procedure(obj: GLhandleARB; pname: DummyEnum; &params: IntPtr)>(z_GetObjectParameterivARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetObjectParameterivARB(obj: GLhandleARB; pname: DummyEnum; &params: IntPtr);
    begin
      z_GetObjectParameterivARB_ovr_2(obj, pname, &params);
    end;
    
    public z_GetInfoLogARB_adr := GetFuncAdr('glGetInfoLogARB');
    public z_GetInfoLogARB_ovr_0 := GetFuncOrNil&<procedure(obj: GLhandleARB; maxLength: Int32; var length: Int32; infoLog: IntPtr)>(z_GetInfoLogARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetInfoLogARB(obj: GLhandleARB; maxLength: Int32; length: array of Int32; infoLog: IntPtr);
    begin
      z_GetInfoLogARB_ovr_0(obj, maxLength, length[0], infoLog);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetInfoLogARB(obj: GLhandleARB; maxLength: Int32; var length: Int32; infoLog: IntPtr);
    begin
      z_GetInfoLogARB_ovr_0(obj, maxLength, length, infoLog);
    end;
    public z_GetInfoLogARB_ovr_2 := GetFuncOrNil&<procedure(obj: GLhandleARB; maxLength: Int32; length: IntPtr; infoLog: IntPtr)>(z_GetInfoLogARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetInfoLogARB(obj: GLhandleARB; maxLength: Int32; length: IntPtr; infoLog: IntPtr);
    begin
      z_GetInfoLogARB_ovr_2(obj, maxLength, length, infoLog);
    end;
    
    public z_GetAttachedObjectsARB_adr := GetFuncAdr('glGetAttachedObjectsARB');
    public z_GetAttachedObjectsARB_ovr_0 := GetFuncOrNil&<procedure(containerObj: GLhandleARB; maxCount: Int32; var count: Int32; var obj: GLhandleARB)>(z_GetAttachedObjectsARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetAttachedObjectsARB(containerObj: GLhandleARB; maxCount: Int32; count: array of Int32; obj: array of GLhandleARB);
    begin
      z_GetAttachedObjectsARB_ovr_0(containerObj, maxCount, count[0], obj[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetAttachedObjectsARB(containerObj: GLhandleARB; maxCount: Int32; count: array of Int32; var obj: GLhandleARB);
    begin
      z_GetAttachedObjectsARB_ovr_0(containerObj, maxCount, count[0], obj);
    end;
    public z_GetAttachedObjectsARB_ovr_2 := GetFuncOrNil&<procedure(containerObj: GLhandleARB; maxCount: Int32; var count: Int32; obj: IntPtr)>(z_GetAttachedObjectsARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetAttachedObjectsARB(containerObj: GLhandleARB; maxCount: Int32; count: array of Int32; obj: IntPtr);
    begin
      z_GetAttachedObjectsARB_ovr_2(containerObj, maxCount, count[0], obj);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetAttachedObjectsARB(containerObj: GLhandleARB; maxCount: Int32; var count: Int32; obj: array of GLhandleARB);
    begin
      z_GetAttachedObjectsARB_ovr_0(containerObj, maxCount, count, obj[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetAttachedObjectsARB(containerObj: GLhandleARB; maxCount: Int32; var count: Int32; var obj: GLhandleARB);
    begin
      z_GetAttachedObjectsARB_ovr_0(containerObj, maxCount, count, obj);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetAttachedObjectsARB(containerObj: GLhandleARB; maxCount: Int32; var count: Int32; obj: IntPtr);
    begin
      z_GetAttachedObjectsARB_ovr_2(containerObj, maxCount, count, obj);
    end;
    public z_GetAttachedObjectsARB_ovr_6 := GetFuncOrNil&<procedure(containerObj: GLhandleARB; maxCount: Int32; count: IntPtr; var obj: GLhandleARB)>(z_GetAttachedObjectsARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetAttachedObjectsARB(containerObj: GLhandleARB; maxCount: Int32; count: IntPtr; obj: array of GLhandleARB);
    begin
      z_GetAttachedObjectsARB_ovr_6(containerObj, maxCount, count, obj[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetAttachedObjectsARB(containerObj: GLhandleARB; maxCount: Int32; count: IntPtr; var obj: GLhandleARB);
    begin
      z_GetAttachedObjectsARB_ovr_6(containerObj, maxCount, count, obj);
    end;
    public z_GetAttachedObjectsARB_ovr_8 := GetFuncOrNil&<procedure(containerObj: GLhandleARB; maxCount: Int32; count: IntPtr; obj: IntPtr)>(z_GetAttachedObjectsARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetAttachedObjectsARB(containerObj: GLhandleARB; maxCount: Int32; count: IntPtr; obj: IntPtr);
    begin
      z_GetAttachedObjectsARB_ovr_8(containerObj, maxCount, count, obj);
    end;
    
    public z_GetUniformLocationARB_adr := GetFuncAdr('glGetUniformLocationARB');
    public z_GetUniformLocationARB_ovr_0 := GetFuncOrNil&<function(programObj: GLhandleARB; name: IntPtr): Int32>(z_GetUniformLocationARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetUniformLocationARB(programObj: GLhandleARB; name: string): Int32;
    begin
      var par_2_str_ptr := Marshal.StringToHGlobalAnsi(name);
      Result := z_GetUniformLocationARB_ovr_0(programObj, par_2_str_ptr);
      Marshal.FreeHGlobal(par_2_str_ptr);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetUniformLocationARB(programObj: GLhandleARB; name: IntPtr): Int32;
    begin
      Result := z_GetUniformLocationARB_ovr_0(programObj, name);
    end;
    
    public z_GetActiveUniformARB_adr := GetFuncAdr('glGetActiveUniformARB');
    public z_GetActiveUniformARB_ovr_0 := GetFuncOrNil&<procedure(programObj: GLhandleARB; index: UInt32; maxLength: Int32; var length: Int32; var size: Int32; var &type: UniformType; name: IntPtr)>(z_GetActiveUniformARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetActiveUniformARB(programObj: GLhandleARB; index: UInt32; maxLength: Int32; length: array of Int32; size: array of Int32; &type: array of UniformType; name: IntPtr);
    begin
      z_GetActiveUniformARB_ovr_0(programObj, index, maxLength, length[0], size[0], &type[0], name);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetActiveUniformARB(programObj: GLhandleARB; index: UInt32; maxLength: Int32; length: array of Int32; size: array of Int32; var &type: UniformType; name: IntPtr);
    begin
      z_GetActiveUniformARB_ovr_0(programObj, index, maxLength, length[0], size[0], &type, name);
    end;
    public z_GetActiveUniformARB_ovr_2 := GetFuncOrNil&<procedure(programObj: GLhandleARB; index: UInt32; maxLength: Int32; var length: Int32; var size: Int32; &type: IntPtr; name: IntPtr)>(z_GetActiveUniformARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetActiveUniformARB(programObj: GLhandleARB; index: UInt32; maxLength: Int32; length: array of Int32; size: array of Int32; &type: IntPtr; name: IntPtr);
    begin
      z_GetActiveUniformARB_ovr_2(programObj, index, maxLength, length[0], size[0], &type, name);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetActiveUniformARB(programObj: GLhandleARB; index: UInt32; maxLength: Int32; length: array of Int32; var size: Int32; &type: array of UniformType; name: IntPtr);
    begin
      z_GetActiveUniformARB_ovr_0(programObj, index, maxLength, length[0], size, &type[0], name);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetActiveUniformARB(programObj: GLhandleARB; index: UInt32; maxLength: Int32; length: array of Int32; var size: Int32; var &type: UniformType; name: IntPtr);
    begin
      z_GetActiveUniformARB_ovr_0(programObj, index, maxLength, length[0], size, &type, name);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetActiveUniformARB(programObj: GLhandleARB; index: UInt32; maxLength: Int32; length: array of Int32; var size: Int32; &type: IntPtr; name: IntPtr);
    begin
      z_GetActiveUniformARB_ovr_2(programObj, index, maxLength, length[0], size, &type, name);
    end;
    public z_GetActiveUniformARB_ovr_6 := GetFuncOrNil&<procedure(programObj: GLhandleARB; index: UInt32; maxLength: Int32; var length: Int32; size: IntPtr; var &type: UniformType; name: IntPtr)>(z_GetActiveUniformARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetActiveUniformARB(programObj: GLhandleARB; index: UInt32; maxLength: Int32; length: array of Int32; size: IntPtr; &type: array of UniformType; name: IntPtr);
    begin
      z_GetActiveUniformARB_ovr_6(programObj, index, maxLength, length[0], size, &type[0], name);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetActiveUniformARB(programObj: GLhandleARB; index: UInt32; maxLength: Int32; length: array of Int32; size: IntPtr; var &type: UniformType; name: IntPtr);
    begin
      z_GetActiveUniformARB_ovr_6(programObj, index, maxLength, length[0], size, &type, name);
    end;
    public z_GetActiveUniformARB_ovr_8 := GetFuncOrNil&<procedure(programObj: GLhandleARB; index: UInt32; maxLength: Int32; var length: Int32; size: IntPtr; &type: IntPtr; name: IntPtr)>(z_GetActiveUniformARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetActiveUniformARB(programObj: GLhandleARB; index: UInt32; maxLength: Int32; length: array of Int32; size: IntPtr; &type: IntPtr; name: IntPtr);
    begin
      z_GetActiveUniformARB_ovr_8(programObj, index, maxLength, length[0], size, &type, name);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetActiveUniformARB(programObj: GLhandleARB; index: UInt32; maxLength: Int32; var length: Int32; size: array of Int32; &type: array of UniformType; name: IntPtr);
    begin
      z_GetActiveUniformARB_ovr_0(programObj, index, maxLength, length, size[0], &type[0], name);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetActiveUniformARB(programObj: GLhandleARB; index: UInt32; maxLength: Int32; var length: Int32; size: array of Int32; var &type: UniformType; name: IntPtr);
    begin
      z_GetActiveUniformARB_ovr_0(programObj, index, maxLength, length, size[0], &type, name);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetActiveUniformARB(programObj: GLhandleARB; index: UInt32; maxLength: Int32; var length: Int32; size: array of Int32; &type: IntPtr; name: IntPtr);
    begin
      z_GetActiveUniformARB_ovr_2(programObj, index, maxLength, length, size[0], &type, name);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetActiveUniformARB(programObj: GLhandleARB; index: UInt32; maxLength: Int32; var length: Int32; var size: Int32; &type: array of UniformType; name: IntPtr);
    begin
      z_GetActiveUniformARB_ovr_0(programObj, index, maxLength, length, size, &type[0], name);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetActiveUniformARB(programObj: GLhandleARB; index: UInt32; maxLength: Int32; var length: Int32; var size: Int32; var &type: UniformType; name: IntPtr);
    begin
      z_GetActiveUniformARB_ovr_0(programObj, index, maxLength, length, size, &type, name);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetActiveUniformARB(programObj: GLhandleARB; index: UInt32; maxLength: Int32; var length: Int32; var size: Int32; &type: IntPtr; name: IntPtr);
    begin
      z_GetActiveUniformARB_ovr_2(programObj, index, maxLength, length, size, &type, name);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetActiveUniformARB(programObj: GLhandleARB; index: UInt32; maxLength: Int32; var length: Int32; size: IntPtr; &type: array of UniformType; name: IntPtr);
    begin
      z_GetActiveUniformARB_ovr_6(programObj, index, maxLength, length, size, &type[0], name);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetActiveUniformARB(programObj: GLhandleARB; index: UInt32; maxLength: Int32; var length: Int32; size: IntPtr; var &type: UniformType; name: IntPtr);
    begin
      z_GetActiveUniformARB_ovr_6(programObj, index, maxLength, length, size, &type, name);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetActiveUniformARB(programObj: GLhandleARB; index: UInt32; maxLength: Int32; var length: Int32; size: IntPtr; &type: IntPtr; name: IntPtr);
    begin
      z_GetActiveUniformARB_ovr_8(programObj, index, maxLength, length, size, &type, name);
    end;
    public z_GetActiveUniformARB_ovr_18 := GetFuncOrNil&<procedure(programObj: GLhandleARB; index: UInt32; maxLength: Int32; length: IntPtr; var size: Int32; var &type: UniformType; name: IntPtr)>(z_GetActiveUniformARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetActiveUniformARB(programObj: GLhandleARB; index: UInt32; maxLength: Int32; length: IntPtr; size: array of Int32; &type: array of UniformType; name: IntPtr);
    begin
      z_GetActiveUniformARB_ovr_18(programObj, index, maxLength, length, size[0], &type[0], name);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetActiveUniformARB(programObj: GLhandleARB; index: UInt32; maxLength: Int32; length: IntPtr; size: array of Int32; var &type: UniformType; name: IntPtr);
    begin
      z_GetActiveUniformARB_ovr_18(programObj, index, maxLength, length, size[0], &type, name);
    end;
    public z_GetActiveUniformARB_ovr_20 := GetFuncOrNil&<procedure(programObj: GLhandleARB; index: UInt32; maxLength: Int32; length: IntPtr; var size: Int32; &type: IntPtr; name: IntPtr)>(z_GetActiveUniformARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetActiveUniformARB(programObj: GLhandleARB; index: UInt32; maxLength: Int32; length: IntPtr; size: array of Int32; &type: IntPtr; name: IntPtr);
    begin
      z_GetActiveUniformARB_ovr_20(programObj, index, maxLength, length, size[0], &type, name);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetActiveUniformARB(programObj: GLhandleARB; index: UInt32; maxLength: Int32; length: IntPtr; var size: Int32; &type: array of UniformType; name: IntPtr);
    begin
      z_GetActiveUniformARB_ovr_18(programObj, index, maxLength, length, size, &type[0], name);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetActiveUniformARB(programObj: GLhandleARB; index: UInt32; maxLength: Int32; length: IntPtr; var size: Int32; var &type: UniformType; name: IntPtr);
    begin
      z_GetActiveUniformARB_ovr_18(programObj, index, maxLength, length, size, &type, name);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetActiveUniformARB(programObj: GLhandleARB; index: UInt32; maxLength: Int32; length: IntPtr; var size: Int32; &type: IntPtr; name: IntPtr);
    begin
      z_GetActiveUniformARB_ovr_20(programObj, index, maxLength, length, size, &type, name);
    end;
    public z_GetActiveUniformARB_ovr_24 := GetFuncOrNil&<procedure(programObj: GLhandleARB; index: UInt32; maxLength: Int32; length: IntPtr; size: IntPtr; var &type: UniformType; name: IntPtr)>(z_GetActiveUniformARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetActiveUniformARB(programObj: GLhandleARB; index: UInt32; maxLength: Int32; length: IntPtr; size: IntPtr; &type: array of UniformType; name: IntPtr);
    begin
      z_GetActiveUniformARB_ovr_24(programObj, index, maxLength, length, size, &type[0], name);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetActiveUniformARB(programObj: GLhandleARB; index: UInt32; maxLength: Int32; length: IntPtr; size: IntPtr; var &type: UniformType; name: IntPtr);
    begin
      z_GetActiveUniformARB_ovr_24(programObj, index, maxLength, length, size, &type, name);
    end;
    public z_GetActiveUniformARB_ovr_26 := GetFuncOrNil&<procedure(programObj: GLhandleARB; index: UInt32; maxLength: Int32; length: IntPtr; size: IntPtr; &type: IntPtr; name: IntPtr)>(z_GetActiveUniformARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetActiveUniformARB(programObj: GLhandleARB; index: UInt32; maxLength: Int32; length: IntPtr; size: IntPtr; &type: IntPtr; name: IntPtr);
    begin
      z_GetActiveUniformARB_ovr_26(programObj, index, maxLength, length, size, &type, name);
    end;
    
    public z_GetUniformfvARB_adr := GetFuncAdr('glGetUniformfvARB');
    public z_GetUniformfvARB_ovr_0 := GetFuncOrNil&<procedure(programObj: GLhandleARB; location: Int32; var &params: single)>(z_GetUniformfvARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetUniformfvARB(programObj: GLhandleARB; location: Int32; &params: array of single);
    begin
      z_GetUniformfvARB_ovr_0(programObj, location, &params[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetUniformfvARB(programObj: GLhandleARB; location: Int32; var &params: single);
    begin
      z_GetUniformfvARB_ovr_0(programObj, location, &params);
    end;
    public z_GetUniformfvARB_ovr_2 := GetFuncOrNil&<procedure(programObj: GLhandleARB; location: Int32; &params: IntPtr)>(z_GetUniformfvARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetUniformfvARB(programObj: GLhandleARB; location: Int32; &params: IntPtr);
    begin
      z_GetUniformfvARB_ovr_2(programObj, location, &params);
    end;
    
    public z_GetUniformivARB_adr := GetFuncAdr('glGetUniformivARB');
    public z_GetUniformivARB_ovr_0 := GetFuncOrNil&<procedure(programObj: GLhandleARB; location: Int32; var &params: Int32)>(z_GetUniformivARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetUniformivARB(programObj: GLhandleARB; location: Int32; &params: array of Int32);
    begin
      z_GetUniformivARB_ovr_0(programObj, location, &params[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetUniformivARB(programObj: GLhandleARB; location: Int32; var &params: Int32);
    begin
      z_GetUniformivARB_ovr_0(programObj, location, &params);
    end;
    public z_GetUniformivARB_ovr_2 := GetFuncOrNil&<procedure(programObj: GLhandleARB; location: Int32; &params: IntPtr)>(z_GetUniformivARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetUniformivARB(programObj: GLhandleARB; location: Int32; &params: IntPtr);
    begin
      z_GetUniformivARB_ovr_2(programObj, location, &params);
    end;
    
    public z_GetShaderSourceARB_adr := GetFuncAdr('glGetShaderSourceARB');
    public z_GetShaderSourceARB_ovr_0 := GetFuncOrNil&<procedure(obj: GLhandleARB; maxLength: Int32; var length: Int32; source: IntPtr)>(z_GetShaderSourceARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetShaderSourceARB(obj: GLhandleARB; maxLength: Int32; length: array of Int32; source: IntPtr);
    begin
      z_GetShaderSourceARB_ovr_0(obj, maxLength, length[0], source);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetShaderSourceARB(obj: GLhandleARB; maxLength: Int32; var length: Int32; source: IntPtr);
    begin
      z_GetShaderSourceARB_ovr_0(obj, maxLength, length, source);
    end;
    public z_GetShaderSourceARB_ovr_2 := GetFuncOrNil&<procedure(obj: GLhandleARB; maxLength: Int32; length: IntPtr; source: IntPtr)>(z_GetShaderSourceARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetShaderSourceARB(obj: GLhandleARB; maxLength: Int32; length: IntPtr; source: IntPtr);
    begin
      z_GetShaderSourceARB_ovr_2(obj, maxLength, length, source);
    end;
    
  end;
  
  glShaderStorageBufferObjectARB = sealed class
    public static function GetFuncAdr([MarshalAs(UnmanagedType.LPStr)] lpszProc: string): IntPtr;
    external 'opengl32.dll' name 'wglGetProcAddress';
    public static function GetFuncOrNil<T>(fadr: IntPtr) :=
    fadr=IntPtr.Zero ? default(T) :
    Marshal.GetDelegateForFunctionPointer&<T>(fadr);
    
    public z_ShaderStorageBlockBinding_adr := GetFuncAdr('glShaderStorageBlockBinding');
    public z_ShaderStorageBlockBinding_ovr_0 := GetFuncOrNil&<procedure(&program: ProgramName; storageBlockIndex: UInt32; storageBlockBinding: UInt32)>(z_ShaderStorageBlockBinding_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ShaderStorageBlockBinding(&program: ProgramName; storageBlockIndex: UInt32; storageBlockBinding: UInt32);
    begin
      z_ShaderStorageBlockBinding_ovr_0(&program, storageBlockIndex, storageBlockBinding);
    end;
    
  end;
  
  glShaderSubroutineARB = sealed class
    public static function GetFuncAdr([MarshalAs(UnmanagedType.LPStr)] lpszProc: string): IntPtr;
    external 'opengl32.dll' name 'wglGetProcAddress';
    public static function GetFuncOrNil<T>(fadr: IntPtr) :=
    fadr=IntPtr.Zero ? default(T) :
    Marshal.GetDelegateForFunctionPointer&<T>(fadr);
    
    public z_GetSubroutineUniformLocation_adr := GetFuncAdr('glGetSubroutineUniformLocation');
    public z_GetSubroutineUniformLocation_ovr_0 := GetFuncOrNil&<function(&program: ProgramName; _shadertype: ShaderType; name: IntPtr): Int32>(z_GetSubroutineUniformLocation_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetSubroutineUniformLocation(&program: ProgramName; _shadertype: ShaderType; name: string): Int32;
    begin
      var par_3_str_ptr := Marshal.StringToHGlobalAnsi(name);
      Result := z_GetSubroutineUniformLocation_ovr_0(&program, _shadertype, par_3_str_ptr);
      Marshal.FreeHGlobal(par_3_str_ptr);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetSubroutineUniformLocation(&program: ProgramName; _shadertype: ShaderType; name: IntPtr): Int32;
    begin
      Result := z_GetSubroutineUniformLocation_ovr_0(&program, _shadertype, name);
    end;
    
    public z_GetSubroutineIndex_adr := GetFuncAdr('glGetSubroutineIndex');
    public z_GetSubroutineIndex_ovr_0 := GetFuncOrNil&<function(&program: ProgramName; _shadertype: ShaderType; name: IntPtr): UInt32>(z_GetSubroutineIndex_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetSubroutineIndex(&program: ProgramName; _shadertype: ShaderType; name: string): UInt32;
    begin
      var par_3_str_ptr := Marshal.StringToHGlobalAnsi(name);
      Result := z_GetSubroutineIndex_ovr_0(&program, _shadertype, par_3_str_ptr);
      Marshal.FreeHGlobal(par_3_str_ptr);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetSubroutineIndex(&program: ProgramName; _shadertype: ShaderType; name: IntPtr): UInt32;
    begin
      Result := z_GetSubroutineIndex_ovr_0(&program, _shadertype, name);
    end;
    
    public z_GetActiveSubroutineUniformiv_adr := GetFuncAdr('glGetActiveSubroutineUniformiv');
    public z_GetActiveSubroutineUniformiv_ovr_0 := GetFuncOrNil&<procedure(&program: ProgramName; _shadertype: ShaderType; index: UInt32; pname: SubroutineParameterName; var values: Int32)>(z_GetActiveSubroutineUniformiv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetActiveSubroutineUniformiv(&program: ProgramName; _shadertype: ShaderType; index: UInt32; pname: SubroutineParameterName; values: array of Int32);
    begin
      z_GetActiveSubroutineUniformiv_ovr_0(&program, _shadertype, index, pname, values[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetActiveSubroutineUniformiv(&program: ProgramName; _shadertype: ShaderType; index: UInt32; pname: SubroutineParameterName; var values: Int32);
    begin
      z_GetActiveSubroutineUniformiv_ovr_0(&program, _shadertype, index, pname, values);
    end;
    public z_GetActiveSubroutineUniformiv_ovr_2 := GetFuncOrNil&<procedure(&program: ProgramName; _shadertype: ShaderType; index: UInt32; pname: SubroutineParameterName; values: IntPtr)>(z_GetActiveSubroutineUniformiv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetActiveSubroutineUniformiv(&program: ProgramName; _shadertype: ShaderType; index: UInt32; pname: SubroutineParameterName; values: IntPtr);
    begin
      z_GetActiveSubroutineUniformiv_ovr_2(&program, _shadertype, index, pname, values);
    end;
    
    public z_GetActiveSubroutineUniformName_adr := GetFuncAdr('glGetActiveSubroutineUniformName');
    public z_GetActiveSubroutineUniformName_ovr_0 := GetFuncOrNil&<procedure(&program: UInt32; _shadertype: ShaderType; index: UInt32; bufSize: Int32; var length: Int32; name: IntPtr)>(z_GetActiveSubroutineUniformName_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetActiveSubroutineUniformName(&program: UInt32; _shadertype: ShaderType; index: UInt32; bufSize: Int32; length: array of Int32; name: IntPtr);
    begin
      z_GetActiveSubroutineUniformName_ovr_0(&program, _shadertype, index, bufSize, length[0], name);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetActiveSubroutineUniformName(&program: UInt32; _shadertype: ShaderType; index: UInt32; bufSize: Int32; var length: Int32; name: IntPtr);
    begin
      z_GetActiveSubroutineUniformName_ovr_0(&program, _shadertype, index, bufSize, length, name);
    end;
    public z_GetActiveSubroutineUniformName_ovr_2 := GetFuncOrNil&<procedure(&program: UInt32; _shadertype: ShaderType; index: UInt32; bufSize: Int32; length: IntPtr; name: IntPtr)>(z_GetActiveSubroutineUniformName_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetActiveSubroutineUniformName(&program: UInt32; _shadertype: ShaderType; index: UInt32; bufSize: Int32; length: IntPtr; name: IntPtr);
    begin
      z_GetActiveSubroutineUniformName_ovr_2(&program, _shadertype, index, bufSize, length, name);
    end;
    
    public z_GetActiveSubroutineName_adr := GetFuncAdr('glGetActiveSubroutineName');
    public z_GetActiveSubroutineName_ovr_0 := GetFuncOrNil&<procedure(&program: UInt32; _shadertype: ShaderType; index: UInt32; bufSize: Int32; var length: Int32; name: IntPtr)>(z_GetActiveSubroutineName_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetActiveSubroutineName(&program: UInt32; _shadertype: ShaderType; index: UInt32; bufSize: Int32; length: array of Int32; name: IntPtr);
    begin
      z_GetActiveSubroutineName_ovr_0(&program, _shadertype, index, bufSize, length[0], name);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetActiveSubroutineName(&program: UInt32; _shadertype: ShaderType; index: UInt32; bufSize: Int32; var length: Int32; name: IntPtr);
    begin
      z_GetActiveSubroutineName_ovr_0(&program, _shadertype, index, bufSize, length, name);
    end;
    public z_GetActiveSubroutineName_ovr_2 := GetFuncOrNil&<procedure(&program: UInt32; _shadertype: ShaderType; index: UInt32; bufSize: Int32; length: IntPtr; name: IntPtr)>(z_GetActiveSubroutineName_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetActiveSubroutineName(&program: UInt32; _shadertype: ShaderType; index: UInt32; bufSize: Int32; length: IntPtr; name: IntPtr);
    begin
      z_GetActiveSubroutineName_ovr_2(&program, _shadertype, index, bufSize, length, name);
    end;
    
    public z_UniformSubroutinesuiv_adr := GetFuncAdr('glUniformSubroutinesuiv');
    public z_UniformSubroutinesuiv_ovr_0 := GetFuncOrNil&<procedure(_shadertype: ShaderType; count: Int32; var indices: UInt32)>(z_UniformSubroutinesuiv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure UniformSubroutinesuiv(_shadertype: ShaderType; count: Int32; indices: array of UInt32);
    begin
      z_UniformSubroutinesuiv_ovr_0(_shadertype, count, indices[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure UniformSubroutinesuiv(_shadertype: ShaderType; count: Int32; var indices: UInt32);
    begin
      z_UniformSubroutinesuiv_ovr_0(_shadertype, count, indices);
    end;
    public z_UniformSubroutinesuiv_ovr_2 := GetFuncOrNil&<procedure(_shadertype: ShaderType; count: Int32; indices: IntPtr)>(z_UniformSubroutinesuiv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure UniformSubroutinesuiv(_shadertype: ShaderType; count: Int32; indices: IntPtr);
    begin
      z_UniformSubroutinesuiv_ovr_2(_shadertype, count, indices);
    end;
    
    public z_GetUniformSubroutineuiv_adr := GetFuncAdr('glGetUniformSubroutineuiv');
    public z_GetUniformSubroutineuiv_ovr_0 := GetFuncOrNil&<procedure(_shadertype: ShaderType; location: Int32; var &params: UInt32)>(z_GetUniformSubroutineuiv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetUniformSubroutineuiv(_shadertype: ShaderType; location: Int32; &params: array of UInt32);
    begin
      z_GetUniformSubroutineuiv_ovr_0(_shadertype, location, &params[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetUniformSubroutineuiv(_shadertype: ShaderType; location: Int32; var &params: UInt32);
    begin
      z_GetUniformSubroutineuiv_ovr_0(_shadertype, location, &params);
    end;
    public z_GetUniformSubroutineuiv_ovr_2 := GetFuncOrNil&<procedure(_shadertype: ShaderType; location: Int32; &params: IntPtr)>(z_GetUniformSubroutineuiv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetUniformSubroutineuiv(_shadertype: ShaderType; location: Int32; &params: IntPtr);
    begin
      z_GetUniformSubroutineuiv_ovr_2(_shadertype, location, &params);
    end;
    
    public z_GetProgramStageiv_adr := GetFuncAdr('glGetProgramStageiv');
    public z_GetProgramStageiv_ovr_0 := GetFuncOrNil&<procedure(&program: ProgramName; _shadertype: ShaderType; pname: ProgramStagePName; var values: Int32)>(z_GetProgramStageiv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetProgramStageiv(&program: ProgramName; _shadertype: ShaderType; pname: ProgramStagePName; values: array of Int32);
    begin
      z_GetProgramStageiv_ovr_0(&program, _shadertype, pname, values[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetProgramStageiv(&program: ProgramName; _shadertype: ShaderType; pname: ProgramStagePName; var values: Int32);
    begin
      z_GetProgramStageiv_ovr_0(&program, _shadertype, pname, values);
    end;
    public z_GetProgramStageiv_ovr_2 := GetFuncOrNil&<procedure(&program: ProgramName; _shadertype: ShaderType; pname: ProgramStagePName; values: IntPtr)>(z_GetProgramStageiv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetProgramStageiv(&program: ProgramName; _shadertype: ShaderType; pname: ProgramStagePName; values: IntPtr);
    begin
      z_GetProgramStageiv_ovr_2(&program, _shadertype, pname, values);
    end;
    
  end;
  
  glShadingLanguageIncludeARB = sealed class
    public static function GetFuncAdr([MarshalAs(UnmanagedType.LPStr)] lpszProc: string): IntPtr;
    external 'opengl32.dll' name 'wglGetProcAddress';
    public static function GetFuncOrNil<T>(fadr: IntPtr) :=
    fadr=IntPtr.Zero ? default(T) :
    Marshal.GetDelegateForFunctionPointer&<T>(fadr);
    
    public z_NamedStringARB_adr := GetFuncAdr('glNamedStringARB');
    public z_NamedStringARB_ovr_0 := GetFuncOrNil&<procedure(&type: DummyEnum; namelen: Int32; name: IntPtr; stringlen: Int32; _string: IntPtr)>(z_NamedStringARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure NamedStringARB(&type: DummyEnum; namelen: Int32; name: string; stringlen: Int32; _string: string);
    begin
      var par_3_str_ptr := Marshal.StringToHGlobalAnsi(name);
      var par_5_str_ptr := Marshal.StringToHGlobalAnsi(_string);
      z_NamedStringARB_ovr_0(&type, namelen, par_3_str_ptr, stringlen, par_5_str_ptr);
      Marshal.FreeHGlobal(par_3_str_ptr);
      Marshal.FreeHGlobal(par_5_str_ptr);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure NamedStringARB(&type: DummyEnum; namelen: Int32; name: string; stringlen: Int32; _string: IntPtr);
    begin
      var par_3_str_ptr := Marshal.StringToHGlobalAnsi(name);
      z_NamedStringARB_ovr_0(&type, namelen, par_3_str_ptr, stringlen, _string);
      Marshal.FreeHGlobal(par_3_str_ptr);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure NamedStringARB(&type: DummyEnum; namelen: Int32; name: IntPtr; stringlen: Int32; _string: string);
    begin
      var par_5_str_ptr := Marshal.StringToHGlobalAnsi(_string);
      z_NamedStringARB_ovr_0(&type, namelen, name, stringlen, par_5_str_ptr);
      Marshal.FreeHGlobal(par_5_str_ptr);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure NamedStringARB(&type: DummyEnum; namelen: Int32; name: IntPtr; stringlen: Int32; _string: IntPtr);
    begin
      z_NamedStringARB_ovr_0(&type, namelen, name, stringlen, _string);
    end;
    
    public z_DeleteNamedStringARB_adr := GetFuncAdr('glDeleteNamedStringARB');
    public z_DeleteNamedStringARB_ovr_0 := GetFuncOrNil&<procedure(namelen: Int32; name: IntPtr)>(z_DeleteNamedStringARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure DeleteNamedStringARB(namelen: Int32; name: string);
    begin
      var par_2_str_ptr := Marshal.StringToHGlobalAnsi(name);
      z_DeleteNamedStringARB_ovr_0(namelen, par_2_str_ptr);
      Marshal.FreeHGlobal(par_2_str_ptr);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure DeleteNamedStringARB(namelen: Int32; name: IntPtr);
    begin
      z_DeleteNamedStringARB_ovr_0(namelen, name);
    end;
    
    public z_CompileShaderIncludeARB_adr := GetFuncAdr('glCompileShaderIncludeARB');
    public z_CompileShaderIncludeARB_ovr_0 := GetFuncOrNil&<procedure(shader: UInt32; count: Int32; var path: IntPtr; var length: Int32)>(z_CompileShaderIncludeARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure CompileShaderIncludeARB(shader: UInt32; count: Int32; path: array of string; length: array of Int32);
    begin
      var par_3_str_ptr := path.ConvertAll(arr_el1->Marshal.StringToHGlobalAnsi(arr_el1));
      z_CompileShaderIncludeARB_ovr_0(shader, count, par_3_str_ptr[0], length[0]);
      foreach var arr_el1 in par_3_str_ptr do Marshal.FreeHGlobal(arr_el1);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure CompileShaderIncludeARB(shader: UInt32; count: Int32; path: array of string; var length: Int32);
    begin
      var par_3_str_ptr := path.ConvertAll(arr_el1->Marshal.StringToHGlobalAnsi(arr_el1));
      z_CompileShaderIncludeARB_ovr_0(shader, count, par_3_str_ptr[0], length);
      foreach var arr_el1 in par_3_str_ptr do Marshal.FreeHGlobal(arr_el1);
    end;
    public z_CompileShaderIncludeARB_ovr_2 := GetFuncOrNil&<procedure(shader: UInt32; count: Int32; var path: IntPtr; length: IntPtr)>(z_CompileShaderIncludeARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure CompileShaderIncludeARB(shader: UInt32; count: Int32; path: array of string; length: IntPtr);
    begin
      var par_3_str_ptr := path.ConvertAll(arr_el1->Marshal.StringToHGlobalAnsi(arr_el1));
      z_CompileShaderIncludeARB_ovr_2(shader, count, par_3_str_ptr[0], length);
      foreach var arr_el1 in par_3_str_ptr do Marshal.FreeHGlobal(arr_el1);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure CompileShaderIncludeARB(shader: UInt32; count: Int32; path: array of IntPtr; length: array of Int32);
    begin
      z_CompileShaderIncludeARB_ovr_0(shader, count, path[0], length[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure CompileShaderIncludeARB(shader: UInt32; count: Int32; path: array of IntPtr; var length: Int32);
    begin
      z_CompileShaderIncludeARB_ovr_0(shader, count, path[0], length);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure CompileShaderIncludeARB(shader: UInt32; count: Int32; path: array of IntPtr; length: IntPtr);
    begin
      z_CompileShaderIncludeARB_ovr_2(shader, count, path[0], length);
    end;
    public z_CompileShaderIncludeARB_ovr_6 := GetFuncOrNil&<procedure(shader: UInt32; count: Int32; path: IntPtr; var length: Int32)>(z_CompileShaderIncludeARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure CompileShaderIncludeARB(shader: UInt32; count: Int32; path: IntPtr; length: array of Int32);
    begin
      z_CompileShaderIncludeARB_ovr_6(shader, count, path, length[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure CompileShaderIncludeARB(shader: UInt32; count: Int32; path: IntPtr; var length: Int32);
    begin
      z_CompileShaderIncludeARB_ovr_6(shader, count, path, length);
    end;
    public z_CompileShaderIncludeARB_ovr_8 := GetFuncOrNil&<procedure(shader: UInt32; count: Int32; path: IntPtr; length: IntPtr)>(z_CompileShaderIncludeARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure CompileShaderIncludeARB(shader: UInt32; count: Int32; path: IntPtr; length: IntPtr);
    begin
      z_CompileShaderIncludeARB_ovr_8(shader, count, path, length);
    end;
    
    public z_IsNamedStringARB_adr := GetFuncAdr('glIsNamedStringARB');
    public z_IsNamedStringARB_ovr_0 := GetFuncOrNil&<function(namelen: Int32; name: IntPtr): boolean>(z_IsNamedStringARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function IsNamedStringARB(namelen: Int32; name: string): boolean;
    begin
      var par_2_str_ptr := Marshal.StringToHGlobalAnsi(name);
      Result := z_IsNamedStringARB_ovr_0(namelen, par_2_str_ptr);
      Marshal.FreeHGlobal(par_2_str_ptr);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function IsNamedStringARB(namelen: Int32; name: IntPtr): boolean;
    begin
      Result := z_IsNamedStringARB_ovr_0(namelen, name);
    end;
    
    public z_GetNamedStringARB_adr := GetFuncAdr('glGetNamedStringARB');
    public z_GetNamedStringARB_ovr_0 := GetFuncOrNil&<procedure(namelen: Int32; name: IntPtr; bufSize: Int32; var stringlen: Int32; string: IntPtr)>(z_GetNamedStringARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetNamedStringARB(namelen: Int32; name: string; bufSize: Int32; stringlen: array of Int32; string: IntPtr);
    begin
      var par_2_str_ptr := Marshal.StringToHGlobalAnsi(name);
      z_GetNamedStringARB_ovr_0(namelen, par_2_str_ptr, bufSize, stringlen[0], string);
      Marshal.FreeHGlobal(par_2_str_ptr);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetNamedStringARB(namelen: Int32; name: string; bufSize: Int32; var stringlen: Int32; string: IntPtr);
    begin
      var par_2_str_ptr := Marshal.StringToHGlobalAnsi(name);
      z_GetNamedStringARB_ovr_0(namelen, par_2_str_ptr, bufSize, stringlen, string);
      Marshal.FreeHGlobal(par_2_str_ptr);
    end;
    public z_GetNamedStringARB_ovr_2 := GetFuncOrNil&<procedure(namelen: Int32; name: IntPtr; bufSize: Int32; stringlen: IntPtr; string: IntPtr)>(z_GetNamedStringARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetNamedStringARB(namelen: Int32; name: string; bufSize: Int32; stringlen: IntPtr; string: IntPtr);
    begin
      var par_2_str_ptr := Marshal.StringToHGlobalAnsi(name);
      z_GetNamedStringARB_ovr_2(namelen, par_2_str_ptr, bufSize, stringlen, string);
      Marshal.FreeHGlobal(par_2_str_ptr);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetNamedStringARB(namelen: Int32; name: IntPtr; bufSize: Int32; stringlen: array of Int32; string: IntPtr);
    begin
      z_GetNamedStringARB_ovr_0(namelen, name, bufSize, stringlen[0], string);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetNamedStringARB(namelen: Int32; name: IntPtr; bufSize: Int32; var stringlen: Int32; string: IntPtr);
    begin
      z_GetNamedStringARB_ovr_0(namelen, name, bufSize, stringlen, string);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetNamedStringARB(namelen: Int32; name: IntPtr; bufSize: Int32; stringlen: IntPtr; string: IntPtr);
    begin
      z_GetNamedStringARB_ovr_2(namelen, name, bufSize, stringlen, string);
    end;
    
    public z_GetNamedStringivARB_adr := GetFuncAdr('glGetNamedStringivARB');
    public z_GetNamedStringivARB_ovr_0 := GetFuncOrNil&<procedure(namelen: Int32; name: IntPtr; pname: DummyEnum; var &params: Int32)>(z_GetNamedStringivARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetNamedStringivARB(namelen: Int32; name: string; pname: DummyEnum; &params: array of Int32);
    begin
      var par_2_str_ptr := Marshal.StringToHGlobalAnsi(name);
      z_GetNamedStringivARB_ovr_0(namelen, par_2_str_ptr, pname, &params[0]);
      Marshal.FreeHGlobal(par_2_str_ptr);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetNamedStringivARB(namelen: Int32; name: string; pname: DummyEnum; var &params: Int32);
    begin
      var par_2_str_ptr := Marshal.StringToHGlobalAnsi(name);
      z_GetNamedStringivARB_ovr_0(namelen, par_2_str_ptr, pname, &params);
      Marshal.FreeHGlobal(par_2_str_ptr);
    end;
    public z_GetNamedStringivARB_ovr_2 := GetFuncOrNil&<procedure(namelen: Int32; name: IntPtr; pname: DummyEnum; &params: IntPtr)>(z_GetNamedStringivARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetNamedStringivARB(namelen: Int32; name: string; pname: DummyEnum; &params: IntPtr);
    begin
      var par_2_str_ptr := Marshal.StringToHGlobalAnsi(name);
      z_GetNamedStringivARB_ovr_2(namelen, par_2_str_ptr, pname, &params);
      Marshal.FreeHGlobal(par_2_str_ptr);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetNamedStringivARB(namelen: Int32; name: IntPtr; pname: DummyEnum; &params: array of Int32);
    begin
      z_GetNamedStringivARB_ovr_0(namelen, name, pname, &params[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetNamedStringivARB(namelen: Int32; name: IntPtr; pname: DummyEnum; var &params: Int32);
    begin
      z_GetNamedStringivARB_ovr_0(namelen, name, pname, &params);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetNamedStringivARB(namelen: Int32; name: IntPtr; pname: DummyEnum; &params: IntPtr);
    begin
      z_GetNamedStringivARB_ovr_2(namelen, name, pname, &params);
    end;
    
  end;
  
  glSparseBufferARB = sealed class
    public static function GetFuncAdr([MarshalAs(UnmanagedType.LPStr)] lpszProc: string): IntPtr;
    external 'opengl32.dll' name 'wglGetProcAddress';
    public static function GetFuncOrNil<T>(fadr: IntPtr) :=
    fadr=IntPtr.Zero ? default(T) :
    Marshal.GetDelegateForFunctionPointer&<T>(fadr);
    
    public z_BufferPageCommitmentARB_adr := GetFuncAdr('glBufferPageCommitmentARB');
    public z_BufferPageCommitmentARB_ovr_0 := GetFuncOrNil&<procedure(target: DummyEnum; offset: IntPtr; size: IntPtr; commit: boolean)>(z_BufferPageCommitmentARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure BufferPageCommitmentARB(target: DummyEnum; offset: IntPtr; size: IntPtr; commit: boolean);
    begin
      z_BufferPageCommitmentARB_ovr_0(target, offset, size, commit);
    end;
    
    public z_NamedBufferPageCommitmentEXT_adr := GetFuncAdr('glNamedBufferPageCommitmentEXT');
    public z_NamedBufferPageCommitmentEXT_ovr_0 := GetFuncOrNil&<procedure(buffer: UInt32; offset: IntPtr; size: IntPtr; commit: boolean)>(z_NamedBufferPageCommitmentEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure NamedBufferPageCommitmentEXT(buffer: UInt32; offset: IntPtr; size: IntPtr; commit: boolean);
    begin
      z_NamedBufferPageCommitmentEXT_ovr_0(buffer, offset, size, commit);
    end;
    
    public z_NamedBufferPageCommitmentARB_adr := GetFuncAdr('glNamedBufferPageCommitmentARB');
    public z_NamedBufferPageCommitmentARB_ovr_0 := GetFuncOrNil&<procedure(buffer: UInt32; offset: IntPtr; size: IntPtr; commit: boolean)>(z_NamedBufferPageCommitmentARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure NamedBufferPageCommitmentARB(buffer: UInt32; offset: IntPtr; size: IntPtr; commit: boolean);
    begin
      z_NamedBufferPageCommitmentARB_ovr_0(buffer, offset, size, commit);
    end;
    
  end;
  
  glSparseTextureARB = sealed class
    public static function GetFuncAdr([MarshalAs(UnmanagedType.LPStr)] lpszProc: string): IntPtr;
    external 'opengl32.dll' name 'wglGetProcAddress';
    public static function GetFuncOrNil<T>(fadr: IntPtr) :=
    fadr=IntPtr.Zero ? default(T) :
    Marshal.GetDelegateForFunctionPointer&<T>(fadr);
    
    public z_TexPageCommitmentARB_adr := GetFuncAdr('glTexPageCommitmentARB');
    public z_TexPageCommitmentARB_ovr_0 := GetFuncOrNil&<procedure(target: DummyEnum; level: Int32; xoffset: Int32; yoffset: Int32; zoffset: Int32; width: Int32; height: Int32; depth: Int32; commit: boolean)>(z_TexPageCommitmentARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TexPageCommitmentARB(target: DummyEnum; level: Int32; xoffset: Int32; yoffset: Int32; zoffset: Int32; width: Int32; height: Int32; depth: Int32; commit: boolean);
    begin
      z_TexPageCommitmentARB_ovr_0(target, level, xoffset, yoffset, zoffset, width, height, depth, commit);
    end;
    
  end;
  
  glSyncARB = sealed class
    public static function GetFuncAdr([MarshalAs(UnmanagedType.LPStr)] lpszProc: string): IntPtr;
    external 'opengl32.dll' name 'wglGetProcAddress';
    public static function GetFuncOrNil<T>(fadr: IntPtr) :=
    fadr=IntPtr.Zero ? default(T) :
    Marshal.GetDelegateForFunctionPointer&<T>(fadr);
    
    public z_FenceSync_adr := GetFuncAdr('glFenceSync');
    public z_FenceSync_ovr_0 := GetFuncOrNil&<function(condition: SyncCondition; flags: DummyFlags): GLsync>(z_FenceSync_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function FenceSync(condition: SyncCondition; flags: DummyFlags): GLsync;
    begin
      Result := z_FenceSync_ovr_0(condition, flags);
    end;
    
    public z_IsSync_adr := GetFuncAdr('glIsSync');
    public z_IsSync_ovr_0 := GetFuncOrNil&<function(sync: GLsync): boolean>(z_IsSync_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function IsSync(sync: GLsync): boolean;
    begin
      Result := z_IsSync_ovr_0(sync);
    end;
    
    public z_DeleteSync_adr := GetFuncAdr('glDeleteSync');
    public z_DeleteSync_ovr_0 := GetFuncOrNil&<procedure(sync: GLsync)>(z_DeleteSync_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure DeleteSync(sync: GLsync);
    begin
      z_DeleteSync_ovr_0(sync);
    end;
    
    public z_ClientWaitSync_adr := GetFuncAdr('glClientWaitSync');
    public z_ClientWaitSync_ovr_0 := GetFuncOrNil&<function(sync: GLsync; flags: SyncObjectMask; timeout: UInt64): SyncStatus>(z_ClientWaitSync_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function ClientWaitSync(sync: GLsync; flags: SyncObjectMask; timeout: UInt64): SyncStatus;
    begin
      Result := z_ClientWaitSync_ovr_0(sync, flags, timeout);
    end;
    
    public z_WaitSync_adr := GetFuncAdr('glWaitSync');
    public z_WaitSync_ovr_0 := GetFuncOrNil&<procedure(sync: GLsync; flags: DummyFlags; timeout: UInt64)>(z_WaitSync_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure WaitSync(sync: GLsync; flags: DummyFlags; timeout: UInt64);
    begin
      z_WaitSync_ovr_0(sync, flags, timeout);
    end;
    
    public z_GetInteger64v_adr := GetFuncAdr('glGetInteger64v');
    public z_GetInteger64v_ovr_0 := GetFuncOrNil&<procedure(pname: GetPName; var data: Int64)>(z_GetInteger64v_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetInteger64v(pname: GetPName; data: array of Int64);
    begin
      z_GetInteger64v_ovr_0(pname, data[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetInteger64v(pname: GetPName; var data: Int64);
    begin
      z_GetInteger64v_ovr_0(pname, data);
    end;
    public z_GetInteger64v_ovr_2 := GetFuncOrNil&<procedure(pname: GetPName; data: IntPtr)>(z_GetInteger64v_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetInteger64v(pname: GetPName; data: IntPtr);
    begin
      z_GetInteger64v_ovr_2(pname, data);
    end;
    
    public z_GetSynciv_adr := GetFuncAdr('glGetSynciv');
    public z_GetSynciv_ovr_0 := GetFuncOrNil&<procedure(sync: GLsync; pname: SyncParameterName; count: Int32; var length: Int32; var values: Int32)>(z_GetSynciv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetSynciv(sync: GLsync; pname: SyncParameterName; count: Int32; length: array of Int32; values: array of Int32);
    begin
      z_GetSynciv_ovr_0(sync, pname, count, length[0], values[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetSynciv(sync: GLsync; pname: SyncParameterName; count: Int32; length: array of Int32; var values: Int32);
    begin
      z_GetSynciv_ovr_0(sync, pname, count, length[0], values);
    end;
    public z_GetSynciv_ovr_2 := GetFuncOrNil&<procedure(sync: GLsync; pname: SyncParameterName; count: Int32; var length: Int32; values: IntPtr)>(z_GetSynciv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetSynciv(sync: GLsync; pname: SyncParameterName; count: Int32; length: array of Int32; values: IntPtr);
    begin
      z_GetSynciv_ovr_2(sync, pname, count, length[0], values);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetSynciv(sync: GLsync; pname: SyncParameterName; count: Int32; var length: Int32; values: array of Int32);
    begin
      z_GetSynciv_ovr_0(sync, pname, count, length, values[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetSynciv(sync: GLsync; pname: SyncParameterName; count: Int32; var length: Int32; var values: Int32);
    begin
      z_GetSynciv_ovr_0(sync, pname, count, length, values);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetSynciv(sync: GLsync; pname: SyncParameterName; count: Int32; var length: Int32; values: IntPtr);
    begin
      z_GetSynciv_ovr_2(sync, pname, count, length, values);
    end;
    public z_GetSynciv_ovr_6 := GetFuncOrNil&<procedure(sync: GLsync; pname: SyncParameterName; count: Int32; length: IntPtr; var values: Int32)>(z_GetSynciv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetSynciv(sync: GLsync; pname: SyncParameterName; count: Int32; length: IntPtr; values: array of Int32);
    begin
      z_GetSynciv_ovr_6(sync, pname, count, length, values[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetSynciv(sync: GLsync; pname: SyncParameterName; count: Int32; length: IntPtr; var values: Int32);
    begin
      z_GetSynciv_ovr_6(sync, pname, count, length, values);
    end;
    public z_GetSynciv_ovr_8 := GetFuncOrNil&<procedure(sync: GLsync; pname: SyncParameterName; count: Int32; length: IntPtr; values: IntPtr)>(z_GetSynciv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetSynciv(sync: GLsync; pname: SyncParameterName; count: Int32; length: IntPtr; values: IntPtr);
    begin
      z_GetSynciv_ovr_8(sync, pname, count, length, values);
    end;
    
  end;
  
  glTessellationShaderARB = sealed class
    public static function GetFuncAdr([MarshalAs(UnmanagedType.LPStr)] lpszProc: string): IntPtr;
    external 'opengl32.dll' name 'wglGetProcAddress';
    public static function GetFuncOrNil<T>(fadr: IntPtr) :=
    fadr=IntPtr.Zero ? default(T) :
    Marshal.GetDelegateForFunctionPointer&<T>(fadr);
    
    public z_PatchParameteri_adr := GetFuncAdr('glPatchParameteri');
    public z_PatchParameteri_ovr_0 := GetFuncOrNil&<procedure(pname: PatchParameterName; value: Int32)>(z_PatchParameteri_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure PatchParameteri(pname: PatchParameterName; value: Int32);
    begin
      z_PatchParameteri_ovr_0(pname, value);
    end;
    
    public z_PatchParameterfv_adr := GetFuncAdr('glPatchParameterfv');
    public z_PatchParameterfv_ovr_0 := GetFuncOrNil&<procedure(pname: PatchParameterName; var values: single)>(z_PatchParameterfv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure PatchParameterfv(pname: PatchParameterName; values: array of single);
    begin
      z_PatchParameterfv_ovr_0(pname, values[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure PatchParameterfv(pname: PatchParameterName; var values: single);
    begin
      z_PatchParameterfv_ovr_0(pname, values);
    end;
    public z_PatchParameterfv_ovr_2 := GetFuncOrNil&<procedure(pname: PatchParameterName; values: IntPtr)>(z_PatchParameterfv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure PatchParameterfv(pname: PatchParameterName; values: IntPtr);
    begin
      z_PatchParameterfv_ovr_2(pname, values);
    end;
    
  end;
  
  glTextureBarrierARB = sealed class
    public static function GetFuncAdr([MarshalAs(UnmanagedType.LPStr)] lpszProc: string): IntPtr;
    external 'opengl32.dll' name 'wglGetProcAddress';
    public static function GetFuncOrNil<T>(fadr: IntPtr) :=
    fadr=IntPtr.Zero ? default(T) :
    Marshal.GetDelegateForFunctionPointer&<T>(fadr);
    
    public z_TextureBarrier_adr := GetFuncAdr('glTextureBarrier');
    public z_TextureBarrier_ovr_0 := GetFuncOrNil&<procedure>(z_TextureBarrier_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TextureBarrier;
    begin
      z_TextureBarrier_ovr_0;
    end;
    
  end;
  
  glTextureBufferObjectARB = sealed class
    public static function GetFuncAdr([MarshalAs(UnmanagedType.LPStr)] lpszProc: string): IntPtr;
    external 'opengl32.dll' name 'wglGetProcAddress';
    public static function GetFuncOrNil<T>(fadr: IntPtr) :=
    fadr=IntPtr.Zero ? default(T) :
    Marshal.GetDelegateForFunctionPointer&<T>(fadr);
    
    public z_TexBufferARB_adr := GetFuncAdr('glTexBufferARB');
    public z_TexBufferARB_ovr_0 := GetFuncOrNil&<procedure(target: TextureTarget; _internalformat: InternalFormat; buffer: UInt32)>(z_TexBufferARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TexBufferARB(target: TextureTarget; _internalformat: InternalFormat; buffer: UInt32);
    begin
      z_TexBufferARB_ovr_0(target, _internalformat, buffer);
    end;
    
  end;
  
  glTextureBufferRangeARB = sealed class
    public static function GetFuncAdr([MarshalAs(UnmanagedType.LPStr)] lpszProc: string): IntPtr;
    external 'opengl32.dll' name 'wglGetProcAddress';
    public static function GetFuncOrNil<T>(fadr: IntPtr) :=
    fadr=IntPtr.Zero ? default(T) :
    Marshal.GetDelegateForFunctionPointer&<T>(fadr);
    
    public z_TexBufferRange_adr := GetFuncAdr('glTexBufferRange');
    public z_TexBufferRange_ovr_0 := GetFuncOrNil&<procedure(target: TextureTarget; _internalformat: InternalFormat; buffer: BufferName; offset: IntPtr; size: IntPtr)>(z_TexBufferRange_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TexBufferRange(target: TextureTarget; _internalformat: InternalFormat; buffer: BufferName; offset: IntPtr; size: IntPtr);
    begin
      z_TexBufferRange_ovr_0(target, _internalformat, buffer, offset, size);
    end;
    
  end;
  
  glTextureCompressionARB = sealed class
    public static function GetFuncAdr([MarshalAs(UnmanagedType.LPStr)] lpszProc: string): IntPtr;
    external 'opengl32.dll' name 'wglGetProcAddress';
    public static function GetFuncOrNil<T>(fadr: IntPtr) :=
    fadr=IntPtr.Zero ? default(T) :
    Marshal.GetDelegateForFunctionPointer&<T>(fadr);
    
    public z_CompressedTexImage3DARB_adr := GetFuncAdr('glCompressedTexImage3DARB');
    public z_CompressedTexImage3DARB_ovr_0 := GetFuncOrNil&<procedure(target: TextureTarget; level: Int32; _internalformat: InternalFormat; width: Int32; height: Int32; depth: Int32; border: Int32; imageSize: Int32; data: IntPtr)>(z_CompressedTexImage3DARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure CompressedTexImage3DARB(target: TextureTarget; level: Int32; _internalformat: InternalFormat; width: Int32; height: Int32; depth: Int32; border: Int32; imageSize: Int32; data: IntPtr);
    begin
      z_CompressedTexImage3DARB_ovr_0(target, level, _internalformat, width, height, depth, border, imageSize, data);
    end;
    
    public z_CompressedTexImage2DARB_adr := GetFuncAdr('glCompressedTexImage2DARB');
    public z_CompressedTexImage2DARB_ovr_0 := GetFuncOrNil&<procedure(target: TextureTarget; level: Int32; _internalformat: InternalFormat; width: Int32; height: Int32; border: Int32; imageSize: Int32; data: IntPtr)>(z_CompressedTexImage2DARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure CompressedTexImage2DARB(target: TextureTarget; level: Int32; _internalformat: InternalFormat; width: Int32; height: Int32; border: Int32; imageSize: Int32; data: IntPtr);
    begin
      z_CompressedTexImage2DARB_ovr_0(target, level, _internalformat, width, height, border, imageSize, data);
    end;
    
    public z_CompressedTexImage1DARB_adr := GetFuncAdr('glCompressedTexImage1DARB');
    public z_CompressedTexImage1DARB_ovr_0 := GetFuncOrNil&<procedure(target: TextureTarget; level: Int32; _internalformat: InternalFormat; width: Int32; border: Int32; imageSize: Int32; data: IntPtr)>(z_CompressedTexImage1DARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure CompressedTexImage1DARB(target: TextureTarget; level: Int32; _internalformat: InternalFormat; width: Int32; border: Int32; imageSize: Int32; data: IntPtr);
    begin
      z_CompressedTexImage1DARB_ovr_0(target, level, _internalformat, width, border, imageSize, data);
    end;
    
    public z_CompressedTexSubImage3DARB_adr := GetFuncAdr('glCompressedTexSubImage3DARB');
    public z_CompressedTexSubImage3DARB_ovr_0 := GetFuncOrNil&<procedure(target: TextureTarget; level: Int32; xoffset: Int32; yoffset: Int32; zoffset: Int32; width: Int32; height: Int32; depth: Int32; format: PixelFormat; imageSize: Int32; data: IntPtr)>(z_CompressedTexSubImage3DARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure CompressedTexSubImage3DARB(target: TextureTarget; level: Int32; xoffset: Int32; yoffset: Int32; zoffset: Int32; width: Int32; height: Int32; depth: Int32; format: PixelFormat; imageSize: Int32; data: IntPtr);
    begin
      z_CompressedTexSubImage3DARB_ovr_0(target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, data);
    end;
    
    public z_CompressedTexSubImage2DARB_adr := GetFuncAdr('glCompressedTexSubImage2DARB');
    public z_CompressedTexSubImage2DARB_ovr_0 := GetFuncOrNil&<procedure(target: TextureTarget; level: Int32; xoffset: Int32; yoffset: Int32; width: Int32; height: Int32; format: PixelFormat; imageSize: Int32; data: IntPtr)>(z_CompressedTexSubImage2DARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure CompressedTexSubImage2DARB(target: TextureTarget; level: Int32; xoffset: Int32; yoffset: Int32; width: Int32; height: Int32; format: PixelFormat; imageSize: Int32; data: IntPtr);
    begin
      z_CompressedTexSubImage2DARB_ovr_0(target, level, xoffset, yoffset, width, height, format, imageSize, data);
    end;
    
    public z_CompressedTexSubImage1DARB_adr := GetFuncAdr('glCompressedTexSubImage1DARB');
    public z_CompressedTexSubImage1DARB_ovr_0 := GetFuncOrNil&<procedure(target: TextureTarget; level: Int32; xoffset: Int32; width: Int32; format: PixelFormat; imageSize: Int32; data: IntPtr)>(z_CompressedTexSubImage1DARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure CompressedTexSubImage1DARB(target: TextureTarget; level: Int32; xoffset: Int32; width: Int32; format: PixelFormat; imageSize: Int32; data: IntPtr);
    begin
      z_CompressedTexSubImage1DARB_ovr_0(target, level, xoffset, width, format, imageSize, data);
    end;
    
    public z_GetCompressedTexImageARB_adr := GetFuncAdr('glGetCompressedTexImageARB');
    public z_GetCompressedTexImageARB_ovr_0 := GetFuncOrNil&<procedure(target: TextureTarget; level: Int32; img: IntPtr)>(z_GetCompressedTexImageARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetCompressedTexImageARB(target: TextureTarget; level: Int32; img: IntPtr);
    begin
      z_GetCompressedTexImageARB_ovr_0(target, level, img);
    end;
    
  end;
  
  glTextureMultisampleARB = sealed class
    public static function GetFuncAdr([MarshalAs(UnmanagedType.LPStr)] lpszProc: string): IntPtr;
    external 'opengl32.dll' name 'wglGetProcAddress';
    public static function GetFuncOrNil<T>(fadr: IntPtr) :=
    fadr=IntPtr.Zero ? default(T) :
    Marshal.GetDelegateForFunctionPointer&<T>(fadr);
    
    public z_TexImage2DMultisample_adr := GetFuncAdr('glTexImage2DMultisample');
    public z_TexImage2DMultisample_ovr_0 := GetFuncOrNil&<procedure(target: TextureTarget; samples: Int32; _internalformat: InternalFormat; width: Int32; height: Int32; fixedsamplelocations: boolean)>(z_TexImage2DMultisample_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TexImage2DMultisample(target: TextureTarget; samples: Int32; _internalformat: InternalFormat; width: Int32; height: Int32; fixedsamplelocations: boolean);
    begin
      z_TexImage2DMultisample_ovr_0(target, samples, _internalformat, width, height, fixedsamplelocations);
    end;
    
    public z_TexImage3DMultisample_adr := GetFuncAdr('glTexImage3DMultisample');
    public z_TexImage3DMultisample_ovr_0 := GetFuncOrNil&<procedure(target: TextureTarget; samples: Int32; _internalformat: InternalFormat; width: Int32; height: Int32; depth: Int32; fixedsamplelocations: boolean)>(z_TexImage3DMultisample_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TexImage3DMultisample(target: TextureTarget; samples: Int32; _internalformat: InternalFormat; width: Int32; height: Int32; depth: Int32; fixedsamplelocations: boolean);
    begin
      z_TexImage3DMultisample_ovr_0(target, samples, _internalformat, width, height, depth, fixedsamplelocations);
    end;
    
    public z_GetMultisamplefv_adr := GetFuncAdr('glGetMultisamplefv');
    public z_GetMultisamplefv_ovr_0 := GetFuncOrNil&<procedure(pname: GetMultisamplePNameNV; index: UInt32; var val: single)>(z_GetMultisamplefv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetMultisamplefv(pname: GetMultisamplePNameNV; index: UInt32; val: array of single);
    begin
      z_GetMultisamplefv_ovr_0(pname, index, val[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetMultisamplefv(pname: GetMultisamplePNameNV; index: UInt32; var val: single);
    begin
      z_GetMultisamplefv_ovr_0(pname, index, val);
    end;
    public z_GetMultisamplefv_ovr_2 := GetFuncOrNil&<procedure(pname: GetMultisamplePNameNV; index: UInt32; val: IntPtr)>(z_GetMultisamplefv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetMultisamplefv(pname: GetMultisamplePNameNV; index: UInt32; val: IntPtr);
    begin
      z_GetMultisamplefv_ovr_2(pname, index, val);
    end;
    
    public z_SampleMaski_adr := GetFuncAdr('glSampleMaski');
    public z_SampleMaski_ovr_0 := GetFuncOrNil&<procedure(maskNumber: UInt32; mask: DummyFlags)>(z_SampleMaski_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure SampleMaski(maskNumber: UInt32; mask: DummyFlags);
    begin
      z_SampleMaski_ovr_0(maskNumber, mask);
    end;
    
  end;
  
  glTextureStorageARB = sealed class
    public static function GetFuncAdr([MarshalAs(UnmanagedType.LPStr)] lpszProc: string): IntPtr;
    external 'opengl32.dll' name 'wglGetProcAddress';
    public static function GetFuncOrNil<T>(fadr: IntPtr) :=
    fadr=IntPtr.Zero ? default(T) :
    Marshal.GetDelegateForFunctionPointer&<T>(fadr);
    
    public z_TexStorage1D_adr := GetFuncAdr('glTexStorage1D');
    public z_TexStorage1D_ovr_0 := GetFuncOrNil&<procedure(target: TextureTarget; levels: Int32; _internalformat: InternalFormat; width: Int32)>(z_TexStorage1D_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TexStorage1D(target: TextureTarget; levels: Int32; _internalformat: InternalFormat; width: Int32);
    begin
      z_TexStorage1D_ovr_0(target, levels, _internalformat, width);
    end;
    
    public z_TexStorage2D_adr := GetFuncAdr('glTexStorage2D');
    public z_TexStorage2D_ovr_0 := GetFuncOrNil&<procedure(target: TextureTarget; levels: Int32; _internalformat: InternalFormat; width: Int32; height: Int32)>(z_TexStorage2D_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TexStorage2D(target: TextureTarget; levels: Int32; _internalformat: InternalFormat; width: Int32; height: Int32);
    begin
      z_TexStorage2D_ovr_0(target, levels, _internalformat, width, height);
    end;
    
    public z_TexStorage3D_adr := GetFuncAdr('glTexStorage3D');
    public z_TexStorage3D_ovr_0 := GetFuncOrNil&<procedure(target: TextureTarget; levels: Int32; _internalformat: InternalFormat; width: Int32; height: Int32; depth: Int32)>(z_TexStorage3D_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TexStorage3D(target: TextureTarget; levels: Int32; _internalformat: InternalFormat; width: Int32; height: Int32; depth: Int32);
    begin
      z_TexStorage3D_ovr_0(target, levels, _internalformat, width, height, depth);
    end;
    
  end;
  
  glTextureStorageMultisampleARB = sealed class
    public static function GetFuncAdr([MarshalAs(UnmanagedType.LPStr)] lpszProc: string): IntPtr;
    external 'opengl32.dll' name 'wglGetProcAddress';
    public static function GetFuncOrNil<T>(fadr: IntPtr) :=
    fadr=IntPtr.Zero ? default(T) :
    Marshal.GetDelegateForFunctionPointer&<T>(fadr);
    
    public z_TexStorage2DMultisample_adr := GetFuncAdr('glTexStorage2DMultisample');
    public z_TexStorage2DMultisample_ovr_0 := GetFuncOrNil&<procedure(target: TextureTarget; samples: Int32; _internalformat: InternalFormat; width: Int32; height: Int32; fixedsamplelocations: boolean)>(z_TexStorage2DMultisample_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TexStorage2DMultisample(target: TextureTarget; samples: Int32; _internalformat: InternalFormat; width: Int32; height: Int32; fixedsamplelocations: boolean);
    begin
      z_TexStorage2DMultisample_ovr_0(target, samples, _internalformat, width, height, fixedsamplelocations);
    end;
    
    public z_TexStorage3DMultisample_adr := GetFuncAdr('glTexStorage3DMultisample');
    public z_TexStorage3DMultisample_ovr_0 := GetFuncOrNil&<procedure(target: TextureTarget; samples: Int32; _internalformat: InternalFormat; width: Int32; height: Int32; depth: Int32; fixedsamplelocations: boolean)>(z_TexStorage3DMultisample_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TexStorage3DMultisample(target: TextureTarget; samples: Int32; _internalformat: InternalFormat; width: Int32; height: Int32; depth: Int32; fixedsamplelocations: boolean);
    begin
      z_TexStorage3DMultisample_ovr_0(target, samples, _internalformat, width, height, depth, fixedsamplelocations);
    end;
    
  end;
  
  glTextureViewARB = sealed class
    public static function GetFuncAdr([MarshalAs(UnmanagedType.LPStr)] lpszProc: string): IntPtr;
    external 'opengl32.dll' name 'wglGetProcAddress';
    public static function GetFuncOrNil<T>(fadr: IntPtr) :=
    fadr=IntPtr.Zero ? default(T) :
    Marshal.GetDelegateForFunctionPointer&<T>(fadr);
    
    public z_TextureView_adr := GetFuncAdr('glTextureView');
    public z_TextureView_ovr_0 := GetFuncOrNil&<procedure(texture: TextureName; target: TextureTarget; origtexture: TextureName; _internalformat: InternalFormat; minlevel: UInt32; numlevels: UInt32; minlayer: UInt32; numlayers: UInt32)>(z_TextureView_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TextureView(texture: TextureName; target: TextureTarget; origtexture: TextureName; _internalformat: InternalFormat; minlevel: UInt32; numlevels: UInt32; minlayer: UInt32; numlayers: UInt32);
    begin
      z_TextureView_ovr_0(texture, target, origtexture, _internalformat, minlevel, numlevels, minlayer, numlayers);
    end;
    
  end;
  
  glTimerQueryARB = sealed class
    public static function GetFuncAdr([MarshalAs(UnmanagedType.LPStr)] lpszProc: string): IntPtr;
    external 'opengl32.dll' name 'wglGetProcAddress';
    public static function GetFuncOrNil<T>(fadr: IntPtr) :=
    fadr=IntPtr.Zero ? default(T) :
    Marshal.GetDelegateForFunctionPointer&<T>(fadr);
    
    public z_QueryCounter_adr := GetFuncAdr('glQueryCounter');
    public z_QueryCounter_ovr_0 := GetFuncOrNil&<procedure(id: QueryName; target: QueryCounterTarget)>(z_QueryCounter_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure QueryCounter(id: QueryName; target: QueryCounterTarget);
    begin
      z_QueryCounter_ovr_0(id, target);
    end;
    
    public z_GetQueryObjecti64v_adr := GetFuncAdr('glGetQueryObjecti64v');
    public z_GetQueryObjecti64v_ovr_0 := GetFuncOrNil&<procedure(id: UInt32; pname: QueryObjectParameterName; var &params: Int64)>(z_GetQueryObjecti64v_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetQueryObjecti64v(id: UInt32; pname: QueryObjectParameterName; &params: array of Int64);
    begin
      z_GetQueryObjecti64v_ovr_0(id, pname, &params[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetQueryObjecti64v(id: UInt32; pname: QueryObjectParameterName; var &params: Int64);
    begin
      z_GetQueryObjecti64v_ovr_0(id, pname, &params);
    end;
    public z_GetQueryObjecti64v_ovr_2 := GetFuncOrNil&<procedure(id: UInt32; pname: QueryObjectParameterName; &params: IntPtr)>(z_GetQueryObjecti64v_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetQueryObjecti64v(id: UInt32; pname: QueryObjectParameterName; &params: IntPtr);
    begin
      z_GetQueryObjecti64v_ovr_2(id, pname, &params);
    end;
    
    public z_GetQueryObjectui64v_adr := GetFuncAdr('glGetQueryObjectui64v');
    public z_GetQueryObjectui64v_ovr_0 := GetFuncOrNil&<procedure(id: UInt32; pname: QueryObjectParameterName; var &params: UInt64)>(z_GetQueryObjectui64v_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetQueryObjectui64v(id: UInt32; pname: QueryObjectParameterName; &params: array of UInt64);
    begin
      z_GetQueryObjectui64v_ovr_0(id, pname, &params[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetQueryObjectui64v(id: UInt32; pname: QueryObjectParameterName; var &params: UInt64);
    begin
      z_GetQueryObjectui64v_ovr_0(id, pname, &params);
    end;
    public z_GetQueryObjectui64v_ovr_2 := GetFuncOrNil&<procedure(id: UInt32; pname: QueryObjectParameterName; &params: IntPtr)>(z_GetQueryObjectui64v_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetQueryObjectui64v(id: UInt32; pname: QueryObjectParameterName; &params: IntPtr);
    begin
      z_GetQueryObjectui64v_ovr_2(id, pname, &params);
    end;
    
  end;
  
  glTransformFeedback2ARB = sealed class
    public static function GetFuncAdr([MarshalAs(UnmanagedType.LPStr)] lpszProc: string): IntPtr;
    external 'opengl32.dll' name 'wglGetProcAddress';
    public static function GetFuncOrNil<T>(fadr: IntPtr) :=
    fadr=IntPtr.Zero ? default(T) :
    Marshal.GetDelegateForFunctionPointer&<T>(fadr);
    
    public z_BindTransformFeedback_adr := GetFuncAdr('glBindTransformFeedback');
    public z_BindTransformFeedback_ovr_0 := GetFuncOrNil&<procedure(target: BindTransformFeedbackTarget; id: TransformFeedbackName)>(z_BindTransformFeedback_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure BindTransformFeedback(target: BindTransformFeedbackTarget; id: TransformFeedbackName);
    begin
      z_BindTransformFeedback_ovr_0(target, id);
    end;
    
    public z_DeleteTransformFeedbacks_adr := GetFuncAdr('glDeleteTransformFeedbacks');
    public z_DeleteTransformFeedbacks_ovr_0 := GetFuncOrNil&<procedure(n: Int32; var ids: UInt32)>(z_DeleteTransformFeedbacks_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure DeleteTransformFeedbacks(n: Int32; ids: array of UInt32);
    begin
      z_DeleteTransformFeedbacks_ovr_0(n, ids[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure DeleteTransformFeedbacks(n: Int32; var ids: UInt32);
    begin
      z_DeleteTransformFeedbacks_ovr_0(n, ids);
    end;
    public z_DeleteTransformFeedbacks_ovr_2 := GetFuncOrNil&<procedure(n: Int32; ids: IntPtr)>(z_DeleteTransformFeedbacks_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure DeleteTransformFeedbacks(n: Int32; ids: IntPtr);
    begin
      z_DeleteTransformFeedbacks_ovr_2(n, ids);
    end;
    
    public z_GenTransformFeedbacks_adr := GetFuncAdr('glGenTransformFeedbacks');
    public z_GenTransformFeedbacks_ovr_0 := GetFuncOrNil&<procedure(n: Int32; var ids: UInt32)>(z_GenTransformFeedbacks_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GenTransformFeedbacks(n: Int32; ids: array of UInt32);
    begin
      z_GenTransformFeedbacks_ovr_0(n, ids[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GenTransformFeedbacks(n: Int32; var ids: UInt32);
    begin
      z_GenTransformFeedbacks_ovr_0(n, ids);
    end;
    public z_GenTransformFeedbacks_ovr_2 := GetFuncOrNil&<procedure(n: Int32; ids: IntPtr)>(z_GenTransformFeedbacks_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GenTransformFeedbacks(n: Int32; ids: IntPtr);
    begin
      z_GenTransformFeedbacks_ovr_2(n, ids);
    end;
    
    public z_IsTransformFeedback_adr := GetFuncAdr('glIsTransformFeedback');
    public z_IsTransformFeedback_ovr_0 := GetFuncOrNil&<function(id: TransformFeedbackName): boolean>(z_IsTransformFeedback_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function IsTransformFeedback(id: TransformFeedbackName): boolean;
    begin
      Result := z_IsTransformFeedback_ovr_0(id);
    end;
    
    public z_PauseTransformFeedback_adr := GetFuncAdr('glPauseTransformFeedback');
    public z_PauseTransformFeedback_ovr_0 := GetFuncOrNil&<procedure>(z_PauseTransformFeedback_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure PauseTransformFeedback;
    begin
      z_PauseTransformFeedback_ovr_0;
    end;
    
    public z_ResumeTransformFeedback_adr := GetFuncAdr('glResumeTransformFeedback');
    public z_ResumeTransformFeedback_ovr_0 := GetFuncOrNil&<procedure>(z_ResumeTransformFeedback_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ResumeTransformFeedback;
    begin
      z_ResumeTransformFeedback_ovr_0;
    end;
    
    public z_DrawTransformFeedback_adr := GetFuncAdr('glDrawTransformFeedback');
    public z_DrawTransformFeedback_ovr_0 := GetFuncOrNil&<procedure(mode: PrimitiveType; id: TransformFeedbackName)>(z_DrawTransformFeedback_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure DrawTransformFeedback(mode: PrimitiveType; id: TransformFeedbackName);
    begin
      z_DrawTransformFeedback_ovr_0(mode, id);
    end;
    
  end;
  
  glTransformFeedback3ARB = sealed class
    public static function GetFuncAdr([MarshalAs(UnmanagedType.LPStr)] lpszProc: string): IntPtr;
    external 'opengl32.dll' name 'wglGetProcAddress';
    public static function GetFuncOrNil<T>(fadr: IntPtr) :=
    fadr=IntPtr.Zero ? default(T) :
    Marshal.GetDelegateForFunctionPointer&<T>(fadr);
    
    public z_DrawTransformFeedbackStream_adr := GetFuncAdr('glDrawTransformFeedbackStream');
    public z_DrawTransformFeedbackStream_ovr_0 := GetFuncOrNil&<procedure(mode: PrimitiveType; id: TransformFeedbackName; stream: UInt32)>(z_DrawTransformFeedbackStream_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure DrawTransformFeedbackStream(mode: PrimitiveType; id: TransformFeedbackName; stream: UInt32);
    begin
      z_DrawTransformFeedbackStream_ovr_0(mode, id, stream);
    end;
    
    public z_BeginQueryIndexed_adr := GetFuncAdr('glBeginQueryIndexed');
    public z_BeginQueryIndexed_ovr_0 := GetFuncOrNil&<procedure(target: QueryTarget; index: UInt32; id: QueryName)>(z_BeginQueryIndexed_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure BeginQueryIndexed(target: QueryTarget; index: UInt32; id: QueryName);
    begin
      z_BeginQueryIndexed_ovr_0(target, index, id);
    end;
    
    public z_EndQueryIndexed_adr := GetFuncAdr('glEndQueryIndexed');
    public z_EndQueryIndexed_ovr_0 := GetFuncOrNil&<procedure(target: QueryTarget; index: UInt32)>(z_EndQueryIndexed_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure EndQueryIndexed(target: QueryTarget; index: UInt32);
    begin
      z_EndQueryIndexed_ovr_0(target, index);
    end;
    
    public z_GetQueryIndexediv_adr := GetFuncAdr('glGetQueryIndexediv');
    public z_GetQueryIndexediv_ovr_0 := GetFuncOrNil&<procedure(target: QueryTarget; index: UInt32; pname: QueryParameterName; var &params: Int32)>(z_GetQueryIndexediv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetQueryIndexediv(target: QueryTarget; index: UInt32; pname: QueryParameterName; &params: array of Int32);
    begin
      z_GetQueryIndexediv_ovr_0(target, index, pname, &params[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetQueryIndexediv(target: QueryTarget; index: UInt32; pname: QueryParameterName; var &params: Int32);
    begin
      z_GetQueryIndexediv_ovr_0(target, index, pname, &params);
    end;
    public z_GetQueryIndexediv_ovr_2 := GetFuncOrNil&<procedure(target: QueryTarget; index: UInt32; pname: QueryParameterName; &params: IntPtr)>(z_GetQueryIndexediv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetQueryIndexediv(target: QueryTarget; index: UInt32; pname: QueryParameterName; &params: IntPtr);
    begin
      z_GetQueryIndexediv_ovr_2(target, index, pname, &params);
    end;
    
  end;
  
  glTransformFeedbackInstancedARB = sealed class
    public static function GetFuncAdr([MarshalAs(UnmanagedType.LPStr)] lpszProc: string): IntPtr;
    external 'opengl32.dll' name 'wglGetProcAddress';
    public static function GetFuncOrNil<T>(fadr: IntPtr) :=
    fadr=IntPtr.Zero ? default(T) :
    Marshal.GetDelegateForFunctionPointer&<T>(fadr);
    
    public z_DrawTransformFeedbackInstanced_adr := GetFuncAdr('glDrawTransformFeedbackInstanced');
    public z_DrawTransformFeedbackInstanced_ovr_0 := GetFuncOrNil&<procedure(mode: PrimitiveType; id: TransformFeedbackName; instancecount: Int32)>(z_DrawTransformFeedbackInstanced_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure DrawTransformFeedbackInstanced(mode: PrimitiveType; id: TransformFeedbackName; instancecount: Int32);
    begin
      z_DrawTransformFeedbackInstanced_ovr_0(mode, id, instancecount);
    end;
    
    public z_DrawTransformFeedbackStreamInstanced_adr := GetFuncAdr('glDrawTransformFeedbackStreamInstanced');
    public z_DrawTransformFeedbackStreamInstanced_ovr_0 := GetFuncOrNil&<procedure(mode: PrimitiveType; id: TransformFeedbackName; stream: UInt32; instancecount: Int32)>(z_DrawTransformFeedbackStreamInstanced_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure DrawTransformFeedbackStreamInstanced(mode: PrimitiveType; id: TransformFeedbackName; stream: UInt32; instancecount: Int32);
    begin
      z_DrawTransformFeedbackStreamInstanced_ovr_0(mode, id, stream, instancecount);
    end;
    
  end;
  
  glTransposeMatrixARB = sealed class
    public static function GetFuncAdr([MarshalAs(UnmanagedType.LPStr)] lpszProc: string): IntPtr;
    external 'opengl32.dll' name 'wglGetProcAddress';
    public static function GetFuncOrNil<T>(fadr: IntPtr) :=
    fadr=IntPtr.Zero ? default(T) :
    Marshal.GetDelegateForFunctionPointer&<T>(fadr);
    
    public z_LoadTransposeMatrixfARB_adr := GetFuncAdr('glLoadTransposeMatrixfARB');
    public z_LoadTransposeMatrixfARB_ovr_0 := GetFuncOrNil&<procedure(var m: single)>(z_LoadTransposeMatrixfARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure LoadTransposeMatrixfARB(m: array of single);
    begin
      z_LoadTransposeMatrixfARB_ovr_0(m[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure LoadTransposeMatrixfARB(var m: single);
    begin
      z_LoadTransposeMatrixfARB_ovr_0(m);
    end;
    public z_LoadTransposeMatrixfARB_ovr_2 := GetFuncOrNil&<procedure(m: IntPtr)>(z_LoadTransposeMatrixfARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure LoadTransposeMatrixfARB(m: IntPtr);
    begin
      z_LoadTransposeMatrixfARB_ovr_2(m);
    end;
    
    public z_LoadTransposeMatrixdARB_adr := GetFuncAdr('glLoadTransposeMatrixdARB');
    public z_LoadTransposeMatrixdARB_ovr_0 := GetFuncOrNil&<procedure(var m: real)>(z_LoadTransposeMatrixdARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure LoadTransposeMatrixdARB(m: array of real);
    begin
      z_LoadTransposeMatrixdARB_ovr_0(m[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure LoadTransposeMatrixdARB(var m: real);
    begin
      z_LoadTransposeMatrixdARB_ovr_0(m);
    end;
    public z_LoadTransposeMatrixdARB_ovr_2 := GetFuncOrNil&<procedure(m: IntPtr)>(z_LoadTransposeMatrixdARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure LoadTransposeMatrixdARB(m: IntPtr);
    begin
      z_LoadTransposeMatrixdARB_ovr_2(m);
    end;
    
    public z_MultTransposeMatrixfARB_adr := GetFuncAdr('glMultTransposeMatrixfARB');
    public z_MultTransposeMatrixfARB_ovr_0 := GetFuncOrNil&<procedure(var m: single)>(z_MultTransposeMatrixfARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultTransposeMatrixfARB(m: array of single);
    begin
      z_MultTransposeMatrixfARB_ovr_0(m[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultTransposeMatrixfARB(var m: single);
    begin
      z_MultTransposeMatrixfARB_ovr_0(m);
    end;
    public z_MultTransposeMatrixfARB_ovr_2 := GetFuncOrNil&<procedure(m: IntPtr)>(z_MultTransposeMatrixfARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultTransposeMatrixfARB(m: IntPtr);
    begin
      z_MultTransposeMatrixfARB_ovr_2(m);
    end;
    
    public z_MultTransposeMatrixdARB_adr := GetFuncAdr('glMultTransposeMatrixdARB');
    public z_MultTransposeMatrixdARB_ovr_0 := GetFuncOrNil&<procedure(var m: real)>(z_MultTransposeMatrixdARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultTransposeMatrixdARB(m: array of real);
    begin
      z_MultTransposeMatrixdARB_ovr_0(m[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultTransposeMatrixdARB(var m: real);
    begin
      z_MultTransposeMatrixdARB_ovr_0(m);
    end;
    public z_MultTransposeMatrixdARB_ovr_2 := GetFuncOrNil&<procedure(m: IntPtr)>(z_MultTransposeMatrixdARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultTransposeMatrixdARB(m: IntPtr);
    begin
      z_MultTransposeMatrixdARB_ovr_2(m);
    end;
    
  end;
  
  glUniformBufferObjectARB = sealed class
    public static function GetFuncAdr([MarshalAs(UnmanagedType.LPStr)] lpszProc: string): IntPtr;
    external 'opengl32.dll' name 'wglGetProcAddress';
    public static function GetFuncOrNil<T>(fadr: IntPtr) :=
    fadr=IntPtr.Zero ? default(T) :
    Marshal.GetDelegateForFunctionPointer&<T>(fadr);
    
    public z_GetUniformIndices_adr := GetFuncAdr('glGetUniformIndices');
    public z_GetUniformIndices_ovr_0 := GetFuncOrNil&<procedure(&program: ProgramName; uniformCount: Int32; var uniformNames: IntPtr; var uniformIndices: UInt32)>(z_GetUniformIndices_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetUniformIndices(&program: ProgramName; uniformCount: Int32; uniformNames: array of string; uniformIndices: array of UInt32);
    begin
      var par_3_str_ptr := uniformNames.ConvertAll(arr_el1->Marshal.StringToHGlobalAnsi(arr_el1));
      z_GetUniformIndices_ovr_0(&program, uniformCount, par_3_str_ptr[0], uniformIndices[0]);
      foreach var arr_el1 in par_3_str_ptr do Marshal.FreeHGlobal(arr_el1);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetUniformIndices(&program: ProgramName; uniformCount: Int32; uniformNames: array of string; var uniformIndices: UInt32);
    begin
      var par_3_str_ptr := uniformNames.ConvertAll(arr_el1->Marshal.StringToHGlobalAnsi(arr_el1));
      z_GetUniformIndices_ovr_0(&program, uniformCount, par_3_str_ptr[0], uniformIndices);
      foreach var arr_el1 in par_3_str_ptr do Marshal.FreeHGlobal(arr_el1);
    end;
    public z_GetUniformIndices_ovr_2 := GetFuncOrNil&<procedure(&program: ProgramName; uniformCount: Int32; var uniformNames: IntPtr; uniformIndices: IntPtr)>(z_GetUniformIndices_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetUniformIndices(&program: ProgramName; uniformCount: Int32; uniformNames: array of string; uniformIndices: IntPtr);
    begin
      var par_3_str_ptr := uniformNames.ConvertAll(arr_el1->Marshal.StringToHGlobalAnsi(arr_el1));
      z_GetUniformIndices_ovr_2(&program, uniformCount, par_3_str_ptr[0], uniformIndices);
      foreach var arr_el1 in par_3_str_ptr do Marshal.FreeHGlobal(arr_el1);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetUniformIndices(&program: ProgramName; uniformCount: Int32; uniformNames: array of IntPtr; uniformIndices: array of UInt32);
    begin
      z_GetUniformIndices_ovr_0(&program, uniformCount, uniformNames[0], uniformIndices[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetUniformIndices(&program: ProgramName; uniformCount: Int32; uniformNames: array of IntPtr; var uniformIndices: UInt32);
    begin
      z_GetUniformIndices_ovr_0(&program, uniformCount, uniformNames[0], uniformIndices);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetUniformIndices(&program: ProgramName; uniformCount: Int32; uniformNames: array of IntPtr; uniformIndices: IntPtr);
    begin
      z_GetUniformIndices_ovr_2(&program, uniformCount, uniformNames[0], uniformIndices);
    end;
    public z_GetUniformIndices_ovr_6 := GetFuncOrNil&<procedure(&program: ProgramName; uniformCount: Int32; uniformNames: IntPtr; var uniformIndices: UInt32)>(z_GetUniformIndices_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetUniformIndices(&program: ProgramName; uniformCount: Int32; uniformNames: IntPtr; uniformIndices: array of UInt32);
    begin
      z_GetUniformIndices_ovr_6(&program, uniformCount, uniformNames, uniformIndices[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetUniformIndices(&program: ProgramName; uniformCount: Int32; uniformNames: IntPtr; var uniformIndices: UInt32);
    begin
      z_GetUniformIndices_ovr_6(&program, uniformCount, uniformNames, uniformIndices);
    end;
    public z_GetUniformIndices_ovr_8 := GetFuncOrNil&<procedure(&program: ProgramName; uniformCount: Int32; uniformNames: IntPtr; uniformIndices: IntPtr)>(z_GetUniformIndices_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetUniformIndices(&program: ProgramName; uniformCount: Int32; uniformNames: IntPtr; uniformIndices: IntPtr);
    begin
      z_GetUniformIndices_ovr_8(&program, uniformCount, uniformNames, uniformIndices);
    end;
    
    public z_GetActiveUniformsiv_adr := GetFuncAdr('glGetActiveUniformsiv');
    public z_GetActiveUniformsiv_ovr_0 := GetFuncOrNil&<procedure(&program: UInt32; uniformCount: Int32; var uniformIndices: UInt32; pname: UniformPName; var &params: Int32)>(z_GetActiveUniformsiv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetActiveUniformsiv(&program: UInt32; uniformCount: Int32; uniformIndices: array of UInt32; pname: UniformPName; &params: array of Int32);
    begin
      z_GetActiveUniformsiv_ovr_0(&program, uniformCount, uniformIndices[0], pname, &params[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetActiveUniformsiv(&program: UInt32; uniformCount: Int32; uniformIndices: array of UInt32; pname: UniformPName; var &params: Int32);
    begin
      z_GetActiveUniformsiv_ovr_0(&program, uniformCount, uniformIndices[0], pname, &params);
    end;
    public z_GetActiveUniformsiv_ovr_2 := GetFuncOrNil&<procedure(&program: UInt32; uniformCount: Int32; var uniformIndices: UInt32; pname: UniformPName; &params: IntPtr)>(z_GetActiveUniformsiv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetActiveUniformsiv(&program: UInt32; uniformCount: Int32; uniformIndices: array of UInt32; pname: UniformPName; &params: IntPtr);
    begin
      z_GetActiveUniformsiv_ovr_2(&program, uniformCount, uniformIndices[0], pname, &params);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetActiveUniformsiv(&program: UInt32; uniformCount: Int32; var uniformIndices: UInt32; pname: UniformPName; &params: array of Int32);
    begin
      z_GetActiveUniformsiv_ovr_0(&program, uniformCount, uniformIndices, pname, &params[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetActiveUniformsiv(&program: UInt32; uniformCount: Int32; var uniformIndices: UInt32; pname: UniformPName; var &params: Int32);
    begin
      z_GetActiveUniformsiv_ovr_0(&program, uniformCount, uniformIndices, pname, &params);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetActiveUniformsiv(&program: UInt32; uniformCount: Int32; var uniformIndices: UInt32; pname: UniformPName; &params: IntPtr);
    begin
      z_GetActiveUniformsiv_ovr_2(&program, uniformCount, uniformIndices, pname, &params);
    end;
    public z_GetActiveUniformsiv_ovr_6 := GetFuncOrNil&<procedure(&program: UInt32; uniformCount: Int32; uniformIndices: IntPtr; pname: UniformPName; var &params: Int32)>(z_GetActiveUniformsiv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetActiveUniformsiv(&program: UInt32; uniformCount: Int32; uniformIndices: IntPtr; pname: UniformPName; &params: array of Int32);
    begin
      z_GetActiveUniformsiv_ovr_6(&program, uniformCount, uniformIndices, pname, &params[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetActiveUniformsiv(&program: UInt32; uniformCount: Int32; uniformIndices: IntPtr; pname: UniformPName; var &params: Int32);
    begin
      z_GetActiveUniformsiv_ovr_6(&program, uniformCount, uniformIndices, pname, &params);
    end;
    public z_GetActiveUniformsiv_ovr_8 := GetFuncOrNil&<procedure(&program: UInt32; uniformCount: Int32; uniformIndices: IntPtr; pname: UniformPName; &params: IntPtr)>(z_GetActiveUniformsiv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetActiveUniformsiv(&program: UInt32; uniformCount: Int32; uniformIndices: IntPtr; pname: UniformPName; &params: IntPtr);
    begin
      z_GetActiveUniformsiv_ovr_8(&program, uniformCount, uniformIndices, pname, &params);
    end;
    
    public z_GetActiveUniformName_adr := GetFuncAdr('glGetActiveUniformName');
    public z_GetActiveUniformName_ovr_0 := GetFuncOrNil&<procedure(&program: UInt32; uniformIndex: UInt32; bufSize: Int32; var length: Int32; uniformName: IntPtr)>(z_GetActiveUniformName_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetActiveUniformName(&program: UInt32; uniformIndex: UInt32; bufSize: Int32; length: array of Int32; uniformName: IntPtr);
    begin
      z_GetActiveUniformName_ovr_0(&program, uniformIndex, bufSize, length[0], uniformName);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetActiveUniformName(&program: UInt32; uniformIndex: UInt32; bufSize: Int32; var length: Int32; uniformName: IntPtr);
    begin
      z_GetActiveUniformName_ovr_0(&program, uniformIndex, bufSize, length, uniformName);
    end;
    public z_GetActiveUniformName_ovr_2 := GetFuncOrNil&<procedure(&program: UInt32; uniformIndex: UInt32; bufSize: Int32; length: IntPtr; uniformName: IntPtr)>(z_GetActiveUniformName_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetActiveUniformName(&program: UInt32; uniformIndex: UInt32; bufSize: Int32; length: IntPtr; uniformName: IntPtr);
    begin
      z_GetActiveUniformName_ovr_2(&program, uniformIndex, bufSize, length, uniformName);
    end;
    
    public z_GetUniformBlockIndex_adr := GetFuncAdr('glGetUniformBlockIndex');
    public z_GetUniformBlockIndex_ovr_0 := GetFuncOrNil&<function(&program: ProgramName; uniformBlockName: IntPtr): UInt32>(z_GetUniformBlockIndex_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetUniformBlockIndex(&program: ProgramName; uniformBlockName: string): UInt32;
    begin
      var par_2_str_ptr := Marshal.StringToHGlobalAnsi(uniformBlockName);
      Result := z_GetUniformBlockIndex_ovr_0(&program, par_2_str_ptr);
      Marshal.FreeHGlobal(par_2_str_ptr);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetUniformBlockIndex(&program: ProgramName; uniformBlockName: IntPtr): UInt32;
    begin
      Result := z_GetUniformBlockIndex_ovr_0(&program, uniformBlockName);
    end;
    
    public z_GetActiveUniformBlockiv_adr := GetFuncAdr('glGetActiveUniformBlockiv');
    public z_GetActiveUniformBlockiv_ovr_0 := GetFuncOrNil&<procedure(&program: UInt32; uniformBlockIndex: UInt32; pname: UniformBlockPName; var &params: Int32)>(z_GetActiveUniformBlockiv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetActiveUniformBlockiv(&program: UInt32; uniformBlockIndex: UInt32; pname: UniformBlockPName; &params: array of Int32);
    begin
      z_GetActiveUniformBlockiv_ovr_0(&program, uniformBlockIndex, pname, &params[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetActiveUniformBlockiv(&program: UInt32; uniformBlockIndex: UInt32; pname: UniformBlockPName; var &params: Int32);
    begin
      z_GetActiveUniformBlockiv_ovr_0(&program, uniformBlockIndex, pname, &params);
    end;
    public z_GetActiveUniformBlockiv_ovr_2 := GetFuncOrNil&<procedure(&program: UInt32; uniformBlockIndex: UInt32; pname: UniformBlockPName; &params: IntPtr)>(z_GetActiveUniformBlockiv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetActiveUniformBlockiv(&program: UInt32; uniformBlockIndex: UInt32; pname: UniformBlockPName; &params: IntPtr);
    begin
      z_GetActiveUniformBlockiv_ovr_2(&program, uniformBlockIndex, pname, &params);
    end;
    
    public z_GetActiveUniformBlockName_adr := GetFuncAdr('glGetActiveUniformBlockName');
    public z_GetActiveUniformBlockName_ovr_0 := GetFuncOrNil&<procedure(&program: UInt32; uniformBlockIndex: UInt32; bufSize: Int32; var length: Int32; uniformBlockName: IntPtr)>(z_GetActiveUniformBlockName_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetActiveUniformBlockName(&program: UInt32; uniformBlockIndex: UInt32; bufSize: Int32; length: array of Int32; uniformBlockName: IntPtr);
    begin
      z_GetActiveUniformBlockName_ovr_0(&program, uniformBlockIndex, bufSize, length[0], uniformBlockName);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetActiveUniformBlockName(&program: UInt32; uniformBlockIndex: UInt32; bufSize: Int32; var length: Int32; uniformBlockName: IntPtr);
    begin
      z_GetActiveUniformBlockName_ovr_0(&program, uniformBlockIndex, bufSize, length, uniformBlockName);
    end;
    public z_GetActiveUniformBlockName_ovr_2 := GetFuncOrNil&<procedure(&program: UInt32; uniformBlockIndex: UInt32; bufSize: Int32; length: IntPtr; uniformBlockName: IntPtr)>(z_GetActiveUniformBlockName_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetActiveUniformBlockName(&program: UInt32; uniformBlockIndex: UInt32; bufSize: Int32; length: IntPtr; uniformBlockName: IntPtr);
    begin
      z_GetActiveUniformBlockName_ovr_2(&program, uniformBlockIndex, bufSize, length, uniformBlockName);
    end;
    
    public z_UniformBlockBinding_adr := GetFuncAdr('glUniformBlockBinding');
    public z_UniformBlockBinding_ovr_0 := GetFuncOrNil&<procedure(&program: ProgramName; uniformBlockIndex: UInt32; uniformBlockBinding: UInt32)>(z_UniformBlockBinding_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure UniformBlockBinding(&program: ProgramName; uniformBlockIndex: UInt32; uniformBlockBinding: UInt32);
    begin
      z_UniformBlockBinding_ovr_0(&program, uniformBlockIndex, uniformBlockBinding);
    end;
    
    public z_BindBufferRange_adr := GetFuncAdr('glBindBufferRange');
    public z_BindBufferRange_ovr_0 := GetFuncOrNil&<procedure(target: BufferTargetARB; index: UInt32; buffer: BufferName; offset: IntPtr; size: IntPtr)>(z_BindBufferRange_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure BindBufferRange(target: BufferTargetARB; index: UInt32; buffer: BufferName; offset: IntPtr; size: IntPtr);
    begin
      z_BindBufferRange_ovr_0(target, index, buffer, offset, size);
    end;
    
    public z_BindBufferBase_adr := GetFuncAdr('glBindBufferBase');
    public z_BindBufferBase_ovr_0 := GetFuncOrNil&<procedure(target: BufferTargetARB; index: UInt32; buffer: BufferName)>(z_BindBufferBase_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure BindBufferBase(target: BufferTargetARB; index: UInt32; buffer: BufferName);
    begin
      z_BindBufferBase_ovr_0(target, index, buffer);
    end;
    
    public z_GetIntegeri_v_adr := GetFuncAdr('glGetIntegeri_v');
    public z_GetIntegeri_v_ovr_0 := GetFuncOrNil&<procedure(target: DummyEnum; index: UInt32; var data: Int32)>(z_GetIntegeri_v_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetIntegeri_v(target: DummyEnum; index: UInt32; data: array of Int32);
    begin
      z_GetIntegeri_v_ovr_0(target, index, data[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetIntegeri_v(target: DummyEnum; index: UInt32; var data: Int32);
    begin
      z_GetIntegeri_v_ovr_0(target, index, data);
    end;
    public z_GetIntegeri_v_ovr_2 := GetFuncOrNil&<procedure(target: DummyEnum; index: UInt32; data: IntPtr)>(z_GetIntegeri_v_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetIntegeri_v(target: DummyEnum; index: UInt32; data: IntPtr);
    begin
      z_GetIntegeri_v_ovr_2(target, index, data);
    end;
    
  end;
  
  glVertexArrayObjectARB = sealed class
    public static function GetFuncAdr([MarshalAs(UnmanagedType.LPStr)] lpszProc: string): IntPtr;
    external 'opengl32.dll' name 'wglGetProcAddress';
    public static function GetFuncOrNil<T>(fadr: IntPtr) :=
    fadr=IntPtr.Zero ? default(T) :
    Marshal.GetDelegateForFunctionPointer&<T>(fadr);
    
    public z_BindVertexArray_adr := GetFuncAdr('glBindVertexArray');
    public z_BindVertexArray_ovr_0 := GetFuncOrNil&<procedure(&array: VertexArrayName)>(z_BindVertexArray_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure BindVertexArray(&array: VertexArrayName);
    begin
      z_BindVertexArray_ovr_0(&array);
    end;
    
    public z_DeleteVertexArrays_adr := GetFuncAdr('glDeleteVertexArrays');
    public z_DeleteVertexArrays_ovr_0 := GetFuncOrNil&<procedure(n: Int32; var arrays: UInt32)>(z_DeleteVertexArrays_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure DeleteVertexArrays(n: Int32; arrays: array of UInt32);
    begin
      z_DeleteVertexArrays_ovr_0(n, arrays[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure DeleteVertexArrays(n: Int32; var arrays: UInt32);
    begin
      z_DeleteVertexArrays_ovr_0(n, arrays);
    end;
    public z_DeleteVertexArrays_ovr_2 := GetFuncOrNil&<procedure(n: Int32; arrays: IntPtr)>(z_DeleteVertexArrays_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure DeleteVertexArrays(n: Int32; arrays: IntPtr);
    begin
      z_DeleteVertexArrays_ovr_2(n, arrays);
    end;
    
    public z_GenVertexArrays_adr := GetFuncAdr('glGenVertexArrays');
    public z_GenVertexArrays_ovr_0 := GetFuncOrNil&<procedure(n: Int32; var arrays: UInt32)>(z_GenVertexArrays_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GenVertexArrays(n: Int32; arrays: array of UInt32);
    begin
      z_GenVertexArrays_ovr_0(n, arrays[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GenVertexArrays(n: Int32; var arrays: UInt32);
    begin
      z_GenVertexArrays_ovr_0(n, arrays);
    end;
    public z_GenVertexArrays_ovr_2 := GetFuncOrNil&<procedure(n: Int32; arrays: IntPtr)>(z_GenVertexArrays_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GenVertexArrays(n: Int32; arrays: IntPtr);
    begin
      z_GenVertexArrays_ovr_2(n, arrays);
    end;
    
    public z_IsVertexArray_adr := GetFuncAdr('glIsVertexArray');
    public z_IsVertexArray_ovr_0 := GetFuncOrNil&<function(&array: VertexArrayName): boolean>(z_IsVertexArray_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function IsVertexArray(&array: VertexArrayName): boolean;
    begin
      Result := z_IsVertexArray_ovr_0(&array);
    end;
    
  end;
  
  glVertexAttrib64bitARB = sealed class
    public static function GetFuncAdr([MarshalAs(UnmanagedType.LPStr)] lpszProc: string): IntPtr;
    external 'opengl32.dll' name 'wglGetProcAddress';
    public static function GetFuncOrNil<T>(fadr: IntPtr) :=
    fadr=IntPtr.Zero ? default(T) :
    Marshal.GetDelegateForFunctionPointer&<T>(fadr);
    
    public z_VertexAttribL1d_adr := GetFuncAdr('glVertexAttribL1d');
    public z_VertexAttribL1d_ovr_0 := GetFuncOrNil&<procedure(index: UInt32; x: real)>(z_VertexAttribL1d_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttribL1d(index: UInt32; x: real);
    begin
      z_VertexAttribL1d_ovr_0(index, x);
    end;
    
    public z_VertexAttribL2d_adr := GetFuncAdr('glVertexAttribL2d');
    public z_VertexAttribL2d_ovr_0 := GetFuncOrNil&<procedure(index: UInt32; x: real; y: real)>(z_VertexAttribL2d_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttribL2d(index: UInt32; x: real; y: real);
    begin
      z_VertexAttribL2d_ovr_0(index, x, y);
    end;
    
    public z_VertexAttribL3d_adr := GetFuncAdr('glVertexAttribL3d');
    public z_VertexAttribL3d_ovr_0 := GetFuncOrNil&<procedure(index: UInt32; x: real; y: real; z: real)>(z_VertexAttribL3d_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttribL3d(index: UInt32; x: real; y: real; z: real);
    begin
      z_VertexAttribL3d_ovr_0(index, x, y, z);
    end;
    
    public z_VertexAttribL4d_adr := GetFuncAdr('glVertexAttribL4d');
    public z_VertexAttribL4d_ovr_0 := GetFuncOrNil&<procedure(index: UInt32; x: real; y: real; z: real; w: real)>(z_VertexAttribL4d_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttribL4d(index: UInt32; x: real; y: real; z: real; w: real);
    begin
      z_VertexAttribL4d_ovr_0(index, x, y, z, w);
    end;
    
    public z_VertexAttribL1dv_adr := GetFuncAdr('glVertexAttribL1dv');
    public z_VertexAttribL1dv_ovr_0 := GetFuncOrNil&<procedure(index: UInt32; var v: real)>(z_VertexAttribL1dv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttribL1dv(index: UInt32; v: array of real);
    begin
      z_VertexAttribL1dv_ovr_0(index, v[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttribL1dv(index: UInt32; var v: real);
    begin
      z_VertexAttribL1dv_ovr_0(index, v);
    end;
    public z_VertexAttribL1dv_ovr_2 := GetFuncOrNil&<procedure(index: UInt32; v: IntPtr)>(z_VertexAttribL1dv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttribL1dv(index: UInt32; v: IntPtr);
    begin
      z_VertexAttribL1dv_ovr_2(index, v);
    end;
    
    public z_VertexAttribL2dv_adr := GetFuncAdr('glVertexAttribL2dv');
    public z_VertexAttribL2dv_ovr_0 := GetFuncOrNil&<procedure(index: UInt32; var v: real)>(z_VertexAttribL2dv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttribL2dv(index: UInt32; v: array of real);
    begin
      z_VertexAttribL2dv_ovr_0(index, v[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttribL2dv(index: UInt32; var v: real);
    begin
      z_VertexAttribL2dv_ovr_0(index, v);
    end;
    public z_VertexAttribL2dv_ovr_2 := GetFuncOrNil&<procedure(index: UInt32; v: IntPtr)>(z_VertexAttribL2dv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttribL2dv(index: UInt32; v: IntPtr);
    begin
      z_VertexAttribL2dv_ovr_2(index, v);
    end;
    
    public z_VertexAttribL3dv_adr := GetFuncAdr('glVertexAttribL3dv');
    public z_VertexAttribL3dv_ovr_0 := GetFuncOrNil&<procedure(index: UInt32; var v: real)>(z_VertexAttribL3dv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttribL3dv(index: UInt32; v: array of real);
    begin
      z_VertexAttribL3dv_ovr_0(index, v[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttribL3dv(index: UInt32; var v: real);
    begin
      z_VertexAttribL3dv_ovr_0(index, v);
    end;
    public z_VertexAttribL3dv_ovr_2 := GetFuncOrNil&<procedure(index: UInt32; v: IntPtr)>(z_VertexAttribL3dv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttribL3dv(index: UInt32; v: IntPtr);
    begin
      z_VertexAttribL3dv_ovr_2(index, v);
    end;
    
    public z_VertexAttribL4dv_adr := GetFuncAdr('glVertexAttribL4dv');
    public z_VertexAttribL4dv_ovr_0 := GetFuncOrNil&<procedure(index: UInt32; var v: real)>(z_VertexAttribL4dv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttribL4dv(index: UInt32; v: array of real);
    begin
      z_VertexAttribL4dv_ovr_0(index, v[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttribL4dv(index: UInt32; var v: real);
    begin
      z_VertexAttribL4dv_ovr_0(index, v);
    end;
    public z_VertexAttribL4dv_ovr_2 := GetFuncOrNil&<procedure(index: UInt32; v: IntPtr)>(z_VertexAttribL4dv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttribL4dv(index: UInt32; v: IntPtr);
    begin
      z_VertexAttribL4dv_ovr_2(index, v);
    end;
    
    public z_VertexAttribLPointer_adr := GetFuncAdr('glVertexAttribLPointer');
    public z_VertexAttribLPointer_ovr_0 := GetFuncOrNil&<procedure(index: UInt32; size: Int32; &type: VertexAttribPointerType; stride: Int32; pointer: IntPtr)>(z_VertexAttribLPointer_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttribLPointer(index: UInt32; size: Int32; &type: VertexAttribPointerType; stride: Int32; pointer: IntPtr);
    begin
      z_VertexAttribLPointer_ovr_0(index, size, &type, stride, pointer);
    end;
    
    public z_GetVertexAttribLdv_adr := GetFuncAdr('glGetVertexAttribLdv');
    public z_GetVertexAttribLdv_ovr_0 := GetFuncOrNil&<procedure(index: UInt32; pname: VertexAttribEnum; var &params: real)>(z_GetVertexAttribLdv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetVertexAttribLdv(index: UInt32; pname: VertexAttribEnum; &params: array of real);
    begin
      z_GetVertexAttribLdv_ovr_0(index, pname, &params[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetVertexAttribLdv(index: UInt32; pname: VertexAttribEnum; var &params: real);
    begin
      z_GetVertexAttribLdv_ovr_0(index, pname, &params);
    end;
    public z_GetVertexAttribLdv_ovr_2 := GetFuncOrNil&<procedure(index: UInt32; pname: VertexAttribEnum; &params: IntPtr)>(z_GetVertexAttribLdv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetVertexAttribLdv(index: UInt32; pname: VertexAttribEnum; &params: IntPtr);
    begin
      z_GetVertexAttribLdv_ovr_2(index, pname, &params);
    end;
    
  end;
  
  glVertexAttribBindingARB = sealed class
    public static function GetFuncAdr([MarshalAs(UnmanagedType.LPStr)] lpszProc: string): IntPtr;
    external 'opengl32.dll' name 'wglGetProcAddress';
    public static function GetFuncOrNil<T>(fadr: IntPtr) :=
    fadr=IntPtr.Zero ? default(T) :
    Marshal.GetDelegateForFunctionPointer&<T>(fadr);
    
    public z_BindVertexBuffer_adr := GetFuncAdr('glBindVertexBuffer');
    public z_BindVertexBuffer_ovr_0 := GetFuncOrNil&<procedure(bindingindex: UInt32; buffer: BufferName; offset: IntPtr; stride: Int32)>(z_BindVertexBuffer_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure BindVertexBuffer(bindingindex: UInt32; buffer: BufferName; offset: IntPtr; stride: Int32);
    begin
      z_BindVertexBuffer_ovr_0(bindingindex, buffer, offset, stride);
    end;
    
    public z_VertexAttribFormat_adr := GetFuncAdr('glVertexAttribFormat');
    public z_VertexAttribFormat_ovr_0 := GetFuncOrNil&<procedure(attribindex: UInt32; size: Int32; &type: VertexAttribType; normalized: boolean; relativeoffset: UInt32)>(z_VertexAttribFormat_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttribFormat(attribindex: UInt32; size: Int32; &type: VertexAttribType; normalized: boolean; relativeoffset: UInt32);
    begin
      z_VertexAttribFormat_ovr_0(attribindex, size, &type, normalized, relativeoffset);
    end;
    
    public z_VertexAttribIFormat_adr := GetFuncAdr('glVertexAttribIFormat');
    public z_VertexAttribIFormat_ovr_0 := GetFuncOrNil&<procedure(attribindex: UInt32; size: Int32; &type: VertexAttribIType; relativeoffset: UInt32)>(z_VertexAttribIFormat_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttribIFormat(attribindex: UInt32; size: Int32; &type: VertexAttribIType; relativeoffset: UInt32);
    begin
      z_VertexAttribIFormat_ovr_0(attribindex, size, &type, relativeoffset);
    end;
    
    public z_VertexAttribLFormat_adr := GetFuncAdr('glVertexAttribLFormat');
    public z_VertexAttribLFormat_ovr_0 := GetFuncOrNil&<procedure(attribindex: UInt32; size: Int32; &type: VertexAttribLType; relativeoffset: UInt32)>(z_VertexAttribLFormat_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttribLFormat(attribindex: UInt32; size: Int32; &type: VertexAttribLType; relativeoffset: UInt32);
    begin
      z_VertexAttribLFormat_ovr_0(attribindex, size, &type, relativeoffset);
    end;
    
    public z_VertexAttribBinding_adr := GetFuncAdr('glVertexAttribBinding');
    public z_VertexAttribBinding_ovr_0 := GetFuncOrNil&<procedure(attribindex: UInt32; bindingindex: UInt32)>(z_VertexAttribBinding_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttribBinding(attribindex: UInt32; bindingindex: UInt32);
    begin
      z_VertexAttribBinding_ovr_0(attribindex, bindingindex);
    end;
    
    public z_VertexBindingDivisor_adr := GetFuncAdr('glVertexBindingDivisor');
    public z_VertexBindingDivisor_ovr_0 := GetFuncOrNil&<procedure(bindingindex: UInt32; divisor: UInt32)>(z_VertexBindingDivisor_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexBindingDivisor(bindingindex: UInt32; divisor: UInt32);
    begin
      z_VertexBindingDivisor_ovr_0(bindingindex, divisor);
    end;
    
  end;
  
  glVertexBlendARB = sealed class
    public static function GetFuncAdr([MarshalAs(UnmanagedType.LPStr)] lpszProc: string): IntPtr;
    external 'opengl32.dll' name 'wglGetProcAddress';
    public static function GetFuncOrNil<T>(fadr: IntPtr) :=
    fadr=IntPtr.Zero ? default(T) :
    Marshal.GetDelegateForFunctionPointer&<T>(fadr);
    
    public z_WeightbvARB_adr := GetFuncAdr('glWeightbvARB');
    public z_WeightbvARB_ovr_0 := GetFuncOrNil&<procedure(size: Int32; var weights: SByte)>(z_WeightbvARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure WeightbvARB(size: Int32; weights: array of SByte);
    begin
      z_WeightbvARB_ovr_0(size, weights[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure WeightbvARB(size: Int32; var weights: SByte);
    begin
      z_WeightbvARB_ovr_0(size, weights);
    end;
    public z_WeightbvARB_ovr_2 := GetFuncOrNil&<procedure(size: Int32; weights: IntPtr)>(z_WeightbvARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure WeightbvARB(size: Int32; weights: IntPtr);
    begin
      z_WeightbvARB_ovr_2(size, weights);
    end;
    
    public z_WeightsvARB_adr := GetFuncAdr('glWeightsvARB');
    public z_WeightsvARB_ovr_0 := GetFuncOrNil&<procedure(size: Int32; var weights: Int16)>(z_WeightsvARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure WeightsvARB(size: Int32; weights: array of Int16);
    begin
      z_WeightsvARB_ovr_0(size, weights[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure WeightsvARB(size: Int32; var weights: Int16);
    begin
      z_WeightsvARB_ovr_0(size, weights);
    end;
    public z_WeightsvARB_ovr_2 := GetFuncOrNil&<procedure(size: Int32; weights: IntPtr)>(z_WeightsvARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure WeightsvARB(size: Int32; weights: IntPtr);
    begin
      z_WeightsvARB_ovr_2(size, weights);
    end;
    
    public z_WeightivARB_adr := GetFuncAdr('glWeightivARB');
    public z_WeightivARB_ovr_0 := GetFuncOrNil&<procedure(size: Int32; var weights: Int32)>(z_WeightivARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure WeightivARB(size: Int32; weights: array of Int32);
    begin
      z_WeightivARB_ovr_0(size, weights[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure WeightivARB(size: Int32; var weights: Int32);
    begin
      z_WeightivARB_ovr_0(size, weights);
    end;
    public z_WeightivARB_ovr_2 := GetFuncOrNil&<procedure(size: Int32; weights: IntPtr)>(z_WeightivARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure WeightivARB(size: Int32; weights: IntPtr);
    begin
      z_WeightivARB_ovr_2(size, weights);
    end;
    
    public z_WeightfvARB_adr := GetFuncAdr('glWeightfvARB');
    public z_WeightfvARB_ovr_0 := GetFuncOrNil&<procedure(size: Int32; var weights: single)>(z_WeightfvARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure WeightfvARB(size: Int32; weights: array of single);
    begin
      z_WeightfvARB_ovr_0(size, weights[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure WeightfvARB(size: Int32; var weights: single);
    begin
      z_WeightfvARB_ovr_0(size, weights);
    end;
    public z_WeightfvARB_ovr_2 := GetFuncOrNil&<procedure(size: Int32; weights: IntPtr)>(z_WeightfvARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure WeightfvARB(size: Int32; weights: IntPtr);
    begin
      z_WeightfvARB_ovr_2(size, weights);
    end;
    
    public z_WeightdvARB_adr := GetFuncAdr('glWeightdvARB');
    public z_WeightdvARB_ovr_0 := GetFuncOrNil&<procedure(size: Int32; var weights: real)>(z_WeightdvARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure WeightdvARB(size: Int32; weights: array of real);
    begin
      z_WeightdvARB_ovr_0(size, weights[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure WeightdvARB(size: Int32; var weights: real);
    begin
      z_WeightdvARB_ovr_0(size, weights);
    end;
    public z_WeightdvARB_ovr_2 := GetFuncOrNil&<procedure(size: Int32; weights: IntPtr)>(z_WeightdvARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure WeightdvARB(size: Int32; weights: IntPtr);
    begin
      z_WeightdvARB_ovr_2(size, weights);
    end;
    
    public z_WeightubvARB_adr := GetFuncAdr('glWeightubvARB');
    public z_WeightubvARB_ovr_0 := GetFuncOrNil&<procedure(size: Int32; var weights: Byte)>(z_WeightubvARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure WeightubvARB(size: Int32; weights: array of Byte);
    begin
      z_WeightubvARB_ovr_0(size, weights[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure WeightubvARB(size: Int32; var weights: Byte);
    begin
      z_WeightubvARB_ovr_0(size, weights);
    end;
    public z_WeightubvARB_ovr_2 := GetFuncOrNil&<procedure(size: Int32; weights: IntPtr)>(z_WeightubvARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure WeightubvARB(size: Int32; weights: IntPtr);
    begin
      z_WeightubvARB_ovr_2(size, weights);
    end;
    
    public z_WeightusvARB_adr := GetFuncAdr('glWeightusvARB');
    public z_WeightusvARB_ovr_0 := GetFuncOrNil&<procedure(size: Int32; var weights: UInt16)>(z_WeightusvARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure WeightusvARB(size: Int32; weights: array of UInt16);
    begin
      z_WeightusvARB_ovr_0(size, weights[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure WeightusvARB(size: Int32; var weights: UInt16);
    begin
      z_WeightusvARB_ovr_0(size, weights);
    end;
    public z_WeightusvARB_ovr_2 := GetFuncOrNil&<procedure(size: Int32; weights: IntPtr)>(z_WeightusvARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure WeightusvARB(size: Int32; weights: IntPtr);
    begin
      z_WeightusvARB_ovr_2(size, weights);
    end;
    
    public z_WeightuivARB_adr := GetFuncAdr('glWeightuivARB');
    public z_WeightuivARB_ovr_0 := GetFuncOrNil&<procedure(size: Int32; var weights: UInt32)>(z_WeightuivARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure WeightuivARB(size: Int32; weights: array of UInt32);
    begin
      z_WeightuivARB_ovr_0(size, weights[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure WeightuivARB(size: Int32; var weights: UInt32);
    begin
      z_WeightuivARB_ovr_0(size, weights);
    end;
    public z_WeightuivARB_ovr_2 := GetFuncOrNil&<procedure(size: Int32; weights: IntPtr)>(z_WeightuivARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure WeightuivARB(size: Int32; weights: IntPtr);
    begin
      z_WeightuivARB_ovr_2(size, weights);
    end;
    
    public z_WeightPointerARB_adr := GetFuncAdr('glWeightPointerARB');
    public z_WeightPointerARB_ovr_0 := GetFuncOrNil&<procedure(size: Int32; &type: WeightPointerTypeARB; stride: Int32; pointer: IntPtr)>(z_WeightPointerARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure WeightPointerARB(size: Int32; &type: WeightPointerTypeARB; stride: Int32; pointer: IntPtr);
    begin
      z_WeightPointerARB_ovr_0(size, &type, stride, pointer);
    end;
    
    public z_VertexBlendARB_adr := GetFuncAdr('glVertexBlendARB');
    public z_VertexBlendARB_ovr_0 := GetFuncOrNil&<procedure(count: Int32)>(z_VertexBlendARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexBlendARB(count: Int32);
    begin
      z_VertexBlendARB_ovr_0(count);
    end;
    
  end;
  
  glVertexBufferObjectARB = sealed class
    public static function GetFuncAdr([MarshalAs(UnmanagedType.LPStr)] lpszProc: string): IntPtr;
    external 'opengl32.dll' name 'wglGetProcAddress';
    public static function GetFuncOrNil<T>(fadr: IntPtr) :=
    fadr=IntPtr.Zero ? default(T) :
    Marshal.GetDelegateForFunctionPointer&<T>(fadr);
    
    public z_BindBufferARB_adr := GetFuncAdr('glBindBufferARB');
    public z_BindBufferARB_ovr_0 := GetFuncOrNil&<procedure(target: BufferTargetARB; buffer: UInt32)>(z_BindBufferARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure BindBufferARB(target: BufferTargetARB; buffer: UInt32);
    begin
      z_BindBufferARB_ovr_0(target, buffer);
    end;
    
    public z_DeleteBuffersARB_adr := GetFuncAdr('glDeleteBuffersARB');
    public z_DeleteBuffersARB_ovr_0 := GetFuncOrNil&<procedure(n: Int32; var buffers: UInt32)>(z_DeleteBuffersARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure DeleteBuffersARB(n: Int32; buffers: array of UInt32);
    begin
      z_DeleteBuffersARB_ovr_0(n, buffers[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure DeleteBuffersARB(n: Int32; var buffers: UInt32);
    begin
      z_DeleteBuffersARB_ovr_0(n, buffers);
    end;
    public z_DeleteBuffersARB_ovr_2 := GetFuncOrNil&<procedure(n: Int32; buffers: IntPtr)>(z_DeleteBuffersARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure DeleteBuffersARB(n: Int32; buffers: IntPtr);
    begin
      z_DeleteBuffersARB_ovr_2(n, buffers);
    end;
    
    public z_GenBuffersARB_adr := GetFuncAdr('glGenBuffersARB');
    public z_GenBuffersARB_ovr_0 := GetFuncOrNil&<procedure(n: Int32; var buffers: UInt32)>(z_GenBuffersARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GenBuffersARB(n: Int32; buffers: array of UInt32);
    begin
      z_GenBuffersARB_ovr_0(n, buffers[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GenBuffersARB(n: Int32; var buffers: UInt32);
    begin
      z_GenBuffersARB_ovr_0(n, buffers);
    end;
    public z_GenBuffersARB_ovr_2 := GetFuncOrNil&<procedure(n: Int32; buffers: IntPtr)>(z_GenBuffersARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GenBuffersARB(n: Int32; buffers: IntPtr);
    begin
      z_GenBuffersARB_ovr_2(n, buffers);
    end;
    
    public z_IsBufferARB_adr := GetFuncAdr('glIsBufferARB');
    public z_IsBufferARB_ovr_0 := GetFuncOrNil&<function(buffer: UInt32): boolean>(z_IsBufferARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function IsBufferARB(buffer: UInt32): boolean;
    begin
      Result := z_IsBufferARB_ovr_0(buffer);
    end;
    
    public z_BufferDataARB_adr := GetFuncAdr('glBufferDataARB');
    public z_BufferDataARB_ovr_0 := GetFuncOrNil&<procedure(target: BufferTargetARB; size: IntPtr; data: IntPtr; usage: BufferUsageARB)>(z_BufferDataARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure BufferDataARB(target: BufferTargetARB; size: IntPtr; data: IntPtr; usage: BufferUsageARB);
    begin
      z_BufferDataARB_ovr_0(target, size, data, usage);
    end;
    
    public z_BufferSubDataARB_adr := GetFuncAdr('glBufferSubDataARB');
    public z_BufferSubDataARB_ovr_0 := GetFuncOrNil&<procedure(target: BufferTargetARB; offset: IntPtr; size: IntPtr; data: IntPtr)>(z_BufferSubDataARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure BufferSubDataARB(target: BufferTargetARB; offset: IntPtr; size: IntPtr; data: IntPtr);
    begin
      z_BufferSubDataARB_ovr_0(target, offset, size, data);
    end;
    
    public z_GetBufferSubDataARB_adr := GetFuncAdr('glGetBufferSubDataARB');
    public z_GetBufferSubDataARB_ovr_0 := GetFuncOrNil&<procedure(target: BufferTargetARB; offset: IntPtr; size: IntPtr; data: IntPtr)>(z_GetBufferSubDataARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetBufferSubDataARB(target: BufferTargetARB; offset: IntPtr; size: IntPtr; data: IntPtr);
    begin
      z_GetBufferSubDataARB_ovr_0(target, offset, size, data);
    end;
    
    public z_MapBufferARB_adr := GetFuncAdr('glMapBufferARB');
    public z_MapBufferARB_ovr_0 := GetFuncOrNil&<function(target: BufferTargetARB; access: BufferAccessARB): IntPtr>(z_MapBufferARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function MapBufferARB(target: BufferTargetARB; access: BufferAccessARB): IntPtr;
    begin
      Result := z_MapBufferARB_ovr_0(target, access);
    end;
    
    public z_UnmapBufferARB_adr := GetFuncAdr('glUnmapBufferARB');
    public z_UnmapBufferARB_ovr_0 := GetFuncOrNil&<function(target: BufferTargetARB): boolean>(z_UnmapBufferARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function UnmapBufferARB(target: BufferTargetARB): boolean;
    begin
      Result := z_UnmapBufferARB_ovr_0(target);
    end;
    
    public z_GetBufferParameterivARB_adr := GetFuncAdr('glGetBufferParameterivARB');
    public z_GetBufferParameterivARB_ovr_0 := GetFuncOrNil&<procedure(target: BufferTargetARB; pname: BufferPNameARB; var &params: Int32)>(z_GetBufferParameterivARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetBufferParameterivARB(target: BufferTargetARB; pname: BufferPNameARB; &params: array of Int32);
    begin
      z_GetBufferParameterivARB_ovr_0(target, pname, &params[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetBufferParameterivARB(target: BufferTargetARB; pname: BufferPNameARB; var &params: Int32);
    begin
      z_GetBufferParameterivARB_ovr_0(target, pname, &params);
    end;
    public z_GetBufferParameterivARB_ovr_2 := GetFuncOrNil&<procedure(target: BufferTargetARB; pname: BufferPNameARB; &params: IntPtr)>(z_GetBufferParameterivARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetBufferParameterivARB(target: BufferTargetARB; pname: BufferPNameARB; &params: IntPtr);
    begin
      z_GetBufferParameterivARB_ovr_2(target, pname, &params);
    end;
    
    public z_GetBufferPointervARB_adr := GetFuncAdr('glGetBufferPointervARB');
    public z_GetBufferPointervARB_ovr_0 := GetFuncOrNil&<procedure(target: BufferTargetARB; pname: BufferPointerNameARB; var &params: IntPtr)>(z_GetBufferPointervARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetBufferPointervARB(target: BufferTargetARB; pname: BufferPointerNameARB; &params: array of IntPtr);
    begin
      z_GetBufferPointervARB_ovr_0(target, pname, &params[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetBufferPointervARB(target: BufferTargetARB; pname: BufferPointerNameARB; var &params: IntPtr);
    begin
      z_GetBufferPointervARB_ovr_0(target, pname, &params);
    end;
    public z_GetBufferPointervARB_ovr_2 := GetFuncOrNil&<procedure(target: BufferTargetARB; pname: BufferPointerNameARB; &params: pointer)>(z_GetBufferPointervARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetBufferPointervARB(target: BufferTargetARB; pname: BufferPointerNameARB; &params: pointer);
    begin
      z_GetBufferPointervARB_ovr_2(target, pname, &params);
    end;
    
  end;
  
  glVertexProgramARB = sealed class
    public static function GetFuncAdr([MarshalAs(UnmanagedType.LPStr)] lpszProc: string): IntPtr;
    external 'opengl32.dll' name 'wglGetProcAddress';
    public static function GetFuncOrNil<T>(fadr: IntPtr) :=
    fadr=IntPtr.Zero ? default(T) :
    Marshal.GetDelegateForFunctionPointer&<T>(fadr);
    
    public z_VertexAttrib1dARB_adr := GetFuncAdr('glVertexAttrib1dARB');
    public z_VertexAttrib1dARB_ovr_0 := GetFuncOrNil&<procedure(index: UInt32; x: real)>(z_VertexAttrib1dARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttrib1dARB(index: UInt32; x: real);
    begin
      z_VertexAttrib1dARB_ovr_0(index, x);
    end;
    
    public z_VertexAttrib1dvARB_adr := GetFuncAdr('glVertexAttrib1dvARB');
    public z_VertexAttrib1dvARB_ovr_0 := GetFuncOrNil&<procedure(index: UInt32; var v: real)>(z_VertexAttrib1dvARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttrib1dvARB(index: UInt32; v: array of real);
    begin
      z_VertexAttrib1dvARB_ovr_0(index, v[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttrib1dvARB(index: UInt32; var v: real);
    begin
      z_VertexAttrib1dvARB_ovr_0(index, v);
    end;
    public z_VertexAttrib1dvARB_ovr_2 := GetFuncOrNil&<procedure(index: UInt32; v: IntPtr)>(z_VertexAttrib1dvARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttrib1dvARB(index: UInt32; v: IntPtr);
    begin
      z_VertexAttrib1dvARB_ovr_2(index, v);
    end;
    
    public z_VertexAttrib1fARB_adr := GetFuncAdr('glVertexAttrib1fARB');
    public z_VertexAttrib1fARB_ovr_0 := GetFuncOrNil&<procedure(index: UInt32; x: single)>(z_VertexAttrib1fARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttrib1fARB(index: UInt32; x: single);
    begin
      z_VertexAttrib1fARB_ovr_0(index, x);
    end;
    
    public z_VertexAttrib1fvARB_adr := GetFuncAdr('glVertexAttrib1fvARB');
    public z_VertexAttrib1fvARB_ovr_0 := GetFuncOrNil&<procedure(index: UInt32; var v: single)>(z_VertexAttrib1fvARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttrib1fvARB(index: UInt32; v: array of single);
    begin
      z_VertexAttrib1fvARB_ovr_0(index, v[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttrib1fvARB(index: UInt32; var v: single);
    begin
      z_VertexAttrib1fvARB_ovr_0(index, v);
    end;
    public z_VertexAttrib1fvARB_ovr_2 := GetFuncOrNil&<procedure(index: UInt32; v: IntPtr)>(z_VertexAttrib1fvARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttrib1fvARB(index: UInt32; v: IntPtr);
    begin
      z_VertexAttrib1fvARB_ovr_2(index, v);
    end;
    
    public z_VertexAttrib1sARB_adr := GetFuncAdr('glVertexAttrib1sARB');
    public z_VertexAttrib1sARB_ovr_0 := GetFuncOrNil&<procedure(index: UInt32; x: Int16)>(z_VertexAttrib1sARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttrib1sARB(index: UInt32; x: Int16);
    begin
      z_VertexAttrib1sARB_ovr_0(index, x);
    end;
    
    public z_VertexAttrib1svARB_adr := GetFuncAdr('glVertexAttrib1svARB');
    public z_VertexAttrib1svARB_ovr_0 := GetFuncOrNil&<procedure(index: UInt32; var v: Int16)>(z_VertexAttrib1svARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttrib1svARB(index: UInt32; v: array of Int16);
    begin
      z_VertexAttrib1svARB_ovr_0(index, v[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttrib1svARB(index: UInt32; var v: Int16);
    begin
      z_VertexAttrib1svARB_ovr_0(index, v);
    end;
    public z_VertexAttrib1svARB_ovr_2 := GetFuncOrNil&<procedure(index: UInt32; v: IntPtr)>(z_VertexAttrib1svARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttrib1svARB(index: UInt32; v: IntPtr);
    begin
      z_VertexAttrib1svARB_ovr_2(index, v);
    end;
    
    public z_VertexAttrib2dARB_adr := GetFuncAdr('glVertexAttrib2dARB');
    public z_VertexAttrib2dARB_ovr_0 := GetFuncOrNil&<procedure(index: UInt32; x: real; y: real)>(z_VertexAttrib2dARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttrib2dARB(index: UInt32; x: real; y: real);
    begin
      z_VertexAttrib2dARB_ovr_0(index, x, y);
    end;
    
    public z_VertexAttrib2dvARB_adr := GetFuncAdr('glVertexAttrib2dvARB');
    public z_VertexAttrib2dvARB_ovr_0 := GetFuncOrNil&<procedure(index: UInt32; var v: real)>(z_VertexAttrib2dvARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttrib2dvARB(index: UInt32; v: array of real);
    begin
      z_VertexAttrib2dvARB_ovr_0(index, v[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttrib2dvARB(index: UInt32; var v: real);
    begin
      z_VertexAttrib2dvARB_ovr_0(index, v);
    end;
    public z_VertexAttrib2dvARB_ovr_2 := GetFuncOrNil&<procedure(index: UInt32; v: IntPtr)>(z_VertexAttrib2dvARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttrib2dvARB(index: UInt32; v: IntPtr);
    begin
      z_VertexAttrib2dvARB_ovr_2(index, v);
    end;
    
    public z_VertexAttrib2fARB_adr := GetFuncAdr('glVertexAttrib2fARB');
    public z_VertexAttrib2fARB_ovr_0 := GetFuncOrNil&<procedure(index: UInt32; x: single; y: single)>(z_VertexAttrib2fARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttrib2fARB(index: UInt32; x: single; y: single);
    begin
      z_VertexAttrib2fARB_ovr_0(index, x, y);
    end;
    
    public z_VertexAttrib2fvARB_adr := GetFuncAdr('glVertexAttrib2fvARB');
    public z_VertexAttrib2fvARB_ovr_0 := GetFuncOrNil&<procedure(index: UInt32; var v: single)>(z_VertexAttrib2fvARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttrib2fvARB(index: UInt32; v: array of single);
    begin
      z_VertexAttrib2fvARB_ovr_0(index, v[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttrib2fvARB(index: UInt32; var v: single);
    begin
      z_VertexAttrib2fvARB_ovr_0(index, v);
    end;
    public z_VertexAttrib2fvARB_ovr_2 := GetFuncOrNil&<procedure(index: UInt32; v: IntPtr)>(z_VertexAttrib2fvARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttrib2fvARB(index: UInt32; v: IntPtr);
    begin
      z_VertexAttrib2fvARB_ovr_2(index, v);
    end;
    
    public z_VertexAttrib2sARB_adr := GetFuncAdr('glVertexAttrib2sARB');
    public z_VertexAttrib2sARB_ovr_0 := GetFuncOrNil&<procedure(index: UInt32; x: Int16; y: Int16)>(z_VertexAttrib2sARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttrib2sARB(index: UInt32; x: Int16; y: Int16);
    begin
      z_VertexAttrib2sARB_ovr_0(index, x, y);
    end;
    
    public z_VertexAttrib2svARB_adr := GetFuncAdr('glVertexAttrib2svARB');
    public z_VertexAttrib2svARB_ovr_0 := GetFuncOrNil&<procedure(index: UInt32; var v: Int16)>(z_VertexAttrib2svARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttrib2svARB(index: UInt32; v: array of Int16);
    begin
      z_VertexAttrib2svARB_ovr_0(index, v[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttrib2svARB(index: UInt32; var v: Int16);
    begin
      z_VertexAttrib2svARB_ovr_0(index, v);
    end;
    public z_VertexAttrib2svARB_ovr_2 := GetFuncOrNil&<procedure(index: UInt32; v: IntPtr)>(z_VertexAttrib2svARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttrib2svARB(index: UInt32; v: IntPtr);
    begin
      z_VertexAttrib2svARB_ovr_2(index, v);
    end;
    
    public z_VertexAttrib3dARB_adr := GetFuncAdr('glVertexAttrib3dARB');
    public z_VertexAttrib3dARB_ovr_0 := GetFuncOrNil&<procedure(index: UInt32; x: real; y: real; z: real)>(z_VertexAttrib3dARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttrib3dARB(index: UInt32; x: real; y: real; z: real);
    begin
      z_VertexAttrib3dARB_ovr_0(index, x, y, z);
    end;
    
    public z_VertexAttrib3dvARB_adr := GetFuncAdr('glVertexAttrib3dvARB');
    public z_VertexAttrib3dvARB_ovr_0 := GetFuncOrNil&<procedure(index: UInt32; var v: real)>(z_VertexAttrib3dvARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttrib3dvARB(index: UInt32; v: array of real);
    begin
      z_VertexAttrib3dvARB_ovr_0(index, v[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttrib3dvARB(index: UInt32; var v: real);
    begin
      z_VertexAttrib3dvARB_ovr_0(index, v);
    end;
    public z_VertexAttrib3dvARB_ovr_2 := GetFuncOrNil&<procedure(index: UInt32; v: IntPtr)>(z_VertexAttrib3dvARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttrib3dvARB(index: UInt32; v: IntPtr);
    begin
      z_VertexAttrib3dvARB_ovr_2(index, v);
    end;
    
    public z_VertexAttrib3fARB_adr := GetFuncAdr('glVertexAttrib3fARB');
    public z_VertexAttrib3fARB_ovr_0 := GetFuncOrNil&<procedure(index: UInt32; x: single; y: single; z: single)>(z_VertexAttrib3fARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttrib3fARB(index: UInt32; x: single; y: single; z: single);
    begin
      z_VertexAttrib3fARB_ovr_0(index, x, y, z);
    end;
    
    public z_VertexAttrib3fvARB_adr := GetFuncAdr('glVertexAttrib3fvARB');
    public z_VertexAttrib3fvARB_ovr_0 := GetFuncOrNil&<procedure(index: UInt32; var v: single)>(z_VertexAttrib3fvARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttrib3fvARB(index: UInt32; v: array of single);
    begin
      z_VertexAttrib3fvARB_ovr_0(index, v[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttrib3fvARB(index: UInt32; var v: single);
    begin
      z_VertexAttrib3fvARB_ovr_0(index, v);
    end;
    public z_VertexAttrib3fvARB_ovr_2 := GetFuncOrNil&<procedure(index: UInt32; v: IntPtr)>(z_VertexAttrib3fvARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttrib3fvARB(index: UInt32; v: IntPtr);
    begin
      z_VertexAttrib3fvARB_ovr_2(index, v);
    end;
    
    public z_VertexAttrib3sARB_adr := GetFuncAdr('glVertexAttrib3sARB');
    public z_VertexAttrib3sARB_ovr_0 := GetFuncOrNil&<procedure(index: UInt32; x: Int16; y: Int16; z: Int16)>(z_VertexAttrib3sARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttrib3sARB(index: UInt32; x: Int16; y: Int16; z: Int16);
    begin
      z_VertexAttrib3sARB_ovr_0(index, x, y, z);
    end;
    
    public z_VertexAttrib3svARB_adr := GetFuncAdr('glVertexAttrib3svARB');
    public z_VertexAttrib3svARB_ovr_0 := GetFuncOrNil&<procedure(index: UInt32; var v: Int16)>(z_VertexAttrib3svARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttrib3svARB(index: UInt32; v: array of Int16);
    begin
      z_VertexAttrib3svARB_ovr_0(index, v[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttrib3svARB(index: UInt32; var v: Int16);
    begin
      z_VertexAttrib3svARB_ovr_0(index, v);
    end;
    public z_VertexAttrib3svARB_ovr_2 := GetFuncOrNil&<procedure(index: UInt32; v: IntPtr)>(z_VertexAttrib3svARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttrib3svARB(index: UInt32; v: IntPtr);
    begin
      z_VertexAttrib3svARB_ovr_2(index, v);
    end;
    
    public z_VertexAttrib4NbvARB_adr := GetFuncAdr('glVertexAttrib4NbvARB');
    public z_VertexAttrib4NbvARB_ovr_0 := GetFuncOrNil&<procedure(index: UInt32; var v: SByte)>(z_VertexAttrib4NbvARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttrib4NbvARB(index: UInt32; v: array of SByte);
    begin
      z_VertexAttrib4NbvARB_ovr_0(index, v[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttrib4NbvARB(index: UInt32; var v: SByte);
    begin
      z_VertexAttrib4NbvARB_ovr_0(index, v);
    end;
    public z_VertexAttrib4NbvARB_ovr_2 := GetFuncOrNil&<procedure(index: UInt32; v: IntPtr)>(z_VertexAttrib4NbvARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttrib4NbvARB(index: UInt32; v: IntPtr);
    begin
      z_VertexAttrib4NbvARB_ovr_2(index, v);
    end;
    
    public z_VertexAttrib4NivARB_adr := GetFuncAdr('glVertexAttrib4NivARB');
    public z_VertexAttrib4NivARB_ovr_0 := GetFuncOrNil&<procedure(index: UInt32; var v: Int32)>(z_VertexAttrib4NivARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttrib4NivARB(index: UInt32; v: array of Int32);
    begin
      z_VertexAttrib4NivARB_ovr_0(index, v[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttrib4NivARB(index: UInt32; var v: Int32);
    begin
      z_VertexAttrib4NivARB_ovr_0(index, v);
    end;
    public z_VertexAttrib4NivARB_ovr_2 := GetFuncOrNil&<procedure(index: UInt32; v: IntPtr)>(z_VertexAttrib4NivARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttrib4NivARB(index: UInt32; v: IntPtr);
    begin
      z_VertexAttrib4NivARB_ovr_2(index, v);
    end;
    
    public z_VertexAttrib4NsvARB_adr := GetFuncAdr('glVertexAttrib4NsvARB');
    public z_VertexAttrib4NsvARB_ovr_0 := GetFuncOrNil&<procedure(index: UInt32; var v: Int16)>(z_VertexAttrib4NsvARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttrib4NsvARB(index: UInt32; v: array of Int16);
    begin
      z_VertexAttrib4NsvARB_ovr_0(index, v[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttrib4NsvARB(index: UInt32; var v: Int16);
    begin
      z_VertexAttrib4NsvARB_ovr_0(index, v);
    end;
    public z_VertexAttrib4NsvARB_ovr_2 := GetFuncOrNil&<procedure(index: UInt32; v: IntPtr)>(z_VertexAttrib4NsvARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttrib4NsvARB(index: UInt32; v: IntPtr);
    begin
      z_VertexAttrib4NsvARB_ovr_2(index, v);
    end;
    
    public z_VertexAttrib4NubARB_adr := GetFuncAdr('glVertexAttrib4NubARB');
    public z_VertexAttrib4NubARB_ovr_0 := GetFuncOrNil&<procedure(index: UInt32; x: Byte; y: Byte; z: Byte; w: Byte)>(z_VertexAttrib4NubARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttrib4NubARB(index: UInt32; x: Byte; y: Byte; z: Byte; w: Byte);
    begin
      z_VertexAttrib4NubARB_ovr_0(index, x, y, z, w);
    end;
    
    public z_VertexAttrib4NubvARB_adr := GetFuncAdr('glVertexAttrib4NubvARB');
    public z_VertexAttrib4NubvARB_ovr_0 := GetFuncOrNil&<procedure(index: UInt32; var v: Byte)>(z_VertexAttrib4NubvARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttrib4NubvARB(index: UInt32; v: array of Byte);
    begin
      z_VertexAttrib4NubvARB_ovr_0(index, v[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttrib4NubvARB(index: UInt32; var v: Byte);
    begin
      z_VertexAttrib4NubvARB_ovr_0(index, v);
    end;
    public z_VertexAttrib4NubvARB_ovr_2 := GetFuncOrNil&<procedure(index: UInt32; v: IntPtr)>(z_VertexAttrib4NubvARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttrib4NubvARB(index: UInt32; v: IntPtr);
    begin
      z_VertexAttrib4NubvARB_ovr_2(index, v);
    end;
    
    public z_VertexAttrib4NuivARB_adr := GetFuncAdr('glVertexAttrib4NuivARB');
    public z_VertexAttrib4NuivARB_ovr_0 := GetFuncOrNil&<procedure(index: UInt32; var v: UInt32)>(z_VertexAttrib4NuivARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttrib4NuivARB(index: UInt32; v: array of UInt32);
    begin
      z_VertexAttrib4NuivARB_ovr_0(index, v[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttrib4NuivARB(index: UInt32; var v: UInt32);
    begin
      z_VertexAttrib4NuivARB_ovr_0(index, v);
    end;
    public z_VertexAttrib4NuivARB_ovr_2 := GetFuncOrNil&<procedure(index: UInt32; v: IntPtr)>(z_VertexAttrib4NuivARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttrib4NuivARB(index: UInt32; v: IntPtr);
    begin
      z_VertexAttrib4NuivARB_ovr_2(index, v);
    end;
    
    public z_VertexAttrib4NusvARB_adr := GetFuncAdr('glVertexAttrib4NusvARB');
    public z_VertexAttrib4NusvARB_ovr_0 := GetFuncOrNil&<procedure(index: UInt32; var v: UInt16)>(z_VertexAttrib4NusvARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttrib4NusvARB(index: UInt32; v: array of UInt16);
    begin
      z_VertexAttrib4NusvARB_ovr_0(index, v[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttrib4NusvARB(index: UInt32; var v: UInt16);
    begin
      z_VertexAttrib4NusvARB_ovr_0(index, v);
    end;
    public z_VertexAttrib4NusvARB_ovr_2 := GetFuncOrNil&<procedure(index: UInt32; v: IntPtr)>(z_VertexAttrib4NusvARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttrib4NusvARB(index: UInt32; v: IntPtr);
    begin
      z_VertexAttrib4NusvARB_ovr_2(index, v);
    end;
    
    public z_VertexAttrib4bvARB_adr := GetFuncAdr('glVertexAttrib4bvARB');
    public z_VertexAttrib4bvARB_ovr_0 := GetFuncOrNil&<procedure(index: UInt32; var v: SByte)>(z_VertexAttrib4bvARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttrib4bvARB(index: UInt32; v: array of SByte);
    begin
      z_VertexAttrib4bvARB_ovr_0(index, v[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttrib4bvARB(index: UInt32; var v: SByte);
    begin
      z_VertexAttrib4bvARB_ovr_0(index, v);
    end;
    public z_VertexAttrib4bvARB_ovr_2 := GetFuncOrNil&<procedure(index: UInt32; v: IntPtr)>(z_VertexAttrib4bvARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttrib4bvARB(index: UInt32; v: IntPtr);
    begin
      z_VertexAttrib4bvARB_ovr_2(index, v);
    end;
    
    public z_VertexAttrib4dARB_adr := GetFuncAdr('glVertexAttrib4dARB');
    public z_VertexAttrib4dARB_ovr_0 := GetFuncOrNil&<procedure(index: UInt32; x: real; y: real; z: real; w: real)>(z_VertexAttrib4dARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttrib4dARB(index: UInt32; x: real; y: real; z: real; w: real);
    begin
      z_VertexAttrib4dARB_ovr_0(index, x, y, z, w);
    end;
    
    public z_VertexAttrib4dvARB_adr := GetFuncAdr('glVertexAttrib4dvARB');
    public z_VertexAttrib4dvARB_ovr_0 := GetFuncOrNil&<procedure(index: UInt32; var v: real)>(z_VertexAttrib4dvARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttrib4dvARB(index: UInt32; v: array of real);
    begin
      z_VertexAttrib4dvARB_ovr_0(index, v[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttrib4dvARB(index: UInt32; var v: real);
    begin
      z_VertexAttrib4dvARB_ovr_0(index, v);
    end;
    public z_VertexAttrib4dvARB_ovr_2 := GetFuncOrNil&<procedure(index: UInt32; v: IntPtr)>(z_VertexAttrib4dvARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttrib4dvARB(index: UInt32; v: IntPtr);
    begin
      z_VertexAttrib4dvARB_ovr_2(index, v);
    end;
    
    public z_VertexAttrib4fARB_adr := GetFuncAdr('glVertexAttrib4fARB');
    public z_VertexAttrib4fARB_ovr_0 := GetFuncOrNil&<procedure(index: UInt32; x: single; y: single; z: single; w: single)>(z_VertexAttrib4fARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttrib4fARB(index: UInt32; x: single; y: single; z: single; w: single);
    begin
      z_VertexAttrib4fARB_ovr_0(index, x, y, z, w);
    end;
    
    public z_VertexAttrib4fvARB_adr := GetFuncAdr('glVertexAttrib4fvARB');
    public z_VertexAttrib4fvARB_ovr_0 := GetFuncOrNil&<procedure(index: UInt32; var v: single)>(z_VertexAttrib4fvARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttrib4fvARB(index: UInt32; v: array of single);
    begin
      z_VertexAttrib4fvARB_ovr_0(index, v[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttrib4fvARB(index: UInt32; var v: single);
    begin
      z_VertexAttrib4fvARB_ovr_0(index, v);
    end;
    public z_VertexAttrib4fvARB_ovr_2 := GetFuncOrNil&<procedure(index: UInt32; v: IntPtr)>(z_VertexAttrib4fvARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttrib4fvARB(index: UInt32; v: IntPtr);
    begin
      z_VertexAttrib4fvARB_ovr_2(index, v);
    end;
    
    public z_VertexAttrib4ivARB_adr := GetFuncAdr('glVertexAttrib4ivARB');
    public z_VertexAttrib4ivARB_ovr_0 := GetFuncOrNil&<procedure(index: UInt32; var v: Int32)>(z_VertexAttrib4ivARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttrib4ivARB(index: UInt32; v: array of Int32);
    begin
      z_VertexAttrib4ivARB_ovr_0(index, v[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttrib4ivARB(index: UInt32; var v: Int32);
    begin
      z_VertexAttrib4ivARB_ovr_0(index, v);
    end;
    public z_VertexAttrib4ivARB_ovr_2 := GetFuncOrNil&<procedure(index: UInt32; v: IntPtr)>(z_VertexAttrib4ivARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttrib4ivARB(index: UInt32; v: IntPtr);
    begin
      z_VertexAttrib4ivARB_ovr_2(index, v);
    end;
    
    public z_VertexAttrib4sARB_adr := GetFuncAdr('glVertexAttrib4sARB');
    public z_VertexAttrib4sARB_ovr_0 := GetFuncOrNil&<procedure(index: UInt32; x: Int16; y: Int16; z: Int16; w: Int16)>(z_VertexAttrib4sARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttrib4sARB(index: UInt32; x: Int16; y: Int16; z: Int16; w: Int16);
    begin
      z_VertexAttrib4sARB_ovr_0(index, x, y, z, w);
    end;
    
    public z_VertexAttrib4svARB_adr := GetFuncAdr('glVertexAttrib4svARB');
    public z_VertexAttrib4svARB_ovr_0 := GetFuncOrNil&<procedure(index: UInt32; var v: Int16)>(z_VertexAttrib4svARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttrib4svARB(index: UInt32; v: array of Int16);
    begin
      z_VertexAttrib4svARB_ovr_0(index, v[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttrib4svARB(index: UInt32; var v: Int16);
    begin
      z_VertexAttrib4svARB_ovr_0(index, v);
    end;
    public z_VertexAttrib4svARB_ovr_2 := GetFuncOrNil&<procedure(index: UInt32; v: IntPtr)>(z_VertexAttrib4svARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttrib4svARB(index: UInt32; v: IntPtr);
    begin
      z_VertexAttrib4svARB_ovr_2(index, v);
    end;
    
    public z_VertexAttrib4ubvARB_adr := GetFuncAdr('glVertexAttrib4ubvARB');
    public z_VertexAttrib4ubvARB_ovr_0 := GetFuncOrNil&<procedure(index: UInt32; var v: Byte)>(z_VertexAttrib4ubvARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttrib4ubvARB(index: UInt32; v: array of Byte);
    begin
      z_VertexAttrib4ubvARB_ovr_0(index, v[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttrib4ubvARB(index: UInt32; var v: Byte);
    begin
      z_VertexAttrib4ubvARB_ovr_0(index, v);
    end;
    public z_VertexAttrib4ubvARB_ovr_2 := GetFuncOrNil&<procedure(index: UInt32; v: IntPtr)>(z_VertexAttrib4ubvARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttrib4ubvARB(index: UInt32; v: IntPtr);
    begin
      z_VertexAttrib4ubvARB_ovr_2(index, v);
    end;
    
    public z_VertexAttrib4uivARB_adr := GetFuncAdr('glVertexAttrib4uivARB');
    public z_VertexAttrib4uivARB_ovr_0 := GetFuncOrNil&<procedure(index: UInt32; var v: UInt32)>(z_VertexAttrib4uivARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttrib4uivARB(index: UInt32; v: array of UInt32);
    begin
      z_VertexAttrib4uivARB_ovr_0(index, v[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttrib4uivARB(index: UInt32; var v: UInt32);
    begin
      z_VertexAttrib4uivARB_ovr_0(index, v);
    end;
    public z_VertexAttrib4uivARB_ovr_2 := GetFuncOrNil&<procedure(index: UInt32; v: IntPtr)>(z_VertexAttrib4uivARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttrib4uivARB(index: UInt32; v: IntPtr);
    begin
      z_VertexAttrib4uivARB_ovr_2(index, v);
    end;
    
    public z_VertexAttrib4usvARB_adr := GetFuncAdr('glVertexAttrib4usvARB');
    public z_VertexAttrib4usvARB_ovr_0 := GetFuncOrNil&<procedure(index: UInt32; var v: UInt16)>(z_VertexAttrib4usvARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttrib4usvARB(index: UInt32; v: array of UInt16);
    begin
      z_VertexAttrib4usvARB_ovr_0(index, v[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttrib4usvARB(index: UInt32; var v: UInt16);
    begin
      z_VertexAttrib4usvARB_ovr_0(index, v);
    end;
    public z_VertexAttrib4usvARB_ovr_2 := GetFuncOrNil&<procedure(index: UInt32; v: IntPtr)>(z_VertexAttrib4usvARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttrib4usvARB(index: UInt32; v: IntPtr);
    begin
      z_VertexAttrib4usvARB_ovr_2(index, v);
    end;
    
    public z_VertexAttribPointerARB_adr := GetFuncAdr('glVertexAttribPointerARB');
    public z_VertexAttribPointerARB_ovr_0 := GetFuncOrNil&<procedure(index: UInt32; size: Int32; &type: VertexAttribPointerType; normalized: boolean; stride: Int32; pointer: IntPtr)>(z_VertexAttribPointerARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttribPointerARB(index: UInt32; size: Int32; &type: VertexAttribPointerType; normalized: boolean; stride: Int32; pointer: IntPtr);
    begin
      z_VertexAttribPointerARB_ovr_0(index, size, &type, normalized, stride, pointer);
    end;
    
    public z_EnableVertexAttribArrayARB_adr := GetFuncAdr('glEnableVertexAttribArrayARB');
    public z_EnableVertexAttribArrayARB_ovr_0 := GetFuncOrNil&<procedure(index: UInt32)>(z_EnableVertexAttribArrayARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure EnableVertexAttribArrayARB(index: UInt32);
    begin
      z_EnableVertexAttribArrayARB_ovr_0(index);
    end;
    
    public z_DisableVertexAttribArrayARB_adr := GetFuncAdr('glDisableVertexAttribArrayARB');
    public z_DisableVertexAttribArrayARB_ovr_0 := GetFuncOrNil&<procedure(index: UInt32)>(z_DisableVertexAttribArrayARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure DisableVertexAttribArrayARB(index: UInt32);
    begin
      z_DisableVertexAttribArrayARB_ovr_0(index);
    end;
    
    public z_ProgramStringARB_adr := GetFuncAdr('glProgramStringARB');
    public z_ProgramStringARB_ovr_0 := GetFuncOrNil&<procedure(target: ProgramTarget; format: ProgramFormat; len: Int32; string: IntPtr)>(z_ProgramStringARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramStringARB(target: ProgramTarget; format: ProgramFormat; len: Int32; string: IntPtr);
    begin
      z_ProgramStringARB_ovr_0(target, format, len, string);
    end;
    
    public z_BindProgramARB_adr := GetFuncAdr('glBindProgramARB');
    public z_BindProgramARB_ovr_0 := GetFuncOrNil&<procedure(target: ProgramTarget; &program: UInt32)>(z_BindProgramARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure BindProgramARB(target: ProgramTarget; &program: UInt32);
    begin
      z_BindProgramARB_ovr_0(target, &program);
    end;
    
    public z_DeleteProgramsARB_adr := GetFuncAdr('glDeleteProgramsARB');
    public z_DeleteProgramsARB_ovr_0 := GetFuncOrNil&<procedure(n: Int32; var programs: UInt32)>(z_DeleteProgramsARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure DeleteProgramsARB(n: Int32; programs: array of UInt32);
    begin
      z_DeleteProgramsARB_ovr_0(n, programs[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure DeleteProgramsARB(n: Int32; var programs: UInt32);
    begin
      z_DeleteProgramsARB_ovr_0(n, programs);
    end;
    public z_DeleteProgramsARB_ovr_2 := GetFuncOrNil&<procedure(n: Int32; programs: IntPtr)>(z_DeleteProgramsARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure DeleteProgramsARB(n: Int32; programs: IntPtr);
    begin
      z_DeleteProgramsARB_ovr_2(n, programs);
    end;
    
    public z_GenProgramsARB_adr := GetFuncAdr('glGenProgramsARB');
    public z_GenProgramsARB_ovr_0 := GetFuncOrNil&<procedure(n: Int32; var programs: UInt32)>(z_GenProgramsARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GenProgramsARB(n: Int32; programs: array of UInt32);
    begin
      z_GenProgramsARB_ovr_0(n, programs[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GenProgramsARB(n: Int32; var programs: UInt32);
    begin
      z_GenProgramsARB_ovr_0(n, programs);
    end;
    public z_GenProgramsARB_ovr_2 := GetFuncOrNil&<procedure(n: Int32; programs: IntPtr)>(z_GenProgramsARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GenProgramsARB(n: Int32; programs: IntPtr);
    begin
      z_GenProgramsARB_ovr_2(n, programs);
    end;
    
    public z_ProgramEnvParameter4dARB_adr := GetFuncAdr('glProgramEnvParameter4dARB');
    public z_ProgramEnvParameter4dARB_ovr_0 := GetFuncOrNil&<procedure(target: ProgramTarget; index: UInt32; x: real; y: real; z: real; w: real)>(z_ProgramEnvParameter4dARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramEnvParameter4dARB(target: ProgramTarget; index: UInt32; x: real; y: real; z: real; w: real);
    begin
      z_ProgramEnvParameter4dARB_ovr_0(target, index, x, y, z, w);
    end;
    
    public z_ProgramEnvParameter4dvARB_adr := GetFuncAdr('glProgramEnvParameter4dvARB');
    public z_ProgramEnvParameter4dvARB_ovr_0 := GetFuncOrNil&<procedure(target: ProgramTarget; index: UInt32; var &params: real)>(z_ProgramEnvParameter4dvARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramEnvParameter4dvARB(target: ProgramTarget; index: UInt32; &params: array of real);
    begin
      z_ProgramEnvParameter4dvARB_ovr_0(target, index, &params[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramEnvParameter4dvARB(target: ProgramTarget; index: UInt32; var &params: real);
    begin
      z_ProgramEnvParameter4dvARB_ovr_0(target, index, &params);
    end;
    public z_ProgramEnvParameter4dvARB_ovr_2 := GetFuncOrNil&<procedure(target: ProgramTarget; index: UInt32; &params: IntPtr)>(z_ProgramEnvParameter4dvARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramEnvParameter4dvARB(target: ProgramTarget; index: UInt32; &params: IntPtr);
    begin
      z_ProgramEnvParameter4dvARB_ovr_2(target, index, &params);
    end;
    
    public z_ProgramEnvParameter4fARB_adr := GetFuncAdr('glProgramEnvParameter4fARB');
    public z_ProgramEnvParameter4fARB_ovr_0 := GetFuncOrNil&<procedure(target: ProgramTarget; index: UInt32; x: single; y: single; z: single; w: single)>(z_ProgramEnvParameter4fARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramEnvParameter4fARB(target: ProgramTarget; index: UInt32; x: single; y: single; z: single; w: single);
    begin
      z_ProgramEnvParameter4fARB_ovr_0(target, index, x, y, z, w);
    end;
    
    public z_ProgramEnvParameter4fvARB_adr := GetFuncAdr('glProgramEnvParameter4fvARB');
    public z_ProgramEnvParameter4fvARB_ovr_0 := GetFuncOrNil&<procedure(target: ProgramTarget; index: UInt32; var &params: single)>(z_ProgramEnvParameter4fvARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramEnvParameter4fvARB(target: ProgramTarget; index: UInt32; &params: array of single);
    begin
      z_ProgramEnvParameter4fvARB_ovr_0(target, index, &params[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramEnvParameter4fvARB(target: ProgramTarget; index: UInt32; var &params: single);
    begin
      z_ProgramEnvParameter4fvARB_ovr_0(target, index, &params);
    end;
    public z_ProgramEnvParameter4fvARB_ovr_2 := GetFuncOrNil&<procedure(target: ProgramTarget; index: UInt32; &params: IntPtr)>(z_ProgramEnvParameter4fvARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramEnvParameter4fvARB(target: ProgramTarget; index: UInt32; &params: IntPtr);
    begin
      z_ProgramEnvParameter4fvARB_ovr_2(target, index, &params);
    end;
    
    public z_ProgramLocalParameter4dARB_adr := GetFuncAdr('glProgramLocalParameter4dARB');
    public z_ProgramLocalParameter4dARB_ovr_0 := GetFuncOrNil&<procedure(target: ProgramTarget; index: UInt32; x: real; y: real; z: real; w: real)>(z_ProgramLocalParameter4dARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramLocalParameter4dARB(target: ProgramTarget; index: UInt32; x: real; y: real; z: real; w: real);
    begin
      z_ProgramLocalParameter4dARB_ovr_0(target, index, x, y, z, w);
    end;
    
    public z_ProgramLocalParameter4dvARB_adr := GetFuncAdr('glProgramLocalParameter4dvARB');
    public z_ProgramLocalParameter4dvARB_ovr_0 := GetFuncOrNil&<procedure(target: ProgramTarget; index: UInt32; var &params: real)>(z_ProgramLocalParameter4dvARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramLocalParameter4dvARB(target: ProgramTarget; index: UInt32; &params: array of real);
    begin
      z_ProgramLocalParameter4dvARB_ovr_0(target, index, &params[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramLocalParameter4dvARB(target: ProgramTarget; index: UInt32; var &params: real);
    begin
      z_ProgramLocalParameter4dvARB_ovr_0(target, index, &params);
    end;
    public z_ProgramLocalParameter4dvARB_ovr_2 := GetFuncOrNil&<procedure(target: ProgramTarget; index: UInt32; &params: IntPtr)>(z_ProgramLocalParameter4dvARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramLocalParameter4dvARB(target: ProgramTarget; index: UInt32; &params: IntPtr);
    begin
      z_ProgramLocalParameter4dvARB_ovr_2(target, index, &params);
    end;
    
    public z_ProgramLocalParameter4fARB_adr := GetFuncAdr('glProgramLocalParameter4fARB');
    public z_ProgramLocalParameter4fARB_ovr_0 := GetFuncOrNil&<procedure(target: ProgramTarget; index: UInt32; x: single; y: single; z: single; w: single)>(z_ProgramLocalParameter4fARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramLocalParameter4fARB(target: ProgramTarget; index: UInt32; x: single; y: single; z: single; w: single);
    begin
      z_ProgramLocalParameter4fARB_ovr_0(target, index, x, y, z, w);
    end;
    
    public z_ProgramLocalParameter4fvARB_adr := GetFuncAdr('glProgramLocalParameter4fvARB');
    public z_ProgramLocalParameter4fvARB_ovr_0 := GetFuncOrNil&<procedure(target: ProgramTarget; index: UInt32; var &params: single)>(z_ProgramLocalParameter4fvARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramLocalParameter4fvARB(target: ProgramTarget; index: UInt32; &params: array of single);
    begin
      z_ProgramLocalParameter4fvARB_ovr_0(target, index, &params[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramLocalParameter4fvARB(target: ProgramTarget; index: UInt32; var &params: single);
    begin
      z_ProgramLocalParameter4fvARB_ovr_0(target, index, &params);
    end;
    public z_ProgramLocalParameter4fvARB_ovr_2 := GetFuncOrNil&<procedure(target: ProgramTarget; index: UInt32; &params: IntPtr)>(z_ProgramLocalParameter4fvARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramLocalParameter4fvARB(target: ProgramTarget; index: UInt32; &params: IntPtr);
    begin
      z_ProgramLocalParameter4fvARB_ovr_2(target, index, &params);
    end;
    
    public z_GetProgramEnvParameterdvARB_adr := GetFuncAdr('glGetProgramEnvParameterdvARB');
    public z_GetProgramEnvParameterdvARB_ovr_0 := GetFuncOrNil&<procedure(target: ProgramTarget; index: UInt32; var &params: real)>(z_GetProgramEnvParameterdvARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetProgramEnvParameterdvARB(target: ProgramTarget; index: UInt32; &params: array of real);
    begin
      z_GetProgramEnvParameterdvARB_ovr_0(target, index, &params[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetProgramEnvParameterdvARB(target: ProgramTarget; index: UInt32; var &params: real);
    begin
      z_GetProgramEnvParameterdvARB_ovr_0(target, index, &params);
    end;
    public z_GetProgramEnvParameterdvARB_ovr_2 := GetFuncOrNil&<procedure(target: ProgramTarget; index: UInt32; &params: IntPtr)>(z_GetProgramEnvParameterdvARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetProgramEnvParameterdvARB(target: ProgramTarget; index: UInt32; &params: IntPtr);
    begin
      z_GetProgramEnvParameterdvARB_ovr_2(target, index, &params);
    end;
    
    public z_GetProgramEnvParameterfvARB_adr := GetFuncAdr('glGetProgramEnvParameterfvARB');
    public z_GetProgramEnvParameterfvARB_ovr_0 := GetFuncOrNil&<procedure(target: ProgramTarget; index: UInt32; var &params: single)>(z_GetProgramEnvParameterfvARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetProgramEnvParameterfvARB(target: ProgramTarget; index: UInt32; &params: array of single);
    begin
      z_GetProgramEnvParameterfvARB_ovr_0(target, index, &params[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetProgramEnvParameterfvARB(target: ProgramTarget; index: UInt32; var &params: single);
    begin
      z_GetProgramEnvParameterfvARB_ovr_0(target, index, &params);
    end;
    public z_GetProgramEnvParameterfvARB_ovr_2 := GetFuncOrNil&<procedure(target: ProgramTarget; index: UInt32; &params: IntPtr)>(z_GetProgramEnvParameterfvARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetProgramEnvParameterfvARB(target: ProgramTarget; index: UInt32; &params: IntPtr);
    begin
      z_GetProgramEnvParameterfvARB_ovr_2(target, index, &params);
    end;
    
    public z_GetProgramLocalParameterdvARB_adr := GetFuncAdr('glGetProgramLocalParameterdvARB');
    public z_GetProgramLocalParameterdvARB_ovr_0 := GetFuncOrNil&<procedure(target: ProgramTarget; index: UInt32; var &params: real)>(z_GetProgramLocalParameterdvARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetProgramLocalParameterdvARB(target: ProgramTarget; index: UInt32; &params: array of real);
    begin
      z_GetProgramLocalParameterdvARB_ovr_0(target, index, &params[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetProgramLocalParameterdvARB(target: ProgramTarget; index: UInt32; var &params: real);
    begin
      z_GetProgramLocalParameterdvARB_ovr_0(target, index, &params);
    end;
    public z_GetProgramLocalParameterdvARB_ovr_2 := GetFuncOrNil&<procedure(target: ProgramTarget; index: UInt32; &params: IntPtr)>(z_GetProgramLocalParameterdvARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetProgramLocalParameterdvARB(target: ProgramTarget; index: UInt32; &params: IntPtr);
    begin
      z_GetProgramLocalParameterdvARB_ovr_2(target, index, &params);
    end;
    
    public z_GetProgramLocalParameterfvARB_adr := GetFuncAdr('glGetProgramLocalParameterfvARB');
    public z_GetProgramLocalParameterfvARB_ovr_0 := GetFuncOrNil&<procedure(target: ProgramTarget; index: UInt32; var &params: single)>(z_GetProgramLocalParameterfvARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetProgramLocalParameterfvARB(target: ProgramTarget; index: UInt32; &params: array of single);
    begin
      z_GetProgramLocalParameterfvARB_ovr_0(target, index, &params[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetProgramLocalParameterfvARB(target: ProgramTarget; index: UInt32; var &params: single);
    begin
      z_GetProgramLocalParameterfvARB_ovr_0(target, index, &params);
    end;
    public z_GetProgramLocalParameterfvARB_ovr_2 := GetFuncOrNil&<procedure(target: ProgramTarget; index: UInt32; &params: IntPtr)>(z_GetProgramLocalParameterfvARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetProgramLocalParameterfvARB(target: ProgramTarget; index: UInt32; &params: IntPtr);
    begin
      z_GetProgramLocalParameterfvARB_ovr_2(target, index, &params);
    end;
    
    public z_GetProgramivARB_adr := GetFuncAdr('glGetProgramivARB');
    public z_GetProgramivARB_ovr_0 := GetFuncOrNil&<procedure(target: ProgramTarget; pname: ProgramPropertyARB; var &params: Int32)>(z_GetProgramivARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetProgramivARB(target: ProgramTarget; pname: ProgramPropertyARB; &params: array of Int32);
    begin
      z_GetProgramivARB_ovr_0(target, pname, &params[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetProgramivARB(target: ProgramTarget; pname: ProgramPropertyARB; var &params: Int32);
    begin
      z_GetProgramivARB_ovr_0(target, pname, &params);
    end;
    public z_GetProgramivARB_ovr_2 := GetFuncOrNil&<procedure(target: ProgramTarget; pname: ProgramPropertyARB; &params: IntPtr)>(z_GetProgramivARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetProgramivARB(target: ProgramTarget; pname: ProgramPropertyARB; &params: IntPtr);
    begin
      z_GetProgramivARB_ovr_2(target, pname, &params);
    end;
    
    public z_GetProgramStringARB_adr := GetFuncAdr('glGetProgramStringARB');
    public z_GetProgramStringARB_ovr_0 := GetFuncOrNil&<procedure(target: ProgramTarget; pname: ProgramStringProperty; string: IntPtr)>(z_GetProgramStringARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetProgramStringARB(target: ProgramTarget; pname: ProgramStringProperty; string: IntPtr);
    begin
      z_GetProgramStringARB_ovr_0(target, pname, string);
    end;
    
    public z_GetVertexAttribdvARB_adr := GetFuncAdr('glGetVertexAttribdvARB');
    public z_GetVertexAttribdvARB_ovr_0 := GetFuncOrNil&<procedure(index: UInt32; pname: VertexAttribPropertyARB; var &params: real)>(z_GetVertexAttribdvARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetVertexAttribdvARB(index: UInt32; pname: VertexAttribPropertyARB; &params: array of real);
    begin
      z_GetVertexAttribdvARB_ovr_0(index, pname, &params[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetVertexAttribdvARB(index: UInt32; pname: VertexAttribPropertyARB; var &params: real);
    begin
      z_GetVertexAttribdvARB_ovr_0(index, pname, &params);
    end;
    public z_GetVertexAttribdvARB_ovr_2 := GetFuncOrNil&<procedure(index: UInt32; pname: VertexAttribPropertyARB; &params: IntPtr)>(z_GetVertexAttribdvARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetVertexAttribdvARB(index: UInt32; pname: VertexAttribPropertyARB; &params: IntPtr);
    begin
      z_GetVertexAttribdvARB_ovr_2(index, pname, &params);
    end;
    
    public z_GetVertexAttribfvARB_adr := GetFuncAdr('glGetVertexAttribfvARB');
    public z_GetVertexAttribfvARB_ovr_0 := GetFuncOrNil&<procedure(index: UInt32; pname: VertexAttribPropertyARB; var &params: single)>(z_GetVertexAttribfvARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetVertexAttribfvARB(index: UInt32; pname: VertexAttribPropertyARB; &params: array of single);
    begin
      z_GetVertexAttribfvARB_ovr_0(index, pname, &params[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetVertexAttribfvARB(index: UInt32; pname: VertexAttribPropertyARB; var &params: single);
    begin
      z_GetVertexAttribfvARB_ovr_0(index, pname, &params);
    end;
    public z_GetVertexAttribfvARB_ovr_2 := GetFuncOrNil&<procedure(index: UInt32; pname: VertexAttribPropertyARB; &params: IntPtr)>(z_GetVertexAttribfvARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetVertexAttribfvARB(index: UInt32; pname: VertexAttribPropertyARB; &params: IntPtr);
    begin
      z_GetVertexAttribfvARB_ovr_2(index, pname, &params);
    end;
    
    public z_GetVertexAttribivARB_adr := GetFuncAdr('glGetVertexAttribivARB');
    public z_GetVertexAttribivARB_ovr_0 := GetFuncOrNil&<procedure(index: UInt32; pname: VertexAttribPropertyARB; var &params: Int32)>(z_GetVertexAttribivARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetVertexAttribivARB(index: UInt32; pname: VertexAttribPropertyARB; &params: array of Int32);
    begin
      z_GetVertexAttribivARB_ovr_0(index, pname, &params[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetVertexAttribivARB(index: UInt32; pname: VertexAttribPropertyARB; var &params: Int32);
    begin
      z_GetVertexAttribivARB_ovr_0(index, pname, &params);
    end;
    public z_GetVertexAttribivARB_ovr_2 := GetFuncOrNil&<procedure(index: UInt32; pname: VertexAttribPropertyARB; &params: IntPtr)>(z_GetVertexAttribivARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetVertexAttribivARB(index: UInt32; pname: VertexAttribPropertyARB; &params: IntPtr);
    begin
      z_GetVertexAttribivARB_ovr_2(index, pname, &params);
    end;
    
    public z_GetVertexAttribPointervARB_adr := GetFuncAdr('glGetVertexAttribPointervARB');
    public z_GetVertexAttribPointervARB_ovr_0 := GetFuncOrNil&<procedure(index: UInt32; pname: VertexAttribPointerPropertyARB; var _pointer: IntPtr)>(z_GetVertexAttribPointervARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetVertexAttribPointervARB(index: UInt32; pname: VertexAttribPointerPropertyARB; _pointer: array of IntPtr);
    begin
      z_GetVertexAttribPointervARB_ovr_0(index, pname, _pointer[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetVertexAttribPointervARB(index: UInt32; pname: VertexAttribPointerPropertyARB; var _pointer: IntPtr);
    begin
      z_GetVertexAttribPointervARB_ovr_0(index, pname, _pointer);
    end;
    public z_GetVertexAttribPointervARB_ovr_2 := GetFuncOrNil&<procedure(index: UInt32; pname: VertexAttribPointerPropertyARB; _pointer: pointer)>(z_GetVertexAttribPointervARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetVertexAttribPointervARB(index: UInt32; pname: VertexAttribPointerPropertyARB; _pointer: pointer);
    begin
      z_GetVertexAttribPointervARB_ovr_2(index, pname, _pointer);
    end;
    
    public z_IsProgramARB_adr := GetFuncAdr('glIsProgramARB');
    public z_IsProgramARB_ovr_0 := GetFuncOrNil&<function(&program: UInt32): boolean>(z_IsProgramARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function IsProgramARB(&program: UInt32): boolean;
    begin
      Result := z_IsProgramARB_ovr_0(&program);
    end;
    
  end;
  
  glVertexShaderARB = sealed class
    public static function GetFuncAdr([MarshalAs(UnmanagedType.LPStr)] lpszProc: string): IntPtr;
    external 'opengl32.dll' name 'wglGetProcAddress';
    public static function GetFuncOrNil<T>(fadr: IntPtr) :=
    fadr=IntPtr.Zero ? default(T) :
    Marshal.GetDelegateForFunctionPointer&<T>(fadr);
    
    public z_VertexAttrib1fARB_adr := GetFuncAdr('glVertexAttrib1fARB');
    public z_VertexAttrib1fARB_ovr_0 := GetFuncOrNil&<procedure(index: UInt32; x: single)>(z_VertexAttrib1fARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttrib1fARB(index: UInt32; x: single);
    begin
      z_VertexAttrib1fARB_ovr_0(index, x);
    end;
    
    public z_VertexAttrib1sARB_adr := GetFuncAdr('glVertexAttrib1sARB');
    public z_VertexAttrib1sARB_ovr_0 := GetFuncOrNil&<procedure(index: UInt32; x: Int16)>(z_VertexAttrib1sARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttrib1sARB(index: UInt32; x: Int16);
    begin
      z_VertexAttrib1sARB_ovr_0(index, x);
    end;
    
    public z_VertexAttrib1dARB_adr := GetFuncAdr('glVertexAttrib1dARB');
    public z_VertexAttrib1dARB_ovr_0 := GetFuncOrNil&<procedure(index: UInt32; x: real)>(z_VertexAttrib1dARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttrib1dARB(index: UInt32; x: real);
    begin
      z_VertexAttrib1dARB_ovr_0(index, x);
    end;
    
    public z_VertexAttrib2fARB_adr := GetFuncAdr('glVertexAttrib2fARB');
    public z_VertexAttrib2fARB_ovr_0 := GetFuncOrNil&<procedure(index: UInt32; x: single; y: single)>(z_VertexAttrib2fARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttrib2fARB(index: UInt32; x: single; y: single);
    begin
      z_VertexAttrib2fARB_ovr_0(index, x, y);
    end;
    
    public z_VertexAttrib2sARB_adr := GetFuncAdr('glVertexAttrib2sARB');
    public z_VertexAttrib2sARB_ovr_0 := GetFuncOrNil&<procedure(index: UInt32; x: Int16; y: Int16)>(z_VertexAttrib2sARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttrib2sARB(index: UInt32; x: Int16; y: Int16);
    begin
      z_VertexAttrib2sARB_ovr_0(index, x, y);
    end;
    
    public z_VertexAttrib2dARB_adr := GetFuncAdr('glVertexAttrib2dARB');
    public z_VertexAttrib2dARB_ovr_0 := GetFuncOrNil&<procedure(index: UInt32; x: real; y: real)>(z_VertexAttrib2dARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttrib2dARB(index: UInt32; x: real; y: real);
    begin
      z_VertexAttrib2dARB_ovr_0(index, x, y);
    end;
    
    public z_VertexAttrib3fARB_adr := GetFuncAdr('glVertexAttrib3fARB');
    public z_VertexAttrib3fARB_ovr_0 := GetFuncOrNil&<procedure(index: UInt32; x: single; y: single; z: single)>(z_VertexAttrib3fARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttrib3fARB(index: UInt32; x: single; y: single; z: single);
    begin
      z_VertexAttrib3fARB_ovr_0(index, x, y, z);
    end;
    
    public z_VertexAttrib3sARB_adr := GetFuncAdr('glVertexAttrib3sARB');
    public z_VertexAttrib3sARB_ovr_0 := GetFuncOrNil&<procedure(index: UInt32; x: Int16; y: Int16; z: Int16)>(z_VertexAttrib3sARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttrib3sARB(index: UInt32; x: Int16; y: Int16; z: Int16);
    begin
      z_VertexAttrib3sARB_ovr_0(index, x, y, z);
    end;
    
    public z_VertexAttrib3dARB_adr := GetFuncAdr('glVertexAttrib3dARB');
    public z_VertexAttrib3dARB_ovr_0 := GetFuncOrNil&<procedure(index: UInt32; x: real; y: real; z: real)>(z_VertexAttrib3dARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttrib3dARB(index: UInt32; x: real; y: real; z: real);
    begin
      z_VertexAttrib3dARB_ovr_0(index, x, y, z);
    end;
    
    public z_VertexAttrib4fARB_adr := GetFuncAdr('glVertexAttrib4fARB');
    public z_VertexAttrib4fARB_ovr_0 := GetFuncOrNil&<procedure(index: UInt32; x: single; y: single; z: single; w: single)>(z_VertexAttrib4fARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttrib4fARB(index: UInt32; x: single; y: single; z: single; w: single);
    begin
      z_VertexAttrib4fARB_ovr_0(index, x, y, z, w);
    end;
    
    public z_VertexAttrib4sARB_adr := GetFuncAdr('glVertexAttrib4sARB');
    public z_VertexAttrib4sARB_ovr_0 := GetFuncOrNil&<procedure(index: UInt32; x: Int16; y: Int16; z: Int16; w: Int16)>(z_VertexAttrib4sARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttrib4sARB(index: UInt32; x: Int16; y: Int16; z: Int16; w: Int16);
    begin
      z_VertexAttrib4sARB_ovr_0(index, x, y, z, w);
    end;
    
    public z_VertexAttrib4dARB_adr := GetFuncAdr('glVertexAttrib4dARB');
    public z_VertexAttrib4dARB_ovr_0 := GetFuncOrNil&<procedure(index: UInt32; x: real; y: real; z: real; w: real)>(z_VertexAttrib4dARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttrib4dARB(index: UInt32; x: real; y: real; z: real; w: real);
    begin
      z_VertexAttrib4dARB_ovr_0(index, x, y, z, w);
    end;
    
    public z_VertexAttrib4NubARB_adr := GetFuncAdr('glVertexAttrib4NubARB');
    public z_VertexAttrib4NubARB_ovr_0 := GetFuncOrNil&<procedure(index: UInt32; x: Byte; y: Byte; z: Byte; w: Byte)>(z_VertexAttrib4NubARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttrib4NubARB(index: UInt32; x: Byte; y: Byte; z: Byte; w: Byte);
    begin
      z_VertexAttrib4NubARB_ovr_0(index, x, y, z, w);
    end;
    
    public z_VertexAttrib1fvARB_adr := GetFuncAdr('glVertexAttrib1fvARB');
    public z_VertexAttrib1fvARB_ovr_0 := GetFuncOrNil&<procedure(index: UInt32; var v: single)>(z_VertexAttrib1fvARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttrib1fvARB(index: UInt32; v: array of single);
    begin
      z_VertexAttrib1fvARB_ovr_0(index, v[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttrib1fvARB(index: UInt32; var v: single);
    begin
      z_VertexAttrib1fvARB_ovr_0(index, v);
    end;
    public z_VertexAttrib1fvARB_ovr_2 := GetFuncOrNil&<procedure(index: UInt32; v: IntPtr)>(z_VertexAttrib1fvARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttrib1fvARB(index: UInt32; v: IntPtr);
    begin
      z_VertexAttrib1fvARB_ovr_2(index, v);
    end;
    
    public z_VertexAttrib1svARB_adr := GetFuncAdr('glVertexAttrib1svARB');
    public z_VertexAttrib1svARB_ovr_0 := GetFuncOrNil&<procedure(index: UInt32; var v: Int16)>(z_VertexAttrib1svARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttrib1svARB(index: UInt32; v: array of Int16);
    begin
      z_VertexAttrib1svARB_ovr_0(index, v[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttrib1svARB(index: UInt32; var v: Int16);
    begin
      z_VertexAttrib1svARB_ovr_0(index, v);
    end;
    public z_VertexAttrib1svARB_ovr_2 := GetFuncOrNil&<procedure(index: UInt32; v: IntPtr)>(z_VertexAttrib1svARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttrib1svARB(index: UInt32; v: IntPtr);
    begin
      z_VertexAttrib1svARB_ovr_2(index, v);
    end;
    
    public z_VertexAttrib1dvARB_adr := GetFuncAdr('glVertexAttrib1dvARB');
    public z_VertexAttrib1dvARB_ovr_0 := GetFuncOrNil&<procedure(index: UInt32; var v: real)>(z_VertexAttrib1dvARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttrib1dvARB(index: UInt32; v: array of real);
    begin
      z_VertexAttrib1dvARB_ovr_0(index, v[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttrib1dvARB(index: UInt32; var v: real);
    begin
      z_VertexAttrib1dvARB_ovr_0(index, v);
    end;
    public z_VertexAttrib1dvARB_ovr_2 := GetFuncOrNil&<procedure(index: UInt32; v: IntPtr)>(z_VertexAttrib1dvARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttrib1dvARB(index: UInt32; v: IntPtr);
    begin
      z_VertexAttrib1dvARB_ovr_2(index, v);
    end;
    
    public z_VertexAttrib2fvARB_adr := GetFuncAdr('glVertexAttrib2fvARB');
    public z_VertexAttrib2fvARB_ovr_0 := GetFuncOrNil&<procedure(index: UInt32; var v: single)>(z_VertexAttrib2fvARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttrib2fvARB(index: UInt32; v: array of single);
    begin
      z_VertexAttrib2fvARB_ovr_0(index, v[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttrib2fvARB(index: UInt32; var v: single);
    begin
      z_VertexAttrib2fvARB_ovr_0(index, v);
    end;
    public z_VertexAttrib2fvARB_ovr_2 := GetFuncOrNil&<procedure(index: UInt32; v: IntPtr)>(z_VertexAttrib2fvARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttrib2fvARB(index: UInt32; v: IntPtr);
    begin
      z_VertexAttrib2fvARB_ovr_2(index, v);
    end;
    
    public z_VertexAttrib2svARB_adr := GetFuncAdr('glVertexAttrib2svARB');
    public z_VertexAttrib2svARB_ovr_0 := GetFuncOrNil&<procedure(index: UInt32; var v: Int16)>(z_VertexAttrib2svARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttrib2svARB(index: UInt32; v: array of Int16);
    begin
      z_VertexAttrib2svARB_ovr_0(index, v[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttrib2svARB(index: UInt32; var v: Int16);
    begin
      z_VertexAttrib2svARB_ovr_0(index, v);
    end;
    public z_VertexAttrib2svARB_ovr_2 := GetFuncOrNil&<procedure(index: UInt32; v: IntPtr)>(z_VertexAttrib2svARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttrib2svARB(index: UInt32; v: IntPtr);
    begin
      z_VertexAttrib2svARB_ovr_2(index, v);
    end;
    
    public z_VertexAttrib2dvARB_adr := GetFuncAdr('glVertexAttrib2dvARB');
    public z_VertexAttrib2dvARB_ovr_0 := GetFuncOrNil&<procedure(index: UInt32; var v: real)>(z_VertexAttrib2dvARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttrib2dvARB(index: UInt32; v: array of real);
    begin
      z_VertexAttrib2dvARB_ovr_0(index, v[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttrib2dvARB(index: UInt32; var v: real);
    begin
      z_VertexAttrib2dvARB_ovr_0(index, v);
    end;
    public z_VertexAttrib2dvARB_ovr_2 := GetFuncOrNil&<procedure(index: UInt32; v: IntPtr)>(z_VertexAttrib2dvARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttrib2dvARB(index: UInt32; v: IntPtr);
    begin
      z_VertexAttrib2dvARB_ovr_2(index, v);
    end;
    
    public z_VertexAttrib3fvARB_adr := GetFuncAdr('glVertexAttrib3fvARB');
    public z_VertexAttrib3fvARB_ovr_0 := GetFuncOrNil&<procedure(index: UInt32; var v: single)>(z_VertexAttrib3fvARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttrib3fvARB(index: UInt32; v: array of single);
    begin
      z_VertexAttrib3fvARB_ovr_0(index, v[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttrib3fvARB(index: UInt32; var v: single);
    begin
      z_VertexAttrib3fvARB_ovr_0(index, v);
    end;
    public z_VertexAttrib3fvARB_ovr_2 := GetFuncOrNil&<procedure(index: UInt32; v: IntPtr)>(z_VertexAttrib3fvARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttrib3fvARB(index: UInt32; v: IntPtr);
    begin
      z_VertexAttrib3fvARB_ovr_2(index, v);
    end;
    
    public z_VertexAttrib3svARB_adr := GetFuncAdr('glVertexAttrib3svARB');
    public z_VertexAttrib3svARB_ovr_0 := GetFuncOrNil&<procedure(index: UInt32; var v: Int16)>(z_VertexAttrib3svARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttrib3svARB(index: UInt32; v: array of Int16);
    begin
      z_VertexAttrib3svARB_ovr_0(index, v[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttrib3svARB(index: UInt32; var v: Int16);
    begin
      z_VertexAttrib3svARB_ovr_0(index, v);
    end;
    public z_VertexAttrib3svARB_ovr_2 := GetFuncOrNil&<procedure(index: UInt32; v: IntPtr)>(z_VertexAttrib3svARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttrib3svARB(index: UInt32; v: IntPtr);
    begin
      z_VertexAttrib3svARB_ovr_2(index, v);
    end;
    
    public z_VertexAttrib3dvARB_adr := GetFuncAdr('glVertexAttrib3dvARB');
    public z_VertexAttrib3dvARB_ovr_0 := GetFuncOrNil&<procedure(index: UInt32; var v: real)>(z_VertexAttrib3dvARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttrib3dvARB(index: UInt32; v: array of real);
    begin
      z_VertexAttrib3dvARB_ovr_0(index, v[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttrib3dvARB(index: UInt32; var v: real);
    begin
      z_VertexAttrib3dvARB_ovr_0(index, v);
    end;
    public z_VertexAttrib3dvARB_ovr_2 := GetFuncOrNil&<procedure(index: UInt32; v: IntPtr)>(z_VertexAttrib3dvARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttrib3dvARB(index: UInt32; v: IntPtr);
    begin
      z_VertexAttrib3dvARB_ovr_2(index, v);
    end;
    
    public z_VertexAttrib4fvARB_adr := GetFuncAdr('glVertexAttrib4fvARB');
    public z_VertexAttrib4fvARB_ovr_0 := GetFuncOrNil&<procedure(index: UInt32; var v: single)>(z_VertexAttrib4fvARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttrib4fvARB(index: UInt32; v: array of single);
    begin
      z_VertexAttrib4fvARB_ovr_0(index, v[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttrib4fvARB(index: UInt32; var v: single);
    begin
      z_VertexAttrib4fvARB_ovr_0(index, v);
    end;
    public z_VertexAttrib4fvARB_ovr_2 := GetFuncOrNil&<procedure(index: UInt32; v: IntPtr)>(z_VertexAttrib4fvARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttrib4fvARB(index: UInt32; v: IntPtr);
    begin
      z_VertexAttrib4fvARB_ovr_2(index, v);
    end;
    
    public z_VertexAttrib4svARB_adr := GetFuncAdr('glVertexAttrib4svARB');
    public z_VertexAttrib4svARB_ovr_0 := GetFuncOrNil&<procedure(index: UInt32; var v: Int16)>(z_VertexAttrib4svARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttrib4svARB(index: UInt32; v: array of Int16);
    begin
      z_VertexAttrib4svARB_ovr_0(index, v[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttrib4svARB(index: UInt32; var v: Int16);
    begin
      z_VertexAttrib4svARB_ovr_0(index, v);
    end;
    public z_VertexAttrib4svARB_ovr_2 := GetFuncOrNil&<procedure(index: UInt32; v: IntPtr)>(z_VertexAttrib4svARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttrib4svARB(index: UInt32; v: IntPtr);
    begin
      z_VertexAttrib4svARB_ovr_2(index, v);
    end;
    
    public z_VertexAttrib4dvARB_adr := GetFuncAdr('glVertexAttrib4dvARB');
    public z_VertexAttrib4dvARB_ovr_0 := GetFuncOrNil&<procedure(index: UInt32; var v: real)>(z_VertexAttrib4dvARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttrib4dvARB(index: UInt32; v: array of real);
    begin
      z_VertexAttrib4dvARB_ovr_0(index, v[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttrib4dvARB(index: UInt32; var v: real);
    begin
      z_VertexAttrib4dvARB_ovr_0(index, v);
    end;
    public z_VertexAttrib4dvARB_ovr_2 := GetFuncOrNil&<procedure(index: UInt32; v: IntPtr)>(z_VertexAttrib4dvARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttrib4dvARB(index: UInt32; v: IntPtr);
    begin
      z_VertexAttrib4dvARB_ovr_2(index, v);
    end;
    
    public z_VertexAttrib4ivARB_adr := GetFuncAdr('glVertexAttrib4ivARB');
    public z_VertexAttrib4ivARB_ovr_0 := GetFuncOrNil&<procedure(index: UInt32; var v: Int32)>(z_VertexAttrib4ivARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttrib4ivARB(index: UInt32; v: array of Int32);
    begin
      z_VertexAttrib4ivARB_ovr_0(index, v[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttrib4ivARB(index: UInt32; var v: Int32);
    begin
      z_VertexAttrib4ivARB_ovr_0(index, v);
    end;
    public z_VertexAttrib4ivARB_ovr_2 := GetFuncOrNil&<procedure(index: UInt32; v: IntPtr)>(z_VertexAttrib4ivARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttrib4ivARB(index: UInt32; v: IntPtr);
    begin
      z_VertexAttrib4ivARB_ovr_2(index, v);
    end;
    
    public z_VertexAttrib4bvARB_adr := GetFuncAdr('glVertexAttrib4bvARB');
    public z_VertexAttrib4bvARB_ovr_0 := GetFuncOrNil&<procedure(index: UInt32; var v: SByte)>(z_VertexAttrib4bvARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttrib4bvARB(index: UInt32; v: array of SByte);
    begin
      z_VertexAttrib4bvARB_ovr_0(index, v[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttrib4bvARB(index: UInt32; var v: SByte);
    begin
      z_VertexAttrib4bvARB_ovr_0(index, v);
    end;
    public z_VertexAttrib4bvARB_ovr_2 := GetFuncOrNil&<procedure(index: UInt32; v: IntPtr)>(z_VertexAttrib4bvARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttrib4bvARB(index: UInt32; v: IntPtr);
    begin
      z_VertexAttrib4bvARB_ovr_2(index, v);
    end;
    
    public z_VertexAttrib4ubvARB_adr := GetFuncAdr('glVertexAttrib4ubvARB');
    public z_VertexAttrib4ubvARB_ovr_0 := GetFuncOrNil&<procedure(index: UInt32; var v: Byte)>(z_VertexAttrib4ubvARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttrib4ubvARB(index: UInt32; v: array of Byte);
    begin
      z_VertexAttrib4ubvARB_ovr_0(index, v[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttrib4ubvARB(index: UInt32; var v: Byte);
    begin
      z_VertexAttrib4ubvARB_ovr_0(index, v);
    end;
    public z_VertexAttrib4ubvARB_ovr_2 := GetFuncOrNil&<procedure(index: UInt32; v: IntPtr)>(z_VertexAttrib4ubvARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttrib4ubvARB(index: UInt32; v: IntPtr);
    begin
      z_VertexAttrib4ubvARB_ovr_2(index, v);
    end;
    
    public z_VertexAttrib4usvARB_adr := GetFuncAdr('glVertexAttrib4usvARB');
    public z_VertexAttrib4usvARB_ovr_0 := GetFuncOrNil&<procedure(index: UInt32; var v: UInt16)>(z_VertexAttrib4usvARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttrib4usvARB(index: UInt32; v: array of UInt16);
    begin
      z_VertexAttrib4usvARB_ovr_0(index, v[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttrib4usvARB(index: UInt32; var v: UInt16);
    begin
      z_VertexAttrib4usvARB_ovr_0(index, v);
    end;
    public z_VertexAttrib4usvARB_ovr_2 := GetFuncOrNil&<procedure(index: UInt32; v: IntPtr)>(z_VertexAttrib4usvARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttrib4usvARB(index: UInt32; v: IntPtr);
    begin
      z_VertexAttrib4usvARB_ovr_2(index, v);
    end;
    
    public z_VertexAttrib4uivARB_adr := GetFuncAdr('glVertexAttrib4uivARB');
    public z_VertexAttrib4uivARB_ovr_0 := GetFuncOrNil&<procedure(index: UInt32; var v: UInt32)>(z_VertexAttrib4uivARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttrib4uivARB(index: UInt32; v: array of UInt32);
    begin
      z_VertexAttrib4uivARB_ovr_0(index, v[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttrib4uivARB(index: UInt32; var v: UInt32);
    begin
      z_VertexAttrib4uivARB_ovr_0(index, v);
    end;
    public z_VertexAttrib4uivARB_ovr_2 := GetFuncOrNil&<procedure(index: UInt32; v: IntPtr)>(z_VertexAttrib4uivARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttrib4uivARB(index: UInt32; v: IntPtr);
    begin
      z_VertexAttrib4uivARB_ovr_2(index, v);
    end;
    
    public z_VertexAttrib4NbvARB_adr := GetFuncAdr('glVertexAttrib4NbvARB');
    public z_VertexAttrib4NbvARB_ovr_0 := GetFuncOrNil&<procedure(index: UInt32; var v: SByte)>(z_VertexAttrib4NbvARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttrib4NbvARB(index: UInt32; v: array of SByte);
    begin
      z_VertexAttrib4NbvARB_ovr_0(index, v[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttrib4NbvARB(index: UInt32; var v: SByte);
    begin
      z_VertexAttrib4NbvARB_ovr_0(index, v);
    end;
    public z_VertexAttrib4NbvARB_ovr_2 := GetFuncOrNil&<procedure(index: UInt32; v: IntPtr)>(z_VertexAttrib4NbvARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttrib4NbvARB(index: UInt32; v: IntPtr);
    begin
      z_VertexAttrib4NbvARB_ovr_2(index, v);
    end;
    
    public z_VertexAttrib4NsvARB_adr := GetFuncAdr('glVertexAttrib4NsvARB');
    public z_VertexAttrib4NsvARB_ovr_0 := GetFuncOrNil&<procedure(index: UInt32; var v: Int16)>(z_VertexAttrib4NsvARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttrib4NsvARB(index: UInt32; v: array of Int16);
    begin
      z_VertexAttrib4NsvARB_ovr_0(index, v[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttrib4NsvARB(index: UInt32; var v: Int16);
    begin
      z_VertexAttrib4NsvARB_ovr_0(index, v);
    end;
    public z_VertexAttrib4NsvARB_ovr_2 := GetFuncOrNil&<procedure(index: UInt32; v: IntPtr)>(z_VertexAttrib4NsvARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttrib4NsvARB(index: UInt32; v: IntPtr);
    begin
      z_VertexAttrib4NsvARB_ovr_2(index, v);
    end;
    
    public z_VertexAttrib4NivARB_adr := GetFuncAdr('glVertexAttrib4NivARB');
    public z_VertexAttrib4NivARB_ovr_0 := GetFuncOrNil&<procedure(index: UInt32; var v: Int32)>(z_VertexAttrib4NivARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttrib4NivARB(index: UInt32; v: array of Int32);
    begin
      z_VertexAttrib4NivARB_ovr_0(index, v[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttrib4NivARB(index: UInt32; var v: Int32);
    begin
      z_VertexAttrib4NivARB_ovr_0(index, v);
    end;
    public z_VertexAttrib4NivARB_ovr_2 := GetFuncOrNil&<procedure(index: UInt32; v: IntPtr)>(z_VertexAttrib4NivARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttrib4NivARB(index: UInt32; v: IntPtr);
    begin
      z_VertexAttrib4NivARB_ovr_2(index, v);
    end;
    
    public z_VertexAttrib4NubvARB_adr := GetFuncAdr('glVertexAttrib4NubvARB');
    public z_VertexAttrib4NubvARB_ovr_0 := GetFuncOrNil&<procedure(index: UInt32; var v: Byte)>(z_VertexAttrib4NubvARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttrib4NubvARB(index: UInt32; v: array of Byte);
    begin
      z_VertexAttrib4NubvARB_ovr_0(index, v[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttrib4NubvARB(index: UInt32; var v: Byte);
    begin
      z_VertexAttrib4NubvARB_ovr_0(index, v);
    end;
    public z_VertexAttrib4NubvARB_ovr_2 := GetFuncOrNil&<procedure(index: UInt32; v: IntPtr)>(z_VertexAttrib4NubvARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttrib4NubvARB(index: UInt32; v: IntPtr);
    begin
      z_VertexAttrib4NubvARB_ovr_2(index, v);
    end;
    
    public z_VertexAttrib4NusvARB_adr := GetFuncAdr('glVertexAttrib4NusvARB');
    public z_VertexAttrib4NusvARB_ovr_0 := GetFuncOrNil&<procedure(index: UInt32; var v: UInt16)>(z_VertexAttrib4NusvARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttrib4NusvARB(index: UInt32; v: array of UInt16);
    begin
      z_VertexAttrib4NusvARB_ovr_0(index, v[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttrib4NusvARB(index: UInt32; var v: UInt16);
    begin
      z_VertexAttrib4NusvARB_ovr_0(index, v);
    end;
    public z_VertexAttrib4NusvARB_ovr_2 := GetFuncOrNil&<procedure(index: UInt32; v: IntPtr)>(z_VertexAttrib4NusvARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttrib4NusvARB(index: UInt32; v: IntPtr);
    begin
      z_VertexAttrib4NusvARB_ovr_2(index, v);
    end;
    
    public z_VertexAttrib4NuivARB_adr := GetFuncAdr('glVertexAttrib4NuivARB');
    public z_VertexAttrib4NuivARB_ovr_0 := GetFuncOrNil&<procedure(index: UInt32; var v: UInt32)>(z_VertexAttrib4NuivARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttrib4NuivARB(index: UInt32; v: array of UInt32);
    begin
      z_VertexAttrib4NuivARB_ovr_0(index, v[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttrib4NuivARB(index: UInt32; var v: UInt32);
    begin
      z_VertexAttrib4NuivARB_ovr_0(index, v);
    end;
    public z_VertexAttrib4NuivARB_ovr_2 := GetFuncOrNil&<procedure(index: UInt32; v: IntPtr)>(z_VertexAttrib4NuivARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttrib4NuivARB(index: UInt32; v: IntPtr);
    begin
      z_VertexAttrib4NuivARB_ovr_2(index, v);
    end;
    
    public z_VertexAttribPointerARB_adr := GetFuncAdr('glVertexAttribPointerARB');
    public z_VertexAttribPointerARB_ovr_0 := GetFuncOrNil&<procedure(index: UInt32; size: Int32; &type: VertexAttribPointerType; normalized: boolean; stride: Int32; pointer: IntPtr)>(z_VertexAttribPointerARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttribPointerARB(index: UInt32; size: Int32; &type: VertexAttribPointerType; normalized: boolean; stride: Int32; pointer: IntPtr);
    begin
      z_VertexAttribPointerARB_ovr_0(index, size, &type, normalized, stride, pointer);
    end;
    
    public z_EnableVertexAttribArrayARB_adr := GetFuncAdr('glEnableVertexAttribArrayARB');
    public z_EnableVertexAttribArrayARB_ovr_0 := GetFuncOrNil&<procedure(index: UInt32)>(z_EnableVertexAttribArrayARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure EnableVertexAttribArrayARB(index: UInt32);
    begin
      z_EnableVertexAttribArrayARB_ovr_0(index);
    end;
    
    public z_DisableVertexAttribArrayARB_adr := GetFuncAdr('glDisableVertexAttribArrayARB');
    public z_DisableVertexAttribArrayARB_ovr_0 := GetFuncOrNil&<procedure(index: UInt32)>(z_DisableVertexAttribArrayARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure DisableVertexAttribArrayARB(index: UInt32);
    begin
      z_DisableVertexAttribArrayARB_ovr_0(index);
    end;
    
    public z_BindAttribLocationARB_adr := GetFuncAdr('glBindAttribLocationARB');
    public z_BindAttribLocationARB_ovr_0 := GetFuncOrNil&<procedure(programObj: GLhandleARB; index: UInt32; name: IntPtr)>(z_BindAttribLocationARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure BindAttribLocationARB(programObj: GLhandleARB; index: UInt32; name: string);
    begin
      var par_3_str_ptr := Marshal.StringToHGlobalAnsi(name);
      z_BindAttribLocationARB_ovr_0(programObj, index, par_3_str_ptr);
      Marshal.FreeHGlobal(par_3_str_ptr);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure BindAttribLocationARB(programObj: GLhandleARB; index: UInt32; name: IntPtr);
    begin
      z_BindAttribLocationARB_ovr_0(programObj, index, name);
    end;
    
    public z_GetActiveAttribARB_adr := GetFuncAdr('glGetActiveAttribARB');
    public z_GetActiveAttribARB_ovr_0 := GetFuncOrNil&<procedure(programObj: GLhandleARB; index: UInt32; maxLength: Int32; var length: Int32; var size: Int32; var &type: AttributeType; name: IntPtr)>(z_GetActiveAttribARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetActiveAttribARB(programObj: GLhandleARB; index: UInt32; maxLength: Int32; length: array of Int32; size: array of Int32; &type: array of AttributeType; name: IntPtr);
    begin
      z_GetActiveAttribARB_ovr_0(programObj, index, maxLength, length[0], size[0], &type[0], name);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetActiveAttribARB(programObj: GLhandleARB; index: UInt32; maxLength: Int32; length: array of Int32; size: array of Int32; var &type: AttributeType; name: IntPtr);
    begin
      z_GetActiveAttribARB_ovr_0(programObj, index, maxLength, length[0], size[0], &type, name);
    end;
    public z_GetActiveAttribARB_ovr_2 := GetFuncOrNil&<procedure(programObj: GLhandleARB; index: UInt32; maxLength: Int32; var length: Int32; var size: Int32; &type: IntPtr; name: IntPtr)>(z_GetActiveAttribARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetActiveAttribARB(programObj: GLhandleARB; index: UInt32; maxLength: Int32; length: array of Int32; size: array of Int32; &type: IntPtr; name: IntPtr);
    begin
      z_GetActiveAttribARB_ovr_2(programObj, index, maxLength, length[0], size[0], &type, name);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetActiveAttribARB(programObj: GLhandleARB; index: UInt32; maxLength: Int32; length: array of Int32; var size: Int32; &type: array of AttributeType; name: IntPtr);
    begin
      z_GetActiveAttribARB_ovr_0(programObj, index, maxLength, length[0], size, &type[0], name);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetActiveAttribARB(programObj: GLhandleARB; index: UInt32; maxLength: Int32; length: array of Int32; var size: Int32; var &type: AttributeType; name: IntPtr);
    begin
      z_GetActiveAttribARB_ovr_0(programObj, index, maxLength, length[0], size, &type, name);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetActiveAttribARB(programObj: GLhandleARB; index: UInt32; maxLength: Int32; length: array of Int32; var size: Int32; &type: IntPtr; name: IntPtr);
    begin
      z_GetActiveAttribARB_ovr_2(programObj, index, maxLength, length[0], size, &type, name);
    end;
    public z_GetActiveAttribARB_ovr_6 := GetFuncOrNil&<procedure(programObj: GLhandleARB; index: UInt32; maxLength: Int32; var length: Int32; size: IntPtr; var &type: AttributeType; name: IntPtr)>(z_GetActiveAttribARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetActiveAttribARB(programObj: GLhandleARB; index: UInt32; maxLength: Int32; length: array of Int32; size: IntPtr; &type: array of AttributeType; name: IntPtr);
    begin
      z_GetActiveAttribARB_ovr_6(programObj, index, maxLength, length[0], size, &type[0], name);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetActiveAttribARB(programObj: GLhandleARB; index: UInt32; maxLength: Int32; length: array of Int32; size: IntPtr; var &type: AttributeType; name: IntPtr);
    begin
      z_GetActiveAttribARB_ovr_6(programObj, index, maxLength, length[0], size, &type, name);
    end;
    public z_GetActiveAttribARB_ovr_8 := GetFuncOrNil&<procedure(programObj: GLhandleARB; index: UInt32; maxLength: Int32; var length: Int32; size: IntPtr; &type: IntPtr; name: IntPtr)>(z_GetActiveAttribARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetActiveAttribARB(programObj: GLhandleARB; index: UInt32; maxLength: Int32; length: array of Int32; size: IntPtr; &type: IntPtr; name: IntPtr);
    begin
      z_GetActiveAttribARB_ovr_8(programObj, index, maxLength, length[0], size, &type, name);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetActiveAttribARB(programObj: GLhandleARB; index: UInt32; maxLength: Int32; var length: Int32; size: array of Int32; &type: array of AttributeType; name: IntPtr);
    begin
      z_GetActiveAttribARB_ovr_0(programObj, index, maxLength, length, size[0], &type[0], name);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetActiveAttribARB(programObj: GLhandleARB; index: UInt32; maxLength: Int32; var length: Int32; size: array of Int32; var &type: AttributeType; name: IntPtr);
    begin
      z_GetActiveAttribARB_ovr_0(programObj, index, maxLength, length, size[0], &type, name);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetActiveAttribARB(programObj: GLhandleARB; index: UInt32; maxLength: Int32; var length: Int32; size: array of Int32; &type: IntPtr; name: IntPtr);
    begin
      z_GetActiveAttribARB_ovr_2(programObj, index, maxLength, length, size[0], &type, name);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetActiveAttribARB(programObj: GLhandleARB; index: UInt32; maxLength: Int32; var length: Int32; var size: Int32; &type: array of AttributeType; name: IntPtr);
    begin
      z_GetActiveAttribARB_ovr_0(programObj, index, maxLength, length, size, &type[0], name);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetActiveAttribARB(programObj: GLhandleARB; index: UInt32; maxLength: Int32; var length: Int32; var size: Int32; var &type: AttributeType; name: IntPtr);
    begin
      z_GetActiveAttribARB_ovr_0(programObj, index, maxLength, length, size, &type, name);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetActiveAttribARB(programObj: GLhandleARB; index: UInt32; maxLength: Int32; var length: Int32; var size: Int32; &type: IntPtr; name: IntPtr);
    begin
      z_GetActiveAttribARB_ovr_2(programObj, index, maxLength, length, size, &type, name);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetActiveAttribARB(programObj: GLhandleARB; index: UInt32; maxLength: Int32; var length: Int32; size: IntPtr; &type: array of AttributeType; name: IntPtr);
    begin
      z_GetActiveAttribARB_ovr_6(programObj, index, maxLength, length, size, &type[0], name);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetActiveAttribARB(programObj: GLhandleARB; index: UInt32; maxLength: Int32; var length: Int32; size: IntPtr; var &type: AttributeType; name: IntPtr);
    begin
      z_GetActiveAttribARB_ovr_6(programObj, index, maxLength, length, size, &type, name);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetActiveAttribARB(programObj: GLhandleARB; index: UInt32; maxLength: Int32; var length: Int32; size: IntPtr; &type: IntPtr; name: IntPtr);
    begin
      z_GetActiveAttribARB_ovr_8(programObj, index, maxLength, length, size, &type, name);
    end;
    public z_GetActiveAttribARB_ovr_18 := GetFuncOrNil&<procedure(programObj: GLhandleARB; index: UInt32; maxLength: Int32; length: IntPtr; var size: Int32; var &type: AttributeType; name: IntPtr)>(z_GetActiveAttribARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetActiveAttribARB(programObj: GLhandleARB; index: UInt32; maxLength: Int32; length: IntPtr; size: array of Int32; &type: array of AttributeType; name: IntPtr);
    begin
      z_GetActiveAttribARB_ovr_18(programObj, index, maxLength, length, size[0], &type[0], name);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetActiveAttribARB(programObj: GLhandleARB; index: UInt32; maxLength: Int32; length: IntPtr; size: array of Int32; var &type: AttributeType; name: IntPtr);
    begin
      z_GetActiveAttribARB_ovr_18(programObj, index, maxLength, length, size[0], &type, name);
    end;
    public z_GetActiveAttribARB_ovr_20 := GetFuncOrNil&<procedure(programObj: GLhandleARB; index: UInt32; maxLength: Int32; length: IntPtr; var size: Int32; &type: IntPtr; name: IntPtr)>(z_GetActiveAttribARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetActiveAttribARB(programObj: GLhandleARB; index: UInt32; maxLength: Int32; length: IntPtr; size: array of Int32; &type: IntPtr; name: IntPtr);
    begin
      z_GetActiveAttribARB_ovr_20(programObj, index, maxLength, length, size[0], &type, name);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetActiveAttribARB(programObj: GLhandleARB; index: UInt32; maxLength: Int32; length: IntPtr; var size: Int32; &type: array of AttributeType; name: IntPtr);
    begin
      z_GetActiveAttribARB_ovr_18(programObj, index, maxLength, length, size, &type[0], name);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetActiveAttribARB(programObj: GLhandleARB; index: UInt32; maxLength: Int32; length: IntPtr; var size: Int32; var &type: AttributeType; name: IntPtr);
    begin
      z_GetActiveAttribARB_ovr_18(programObj, index, maxLength, length, size, &type, name);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetActiveAttribARB(programObj: GLhandleARB; index: UInt32; maxLength: Int32; length: IntPtr; var size: Int32; &type: IntPtr; name: IntPtr);
    begin
      z_GetActiveAttribARB_ovr_20(programObj, index, maxLength, length, size, &type, name);
    end;
    public z_GetActiveAttribARB_ovr_24 := GetFuncOrNil&<procedure(programObj: GLhandleARB; index: UInt32; maxLength: Int32; length: IntPtr; size: IntPtr; var &type: AttributeType; name: IntPtr)>(z_GetActiveAttribARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetActiveAttribARB(programObj: GLhandleARB; index: UInt32; maxLength: Int32; length: IntPtr; size: IntPtr; &type: array of AttributeType; name: IntPtr);
    begin
      z_GetActiveAttribARB_ovr_24(programObj, index, maxLength, length, size, &type[0], name);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetActiveAttribARB(programObj: GLhandleARB; index: UInt32; maxLength: Int32; length: IntPtr; size: IntPtr; var &type: AttributeType; name: IntPtr);
    begin
      z_GetActiveAttribARB_ovr_24(programObj, index, maxLength, length, size, &type, name);
    end;
    public z_GetActiveAttribARB_ovr_26 := GetFuncOrNil&<procedure(programObj: GLhandleARB; index: UInt32; maxLength: Int32; length: IntPtr; size: IntPtr; &type: IntPtr; name: IntPtr)>(z_GetActiveAttribARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetActiveAttribARB(programObj: GLhandleARB; index: UInt32; maxLength: Int32; length: IntPtr; size: IntPtr; &type: IntPtr; name: IntPtr);
    begin
      z_GetActiveAttribARB_ovr_26(programObj, index, maxLength, length, size, &type, name);
    end;
    
    public z_GetAttribLocationARB_adr := GetFuncAdr('glGetAttribLocationARB');
    public z_GetAttribLocationARB_ovr_0 := GetFuncOrNil&<function(programObj: GLhandleARB; name: IntPtr): Int32>(z_GetAttribLocationARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetAttribLocationARB(programObj: GLhandleARB; name: string): Int32;
    begin
      var par_2_str_ptr := Marshal.StringToHGlobalAnsi(name);
      Result := z_GetAttribLocationARB_ovr_0(programObj, par_2_str_ptr);
      Marshal.FreeHGlobal(par_2_str_ptr);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetAttribLocationARB(programObj: GLhandleARB; name: IntPtr): Int32;
    begin
      Result := z_GetAttribLocationARB_ovr_0(programObj, name);
    end;
    
    public z_GetVertexAttribdvARB_adr := GetFuncAdr('glGetVertexAttribdvARB');
    public z_GetVertexAttribdvARB_ovr_0 := GetFuncOrNil&<procedure(index: UInt32; pname: VertexAttribPropertyARB; var &params: real)>(z_GetVertexAttribdvARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetVertexAttribdvARB(index: UInt32; pname: VertexAttribPropertyARB; &params: array of real);
    begin
      z_GetVertexAttribdvARB_ovr_0(index, pname, &params[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetVertexAttribdvARB(index: UInt32; pname: VertexAttribPropertyARB; var &params: real);
    begin
      z_GetVertexAttribdvARB_ovr_0(index, pname, &params);
    end;
    public z_GetVertexAttribdvARB_ovr_2 := GetFuncOrNil&<procedure(index: UInt32; pname: VertexAttribPropertyARB; &params: IntPtr)>(z_GetVertexAttribdvARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetVertexAttribdvARB(index: UInt32; pname: VertexAttribPropertyARB; &params: IntPtr);
    begin
      z_GetVertexAttribdvARB_ovr_2(index, pname, &params);
    end;
    
    public z_GetVertexAttribfvARB_adr := GetFuncAdr('glGetVertexAttribfvARB');
    public z_GetVertexAttribfvARB_ovr_0 := GetFuncOrNil&<procedure(index: UInt32; pname: VertexAttribPropertyARB; var &params: single)>(z_GetVertexAttribfvARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetVertexAttribfvARB(index: UInt32; pname: VertexAttribPropertyARB; &params: array of single);
    begin
      z_GetVertexAttribfvARB_ovr_0(index, pname, &params[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetVertexAttribfvARB(index: UInt32; pname: VertexAttribPropertyARB; var &params: single);
    begin
      z_GetVertexAttribfvARB_ovr_0(index, pname, &params);
    end;
    public z_GetVertexAttribfvARB_ovr_2 := GetFuncOrNil&<procedure(index: UInt32; pname: VertexAttribPropertyARB; &params: IntPtr)>(z_GetVertexAttribfvARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetVertexAttribfvARB(index: UInt32; pname: VertexAttribPropertyARB; &params: IntPtr);
    begin
      z_GetVertexAttribfvARB_ovr_2(index, pname, &params);
    end;
    
    public z_GetVertexAttribivARB_adr := GetFuncAdr('glGetVertexAttribivARB');
    public z_GetVertexAttribivARB_ovr_0 := GetFuncOrNil&<procedure(index: UInt32; pname: VertexAttribPropertyARB; var &params: Int32)>(z_GetVertexAttribivARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetVertexAttribivARB(index: UInt32; pname: VertexAttribPropertyARB; &params: array of Int32);
    begin
      z_GetVertexAttribivARB_ovr_0(index, pname, &params[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetVertexAttribivARB(index: UInt32; pname: VertexAttribPropertyARB; var &params: Int32);
    begin
      z_GetVertexAttribivARB_ovr_0(index, pname, &params);
    end;
    public z_GetVertexAttribivARB_ovr_2 := GetFuncOrNil&<procedure(index: UInt32; pname: VertexAttribPropertyARB; &params: IntPtr)>(z_GetVertexAttribivARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetVertexAttribivARB(index: UInt32; pname: VertexAttribPropertyARB; &params: IntPtr);
    begin
      z_GetVertexAttribivARB_ovr_2(index, pname, &params);
    end;
    
    public z_GetVertexAttribPointervARB_adr := GetFuncAdr('glGetVertexAttribPointervARB');
    public z_GetVertexAttribPointervARB_ovr_0 := GetFuncOrNil&<procedure(index: UInt32; pname: VertexAttribPointerPropertyARB; var _pointer: IntPtr)>(z_GetVertexAttribPointervARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetVertexAttribPointervARB(index: UInt32; pname: VertexAttribPointerPropertyARB; _pointer: array of IntPtr);
    begin
      z_GetVertexAttribPointervARB_ovr_0(index, pname, _pointer[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetVertexAttribPointervARB(index: UInt32; pname: VertexAttribPointerPropertyARB; var _pointer: IntPtr);
    begin
      z_GetVertexAttribPointervARB_ovr_0(index, pname, _pointer);
    end;
    public z_GetVertexAttribPointervARB_ovr_2 := GetFuncOrNil&<procedure(index: UInt32; pname: VertexAttribPointerPropertyARB; _pointer: pointer)>(z_GetVertexAttribPointervARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetVertexAttribPointervARB(index: UInt32; pname: VertexAttribPointerPropertyARB; _pointer: pointer);
    begin
      z_GetVertexAttribPointervARB_ovr_2(index, pname, _pointer);
    end;
    
  end;
  
  glVertexType2101010RevARB = sealed class
    public static function GetFuncAdr([MarshalAs(UnmanagedType.LPStr)] lpszProc: string): IntPtr;
    external 'opengl32.dll' name 'wglGetProcAddress';
    public static function GetFuncOrNil<T>(fadr: IntPtr) :=
    fadr=IntPtr.Zero ? default(T) :
    Marshal.GetDelegateForFunctionPointer&<T>(fadr);
    
    public z_VertexAttribP1ui_adr := GetFuncAdr('glVertexAttribP1ui');
    public z_VertexAttribP1ui_ovr_0 := GetFuncOrNil&<procedure(index: UInt32; &type: VertexAttribPointerType; normalized: boolean; value: UInt32)>(z_VertexAttribP1ui_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttribP1ui(index: UInt32; &type: VertexAttribPointerType; normalized: boolean; value: UInt32);
    begin
      z_VertexAttribP1ui_ovr_0(index, &type, normalized, value);
    end;
    
    public z_VertexAttribP1uiv_adr := GetFuncAdr('glVertexAttribP1uiv');
    public z_VertexAttribP1uiv_ovr_0 := GetFuncOrNil&<procedure(index: UInt32; &type: VertexAttribPointerType; normalized: boolean; var value: UInt32)>(z_VertexAttribP1uiv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttribP1uiv(index: UInt32; &type: VertexAttribPointerType; normalized: boolean; value: array of UInt32);
    begin
      z_VertexAttribP1uiv_ovr_0(index, &type, normalized, value[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttribP1uiv(index: UInt32; &type: VertexAttribPointerType; normalized: boolean; var value: UInt32);
    begin
      z_VertexAttribP1uiv_ovr_0(index, &type, normalized, value);
    end;
    public z_VertexAttribP1uiv_ovr_2 := GetFuncOrNil&<procedure(index: UInt32; &type: VertexAttribPointerType; normalized: boolean; value: IntPtr)>(z_VertexAttribP1uiv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttribP1uiv(index: UInt32; &type: VertexAttribPointerType; normalized: boolean; value: IntPtr);
    begin
      z_VertexAttribP1uiv_ovr_2(index, &type, normalized, value);
    end;
    
    public z_VertexAttribP2ui_adr := GetFuncAdr('glVertexAttribP2ui');
    public z_VertexAttribP2ui_ovr_0 := GetFuncOrNil&<procedure(index: UInt32; &type: VertexAttribPointerType; normalized: boolean; value: UInt32)>(z_VertexAttribP2ui_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttribP2ui(index: UInt32; &type: VertexAttribPointerType; normalized: boolean; value: UInt32);
    begin
      z_VertexAttribP2ui_ovr_0(index, &type, normalized, value);
    end;
    
    public z_VertexAttribP2uiv_adr := GetFuncAdr('glVertexAttribP2uiv');
    public z_VertexAttribP2uiv_ovr_0 := GetFuncOrNil&<procedure(index: UInt32; &type: VertexAttribPointerType; normalized: boolean; var value: UInt32)>(z_VertexAttribP2uiv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttribP2uiv(index: UInt32; &type: VertexAttribPointerType; normalized: boolean; value: array of UInt32);
    begin
      z_VertexAttribP2uiv_ovr_0(index, &type, normalized, value[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttribP2uiv(index: UInt32; &type: VertexAttribPointerType; normalized: boolean; var value: UInt32);
    begin
      z_VertexAttribP2uiv_ovr_0(index, &type, normalized, value);
    end;
    public z_VertexAttribP2uiv_ovr_2 := GetFuncOrNil&<procedure(index: UInt32; &type: VertexAttribPointerType; normalized: boolean; value: IntPtr)>(z_VertexAttribP2uiv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttribP2uiv(index: UInt32; &type: VertexAttribPointerType; normalized: boolean; value: IntPtr);
    begin
      z_VertexAttribP2uiv_ovr_2(index, &type, normalized, value);
    end;
    
    public z_VertexAttribP3ui_adr := GetFuncAdr('glVertexAttribP3ui');
    public z_VertexAttribP3ui_ovr_0 := GetFuncOrNil&<procedure(index: UInt32; &type: VertexAttribPointerType; normalized: boolean; value: UInt32)>(z_VertexAttribP3ui_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttribP3ui(index: UInt32; &type: VertexAttribPointerType; normalized: boolean; value: UInt32);
    begin
      z_VertexAttribP3ui_ovr_0(index, &type, normalized, value);
    end;
    
    public z_VertexAttribP3uiv_adr := GetFuncAdr('glVertexAttribP3uiv');
    public z_VertexAttribP3uiv_ovr_0 := GetFuncOrNil&<procedure(index: UInt32; &type: VertexAttribPointerType; normalized: boolean; var value: UInt32)>(z_VertexAttribP3uiv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttribP3uiv(index: UInt32; &type: VertexAttribPointerType; normalized: boolean; value: array of UInt32);
    begin
      z_VertexAttribP3uiv_ovr_0(index, &type, normalized, value[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttribP3uiv(index: UInt32; &type: VertexAttribPointerType; normalized: boolean; var value: UInt32);
    begin
      z_VertexAttribP3uiv_ovr_0(index, &type, normalized, value);
    end;
    public z_VertexAttribP3uiv_ovr_2 := GetFuncOrNil&<procedure(index: UInt32; &type: VertexAttribPointerType; normalized: boolean; value: IntPtr)>(z_VertexAttribP3uiv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttribP3uiv(index: UInt32; &type: VertexAttribPointerType; normalized: boolean; value: IntPtr);
    begin
      z_VertexAttribP3uiv_ovr_2(index, &type, normalized, value);
    end;
    
    public z_VertexAttribP4ui_adr := GetFuncAdr('glVertexAttribP4ui');
    public z_VertexAttribP4ui_ovr_0 := GetFuncOrNil&<procedure(index: UInt32; &type: VertexAttribPointerType; normalized: boolean; value: UInt32)>(z_VertexAttribP4ui_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttribP4ui(index: UInt32; &type: VertexAttribPointerType; normalized: boolean; value: UInt32);
    begin
      z_VertexAttribP4ui_ovr_0(index, &type, normalized, value);
    end;
    
    public z_VertexAttribP4uiv_adr := GetFuncAdr('glVertexAttribP4uiv');
    public z_VertexAttribP4uiv_ovr_0 := GetFuncOrNil&<procedure(index: UInt32; &type: VertexAttribPointerType; normalized: boolean; var value: UInt32)>(z_VertexAttribP4uiv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttribP4uiv(index: UInt32; &type: VertexAttribPointerType; normalized: boolean; value: array of UInt32);
    begin
      z_VertexAttribP4uiv_ovr_0(index, &type, normalized, value[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttribP4uiv(index: UInt32; &type: VertexAttribPointerType; normalized: boolean; var value: UInt32);
    begin
      z_VertexAttribP4uiv_ovr_0(index, &type, normalized, value);
    end;
    public z_VertexAttribP4uiv_ovr_2 := GetFuncOrNil&<procedure(index: UInt32; &type: VertexAttribPointerType; normalized: boolean; value: IntPtr)>(z_VertexAttribP4uiv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttribP4uiv(index: UInt32; &type: VertexAttribPointerType; normalized: boolean; value: IntPtr);
    begin
      z_VertexAttribP4uiv_ovr_2(index, &type, normalized, value);
    end;
    
    public z_VertexP2ui_adr := GetFuncAdr('glVertexP2ui');
    public z_VertexP2ui_ovr_0 := GetFuncOrNil&<procedure(&type: VertexPointerType; value: UInt32)>(z_VertexP2ui_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexP2ui(&type: VertexPointerType; value: UInt32);
    begin
      z_VertexP2ui_ovr_0(&type, value);
    end;
    
    public z_VertexP2uiv_adr := GetFuncAdr('glVertexP2uiv');
    public z_VertexP2uiv_ovr_0 := GetFuncOrNil&<procedure(&type: VertexPointerType; var value: UInt32)>(z_VertexP2uiv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexP2uiv(&type: VertexPointerType; value: array of UInt32);
    begin
      z_VertexP2uiv_ovr_0(&type, value[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexP2uiv(&type: VertexPointerType; var value: UInt32);
    begin
      z_VertexP2uiv_ovr_0(&type, value);
    end;
    public z_VertexP2uiv_ovr_2 := GetFuncOrNil&<procedure(&type: VertexPointerType; value: IntPtr)>(z_VertexP2uiv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexP2uiv(&type: VertexPointerType; value: IntPtr);
    begin
      z_VertexP2uiv_ovr_2(&type, value);
    end;
    
    public z_VertexP3ui_adr := GetFuncAdr('glVertexP3ui');
    public z_VertexP3ui_ovr_0 := GetFuncOrNil&<procedure(&type: VertexPointerType; value: UInt32)>(z_VertexP3ui_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexP3ui(&type: VertexPointerType; value: UInt32);
    begin
      z_VertexP3ui_ovr_0(&type, value);
    end;
    
    public z_VertexP3uiv_adr := GetFuncAdr('glVertexP3uiv');
    public z_VertexP3uiv_ovr_0 := GetFuncOrNil&<procedure(&type: VertexPointerType; var value: UInt32)>(z_VertexP3uiv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexP3uiv(&type: VertexPointerType; value: array of UInt32);
    begin
      z_VertexP3uiv_ovr_0(&type, value[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexP3uiv(&type: VertexPointerType; var value: UInt32);
    begin
      z_VertexP3uiv_ovr_0(&type, value);
    end;
    public z_VertexP3uiv_ovr_2 := GetFuncOrNil&<procedure(&type: VertexPointerType; value: IntPtr)>(z_VertexP3uiv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexP3uiv(&type: VertexPointerType; value: IntPtr);
    begin
      z_VertexP3uiv_ovr_2(&type, value);
    end;
    
    public z_VertexP4ui_adr := GetFuncAdr('glVertexP4ui');
    public z_VertexP4ui_ovr_0 := GetFuncOrNil&<procedure(&type: VertexPointerType; value: UInt32)>(z_VertexP4ui_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexP4ui(&type: VertexPointerType; value: UInt32);
    begin
      z_VertexP4ui_ovr_0(&type, value);
    end;
    
    public z_VertexP4uiv_adr := GetFuncAdr('glVertexP4uiv');
    public z_VertexP4uiv_ovr_0 := GetFuncOrNil&<procedure(&type: VertexPointerType; var value: UInt32)>(z_VertexP4uiv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexP4uiv(&type: VertexPointerType; value: array of UInt32);
    begin
      z_VertexP4uiv_ovr_0(&type, value[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexP4uiv(&type: VertexPointerType; var value: UInt32);
    begin
      z_VertexP4uiv_ovr_0(&type, value);
    end;
    public z_VertexP4uiv_ovr_2 := GetFuncOrNil&<procedure(&type: VertexPointerType; value: IntPtr)>(z_VertexP4uiv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexP4uiv(&type: VertexPointerType; value: IntPtr);
    begin
      z_VertexP4uiv_ovr_2(&type, value);
    end;
    
    public z_TexCoordP1ui_adr := GetFuncAdr('glTexCoordP1ui');
    public z_TexCoordP1ui_ovr_0 := GetFuncOrNil&<procedure(&type: TexCoordPointerType; coords: UInt32)>(z_TexCoordP1ui_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TexCoordP1ui(&type: TexCoordPointerType; coords: UInt32);
    begin
      z_TexCoordP1ui_ovr_0(&type, coords);
    end;
    
    public z_TexCoordP1uiv_adr := GetFuncAdr('glTexCoordP1uiv');
    public z_TexCoordP1uiv_ovr_0 := GetFuncOrNil&<procedure(&type: TexCoordPointerType; var coords: UInt32)>(z_TexCoordP1uiv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TexCoordP1uiv(&type: TexCoordPointerType; coords: array of UInt32);
    begin
      z_TexCoordP1uiv_ovr_0(&type, coords[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TexCoordP1uiv(&type: TexCoordPointerType; var coords: UInt32);
    begin
      z_TexCoordP1uiv_ovr_0(&type, coords);
    end;
    public z_TexCoordP1uiv_ovr_2 := GetFuncOrNil&<procedure(&type: TexCoordPointerType; coords: IntPtr)>(z_TexCoordP1uiv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TexCoordP1uiv(&type: TexCoordPointerType; coords: IntPtr);
    begin
      z_TexCoordP1uiv_ovr_2(&type, coords);
    end;
    
    public z_TexCoordP2ui_adr := GetFuncAdr('glTexCoordP2ui');
    public z_TexCoordP2ui_ovr_0 := GetFuncOrNil&<procedure(&type: TexCoordPointerType; coords: UInt32)>(z_TexCoordP2ui_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TexCoordP2ui(&type: TexCoordPointerType; coords: UInt32);
    begin
      z_TexCoordP2ui_ovr_0(&type, coords);
    end;
    
    public z_TexCoordP2uiv_adr := GetFuncAdr('glTexCoordP2uiv');
    public z_TexCoordP2uiv_ovr_0 := GetFuncOrNil&<procedure(&type: TexCoordPointerType; var coords: UInt32)>(z_TexCoordP2uiv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TexCoordP2uiv(&type: TexCoordPointerType; coords: array of UInt32);
    begin
      z_TexCoordP2uiv_ovr_0(&type, coords[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TexCoordP2uiv(&type: TexCoordPointerType; var coords: UInt32);
    begin
      z_TexCoordP2uiv_ovr_0(&type, coords);
    end;
    public z_TexCoordP2uiv_ovr_2 := GetFuncOrNil&<procedure(&type: TexCoordPointerType; coords: IntPtr)>(z_TexCoordP2uiv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TexCoordP2uiv(&type: TexCoordPointerType; coords: IntPtr);
    begin
      z_TexCoordP2uiv_ovr_2(&type, coords);
    end;
    
    public z_TexCoordP3ui_adr := GetFuncAdr('glTexCoordP3ui');
    public z_TexCoordP3ui_ovr_0 := GetFuncOrNil&<procedure(&type: TexCoordPointerType; coords: UInt32)>(z_TexCoordP3ui_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TexCoordP3ui(&type: TexCoordPointerType; coords: UInt32);
    begin
      z_TexCoordP3ui_ovr_0(&type, coords);
    end;
    
    public z_TexCoordP3uiv_adr := GetFuncAdr('glTexCoordP3uiv');
    public z_TexCoordP3uiv_ovr_0 := GetFuncOrNil&<procedure(&type: TexCoordPointerType; var coords: UInt32)>(z_TexCoordP3uiv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TexCoordP3uiv(&type: TexCoordPointerType; coords: array of UInt32);
    begin
      z_TexCoordP3uiv_ovr_0(&type, coords[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TexCoordP3uiv(&type: TexCoordPointerType; var coords: UInt32);
    begin
      z_TexCoordP3uiv_ovr_0(&type, coords);
    end;
    public z_TexCoordP3uiv_ovr_2 := GetFuncOrNil&<procedure(&type: TexCoordPointerType; coords: IntPtr)>(z_TexCoordP3uiv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TexCoordP3uiv(&type: TexCoordPointerType; coords: IntPtr);
    begin
      z_TexCoordP3uiv_ovr_2(&type, coords);
    end;
    
    public z_TexCoordP4ui_adr := GetFuncAdr('glTexCoordP4ui');
    public z_TexCoordP4ui_ovr_0 := GetFuncOrNil&<procedure(&type: TexCoordPointerType; coords: UInt32)>(z_TexCoordP4ui_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TexCoordP4ui(&type: TexCoordPointerType; coords: UInt32);
    begin
      z_TexCoordP4ui_ovr_0(&type, coords);
    end;
    
    public z_TexCoordP4uiv_adr := GetFuncAdr('glTexCoordP4uiv');
    public z_TexCoordP4uiv_ovr_0 := GetFuncOrNil&<procedure(&type: TexCoordPointerType; var coords: UInt32)>(z_TexCoordP4uiv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TexCoordP4uiv(&type: TexCoordPointerType; coords: array of UInt32);
    begin
      z_TexCoordP4uiv_ovr_0(&type, coords[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TexCoordP4uiv(&type: TexCoordPointerType; var coords: UInt32);
    begin
      z_TexCoordP4uiv_ovr_0(&type, coords);
    end;
    public z_TexCoordP4uiv_ovr_2 := GetFuncOrNil&<procedure(&type: TexCoordPointerType; coords: IntPtr)>(z_TexCoordP4uiv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TexCoordP4uiv(&type: TexCoordPointerType; coords: IntPtr);
    begin
      z_TexCoordP4uiv_ovr_2(&type, coords);
    end;
    
    public z_MultiTexCoordP1ui_adr := GetFuncAdr('glMultiTexCoordP1ui');
    public z_MultiTexCoordP1ui_ovr_0 := GetFuncOrNil&<procedure(texture: TextureUnit; &type: TexCoordPointerType; coords: UInt32)>(z_MultiTexCoordP1ui_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiTexCoordP1ui(texture: TextureUnit; &type: TexCoordPointerType; coords: UInt32);
    begin
      z_MultiTexCoordP1ui_ovr_0(texture, &type, coords);
    end;
    
    public z_MultiTexCoordP1uiv_adr := GetFuncAdr('glMultiTexCoordP1uiv');
    public z_MultiTexCoordP1uiv_ovr_0 := GetFuncOrNil&<procedure(texture: TextureUnit; &type: TexCoordPointerType; var coords: UInt32)>(z_MultiTexCoordP1uiv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiTexCoordP1uiv(texture: TextureUnit; &type: TexCoordPointerType; coords: array of UInt32);
    begin
      z_MultiTexCoordP1uiv_ovr_0(texture, &type, coords[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiTexCoordP1uiv(texture: TextureUnit; &type: TexCoordPointerType; var coords: UInt32);
    begin
      z_MultiTexCoordP1uiv_ovr_0(texture, &type, coords);
    end;
    public z_MultiTexCoordP1uiv_ovr_2 := GetFuncOrNil&<procedure(texture: TextureUnit; &type: TexCoordPointerType; coords: IntPtr)>(z_MultiTexCoordP1uiv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiTexCoordP1uiv(texture: TextureUnit; &type: TexCoordPointerType; coords: IntPtr);
    begin
      z_MultiTexCoordP1uiv_ovr_2(texture, &type, coords);
    end;
    
    public z_MultiTexCoordP2ui_adr := GetFuncAdr('glMultiTexCoordP2ui');
    public z_MultiTexCoordP2ui_ovr_0 := GetFuncOrNil&<procedure(texture: TextureUnit; &type: TexCoordPointerType; coords: UInt32)>(z_MultiTexCoordP2ui_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiTexCoordP2ui(texture: TextureUnit; &type: TexCoordPointerType; coords: UInt32);
    begin
      z_MultiTexCoordP2ui_ovr_0(texture, &type, coords);
    end;
    
    public z_MultiTexCoordP2uiv_adr := GetFuncAdr('glMultiTexCoordP2uiv');
    public z_MultiTexCoordP2uiv_ovr_0 := GetFuncOrNil&<procedure(texture: TextureUnit; &type: TexCoordPointerType; var coords: UInt32)>(z_MultiTexCoordP2uiv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiTexCoordP2uiv(texture: TextureUnit; &type: TexCoordPointerType; coords: array of UInt32);
    begin
      z_MultiTexCoordP2uiv_ovr_0(texture, &type, coords[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiTexCoordP2uiv(texture: TextureUnit; &type: TexCoordPointerType; var coords: UInt32);
    begin
      z_MultiTexCoordP2uiv_ovr_0(texture, &type, coords);
    end;
    public z_MultiTexCoordP2uiv_ovr_2 := GetFuncOrNil&<procedure(texture: TextureUnit; &type: TexCoordPointerType; coords: IntPtr)>(z_MultiTexCoordP2uiv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiTexCoordP2uiv(texture: TextureUnit; &type: TexCoordPointerType; coords: IntPtr);
    begin
      z_MultiTexCoordP2uiv_ovr_2(texture, &type, coords);
    end;
    
    public z_MultiTexCoordP3ui_adr := GetFuncAdr('glMultiTexCoordP3ui');
    public z_MultiTexCoordP3ui_ovr_0 := GetFuncOrNil&<procedure(texture: TextureUnit; &type: TexCoordPointerType; coords: UInt32)>(z_MultiTexCoordP3ui_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiTexCoordP3ui(texture: TextureUnit; &type: TexCoordPointerType; coords: UInt32);
    begin
      z_MultiTexCoordP3ui_ovr_0(texture, &type, coords);
    end;
    
    public z_MultiTexCoordP3uiv_adr := GetFuncAdr('glMultiTexCoordP3uiv');
    public z_MultiTexCoordP3uiv_ovr_0 := GetFuncOrNil&<procedure(texture: TextureUnit; &type: TexCoordPointerType; var coords: UInt32)>(z_MultiTexCoordP3uiv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiTexCoordP3uiv(texture: TextureUnit; &type: TexCoordPointerType; coords: array of UInt32);
    begin
      z_MultiTexCoordP3uiv_ovr_0(texture, &type, coords[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiTexCoordP3uiv(texture: TextureUnit; &type: TexCoordPointerType; var coords: UInt32);
    begin
      z_MultiTexCoordP3uiv_ovr_0(texture, &type, coords);
    end;
    public z_MultiTexCoordP3uiv_ovr_2 := GetFuncOrNil&<procedure(texture: TextureUnit; &type: TexCoordPointerType; coords: IntPtr)>(z_MultiTexCoordP3uiv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiTexCoordP3uiv(texture: TextureUnit; &type: TexCoordPointerType; coords: IntPtr);
    begin
      z_MultiTexCoordP3uiv_ovr_2(texture, &type, coords);
    end;
    
    public z_MultiTexCoordP4ui_adr := GetFuncAdr('glMultiTexCoordP4ui');
    public z_MultiTexCoordP4ui_ovr_0 := GetFuncOrNil&<procedure(texture: TextureUnit; &type: TexCoordPointerType; coords: UInt32)>(z_MultiTexCoordP4ui_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiTexCoordP4ui(texture: TextureUnit; &type: TexCoordPointerType; coords: UInt32);
    begin
      z_MultiTexCoordP4ui_ovr_0(texture, &type, coords);
    end;
    
    public z_MultiTexCoordP4uiv_adr := GetFuncAdr('glMultiTexCoordP4uiv');
    public z_MultiTexCoordP4uiv_ovr_0 := GetFuncOrNil&<procedure(texture: TextureUnit; &type: TexCoordPointerType; var coords: UInt32)>(z_MultiTexCoordP4uiv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiTexCoordP4uiv(texture: TextureUnit; &type: TexCoordPointerType; coords: array of UInt32);
    begin
      z_MultiTexCoordP4uiv_ovr_0(texture, &type, coords[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiTexCoordP4uiv(texture: TextureUnit; &type: TexCoordPointerType; var coords: UInt32);
    begin
      z_MultiTexCoordP4uiv_ovr_0(texture, &type, coords);
    end;
    public z_MultiTexCoordP4uiv_ovr_2 := GetFuncOrNil&<procedure(texture: TextureUnit; &type: TexCoordPointerType; coords: IntPtr)>(z_MultiTexCoordP4uiv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiTexCoordP4uiv(texture: TextureUnit; &type: TexCoordPointerType; coords: IntPtr);
    begin
      z_MultiTexCoordP4uiv_ovr_2(texture, &type, coords);
    end;
    
    public z_NormalP3ui_adr := GetFuncAdr('glNormalP3ui');
    public z_NormalP3ui_ovr_0 := GetFuncOrNil&<procedure(&type: NormalPointerType; coords: UInt32)>(z_NormalP3ui_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure NormalP3ui(&type: NormalPointerType; coords: UInt32);
    begin
      z_NormalP3ui_ovr_0(&type, coords);
    end;
    
    public z_NormalP3uiv_adr := GetFuncAdr('glNormalP3uiv');
    public z_NormalP3uiv_ovr_0 := GetFuncOrNil&<procedure(&type: NormalPointerType; var coords: UInt32)>(z_NormalP3uiv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure NormalP3uiv(&type: NormalPointerType; coords: array of UInt32);
    begin
      z_NormalP3uiv_ovr_0(&type, coords[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure NormalP3uiv(&type: NormalPointerType; var coords: UInt32);
    begin
      z_NormalP3uiv_ovr_0(&type, coords);
    end;
    public z_NormalP3uiv_ovr_2 := GetFuncOrNil&<procedure(&type: NormalPointerType; coords: IntPtr)>(z_NormalP3uiv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure NormalP3uiv(&type: NormalPointerType; coords: IntPtr);
    begin
      z_NormalP3uiv_ovr_2(&type, coords);
    end;
    
    public z_ColorP3ui_adr := GetFuncAdr('glColorP3ui');
    public z_ColorP3ui_ovr_0 := GetFuncOrNil&<procedure(&type: ColorPointerType; color: UInt32)>(z_ColorP3ui_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ColorP3ui(&type: ColorPointerType; color: UInt32);
    begin
      z_ColorP3ui_ovr_0(&type, color);
    end;
    
    public z_ColorP3uiv_adr := GetFuncAdr('glColorP3uiv');
    public z_ColorP3uiv_ovr_0 := GetFuncOrNil&<procedure(&type: ColorPointerType; var color: UInt32)>(z_ColorP3uiv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ColorP3uiv(&type: ColorPointerType; color: array of UInt32);
    begin
      z_ColorP3uiv_ovr_0(&type, color[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ColorP3uiv(&type: ColorPointerType; var color: UInt32);
    begin
      z_ColorP3uiv_ovr_0(&type, color);
    end;
    public z_ColorP3uiv_ovr_2 := GetFuncOrNil&<procedure(&type: ColorPointerType; color: IntPtr)>(z_ColorP3uiv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ColorP3uiv(&type: ColorPointerType; color: IntPtr);
    begin
      z_ColorP3uiv_ovr_2(&type, color);
    end;
    
    public z_ColorP4ui_adr := GetFuncAdr('glColorP4ui');
    public z_ColorP4ui_ovr_0 := GetFuncOrNil&<procedure(&type: ColorPointerType; color: UInt32)>(z_ColorP4ui_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ColorP4ui(&type: ColorPointerType; color: UInt32);
    begin
      z_ColorP4ui_ovr_0(&type, color);
    end;
    
    public z_ColorP4uiv_adr := GetFuncAdr('glColorP4uiv');
    public z_ColorP4uiv_ovr_0 := GetFuncOrNil&<procedure(&type: ColorPointerType; var color: UInt32)>(z_ColorP4uiv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ColorP4uiv(&type: ColorPointerType; color: array of UInt32);
    begin
      z_ColorP4uiv_ovr_0(&type, color[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ColorP4uiv(&type: ColorPointerType; var color: UInt32);
    begin
      z_ColorP4uiv_ovr_0(&type, color);
    end;
    public z_ColorP4uiv_ovr_2 := GetFuncOrNil&<procedure(&type: ColorPointerType; color: IntPtr)>(z_ColorP4uiv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ColorP4uiv(&type: ColorPointerType; color: IntPtr);
    begin
      z_ColorP4uiv_ovr_2(&type, color);
    end;
    
    public z_SecondaryColorP3ui_adr := GetFuncAdr('glSecondaryColorP3ui');
    public z_SecondaryColorP3ui_ovr_0 := GetFuncOrNil&<procedure(&type: ColorPointerType; color: UInt32)>(z_SecondaryColorP3ui_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure SecondaryColorP3ui(&type: ColorPointerType; color: UInt32);
    begin
      z_SecondaryColorP3ui_ovr_0(&type, color);
    end;
    
    public z_SecondaryColorP3uiv_adr := GetFuncAdr('glSecondaryColorP3uiv');
    public z_SecondaryColorP3uiv_ovr_0 := GetFuncOrNil&<procedure(&type: ColorPointerType; var color: UInt32)>(z_SecondaryColorP3uiv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure SecondaryColorP3uiv(&type: ColorPointerType; color: array of UInt32);
    begin
      z_SecondaryColorP3uiv_ovr_0(&type, color[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure SecondaryColorP3uiv(&type: ColorPointerType; var color: UInt32);
    begin
      z_SecondaryColorP3uiv_ovr_0(&type, color);
    end;
    public z_SecondaryColorP3uiv_ovr_2 := GetFuncOrNil&<procedure(&type: ColorPointerType; color: IntPtr)>(z_SecondaryColorP3uiv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure SecondaryColorP3uiv(&type: ColorPointerType; color: IntPtr);
    begin
      z_SecondaryColorP3uiv_ovr_2(&type, color);
    end;
    
  end;
  
  glViewportArrayARB = sealed class
    public static function GetFuncAdr([MarshalAs(UnmanagedType.LPStr)] lpszProc: string): IntPtr;
    external 'opengl32.dll' name 'wglGetProcAddress';
    public static function GetFuncOrNil<T>(fadr: IntPtr) :=
    fadr=IntPtr.Zero ? default(T) :
    Marshal.GetDelegateForFunctionPointer&<T>(fadr);
    
    public z_ViewportArrayv_adr := GetFuncAdr('glViewportArrayv');
    public z_ViewportArrayv_ovr_0 := GetFuncOrNil&<procedure(first: UInt32; count: Int32; var v: single)>(z_ViewportArrayv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ViewportArrayv(first: UInt32; count: Int32; v: array of single);
    begin
      z_ViewportArrayv_ovr_0(first, count, v[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ViewportArrayv(first: UInt32; count: Int32; var v: single);
    begin
      z_ViewportArrayv_ovr_0(first, count, v);
    end;
    public z_ViewportArrayv_ovr_2 := GetFuncOrNil&<procedure(first: UInt32; count: Int32; v: IntPtr)>(z_ViewportArrayv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ViewportArrayv(first: UInt32; count: Int32; v: IntPtr);
    begin
      z_ViewportArrayv_ovr_2(first, count, v);
    end;
    
    public z_ViewportIndexedf_adr := GetFuncAdr('glViewportIndexedf');
    public z_ViewportIndexedf_ovr_0 := GetFuncOrNil&<procedure(index: UInt32; x: single; y: single; w: single; h: single)>(z_ViewportIndexedf_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ViewportIndexedf(index: UInt32; x: single; y: single; w: single; h: single);
    begin
      z_ViewportIndexedf_ovr_0(index, x, y, w, h);
    end;
    
    public z_ViewportIndexedfv_adr := GetFuncAdr('glViewportIndexedfv');
    public z_ViewportIndexedfv_ovr_0 := GetFuncOrNil&<procedure(index: UInt32; var v: single)>(z_ViewportIndexedfv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ViewportIndexedfv(index: UInt32; v: array of single);
    begin
      z_ViewportIndexedfv_ovr_0(index, v[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ViewportIndexedfv(index: UInt32; var v: single);
    begin
      z_ViewportIndexedfv_ovr_0(index, v);
    end;
    public z_ViewportIndexedfv_ovr_2 := GetFuncOrNil&<procedure(index: UInt32; v: IntPtr)>(z_ViewportIndexedfv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ViewportIndexedfv(index: UInt32; v: IntPtr);
    begin
      z_ViewportIndexedfv_ovr_2(index, v);
    end;
    
    public z_ScissorArrayv_adr := GetFuncAdr('glScissorArrayv');
    public z_ScissorArrayv_ovr_0 := GetFuncOrNil&<procedure(first: UInt32; count: Int32; var v: Int32)>(z_ScissorArrayv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ScissorArrayv(first: UInt32; count: Int32; v: array of Int32);
    begin
      z_ScissorArrayv_ovr_0(first, count, v[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ScissorArrayv(first: UInt32; count: Int32; var v: Int32);
    begin
      z_ScissorArrayv_ovr_0(first, count, v);
    end;
    public z_ScissorArrayv_ovr_2 := GetFuncOrNil&<procedure(first: UInt32; count: Int32; v: IntPtr)>(z_ScissorArrayv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ScissorArrayv(first: UInt32; count: Int32; v: IntPtr);
    begin
      z_ScissorArrayv_ovr_2(first, count, v);
    end;
    
    public z_ScissorIndexed_adr := GetFuncAdr('glScissorIndexed');
    public z_ScissorIndexed_ovr_0 := GetFuncOrNil&<procedure(index: UInt32; left: Int32; bottom: Int32; width: Int32; height: Int32)>(z_ScissorIndexed_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ScissorIndexed(index: UInt32; left: Int32; bottom: Int32; width: Int32; height: Int32);
    begin
      z_ScissorIndexed_ovr_0(index, left, bottom, width, height);
    end;
    
    public z_ScissorIndexedv_adr := GetFuncAdr('glScissorIndexedv');
    public z_ScissorIndexedv_ovr_0 := GetFuncOrNil&<procedure(index: UInt32; var v: Int32)>(z_ScissorIndexedv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ScissorIndexedv(index: UInt32; v: array of Int32);
    begin
      z_ScissorIndexedv_ovr_0(index, v[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ScissorIndexedv(index: UInt32; var v: Int32);
    begin
      z_ScissorIndexedv_ovr_0(index, v);
    end;
    public z_ScissorIndexedv_ovr_2 := GetFuncOrNil&<procedure(index: UInt32; v: IntPtr)>(z_ScissorIndexedv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ScissorIndexedv(index: UInt32; v: IntPtr);
    begin
      z_ScissorIndexedv_ovr_2(index, v);
    end;
    
    public z_DepthRangeArrayv_adr := GetFuncAdr('glDepthRangeArrayv');
    public z_DepthRangeArrayv_ovr_0 := GetFuncOrNil&<procedure(first: UInt32; count: Int32; var v: real)>(z_DepthRangeArrayv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure DepthRangeArrayv(first: UInt32; count: Int32; v: array of real);
    begin
      z_DepthRangeArrayv_ovr_0(first, count, v[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure DepthRangeArrayv(first: UInt32; count: Int32; var v: real);
    begin
      z_DepthRangeArrayv_ovr_0(first, count, v);
    end;
    public z_DepthRangeArrayv_ovr_2 := GetFuncOrNil&<procedure(first: UInt32; count: Int32; v: IntPtr)>(z_DepthRangeArrayv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure DepthRangeArrayv(first: UInt32; count: Int32; v: IntPtr);
    begin
      z_DepthRangeArrayv_ovr_2(first, count, v);
    end;
    
    public z_DepthRangeIndexed_adr := GetFuncAdr('glDepthRangeIndexed');
    public z_DepthRangeIndexed_ovr_0 := GetFuncOrNil&<procedure(index: UInt32; n: real; f: real)>(z_DepthRangeIndexed_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure DepthRangeIndexed(index: UInt32; n: real; f: real);
    begin
      z_DepthRangeIndexed_ovr_0(index, n, f);
    end;
    
    public z_GetFloati_v_adr := GetFuncAdr('glGetFloati_v');
    public z_GetFloati_v_ovr_0 := GetFuncOrNil&<procedure(target: DummyEnum; index: UInt32; var data: single)>(z_GetFloati_v_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetFloati_v(target: DummyEnum; index: UInt32; data: array of single);
    begin
      z_GetFloati_v_ovr_0(target, index, data[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetFloati_v(target: DummyEnum; index: UInt32; var data: single);
    begin
      z_GetFloati_v_ovr_0(target, index, data);
    end;
    public z_GetFloati_v_ovr_2 := GetFuncOrNil&<procedure(target: DummyEnum; index: UInt32; data: IntPtr)>(z_GetFloati_v_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetFloati_v(target: DummyEnum; index: UInt32; data: IntPtr);
    begin
      z_GetFloati_v_ovr_2(target, index, data);
    end;
    
    public z_GetDoublei_v_adr := GetFuncAdr('glGetDoublei_v');
    public z_GetDoublei_v_ovr_0 := GetFuncOrNil&<procedure(target: DummyEnum; index: UInt32; var data: real)>(z_GetDoublei_v_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetDoublei_v(target: DummyEnum; index: UInt32; data: array of real);
    begin
      z_GetDoublei_v_ovr_0(target, index, data[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetDoublei_v(target: DummyEnum; index: UInt32; var data: real);
    begin
      z_GetDoublei_v_ovr_0(target, index, data);
    end;
    public z_GetDoublei_v_ovr_2 := GetFuncOrNil&<procedure(target: DummyEnum; index: UInt32; data: IntPtr)>(z_GetDoublei_v_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetDoublei_v(target: DummyEnum; index: UInt32; data: IntPtr);
    begin
      z_GetDoublei_v_ovr_2(target, index, data);
    end;
    
    public z_DepthRangeArraydvNV_adr := GetFuncAdr('glDepthRangeArraydvNV');
    public z_DepthRangeArraydvNV_ovr_0 := GetFuncOrNil&<procedure(first: UInt32; count: Int32; var v: real)>(z_DepthRangeArraydvNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure DepthRangeArraydvNV(first: UInt32; count: Int32; v: array of real);
    begin
      z_DepthRangeArraydvNV_ovr_0(first, count, v[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure DepthRangeArraydvNV(first: UInt32; count: Int32; var v: real);
    begin
      z_DepthRangeArraydvNV_ovr_0(first, count, v);
    end;
    public z_DepthRangeArraydvNV_ovr_2 := GetFuncOrNil&<procedure(first: UInt32; count: Int32; v: IntPtr)>(z_DepthRangeArraydvNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure DepthRangeArraydvNV(first: UInt32; count: Int32; v: IntPtr);
    begin
      z_DepthRangeArraydvNV_ovr_2(first, count, v);
    end;
    
    public z_DepthRangeIndexeddNV_adr := GetFuncAdr('glDepthRangeIndexeddNV');
    public z_DepthRangeIndexeddNV_ovr_0 := GetFuncOrNil&<procedure(index: UInt32; n: real; f: real)>(z_DepthRangeIndexeddNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure DepthRangeIndexeddNV(index: UInt32; n: real; f: real);
    begin
      z_DepthRangeIndexeddNV_ovr_0(index, n, f);
    end;
    
  end;
  
  glWindowPosARB = sealed class
    public static function GetFuncAdr([MarshalAs(UnmanagedType.LPStr)] lpszProc: string): IntPtr;
    external 'opengl32.dll' name 'wglGetProcAddress';
    public static function GetFuncOrNil<T>(fadr: IntPtr) :=
    fadr=IntPtr.Zero ? default(T) :
    Marshal.GetDelegateForFunctionPointer&<T>(fadr);
    
    public z_WindowPos2dARB_adr := GetFuncAdr('glWindowPos2dARB');
    public z_WindowPos2dARB_ovr_0 := GetFuncOrNil&<procedure(x: real; y: real)>(z_WindowPos2dARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure WindowPos2dARB(x: real; y: real);
    begin
      z_WindowPos2dARB_ovr_0(x, y);
    end;
    
    public z_WindowPos2dvARB_adr := GetFuncAdr('glWindowPos2dvARB');
    public z_WindowPos2dvARB_ovr_0 := GetFuncOrNil&<procedure(var v: real)>(z_WindowPos2dvARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure WindowPos2dvARB(v: array of real);
    begin
      z_WindowPos2dvARB_ovr_0(v[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure WindowPos2dvARB(var v: real);
    begin
      z_WindowPos2dvARB_ovr_0(v);
    end;
    public z_WindowPos2dvARB_ovr_2 := GetFuncOrNil&<procedure(v: IntPtr)>(z_WindowPos2dvARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure WindowPos2dvARB(v: IntPtr);
    begin
      z_WindowPos2dvARB_ovr_2(v);
    end;
    
    public z_WindowPos2fARB_adr := GetFuncAdr('glWindowPos2fARB');
    public z_WindowPos2fARB_ovr_0 := GetFuncOrNil&<procedure(x: single; y: single)>(z_WindowPos2fARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure WindowPos2fARB(x: single; y: single);
    begin
      z_WindowPos2fARB_ovr_0(x, y);
    end;
    
    public z_WindowPos2fvARB_adr := GetFuncAdr('glWindowPos2fvARB');
    public z_WindowPos2fvARB_ovr_0 := GetFuncOrNil&<procedure(var v: single)>(z_WindowPos2fvARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure WindowPos2fvARB(v: array of single);
    begin
      z_WindowPos2fvARB_ovr_0(v[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure WindowPos2fvARB(var v: single);
    begin
      z_WindowPos2fvARB_ovr_0(v);
    end;
    public z_WindowPos2fvARB_ovr_2 := GetFuncOrNil&<procedure(v: IntPtr)>(z_WindowPos2fvARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure WindowPos2fvARB(v: IntPtr);
    begin
      z_WindowPos2fvARB_ovr_2(v);
    end;
    
    public z_WindowPos2iARB_adr := GetFuncAdr('glWindowPos2iARB');
    public z_WindowPos2iARB_ovr_0 := GetFuncOrNil&<procedure(x: Int32; y: Int32)>(z_WindowPos2iARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure WindowPos2iARB(x: Int32; y: Int32);
    begin
      z_WindowPos2iARB_ovr_0(x, y);
    end;
    
    public z_WindowPos2ivARB_adr := GetFuncAdr('glWindowPos2ivARB');
    public z_WindowPos2ivARB_ovr_0 := GetFuncOrNil&<procedure(var v: Int32)>(z_WindowPos2ivARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure WindowPos2ivARB(v: array of Int32);
    begin
      z_WindowPos2ivARB_ovr_0(v[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure WindowPos2ivARB(var v: Int32);
    begin
      z_WindowPos2ivARB_ovr_0(v);
    end;
    public z_WindowPos2ivARB_ovr_2 := GetFuncOrNil&<procedure(v: IntPtr)>(z_WindowPos2ivARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure WindowPos2ivARB(v: IntPtr);
    begin
      z_WindowPos2ivARB_ovr_2(v);
    end;
    
    public z_WindowPos2sARB_adr := GetFuncAdr('glWindowPos2sARB');
    public z_WindowPos2sARB_ovr_0 := GetFuncOrNil&<procedure(x: Int16; y: Int16)>(z_WindowPos2sARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure WindowPos2sARB(x: Int16; y: Int16);
    begin
      z_WindowPos2sARB_ovr_0(x, y);
    end;
    
    public z_WindowPos2svARB_adr := GetFuncAdr('glWindowPos2svARB');
    public z_WindowPos2svARB_ovr_0 := GetFuncOrNil&<procedure(var v: Int16)>(z_WindowPos2svARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure WindowPos2svARB(v: array of Int16);
    begin
      z_WindowPos2svARB_ovr_0(v[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure WindowPos2svARB(var v: Int16);
    begin
      z_WindowPos2svARB_ovr_0(v);
    end;
    public z_WindowPos2svARB_ovr_2 := GetFuncOrNil&<procedure(v: IntPtr)>(z_WindowPos2svARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure WindowPos2svARB(v: IntPtr);
    begin
      z_WindowPos2svARB_ovr_2(v);
    end;
    
    public z_WindowPos3dARB_adr := GetFuncAdr('glWindowPos3dARB');
    public z_WindowPos3dARB_ovr_0 := GetFuncOrNil&<procedure(x: real; y: real; z: real)>(z_WindowPos3dARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure WindowPos3dARB(x: real; y: real; z: real);
    begin
      z_WindowPos3dARB_ovr_0(x, y, z);
    end;
    
    public z_WindowPos3dvARB_adr := GetFuncAdr('glWindowPos3dvARB');
    public z_WindowPos3dvARB_ovr_0 := GetFuncOrNil&<procedure(var v: real)>(z_WindowPos3dvARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure WindowPos3dvARB(v: array of real);
    begin
      z_WindowPos3dvARB_ovr_0(v[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure WindowPos3dvARB(var v: real);
    begin
      z_WindowPos3dvARB_ovr_0(v);
    end;
    public z_WindowPos3dvARB_ovr_2 := GetFuncOrNil&<procedure(v: IntPtr)>(z_WindowPos3dvARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure WindowPos3dvARB(v: IntPtr);
    begin
      z_WindowPos3dvARB_ovr_2(v);
    end;
    
    public z_WindowPos3fARB_adr := GetFuncAdr('glWindowPos3fARB');
    public z_WindowPos3fARB_ovr_0 := GetFuncOrNil&<procedure(x: single; y: single; z: single)>(z_WindowPos3fARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure WindowPos3fARB(x: single; y: single; z: single);
    begin
      z_WindowPos3fARB_ovr_0(x, y, z);
    end;
    
    public z_WindowPos3fvARB_adr := GetFuncAdr('glWindowPos3fvARB');
    public z_WindowPos3fvARB_ovr_0 := GetFuncOrNil&<procedure(var v: single)>(z_WindowPos3fvARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure WindowPos3fvARB(v: array of single);
    begin
      z_WindowPos3fvARB_ovr_0(v[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure WindowPos3fvARB(var v: single);
    begin
      z_WindowPos3fvARB_ovr_0(v);
    end;
    public z_WindowPos3fvARB_ovr_2 := GetFuncOrNil&<procedure(v: IntPtr)>(z_WindowPos3fvARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure WindowPos3fvARB(v: IntPtr);
    begin
      z_WindowPos3fvARB_ovr_2(v);
    end;
    
    public z_WindowPos3iARB_adr := GetFuncAdr('glWindowPos3iARB');
    public z_WindowPos3iARB_ovr_0 := GetFuncOrNil&<procedure(x: Int32; y: Int32; z: Int32)>(z_WindowPos3iARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure WindowPos3iARB(x: Int32; y: Int32; z: Int32);
    begin
      z_WindowPos3iARB_ovr_0(x, y, z);
    end;
    
    public z_WindowPos3ivARB_adr := GetFuncAdr('glWindowPos3ivARB');
    public z_WindowPos3ivARB_ovr_0 := GetFuncOrNil&<procedure(var v: Int32)>(z_WindowPos3ivARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure WindowPos3ivARB(v: array of Int32);
    begin
      z_WindowPos3ivARB_ovr_0(v[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure WindowPos3ivARB(var v: Int32);
    begin
      z_WindowPos3ivARB_ovr_0(v);
    end;
    public z_WindowPos3ivARB_ovr_2 := GetFuncOrNil&<procedure(v: IntPtr)>(z_WindowPos3ivARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure WindowPos3ivARB(v: IntPtr);
    begin
      z_WindowPos3ivARB_ovr_2(v);
    end;
    
    public z_WindowPos3sARB_adr := GetFuncAdr('glWindowPos3sARB');
    public z_WindowPos3sARB_ovr_0 := GetFuncOrNil&<procedure(x: Int16; y: Int16; z: Int16)>(z_WindowPos3sARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure WindowPos3sARB(x: Int16; y: Int16; z: Int16);
    begin
      z_WindowPos3sARB_ovr_0(x, y, z);
    end;
    
    public z_WindowPos3svARB_adr := GetFuncAdr('glWindowPos3svARB');
    public z_WindowPos3svARB_ovr_0 := GetFuncOrNil&<procedure(var v: Int16)>(z_WindowPos3svARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure WindowPos3svARB(v: array of Int16);
    begin
      z_WindowPos3svARB_ovr_0(v[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure WindowPos3svARB(var v: Int16);
    begin
      z_WindowPos3svARB_ovr_0(v);
    end;
    public z_WindowPos3svARB_ovr_2 := GetFuncOrNil&<procedure(v: IntPtr)>(z_WindowPos3svARB_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure WindowPos3svARB(v: IntPtr);
    begin
      z_WindowPos3svARB_ovr_2(v);
    end;
    
  end;
  
  glDrawBuffersATI = sealed class
    public static function GetFuncAdr([MarshalAs(UnmanagedType.LPStr)] lpszProc: string): IntPtr;
    external 'opengl32.dll' name 'wglGetProcAddress';
    public static function GetFuncOrNil<T>(fadr: IntPtr) :=
    fadr=IntPtr.Zero ? default(T) :
    Marshal.GetDelegateForFunctionPointer&<T>(fadr);
    
    public z_DrawBuffersATI_adr := GetFuncAdr('glDrawBuffersATI');
    public z_DrawBuffersATI_ovr_0 := GetFuncOrNil&<procedure(n: Int32; var bufs: DrawBufferMode)>(z_DrawBuffersATI_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure DrawBuffersATI(n: Int32; bufs: array of DrawBufferMode);
    begin
      z_DrawBuffersATI_ovr_0(n, bufs[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure DrawBuffersATI(n: Int32; var bufs: DrawBufferMode);
    begin
      z_DrawBuffersATI_ovr_0(n, bufs);
    end;
    public z_DrawBuffersATI_ovr_2 := GetFuncOrNil&<procedure(n: Int32; bufs: IntPtr)>(z_DrawBuffersATI_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure DrawBuffersATI(n: Int32; bufs: IntPtr);
    begin
      z_DrawBuffersATI_ovr_2(n, bufs);
    end;
    
  end;
  
  glElementArrayATI = sealed class
    public static function GetFuncAdr([MarshalAs(UnmanagedType.LPStr)] lpszProc: string): IntPtr;
    external 'opengl32.dll' name 'wglGetProcAddress';
    public static function GetFuncOrNil<T>(fadr: IntPtr) :=
    fadr=IntPtr.Zero ? default(T) :
    Marshal.GetDelegateForFunctionPointer&<T>(fadr);
    
    public z_ElementPointerATI_adr := GetFuncAdr('glElementPointerATI');
    public z_ElementPointerATI_ovr_0 := GetFuncOrNil&<procedure(&type: ElementPointerTypeATI; pointer: IntPtr)>(z_ElementPointerATI_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ElementPointerATI(&type: ElementPointerTypeATI; pointer: IntPtr);
    begin
      z_ElementPointerATI_ovr_0(&type, pointer);
    end;
    
    public z_DrawElementArrayATI_adr := GetFuncAdr('glDrawElementArrayATI');
    public z_DrawElementArrayATI_ovr_0 := GetFuncOrNil&<procedure(mode: PrimitiveType; count: Int32)>(z_DrawElementArrayATI_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure DrawElementArrayATI(mode: PrimitiveType; count: Int32);
    begin
      z_DrawElementArrayATI_ovr_0(mode, count);
    end;
    
    public z_DrawRangeElementArrayATI_adr := GetFuncAdr('glDrawRangeElementArrayATI');
    public z_DrawRangeElementArrayATI_ovr_0 := GetFuncOrNil&<procedure(mode: PrimitiveType; start: UInt32; &end: UInt32; count: Int32)>(z_DrawRangeElementArrayATI_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure DrawRangeElementArrayATI(mode: PrimitiveType; start: UInt32; &end: UInt32; count: Int32);
    begin
      z_DrawRangeElementArrayATI_ovr_0(mode, start, &end, count);
    end;
    
  end;
  
  glEnvmapBumpmapATI = sealed class
    public static function GetFuncAdr([MarshalAs(UnmanagedType.LPStr)] lpszProc: string): IntPtr;
    external 'opengl32.dll' name 'wglGetProcAddress';
    public static function GetFuncOrNil<T>(fadr: IntPtr) :=
    fadr=IntPtr.Zero ? default(T) :
    Marshal.GetDelegateForFunctionPointer&<T>(fadr);
    
    public z_TexBumpParameterivATI_adr := GetFuncAdr('glTexBumpParameterivATI');
    public z_TexBumpParameterivATI_ovr_0 := GetFuncOrNil&<procedure(pname: DummyEnum; var param: Int32)>(z_TexBumpParameterivATI_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TexBumpParameterivATI(pname: DummyEnum; param: array of Int32);
    begin
      z_TexBumpParameterivATI_ovr_0(pname, param[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TexBumpParameterivATI(pname: DummyEnum; var param: Int32);
    begin
      z_TexBumpParameterivATI_ovr_0(pname, param);
    end;
    public z_TexBumpParameterivATI_ovr_2 := GetFuncOrNil&<procedure(pname: DummyEnum; param: IntPtr)>(z_TexBumpParameterivATI_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TexBumpParameterivATI(pname: DummyEnum; param: IntPtr);
    begin
      z_TexBumpParameterivATI_ovr_2(pname, param);
    end;
    
    public z_TexBumpParameterfvATI_adr := GetFuncAdr('glTexBumpParameterfvATI');
    public z_TexBumpParameterfvATI_ovr_0 := GetFuncOrNil&<procedure(pname: DummyEnum; var param: single)>(z_TexBumpParameterfvATI_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TexBumpParameterfvATI(pname: DummyEnum; param: array of single);
    begin
      z_TexBumpParameterfvATI_ovr_0(pname, param[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TexBumpParameterfvATI(pname: DummyEnum; var param: single);
    begin
      z_TexBumpParameterfvATI_ovr_0(pname, param);
    end;
    public z_TexBumpParameterfvATI_ovr_2 := GetFuncOrNil&<procedure(pname: DummyEnum; param: IntPtr)>(z_TexBumpParameterfvATI_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TexBumpParameterfvATI(pname: DummyEnum; param: IntPtr);
    begin
      z_TexBumpParameterfvATI_ovr_2(pname, param);
    end;
    
    public z_GetTexBumpParameterivATI_adr := GetFuncAdr('glGetTexBumpParameterivATI');
    public z_GetTexBumpParameterivATI_ovr_0 := GetFuncOrNil&<procedure(pname: GetTexBumpParameterATI; var param: Int32)>(z_GetTexBumpParameterivATI_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetTexBumpParameterivATI(pname: GetTexBumpParameterATI; param: array of Int32);
    begin
      z_GetTexBumpParameterivATI_ovr_0(pname, param[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetTexBumpParameterivATI(pname: GetTexBumpParameterATI; var param: Int32);
    begin
      z_GetTexBumpParameterivATI_ovr_0(pname, param);
    end;
    public z_GetTexBumpParameterivATI_ovr_2 := GetFuncOrNil&<procedure(pname: GetTexBumpParameterATI; param: IntPtr)>(z_GetTexBumpParameterivATI_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetTexBumpParameterivATI(pname: GetTexBumpParameterATI; param: IntPtr);
    begin
      z_GetTexBumpParameterivATI_ovr_2(pname, param);
    end;
    
    public z_GetTexBumpParameterfvATI_adr := GetFuncAdr('glGetTexBumpParameterfvATI');
    public z_GetTexBumpParameterfvATI_ovr_0 := GetFuncOrNil&<procedure(pname: GetTexBumpParameterATI; var param: single)>(z_GetTexBumpParameterfvATI_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetTexBumpParameterfvATI(pname: GetTexBumpParameterATI; param: array of single);
    begin
      z_GetTexBumpParameterfvATI_ovr_0(pname, param[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetTexBumpParameterfvATI(pname: GetTexBumpParameterATI; var param: single);
    begin
      z_GetTexBumpParameterfvATI_ovr_0(pname, param);
    end;
    public z_GetTexBumpParameterfvATI_ovr_2 := GetFuncOrNil&<procedure(pname: GetTexBumpParameterATI; param: IntPtr)>(z_GetTexBumpParameterfvATI_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetTexBumpParameterfvATI(pname: GetTexBumpParameterATI; param: IntPtr);
    begin
      z_GetTexBumpParameterfvATI_ovr_2(pname, param);
    end;
    
  end;
  
  glFragmentShaderATI = sealed class
    public static function GetFuncAdr([MarshalAs(UnmanagedType.LPStr)] lpszProc: string): IntPtr;
    external 'opengl32.dll' name 'wglGetProcAddress';
    public static function GetFuncOrNil<T>(fadr: IntPtr) :=
    fadr=IntPtr.Zero ? default(T) :
    Marshal.GetDelegateForFunctionPointer&<T>(fadr);
    
    public z_GenFragmentShadersATI_adr := GetFuncAdr('glGenFragmentShadersATI');
    public z_GenFragmentShadersATI_ovr_0 := GetFuncOrNil&<function(range: UInt32): UInt32>(z_GenFragmentShadersATI_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GenFragmentShadersATI(range: UInt32): UInt32;
    begin
      Result := z_GenFragmentShadersATI_ovr_0(range);
    end;
    
    public z_BindFragmentShaderATI_adr := GetFuncAdr('glBindFragmentShaderATI');
    public z_BindFragmentShaderATI_ovr_0 := GetFuncOrNil&<procedure(id: UInt32)>(z_BindFragmentShaderATI_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure BindFragmentShaderATI(id: UInt32);
    begin
      z_BindFragmentShaderATI_ovr_0(id);
    end;
    
    public z_DeleteFragmentShaderATI_adr := GetFuncAdr('glDeleteFragmentShaderATI');
    public z_DeleteFragmentShaderATI_ovr_0 := GetFuncOrNil&<procedure(id: UInt32)>(z_DeleteFragmentShaderATI_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure DeleteFragmentShaderATI(id: UInt32);
    begin
      z_DeleteFragmentShaderATI_ovr_0(id);
    end;
    
    public z_BeginFragmentShaderATI_adr := GetFuncAdr('glBeginFragmentShaderATI');
    public z_BeginFragmentShaderATI_ovr_0 := GetFuncOrNil&<procedure>(z_BeginFragmentShaderATI_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure BeginFragmentShaderATI;
    begin
      z_BeginFragmentShaderATI_ovr_0;
    end;
    
    public z_EndFragmentShaderATI_adr := GetFuncAdr('glEndFragmentShaderATI');
    public z_EndFragmentShaderATI_ovr_0 := GetFuncOrNil&<procedure>(z_EndFragmentShaderATI_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure EndFragmentShaderATI;
    begin
      z_EndFragmentShaderATI_ovr_0;
    end;
    
    public z_PassTexCoordATI_adr := GetFuncAdr('glPassTexCoordATI');
    public z_PassTexCoordATI_ovr_0 := GetFuncOrNil&<procedure(dst: UInt32; coord: UInt32; swizzle: SwizzleOpATI)>(z_PassTexCoordATI_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure PassTexCoordATI(dst: UInt32; coord: UInt32; swizzle: SwizzleOpATI);
    begin
      z_PassTexCoordATI_ovr_0(dst, coord, swizzle);
    end;
    
    public z_SampleMapATI_adr := GetFuncAdr('glSampleMapATI');
    public z_SampleMapATI_ovr_0 := GetFuncOrNil&<procedure(dst: UInt32; interp: UInt32; swizzle: SwizzleOpATI)>(z_SampleMapATI_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure SampleMapATI(dst: UInt32; interp: UInt32; swizzle: SwizzleOpATI);
    begin
      z_SampleMapATI_ovr_0(dst, interp, swizzle);
    end;
    
    public z_ColorFragmentOp1ATI_adr := GetFuncAdr('glColorFragmentOp1ATI');
    public z_ColorFragmentOp1ATI_ovr_0 := GetFuncOrNil&<procedure(op: FragmentOpATI; dst: UInt32; dstMask: UInt32; dstMod: UInt32; arg1: UInt32; arg1Rep: UInt32; arg1Mod: UInt32)>(z_ColorFragmentOp1ATI_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ColorFragmentOp1ATI(op: FragmentOpATI; dst: UInt32; dstMask: UInt32; dstMod: UInt32; arg1: UInt32; arg1Rep: UInt32; arg1Mod: UInt32);
    begin
      z_ColorFragmentOp1ATI_ovr_0(op, dst, dstMask, dstMod, arg1, arg1Rep, arg1Mod);
    end;
    
    public z_ColorFragmentOp2ATI_adr := GetFuncAdr('glColorFragmentOp2ATI');
    public z_ColorFragmentOp2ATI_ovr_0 := GetFuncOrNil&<procedure(op: FragmentOpATI; dst: UInt32; dstMask: UInt32; dstMod: UInt32; arg1: UInt32; arg1Rep: UInt32; arg1Mod: UInt32; arg2: UInt32; arg2Rep: UInt32; arg2Mod: UInt32)>(z_ColorFragmentOp2ATI_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ColorFragmentOp2ATI(op: FragmentOpATI; dst: UInt32; dstMask: UInt32; dstMod: UInt32; arg1: UInt32; arg1Rep: UInt32; arg1Mod: UInt32; arg2: UInt32; arg2Rep: UInt32; arg2Mod: UInt32);
    begin
      z_ColorFragmentOp2ATI_ovr_0(op, dst, dstMask, dstMod, arg1, arg1Rep, arg1Mod, arg2, arg2Rep, arg2Mod);
    end;
    
    public z_ColorFragmentOp3ATI_adr := GetFuncAdr('glColorFragmentOp3ATI');
    public z_ColorFragmentOp3ATI_ovr_0 := GetFuncOrNil&<procedure(op: FragmentOpATI; dst: UInt32; dstMask: UInt32; dstMod: UInt32; arg1: UInt32; arg1Rep: UInt32; arg1Mod: UInt32; arg2: UInt32; arg2Rep: UInt32; arg2Mod: UInt32; arg3: UInt32; arg3Rep: UInt32; arg3Mod: UInt32)>(z_ColorFragmentOp3ATI_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ColorFragmentOp3ATI(op: FragmentOpATI; dst: UInt32; dstMask: UInt32; dstMod: UInt32; arg1: UInt32; arg1Rep: UInt32; arg1Mod: UInt32; arg2: UInt32; arg2Rep: UInt32; arg2Mod: UInt32; arg3: UInt32; arg3Rep: UInt32; arg3Mod: UInt32);
    begin
      z_ColorFragmentOp3ATI_ovr_0(op, dst, dstMask, dstMod, arg1, arg1Rep, arg1Mod, arg2, arg2Rep, arg2Mod, arg3, arg3Rep, arg3Mod);
    end;
    
    public z_AlphaFragmentOp1ATI_adr := GetFuncAdr('glAlphaFragmentOp1ATI');
    public z_AlphaFragmentOp1ATI_ovr_0 := GetFuncOrNil&<procedure(op: FragmentOpATI; dst: UInt32; dstMod: UInt32; arg1: UInt32; arg1Rep: UInt32; arg1Mod: UInt32)>(z_AlphaFragmentOp1ATI_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure AlphaFragmentOp1ATI(op: FragmentOpATI; dst: UInt32; dstMod: UInt32; arg1: UInt32; arg1Rep: UInt32; arg1Mod: UInt32);
    begin
      z_AlphaFragmentOp1ATI_ovr_0(op, dst, dstMod, arg1, arg1Rep, arg1Mod);
    end;
    
    public z_AlphaFragmentOp2ATI_adr := GetFuncAdr('glAlphaFragmentOp2ATI');
    public z_AlphaFragmentOp2ATI_ovr_0 := GetFuncOrNil&<procedure(op: FragmentOpATI; dst: UInt32; dstMod: UInt32; arg1: UInt32; arg1Rep: UInt32; arg1Mod: UInt32; arg2: UInt32; arg2Rep: UInt32; arg2Mod: UInt32)>(z_AlphaFragmentOp2ATI_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure AlphaFragmentOp2ATI(op: FragmentOpATI; dst: UInt32; dstMod: UInt32; arg1: UInt32; arg1Rep: UInt32; arg1Mod: UInt32; arg2: UInt32; arg2Rep: UInt32; arg2Mod: UInt32);
    begin
      z_AlphaFragmentOp2ATI_ovr_0(op, dst, dstMod, arg1, arg1Rep, arg1Mod, arg2, arg2Rep, arg2Mod);
    end;
    
    public z_AlphaFragmentOp3ATI_adr := GetFuncAdr('glAlphaFragmentOp3ATI');
    public z_AlphaFragmentOp3ATI_ovr_0 := GetFuncOrNil&<procedure(op: FragmentOpATI; dst: UInt32; dstMod: UInt32; arg1: UInt32; arg1Rep: UInt32; arg1Mod: UInt32; arg2: UInt32; arg2Rep: UInt32; arg2Mod: UInt32; arg3: UInt32; arg3Rep: UInt32; arg3Mod: UInt32)>(z_AlphaFragmentOp3ATI_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure AlphaFragmentOp3ATI(op: FragmentOpATI; dst: UInt32; dstMod: UInt32; arg1: UInt32; arg1Rep: UInt32; arg1Mod: UInt32; arg2: UInt32; arg2Rep: UInt32; arg2Mod: UInt32; arg3: UInt32; arg3Rep: UInt32; arg3Mod: UInt32);
    begin
      z_AlphaFragmentOp3ATI_ovr_0(op, dst, dstMod, arg1, arg1Rep, arg1Mod, arg2, arg2Rep, arg2Mod, arg3, arg3Rep, arg3Mod);
    end;
    
    public z_SetFragmentShaderConstantATI_adr := GetFuncAdr('glSetFragmentShaderConstantATI');
    public z_SetFragmentShaderConstantATI_ovr_0 := GetFuncOrNil&<procedure(dst: UInt32; var value: single)>(z_SetFragmentShaderConstantATI_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure SetFragmentShaderConstantATI(dst: UInt32; value: array of single);
    begin
      z_SetFragmentShaderConstantATI_ovr_0(dst, value[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure SetFragmentShaderConstantATI(dst: UInt32; var value: single);
    begin
      z_SetFragmentShaderConstantATI_ovr_0(dst, value);
    end;
    public z_SetFragmentShaderConstantATI_ovr_2 := GetFuncOrNil&<procedure(dst: UInt32; value: IntPtr)>(z_SetFragmentShaderConstantATI_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure SetFragmentShaderConstantATI(dst: UInt32; value: IntPtr);
    begin
      z_SetFragmentShaderConstantATI_ovr_2(dst, value);
    end;
    
  end;
  
  glMapObjectBufferATI = sealed class
    public static function GetFuncAdr([MarshalAs(UnmanagedType.LPStr)] lpszProc: string): IntPtr;
    external 'opengl32.dll' name 'wglGetProcAddress';
    public static function GetFuncOrNil<T>(fadr: IntPtr) :=
    fadr=IntPtr.Zero ? default(T) :
    Marshal.GetDelegateForFunctionPointer&<T>(fadr);
    
    public z_MapObjectBufferATI_adr := GetFuncAdr('glMapObjectBufferATI');
    public z_MapObjectBufferATI_ovr_0 := GetFuncOrNil&<function(buffer: UInt32): IntPtr>(z_MapObjectBufferATI_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function MapObjectBufferATI(buffer: UInt32): IntPtr;
    begin
      Result := z_MapObjectBufferATI_ovr_0(buffer);
    end;
    
    public z_UnmapObjectBufferATI_adr := GetFuncAdr('glUnmapObjectBufferATI');
    public z_UnmapObjectBufferATI_ovr_0 := GetFuncOrNil&<procedure(buffer: UInt32)>(z_UnmapObjectBufferATI_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure UnmapObjectBufferATI(buffer: UInt32);
    begin
      z_UnmapObjectBufferATI_ovr_0(buffer);
    end;
    
  end;
  
  glPnTrianglesATI = sealed class
    public static function GetFuncAdr([MarshalAs(UnmanagedType.LPStr)] lpszProc: string): IntPtr;
    external 'opengl32.dll' name 'wglGetProcAddress';
    public static function GetFuncOrNil<T>(fadr: IntPtr) :=
    fadr=IntPtr.Zero ? default(T) :
    Marshal.GetDelegateForFunctionPointer&<T>(fadr);
    
    public z_PNTrianglesiATI_adr := GetFuncAdr('glPNTrianglesiATI');
    public z_PNTrianglesiATI_ovr_0 := GetFuncOrNil&<procedure(pname: PNTrianglesPNameATI; param: Int32)>(z_PNTrianglesiATI_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure PNTrianglesiATI(pname: PNTrianglesPNameATI; param: Int32);
    begin
      z_PNTrianglesiATI_ovr_0(pname, param);
    end;
    
    public z_PNTrianglesfATI_adr := GetFuncAdr('glPNTrianglesfATI');
    public z_PNTrianglesfATI_ovr_0 := GetFuncOrNil&<procedure(pname: PNTrianglesPNameATI; param: single)>(z_PNTrianglesfATI_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure PNTrianglesfATI(pname: PNTrianglesPNameATI; param: single);
    begin
      z_PNTrianglesfATI_ovr_0(pname, param);
    end;
    
  end;
  
  glSeparateStencilATI = sealed class
    public static function GetFuncAdr([MarshalAs(UnmanagedType.LPStr)] lpszProc: string): IntPtr;
    external 'opengl32.dll' name 'wglGetProcAddress';
    public static function GetFuncOrNil<T>(fadr: IntPtr) :=
    fadr=IntPtr.Zero ? default(T) :
    Marshal.GetDelegateForFunctionPointer&<T>(fadr);
    
    public z_StencilOpSeparateATI_adr := GetFuncAdr('glStencilOpSeparateATI');
    public z_StencilOpSeparateATI_ovr_0 := GetFuncOrNil&<procedure(face: StencilFaceDirection; sfail: StencilOp; dpfail: StencilOp; dppass: StencilOp)>(z_StencilOpSeparateATI_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure StencilOpSeparateATI(face: StencilFaceDirection; sfail: StencilOp; dpfail: StencilOp; dppass: StencilOp);
    begin
      z_StencilOpSeparateATI_ovr_0(face, sfail, dpfail, dppass);
    end;
    
    public z_StencilFuncSeparateATI_adr := GetFuncAdr('glStencilFuncSeparateATI');
    public z_StencilFuncSeparateATI_ovr_0 := GetFuncOrNil&<procedure(frontfunc: StencilFunction; backfunc: StencilFunction; ref: Int32; mask: UInt32)>(z_StencilFuncSeparateATI_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure StencilFuncSeparateATI(frontfunc: StencilFunction; backfunc: StencilFunction; ref: Int32; mask: UInt32);
    begin
      z_StencilFuncSeparateATI_ovr_0(frontfunc, backfunc, ref, mask);
    end;
    
  end;
  
  glVertexArrayObjectATI = sealed class
    public static function GetFuncAdr([MarshalAs(UnmanagedType.LPStr)] lpszProc: string): IntPtr;
    external 'opengl32.dll' name 'wglGetProcAddress';
    public static function GetFuncOrNil<T>(fadr: IntPtr) :=
    fadr=IntPtr.Zero ? default(T) :
    Marshal.GetDelegateForFunctionPointer&<T>(fadr);
    
    public z_NewObjectBufferATI_adr := GetFuncAdr('glNewObjectBufferATI');
    public z_NewObjectBufferATI_ovr_0 := GetFuncOrNil&<function(size: Int32; pointer: IntPtr; usage: ArrayObjectUsageATI): UInt32>(z_NewObjectBufferATI_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function NewObjectBufferATI(size: Int32; pointer: IntPtr; usage: ArrayObjectUsageATI): UInt32;
    begin
      Result := z_NewObjectBufferATI_ovr_0(size, pointer, usage);
    end;
    
    public z_IsObjectBufferATI_adr := GetFuncAdr('glIsObjectBufferATI');
    public z_IsObjectBufferATI_ovr_0 := GetFuncOrNil&<function(buffer: UInt32): boolean>(z_IsObjectBufferATI_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function IsObjectBufferATI(buffer: UInt32): boolean;
    begin
      Result := z_IsObjectBufferATI_ovr_0(buffer);
    end;
    
    public z_UpdateObjectBufferATI_adr := GetFuncAdr('glUpdateObjectBufferATI');
    public z_UpdateObjectBufferATI_ovr_0 := GetFuncOrNil&<procedure(buffer: UInt32; offset: UInt32; size: Int32; pointer: IntPtr; preserve: PreserveModeATI)>(z_UpdateObjectBufferATI_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure UpdateObjectBufferATI(buffer: UInt32; offset: UInt32; size: Int32; pointer: IntPtr; preserve: PreserveModeATI);
    begin
      z_UpdateObjectBufferATI_ovr_0(buffer, offset, size, pointer, preserve);
    end;
    
    public z_GetObjectBufferfvATI_adr := GetFuncAdr('glGetObjectBufferfvATI');
    public z_GetObjectBufferfvATI_ovr_0 := GetFuncOrNil&<procedure(buffer: UInt32; pname: ArrayObjectPNameATI; var &params: single)>(z_GetObjectBufferfvATI_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetObjectBufferfvATI(buffer: UInt32; pname: ArrayObjectPNameATI; &params: array of single);
    begin
      z_GetObjectBufferfvATI_ovr_0(buffer, pname, &params[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetObjectBufferfvATI(buffer: UInt32; pname: ArrayObjectPNameATI; var &params: single);
    begin
      z_GetObjectBufferfvATI_ovr_0(buffer, pname, &params);
    end;
    public z_GetObjectBufferfvATI_ovr_2 := GetFuncOrNil&<procedure(buffer: UInt32; pname: ArrayObjectPNameATI; &params: IntPtr)>(z_GetObjectBufferfvATI_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetObjectBufferfvATI(buffer: UInt32; pname: ArrayObjectPNameATI; &params: IntPtr);
    begin
      z_GetObjectBufferfvATI_ovr_2(buffer, pname, &params);
    end;
    
    public z_GetObjectBufferivATI_adr := GetFuncAdr('glGetObjectBufferivATI');
    public z_GetObjectBufferivATI_ovr_0 := GetFuncOrNil&<procedure(buffer: UInt32; pname: ArrayObjectPNameATI; var &params: Int32)>(z_GetObjectBufferivATI_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetObjectBufferivATI(buffer: UInt32; pname: ArrayObjectPNameATI; &params: array of Int32);
    begin
      z_GetObjectBufferivATI_ovr_0(buffer, pname, &params[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetObjectBufferivATI(buffer: UInt32; pname: ArrayObjectPNameATI; var &params: Int32);
    begin
      z_GetObjectBufferivATI_ovr_0(buffer, pname, &params);
    end;
    public z_GetObjectBufferivATI_ovr_2 := GetFuncOrNil&<procedure(buffer: UInt32; pname: ArrayObjectPNameATI; &params: IntPtr)>(z_GetObjectBufferivATI_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetObjectBufferivATI(buffer: UInt32; pname: ArrayObjectPNameATI; &params: IntPtr);
    begin
      z_GetObjectBufferivATI_ovr_2(buffer, pname, &params);
    end;
    
    public z_FreeObjectBufferATI_adr := GetFuncAdr('glFreeObjectBufferATI');
    public z_FreeObjectBufferATI_ovr_0 := GetFuncOrNil&<procedure(buffer: UInt32)>(z_FreeObjectBufferATI_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure FreeObjectBufferATI(buffer: UInt32);
    begin
      z_FreeObjectBufferATI_ovr_0(buffer);
    end;
    
    public z_ArrayObjectATI_adr := GetFuncAdr('glArrayObjectATI');
    public z_ArrayObjectATI_ovr_0 := GetFuncOrNil&<procedure(&array: EnableCap; size: Int32; &type: ScalarType; stride: Int32; buffer: UInt32; offset: UInt32)>(z_ArrayObjectATI_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ArrayObjectATI(&array: EnableCap; size: Int32; &type: ScalarType; stride: Int32; buffer: UInt32; offset: UInt32);
    begin
      z_ArrayObjectATI_ovr_0(&array, size, &type, stride, buffer, offset);
    end;
    
    public z_GetArrayObjectfvATI_adr := GetFuncAdr('glGetArrayObjectfvATI');
    public z_GetArrayObjectfvATI_ovr_0 := GetFuncOrNil&<procedure(&array: EnableCap; pname: ArrayObjectPNameATI; var &params: single)>(z_GetArrayObjectfvATI_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetArrayObjectfvATI(&array: EnableCap; pname: ArrayObjectPNameATI; &params: array of single);
    begin
      z_GetArrayObjectfvATI_ovr_0(&array, pname, &params[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetArrayObjectfvATI(&array: EnableCap; pname: ArrayObjectPNameATI; var &params: single);
    begin
      z_GetArrayObjectfvATI_ovr_0(&array, pname, &params);
    end;
    public z_GetArrayObjectfvATI_ovr_2 := GetFuncOrNil&<procedure(&array: EnableCap; pname: ArrayObjectPNameATI; &params: IntPtr)>(z_GetArrayObjectfvATI_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetArrayObjectfvATI(&array: EnableCap; pname: ArrayObjectPNameATI; &params: IntPtr);
    begin
      z_GetArrayObjectfvATI_ovr_2(&array, pname, &params);
    end;
    
    public z_GetArrayObjectivATI_adr := GetFuncAdr('glGetArrayObjectivATI');
    public z_GetArrayObjectivATI_ovr_0 := GetFuncOrNil&<procedure(&array: EnableCap; pname: ArrayObjectPNameATI; var &params: Int32)>(z_GetArrayObjectivATI_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetArrayObjectivATI(&array: EnableCap; pname: ArrayObjectPNameATI; &params: array of Int32);
    begin
      z_GetArrayObjectivATI_ovr_0(&array, pname, &params[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetArrayObjectivATI(&array: EnableCap; pname: ArrayObjectPNameATI; var &params: Int32);
    begin
      z_GetArrayObjectivATI_ovr_0(&array, pname, &params);
    end;
    public z_GetArrayObjectivATI_ovr_2 := GetFuncOrNil&<procedure(&array: EnableCap; pname: ArrayObjectPNameATI; &params: IntPtr)>(z_GetArrayObjectivATI_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetArrayObjectivATI(&array: EnableCap; pname: ArrayObjectPNameATI; &params: IntPtr);
    begin
      z_GetArrayObjectivATI_ovr_2(&array, pname, &params);
    end;
    
    public z_VariantArrayObjectATI_adr := GetFuncAdr('glVariantArrayObjectATI');
    public z_VariantArrayObjectATI_ovr_0 := GetFuncOrNil&<procedure(id: UInt32; &type: ScalarType; stride: Int32; buffer: UInt32; offset: UInt32)>(z_VariantArrayObjectATI_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VariantArrayObjectATI(id: UInt32; &type: ScalarType; stride: Int32; buffer: UInt32; offset: UInt32);
    begin
      z_VariantArrayObjectATI_ovr_0(id, &type, stride, buffer, offset);
    end;
    
    public z_GetVariantArrayObjectfvATI_adr := GetFuncAdr('glGetVariantArrayObjectfvATI');
    public z_GetVariantArrayObjectfvATI_ovr_0 := GetFuncOrNil&<procedure(id: UInt32; pname: ArrayObjectPNameATI; var &params: single)>(z_GetVariantArrayObjectfvATI_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetVariantArrayObjectfvATI(id: UInt32; pname: ArrayObjectPNameATI; &params: array of single);
    begin
      z_GetVariantArrayObjectfvATI_ovr_0(id, pname, &params[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetVariantArrayObjectfvATI(id: UInt32; pname: ArrayObjectPNameATI; var &params: single);
    begin
      z_GetVariantArrayObjectfvATI_ovr_0(id, pname, &params);
    end;
    public z_GetVariantArrayObjectfvATI_ovr_2 := GetFuncOrNil&<procedure(id: UInt32; pname: ArrayObjectPNameATI; &params: IntPtr)>(z_GetVariantArrayObjectfvATI_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetVariantArrayObjectfvATI(id: UInt32; pname: ArrayObjectPNameATI; &params: IntPtr);
    begin
      z_GetVariantArrayObjectfvATI_ovr_2(id, pname, &params);
    end;
    
    public z_GetVariantArrayObjectivATI_adr := GetFuncAdr('glGetVariantArrayObjectivATI');
    public z_GetVariantArrayObjectivATI_ovr_0 := GetFuncOrNil&<procedure(id: UInt32; pname: ArrayObjectPNameATI; var &params: Int32)>(z_GetVariantArrayObjectivATI_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetVariantArrayObjectivATI(id: UInt32; pname: ArrayObjectPNameATI; &params: array of Int32);
    begin
      z_GetVariantArrayObjectivATI_ovr_0(id, pname, &params[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetVariantArrayObjectivATI(id: UInt32; pname: ArrayObjectPNameATI; var &params: Int32);
    begin
      z_GetVariantArrayObjectivATI_ovr_0(id, pname, &params);
    end;
    public z_GetVariantArrayObjectivATI_ovr_2 := GetFuncOrNil&<procedure(id: UInt32; pname: ArrayObjectPNameATI; &params: IntPtr)>(z_GetVariantArrayObjectivATI_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetVariantArrayObjectivATI(id: UInt32; pname: ArrayObjectPNameATI; &params: IntPtr);
    begin
      z_GetVariantArrayObjectivATI_ovr_2(id, pname, &params);
    end;
    
  end;
  
  glVertexAttribArrayObjectATI = sealed class
    public static function GetFuncAdr([MarshalAs(UnmanagedType.LPStr)] lpszProc: string): IntPtr;
    external 'opengl32.dll' name 'wglGetProcAddress';
    public static function GetFuncOrNil<T>(fadr: IntPtr) :=
    fadr=IntPtr.Zero ? default(T) :
    Marshal.GetDelegateForFunctionPointer&<T>(fadr);
    
    public z_VertexAttribArrayObjectATI_adr := GetFuncAdr('glVertexAttribArrayObjectATI');
    public z_VertexAttribArrayObjectATI_ovr_0 := GetFuncOrNil&<procedure(index: UInt32; size: Int32; &type: VertexAttribPointerType; normalized: boolean; stride: Int32; buffer: UInt32; offset: UInt32)>(z_VertexAttribArrayObjectATI_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttribArrayObjectATI(index: UInt32; size: Int32; &type: VertexAttribPointerType; normalized: boolean; stride: Int32; buffer: UInt32; offset: UInt32);
    begin
      z_VertexAttribArrayObjectATI_ovr_0(index, size, &type, normalized, stride, buffer, offset);
    end;
    
    public z_GetVertexAttribArrayObjectfvATI_adr := GetFuncAdr('glGetVertexAttribArrayObjectfvATI');
    public z_GetVertexAttribArrayObjectfvATI_ovr_0 := GetFuncOrNil&<procedure(index: UInt32; pname: ArrayObjectPNameATI; var &params: single)>(z_GetVertexAttribArrayObjectfvATI_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetVertexAttribArrayObjectfvATI(index: UInt32; pname: ArrayObjectPNameATI; &params: array of single);
    begin
      z_GetVertexAttribArrayObjectfvATI_ovr_0(index, pname, &params[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetVertexAttribArrayObjectfvATI(index: UInt32; pname: ArrayObjectPNameATI; var &params: single);
    begin
      z_GetVertexAttribArrayObjectfvATI_ovr_0(index, pname, &params);
    end;
    public z_GetVertexAttribArrayObjectfvATI_ovr_2 := GetFuncOrNil&<procedure(index: UInt32; pname: ArrayObjectPNameATI; &params: IntPtr)>(z_GetVertexAttribArrayObjectfvATI_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetVertexAttribArrayObjectfvATI(index: UInt32; pname: ArrayObjectPNameATI; &params: IntPtr);
    begin
      z_GetVertexAttribArrayObjectfvATI_ovr_2(index, pname, &params);
    end;
    
    public z_GetVertexAttribArrayObjectivATI_adr := GetFuncAdr('glGetVertexAttribArrayObjectivATI');
    public z_GetVertexAttribArrayObjectivATI_ovr_0 := GetFuncOrNil&<procedure(index: UInt32; pname: ArrayObjectPNameATI; var &params: Int32)>(z_GetVertexAttribArrayObjectivATI_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetVertexAttribArrayObjectivATI(index: UInt32; pname: ArrayObjectPNameATI; &params: array of Int32);
    begin
      z_GetVertexAttribArrayObjectivATI_ovr_0(index, pname, &params[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetVertexAttribArrayObjectivATI(index: UInt32; pname: ArrayObjectPNameATI; var &params: Int32);
    begin
      z_GetVertexAttribArrayObjectivATI_ovr_0(index, pname, &params);
    end;
    public z_GetVertexAttribArrayObjectivATI_ovr_2 := GetFuncOrNil&<procedure(index: UInt32; pname: ArrayObjectPNameATI; &params: IntPtr)>(z_GetVertexAttribArrayObjectivATI_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetVertexAttribArrayObjectivATI(index: UInt32; pname: ArrayObjectPNameATI; &params: IntPtr);
    begin
      z_GetVertexAttribArrayObjectivATI_ovr_2(index, pname, &params);
    end;
    
  end;
  
  glVertexStreamsATI = sealed class
    public static function GetFuncAdr([MarshalAs(UnmanagedType.LPStr)] lpszProc: string): IntPtr;
    external 'opengl32.dll' name 'wglGetProcAddress';
    public static function GetFuncOrNil<T>(fadr: IntPtr) :=
    fadr=IntPtr.Zero ? default(T) :
    Marshal.GetDelegateForFunctionPointer&<T>(fadr);
    
    public z_VertexStream1sATI_adr := GetFuncAdr('glVertexStream1sATI');
    public z_VertexStream1sATI_ovr_0 := GetFuncOrNil&<procedure(stream: VertexStreamATI; x: Int16)>(z_VertexStream1sATI_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexStream1sATI(stream: VertexStreamATI; x: Int16);
    begin
      z_VertexStream1sATI_ovr_0(stream, x);
    end;
    
    public z_VertexStream1svATI_adr := GetFuncAdr('glVertexStream1svATI');
    public z_VertexStream1svATI_ovr_0 := GetFuncOrNil&<procedure(stream: VertexStreamATI; var coords: Int16)>(z_VertexStream1svATI_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexStream1svATI(stream: VertexStreamATI; coords: array of Int16);
    begin
      z_VertexStream1svATI_ovr_0(stream, coords[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexStream1svATI(stream: VertexStreamATI; var coords: Int16);
    begin
      z_VertexStream1svATI_ovr_0(stream, coords);
    end;
    public z_VertexStream1svATI_ovr_2 := GetFuncOrNil&<procedure(stream: VertexStreamATI; coords: IntPtr)>(z_VertexStream1svATI_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexStream1svATI(stream: VertexStreamATI; coords: IntPtr);
    begin
      z_VertexStream1svATI_ovr_2(stream, coords);
    end;
    
    public z_VertexStream1iATI_adr := GetFuncAdr('glVertexStream1iATI');
    public z_VertexStream1iATI_ovr_0 := GetFuncOrNil&<procedure(stream: VertexStreamATI; x: Int32)>(z_VertexStream1iATI_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexStream1iATI(stream: VertexStreamATI; x: Int32);
    begin
      z_VertexStream1iATI_ovr_0(stream, x);
    end;
    
    public z_VertexStream1ivATI_adr := GetFuncAdr('glVertexStream1ivATI');
    public z_VertexStream1ivATI_ovr_0 := GetFuncOrNil&<procedure(stream: VertexStreamATI; var coords: Int32)>(z_VertexStream1ivATI_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexStream1ivATI(stream: VertexStreamATI; coords: array of Int32);
    begin
      z_VertexStream1ivATI_ovr_0(stream, coords[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexStream1ivATI(stream: VertexStreamATI; var coords: Int32);
    begin
      z_VertexStream1ivATI_ovr_0(stream, coords);
    end;
    public z_VertexStream1ivATI_ovr_2 := GetFuncOrNil&<procedure(stream: VertexStreamATI; coords: IntPtr)>(z_VertexStream1ivATI_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexStream1ivATI(stream: VertexStreamATI; coords: IntPtr);
    begin
      z_VertexStream1ivATI_ovr_2(stream, coords);
    end;
    
    public z_VertexStream1fATI_adr := GetFuncAdr('glVertexStream1fATI');
    public z_VertexStream1fATI_ovr_0 := GetFuncOrNil&<procedure(stream: VertexStreamATI; x: single)>(z_VertexStream1fATI_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexStream1fATI(stream: VertexStreamATI; x: single);
    begin
      z_VertexStream1fATI_ovr_0(stream, x);
    end;
    
    public z_VertexStream1fvATI_adr := GetFuncAdr('glVertexStream1fvATI');
    public z_VertexStream1fvATI_ovr_0 := GetFuncOrNil&<procedure(stream: VertexStreamATI; var coords: single)>(z_VertexStream1fvATI_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexStream1fvATI(stream: VertexStreamATI; coords: array of single);
    begin
      z_VertexStream1fvATI_ovr_0(stream, coords[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexStream1fvATI(stream: VertexStreamATI; var coords: single);
    begin
      z_VertexStream1fvATI_ovr_0(stream, coords);
    end;
    public z_VertexStream1fvATI_ovr_2 := GetFuncOrNil&<procedure(stream: VertexStreamATI; coords: IntPtr)>(z_VertexStream1fvATI_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexStream1fvATI(stream: VertexStreamATI; coords: IntPtr);
    begin
      z_VertexStream1fvATI_ovr_2(stream, coords);
    end;
    
    public z_VertexStream1dATI_adr := GetFuncAdr('glVertexStream1dATI');
    public z_VertexStream1dATI_ovr_0 := GetFuncOrNil&<procedure(stream: VertexStreamATI; x: real)>(z_VertexStream1dATI_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexStream1dATI(stream: VertexStreamATI; x: real);
    begin
      z_VertexStream1dATI_ovr_0(stream, x);
    end;
    
    public z_VertexStream1dvATI_adr := GetFuncAdr('glVertexStream1dvATI');
    public z_VertexStream1dvATI_ovr_0 := GetFuncOrNil&<procedure(stream: VertexStreamATI; var coords: real)>(z_VertexStream1dvATI_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexStream1dvATI(stream: VertexStreamATI; coords: array of real);
    begin
      z_VertexStream1dvATI_ovr_0(stream, coords[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexStream1dvATI(stream: VertexStreamATI; var coords: real);
    begin
      z_VertexStream1dvATI_ovr_0(stream, coords);
    end;
    public z_VertexStream1dvATI_ovr_2 := GetFuncOrNil&<procedure(stream: VertexStreamATI; coords: IntPtr)>(z_VertexStream1dvATI_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexStream1dvATI(stream: VertexStreamATI; coords: IntPtr);
    begin
      z_VertexStream1dvATI_ovr_2(stream, coords);
    end;
    
    public z_VertexStream2sATI_adr := GetFuncAdr('glVertexStream2sATI');
    public z_VertexStream2sATI_ovr_0 := GetFuncOrNil&<procedure(stream: VertexStreamATI; x: Int16; y: Int16)>(z_VertexStream2sATI_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexStream2sATI(stream: VertexStreamATI; x: Int16; y: Int16);
    begin
      z_VertexStream2sATI_ovr_0(stream, x, y);
    end;
    
    public z_VertexStream2svATI_adr := GetFuncAdr('glVertexStream2svATI');
    public z_VertexStream2svATI_ovr_0 := GetFuncOrNil&<procedure(stream: VertexStreamATI; var coords: Int16)>(z_VertexStream2svATI_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexStream2svATI(stream: VertexStreamATI; coords: array of Int16);
    begin
      z_VertexStream2svATI_ovr_0(stream, coords[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexStream2svATI(stream: VertexStreamATI; var coords: Int16);
    begin
      z_VertexStream2svATI_ovr_0(stream, coords);
    end;
    public z_VertexStream2svATI_ovr_2 := GetFuncOrNil&<procedure(stream: VertexStreamATI; coords: IntPtr)>(z_VertexStream2svATI_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexStream2svATI(stream: VertexStreamATI; coords: IntPtr);
    begin
      z_VertexStream2svATI_ovr_2(stream, coords);
    end;
    
    public z_VertexStream2iATI_adr := GetFuncAdr('glVertexStream2iATI');
    public z_VertexStream2iATI_ovr_0 := GetFuncOrNil&<procedure(stream: VertexStreamATI; x: Int32; y: Int32)>(z_VertexStream2iATI_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexStream2iATI(stream: VertexStreamATI; x: Int32; y: Int32);
    begin
      z_VertexStream2iATI_ovr_0(stream, x, y);
    end;
    
    public z_VertexStream2ivATI_adr := GetFuncAdr('glVertexStream2ivATI');
    public z_VertexStream2ivATI_ovr_0 := GetFuncOrNil&<procedure(stream: VertexStreamATI; var coords: Int32)>(z_VertexStream2ivATI_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexStream2ivATI(stream: VertexStreamATI; coords: array of Int32);
    begin
      z_VertexStream2ivATI_ovr_0(stream, coords[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexStream2ivATI(stream: VertexStreamATI; var coords: Int32);
    begin
      z_VertexStream2ivATI_ovr_0(stream, coords);
    end;
    public z_VertexStream2ivATI_ovr_2 := GetFuncOrNil&<procedure(stream: VertexStreamATI; coords: IntPtr)>(z_VertexStream2ivATI_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexStream2ivATI(stream: VertexStreamATI; coords: IntPtr);
    begin
      z_VertexStream2ivATI_ovr_2(stream, coords);
    end;
    
    public z_VertexStream2fATI_adr := GetFuncAdr('glVertexStream2fATI');
    public z_VertexStream2fATI_ovr_0 := GetFuncOrNil&<procedure(stream: VertexStreamATI; x: single; y: single)>(z_VertexStream2fATI_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexStream2fATI(stream: VertexStreamATI; x: single; y: single);
    begin
      z_VertexStream2fATI_ovr_0(stream, x, y);
    end;
    
    public z_VertexStream2fvATI_adr := GetFuncAdr('glVertexStream2fvATI');
    public z_VertexStream2fvATI_ovr_0 := GetFuncOrNil&<procedure(stream: VertexStreamATI; var coords: single)>(z_VertexStream2fvATI_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexStream2fvATI(stream: VertexStreamATI; coords: array of single);
    begin
      z_VertexStream2fvATI_ovr_0(stream, coords[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexStream2fvATI(stream: VertexStreamATI; var coords: single);
    begin
      z_VertexStream2fvATI_ovr_0(stream, coords);
    end;
    public z_VertexStream2fvATI_ovr_2 := GetFuncOrNil&<procedure(stream: VertexStreamATI; coords: IntPtr)>(z_VertexStream2fvATI_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexStream2fvATI(stream: VertexStreamATI; coords: IntPtr);
    begin
      z_VertexStream2fvATI_ovr_2(stream, coords);
    end;
    
    public z_VertexStream2dATI_adr := GetFuncAdr('glVertexStream2dATI');
    public z_VertexStream2dATI_ovr_0 := GetFuncOrNil&<procedure(stream: VertexStreamATI; x: real; y: real)>(z_VertexStream2dATI_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexStream2dATI(stream: VertexStreamATI; x: real; y: real);
    begin
      z_VertexStream2dATI_ovr_0(stream, x, y);
    end;
    
    public z_VertexStream2dvATI_adr := GetFuncAdr('glVertexStream2dvATI');
    public z_VertexStream2dvATI_ovr_0 := GetFuncOrNil&<procedure(stream: VertexStreamATI; var coords: real)>(z_VertexStream2dvATI_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexStream2dvATI(stream: VertexStreamATI; coords: array of real);
    begin
      z_VertexStream2dvATI_ovr_0(stream, coords[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexStream2dvATI(stream: VertexStreamATI; var coords: real);
    begin
      z_VertexStream2dvATI_ovr_0(stream, coords);
    end;
    public z_VertexStream2dvATI_ovr_2 := GetFuncOrNil&<procedure(stream: VertexStreamATI; coords: IntPtr)>(z_VertexStream2dvATI_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexStream2dvATI(stream: VertexStreamATI; coords: IntPtr);
    begin
      z_VertexStream2dvATI_ovr_2(stream, coords);
    end;
    
    public z_VertexStream3sATI_adr := GetFuncAdr('glVertexStream3sATI');
    public z_VertexStream3sATI_ovr_0 := GetFuncOrNil&<procedure(stream: VertexStreamATI; x: Int16; y: Int16; z: Int16)>(z_VertexStream3sATI_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexStream3sATI(stream: VertexStreamATI; x: Int16; y: Int16; z: Int16);
    begin
      z_VertexStream3sATI_ovr_0(stream, x, y, z);
    end;
    
    public z_VertexStream3svATI_adr := GetFuncAdr('glVertexStream3svATI');
    public z_VertexStream3svATI_ovr_0 := GetFuncOrNil&<procedure(stream: VertexStreamATI; var coords: Int16)>(z_VertexStream3svATI_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexStream3svATI(stream: VertexStreamATI; coords: array of Int16);
    begin
      z_VertexStream3svATI_ovr_0(stream, coords[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexStream3svATI(stream: VertexStreamATI; var coords: Int16);
    begin
      z_VertexStream3svATI_ovr_0(stream, coords);
    end;
    public z_VertexStream3svATI_ovr_2 := GetFuncOrNil&<procedure(stream: VertexStreamATI; coords: IntPtr)>(z_VertexStream3svATI_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexStream3svATI(stream: VertexStreamATI; coords: IntPtr);
    begin
      z_VertexStream3svATI_ovr_2(stream, coords);
    end;
    
    public z_VertexStream3iATI_adr := GetFuncAdr('glVertexStream3iATI');
    public z_VertexStream3iATI_ovr_0 := GetFuncOrNil&<procedure(stream: VertexStreamATI; x: Int32; y: Int32; z: Int32)>(z_VertexStream3iATI_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexStream3iATI(stream: VertexStreamATI; x: Int32; y: Int32; z: Int32);
    begin
      z_VertexStream3iATI_ovr_0(stream, x, y, z);
    end;
    
    public z_VertexStream3ivATI_adr := GetFuncAdr('glVertexStream3ivATI');
    public z_VertexStream3ivATI_ovr_0 := GetFuncOrNil&<procedure(stream: VertexStreamATI; var coords: Int32)>(z_VertexStream3ivATI_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexStream3ivATI(stream: VertexStreamATI; coords: array of Int32);
    begin
      z_VertexStream3ivATI_ovr_0(stream, coords[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexStream3ivATI(stream: VertexStreamATI; var coords: Int32);
    begin
      z_VertexStream3ivATI_ovr_0(stream, coords);
    end;
    public z_VertexStream3ivATI_ovr_2 := GetFuncOrNil&<procedure(stream: VertexStreamATI; coords: IntPtr)>(z_VertexStream3ivATI_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexStream3ivATI(stream: VertexStreamATI; coords: IntPtr);
    begin
      z_VertexStream3ivATI_ovr_2(stream, coords);
    end;
    
    public z_VertexStream3fATI_adr := GetFuncAdr('glVertexStream3fATI');
    public z_VertexStream3fATI_ovr_0 := GetFuncOrNil&<procedure(stream: VertexStreamATI; x: single; y: single; z: single)>(z_VertexStream3fATI_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexStream3fATI(stream: VertexStreamATI; x: single; y: single; z: single);
    begin
      z_VertexStream3fATI_ovr_0(stream, x, y, z);
    end;
    
    public z_VertexStream3fvATI_adr := GetFuncAdr('glVertexStream3fvATI');
    public z_VertexStream3fvATI_ovr_0 := GetFuncOrNil&<procedure(stream: VertexStreamATI; var coords: single)>(z_VertexStream3fvATI_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexStream3fvATI(stream: VertexStreamATI; coords: array of single);
    begin
      z_VertexStream3fvATI_ovr_0(stream, coords[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexStream3fvATI(stream: VertexStreamATI; var coords: single);
    begin
      z_VertexStream3fvATI_ovr_0(stream, coords);
    end;
    public z_VertexStream3fvATI_ovr_2 := GetFuncOrNil&<procedure(stream: VertexStreamATI; coords: IntPtr)>(z_VertexStream3fvATI_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexStream3fvATI(stream: VertexStreamATI; coords: IntPtr);
    begin
      z_VertexStream3fvATI_ovr_2(stream, coords);
    end;
    
    public z_VertexStream3dATI_adr := GetFuncAdr('glVertexStream3dATI');
    public z_VertexStream3dATI_ovr_0 := GetFuncOrNil&<procedure(stream: VertexStreamATI; x: real; y: real; z: real)>(z_VertexStream3dATI_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexStream3dATI(stream: VertexStreamATI; x: real; y: real; z: real);
    begin
      z_VertexStream3dATI_ovr_0(stream, x, y, z);
    end;
    
    public z_VertexStream3dvATI_adr := GetFuncAdr('glVertexStream3dvATI');
    public z_VertexStream3dvATI_ovr_0 := GetFuncOrNil&<procedure(stream: VertexStreamATI; var coords: real)>(z_VertexStream3dvATI_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexStream3dvATI(stream: VertexStreamATI; coords: array of real);
    begin
      z_VertexStream3dvATI_ovr_0(stream, coords[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexStream3dvATI(stream: VertexStreamATI; var coords: real);
    begin
      z_VertexStream3dvATI_ovr_0(stream, coords);
    end;
    public z_VertexStream3dvATI_ovr_2 := GetFuncOrNil&<procedure(stream: VertexStreamATI; coords: IntPtr)>(z_VertexStream3dvATI_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexStream3dvATI(stream: VertexStreamATI; coords: IntPtr);
    begin
      z_VertexStream3dvATI_ovr_2(stream, coords);
    end;
    
    public z_VertexStream4sATI_adr := GetFuncAdr('glVertexStream4sATI');
    public z_VertexStream4sATI_ovr_0 := GetFuncOrNil&<procedure(stream: VertexStreamATI; x: Int16; y: Int16; z: Int16; w: Int16)>(z_VertexStream4sATI_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexStream4sATI(stream: VertexStreamATI; x: Int16; y: Int16; z: Int16; w: Int16);
    begin
      z_VertexStream4sATI_ovr_0(stream, x, y, z, w);
    end;
    
    public z_VertexStream4svATI_adr := GetFuncAdr('glVertexStream4svATI');
    public z_VertexStream4svATI_ovr_0 := GetFuncOrNil&<procedure(stream: VertexStreamATI; var coords: Int16)>(z_VertexStream4svATI_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexStream4svATI(stream: VertexStreamATI; coords: array of Int16);
    begin
      z_VertexStream4svATI_ovr_0(stream, coords[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexStream4svATI(stream: VertexStreamATI; var coords: Int16);
    begin
      z_VertexStream4svATI_ovr_0(stream, coords);
    end;
    public z_VertexStream4svATI_ovr_2 := GetFuncOrNil&<procedure(stream: VertexStreamATI; coords: IntPtr)>(z_VertexStream4svATI_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexStream4svATI(stream: VertexStreamATI; coords: IntPtr);
    begin
      z_VertexStream4svATI_ovr_2(stream, coords);
    end;
    
    public z_VertexStream4iATI_adr := GetFuncAdr('glVertexStream4iATI');
    public z_VertexStream4iATI_ovr_0 := GetFuncOrNil&<procedure(stream: VertexStreamATI; x: Int32; y: Int32; z: Int32; w: Int32)>(z_VertexStream4iATI_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexStream4iATI(stream: VertexStreamATI; x: Int32; y: Int32; z: Int32; w: Int32);
    begin
      z_VertexStream4iATI_ovr_0(stream, x, y, z, w);
    end;
    
    public z_VertexStream4ivATI_adr := GetFuncAdr('glVertexStream4ivATI');
    public z_VertexStream4ivATI_ovr_0 := GetFuncOrNil&<procedure(stream: VertexStreamATI; var coords: Int32)>(z_VertexStream4ivATI_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexStream4ivATI(stream: VertexStreamATI; coords: array of Int32);
    begin
      z_VertexStream4ivATI_ovr_0(stream, coords[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexStream4ivATI(stream: VertexStreamATI; var coords: Int32);
    begin
      z_VertexStream4ivATI_ovr_0(stream, coords);
    end;
    public z_VertexStream4ivATI_ovr_2 := GetFuncOrNil&<procedure(stream: VertexStreamATI; coords: IntPtr)>(z_VertexStream4ivATI_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexStream4ivATI(stream: VertexStreamATI; coords: IntPtr);
    begin
      z_VertexStream4ivATI_ovr_2(stream, coords);
    end;
    
    public z_VertexStream4fATI_adr := GetFuncAdr('glVertexStream4fATI');
    public z_VertexStream4fATI_ovr_0 := GetFuncOrNil&<procedure(stream: VertexStreamATI; x: single; y: single; z: single; w: single)>(z_VertexStream4fATI_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexStream4fATI(stream: VertexStreamATI; x: single; y: single; z: single; w: single);
    begin
      z_VertexStream4fATI_ovr_0(stream, x, y, z, w);
    end;
    
    public z_VertexStream4fvATI_adr := GetFuncAdr('glVertexStream4fvATI');
    public z_VertexStream4fvATI_ovr_0 := GetFuncOrNil&<procedure(stream: VertexStreamATI; var coords: single)>(z_VertexStream4fvATI_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexStream4fvATI(stream: VertexStreamATI; coords: array of single);
    begin
      z_VertexStream4fvATI_ovr_0(stream, coords[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexStream4fvATI(stream: VertexStreamATI; var coords: single);
    begin
      z_VertexStream4fvATI_ovr_0(stream, coords);
    end;
    public z_VertexStream4fvATI_ovr_2 := GetFuncOrNil&<procedure(stream: VertexStreamATI; coords: IntPtr)>(z_VertexStream4fvATI_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexStream4fvATI(stream: VertexStreamATI; coords: IntPtr);
    begin
      z_VertexStream4fvATI_ovr_2(stream, coords);
    end;
    
    public z_VertexStream4dATI_adr := GetFuncAdr('glVertexStream4dATI');
    public z_VertexStream4dATI_ovr_0 := GetFuncOrNil&<procedure(stream: VertexStreamATI; x: real; y: real; z: real; w: real)>(z_VertexStream4dATI_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexStream4dATI(stream: VertexStreamATI; x: real; y: real; z: real; w: real);
    begin
      z_VertexStream4dATI_ovr_0(stream, x, y, z, w);
    end;
    
    public z_VertexStream4dvATI_adr := GetFuncAdr('glVertexStream4dvATI');
    public z_VertexStream4dvATI_ovr_0 := GetFuncOrNil&<procedure(stream: VertexStreamATI; var coords: real)>(z_VertexStream4dvATI_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexStream4dvATI(stream: VertexStreamATI; coords: array of real);
    begin
      z_VertexStream4dvATI_ovr_0(stream, coords[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexStream4dvATI(stream: VertexStreamATI; var coords: real);
    begin
      z_VertexStream4dvATI_ovr_0(stream, coords);
    end;
    public z_VertexStream4dvATI_ovr_2 := GetFuncOrNil&<procedure(stream: VertexStreamATI; coords: IntPtr)>(z_VertexStream4dvATI_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexStream4dvATI(stream: VertexStreamATI; coords: IntPtr);
    begin
      z_VertexStream4dvATI_ovr_2(stream, coords);
    end;
    
    public z_NormalStream3bATI_adr := GetFuncAdr('glNormalStream3bATI');
    public z_NormalStream3bATI_ovr_0 := GetFuncOrNil&<procedure(stream: VertexStreamATI; nx: SByte; ny: SByte; nz: SByte)>(z_NormalStream3bATI_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure NormalStream3bATI(stream: VertexStreamATI; nx: SByte; ny: SByte; nz: SByte);
    begin
      z_NormalStream3bATI_ovr_0(stream, nx, ny, nz);
    end;
    
    public z_NormalStream3bvATI_adr := GetFuncAdr('glNormalStream3bvATI');
    public z_NormalStream3bvATI_ovr_0 := GetFuncOrNil&<procedure(stream: VertexStreamATI; var coords: SByte)>(z_NormalStream3bvATI_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure NormalStream3bvATI(stream: VertexStreamATI; coords: array of SByte);
    begin
      z_NormalStream3bvATI_ovr_0(stream, coords[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure NormalStream3bvATI(stream: VertexStreamATI; var coords: SByte);
    begin
      z_NormalStream3bvATI_ovr_0(stream, coords);
    end;
    public z_NormalStream3bvATI_ovr_2 := GetFuncOrNil&<procedure(stream: VertexStreamATI; coords: IntPtr)>(z_NormalStream3bvATI_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure NormalStream3bvATI(stream: VertexStreamATI; coords: IntPtr);
    begin
      z_NormalStream3bvATI_ovr_2(stream, coords);
    end;
    
    public z_NormalStream3sATI_adr := GetFuncAdr('glNormalStream3sATI');
    public z_NormalStream3sATI_ovr_0 := GetFuncOrNil&<procedure(stream: VertexStreamATI; nx: Int16; ny: Int16; nz: Int16)>(z_NormalStream3sATI_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure NormalStream3sATI(stream: VertexStreamATI; nx: Int16; ny: Int16; nz: Int16);
    begin
      z_NormalStream3sATI_ovr_0(stream, nx, ny, nz);
    end;
    
    public z_NormalStream3svATI_adr := GetFuncAdr('glNormalStream3svATI');
    public z_NormalStream3svATI_ovr_0 := GetFuncOrNil&<procedure(stream: VertexStreamATI; var coords: Int16)>(z_NormalStream3svATI_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure NormalStream3svATI(stream: VertexStreamATI; coords: array of Int16);
    begin
      z_NormalStream3svATI_ovr_0(stream, coords[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure NormalStream3svATI(stream: VertexStreamATI; var coords: Int16);
    begin
      z_NormalStream3svATI_ovr_0(stream, coords);
    end;
    public z_NormalStream3svATI_ovr_2 := GetFuncOrNil&<procedure(stream: VertexStreamATI; coords: IntPtr)>(z_NormalStream3svATI_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure NormalStream3svATI(stream: VertexStreamATI; coords: IntPtr);
    begin
      z_NormalStream3svATI_ovr_2(stream, coords);
    end;
    
    public z_NormalStream3iATI_adr := GetFuncAdr('glNormalStream3iATI');
    public z_NormalStream3iATI_ovr_0 := GetFuncOrNil&<procedure(stream: VertexStreamATI; nx: Int32; ny: Int32; nz: Int32)>(z_NormalStream3iATI_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure NormalStream3iATI(stream: VertexStreamATI; nx: Int32; ny: Int32; nz: Int32);
    begin
      z_NormalStream3iATI_ovr_0(stream, nx, ny, nz);
    end;
    
    public z_NormalStream3ivATI_adr := GetFuncAdr('glNormalStream3ivATI');
    public z_NormalStream3ivATI_ovr_0 := GetFuncOrNil&<procedure(stream: VertexStreamATI; var coords: Int32)>(z_NormalStream3ivATI_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure NormalStream3ivATI(stream: VertexStreamATI; coords: array of Int32);
    begin
      z_NormalStream3ivATI_ovr_0(stream, coords[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure NormalStream3ivATI(stream: VertexStreamATI; var coords: Int32);
    begin
      z_NormalStream3ivATI_ovr_0(stream, coords);
    end;
    public z_NormalStream3ivATI_ovr_2 := GetFuncOrNil&<procedure(stream: VertexStreamATI; coords: IntPtr)>(z_NormalStream3ivATI_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure NormalStream3ivATI(stream: VertexStreamATI; coords: IntPtr);
    begin
      z_NormalStream3ivATI_ovr_2(stream, coords);
    end;
    
    public z_NormalStream3fATI_adr := GetFuncAdr('glNormalStream3fATI');
    public z_NormalStream3fATI_ovr_0 := GetFuncOrNil&<procedure(stream: VertexStreamATI; nx: single; ny: single; nz: single)>(z_NormalStream3fATI_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure NormalStream3fATI(stream: VertexStreamATI; nx: single; ny: single; nz: single);
    begin
      z_NormalStream3fATI_ovr_0(stream, nx, ny, nz);
    end;
    
    public z_NormalStream3fvATI_adr := GetFuncAdr('glNormalStream3fvATI');
    public z_NormalStream3fvATI_ovr_0 := GetFuncOrNil&<procedure(stream: VertexStreamATI; var coords: single)>(z_NormalStream3fvATI_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure NormalStream3fvATI(stream: VertexStreamATI; coords: array of single);
    begin
      z_NormalStream3fvATI_ovr_0(stream, coords[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure NormalStream3fvATI(stream: VertexStreamATI; var coords: single);
    begin
      z_NormalStream3fvATI_ovr_0(stream, coords);
    end;
    public z_NormalStream3fvATI_ovr_2 := GetFuncOrNil&<procedure(stream: VertexStreamATI; coords: IntPtr)>(z_NormalStream3fvATI_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure NormalStream3fvATI(stream: VertexStreamATI; coords: IntPtr);
    begin
      z_NormalStream3fvATI_ovr_2(stream, coords);
    end;
    
    public z_NormalStream3dATI_adr := GetFuncAdr('glNormalStream3dATI');
    public z_NormalStream3dATI_ovr_0 := GetFuncOrNil&<procedure(stream: VertexStreamATI; nx: real; ny: real; nz: real)>(z_NormalStream3dATI_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure NormalStream3dATI(stream: VertexStreamATI; nx: real; ny: real; nz: real);
    begin
      z_NormalStream3dATI_ovr_0(stream, nx, ny, nz);
    end;
    
    public z_NormalStream3dvATI_adr := GetFuncAdr('glNormalStream3dvATI');
    public z_NormalStream3dvATI_ovr_0 := GetFuncOrNil&<procedure(stream: VertexStreamATI; var coords: real)>(z_NormalStream3dvATI_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure NormalStream3dvATI(stream: VertexStreamATI; coords: array of real);
    begin
      z_NormalStream3dvATI_ovr_0(stream, coords[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure NormalStream3dvATI(stream: VertexStreamATI; var coords: real);
    begin
      z_NormalStream3dvATI_ovr_0(stream, coords);
    end;
    public z_NormalStream3dvATI_ovr_2 := GetFuncOrNil&<procedure(stream: VertexStreamATI; coords: IntPtr)>(z_NormalStream3dvATI_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure NormalStream3dvATI(stream: VertexStreamATI; coords: IntPtr);
    begin
      z_NormalStream3dvATI_ovr_2(stream, coords);
    end;
    
    public z_ClientActiveVertexStreamATI_adr := GetFuncAdr('glClientActiveVertexStreamATI');
    public z_ClientActiveVertexStreamATI_ovr_0 := GetFuncOrNil&<procedure(stream: VertexStreamATI)>(z_ClientActiveVertexStreamATI_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ClientActiveVertexStreamATI(stream: VertexStreamATI);
    begin
      z_ClientActiveVertexStreamATI_ovr_0(stream);
    end;
    
    public z_VertexBlendEnviATI_adr := GetFuncAdr('glVertexBlendEnviATI');
    public z_VertexBlendEnviATI_ovr_0 := GetFuncOrNil&<procedure(pname: VertexStreamATI; param: Int32)>(z_VertexBlendEnviATI_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexBlendEnviATI(pname: VertexStreamATI; param: Int32);
    begin
      z_VertexBlendEnviATI_ovr_0(pname, param);
    end;
    
    public z_VertexBlendEnvfATI_adr := GetFuncAdr('glVertexBlendEnvfATI');
    public z_VertexBlendEnvfATI_ovr_0 := GetFuncOrNil&<procedure(pname: VertexStreamATI; param: single)>(z_VertexBlendEnvfATI_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexBlendEnvfATI(pname: VertexStreamATI; param: single);
    begin
      z_VertexBlendEnvfATI_ovr_0(pname, param);
    end;
    
  end;
  
  glEGLImageStorageEXT = sealed class
    public static function GetFuncAdr([MarshalAs(UnmanagedType.LPStr)] lpszProc: string): IntPtr;
    external 'opengl32.dll' name 'wglGetProcAddress';
    public static function GetFuncOrNil<T>(fadr: IntPtr) :=
    fadr=IntPtr.Zero ? default(T) :
    Marshal.GetDelegateForFunctionPointer&<T>(fadr);
    
    public z_EGLImageTargetTexStorageEXT_adr := GetFuncAdr('glEGLImageTargetTexStorageEXT');
    public z_EGLImageTargetTexStorageEXT_ovr_0 := GetFuncOrNil&<procedure(target: DummyEnum; image: GLeglImageOES; var attrib_list: Int32)>(z_EGLImageTargetTexStorageEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure EGLImageTargetTexStorageEXT(target: DummyEnum; image: GLeglImageOES; attrib_list: array of Int32);
    begin
      z_EGLImageTargetTexStorageEXT_ovr_0(target, image, attrib_list[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure EGLImageTargetTexStorageEXT(target: DummyEnum; image: GLeglImageOES; var attrib_list: Int32);
    begin
      z_EGLImageTargetTexStorageEXT_ovr_0(target, image, attrib_list);
    end;
    public z_EGLImageTargetTexStorageEXT_ovr_2 := GetFuncOrNil&<procedure(target: DummyEnum; image: GLeglImageOES; attrib_list: IntPtr)>(z_EGLImageTargetTexStorageEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure EGLImageTargetTexStorageEXT(target: DummyEnum; image: GLeglImageOES; attrib_list: IntPtr);
    begin
      z_EGLImageTargetTexStorageEXT_ovr_2(target, image, attrib_list);
    end;
    
    public z_EGLImageTargetTextureStorageEXT_adr := GetFuncAdr('glEGLImageTargetTextureStorageEXT');
    public z_EGLImageTargetTextureStorageEXT_ovr_0 := GetFuncOrNil&<procedure(texture: UInt32; image: GLeglImageOES; var attrib_list: Int32)>(z_EGLImageTargetTextureStorageEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure EGLImageTargetTextureStorageEXT(texture: UInt32; image: GLeglImageOES; attrib_list: array of Int32);
    begin
      z_EGLImageTargetTextureStorageEXT_ovr_0(texture, image, attrib_list[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure EGLImageTargetTextureStorageEXT(texture: UInt32; image: GLeglImageOES; var attrib_list: Int32);
    begin
      z_EGLImageTargetTextureStorageEXT_ovr_0(texture, image, attrib_list);
    end;
    public z_EGLImageTargetTextureStorageEXT_ovr_2 := GetFuncOrNil&<procedure(texture: UInt32; image: GLeglImageOES; attrib_list: IntPtr)>(z_EGLImageTargetTextureStorageEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure EGLImageTargetTextureStorageEXT(texture: UInt32; image: GLeglImageOES; attrib_list: IntPtr);
    begin
      z_EGLImageTargetTextureStorageEXT_ovr_2(texture, image, attrib_list);
    end;
    
  end;
  
  glBindableUniformEXT = sealed class
    public static function GetFuncAdr([MarshalAs(UnmanagedType.LPStr)] lpszProc: string): IntPtr;
    external 'opengl32.dll' name 'wglGetProcAddress';
    public static function GetFuncOrNil<T>(fadr: IntPtr) :=
    fadr=IntPtr.Zero ? default(T) :
    Marshal.GetDelegateForFunctionPointer&<T>(fadr);
    
    public z_UniformBufferEXT_adr := GetFuncAdr('glUniformBufferEXT');
    public z_UniformBufferEXT_ovr_0 := GetFuncOrNil&<procedure(&program: UInt32; location: Int32; buffer: UInt32)>(z_UniformBufferEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure UniformBufferEXT(&program: UInt32; location: Int32; buffer: UInt32);
    begin
      z_UniformBufferEXT_ovr_0(&program, location, buffer);
    end;
    
    public z_GetUniformBufferSizeEXT_adr := GetFuncAdr('glGetUniformBufferSizeEXT');
    public z_GetUniformBufferSizeEXT_ovr_0 := GetFuncOrNil&<function(&program: UInt32; location: Int32): Int32>(z_GetUniformBufferSizeEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetUniformBufferSizeEXT(&program: UInt32; location: Int32): Int32;
    begin
      Result := z_GetUniformBufferSizeEXT_ovr_0(&program, location);
    end;
    
    public z_GetUniformOffsetEXT_adr := GetFuncAdr('glGetUniformOffsetEXT');
    public z_GetUniformOffsetEXT_ovr_0 := GetFuncOrNil&<function(&program: UInt32; location: Int32): IntPtr>(z_GetUniformOffsetEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetUniformOffsetEXT(&program: UInt32; location: Int32): IntPtr;
    begin
      Result := z_GetUniformOffsetEXT_ovr_0(&program, location);
    end;
    
  end;
  
  glBlendColorEXT = sealed class
    public static function GetFuncAdr([MarshalAs(UnmanagedType.LPStr)] lpszProc: string): IntPtr;
    external 'opengl32.dll' name 'wglGetProcAddress';
    public static function GetFuncOrNil<T>(fadr: IntPtr) :=
    fadr=IntPtr.Zero ? default(T) :
    Marshal.GetDelegateForFunctionPointer&<T>(fadr);
    
    public z_BlendColorEXT_adr := GetFuncAdr('glBlendColorEXT');
    public z_BlendColorEXT_ovr_0 := GetFuncOrNil&<procedure(red: single; green: single; blue: single; alpha: single)>(z_BlendColorEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure BlendColorEXT(red: single; green: single; blue: single; alpha: single);
    begin
      z_BlendColorEXT_ovr_0(red, green, blue, alpha);
    end;
    
  end;
  
  glBlendEquationSeparateEXT = sealed class
    public static function GetFuncAdr([MarshalAs(UnmanagedType.LPStr)] lpszProc: string): IntPtr;
    external 'opengl32.dll' name 'wglGetProcAddress';
    public static function GetFuncOrNil<T>(fadr: IntPtr) :=
    fadr=IntPtr.Zero ? default(T) :
    Marshal.GetDelegateForFunctionPointer&<T>(fadr);
    
    public z_BlendEquationSeparateEXT_adr := GetFuncAdr('glBlendEquationSeparateEXT');
    public z_BlendEquationSeparateEXT_ovr_0 := GetFuncOrNil&<procedure(modeRGB: BlendEquationModeEXT; modeAlpha: BlendEquationModeEXT)>(z_BlendEquationSeparateEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure BlendEquationSeparateEXT(modeRGB: BlendEquationModeEXT; modeAlpha: BlendEquationModeEXT);
    begin
      z_BlendEquationSeparateEXT_ovr_0(modeRGB, modeAlpha);
    end;
    
  end;
  
  glBlendFuncSeparateEXT = sealed class
    public static function GetFuncAdr([MarshalAs(UnmanagedType.LPStr)] lpszProc: string): IntPtr;
    external 'opengl32.dll' name 'wglGetProcAddress';
    public static function GetFuncOrNil<T>(fadr: IntPtr) :=
    fadr=IntPtr.Zero ? default(T) :
    Marshal.GetDelegateForFunctionPointer&<T>(fadr);
    
    public z_BlendFuncSeparateEXT_adr := GetFuncAdr('glBlendFuncSeparateEXT');
    public z_BlendFuncSeparateEXT_ovr_0 := GetFuncOrNil&<procedure(sfactorRGB: BlendingFactor; dfactorRGB: BlendingFactor; sfactorAlpha: BlendingFactor; dfactorAlpha: BlendingFactor)>(z_BlendFuncSeparateEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure BlendFuncSeparateEXT(sfactorRGB: BlendingFactor; dfactorRGB: BlendingFactor; sfactorAlpha: BlendingFactor; dfactorAlpha: BlendingFactor);
    begin
      z_BlendFuncSeparateEXT_ovr_0(sfactorRGB, dfactorRGB, sfactorAlpha, dfactorAlpha);
    end;
    
  end;
  
  glBlendMinmaxEXT = sealed class
    public static function GetFuncAdr([MarshalAs(UnmanagedType.LPStr)] lpszProc: string): IntPtr;
    external 'opengl32.dll' name 'wglGetProcAddress';
    public static function GetFuncOrNil<T>(fadr: IntPtr) :=
    fadr=IntPtr.Zero ? default(T) :
    Marshal.GetDelegateForFunctionPointer&<T>(fadr);
    
    public z_BlendEquationEXT_adr := GetFuncAdr('glBlendEquationEXT');
    public z_BlendEquationEXT_ovr_0 := GetFuncOrNil&<procedure(mode: BlendEquationModeEXT)>(z_BlendEquationEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure BlendEquationEXT(mode: BlendEquationModeEXT);
    begin
      z_BlendEquationEXT_ovr_0(mode);
    end;
    
  end;
  
  glColorSubtableEXT = sealed class
    public static function GetFuncAdr([MarshalAs(UnmanagedType.LPStr)] lpszProc: string): IntPtr;
    external 'opengl32.dll' name 'wglGetProcAddress';
    public static function GetFuncOrNil<T>(fadr: IntPtr) :=
    fadr=IntPtr.Zero ? default(T) :
    Marshal.GetDelegateForFunctionPointer&<T>(fadr);
    
    public z_ColorSubTableEXT_adr := GetFuncAdr('glColorSubTableEXT');
    public z_ColorSubTableEXT_ovr_0 := GetFuncOrNil&<procedure(target: ColorTableTarget; start: Int32; count: Int32; format: PixelFormat; &type: PixelType; data: IntPtr)>(z_ColorSubTableEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ColorSubTableEXT(target: ColorTableTarget; start: Int32; count: Int32; format: PixelFormat; &type: PixelType; data: IntPtr);
    begin
      z_ColorSubTableEXT_ovr_0(target, start, count, format, &type, data);
    end;
    
    public z_CopyColorSubTableEXT_adr := GetFuncAdr('glCopyColorSubTableEXT');
    public z_CopyColorSubTableEXT_ovr_0 := GetFuncOrNil&<procedure(target: ColorTableTarget; start: Int32; x: Int32; y: Int32; width: Int32)>(z_CopyColorSubTableEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure CopyColorSubTableEXT(target: ColorTableTarget; start: Int32; x: Int32; y: Int32; width: Int32);
    begin
      z_CopyColorSubTableEXT_ovr_0(target, start, x, y, width);
    end;
    
  end;
  
  glCompiledVertexArrayEXT = sealed class
    public static function GetFuncAdr([MarshalAs(UnmanagedType.LPStr)] lpszProc: string): IntPtr;
    external 'opengl32.dll' name 'wglGetProcAddress';
    public static function GetFuncOrNil<T>(fadr: IntPtr) :=
    fadr=IntPtr.Zero ? default(T) :
    Marshal.GetDelegateForFunctionPointer&<T>(fadr);
    
    public z_LockArraysEXT_adr := GetFuncAdr('glLockArraysEXT');
    public z_LockArraysEXT_ovr_0 := GetFuncOrNil&<procedure(first: Int32; count: Int32)>(z_LockArraysEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure LockArraysEXT(first: Int32; count: Int32);
    begin
      z_LockArraysEXT_ovr_0(first, count);
    end;
    
    public z_UnlockArraysEXT_adr := GetFuncAdr('glUnlockArraysEXT');
    public z_UnlockArraysEXT_ovr_0 := GetFuncOrNil&<procedure>(z_UnlockArraysEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure UnlockArraysEXT;
    begin
      z_UnlockArraysEXT_ovr_0;
    end;
    
  end;
  
  glConvolutionEXT = sealed class
    public static function GetFuncAdr([MarshalAs(UnmanagedType.LPStr)] lpszProc: string): IntPtr;
    external 'opengl32.dll' name 'wglGetProcAddress';
    public static function GetFuncOrNil<T>(fadr: IntPtr) :=
    fadr=IntPtr.Zero ? default(T) :
    Marshal.GetDelegateForFunctionPointer&<T>(fadr);
    
    public z_ConvolutionFilter1DEXT_adr := GetFuncAdr('glConvolutionFilter1DEXT');
    public z_ConvolutionFilter1DEXT_ovr_0 := GetFuncOrNil&<procedure(target: ConvolutionTargetEXT; _internalformat: InternalFormat; width: Int32; format: PixelFormat; &type: PixelType; image: IntPtr)>(z_ConvolutionFilter1DEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ConvolutionFilter1DEXT(target: ConvolutionTargetEXT; _internalformat: InternalFormat; width: Int32; format: PixelFormat; &type: PixelType; image: IntPtr);
    begin
      z_ConvolutionFilter1DEXT_ovr_0(target, _internalformat, width, format, &type, image);
    end;
    
    public z_ConvolutionFilter2DEXT_adr := GetFuncAdr('glConvolutionFilter2DEXT');
    public z_ConvolutionFilter2DEXT_ovr_0 := GetFuncOrNil&<procedure(target: ConvolutionTargetEXT; _internalformat: InternalFormat; width: Int32; height: Int32; format: PixelFormat; &type: PixelType; image: IntPtr)>(z_ConvolutionFilter2DEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ConvolutionFilter2DEXT(target: ConvolutionTargetEXT; _internalformat: InternalFormat; width: Int32; height: Int32; format: PixelFormat; &type: PixelType; image: IntPtr);
    begin
      z_ConvolutionFilter2DEXT_ovr_0(target, _internalformat, width, height, format, &type, image);
    end;
    
    public z_ConvolutionParameterfEXT_adr := GetFuncAdr('glConvolutionParameterfEXT');
    public z_ConvolutionParameterfEXT_ovr_0 := GetFuncOrNil&<procedure(target: ConvolutionTargetEXT; pname: ConvolutionParameterEXT; &params: single)>(z_ConvolutionParameterfEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ConvolutionParameterfEXT(target: ConvolutionTargetEXT; pname: ConvolutionParameterEXT; &params: single);
    begin
      z_ConvolutionParameterfEXT_ovr_0(target, pname, &params);
    end;
    
    public z_ConvolutionParameterfvEXT_adr := GetFuncAdr('glConvolutionParameterfvEXT');
    public z_ConvolutionParameterfvEXT_ovr_0 := GetFuncOrNil&<procedure(target: ConvolutionTargetEXT; pname: ConvolutionParameterEXT; var &params: single)>(z_ConvolutionParameterfvEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ConvolutionParameterfvEXT(target: ConvolutionTargetEXT; pname: ConvolutionParameterEXT; &params: array of single);
    begin
      z_ConvolutionParameterfvEXT_ovr_0(target, pname, &params[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ConvolutionParameterfvEXT(target: ConvolutionTargetEXT; pname: ConvolutionParameterEXT; var &params: single);
    begin
      z_ConvolutionParameterfvEXT_ovr_0(target, pname, &params);
    end;
    public z_ConvolutionParameterfvEXT_ovr_2 := GetFuncOrNil&<procedure(target: ConvolutionTargetEXT; pname: ConvolutionParameterEXT; &params: IntPtr)>(z_ConvolutionParameterfvEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ConvolutionParameterfvEXT(target: ConvolutionTargetEXT; pname: ConvolutionParameterEXT; &params: IntPtr);
    begin
      z_ConvolutionParameterfvEXT_ovr_2(target, pname, &params);
    end;
    
    public z_ConvolutionParameteriEXT_adr := GetFuncAdr('glConvolutionParameteriEXT');
    public z_ConvolutionParameteriEXT_ovr_0 := GetFuncOrNil&<procedure(target: ConvolutionTargetEXT; pname: ConvolutionParameterEXT; &params: Int32)>(z_ConvolutionParameteriEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ConvolutionParameteriEXT(target: ConvolutionTargetEXT; pname: ConvolutionParameterEXT; &params: Int32);
    begin
      z_ConvolutionParameteriEXT_ovr_0(target, pname, &params);
    end;
    
    public z_ConvolutionParameterivEXT_adr := GetFuncAdr('glConvolutionParameterivEXT');
    public z_ConvolutionParameterivEXT_ovr_0 := GetFuncOrNil&<procedure(target: ConvolutionTargetEXT; pname: ConvolutionParameterEXT; var &params: Int32)>(z_ConvolutionParameterivEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ConvolutionParameterivEXT(target: ConvolutionTargetEXT; pname: ConvolutionParameterEXT; &params: array of Int32);
    begin
      z_ConvolutionParameterivEXT_ovr_0(target, pname, &params[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ConvolutionParameterivEXT(target: ConvolutionTargetEXT; pname: ConvolutionParameterEXT; var &params: Int32);
    begin
      z_ConvolutionParameterivEXT_ovr_0(target, pname, &params);
    end;
    public z_ConvolutionParameterivEXT_ovr_2 := GetFuncOrNil&<procedure(target: ConvolutionTargetEXT; pname: ConvolutionParameterEXT; &params: IntPtr)>(z_ConvolutionParameterivEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ConvolutionParameterivEXT(target: ConvolutionTargetEXT; pname: ConvolutionParameterEXT; &params: IntPtr);
    begin
      z_ConvolutionParameterivEXT_ovr_2(target, pname, &params);
    end;
    
    public z_CopyConvolutionFilter1DEXT_adr := GetFuncAdr('glCopyConvolutionFilter1DEXT');
    public z_CopyConvolutionFilter1DEXT_ovr_0 := GetFuncOrNil&<procedure(target: ConvolutionTargetEXT; _internalformat: InternalFormat; x: Int32; y: Int32; width: Int32)>(z_CopyConvolutionFilter1DEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure CopyConvolutionFilter1DEXT(target: ConvolutionTargetEXT; _internalformat: InternalFormat; x: Int32; y: Int32; width: Int32);
    begin
      z_CopyConvolutionFilter1DEXT_ovr_0(target, _internalformat, x, y, width);
    end;
    
    public z_CopyConvolutionFilter2DEXT_adr := GetFuncAdr('glCopyConvolutionFilter2DEXT');
    public z_CopyConvolutionFilter2DEXT_ovr_0 := GetFuncOrNil&<procedure(target: ConvolutionTargetEXT; _internalformat: InternalFormat; x: Int32; y: Int32; width: Int32; height: Int32)>(z_CopyConvolutionFilter2DEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure CopyConvolutionFilter2DEXT(target: ConvolutionTargetEXT; _internalformat: InternalFormat; x: Int32; y: Int32; width: Int32; height: Int32);
    begin
      z_CopyConvolutionFilter2DEXT_ovr_0(target, _internalformat, x, y, width, height);
    end;
    
    public z_GetConvolutionFilterEXT_adr := GetFuncAdr('glGetConvolutionFilterEXT');
    public z_GetConvolutionFilterEXT_ovr_0 := GetFuncOrNil&<procedure(target: ConvolutionTargetEXT; format: PixelFormat; &type: PixelType; image: IntPtr)>(z_GetConvolutionFilterEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetConvolutionFilterEXT(target: ConvolutionTargetEXT; format: PixelFormat; &type: PixelType; image: IntPtr);
    begin
      z_GetConvolutionFilterEXT_ovr_0(target, format, &type, image);
    end;
    
    public z_GetConvolutionParameterfvEXT_adr := GetFuncAdr('glGetConvolutionParameterfvEXT');
    public z_GetConvolutionParameterfvEXT_ovr_0 := GetFuncOrNil&<procedure(target: ConvolutionTargetEXT; pname: ConvolutionParameterEXT; var &params: single)>(z_GetConvolutionParameterfvEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetConvolutionParameterfvEXT(target: ConvolutionTargetEXT; pname: ConvolutionParameterEXT; &params: array of single);
    begin
      z_GetConvolutionParameterfvEXT_ovr_0(target, pname, &params[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetConvolutionParameterfvEXT(target: ConvolutionTargetEXT; pname: ConvolutionParameterEXT; var &params: single);
    begin
      z_GetConvolutionParameterfvEXT_ovr_0(target, pname, &params);
    end;
    public z_GetConvolutionParameterfvEXT_ovr_2 := GetFuncOrNil&<procedure(target: ConvolutionTargetEXT; pname: ConvolutionParameterEXT; &params: IntPtr)>(z_GetConvolutionParameterfvEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetConvolutionParameterfvEXT(target: ConvolutionTargetEXT; pname: ConvolutionParameterEXT; &params: IntPtr);
    begin
      z_GetConvolutionParameterfvEXT_ovr_2(target, pname, &params);
    end;
    
    public z_GetConvolutionParameterivEXT_adr := GetFuncAdr('glGetConvolutionParameterivEXT');
    public z_GetConvolutionParameterivEXT_ovr_0 := GetFuncOrNil&<procedure(target: ConvolutionTargetEXT; pname: ConvolutionParameterEXT; var &params: Int32)>(z_GetConvolutionParameterivEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetConvolutionParameterivEXT(target: ConvolutionTargetEXT; pname: ConvolutionParameterEXT; &params: array of Int32);
    begin
      z_GetConvolutionParameterivEXT_ovr_0(target, pname, &params[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetConvolutionParameterivEXT(target: ConvolutionTargetEXT; pname: ConvolutionParameterEXT; var &params: Int32);
    begin
      z_GetConvolutionParameterivEXT_ovr_0(target, pname, &params);
    end;
    public z_GetConvolutionParameterivEXT_ovr_2 := GetFuncOrNil&<procedure(target: ConvolutionTargetEXT; pname: ConvolutionParameterEXT; &params: IntPtr)>(z_GetConvolutionParameterivEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetConvolutionParameterivEXT(target: ConvolutionTargetEXT; pname: ConvolutionParameterEXT; &params: IntPtr);
    begin
      z_GetConvolutionParameterivEXT_ovr_2(target, pname, &params);
    end;
    
    public z_GetSeparableFilterEXT_adr := GetFuncAdr('glGetSeparableFilterEXT');
    public z_GetSeparableFilterEXT_ovr_0 := GetFuncOrNil&<procedure(target: SeparableTargetEXT; format: PixelFormat; &type: PixelType; row: IntPtr; column: IntPtr; span: IntPtr)>(z_GetSeparableFilterEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetSeparableFilterEXT(target: SeparableTargetEXT; format: PixelFormat; &type: PixelType; row: IntPtr; column: IntPtr; span: IntPtr);
    begin
      z_GetSeparableFilterEXT_ovr_0(target, format, &type, row, column, span);
    end;
    
    public z_SeparableFilter2DEXT_adr := GetFuncAdr('glSeparableFilter2DEXT');
    public z_SeparableFilter2DEXT_ovr_0 := GetFuncOrNil&<procedure(target: SeparableTargetEXT; _internalformat: InternalFormat; width: Int32; height: Int32; format: PixelFormat; &type: PixelType; row: IntPtr; column: IntPtr)>(z_SeparableFilter2DEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure SeparableFilter2DEXT(target: SeparableTargetEXT; _internalformat: InternalFormat; width: Int32; height: Int32; format: PixelFormat; &type: PixelType; row: IntPtr; column: IntPtr);
    begin
      z_SeparableFilter2DEXT_ovr_0(target, _internalformat, width, height, format, &type, row, column);
    end;
    
  end;
  
  glCoordinateFrameEXT = sealed class
    public static function GetFuncAdr([MarshalAs(UnmanagedType.LPStr)] lpszProc: string): IntPtr;
    external 'opengl32.dll' name 'wglGetProcAddress';
    public static function GetFuncOrNil<T>(fadr: IntPtr) :=
    fadr=IntPtr.Zero ? default(T) :
    Marshal.GetDelegateForFunctionPointer&<T>(fadr);
    
    public z_Tangent3bEXT_adr := GetFuncAdr('glTangent3bEXT');
    public z_Tangent3bEXT_ovr_0 := GetFuncOrNil&<procedure(tx: SByte; ty: SByte; tz: SByte)>(z_Tangent3bEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Tangent3bEXT(tx: SByte; ty: SByte; tz: SByte);
    begin
      z_Tangent3bEXT_ovr_0(tx, ty, tz);
    end;
    
    public z_Tangent3bvEXT_adr := GetFuncAdr('glTangent3bvEXT');
    public z_Tangent3bvEXT_ovr_0 := GetFuncOrNil&<procedure(var v: SByte)>(z_Tangent3bvEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Tangent3bvEXT(v: array of SByte);
    begin
      z_Tangent3bvEXT_ovr_0(v[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Tangent3bvEXT(var v: SByte);
    begin
      z_Tangent3bvEXT_ovr_0(v);
    end;
    public z_Tangent3bvEXT_ovr_2 := GetFuncOrNil&<procedure(v: IntPtr)>(z_Tangent3bvEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Tangent3bvEXT(v: IntPtr);
    begin
      z_Tangent3bvEXT_ovr_2(v);
    end;
    
    public z_Tangent3dEXT_adr := GetFuncAdr('glTangent3dEXT');
    public z_Tangent3dEXT_ovr_0 := GetFuncOrNil&<procedure(tx: real; ty: real; tz: real)>(z_Tangent3dEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Tangent3dEXT(tx: real; ty: real; tz: real);
    begin
      z_Tangent3dEXT_ovr_0(tx, ty, tz);
    end;
    
    public z_Tangent3dvEXT_adr := GetFuncAdr('glTangent3dvEXT');
    public z_Tangent3dvEXT_ovr_0 := GetFuncOrNil&<procedure(var v: real)>(z_Tangent3dvEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Tangent3dvEXT(v: array of real);
    begin
      z_Tangent3dvEXT_ovr_0(v[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Tangent3dvEXT(var v: real);
    begin
      z_Tangent3dvEXT_ovr_0(v);
    end;
    public z_Tangent3dvEXT_ovr_2 := GetFuncOrNil&<procedure(v: IntPtr)>(z_Tangent3dvEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Tangent3dvEXT(v: IntPtr);
    begin
      z_Tangent3dvEXT_ovr_2(v);
    end;
    
    public z_Tangent3fEXT_adr := GetFuncAdr('glTangent3fEXT');
    public z_Tangent3fEXT_ovr_0 := GetFuncOrNil&<procedure(tx: single; ty: single; tz: single)>(z_Tangent3fEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Tangent3fEXT(tx: single; ty: single; tz: single);
    begin
      z_Tangent3fEXT_ovr_0(tx, ty, tz);
    end;
    
    public z_Tangent3fvEXT_adr := GetFuncAdr('glTangent3fvEXT');
    public z_Tangent3fvEXT_ovr_0 := GetFuncOrNil&<procedure(var v: single)>(z_Tangent3fvEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Tangent3fvEXT(v: array of single);
    begin
      z_Tangent3fvEXT_ovr_0(v[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Tangent3fvEXT(var v: single);
    begin
      z_Tangent3fvEXT_ovr_0(v);
    end;
    public z_Tangent3fvEXT_ovr_2 := GetFuncOrNil&<procedure(v: IntPtr)>(z_Tangent3fvEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Tangent3fvEXT(v: IntPtr);
    begin
      z_Tangent3fvEXT_ovr_2(v);
    end;
    
    public z_Tangent3iEXT_adr := GetFuncAdr('glTangent3iEXT');
    public z_Tangent3iEXT_ovr_0 := GetFuncOrNil&<procedure(tx: Int32; ty: Int32; tz: Int32)>(z_Tangent3iEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Tangent3iEXT(tx: Int32; ty: Int32; tz: Int32);
    begin
      z_Tangent3iEXT_ovr_0(tx, ty, tz);
    end;
    
    public z_Tangent3ivEXT_adr := GetFuncAdr('glTangent3ivEXT');
    public z_Tangent3ivEXT_ovr_0 := GetFuncOrNil&<procedure(var v: Int32)>(z_Tangent3ivEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Tangent3ivEXT(v: array of Int32);
    begin
      z_Tangent3ivEXT_ovr_0(v[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Tangent3ivEXT(var v: Int32);
    begin
      z_Tangent3ivEXT_ovr_0(v);
    end;
    public z_Tangent3ivEXT_ovr_2 := GetFuncOrNil&<procedure(v: IntPtr)>(z_Tangent3ivEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Tangent3ivEXT(v: IntPtr);
    begin
      z_Tangent3ivEXT_ovr_2(v);
    end;
    
    public z_Tangent3sEXT_adr := GetFuncAdr('glTangent3sEXT');
    public z_Tangent3sEXT_ovr_0 := GetFuncOrNil&<procedure(tx: Int16; ty: Int16; tz: Int16)>(z_Tangent3sEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Tangent3sEXT(tx: Int16; ty: Int16; tz: Int16);
    begin
      z_Tangent3sEXT_ovr_0(tx, ty, tz);
    end;
    
    public z_Tangent3svEXT_adr := GetFuncAdr('glTangent3svEXT');
    public z_Tangent3svEXT_ovr_0 := GetFuncOrNil&<procedure(var v: Int16)>(z_Tangent3svEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Tangent3svEXT(v: array of Int16);
    begin
      z_Tangent3svEXT_ovr_0(v[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Tangent3svEXT(var v: Int16);
    begin
      z_Tangent3svEXT_ovr_0(v);
    end;
    public z_Tangent3svEXT_ovr_2 := GetFuncOrNil&<procedure(v: IntPtr)>(z_Tangent3svEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Tangent3svEXT(v: IntPtr);
    begin
      z_Tangent3svEXT_ovr_2(v);
    end;
    
    public z_Binormal3bEXT_adr := GetFuncAdr('glBinormal3bEXT');
    public z_Binormal3bEXT_ovr_0 := GetFuncOrNil&<procedure(bx: SByte; by: SByte; bz: SByte)>(z_Binormal3bEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Binormal3bEXT(bx: SByte; by: SByte; bz: SByte);
    begin
      z_Binormal3bEXT_ovr_0(bx, by, bz);
    end;
    
    public z_Binormal3bvEXT_adr := GetFuncAdr('glBinormal3bvEXT');
    public z_Binormal3bvEXT_ovr_0 := GetFuncOrNil&<procedure(var v: SByte)>(z_Binormal3bvEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Binormal3bvEXT(v: array of SByte);
    begin
      z_Binormal3bvEXT_ovr_0(v[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Binormal3bvEXT(var v: SByte);
    begin
      z_Binormal3bvEXT_ovr_0(v);
    end;
    public z_Binormal3bvEXT_ovr_2 := GetFuncOrNil&<procedure(v: IntPtr)>(z_Binormal3bvEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Binormal3bvEXT(v: IntPtr);
    begin
      z_Binormal3bvEXT_ovr_2(v);
    end;
    
    public z_Binormal3dEXT_adr := GetFuncAdr('glBinormal3dEXT');
    public z_Binormal3dEXT_ovr_0 := GetFuncOrNil&<procedure(bx: real; by: real; bz: real)>(z_Binormal3dEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Binormal3dEXT(bx: real; by: real; bz: real);
    begin
      z_Binormal3dEXT_ovr_0(bx, by, bz);
    end;
    
    public z_Binormal3dvEXT_adr := GetFuncAdr('glBinormal3dvEXT');
    public z_Binormal3dvEXT_ovr_0 := GetFuncOrNil&<procedure(var v: real)>(z_Binormal3dvEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Binormal3dvEXT(v: array of real);
    begin
      z_Binormal3dvEXT_ovr_0(v[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Binormal3dvEXT(var v: real);
    begin
      z_Binormal3dvEXT_ovr_0(v);
    end;
    public z_Binormal3dvEXT_ovr_2 := GetFuncOrNil&<procedure(v: IntPtr)>(z_Binormal3dvEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Binormal3dvEXT(v: IntPtr);
    begin
      z_Binormal3dvEXT_ovr_2(v);
    end;
    
    public z_Binormal3fEXT_adr := GetFuncAdr('glBinormal3fEXT');
    public z_Binormal3fEXT_ovr_0 := GetFuncOrNil&<procedure(bx: single; by: single; bz: single)>(z_Binormal3fEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Binormal3fEXT(bx: single; by: single; bz: single);
    begin
      z_Binormal3fEXT_ovr_0(bx, by, bz);
    end;
    
    public z_Binormal3fvEXT_adr := GetFuncAdr('glBinormal3fvEXT');
    public z_Binormal3fvEXT_ovr_0 := GetFuncOrNil&<procedure(var v: single)>(z_Binormal3fvEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Binormal3fvEXT(v: array of single);
    begin
      z_Binormal3fvEXT_ovr_0(v[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Binormal3fvEXT(var v: single);
    begin
      z_Binormal3fvEXT_ovr_0(v);
    end;
    public z_Binormal3fvEXT_ovr_2 := GetFuncOrNil&<procedure(v: IntPtr)>(z_Binormal3fvEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Binormal3fvEXT(v: IntPtr);
    begin
      z_Binormal3fvEXT_ovr_2(v);
    end;
    
    public z_Binormal3iEXT_adr := GetFuncAdr('glBinormal3iEXT');
    public z_Binormal3iEXT_ovr_0 := GetFuncOrNil&<procedure(bx: Int32; by: Int32; bz: Int32)>(z_Binormal3iEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Binormal3iEXT(bx: Int32; by: Int32; bz: Int32);
    begin
      z_Binormal3iEXT_ovr_0(bx, by, bz);
    end;
    
    public z_Binormal3ivEXT_adr := GetFuncAdr('glBinormal3ivEXT');
    public z_Binormal3ivEXT_ovr_0 := GetFuncOrNil&<procedure(var v: Int32)>(z_Binormal3ivEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Binormal3ivEXT(v: array of Int32);
    begin
      z_Binormal3ivEXT_ovr_0(v[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Binormal3ivEXT(var v: Int32);
    begin
      z_Binormal3ivEXT_ovr_0(v);
    end;
    public z_Binormal3ivEXT_ovr_2 := GetFuncOrNil&<procedure(v: IntPtr)>(z_Binormal3ivEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Binormal3ivEXT(v: IntPtr);
    begin
      z_Binormal3ivEXT_ovr_2(v);
    end;
    
    public z_Binormal3sEXT_adr := GetFuncAdr('glBinormal3sEXT');
    public z_Binormal3sEXT_ovr_0 := GetFuncOrNil&<procedure(bx: Int16; by: Int16; bz: Int16)>(z_Binormal3sEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Binormal3sEXT(bx: Int16; by: Int16; bz: Int16);
    begin
      z_Binormal3sEXT_ovr_0(bx, by, bz);
    end;
    
    public z_Binormal3svEXT_adr := GetFuncAdr('glBinormal3svEXT');
    public z_Binormal3svEXT_ovr_0 := GetFuncOrNil&<procedure(var v: Int16)>(z_Binormal3svEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Binormal3svEXT(v: array of Int16);
    begin
      z_Binormal3svEXT_ovr_0(v[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Binormal3svEXT(var v: Int16);
    begin
      z_Binormal3svEXT_ovr_0(v);
    end;
    public z_Binormal3svEXT_ovr_2 := GetFuncOrNil&<procedure(v: IntPtr)>(z_Binormal3svEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Binormal3svEXT(v: IntPtr);
    begin
      z_Binormal3svEXT_ovr_2(v);
    end;
    
    public z_TangentPointerEXT_adr := GetFuncAdr('glTangentPointerEXT');
    public z_TangentPointerEXT_ovr_0 := GetFuncOrNil&<procedure(&type: TangentPointerTypeEXT; stride: Int32; pointer: IntPtr)>(z_TangentPointerEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TangentPointerEXT(&type: TangentPointerTypeEXT; stride: Int32; pointer: IntPtr);
    begin
      z_TangentPointerEXT_ovr_0(&type, stride, pointer);
    end;
    
    public z_BinormalPointerEXT_adr := GetFuncAdr('glBinormalPointerEXT');
    public z_BinormalPointerEXT_ovr_0 := GetFuncOrNil&<procedure(&type: BinormalPointerTypeEXT; stride: Int32; pointer: IntPtr)>(z_BinormalPointerEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure BinormalPointerEXT(&type: BinormalPointerTypeEXT; stride: Int32; pointer: IntPtr);
    begin
      z_BinormalPointerEXT_ovr_0(&type, stride, pointer);
    end;
    
  end;
  
  glCopyTextureEXT = sealed class
    public static function GetFuncAdr([MarshalAs(UnmanagedType.LPStr)] lpszProc: string): IntPtr;
    external 'opengl32.dll' name 'wglGetProcAddress';
    public static function GetFuncOrNil<T>(fadr: IntPtr) :=
    fadr=IntPtr.Zero ? default(T) :
    Marshal.GetDelegateForFunctionPointer&<T>(fadr);
    
    public z_CopyTexImage1DEXT_adr := GetFuncAdr('glCopyTexImage1DEXT');
    public z_CopyTexImage1DEXT_ovr_0 := GetFuncOrNil&<procedure(target: TextureTarget; level: Int32; _internalformat: InternalFormat; x: Int32; y: Int32; width: Int32; border: Int32)>(z_CopyTexImage1DEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure CopyTexImage1DEXT(target: TextureTarget; level: Int32; _internalformat: InternalFormat; x: Int32; y: Int32; width: Int32; border: Int32);
    begin
      z_CopyTexImage1DEXT_ovr_0(target, level, _internalformat, x, y, width, border);
    end;
    
    public z_CopyTexImage2DEXT_adr := GetFuncAdr('glCopyTexImage2DEXT');
    public z_CopyTexImage2DEXT_ovr_0 := GetFuncOrNil&<procedure(target: TextureTarget; level: Int32; _internalformat: InternalFormat; x: Int32; y: Int32; width: Int32; height: Int32; border: Int32)>(z_CopyTexImage2DEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure CopyTexImage2DEXT(target: TextureTarget; level: Int32; _internalformat: InternalFormat; x: Int32; y: Int32; width: Int32; height: Int32; border: Int32);
    begin
      z_CopyTexImage2DEXT_ovr_0(target, level, _internalformat, x, y, width, height, border);
    end;
    
    public z_CopyTexSubImage1DEXT_adr := GetFuncAdr('glCopyTexSubImage1DEXT');
    public z_CopyTexSubImage1DEXT_ovr_0 := GetFuncOrNil&<procedure(target: TextureTarget; level: Int32; xoffset: Int32; x: Int32; y: Int32; width: Int32)>(z_CopyTexSubImage1DEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure CopyTexSubImage1DEXT(target: TextureTarget; level: Int32; xoffset: Int32; x: Int32; y: Int32; width: Int32);
    begin
      z_CopyTexSubImage1DEXT_ovr_0(target, level, xoffset, x, y, width);
    end;
    
    public z_CopyTexSubImage2DEXT_adr := GetFuncAdr('glCopyTexSubImage2DEXT');
    public z_CopyTexSubImage2DEXT_ovr_0 := GetFuncOrNil&<procedure(target: TextureTarget; level: Int32; xoffset: Int32; yoffset: Int32; x: Int32; y: Int32; width: Int32; height: Int32)>(z_CopyTexSubImage2DEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure CopyTexSubImage2DEXT(target: TextureTarget; level: Int32; xoffset: Int32; yoffset: Int32; x: Int32; y: Int32; width: Int32; height: Int32);
    begin
      z_CopyTexSubImage2DEXT_ovr_0(target, level, xoffset, yoffset, x, y, width, height);
    end;
    
    public z_CopyTexSubImage3DEXT_adr := GetFuncAdr('glCopyTexSubImage3DEXT');
    public z_CopyTexSubImage3DEXT_ovr_0 := GetFuncOrNil&<procedure(target: TextureTarget; level: Int32; xoffset: Int32; yoffset: Int32; zoffset: Int32; x: Int32; y: Int32; width: Int32; height: Int32)>(z_CopyTexSubImage3DEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure CopyTexSubImage3DEXT(target: TextureTarget; level: Int32; xoffset: Int32; yoffset: Int32; zoffset: Int32; x: Int32; y: Int32; width: Int32; height: Int32);
    begin
      z_CopyTexSubImage3DEXT_ovr_0(target, level, xoffset, yoffset, zoffset, x, y, width, height);
    end;
    
  end;
  
  glCullVertexEXT = sealed class
    public static function GetFuncAdr([MarshalAs(UnmanagedType.LPStr)] lpszProc: string): IntPtr;
    external 'opengl32.dll' name 'wglGetProcAddress';
    public static function GetFuncOrNil<T>(fadr: IntPtr) :=
    fadr=IntPtr.Zero ? default(T) :
    Marshal.GetDelegateForFunctionPointer&<T>(fadr);
    
    public z_CullParameterdvEXT_adr := GetFuncAdr('glCullParameterdvEXT');
    public z_CullParameterdvEXT_ovr_0 := GetFuncOrNil&<procedure(pname: CullParameterEXT; var &params: real)>(z_CullParameterdvEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure CullParameterdvEXT(pname: CullParameterEXT; &params: array of real);
    begin
      z_CullParameterdvEXT_ovr_0(pname, &params[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure CullParameterdvEXT(pname: CullParameterEXT; var &params: real);
    begin
      z_CullParameterdvEXT_ovr_0(pname, &params);
    end;
    public z_CullParameterdvEXT_ovr_2 := GetFuncOrNil&<procedure(pname: CullParameterEXT; &params: IntPtr)>(z_CullParameterdvEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure CullParameterdvEXT(pname: CullParameterEXT; &params: IntPtr);
    begin
      z_CullParameterdvEXT_ovr_2(pname, &params);
    end;
    
    public z_CullParameterfvEXT_adr := GetFuncAdr('glCullParameterfvEXT');
    public z_CullParameterfvEXT_ovr_0 := GetFuncOrNil&<procedure(pname: CullParameterEXT; var &params: single)>(z_CullParameterfvEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure CullParameterfvEXT(pname: CullParameterEXT; &params: array of single);
    begin
      z_CullParameterfvEXT_ovr_0(pname, &params[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure CullParameterfvEXT(pname: CullParameterEXT; var &params: single);
    begin
      z_CullParameterfvEXT_ovr_0(pname, &params);
    end;
    public z_CullParameterfvEXT_ovr_2 := GetFuncOrNil&<procedure(pname: CullParameterEXT; &params: IntPtr)>(z_CullParameterfvEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure CullParameterfvEXT(pname: CullParameterEXT; &params: IntPtr);
    begin
      z_CullParameterfvEXT_ovr_2(pname, &params);
    end;
    
  end;
  
  glDebugLabelEXT = sealed class
    public static function GetFuncAdr([MarshalAs(UnmanagedType.LPStr)] lpszProc: string): IntPtr;
    external 'opengl32.dll' name 'wglGetProcAddress';
    public static function GetFuncOrNil<T>(fadr: IntPtr) :=
    fadr=IntPtr.Zero ? default(T) :
    Marshal.GetDelegateForFunctionPointer&<T>(fadr);
    
    public z_LabelObjectEXT_adr := GetFuncAdr('glLabelObjectEXT');
    public z_LabelObjectEXT_ovr_0 := GetFuncOrNil&<procedure(&type: DummyEnum; object: UInt32; length: Int32; &label: IntPtr)>(z_LabelObjectEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure LabelObjectEXT(&type: DummyEnum; object: UInt32; length: Int32; &label: string);
    begin
      var par_4_str_ptr := Marshal.StringToHGlobalAnsi(&label);
      z_LabelObjectEXT_ovr_0(&type, object, length, par_4_str_ptr);
      Marshal.FreeHGlobal(par_4_str_ptr);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure LabelObjectEXT(&type: DummyEnum; object: UInt32; length: Int32; &label: IntPtr);
    begin
      z_LabelObjectEXT_ovr_0(&type, object, length, &label);
    end;
    
    public z_GetObjectLabelEXT_adr := GetFuncAdr('glGetObjectLabelEXT');
    public z_GetObjectLabelEXT_ovr_0 := GetFuncOrNil&<procedure(&type: DummyEnum; object: UInt32; bufSize: Int32; var length: Int32; &label: IntPtr)>(z_GetObjectLabelEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetObjectLabelEXT(&type: DummyEnum; object: UInt32; bufSize: Int32; length: array of Int32; &label: IntPtr);
    begin
      z_GetObjectLabelEXT_ovr_0(&type, object, bufSize, length[0], &label);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetObjectLabelEXT(&type: DummyEnum; object: UInt32; bufSize: Int32; var length: Int32; &label: IntPtr);
    begin
      z_GetObjectLabelEXT_ovr_0(&type, object, bufSize, length, &label);
    end;
    public z_GetObjectLabelEXT_ovr_2 := GetFuncOrNil&<procedure(&type: DummyEnum; object: UInt32; bufSize: Int32; length: IntPtr; &label: IntPtr)>(z_GetObjectLabelEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetObjectLabelEXT(&type: DummyEnum; object: UInt32; bufSize: Int32; length: IntPtr; &label: IntPtr);
    begin
      z_GetObjectLabelEXT_ovr_2(&type, object, bufSize, length, &label);
    end;
    
  end;
  
  glDebugMarkerEXT = sealed class
    public static function GetFuncAdr([MarshalAs(UnmanagedType.LPStr)] lpszProc: string): IntPtr;
    external 'opengl32.dll' name 'wglGetProcAddress';
    public static function GetFuncOrNil<T>(fadr: IntPtr) :=
    fadr=IntPtr.Zero ? default(T) :
    Marshal.GetDelegateForFunctionPointer&<T>(fadr);
    
    public z_InsertEventMarkerEXT_adr := GetFuncAdr('glInsertEventMarkerEXT');
    public z_InsertEventMarkerEXT_ovr_0 := GetFuncOrNil&<procedure(length: Int32; marker: IntPtr)>(z_InsertEventMarkerEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure InsertEventMarkerEXT(length: Int32; marker: string);
    begin
      var par_2_str_ptr := Marshal.StringToHGlobalAnsi(marker);
      z_InsertEventMarkerEXT_ovr_0(length, par_2_str_ptr);
      Marshal.FreeHGlobal(par_2_str_ptr);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure InsertEventMarkerEXT(length: Int32; marker: IntPtr);
    begin
      z_InsertEventMarkerEXT_ovr_0(length, marker);
    end;
    
    public z_PushGroupMarkerEXT_adr := GetFuncAdr('glPushGroupMarkerEXT');
    public z_PushGroupMarkerEXT_ovr_0 := GetFuncOrNil&<procedure(length: Int32; marker: IntPtr)>(z_PushGroupMarkerEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure PushGroupMarkerEXT(length: Int32; marker: string);
    begin
      var par_2_str_ptr := Marshal.StringToHGlobalAnsi(marker);
      z_PushGroupMarkerEXT_ovr_0(length, par_2_str_ptr);
      Marshal.FreeHGlobal(par_2_str_ptr);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure PushGroupMarkerEXT(length: Int32; marker: IntPtr);
    begin
      z_PushGroupMarkerEXT_ovr_0(length, marker);
    end;
    
    public z_PopGroupMarkerEXT_adr := GetFuncAdr('glPopGroupMarkerEXT');
    public z_PopGroupMarkerEXT_ovr_0 := GetFuncOrNil&<procedure>(z_PopGroupMarkerEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure PopGroupMarkerEXT;
    begin
      z_PopGroupMarkerEXT_ovr_0;
    end;
    
  end;
  
  glDepthBoundsTestEXT = sealed class
    public static function GetFuncAdr([MarshalAs(UnmanagedType.LPStr)] lpszProc: string): IntPtr;
    external 'opengl32.dll' name 'wglGetProcAddress';
    public static function GetFuncOrNil<T>(fadr: IntPtr) :=
    fadr=IntPtr.Zero ? default(T) :
    Marshal.GetDelegateForFunctionPointer&<T>(fadr);
    
    public z_DepthBoundsEXT_adr := GetFuncAdr('glDepthBoundsEXT');
    public z_DepthBoundsEXT_ovr_0 := GetFuncOrNil&<procedure(zmin: real; zmax: real)>(z_DepthBoundsEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure DepthBoundsEXT(zmin: real; zmax: real);
    begin
      z_DepthBoundsEXT_ovr_0(zmin, zmax);
    end;
    
  end;
  
  glDirectStateAccessEXT = sealed class
    public static function GetFuncAdr([MarshalAs(UnmanagedType.LPStr)] lpszProc: string): IntPtr;
    external 'opengl32.dll' name 'wglGetProcAddress';
    public static function GetFuncOrNil<T>(fadr: IntPtr) :=
    fadr=IntPtr.Zero ? default(T) :
    Marshal.GetDelegateForFunctionPointer&<T>(fadr);
    
    public z_MatrixLoadfEXT_adr := GetFuncAdr('glMatrixLoadfEXT');
    public z_MatrixLoadfEXT_ovr_0 := GetFuncOrNil&<procedure(mode: MatrixMode; var m: single)>(z_MatrixLoadfEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MatrixLoadfEXT(mode: MatrixMode; m: array of single);
    begin
      z_MatrixLoadfEXT_ovr_0(mode, m[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MatrixLoadfEXT(mode: MatrixMode; var m: single);
    begin
      z_MatrixLoadfEXT_ovr_0(mode, m);
    end;
    public z_MatrixLoadfEXT_ovr_2 := GetFuncOrNil&<procedure(mode: MatrixMode; m: IntPtr)>(z_MatrixLoadfEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MatrixLoadfEXT(mode: MatrixMode; m: IntPtr);
    begin
      z_MatrixLoadfEXT_ovr_2(mode, m);
    end;
    
    public z_MatrixLoaddEXT_adr := GetFuncAdr('glMatrixLoaddEXT');
    public z_MatrixLoaddEXT_ovr_0 := GetFuncOrNil&<procedure(mode: MatrixMode; var m: real)>(z_MatrixLoaddEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MatrixLoaddEXT(mode: MatrixMode; m: array of real);
    begin
      z_MatrixLoaddEXT_ovr_0(mode, m[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MatrixLoaddEXT(mode: MatrixMode; var m: real);
    begin
      z_MatrixLoaddEXT_ovr_0(mode, m);
    end;
    public z_MatrixLoaddEXT_ovr_2 := GetFuncOrNil&<procedure(mode: MatrixMode; m: IntPtr)>(z_MatrixLoaddEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MatrixLoaddEXT(mode: MatrixMode; m: IntPtr);
    begin
      z_MatrixLoaddEXT_ovr_2(mode, m);
    end;
    
    public z_MatrixMultfEXT_adr := GetFuncAdr('glMatrixMultfEXT');
    public z_MatrixMultfEXT_ovr_0 := GetFuncOrNil&<procedure(mode: MatrixMode; var m: single)>(z_MatrixMultfEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MatrixMultfEXT(mode: MatrixMode; m: array of single);
    begin
      z_MatrixMultfEXT_ovr_0(mode, m[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MatrixMultfEXT(mode: MatrixMode; var m: single);
    begin
      z_MatrixMultfEXT_ovr_0(mode, m);
    end;
    public z_MatrixMultfEXT_ovr_2 := GetFuncOrNil&<procedure(mode: MatrixMode; m: IntPtr)>(z_MatrixMultfEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MatrixMultfEXT(mode: MatrixMode; m: IntPtr);
    begin
      z_MatrixMultfEXT_ovr_2(mode, m);
    end;
    
    public z_MatrixMultdEXT_adr := GetFuncAdr('glMatrixMultdEXT');
    public z_MatrixMultdEXT_ovr_0 := GetFuncOrNil&<procedure(mode: MatrixMode; var m: real)>(z_MatrixMultdEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MatrixMultdEXT(mode: MatrixMode; m: array of real);
    begin
      z_MatrixMultdEXT_ovr_0(mode, m[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MatrixMultdEXT(mode: MatrixMode; var m: real);
    begin
      z_MatrixMultdEXT_ovr_0(mode, m);
    end;
    public z_MatrixMultdEXT_ovr_2 := GetFuncOrNil&<procedure(mode: MatrixMode; m: IntPtr)>(z_MatrixMultdEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MatrixMultdEXT(mode: MatrixMode; m: IntPtr);
    begin
      z_MatrixMultdEXT_ovr_2(mode, m);
    end;
    
    public z_MatrixLoadIdentityEXT_adr := GetFuncAdr('glMatrixLoadIdentityEXT');
    public z_MatrixLoadIdentityEXT_ovr_0 := GetFuncOrNil&<procedure(mode: MatrixMode)>(z_MatrixLoadIdentityEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MatrixLoadIdentityEXT(mode: MatrixMode);
    begin
      z_MatrixLoadIdentityEXT_ovr_0(mode);
    end;
    
    public z_MatrixRotatefEXT_adr := GetFuncAdr('glMatrixRotatefEXT');
    public z_MatrixRotatefEXT_ovr_0 := GetFuncOrNil&<procedure(mode: MatrixMode; angle: single; x: single; y: single; z: single)>(z_MatrixRotatefEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MatrixRotatefEXT(mode: MatrixMode; angle: single; x: single; y: single; z: single);
    begin
      z_MatrixRotatefEXT_ovr_0(mode, angle, x, y, z);
    end;
    
    public z_MatrixRotatedEXT_adr := GetFuncAdr('glMatrixRotatedEXT');
    public z_MatrixRotatedEXT_ovr_0 := GetFuncOrNil&<procedure(mode: MatrixMode; angle: real; x: real; y: real; z: real)>(z_MatrixRotatedEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MatrixRotatedEXT(mode: MatrixMode; angle: real; x: real; y: real; z: real);
    begin
      z_MatrixRotatedEXT_ovr_0(mode, angle, x, y, z);
    end;
    
    public z_MatrixScalefEXT_adr := GetFuncAdr('glMatrixScalefEXT');
    public z_MatrixScalefEXT_ovr_0 := GetFuncOrNil&<procedure(mode: MatrixMode; x: single; y: single; z: single)>(z_MatrixScalefEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MatrixScalefEXT(mode: MatrixMode; x: single; y: single; z: single);
    begin
      z_MatrixScalefEXT_ovr_0(mode, x, y, z);
    end;
    
    public z_MatrixScaledEXT_adr := GetFuncAdr('glMatrixScaledEXT');
    public z_MatrixScaledEXT_ovr_0 := GetFuncOrNil&<procedure(mode: MatrixMode; x: real; y: real; z: real)>(z_MatrixScaledEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MatrixScaledEXT(mode: MatrixMode; x: real; y: real; z: real);
    begin
      z_MatrixScaledEXT_ovr_0(mode, x, y, z);
    end;
    
    public z_MatrixTranslatefEXT_adr := GetFuncAdr('glMatrixTranslatefEXT');
    public z_MatrixTranslatefEXT_ovr_0 := GetFuncOrNil&<procedure(mode: MatrixMode; x: single; y: single; z: single)>(z_MatrixTranslatefEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MatrixTranslatefEXT(mode: MatrixMode; x: single; y: single; z: single);
    begin
      z_MatrixTranslatefEXT_ovr_0(mode, x, y, z);
    end;
    
    public z_MatrixTranslatedEXT_adr := GetFuncAdr('glMatrixTranslatedEXT');
    public z_MatrixTranslatedEXT_ovr_0 := GetFuncOrNil&<procedure(mode: MatrixMode; x: real; y: real; z: real)>(z_MatrixTranslatedEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MatrixTranslatedEXT(mode: MatrixMode; x: real; y: real; z: real);
    begin
      z_MatrixTranslatedEXT_ovr_0(mode, x, y, z);
    end;
    
    public z_MatrixFrustumEXT_adr := GetFuncAdr('glMatrixFrustumEXT');
    public z_MatrixFrustumEXT_ovr_0 := GetFuncOrNil&<procedure(mode: MatrixMode; left: real; right: real; bottom: real; top: real; zNear: real; zFar: real)>(z_MatrixFrustumEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MatrixFrustumEXT(mode: MatrixMode; left: real; right: real; bottom: real; top: real; zNear: real; zFar: real);
    begin
      z_MatrixFrustumEXT_ovr_0(mode, left, right, bottom, top, zNear, zFar);
    end;
    
    public z_MatrixOrthoEXT_adr := GetFuncAdr('glMatrixOrthoEXT');
    public z_MatrixOrthoEXT_ovr_0 := GetFuncOrNil&<procedure(mode: MatrixMode; left: real; right: real; bottom: real; top: real; zNear: real; zFar: real)>(z_MatrixOrthoEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MatrixOrthoEXT(mode: MatrixMode; left: real; right: real; bottom: real; top: real; zNear: real; zFar: real);
    begin
      z_MatrixOrthoEXT_ovr_0(mode, left, right, bottom, top, zNear, zFar);
    end;
    
    public z_MatrixPopEXT_adr := GetFuncAdr('glMatrixPopEXT');
    public z_MatrixPopEXT_ovr_0 := GetFuncOrNil&<procedure(mode: MatrixMode)>(z_MatrixPopEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MatrixPopEXT(mode: MatrixMode);
    begin
      z_MatrixPopEXT_ovr_0(mode);
    end;
    
    public z_MatrixPushEXT_adr := GetFuncAdr('glMatrixPushEXT');
    public z_MatrixPushEXT_ovr_0 := GetFuncOrNil&<procedure(mode: MatrixMode)>(z_MatrixPushEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MatrixPushEXT(mode: MatrixMode);
    begin
      z_MatrixPushEXT_ovr_0(mode);
    end;
    
    public z_ClientAttribDefaultEXT_adr := GetFuncAdr('glClientAttribDefaultEXT');
    public z_ClientAttribDefaultEXT_ovr_0 := GetFuncOrNil&<procedure(mask: ClientAttribMask)>(z_ClientAttribDefaultEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ClientAttribDefaultEXT(mask: ClientAttribMask);
    begin
      z_ClientAttribDefaultEXT_ovr_0(mask);
    end;
    
    public z_PushClientAttribDefaultEXT_adr := GetFuncAdr('glPushClientAttribDefaultEXT');
    public z_PushClientAttribDefaultEXT_ovr_0 := GetFuncOrNil&<procedure(mask: ClientAttribMask)>(z_PushClientAttribDefaultEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure PushClientAttribDefaultEXT(mask: ClientAttribMask);
    begin
      z_PushClientAttribDefaultEXT_ovr_0(mask);
    end;
    
    public z_TextureParameterfEXT_adr := GetFuncAdr('glTextureParameterfEXT');
    public z_TextureParameterfEXT_ovr_0 := GetFuncOrNil&<procedure(texture: UInt32; target: TextureTarget; pname: TextureParameterName; param: single)>(z_TextureParameterfEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TextureParameterfEXT(texture: UInt32; target: TextureTarget; pname: TextureParameterName; param: single);
    begin
      z_TextureParameterfEXT_ovr_0(texture, target, pname, param);
    end;
    
    public z_TextureParameterfvEXT_adr := GetFuncAdr('glTextureParameterfvEXT');
    public z_TextureParameterfvEXT_ovr_0 := GetFuncOrNil&<procedure(texture: UInt32; target: TextureTarget; pname: TextureParameterName; var &params: single)>(z_TextureParameterfvEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TextureParameterfvEXT(texture: UInt32; target: TextureTarget; pname: TextureParameterName; &params: array of single);
    begin
      z_TextureParameterfvEXT_ovr_0(texture, target, pname, &params[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TextureParameterfvEXT(texture: UInt32; target: TextureTarget; pname: TextureParameterName; var &params: single);
    begin
      z_TextureParameterfvEXT_ovr_0(texture, target, pname, &params);
    end;
    public z_TextureParameterfvEXT_ovr_2 := GetFuncOrNil&<procedure(texture: UInt32; target: TextureTarget; pname: TextureParameterName; &params: IntPtr)>(z_TextureParameterfvEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TextureParameterfvEXT(texture: UInt32; target: TextureTarget; pname: TextureParameterName; &params: IntPtr);
    begin
      z_TextureParameterfvEXT_ovr_2(texture, target, pname, &params);
    end;
    
    public z_TextureParameteriEXT_adr := GetFuncAdr('glTextureParameteriEXT');
    public z_TextureParameteriEXT_ovr_0 := GetFuncOrNil&<procedure(texture: UInt32; target: TextureTarget; pname: TextureParameterName; param: Int32)>(z_TextureParameteriEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TextureParameteriEXT(texture: UInt32; target: TextureTarget; pname: TextureParameterName; param: Int32);
    begin
      z_TextureParameteriEXT_ovr_0(texture, target, pname, param);
    end;
    
    public z_TextureParameterivEXT_adr := GetFuncAdr('glTextureParameterivEXT');
    public z_TextureParameterivEXT_ovr_0 := GetFuncOrNil&<procedure(texture: UInt32; target: TextureTarget; pname: TextureParameterName; var &params: Int32)>(z_TextureParameterivEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TextureParameterivEXT(texture: UInt32; target: TextureTarget; pname: TextureParameterName; &params: array of Int32);
    begin
      z_TextureParameterivEXT_ovr_0(texture, target, pname, &params[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TextureParameterivEXT(texture: UInt32; target: TextureTarget; pname: TextureParameterName; var &params: Int32);
    begin
      z_TextureParameterivEXT_ovr_0(texture, target, pname, &params);
    end;
    public z_TextureParameterivEXT_ovr_2 := GetFuncOrNil&<procedure(texture: UInt32; target: TextureTarget; pname: TextureParameterName; &params: IntPtr)>(z_TextureParameterivEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TextureParameterivEXT(texture: UInt32; target: TextureTarget; pname: TextureParameterName; &params: IntPtr);
    begin
      z_TextureParameterivEXT_ovr_2(texture, target, pname, &params);
    end;
    
    public z_TextureImage1DEXT_adr := GetFuncAdr('glTextureImage1DEXT');
    public z_TextureImage1DEXT_ovr_0 := GetFuncOrNil&<procedure(texture: UInt32; target: TextureTarget; level: Int32; internalformat: Int32; width: Int32; border: Int32; format: PixelFormat; &type: PixelType; pixels: IntPtr)>(z_TextureImage1DEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TextureImage1DEXT(texture: UInt32; target: TextureTarget; level: Int32; internalformat: Int32; width: Int32; border: Int32; format: PixelFormat; &type: PixelType; pixels: IntPtr);
    begin
      z_TextureImage1DEXT_ovr_0(texture, target, level, internalformat, width, border, format, &type, pixels);
    end;
    
    public z_TextureImage2DEXT_adr := GetFuncAdr('glTextureImage2DEXT');
    public z_TextureImage2DEXT_ovr_0 := GetFuncOrNil&<procedure(texture: UInt32; target: TextureTarget; level: Int32; internalformat: Int32; width: Int32; height: Int32; border: Int32; format: PixelFormat; &type: PixelType; pixels: IntPtr)>(z_TextureImage2DEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TextureImage2DEXT(texture: UInt32; target: TextureTarget; level: Int32; internalformat: Int32; width: Int32; height: Int32; border: Int32; format: PixelFormat; &type: PixelType; pixels: IntPtr);
    begin
      z_TextureImage2DEXT_ovr_0(texture, target, level, internalformat, width, height, border, format, &type, pixels);
    end;
    
    public z_TextureSubImage1DEXT_adr := GetFuncAdr('glTextureSubImage1DEXT');
    public z_TextureSubImage1DEXT_ovr_0 := GetFuncOrNil&<procedure(texture: UInt32; target: TextureTarget; level: Int32; xoffset: Int32; width: Int32; format: PixelFormat; &type: PixelType; pixels: IntPtr)>(z_TextureSubImage1DEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TextureSubImage1DEXT(texture: UInt32; target: TextureTarget; level: Int32; xoffset: Int32; width: Int32; format: PixelFormat; &type: PixelType; pixels: IntPtr);
    begin
      z_TextureSubImage1DEXT_ovr_0(texture, target, level, xoffset, width, format, &type, pixels);
    end;
    
    public z_TextureSubImage2DEXT_adr := GetFuncAdr('glTextureSubImage2DEXT');
    public z_TextureSubImage2DEXT_ovr_0 := GetFuncOrNil&<procedure(texture: UInt32; target: TextureTarget; level: Int32; xoffset: Int32; yoffset: Int32; width: Int32; height: Int32; format: PixelFormat; &type: PixelType; pixels: IntPtr)>(z_TextureSubImage2DEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TextureSubImage2DEXT(texture: UInt32; target: TextureTarget; level: Int32; xoffset: Int32; yoffset: Int32; width: Int32; height: Int32; format: PixelFormat; &type: PixelType; pixels: IntPtr);
    begin
      z_TextureSubImage2DEXT_ovr_0(texture, target, level, xoffset, yoffset, width, height, format, &type, pixels);
    end;
    
    public z_CopyTextureImage1DEXT_adr := GetFuncAdr('glCopyTextureImage1DEXT');
    public z_CopyTextureImage1DEXT_ovr_0 := GetFuncOrNil&<procedure(texture: UInt32; target: TextureTarget; level: Int32; _internalformat: InternalFormat; x: Int32; y: Int32; width: Int32; border: Int32)>(z_CopyTextureImage1DEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure CopyTextureImage1DEXT(texture: UInt32; target: TextureTarget; level: Int32; _internalformat: InternalFormat; x: Int32; y: Int32; width: Int32; border: Int32);
    begin
      z_CopyTextureImage1DEXT_ovr_0(texture, target, level, _internalformat, x, y, width, border);
    end;
    
    public z_CopyTextureImage2DEXT_adr := GetFuncAdr('glCopyTextureImage2DEXT');
    public z_CopyTextureImage2DEXT_ovr_0 := GetFuncOrNil&<procedure(texture: UInt32; target: TextureTarget; level: Int32; _internalformat: InternalFormat; x: Int32; y: Int32; width: Int32; height: Int32; border: Int32)>(z_CopyTextureImage2DEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure CopyTextureImage2DEXT(texture: UInt32; target: TextureTarget; level: Int32; _internalformat: InternalFormat; x: Int32; y: Int32; width: Int32; height: Int32; border: Int32);
    begin
      z_CopyTextureImage2DEXT_ovr_0(texture, target, level, _internalformat, x, y, width, height, border);
    end;
    
    public z_CopyTextureSubImage1DEXT_adr := GetFuncAdr('glCopyTextureSubImage1DEXT');
    public z_CopyTextureSubImage1DEXT_ovr_0 := GetFuncOrNil&<procedure(texture: UInt32; target: TextureTarget; level: Int32; xoffset: Int32; x: Int32; y: Int32; width: Int32)>(z_CopyTextureSubImage1DEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure CopyTextureSubImage1DEXT(texture: UInt32; target: TextureTarget; level: Int32; xoffset: Int32; x: Int32; y: Int32; width: Int32);
    begin
      z_CopyTextureSubImage1DEXT_ovr_0(texture, target, level, xoffset, x, y, width);
    end;
    
    public z_CopyTextureSubImage2DEXT_adr := GetFuncAdr('glCopyTextureSubImage2DEXT');
    public z_CopyTextureSubImage2DEXT_ovr_0 := GetFuncOrNil&<procedure(texture: UInt32; target: TextureTarget; level: Int32; xoffset: Int32; yoffset: Int32; x: Int32; y: Int32; width: Int32; height: Int32)>(z_CopyTextureSubImage2DEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure CopyTextureSubImage2DEXT(texture: UInt32; target: TextureTarget; level: Int32; xoffset: Int32; yoffset: Int32; x: Int32; y: Int32; width: Int32; height: Int32);
    begin
      z_CopyTextureSubImage2DEXT_ovr_0(texture, target, level, xoffset, yoffset, x, y, width, height);
    end;
    
    public z_GetTextureImageEXT_adr := GetFuncAdr('glGetTextureImageEXT');
    public z_GetTextureImageEXT_ovr_0 := GetFuncOrNil&<procedure(texture: UInt32; target: TextureTarget; level: Int32; format: PixelFormat; &type: PixelType; pixels: IntPtr)>(z_GetTextureImageEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetTextureImageEXT(texture: UInt32; target: TextureTarget; level: Int32; format: PixelFormat; &type: PixelType; pixels: IntPtr);
    begin
      z_GetTextureImageEXT_ovr_0(texture, target, level, format, &type, pixels);
    end;
    
    public z_GetTextureParameterfvEXT_adr := GetFuncAdr('glGetTextureParameterfvEXT');
    public z_GetTextureParameterfvEXT_ovr_0 := GetFuncOrNil&<procedure(texture: UInt32; target: TextureTarget; pname: GetTextureParameter; var &params: single)>(z_GetTextureParameterfvEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetTextureParameterfvEXT(texture: UInt32; target: TextureTarget; pname: GetTextureParameter; &params: array of single);
    begin
      z_GetTextureParameterfvEXT_ovr_0(texture, target, pname, &params[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetTextureParameterfvEXT(texture: UInt32; target: TextureTarget; pname: GetTextureParameter; var &params: single);
    begin
      z_GetTextureParameterfvEXT_ovr_0(texture, target, pname, &params);
    end;
    public z_GetTextureParameterfvEXT_ovr_2 := GetFuncOrNil&<procedure(texture: UInt32; target: TextureTarget; pname: GetTextureParameter; &params: IntPtr)>(z_GetTextureParameterfvEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetTextureParameterfvEXT(texture: UInt32; target: TextureTarget; pname: GetTextureParameter; &params: IntPtr);
    begin
      z_GetTextureParameterfvEXT_ovr_2(texture, target, pname, &params);
    end;
    
    public z_GetTextureParameterivEXT_adr := GetFuncAdr('glGetTextureParameterivEXT');
    public z_GetTextureParameterivEXT_ovr_0 := GetFuncOrNil&<procedure(texture: UInt32; target: TextureTarget; pname: GetTextureParameter; var &params: Int32)>(z_GetTextureParameterivEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetTextureParameterivEXT(texture: UInt32; target: TextureTarget; pname: GetTextureParameter; &params: array of Int32);
    begin
      z_GetTextureParameterivEXT_ovr_0(texture, target, pname, &params[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetTextureParameterivEXT(texture: UInt32; target: TextureTarget; pname: GetTextureParameter; var &params: Int32);
    begin
      z_GetTextureParameterivEXT_ovr_0(texture, target, pname, &params);
    end;
    public z_GetTextureParameterivEXT_ovr_2 := GetFuncOrNil&<procedure(texture: UInt32; target: TextureTarget; pname: GetTextureParameter; &params: IntPtr)>(z_GetTextureParameterivEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetTextureParameterivEXT(texture: UInt32; target: TextureTarget; pname: GetTextureParameter; &params: IntPtr);
    begin
      z_GetTextureParameterivEXT_ovr_2(texture, target, pname, &params);
    end;
    
    public z_GetTextureLevelParameterfvEXT_adr := GetFuncAdr('glGetTextureLevelParameterfvEXT');
    public z_GetTextureLevelParameterfvEXT_ovr_0 := GetFuncOrNil&<procedure(texture: UInt32; target: TextureTarget; level: Int32; pname: GetTextureParameter; var &params: single)>(z_GetTextureLevelParameterfvEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetTextureLevelParameterfvEXT(texture: UInt32; target: TextureTarget; level: Int32; pname: GetTextureParameter; &params: array of single);
    begin
      z_GetTextureLevelParameterfvEXT_ovr_0(texture, target, level, pname, &params[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetTextureLevelParameterfvEXT(texture: UInt32; target: TextureTarget; level: Int32; pname: GetTextureParameter; var &params: single);
    begin
      z_GetTextureLevelParameterfvEXT_ovr_0(texture, target, level, pname, &params);
    end;
    public z_GetTextureLevelParameterfvEXT_ovr_2 := GetFuncOrNil&<procedure(texture: UInt32; target: TextureTarget; level: Int32; pname: GetTextureParameter; &params: IntPtr)>(z_GetTextureLevelParameterfvEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetTextureLevelParameterfvEXT(texture: UInt32; target: TextureTarget; level: Int32; pname: GetTextureParameter; &params: IntPtr);
    begin
      z_GetTextureLevelParameterfvEXT_ovr_2(texture, target, level, pname, &params);
    end;
    
    public z_GetTextureLevelParameterivEXT_adr := GetFuncAdr('glGetTextureLevelParameterivEXT');
    public z_GetTextureLevelParameterivEXT_ovr_0 := GetFuncOrNil&<procedure(texture: UInt32; target: TextureTarget; level: Int32; pname: GetTextureParameter; var &params: Int32)>(z_GetTextureLevelParameterivEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetTextureLevelParameterivEXT(texture: UInt32; target: TextureTarget; level: Int32; pname: GetTextureParameter; &params: array of Int32);
    begin
      z_GetTextureLevelParameterivEXT_ovr_0(texture, target, level, pname, &params[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetTextureLevelParameterivEXT(texture: UInt32; target: TextureTarget; level: Int32; pname: GetTextureParameter; var &params: Int32);
    begin
      z_GetTextureLevelParameterivEXT_ovr_0(texture, target, level, pname, &params);
    end;
    public z_GetTextureLevelParameterivEXT_ovr_2 := GetFuncOrNil&<procedure(texture: UInt32; target: TextureTarget; level: Int32; pname: GetTextureParameter; &params: IntPtr)>(z_GetTextureLevelParameterivEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetTextureLevelParameterivEXT(texture: UInt32; target: TextureTarget; level: Int32; pname: GetTextureParameter; &params: IntPtr);
    begin
      z_GetTextureLevelParameterivEXT_ovr_2(texture, target, level, pname, &params);
    end;
    
    public z_TextureImage3DEXT_adr := GetFuncAdr('glTextureImage3DEXT');
    public z_TextureImage3DEXT_ovr_0 := GetFuncOrNil&<procedure(texture: UInt32; target: TextureTarget; level: Int32; internalformat: Int32; width: Int32; height: Int32; depth: Int32; border: Int32; format: PixelFormat; &type: PixelType; pixels: IntPtr)>(z_TextureImage3DEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TextureImage3DEXT(texture: UInt32; target: TextureTarget; level: Int32; internalformat: Int32; width: Int32; height: Int32; depth: Int32; border: Int32; format: PixelFormat; &type: PixelType; pixels: IntPtr);
    begin
      z_TextureImage3DEXT_ovr_0(texture, target, level, internalformat, width, height, depth, border, format, &type, pixels);
    end;
    
    public z_TextureSubImage3DEXT_adr := GetFuncAdr('glTextureSubImage3DEXT');
    public z_TextureSubImage3DEXT_ovr_0 := GetFuncOrNil&<procedure(texture: UInt32; target: TextureTarget; level: Int32; xoffset: Int32; yoffset: Int32; zoffset: Int32; width: Int32; height: Int32; depth: Int32; format: PixelFormat; &type: PixelType; pixels: IntPtr)>(z_TextureSubImage3DEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TextureSubImage3DEXT(texture: UInt32; target: TextureTarget; level: Int32; xoffset: Int32; yoffset: Int32; zoffset: Int32; width: Int32; height: Int32; depth: Int32; format: PixelFormat; &type: PixelType; pixels: IntPtr);
    begin
      z_TextureSubImage3DEXT_ovr_0(texture, target, level, xoffset, yoffset, zoffset, width, height, depth, format, &type, pixels);
    end;
    
    public z_CopyTextureSubImage3DEXT_adr := GetFuncAdr('glCopyTextureSubImage3DEXT');
    public z_CopyTextureSubImage3DEXT_ovr_0 := GetFuncOrNil&<procedure(texture: UInt32; target: TextureTarget; level: Int32; xoffset: Int32; yoffset: Int32; zoffset: Int32; x: Int32; y: Int32; width: Int32; height: Int32)>(z_CopyTextureSubImage3DEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure CopyTextureSubImage3DEXT(texture: UInt32; target: TextureTarget; level: Int32; xoffset: Int32; yoffset: Int32; zoffset: Int32; x: Int32; y: Int32; width: Int32; height: Int32);
    begin
      z_CopyTextureSubImage3DEXT_ovr_0(texture, target, level, xoffset, yoffset, zoffset, x, y, width, height);
    end;
    
    public z_BindMultiTextureEXT_adr := GetFuncAdr('glBindMultiTextureEXT');
    public z_BindMultiTextureEXT_ovr_0 := GetFuncOrNil&<procedure(texunit: TextureUnit; target: TextureTarget; texture: UInt32)>(z_BindMultiTextureEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure BindMultiTextureEXT(texunit: TextureUnit; target: TextureTarget; texture: UInt32);
    begin
      z_BindMultiTextureEXT_ovr_0(texunit, target, texture);
    end;
    
    public z_MultiTexCoordPointerEXT_adr := GetFuncAdr('glMultiTexCoordPointerEXT');
    public z_MultiTexCoordPointerEXT_ovr_0 := GetFuncOrNil&<procedure(texunit: TextureUnit; size: Int32; &type: TexCoordPointerType; stride: Int32; pointer: IntPtr)>(z_MultiTexCoordPointerEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiTexCoordPointerEXT(texunit: TextureUnit; size: Int32; &type: TexCoordPointerType; stride: Int32; pointer: IntPtr);
    begin
      z_MultiTexCoordPointerEXT_ovr_0(texunit, size, &type, stride, pointer);
    end;
    
    public z_MultiTexEnvfEXT_adr := GetFuncAdr('glMultiTexEnvfEXT');
    public z_MultiTexEnvfEXT_ovr_0 := GetFuncOrNil&<procedure(texunit: TextureUnit; target: TextureEnvTarget; pname: TextureEnvParameter; param: single)>(z_MultiTexEnvfEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiTexEnvfEXT(texunit: TextureUnit; target: TextureEnvTarget; pname: TextureEnvParameter; param: single);
    begin
      z_MultiTexEnvfEXT_ovr_0(texunit, target, pname, param);
    end;
    
    public z_MultiTexEnvfvEXT_adr := GetFuncAdr('glMultiTexEnvfvEXT');
    public z_MultiTexEnvfvEXT_ovr_0 := GetFuncOrNil&<procedure(texunit: TextureUnit; target: TextureEnvTarget; pname: TextureEnvParameter; var &params: single)>(z_MultiTexEnvfvEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiTexEnvfvEXT(texunit: TextureUnit; target: TextureEnvTarget; pname: TextureEnvParameter; &params: array of single);
    begin
      z_MultiTexEnvfvEXT_ovr_0(texunit, target, pname, &params[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiTexEnvfvEXT(texunit: TextureUnit; target: TextureEnvTarget; pname: TextureEnvParameter; var &params: single);
    begin
      z_MultiTexEnvfvEXT_ovr_0(texunit, target, pname, &params);
    end;
    public z_MultiTexEnvfvEXT_ovr_2 := GetFuncOrNil&<procedure(texunit: TextureUnit; target: TextureEnvTarget; pname: TextureEnvParameter; &params: IntPtr)>(z_MultiTexEnvfvEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiTexEnvfvEXT(texunit: TextureUnit; target: TextureEnvTarget; pname: TextureEnvParameter; &params: IntPtr);
    begin
      z_MultiTexEnvfvEXT_ovr_2(texunit, target, pname, &params);
    end;
    
    public z_MultiTexEnviEXT_adr := GetFuncAdr('glMultiTexEnviEXT');
    public z_MultiTexEnviEXT_ovr_0 := GetFuncOrNil&<procedure(texunit: TextureUnit; target: TextureEnvTarget; pname: TextureEnvParameter; param: Int32)>(z_MultiTexEnviEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiTexEnviEXT(texunit: TextureUnit; target: TextureEnvTarget; pname: TextureEnvParameter; param: Int32);
    begin
      z_MultiTexEnviEXT_ovr_0(texunit, target, pname, param);
    end;
    
    public z_MultiTexEnvivEXT_adr := GetFuncAdr('glMultiTexEnvivEXT');
    public z_MultiTexEnvivEXT_ovr_0 := GetFuncOrNil&<procedure(texunit: TextureUnit; target: TextureEnvTarget; pname: TextureEnvParameter; var &params: Int32)>(z_MultiTexEnvivEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiTexEnvivEXT(texunit: TextureUnit; target: TextureEnvTarget; pname: TextureEnvParameter; &params: array of Int32);
    begin
      z_MultiTexEnvivEXT_ovr_0(texunit, target, pname, &params[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiTexEnvivEXT(texunit: TextureUnit; target: TextureEnvTarget; pname: TextureEnvParameter; var &params: Int32);
    begin
      z_MultiTexEnvivEXT_ovr_0(texunit, target, pname, &params);
    end;
    public z_MultiTexEnvivEXT_ovr_2 := GetFuncOrNil&<procedure(texunit: TextureUnit; target: TextureEnvTarget; pname: TextureEnvParameter; &params: IntPtr)>(z_MultiTexEnvivEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiTexEnvivEXT(texunit: TextureUnit; target: TextureEnvTarget; pname: TextureEnvParameter; &params: IntPtr);
    begin
      z_MultiTexEnvivEXT_ovr_2(texunit, target, pname, &params);
    end;
    
    public z_MultiTexGendEXT_adr := GetFuncAdr('glMultiTexGendEXT');
    public z_MultiTexGendEXT_ovr_0 := GetFuncOrNil&<procedure(texunit: TextureUnit; coord: TextureCoordName; pname: TextureGenParameter; param: real)>(z_MultiTexGendEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiTexGendEXT(texunit: TextureUnit; coord: TextureCoordName; pname: TextureGenParameter; param: real);
    begin
      z_MultiTexGendEXT_ovr_0(texunit, coord, pname, param);
    end;
    
    public z_MultiTexGendvEXT_adr := GetFuncAdr('glMultiTexGendvEXT');
    public z_MultiTexGendvEXT_ovr_0 := GetFuncOrNil&<procedure(texunit: TextureUnit; coord: TextureCoordName; pname: TextureGenParameter; var &params: real)>(z_MultiTexGendvEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiTexGendvEXT(texunit: TextureUnit; coord: TextureCoordName; pname: TextureGenParameter; &params: array of real);
    begin
      z_MultiTexGendvEXT_ovr_0(texunit, coord, pname, &params[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiTexGendvEXT(texunit: TextureUnit; coord: TextureCoordName; pname: TextureGenParameter; var &params: real);
    begin
      z_MultiTexGendvEXT_ovr_0(texunit, coord, pname, &params);
    end;
    public z_MultiTexGendvEXT_ovr_2 := GetFuncOrNil&<procedure(texunit: TextureUnit; coord: TextureCoordName; pname: TextureGenParameter; &params: IntPtr)>(z_MultiTexGendvEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiTexGendvEXT(texunit: TextureUnit; coord: TextureCoordName; pname: TextureGenParameter; &params: IntPtr);
    begin
      z_MultiTexGendvEXT_ovr_2(texunit, coord, pname, &params);
    end;
    
    public z_MultiTexGenfEXT_adr := GetFuncAdr('glMultiTexGenfEXT');
    public z_MultiTexGenfEXT_ovr_0 := GetFuncOrNil&<procedure(texunit: TextureUnit; coord: TextureCoordName; pname: TextureGenParameter; param: single)>(z_MultiTexGenfEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiTexGenfEXT(texunit: TextureUnit; coord: TextureCoordName; pname: TextureGenParameter; param: single);
    begin
      z_MultiTexGenfEXT_ovr_0(texunit, coord, pname, param);
    end;
    
    public z_MultiTexGenfvEXT_adr := GetFuncAdr('glMultiTexGenfvEXT');
    public z_MultiTexGenfvEXT_ovr_0 := GetFuncOrNil&<procedure(texunit: TextureUnit; coord: TextureCoordName; pname: TextureGenParameter; var &params: single)>(z_MultiTexGenfvEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiTexGenfvEXT(texunit: TextureUnit; coord: TextureCoordName; pname: TextureGenParameter; &params: array of single);
    begin
      z_MultiTexGenfvEXT_ovr_0(texunit, coord, pname, &params[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiTexGenfvEXT(texunit: TextureUnit; coord: TextureCoordName; pname: TextureGenParameter; var &params: single);
    begin
      z_MultiTexGenfvEXT_ovr_0(texunit, coord, pname, &params);
    end;
    public z_MultiTexGenfvEXT_ovr_2 := GetFuncOrNil&<procedure(texunit: TextureUnit; coord: TextureCoordName; pname: TextureGenParameter; &params: IntPtr)>(z_MultiTexGenfvEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiTexGenfvEXT(texunit: TextureUnit; coord: TextureCoordName; pname: TextureGenParameter; &params: IntPtr);
    begin
      z_MultiTexGenfvEXT_ovr_2(texunit, coord, pname, &params);
    end;
    
    public z_MultiTexGeniEXT_adr := GetFuncAdr('glMultiTexGeniEXT');
    public z_MultiTexGeniEXT_ovr_0 := GetFuncOrNil&<procedure(texunit: TextureUnit; coord: TextureCoordName; pname: TextureGenParameter; param: Int32)>(z_MultiTexGeniEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiTexGeniEXT(texunit: TextureUnit; coord: TextureCoordName; pname: TextureGenParameter; param: Int32);
    begin
      z_MultiTexGeniEXT_ovr_0(texunit, coord, pname, param);
    end;
    
    public z_MultiTexGenivEXT_adr := GetFuncAdr('glMultiTexGenivEXT');
    public z_MultiTexGenivEXT_ovr_0 := GetFuncOrNil&<procedure(texunit: TextureUnit; coord: TextureCoordName; pname: TextureGenParameter; var &params: Int32)>(z_MultiTexGenivEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiTexGenivEXT(texunit: TextureUnit; coord: TextureCoordName; pname: TextureGenParameter; &params: array of Int32);
    begin
      z_MultiTexGenivEXT_ovr_0(texunit, coord, pname, &params[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiTexGenivEXT(texunit: TextureUnit; coord: TextureCoordName; pname: TextureGenParameter; var &params: Int32);
    begin
      z_MultiTexGenivEXT_ovr_0(texunit, coord, pname, &params);
    end;
    public z_MultiTexGenivEXT_ovr_2 := GetFuncOrNil&<procedure(texunit: TextureUnit; coord: TextureCoordName; pname: TextureGenParameter; &params: IntPtr)>(z_MultiTexGenivEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiTexGenivEXT(texunit: TextureUnit; coord: TextureCoordName; pname: TextureGenParameter; &params: IntPtr);
    begin
      z_MultiTexGenivEXT_ovr_2(texunit, coord, pname, &params);
    end;
    
    public z_GetMultiTexEnvfvEXT_adr := GetFuncAdr('glGetMultiTexEnvfvEXT');
    public z_GetMultiTexEnvfvEXT_ovr_0 := GetFuncOrNil&<procedure(texunit: TextureUnit; target: TextureEnvTarget; pname: TextureEnvParameter; var &params: single)>(z_GetMultiTexEnvfvEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetMultiTexEnvfvEXT(texunit: TextureUnit; target: TextureEnvTarget; pname: TextureEnvParameter; &params: array of single);
    begin
      z_GetMultiTexEnvfvEXT_ovr_0(texunit, target, pname, &params[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetMultiTexEnvfvEXT(texunit: TextureUnit; target: TextureEnvTarget; pname: TextureEnvParameter; var &params: single);
    begin
      z_GetMultiTexEnvfvEXT_ovr_0(texunit, target, pname, &params);
    end;
    public z_GetMultiTexEnvfvEXT_ovr_2 := GetFuncOrNil&<procedure(texunit: TextureUnit; target: TextureEnvTarget; pname: TextureEnvParameter; &params: IntPtr)>(z_GetMultiTexEnvfvEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetMultiTexEnvfvEXT(texunit: TextureUnit; target: TextureEnvTarget; pname: TextureEnvParameter; &params: IntPtr);
    begin
      z_GetMultiTexEnvfvEXT_ovr_2(texunit, target, pname, &params);
    end;
    
    public z_GetMultiTexEnvivEXT_adr := GetFuncAdr('glGetMultiTexEnvivEXT');
    public z_GetMultiTexEnvivEXT_ovr_0 := GetFuncOrNil&<procedure(texunit: TextureUnit; target: TextureEnvTarget; pname: TextureEnvParameter; var &params: Int32)>(z_GetMultiTexEnvivEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetMultiTexEnvivEXT(texunit: TextureUnit; target: TextureEnvTarget; pname: TextureEnvParameter; &params: array of Int32);
    begin
      z_GetMultiTexEnvivEXT_ovr_0(texunit, target, pname, &params[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetMultiTexEnvivEXT(texunit: TextureUnit; target: TextureEnvTarget; pname: TextureEnvParameter; var &params: Int32);
    begin
      z_GetMultiTexEnvivEXT_ovr_0(texunit, target, pname, &params);
    end;
    public z_GetMultiTexEnvivEXT_ovr_2 := GetFuncOrNil&<procedure(texunit: TextureUnit; target: TextureEnvTarget; pname: TextureEnvParameter; &params: IntPtr)>(z_GetMultiTexEnvivEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetMultiTexEnvivEXT(texunit: TextureUnit; target: TextureEnvTarget; pname: TextureEnvParameter; &params: IntPtr);
    begin
      z_GetMultiTexEnvivEXT_ovr_2(texunit, target, pname, &params);
    end;
    
    public z_GetMultiTexGendvEXT_adr := GetFuncAdr('glGetMultiTexGendvEXT');
    public z_GetMultiTexGendvEXT_ovr_0 := GetFuncOrNil&<procedure(texunit: TextureUnit; coord: TextureCoordName; pname: TextureGenParameter; var &params: real)>(z_GetMultiTexGendvEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetMultiTexGendvEXT(texunit: TextureUnit; coord: TextureCoordName; pname: TextureGenParameter; &params: array of real);
    begin
      z_GetMultiTexGendvEXT_ovr_0(texunit, coord, pname, &params[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetMultiTexGendvEXT(texunit: TextureUnit; coord: TextureCoordName; pname: TextureGenParameter; var &params: real);
    begin
      z_GetMultiTexGendvEXT_ovr_0(texunit, coord, pname, &params);
    end;
    public z_GetMultiTexGendvEXT_ovr_2 := GetFuncOrNil&<procedure(texunit: TextureUnit; coord: TextureCoordName; pname: TextureGenParameter; &params: IntPtr)>(z_GetMultiTexGendvEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetMultiTexGendvEXT(texunit: TextureUnit; coord: TextureCoordName; pname: TextureGenParameter; &params: IntPtr);
    begin
      z_GetMultiTexGendvEXT_ovr_2(texunit, coord, pname, &params);
    end;
    
    public z_GetMultiTexGenfvEXT_adr := GetFuncAdr('glGetMultiTexGenfvEXT');
    public z_GetMultiTexGenfvEXT_ovr_0 := GetFuncOrNil&<procedure(texunit: TextureUnit; coord: TextureCoordName; pname: TextureGenParameter; var &params: single)>(z_GetMultiTexGenfvEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetMultiTexGenfvEXT(texunit: TextureUnit; coord: TextureCoordName; pname: TextureGenParameter; &params: array of single);
    begin
      z_GetMultiTexGenfvEXT_ovr_0(texunit, coord, pname, &params[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetMultiTexGenfvEXT(texunit: TextureUnit; coord: TextureCoordName; pname: TextureGenParameter; var &params: single);
    begin
      z_GetMultiTexGenfvEXT_ovr_0(texunit, coord, pname, &params);
    end;
    public z_GetMultiTexGenfvEXT_ovr_2 := GetFuncOrNil&<procedure(texunit: TextureUnit; coord: TextureCoordName; pname: TextureGenParameter; &params: IntPtr)>(z_GetMultiTexGenfvEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetMultiTexGenfvEXT(texunit: TextureUnit; coord: TextureCoordName; pname: TextureGenParameter; &params: IntPtr);
    begin
      z_GetMultiTexGenfvEXT_ovr_2(texunit, coord, pname, &params);
    end;
    
    public z_GetMultiTexGenivEXT_adr := GetFuncAdr('glGetMultiTexGenivEXT');
    public z_GetMultiTexGenivEXT_ovr_0 := GetFuncOrNil&<procedure(texunit: TextureUnit; coord: TextureCoordName; pname: TextureGenParameter; var &params: Int32)>(z_GetMultiTexGenivEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetMultiTexGenivEXT(texunit: TextureUnit; coord: TextureCoordName; pname: TextureGenParameter; &params: array of Int32);
    begin
      z_GetMultiTexGenivEXT_ovr_0(texunit, coord, pname, &params[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetMultiTexGenivEXT(texunit: TextureUnit; coord: TextureCoordName; pname: TextureGenParameter; var &params: Int32);
    begin
      z_GetMultiTexGenivEXT_ovr_0(texunit, coord, pname, &params);
    end;
    public z_GetMultiTexGenivEXT_ovr_2 := GetFuncOrNil&<procedure(texunit: TextureUnit; coord: TextureCoordName; pname: TextureGenParameter; &params: IntPtr)>(z_GetMultiTexGenivEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetMultiTexGenivEXT(texunit: TextureUnit; coord: TextureCoordName; pname: TextureGenParameter; &params: IntPtr);
    begin
      z_GetMultiTexGenivEXT_ovr_2(texunit, coord, pname, &params);
    end;
    
    public z_MultiTexParameteriEXT_adr := GetFuncAdr('glMultiTexParameteriEXT');
    public z_MultiTexParameteriEXT_ovr_0 := GetFuncOrNil&<procedure(texunit: TextureUnit; target: TextureTarget; pname: TextureParameterName; param: Int32)>(z_MultiTexParameteriEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiTexParameteriEXT(texunit: TextureUnit; target: TextureTarget; pname: TextureParameterName; param: Int32);
    begin
      z_MultiTexParameteriEXT_ovr_0(texunit, target, pname, param);
    end;
    
    public z_MultiTexParameterivEXT_adr := GetFuncAdr('glMultiTexParameterivEXT');
    public z_MultiTexParameterivEXT_ovr_0 := GetFuncOrNil&<procedure(texunit: TextureUnit; target: TextureTarget; pname: TextureParameterName; var &params: Int32)>(z_MultiTexParameterivEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiTexParameterivEXT(texunit: TextureUnit; target: TextureTarget; pname: TextureParameterName; &params: array of Int32);
    begin
      z_MultiTexParameterivEXT_ovr_0(texunit, target, pname, &params[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiTexParameterivEXT(texunit: TextureUnit; target: TextureTarget; pname: TextureParameterName; var &params: Int32);
    begin
      z_MultiTexParameterivEXT_ovr_0(texunit, target, pname, &params);
    end;
    public z_MultiTexParameterivEXT_ovr_2 := GetFuncOrNil&<procedure(texunit: TextureUnit; target: TextureTarget; pname: TextureParameterName; &params: IntPtr)>(z_MultiTexParameterivEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiTexParameterivEXT(texunit: TextureUnit; target: TextureTarget; pname: TextureParameterName; &params: IntPtr);
    begin
      z_MultiTexParameterivEXT_ovr_2(texunit, target, pname, &params);
    end;
    
    public z_MultiTexParameterfEXT_adr := GetFuncAdr('glMultiTexParameterfEXT');
    public z_MultiTexParameterfEXT_ovr_0 := GetFuncOrNil&<procedure(texunit: TextureUnit; target: TextureTarget; pname: TextureParameterName; param: single)>(z_MultiTexParameterfEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiTexParameterfEXT(texunit: TextureUnit; target: TextureTarget; pname: TextureParameterName; param: single);
    begin
      z_MultiTexParameterfEXT_ovr_0(texunit, target, pname, param);
    end;
    
    public z_MultiTexParameterfvEXT_adr := GetFuncAdr('glMultiTexParameterfvEXT');
    public z_MultiTexParameterfvEXT_ovr_0 := GetFuncOrNil&<procedure(texunit: TextureUnit; target: TextureTarget; pname: TextureParameterName; var &params: single)>(z_MultiTexParameterfvEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiTexParameterfvEXT(texunit: TextureUnit; target: TextureTarget; pname: TextureParameterName; &params: array of single);
    begin
      z_MultiTexParameterfvEXT_ovr_0(texunit, target, pname, &params[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiTexParameterfvEXT(texunit: TextureUnit; target: TextureTarget; pname: TextureParameterName; var &params: single);
    begin
      z_MultiTexParameterfvEXT_ovr_0(texunit, target, pname, &params);
    end;
    public z_MultiTexParameterfvEXT_ovr_2 := GetFuncOrNil&<procedure(texunit: TextureUnit; target: TextureTarget; pname: TextureParameterName; &params: IntPtr)>(z_MultiTexParameterfvEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiTexParameterfvEXT(texunit: TextureUnit; target: TextureTarget; pname: TextureParameterName; &params: IntPtr);
    begin
      z_MultiTexParameterfvEXT_ovr_2(texunit, target, pname, &params);
    end;
    
    public z_MultiTexImage1DEXT_adr := GetFuncAdr('glMultiTexImage1DEXT');
    public z_MultiTexImage1DEXT_ovr_0 := GetFuncOrNil&<procedure(texunit: TextureUnit; target: TextureTarget; level: Int32; internalformat: Int32; width: Int32; border: Int32; format: PixelFormat; &type: PixelType; pixels: IntPtr)>(z_MultiTexImage1DEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiTexImage1DEXT(texunit: TextureUnit; target: TextureTarget; level: Int32; internalformat: Int32; width: Int32; border: Int32; format: PixelFormat; &type: PixelType; pixels: IntPtr);
    begin
      z_MultiTexImage1DEXT_ovr_0(texunit, target, level, internalformat, width, border, format, &type, pixels);
    end;
    
    public z_MultiTexImage2DEXT_adr := GetFuncAdr('glMultiTexImage2DEXT');
    public z_MultiTexImage2DEXT_ovr_0 := GetFuncOrNil&<procedure(texunit: TextureUnit; target: TextureTarget; level: Int32; internalformat: Int32; width: Int32; height: Int32; border: Int32; format: PixelFormat; &type: PixelType; pixels: IntPtr)>(z_MultiTexImage2DEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiTexImage2DEXT(texunit: TextureUnit; target: TextureTarget; level: Int32; internalformat: Int32; width: Int32; height: Int32; border: Int32; format: PixelFormat; &type: PixelType; pixels: IntPtr);
    begin
      z_MultiTexImage2DEXT_ovr_0(texunit, target, level, internalformat, width, height, border, format, &type, pixels);
    end;
    
    public z_MultiTexSubImage1DEXT_adr := GetFuncAdr('glMultiTexSubImage1DEXT');
    public z_MultiTexSubImage1DEXT_ovr_0 := GetFuncOrNil&<procedure(texunit: TextureUnit; target: TextureTarget; level: Int32; xoffset: Int32; width: Int32; format: PixelFormat; &type: PixelType; pixels: IntPtr)>(z_MultiTexSubImage1DEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiTexSubImage1DEXT(texunit: TextureUnit; target: TextureTarget; level: Int32; xoffset: Int32; width: Int32; format: PixelFormat; &type: PixelType; pixels: IntPtr);
    begin
      z_MultiTexSubImage1DEXT_ovr_0(texunit, target, level, xoffset, width, format, &type, pixels);
    end;
    
    public z_MultiTexSubImage2DEXT_adr := GetFuncAdr('glMultiTexSubImage2DEXT');
    public z_MultiTexSubImage2DEXT_ovr_0 := GetFuncOrNil&<procedure(texunit: TextureUnit; target: TextureTarget; level: Int32; xoffset: Int32; yoffset: Int32; width: Int32; height: Int32; format: PixelFormat; &type: PixelType; pixels: IntPtr)>(z_MultiTexSubImage2DEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiTexSubImage2DEXT(texunit: TextureUnit; target: TextureTarget; level: Int32; xoffset: Int32; yoffset: Int32; width: Int32; height: Int32; format: PixelFormat; &type: PixelType; pixels: IntPtr);
    begin
      z_MultiTexSubImage2DEXT_ovr_0(texunit, target, level, xoffset, yoffset, width, height, format, &type, pixels);
    end;
    
    public z_CopyMultiTexImage1DEXT_adr := GetFuncAdr('glCopyMultiTexImage1DEXT');
    public z_CopyMultiTexImage1DEXT_ovr_0 := GetFuncOrNil&<procedure(texunit: TextureUnit; target: TextureTarget; level: Int32; _internalformat: InternalFormat; x: Int32; y: Int32; width: Int32; border: Int32)>(z_CopyMultiTexImage1DEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure CopyMultiTexImage1DEXT(texunit: TextureUnit; target: TextureTarget; level: Int32; _internalformat: InternalFormat; x: Int32; y: Int32; width: Int32; border: Int32);
    begin
      z_CopyMultiTexImage1DEXT_ovr_0(texunit, target, level, _internalformat, x, y, width, border);
    end;
    
    public z_CopyMultiTexImage2DEXT_adr := GetFuncAdr('glCopyMultiTexImage2DEXT');
    public z_CopyMultiTexImage2DEXT_ovr_0 := GetFuncOrNil&<procedure(texunit: TextureUnit; target: TextureTarget; level: Int32; _internalformat: InternalFormat; x: Int32; y: Int32; width: Int32; height: Int32; border: Int32)>(z_CopyMultiTexImage2DEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure CopyMultiTexImage2DEXT(texunit: TextureUnit; target: TextureTarget; level: Int32; _internalformat: InternalFormat; x: Int32; y: Int32; width: Int32; height: Int32; border: Int32);
    begin
      z_CopyMultiTexImage2DEXT_ovr_0(texunit, target, level, _internalformat, x, y, width, height, border);
    end;
    
    public z_CopyMultiTexSubImage1DEXT_adr := GetFuncAdr('glCopyMultiTexSubImage1DEXT');
    public z_CopyMultiTexSubImage1DEXT_ovr_0 := GetFuncOrNil&<procedure(texunit: TextureUnit; target: TextureTarget; level: Int32; xoffset: Int32; x: Int32; y: Int32; width: Int32)>(z_CopyMultiTexSubImage1DEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure CopyMultiTexSubImage1DEXT(texunit: TextureUnit; target: TextureTarget; level: Int32; xoffset: Int32; x: Int32; y: Int32; width: Int32);
    begin
      z_CopyMultiTexSubImage1DEXT_ovr_0(texunit, target, level, xoffset, x, y, width);
    end;
    
    public z_CopyMultiTexSubImage2DEXT_adr := GetFuncAdr('glCopyMultiTexSubImage2DEXT');
    public z_CopyMultiTexSubImage2DEXT_ovr_0 := GetFuncOrNil&<procedure(texunit: TextureUnit; target: TextureTarget; level: Int32; xoffset: Int32; yoffset: Int32; x: Int32; y: Int32; width: Int32; height: Int32)>(z_CopyMultiTexSubImage2DEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure CopyMultiTexSubImage2DEXT(texunit: TextureUnit; target: TextureTarget; level: Int32; xoffset: Int32; yoffset: Int32; x: Int32; y: Int32; width: Int32; height: Int32);
    begin
      z_CopyMultiTexSubImage2DEXT_ovr_0(texunit, target, level, xoffset, yoffset, x, y, width, height);
    end;
    
    public z_GetMultiTexImageEXT_adr := GetFuncAdr('glGetMultiTexImageEXT');
    public z_GetMultiTexImageEXT_ovr_0 := GetFuncOrNil&<procedure(texunit: TextureUnit; target: TextureTarget; level: Int32; format: PixelFormat; &type: PixelType; pixels: IntPtr)>(z_GetMultiTexImageEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetMultiTexImageEXT(texunit: TextureUnit; target: TextureTarget; level: Int32; format: PixelFormat; &type: PixelType; pixels: IntPtr);
    begin
      z_GetMultiTexImageEXT_ovr_0(texunit, target, level, format, &type, pixels);
    end;
    
    public z_GetMultiTexParameterfvEXT_adr := GetFuncAdr('glGetMultiTexParameterfvEXT');
    public z_GetMultiTexParameterfvEXT_ovr_0 := GetFuncOrNil&<procedure(texunit: TextureUnit; target: TextureTarget; pname: GetTextureParameter; var &params: single)>(z_GetMultiTexParameterfvEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetMultiTexParameterfvEXT(texunit: TextureUnit; target: TextureTarget; pname: GetTextureParameter; &params: array of single);
    begin
      z_GetMultiTexParameterfvEXT_ovr_0(texunit, target, pname, &params[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetMultiTexParameterfvEXT(texunit: TextureUnit; target: TextureTarget; pname: GetTextureParameter; var &params: single);
    begin
      z_GetMultiTexParameterfvEXT_ovr_0(texunit, target, pname, &params);
    end;
    public z_GetMultiTexParameterfvEXT_ovr_2 := GetFuncOrNil&<procedure(texunit: TextureUnit; target: TextureTarget; pname: GetTextureParameter; &params: IntPtr)>(z_GetMultiTexParameterfvEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetMultiTexParameterfvEXT(texunit: TextureUnit; target: TextureTarget; pname: GetTextureParameter; &params: IntPtr);
    begin
      z_GetMultiTexParameterfvEXT_ovr_2(texunit, target, pname, &params);
    end;
    
    public z_GetMultiTexParameterivEXT_adr := GetFuncAdr('glGetMultiTexParameterivEXT');
    public z_GetMultiTexParameterivEXT_ovr_0 := GetFuncOrNil&<procedure(texunit: TextureUnit; target: TextureTarget; pname: GetTextureParameter; var &params: Int32)>(z_GetMultiTexParameterivEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetMultiTexParameterivEXT(texunit: TextureUnit; target: TextureTarget; pname: GetTextureParameter; &params: array of Int32);
    begin
      z_GetMultiTexParameterivEXT_ovr_0(texunit, target, pname, &params[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetMultiTexParameterivEXT(texunit: TextureUnit; target: TextureTarget; pname: GetTextureParameter; var &params: Int32);
    begin
      z_GetMultiTexParameterivEXT_ovr_0(texunit, target, pname, &params);
    end;
    public z_GetMultiTexParameterivEXT_ovr_2 := GetFuncOrNil&<procedure(texunit: TextureUnit; target: TextureTarget; pname: GetTextureParameter; &params: IntPtr)>(z_GetMultiTexParameterivEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetMultiTexParameterivEXT(texunit: TextureUnit; target: TextureTarget; pname: GetTextureParameter; &params: IntPtr);
    begin
      z_GetMultiTexParameterivEXT_ovr_2(texunit, target, pname, &params);
    end;
    
    public z_GetMultiTexLevelParameterfvEXT_adr := GetFuncAdr('glGetMultiTexLevelParameterfvEXT');
    public z_GetMultiTexLevelParameterfvEXT_ovr_0 := GetFuncOrNil&<procedure(texunit: TextureUnit; target: TextureTarget; level: Int32; pname: GetTextureParameter; var &params: single)>(z_GetMultiTexLevelParameterfvEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetMultiTexLevelParameterfvEXT(texunit: TextureUnit; target: TextureTarget; level: Int32; pname: GetTextureParameter; &params: array of single);
    begin
      z_GetMultiTexLevelParameterfvEXT_ovr_0(texunit, target, level, pname, &params[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetMultiTexLevelParameterfvEXT(texunit: TextureUnit; target: TextureTarget; level: Int32; pname: GetTextureParameter; var &params: single);
    begin
      z_GetMultiTexLevelParameterfvEXT_ovr_0(texunit, target, level, pname, &params);
    end;
    public z_GetMultiTexLevelParameterfvEXT_ovr_2 := GetFuncOrNil&<procedure(texunit: TextureUnit; target: TextureTarget; level: Int32; pname: GetTextureParameter; &params: IntPtr)>(z_GetMultiTexLevelParameterfvEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetMultiTexLevelParameterfvEXT(texunit: TextureUnit; target: TextureTarget; level: Int32; pname: GetTextureParameter; &params: IntPtr);
    begin
      z_GetMultiTexLevelParameterfvEXT_ovr_2(texunit, target, level, pname, &params);
    end;
    
    public z_GetMultiTexLevelParameterivEXT_adr := GetFuncAdr('glGetMultiTexLevelParameterivEXT');
    public z_GetMultiTexLevelParameterivEXT_ovr_0 := GetFuncOrNil&<procedure(texunit: TextureUnit; target: TextureTarget; level: Int32; pname: GetTextureParameter; var &params: Int32)>(z_GetMultiTexLevelParameterivEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetMultiTexLevelParameterivEXT(texunit: TextureUnit; target: TextureTarget; level: Int32; pname: GetTextureParameter; &params: array of Int32);
    begin
      z_GetMultiTexLevelParameterivEXT_ovr_0(texunit, target, level, pname, &params[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetMultiTexLevelParameterivEXT(texunit: TextureUnit; target: TextureTarget; level: Int32; pname: GetTextureParameter; var &params: Int32);
    begin
      z_GetMultiTexLevelParameterivEXT_ovr_0(texunit, target, level, pname, &params);
    end;
    public z_GetMultiTexLevelParameterivEXT_ovr_2 := GetFuncOrNil&<procedure(texunit: TextureUnit; target: TextureTarget; level: Int32; pname: GetTextureParameter; &params: IntPtr)>(z_GetMultiTexLevelParameterivEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetMultiTexLevelParameterivEXT(texunit: TextureUnit; target: TextureTarget; level: Int32; pname: GetTextureParameter; &params: IntPtr);
    begin
      z_GetMultiTexLevelParameterivEXT_ovr_2(texunit, target, level, pname, &params);
    end;
    
    public z_MultiTexImage3DEXT_adr := GetFuncAdr('glMultiTexImage3DEXT');
    public z_MultiTexImage3DEXT_ovr_0 := GetFuncOrNil&<procedure(texunit: TextureUnit; target: TextureTarget; level: Int32; internalformat: Int32; width: Int32; height: Int32; depth: Int32; border: Int32; format: PixelFormat; &type: PixelType; pixels: IntPtr)>(z_MultiTexImage3DEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiTexImage3DEXT(texunit: TextureUnit; target: TextureTarget; level: Int32; internalformat: Int32; width: Int32; height: Int32; depth: Int32; border: Int32; format: PixelFormat; &type: PixelType; pixels: IntPtr);
    begin
      z_MultiTexImage3DEXT_ovr_0(texunit, target, level, internalformat, width, height, depth, border, format, &type, pixels);
    end;
    
    public z_MultiTexSubImage3DEXT_adr := GetFuncAdr('glMultiTexSubImage3DEXT');
    public z_MultiTexSubImage3DEXT_ovr_0 := GetFuncOrNil&<procedure(texunit: TextureUnit; target: TextureTarget; level: Int32; xoffset: Int32; yoffset: Int32; zoffset: Int32; width: Int32; height: Int32; depth: Int32; format: PixelFormat; &type: PixelType; pixels: IntPtr)>(z_MultiTexSubImage3DEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiTexSubImage3DEXT(texunit: TextureUnit; target: TextureTarget; level: Int32; xoffset: Int32; yoffset: Int32; zoffset: Int32; width: Int32; height: Int32; depth: Int32; format: PixelFormat; &type: PixelType; pixels: IntPtr);
    begin
      z_MultiTexSubImage3DEXT_ovr_0(texunit, target, level, xoffset, yoffset, zoffset, width, height, depth, format, &type, pixels);
    end;
    
    public z_CopyMultiTexSubImage3DEXT_adr := GetFuncAdr('glCopyMultiTexSubImage3DEXT');
    public z_CopyMultiTexSubImage3DEXT_ovr_0 := GetFuncOrNil&<procedure(texunit: TextureUnit; target: TextureTarget; level: Int32; xoffset: Int32; yoffset: Int32; zoffset: Int32; x: Int32; y: Int32; width: Int32; height: Int32)>(z_CopyMultiTexSubImage3DEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure CopyMultiTexSubImage3DEXT(texunit: TextureUnit; target: TextureTarget; level: Int32; xoffset: Int32; yoffset: Int32; zoffset: Int32; x: Int32; y: Int32; width: Int32; height: Int32);
    begin
      z_CopyMultiTexSubImage3DEXT_ovr_0(texunit, target, level, xoffset, yoffset, zoffset, x, y, width, height);
    end;
    
    public z_EnableClientStateIndexedEXT_adr := GetFuncAdr('glEnableClientStateIndexedEXT');
    public z_EnableClientStateIndexedEXT_ovr_0 := GetFuncOrNil&<procedure(&array: EnableCap; index: UInt32)>(z_EnableClientStateIndexedEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure EnableClientStateIndexedEXT(&array: EnableCap; index: UInt32);
    begin
      z_EnableClientStateIndexedEXT_ovr_0(&array, index);
    end;
    
    public z_DisableClientStateIndexedEXT_adr := GetFuncAdr('glDisableClientStateIndexedEXT');
    public z_DisableClientStateIndexedEXT_ovr_0 := GetFuncOrNil&<procedure(&array: EnableCap; index: UInt32)>(z_DisableClientStateIndexedEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure DisableClientStateIndexedEXT(&array: EnableCap; index: UInt32);
    begin
      z_DisableClientStateIndexedEXT_ovr_0(&array, index);
    end;
    
    public z_GetFloatIndexedvEXT_adr := GetFuncAdr('glGetFloatIndexedvEXT');
    public z_GetFloatIndexedvEXT_ovr_0 := GetFuncOrNil&<procedure(target: DummyEnum; index: UInt32; var data: single)>(z_GetFloatIndexedvEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetFloatIndexedvEXT(target: DummyEnum; index: UInt32; data: array of single);
    begin
      z_GetFloatIndexedvEXT_ovr_0(target, index, data[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetFloatIndexedvEXT(target: DummyEnum; index: UInt32; var data: single);
    begin
      z_GetFloatIndexedvEXT_ovr_0(target, index, data);
    end;
    public z_GetFloatIndexedvEXT_ovr_2 := GetFuncOrNil&<procedure(target: DummyEnum; index: UInt32; data: IntPtr)>(z_GetFloatIndexedvEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetFloatIndexedvEXT(target: DummyEnum; index: UInt32; data: IntPtr);
    begin
      z_GetFloatIndexedvEXT_ovr_2(target, index, data);
    end;
    
    public z_GetDoubleIndexedvEXT_adr := GetFuncAdr('glGetDoubleIndexedvEXT');
    public z_GetDoubleIndexedvEXT_ovr_0 := GetFuncOrNil&<procedure(target: DummyEnum; index: UInt32; var data: real)>(z_GetDoubleIndexedvEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetDoubleIndexedvEXT(target: DummyEnum; index: UInt32; data: array of real);
    begin
      z_GetDoubleIndexedvEXT_ovr_0(target, index, data[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetDoubleIndexedvEXT(target: DummyEnum; index: UInt32; var data: real);
    begin
      z_GetDoubleIndexedvEXT_ovr_0(target, index, data);
    end;
    public z_GetDoubleIndexedvEXT_ovr_2 := GetFuncOrNil&<procedure(target: DummyEnum; index: UInt32; data: IntPtr)>(z_GetDoubleIndexedvEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetDoubleIndexedvEXT(target: DummyEnum; index: UInt32; data: IntPtr);
    begin
      z_GetDoubleIndexedvEXT_ovr_2(target, index, data);
    end;
    
    public z_GetPointerIndexedvEXT_adr := GetFuncAdr('glGetPointerIndexedvEXT');
    public z_GetPointerIndexedvEXT_ovr_0 := GetFuncOrNil&<procedure(target: DummyEnum; index: UInt32; var data: IntPtr)>(z_GetPointerIndexedvEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetPointerIndexedvEXT(target: DummyEnum; index: UInt32; data: array of IntPtr);
    begin
      z_GetPointerIndexedvEXT_ovr_0(target, index, data[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetPointerIndexedvEXT(target: DummyEnum; index: UInt32; var data: IntPtr);
    begin
      z_GetPointerIndexedvEXT_ovr_0(target, index, data);
    end;
    public z_GetPointerIndexedvEXT_ovr_2 := GetFuncOrNil&<procedure(target: DummyEnum; index: UInt32; data: pointer)>(z_GetPointerIndexedvEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetPointerIndexedvEXT(target: DummyEnum; index: UInt32; data: pointer);
    begin
      z_GetPointerIndexedvEXT_ovr_2(target, index, data);
    end;
    
    public z_EnableIndexedEXT_adr := GetFuncAdr('glEnableIndexedEXT');
    public z_EnableIndexedEXT_ovr_0 := GetFuncOrNil&<procedure(target: EnableCap; index: UInt32)>(z_EnableIndexedEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure EnableIndexedEXT(target: EnableCap; index: UInt32);
    begin
      z_EnableIndexedEXT_ovr_0(target, index);
    end;
    
    public z_DisableIndexedEXT_adr := GetFuncAdr('glDisableIndexedEXT');
    public z_DisableIndexedEXT_ovr_0 := GetFuncOrNil&<procedure(target: EnableCap; index: UInt32)>(z_DisableIndexedEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure DisableIndexedEXT(target: EnableCap; index: UInt32);
    begin
      z_DisableIndexedEXT_ovr_0(target, index);
    end;
    
    public z_IsEnabledIndexedEXT_adr := GetFuncAdr('glIsEnabledIndexedEXT');
    public z_IsEnabledIndexedEXT_ovr_0 := GetFuncOrNil&<function(target: EnableCap; index: UInt32): boolean>(z_IsEnabledIndexedEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function IsEnabledIndexedEXT(target: EnableCap; index: UInt32): boolean;
    begin
      Result := z_IsEnabledIndexedEXT_ovr_0(target, index);
    end;
    
    public z_GetIntegerIndexedvEXT_adr := GetFuncAdr('glGetIntegerIndexedvEXT');
    public z_GetIntegerIndexedvEXT_ovr_0 := GetFuncOrNil&<procedure(target: DummyEnum; index: UInt32; var data: Int32)>(z_GetIntegerIndexedvEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetIntegerIndexedvEXT(target: DummyEnum; index: UInt32; data: array of Int32);
    begin
      z_GetIntegerIndexedvEXT_ovr_0(target, index, data[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetIntegerIndexedvEXT(target: DummyEnum; index: UInt32; var data: Int32);
    begin
      z_GetIntegerIndexedvEXT_ovr_0(target, index, data);
    end;
    public z_GetIntegerIndexedvEXT_ovr_2 := GetFuncOrNil&<procedure(target: DummyEnum; index: UInt32; data: IntPtr)>(z_GetIntegerIndexedvEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetIntegerIndexedvEXT(target: DummyEnum; index: UInt32; data: IntPtr);
    begin
      z_GetIntegerIndexedvEXT_ovr_2(target, index, data);
    end;
    
    public z_GetBooleanIndexedvEXT_adr := GetFuncAdr('glGetBooleanIndexedvEXT');
    public z_GetBooleanIndexedvEXT_ovr_0 := GetFuncOrNil&<procedure(target: BufferTargetARB; index: UInt32; var data: boolean)>(z_GetBooleanIndexedvEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetBooleanIndexedvEXT(target: BufferTargetARB; index: UInt32; data: array of boolean);
    begin
      z_GetBooleanIndexedvEXT_ovr_0(target, index, data[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetBooleanIndexedvEXT(target: BufferTargetARB; index: UInt32; var data: boolean);
    begin
      z_GetBooleanIndexedvEXT_ovr_0(target, index, data);
    end;
    public z_GetBooleanIndexedvEXT_ovr_2 := GetFuncOrNil&<procedure(target: BufferTargetARB; index: UInt32; data: IntPtr)>(z_GetBooleanIndexedvEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetBooleanIndexedvEXT(target: BufferTargetARB; index: UInt32; data: IntPtr);
    begin
      z_GetBooleanIndexedvEXT_ovr_2(target, index, data);
    end;
    
    public z_CompressedTextureImage3DEXT_adr := GetFuncAdr('glCompressedTextureImage3DEXT');
    public z_CompressedTextureImage3DEXT_ovr_0 := GetFuncOrNil&<procedure(texture: UInt32; target: TextureTarget; level: Int32; _internalformat: InternalFormat; width: Int32; height: Int32; depth: Int32; border: Int32; imageSize: Int32; bits: IntPtr)>(z_CompressedTextureImage3DEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure CompressedTextureImage3DEXT(texture: UInt32; target: TextureTarget; level: Int32; _internalformat: InternalFormat; width: Int32; height: Int32; depth: Int32; border: Int32; imageSize: Int32; bits: IntPtr);
    begin
      z_CompressedTextureImage3DEXT_ovr_0(texture, target, level, _internalformat, width, height, depth, border, imageSize, bits);
    end;
    
    public z_CompressedTextureImage2DEXT_adr := GetFuncAdr('glCompressedTextureImage2DEXT');
    public z_CompressedTextureImage2DEXT_ovr_0 := GetFuncOrNil&<procedure(texture: UInt32; target: TextureTarget; level: Int32; _internalformat: InternalFormat; width: Int32; height: Int32; border: Int32; imageSize: Int32; bits: IntPtr)>(z_CompressedTextureImage2DEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure CompressedTextureImage2DEXT(texture: UInt32; target: TextureTarget; level: Int32; _internalformat: InternalFormat; width: Int32; height: Int32; border: Int32; imageSize: Int32; bits: IntPtr);
    begin
      z_CompressedTextureImage2DEXT_ovr_0(texture, target, level, _internalformat, width, height, border, imageSize, bits);
    end;
    
    public z_CompressedTextureImage1DEXT_adr := GetFuncAdr('glCompressedTextureImage1DEXT');
    public z_CompressedTextureImage1DEXT_ovr_0 := GetFuncOrNil&<procedure(texture: UInt32; target: TextureTarget; level: Int32; _internalformat: InternalFormat; width: Int32; border: Int32; imageSize: Int32; bits: IntPtr)>(z_CompressedTextureImage1DEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure CompressedTextureImage1DEXT(texture: UInt32; target: TextureTarget; level: Int32; _internalformat: InternalFormat; width: Int32; border: Int32; imageSize: Int32; bits: IntPtr);
    begin
      z_CompressedTextureImage1DEXT_ovr_0(texture, target, level, _internalformat, width, border, imageSize, bits);
    end;
    
    public z_CompressedTextureSubImage3DEXT_adr := GetFuncAdr('glCompressedTextureSubImage3DEXT');
    public z_CompressedTextureSubImage3DEXT_ovr_0 := GetFuncOrNil&<procedure(texture: UInt32; target: TextureTarget; level: Int32; xoffset: Int32; yoffset: Int32; zoffset: Int32; width: Int32; height: Int32; depth: Int32; format: PixelFormat; imageSize: Int32; bits: IntPtr)>(z_CompressedTextureSubImage3DEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure CompressedTextureSubImage3DEXT(texture: UInt32; target: TextureTarget; level: Int32; xoffset: Int32; yoffset: Int32; zoffset: Int32; width: Int32; height: Int32; depth: Int32; format: PixelFormat; imageSize: Int32; bits: IntPtr);
    begin
      z_CompressedTextureSubImage3DEXT_ovr_0(texture, target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, bits);
    end;
    
    public z_CompressedTextureSubImage2DEXT_adr := GetFuncAdr('glCompressedTextureSubImage2DEXT');
    public z_CompressedTextureSubImage2DEXT_ovr_0 := GetFuncOrNil&<procedure(texture: UInt32; target: TextureTarget; level: Int32; xoffset: Int32; yoffset: Int32; width: Int32; height: Int32; format: PixelFormat; imageSize: Int32; bits: IntPtr)>(z_CompressedTextureSubImage2DEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure CompressedTextureSubImage2DEXT(texture: UInt32; target: TextureTarget; level: Int32; xoffset: Int32; yoffset: Int32; width: Int32; height: Int32; format: PixelFormat; imageSize: Int32; bits: IntPtr);
    begin
      z_CompressedTextureSubImage2DEXT_ovr_0(texture, target, level, xoffset, yoffset, width, height, format, imageSize, bits);
    end;
    
    public z_CompressedTextureSubImage1DEXT_adr := GetFuncAdr('glCompressedTextureSubImage1DEXT');
    public z_CompressedTextureSubImage1DEXT_ovr_0 := GetFuncOrNil&<procedure(texture: UInt32; target: TextureTarget; level: Int32; xoffset: Int32; width: Int32; format: PixelFormat; imageSize: Int32; bits: IntPtr)>(z_CompressedTextureSubImage1DEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure CompressedTextureSubImage1DEXT(texture: UInt32; target: TextureTarget; level: Int32; xoffset: Int32; width: Int32; format: PixelFormat; imageSize: Int32; bits: IntPtr);
    begin
      z_CompressedTextureSubImage1DEXT_ovr_0(texture, target, level, xoffset, width, format, imageSize, bits);
    end;
    
    public z_GetCompressedTextureImageEXT_adr := GetFuncAdr('glGetCompressedTextureImageEXT');
    public z_GetCompressedTextureImageEXT_ovr_0 := GetFuncOrNil&<procedure(texture: UInt32; target: TextureTarget; lod: Int32; img: IntPtr)>(z_GetCompressedTextureImageEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetCompressedTextureImageEXT(texture: UInt32; target: TextureTarget; lod: Int32; img: IntPtr);
    begin
      z_GetCompressedTextureImageEXT_ovr_0(texture, target, lod, img);
    end;
    
    public z_CompressedMultiTexImage3DEXT_adr := GetFuncAdr('glCompressedMultiTexImage3DEXT');
    public z_CompressedMultiTexImage3DEXT_ovr_0 := GetFuncOrNil&<procedure(texunit: TextureUnit; target: TextureTarget; level: Int32; _internalformat: InternalFormat; width: Int32; height: Int32; depth: Int32; border: Int32; imageSize: Int32; bits: IntPtr)>(z_CompressedMultiTexImage3DEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure CompressedMultiTexImage3DEXT(texunit: TextureUnit; target: TextureTarget; level: Int32; _internalformat: InternalFormat; width: Int32; height: Int32; depth: Int32; border: Int32; imageSize: Int32; bits: IntPtr);
    begin
      z_CompressedMultiTexImage3DEXT_ovr_0(texunit, target, level, _internalformat, width, height, depth, border, imageSize, bits);
    end;
    
    public z_CompressedMultiTexImage2DEXT_adr := GetFuncAdr('glCompressedMultiTexImage2DEXT');
    public z_CompressedMultiTexImage2DEXT_ovr_0 := GetFuncOrNil&<procedure(texunit: TextureUnit; target: TextureTarget; level: Int32; _internalformat: InternalFormat; width: Int32; height: Int32; border: Int32; imageSize: Int32; bits: IntPtr)>(z_CompressedMultiTexImage2DEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure CompressedMultiTexImage2DEXT(texunit: TextureUnit; target: TextureTarget; level: Int32; _internalformat: InternalFormat; width: Int32; height: Int32; border: Int32; imageSize: Int32; bits: IntPtr);
    begin
      z_CompressedMultiTexImage2DEXT_ovr_0(texunit, target, level, _internalformat, width, height, border, imageSize, bits);
    end;
    
    public z_CompressedMultiTexImage1DEXT_adr := GetFuncAdr('glCompressedMultiTexImage1DEXT');
    public z_CompressedMultiTexImage1DEXT_ovr_0 := GetFuncOrNil&<procedure(texunit: TextureUnit; target: TextureTarget; level: Int32; _internalformat: InternalFormat; width: Int32; border: Int32; imageSize: Int32; bits: IntPtr)>(z_CompressedMultiTexImage1DEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure CompressedMultiTexImage1DEXT(texunit: TextureUnit; target: TextureTarget; level: Int32; _internalformat: InternalFormat; width: Int32; border: Int32; imageSize: Int32; bits: IntPtr);
    begin
      z_CompressedMultiTexImage1DEXT_ovr_0(texunit, target, level, _internalformat, width, border, imageSize, bits);
    end;
    
    public z_CompressedMultiTexSubImage3DEXT_adr := GetFuncAdr('glCompressedMultiTexSubImage3DEXT');
    public z_CompressedMultiTexSubImage3DEXT_ovr_0 := GetFuncOrNil&<procedure(texunit: TextureUnit; target: TextureTarget; level: Int32; xoffset: Int32; yoffset: Int32; zoffset: Int32; width: Int32; height: Int32; depth: Int32; format: PixelFormat; imageSize: Int32; bits: IntPtr)>(z_CompressedMultiTexSubImage3DEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure CompressedMultiTexSubImage3DEXT(texunit: TextureUnit; target: TextureTarget; level: Int32; xoffset: Int32; yoffset: Int32; zoffset: Int32; width: Int32; height: Int32; depth: Int32; format: PixelFormat; imageSize: Int32; bits: IntPtr);
    begin
      z_CompressedMultiTexSubImage3DEXT_ovr_0(texunit, target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, bits);
    end;
    
    public z_CompressedMultiTexSubImage2DEXT_adr := GetFuncAdr('glCompressedMultiTexSubImage2DEXT');
    public z_CompressedMultiTexSubImage2DEXT_ovr_0 := GetFuncOrNil&<procedure(texunit: TextureUnit; target: TextureTarget; level: Int32; xoffset: Int32; yoffset: Int32; width: Int32; height: Int32; format: PixelFormat; imageSize: Int32; bits: IntPtr)>(z_CompressedMultiTexSubImage2DEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure CompressedMultiTexSubImage2DEXT(texunit: TextureUnit; target: TextureTarget; level: Int32; xoffset: Int32; yoffset: Int32; width: Int32; height: Int32; format: PixelFormat; imageSize: Int32; bits: IntPtr);
    begin
      z_CompressedMultiTexSubImage2DEXT_ovr_0(texunit, target, level, xoffset, yoffset, width, height, format, imageSize, bits);
    end;
    
    public z_CompressedMultiTexSubImage1DEXT_adr := GetFuncAdr('glCompressedMultiTexSubImage1DEXT');
    public z_CompressedMultiTexSubImage1DEXT_ovr_0 := GetFuncOrNil&<procedure(texunit: TextureUnit; target: TextureTarget; level: Int32; xoffset: Int32; width: Int32; format: PixelFormat; imageSize: Int32; bits: IntPtr)>(z_CompressedMultiTexSubImage1DEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure CompressedMultiTexSubImage1DEXT(texunit: TextureUnit; target: TextureTarget; level: Int32; xoffset: Int32; width: Int32; format: PixelFormat; imageSize: Int32; bits: IntPtr);
    begin
      z_CompressedMultiTexSubImage1DEXT_ovr_0(texunit, target, level, xoffset, width, format, imageSize, bits);
    end;
    
    public z_GetCompressedMultiTexImageEXT_adr := GetFuncAdr('glGetCompressedMultiTexImageEXT');
    public z_GetCompressedMultiTexImageEXT_ovr_0 := GetFuncOrNil&<procedure(texunit: TextureUnit; target: TextureTarget; lod: Int32; img: IntPtr)>(z_GetCompressedMultiTexImageEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetCompressedMultiTexImageEXT(texunit: TextureUnit; target: TextureTarget; lod: Int32; img: IntPtr);
    begin
      z_GetCompressedMultiTexImageEXT_ovr_0(texunit, target, lod, img);
    end;
    
    public z_MatrixLoadTransposefEXT_adr := GetFuncAdr('glMatrixLoadTransposefEXT');
    public z_MatrixLoadTransposefEXT_ovr_0 := GetFuncOrNil&<procedure(mode: MatrixMode; var m: single)>(z_MatrixLoadTransposefEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MatrixLoadTransposefEXT(mode: MatrixMode; m: array of single);
    begin
      z_MatrixLoadTransposefEXT_ovr_0(mode, m[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MatrixLoadTransposefEXT(mode: MatrixMode; var m: single);
    begin
      z_MatrixLoadTransposefEXT_ovr_0(mode, m);
    end;
    public z_MatrixLoadTransposefEXT_ovr_2 := GetFuncOrNil&<procedure(mode: MatrixMode; m: IntPtr)>(z_MatrixLoadTransposefEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MatrixLoadTransposefEXT(mode: MatrixMode; m: IntPtr);
    begin
      z_MatrixLoadTransposefEXT_ovr_2(mode, m);
    end;
    
    public z_MatrixLoadTransposedEXT_adr := GetFuncAdr('glMatrixLoadTransposedEXT');
    public z_MatrixLoadTransposedEXT_ovr_0 := GetFuncOrNil&<procedure(mode: MatrixMode; var m: real)>(z_MatrixLoadTransposedEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MatrixLoadTransposedEXT(mode: MatrixMode; m: array of real);
    begin
      z_MatrixLoadTransposedEXT_ovr_0(mode, m[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MatrixLoadTransposedEXT(mode: MatrixMode; var m: real);
    begin
      z_MatrixLoadTransposedEXT_ovr_0(mode, m);
    end;
    public z_MatrixLoadTransposedEXT_ovr_2 := GetFuncOrNil&<procedure(mode: MatrixMode; m: IntPtr)>(z_MatrixLoadTransposedEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MatrixLoadTransposedEXT(mode: MatrixMode; m: IntPtr);
    begin
      z_MatrixLoadTransposedEXT_ovr_2(mode, m);
    end;
    
    public z_MatrixMultTransposefEXT_adr := GetFuncAdr('glMatrixMultTransposefEXT');
    public z_MatrixMultTransposefEXT_ovr_0 := GetFuncOrNil&<procedure(mode: MatrixMode; var m: single)>(z_MatrixMultTransposefEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MatrixMultTransposefEXT(mode: MatrixMode; m: array of single);
    begin
      z_MatrixMultTransposefEXT_ovr_0(mode, m[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MatrixMultTransposefEXT(mode: MatrixMode; var m: single);
    begin
      z_MatrixMultTransposefEXT_ovr_0(mode, m);
    end;
    public z_MatrixMultTransposefEXT_ovr_2 := GetFuncOrNil&<procedure(mode: MatrixMode; m: IntPtr)>(z_MatrixMultTransposefEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MatrixMultTransposefEXT(mode: MatrixMode; m: IntPtr);
    begin
      z_MatrixMultTransposefEXT_ovr_2(mode, m);
    end;
    
    public z_MatrixMultTransposedEXT_adr := GetFuncAdr('glMatrixMultTransposedEXT');
    public z_MatrixMultTransposedEXT_ovr_0 := GetFuncOrNil&<procedure(mode: MatrixMode; var m: real)>(z_MatrixMultTransposedEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MatrixMultTransposedEXT(mode: MatrixMode; m: array of real);
    begin
      z_MatrixMultTransposedEXT_ovr_0(mode, m[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MatrixMultTransposedEXT(mode: MatrixMode; var m: real);
    begin
      z_MatrixMultTransposedEXT_ovr_0(mode, m);
    end;
    public z_MatrixMultTransposedEXT_ovr_2 := GetFuncOrNil&<procedure(mode: MatrixMode; m: IntPtr)>(z_MatrixMultTransposedEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MatrixMultTransposedEXT(mode: MatrixMode; m: IntPtr);
    begin
      z_MatrixMultTransposedEXT_ovr_2(mode, m);
    end;
    
    public z_NamedBufferDataEXT_adr := GetFuncAdr('glNamedBufferDataEXT');
    public z_NamedBufferDataEXT_ovr_0 := GetFuncOrNil&<procedure(buffer: UInt32; size: IntPtr; data: IntPtr; usage: VertexBufferObjectUsage)>(z_NamedBufferDataEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure NamedBufferDataEXT(buffer: UInt32; size: IntPtr; data: IntPtr; usage: VertexBufferObjectUsage);
    begin
      z_NamedBufferDataEXT_ovr_0(buffer, size, data, usage);
    end;
    
    public z_NamedBufferSubDataEXT_adr := GetFuncAdr('glNamedBufferSubDataEXT');
    public z_NamedBufferSubDataEXT_ovr_0 := GetFuncOrNil&<procedure(buffer: UInt32; offset: IntPtr; size: IntPtr; data: IntPtr)>(z_NamedBufferSubDataEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure NamedBufferSubDataEXT(buffer: UInt32; offset: IntPtr; size: IntPtr; data: IntPtr);
    begin
      z_NamedBufferSubDataEXT_ovr_0(buffer, offset, size, data);
    end;
    
    public z_MapNamedBufferEXT_adr := GetFuncAdr('glMapNamedBufferEXT');
    public z_MapNamedBufferEXT_ovr_0 := GetFuncOrNil&<function(buffer: UInt32; access: BufferAccessARB): IntPtr>(z_MapNamedBufferEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function MapNamedBufferEXT(buffer: UInt32; access: BufferAccessARB): IntPtr;
    begin
      Result := z_MapNamedBufferEXT_ovr_0(buffer, access);
    end;
    
    public z_UnmapNamedBufferEXT_adr := GetFuncAdr('glUnmapNamedBufferEXT');
    public z_UnmapNamedBufferEXT_ovr_0 := GetFuncOrNil&<function(buffer: UInt32): boolean>(z_UnmapNamedBufferEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function UnmapNamedBufferEXT(buffer: UInt32): boolean;
    begin
      Result := z_UnmapNamedBufferEXT_ovr_0(buffer);
    end;
    
    public z_GetNamedBufferParameterivEXT_adr := GetFuncAdr('glGetNamedBufferParameterivEXT');
    public z_GetNamedBufferParameterivEXT_ovr_0 := GetFuncOrNil&<procedure(buffer: UInt32; pname: VertexBufferObjectParameter; var &params: Int32)>(z_GetNamedBufferParameterivEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetNamedBufferParameterivEXT(buffer: UInt32; pname: VertexBufferObjectParameter; &params: array of Int32);
    begin
      z_GetNamedBufferParameterivEXT_ovr_0(buffer, pname, &params[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetNamedBufferParameterivEXT(buffer: UInt32; pname: VertexBufferObjectParameter; var &params: Int32);
    begin
      z_GetNamedBufferParameterivEXT_ovr_0(buffer, pname, &params);
    end;
    public z_GetNamedBufferParameterivEXT_ovr_2 := GetFuncOrNil&<procedure(buffer: UInt32; pname: VertexBufferObjectParameter; &params: IntPtr)>(z_GetNamedBufferParameterivEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetNamedBufferParameterivEXT(buffer: UInt32; pname: VertexBufferObjectParameter; &params: IntPtr);
    begin
      z_GetNamedBufferParameterivEXT_ovr_2(buffer, pname, &params);
    end;
    
    public z_GetNamedBufferPointervEXT_adr := GetFuncAdr('glGetNamedBufferPointervEXT');
    public z_GetNamedBufferPointervEXT_ovr_0 := GetFuncOrNil&<procedure(buffer: UInt32; pname: VertexBufferObjectParameter; var &params: IntPtr)>(z_GetNamedBufferPointervEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetNamedBufferPointervEXT(buffer: UInt32; pname: VertexBufferObjectParameter; &params: array of IntPtr);
    begin
      z_GetNamedBufferPointervEXT_ovr_0(buffer, pname, &params[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetNamedBufferPointervEXT(buffer: UInt32; pname: VertexBufferObjectParameter; var &params: IntPtr);
    begin
      z_GetNamedBufferPointervEXT_ovr_0(buffer, pname, &params);
    end;
    public z_GetNamedBufferPointervEXT_ovr_2 := GetFuncOrNil&<procedure(buffer: UInt32; pname: VertexBufferObjectParameter; &params: pointer)>(z_GetNamedBufferPointervEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetNamedBufferPointervEXT(buffer: UInt32; pname: VertexBufferObjectParameter; &params: pointer);
    begin
      z_GetNamedBufferPointervEXT_ovr_2(buffer, pname, &params);
    end;
    
    public z_GetNamedBufferSubDataEXT_adr := GetFuncAdr('glGetNamedBufferSubDataEXT');
    public z_GetNamedBufferSubDataEXT_ovr_0 := GetFuncOrNil&<procedure(buffer: UInt32; offset: IntPtr; size: IntPtr; data: IntPtr)>(z_GetNamedBufferSubDataEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetNamedBufferSubDataEXT(buffer: UInt32; offset: IntPtr; size: IntPtr; data: IntPtr);
    begin
      z_GetNamedBufferSubDataEXT_ovr_0(buffer, offset, size, data);
    end;
    
    public z_ProgramUniform1fEXT_adr := GetFuncAdr('glProgramUniform1fEXT');
    public z_ProgramUniform1fEXT_ovr_0 := GetFuncOrNil&<procedure(&program: UInt32; location: Int32; v0: single)>(z_ProgramUniform1fEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniform1fEXT(&program: UInt32; location: Int32; v0: single);
    begin
      z_ProgramUniform1fEXT_ovr_0(&program, location, v0);
    end;
    
    public z_ProgramUniform2fEXT_adr := GetFuncAdr('glProgramUniform2fEXT');
    public z_ProgramUniform2fEXT_ovr_0 := GetFuncOrNil&<procedure(&program: UInt32; location: Int32; v0: single; v1: single)>(z_ProgramUniform2fEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniform2fEXT(&program: UInt32; location: Int32; v0: single; v1: single);
    begin
      z_ProgramUniform2fEXT_ovr_0(&program, location, v0, v1);
    end;
    
    public z_ProgramUniform3fEXT_adr := GetFuncAdr('glProgramUniform3fEXT');
    public z_ProgramUniform3fEXT_ovr_0 := GetFuncOrNil&<procedure(&program: UInt32; location: Int32; v0: single; v1: single; v2: single)>(z_ProgramUniform3fEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniform3fEXT(&program: UInt32; location: Int32; v0: single; v1: single; v2: single);
    begin
      z_ProgramUniform3fEXT_ovr_0(&program, location, v0, v1, v2);
    end;
    
    public z_ProgramUniform4fEXT_adr := GetFuncAdr('glProgramUniform4fEXT');
    public z_ProgramUniform4fEXT_ovr_0 := GetFuncOrNil&<procedure(&program: UInt32; location: Int32; v0: single; v1: single; v2: single; v3: single)>(z_ProgramUniform4fEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniform4fEXT(&program: UInt32; location: Int32; v0: single; v1: single; v2: single; v3: single);
    begin
      z_ProgramUniform4fEXT_ovr_0(&program, location, v0, v1, v2, v3);
    end;
    
    public z_ProgramUniform1iEXT_adr := GetFuncAdr('glProgramUniform1iEXT');
    public z_ProgramUniform1iEXT_ovr_0 := GetFuncOrNil&<procedure(&program: UInt32; location: Int32; v0: Int32)>(z_ProgramUniform1iEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniform1iEXT(&program: UInt32; location: Int32; v0: Int32);
    begin
      z_ProgramUniform1iEXT_ovr_0(&program, location, v0);
    end;
    
    public z_ProgramUniform2iEXT_adr := GetFuncAdr('glProgramUniform2iEXT');
    public z_ProgramUniform2iEXT_ovr_0 := GetFuncOrNil&<procedure(&program: UInt32; location: Int32; v0: Int32; v1: Int32)>(z_ProgramUniform2iEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniform2iEXT(&program: UInt32; location: Int32; v0: Int32; v1: Int32);
    begin
      z_ProgramUniform2iEXT_ovr_0(&program, location, v0, v1);
    end;
    
    public z_ProgramUniform3iEXT_adr := GetFuncAdr('glProgramUniform3iEXT');
    public z_ProgramUniform3iEXT_ovr_0 := GetFuncOrNil&<procedure(&program: UInt32; location: Int32; v0: Int32; v1: Int32; v2: Int32)>(z_ProgramUniform3iEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniform3iEXT(&program: UInt32; location: Int32; v0: Int32; v1: Int32; v2: Int32);
    begin
      z_ProgramUniform3iEXT_ovr_0(&program, location, v0, v1, v2);
    end;
    
    public z_ProgramUniform4iEXT_adr := GetFuncAdr('glProgramUniform4iEXT');
    public z_ProgramUniform4iEXT_ovr_0 := GetFuncOrNil&<procedure(&program: UInt32; location: Int32; v0: Int32; v1: Int32; v2: Int32; v3: Int32)>(z_ProgramUniform4iEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniform4iEXT(&program: UInt32; location: Int32; v0: Int32; v1: Int32; v2: Int32; v3: Int32);
    begin
      z_ProgramUniform4iEXT_ovr_0(&program, location, v0, v1, v2, v3);
    end;
    
    public z_ProgramUniform1fvEXT_adr := GetFuncAdr('glProgramUniform1fvEXT');
    public z_ProgramUniform1fvEXT_ovr_0 := GetFuncOrNil&<procedure(&program: UInt32; location: Int32; count: Int32; var value: single)>(z_ProgramUniform1fvEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniform1fvEXT(&program: UInt32; location: Int32; count: Int32; value: array of single);
    begin
      z_ProgramUniform1fvEXT_ovr_0(&program, location, count, value[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniform1fvEXT(&program: UInt32; location: Int32; count: Int32; var value: single);
    begin
      z_ProgramUniform1fvEXT_ovr_0(&program, location, count, value);
    end;
    public z_ProgramUniform1fvEXT_ovr_2 := GetFuncOrNil&<procedure(&program: UInt32; location: Int32; count: Int32; value: IntPtr)>(z_ProgramUniform1fvEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniform1fvEXT(&program: UInt32; location: Int32; count: Int32; value: IntPtr);
    begin
      z_ProgramUniform1fvEXT_ovr_2(&program, location, count, value);
    end;
    
    public z_ProgramUniform2fvEXT_adr := GetFuncAdr('glProgramUniform2fvEXT');
    public z_ProgramUniform2fvEXT_ovr_0 := GetFuncOrNil&<procedure(&program: UInt32; location: Int32; count: Int32; var value: single)>(z_ProgramUniform2fvEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniform2fvEXT(&program: UInt32; location: Int32; count: Int32; value: array of single);
    begin
      z_ProgramUniform2fvEXT_ovr_0(&program, location, count, value[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniform2fvEXT(&program: UInt32; location: Int32; count: Int32; var value: single);
    begin
      z_ProgramUniform2fvEXT_ovr_0(&program, location, count, value);
    end;
    public z_ProgramUniform2fvEXT_ovr_2 := GetFuncOrNil&<procedure(&program: UInt32; location: Int32; count: Int32; value: IntPtr)>(z_ProgramUniform2fvEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniform2fvEXT(&program: UInt32; location: Int32; count: Int32; value: IntPtr);
    begin
      z_ProgramUniform2fvEXT_ovr_2(&program, location, count, value);
    end;
    
    public z_ProgramUniform3fvEXT_adr := GetFuncAdr('glProgramUniform3fvEXT');
    public z_ProgramUniform3fvEXT_ovr_0 := GetFuncOrNil&<procedure(&program: UInt32; location: Int32; count: Int32; var value: single)>(z_ProgramUniform3fvEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniform3fvEXT(&program: UInt32; location: Int32; count: Int32; value: array of single);
    begin
      z_ProgramUniform3fvEXT_ovr_0(&program, location, count, value[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniform3fvEXT(&program: UInt32; location: Int32; count: Int32; var value: single);
    begin
      z_ProgramUniform3fvEXT_ovr_0(&program, location, count, value);
    end;
    public z_ProgramUniform3fvEXT_ovr_2 := GetFuncOrNil&<procedure(&program: UInt32; location: Int32; count: Int32; value: IntPtr)>(z_ProgramUniform3fvEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniform3fvEXT(&program: UInt32; location: Int32; count: Int32; value: IntPtr);
    begin
      z_ProgramUniform3fvEXT_ovr_2(&program, location, count, value);
    end;
    
    public z_ProgramUniform4fvEXT_adr := GetFuncAdr('glProgramUniform4fvEXT');
    public z_ProgramUniform4fvEXT_ovr_0 := GetFuncOrNil&<procedure(&program: UInt32; location: Int32; count: Int32; var value: single)>(z_ProgramUniform4fvEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniform4fvEXT(&program: UInt32; location: Int32; count: Int32; value: array of single);
    begin
      z_ProgramUniform4fvEXT_ovr_0(&program, location, count, value[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniform4fvEXT(&program: UInt32; location: Int32; count: Int32; var value: single);
    begin
      z_ProgramUniform4fvEXT_ovr_0(&program, location, count, value);
    end;
    public z_ProgramUniform4fvEXT_ovr_2 := GetFuncOrNil&<procedure(&program: UInt32; location: Int32; count: Int32; value: IntPtr)>(z_ProgramUniform4fvEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniform4fvEXT(&program: UInt32; location: Int32; count: Int32; value: IntPtr);
    begin
      z_ProgramUniform4fvEXT_ovr_2(&program, location, count, value);
    end;
    
    public z_ProgramUniform1ivEXT_adr := GetFuncAdr('glProgramUniform1ivEXT');
    public z_ProgramUniform1ivEXT_ovr_0 := GetFuncOrNil&<procedure(&program: UInt32; location: Int32; count: Int32; var value: Int32)>(z_ProgramUniform1ivEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniform1ivEXT(&program: UInt32; location: Int32; count: Int32; value: array of Int32);
    begin
      z_ProgramUniform1ivEXT_ovr_0(&program, location, count, value[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniform1ivEXT(&program: UInt32; location: Int32; count: Int32; var value: Int32);
    begin
      z_ProgramUniform1ivEXT_ovr_0(&program, location, count, value);
    end;
    public z_ProgramUniform1ivEXT_ovr_2 := GetFuncOrNil&<procedure(&program: UInt32; location: Int32; count: Int32; value: IntPtr)>(z_ProgramUniform1ivEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniform1ivEXT(&program: UInt32; location: Int32; count: Int32; value: IntPtr);
    begin
      z_ProgramUniform1ivEXT_ovr_2(&program, location, count, value);
    end;
    
    public z_ProgramUniform2ivEXT_adr := GetFuncAdr('glProgramUniform2ivEXT');
    public z_ProgramUniform2ivEXT_ovr_0 := GetFuncOrNil&<procedure(&program: UInt32; location: Int32; count: Int32; var value: Int32)>(z_ProgramUniform2ivEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniform2ivEXT(&program: UInt32; location: Int32; count: Int32; value: array of Int32);
    begin
      z_ProgramUniform2ivEXT_ovr_0(&program, location, count, value[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniform2ivEXT(&program: UInt32; location: Int32; count: Int32; var value: Int32);
    begin
      z_ProgramUniform2ivEXT_ovr_0(&program, location, count, value);
    end;
    public z_ProgramUniform2ivEXT_ovr_2 := GetFuncOrNil&<procedure(&program: UInt32; location: Int32; count: Int32; value: IntPtr)>(z_ProgramUniform2ivEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniform2ivEXT(&program: UInt32; location: Int32; count: Int32; value: IntPtr);
    begin
      z_ProgramUniform2ivEXT_ovr_2(&program, location, count, value);
    end;
    
    public z_ProgramUniform3ivEXT_adr := GetFuncAdr('glProgramUniform3ivEXT');
    public z_ProgramUniform3ivEXT_ovr_0 := GetFuncOrNil&<procedure(&program: UInt32; location: Int32; count: Int32; var value: Int32)>(z_ProgramUniform3ivEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniform3ivEXT(&program: UInt32; location: Int32; count: Int32; value: array of Int32);
    begin
      z_ProgramUniform3ivEXT_ovr_0(&program, location, count, value[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniform3ivEXT(&program: UInt32; location: Int32; count: Int32; var value: Int32);
    begin
      z_ProgramUniform3ivEXT_ovr_0(&program, location, count, value);
    end;
    public z_ProgramUniform3ivEXT_ovr_2 := GetFuncOrNil&<procedure(&program: UInt32; location: Int32; count: Int32; value: IntPtr)>(z_ProgramUniform3ivEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniform3ivEXT(&program: UInt32; location: Int32; count: Int32; value: IntPtr);
    begin
      z_ProgramUniform3ivEXT_ovr_2(&program, location, count, value);
    end;
    
    public z_ProgramUniform4ivEXT_adr := GetFuncAdr('glProgramUniform4ivEXT');
    public z_ProgramUniform4ivEXT_ovr_0 := GetFuncOrNil&<procedure(&program: UInt32; location: Int32; count: Int32; var value: Int32)>(z_ProgramUniform4ivEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniform4ivEXT(&program: UInt32; location: Int32; count: Int32; value: array of Int32);
    begin
      z_ProgramUniform4ivEXT_ovr_0(&program, location, count, value[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniform4ivEXT(&program: UInt32; location: Int32; count: Int32; var value: Int32);
    begin
      z_ProgramUniform4ivEXT_ovr_0(&program, location, count, value);
    end;
    public z_ProgramUniform4ivEXT_ovr_2 := GetFuncOrNil&<procedure(&program: UInt32; location: Int32; count: Int32; value: IntPtr)>(z_ProgramUniform4ivEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniform4ivEXT(&program: UInt32; location: Int32; count: Int32; value: IntPtr);
    begin
      z_ProgramUniform4ivEXT_ovr_2(&program, location, count, value);
    end;
    
    public z_ProgramUniformMatrix2fvEXT_adr := GetFuncAdr('glProgramUniformMatrix2fvEXT');
    public z_ProgramUniformMatrix2fvEXT_ovr_0 := GetFuncOrNil&<procedure(&program: UInt32; location: Int32; count: Int32; transpose: boolean; var value: single)>(z_ProgramUniformMatrix2fvEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniformMatrix2fvEXT(&program: UInt32; location: Int32; count: Int32; transpose: boolean; value: array of single);
    begin
      z_ProgramUniformMatrix2fvEXT_ovr_0(&program, location, count, transpose, value[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniformMatrix2fvEXT(&program: UInt32; location: Int32; count: Int32; transpose: boolean; var value: single);
    begin
      z_ProgramUniformMatrix2fvEXT_ovr_0(&program, location, count, transpose, value);
    end;
    public z_ProgramUniformMatrix2fvEXT_ovr_2 := GetFuncOrNil&<procedure(&program: UInt32; location: Int32; count: Int32; transpose: boolean; value: IntPtr)>(z_ProgramUniformMatrix2fvEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniformMatrix2fvEXT(&program: UInt32; location: Int32; count: Int32; transpose: boolean; value: IntPtr);
    begin
      z_ProgramUniformMatrix2fvEXT_ovr_2(&program, location, count, transpose, value);
    end;
    
    public z_ProgramUniformMatrix3fvEXT_adr := GetFuncAdr('glProgramUniformMatrix3fvEXT');
    public z_ProgramUniformMatrix3fvEXT_ovr_0 := GetFuncOrNil&<procedure(&program: UInt32; location: Int32; count: Int32; transpose: boolean; var value: single)>(z_ProgramUniformMatrix3fvEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniformMatrix3fvEXT(&program: UInt32; location: Int32; count: Int32; transpose: boolean; value: array of single);
    begin
      z_ProgramUniformMatrix3fvEXT_ovr_0(&program, location, count, transpose, value[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniformMatrix3fvEXT(&program: UInt32; location: Int32; count: Int32; transpose: boolean; var value: single);
    begin
      z_ProgramUniformMatrix3fvEXT_ovr_0(&program, location, count, transpose, value);
    end;
    public z_ProgramUniformMatrix3fvEXT_ovr_2 := GetFuncOrNil&<procedure(&program: UInt32; location: Int32; count: Int32; transpose: boolean; value: IntPtr)>(z_ProgramUniformMatrix3fvEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniformMatrix3fvEXT(&program: UInt32; location: Int32; count: Int32; transpose: boolean; value: IntPtr);
    begin
      z_ProgramUniformMatrix3fvEXT_ovr_2(&program, location, count, transpose, value);
    end;
    
    public z_ProgramUniformMatrix4fvEXT_adr := GetFuncAdr('glProgramUniformMatrix4fvEXT');
    public z_ProgramUniformMatrix4fvEXT_ovr_0 := GetFuncOrNil&<procedure(&program: UInt32; location: Int32; count: Int32; transpose: boolean; var value: single)>(z_ProgramUniformMatrix4fvEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniformMatrix4fvEXT(&program: UInt32; location: Int32; count: Int32; transpose: boolean; value: array of single);
    begin
      z_ProgramUniformMatrix4fvEXT_ovr_0(&program, location, count, transpose, value[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniformMatrix4fvEXT(&program: UInt32; location: Int32; count: Int32; transpose: boolean; var value: single);
    begin
      z_ProgramUniformMatrix4fvEXT_ovr_0(&program, location, count, transpose, value);
    end;
    public z_ProgramUniformMatrix4fvEXT_ovr_2 := GetFuncOrNil&<procedure(&program: UInt32; location: Int32; count: Int32; transpose: boolean; value: IntPtr)>(z_ProgramUniformMatrix4fvEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniformMatrix4fvEXT(&program: UInt32; location: Int32; count: Int32; transpose: boolean; value: IntPtr);
    begin
      z_ProgramUniformMatrix4fvEXT_ovr_2(&program, location, count, transpose, value);
    end;
    
    public z_ProgramUniformMatrix2x3fvEXT_adr := GetFuncAdr('glProgramUniformMatrix2x3fvEXT');
    public z_ProgramUniformMatrix2x3fvEXT_ovr_0 := GetFuncOrNil&<procedure(&program: UInt32; location: Int32; count: Int32; transpose: boolean; var value: single)>(z_ProgramUniformMatrix2x3fvEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniformMatrix2x3fvEXT(&program: UInt32; location: Int32; count: Int32; transpose: boolean; value: array of single);
    begin
      z_ProgramUniformMatrix2x3fvEXT_ovr_0(&program, location, count, transpose, value[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniformMatrix2x3fvEXT(&program: UInt32; location: Int32; count: Int32; transpose: boolean; var value: single);
    begin
      z_ProgramUniformMatrix2x3fvEXT_ovr_0(&program, location, count, transpose, value);
    end;
    public z_ProgramUniformMatrix2x3fvEXT_ovr_2 := GetFuncOrNil&<procedure(&program: UInt32; location: Int32; count: Int32; transpose: boolean; value: IntPtr)>(z_ProgramUniformMatrix2x3fvEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniformMatrix2x3fvEXT(&program: UInt32; location: Int32; count: Int32; transpose: boolean; value: IntPtr);
    begin
      z_ProgramUniformMatrix2x3fvEXT_ovr_2(&program, location, count, transpose, value);
    end;
    
    public z_ProgramUniformMatrix3x2fvEXT_adr := GetFuncAdr('glProgramUniformMatrix3x2fvEXT');
    public z_ProgramUniformMatrix3x2fvEXT_ovr_0 := GetFuncOrNil&<procedure(&program: UInt32; location: Int32; count: Int32; transpose: boolean; var value: single)>(z_ProgramUniformMatrix3x2fvEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniformMatrix3x2fvEXT(&program: UInt32; location: Int32; count: Int32; transpose: boolean; value: array of single);
    begin
      z_ProgramUniformMatrix3x2fvEXT_ovr_0(&program, location, count, transpose, value[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniformMatrix3x2fvEXT(&program: UInt32; location: Int32; count: Int32; transpose: boolean; var value: single);
    begin
      z_ProgramUniformMatrix3x2fvEXT_ovr_0(&program, location, count, transpose, value);
    end;
    public z_ProgramUniformMatrix3x2fvEXT_ovr_2 := GetFuncOrNil&<procedure(&program: UInt32; location: Int32; count: Int32; transpose: boolean; value: IntPtr)>(z_ProgramUniformMatrix3x2fvEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniformMatrix3x2fvEXT(&program: UInt32; location: Int32; count: Int32; transpose: boolean; value: IntPtr);
    begin
      z_ProgramUniformMatrix3x2fvEXT_ovr_2(&program, location, count, transpose, value);
    end;
    
    public z_ProgramUniformMatrix2x4fvEXT_adr := GetFuncAdr('glProgramUniformMatrix2x4fvEXT');
    public z_ProgramUniformMatrix2x4fvEXT_ovr_0 := GetFuncOrNil&<procedure(&program: UInt32; location: Int32; count: Int32; transpose: boolean; var value: single)>(z_ProgramUniformMatrix2x4fvEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniformMatrix2x4fvEXT(&program: UInt32; location: Int32; count: Int32; transpose: boolean; value: array of single);
    begin
      z_ProgramUniformMatrix2x4fvEXT_ovr_0(&program, location, count, transpose, value[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniformMatrix2x4fvEXT(&program: UInt32; location: Int32; count: Int32; transpose: boolean; var value: single);
    begin
      z_ProgramUniformMatrix2x4fvEXT_ovr_0(&program, location, count, transpose, value);
    end;
    public z_ProgramUniformMatrix2x4fvEXT_ovr_2 := GetFuncOrNil&<procedure(&program: UInt32; location: Int32; count: Int32; transpose: boolean; value: IntPtr)>(z_ProgramUniformMatrix2x4fvEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniformMatrix2x4fvEXT(&program: UInt32; location: Int32; count: Int32; transpose: boolean; value: IntPtr);
    begin
      z_ProgramUniformMatrix2x4fvEXT_ovr_2(&program, location, count, transpose, value);
    end;
    
    public z_ProgramUniformMatrix4x2fvEXT_adr := GetFuncAdr('glProgramUniformMatrix4x2fvEXT');
    public z_ProgramUniformMatrix4x2fvEXT_ovr_0 := GetFuncOrNil&<procedure(&program: UInt32; location: Int32; count: Int32; transpose: boolean; var value: single)>(z_ProgramUniformMatrix4x2fvEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniformMatrix4x2fvEXT(&program: UInt32; location: Int32; count: Int32; transpose: boolean; value: array of single);
    begin
      z_ProgramUniformMatrix4x2fvEXT_ovr_0(&program, location, count, transpose, value[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniformMatrix4x2fvEXT(&program: UInt32; location: Int32; count: Int32; transpose: boolean; var value: single);
    begin
      z_ProgramUniformMatrix4x2fvEXT_ovr_0(&program, location, count, transpose, value);
    end;
    public z_ProgramUniformMatrix4x2fvEXT_ovr_2 := GetFuncOrNil&<procedure(&program: UInt32; location: Int32; count: Int32; transpose: boolean; value: IntPtr)>(z_ProgramUniformMatrix4x2fvEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniformMatrix4x2fvEXT(&program: UInt32; location: Int32; count: Int32; transpose: boolean; value: IntPtr);
    begin
      z_ProgramUniformMatrix4x2fvEXT_ovr_2(&program, location, count, transpose, value);
    end;
    
    public z_ProgramUniformMatrix3x4fvEXT_adr := GetFuncAdr('glProgramUniformMatrix3x4fvEXT');
    public z_ProgramUniformMatrix3x4fvEXT_ovr_0 := GetFuncOrNil&<procedure(&program: UInt32; location: Int32; count: Int32; transpose: boolean; var value: single)>(z_ProgramUniformMatrix3x4fvEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniformMatrix3x4fvEXT(&program: UInt32; location: Int32; count: Int32; transpose: boolean; value: array of single);
    begin
      z_ProgramUniformMatrix3x4fvEXT_ovr_0(&program, location, count, transpose, value[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniformMatrix3x4fvEXT(&program: UInt32; location: Int32; count: Int32; transpose: boolean; var value: single);
    begin
      z_ProgramUniformMatrix3x4fvEXT_ovr_0(&program, location, count, transpose, value);
    end;
    public z_ProgramUniformMatrix3x4fvEXT_ovr_2 := GetFuncOrNil&<procedure(&program: UInt32; location: Int32; count: Int32; transpose: boolean; value: IntPtr)>(z_ProgramUniformMatrix3x4fvEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniformMatrix3x4fvEXT(&program: UInt32; location: Int32; count: Int32; transpose: boolean; value: IntPtr);
    begin
      z_ProgramUniformMatrix3x4fvEXT_ovr_2(&program, location, count, transpose, value);
    end;
    
    public z_ProgramUniformMatrix4x3fvEXT_adr := GetFuncAdr('glProgramUniformMatrix4x3fvEXT');
    public z_ProgramUniformMatrix4x3fvEXT_ovr_0 := GetFuncOrNil&<procedure(&program: UInt32; location: Int32; count: Int32; transpose: boolean; var value: single)>(z_ProgramUniformMatrix4x3fvEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniformMatrix4x3fvEXT(&program: UInt32; location: Int32; count: Int32; transpose: boolean; value: array of single);
    begin
      z_ProgramUniformMatrix4x3fvEXT_ovr_0(&program, location, count, transpose, value[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniformMatrix4x3fvEXT(&program: UInt32; location: Int32; count: Int32; transpose: boolean; var value: single);
    begin
      z_ProgramUniformMatrix4x3fvEXT_ovr_0(&program, location, count, transpose, value);
    end;
    public z_ProgramUniformMatrix4x3fvEXT_ovr_2 := GetFuncOrNil&<procedure(&program: UInt32; location: Int32; count: Int32; transpose: boolean; value: IntPtr)>(z_ProgramUniformMatrix4x3fvEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniformMatrix4x3fvEXT(&program: UInt32; location: Int32; count: Int32; transpose: boolean; value: IntPtr);
    begin
      z_ProgramUniformMatrix4x3fvEXT_ovr_2(&program, location, count, transpose, value);
    end;
    
    public z_TextureBufferEXT_adr := GetFuncAdr('glTextureBufferEXT');
    public z_TextureBufferEXT_ovr_0 := GetFuncOrNil&<procedure(texture: UInt32; target: TextureTarget; _internalformat: InternalFormat; buffer: UInt32)>(z_TextureBufferEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TextureBufferEXT(texture: UInt32; target: TextureTarget; _internalformat: InternalFormat; buffer: UInt32);
    begin
      z_TextureBufferEXT_ovr_0(texture, target, _internalformat, buffer);
    end;
    
    public z_MultiTexBufferEXT_adr := GetFuncAdr('glMultiTexBufferEXT');
    public z_MultiTexBufferEXT_ovr_0 := GetFuncOrNil&<procedure(texunit: TextureUnit; target: TextureTarget; internalformat: DummyEnum; buffer: UInt32)>(z_MultiTexBufferEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiTexBufferEXT(texunit: TextureUnit; target: TextureTarget; internalformat: DummyEnum; buffer: UInt32);
    begin
      z_MultiTexBufferEXT_ovr_0(texunit, target, internalformat, buffer);
    end;
    
    public z_TextureParameterIivEXT_adr := GetFuncAdr('glTextureParameterIivEXT');
    public z_TextureParameterIivEXT_ovr_0 := GetFuncOrNil&<procedure(texture: UInt32; target: TextureTarget; pname: TextureParameterName; var &params: Int32)>(z_TextureParameterIivEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TextureParameterIivEXT(texture: UInt32; target: TextureTarget; pname: TextureParameterName; &params: array of Int32);
    begin
      z_TextureParameterIivEXT_ovr_0(texture, target, pname, &params[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TextureParameterIivEXT(texture: UInt32; target: TextureTarget; pname: TextureParameterName; var &params: Int32);
    begin
      z_TextureParameterIivEXT_ovr_0(texture, target, pname, &params);
    end;
    public z_TextureParameterIivEXT_ovr_2 := GetFuncOrNil&<procedure(texture: UInt32; target: TextureTarget; pname: TextureParameterName; &params: IntPtr)>(z_TextureParameterIivEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TextureParameterIivEXT(texture: UInt32; target: TextureTarget; pname: TextureParameterName; &params: IntPtr);
    begin
      z_TextureParameterIivEXT_ovr_2(texture, target, pname, &params);
    end;
    
    public z_TextureParameterIuivEXT_adr := GetFuncAdr('glTextureParameterIuivEXT');
    public z_TextureParameterIuivEXT_ovr_0 := GetFuncOrNil&<procedure(texture: UInt32; target: TextureTarget; pname: TextureParameterName; var &params: UInt32)>(z_TextureParameterIuivEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TextureParameterIuivEXT(texture: UInt32; target: TextureTarget; pname: TextureParameterName; &params: array of UInt32);
    begin
      z_TextureParameterIuivEXT_ovr_0(texture, target, pname, &params[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TextureParameterIuivEXT(texture: UInt32; target: TextureTarget; pname: TextureParameterName; var &params: UInt32);
    begin
      z_TextureParameterIuivEXT_ovr_0(texture, target, pname, &params);
    end;
    public z_TextureParameterIuivEXT_ovr_2 := GetFuncOrNil&<procedure(texture: UInt32; target: TextureTarget; pname: TextureParameterName; &params: IntPtr)>(z_TextureParameterIuivEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TextureParameterIuivEXT(texture: UInt32; target: TextureTarget; pname: TextureParameterName; &params: IntPtr);
    begin
      z_TextureParameterIuivEXT_ovr_2(texture, target, pname, &params);
    end;
    
    public z_GetTextureParameterIivEXT_adr := GetFuncAdr('glGetTextureParameterIivEXT');
    public z_GetTextureParameterIivEXT_ovr_0 := GetFuncOrNil&<procedure(texture: UInt32; target: TextureTarget; pname: GetTextureParameter; var &params: Int32)>(z_GetTextureParameterIivEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetTextureParameterIivEXT(texture: UInt32; target: TextureTarget; pname: GetTextureParameter; &params: array of Int32);
    begin
      z_GetTextureParameterIivEXT_ovr_0(texture, target, pname, &params[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetTextureParameterIivEXT(texture: UInt32; target: TextureTarget; pname: GetTextureParameter; var &params: Int32);
    begin
      z_GetTextureParameterIivEXT_ovr_0(texture, target, pname, &params);
    end;
    public z_GetTextureParameterIivEXT_ovr_2 := GetFuncOrNil&<procedure(texture: UInt32; target: TextureTarget; pname: GetTextureParameter; &params: IntPtr)>(z_GetTextureParameterIivEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetTextureParameterIivEXT(texture: UInt32; target: TextureTarget; pname: GetTextureParameter; &params: IntPtr);
    begin
      z_GetTextureParameterIivEXT_ovr_2(texture, target, pname, &params);
    end;
    
    public z_GetTextureParameterIuivEXT_adr := GetFuncAdr('glGetTextureParameterIuivEXT');
    public z_GetTextureParameterIuivEXT_ovr_0 := GetFuncOrNil&<procedure(texture: UInt32; target: TextureTarget; pname: GetTextureParameter; var &params: UInt32)>(z_GetTextureParameterIuivEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetTextureParameterIuivEXT(texture: UInt32; target: TextureTarget; pname: GetTextureParameter; &params: array of UInt32);
    begin
      z_GetTextureParameterIuivEXT_ovr_0(texture, target, pname, &params[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetTextureParameterIuivEXT(texture: UInt32; target: TextureTarget; pname: GetTextureParameter; var &params: UInt32);
    begin
      z_GetTextureParameterIuivEXT_ovr_0(texture, target, pname, &params);
    end;
    public z_GetTextureParameterIuivEXT_ovr_2 := GetFuncOrNil&<procedure(texture: UInt32; target: TextureTarget; pname: GetTextureParameter; &params: IntPtr)>(z_GetTextureParameterIuivEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetTextureParameterIuivEXT(texture: UInt32; target: TextureTarget; pname: GetTextureParameter; &params: IntPtr);
    begin
      z_GetTextureParameterIuivEXT_ovr_2(texture, target, pname, &params);
    end;
    
    public z_MultiTexParameterIivEXT_adr := GetFuncAdr('glMultiTexParameterIivEXT');
    public z_MultiTexParameterIivEXT_ovr_0 := GetFuncOrNil&<procedure(texunit: TextureUnit; target: TextureTarget; pname: TextureParameterName; var &params: Int32)>(z_MultiTexParameterIivEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiTexParameterIivEXT(texunit: TextureUnit; target: TextureTarget; pname: TextureParameterName; &params: array of Int32);
    begin
      z_MultiTexParameterIivEXT_ovr_0(texunit, target, pname, &params[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiTexParameterIivEXT(texunit: TextureUnit; target: TextureTarget; pname: TextureParameterName; var &params: Int32);
    begin
      z_MultiTexParameterIivEXT_ovr_0(texunit, target, pname, &params);
    end;
    public z_MultiTexParameterIivEXT_ovr_2 := GetFuncOrNil&<procedure(texunit: TextureUnit; target: TextureTarget; pname: TextureParameterName; &params: IntPtr)>(z_MultiTexParameterIivEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiTexParameterIivEXT(texunit: TextureUnit; target: TextureTarget; pname: TextureParameterName; &params: IntPtr);
    begin
      z_MultiTexParameterIivEXT_ovr_2(texunit, target, pname, &params);
    end;
    
    public z_MultiTexParameterIuivEXT_adr := GetFuncAdr('glMultiTexParameterIuivEXT');
    public z_MultiTexParameterIuivEXT_ovr_0 := GetFuncOrNil&<procedure(texunit: TextureUnit; target: TextureTarget; pname: TextureParameterName; var &params: UInt32)>(z_MultiTexParameterIuivEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiTexParameterIuivEXT(texunit: TextureUnit; target: TextureTarget; pname: TextureParameterName; &params: array of UInt32);
    begin
      z_MultiTexParameterIuivEXT_ovr_0(texunit, target, pname, &params[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiTexParameterIuivEXT(texunit: TextureUnit; target: TextureTarget; pname: TextureParameterName; var &params: UInt32);
    begin
      z_MultiTexParameterIuivEXT_ovr_0(texunit, target, pname, &params);
    end;
    public z_MultiTexParameterIuivEXT_ovr_2 := GetFuncOrNil&<procedure(texunit: TextureUnit; target: TextureTarget; pname: TextureParameterName; &params: IntPtr)>(z_MultiTexParameterIuivEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiTexParameterIuivEXT(texunit: TextureUnit; target: TextureTarget; pname: TextureParameterName; &params: IntPtr);
    begin
      z_MultiTexParameterIuivEXT_ovr_2(texunit, target, pname, &params);
    end;
    
    public z_GetMultiTexParameterIivEXT_adr := GetFuncAdr('glGetMultiTexParameterIivEXT');
    public z_GetMultiTexParameterIivEXT_ovr_0 := GetFuncOrNil&<procedure(texunit: TextureUnit; target: TextureTarget; pname: GetTextureParameter; var &params: Int32)>(z_GetMultiTexParameterIivEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetMultiTexParameterIivEXT(texunit: TextureUnit; target: TextureTarget; pname: GetTextureParameter; &params: array of Int32);
    begin
      z_GetMultiTexParameterIivEXT_ovr_0(texunit, target, pname, &params[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetMultiTexParameterIivEXT(texunit: TextureUnit; target: TextureTarget; pname: GetTextureParameter; var &params: Int32);
    begin
      z_GetMultiTexParameterIivEXT_ovr_0(texunit, target, pname, &params);
    end;
    public z_GetMultiTexParameterIivEXT_ovr_2 := GetFuncOrNil&<procedure(texunit: TextureUnit; target: TextureTarget; pname: GetTextureParameter; &params: IntPtr)>(z_GetMultiTexParameterIivEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetMultiTexParameterIivEXT(texunit: TextureUnit; target: TextureTarget; pname: GetTextureParameter; &params: IntPtr);
    begin
      z_GetMultiTexParameterIivEXT_ovr_2(texunit, target, pname, &params);
    end;
    
    public z_GetMultiTexParameterIuivEXT_adr := GetFuncAdr('glGetMultiTexParameterIuivEXT');
    public z_GetMultiTexParameterIuivEXT_ovr_0 := GetFuncOrNil&<procedure(texunit: TextureUnit; target: TextureTarget; pname: GetTextureParameter; var &params: UInt32)>(z_GetMultiTexParameterIuivEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetMultiTexParameterIuivEXT(texunit: TextureUnit; target: TextureTarget; pname: GetTextureParameter; &params: array of UInt32);
    begin
      z_GetMultiTexParameterIuivEXT_ovr_0(texunit, target, pname, &params[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetMultiTexParameterIuivEXT(texunit: TextureUnit; target: TextureTarget; pname: GetTextureParameter; var &params: UInt32);
    begin
      z_GetMultiTexParameterIuivEXT_ovr_0(texunit, target, pname, &params);
    end;
    public z_GetMultiTexParameterIuivEXT_ovr_2 := GetFuncOrNil&<procedure(texunit: TextureUnit; target: TextureTarget; pname: GetTextureParameter; &params: IntPtr)>(z_GetMultiTexParameterIuivEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetMultiTexParameterIuivEXT(texunit: TextureUnit; target: TextureTarget; pname: GetTextureParameter; &params: IntPtr);
    begin
      z_GetMultiTexParameterIuivEXT_ovr_2(texunit, target, pname, &params);
    end;
    
    public z_ProgramUniform1uiEXT_adr := GetFuncAdr('glProgramUniform1uiEXT');
    public z_ProgramUniform1uiEXT_ovr_0 := GetFuncOrNil&<procedure(&program: UInt32; location: Int32; v0: UInt32)>(z_ProgramUniform1uiEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniform1uiEXT(&program: UInt32; location: Int32; v0: UInt32);
    begin
      z_ProgramUniform1uiEXT_ovr_0(&program, location, v0);
    end;
    
    public z_ProgramUniform2uiEXT_adr := GetFuncAdr('glProgramUniform2uiEXT');
    public z_ProgramUniform2uiEXT_ovr_0 := GetFuncOrNil&<procedure(&program: UInt32; location: Int32; v0: UInt32; v1: UInt32)>(z_ProgramUniform2uiEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniform2uiEXT(&program: UInt32; location: Int32; v0: UInt32; v1: UInt32);
    begin
      z_ProgramUniform2uiEXT_ovr_0(&program, location, v0, v1);
    end;
    
    public z_ProgramUniform3uiEXT_adr := GetFuncAdr('glProgramUniform3uiEXT');
    public z_ProgramUniform3uiEXT_ovr_0 := GetFuncOrNil&<procedure(&program: UInt32; location: Int32; v0: UInt32; v1: UInt32; v2: UInt32)>(z_ProgramUniform3uiEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniform3uiEXT(&program: UInt32; location: Int32; v0: UInt32; v1: UInt32; v2: UInt32);
    begin
      z_ProgramUniform3uiEXT_ovr_0(&program, location, v0, v1, v2);
    end;
    
    public z_ProgramUniform4uiEXT_adr := GetFuncAdr('glProgramUniform4uiEXT');
    public z_ProgramUniform4uiEXT_ovr_0 := GetFuncOrNil&<procedure(&program: UInt32; location: Int32; v0: UInt32; v1: UInt32; v2: UInt32; v3: UInt32)>(z_ProgramUniform4uiEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniform4uiEXT(&program: UInt32; location: Int32; v0: UInt32; v1: UInt32; v2: UInt32; v3: UInt32);
    begin
      z_ProgramUniform4uiEXT_ovr_0(&program, location, v0, v1, v2, v3);
    end;
    
    public z_ProgramUniform1uivEXT_adr := GetFuncAdr('glProgramUniform1uivEXT');
    public z_ProgramUniform1uivEXT_ovr_0 := GetFuncOrNil&<procedure(&program: UInt32; location: Int32; count: Int32; var value: UInt32)>(z_ProgramUniform1uivEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniform1uivEXT(&program: UInt32; location: Int32; count: Int32; value: array of UInt32);
    begin
      z_ProgramUniform1uivEXT_ovr_0(&program, location, count, value[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniform1uivEXT(&program: UInt32; location: Int32; count: Int32; var value: UInt32);
    begin
      z_ProgramUniform1uivEXT_ovr_0(&program, location, count, value);
    end;
    public z_ProgramUniform1uivEXT_ovr_2 := GetFuncOrNil&<procedure(&program: UInt32; location: Int32; count: Int32; value: IntPtr)>(z_ProgramUniform1uivEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniform1uivEXT(&program: UInt32; location: Int32; count: Int32; value: IntPtr);
    begin
      z_ProgramUniform1uivEXT_ovr_2(&program, location, count, value);
    end;
    
    public z_ProgramUniform2uivEXT_adr := GetFuncAdr('glProgramUniform2uivEXT');
    public z_ProgramUniform2uivEXT_ovr_0 := GetFuncOrNil&<procedure(&program: UInt32; location: Int32; count: Int32; var value: UInt32)>(z_ProgramUniform2uivEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniform2uivEXT(&program: UInt32; location: Int32; count: Int32; value: array of UInt32);
    begin
      z_ProgramUniform2uivEXT_ovr_0(&program, location, count, value[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniform2uivEXT(&program: UInt32; location: Int32; count: Int32; var value: UInt32);
    begin
      z_ProgramUniform2uivEXT_ovr_0(&program, location, count, value);
    end;
    public z_ProgramUniform2uivEXT_ovr_2 := GetFuncOrNil&<procedure(&program: UInt32; location: Int32; count: Int32; value: IntPtr)>(z_ProgramUniform2uivEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniform2uivEXT(&program: UInt32; location: Int32; count: Int32; value: IntPtr);
    begin
      z_ProgramUniform2uivEXT_ovr_2(&program, location, count, value);
    end;
    
    public z_ProgramUniform3uivEXT_adr := GetFuncAdr('glProgramUniform3uivEXT');
    public z_ProgramUniform3uivEXT_ovr_0 := GetFuncOrNil&<procedure(&program: UInt32; location: Int32; count: Int32; var value: UInt32)>(z_ProgramUniform3uivEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniform3uivEXT(&program: UInt32; location: Int32; count: Int32; value: array of UInt32);
    begin
      z_ProgramUniform3uivEXT_ovr_0(&program, location, count, value[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniform3uivEXT(&program: UInt32; location: Int32; count: Int32; var value: UInt32);
    begin
      z_ProgramUniform3uivEXT_ovr_0(&program, location, count, value);
    end;
    public z_ProgramUniform3uivEXT_ovr_2 := GetFuncOrNil&<procedure(&program: UInt32; location: Int32; count: Int32; value: IntPtr)>(z_ProgramUniform3uivEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniform3uivEXT(&program: UInt32; location: Int32; count: Int32; value: IntPtr);
    begin
      z_ProgramUniform3uivEXT_ovr_2(&program, location, count, value);
    end;
    
    public z_ProgramUniform4uivEXT_adr := GetFuncAdr('glProgramUniform4uivEXT');
    public z_ProgramUniform4uivEXT_ovr_0 := GetFuncOrNil&<procedure(&program: UInt32; location: Int32; count: Int32; var value: UInt32)>(z_ProgramUniform4uivEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniform4uivEXT(&program: UInt32; location: Int32; count: Int32; value: array of UInt32);
    begin
      z_ProgramUniform4uivEXT_ovr_0(&program, location, count, value[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniform4uivEXT(&program: UInt32; location: Int32; count: Int32; var value: UInt32);
    begin
      z_ProgramUniform4uivEXT_ovr_0(&program, location, count, value);
    end;
    public z_ProgramUniform4uivEXT_ovr_2 := GetFuncOrNil&<procedure(&program: UInt32; location: Int32; count: Int32; value: IntPtr)>(z_ProgramUniform4uivEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniform4uivEXT(&program: UInt32; location: Int32; count: Int32; value: IntPtr);
    begin
      z_ProgramUniform4uivEXT_ovr_2(&program, location, count, value);
    end;
    
    public z_NamedProgramLocalParameters4fvEXT_adr := GetFuncAdr('glNamedProgramLocalParameters4fvEXT');
    public z_NamedProgramLocalParameters4fvEXT_ovr_0 := GetFuncOrNil&<procedure(&program: UInt32; target: ProgramTarget; index: UInt32; count: Int32; var &params: single)>(z_NamedProgramLocalParameters4fvEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure NamedProgramLocalParameters4fvEXT(&program: UInt32; target: ProgramTarget; index: UInt32; count: Int32; &params: array of single);
    begin
      z_NamedProgramLocalParameters4fvEXT_ovr_0(&program, target, index, count, &params[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure NamedProgramLocalParameters4fvEXT(&program: UInt32; target: ProgramTarget; index: UInt32; count: Int32; var &params: single);
    begin
      z_NamedProgramLocalParameters4fvEXT_ovr_0(&program, target, index, count, &params);
    end;
    public z_NamedProgramLocalParameters4fvEXT_ovr_2 := GetFuncOrNil&<procedure(&program: UInt32; target: ProgramTarget; index: UInt32; count: Int32; &params: IntPtr)>(z_NamedProgramLocalParameters4fvEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure NamedProgramLocalParameters4fvEXT(&program: UInt32; target: ProgramTarget; index: UInt32; count: Int32; &params: IntPtr);
    begin
      z_NamedProgramLocalParameters4fvEXT_ovr_2(&program, target, index, count, &params);
    end;
    
    public z_NamedProgramLocalParameterI4iEXT_adr := GetFuncAdr('glNamedProgramLocalParameterI4iEXT');
    public z_NamedProgramLocalParameterI4iEXT_ovr_0 := GetFuncOrNil&<procedure(&program: UInt32; target: ProgramTarget; index: UInt32; x: Int32; y: Int32; z: Int32; w: Int32)>(z_NamedProgramLocalParameterI4iEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure NamedProgramLocalParameterI4iEXT(&program: UInt32; target: ProgramTarget; index: UInt32; x: Int32; y: Int32; z: Int32; w: Int32);
    begin
      z_NamedProgramLocalParameterI4iEXT_ovr_0(&program, target, index, x, y, z, w);
    end;
    
    public z_NamedProgramLocalParameterI4ivEXT_adr := GetFuncAdr('glNamedProgramLocalParameterI4ivEXT');
    public z_NamedProgramLocalParameterI4ivEXT_ovr_0 := GetFuncOrNil&<procedure(&program: UInt32; target: ProgramTarget; index: UInt32; var &params: Int32)>(z_NamedProgramLocalParameterI4ivEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure NamedProgramLocalParameterI4ivEXT(&program: UInt32; target: ProgramTarget; index: UInt32; &params: array of Int32);
    begin
      z_NamedProgramLocalParameterI4ivEXT_ovr_0(&program, target, index, &params[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure NamedProgramLocalParameterI4ivEXT(&program: UInt32; target: ProgramTarget; index: UInt32; var &params: Int32);
    begin
      z_NamedProgramLocalParameterI4ivEXT_ovr_0(&program, target, index, &params);
    end;
    public z_NamedProgramLocalParameterI4ivEXT_ovr_2 := GetFuncOrNil&<procedure(&program: UInt32; target: ProgramTarget; index: UInt32; &params: IntPtr)>(z_NamedProgramLocalParameterI4ivEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure NamedProgramLocalParameterI4ivEXT(&program: UInt32; target: ProgramTarget; index: UInt32; &params: IntPtr);
    begin
      z_NamedProgramLocalParameterI4ivEXT_ovr_2(&program, target, index, &params);
    end;
    
    public z_NamedProgramLocalParametersI4ivEXT_adr := GetFuncAdr('glNamedProgramLocalParametersI4ivEXT');
    public z_NamedProgramLocalParametersI4ivEXT_ovr_0 := GetFuncOrNil&<procedure(&program: UInt32; target: ProgramTarget; index: UInt32; count: Int32; var &params: Int32)>(z_NamedProgramLocalParametersI4ivEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure NamedProgramLocalParametersI4ivEXT(&program: UInt32; target: ProgramTarget; index: UInt32; count: Int32; &params: array of Int32);
    begin
      z_NamedProgramLocalParametersI4ivEXT_ovr_0(&program, target, index, count, &params[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure NamedProgramLocalParametersI4ivEXT(&program: UInt32; target: ProgramTarget; index: UInt32; count: Int32; var &params: Int32);
    begin
      z_NamedProgramLocalParametersI4ivEXT_ovr_0(&program, target, index, count, &params);
    end;
    public z_NamedProgramLocalParametersI4ivEXT_ovr_2 := GetFuncOrNil&<procedure(&program: UInt32; target: ProgramTarget; index: UInt32; count: Int32; &params: IntPtr)>(z_NamedProgramLocalParametersI4ivEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure NamedProgramLocalParametersI4ivEXT(&program: UInt32; target: ProgramTarget; index: UInt32; count: Int32; &params: IntPtr);
    begin
      z_NamedProgramLocalParametersI4ivEXT_ovr_2(&program, target, index, count, &params);
    end;
    
    public z_NamedProgramLocalParameterI4uiEXT_adr := GetFuncAdr('glNamedProgramLocalParameterI4uiEXT');
    public z_NamedProgramLocalParameterI4uiEXT_ovr_0 := GetFuncOrNil&<procedure(&program: UInt32; target: ProgramTarget; index: UInt32; x: UInt32; y: UInt32; z: UInt32; w: UInt32)>(z_NamedProgramLocalParameterI4uiEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure NamedProgramLocalParameterI4uiEXT(&program: UInt32; target: ProgramTarget; index: UInt32; x: UInt32; y: UInt32; z: UInt32; w: UInt32);
    begin
      z_NamedProgramLocalParameterI4uiEXT_ovr_0(&program, target, index, x, y, z, w);
    end;
    
    public z_NamedProgramLocalParameterI4uivEXT_adr := GetFuncAdr('glNamedProgramLocalParameterI4uivEXT');
    public z_NamedProgramLocalParameterI4uivEXT_ovr_0 := GetFuncOrNil&<procedure(&program: UInt32; target: ProgramTarget; index: UInt32; var &params: UInt32)>(z_NamedProgramLocalParameterI4uivEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure NamedProgramLocalParameterI4uivEXT(&program: UInt32; target: ProgramTarget; index: UInt32; &params: array of UInt32);
    begin
      z_NamedProgramLocalParameterI4uivEXT_ovr_0(&program, target, index, &params[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure NamedProgramLocalParameterI4uivEXT(&program: UInt32; target: ProgramTarget; index: UInt32; var &params: UInt32);
    begin
      z_NamedProgramLocalParameterI4uivEXT_ovr_0(&program, target, index, &params);
    end;
    public z_NamedProgramLocalParameterI4uivEXT_ovr_2 := GetFuncOrNil&<procedure(&program: UInt32; target: ProgramTarget; index: UInt32; &params: IntPtr)>(z_NamedProgramLocalParameterI4uivEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure NamedProgramLocalParameterI4uivEXT(&program: UInt32; target: ProgramTarget; index: UInt32; &params: IntPtr);
    begin
      z_NamedProgramLocalParameterI4uivEXT_ovr_2(&program, target, index, &params);
    end;
    
    public z_NamedProgramLocalParametersI4uivEXT_adr := GetFuncAdr('glNamedProgramLocalParametersI4uivEXT');
    public z_NamedProgramLocalParametersI4uivEXT_ovr_0 := GetFuncOrNil&<procedure(&program: UInt32; target: ProgramTarget; index: UInt32; count: Int32; var &params: UInt32)>(z_NamedProgramLocalParametersI4uivEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure NamedProgramLocalParametersI4uivEXT(&program: UInt32; target: ProgramTarget; index: UInt32; count: Int32; &params: array of UInt32);
    begin
      z_NamedProgramLocalParametersI4uivEXT_ovr_0(&program, target, index, count, &params[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure NamedProgramLocalParametersI4uivEXT(&program: UInt32; target: ProgramTarget; index: UInt32; count: Int32; var &params: UInt32);
    begin
      z_NamedProgramLocalParametersI4uivEXT_ovr_0(&program, target, index, count, &params);
    end;
    public z_NamedProgramLocalParametersI4uivEXT_ovr_2 := GetFuncOrNil&<procedure(&program: UInt32; target: ProgramTarget; index: UInt32; count: Int32; &params: IntPtr)>(z_NamedProgramLocalParametersI4uivEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure NamedProgramLocalParametersI4uivEXT(&program: UInt32; target: ProgramTarget; index: UInt32; count: Int32; &params: IntPtr);
    begin
      z_NamedProgramLocalParametersI4uivEXT_ovr_2(&program, target, index, count, &params);
    end;
    
    public z_GetNamedProgramLocalParameterIivEXT_adr := GetFuncAdr('glGetNamedProgramLocalParameterIivEXT');
    public z_GetNamedProgramLocalParameterIivEXT_ovr_0 := GetFuncOrNil&<procedure(&program: UInt32; target: ProgramTarget; index: UInt32; var &params: Int32)>(z_GetNamedProgramLocalParameterIivEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetNamedProgramLocalParameterIivEXT(&program: UInt32; target: ProgramTarget; index: UInt32; &params: array of Int32);
    begin
      z_GetNamedProgramLocalParameterIivEXT_ovr_0(&program, target, index, &params[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetNamedProgramLocalParameterIivEXT(&program: UInt32; target: ProgramTarget; index: UInt32; var &params: Int32);
    begin
      z_GetNamedProgramLocalParameterIivEXT_ovr_0(&program, target, index, &params);
    end;
    public z_GetNamedProgramLocalParameterIivEXT_ovr_2 := GetFuncOrNil&<procedure(&program: UInt32; target: ProgramTarget; index: UInt32; &params: IntPtr)>(z_GetNamedProgramLocalParameterIivEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetNamedProgramLocalParameterIivEXT(&program: UInt32; target: ProgramTarget; index: UInt32; &params: IntPtr);
    begin
      z_GetNamedProgramLocalParameterIivEXT_ovr_2(&program, target, index, &params);
    end;
    
    public z_GetNamedProgramLocalParameterIuivEXT_adr := GetFuncAdr('glGetNamedProgramLocalParameterIuivEXT');
    public z_GetNamedProgramLocalParameterIuivEXT_ovr_0 := GetFuncOrNil&<procedure(&program: UInt32; target: ProgramTarget; index: UInt32; var &params: UInt32)>(z_GetNamedProgramLocalParameterIuivEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetNamedProgramLocalParameterIuivEXT(&program: UInt32; target: ProgramTarget; index: UInt32; &params: array of UInt32);
    begin
      z_GetNamedProgramLocalParameterIuivEXT_ovr_0(&program, target, index, &params[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetNamedProgramLocalParameterIuivEXT(&program: UInt32; target: ProgramTarget; index: UInt32; var &params: UInt32);
    begin
      z_GetNamedProgramLocalParameterIuivEXT_ovr_0(&program, target, index, &params);
    end;
    public z_GetNamedProgramLocalParameterIuivEXT_ovr_2 := GetFuncOrNil&<procedure(&program: UInt32; target: ProgramTarget; index: UInt32; &params: IntPtr)>(z_GetNamedProgramLocalParameterIuivEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetNamedProgramLocalParameterIuivEXT(&program: UInt32; target: ProgramTarget; index: UInt32; &params: IntPtr);
    begin
      z_GetNamedProgramLocalParameterIuivEXT_ovr_2(&program, target, index, &params);
    end;
    
    public z_EnableClientStateiEXT_adr := GetFuncAdr('glEnableClientStateiEXT');
    public z_EnableClientStateiEXT_ovr_0 := GetFuncOrNil&<procedure(&array: EnableCap; index: UInt32)>(z_EnableClientStateiEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure EnableClientStateiEXT(&array: EnableCap; index: UInt32);
    begin
      z_EnableClientStateiEXT_ovr_0(&array, index);
    end;
    
    public z_DisableClientStateiEXT_adr := GetFuncAdr('glDisableClientStateiEXT');
    public z_DisableClientStateiEXT_ovr_0 := GetFuncOrNil&<procedure(&array: EnableCap; index: UInt32)>(z_DisableClientStateiEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure DisableClientStateiEXT(&array: EnableCap; index: UInt32);
    begin
      z_DisableClientStateiEXT_ovr_0(&array, index);
    end;
    
    public z_GetFloati_vEXT_adr := GetFuncAdr('glGetFloati_vEXT');
    public z_GetFloati_vEXT_ovr_0 := GetFuncOrNil&<procedure(pname: DummyEnum; index: UInt32; var &params: single)>(z_GetFloati_vEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetFloati_vEXT(pname: DummyEnum; index: UInt32; &params: array of single);
    begin
      z_GetFloati_vEXT_ovr_0(pname, index, &params[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetFloati_vEXT(pname: DummyEnum; index: UInt32; var &params: single);
    begin
      z_GetFloati_vEXT_ovr_0(pname, index, &params);
    end;
    public z_GetFloati_vEXT_ovr_2 := GetFuncOrNil&<procedure(pname: DummyEnum; index: UInt32; &params: IntPtr)>(z_GetFloati_vEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetFloati_vEXT(pname: DummyEnum; index: UInt32; &params: IntPtr);
    begin
      z_GetFloati_vEXT_ovr_2(pname, index, &params);
    end;
    
    public z_GetDoublei_vEXT_adr := GetFuncAdr('glGetDoublei_vEXT');
    public z_GetDoublei_vEXT_ovr_0 := GetFuncOrNil&<procedure(pname: DummyEnum; index: UInt32; var &params: real)>(z_GetDoublei_vEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetDoublei_vEXT(pname: DummyEnum; index: UInt32; &params: array of real);
    begin
      z_GetDoublei_vEXT_ovr_0(pname, index, &params[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetDoublei_vEXT(pname: DummyEnum; index: UInt32; var &params: real);
    begin
      z_GetDoublei_vEXT_ovr_0(pname, index, &params);
    end;
    public z_GetDoublei_vEXT_ovr_2 := GetFuncOrNil&<procedure(pname: DummyEnum; index: UInt32; &params: IntPtr)>(z_GetDoublei_vEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetDoublei_vEXT(pname: DummyEnum; index: UInt32; &params: IntPtr);
    begin
      z_GetDoublei_vEXT_ovr_2(pname, index, &params);
    end;
    
    public z_GetPointeri_vEXT_adr := GetFuncAdr('glGetPointeri_vEXT');
    public z_GetPointeri_vEXT_ovr_0 := GetFuncOrNil&<procedure(pname: DummyEnum; index: UInt32; var &params: IntPtr)>(z_GetPointeri_vEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetPointeri_vEXT(pname: DummyEnum; index: UInt32; &params: array of IntPtr);
    begin
      z_GetPointeri_vEXT_ovr_0(pname, index, &params[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetPointeri_vEXT(pname: DummyEnum; index: UInt32; var &params: IntPtr);
    begin
      z_GetPointeri_vEXT_ovr_0(pname, index, &params);
    end;
    public z_GetPointeri_vEXT_ovr_2 := GetFuncOrNil&<procedure(pname: DummyEnum; index: UInt32; &params: pointer)>(z_GetPointeri_vEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetPointeri_vEXT(pname: DummyEnum; index: UInt32; &params: pointer);
    begin
      z_GetPointeri_vEXT_ovr_2(pname, index, &params);
    end;
    
    public z_NamedProgramStringEXT_adr := GetFuncAdr('glNamedProgramStringEXT');
    public z_NamedProgramStringEXT_ovr_0 := GetFuncOrNil&<procedure(&program: UInt32; target: ProgramTarget; format: ProgramFormat; len: Int32; string: IntPtr)>(z_NamedProgramStringEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure NamedProgramStringEXT(&program: UInt32; target: ProgramTarget; format: ProgramFormat; len: Int32; string: IntPtr);
    begin
      z_NamedProgramStringEXT_ovr_0(&program, target, format, len, string);
    end;
    
    public z_NamedProgramLocalParameter4dEXT_adr := GetFuncAdr('glNamedProgramLocalParameter4dEXT');
    public z_NamedProgramLocalParameter4dEXT_ovr_0 := GetFuncOrNil&<procedure(&program: UInt32; target: ProgramTarget; index: UInt32; x: real; y: real; z: real; w: real)>(z_NamedProgramLocalParameter4dEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure NamedProgramLocalParameter4dEXT(&program: UInt32; target: ProgramTarget; index: UInt32; x: real; y: real; z: real; w: real);
    begin
      z_NamedProgramLocalParameter4dEXT_ovr_0(&program, target, index, x, y, z, w);
    end;
    
    public z_NamedProgramLocalParameter4dvEXT_adr := GetFuncAdr('glNamedProgramLocalParameter4dvEXT');
    public z_NamedProgramLocalParameter4dvEXT_ovr_0 := GetFuncOrNil&<procedure(&program: UInt32; target: ProgramTarget; index: UInt32; var &params: real)>(z_NamedProgramLocalParameter4dvEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure NamedProgramLocalParameter4dvEXT(&program: UInt32; target: ProgramTarget; index: UInt32; &params: array of real);
    begin
      z_NamedProgramLocalParameter4dvEXT_ovr_0(&program, target, index, &params[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure NamedProgramLocalParameter4dvEXT(&program: UInt32; target: ProgramTarget; index: UInt32; var &params: real);
    begin
      z_NamedProgramLocalParameter4dvEXT_ovr_0(&program, target, index, &params);
    end;
    public z_NamedProgramLocalParameter4dvEXT_ovr_2 := GetFuncOrNil&<procedure(&program: UInt32; target: ProgramTarget; index: UInt32; &params: IntPtr)>(z_NamedProgramLocalParameter4dvEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure NamedProgramLocalParameter4dvEXT(&program: UInt32; target: ProgramTarget; index: UInt32; &params: IntPtr);
    begin
      z_NamedProgramLocalParameter4dvEXT_ovr_2(&program, target, index, &params);
    end;
    
    public z_NamedProgramLocalParameter4fEXT_adr := GetFuncAdr('glNamedProgramLocalParameter4fEXT');
    public z_NamedProgramLocalParameter4fEXT_ovr_0 := GetFuncOrNil&<procedure(&program: UInt32; target: ProgramTarget; index: UInt32; x: single; y: single; z: single; w: single)>(z_NamedProgramLocalParameter4fEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure NamedProgramLocalParameter4fEXT(&program: UInt32; target: ProgramTarget; index: UInt32; x: single; y: single; z: single; w: single);
    begin
      z_NamedProgramLocalParameter4fEXT_ovr_0(&program, target, index, x, y, z, w);
    end;
    
    public z_NamedProgramLocalParameter4fvEXT_adr := GetFuncAdr('glNamedProgramLocalParameter4fvEXT');
    public z_NamedProgramLocalParameter4fvEXT_ovr_0 := GetFuncOrNil&<procedure(&program: UInt32; target: ProgramTarget; index: UInt32; var &params: single)>(z_NamedProgramLocalParameter4fvEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure NamedProgramLocalParameter4fvEXT(&program: UInt32; target: ProgramTarget; index: UInt32; &params: array of single);
    begin
      z_NamedProgramLocalParameter4fvEXT_ovr_0(&program, target, index, &params[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure NamedProgramLocalParameter4fvEXT(&program: UInt32; target: ProgramTarget; index: UInt32; var &params: single);
    begin
      z_NamedProgramLocalParameter4fvEXT_ovr_0(&program, target, index, &params);
    end;
    public z_NamedProgramLocalParameter4fvEXT_ovr_2 := GetFuncOrNil&<procedure(&program: UInt32; target: ProgramTarget; index: UInt32; &params: IntPtr)>(z_NamedProgramLocalParameter4fvEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure NamedProgramLocalParameter4fvEXT(&program: UInt32; target: ProgramTarget; index: UInt32; &params: IntPtr);
    begin
      z_NamedProgramLocalParameter4fvEXT_ovr_2(&program, target, index, &params);
    end;
    
    public z_GetNamedProgramLocalParameterdvEXT_adr := GetFuncAdr('glGetNamedProgramLocalParameterdvEXT');
    public z_GetNamedProgramLocalParameterdvEXT_ovr_0 := GetFuncOrNil&<procedure(&program: UInt32; target: ProgramTarget; index: UInt32; var &params: real)>(z_GetNamedProgramLocalParameterdvEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetNamedProgramLocalParameterdvEXT(&program: UInt32; target: ProgramTarget; index: UInt32; &params: array of real);
    begin
      z_GetNamedProgramLocalParameterdvEXT_ovr_0(&program, target, index, &params[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetNamedProgramLocalParameterdvEXT(&program: UInt32; target: ProgramTarget; index: UInt32; var &params: real);
    begin
      z_GetNamedProgramLocalParameterdvEXT_ovr_0(&program, target, index, &params);
    end;
    public z_GetNamedProgramLocalParameterdvEXT_ovr_2 := GetFuncOrNil&<procedure(&program: UInt32; target: ProgramTarget; index: UInt32; &params: IntPtr)>(z_GetNamedProgramLocalParameterdvEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetNamedProgramLocalParameterdvEXT(&program: UInt32; target: ProgramTarget; index: UInt32; &params: IntPtr);
    begin
      z_GetNamedProgramLocalParameterdvEXT_ovr_2(&program, target, index, &params);
    end;
    
    public z_GetNamedProgramLocalParameterfvEXT_adr := GetFuncAdr('glGetNamedProgramLocalParameterfvEXT');
    public z_GetNamedProgramLocalParameterfvEXT_ovr_0 := GetFuncOrNil&<procedure(&program: UInt32; target: ProgramTarget; index: UInt32; var &params: single)>(z_GetNamedProgramLocalParameterfvEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetNamedProgramLocalParameterfvEXT(&program: UInt32; target: ProgramTarget; index: UInt32; &params: array of single);
    begin
      z_GetNamedProgramLocalParameterfvEXT_ovr_0(&program, target, index, &params[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetNamedProgramLocalParameterfvEXT(&program: UInt32; target: ProgramTarget; index: UInt32; var &params: single);
    begin
      z_GetNamedProgramLocalParameterfvEXT_ovr_0(&program, target, index, &params);
    end;
    public z_GetNamedProgramLocalParameterfvEXT_ovr_2 := GetFuncOrNil&<procedure(&program: UInt32; target: ProgramTarget; index: UInt32; &params: IntPtr)>(z_GetNamedProgramLocalParameterfvEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetNamedProgramLocalParameterfvEXT(&program: UInt32; target: ProgramTarget; index: UInt32; &params: IntPtr);
    begin
      z_GetNamedProgramLocalParameterfvEXT_ovr_2(&program, target, index, &params);
    end;
    
    public z_GetNamedProgramivEXT_adr := GetFuncAdr('glGetNamedProgramivEXT');
    public z_GetNamedProgramivEXT_ovr_0 := GetFuncOrNil&<procedure(&program: UInt32; target: ProgramTarget; pname: ProgramPropertyARB; var &params: Int32)>(z_GetNamedProgramivEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetNamedProgramivEXT(&program: UInt32; target: ProgramTarget; pname: ProgramPropertyARB; &params: array of Int32);
    begin
      z_GetNamedProgramivEXT_ovr_0(&program, target, pname, &params[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetNamedProgramivEXT(&program: UInt32; target: ProgramTarget; pname: ProgramPropertyARB; var &params: Int32);
    begin
      z_GetNamedProgramivEXT_ovr_0(&program, target, pname, &params);
    end;
    public z_GetNamedProgramivEXT_ovr_2 := GetFuncOrNil&<procedure(&program: UInt32; target: ProgramTarget; pname: ProgramPropertyARB; &params: IntPtr)>(z_GetNamedProgramivEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetNamedProgramivEXT(&program: UInt32; target: ProgramTarget; pname: ProgramPropertyARB; &params: IntPtr);
    begin
      z_GetNamedProgramivEXT_ovr_2(&program, target, pname, &params);
    end;
    
    public z_GetNamedProgramStringEXT_adr := GetFuncAdr('glGetNamedProgramStringEXT');
    public z_GetNamedProgramStringEXT_ovr_0 := GetFuncOrNil&<procedure(&program: UInt32; target: ProgramTarget; pname: ProgramStringProperty; string: IntPtr)>(z_GetNamedProgramStringEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetNamedProgramStringEXT(&program: UInt32; target: ProgramTarget; pname: ProgramStringProperty; string: IntPtr);
    begin
      z_GetNamedProgramStringEXT_ovr_0(&program, target, pname, string);
    end;
    
    public z_NamedRenderbufferStorageEXT_adr := GetFuncAdr('glNamedRenderbufferStorageEXT');
    public z_NamedRenderbufferStorageEXT_ovr_0 := GetFuncOrNil&<procedure(renderbuffer: UInt32; _internalformat: InternalFormat; width: Int32; height: Int32)>(z_NamedRenderbufferStorageEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure NamedRenderbufferStorageEXT(renderbuffer: UInt32; _internalformat: InternalFormat; width: Int32; height: Int32);
    begin
      z_NamedRenderbufferStorageEXT_ovr_0(renderbuffer, _internalformat, width, height);
    end;
    
    public z_GetNamedRenderbufferParameterivEXT_adr := GetFuncAdr('glGetNamedRenderbufferParameterivEXT');
    public z_GetNamedRenderbufferParameterivEXT_ovr_0 := GetFuncOrNil&<procedure(renderbuffer: UInt32; pname: RenderbufferParameterName; var &params: Int32)>(z_GetNamedRenderbufferParameterivEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetNamedRenderbufferParameterivEXT(renderbuffer: UInt32; pname: RenderbufferParameterName; &params: array of Int32);
    begin
      z_GetNamedRenderbufferParameterivEXT_ovr_0(renderbuffer, pname, &params[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetNamedRenderbufferParameterivEXT(renderbuffer: UInt32; pname: RenderbufferParameterName; var &params: Int32);
    begin
      z_GetNamedRenderbufferParameterivEXT_ovr_0(renderbuffer, pname, &params);
    end;
    public z_GetNamedRenderbufferParameterivEXT_ovr_2 := GetFuncOrNil&<procedure(renderbuffer: UInt32; pname: RenderbufferParameterName; &params: IntPtr)>(z_GetNamedRenderbufferParameterivEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetNamedRenderbufferParameterivEXT(renderbuffer: UInt32; pname: RenderbufferParameterName; &params: IntPtr);
    begin
      z_GetNamedRenderbufferParameterivEXT_ovr_2(renderbuffer, pname, &params);
    end;
    
    public z_NamedRenderbufferStorageMultisampleEXT_adr := GetFuncAdr('glNamedRenderbufferStorageMultisampleEXT');
    public z_NamedRenderbufferStorageMultisampleEXT_ovr_0 := GetFuncOrNil&<procedure(renderbuffer: UInt32; samples: Int32; _internalformat: InternalFormat; width: Int32; height: Int32)>(z_NamedRenderbufferStorageMultisampleEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure NamedRenderbufferStorageMultisampleEXT(renderbuffer: UInt32; samples: Int32; _internalformat: InternalFormat; width: Int32; height: Int32);
    begin
      z_NamedRenderbufferStorageMultisampleEXT_ovr_0(renderbuffer, samples, _internalformat, width, height);
    end;
    
    public z_NamedRenderbufferStorageMultisampleCoverageEXT_adr := GetFuncAdr('glNamedRenderbufferStorageMultisampleCoverageEXT');
    public z_NamedRenderbufferStorageMultisampleCoverageEXT_ovr_0 := GetFuncOrNil&<procedure(renderbuffer: UInt32; coverageSamples: Int32; colorSamples: Int32; _internalformat: InternalFormat; width: Int32; height: Int32)>(z_NamedRenderbufferStorageMultisampleCoverageEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure NamedRenderbufferStorageMultisampleCoverageEXT(renderbuffer: UInt32; coverageSamples: Int32; colorSamples: Int32; _internalformat: InternalFormat; width: Int32; height: Int32);
    begin
      z_NamedRenderbufferStorageMultisampleCoverageEXT_ovr_0(renderbuffer, coverageSamples, colorSamples, _internalformat, width, height);
    end;
    
    public z_CheckNamedFramebufferStatusEXT_adr := GetFuncAdr('glCheckNamedFramebufferStatusEXT');
    public z_CheckNamedFramebufferStatusEXT_ovr_0 := GetFuncOrNil&<function(framebuffer: UInt32; target: FramebufferTarget): FramebufferStatus>(z_CheckNamedFramebufferStatusEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function CheckNamedFramebufferStatusEXT(framebuffer: UInt32; target: FramebufferTarget): FramebufferStatus;
    begin
      Result := z_CheckNamedFramebufferStatusEXT_ovr_0(framebuffer, target);
    end;
    
    public z_NamedFramebufferTexture1DEXT_adr := GetFuncAdr('glNamedFramebufferTexture1DEXT');
    public z_NamedFramebufferTexture1DEXT_ovr_0 := GetFuncOrNil&<procedure(framebuffer: UInt32; attachment: FramebufferAttachment; textarget: TextureTarget; texture: UInt32; level: Int32)>(z_NamedFramebufferTexture1DEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure NamedFramebufferTexture1DEXT(framebuffer: UInt32; attachment: FramebufferAttachment; textarget: TextureTarget; texture: UInt32; level: Int32);
    begin
      z_NamedFramebufferTexture1DEXT_ovr_0(framebuffer, attachment, textarget, texture, level);
    end;
    
    public z_NamedFramebufferTexture2DEXT_adr := GetFuncAdr('glNamedFramebufferTexture2DEXT');
    public z_NamedFramebufferTexture2DEXT_ovr_0 := GetFuncOrNil&<procedure(framebuffer: UInt32; attachment: FramebufferAttachment; textarget: TextureTarget; texture: UInt32; level: Int32)>(z_NamedFramebufferTexture2DEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure NamedFramebufferTexture2DEXT(framebuffer: UInt32; attachment: FramebufferAttachment; textarget: TextureTarget; texture: UInt32; level: Int32);
    begin
      z_NamedFramebufferTexture2DEXT_ovr_0(framebuffer, attachment, textarget, texture, level);
    end;
    
    public z_NamedFramebufferTexture3DEXT_adr := GetFuncAdr('glNamedFramebufferTexture3DEXT');
    public z_NamedFramebufferTexture3DEXT_ovr_0 := GetFuncOrNil&<procedure(framebuffer: UInt32; attachment: FramebufferAttachment; textarget: TextureTarget; texture: UInt32; level: Int32; zoffset: Int32)>(z_NamedFramebufferTexture3DEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure NamedFramebufferTexture3DEXT(framebuffer: UInt32; attachment: FramebufferAttachment; textarget: TextureTarget; texture: UInt32; level: Int32; zoffset: Int32);
    begin
      z_NamedFramebufferTexture3DEXT_ovr_0(framebuffer, attachment, textarget, texture, level, zoffset);
    end;
    
    public z_NamedFramebufferRenderbufferEXT_adr := GetFuncAdr('glNamedFramebufferRenderbufferEXT');
    public z_NamedFramebufferRenderbufferEXT_ovr_0 := GetFuncOrNil&<procedure(framebuffer: UInt32; attachment: FramebufferAttachment; _renderbuffertarget: RenderbufferTarget; renderbuffer: UInt32)>(z_NamedFramebufferRenderbufferEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure NamedFramebufferRenderbufferEXT(framebuffer: UInt32; attachment: FramebufferAttachment; _renderbuffertarget: RenderbufferTarget; renderbuffer: UInt32);
    begin
      z_NamedFramebufferRenderbufferEXT_ovr_0(framebuffer, attachment, _renderbuffertarget, renderbuffer);
    end;
    
    public z_GetNamedFramebufferAttachmentParameterivEXT_adr := GetFuncAdr('glGetNamedFramebufferAttachmentParameterivEXT');
    public z_GetNamedFramebufferAttachmentParameterivEXT_ovr_0 := GetFuncOrNil&<procedure(framebuffer: UInt32; attachment: FramebufferAttachment; pname: FramebufferAttachmentParameterName; var &params: Int32)>(z_GetNamedFramebufferAttachmentParameterivEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetNamedFramebufferAttachmentParameterivEXT(framebuffer: UInt32; attachment: FramebufferAttachment; pname: FramebufferAttachmentParameterName; &params: array of Int32);
    begin
      z_GetNamedFramebufferAttachmentParameterivEXT_ovr_0(framebuffer, attachment, pname, &params[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetNamedFramebufferAttachmentParameterivEXT(framebuffer: UInt32; attachment: FramebufferAttachment; pname: FramebufferAttachmentParameterName; var &params: Int32);
    begin
      z_GetNamedFramebufferAttachmentParameterivEXT_ovr_0(framebuffer, attachment, pname, &params);
    end;
    public z_GetNamedFramebufferAttachmentParameterivEXT_ovr_2 := GetFuncOrNil&<procedure(framebuffer: UInt32; attachment: FramebufferAttachment; pname: FramebufferAttachmentParameterName; &params: IntPtr)>(z_GetNamedFramebufferAttachmentParameterivEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetNamedFramebufferAttachmentParameterivEXT(framebuffer: UInt32; attachment: FramebufferAttachment; pname: FramebufferAttachmentParameterName; &params: IntPtr);
    begin
      z_GetNamedFramebufferAttachmentParameterivEXT_ovr_2(framebuffer, attachment, pname, &params);
    end;
    
    public z_GenerateTextureMipmapEXT_adr := GetFuncAdr('glGenerateTextureMipmapEXT');
    public z_GenerateTextureMipmapEXT_ovr_0 := GetFuncOrNil&<procedure(texture: UInt32; target: TextureTarget)>(z_GenerateTextureMipmapEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GenerateTextureMipmapEXT(texture: UInt32; target: TextureTarget);
    begin
      z_GenerateTextureMipmapEXT_ovr_0(texture, target);
    end;
    
    public z_GenerateMultiTexMipmapEXT_adr := GetFuncAdr('glGenerateMultiTexMipmapEXT');
    public z_GenerateMultiTexMipmapEXT_ovr_0 := GetFuncOrNil&<procedure(texunit: TextureUnit; target: TextureTarget)>(z_GenerateMultiTexMipmapEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GenerateMultiTexMipmapEXT(texunit: TextureUnit; target: TextureTarget);
    begin
      z_GenerateMultiTexMipmapEXT_ovr_0(texunit, target);
    end;
    
    public z_FramebufferDrawBufferEXT_adr := GetFuncAdr('glFramebufferDrawBufferEXT');
    public z_FramebufferDrawBufferEXT_ovr_0 := GetFuncOrNil&<procedure(framebuffer: UInt32; mode: DrawBufferMode)>(z_FramebufferDrawBufferEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure FramebufferDrawBufferEXT(framebuffer: UInt32; mode: DrawBufferMode);
    begin
      z_FramebufferDrawBufferEXT_ovr_0(framebuffer, mode);
    end;
    
    public z_FramebufferDrawBuffersEXT_adr := GetFuncAdr('glFramebufferDrawBuffersEXT');
    public z_FramebufferDrawBuffersEXT_ovr_0 := GetFuncOrNil&<procedure(framebuffer: UInt32; n: Int32; var bufs: DrawBufferMode)>(z_FramebufferDrawBuffersEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure FramebufferDrawBuffersEXT(framebuffer: UInt32; n: Int32; bufs: array of DrawBufferMode);
    begin
      z_FramebufferDrawBuffersEXT_ovr_0(framebuffer, n, bufs[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure FramebufferDrawBuffersEXT(framebuffer: UInt32; n: Int32; var bufs: DrawBufferMode);
    begin
      z_FramebufferDrawBuffersEXT_ovr_0(framebuffer, n, bufs);
    end;
    public z_FramebufferDrawBuffersEXT_ovr_2 := GetFuncOrNil&<procedure(framebuffer: UInt32; n: Int32; bufs: IntPtr)>(z_FramebufferDrawBuffersEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure FramebufferDrawBuffersEXT(framebuffer: UInt32; n: Int32; bufs: IntPtr);
    begin
      z_FramebufferDrawBuffersEXT_ovr_2(framebuffer, n, bufs);
    end;
    
    public z_FramebufferReadBufferEXT_adr := GetFuncAdr('glFramebufferReadBufferEXT');
    public z_FramebufferReadBufferEXT_ovr_0 := GetFuncOrNil&<procedure(framebuffer: UInt32; mode: ReadBufferMode)>(z_FramebufferReadBufferEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure FramebufferReadBufferEXT(framebuffer: UInt32; mode: ReadBufferMode);
    begin
      z_FramebufferReadBufferEXT_ovr_0(framebuffer, mode);
    end;
    
    public z_GetFramebufferParameterivEXT_adr := GetFuncAdr('glGetFramebufferParameterivEXT');
    public z_GetFramebufferParameterivEXT_ovr_0 := GetFuncOrNil&<procedure(framebuffer: UInt32; pname: GetFramebufferParameter; var &params: Int32)>(z_GetFramebufferParameterivEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetFramebufferParameterivEXT(framebuffer: UInt32; pname: GetFramebufferParameter; &params: array of Int32);
    begin
      z_GetFramebufferParameterivEXT_ovr_0(framebuffer, pname, &params[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetFramebufferParameterivEXT(framebuffer: UInt32; pname: GetFramebufferParameter; var &params: Int32);
    begin
      z_GetFramebufferParameterivEXT_ovr_0(framebuffer, pname, &params);
    end;
    public z_GetFramebufferParameterivEXT_ovr_2 := GetFuncOrNil&<procedure(framebuffer: UInt32; pname: GetFramebufferParameter; &params: IntPtr)>(z_GetFramebufferParameterivEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetFramebufferParameterivEXT(framebuffer: UInt32; pname: GetFramebufferParameter; &params: IntPtr);
    begin
      z_GetFramebufferParameterivEXT_ovr_2(framebuffer, pname, &params);
    end;
    
    public z_NamedCopyBufferSubDataEXT_adr := GetFuncAdr('glNamedCopyBufferSubDataEXT');
    public z_NamedCopyBufferSubDataEXT_ovr_0 := GetFuncOrNil&<procedure(readBuffer: UInt32; writeBuffer: UInt32; readOffset: IntPtr; writeOffset: IntPtr; size: IntPtr)>(z_NamedCopyBufferSubDataEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure NamedCopyBufferSubDataEXT(readBuffer: UInt32; writeBuffer: UInt32; readOffset: IntPtr; writeOffset: IntPtr; size: IntPtr);
    begin
      z_NamedCopyBufferSubDataEXT_ovr_0(readBuffer, writeBuffer, readOffset, writeOffset, size);
    end;
    
    public z_NamedFramebufferTextureEXT_adr := GetFuncAdr('glNamedFramebufferTextureEXT');
    public z_NamedFramebufferTextureEXT_ovr_0 := GetFuncOrNil&<procedure(framebuffer: UInt32; attachment: FramebufferAttachment; texture: UInt32; level: Int32)>(z_NamedFramebufferTextureEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure NamedFramebufferTextureEXT(framebuffer: UInt32; attachment: FramebufferAttachment; texture: UInt32; level: Int32);
    begin
      z_NamedFramebufferTextureEXT_ovr_0(framebuffer, attachment, texture, level);
    end;
    
    public z_NamedFramebufferTextureLayerEXT_adr := GetFuncAdr('glNamedFramebufferTextureLayerEXT');
    public z_NamedFramebufferTextureLayerEXT_ovr_0 := GetFuncOrNil&<procedure(framebuffer: UInt32; attachment: FramebufferAttachment; texture: UInt32; level: Int32; layer: Int32)>(z_NamedFramebufferTextureLayerEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure NamedFramebufferTextureLayerEXT(framebuffer: UInt32; attachment: FramebufferAttachment; texture: UInt32; level: Int32; layer: Int32);
    begin
      z_NamedFramebufferTextureLayerEXT_ovr_0(framebuffer, attachment, texture, level, layer);
    end;
    
    public z_NamedFramebufferTextureFaceEXT_adr := GetFuncAdr('glNamedFramebufferTextureFaceEXT');
    public z_NamedFramebufferTextureFaceEXT_ovr_0 := GetFuncOrNil&<procedure(framebuffer: UInt32; attachment: FramebufferAttachment; texture: UInt32; level: Int32; face: TextureTarget)>(z_NamedFramebufferTextureFaceEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure NamedFramebufferTextureFaceEXT(framebuffer: UInt32; attachment: FramebufferAttachment; texture: UInt32; level: Int32; face: TextureTarget);
    begin
      z_NamedFramebufferTextureFaceEXT_ovr_0(framebuffer, attachment, texture, level, face);
    end;
    
    public z_TextureRenderbufferEXT_adr := GetFuncAdr('glTextureRenderbufferEXT');
    public z_TextureRenderbufferEXT_ovr_0 := GetFuncOrNil&<procedure(texture: UInt32; target: TextureTarget; renderbuffer: UInt32)>(z_TextureRenderbufferEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TextureRenderbufferEXT(texture: UInt32; target: TextureTarget; renderbuffer: UInt32);
    begin
      z_TextureRenderbufferEXT_ovr_0(texture, target, renderbuffer);
    end;
    
    public z_MultiTexRenderbufferEXT_adr := GetFuncAdr('glMultiTexRenderbufferEXT');
    public z_MultiTexRenderbufferEXT_ovr_0 := GetFuncOrNil&<procedure(texunit: TextureUnit; target: TextureTarget; renderbuffer: UInt32)>(z_MultiTexRenderbufferEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiTexRenderbufferEXT(texunit: TextureUnit; target: TextureTarget; renderbuffer: UInt32);
    begin
      z_MultiTexRenderbufferEXT_ovr_0(texunit, target, renderbuffer);
    end;
    
    public z_VertexArrayVertexOffsetEXT_adr := GetFuncAdr('glVertexArrayVertexOffsetEXT');
    public z_VertexArrayVertexOffsetEXT_ovr_0 := GetFuncOrNil&<procedure(vaobj: UInt32; buffer: UInt32; size: Int32; &type: VertexPointerType; stride: Int32; offset: IntPtr)>(z_VertexArrayVertexOffsetEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexArrayVertexOffsetEXT(vaobj: UInt32; buffer: UInt32; size: Int32; &type: VertexPointerType; stride: Int32; offset: IntPtr);
    begin
      z_VertexArrayVertexOffsetEXT_ovr_0(vaobj, buffer, size, &type, stride, offset);
    end;
    
    public z_VertexArrayColorOffsetEXT_adr := GetFuncAdr('glVertexArrayColorOffsetEXT');
    public z_VertexArrayColorOffsetEXT_ovr_0 := GetFuncOrNil&<procedure(vaobj: UInt32; buffer: UInt32; size: Int32; &type: ColorPointerType; stride: Int32; offset: IntPtr)>(z_VertexArrayColorOffsetEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexArrayColorOffsetEXT(vaobj: UInt32; buffer: UInt32; size: Int32; &type: ColorPointerType; stride: Int32; offset: IntPtr);
    begin
      z_VertexArrayColorOffsetEXT_ovr_0(vaobj, buffer, size, &type, stride, offset);
    end;
    
    public z_VertexArrayEdgeFlagOffsetEXT_adr := GetFuncAdr('glVertexArrayEdgeFlagOffsetEXT');
    public z_VertexArrayEdgeFlagOffsetEXT_ovr_0 := GetFuncOrNil&<procedure(vaobj: UInt32; buffer: UInt32; stride: Int32; offset: IntPtr)>(z_VertexArrayEdgeFlagOffsetEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexArrayEdgeFlagOffsetEXT(vaobj: UInt32; buffer: UInt32; stride: Int32; offset: IntPtr);
    begin
      z_VertexArrayEdgeFlagOffsetEXT_ovr_0(vaobj, buffer, stride, offset);
    end;
    
    public z_VertexArrayIndexOffsetEXT_adr := GetFuncAdr('glVertexArrayIndexOffsetEXT');
    public z_VertexArrayIndexOffsetEXT_ovr_0 := GetFuncOrNil&<procedure(vaobj: UInt32; buffer: UInt32; &type: IndexPointerType; stride: Int32; offset: IntPtr)>(z_VertexArrayIndexOffsetEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexArrayIndexOffsetEXT(vaobj: UInt32; buffer: UInt32; &type: IndexPointerType; stride: Int32; offset: IntPtr);
    begin
      z_VertexArrayIndexOffsetEXT_ovr_0(vaobj, buffer, &type, stride, offset);
    end;
    
    public z_VertexArrayNormalOffsetEXT_adr := GetFuncAdr('glVertexArrayNormalOffsetEXT');
    public z_VertexArrayNormalOffsetEXT_ovr_0 := GetFuncOrNil&<procedure(vaobj: UInt32; buffer: UInt32; &type: NormalPointerType; stride: Int32; offset: IntPtr)>(z_VertexArrayNormalOffsetEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexArrayNormalOffsetEXT(vaobj: UInt32; buffer: UInt32; &type: NormalPointerType; stride: Int32; offset: IntPtr);
    begin
      z_VertexArrayNormalOffsetEXT_ovr_0(vaobj, buffer, &type, stride, offset);
    end;
    
    public z_VertexArrayTexCoordOffsetEXT_adr := GetFuncAdr('glVertexArrayTexCoordOffsetEXT');
    public z_VertexArrayTexCoordOffsetEXT_ovr_0 := GetFuncOrNil&<procedure(vaobj: UInt32; buffer: UInt32; size: Int32; &type: TexCoordPointerType; stride: Int32; offset: IntPtr)>(z_VertexArrayTexCoordOffsetEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexArrayTexCoordOffsetEXT(vaobj: UInt32; buffer: UInt32; size: Int32; &type: TexCoordPointerType; stride: Int32; offset: IntPtr);
    begin
      z_VertexArrayTexCoordOffsetEXT_ovr_0(vaobj, buffer, size, &type, stride, offset);
    end;
    
    public z_VertexArrayMultiTexCoordOffsetEXT_adr := GetFuncAdr('glVertexArrayMultiTexCoordOffsetEXT');
    public z_VertexArrayMultiTexCoordOffsetEXT_ovr_0 := GetFuncOrNil&<procedure(vaobj: UInt32; buffer: UInt32; texunit: DummyEnum; size: Int32; &type: TexCoordPointerType; stride: Int32; offset: IntPtr)>(z_VertexArrayMultiTexCoordOffsetEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexArrayMultiTexCoordOffsetEXT(vaobj: UInt32; buffer: UInt32; texunit: DummyEnum; size: Int32; &type: TexCoordPointerType; stride: Int32; offset: IntPtr);
    begin
      z_VertexArrayMultiTexCoordOffsetEXT_ovr_0(vaobj, buffer, texunit, size, &type, stride, offset);
    end;
    
    public z_VertexArrayFogCoordOffsetEXT_adr := GetFuncAdr('glVertexArrayFogCoordOffsetEXT');
    public z_VertexArrayFogCoordOffsetEXT_ovr_0 := GetFuncOrNil&<procedure(vaobj: UInt32; buffer: UInt32; &type: FogCoordinatePointerType; stride: Int32; offset: IntPtr)>(z_VertexArrayFogCoordOffsetEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexArrayFogCoordOffsetEXT(vaobj: UInt32; buffer: UInt32; &type: FogCoordinatePointerType; stride: Int32; offset: IntPtr);
    begin
      z_VertexArrayFogCoordOffsetEXT_ovr_0(vaobj, buffer, &type, stride, offset);
    end;
    
    public z_VertexArraySecondaryColorOffsetEXT_adr := GetFuncAdr('glVertexArraySecondaryColorOffsetEXT');
    public z_VertexArraySecondaryColorOffsetEXT_ovr_0 := GetFuncOrNil&<procedure(vaobj: UInt32; buffer: UInt32; size: Int32; &type: ColorPointerType; stride: Int32; offset: IntPtr)>(z_VertexArraySecondaryColorOffsetEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexArraySecondaryColorOffsetEXT(vaobj: UInt32; buffer: UInt32; size: Int32; &type: ColorPointerType; stride: Int32; offset: IntPtr);
    begin
      z_VertexArraySecondaryColorOffsetEXT_ovr_0(vaobj, buffer, size, &type, stride, offset);
    end;
    
    public z_VertexArrayVertexAttribOffsetEXT_adr := GetFuncAdr('glVertexArrayVertexAttribOffsetEXT');
    public z_VertexArrayVertexAttribOffsetEXT_ovr_0 := GetFuncOrNil&<procedure(vaobj: UInt32; buffer: UInt32; index: UInt32; size: Int32; &type: VertexAttribPointerType; normalized: boolean; stride: Int32; offset: IntPtr)>(z_VertexArrayVertexAttribOffsetEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexArrayVertexAttribOffsetEXT(vaobj: UInt32; buffer: UInt32; index: UInt32; size: Int32; &type: VertexAttribPointerType; normalized: boolean; stride: Int32; offset: IntPtr);
    begin
      z_VertexArrayVertexAttribOffsetEXT_ovr_0(vaobj, buffer, index, size, &type, normalized, stride, offset);
    end;
    
    public z_VertexArrayVertexAttribIOffsetEXT_adr := GetFuncAdr('glVertexArrayVertexAttribIOffsetEXT');
    public z_VertexArrayVertexAttribIOffsetEXT_ovr_0 := GetFuncOrNil&<procedure(vaobj: UInt32; buffer: UInt32; index: UInt32; size: Int32; &type: VertexAttribType; stride: Int32; offset: IntPtr)>(z_VertexArrayVertexAttribIOffsetEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexArrayVertexAttribIOffsetEXT(vaobj: UInt32; buffer: UInt32; index: UInt32; size: Int32; &type: VertexAttribType; stride: Int32; offset: IntPtr);
    begin
      z_VertexArrayVertexAttribIOffsetEXT_ovr_0(vaobj, buffer, index, size, &type, stride, offset);
    end;
    
    public z_EnableVertexArrayEXT_adr := GetFuncAdr('glEnableVertexArrayEXT');
    public z_EnableVertexArrayEXT_ovr_0 := GetFuncOrNil&<procedure(vaobj: UInt32; &array: EnableCap)>(z_EnableVertexArrayEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure EnableVertexArrayEXT(vaobj: UInt32; &array: EnableCap);
    begin
      z_EnableVertexArrayEXT_ovr_0(vaobj, &array);
    end;
    
    public z_DisableVertexArrayEXT_adr := GetFuncAdr('glDisableVertexArrayEXT');
    public z_DisableVertexArrayEXT_ovr_0 := GetFuncOrNil&<procedure(vaobj: UInt32; &array: EnableCap)>(z_DisableVertexArrayEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure DisableVertexArrayEXT(vaobj: UInt32; &array: EnableCap);
    begin
      z_DisableVertexArrayEXT_ovr_0(vaobj, &array);
    end;
    
    public z_EnableVertexArrayAttribEXT_adr := GetFuncAdr('glEnableVertexArrayAttribEXT');
    public z_EnableVertexArrayAttribEXT_ovr_0 := GetFuncOrNil&<procedure(vaobj: UInt32; index: UInt32)>(z_EnableVertexArrayAttribEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure EnableVertexArrayAttribEXT(vaobj: UInt32; index: UInt32);
    begin
      z_EnableVertexArrayAttribEXT_ovr_0(vaobj, index);
    end;
    
    public z_DisableVertexArrayAttribEXT_adr := GetFuncAdr('glDisableVertexArrayAttribEXT');
    public z_DisableVertexArrayAttribEXT_ovr_0 := GetFuncOrNil&<procedure(vaobj: UInt32; index: UInt32)>(z_DisableVertexArrayAttribEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure DisableVertexArrayAttribEXT(vaobj: UInt32; index: UInt32);
    begin
      z_DisableVertexArrayAttribEXT_ovr_0(vaobj, index);
    end;
    
    public z_GetVertexArrayIntegervEXT_adr := GetFuncAdr('glGetVertexArrayIntegervEXT');
    public z_GetVertexArrayIntegervEXT_ovr_0 := GetFuncOrNil&<procedure(vaobj: UInt32; pname: VertexArrayPName; var param: Int32)>(z_GetVertexArrayIntegervEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetVertexArrayIntegervEXT(vaobj: UInt32; pname: VertexArrayPName; param: array of Int32);
    begin
      z_GetVertexArrayIntegervEXT_ovr_0(vaobj, pname, param[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetVertexArrayIntegervEXT(vaobj: UInt32; pname: VertexArrayPName; var param: Int32);
    begin
      z_GetVertexArrayIntegervEXT_ovr_0(vaobj, pname, param);
    end;
    public z_GetVertexArrayIntegervEXT_ovr_2 := GetFuncOrNil&<procedure(vaobj: UInt32; pname: VertexArrayPName; param: IntPtr)>(z_GetVertexArrayIntegervEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetVertexArrayIntegervEXT(vaobj: UInt32; pname: VertexArrayPName; param: IntPtr);
    begin
      z_GetVertexArrayIntegervEXT_ovr_2(vaobj, pname, param);
    end;
    
    public z_GetVertexArrayPointervEXT_adr := GetFuncAdr('glGetVertexArrayPointervEXT');
    public z_GetVertexArrayPointervEXT_ovr_0 := GetFuncOrNil&<procedure(vaobj: UInt32; pname: VertexArrayPName; var param: IntPtr)>(z_GetVertexArrayPointervEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetVertexArrayPointervEXT(vaobj: UInt32; pname: VertexArrayPName; param: array of IntPtr);
    begin
      z_GetVertexArrayPointervEXT_ovr_0(vaobj, pname, param[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetVertexArrayPointervEXT(vaobj: UInt32; pname: VertexArrayPName; var param: IntPtr);
    begin
      z_GetVertexArrayPointervEXT_ovr_0(vaobj, pname, param);
    end;
    public z_GetVertexArrayPointervEXT_ovr_2 := GetFuncOrNil&<procedure(vaobj: UInt32; pname: VertexArrayPName; param: pointer)>(z_GetVertexArrayPointervEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetVertexArrayPointervEXT(vaobj: UInt32; pname: VertexArrayPName; param: pointer);
    begin
      z_GetVertexArrayPointervEXT_ovr_2(vaobj, pname, param);
    end;
    
    public z_GetVertexArrayIntegeri_vEXT_adr := GetFuncAdr('glGetVertexArrayIntegeri_vEXT');
    public z_GetVertexArrayIntegeri_vEXT_ovr_0 := GetFuncOrNil&<procedure(vaobj: UInt32; index: UInt32; pname: VertexArrayPName; var param: Int32)>(z_GetVertexArrayIntegeri_vEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetVertexArrayIntegeri_vEXT(vaobj: UInt32; index: UInt32; pname: VertexArrayPName; param: array of Int32);
    begin
      z_GetVertexArrayIntegeri_vEXT_ovr_0(vaobj, index, pname, param[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetVertexArrayIntegeri_vEXT(vaobj: UInt32; index: UInt32; pname: VertexArrayPName; var param: Int32);
    begin
      z_GetVertexArrayIntegeri_vEXT_ovr_0(vaobj, index, pname, param);
    end;
    public z_GetVertexArrayIntegeri_vEXT_ovr_2 := GetFuncOrNil&<procedure(vaobj: UInt32; index: UInt32; pname: VertexArrayPName; param: IntPtr)>(z_GetVertexArrayIntegeri_vEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetVertexArrayIntegeri_vEXT(vaobj: UInt32; index: UInt32; pname: VertexArrayPName; param: IntPtr);
    begin
      z_GetVertexArrayIntegeri_vEXT_ovr_2(vaobj, index, pname, param);
    end;
    
    public z_GetVertexArrayPointeri_vEXT_adr := GetFuncAdr('glGetVertexArrayPointeri_vEXT');
    public z_GetVertexArrayPointeri_vEXT_ovr_0 := GetFuncOrNil&<procedure(vaobj: UInt32; index: UInt32; pname: VertexArrayPName; var param: IntPtr)>(z_GetVertexArrayPointeri_vEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetVertexArrayPointeri_vEXT(vaobj: UInt32; index: UInt32; pname: VertexArrayPName; param: array of IntPtr);
    begin
      z_GetVertexArrayPointeri_vEXT_ovr_0(vaobj, index, pname, param[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetVertexArrayPointeri_vEXT(vaobj: UInt32; index: UInt32; pname: VertexArrayPName; var param: IntPtr);
    begin
      z_GetVertexArrayPointeri_vEXT_ovr_0(vaobj, index, pname, param);
    end;
    public z_GetVertexArrayPointeri_vEXT_ovr_2 := GetFuncOrNil&<procedure(vaobj: UInt32; index: UInt32; pname: VertexArrayPName; param: pointer)>(z_GetVertexArrayPointeri_vEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetVertexArrayPointeri_vEXT(vaobj: UInt32; index: UInt32; pname: VertexArrayPName; param: pointer);
    begin
      z_GetVertexArrayPointeri_vEXT_ovr_2(vaobj, index, pname, param);
    end;
    
    public z_MapNamedBufferRangeEXT_adr := GetFuncAdr('glMapNamedBufferRangeEXT');
    public z_MapNamedBufferRangeEXT_ovr_0 := GetFuncOrNil&<function(buffer: UInt32; offset: IntPtr; length: IntPtr; access: MapBufferAccessMask): IntPtr>(z_MapNamedBufferRangeEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function MapNamedBufferRangeEXT(buffer: UInt32; offset: IntPtr; length: IntPtr; access: MapBufferAccessMask): IntPtr;
    begin
      Result := z_MapNamedBufferRangeEXT_ovr_0(buffer, offset, length, access);
    end;
    
    public z_FlushMappedNamedBufferRangeEXT_adr := GetFuncAdr('glFlushMappedNamedBufferRangeEXT');
    public z_FlushMappedNamedBufferRangeEXT_ovr_0 := GetFuncOrNil&<procedure(buffer: UInt32; offset: IntPtr; length: IntPtr)>(z_FlushMappedNamedBufferRangeEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure FlushMappedNamedBufferRangeEXT(buffer: UInt32; offset: IntPtr; length: IntPtr);
    begin
      z_FlushMappedNamedBufferRangeEXT_ovr_0(buffer, offset, length);
    end;
    
    public z_NamedBufferStorageEXT_adr := GetFuncAdr('glNamedBufferStorageEXT');
    public z_NamedBufferStorageEXT_ovr_0 := GetFuncOrNil&<procedure(buffer: UInt32; size: IntPtr; data: IntPtr; flags: BufferStorageMask)>(z_NamedBufferStorageEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure NamedBufferStorageEXT(buffer: UInt32; size: IntPtr; data: IntPtr; flags: BufferStorageMask);
    begin
      z_NamedBufferStorageEXT_ovr_0(buffer, size, data, flags);
    end;
    
    public z_ClearNamedBufferDataEXT_adr := GetFuncAdr('glClearNamedBufferDataEXT');
    public z_ClearNamedBufferDataEXT_ovr_0 := GetFuncOrNil&<procedure(buffer: UInt32; _internalformat: InternalFormat; format: PixelFormat; &type: PixelType; data: IntPtr)>(z_ClearNamedBufferDataEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ClearNamedBufferDataEXT(buffer: UInt32; _internalformat: InternalFormat; format: PixelFormat; &type: PixelType; data: IntPtr);
    begin
      z_ClearNamedBufferDataEXT_ovr_0(buffer, _internalformat, format, &type, data);
    end;
    
    public z_ClearNamedBufferSubDataEXT_adr := GetFuncAdr('glClearNamedBufferSubDataEXT');
    public z_ClearNamedBufferSubDataEXT_ovr_0 := GetFuncOrNil&<procedure(buffer: UInt32; internalformat: DummyEnum; offset: IntPtr; size: IntPtr; format: PixelFormat; &type: PixelType; data: IntPtr)>(z_ClearNamedBufferSubDataEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ClearNamedBufferSubDataEXT(buffer: UInt32; internalformat: DummyEnum; offset: IntPtr; size: IntPtr; format: PixelFormat; &type: PixelType; data: IntPtr);
    begin
      z_ClearNamedBufferSubDataEXT_ovr_0(buffer, internalformat, offset, size, format, &type, data);
    end;
    
    public z_NamedFramebufferParameteriEXT_adr := GetFuncAdr('glNamedFramebufferParameteriEXT');
    public z_NamedFramebufferParameteriEXT_ovr_0 := GetFuncOrNil&<procedure(framebuffer: UInt32; pname: FramebufferParameterName; param: Int32)>(z_NamedFramebufferParameteriEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure NamedFramebufferParameteriEXT(framebuffer: UInt32; pname: FramebufferParameterName; param: Int32);
    begin
      z_NamedFramebufferParameteriEXT_ovr_0(framebuffer, pname, param);
    end;
    
    public z_GetNamedFramebufferParameterivEXT_adr := GetFuncAdr('glGetNamedFramebufferParameterivEXT');
    public z_GetNamedFramebufferParameterivEXT_ovr_0 := GetFuncOrNil&<procedure(framebuffer: UInt32; pname: GetFramebufferParameter; var &params: Int32)>(z_GetNamedFramebufferParameterivEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetNamedFramebufferParameterivEXT(framebuffer: UInt32; pname: GetFramebufferParameter; &params: array of Int32);
    begin
      z_GetNamedFramebufferParameterivEXT_ovr_0(framebuffer, pname, &params[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetNamedFramebufferParameterivEXT(framebuffer: UInt32; pname: GetFramebufferParameter; var &params: Int32);
    begin
      z_GetNamedFramebufferParameterivEXT_ovr_0(framebuffer, pname, &params);
    end;
    public z_GetNamedFramebufferParameterivEXT_ovr_2 := GetFuncOrNil&<procedure(framebuffer: UInt32; pname: GetFramebufferParameter; &params: IntPtr)>(z_GetNamedFramebufferParameterivEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetNamedFramebufferParameterivEXT(framebuffer: UInt32; pname: GetFramebufferParameter; &params: IntPtr);
    begin
      z_GetNamedFramebufferParameterivEXT_ovr_2(framebuffer, pname, &params);
    end;
    
    public z_ProgramUniform1dEXT_adr := GetFuncAdr('glProgramUniform1dEXT');
    public z_ProgramUniform1dEXT_ovr_0 := GetFuncOrNil&<procedure(&program: UInt32; location: Int32; x: real)>(z_ProgramUniform1dEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniform1dEXT(&program: UInt32; location: Int32; x: real);
    begin
      z_ProgramUniform1dEXT_ovr_0(&program, location, x);
    end;
    
    public z_ProgramUniform2dEXT_adr := GetFuncAdr('glProgramUniform2dEXT');
    public z_ProgramUniform2dEXT_ovr_0 := GetFuncOrNil&<procedure(&program: UInt32; location: Int32; x: real; y: real)>(z_ProgramUniform2dEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniform2dEXT(&program: UInt32; location: Int32; x: real; y: real);
    begin
      z_ProgramUniform2dEXT_ovr_0(&program, location, x, y);
    end;
    
    public z_ProgramUniform3dEXT_adr := GetFuncAdr('glProgramUniform3dEXT');
    public z_ProgramUniform3dEXT_ovr_0 := GetFuncOrNil&<procedure(&program: UInt32; location: Int32; x: real; y: real; z: real)>(z_ProgramUniform3dEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniform3dEXT(&program: UInt32; location: Int32; x: real; y: real; z: real);
    begin
      z_ProgramUniform3dEXT_ovr_0(&program, location, x, y, z);
    end;
    
    public z_ProgramUniform4dEXT_adr := GetFuncAdr('glProgramUniform4dEXT');
    public z_ProgramUniform4dEXT_ovr_0 := GetFuncOrNil&<procedure(&program: UInt32; location: Int32; x: real; y: real; z: real; w: real)>(z_ProgramUniform4dEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniform4dEXT(&program: UInt32; location: Int32; x: real; y: real; z: real; w: real);
    begin
      z_ProgramUniform4dEXT_ovr_0(&program, location, x, y, z, w);
    end;
    
    public z_ProgramUniform1dvEXT_adr := GetFuncAdr('glProgramUniform1dvEXT');
    public z_ProgramUniform1dvEXT_ovr_0 := GetFuncOrNil&<procedure(&program: UInt32; location: Int32; count: Int32; var value: real)>(z_ProgramUniform1dvEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniform1dvEXT(&program: UInt32; location: Int32; count: Int32; value: array of real);
    begin
      z_ProgramUniform1dvEXT_ovr_0(&program, location, count, value[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniform1dvEXT(&program: UInt32; location: Int32; count: Int32; var value: real);
    begin
      z_ProgramUniform1dvEXT_ovr_0(&program, location, count, value);
    end;
    public z_ProgramUniform1dvEXT_ovr_2 := GetFuncOrNil&<procedure(&program: UInt32; location: Int32; count: Int32; value: IntPtr)>(z_ProgramUniform1dvEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniform1dvEXT(&program: UInt32; location: Int32; count: Int32; value: IntPtr);
    begin
      z_ProgramUniform1dvEXT_ovr_2(&program, location, count, value);
    end;
    
    public z_ProgramUniform2dvEXT_adr := GetFuncAdr('glProgramUniform2dvEXT');
    public z_ProgramUniform2dvEXT_ovr_0 := GetFuncOrNil&<procedure(&program: UInt32; location: Int32; count: Int32; var value: real)>(z_ProgramUniform2dvEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniform2dvEXT(&program: UInt32; location: Int32; count: Int32; value: array of real);
    begin
      z_ProgramUniform2dvEXT_ovr_0(&program, location, count, value[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniform2dvEXT(&program: UInt32; location: Int32; count: Int32; var value: real);
    begin
      z_ProgramUniform2dvEXT_ovr_0(&program, location, count, value);
    end;
    public z_ProgramUniform2dvEXT_ovr_2 := GetFuncOrNil&<procedure(&program: UInt32; location: Int32; count: Int32; value: IntPtr)>(z_ProgramUniform2dvEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniform2dvEXT(&program: UInt32; location: Int32; count: Int32; value: IntPtr);
    begin
      z_ProgramUniform2dvEXT_ovr_2(&program, location, count, value);
    end;
    
    public z_ProgramUniform3dvEXT_adr := GetFuncAdr('glProgramUniform3dvEXT');
    public z_ProgramUniform3dvEXT_ovr_0 := GetFuncOrNil&<procedure(&program: UInt32; location: Int32; count: Int32; var value: real)>(z_ProgramUniform3dvEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniform3dvEXT(&program: UInt32; location: Int32; count: Int32; value: array of real);
    begin
      z_ProgramUniform3dvEXT_ovr_0(&program, location, count, value[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniform3dvEXT(&program: UInt32; location: Int32; count: Int32; var value: real);
    begin
      z_ProgramUniform3dvEXT_ovr_0(&program, location, count, value);
    end;
    public z_ProgramUniform3dvEXT_ovr_2 := GetFuncOrNil&<procedure(&program: UInt32; location: Int32; count: Int32; value: IntPtr)>(z_ProgramUniform3dvEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniform3dvEXT(&program: UInt32; location: Int32; count: Int32; value: IntPtr);
    begin
      z_ProgramUniform3dvEXT_ovr_2(&program, location, count, value);
    end;
    
    public z_ProgramUniform4dvEXT_adr := GetFuncAdr('glProgramUniform4dvEXT');
    public z_ProgramUniform4dvEXT_ovr_0 := GetFuncOrNil&<procedure(&program: UInt32; location: Int32; count: Int32; var value: real)>(z_ProgramUniform4dvEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniform4dvEXT(&program: UInt32; location: Int32; count: Int32; value: array of real);
    begin
      z_ProgramUniform4dvEXT_ovr_0(&program, location, count, value[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniform4dvEXT(&program: UInt32; location: Int32; count: Int32; var value: real);
    begin
      z_ProgramUniform4dvEXT_ovr_0(&program, location, count, value);
    end;
    public z_ProgramUniform4dvEXT_ovr_2 := GetFuncOrNil&<procedure(&program: UInt32; location: Int32; count: Int32; value: IntPtr)>(z_ProgramUniform4dvEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniform4dvEXT(&program: UInt32; location: Int32; count: Int32; value: IntPtr);
    begin
      z_ProgramUniform4dvEXT_ovr_2(&program, location, count, value);
    end;
    
    public z_ProgramUniformMatrix2dvEXT_adr := GetFuncAdr('glProgramUniformMatrix2dvEXT');
    public z_ProgramUniformMatrix2dvEXT_ovr_0 := GetFuncOrNil&<procedure(&program: UInt32; location: Int32; count: Int32; transpose: boolean; var value: real)>(z_ProgramUniformMatrix2dvEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniformMatrix2dvEXT(&program: UInt32; location: Int32; count: Int32; transpose: boolean; value: array of real);
    begin
      z_ProgramUniformMatrix2dvEXT_ovr_0(&program, location, count, transpose, value[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniformMatrix2dvEXT(&program: UInt32; location: Int32; count: Int32; transpose: boolean; var value: real);
    begin
      z_ProgramUniformMatrix2dvEXT_ovr_0(&program, location, count, transpose, value);
    end;
    public z_ProgramUniformMatrix2dvEXT_ovr_2 := GetFuncOrNil&<procedure(&program: UInt32; location: Int32; count: Int32; transpose: boolean; value: IntPtr)>(z_ProgramUniformMatrix2dvEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniformMatrix2dvEXT(&program: UInt32; location: Int32; count: Int32; transpose: boolean; value: IntPtr);
    begin
      z_ProgramUniformMatrix2dvEXT_ovr_2(&program, location, count, transpose, value);
    end;
    
    public z_ProgramUniformMatrix3dvEXT_adr := GetFuncAdr('glProgramUniformMatrix3dvEXT');
    public z_ProgramUniformMatrix3dvEXT_ovr_0 := GetFuncOrNil&<procedure(&program: UInt32; location: Int32; count: Int32; transpose: boolean; var value: real)>(z_ProgramUniformMatrix3dvEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniformMatrix3dvEXT(&program: UInt32; location: Int32; count: Int32; transpose: boolean; value: array of real);
    begin
      z_ProgramUniformMatrix3dvEXT_ovr_0(&program, location, count, transpose, value[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniformMatrix3dvEXT(&program: UInt32; location: Int32; count: Int32; transpose: boolean; var value: real);
    begin
      z_ProgramUniformMatrix3dvEXT_ovr_0(&program, location, count, transpose, value);
    end;
    public z_ProgramUniformMatrix3dvEXT_ovr_2 := GetFuncOrNil&<procedure(&program: UInt32; location: Int32; count: Int32; transpose: boolean; value: IntPtr)>(z_ProgramUniformMatrix3dvEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniformMatrix3dvEXT(&program: UInt32; location: Int32; count: Int32; transpose: boolean; value: IntPtr);
    begin
      z_ProgramUniformMatrix3dvEXT_ovr_2(&program, location, count, transpose, value);
    end;
    
    public z_ProgramUniformMatrix4dvEXT_adr := GetFuncAdr('glProgramUniformMatrix4dvEXT');
    public z_ProgramUniformMatrix4dvEXT_ovr_0 := GetFuncOrNil&<procedure(&program: UInt32; location: Int32; count: Int32; transpose: boolean; var value: real)>(z_ProgramUniformMatrix4dvEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniformMatrix4dvEXT(&program: UInt32; location: Int32; count: Int32; transpose: boolean; value: array of real);
    begin
      z_ProgramUniformMatrix4dvEXT_ovr_0(&program, location, count, transpose, value[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniformMatrix4dvEXT(&program: UInt32; location: Int32; count: Int32; transpose: boolean; var value: real);
    begin
      z_ProgramUniformMatrix4dvEXT_ovr_0(&program, location, count, transpose, value);
    end;
    public z_ProgramUniformMatrix4dvEXT_ovr_2 := GetFuncOrNil&<procedure(&program: UInt32; location: Int32; count: Int32; transpose: boolean; value: IntPtr)>(z_ProgramUniformMatrix4dvEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniformMatrix4dvEXT(&program: UInt32; location: Int32; count: Int32; transpose: boolean; value: IntPtr);
    begin
      z_ProgramUniformMatrix4dvEXT_ovr_2(&program, location, count, transpose, value);
    end;
    
    public z_ProgramUniformMatrix2x3dvEXT_adr := GetFuncAdr('glProgramUniformMatrix2x3dvEXT');
    public z_ProgramUniformMatrix2x3dvEXT_ovr_0 := GetFuncOrNil&<procedure(&program: UInt32; location: Int32; count: Int32; transpose: boolean; var value: real)>(z_ProgramUniformMatrix2x3dvEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniformMatrix2x3dvEXT(&program: UInt32; location: Int32; count: Int32; transpose: boolean; value: array of real);
    begin
      z_ProgramUniformMatrix2x3dvEXT_ovr_0(&program, location, count, transpose, value[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniformMatrix2x3dvEXT(&program: UInt32; location: Int32; count: Int32; transpose: boolean; var value: real);
    begin
      z_ProgramUniformMatrix2x3dvEXT_ovr_0(&program, location, count, transpose, value);
    end;
    public z_ProgramUniformMatrix2x3dvEXT_ovr_2 := GetFuncOrNil&<procedure(&program: UInt32; location: Int32; count: Int32; transpose: boolean; value: IntPtr)>(z_ProgramUniformMatrix2x3dvEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniformMatrix2x3dvEXT(&program: UInt32; location: Int32; count: Int32; transpose: boolean; value: IntPtr);
    begin
      z_ProgramUniformMatrix2x3dvEXT_ovr_2(&program, location, count, transpose, value);
    end;
    
    public z_ProgramUniformMatrix2x4dvEXT_adr := GetFuncAdr('glProgramUniformMatrix2x4dvEXT');
    public z_ProgramUniformMatrix2x4dvEXT_ovr_0 := GetFuncOrNil&<procedure(&program: UInt32; location: Int32; count: Int32; transpose: boolean; var value: real)>(z_ProgramUniformMatrix2x4dvEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniformMatrix2x4dvEXT(&program: UInt32; location: Int32; count: Int32; transpose: boolean; value: array of real);
    begin
      z_ProgramUniformMatrix2x4dvEXT_ovr_0(&program, location, count, transpose, value[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniformMatrix2x4dvEXT(&program: UInt32; location: Int32; count: Int32; transpose: boolean; var value: real);
    begin
      z_ProgramUniformMatrix2x4dvEXT_ovr_0(&program, location, count, transpose, value);
    end;
    public z_ProgramUniformMatrix2x4dvEXT_ovr_2 := GetFuncOrNil&<procedure(&program: UInt32; location: Int32; count: Int32; transpose: boolean; value: IntPtr)>(z_ProgramUniformMatrix2x4dvEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniformMatrix2x4dvEXT(&program: UInt32; location: Int32; count: Int32; transpose: boolean; value: IntPtr);
    begin
      z_ProgramUniformMatrix2x4dvEXT_ovr_2(&program, location, count, transpose, value);
    end;
    
    public z_ProgramUniformMatrix3x2dvEXT_adr := GetFuncAdr('glProgramUniformMatrix3x2dvEXT');
    public z_ProgramUniformMatrix3x2dvEXT_ovr_0 := GetFuncOrNil&<procedure(&program: UInt32; location: Int32; count: Int32; transpose: boolean; var value: real)>(z_ProgramUniformMatrix3x2dvEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniformMatrix3x2dvEXT(&program: UInt32; location: Int32; count: Int32; transpose: boolean; value: array of real);
    begin
      z_ProgramUniformMatrix3x2dvEXT_ovr_0(&program, location, count, transpose, value[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniformMatrix3x2dvEXT(&program: UInt32; location: Int32; count: Int32; transpose: boolean; var value: real);
    begin
      z_ProgramUniformMatrix3x2dvEXT_ovr_0(&program, location, count, transpose, value);
    end;
    public z_ProgramUniformMatrix3x2dvEXT_ovr_2 := GetFuncOrNil&<procedure(&program: UInt32; location: Int32; count: Int32; transpose: boolean; value: IntPtr)>(z_ProgramUniformMatrix3x2dvEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniformMatrix3x2dvEXT(&program: UInt32; location: Int32; count: Int32; transpose: boolean; value: IntPtr);
    begin
      z_ProgramUniformMatrix3x2dvEXT_ovr_2(&program, location, count, transpose, value);
    end;
    
    public z_ProgramUniformMatrix3x4dvEXT_adr := GetFuncAdr('glProgramUniformMatrix3x4dvEXT');
    public z_ProgramUniformMatrix3x4dvEXT_ovr_0 := GetFuncOrNil&<procedure(&program: UInt32; location: Int32; count: Int32; transpose: boolean; var value: real)>(z_ProgramUniformMatrix3x4dvEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniformMatrix3x4dvEXT(&program: UInt32; location: Int32; count: Int32; transpose: boolean; value: array of real);
    begin
      z_ProgramUniformMatrix3x4dvEXT_ovr_0(&program, location, count, transpose, value[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniformMatrix3x4dvEXT(&program: UInt32; location: Int32; count: Int32; transpose: boolean; var value: real);
    begin
      z_ProgramUniformMatrix3x4dvEXT_ovr_0(&program, location, count, transpose, value);
    end;
    public z_ProgramUniformMatrix3x4dvEXT_ovr_2 := GetFuncOrNil&<procedure(&program: UInt32; location: Int32; count: Int32; transpose: boolean; value: IntPtr)>(z_ProgramUniformMatrix3x4dvEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniformMatrix3x4dvEXT(&program: UInt32; location: Int32; count: Int32; transpose: boolean; value: IntPtr);
    begin
      z_ProgramUniformMatrix3x4dvEXT_ovr_2(&program, location, count, transpose, value);
    end;
    
    public z_ProgramUniformMatrix4x2dvEXT_adr := GetFuncAdr('glProgramUniformMatrix4x2dvEXT');
    public z_ProgramUniformMatrix4x2dvEXT_ovr_0 := GetFuncOrNil&<procedure(&program: UInt32; location: Int32; count: Int32; transpose: boolean; var value: real)>(z_ProgramUniformMatrix4x2dvEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniformMatrix4x2dvEXT(&program: UInt32; location: Int32; count: Int32; transpose: boolean; value: array of real);
    begin
      z_ProgramUniformMatrix4x2dvEXT_ovr_0(&program, location, count, transpose, value[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniformMatrix4x2dvEXT(&program: UInt32; location: Int32; count: Int32; transpose: boolean; var value: real);
    begin
      z_ProgramUniformMatrix4x2dvEXT_ovr_0(&program, location, count, transpose, value);
    end;
    public z_ProgramUniformMatrix4x2dvEXT_ovr_2 := GetFuncOrNil&<procedure(&program: UInt32; location: Int32; count: Int32; transpose: boolean; value: IntPtr)>(z_ProgramUniformMatrix4x2dvEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniformMatrix4x2dvEXT(&program: UInt32; location: Int32; count: Int32; transpose: boolean; value: IntPtr);
    begin
      z_ProgramUniformMatrix4x2dvEXT_ovr_2(&program, location, count, transpose, value);
    end;
    
    public z_ProgramUniformMatrix4x3dvEXT_adr := GetFuncAdr('glProgramUniformMatrix4x3dvEXT');
    public z_ProgramUniformMatrix4x3dvEXT_ovr_0 := GetFuncOrNil&<procedure(&program: UInt32; location: Int32; count: Int32; transpose: boolean; var value: real)>(z_ProgramUniformMatrix4x3dvEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniformMatrix4x3dvEXT(&program: UInt32; location: Int32; count: Int32; transpose: boolean; value: array of real);
    begin
      z_ProgramUniformMatrix4x3dvEXT_ovr_0(&program, location, count, transpose, value[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniformMatrix4x3dvEXT(&program: UInt32; location: Int32; count: Int32; transpose: boolean; var value: real);
    begin
      z_ProgramUniformMatrix4x3dvEXT_ovr_0(&program, location, count, transpose, value);
    end;
    public z_ProgramUniformMatrix4x3dvEXT_ovr_2 := GetFuncOrNil&<procedure(&program: UInt32; location: Int32; count: Int32; transpose: boolean; value: IntPtr)>(z_ProgramUniformMatrix4x3dvEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniformMatrix4x3dvEXT(&program: UInt32; location: Int32; count: Int32; transpose: boolean; value: IntPtr);
    begin
      z_ProgramUniformMatrix4x3dvEXT_ovr_2(&program, location, count, transpose, value);
    end;
    
    public z_TextureBufferRangeEXT_adr := GetFuncAdr('glTextureBufferRangeEXT');
    public z_TextureBufferRangeEXT_ovr_0 := GetFuncOrNil&<procedure(texture: UInt32; target: TextureTarget; _internalformat: InternalFormat; buffer: UInt32; offset: IntPtr; size: IntPtr)>(z_TextureBufferRangeEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TextureBufferRangeEXT(texture: UInt32; target: TextureTarget; _internalformat: InternalFormat; buffer: UInt32; offset: IntPtr; size: IntPtr);
    begin
      z_TextureBufferRangeEXT_ovr_0(texture, target, _internalformat, buffer, offset, size);
    end;
    
    public z_TextureStorage1DEXT_adr := GetFuncAdr('glTextureStorage1DEXT');
    public z_TextureStorage1DEXT_ovr_0 := GetFuncOrNil&<procedure(texture: UInt32; target: DummyEnum; levels: Int32; _internalformat: InternalFormat; width: Int32)>(z_TextureStorage1DEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TextureStorage1DEXT(texture: UInt32; target: DummyEnum; levels: Int32; _internalformat: InternalFormat; width: Int32);
    begin
      z_TextureStorage1DEXT_ovr_0(texture, target, levels, _internalformat, width);
    end;
    
    public z_TextureStorage2DEXT_adr := GetFuncAdr('glTextureStorage2DEXT');
    public z_TextureStorage2DEXT_ovr_0 := GetFuncOrNil&<procedure(texture: UInt32; target: DummyEnum; levels: Int32; _internalformat: InternalFormat; width: Int32; height: Int32)>(z_TextureStorage2DEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TextureStorage2DEXT(texture: UInt32; target: DummyEnum; levels: Int32; _internalformat: InternalFormat; width: Int32; height: Int32);
    begin
      z_TextureStorage2DEXT_ovr_0(texture, target, levels, _internalformat, width, height);
    end;
    
    public z_TextureStorage3DEXT_adr := GetFuncAdr('glTextureStorage3DEXT');
    public z_TextureStorage3DEXT_ovr_0 := GetFuncOrNil&<procedure(texture: UInt32; target: DummyEnum; levels: Int32; _internalformat: InternalFormat; width: Int32; height: Int32; depth: Int32)>(z_TextureStorage3DEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TextureStorage3DEXT(texture: UInt32; target: DummyEnum; levels: Int32; _internalformat: InternalFormat; width: Int32; height: Int32; depth: Int32);
    begin
      z_TextureStorage3DEXT_ovr_0(texture, target, levels, _internalformat, width, height, depth);
    end;
    
    public z_TextureStorage2DMultisampleEXT_adr := GetFuncAdr('glTextureStorage2DMultisampleEXT');
    public z_TextureStorage2DMultisampleEXT_ovr_0 := GetFuncOrNil&<procedure(texture: UInt32; target: TextureTarget; samples: Int32; _internalformat: InternalFormat; width: Int32; height: Int32; fixedsamplelocations: boolean)>(z_TextureStorage2DMultisampleEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TextureStorage2DMultisampleEXT(texture: UInt32; target: TextureTarget; samples: Int32; _internalformat: InternalFormat; width: Int32; height: Int32; fixedsamplelocations: boolean);
    begin
      z_TextureStorage2DMultisampleEXT_ovr_0(texture, target, samples, _internalformat, width, height, fixedsamplelocations);
    end;
    
    public z_TextureStorage3DMultisampleEXT_adr := GetFuncAdr('glTextureStorage3DMultisampleEXT');
    public z_TextureStorage3DMultisampleEXT_ovr_0 := GetFuncOrNil&<procedure(texture: UInt32; target: DummyEnum; samples: Int32; _internalformat: InternalFormat; width: Int32; height: Int32; depth: Int32; fixedsamplelocations: boolean)>(z_TextureStorage3DMultisampleEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TextureStorage3DMultisampleEXT(texture: UInt32; target: DummyEnum; samples: Int32; _internalformat: InternalFormat; width: Int32; height: Int32; depth: Int32; fixedsamplelocations: boolean);
    begin
      z_TextureStorage3DMultisampleEXT_ovr_0(texture, target, samples, _internalformat, width, height, depth, fixedsamplelocations);
    end;
    
    public z_VertexArrayBindVertexBufferEXT_adr := GetFuncAdr('glVertexArrayBindVertexBufferEXT');
    public z_VertexArrayBindVertexBufferEXT_ovr_0 := GetFuncOrNil&<procedure(vaobj: UInt32; bindingindex: UInt32; buffer: UInt32; offset: IntPtr; stride: Int32)>(z_VertexArrayBindVertexBufferEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexArrayBindVertexBufferEXT(vaobj: UInt32; bindingindex: UInt32; buffer: UInt32; offset: IntPtr; stride: Int32);
    begin
      z_VertexArrayBindVertexBufferEXT_ovr_0(vaobj, bindingindex, buffer, offset, stride);
    end;
    
    public z_VertexArrayVertexAttribFormatEXT_adr := GetFuncAdr('glVertexArrayVertexAttribFormatEXT');
    public z_VertexArrayVertexAttribFormatEXT_ovr_0 := GetFuncOrNil&<procedure(vaobj: UInt32; attribindex: UInt32; size: Int32; &type: VertexAttribType; normalized: boolean; relativeoffset: UInt32)>(z_VertexArrayVertexAttribFormatEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexArrayVertexAttribFormatEXT(vaobj: UInt32; attribindex: UInt32; size: Int32; &type: VertexAttribType; normalized: boolean; relativeoffset: UInt32);
    begin
      z_VertexArrayVertexAttribFormatEXT_ovr_0(vaobj, attribindex, size, &type, normalized, relativeoffset);
    end;
    
    public z_VertexArrayVertexAttribIFormatEXT_adr := GetFuncAdr('glVertexArrayVertexAttribIFormatEXT');
    public z_VertexArrayVertexAttribIFormatEXT_ovr_0 := GetFuncOrNil&<procedure(vaobj: UInt32; attribindex: UInt32; size: Int32; &type: VertexAttribIType; relativeoffset: UInt32)>(z_VertexArrayVertexAttribIFormatEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexArrayVertexAttribIFormatEXT(vaobj: UInt32; attribindex: UInt32; size: Int32; &type: VertexAttribIType; relativeoffset: UInt32);
    begin
      z_VertexArrayVertexAttribIFormatEXT_ovr_0(vaobj, attribindex, size, &type, relativeoffset);
    end;
    
    public z_VertexArrayVertexAttribLFormatEXT_adr := GetFuncAdr('glVertexArrayVertexAttribLFormatEXT');
    public z_VertexArrayVertexAttribLFormatEXT_ovr_0 := GetFuncOrNil&<procedure(vaobj: UInt32; attribindex: UInt32; size: Int32; &type: VertexAttribLType; relativeoffset: UInt32)>(z_VertexArrayVertexAttribLFormatEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexArrayVertexAttribLFormatEXT(vaobj: UInt32; attribindex: UInt32; size: Int32; &type: VertexAttribLType; relativeoffset: UInt32);
    begin
      z_VertexArrayVertexAttribLFormatEXT_ovr_0(vaobj, attribindex, size, &type, relativeoffset);
    end;
    
    public z_VertexArrayVertexAttribBindingEXT_adr := GetFuncAdr('glVertexArrayVertexAttribBindingEXT');
    public z_VertexArrayVertexAttribBindingEXT_ovr_0 := GetFuncOrNil&<procedure(vaobj: UInt32; attribindex: UInt32; bindingindex: UInt32)>(z_VertexArrayVertexAttribBindingEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexArrayVertexAttribBindingEXT(vaobj: UInt32; attribindex: UInt32; bindingindex: UInt32);
    begin
      z_VertexArrayVertexAttribBindingEXT_ovr_0(vaobj, attribindex, bindingindex);
    end;
    
    public z_VertexArrayVertexBindingDivisorEXT_adr := GetFuncAdr('glVertexArrayVertexBindingDivisorEXT');
    public z_VertexArrayVertexBindingDivisorEXT_ovr_0 := GetFuncOrNil&<procedure(vaobj: UInt32; bindingindex: UInt32; divisor: UInt32)>(z_VertexArrayVertexBindingDivisorEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexArrayVertexBindingDivisorEXT(vaobj: UInt32; bindingindex: UInt32; divisor: UInt32);
    begin
      z_VertexArrayVertexBindingDivisorEXT_ovr_0(vaobj, bindingindex, divisor);
    end;
    
    public z_VertexArrayVertexAttribLOffsetEXT_adr := GetFuncAdr('glVertexArrayVertexAttribLOffsetEXT');
    public z_VertexArrayVertexAttribLOffsetEXT_ovr_0 := GetFuncOrNil&<procedure(vaobj: UInt32; buffer: UInt32; index: UInt32; size: Int32; &type: VertexAttribLType; stride: Int32; offset: IntPtr)>(z_VertexArrayVertexAttribLOffsetEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexArrayVertexAttribLOffsetEXT(vaobj: UInt32; buffer: UInt32; index: UInt32; size: Int32; &type: VertexAttribLType; stride: Int32; offset: IntPtr);
    begin
      z_VertexArrayVertexAttribLOffsetEXT_ovr_0(vaobj, buffer, index, size, &type, stride, offset);
    end;
    
    public z_TexturePageCommitmentEXT_adr := GetFuncAdr('glTexturePageCommitmentEXT');
    public z_TexturePageCommitmentEXT_ovr_0 := GetFuncOrNil&<procedure(texture: UInt32; level: Int32; xoffset: Int32; yoffset: Int32; zoffset: Int32; width: Int32; height: Int32; depth: Int32; commit: boolean)>(z_TexturePageCommitmentEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TexturePageCommitmentEXT(texture: UInt32; level: Int32; xoffset: Int32; yoffset: Int32; zoffset: Int32; width: Int32; height: Int32; depth: Int32; commit: boolean);
    begin
      z_TexturePageCommitmentEXT_ovr_0(texture, level, xoffset, yoffset, zoffset, width, height, depth, commit);
    end;
    
    public z_VertexArrayVertexAttribDivisorEXT_adr := GetFuncAdr('glVertexArrayVertexAttribDivisorEXT');
    public z_VertexArrayVertexAttribDivisorEXT_ovr_0 := GetFuncOrNil&<procedure(vaobj: UInt32; index: UInt32; divisor: UInt32)>(z_VertexArrayVertexAttribDivisorEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexArrayVertexAttribDivisorEXT(vaobj: UInt32; index: UInt32; divisor: UInt32);
    begin
      z_VertexArrayVertexAttribDivisorEXT_ovr_0(vaobj, index, divisor);
    end;
    
  end;
  
  glDrawBuffers2EXT = sealed class
    public static function GetFuncAdr([MarshalAs(UnmanagedType.LPStr)] lpszProc: string): IntPtr;
    external 'opengl32.dll' name 'wglGetProcAddress';
    public static function GetFuncOrNil<T>(fadr: IntPtr) :=
    fadr=IntPtr.Zero ? default(T) :
    Marshal.GetDelegateForFunctionPointer&<T>(fadr);
    
    public z_ColorMaskIndexedEXT_adr := GetFuncAdr('glColorMaskIndexedEXT');
    public z_ColorMaskIndexedEXT_ovr_0 := GetFuncOrNil&<procedure(index: UInt32; r: boolean; g: boolean; b: boolean; a: boolean)>(z_ColorMaskIndexedEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ColorMaskIndexedEXT(index: UInt32; r: boolean; g: boolean; b: boolean; a: boolean);
    begin
      z_ColorMaskIndexedEXT_ovr_0(index, r, g, b, a);
    end;
    
    public z_GetBooleanIndexedvEXT_adr := GetFuncAdr('glGetBooleanIndexedvEXT');
    public z_GetBooleanIndexedvEXT_ovr_0 := GetFuncOrNil&<procedure(target: BufferTargetARB; index: UInt32; var data: boolean)>(z_GetBooleanIndexedvEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetBooleanIndexedvEXT(target: BufferTargetARB; index: UInt32; data: array of boolean);
    begin
      z_GetBooleanIndexedvEXT_ovr_0(target, index, data[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetBooleanIndexedvEXT(target: BufferTargetARB; index: UInt32; var data: boolean);
    begin
      z_GetBooleanIndexedvEXT_ovr_0(target, index, data);
    end;
    public z_GetBooleanIndexedvEXT_ovr_2 := GetFuncOrNil&<procedure(target: BufferTargetARB; index: UInt32; data: IntPtr)>(z_GetBooleanIndexedvEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetBooleanIndexedvEXT(target: BufferTargetARB; index: UInt32; data: IntPtr);
    begin
      z_GetBooleanIndexedvEXT_ovr_2(target, index, data);
    end;
    
    public z_GetIntegerIndexedvEXT_adr := GetFuncAdr('glGetIntegerIndexedvEXT');
    public z_GetIntegerIndexedvEXT_ovr_0 := GetFuncOrNil&<procedure(target: DummyEnum; index: UInt32; var data: Int32)>(z_GetIntegerIndexedvEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetIntegerIndexedvEXT(target: DummyEnum; index: UInt32; data: array of Int32);
    begin
      z_GetIntegerIndexedvEXT_ovr_0(target, index, data[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetIntegerIndexedvEXT(target: DummyEnum; index: UInt32; var data: Int32);
    begin
      z_GetIntegerIndexedvEXT_ovr_0(target, index, data);
    end;
    public z_GetIntegerIndexedvEXT_ovr_2 := GetFuncOrNil&<procedure(target: DummyEnum; index: UInt32; data: IntPtr)>(z_GetIntegerIndexedvEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetIntegerIndexedvEXT(target: DummyEnum; index: UInt32; data: IntPtr);
    begin
      z_GetIntegerIndexedvEXT_ovr_2(target, index, data);
    end;
    
    public z_EnableIndexedEXT_adr := GetFuncAdr('glEnableIndexedEXT');
    public z_EnableIndexedEXT_ovr_0 := GetFuncOrNil&<procedure(target: EnableCap; index: UInt32)>(z_EnableIndexedEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure EnableIndexedEXT(target: EnableCap; index: UInt32);
    begin
      z_EnableIndexedEXT_ovr_0(target, index);
    end;
    
    public z_DisableIndexedEXT_adr := GetFuncAdr('glDisableIndexedEXT');
    public z_DisableIndexedEXT_ovr_0 := GetFuncOrNil&<procedure(target: EnableCap; index: UInt32)>(z_DisableIndexedEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure DisableIndexedEXT(target: EnableCap; index: UInt32);
    begin
      z_DisableIndexedEXT_ovr_0(target, index);
    end;
    
    public z_IsEnabledIndexedEXT_adr := GetFuncAdr('glIsEnabledIndexedEXT');
    public z_IsEnabledIndexedEXT_ovr_0 := GetFuncOrNil&<function(target: EnableCap; index: UInt32): boolean>(z_IsEnabledIndexedEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function IsEnabledIndexedEXT(target: EnableCap; index: UInt32): boolean;
    begin
      Result := z_IsEnabledIndexedEXT_ovr_0(target, index);
    end;
    
  end;
  
  glDrawInstancedEXT = sealed class
    public static function GetFuncAdr([MarshalAs(UnmanagedType.LPStr)] lpszProc: string): IntPtr;
    external 'opengl32.dll' name 'wglGetProcAddress';
    public static function GetFuncOrNil<T>(fadr: IntPtr) :=
    fadr=IntPtr.Zero ? default(T) :
    Marshal.GetDelegateForFunctionPointer&<T>(fadr);
    
    public z_DrawArraysInstancedEXT_adr := GetFuncAdr('glDrawArraysInstancedEXT');
    public z_DrawArraysInstancedEXT_ovr_0 := GetFuncOrNil&<procedure(mode: PrimitiveType; start: Int32; count: Int32; primcount: Int32)>(z_DrawArraysInstancedEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure DrawArraysInstancedEXT(mode: PrimitiveType; start: Int32; count: Int32; primcount: Int32);
    begin
      z_DrawArraysInstancedEXT_ovr_0(mode, start, count, primcount);
    end;
    
    public z_DrawElementsInstancedEXT_adr := GetFuncAdr('glDrawElementsInstancedEXT');
    public z_DrawElementsInstancedEXT_ovr_0 := GetFuncOrNil&<procedure(mode: PrimitiveType; count: Int32; &type: DrawElementsType; indices: IntPtr; primcount: Int32)>(z_DrawElementsInstancedEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure DrawElementsInstancedEXT(mode: PrimitiveType; count: Int32; &type: DrawElementsType; indices: IntPtr; primcount: Int32);
    begin
      z_DrawElementsInstancedEXT_ovr_0(mode, count, &type, indices, primcount);
    end;
    
  end;
  
  glDrawRangeElementsEXT = sealed class
    public static function GetFuncAdr([MarshalAs(UnmanagedType.LPStr)] lpszProc: string): IntPtr;
    external 'opengl32.dll' name 'wglGetProcAddress';
    public static function GetFuncOrNil<T>(fadr: IntPtr) :=
    fadr=IntPtr.Zero ? default(T) :
    Marshal.GetDelegateForFunctionPointer&<T>(fadr);
    
    public z_DrawRangeElementsEXT_adr := GetFuncAdr('glDrawRangeElementsEXT');
    public z_DrawRangeElementsEXT_ovr_0 := GetFuncOrNil&<procedure(mode: PrimitiveType; start: UInt32; &end: UInt32; count: Int32; &type: DrawElementsType; indices: IntPtr)>(z_DrawRangeElementsEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure DrawRangeElementsEXT(mode: PrimitiveType; start: UInt32; &end: UInt32; count: Int32; &type: DrawElementsType; indices: IntPtr);
    begin
      z_DrawRangeElementsEXT_ovr_0(mode, start, &end, count, &type, indices);
    end;
    
  end;
  
  glExternalBufferEXT = sealed class
    public static function GetFuncAdr([MarshalAs(UnmanagedType.LPStr)] lpszProc: string): IntPtr;
    external 'opengl32.dll' name 'wglGetProcAddress';
    public static function GetFuncOrNil<T>(fadr: IntPtr) :=
    fadr=IntPtr.Zero ? default(T) :
    Marshal.GetDelegateForFunctionPointer&<T>(fadr);
    
    public z_BufferStorageExternalEXT_adr := GetFuncAdr('glBufferStorageExternalEXT');
    public z_BufferStorageExternalEXT_ovr_0 := GetFuncOrNil&<procedure(target: DummyEnum; offset: IntPtr; size: IntPtr; clientBuffer: GLeglClientBufferEXT; flags: BufferStorageMask)>(z_BufferStorageExternalEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure BufferStorageExternalEXT(target: DummyEnum; offset: IntPtr; size: IntPtr; clientBuffer: GLeglClientBufferEXT; flags: BufferStorageMask);
    begin
      z_BufferStorageExternalEXT_ovr_0(target, offset, size, clientBuffer, flags);
    end;
    
    public z_NamedBufferStorageExternalEXT_adr := GetFuncAdr('glNamedBufferStorageExternalEXT');
    public z_NamedBufferStorageExternalEXT_ovr_0 := GetFuncOrNil&<procedure(buffer: UInt32; offset: IntPtr; size: IntPtr; clientBuffer: GLeglClientBufferEXT; flags: BufferStorageMask)>(z_NamedBufferStorageExternalEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure NamedBufferStorageExternalEXT(buffer: UInt32; offset: IntPtr; size: IntPtr; clientBuffer: GLeglClientBufferEXT; flags: BufferStorageMask);
    begin
      z_NamedBufferStorageExternalEXT_ovr_0(buffer, offset, size, clientBuffer, flags);
    end;
    
  end;
  
  glFogCoordEXT = sealed class
    public static function GetFuncAdr([MarshalAs(UnmanagedType.LPStr)] lpszProc: string): IntPtr;
    external 'opengl32.dll' name 'wglGetProcAddress';
    public static function GetFuncOrNil<T>(fadr: IntPtr) :=
    fadr=IntPtr.Zero ? default(T) :
    Marshal.GetDelegateForFunctionPointer&<T>(fadr);
    
    public z_FogCoordfEXT_adr := GetFuncAdr('glFogCoordfEXT');
    public z_FogCoordfEXT_ovr_0 := GetFuncOrNil&<procedure(coord: single)>(z_FogCoordfEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure FogCoordfEXT(coord: single);
    begin
      z_FogCoordfEXT_ovr_0(coord);
    end;
    
    public z_FogCoordfvEXT_adr := GetFuncAdr('glFogCoordfvEXT');
    public z_FogCoordfvEXT_ovr_0 := GetFuncOrNil&<procedure(var coord: single)>(z_FogCoordfvEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure FogCoordfvEXT(coord: array of single);
    begin
      z_FogCoordfvEXT_ovr_0(coord[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure FogCoordfvEXT(var coord: single);
    begin
      z_FogCoordfvEXT_ovr_0(coord);
    end;
    public z_FogCoordfvEXT_ovr_2 := GetFuncOrNil&<procedure(coord: IntPtr)>(z_FogCoordfvEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure FogCoordfvEXT(coord: IntPtr);
    begin
      z_FogCoordfvEXT_ovr_2(coord);
    end;
    
    public z_FogCoorddEXT_adr := GetFuncAdr('glFogCoorddEXT');
    public z_FogCoorddEXT_ovr_0 := GetFuncOrNil&<procedure(coord: real)>(z_FogCoorddEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure FogCoorddEXT(coord: real);
    begin
      z_FogCoorddEXT_ovr_0(coord);
    end;
    
    public z_FogCoorddvEXT_adr := GetFuncAdr('glFogCoorddvEXT');
    public z_FogCoorddvEXT_ovr_0 := GetFuncOrNil&<procedure(var coord: real)>(z_FogCoorddvEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure FogCoorddvEXT(coord: array of real);
    begin
      z_FogCoorddvEXT_ovr_0(coord[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure FogCoorddvEXT(var coord: real);
    begin
      z_FogCoorddvEXT_ovr_0(coord);
    end;
    public z_FogCoorddvEXT_ovr_2 := GetFuncOrNil&<procedure(coord: IntPtr)>(z_FogCoorddvEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure FogCoorddvEXT(coord: IntPtr);
    begin
      z_FogCoorddvEXT_ovr_2(coord);
    end;
    
    public z_FogCoordPointerEXT_adr := GetFuncAdr('glFogCoordPointerEXT');
    public z_FogCoordPointerEXT_ovr_0 := GetFuncOrNil&<procedure(&type: FogPointerTypeEXT; stride: Int32; pointer: IntPtr)>(z_FogCoordPointerEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure FogCoordPointerEXT(&type: FogPointerTypeEXT; stride: Int32; pointer: IntPtr);
    begin
      z_FogCoordPointerEXT_ovr_0(&type, stride, pointer);
    end;
    
  end;
  
  glFramebufferBlitEXT = sealed class
    public static function GetFuncAdr([MarshalAs(UnmanagedType.LPStr)] lpszProc: string): IntPtr;
    external 'opengl32.dll' name 'wglGetProcAddress';
    public static function GetFuncOrNil<T>(fadr: IntPtr) :=
    fadr=IntPtr.Zero ? default(T) :
    Marshal.GetDelegateForFunctionPointer&<T>(fadr);
    
    public z_BlitFramebufferEXT_adr := GetFuncAdr('glBlitFramebufferEXT');
    public z_BlitFramebufferEXT_ovr_0 := GetFuncOrNil&<procedure(srcX0: Int32; srcY0: Int32; srcX1: Int32; srcY1: Int32; dstX0: Int32; dstY0: Int32; dstX1: Int32; dstY1: Int32; mask: ClearBufferMask; filter: BlitFramebufferFilter)>(z_BlitFramebufferEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure BlitFramebufferEXT(srcX0: Int32; srcY0: Int32; srcX1: Int32; srcY1: Int32; dstX0: Int32; dstY0: Int32; dstX1: Int32; dstY1: Int32; mask: ClearBufferMask; filter: BlitFramebufferFilter);
    begin
      z_BlitFramebufferEXT_ovr_0(srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, mask, filter);
    end;
    
  end;
  
  glFramebufferMultisampleEXT = sealed class
    public static function GetFuncAdr([MarshalAs(UnmanagedType.LPStr)] lpszProc: string): IntPtr;
    external 'opengl32.dll' name 'wglGetProcAddress';
    public static function GetFuncOrNil<T>(fadr: IntPtr) :=
    fadr=IntPtr.Zero ? default(T) :
    Marshal.GetDelegateForFunctionPointer&<T>(fadr);
    
    public z_RenderbufferStorageMultisampleEXT_adr := GetFuncAdr('glRenderbufferStorageMultisampleEXT');
    public z_RenderbufferStorageMultisampleEXT_ovr_0 := GetFuncOrNil&<procedure(target: RenderbufferTarget; samples: Int32; _internalformat: InternalFormat; width: Int32; height: Int32)>(z_RenderbufferStorageMultisampleEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure RenderbufferStorageMultisampleEXT(target: RenderbufferTarget; samples: Int32; _internalformat: InternalFormat; width: Int32; height: Int32);
    begin
      z_RenderbufferStorageMultisampleEXT_ovr_0(target, samples, _internalformat, width, height);
    end;
    
  end;
  
  glFramebufferObjectEXT = sealed class
    public static function GetFuncAdr([MarshalAs(UnmanagedType.LPStr)] lpszProc: string): IntPtr;
    external 'opengl32.dll' name 'wglGetProcAddress';
    public static function GetFuncOrNil<T>(fadr: IntPtr) :=
    fadr=IntPtr.Zero ? default(T) :
    Marshal.GetDelegateForFunctionPointer&<T>(fadr);
    
    public z_IsRenderbufferEXT_adr := GetFuncAdr('glIsRenderbufferEXT');
    public z_IsRenderbufferEXT_ovr_0 := GetFuncOrNil&<function(renderbuffer: UInt32): boolean>(z_IsRenderbufferEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function IsRenderbufferEXT(renderbuffer: UInt32): boolean;
    begin
      Result := z_IsRenderbufferEXT_ovr_0(renderbuffer);
    end;
    
    public z_BindRenderbufferEXT_adr := GetFuncAdr('glBindRenderbufferEXT');
    public z_BindRenderbufferEXT_ovr_0 := GetFuncOrNil&<procedure(target: RenderbufferTarget; renderbuffer: UInt32)>(z_BindRenderbufferEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure BindRenderbufferEXT(target: RenderbufferTarget; renderbuffer: UInt32);
    begin
      z_BindRenderbufferEXT_ovr_0(target, renderbuffer);
    end;
    
    public z_DeleteRenderbuffersEXT_adr := GetFuncAdr('glDeleteRenderbuffersEXT');
    public z_DeleteRenderbuffersEXT_ovr_0 := GetFuncOrNil&<procedure(n: Int32; var renderbuffers: UInt32)>(z_DeleteRenderbuffersEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure DeleteRenderbuffersEXT(n: Int32; renderbuffers: array of UInt32);
    begin
      z_DeleteRenderbuffersEXT_ovr_0(n, renderbuffers[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure DeleteRenderbuffersEXT(n: Int32; var renderbuffers: UInt32);
    begin
      z_DeleteRenderbuffersEXT_ovr_0(n, renderbuffers);
    end;
    public z_DeleteRenderbuffersEXT_ovr_2 := GetFuncOrNil&<procedure(n: Int32; renderbuffers: IntPtr)>(z_DeleteRenderbuffersEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure DeleteRenderbuffersEXT(n: Int32; renderbuffers: IntPtr);
    begin
      z_DeleteRenderbuffersEXT_ovr_2(n, renderbuffers);
    end;
    
    public z_GenRenderbuffersEXT_adr := GetFuncAdr('glGenRenderbuffersEXT');
    public z_GenRenderbuffersEXT_ovr_0 := GetFuncOrNil&<procedure(n: Int32; var renderbuffers: UInt32)>(z_GenRenderbuffersEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GenRenderbuffersEXT(n: Int32; renderbuffers: array of UInt32);
    begin
      z_GenRenderbuffersEXT_ovr_0(n, renderbuffers[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GenRenderbuffersEXT(n: Int32; var renderbuffers: UInt32);
    begin
      z_GenRenderbuffersEXT_ovr_0(n, renderbuffers);
    end;
    public z_GenRenderbuffersEXT_ovr_2 := GetFuncOrNil&<procedure(n: Int32; renderbuffers: IntPtr)>(z_GenRenderbuffersEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GenRenderbuffersEXT(n: Int32; renderbuffers: IntPtr);
    begin
      z_GenRenderbuffersEXT_ovr_2(n, renderbuffers);
    end;
    
    public z_RenderbufferStorageEXT_adr := GetFuncAdr('glRenderbufferStorageEXT');
    public z_RenderbufferStorageEXT_ovr_0 := GetFuncOrNil&<procedure(target: RenderbufferTarget; _internalformat: InternalFormat; width: Int32; height: Int32)>(z_RenderbufferStorageEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure RenderbufferStorageEXT(target: RenderbufferTarget; _internalformat: InternalFormat; width: Int32; height: Int32);
    begin
      z_RenderbufferStorageEXT_ovr_0(target, _internalformat, width, height);
    end;
    
    public z_GetRenderbufferParameterivEXT_adr := GetFuncAdr('glGetRenderbufferParameterivEXT');
    public z_GetRenderbufferParameterivEXT_ovr_0 := GetFuncOrNil&<procedure(target: RenderbufferTarget; pname: RenderbufferParameterName; var &params: Int32)>(z_GetRenderbufferParameterivEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetRenderbufferParameterivEXT(target: RenderbufferTarget; pname: RenderbufferParameterName; &params: array of Int32);
    begin
      z_GetRenderbufferParameterivEXT_ovr_0(target, pname, &params[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetRenderbufferParameterivEXT(target: RenderbufferTarget; pname: RenderbufferParameterName; var &params: Int32);
    begin
      z_GetRenderbufferParameterivEXT_ovr_0(target, pname, &params);
    end;
    public z_GetRenderbufferParameterivEXT_ovr_2 := GetFuncOrNil&<procedure(target: RenderbufferTarget; pname: RenderbufferParameterName; &params: IntPtr)>(z_GetRenderbufferParameterivEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetRenderbufferParameterivEXT(target: RenderbufferTarget; pname: RenderbufferParameterName; &params: IntPtr);
    begin
      z_GetRenderbufferParameterivEXT_ovr_2(target, pname, &params);
    end;
    
    public z_IsFramebufferEXT_adr := GetFuncAdr('glIsFramebufferEXT');
    public z_IsFramebufferEXT_ovr_0 := GetFuncOrNil&<function(framebuffer: UInt32): boolean>(z_IsFramebufferEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function IsFramebufferEXT(framebuffer: UInt32): boolean;
    begin
      Result := z_IsFramebufferEXT_ovr_0(framebuffer);
    end;
    
    public z_BindFramebufferEXT_adr := GetFuncAdr('glBindFramebufferEXT');
    public z_BindFramebufferEXT_ovr_0 := GetFuncOrNil&<procedure(target: FramebufferTarget; framebuffer: UInt32)>(z_BindFramebufferEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure BindFramebufferEXT(target: FramebufferTarget; framebuffer: UInt32);
    begin
      z_BindFramebufferEXT_ovr_0(target, framebuffer);
    end;
    
    public z_DeleteFramebuffersEXT_adr := GetFuncAdr('glDeleteFramebuffersEXT');
    public z_DeleteFramebuffersEXT_ovr_0 := GetFuncOrNil&<procedure(n: Int32; var framebuffers: UInt32)>(z_DeleteFramebuffersEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure DeleteFramebuffersEXT(n: Int32; framebuffers: array of UInt32);
    begin
      z_DeleteFramebuffersEXT_ovr_0(n, framebuffers[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure DeleteFramebuffersEXT(n: Int32; var framebuffers: UInt32);
    begin
      z_DeleteFramebuffersEXT_ovr_0(n, framebuffers);
    end;
    public z_DeleteFramebuffersEXT_ovr_2 := GetFuncOrNil&<procedure(n: Int32; framebuffers: IntPtr)>(z_DeleteFramebuffersEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure DeleteFramebuffersEXT(n: Int32; framebuffers: IntPtr);
    begin
      z_DeleteFramebuffersEXT_ovr_2(n, framebuffers);
    end;
    
    public z_GenFramebuffersEXT_adr := GetFuncAdr('glGenFramebuffersEXT');
    public z_GenFramebuffersEXT_ovr_0 := GetFuncOrNil&<procedure(n: Int32; var framebuffers: UInt32)>(z_GenFramebuffersEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GenFramebuffersEXT(n: Int32; framebuffers: array of UInt32);
    begin
      z_GenFramebuffersEXT_ovr_0(n, framebuffers[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GenFramebuffersEXT(n: Int32; var framebuffers: UInt32);
    begin
      z_GenFramebuffersEXT_ovr_0(n, framebuffers);
    end;
    public z_GenFramebuffersEXT_ovr_2 := GetFuncOrNil&<procedure(n: Int32; framebuffers: IntPtr)>(z_GenFramebuffersEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GenFramebuffersEXT(n: Int32; framebuffers: IntPtr);
    begin
      z_GenFramebuffersEXT_ovr_2(n, framebuffers);
    end;
    
    public z_CheckFramebufferStatusEXT_adr := GetFuncAdr('glCheckFramebufferStatusEXT');
    public z_CheckFramebufferStatusEXT_ovr_0 := GetFuncOrNil&<function(target: FramebufferTarget): FramebufferStatus>(z_CheckFramebufferStatusEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function CheckFramebufferStatusEXT(target: FramebufferTarget): FramebufferStatus;
    begin
      Result := z_CheckFramebufferStatusEXT_ovr_0(target);
    end;
    
    public z_FramebufferTexture1DEXT_adr := GetFuncAdr('glFramebufferTexture1DEXT');
    public z_FramebufferTexture1DEXT_ovr_0 := GetFuncOrNil&<procedure(target: FramebufferTarget; attachment: FramebufferAttachment; textarget: TextureTarget; texture: UInt32; level: Int32)>(z_FramebufferTexture1DEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure FramebufferTexture1DEXT(target: FramebufferTarget; attachment: FramebufferAttachment; textarget: TextureTarget; texture: UInt32; level: Int32);
    begin
      z_FramebufferTexture1DEXT_ovr_0(target, attachment, textarget, texture, level);
    end;
    
    public z_FramebufferTexture2DEXT_adr := GetFuncAdr('glFramebufferTexture2DEXT');
    public z_FramebufferTexture2DEXT_ovr_0 := GetFuncOrNil&<procedure(target: FramebufferTarget; attachment: FramebufferAttachment; textarget: TextureTarget; texture: UInt32; level: Int32)>(z_FramebufferTexture2DEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure FramebufferTexture2DEXT(target: FramebufferTarget; attachment: FramebufferAttachment; textarget: TextureTarget; texture: UInt32; level: Int32);
    begin
      z_FramebufferTexture2DEXT_ovr_0(target, attachment, textarget, texture, level);
    end;
    
    public z_FramebufferTexture3DEXT_adr := GetFuncAdr('glFramebufferTexture3DEXT');
    public z_FramebufferTexture3DEXT_ovr_0 := GetFuncOrNil&<procedure(target: FramebufferTarget; attachment: FramebufferAttachment; textarget: TextureTarget; texture: UInt32; level: Int32; zoffset: Int32)>(z_FramebufferTexture3DEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure FramebufferTexture3DEXT(target: FramebufferTarget; attachment: FramebufferAttachment; textarget: TextureTarget; texture: UInt32; level: Int32; zoffset: Int32);
    begin
      z_FramebufferTexture3DEXT_ovr_0(target, attachment, textarget, texture, level, zoffset);
    end;
    
    public z_FramebufferRenderbufferEXT_adr := GetFuncAdr('glFramebufferRenderbufferEXT');
    public z_FramebufferRenderbufferEXT_ovr_0 := GetFuncOrNil&<procedure(target: FramebufferTarget; attachment: FramebufferAttachment; _renderbuffertarget: RenderbufferTarget; renderbuffer: UInt32)>(z_FramebufferRenderbufferEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure FramebufferRenderbufferEXT(target: FramebufferTarget; attachment: FramebufferAttachment; _renderbuffertarget: RenderbufferTarget; renderbuffer: UInt32);
    begin
      z_FramebufferRenderbufferEXT_ovr_0(target, attachment, _renderbuffertarget, renderbuffer);
    end;
    
    public z_GetFramebufferAttachmentParameterivEXT_adr := GetFuncAdr('glGetFramebufferAttachmentParameterivEXT');
    public z_GetFramebufferAttachmentParameterivEXT_ovr_0 := GetFuncOrNil&<procedure(target: FramebufferTarget; attachment: FramebufferAttachment; pname: FramebufferAttachmentParameterName; var &params: Int32)>(z_GetFramebufferAttachmentParameterivEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetFramebufferAttachmentParameterivEXT(target: FramebufferTarget; attachment: FramebufferAttachment; pname: FramebufferAttachmentParameterName; &params: array of Int32);
    begin
      z_GetFramebufferAttachmentParameterivEXT_ovr_0(target, attachment, pname, &params[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetFramebufferAttachmentParameterivEXT(target: FramebufferTarget; attachment: FramebufferAttachment; pname: FramebufferAttachmentParameterName; var &params: Int32);
    begin
      z_GetFramebufferAttachmentParameterivEXT_ovr_0(target, attachment, pname, &params);
    end;
    public z_GetFramebufferAttachmentParameterivEXT_ovr_2 := GetFuncOrNil&<procedure(target: FramebufferTarget; attachment: FramebufferAttachment; pname: FramebufferAttachmentParameterName; &params: IntPtr)>(z_GetFramebufferAttachmentParameterivEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetFramebufferAttachmentParameterivEXT(target: FramebufferTarget; attachment: FramebufferAttachment; pname: FramebufferAttachmentParameterName; &params: IntPtr);
    begin
      z_GetFramebufferAttachmentParameterivEXT_ovr_2(target, attachment, pname, &params);
    end;
    
    public z_GenerateMipmapEXT_adr := GetFuncAdr('glGenerateMipmapEXT');
    public z_GenerateMipmapEXT_ovr_0 := GetFuncOrNil&<procedure(target: TextureTarget)>(z_GenerateMipmapEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GenerateMipmapEXT(target: TextureTarget);
    begin
      z_GenerateMipmapEXT_ovr_0(target);
    end;
    
  end;
  
  glGeometryShader4EXT = sealed class
    public static function GetFuncAdr([MarshalAs(UnmanagedType.LPStr)] lpszProc: string): IntPtr;
    external 'opengl32.dll' name 'wglGetProcAddress';
    public static function GetFuncOrNil<T>(fadr: IntPtr) :=
    fadr=IntPtr.Zero ? default(T) :
    Marshal.GetDelegateForFunctionPointer&<T>(fadr);
    
    public z_ProgramParameteriEXT_adr := GetFuncAdr('glProgramParameteriEXT');
    public z_ProgramParameteriEXT_ovr_0 := GetFuncOrNil&<procedure(&program: UInt32; pname: ProgramParameterPName; value: Int32)>(z_ProgramParameteriEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramParameteriEXT(&program: UInt32; pname: ProgramParameterPName; value: Int32);
    begin
      z_ProgramParameteriEXT_ovr_0(&program, pname, value);
    end;
    
  end;
  
  glGpuProgramParametersEXT = sealed class
    public static function GetFuncAdr([MarshalAs(UnmanagedType.LPStr)] lpszProc: string): IntPtr;
    external 'opengl32.dll' name 'wglGetProcAddress';
    public static function GetFuncOrNil<T>(fadr: IntPtr) :=
    fadr=IntPtr.Zero ? default(T) :
    Marshal.GetDelegateForFunctionPointer&<T>(fadr);
    
    public z_ProgramEnvParameters4fvEXT_adr := GetFuncAdr('glProgramEnvParameters4fvEXT');
    public z_ProgramEnvParameters4fvEXT_ovr_0 := GetFuncOrNil&<procedure(target: ProgramTarget; index: UInt32; count: Int32; var &params: single)>(z_ProgramEnvParameters4fvEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramEnvParameters4fvEXT(target: ProgramTarget; index: UInt32; count: Int32; &params: array of single);
    begin
      z_ProgramEnvParameters4fvEXT_ovr_0(target, index, count, &params[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramEnvParameters4fvEXT(target: ProgramTarget; index: UInt32; count: Int32; var &params: single);
    begin
      z_ProgramEnvParameters4fvEXT_ovr_0(target, index, count, &params);
    end;
    public z_ProgramEnvParameters4fvEXT_ovr_2 := GetFuncOrNil&<procedure(target: ProgramTarget; index: UInt32; count: Int32; &params: IntPtr)>(z_ProgramEnvParameters4fvEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramEnvParameters4fvEXT(target: ProgramTarget; index: UInt32; count: Int32; &params: IntPtr);
    begin
      z_ProgramEnvParameters4fvEXT_ovr_2(target, index, count, &params);
    end;
    
    public z_ProgramLocalParameters4fvEXT_adr := GetFuncAdr('glProgramLocalParameters4fvEXT');
    public z_ProgramLocalParameters4fvEXT_ovr_0 := GetFuncOrNil&<procedure(target: ProgramTarget; index: UInt32; count: Int32; var &params: single)>(z_ProgramLocalParameters4fvEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramLocalParameters4fvEXT(target: ProgramTarget; index: UInt32; count: Int32; &params: array of single);
    begin
      z_ProgramLocalParameters4fvEXT_ovr_0(target, index, count, &params[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramLocalParameters4fvEXT(target: ProgramTarget; index: UInt32; count: Int32; var &params: single);
    begin
      z_ProgramLocalParameters4fvEXT_ovr_0(target, index, count, &params);
    end;
    public z_ProgramLocalParameters4fvEXT_ovr_2 := GetFuncOrNil&<procedure(target: ProgramTarget; index: UInt32; count: Int32; &params: IntPtr)>(z_ProgramLocalParameters4fvEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramLocalParameters4fvEXT(target: ProgramTarget; index: UInt32; count: Int32; &params: IntPtr);
    begin
      z_ProgramLocalParameters4fvEXT_ovr_2(target, index, count, &params);
    end;
    
  end;
  
  glGpuShader4EXT = sealed class
    public static function GetFuncAdr([MarshalAs(UnmanagedType.LPStr)] lpszProc: string): IntPtr;
    external 'opengl32.dll' name 'wglGetProcAddress';
    public static function GetFuncOrNil<T>(fadr: IntPtr) :=
    fadr=IntPtr.Zero ? default(T) :
    Marshal.GetDelegateForFunctionPointer&<T>(fadr);
    
    public z_GetUniformuivEXT_adr := GetFuncAdr('glGetUniformuivEXT');
    public z_GetUniformuivEXT_ovr_0 := GetFuncOrNil&<procedure(&program: UInt32; location: Int32; var &params: UInt32)>(z_GetUniformuivEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetUniformuivEXT(&program: UInt32; location: Int32; &params: array of UInt32);
    begin
      z_GetUniformuivEXT_ovr_0(&program, location, &params[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetUniformuivEXT(&program: UInt32; location: Int32; var &params: UInt32);
    begin
      z_GetUniformuivEXT_ovr_0(&program, location, &params);
    end;
    public z_GetUniformuivEXT_ovr_2 := GetFuncOrNil&<procedure(&program: UInt32; location: Int32; &params: IntPtr)>(z_GetUniformuivEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetUniformuivEXT(&program: UInt32; location: Int32; &params: IntPtr);
    begin
      z_GetUniformuivEXT_ovr_2(&program, location, &params);
    end;
    
    public z_BindFragDataLocationEXT_adr := GetFuncAdr('glBindFragDataLocationEXT');
    public z_BindFragDataLocationEXT_ovr_0 := GetFuncOrNil&<procedure(&program: UInt32; color: UInt32; name: IntPtr)>(z_BindFragDataLocationEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure BindFragDataLocationEXT(&program: UInt32; color: UInt32; name: string);
    begin
      var par_3_str_ptr := Marshal.StringToHGlobalAnsi(name);
      z_BindFragDataLocationEXT_ovr_0(&program, color, par_3_str_ptr);
      Marshal.FreeHGlobal(par_3_str_ptr);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure BindFragDataLocationEXT(&program: UInt32; color: UInt32; name: IntPtr);
    begin
      z_BindFragDataLocationEXT_ovr_0(&program, color, name);
    end;
    
    public z_GetFragDataLocationEXT_adr := GetFuncAdr('glGetFragDataLocationEXT');
    public z_GetFragDataLocationEXT_ovr_0 := GetFuncOrNil&<function(&program: UInt32; name: IntPtr): Int32>(z_GetFragDataLocationEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetFragDataLocationEXT(&program: UInt32; name: string): Int32;
    begin
      var par_2_str_ptr := Marshal.StringToHGlobalAnsi(name);
      Result := z_GetFragDataLocationEXT_ovr_0(&program, par_2_str_ptr);
      Marshal.FreeHGlobal(par_2_str_ptr);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetFragDataLocationEXT(&program: UInt32; name: IntPtr): Int32;
    begin
      Result := z_GetFragDataLocationEXT_ovr_0(&program, name);
    end;
    
    public z_Uniform1uiEXT_adr := GetFuncAdr('glUniform1uiEXT');
    public z_Uniform1uiEXT_ovr_0 := GetFuncOrNil&<procedure(location: Int32; v0: UInt32)>(z_Uniform1uiEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Uniform1uiEXT(location: Int32; v0: UInt32);
    begin
      z_Uniform1uiEXT_ovr_0(location, v0);
    end;
    
    public z_Uniform2uiEXT_adr := GetFuncAdr('glUniform2uiEXT');
    public z_Uniform2uiEXT_ovr_0 := GetFuncOrNil&<procedure(location: Int32; v0: UInt32; v1: UInt32)>(z_Uniform2uiEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Uniform2uiEXT(location: Int32; v0: UInt32; v1: UInt32);
    begin
      z_Uniform2uiEXT_ovr_0(location, v0, v1);
    end;
    
    public z_Uniform3uiEXT_adr := GetFuncAdr('glUniform3uiEXT');
    public z_Uniform3uiEXT_ovr_0 := GetFuncOrNil&<procedure(location: Int32; v0: UInt32; v1: UInt32; v2: UInt32)>(z_Uniform3uiEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Uniform3uiEXT(location: Int32; v0: UInt32; v1: UInt32; v2: UInt32);
    begin
      z_Uniform3uiEXT_ovr_0(location, v0, v1, v2);
    end;
    
    public z_Uniform4uiEXT_adr := GetFuncAdr('glUniform4uiEXT');
    public z_Uniform4uiEXT_ovr_0 := GetFuncOrNil&<procedure(location: Int32; v0: UInt32; v1: UInt32; v2: UInt32; v3: UInt32)>(z_Uniform4uiEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Uniform4uiEXT(location: Int32; v0: UInt32; v1: UInt32; v2: UInt32; v3: UInt32);
    begin
      z_Uniform4uiEXT_ovr_0(location, v0, v1, v2, v3);
    end;
    
    public z_Uniform1uivEXT_adr := GetFuncAdr('glUniform1uivEXT');
    public z_Uniform1uivEXT_ovr_0 := GetFuncOrNil&<procedure(location: Int32; count: Int32; var value: UInt32)>(z_Uniform1uivEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Uniform1uivEXT(location: Int32; count: Int32; value: array of UInt32);
    begin
      z_Uniform1uivEXT_ovr_0(location, count, value[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Uniform1uivEXT(location: Int32; count: Int32; var value: UInt32);
    begin
      z_Uniform1uivEXT_ovr_0(location, count, value);
    end;
    public z_Uniform1uivEXT_ovr_2 := GetFuncOrNil&<procedure(location: Int32; count: Int32; value: IntPtr)>(z_Uniform1uivEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Uniform1uivEXT(location: Int32; count: Int32; value: IntPtr);
    begin
      z_Uniform1uivEXT_ovr_2(location, count, value);
    end;
    
    public z_Uniform2uivEXT_adr := GetFuncAdr('glUniform2uivEXT');
    public z_Uniform2uivEXT_ovr_0 := GetFuncOrNil&<procedure(location: Int32; count: Int32; var value: UInt32)>(z_Uniform2uivEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Uniform2uivEXT(location: Int32; count: Int32; value: array of UInt32);
    begin
      z_Uniform2uivEXT_ovr_0(location, count, value[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Uniform2uivEXT(location: Int32; count: Int32; var value: UInt32);
    begin
      z_Uniform2uivEXT_ovr_0(location, count, value);
    end;
    public z_Uniform2uivEXT_ovr_2 := GetFuncOrNil&<procedure(location: Int32; count: Int32; value: IntPtr)>(z_Uniform2uivEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Uniform2uivEXT(location: Int32; count: Int32; value: IntPtr);
    begin
      z_Uniform2uivEXT_ovr_2(location, count, value);
    end;
    
    public z_Uniform3uivEXT_adr := GetFuncAdr('glUniform3uivEXT');
    public z_Uniform3uivEXT_ovr_0 := GetFuncOrNil&<procedure(location: Int32; count: Int32; var value: UInt32)>(z_Uniform3uivEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Uniform3uivEXT(location: Int32; count: Int32; value: array of UInt32);
    begin
      z_Uniform3uivEXT_ovr_0(location, count, value[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Uniform3uivEXT(location: Int32; count: Int32; var value: UInt32);
    begin
      z_Uniform3uivEXT_ovr_0(location, count, value);
    end;
    public z_Uniform3uivEXT_ovr_2 := GetFuncOrNil&<procedure(location: Int32; count: Int32; value: IntPtr)>(z_Uniform3uivEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Uniform3uivEXT(location: Int32; count: Int32; value: IntPtr);
    begin
      z_Uniform3uivEXT_ovr_2(location, count, value);
    end;
    
    public z_Uniform4uivEXT_adr := GetFuncAdr('glUniform4uivEXT');
    public z_Uniform4uivEXT_ovr_0 := GetFuncOrNil&<procedure(location: Int32; count: Int32; var value: UInt32)>(z_Uniform4uivEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Uniform4uivEXT(location: Int32; count: Int32; value: array of UInt32);
    begin
      z_Uniform4uivEXT_ovr_0(location, count, value[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Uniform4uivEXT(location: Int32; count: Int32; var value: UInt32);
    begin
      z_Uniform4uivEXT_ovr_0(location, count, value);
    end;
    public z_Uniform4uivEXT_ovr_2 := GetFuncOrNil&<procedure(location: Int32; count: Int32; value: IntPtr)>(z_Uniform4uivEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Uniform4uivEXT(location: Int32; count: Int32; value: IntPtr);
    begin
      z_Uniform4uivEXT_ovr_2(location, count, value);
    end;
    
  end;
  
  glHistogramEXT = sealed class
    public static function GetFuncAdr([MarshalAs(UnmanagedType.LPStr)] lpszProc: string): IntPtr;
    external 'opengl32.dll' name 'wglGetProcAddress';
    public static function GetFuncOrNil<T>(fadr: IntPtr) :=
    fadr=IntPtr.Zero ? default(T) :
    Marshal.GetDelegateForFunctionPointer&<T>(fadr);
    
    public z_GetHistogramEXT_adr := GetFuncAdr('glGetHistogramEXT');
    public z_GetHistogramEXT_ovr_0 := GetFuncOrNil&<procedure(target: HistogramTargetEXT; reset: boolean; format: PixelFormat; &type: PixelType; values: IntPtr)>(z_GetHistogramEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetHistogramEXT(target: HistogramTargetEXT; reset: boolean; format: PixelFormat; &type: PixelType; values: IntPtr);
    begin
      z_GetHistogramEXT_ovr_0(target, reset, format, &type, values);
    end;
    
    public z_GetHistogramParameterfvEXT_adr := GetFuncAdr('glGetHistogramParameterfvEXT');
    public z_GetHistogramParameterfvEXT_ovr_0 := GetFuncOrNil&<procedure(target: HistogramTargetEXT; pname: GetHistogramParameterPNameEXT; var &params: single)>(z_GetHistogramParameterfvEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetHistogramParameterfvEXT(target: HistogramTargetEXT; pname: GetHistogramParameterPNameEXT; &params: array of single);
    begin
      z_GetHistogramParameterfvEXT_ovr_0(target, pname, &params[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetHistogramParameterfvEXT(target: HistogramTargetEXT; pname: GetHistogramParameterPNameEXT; var &params: single);
    begin
      z_GetHistogramParameterfvEXT_ovr_0(target, pname, &params);
    end;
    public z_GetHistogramParameterfvEXT_ovr_2 := GetFuncOrNil&<procedure(target: HistogramTargetEXT; pname: GetHistogramParameterPNameEXT; &params: IntPtr)>(z_GetHistogramParameterfvEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetHistogramParameterfvEXT(target: HistogramTargetEXT; pname: GetHistogramParameterPNameEXT; &params: IntPtr);
    begin
      z_GetHistogramParameterfvEXT_ovr_2(target, pname, &params);
    end;
    
    public z_GetHistogramParameterivEXT_adr := GetFuncAdr('glGetHistogramParameterivEXT');
    public z_GetHistogramParameterivEXT_ovr_0 := GetFuncOrNil&<procedure(target: HistogramTargetEXT; pname: GetHistogramParameterPNameEXT; var &params: Int32)>(z_GetHistogramParameterivEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetHistogramParameterivEXT(target: HistogramTargetEXT; pname: GetHistogramParameterPNameEXT; &params: array of Int32);
    begin
      z_GetHistogramParameterivEXT_ovr_0(target, pname, &params[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetHistogramParameterivEXT(target: HistogramTargetEXT; pname: GetHistogramParameterPNameEXT; var &params: Int32);
    begin
      z_GetHistogramParameterivEXT_ovr_0(target, pname, &params);
    end;
    public z_GetHistogramParameterivEXT_ovr_2 := GetFuncOrNil&<procedure(target: HistogramTargetEXT; pname: GetHistogramParameterPNameEXT; &params: IntPtr)>(z_GetHistogramParameterivEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetHistogramParameterivEXT(target: HistogramTargetEXT; pname: GetHistogramParameterPNameEXT; &params: IntPtr);
    begin
      z_GetHistogramParameterivEXT_ovr_2(target, pname, &params);
    end;
    
    public z_GetMinmaxEXT_adr := GetFuncAdr('glGetMinmaxEXT');
    public z_GetMinmaxEXT_ovr_0 := GetFuncOrNil&<procedure(target: MinmaxTargetEXT; reset: boolean; format: PixelFormat; &type: PixelType; values: IntPtr)>(z_GetMinmaxEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetMinmaxEXT(target: MinmaxTargetEXT; reset: boolean; format: PixelFormat; &type: PixelType; values: IntPtr);
    begin
      z_GetMinmaxEXT_ovr_0(target, reset, format, &type, values);
    end;
    
    public z_GetMinmaxParameterfvEXT_adr := GetFuncAdr('glGetMinmaxParameterfvEXT');
    public z_GetMinmaxParameterfvEXT_ovr_0 := GetFuncOrNil&<procedure(target: MinmaxTargetEXT; pname: GetMinmaxParameterPNameEXT; var &params: single)>(z_GetMinmaxParameterfvEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetMinmaxParameterfvEXT(target: MinmaxTargetEXT; pname: GetMinmaxParameterPNameEXT; &params: array of single);
    begin
      z_GetMinmaxParameterfvEXT_ovr_0(target, pname, &params[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetMinmaxParameterfvEXT(target: MinmaxTargetEXT; pname: GetMinmaxParameterPNameEXT; var &params: single);
    begin
      z_GetMinmaxParameterfvEXT_ovr_0(target, pname, &params);
    end;
    public z_GetMinmaxParameterfvEXT_ovr_2 := GetFuncOrNil&<procedure(target: MinmaxTargetEXT; pname: GetMinmaxParameterPNameEXT; &params: IntPtr)>(z_GetMinmaxParameterfvEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetMinmaxParameterfvEXT(target: MinmaxTargetEXT; pname: GetMinmaxParameterPNameEXT; &params: IntPtr);
    begin
      z_GetMinmaxParameterfvEXT_ovr_2(target, pname, &params);
    end;
    
    public z_GetMinmaxParameterivEXT_adr := GetFuncAdr('glGetMinmaxParameterivEXT');
    public z_GetMinmaxParameterivEXT_ovr_0 := GetFuncOrNil&<procedure(target: MinmaxTargetEXT; pname: GetMinmaxParameterPNameEXT; var &params: Int32)>(z_GetMinmaxParameterivEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetMinmaxParameterivEXT(target: MinmaxTargetEXT; pname: GetMinmaxParameterPNameEXT; &params: array of Int32);
    begin
      z_GetMinmaxParameterivEXT_ovr_0(target, pname, &params[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetMinmaxParameterivEXT(target: MinmaxTargetEXT; pname: GetMinmaxParameterPNameEXT; var &params: Int32);
    begin
      z_GetMinmaxParameterivEXT_ovr_0(target, pname, &params);
    end;
    public z_GetMinmaxParameterivEXT_ovr_2 := GetFuncOrNil&<procedure(target: MinmaxTargetEXT; pname: GetMinmaxParameterPNameEXT; &params: IntPtr)>(z_GetMinmaxParameterivEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetMinmaxParameterivEXT(target: MinmaxTargetEXT; pname: GetMinmaxParameterPNameEXT; &params: IntPtr);
    begin
      z_GetMinmaxParameterivEXT_ovr_2(target, pname, &params);
    end;
    
    public z_HistogramEXT_adr := GetFuncAdr('glHistogramEXT');
    public z_HistogramEXT_ovr_0 := GetFuncOrNil&<procedure(target: HistogramTargetEXT; width: Int32; _internalformat: InternalFormat; sink: boolean)>(z_HistogramEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure HistogramEXT(target: HistogramTargetEXT; width: Int32; _internalformat: InternalFormat; sink: boolean);
    begin
      z_HistogramEXT_ovr_0(target, width, _internalformat, sink);
    end;
    
    public z_MinmaxEXT_adr := GetFuncAdr('glMinmaxEXT');
    public z_MinmaxEXT_ovr_0 := GetFuncOrNil&<procedure(target: MinmaxTargetEXT; _internalformat: InternalFormat; sink: boolean)>(z_MinmaxEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MinmaxEXT(target: MinmaxTargetEXT; _internalformat: InternalFormat; sink: boolean);
    begin
      z_MinmaxEXT_ovr_0(target, _internalformat, sink);
    end;
    
    public z_ResetHistogramEXT_adr := GetFuncAdr('glResetHistogramEXT');
    public z_ResetHistogramEXT_ovr_0 := GetFuncOrNil&<procedure(target: HistogramTargetEXT)>(z_ResetHistogramEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ResetHistogramEXT(target: HistogramTargetEXT);
    begin
      z_ResetHistogramEXT_ovr_0(target);
    end;
    
    public z_ResetMinmaxEXT_adr := GetFuncAdr('glResetMinmaxEXT');
    public z_ResetMinmaxEXT_ovr_0 := GetFuncOrNil&<procedure(target: MinmaxTargetEXT)>(z_ResetMinmaxEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ResetMinmaxEXT(target: MinmaxTargetEXT);
    begin
      z_ResetMinmaxEXT_ovr_0(target);
    end;
    
  end;
  
  glIndexFuncEXT = sealed class
    public static function GetFuncAdr([MarshalAs(UnmanagedType.LPStr)] lpszProc: string): IntPtr;
    external 'opengl32.dll' name 'wglGetProcAddress';
    public static function GetFuncOrNil<T>(fadr: IntPtr) :=
    fadr=IntPtr.Zero ? default(T) :
    Marshal.GetDelegateForFunctionPointer&<T>(fadr);
    
    public z_IndexFuncEXT_adr := GetFuncAdr('glIndexFuncEXT');
    public z_IndexFuncEXT_ovr_0 := GetFuncOrNil&<procedure(func: IndexFunctionEXT; ref: single)>(z_IndexFuncEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure IndexFuncEXT(func: IndexFunctionEXT; ref: single);
    begin
      z_IndexFuncEXT_ovr_0(func, ref);
    end;
    
  end;
  
  glIndexMaterialEXT = sealed class
    public static function GetFuncAdr([MarshalAs(UnmanagedType.LPStr)] lpszProc: string): IntPtr;
    external 'opengl32.dll' name 'wglGetProcAddress';
    public static function GetFuncOrNil<T>(fadr: IntPtr) :=
    fadr=IntPtr.Zero ? default(T) :
    Marshal.GetDelegateForFunctionPointer&<T>(fadr);
    
    public z_IndexMaterialEXT_adr := GetFuncAdr('glIndexMaterialEXT');
    public z_IndexMaterialEXT_ovr_0 := GetFuncOrNil&<procedure(face: DummyEnum; mode: IndexMaterialParameterEXT)>(z_IndexMaterialEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure IndexMaterialEXT(face: DummyEnum; mode: IndexMaterialParameterEXT);
    begin
      z_IndexMaterialEXT_ovr_0(face, mode);
    end;
    
  end;
  
  glLightTextureEXT = sealed class
    public static function GetFuncAdr([MarshalAs(UnmanagedType.LPStr)] lpszProc: string): IntPtr;
    external 'opengl32.dll' name 'wglGetProcAddress';
    public static function GetFuncOrNil<T>(fadr: IntPtr) :=
    fadr=IntPtr.Zero ? default(T) :
    Marshal.GetDelegateForFunctionPointer&<T>(fadr);
    
    public z_ApplyTextureEXT_adr := GetFuncAdr('glApplyTextureEXT');
    public z_ApplyTextureEXT_ovr_0 := GetFuncOrNil&<procedure(mode: LightTextureModeEXT)>(z_ApplyTextureEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ApplyTextureEXT(mode: LightTextureModeEXT);
    begin
      z_ApplyTextureEXT_ovr_0(mode);
    end;
    
    public z_TextureLightEXT_adr := GetFuncAdr('glTextureLightEXT');
    public z_TextureLightEXT_ovr_0 := GetFuncOrNil&<procedure(pname: LightTexturePNameEXT)>(z_TextureLightEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TextureLightEXT(pname: LightTexturePNameEXT);
    begin
      z_TextureLightEXT_ovr_0(pname);
    end;
    
    public z_TextureMaterialEXT_adr := GetFuncAdr('glTextureMaterialEXT');
    public z_TextureMaterialEXT_ovr_0 := GetFuncOrNil&<procedure(face: DummyEnum; mode: MaterialParameter)>(z_TextureMaterialEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TextureMaterialEXT(face: DummyEnum; mode: MaterialParameter);
    begin
      z_TextureMaterialEXT_ovr_0(face, mode);
    end;
    
  end;
  
  glMemoryObjectEXT = sealed class
    public static function GetFuncAdr([MarshalAs(UnmanagedType.LPStr)] lpszProc: string): IntPtr;
    external 'opengl32.dll' name 'wglGetProcAddress';
    public static function GetFuncOrNil<T>(fadr: IntPtr) :=
    fadr=IntPtr.Zero ? default(T) :
    Marshal.GetDelegateForFunctionPointer&<T>(fadr);
    
    public z_GetUnsignedBytevEXT_adr := GetFuncAdr('glGetUnsignedBytevEXT');
    public z_GetUnsignedBytevEXT_ovr_0 := GetFuncOrNil&<procedure(pname: GetPName; var data: Byte)>(z_GetUnsignedBytevEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetUnsignedBytevEXT(pname: GetPName; data: array of Byte);
    begin
      z_GetUnsignedBytevEXT_ovr_0(pname, data[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetUnsignedBytevEXT(pname: GetPName; var data: Byte);
    begin
      z_GetUnsignedBytevEXT_ovr_0(pname, data);
    end;
    public z_GetUnsignedBytevEXT_ovr_2 := GetFuncOrNil&<procedure(pname: GetPName; data: IntPtr)>(z_GetUnsignedBytevEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetUnsignedBytevEXT(pname: GetPName; data: IntPtr);
    begin
      z_GetUnsignedBytevEXT_ovr_2(pname, data);
    end;
    
    public z_GetUnsignedBytei_vEXT_adr := GetFuncAdr('glGetUnsignedBytei_vEXT');
    public z_GetUnsignedBytei_vEXT_ovr_0 := GetFuncOrNil&<procedure(target: DummyEnum; index: UInt32; var data: Byte)>(z_GetUnsignedBytei_vEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetUnsignedBytei_vEXT(target: DummyEnum; index: UInt32; data: array of Byte);
    begin
      z_GetUnsignedBytei_vEXT_ovr_0(target, index, data[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetUnsignedBytei_vEXT(target: DummyEnum; index: UInt32; var data: Byte);
    begin
      z_GetUnsignedBytei_vEXT_ovr_0(target, index, data);
    end;
    public z_GetUnsignedBytei_vEXT_ovr_2 := GetFuncOrNil&<procedure(target: DummyEnum; index: UInt32; data: IntPtr)>(z_GetUnsignedBytei_vEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetUnsignedBytei_vEXT(target: DummyEnum; index: UInt32; data: IntPtr);
    begin
      z_GetUnsignedBytei_vEXT_ovr_2(target, index, data);
    end;
    
    public z_DeleteMemoryObjectsEXT_adr := GetFuncAdr('glDeleteMemoryObjectsEXT');
    public z_DeleteMemoryObjectsEXT_ovr_0 := GetFuncOrNil&<procedure(n: Int32; var memoryObjects: UInt32)>(z_DeleteMemoryObjectsEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure DeleteMemoryObjectsEXT(n: Int32; memoryObjects: array of UInt32);
    begin
      z_DeleteMemoryObjectsEXT_ovr_0(n, memoryObjects[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure DeleteMemoryObjectsEXT(n: Int32; var memoryObjects: UInt32);
    begin
      z_DeleteMemoryObjectsEXT_ovr_0(n, memoryObjects);
    end;
    public z_DeleteMemoryObjectsEXT_ovr_2 := GetFuncOrNil&<procedure(n: Int32; memoryObjects: IntPtr)>(z_DeleteMemoryObjectsEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure DeleteMemoryObjectsEXT(n: Int32; memoryObjects: IntPtr);
    begin
      z_DeleteMemoryObjectsEXT_ovr_2(n, memoryObjects);
    end;
    
    public z_IsMemoryObjectEXT_adr := GetFuncAdr('glIsMemoryObjectEXT');
    public z_IsMemoryObjectEXT_ovr_0 := GetFuncOrNil&<function(memoryObject: UInt32): boolean>(z_IsMemoryObjectEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function IsMemoryObjectEXT(memoryObject: UInt32): boolean;
    begin
      Result := z_IsMemoryObjectEXT_ovr_0(memoryObject);
    end;
    
    public z_CreateMemoryObjectsEXT_adr := GetFuncAdr('glCreateMemoryObjectsEXT');
    public z_CreateMemoryObjectsEXT_ovr_0 := GetFuncOrNil&<procedure(n: Int32; var memoryObjects: UInt32)>(z_CreateMemoryObjectsEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure CreateMemoryObjectsEXT(n: Int32; memoryObjects: array of UInt32);
    begin
      z_CreateMemoryObjectsEXT_ovr_0(n, memoryObjects[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure CreateMemoryObjectsEXT(n: Int32; var memoryObjects: UInt32);
    begin
      z_CreateMemoryObjectsEXT_ovr_0(n, memoryObjects);
    end;
    public z_CreateMemoryObjectsEXT_ovr_2 := GetFuncOrNil&<procedure(n: Int32; memoryObjects: IntPtr)>(z_CreateMemoryObjectsEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure CreateMemoryObjectsEXT(n: Int32; memoryObjects: IntPtr);
    begin
      z_CreateMemoryObjectsEXT_ovr_2(n, memoryObjects);
    end;
    
    public z_MemoryObjectParameterivEXT_adr := GetFuncAdr('glMemoryObjectParameterivEXT');
    public z_MemoryObjectParameterivEXT_ovr_0 := GetFuncOrNil&<procedure(memoryObject: UInt32; pname: MemoryObjectParameterName; var &params: Int32)>(z_MemoryObjectParameterivEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MemoryObjectParameterivEXT(memoryObject: UInt32; pname: MemoryObjectParameterName; &params: array of Int32);
    begin
      z_MemoryObjectParameterivEXT_ovr_0(memoryObject, pname, &params[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MemoryObjectParameterivEXT(memoryObject: UInt32; pname: MemoryObjectParameterName; var &params: Int32);
    begin
      z_MemoryObjectParameterivEXT_ovr_0(memoryObject, pname, &params);
    end;
    public z_MemoryObjectParameterivEXT_ovr_2 := GetFuncOrNil&<procedure(memoryObject: UInt32; pname: MemoryObjectParameterName; &params: IntPtr)>(z_MemoryObjectParameterivEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MemoryObjectParameterivEXT(memoryObject: UInt32; pname: MemoryObjectParameterName; &params: IntPtr);
    begin
      z_MemoryObjectParameterivEXT_ovr_2(memoryObject, pname, &params);
    end;
    
    public z_GetMemoryObjectParameterivEXT_adr := GetFuncAdr('glGetMemoryObjectParameterivEXT');
    public z_GetMemoryObjectParameterivEXT_ovr_0 := GetFuncOrNil&<procedure(memoryObject: UInt32; pname: MemoryObjectParameterName; var &params: Int32)>(z_GetMemoryObjectParameterivEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetMemoryObjectParameterivEXT(memoryObject: UInt32; pname: MemoryObjectParameterName; &params: array of Int32);
    begin
      z_GetMemoryObjectParameterivEXT_ovr_0(memoryObject, pname, &params[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetMemoryObjectParameterivEXT(memoryObject: UInt32; pname: MemoryObjectParameterName; var &params: Int32);
    begin
      z_GetMemoryObjectParameterivEXT_ovr_0(memoryObject, pname, &params);
    end;
    public z_GetMemoryObjectParameterivEXT_ovr_2 := GetFuncOrNil&<procedure(memoryObject: UInt32; pname: MemoryObjectParameterName; &params: IntPtr)>(z_GetMemoryObjectParameterivEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetMemoryObjectParameterivEXT(memoryObject: UInt32; pname: MemoryObjectParameterName; &params: IntPtr);
    begin
      z_GetMemoryObjectParameterivEXT_ovr_2(memoryObject, pname, &params);
    end;
    
    public z_TexStorageMem2DEXT_adr := GetFuncAdr('glTexStorageMem2DEXT');
    public z_TexStorageMem2DEXT_ovr_0 := GetFuncOrNil&<procedure(target: TextureTarget; levels: Int32; internalFormat: DummyEnum; width: Int32; height: Int32; memory: UInt32; offset: UInt64)>(z_TexStorageMem2DEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TexStorageMem2DEXT(target: TextureTarget; levels: Int32; internalFormat: DummyEnum; width: Int32; height: Int32; memory: UInt32; offset: UInt64);
    begin
      z_TexStorageMem2DEXT_ovr_0(target, levels, internalFormat, width, height, memory, offset);
    end;
    
    public z_TexStorageMem2DMultisampleEXT_adr := GetFuncAdr('glTexStorageMem2DMultisampleEXT');
    public z_TexStorageMem2DMultisampleEXT_ovr_0 := GetFuncOrNil&<procedure(target: TextureTarget; samples: Int32; internalFormat: DummyEnum; width: Int32; height: Int32; fixedSampleLocations: boolean; memory: UInt32; offset: UInt64)>(z_TexStorageMem2DMultisampleEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TexStorageMem2DMultisampleEXT(target: TextureTarget; samples: Int32; internalFormat: DummyEnum; width: Int32; height: Int32; fixedSampleLocations: boolean; memory: UInt32; offset: UInt64);
    begin
      z_TexStorageMem2DMultisampleEXT_ovr_0(target, samples, internalFormat, width, height, fixedSampleLocations, memory, offset);
    end;
    
    public z_TexStorageMem3DEXT_adr := GetFuncAdr('glTexStorageMem3DEXT');
    public z_TexStorageMem3DEXT_ovr_0 := GetFuncOrNil&<procedure(target: TextureTarget; levels: Int32; internalFormat: DummyEnum; width: Int32; height: Int32; depth: Int32; memory: UInt32; offset: UInt64)>(z_TexStorageMem3DEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TexStorageMem3DEXT(target: TextureTarget; levels: Int32; internalFormat: DummyEnum; width: Int32; height: Int32; depth: Int32; memory: UInt32; offset: UInt64);
    begin
      z_TexStorageMem3DEXT_ovr_0(target, levels, internalFormat, width, height, depth, memory, offset);
    end;
    
    public z_TexStorageMem3DMultisampleEXT_adr := GetFuncAdr('glTexStorageMem3DMultisampleEXT');
    public z_TexStorageMem3DMultisampleEXT_ovr_0 := GetFuncOrNil&<procedure(target: TextureTarget; samples: Int32; internalFormat: DummyEnum; width: Int32; height: Int32; depth: Int32; fixedSampleLocations: boolean; memory: UInt32; offset: UInt64)>(z_TexStorageMem3DMultisampleEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TexStorageMem3DMultisampleEXT(target: TextureTarget; samples: Int32; internalFormat: DummyEnum; width: Int32; height: Int32; depth: Int32; fixedSampleLocations: boolean; memory: UInt32; offset: UInt64);
    begin
      z_TexStorageMem3DMultisampleEXT_ovr_0(target, samples, internalFormat, width, height, depth, fixedSampleLocations, memory, offset);
    end;
    
    public z_BufferStorageMemEXT_adr := GetFuncAdr('glBufferStorageMemEXT');
    public z_BufferStorageMemEXT_ovr_0 := GetFuncOrNil&<procedure(target: BufferTargetARB; size: IntPtr; memory: UInt32; offset: UInt64)>(z_BufferStorageMemEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure BufferStorageMemEXT(target: BufferTargetARB; size: IntPtr; memory: UInt32; offset: UInt64);
    begin
      z_BufferStorageMemEXT_ovr_0(target, size, memory, offset);
    end;
    
    public z_TextureStorageMem2DEXT_adr := GetFuncAdr('glTextureStorageMem2DEXT');
    public z_TextureStorageMem2DEXT_ovr_0 := GetFuncOrNil&<procedure(texture: UInt32; levels: Int32; internalFormat: DummyEnum; width: Int32; height: Int32; memory: UInt32; offset: UInt64)>(z_TextureStorageMem2DEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TextureStorageMem2DEXT(texture: UInt32; levels: Int32; internalFormat: DummyEnum; width: Int32; height: Int32; memory: UInt32; offset: UInt64);
    begin
      z_TextureStorageMem2DEXT_ovr_0(texture, levels, internalFormat, width, height, memory, offset);
    end;
    
    public z_TextureStorageMem2DMultisampleEXT_adr := GetFuncAdr('glTextureStorageMem2DMultisampleEXT');
    public z_TextureStorageMem2DMultisampleEXT_ovr_0 := GetFuncOrNil&<procedure(texture: UInt32; samples: Int32; internalFormat: DummyEnum; width: Int32; height: Int32; fixedSampleLocations: boolean; memory: UInt32; offset: UInt64)>(z_TextureStorageMem2DMultisampleEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TextureStorageMem2DMultisampleEXT(texture: UInt32; samples: Int32; internalFormat: DummyEnum; width: Int32; height: Int32; fixedSampleLocations: boolean; memory: UInt32; offset: UInt64);
    begin
      z_TextureStorageMem2DMultisampleEXT_ovr_0(texture, samples, internalFormat, width, height, fixedSampleLocations, memory, offset);
    end;
    
    public z_TextureStorageMem3DEXT_adr := GetFuncAdr('glTextureStorageMem3DEXT');
    public z_TextureStorageMem3DEXT_ovr_0 := GetFuncOrNil&<procedure(texture: UInt32; levels: Int32; internalFormat: DummyEnum; width: Int32; height: Int32; depth: Int32; memory: UInt32; offset: UInt64)>(z_TextureStorageMem3DEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TextureStorageMem3DEXT(texture: UInt32; levels: Int32; internalFormat: DummyEnum; width: Int32; height: Int32; depth: Int32; memory: UInt32; offset: UInt64);
    begin
      z_TextureStorageMem3DEXT_ovr_0(texture, levels, internalFormat, width, height, depth, memory, offset);
    end;
    
    public z_TextureStorageMem3DMultisampleEXT_adr := GetFuncAdr('glTextureStorageMem3DMultisampleEXT');
    public z_TextureStorageMem3DMultisampleEXT_ovr_0 := GetFuncOrNil&<procedure(texture: UInt32; samples: Int32; internalFormat: DummyEnum; width: Int32; height: Int32; depth: Int32; fixedSampleLocations: boolean; memory: UInt32; offset: UInt64)>(z_TextureStorageMem3DMultisampleEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TextureStorageMem3DMultisampleEXT(texture: UInt32; samples: Int32; internalFormat: DummyEnum; width: Int32; height: Int32; depth: Int32; fixedSampleLocations: boolean; memory: UInt32; offset: UInt64);
    begin
      z_TextureStorageMem3DMultisampleEXT_ovr_0(texture, samples, internalFormat, width, height, depth, fixedSampleLocations, memory, offset);
    end;
    
    public z_NamedBufferStorageMemEXT_adr := GetFuncAdr('glNamedBufferStorageMemEXT');
    public z_NamedBufferStorageMemEXT_ovr_0 := GetFuncOrNil&<procedure(buffer: UInt32; size: IntPtr; memory: UInt32; offset: UInt64)>(z_NamedBufferStorageMemEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure NamedBufferStorageMemEXT(buffer: UInt32; size: IntPtr; memory: UInt32; offset: UInt64);
    begin
      z_NamedBufferStorageMemEXT_ovr_0(buffer, size, memory, offset);
    end;
    
    public z_TexStorageMem1DEXT_adr := GetFuncAdr('glTexStorageMem1DEXT');
    public z_TexStorageMem1DEXT_ovr_0 := GetFuncOrNil&<procedure(target: TextureTarget; levels: Int32; internalFormat: DummyEnum; width: Int32; memory: UInt32; offset: UInt64)>(z_TexStorageMem1DEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TexStorageMem1DEXT(target: TextureTarget; levels: Int32; internalFormat: DummyEnum; width: Int32; memory: UInt32; offset: UInt64);
    begin
      z_TexStorageMem1DEXT_ovr_0(target, levels, internalFormat, width, memory, offset);
    end;
    
    public z_TextureStorageMem1DEXT_adr := GetFuncAdr('glTextureStorageMem1DEXT');
    public z_TextureStorageMem1DEXT_ovr_0 := GetFuncOrNil&<procedure(texture: UInt32; levels: Int32; internalFormat: DummyEnum; width: Int32; memory: UInt32; offset: UInt64)>(z_TextureStorageMem1DEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TextureStorageMem1DEXT(texture: UInt32; levels: Int32; internalFormat: DummyEnum; width: Int32; memory: UInt32; offset: UInt64);
    begin
      z_TextureStorageMem1DEXT_ovr_0(texture, levels, internalFormat, width, memory, offset);
    end;
    
  end;
  
  glMemoryObjectFdEXT = sealed class
    public static function GetFuncAdr([MarshalAs(UnmanagedType.LPStr)] lpszProc: string): IntPtr;
    external 'opengl32.dll' name 'wglGetProcAddress';
    public static function GetFuncOrNil<T>(fadr: IntPtr) :=
    fadr=IntPtr.Zero ? default(T) :
    Marshal.GetDelegateForFunctionPointer&<T>(fadr);
    
    public z_ImportMemoryFdEXT_adr := GetFuncAdr('glImportMemoryFdEXT');
    public z_ImportMemoryFdEXT_ovr_0 := GetFuncOrNil&<procedure(memory: UInt32; size: UInt64; handleType: ExternalHandleType; fd: Int32)>(z_ImportMemoryFdEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ImportMemoryFdEXT(memory: UInt32; size: UInt64; handleType: ExternalHandleType; fd: Int32);
    begin
      z_ImportMemoryFdEXT_ovr_0(memory, size, handleType, fd);
    end;
    
  end;
  
  glMemoryObjectWin32EXT = sealed class
    public static function GetFuncAdr([MarshalAs(UnmanagedType.LPStr)] lpszProc: string): IntPtr;
    external 'opengl32.dll' name 'wglGetProcAddress';
    public static function GetFuncOrNil<T>(fadr: IntPtr) :=
    fadr=IntPtr.Zero ? default(T) :
    Marshal.GetDelegateForFunctionPointer&<T>(fadr);
    
    public z_ImportMemoryWin32HandleEXT_adr := GetFuncAdr('glImportMemoryWin32HandleEXT');
    public z_ImportMemoryWin32HandleEXT_ovr_0 := GetFuncOrNil&<procedure(memory: UInt32; size: UInt64; handleType: ExternalHandleType; handle: IntPtr)>(z_ImportMemoryWin32HandleEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ImportMemoryWin32HandleEXT(memory: UInt32; size: UInt64; handleType: ExternalHandleType; handle: IntPtr);
    begin
      z_ImportMemoryWin32HandleEXT_ovr_0(memory, size, handleType, handle);
    end;
    
    public z_ImportMemoryWin32NameEXT_adr := GetFuncAdr('glImportMemoryWin32NameEXT');
    public z_ImportMemoryWin32NameEXT_ovr_0 := GetFuncOrNil&<procedure(memory: UInt32; size: UInt64; handleType: ExternalHandleType; name: IntPtr)>(z_ImportMemoryWin32NameEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ImportMemoryWin32NameEXT(memory: UInt32; size: UInt64; handleType: ExternalHandleType; name: IntPtr);
    begin
      z_ImportMemoryWin32NameEXT_ovr_0(memory, size, handleType, name);
    end;
    
  end;
  
  glMultiDrawArraysEXT = sealed class
    public static function GetFuncAdr([MarshalAs(UnmanagedType.LPStr)] lpszProc: string): IntPtr;
    external 'opengl32.dll' name 'wglGetProcAddress';
    public static function GetFuncOrNil<T>(fadr: IntPtr) :=
    fadr=IntPtr.Zero ? default(T) :
    Marshal.GetDelegateForFunctionPointer&<T>(fadr);
    
    public z_MultiDrawArraysEXT_adr := GetFuncAdr('glMultiDrawArraysEXT');
    public z_MultiDrawArraysEXT_ovr_0 := GetFuncOrNil&<procedure(mode: PrimitiveType; var first: Int32; var count: Int32; primcount: Int32)>(z_MultiDrawArraysEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiDrawArraysEXT(mode: PrimitiveType; first: array of Int32; count: array of Int32; primcount: Int32);
    begin
      z_MultiDrawArraysEXT_ovr_0(mode, first[0], count[0], primcount);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiDrawArraysEXT(mode: PrimitiveType; first: array of Int32; var count: Int32; primcount: Int32);
    begin
      z_MultiDrawArraysEXT_ovr_0(mode, first[0], count, primcount);
    end;
    public z_MultiDrawArraysEXT_ovr_2 := GetFuncOrNil&<procedure(mode: PrimitiveType; var first: Int32; count: IntPtr; primcount: Int32)>(z_MultiDrawArraysEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiDrawArraysEXT(mode: PrimitiveType; first: array of Int32; count: IntPtr; primcount: Int32);
    begin
      z_MultiDrawArraysEXT_ovr_2(mode, first[0], count, primcount);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiDrawArraysEXT(mode: PrimitiveType; var first: Int32; count: array of Int32; primcount: Int32);
    begin
      z_MultiDrawArraysEXT_ovr_0(mode, first, count[0], primcount);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiDrawArraysEXT(mode: PrimitiveType; var first: Int32; var count: Int32; primcount: Int32);
    begin
      z_MultiDrawArraysEXT_ovr_0(mode, first, count, primcount);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiDrawArraysEXT(mode: PrimitiveType; var first: Int32; count: IntPtr; primcount: Int32);
    begin
      z_MultiDrawArraysEXT_ovr_2(mode, first, count, primcount);
    end;
    public z_MultiDrawArraysEXT_ovr_6 := GetFuncOrNil&<procedure(mode: PrimitiveType; first: IntPtr; var count: Int32; primcount: Int32)>(z_MultiDrawArraysEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiDrawArraysEXT(mode: PrimitiveType; first: IntPtr; count: array of Int32; primcount: Int32);
    begin
      z_MultiDrawArraysEXT_ovr_6(mode, first, count[0], primcount);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiDrawArraysEXT(mode: PrimitiveType; first: IntPtr; var count: Int32; primcount: Int32);
    begin
      z_MultiDrawArraysEXT_ovr_6(mode, first, count, primcount);
    end;
    public z_MultiDrawArraysEXT_ovr_8 := GetFuncOrNil&<procedure(mode: PrimitiveType; first: IntPtr; count: IntPtr; primcount: Int32)>(z_MultiDrawArraysEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiDrawArraysEXT(mode: PrimitiveType; first: IntPtr; count: IntPtr; primcount: Int32);
    begin
      z_MultiDrawArraysEXT_ovr_8(mode, first, count, primcount);
    end;
    
    public z_MultiDrawElementsEXT_adr := GetFuncAdr('glMultiDrawElementsEXT');
    public z_MultiDrawElementsEXT_ovr_0 := GetFuncOrNil&<procedure(mode: PrimitiveType; var count: Int32; &type: DrawElementsType; var indices: IntPtr; primcount: Int32)>(z_MultiDrawElementsEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiDrawElementsEXT(mode: PrimitiveType; count: array of Int32; &type: DrawElementsType; indices: array of IntPtr; primcount: Int32);
    begin
      z_MultiDrawElementsEXT_ovr_0(mode, count[0], &type, indices[0], primcount);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiDrawElementsEXT(mode: PrimitiveType; count: array of Int32; &type: DrawElementsType; var indices: IntPtr; primcount: Int32);
    begin
      z_MultiDrawElementsEXT_ovr_0(mode, count[0], &type, indices, primcount);
    end;
    public z_MultiDrawElementsEXT_ovr_2 := GetFuncOrNil&<procedure(mode: PrimitiveType; var count: Int32; &type: DrawElementsType; indices: pointer; primcount: Int32)>(z_MultiDrawElementsEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiDrawElementsEXT(mode: PrimitiveType; count: array of Int32; &type: DrawElementsType; indices: pointer; primcount: Int32);
    begin
      z_MultiDrawElementsEXT_ovr_2(mode, count[0], &type, indices, primcount);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiDrawElementsEXT(mode: PrimitiveType; var count: Int32; &type: DrawElementsType; indices: array of IntPtr; primcount: Int32);
    begin
      z_MultiDrawElementsEXT_ovr_0(mode, count, &type, indices[0], primcount);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiDrawElementsEXT(mode: PrimitiveType; var count: Int32; &type: DrawElementsType; var indices: IntPtr; primcount: Int32);
    begin
      z_MultiDrawElementsEXT_ovr_0(mode, count, &type, indices, primcount);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiDrawElementsEXT(mode: PrimitiveType; var count: Int32; &type: DrawElementsType; indices: pointer; primcount: Int32);
    begin
      z_MultiDrawElementsEXT_ovr_2(mode, count, &type, indices, primcount);
    end;
    public z_MultiDrawElementsEXT_ovr_6 := GetFuncOrNil&<procedure(mode: PrimitiveType; count: IntPtr; &type: DrawElementsType; var indices: IntPtr; primcount: Int32)>(z_MultiDrawElementsEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiDrawElementsEXT(mode: PrimitiveType; count: IntPtr; &type: DrawElementsType; indices: array of IntPtr; primcount: Int32);
    begin
      z_MultiDrawElementsEXT_ovr_6(mode, count, &type, indices[0], primcount);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiDrawElementsEXT(mode: PrimitiveType; count: IntPtr; &type: DrawElementsType; var indices: IntPtr; primcount: Int32);
    begin
      z_MultiDrawElementsEXT_ovr_6(mode, count, &type, indices, primcount);
    end;
    public z_MultiDrawElementsEXT_ovr_8 := GetFuncOrNil&<procedure(mode: PrimitiveType; count: IntPtr; &type: DrawElementsType; indices: pointer; primcount: Int32)>(z_MultiDrawElementsEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiDrawElementsEXT(mode: PrimitiveType; count: IntPtr; &type: DrawElementsType; indices: pointer; primcount: Int32);
    begin
      z_MultiDrawElementsEXT_ovr_8(mode, count, &type, indices, primcount);
    end;
    
  end;
  
  glMultisampleEXT = sealed class
    public static function GetFuncAdr([MarshalAs(UnmanagedType.LPStr)] lpszProc: string): IntPtr;
    external 'opengl32.dll' name 'wglGetProcAddress';
    public static function GetFuncOrNil<T>(fadr: IntPtr) :=
    fadr=IntPtr.Zero ? default(T) :
    Marshal.GetDelegateForFunctionPointer&<T>(fadr);
    
    public z_SampleMaskEXT_adr := GetFuncAdr('glSampleMaskEXT');
    public z_SampleMaskEXT_ovr_0 := GetFuncOrNil&<procedure(value: single; invert: boolean)>(z_SampleMaskEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure SampleMaskEXT(value: single; invert: boolean);
    begin
      z_SampleMaskEXT_ovr_0(value, invert);
    end;
    
    public z_SamplePatternEXT_adr := GetFuncAdr('glSamplePatternEXT');
    public z_SamplePatternEXT_ovr_0 := GetFuncOrNil&<procedure(pattern: OpenGL.SamplePatternEXT)>(z_SamplePatternEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure SamplePatternEXT(pattern: OpenGL.SamplePatternEXT);
    begin
      z_SamplePatternEXT_ovr_0(pattern);
    end;
    
  end;
  
  glPalettedTextureEXT = sealed class
    public static function GetFuncAdr([MarshalAs(UnmanagedType.LPStr)] lpszProc: string): IntPtr;
    external 'opengl32.dll' name 'wglGetProcAddress';
    public static function GetFuncOrNil<T>(fadr: IntPtr) :=
    fadr=IntPtr.Zero ? default(T) :
    Marshal.GetDelegateForFunctionPointer&<T>(fadr);
    
    public z_ColorTableEXT_adr := GetFuncAdr('glColorTableEXT');
    public z_ColorTableEXT_ovr_0 := GetFuncOrNil&<procedure(target: ColorTableTarget; _internalFormat: InternalFormat; width: Int32; format: PixelFormat; &type: PixelType; table: IntPtr)>(z_ColorTableEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ColorTableEXT(target: ColorTableTarget; _internalFormat: InternalFormat; width: Int32; format: PixelFormat; &type: PixelType; table: IntPtr);
    begin
      z_ColorTableEXT_ovr_0(target, _internalFormat, width, format, &type, table);
    end;
    
    public z_GetColorTableEXT_adr := GetFuncAdr('glGetColorTableEXT');
    public z_GetColorTableEXT_ovr_0 := GetFuncOrNil&<procedure(target: ColorTableTarget; format: PixelFormat; &type: PixelType; data: IntPtr)>(z_GetColorTableEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetColorTableEXT(target: ColorTableTarget; format: PixelFormat; &type: PixelType; data: IntPtr);
    begin
      z_GetColorTableEXT_ovr_0(target, format, &type, data);
    end;
    
    public z_GetColorTableParameterivEXT_adr := GetFuncAdr('glGetColorTableParameterivEXT');
    public z_GetColorTableParameterivEXT_ovr_0 := GetFuncOrNil&<procedure(target: ColorTableTarget; pname: GetColorTableParameterPNameSGI; var &params: Int32)>(z_GetColorTableParameterivEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetColorTableParameterivEXT(target: ColorTableTarget; pname: GetColorTableParameterPNameSGI; &params: array of Int32);
    begin
      z_GetColorTableParameterivEXT_ovr_0(target, pname, &params[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetColorTableParameterivEXT(target: ColorTableTarget; pname: GetColorTableParameterPNameSGI; var &params: Int32);
    begin
      z_GetColorTableParameterivEXT_ovr_0(target, pname, &params);
    end;
    public z_GetColorTableParameterivEXT_ovr_2 := GetFuncOrNil&<procedure(target: ColorTableTarget; pname: GetColorTableParameterPNameSGI; &params: IntPtr)>(z_GetColorTableParameterivEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetColorTableParameterivEXT(target: ColorTableTarget; pname: GetColorTableParameterPNameSGI; &params: IntPtr);
    begin
      z_GetColorTableParameterivEXT_ovr_2(target, pname, &params);
    end;
    
    public z_GetColorTableParameterfvEXT_adr := GetFuncAdr('glGetColorTableParameterfvEXT');
    public z_GetColorTableParameterfvEXT_ovr_0 := GetFuncOrNil&<procedure(target: ColorTableTarget; pname: GetColorTableParameterPNameSGI; var &params: single)>(z_GetColorTableParameterfvEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetColorTableParameterfvEXT(target: ColorTableTarget; pname: GetColorTableParameterPNameSGI; &params: array of single);
    begin
      z_GetColorTableParameterfvEXT_ovr_0(target, pname, &params[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetColorTableParameterfvEXT(target: ColorTableTarget; pname: GetColorTableParameterPNameSGI; var &params: single);
    begin
      z_GetColorTableParameterfvEXT_ovr_0(target, pname, &params);
    end;
    public z_GetColorTableParameterfvEXT_ovr_2 := GetFuncOrNil&<procedure(target: ColorTableTarget; pname: GetColorTableParameterPNameSGI; &params: IntPtr)>(z_GetColorTableParameterfvEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetColorTableParameterfvEXT(target: ColorTableTarget; pname: GetColorTableParameterPNameSGI; &params: IntPtr);
    begin
      z_GetColorTableParameterfvEXT_ovr_2(target, pname, &params);
    end;
    
  end;
  
  glPixelTransformEXT = sealed class
    public static function GetFuncAdr([MarshalAs(UnmanagedType.LPStr)] lpszProc: string): IntPtr;
    external 'opengl32.dll' name 'wglGetProcAddress';
    public static function GetFuncOrNil<T>(fadr: IntPtr) :=
    fadr=IntPtr.Zero ? default(T) :
    Marshal.GetDelegateForFunctionPointer&<T>(fadr);
    
    public z_PixelTransformParameteriEXT_adr := GetFuncAdr('glPixelTransformParameteriEXT');
    public z_PixelTransformParameteriEXT_ovr_0 := GetFuncOrNil&<procedure(target: PixelTransformTargetEXT; pname: PixelTransformPNameEXT; param: Int32)>(z_PixelTransformParameteriEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure PixelTransformParameteriEXT(target: PixelTransformTargetEXT; pname: PixelTransformPNameEXT; param: Int32);
    begin
      z_PixelTransformParameteriEXT_ovr_0(target, pname, param);
    end;
    
    public z_PixelTransformParameterfEXT_adr := GetFuncAdr('glPixelTransformParameterfEXT');
    public z_PixelTransformParameterfEXT_ovr_0 := GetFuncOrNil&<procedure(target: PixelTransformTargetEXT; pname: PixelTransformPNameEXT; param: single)>(z_PixelTransformParameterfEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure PixelTransformParameterfEXT(target: PixelTransformTargetEXT; pname: PixelTransformPNameEXT; param: single);
    begin
      z_PixelTransformParameterfEXT_ovr_0(target, pname, param);
    end;
    
    public z_PixelTransformParameterivEXT_adr := GetFuncAdr('glPixelTransformParameterivEXT');
    public z_PixelTransformParameterivEXT_ovr_0 := GetFuncOrNil&<procedure(target: PixelTransformTargetEXT; pname: PixelTransformPNameEXT; var &params: Int32)>(z_PixelTransformParameterivEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure PixelTransformParameterivEXT(target: PixelTransformTargetEXT; pname: PixelTransformPNameEXT; &params: array of Int32);
    begin
      z_PixelTransformParameterivEXT_ovr_0(target, pname, &params[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure PixelTransformParameterivEXT(target: PixelTransformTargetEXT; pname: PixelTransformPNameEXT; var &params: Int32);
    begin
      z_PixelTransformParameterivEXT_ovr_0(target, pname, &params);
    end;
    public z_PixelTransformParameterivEXT_ovr_2 := GetFuncOrNil&<procedure(target: PixelTransformTargetEXT; pname: PixelTransformPNameEXT; &params: IntPtr)>(z_PixelTransformParameterivEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure PixelTransformParameterivEXT(target: PixelTransformTargetEXT; pname: PixelTransformPNameEXT; &params: IntPtr);
    begin
      z_PixelTransformParameterivEXT_ovr_2(target, pname, &params);
    end;
    
    public z_PixelTransformParameterfvEXT_adr := GetFuncAdr('glPixelTransformParameterfvEXT');
    public z_PixelTransformParameterfvEXT_ovr_0 := GetFuncOrNil&<procedure(target: PixelTransformTargetEXT; pname: PixelTransformPNameEXT; var &params: single)>(z_PixelTransformParameterfvEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure PixelTransformParameterfvEXT(target: PixelTransformTargetEXT; pname: PixelTransformPNameEXT; &params: array of single);
    begin
      z_PixelTransformParameterfvEXT_ovr_0(target, pname, &params[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure PixelTransformParameterfvEXT(target: PixelTransformTargetEXT; pname: PixelTransformPNameEXT; var &params: single);
    begin
      z_PixelTransformParameterfvEXT_ovr_0(target, pname, &params);
    end;
    public z_PixelTransformParameterfvEXT_ovr_2 := GetFuncOrNil&<procedure(target: PixelTransformTargetEXT; pname: PixelTransformPNameEXT; &params: IntPtr)>(z_PixelTransformParameterfvEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure PixelTransformParameterfvEXT(target: PixelTransformTargetEXT; pname: PixelTransformPNameEXT; &params: IntPtr);
    begin
      z_PixelTransformParameterfvEXT_ovr_2(target, pname, &params);
    end;
    
    public z_GetPixelTransformParameterivEXT_adr := GetFuncAdr('glGetPixelTransformParameterivEXT');
    public z_GetPixelTransformParameterivEXT_ovr_0 := GetFuncOrNil&<procedure(target: DummyEnum; pname: DummyEnum; var &params: Int32)>(z_GetPixelTransformParameterivEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetPixelTransformParameterivEXT(target: DummyEnum; pname: DummyEnum; &params: array of Int32);
    begin
      z_GetPixelTransformParameterivEXT_ovr_0(target, pname, &params[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetPixelTransformParameterivEXT(target: DummyEnum; pname: DummyEnum; var &params: Int32);
    begin
      z_GetPixelTransformParameterivEXT_ovr_0(target, pname, &params);
    end;
    public z_GetPixelTransformParameterivEXT_ovr_2 := GetFuncOrNil&<procedure(target: DummyEnum; pname: DummyEnum; &params: IntPtr)>(z_GetPixelTransformParameterivEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetPixelTransformParameterivEXT(target: DummyEnum; pname: DummyEnum; &params: IntPtr);
    begin
      z_GetPixelTransformParameterivEXT_ovr_2(target, pname, &params);
    end;
    
    public z_GetPixelTransformParameterfvEXT_adr := GetFuncAdr('glGetPixelTransformParameterfvEXT');
    public z_GetPixelTransformParameterfvEXT_ovr_0 := GetFuncOrNil&<procedure(target: DummyEnum; pname: DummyEnum; var &params: single)>(z_GetPixelTransformParameterfvEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetPixelTransformParameterfvEXT(target: DummyEnum; pname: DummyEnum; &params: array of single);
    begin
      z_GetPixelTransformParameterfvEXT_ovr_0(target, pname, &params[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetPixelTransformParameterfvEXT(target: DummyEnum; pname: DummyEnum; var &params: single);
    begin
      z_GetPixelTransformParameterfvEXT_ovr_0(target, pname, &params);
    end;
    public z_GetPixelTransformParameterfvEXT_ovr_2 := GetFuncOrNil&<procedure(target: DummyEnum; pname: DummyEnum; &params: IntPtr)>(z_GetPixelTransformParameterfvEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetPixelTransformParameterfvEXT(target: DummyEnum; pname: DummyEnum; &params: IntPtr);
    begin
      z_GetPixelTransformParameterfvEXT_ovr_2(target, pname, &params);
    end;
    
  end;
  
  glPointParametersEXT = sealed class
    public static function GetFuncAdr([MarshalAs(UnmanagedType.LPStr)] lpszProc: string): IntPtr;
    external 'opengl32.dll' name 'wglGetProcAddress';
    public static function GetFuncOrNil<T>(fadr: IntPtr) :=
    fadr=IntPtr.Zero ? default(T) :
    Marshal.GetDelegateForFunctionPointer&<T>(fadr);
    
    public z_PointParameterfEXT_adr := GetFuncAdr('glPointParameterfEXT');
    public z_PointParameterfEXT_ovr_0 := GetFuncOrNil&<procedure(pname: PointParameterNameARB; param: single)>(z_PointParameterfEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure PointParameterfEXT(pname: PointParameterNameARB; param: single);
    begin
      z_PointParameterfEXT_ovr_0(pname, param);
    end;
    
    public z_PointParameterfvEXT_adr := GetFuncAdr('glPointParameterfvEXT');
    public z_PointParameterfvEXT_ovr_0 := GetFuncOrNil&<procedure(pname: PointParameterNameARB; var &params: single)>(z_PointParameterfvEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure PointParameterfvEXT(pname: PointParameterNameARB; &params: array of single);
    begin
      z_PointParameterfvEXT_ovr_0(pname, &params[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure PointParameterfvEXT(pname: PointParameterNameARB; var &params: single);
    begin
      z_PointParameterfvEXT_ovr_0(pname, &params);
    end;
    public z_PointParameterfvEXT_ovr_2 := GetFuncOrNil&<procedure(pname: PointParameterNameARB; &params: IntPtr)>(z_PointParameterfvEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure PointParameterfvEXT(pname: PointParameterNameARB; &params: IntPtr);
    begin
      z_PointParameterfvEXT_ovr_2(pname, &params);
    end;
    
  end;
  
  glPolygonOffsetEXT = sealed class
    public static function GetFuncAdr([MarshalAs(UnmanagedType.LPStr)] lpszProc: string): IntPtr;
    external 'opengl32.dll' name 'wglGetProcAddress';
    public static function GetFuncOrNil<T>(fadr: IntPtr) :=
    fadr=IntPtr.Zero ? default(T) :
    Marshal.GetDelegateForFunctionPointer&<T>(fadr);
    
    public z_PolygonOffsetEXT_adr := GetFuncAdr('glPolygonOffsetEXT');
    public z_PolygonOffsetEXT_ovr_0 := GetFuncOrNil&<procedure(factor: single; bias: single)>(z_PolygonOffsetEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure PolygonOffsetEXT(factor: single; bias: single);
    begin
      z_PolygonOffsetEXT_ovr_0(factor, bias);
    end;
    
  end;
  
  glPolygonOffsetClampEXT = sealed class
    public static function GetFuncAdr([MarshalAs(UnmanagedType.LPStr)] lpszProc: string): IntPtr;
    external 'opengl32.dll' name 'wglGetProcAddress';
    public static function GetFuncOrNil<T>(fadr: IntPtr) :=
    fadr=IntPtr.Zero ? default(T) :
    Marshal.GetDelegateForFunctionPointer&<T>(fadr);
    
    public z_PolygonOffsetClampEXT_adr := GetFuncAdr('glPolygonOffsetClampEXT');
    public z_PolygonOffsetClampEXT_ovr_0 := GetFuncOrNil&<procedure(factor: single; units: single; clamp: single)>(z_PolygonOffsetClampEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure PolygonOffsetClampEXT(factor: single; units: single; clamp: single);
    begin
      z_PolygonOffsetClampEXT_ovr_0(factor, units, clamp);
    end;
    
  end;
  
  glProvokingVertexEXT = sealed class
    public static function GetFuncAdr([MarshalAs(UnmanagedType.LPStr)] lpszProc: string): IntPtr;
    external 'opengl32.dll' name 'wglGetProcAddress';
    public static function GetFuncOrNil<T>(fadr: IntPtr) :=
    fadr=IntPtr.Zero ? default(T) :
    Marshal.GetDelegateForFunctionPointer&<T>(fadr);
    
    public z_ProvokingVertexEXT_adr := GetFuncAdr('glProvokingVertexEXT');
    public z_ProvokingVertexEXT_ovr_0 := GetFuncOrNil&<procedure(mode: VertexProvokingMode)>(z_ProvokingVertexEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProvokingVertexEXT(mode: VertexProvokingMode);
    begin
      z_ProvokingVertexEXT_ovr_0(mode);
    end;
    
  end;
  
  glRasterMultisampleEXT = sealed class
    public static function GetFuncAdr([MarshalAs(UnmanagedType.LPStr)] lpszProc: string): IntPtr;
    external 'opengl32.dll' name 'wglGetProcAddress';
    public static function GetFuncOrNil<T>(fadr: IntPtr) :=
    fadr=IntPtr.Zero ? default(T) :
    Marshal.GetDelegateForFunctionPointer&<T>(fadr);
    
    public z_RasterSamplesEXT_adr := GetFuncAdr('glRasterSamplesEXT');
    public z_RasterSamplesEXT_ovr_0 := GetFuncOrNil&<procedure(samples: UInt32; fixedsamplelocations: boolean)>(z_RasterSamplesEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure RasterSamplesEXT(samples: UInt32; fixedsamplelocations: boolean);
    begin
      z_RasterSamplesEXT_ovr_0(samples, fixedsamplelocations);
    end;
    
  end;
  
  glSemaphoreEXT = sealed class
    public static function GetFuncAdr([MarshalAs(UnmanagedType.LPStr)] lpszProc: string): IntPtr;
    external 'opengl32.dll' name 'wglGetProcAddress';
    public static function GetFuncOrNil<T>(fadr: IntPtr) :=
    fadr=IntPtr.Zero ? default(T) :
    Marshal.GetDelegateForFunctionPointer&<T>(fadr);
    
    public z_GetUnsignedBytevEXT_adr := GetFuncAdr('glGetUnsignedBytevEXT');
    public z_GetUnsignedBytevEXT_ovr_0 := GetFuncOrNil&<procedure(pname: GetPName; var data: Byte)>(z_GetUnsignedBytevEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetUnsignedBytevEXT(pname: GetPName; data: array of Byte);
    begin
      z_GetUnsignedBytevEXT_ovr_0(pname, data[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetUnsignedBytevEXT(pname: GetPName; var data: Byte);
    begin
      z_GetUnsignedBytevEXT_ovr_0(pname, data);
    end;
    public z_GetUnsignedBytevEXT_ovr_2 := GetFuncOrNil&<procedure(pname: GetPName; data: IntPtr)>(z_GetUnsignedBytevEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetUnsignedBytevEXT(pname: GetPName; data: IntPtr);
    begin
      z_GetUnsignedBytevEXT_ovr_2(pname, data);
    end;
    
    public z_GetUnsignedBytei_vEXT_adr := GetFuncAdr('glGetUnsignedBytei_vEXT');
    public z_GetUnsignedBytei_vEXT_ovr_0 := GetFuncOrNil&<procedure(target: DummyEnum; index: UInt32; var data: Byte)>(z_GetUnsignedBytei_vEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetUnsignedBytei_vEXT(target: DummyEnum; index: UInt32; data: array of Byte);
    begin
      z_GetUnsignedBytei_vEXT_ovr_0(target, index, data[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetUnsignedBytei_vEXT(target: DummyEnum; index: UInt32; var data: Byte);
    begin
      z_GetUnsignedBytei_vEXT_ovr_0(target, index, data);
    end;
    public z_GetUnsignedBytei_vEXT_ovr_2 := GetFuncOrNil&<procedure(target: DummyEnum; index: UInt32; data: IntPtr)>(z_GetUnsignedBytei_vEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetUnsignedBytei_vEXT(target: DummyEnum; index: UInt32; data: IntPtr);
    begin
      z_GetUnsignedBytei_vEXT_ovr_2(target, index, data);
    end;
    
    public z_GenSemaphoresEXT_adr := GetFuncAdr('glGenSemaphoresEXT');
    public z_GenSemaphoresEXT_ovr_0 := GetFuncOrNil&<procedure(n: Int32; var semaphores: UInt32)>(z_GenSemaphoresEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GenSemaphoresEXT(n: Int32; semaphores: array of UInt32);
    begin
      z_GenSemaphoresEXT_ovr_0(n, semaphores[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GenSemaphoresEXT(n: Int32; var semaphores: UInt32);
    begin
      z_GenSemaphoresEXT_ovr_0(n, semaphores);
    end;
    public z_GenSemaphoresEXT_ovr_2 := GetFuncOrNil&<procedure(n: Int32; semaphores: IntPtr)>(z_GenSemaphoresEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GenSemaphoresEXT(n: Int32; semaphores: IntPtr);
    begin
      z_GenSemaphoresEXT_ovr_2(n, semaphores);
    end;
    
    public z_DeleteSemaphoresEXT_adr := GetFuncAdr('glDeleteSemaphoresEXT');
    public z_DeleteSemaphoresEXT_ovr_0 := GetFuncOrNil&<procedure(n: Int32; var semaphores: UInt32)>(z_DeleteSemaphoresEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure DeleteSemaphoresEXT(n: Int32; semaphores: array of UInt32);
    begin
      z_DeleteSemaphoresEXT_ovr_0(n, semaphores[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure DeleteSemaphoresEXT(n: Int32; var semaphores: UInt32);
    begin
      z_DeleteSemaphoresEXT_ovr_0(n, semaphores);
    end;
    public z_DeleteSemaphoresEXT_ovr_2 := GetFuncOrNil&<procedure(n: Int32; semaphores: IntPtr)>(z_DeleteSemaphoresEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure DeleteSemaphoresEXT(n: Int32; semaphores: IntPtr);
    begin
      z_DeleteSemaphoresEXT_ovr_2(n, semaphores);
    end;
    
    public z_IsSemaphoreEXT_adr := GetFuncAdr('glIsSemaphoreEXT');
    public z_IsSemaphoreEXT_ovr_0 := GetFuncOrNil&<function(semaphore: UInt32): boolean>(z_IsSemaphoreEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function IsSemaphoreEXT(semaphore: UInt32): boolean;
    begin
      Result := z_IsSemaphoreEXT_ovr_0(semaphore);
    end;
    
    public z_SemaphoreParameterui64vEXT_adr := GetFuncAdr('glSemaphoreParameterui64vEXT');
    public z_SemaphoreParameterui64vEXT_ovr_0 := GetFuncOrNil&<procedure(semaphore: UInt32; pname: SemaphoreParameterName; var &params: UInt64)>(z_SemaphoreParameterui64vEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure SemaphoreParameterui64vEXT(semaphore: UInt32; pname: SemaphoreParameterName; &params: array of UInt64);
    begin
      z_SemaphoreParameterui64vEXT_ovr_0(semaphore, pname, &params[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure SemaphoreParameterui64vEXT(semaphore: UInt32; pname: SemaphoreParameterName; var &params: UInt64);
    begin
      z_SemaphoreParameterui64vEXT_ovr_0(semaphore, pname, &params);
    end;
    public z_SemaphoreParameterui64vEXT_ovr_2 := GetFuncOrNil&<procedure(semaphore: UInt32; pname: SemaphoreParameterName; &params: IntPtr)>(z_SemaphoreParameterui64vEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure SemaphoreParameterui64vEXT(semaphore: UInt32; pname: SemaphoreParameterName; &params: IntPtr);
    begin
      z_SemaphoreParameterui64vEXT_ovr_2(semaphore, pname, &params);
    end;
    
    public z_GetSemaphoreParameterui64vEXT_adr := GetFuncAdr('glGetSemaphoreParameterui64vEXT');
    public z_GetSemaphoreParameterui64vEXT_ovr_0 := GetFuncOrNil&<procedure(semaphore: UInt32; pname: SemaphoreParameterName; var &params: UInt64)>(z_GetSemaphoreParameterui64vEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetSemaphoreParameterui64vEXT(semaphore: UInt32; pname: SemaphoreParameterName; &params: array of UInt64);
    begin
      z_GetSemaphoreParameterui64vEXT_ovr_0(semaphore, pname, &params[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetSemaphoreParameterui64vEXT(semaphore: UInt32; pname: SemaphoreParameterName; var &params: UInt64);
    begin
      z_GetSemaphoreParameterui64vEXT_ovr_0(semaphore, pname, &params);
    end;
    public z_GetSemaphoreParameterui64vEXT_ovr_2 := GetFuncOrNil&<procedure(semaphore: UInt32; pname: SemaphoreParameterName; &params: IntPtr)>(z_GetSemaphoreParameterui64vEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetSemaphoreParameterui64vEXT(semaphore: UInt32; pname: SemaphoreParameterName; &params: IntPtr);
    begin
      z_GetSemaphoreParameterui64vEXT_ovr_2(semaphore, pname, &params);
    end;
    
    public z_WaitSemaphoreEXT_adr := GetFuncAdr('glWaitSemaphoreEXT');
    public z_WaitSemaphoreEXT_ovr_0 := GetFuncOrNil&<procedure(semaphore: UInt32; numBufferBarriers: UInt32; var buffers: UInt32; numTextureBarriers: UInt32; var textures: UInt32; var srcLayouts: TextureLayout)>(z_WaitSemaphoreEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure WaitSemaphoreEXT(semaphore: UInt32; numBufferBarriers: UInt32; buffers: array of UInt32; numTextureBarriers: UInt32; textures: array of UInt32; srcLayouts: array of TextureLayout);
    begin
      z_WaitSemaphoreEXT_ovr_0(semaphore, numBufferBarriers, buffers[0], numTextureBarriers, textures[0], srcLayouts[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure WaitSemaphoreEXT(semaphore: UInt32; numBufferBarriers: UInt32; buffers: array of UInt32; numTextureBarriers: UInt32; textures: array of UInt32; var srcLayouts: TextureLayout);
    begin
      z_WaitSemaphoreEXT_ovr_0(semaphore, numBufferBarriers, buffers[0], numTextureBarriers, textures[0], srcLayouts);
    end;
    public z_WaitSemaphoreEXT_ovr_2 := GetFuncOrNil&<procedure(semaphore: UInt32; numBufferBarriers: UInt32; var buffers: UInt32; numTextureBarriers: UInt32; var textures: UInt32; srcLayouts: IntPtr)>(z_WaitSemaphoreEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure WaitSemaphoreEXT(semaphore: UInt32; numBufferBarriers: UInt32; buffers: array of UInt32; numTextureBarriers: UInt32; textures: array of UInt32; srcLayouts: IntPtr);
    begin
      z_WaitSemaphoreEXT_ovr_2(semaphore, numBufferBarriers, buffers[0], numTextureBarriers, textures[0], srcLayouts);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure WaitSemaphoreEXT(semaphore: UInt32; numBufferBarriers: UInt32; buffers: array of UInt32; numTextureBarriers: UInt32; var textures: UInt32; srcLayouts: array of TextureLayout);
    begin
      z_WaitSemaphoreEXT_ovr_0(semaphore, numBufferBarriers, buffers[0], numTextureBarriers, textures, srcLayouts[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure WaitSemaphoreEXT(semaphore: UInt32; numBufferBarriers: UInt32; buffers: array of UInt32; numTextureBarriers: UInt32; var textures: UInt32; var srcLayouts: TextureLayout);
    begin
      z_WaitSemaphoreEXT_ovr_0(semaphore, numBufferBarriers, buffers[0], numTextureBarriers, textures, srcLayouts);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure WaitSemaphoreEXT(semaphore: UInt32; numBufferBarriers: UInt32; buffers: array of UInt32; numTextureBarriers: UInt32; var textures: UInt32; srcLayouts: IntPtr);
    begin
      z_WaitSemaphoreEXT_ovr_2(semaphore, numBufferBarriers, buffers[0], numTextureBarriers, textures, srcLayouts);
    end;
    public z_WaitSemaphoreEXT_ovr_6 := GetFuncOrNil&<procedure(semaphore: UInt32; numBufferBarriers: UInt32; var buffers: UInt32; numTextureBarriers: UInt32; textures: IntPtr; var srcLayouts: TextureLayout)>(z_WaitSemaphoreEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure WaitSemaphoreEXT(semaphore: UInt32; numBufferBarriers: UInt32; buffers: array of UInt32; numTextureBarriers: UInt32; textures: IntPtr; srcLayouts: array of TextureLayout);
    begin
      z_WaitSemaphoreEXT_ovr_6(semaphore, numBufferBarriers, buffers[0], numTextureBarriers, textures, srcLayouts[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure WaitSemaphoreEXT(semaphore: UInt32; numBufferBarriers: UInt32; buffers: array of UInt32; numTextureBarriers: UInt32; textures: IntPtr; var srcLayouts: TextureLayout);
    begin
      z_WaitSemaphoreEXT_ovr_6(semaphore, numBufferBarriers, buffers[0], numTextureBarriers, textures, srcLayouts);
    end;
    public z_WaitSemaphoreEXT_ovr_8 := GetFuncOrNil&<procedure(semaphore: UInt32; numBufferBarriers: UInt32; var buffers: UInt32; numTextureBarriers: UInt32; textures: IntPtr; srcLayouts: IntPtr)>(z_WaitSemaphoreEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure WaitSemaphoreEXT(semaphore: UInt32; numBufferBarriers: UInt32; buffers: array of UInt32; numTextureBarriers: UInt32; textures: IntPtr; srcLayouts: IntPtr);
    begin
      z_WaitSemaphoreEXT_ovr_8(semaphore, numBufferBarriers, buffers[0], numTextureBarriers, textures, srcLayouts);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure WaitSemaphoreEXT(semaphore: UInt32; numBufferBarriers: UInt32; var buffers: UInt32; numTextureBarriers: UInt32; textures: array of UInt32; srcLayouts: array of TextureLayout);
    begin
      z_WaitSemaphoreEXT_ovr_0(semaphore, numBufferBarriers, buffers, numTextureBarriers, textures[0], srcLayouts[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure WaitSemaphoreEXT(semaphore: UInt32; numBufferBarriers: UInt32; var buffers: UInt32; numTextureBarriers: UInt32; textures: array of UInt32; var srcLayouts: TextureLayout);
    begin
      z_WaitSemaphoreEXT_ovr_0(semaphore, numBufferBarriers, buffers, numTextureBarriers, textures[0], srcLayouts);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure WaitSemaphoreEXT(semaphore: UInt32; numBufferBarriers: UInt32; var buffers: UInt32; numTextureBarriers: UInt32; textures: array of UInt32; srcLayouts: IntPtr);
    begin
      z_WaitSemaphoreEXT_ovr_2(semaphore, numBufferBarriers, buffers, numTextureBarriers, textures[0], srcLayouts);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure WaitSemaphoreEXT(semaphore: UInt32; numBufferBarriers: UInt32; var buffers: UInt32; numTextureBarriers: UInt32; var textures: UInt32; srcLayouts: array of TextureLayout);
    begin
      z_WaitSemaphoreEXT_ovr_0(semaphore, numBufferBarriers, buffers, numTextureBarriers, textures, srcLayouts[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure WaitSemaphoreEXT(semaphore: UInt32; numBufferBarriers: UInt32; var buffers: UInt32; numTextureBarriers: UInt32; var textures: UInt32; var srcLayouts: TextureLayout);
    begin
      z_WaitSemaphoreEXT_ovr_0(semaphore, numBufferBarriers, buffers, numTextureBarriers, textures, srcLayouts);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure WaitSemaphoreEXT(semaphore: UInt32; numBufferBarriers: UInt32; var buffers: UInt32; numTextureBarriers: UInt32; var textures: UInt32; srcLayouts: IntPtr);
    begin
      z_WaitSemaphoreEXT_ovr_2(semaphore, numBufferBarriers, buffers, numTextureBarriers, textures, srcLayouts);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure WaitSemaphoreEXT(semaphore: UInt32; numBufferBarriers: UInt32; var buffers: UInt32; numTextureBarriers: UInt32; textures: IntPtr; srcLayouts: array of TextureLayout);
    begin
      z_WaitSemaphoreEXT_ovr_6(semaphore, numBufferBarriers, buffers, numTextureBarriers, textures, srcLayouts[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure WaitSemaphoreEXT(semaphore: UInt32; numBufferBarriers: UInt32; var buffers: UInt32; numTextureBarriers: UInt32; textures: IntPtr; var srcLayouts: TextureLayout);
    begin
      z_WaitSemaphoreEXT_ovr_6(semaphore, numBufferBarriers, buffers, numTextureBarriers, textures, srcLayouts);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure WaitSemaphoreEXT(semaphore: UInt32; numBufferBarriers: UInt32; var buffers: UInt32; numTextureBarriers: UInt32; textures: IntPtr; srcLayouts: IntPtr);
    begin
      z_WaitSemaphoreEXT_ovr_8(semaphore, numBufferBarriers, buffers, numTextureBarriers, textures, srcLayouts);
    end;
    public z_WaitSemaphoreEXT_ovr_18 := GetFuncOrNil&<procedure(semaphore: UInt32; numBufferBarriers: UInt32; buffers: IntPtr; numTextureBarriers: UInt32; var textures: UInt32; var srcLayouts: TextureLayout)>(z_WaitSemaphoreEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure WaitSemaphoreEXT(semaphore: UInt32; numBufferBarriers: UInt32; buffers: IntPtr; numTextureBarriers: UInt32; textures: array of UInt32; srcLayouts: array of TextureLayout);
    begin
      z_WaitSemaphoreEXT_ovr_18(semaphore, numBufferBarriers, buffers, numTextureBarriers, textures[0], srcLayouts[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure WaitSemaphoreEXT(semaphore: UInt32; numBufferBarriers: UInt32; buffers: IntPtr; numTextureBarriers: UInt32; textures: array of UInt32; var srcLayouts: TextureLayout);
    begin
      z_WaitSemaphoreEXT_ovr_18(semaphore, numBufferBarriers, buffers, numTextureBarriers, textures[0], srcLayouts);
    end;
    public z_WaitSemaphoreEXT_ovr_20 := GetFuncOrNil&<procedure(semaphore: UInt32; numBufferBarriers: UInt32; buffers: IntPtr; numTextureBarriers: UInt32; var textures: UInt32; srcLayouts: IntPtr)>(z_WaitSemaphoreEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure WaitSemaphoreEXT(semaphore: UInt32; numBufferBarriers: UInt32; buffers: IntPtr; numTextureBarriers: UInt32; textures: array of UInt32; srcLayouts: IntPtr);
    begin
      z_WaitSemaphoreEXT_ovr_20(semaphore, numBufferBarriers, buffers, numTextureBarriers, textures[0], srcLayouts);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure WaitSemaphoreEXT(semaphore: UInt32; numBufferBarriers: UInt32; buffers: IntPtr; numTextureBarriers: UInt32; var textures: UInt32; srcLayouts: array of TextureLayout);
    begin
      z_WaitSemaphoreEXT_ovr_18(semaphore, numBufferBarriers, buffers, numTextureBarriers, textures, srcLayouts[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure WaitSemaphoreEXT(semaphore: UInt32; numBufferBarriers: UInt32; buffers: IntPtr; numTextureBarriers: UInt32; var textures: UInt32; var srcLayouts: TextureLayout);
    begin
      z_WaitSemaphoreEXT_ovr_18(semaphore, numBufferBarriers, buffers, numTextureBarriers, textures, srcLayouts);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure WaitSemaphoreEXT(semaphore: UInt32; numBufferBarriers: UInt32; buffers: IntPtr; numTextureBarriers: UInt32; var textures: UInt32; srcLayouts: IntPtr);
    begin
      z_WaitSemaphoreEXT_ovr_20(semaphore, numBufferBarriers, buffers, numTextureBarriers, textures, srcLayouts);
    end;
    public z_WaitSemaphoreEXT_ovr_24 := GetFuncOrNil&<procedure(semaphore: UInt32; numBufferBarriers: UInt32; buffers: IntPtr; numTextureBarriers: UInt32; textures: IntPtr; var srcLayouts: TextureLayout)>(z_WaitSemaphoreEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure WaitSemaphoreEXT(semaphore: UInt32; numBufferBarriers: UInt32; buffers: IntPtr; numTextureBarriers: UInt32; textures: IntPtr; srcLayouts: array of TextureLayout);
    begin
      z_WaitSemaphoreEXT_ovr_24(semaphore, numBufferBarriers, buffers, numTextureBarriers, textures, srcLayouts[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure WaitSemaphoreEXT(semaphore: UInt32; numBufferBarriers: UInt32; buffers: IntPtr; numTextureBarriers: UInt32; textures: IntPtr; var srcLayouts: TextureLayout);
    begin
      z_WaitSemaphoreEXT_ovr_24(semaphore, numBufferBarriers, buffers, numTextureBarriers, textures, srcLayouts);
    end;
    public z_WaitSemaphoreEXT_ovr_26 := GetFuncOrNil&<procedure(semaphore: UInt32; numBufferBarriers: UInt32; buffers: IntPtr; numTextureBarriers: UInt32; textures: IntPtr; srcLayouts: IntPtr)>(z_WaitSemaphoreEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure WaitSemaphoreEXT(semaphore: UInt32; numBufferBarriers: UInt32; buffers: IntPtr; numTextureBarriers: UInt32; textures: IntPtr; srcLayouts: IntPtr);
    begin
      z_WaitSemaphoreEXT_ovr_26(semaphore, numBufferBarriers, buffers, numTextureBarriers, textures, srcLayouts);
    end;
    
    public z_SignalSemaphoreEXT_adr := GetFuncAdr('glSignalSemaphoreEXT');
    public z_SignalSemaphoreEXT_ovr_0 := GetFuncOrNil&<procedure(semaphore: UInt32; numBufferBarriers: UInt32; var buffers: UInt32; numTextureBarriers: UInt32; var textures: UInt32; var dstLayouts: TextureLayout)>(z_SignalSemaphoreEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure SignalSemaphoreEXT(semaphore: UInt32; numBufferBarriers: UInt32; buffers: array of UInt32; numTextureBarriers: UInt32; textures: array of UInt32; dstLayouts: array of TextureLayout);
    begin
      z_SignalSemaphoreEXT_ovr_0(semaphore, numBufferBarriers, buffers[0], numTextureBarriers, textures[0], dstLayouts[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure SignalSemaphoreEXT(semaphore: UInt32; numBufferBarriers: UInt32; buffers: array of UInt32; numTextureBarriers: UInt32; textures: array of UInt32; var dstLayouts: TextureLayout);
    begin
      z_SignalSemaphoreEXT_ovr_0(semaphore, numBufferBarriers, buffers[0], numTextureBarriers, textures[0], dstLayouts);
    end;
    public z_SignalSemaphoreEXT_ovr_2 := GetFuncOrNil&<procedure(semaphore: UInt32; numBufferBarriers: UInt32; var buffers: UInt32; numTextureBarriers: UInt32; var textures: UInt32; dstLayouts: IntPtr)>(z_SignalSemaphoreEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure SignalSemaphoreEXT(semaphore: UInt32; numBufferBarriers: UInt32; buffers: array of UInt32; numTextureBarriers: UInt32; textures: array of UInt32; dstLayouts: IntPtr);
    begin
      z_SignalSemaphoreEXT_ovr_2(semaphore, numBufferBarriers, buffers[0], numTextureBarriers, textures[0], dstLayouts);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure SignalSemaphoreEXT(semaphore: UInt32; numBufferBarriers: UInt32; buffers: array of UInt32; numTextureBarriers: UInt32; var textures: UInt32; dstLayouts: array of TextureLayout);
    begin
      z_SignalSemaphoreEXT_ovr_0(semaphore, numBufferBarriers, buffers[0], numTextureBarriers, textures, dstLayouts[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure SignalSemaphoreEXT(semaphore: UInt32; numBufferBarriers: UInt32; buffers: array of UInt32; numTextureBarriers: UInt32; var textures: UInt32; var dstLayouts: TextureLayout);
    begin
      z_SignalSemaphoreEXT_ovr_0(semaphore, numBufferBarriers, buffers[0], numTextureBarriers, textures, dstLayouts);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure SignalSemaphoreEXT(semaphore: UInt32; numBufferBarriers: UInt32; buffers: array of UInt32; numTextureBarriers: UInt32; var textures: UInt32; dstLayouts: IntPtr);
    begin
      z_SignalSemaphoreEXT_ovr_2(semaphore, numBufferBarriers, buffers[0], numTextureBarriers, textures, dstLayouts);
    end;
    public z_SignalSemaphoreEXT_ovr_6 := GetFuncOrNil&<procedure(semaphore: UInt32; numBufferBarriers: UInt32; var buffers: UInt32; numTextureBarriers: UInt32; textures: IntPtr; var dstLayouts: TextureLayout)>(z_SignalSemaphoreEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure SignalSemaphoreEXT(semaphore: UInt32; numBufferBarriers: UInt32; buffers: array of UInt32; numTextureBarriers: UInt32; textures: IntPtr; dstLayouts: array of TextureLayout);
    begin
      z_SignalSemaphoreEXT_ovr_6(semaphore, numBufferBarriers, buffers[0], numTextureBarriers, textures, dstLayouts[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure SignalSemaphoreEXT(semaphore: UInt32; numBufferBarriers: UInt32; buffers: array of UInt32; numTextureBarriers: UInt32; textures: IntPtr; var dstLayouts: TextureLayout);
    begin
      z_SignalSemaphoreEXT_ovr_6(semaphore, numBufferBarriers, buffers[0], numTextureBarriers, textures, dstLayouts);
    end;
    public z_SignalSemaphoreEXT_ovr_8 := GetFuncOrNil&<procedure(semaphore: UInt32; numBufferBarriers: UInt32; var buffers: UInt32; numTextureBarriers: UInt32; textures: IntPtr; dstLayouts: IntPtr)>(z_SignalSemaphoreEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure SignalSemaphoreEXT(semaphore: UInt32; numBufferBarriers: UInt32; buffers: array of UInt32; numTextureBarriers: UInt32; textures: IntPtr; dstLayouts: IntPtr);
    begin
      z_SignalSemaphoreEXT_ovr_8(semaphore, numBufferBarriers, buffers[0], numTextureBarriers, textures, dstLayouts);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure SignalSemaphoreEXT(semaphore: UInt32; numBufferBarriers: UInt32; var buffers: UInt32; numTextureBarriers: UInt32; textures: array of UInt32; dstLayouts: array of TextureLayout);
    begin
      z_SignalSemaphoreEXT_ovr_0(semaphore, numBufferBarriers, buffers, numTextureBarriers, textures[0], dstLayouts[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure SignalSemaphoreEXT(semaphore: UInt32; numBufferBarriers: UInt32; var buffers: UInt32; numTextureBarriers: UInt32; textures: array of UInt32; var dstLayouts: TextureLayout);
    begin
      z_SignalSemaphoreEXT_ovr_0(semaphore, numBufferBarriers, buffers, numTextureBarriers, textures[0], dstLayouts);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure SignalSemaphoreEXT(semaphore: UInt32; numBufferBarriers: UInt32; var buffers: UInt32; numTextureBarriers: UInt32; textures: array of UInt32; dstLayouts: IntPtr);
    begin
      z_SignalSemaphoreEXT_ovr_2(semaphore, numBufferBarriers, buffers, numTextureBarriers, textures[0], dstLayouts);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure SignalSemaphoreEXT(semaphore: UInt32; numBufferBarriers: UInt32; var buffers: UInt32; numTextureBarriers: UInt32; var textures: UInt32; dstLayouts: array of TextureLayout);
    begin
      z_SignalSemaphoreEXT_ovr_0(semaphore, numBufferBarriers, buffers, numTextureBarriers, textures, dstLayouts[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure SignalSemaphoreEXT(semaphore: UInt32; numBufferBarriers: UInt32; var buffers: UInt32; numTextureBarriers: UInt32; var textures: UInt32; var dstLayouts: TextureLayout);
    begin
      z_SignalSemaphoreEXT_ovr_0(semaphore, numBufferBarriers, buffers, numTextureBarriers, textures, dstLayouts);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure SignalSemaphoreEXT(semaphore: UInt32; numBufferBarriers: UInt32; var buffers: UInt32; numTextureBarriers: UInt32; var textures: UInt32; dstLayouts: IntPtr);
    begin
      z_SignalSemaphoreEXT_ovr_2(semaphore, numBufferBarriers, buffers, numTextureBarriers, textures, dstLayouts);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure SignalSemaphoreEXT(semaphore: UInt32; numBufferBarriers: UInt32; var buffers: UInt32; numTextureBarriers: UInt32; textures: IntPtr; dstLayouts: array of TextureLayout);
    begin
      z_SignalSemaphoreEXT_ovr_6(semaphore, numBufferBarriers, buffers, numTextureBarriers, textures, dstLayouts[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure SignalSemaphoreEXT(semaphore: UInt32; numBufferBarriers: UInt32; var buffers: UInt32; numTextureBarriers: UInt32; textures: IntPtr; var dstLayouts: TextureLayout);
    begin
      z_SignalSemaphoreEXT_ovr_6(semaphore, numBufferBarriers, buffers, numTextureBarriers, textures, dstLayouts);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure SignalSemaphoreEXT(semaphore: UInt32; numBufferBarriers: UInt32; var buffers: UInt32; numTextureBarriers: UInt32; textures: IntPtr; dstLayouts: IntPtr);
    begin
      z_SignalSemaphoreEXT_ovr_8(semaphore, numBufferBarriers, buffers, numTextureBarriers, textures, dstLayouts);
    end;
    public z_SignalSemaphoreEXT_ovr_18 := GetFuncOrNil&<procedure(semaphore: UInt32; numBufferBarriers: UInt32; buffers: IntPtr; numTextureBarriers: UInt32; var textures: UInt32; var dstLayouts: TextureLayout)>(z_SignalSemaphoreEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure SignalSemaphoreEXT(semaphore: UInt32; numBufferBarriers: UInt32; buffers: IntPtr; numTextureBarriers: UInt32; textures: array of UInt32; dstLayouts: array of TextureLayout);
    begin
      z_SignalSemaphoreEXT_ovr_18(semaphore, numBufferBarriers, buffers, numTextureBarriers, textures[0], dstLayouts[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure SignalSemaphoreEXT(semaphore: UInt32; numBufferBarriers: UInt32; buffers: IntPtr; numTextureBarriers: UInt32; textures: array of UInt32; var dstLayouts: TextureLayout);
    begin
      z_SignalSemaphoreEXT_ovr_18(semaphore, numBufferBarriers, buffers, numTextureBarriers, textures[0], dstLayouts);
    end;
    public z_SignalSemaphoreEXT_ovr_20 := GetFuncOrNil&<procedure(semaphore: UInt32; numBufferBarriers: UInt32; buffers: IntPtr; numTextureBarriers: UInt32; var textures: UInt32; dstLayouts: IntPtr)>(z_SignalSemaphoreEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure SignalSemaphoreEXT(semaphore: UInt32; numBufferBarriers: UInt32; buffers: IntPtr; numTextureBarriers: UInt32; textures: array of UInt32; dstLayouts: IntPtr);
    begin
      z_SignalSemaphoreEXT_ovr_20(semaphore, numBufferBarriers, buffers, numTextureBarriers, textures[0], dstLayouts);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure SignalSemaphoreEXT(semaphore: UInt32; numBufferBarriers: UInt32; buffers: IntPtr; numTextureBarriers: UInt32; var textures: UInt32; dstLayouts: array of TextureLayout);
    begin
      z_SignalSemaphoreEXT_ovr_18(semaphore, numBufferBarriers, buffers, numTextureBarriers, textures, dstLayouts[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure SignalSemaphoreEXT(semaphore: UInt32; numBufferBarriers: UInt32; buffers: IntPtr; numTextureBarriers: UInt32; var textures: UInt32; var dstLayouts: TextureLayout);
    begin
      z_SignalSemaphoreEXT_ovr_18(semaphore, numBufferBarriers, buffers, numTextureBarriers, textures, dstLayouts);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure SignalSemaphoreEXT(semaphore: UInt32; numBufferBarriers: UInt32; buffers: IntPtr; numTextureBarriers: UInt32; var textures: UInt32; dstLayouts: IntPtr);
    begin
      z_SignalSemaphoreEXT_ovr_20(semaphore, numBufferBarriers, buffers, numTextureBarriers, textures, dstLayouts);
    end;
    public z_SignalSemaphoreEXT_ovr_24 := GetFuncOrNil&<procedure(semaphore: UInt32; numBufferBarriers: UInt32; buffers: IntPtr; numTextureBarriers: UInt32; textures: IntPtr; var dstLayouts: TextureLayout)>(z_SignalSemaphoreEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure SignalSemaphoreEXT(semaphore: UInt32; numBufferBarriers: UInt32; buffers: IntPtr; numTextureBarriers: UInt32; textures: IntPtr; dstLayouts: array of TextureLayout);
    begin
      z_SignalSemaphoreEXT_ovr_24(semaphore, numBufferBarriers, buffers, numTextureBarriers, textures, dstLayouts[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure SignalSemaphoreEXT(semaphore: UInt32; numBufferBarriers: UInt32; buffers: IntPtr; numTextureBarriers: UInt32; textures: IntPtr; var dstLayouts: TextureLayout);
    begin
      z_SignalSemaphoreEXT_ovr_24(semaphore, numBufferBarriers, buffers, numTextureBarriers, textures, dstLayouts);
    end;
    public z_SignalSemaphoreEXT_ovr_26 := GetFuncOrNil&<procedure(semaphore: UInt32; numBufferBarriers: UInt32; buffers: IntPtr; numTextureBarriers: UInt32; textures: IntPtr; dstLayouts: IntPtr)>(z_SignalSemaphoreEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure SignalSemaphoreEXT(semaphore: UInt32; numBufferBarriers: UInt32; buffers: IntPtr; numTextureBarriers: UInt32; textures: IntPtr; dstLayouts: IntPtr);
    begin
      z_SignalSemaphoreEXT_ovr_26(semaphore, numBufferBarriers, buffers, numTextureBarriers, textures, dstLayouts);
    end;
    
  end;
  
  glSemaphoreFdEXT = sealed class
    public static function GetFuncAdr([MarshalAs(UnmanagedType.LPStr)] lpszProc: string): IntPtr;
    external 'opengl32.dll' name 'wglGetProcAddress';
    public static function GetFuncOrNil<T>(fadr: IntPtr) :=
    fadr=IntPtr.Zero ? default(T) :
    Marshal.GetDelegateForFunctionPointer&<T>(fadr);
    
    public z_ImportSemaphoreFdEXT_adr := GetFuncAdr('glImportSemaphoreFdEXT');
    public z_ImportSemaphoreFdEXT_ovr_0 := GetFuncOrNil&<procedure(semaphore: UInt32; handleType: ExternalHandleType; fd: Int32)>(z_ImportSemaphoreFdEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ImportSemaphoreFdEXT(semaphore: UInt32; handleType: ExternalHandleType; fd: Int32);
    begin
      z_ImportSemaphoreFdEXT_ovr_0(semaphore, handleType, fd);
    end;
    
  end;
  
  glSemaphoreWin32EXT = sealed class
    public static function GetFuncAdr([MarshalAs(UnmanagedType.LPStr)] lpszProc: string): IntPtr;
    external 'opengl32.dll' name 'wglGetProcAddress';
    public static function GetFuncOrNil<T>(fadr: IntPtr) :=
    fadr=IntPtr.Zero ? default(T) :
    Marshal.GetDelegateForFunctionPointer&<T>(fadr);
    
    public z_ImportSemaphoreWin32HandleEXT_adr := GetFuncAdr('glImportSemaphoreWin32HandleEXT');
    public z_ImportSemaphoreWin32HandleEXT_ovr_0 := GetFuncOrNil&<procedure(semaphore: UInt32; handleType: ExternalHandleType; handle: IntPtr)>(z_ImportSemaphoreWin32HandleEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ImportSemaphoreWin32HandleEXT(semaphore: UInt32; handleType: ExternalHandleType; handle: IntPtr);
    begin
      z_ImportSemaphoreWin32HandleEXT_ovr_0(semaphore, handleType, handle);
    end;
    
    public z_ImportSemaphoreWin32NameEXT_adr := GetFuncAdr('glImportSemaphoreWin32NameEXT');
    public z_ImportSemaphoreWin32NameEXT_ovr_0 := GetFuncOrNil&<procedure(semaphore: UInt32; handleType: ExternalHandleType; name: IntPtr)>(z_ImportSemaphoreWin32NameEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ImportSemaphoreWin32NameEXT(semaphore: UInt32; handleType: ExternalHandleType; name: IntPtr);
    begin
      z_ImportSemaphoreWin32NameEXT_ovr_0(semaphore, handleType, name);
    end;
    
  end;
  
  glSecondaryColorEXT = sealed class
    public static function GetFuncAdr([MarshalAs(UnmanagedType.LPStr)] lpszProc: string): IntPtr;
    external 'opengl32.dll' name 'wglGetProcAddress';
    public static function GetFuncOrNil<T>(fadr: IntPtr) :=
    fadr=IntPtr.Zero ? default(T) :
    Marshal.GetDelegateForFunctionPointer&<T>(fadr);
    
    public z_SecondaryColor3bEXT_adr := GetFuncAdr('glSecondaryColor3bEXT');
    public z_SecondaryColor3bEXT_ovr_0 := GetFuncOrNil&<procedure(red: SByte; green: SByte; blue: SByte)>(z_SecondaryColor3bEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure SecondaryColor3bEXT(red: SByte; green: SByte; blue: SByte);
    begin
      z_SecondaryColor3bEXT_ovr_0(red, green, blue);
    end;
    
    public z_SecondaryColor3bvEXT_adr := GetFuncAdr('glSecondaryColor3bvEXT');
    public z_SecondaryColor3bvEXT_ovr_0 := GetFuncOrNil&<procedure(var v: SByte)>(z_SecondaryColor3bvEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure SecondaryColor3bvEXT(v: array of SByte);
    begin
      z_SecondaryColor3bvEXT_ovr_0(v[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure SecondaryColor3bvEXT(var v: SByte);
    begin
      z_SecondaryColor3bvEXT_ovr_0(v);
    end;
    public z_SecondaryColor3bvEXT_ovr_2 := GetFuncOrNil&<procedure(v: IntPtr)>(z_SecondaryColor3bvEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure SecondaryColor3bvEXT(v: IntPtr);
    begin
      z_SecondaryColor3bvEXT_ovr_2(v);
    end;
    
    public z_SecondaryColor3dEXT_adr := GetFuncAdr('glSecondaryColor3dEXT');
    public z_SecondaryColor3dEXT_ovr_0 := GetFuncOrNil&<procedure(red: real; green: real; blue: real)>(z_SecondaryColor3dEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure SecondaryColor3dEXT(red: real; green: real; blue: real);
    begin
      z_SecondaryColor3dEXT_ovr_0(red, green, blue);
    end;
    
    public z_SecondaryColor3dvEXT_adr := GetFuncAdr('glSecondaryColor3dvEXT');
    public z_SecondaryColor3dvEXT_ovr_0 := GetFuncOrNil&<procedure(var v: real)>(z_SecondaryColor3dvEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure SecondaryColor3dvEXT(v: array of real);
    begin
      z_SecondaryColor3dvEXT_ovr_0(v[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure SecondaryColor3dvEXT(var v: real);
    begin
      z_SecondaryColor3dvEXT_ovr_0(v);
    end;
    public z_SecondaryColor3dvEXT_ovr_2 := GetFuncOrNil&<procedure(v: IntPtr)>(z_SecondaryColor3dvEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure SecondaryColor3dvEXT(v: IntPtr);
    begin
      z_SecondaryColor3dvEXT_ovr_2(v);
    end;
    
    public z_SecondaryColor3fEXT_adr := GetFuncAdr('glSecondaryColor3fEXT');
    public z_SecondaryColor3fEXT_ovr_0 := GetFuncOrNil&<procedure(red: single; green: single; blue: single)>(z_SecondaryColor3fEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure SecondaryColor3fEXT(red: single; green: single; blue: single);
    begin
      z_SecondaryColor3fEXT_ovr_0(red, green, blue);
    end;
    
    public z_SecondaryColor3fvEXT_adr := GetFuncAdr('glSecondaryColor3fvEXT');
    public z_SecondaryColor3fvEXT_ovr_0 := GetFuncOrNil&<procedure(var v: single)>(z_SecondaryColor3fvEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure SecondaryColor3fvEXT(v: array of single);
    begin
      z_SecondaryColor3fvEXT_ovr_0(v[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure SecondaryColor3fvEXT(var v: single);
    begin
      z_SecondaryColor3fvEXT_ovr_0(v);
    end;
    public z_SecondaryColor3fvEXT_ovr_2 := GetFuncOrNil&<procedure(v: IntPtr)>(z_SecondaryColor3fvEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure SecondaryColor3fvEXT(v: IntPtr);
    begin
      z_SecondaryColor3fvEXT_ovr_2(v);
    end;
    
    public z_SecondaryColor3iEXT_adr := GetFuncAdr('glSecondaryColor3iEXT');
    public z_SecondaryColor3iEXT_ovr_0 := GetFuncOrNil&<procedure(red: Int32; green: Int32; blue: Int32)>(z_SecondaryColor3iEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure SecondaryColor3iEXT(red: Int32; green: Int32; blue: Int32);
    begin
      z_SecondaryColor3iEXT_ovr_0(red, green, blue);
    end;
    
    public z_SecondaryColor3ivEXT_adr := GetFuncAdr('glSecondaryColor3ivEXT');
    public z_SecondaryColor3ivEXT_ovr_0 := GetFuncOrNil&<procedure(var v: Int32)>(z_SecondaryColor3ivEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure SecondaryColor3ivEXT(v: array of Int32);
    begin
      z_SecondaryColor3ivEXT_ovr_0(v[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure SecondaryColor3ivEXT(var v: Int32);
    begin
      z_SecondaryColor3ivEXT_ovr_0(v);
    end;
    public z_SecondaryColor3ivEXT_ovr_2 := GetFuncOrNil&<procedure(v: IntPtr)>(z_SecondaryColor3ivEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure SecondaryColor3ivEXT(v: IntPtr);
    begin
      z_SecondaryColor3ivEXT_ovr_2(v);
    end;
    
    public z_SecondaryColor3sEXT_adr := GetFuncAdr('glSecondaryColor3sEXT');
    public z_SecondaryColor3sEXT_ovr_0 := GetFuncOrNil&<procedure(red: Int16; green: Int16; blue: Int16)>(z_SecondaryColor3sEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure SecondaryColor3sEXT(red: Int16; green: Int16; blue: Int16);
    begin
      z_SecondaryColor3sEXT_ovr_0(red, green, blue);
    end;
    
    public z_SecondaryColor3svEXT_adr := GetFuncAdr('glSecondaryColor3svEXT');
    public z_SecondaryColor3svEXT_ovr_0 := GetFuncOrNil&<procedure(var v: Int16)>(z_SecondaryColor3svEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure SecondaryColor3svEXT(v: array of Int16);
    begin
      z_SecondaryColor3svEXT_ovr_0(v[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure SecondaryColor3svEXT(var v: Int16);
    begin
      z_SecondaryColor3svEXT_ovr_0(v);
    end;
    public z_SecondaryColor3svEXT_ovr_2 := GetFuncOrNil&<procedure(v: IntPtr)>(z_SecondaryColor3svEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure SecondaryColor3svEXT(v: IntPtr);
    begin
      z_SecondaryColor3svEXT_ovr_2(v);
    end;
    
    public z_SecondaryColor3ubEXT_adr := GetFuncAdr('glSecondaryColor3ubEXT');
    public z_SecondaryColor3ubEXT_ovr_0 := GetFuncOrNil&<procedure(red: Byte; green: Byte; blue: Byte)>(z_SecondaryColor3ubEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure SecondaryColor3ubEXT(red: Byte; green: Byte; blue: Byte);
    begin
      z_SecondaryColor3ubEXT_ovr_0(red, green, blue);
    end;
    
    public z_SecondaryColor3ubvEXT_adr := GetFuncAdr('glSecondaryColor3ubvEXT');
    public z_SecondaryColor3ubvEXT_ovr_0 := GetFuncOrNil&<procedure(var v: Byte)>(z_SecondaryColor3ubvEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure SecondaryColor3ubvEXT(v: array of Byte);
    begin
      z_SecondaryColor3ubvEXT_ovr_0(v[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure SecondaryColor3ubvEXT(var v: Byte);
    begin
      z_SecondaryColor3ubvEXT_ovr_0(v);
    end;
    public z_SecondaryColor3ubvEXT_ovr_2 := GetFuncOrNil&<procedure(v: IntPtr)>(z_SecondaryColor3ubvEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure SecondaryColor3ubvEXT(v: IntPtr);
    begin
      z_SecondaryColor3ubvEXT_ovr_2(v);
    end;
    
    public z_SecondaryColor3uiEXT_adr := GetFuncAdr('glSecondaryColor3uiEXT');
    public z_SecondaryColor3uiEXT_ovr_0 := GetFuncOrNil&<procedure(red: UInt32; green: UInt32; blue: UInt32)>(z_SecondaryColor3uiEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure SecondaryColor3uiEXT(red: UInt32; green: UInt32; blue: UInt32);
    begin
      z_SecondaryColor3uiEXT_ovr_0(red, green, blue);
    end;
    
    public z_SecondaryColor3uivEXT_adr := GetFuncAdr('glSecondaryColor3uivEXT');
    public z_SecondaryColor3uivEXT_ovr_0 := GetFuncOrNil&<procedure(var v: UInt32)>(z_SecondaryColor3uivEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure SecondaryColor3uivEXT(v: array of UInt32);
    begin
      z_SecondaryColor3uivEXT_ovr_0(v[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure SecondaryColor3uivEXT(var v: UInt32);
    begin
      z_SecondaryColor3uivEXT_ovr_0(v);
    end;
    public z_SecondaryColor3uivEXT_ovr_2 := GetFuncOrNil&<procedure(v: IntPtr)>(z_SecondaryColor3uivEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure SecondaryColor3uivEXT(v: IntPtr);
    begin
      z_SecondaryColor3uivEXT_ovr_2(v);
    end;
    
    public z_SecondaryColor3usEXT_adr := GetFuncAdr('glSecondaryColor3usEXT');
    public z_SecondaryColor3usEXT_ovr_0 := GetFuncOrNil&<procedure(red: UInt16; green: UInt16; blue: UInt16)>(z_SecondaryColor3usEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure SecondaryColor3usEXT(red: UInt16; green: UInt16; blue: UInt16);
    begin
      z_SecondaryColor3usEXT_ovr_0(red, green, blue);
    end;
    
    public z_SecondaryColor3usvEXT_adr := GetFuncAdr('glSecondaryColor3usvEXT');
    public z_SecondaryColor3usvEXT_ovr_0 := GetFuncOrNil&<procedure(var v: UInt16)>(z_SecondaryColor3usvEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure SecondaryColor3usvEXT(v: array of UInt16);
    begin
      z_SecondaryColor3usvEXT_ovr_0(v[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure SecondaryColor3usvEXT(var v: UInt16);
    begin
      z_SecondaryColor3usvEXT_ovr_0(v);
    end;
    public z_SecondaryColor3usvEXT_ovr_2 := GetFuncOrNil&<procedure(v: IntPtr)>(z_SecondaryColor3usvEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure SecondaryColor3usvEXT(v: IntPtr);
    begin
      z_SecondaryColor3usvEXT_ovr_2(v);
    end;
    
    public z_SecondaryColorPointerEXT_adr := GetFuncAdr('glSecondaryColorPointerEXT');
    public z_SecondaryColorPointerEXT_ovr_0 := GetFuncOrNil&<procedure(size: Int32; &type: ColorPointerType; stride: Int32; pointer: IntPtr)>(z_SecondaryColorPointerEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure SecondaryColorPointerEXT(size: Int32; &type: ColorPointerType; stride: Int32; pointer: IntPtr);
    begin
      z_SecondaryColorPointerEXT_ovr_0(size, &type, stride, pointer);
    end;
    
  end;
  
  glSeparateShaderObjectsEXT = sealed class
    public static function GetFuncAdr([MarshalAs(UnmanagedType.LPStr)] lpszProc: string): IntPtr;
    external 'opengl32.dll' name 'wglGetProcAddress';
    public static function GetFuncOrNil<T>(fadr: IntPtr) :=
    fadr=IntPtr.Zero ? default(T) :
    Marshal.GetDelegateForFunctionPointer&<T>(fadr);
    
    public z_UseShaderProgramEXT_adr := GetFuncAdr('glUseShaderProgramEXT');
    public z_UseShaderProgramEXT_ovr_0 := GetFuncOrNil&<procedure(&type: DummyEnum; &program: UInt32)>(z_UseShaderProgramEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure UseShaderProgramEXT(&type: DummyEnum; &program: UInt32);
    begin
      z_UseShaderProgramEXT_ovr_0(&type, &program);
    end;
    
    public z_ActiveProgramEXT_adr := GetFuncAdr('glActiveProgramEXT');
    public z_ActiveProgramEXT_ovr_0 := GetFuncOrNil&<procedure(&program: UInt32)>(z_ActiveProgramEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ActiveProgramEXT(&program: UInt32);
    begin
      z_ActiveProgramEXT_ovr_0(&program);
    end;
    
    public z_CreateShaderProgramEXT_adr := GetFuncAdr('glCreateShaderProgramEXT');
    public z_CreateShaderProgramEXT_ovr_0 := GetFuncOrNil&<function(&type: ShaderType; _string: IntPtr): UInt32>(z_CreateShaderProgramEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function CreateShaderProgramEXT(&type: ShaderType; _string: string): UInt32;
    begin
      var par_2_str_ptr := Marshal.StringToHGlobalAnsi(_string);
      Result := z_CreateShaderProgramEXT_ovr_0(&type, par_2_str_ptr);
      Marshal.FreeHGlobal(par_2_str_ptr);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function CreateShaderProgramEXT(&type: ShaderType; _string: IntPtr): UInt32;
    begin
      Result := z_CreateShaderProgramEXT_ovr_0(&type, _string);
    end;
    
  end;
  
  glShaderFramebufferFetchNonCoherentEXT = sealed class
    public static function GetFuncAdr([MarshalAs(UnmanagedType.LPStr)] lpszProc: string): IntPtr;
    external 'opengl32.dll' name 'wglGetProcAddress';
    public static function GetFuncOrNil<T>(fadr: IntPtr) :=
    fadr=IntPtr.Zero ? default(T) :
    Marshal.GetDelegateForFunctionPointer&<T>(fadr);
    
    public z_FramebufferFetchBarrierEXT_adr := GetFuncAdr('glFramebufferFetchBarrierEXT');
    public z_FramebufferFetchBarrierEXT_ovr_0 := GetFuncOrNil&<procedure>(z_FramebufferFetchBarrierEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure FramebufferFetchBarrierEXT;
    begin
      z_FramebufferFetchBarrierEXT_ovr_0;
    end;
    
  end;
  
  glShaderImageLoadStoreEXT = sealed class
    public static function GetFuncAdr([MarshalAs(UnmanagedType.LPStr)] lpszProc: string): IntPtr;
    external 'opengl32.dll' name 'wglGetProcAddress';
    public static function GetFuncOrNil<T>(fadr: IntPtr) :=
    fadr=IntPtr.Zero ? default(T) :
    Marshal.GetDelegateForFunctionPointer&<T>(fadr);
    
    public z_BindImageTextureEXT_adr := GetFuncAdr('glBindImageTextureEXT');
    public z_BindImageTextureEXT_ovr_0 := GetFuncOrNil&<procedure(index: UInt32; texture: UInt32; level: Int32; layered: boolean; layer: Int32; access: BufferAccessARB; format: Int32)>(z_BindImageTextureEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure BindImageTextureEXT(index: UInt32; texture: UInt32; level: Int32; layered: boolean; layer: Int32; access: BufferAccessARB; format: Int32);
    begin
      z_BindImageTextureEXT_ovr_0(index, texture, level, layered, layer, access, format);
    end;
    
    public z_MemoryBarrierEXT_adr := GetFuncAdr('glMemoryBarrierEXT');
    public z_MemoryBarrierEXT_ovr_0 := GetFuncOrNil&<procedure(barriers: MemoryBarrierMask)>(z_MemoryBarrierEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MemoryBarrierEXT(barriers: MemoryBarrierMask);
    begin
      z_MemoryBarrierEXT_ovr_0(barriers);
    end;
    
  end;
  
  glStencilClearTagEXT = sealed class
    public static function GetFuncAdr([MarshalAs(UnmanagedType.LPStr)] lpszProc: string): IntPtr;
    external 'opengl32.dll' name 'wglGetProcAddress';
    public static function GetFuncOrNil<T>(fadr: IntPtr) :=
    fadr=IntPtr.Zero ? default(T) :
    Marshal.GetDelegateForFunctionPointer&<T>(fadr);
    
    public z_StencilClearTagEXT_adr := GetFuncAdr('glStencilClearTagEXT');
    public z_StencilClearTagEXT_ovr_0 := GetFuncOrNil&<procedure(stencilTagBits: Int32; stencilClearTag: UInt32)>(z_StencilClearTagEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure StencilClearTagEXT(stencilTagBits: Int32; stencilClearTag: UInt32);
    begin
      z_StencilClearTagEXT_ovr_0(stencilTagBits, stencilClearTag);
    end;
    
  end;
  
  glStencilTwoSideEXT = sealed class
    public static function GetFuncAdr([MarshalAs(UnmanagedType.LPStr)] lpszProc: string): IntPtr;
    external 'opengl32.dll' name 'wglGetProcAddress';
    public static function GetFuncOrNil<T>(fadr: IntPtr) :=
    fadr=IntPtr.Zero ? default(T) :
    Marshal.GetDelegateForFunctionPointer&<T>(fadr);
    
    public z_ActiveStencilFaceEXT_adr := GetFuncAdr('glActiveStencilFaceEXT');
    public z_ActiveStencilFaceEXT_ovr_0 := GetFuncOrNil&<procedure(face: StencilFaceDirection)>(z_ActiveStencilFaceEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ActiveStencilFaceEXT(face: StencilFaceDirection);
    begin
      z_ActiveStencilFaceEXT_ovr_0(face);
    end;
    
  end;
  
  glSubtextureEXT = sealed class
    public static function GetFuncAdr([MarshalAs(UnmanagedType.LPStr)] lpszProc: string): IntPtr;
    external 'opengl32.dll' name 'wglGetProcAddress';
    public static function GetFuncOrNil<T>(fadr: IntPtr) :=
    fadr=IntPtr.Zero ? default(T) :
    Marshal.GetDelegateForFunctionPointer&<T>(fadr);
    
    public z_TexSubImage1DEXT_adr := GetFuncAdr('glTexSubImage1DEXT');
    public z_TexSubImage1DEXT_ovr_0 := GetFuncOrNil&<procedure(target: TextureTarget; level: Int32; xoffset: Int32; width: Int32; format: PixelFormat; &type: PixelType; pixels: IntPtr)>(z_TexSubImage1DEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TexSubImage1DEXT(target: TextureTarget; level: Int32; xoffset: Int32; width: Int32; format: PixelFormat; &type: PixelType; pixels: IntPtr);
    begin
      z_TexSubImage1DEXT_ovr_0(target, level, xoffset, width, format, &type, pixels);
    end;
    
    public z_TexSubImage2DEXT_adr := GetFuncAdr('glTexSubImage2DEXT');
    public z_TexSubImage2DEXT_ovr_0 := GetFuncOrNil&<procedure(target: TextureTarget; level: Int32; xoffset: Int32; yoffset: Int32; width: Int32; height: Int32; format: PixelFormat; &type: PixelType; pixels: IntPtr)>(z_TexSubImage2DEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TexSubImage2DEXT(target: TextureTarget; level: Int32; xoffset: Int32; yoffset: Int32; width: Int32; height: Int32; format: PixelFormat; &type: PixelType; pixels: IntPtr);
    begin
      z_TexSubImage2DEXT_ovr_0(target, level, xoffset, yoffset, width, height, format, &type, pixels);
    end;
    
  end;
  
  glTexture3DEXT = sealed class
    public static function GetFuncAdr([MarshalAs(UnmanagedType.LPStr)] lpszProc: string): IntPtr;
    external 'opengl32.dll' name 'wglGetProcAddress';
    public static function GetFuncOrNil<T>(fadr: IntPtr) :=
    fadr=IntPtr.Zero ? default(T) :
    Marshal.GetDelegateForFunctionPointer&<T>(fadr);
    
    public z_TexImage3DEXT_adr := GetFuncAdr('glTexImage3DEXT');
    public z_TexImage3DEXT_ovr_0 := GetFuncOrNil&<procedure(target: TextureTarget; level: Int32; _internalformat: InternalFormat; width: Int32; height: Int32; depth: Int32; border: Int32; format: PixelFormat; &type: PixelType; pixels: IntPtr)>(z_TexImage3DEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TexImage3DEXT(target: TextureTarget; level: Int32; _internalformat: InternalFormat; width: Int32; height: Int32; depth: Int32; border: Int32; format: PixelFormat; &type: PixelType; pixels: IntPtr);
    begin
      z_TexImage3DEXT_ovr_0(target, level, _internalformat, width, height, depth, border, format, &type, pixels);
    end;
    
    public z_TexSubImage3DEXT_adr := GetFuncAdr('glTexSubImage3DEXT');
    public z_TexSubImage3DEXT_ovr_0 := GetFuncOrNil&<procedure(target: TextureTarget; level: Int32; xoffset: Int32; yoffset: Int32; zoffset: Int32; width: Int32; height: Int32; depth: Int32; format: PixelFormat; &type: PixelType; pixels: IntPtr)>(z_TexSubImage3DEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TexSubImage3DEXT(target: TextureTarget; level: Int32; xoffset: Int32; yoffset: Int32; zoffset: Int32; width: Int32; height: Int32; depth: Int32; format: PixelFormat; &type: PixelType; pixels: IntPtr);
    begin
      z_TexSubImage3DEXT_ovr_0(target, level, xoffset, yoffset, zoffset, width, height, depth, format, &type, pixels);
    end;
    
  end;
  
  glTextureArrayEXT = sealed class
    public static function GetFuncAdr([MarshalAs(UnmanagedType.LPStr)] lpszProc: string): IntPtr;
    external 'opengl32.dll' name 'wglGetProcAddress';
    public static function GetFuncOrNil<T>(fadr: IntPtr) :=
    fadr=IntPtr.Zero ? default(T) :
    Marshal.GetDelegateForFunctionPointer&<T>(fadr);
    
    public z_FramebufferTextureLayerEXT_adr := GetFuncAdr('glFramebufferTextureLayerEXT');
    public z_FramebufferTextureLayerEXT_ovr_0 := GetFuncOrNil&<procedure(target: FramebufferTarget; attachment: FramebufferAttachment; texture: UInt32; level: Int32; layer: Int32)>(z_FramebufferTextureLayerEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure FramebufferTextureLayerEXT(target: FramebufferTarget; attachment: FramebufferAttachment; texture: UInt32; level: Int32; layer: Int32);
    begin
      z_FramebufferTextureLayerEXT_ovr_0(target, attachment, texture, level, layer);
    end;
    
  end;
  
  glTextureBufferObjectEXT = sealed class
    public static function GetFuncAdr([MarshalAs(UnmanagedType.LPStr)] lpszProc: string): IntPtr;
    external 'opengl32.dll' name 'wglGetProcAddress';
    public static function GetFuncOrNil<T>(fadr: IntPtr) :=
    fadr=IntPtr.Zero ? default(T) :
    Marshal.GetDelegateForFunctionPointer&<T>(fadr);
    
    public z_TexBufferEXT_adr := GetFuncAdr('glTexBufferEXT');
    public z_TexBufferEXT_ovr_0 := GetFuncOrNil&<procedure(target: TextureTarget; _internalformat: InternalFormat; buffer: UInt32)>(z_TexBufferEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TexBufferEXT(target: TextureTarget; _internalformat: InternalFormat; buffer: UInt32);
    begin
      z_TexBufferEXT_ovr_0(target, _internalformat, buffer);
    end;
    
  end;
  
  glTextureIntegerEXT = sealed class
    public static function GetFuncAdr([MarshalAs(UnmanagedType.LPStr)] lpszProc: string): IntPtr;
    external 'opengl32.dll' name 'wglGetProcAddress';
    public static function GetFuncOrNil<T>(fadr: IntPtr) :=
    fadr=IntPtr.Zero ? default(T) :
    Marshal.GetDelegateForFunctionPointer&<T>(fadr);
    
    public z_TexParameterIivEXT_adr := GetFuncAdr('glTexParameterIivEXT');
    public z_TexParameterIivEXT_ovr_0 := GetFuncOrNil&<procedure(target: TextureTarget; pname: TextureParameterName; var &params: Int32)>(z_TexParameterIivEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TexParameterIivEXT(target: TextureTarget; pname: TextureParameterName; &params: array of Int32);
    begin
      z_TexParameterIivEXT_ovr_0(target, pname, &params[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TexParameterIivEXT(target: TextureTarget; pname: TextureParameterName; var &params: Int32);
    begin
      z_TexParameterIivEXT_ovr_0(target, pname, &params);
    end;
    public z_TexParameterIivEXT_ovr_2 := GetFuncOrNil&<procedure(target: TextureTarget; pname: TextureParameterName; &params: IntPtr)>(z_TexParameterIivEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TexParameterIivEXT(target: TextureTarget; pname: TextureParameterName; &params: IntPtr);
    begin
      z_TexParameterIivEXT_ovr_2(target, pname, &params);
    end;
    
    public z_TexParameterIuivEXT_adr := GetFuncAdr('glTexParameterIuivEXT');
    public z_TexParameterIuivEXT_ovr_0 := GetFuncOrNil&<procedure(target: TextureTarget; pname: TextureParameterName; var &params: UInt32)>(z_TexParameterIuivEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TexParameterIuivEXT(target: TextureTarget; pname: TextureParameterName; &params: array of UInt32);
    begin
      z_TexParameterIuivEXT_ovr_0(target, pname, &params[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TexParameterIuivEXT(target: TextureTarget; pname: TextureParameterName; var &params: UInt32);
    begin
      z_TexParameterIuivEXT_ovr_0(target, pname, &params);
    end;
    public z_TexParameterIuivEXT_ovr_2 := GetFuncOrNil&<procedure(target: TextureTarget; pname: TextureParameterName; &params: IntPtr)>(z_TexParameterIuivEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TexParameterIuivEXT(target: TextureTarget; pname: TextureParameterName; &params: IntPtr);
    begin
      z_TexParameterIuivEXT_ovr_2(target, pname, &params);
    end;
    
    public z_GetTexParameterIivEXT_adr := GetFuncAdr('glGetTexParameterIivEXT');
    public z_GetTexParameterIivEXT_ovr_0 := GetFuncOrNil&<procedure(target: TextureTarget; pname: GetTextureParameter; var &params: Int32)>(z_GetTexParameterIivEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetTexParameterIivEXT(target: TextureTarget; pname: GetTextureParameter; &params: array of Int32);
    begin
      z_GetTexParameterIivEXT_ovr_0(target, pname, &params[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetTexParameterIivEXT(target: TextureTarget; pname: GetTextureParameter; var &params: Int32);
    begin
      z_GetTexParameterIivEXT_ovr_0(target, pname, &params);
    end;
    public z_GetTexParameterIivEXT_ovr_2 := GetFuncOrNil&<procedure(target: TextureTarget; pname: GetTextureParameter; &params: IntPtr)>(z_GetTexParameterIivEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetTexParameterIivEXT(target: TextureTarget; pname: GetTextureParameter; &params: IntPtr);
    begin
      z_GetTexParameterIivEXT_ovr_2(target, pname, &params);
    end;
    
    public z_GetTexParameterIuivEXT_adr := GetFuncAdr('glGetTexParameterIuivEXT');
    public z_GetTexParameterIuivEXT_ovr_0 := GetFuncOrNil&<procedure(target: TextureTarget; pname: GetTextureParameter; var &params: UInt32)>(z_GetTexParameterIuivEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetTexParameterIuivEXT(target: TextureTarget; pname: GetTextureParameter; &params: array of UInt32);
    begin
      z_GetTexParameterIuivEXT_ovr_0(target, pname, &params[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetTexParameterIuivEXT(target: TextureTarget; pname: GetTextureParameter; var &params: UInt32);
    begin
      z_GetTexParameterIuivEXT_ovr_0(target, pname, &params);
    end;
    public z_GetTexParameterIuivEXT_ovr_2 := GetFuncOrNil&<procedure(target: TextureTarget; pname: GetTextureParameter; &params: IntPtr)>(z_GetTexParameterIuivEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetTexParameterIuivEXT(target: TextureTarget; pname: GetTextureParameter; &params: IntPtr);
    begin
      z_GetTexParameterIuivEXT_ovr_2(target, pname, &params);
    end;
    
    public z_ClearColorIiEXT_adr := GetFuncAdr('glClearColorIiEXT');
    public z_ClearColorIiEXT_ovr_0 := GetFuncOrNil&<procedure(red: Int32; green: Int32; blue: Int32; alpha: Int32)>(z_ClearColorIiEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ClearColorIiEXT(red: Int32; green: Int32; blue: Int32; alpha: Int32);
    begin
      z_ClearColorIiEXT_ovr_0(red, green, blue, alpha);
    end;
    
    public z_ClearColorIuiEXT_adr := GetFuncAdr('glClearColorIuiEXT');
    public z_ClearColorIuiEXT_ovr_0 := GetFuncOrNil&<procedure(red: UInt32; green: UInt32; blue: UInt32; alpha: UInt32)>(z_ClearColorIuiEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ClearColorIuiEXT(red: UInt32; green: UInt32; blue: UInt32; alpha: UInt32);
    begin
      z_ClearColorIuiEXT_ovr_0(red, green, blue, alpha);
    end;
    
  end;
  
  glTextureObjectEXT = sealed class
    public static function GetFuncAdr([MarshalAs(UnmanagedType.LPStr)] lpszProc: string): IntPtr;
    external 'opengl32.dll' name 'wglGetProcAddress';
    public static function GetFuncOrNil<T>(fadr: IntPtr) :=
    fadr=IntPtr.Zero ? default(T) :
    Marshal.GetDelegateForFunctionPointer&<T>(fadr);
    
    public z_AreTexturesResidentEXT_adr := GetFuncAdr('glAreTexturesResidentEXT');
    public z_AreTexturesResidentEXT_ovr_0 := GetFuncOrNil&<function(n: Int32; var textures: UInt32; var residences: boolean): boolean>(z_AreTexturesResidentEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function AreTexturesResidentEXT(n: Int32; textures: array of UInt32; residences: array of boolean): boolean;
    begin
      Result := z_AreTexturesResidentEXT_ovr_0(n, textures[0], residences[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function AreTexturesResidentEXT(n: Int32; textures: array of UInt32; var residences: boolean): boolean;
    begin
      Result := z_AreTexturesResidentEXT_ovr_0(n, textures[0], residences);
    end;
    public z_AreTexturesResidentEXT_ovr_2 := GetFuncOrNil&<function(n: Int32; var textures: UInt32; residences: IntPtr): boolean>(z_AreTexturesResidentEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function AreTexturesResidentEXT(n: Int32; textures: array of UInt32; residences: IntPtr): boolean;
    begin
      Result := z_AreTexturesResidentEXT_ovr_2(n, textures[0], residences);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function AreTexturesResidentEXT(n: Int32; var textures: UInt32; residences: array of boolean): boolean;
    begin
      Result := z_AreTexturesResidentEXT_ovr_0(n, textures, residences[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function AreTexturesResidentEXT(n: Int32; var textures: UInt32; var residences: boolean): boolean;
    begin
      Result := z_AreTexturesResidentEXT_ovr_0(n, textures, residences);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function AreTexturesResidentEXT(n: Int32; var textures: UInt32; residences: IntPtr): boolean;
    begin
      Result := z_AreTexturesResidentEXT_ovr_2(n, textures, residences);
    end;
    public z_AreTexturesResidentEXT_ovr_6 := GetFuncOrNil&<function(n: Int32; textures: IntPtr; var residences: boolean): boolean>(z_AreTexturesResidentEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function AreTexturesResidentEXT(n: Int32; textures: IntPtr; residences: array of boolean): boolean;
    begin
      Result := z_AreTexturesResidentEXT_ovr_6(n, textures, residences[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function AreTexturesResidentEXT(n: Int32; textures: IntPtr; var residences: boolean): boolean;
    begin
      Result := z_AreTexturesResidentEXT_ovr_6(n, textures, residences);
    end;
    public z_AreTexturesResidentEXT_ovr_8 := GetFuncOrNil&<function(n: Int32; textures: IntPtr; residences: IntPtr): boolean>(z_AreTexturesResidentEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function AreTexturesResidentEXT(n: Int32; textures: IntPtr; residences: IntPtr): boolean;
    begin
      Result := z_AreTexturesResidentEXT_ovr_8(n, textures, residences);
    end;
    
    public z_BindTextureEXT_adr := GetFuncAdr('glBindTextureEXT');
    public z_BindTextureEXT_ovr_0 := GetFuncOrNil&<procedure(target: TextureTarget; texture: UInt32)>(z_BindTextureEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure BindTextureEXT(target: TextureTarget; texture: UInt32);
    begin
      z_BindTextureEXT_ovr_0(target, texture);
    end;
    
    public z_DeleteTexturesEXT_adr := GetFuncAdr('glDeleteTexturesEXT');
    public z_DeleteTexturesEXT_ovr_0 := GetFuncOrNil&<procedure(n: Int32; var textures: UInt32)>(z_DeleteTexturesEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure DeleteTexturesEXT(n: Int32; textures: array of UInt32);
    begin
      z_DeleteTexturesEXT_ovr_0(n, textures[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure DeleteTexturesEXT(n: Int32; var textures: UInt32);
    begin
      z_DeleteTexturesEXT_ovr_0(n, textures);
    end;
    public z_DeleteTexturesEXT_ovr_2 := GetFuncOrNil&<procedure(n: Int32; textures: IntPtr)>(z_DeleteTexturesEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure DeleteTexturesEXT(n: Int32; textures: IntPtr);
    begin
      z_DeleteTexturesEXT_ovr_2(n, textures);
    end;
    
    public z_GenTexturesEXT_adr := GetFuncAdr('glGenTexturesEXT');
    public z_GenTexturesEXT_ovr_0 := GetFuncOrNil&<procedure(n: Int32; var textures: UInt32)>(z_GenTexturesEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GenTexturesEXT(n: Int32; textures: array of UInt32);
    begin
      z_GenTexturesEXT_ovr_0(n, textures[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GenTexturesEXT(n: Int32; var textures: UInt32);
    begin
      z_GenTexturesEXT_ovr_0(n, textures);
    end;
    public z_GenTexturesEXT_ovr_2 := GetFuncOrNil&<procedure(n: Int32; textures: IntPtr)>(z_GenTexturesEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GenTexturesEXT(n: Int32; textures: IntPtr);
    begin
      z_GenTexturesEXT_ovr_2(n, textures);
    end;
    
    public z_IsTextureEXT_adr := GetFuncAdr('glIsTextureEXT');
    public z_IsTextureEXT_ovr_0 := GetFuncOrNil&<function(texture: UInt32): boolean>(z_IsTextureEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function IsTextureEXT(texture: UInt32): boolean;
    begin
      Result := z_IsTextureEXT_ovr_0(texture);
    end;
    
    public z_PrioritizeTexturesEXT_adr := GetFuncAdr('glPrioritizeTexturesEXT');
    public z_PrioritizeTexturesEXT_ovr_0 := GetFuncOrNil&<procedure(n: Int32; var textures: UInt32; var priorities: single)>(z_PrioritizeTexturesEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure PrioritizeTexturesEXT(n: Int32; textures: array of UInt32; priorities: array of single);
    begin
      z_PrioritizeTexturesEXT_ovr_0(n, textures[0], priorities[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure PrioritizeTexturesEXT(n: Int32; textures: array of UInt32; var priorities: single);
    begin
      z_PrioritizeTexturesEXT_ovr_0(n, textures[0], priorities);
    end;
    public z_PrioritizeTexturesEXT_ovr_2 := GetFuncOrNil&<procedure(n: Int32; var textures: UInt32; priorities: IntPtr)>(z_PrioritizeTexturesEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure PrioritizeTexturesEXT(n: Int32; textures: array of UInt32; priorities: IntPtr);
    begin
      z_PrioritizeTexturesEXT_ovr_2(n, textures[0], priorities);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure PrioritizeTexturesEXT(n: Int32; var textures: UInt32; priorities: array of single);
    begin
      z_PrioritizeTexturesEXT_ovr_0(n, textures, priorities[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure PrioritizeTexturesEXT(n: Int32; var textures: UInt32; var priorities: single);
    begin
      z_PrioritizeTexturesEXT_ovr_0(n, textures, priorities);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure PrioritizeTexturesEXT(n: Int32; var textures: UInt32; priorities: IntPtr);
    begin
      z_PrioritizeTexturesEXT_ovr_2(n, textures, priorities);
    end;
    public z_PrioritizeTexturesEXT_ovr_6 := GetFuncOrNil&<procedure(n: Int32; textures: IntPtr; var priorities: single)>(z_PrioritizeTexturesEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure PrioritizeTexturesEXT(n: Int32; textures: IntPtr; priorities: array of single);
    begin
      z_PrioritizeTexturesEXT_ovr_6(n, textures, priorities[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure PrioritizeTexturesEXT(n: Int32; textures: IntPtr; var priorities: single);
    begin
      z_PrioritizeTexturesEXT_ovr_6(n, textures, priorities);
    end;
    public z_PrioritizeTexturesEXT_ovr_8 := GetFuncOrNil&<procedure(n: Int32; textures: IntPtr; priorities: IntPtr)>(z_PrioritizeTexturesEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure PrioritizeTexturesEXT(n: Int32; textures: IntPtr; priorities: IntPtr);
    begin
      z_PrioritizeTexturesEXT_ovr_8(n, textures, priorities);
    end;
    
  end;
  
  glTexturePerturbNormalEXT = sealed class
    public static function GetFuncAdr([MarshalAs(UnmanagedType.LPStr)] lpszProc: string): IntPtr;
    external 'opengl32.dll' name 'wglGetProcAddress';
    public static function GetFuncOrNil<T>(fadr: IntPtr) :=
    fadr=IntPtr.Zero ? default(T) :
    Marshal.GetDelegateForFunctionPointer&<T>(fadr);
    
    public z_TextureNormalEXT_adr := GetFuncAdr('glTextureNormalEXT');
    public z_TextureNormalEXT_ovr_0 := GetFuncOrNil&<procedure(mode: TextureNormalModeEXT)>(z_TextureNormalEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TextureNormalEXT(mode: TextureNormalModeEXT);
    begin
      z_TextureNormalEXT_ovr_0(mode);
    end;
    
  end;
  
  glTimerQueryEXT = sealed class
    public static function GetFuncAdr([MarshalAs(UnmanagedType.LPStr)] lpszProc: string): IntPtr;
    external 'opengl32.dll' name 'wglGetProcAddress';
    public static function GetFuncOrNil<T>(fadr: IntPtr) :=
    fadr=IntPtr.Zero ? default(T) :
    Marshal.GetDelegateForFunctionPointer&<T>(fadr);
    
    public z_GetQueryObjecti64vEXT_adr := GetFuncAdr('glGetQueryObjecti64vEXT');
    public z_GetQueryObjecti64vEXT_ovr_0 := GetFuncOrNil&<procedure(id: UInt32; pname: QueryObjectParameterName; var &params: Int64)>(z_GetQueryObjecti64vEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetQueryObjecti64vEXT(id: UInt32; pname: QueryObjectParameterName; &params: array of Int64);
    begin
      z_GetQueryObjecti64vEXT_ovr_0(id, pname, &params[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetQueryObjecti64vEXT(id: UInt32; pname: QueryObjectParameterName; var &params: Int64);
    begin
      z_GetQueryObjecti64vEXT_ovr_0(id, pname, &params);
    end;
    public z_GetQueryObjecti64vEXT_ovr_2 := GetFuncOrNil&<procedure(id: UInt32; pname: QueryObjectParameterName; &params: IntPtr)>(z_GetQueryObjecti64vEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetQueryObjecti64vEXT(id: UInt32; pname: QueryObjectParameterName; &params: IntPtr);
    begin
      z_GetQueryObjecti64vEXT_ovr_2(id, pname, &params);
    end;
    
    public z_GetQueryObjectui64vEXT_adr := GetFuncAdr('glGetQueryObjectui64vEXT');
    public z_GetQueryObjectui64vEXT_ovr_0 := GetFuncOrNil&<procedure(id: UInt32; pname: QueryObjectParameterName; var &params: UInt64)>(z_GetQueryObjectui64vEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetQueryObjectui64vEXT(id: UInt32; pname: QueryObjectParameterName; &params: array of UInt64);
    begin
      z_GetQueryObjectui64vEXT_ovr_0(id, pname, &params[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetQueryObjectui64vEXT(id: UInt32; pname: QueryObjectParameterName; var &params: UInt64);
    begin
      z_GetQueryObjectui64vEXT_ovr_0(id, pname, &params);
    end;
    public z_GetQueryObjectui64vEXT_ovr_2 := GetFuncOrNil&<procedure(id: UInt32; pname: QueryObjectParameterName; &params: IntPtr)>(z_GetQueryObjectui64vEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetQueryObjectui64vEXT(id: UInt32; pname: QueryObjectParameterName; &params: IntPtr);
    begin
      z_GetQueryObjectui64vEXT_ovr_2(id, pname, &params);
    end;
    
  end;
  
  glTransformFeedbackEXT = sealed class
    public static function GetFuncAdr([MarshalAs(UnmanagedType.LPStr)] lpszProc: string): IntPtr;
    external 'opengl32.dll' name 'wglGetProcAddress';
    public static function GetFuncOrNil<T>(fadr: IntPtr) :=
    fadr=IntPtr.Zero ? default(T) :
    Marshal.GetDelegateForFunctionPointer&<T>(fadr);
    
    public z_BeginTransformFeedbackEXT_adr := GetFuncAdr('glBeginTransformFeedbackEXT');
    public z_BeginTransformFeedbackEXT_ovr_0 := GetFuncOrNil&<procedure(primitiveMode: PrimitiveType)>(z_BeginTransformFeedbackEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure BeginTransformFeedbackEXT(primitiveMode: PrimitiveType);
    begin
      z_BeginTransformFeedbackEXT_ovr_0(primitiveMode);
    end;
    
    public z_EndTransformFeedbackEXT_adr := GetFuncAdr('glEndTransformFeedbackEXT');
    public z_EndTransformFeedbackEXT_ovr_0 := GetFuncOrNil&<procedure>(z_EndTransformFeedbackEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure EndTransformFeedbackEXT;
    begin
      z_EndTransformFeedbackEXT_ovr_0;
    end;
    
    public z_BindBufferRangeEXT_adr := GetFuncAdr('glBindBufferRangeEXT');
    public z_BindBufferRangeEXT_ovr_0 := GetFuncOrNil&<procedure(target: BufferTargetARB; index: UInt32; buffer: UInt32; offset: IntPtr; size: IntPtr)>(z_BindBufferRangeEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure BindBufferRangeEXT(target: BufferTargetARB; index: UInt32; buffer: UInt32; offset: IntPtr; size: IntPtr);
    begin
      z_BindBufferRangeEXT_ovr_0(target, index, buffer, offset, size);
    end;
    
    public z_BindBufferOffsetEXT_adr := GetFuncAdr('glBindBufferOffsetEXT');
    public z_BindBufferOffsetEXT_ovr_0 := GetFuncOrNil&<procedure(target: BufferTargetARB; index: UInt32; buffer: UInt32; offset: IntPtr)>(z_BindBufferOffsetEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure BindBufferOffsetEXT(target: BufferTargetARB; index: UInt32; buffer: UInt32; offset: IntPtr);
    begin
      z_BindBufferOffsetEXT_ovr_0(target, index, buffer, offset);
    end;
    
    public z_BindBufferBaseEXT_adr := GetFuncAdr('glBindBufferBaseEXT');
    public z_BindBufferBaseEXT_ovr_0 := GetFuncOrNil&<procedure(target: BufferTargetARB; index: UInt32; buffer: UInt32)>(z_BindBufferBaseEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure BindBufferBaseEXT(target: BufferTargetARB; index: UInt32; buffer: UInt32);
    begin
      z_BindBufferBaseEXT_ovr_0(target, index, buffer);
    end;
    
    public z_TransformFeedbackVaryingsEXT_adr := GetFuncAdr('glTransformFeedbackVaryingsEXT');
    public z_TransformFeedbackVaryingsEXT_ovr_0 := GetFuncOrNil&<procedure(&program: UInt32; count: Int32; var varyings: IntPtr; bufferMode: DummyEnum)>(z_TransformFeedbackVaryingsEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TransformFeedbackVaryingsEXT(&program: UInt32; count: Int32; varyings: array of string; bufferMode: DummyEnum);
    begin
      var par_3_str_ptr := varyings.ConvertAll(arr_el1->Marshal.StringToHGlobalAnsi(arr_el1));
      z_TransformFeedbackVaryingsEXT_ovr_0(&program, count, par_3_str_ptr[0], bufferMode);
      foreach var arr_el1 in par_3_str_ptr do Marshal.FreeHGlobal(arr_el1);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TransformFeedbackVaryingsEXT(&program: UInt32; count: Int32; varyings: array of IntPtr; bufferMode: DummyEnum);
    begin
      z_TransformFeedbackVaryingsEXT_ovr_0(&program, count, varyings[0], bufferMode);
    end;
    public z_TransformFeedbackVaryingsEXT_ovr_2 := GetFuncOrNil&<procedure(&program: UInt32; count: Int32; varyings: IntPtr; bufferMode: DummyEnum)>(z_TransformFeedbackVaryingsEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TransformFeedbackVaryingsEXT(&program: UInt32; count: Int32; varyings: IntPtr; bufferMode: DummyEnum);
    begin
      z_TransformFeedbackVaryingsEXT_ovr_2(&program, count, varyings, bufferMode);
    end;
    
    public z_GetTransformFeedbackVaryingEXT_adr := GetFuncAdr('glGetTransformFeedbackVaryingEXT');
    public z_GetTransformFeedbackVaryingEXT_ovr_0 := GetFuncOrNil&<procedure(&program: UInt32; index: UInt32; bufSize: Int32; var length: Int32; var size: Int32; var &type: GlslTypeToken; name: IntPtr)>(z_GetTransformFeedbackVaryingEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetTransformFeedbackVaryingEXT(&program: UInt32; index: UInt32; bufSize: Int32; length: array of Int32; size: array of Int32; &type: array of GlslTypeToken; name: IntPtr);
    begin
      z_GetTransformFeedbackVaryingEXT_ovr_0(&program, index, bufSize, length[0], size[0], &type[0], name);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetTransformFeedbackVaryingEXT(&program: UInt32; index: UInt32; bufSize: Int32; length: array of Int32; size: array of Int32; var &type: GlslTypeToken; name: IntPtr);
    begin
      z_GetTransformFeedbackVaryingEXT_ovr_0(&program, index, bufSize, length[0], size[0], &type, name);
    end;
    public z_GetTransformFeedbackVaryingEXT_ovr_2 := GetFuncOrNil&<procedure(&program: UInt32; index: UInt32; bufSize: Int32; var length: Int32; var size: Int32; &type: IntPtr; name: IntPtr)>(z_GetTransformFeedbackVaryingEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetTransformFeedbackVaryingEXT(&program: UInt32; index: UInt32; bufSize: Int32; length: array of Int32; size: array of Int32; &type: IntPtr; name: IntPtr);
    begin
      z_GetTransformFeedbackVaryingEXT_ovr_2(&program, index, bufSize, length[0], size[0], &type, name);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetTransformFeedbackVaryingEXT(&program: UInt32; index: UInt32; bufSize: Int32; length: array of Int32; var size: Int32; &type: array of GlslTypeToken; name: IntPtr);
    begin
      z_GetTransformFeedbackVaryingEXT_ovr_0(&program, index, bufSize, length[0], size, &type[0], name);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetTransformFeedbackVaryingEXT(&program: UInt32; index: UInt32; bufSize: Int32; length: array of Int32; var size: Int32; var &type: GlslTypeToken; name: IntPtr);
    begin
      z_GetTransformFeedbackVaryingEXT_ovr_0(&program, index, bufSize, length[0], size, &type, name);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetTransformFeedbackVaryingEXT(&program: UInt32; index: UInt32; bufSize: Int32; length: array of Int32; var size: Int32; &type: IntPtr; name: IntPtr);
    begin
      z_GetTransformFeedbackVaryingEXT_ovr_2(&program, index, bufSize, length[0], size, &type, name);
    end;
    public z_GetTransformFeedbackVaryingEXT_ovr_6 := GetFuncOrNil&<procedure(&program: UInt32; index: UInt32; bufSize: Int32; var length: Int32; size: IntPtr; var &type: GlslTypeToken; name: IntPtr)>(z_GetTransformFeedbackVaryingEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetTransformFeedbackVaryingEXT(&program: UInt32; index: UInt32; bufSize: Int32; length: array of Int32; size: IntPtr; &type: array of GlslTypeToken; name: IntPtr);
    begin
      z_GetTransformFeedbackVaryingEXT_ovr_6(&program, index, bufSize, length[0], size, &type[0], name);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetTransformFeedbackVaryingEXT(&program: UInt32; index: UInt32; bufSize: Int32; length: array of Int32; size: IntPtr; var &type: GlslTypeToken; name: IntPtr);
    begin
      z_GetTransformFeedbackVaryingEXT_ovr_6(&program, index, bufSize, length[0], size, &type, name);
    end;
    public z_GetTransformFeedbackVaryingEXT_ovr_8 := GetFuncOrNil&<procedure(&program: UInt32; index: UInt32; bufSize: Int32; var length: Int32; size: IntPtr; &type: IntPtr; name: IntPtr)>(z_GetTransformFeedbackVaryingEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetTransformFeedbackVaryingEXT(&program: UInt32; index: UInt32; bufSize: Int32; length: array of Int32; size: IntPtr; &type: IntPtr; name: IntPtr);
    begin
      z_GetTransformFeedbackVaryingEXT_ovr_8(&program, index, bufSize, length[0], size, &type, name);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetTransformFeedbackVaryingEXT(&program: UInt32; index: UInt32; bufSize: Int32; var length: Int32; size: array of Int32; &type: array of GlslTypeToken; name: IntPtr);
    begin
      z_GetTransformFeedbackVaryingEXT_ovr_0(&program, index, bufSize, length, size[0], &type[0], name);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetTransformFeedbackVaryingEXT(&program: UInt32; index: UInt32; bufSize: Int32; var length: Int32; size: array of Int32; var &type: GlslTypeToken; name: IntPtr);
    begin
      z_GetTransformFeedbackVaryingEXT_ovr_0(&program, index, bufSize, length, size[0], &type, name);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetTransformFeedbackVaryingEXT(&program: UInt32; index: UInt32; bufSize: Int32; var length: Int32; size: array of Int32; &type: IntPtr; name: IntPtr);
    begin
      z_GetTransformFeedbackVaryingEXT_ovr_2(&program, index, bufSize, length, size[0], &type, name);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetTransformFeedbackVaryingEXT(&program: UInt32; index: UInt32; bufSize: Int32; var length: Int32; var size: Int32; &type: array of GlslTypeToken; name: IntPtr);
    begin
      z_GetTransformFeedbackVaryingEXT_ovr_0(&program, index, bufSize, length, size, &type[0], name);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetTransformFeedbackVaryingEXT(&program: UInt32; index: UInt32; bufSize: Int32; var length: Int32; var size: Int32; var &type: GlslTypeToken; name: IntPtr);
    begin
      z_GetTransformFeedbackVaryingEXT_ovr_0(&program, index, bufSize, length, size, &type, name);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetTransformFeedbackVaryingEXT(&program: UInt32; index: UInt32; bufSize: Int32; var length: Int32; var size: Int32; &type: IntPtr; name: IntPtr);
    begin
      z_GetTransformFeedbackVaryingEXT_ovr_2(&program, index, bufSize, length, size, &type, name);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetTransformFeedbackVaryingEXT(&program: UInt32; index: UInt32; bufSize: Int32; var length: Int32; size: IntPtr; &type: array of GlslTypeToken; name: IntPtr);
    begin
      z_GetTransformFeedbackVaryingEXT_ovr_6(&program, index, bufSize, length, size, &type[0], name);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetTransformFeedbackVaryingEXT(&program: UInt32; index: UInt32; bufSize: Int32; var length: Int32; size: IntPtr; var &type: GlslTypeToken; name: IntPtr);
    begin
      z_GetTransformFeedbackVaryingEXT_ovr_6(&program, index, bufSize, length, size, &type, name);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetTransformFeedbackVaryingEXT(&program: UInt32; index: UInt32; bufSize: Int32; var length: Int32; size: IntPtr; &type: IntPtr; name: IntPtr);
    begin
      z_GetTransformFeedbackVaryingEXT_ovr_8(&program, index, bufSize, length, size, &type, name);
    end;
    public z_GetTransformFeedbackVaryingEXT_ovr_18 := GetFuncOrNil&<procedure(&program: UInt32; index: UInt32; bufSize: Int32; length: IntPtr; var size: Int32; var &type: GlslTypeToken; name: IntPtr)>(z_GetTransformFeedbackVaryingEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetTransformFeedbackVaryingEXT(&program: UInt32; index: UInt32; bufSize: Int32; length: IntPtr; size: array of Int32; &type: array of GlslTypeToken; name: IntPtr);
    begin
      z_GetTransformFeedbackVaryingEXT_ovr_18(&program, index, bufSize, length, size[0], &type[0], name);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetTransformFeedbackVaryingEXT(&program: UInt32; index: UInt32; bufSize: Int32; length: IntPtr; size: array of Int32; var &type: GlslTypeToken; name: IntPtr);
    begin
      z_GetTransformFeedbackVaryingEXT_ovr_18(&program, index, bufSize, length, size[0], &type, name);
    end;
    public z_GetTransformFeedbackVaryingEXT_ovr_20 := GetFuncOrNil&<procedure(&program: UInt32; index: UInt32; bufSize: Int32; length: IntPtr; var size: Int32; &type: IntPtr; name: IntPtr)>(z_GetTransformFeedbackVaryingEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetTransformFeedbackVaryingEXT(&program: UInt32; index: UInt32; bufSize: Int32; length: IntPtr; size: array of Int32; &type: IntPtr; name: IntPtr);
    begin
      z_GetTransformFeedbackVaryingEXT_ovr_20(&program, index, bufSize, length, size[0], &type, name);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetTransformFeedbackVaryingEXT(&program: UInt32; index: UInt32; bufSize: Int32; length: IntPtr; var size: Int32; &type: array of GlslTypeToken; name: IntPtr);
    begin
      z_GetTransformFeedbackVaryingEXT_ovr_18(&program, index, bufSize, length, size, &type[0], name);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetTransformFeedbackVaryingEXT(&program: UInt32; index: UInt32; bufSize: Int32; length: IntPtr; var size: Int32; var &type: GlslTypeToken; name: IntPtr);
    begin
      z_GetTransformFeedbackVaryingEXT_ovr_18(&program, index, bufSize, length, size, &type, name);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetTransformFeedbackVaryingEXT(&program: UInt32; index: UInt32; bufSize: Int32; length: IntPtr; var size: Int32; &type: IntPtr; name: IntPtr);
    begin
      z_GetTransformFeedbackVaryingEXT_ovr_20(&program, index, bufSize, length, size, &type, name);
    end;
    public z_GetTransformFeedbackVaryingEXT_ovr_24 := GetFuncOrNil&<procedure(&program: UInt32; index: UInt32; bufSize: Int32; length: IntPtr; size: IntPtr; var &type: GlslTypeToken; name: IntPtr)>(z_GetTransformFeedbackVaryingEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetTransformFeedbackVaryingEXT(&program: UInt32; index: UInt32; bufSize: Int32; length: IntPtr; size: IntPtr; &type: array of GlslTypeToken; name: IntPtr);
    begin
      z_GetTransformFeedbackVaryingEXT_ovr_24(&program, index, bufSize, length, size, &type[0], name);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetTransformFeedbackVaryingEXT(&program: UInt32; index: UInt32; bufSize: Int32; length: IntPtr; size: IntPtr; var &type: GlslTypeToken; name: IntPtr);
    begin
      z_GetTransformFeedbackVaryingEXT_ovr_24(&program, index, bufSize, length, size, &type, name);
    end;
    public z_GetTransformFeedbackVaryingEXT_ovr_26 := GetFuncOrNil&<procedure(&program: UInt32; index: UInt32; bufSize: Int32; length: IntPtr; size: IntPtr; &type: IntPtr; name: IntPtr)>(z_GetTransformFeedbackVaryingEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetTransformFeedbackVaryingEXT(&program: UInt32; index: UInt32; bufSize: Int32; length: IntPtr; size: IntPtr; &type: IntPtr; name: IntPtr);
    begin
      z_GetTransformFeedbackVaryingEXT_ovr_26(&program, index, bufSize, length, size, &type, name);
    end;
    
  end;
  
  glVertexArrayEXT = sealed class
    public static function GetFuncAdr([MarshalAs(UnmanagedType.LPStr)] lpszProc: string): IntPtr;
    external 'opengl32.dll' name 'wglGetProcAddress';
    public static function GetFuncOrNil<T>(fadr: IntPtr) :=
    fadr=IntPtr.Zero ? default(T) :
    Marshal.GetDelegateForFunctionPointer&<T>(fadr);
    
    public z_ArrayElementEXT_adr := GetFuncAdr('glArrayElementEXT');
    public z_ArrayElementEXT_ovr_0 := GetFuncOrNil&<procedure(i: Int32)>(z_ArrayElementEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ArrayElementEXT(i: Int32);
    begin
      z_ArrayElementEXT_ovr_0(i);
    end;
    
    public z_ColorPointerEXT_adr := GetFuncAdr('glColorPointerEXT');
    public z_ColorPointerEXT_ovr_0 := GetFuncOrNil&<procedure(size: Int32; &type: ColorPointerType; stride: Int32; count: Int32; pointer: IntPtr)>(z_ColorPointerEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ColorPointerEXT(size: Int32; &type: ColorPointerType; stride: Int32; count: Int32; pointer: IntPtr);
    begin
      z_ColorPointerEXT_ovr_0(size, &type, stride, count, pointer);
    end;
    
    public z_DrawArraysEXT_adr := GetFuncAdr('glDrawArraysEXT');
    public z_DrawArraysEXT_ovr_0 := GetFuncOrNil&<procedure(mode: PrimitiveType; first: Int32; count: Int32)>(z_DrawArraysEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure DrawArraysEXT(mode: PrimitiveType; first: Int32; count: Int32);
    begin
      z_DrawArraysEXT_ovr_0(mode, first, count);
    end;
    
    public z_EdgeFlagPointerEXT_adr := GetFuncAdr('glEdgeFlagPointerEXT');
    public z_EdgeFlagPointerEXT_ovr_0 := GetFuncOrNil&<procedure(stride: Int32; count: Int32; var pointer: boolean)>(z_EdgeFlagPointerEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure EdgeFlagPointerEXT(stride: Int32; count: Int32; pointer: array of boolean);
    begin
      z_EdgeFlagPointerEXT_ovr_0(stride, count, pointer[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure EdgeFlagPointerEXT(stride: Int32; count: Int32; var pointer: boolean);
    begin
      z_EdgeFlagPointerEXT_ovr_0(stride, count, pointer);
    end;
    public z_EdgeFlagPointerEXT_ovr_2 := GetFuncOrNil&<procedure(stride: Int32; count: Int32; pointer: IntPtr)>(z_EdgeFlagPointerEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure EdgeFlagPointerEXT(stride: Int32; count: Int32; pointer: IntPtr);
    begin
      z_EdgeFlagPointerEXT_ovr_2(stride, count, pointer);
    end;
    
    public z_GetPointervEXT_adr := GetFuncAdr('glGetPointervEXT');
    public z_GetPointervEXT_ovr_0 := GetFuncOrNil&<procedure(pname: GetPointervPName; var &params: IntPtr)>(z_GetPointervEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetPointervEXT(pname: GetPointervPName; &params: array of IntPtr);
    begin
      z_GetPointervEXT_ovr_0(pname, &params[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetPointervEXT(pname: GetPointervPName; var &params: IntPtr);
    begin
      z_GetPointervEXT_ovr_0(pname, &params);
    end;
    public z_GetPointervEXT_ovr_2 := GetFuncOrNil&<procedure(pname: GetPointervPName; &params: pointer)>(z_GetPointervEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetPointervEXT(pname: GetPointervPName; &params: pointer);
    begin
      z_GetPointervEXT_ovr_2(pname, &params);
    end;
    
    public z_IndexPointerEXT_adr := GetFuncAdr('glIndexPointerEXT');
    public z_IndexPointerEXT_ovr_0 := GetFuncOrNil&<procedure(&type: IndexPointerType; stride: Int32; count: Int32; pointer: IntPtr)>(z_IndexPointerEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure IndexPointerEXT(&type: IndexPointerType; stride: Int32; count: Int32; pointer: IntPtr);
    begin
      z_IndexPointerEXT_ovr_0(&type, stride, count, pointer);
    end;
    
    public z_NormalPointerEXT_adr := GetFuncAdr('glNormalPointerEXT');
    public z_NormalPointerEXT_ovr_0 := GetFuncOrNil&<procedure(&type: NormalPointerType; stride: Int32; count: Int32; pointer: IntPtr)>(z_NormalPointerEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure NormalPointerEXT(&type: NormalPointerType; stride: Int32; count: Int32; pointer: IntPtr);
    begin
      z_NormalPointerEXT_ovr_0(&type, stride, count, pointer);
    end;
    
    public z_TexCoordPointerEXT_adr := GetFuncAdr('glTexCoordPointerEXT');
    public z_TexCoordPointerEXT_ovr_0 := GetFuncOrNil&<procedure(size: Int32; &type: TexCoordPointerType; stride: Int32; count: Int32; pointer: IntPtr)>(z_TexCoordPointerEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TexCoordPointerEXT(size: Int32; &type: TexCoordPointerType; stride: Int32; count: Int32; pointer: IntPtr);
    begin
      z_TexCoordPointerEXT_ovr_0(size, &type, stride, count, pointer);
    end;
    
    public z_VertexPointerEXT_adr := GetFuncAdr('glVertexPointerEXT');
    public z_VertexPointerEXT_ovr_0 := GetFuncOrNil&<procedure(size: Int32; &type: VertexPointerType; stride: Int32; count: Int32; pointer: IntPtr)>(z_VertexPointerEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexPointerEXT(size: Int32; &type: VertexPointerType; stride: Int32; count: Int32; pointer: IntPtr);
    begin
      z_VertexPointerEXT_ovr_0(size, &type, stride, count, pointer);
    end;
    
  end;
  
  glVertexAttrib64bitEXT = sealed class
    public static function GetFuncAdr([MarshalAs(UnmanagedType.LPStr)] lpszProc: string): IntPtr;
    external 'opengl32.dll' name 'wglGetProcAddress';
    public static function GetFuncOrNil<T>(fadr: IntPtr) :=
    fadr=IntPtr.Zero ? default(T) :
    Marshal.GetDelegateForFunctionPointer&<T>(fadr);
    
    public z_VertexAttribL1dEXT_adr := GetFuncAdr('glVertexAttribL1dEXT');
    public z_VertexAttribL1dEXT_ovr_0 := GetFuncOrNil&<procedure(index: UInt32; x: real)>(z_VertexAttribL1dEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttribL1dEXT(index: UInt32; x: real);
    begin
      z_VertexAttribL1dEXT_ovr_0(index, x);
    end;
    
    public z_VertexAttribL2dEXT_adr := GetFuncAdr('glVertexAttribL2dEXT');
    public z_VertexAttribL2dEXT_ovr_0 := GetFuncOrNil&<procedure(index: UInt32; x: real; y: real)>(z_VertexAttribL2dEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttribL2dEXT(index: UInt32; x: real; y: real);
    begin
      z_VertexAttribL2dEXT_ovr_0(index, x, y);
    end;
    
    public z_VertexAttribL3dEXT_adr := GetFuncAdr('glVertexAttribL3dEXT');
    public z_VertexAttribL3dEXT_ovr_0 := GetFuncOrNil&<procedure(index: UInt32; x: real; y: real; z: real)>(z_VertexAttribL3dEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttribL3dEXT(index: UInt32; x: real; y: real; z: real);
    begin
      z_VertexAttribL3dEXT_ovr_0(index, x, y, z);
    end;
    
    public z_VertexAttribL4dEXT_adr := GetFuncAdr('glVertexAttribL4dEXT');
    public z_VertexAttribL4dEXT_ovr_0 := GetFuncOrNil&<procedure(index: UInt32; x: real; y: real; z: real; w: real)>(z_VertexAttribL4dEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttribL4dEXT(index: UInt32; x: real; y: real; z: real; w: real);
    begin
      z_VertexAttribL4dEXT_ovr_0(index, x, y, z, w);
    end;
    
    public z_VertexAttribL1dvEXT_adr := GetFuncAdr('glVertexAttribL1dvEXT');
    public z_VertexAttribL1dvEXT_ovr_0 := GetFuncOrNil&<procedure(index: UInt32; var v: real)>(z_VertexAttribL1dvEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttribL1dvEXT(index: UInt32; v: array of real);
    begin
      z_VertexAttribL1dvEXT_ovr_0(index, v[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttribL1dvEXT(index: UInt32; var v: real);
    begin
      z_VertexAttribL1dvEXT_ovr_0(index, v);
    end;
    public z_VertexAttribL1dvEXT_ovr_2 := GetFuncOrNil&<procedure(index: UInt32; v: IntPtr)>(z_VertexAttribL1dvEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttribL1dvEXT(index: UInt32; v: IntPtr);
    begin
      z_VertexAttribL1dvEXT_ovr_2(index, v);
    end;
    
    public z_VertexAttribL2dvEXT_adr := GetFuncAdr('glVertexAttribL2dvEXT');
    public z_VertexAttribL2dvEXT_ovr_0 := GetFuncOrNil&<procedure(index: UInt32; var v: real)>(z_VertexAttribL2dvEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttribL2dvEXT(index: UInt32; v: array of real);
    begin
      z_VertexAttribL2dvEXT_ovr_0(index, v[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttribL2dvEXT(index: UInt32; var v: real);
    begin
      z_VertexAttribL2dvEXT_ovr_0(index, v);
    end;
    public z_VertexAttribL2dvEXT_ovr_2 := GetFuncOrNil&<procedure(index: UInt32; v: IntPtr)>(z_VertexAttribL2dvEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttribL2dvEXT(index: UInt32; v: IntPtr);
    begin
      z_VertexAttribL2dvEXT_ovr_2(index, v);
    end;
    
    public z_VertexAttribL3dvEXT_adr := GetFuncAdr('glVertexAttribL3dvEXT');
    public z_VertexAttribL3dvEXT_ovr_0 := GetFuncOrNil&<procedure(index: UInt32; var v: real)>(z_VertexAttribL3dvEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttribL3dvEXT(index: UInt32; v: array of real);
    begin
      z_VertexAttribL3dvEXT_ovr_0(index, v[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttribL3dvEXT(index: UInt32; var v: real);
    begin
      z_VertexAttribL3dvEXT_ovr_0(index, v);
    end;
    public z_VertexAttribL3dvEXT_ovr_2 := GetFuncOrNil&<procedure(index: UInt32; v: IntPtr)>(z_VertexAttribL3dvEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttribL3dvEXT(index: UInt32; v: IntPtr);
    begin
      z_VertexAttribL3dvEXT_ovr_2(index, v);
    end;
    
    public z_VertexAttribL4dvEXT_adr := GetFuncAdr('glVertexAttribL4dvEXT');
    public z_VertexAttribL4dvEXT_ovr_0 := GetFuncOrNil&<procedure(index: UInt32; var v: real)>(z_VertexAttribL4dvEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttribL4dvEXT(index: UInt32; v: array of real);
    begin
      z_VertexAttribL4dvEXT_ovr_0(index, v[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttribL4dvEXT(index: UInt32; var v: real);
    begin
      z_VertexAttribL4dvEXT_ovr_0(index, v);
    end;
    public z_VertexAttribL4dvEXT_ovr_2 := GetFuncOrNil&<procedure(index: UInt32; v: IntPtr)>(z_VertexAttribL4dvEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttribL4dvEXT(index: UInt32; v: IntPtr);
    begin
      z_VertexAttribL4dvEXT_ovr_2(index, v);
    end;
    
    public z_VertexAttribLPointerEXT_adr := GetFuncAdr('glVertexAttribLPointerEXT');
    public z_VertexAttribLPointerEXT_ovr_0 := GetFuncOrNil&<procedure(index: UInt32; size: Int32; &type: VertexAttribPointerType; stride: Int32; pointer: IntPtr)>(z_VertexAttribLPointerEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttribLPointerEXT(index: UInt32; size: Int32; &type: VertexAttribPointerType; stride: Int32; pointer: IntPtr);
    begin
      z_VertexAttribLPointerEXT_ovr_0(index, size, &type, stride, pointer);
    end;
    
    public z_GetVertexAttribLdvEXT_adr := GetFuncAdr('glGetVertexAttribLdvEXT');
    public z_GetVertexAttribLdvEXT_ovr_0 := GetFuncOrNil&<procedure(index: UInt32; pname: VertexAttribEnum; var &params: real)>(z_GetVertexAttribLdvEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetVertexAttribLdvEXT(index: UInt32; pname: VertexAttribEnum; &params: array of real);
    begin
      z_GetVertexAttribLdvEXT_ovr_0(index, pname, &params[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetVertexAttribLdvEXT(index: UInt32; pname: VertexAttribEnum; var &params: real);
    begin
      z_GetVertexAttribLdvEXT_ovr_0(index, pname, &params);
    end;
    public z_GetVertexAttribLdvEXT_ovr_2 := GetFuncOrNil&<procedure(index: UInt32; pname: VertexAttribEnum; &params: IntPtr)>(z_GetVertexAttribLdvEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetVertexAttribLdvEXT(index: UInt32; pname: VertexAttribEnum; &params: IntPtr);
    begin
      z_GetVertexAttribLdvEXT_ovr_2(index, pname, &params);
    end;
    
  end;
  
  glVertexShaderEXT = sealed class
    public static function GetFuncAdr([MarshalAs(UnmanagedType.LPStr)] lpszProc: string): IntPtr;
    external 'opengl32.dll' name 'wglGetProcAddress';
    public static function GetFuncOrNil<T>(fadr: IntPtr) :=
    fadr=IntPtr.Zero ? default(T) :
    Marshal.GetDelegateForFunctionPointer&<T>(fadr);
    
    public z_BeginVertexShaderEXT_adr := GetFuncAdr('glBeginVertexShaderEXT');
    public z_BeginVertexShaderEXT_ovr_0 := GetFuncOrNil&<procedure>(z_BeginVertexShaderEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure BeginVertexShaderEXT;
    begin
      z_BeginVertexShaderEXT_ovr_0;
    end;
    
    public z_EndVertexShaderEXT_adr := GetFuncAdr('glEndVertexShaderEXT');
    public z_EndVertexShaderEXT_ovr_0 := GetFuncOrNil&<procedure>(z_EndVertexShaderEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure EndVertexShaderEXT;
    begin
      z_EndVertexShaderEXT_ovr_0;
    end;
    
    public z_BindVertexShaderEXT_adr := GetFuncAdr('glBindVertexShaderEXT');
    public z_BindVertexShaderEXT_ovr_0 := GetFuncOrNil&<procedure(id: UInt32)>(z_BindVertexShaderEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure BindVertexShaderEXT(id: UInt32);
    begin
      z_BindVertexShaderEXT_ovr_0(id);
    end;
    
    public z_GenVertexShadersEXT_adr := GetFuncAdr('glGenVertexShadersEXT');
    public z_GenVertexShadersEXT_ovr_0 := GetFuncOrNil&<function(range: UInt32): UInt32>(z_GenVertexShadersEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GenVertexShadersEXT(range: UInt32): UInt32;
    begin
      Result := z_GenVertexShadersEXT_ovr_0(range);
    end;
    
    public z_DeleteVertexShaderEXT_adr := GetFuncAdr('glDeleteVertexShaderEXT');
    public z_DeleteVertexShaderEXT_ovr_0 := GetFuncOrNil&<procedure(id: UInt32)>(z_DeleteVertexShaderEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure DeleteVertexShaderEXT(id: UInt32);
    begin
      z_DeleteVertexShaderEXT_ovr_0(id);
    end;
    
    public z_ShaderOp1EXT_adr := GetFuncAdr('glShaderOp1EXT');
    public z_ShaderOp1EXT_ovr_0 := GetFuncOrNil&<procedure(op: VertexShaderOpEXT; res: UInt32; arg1: UInt32)>(z_ShaderOp1EXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ShaderOp1EXT(op: VertexShaderOpEXT; res: UInt32; arg1: UInt32);
    begin
      z_ShaderOp1EXT_ovr_0(op, res, arg1);
    end;
    
    public z_ShaderOp2EXT_adr := GetFuncAdr('glShaderOp2EXT');
    public z_ShaderOp2EXT_ovr_0 := GetFuncOrNil&<procedure(op: VertexShaderOpEXT; res: UInt32; arg1: UInt32; arg2: UInt32)>(z_ShaderOp2EXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ShaderOp2EXT(op: VertexShaderOpEXT; res: UInt32; arg1: UInt32; arg2: UInt32);
    begin
      z_ShaderOp2EXT_ovr_0(op, res, arg1, arg2);
    end;
    
    public z_ShaderOp3EXT_adr := GetFuncAdr('glShaderOp3EXT');
    public z_ShaderOp3EXT_ovr_0 := GetFuncOrNil&<procedure(op: VertexShaderOpEXT; res: UInt32; arg1: UInt32; arg2: UInt32; arg3: UInt32)>(z_ShaderOp3EXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ShaderOp3EXT(op: VertexShaderOpEXT; res: UInt32; arg1: UInt32; arg2: UInt32; arg3: UInt32);
    begin
      z_ShaderOp3EXT_ovr_0(op, res, arg1, arg2, arg3);
    end;
    
    public z_SwizzleEXT_adr := GetFuncAdr('glSwizzleEXT');
    public z_SwizzleEXT_ovr_0 := GetFuncOrNil&<procedure(res: UInt32; &in: UInt32; outX: VertexShaderCoordOutEXT; outY: VertexShaderCoordOutEXT; outZ: VertexShaderCoordOutEXT; outW: VertexShaderCoordOutEXT)>(z_SwizzleEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure SwizzleEXT(res: UInt32; &in: UInt32; outX: VertexShaderCoordOutEXT; outY: VertexShaderCoordOutEXT; outZ: VertexShaderCoordOutEXT; outW: VertexShaderCoordOutEXT);
    begin
      z_SwizzleEXT_ovr_0(res, &in, outX, outY, outZ, outW);
    end;
    
    public z_WriteMaskEXT_adr := GetFuncAdr('glWriteMaskEXT');
    public z_WriteMaskEXT_ovr_0 := GetFuncOrNil&<procedure(res: UInt32; &in: UInt32; outX: VertexShaderWriteMaskEXT; outY: VertexShaderWriteMaskEXT; outZ: VertexShaderWriteMaskEXT; outW: VertexShaderWriteMaskEXT)>(z_WriteMaskEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure WriteMaskEXT(res: UInt32; &in: UInt32; outX: VertexShaderWriteMaskEXT; outY: VertexShaderWriteMaskEXT; outZ: VertexShaderWriteMaskEXT; outW: VertexShaderWriteMaskEXT);
    begin
      z_WriteMaskEXT_ovr_0(res, &in, outX, outY, outZ, outW);
    end;
    
    public z_InsertComponentEXT_adr := GetFuncAdr('glInsertComponentEXT');
    public z_InsertComponentEXT_ovr_0 := GetFuncOrNil&<procedure(res: UInt32; src: UInt32; num: UInt32)>(z_InsertComponentEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure InsertComponentEXT(res: UInt32; src: UInt32; num: UInt32);
    begin
      z_InsertComponentEXT_ovr_0(res, src, num);
    end;
    
    public z_ExtractComponentEXT_adr := GetFuncAdr('glExtractComponentEXT');
    public z_ExtractComponentEXT_ovr_0 := GetFuncOrNil&<procedure(res: UInt32; src: UInt32; num: UInt32)>(z_ExtractComponentEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ExtractComponentEXT(res: UInt32; src: UInt32; num: UInt32);
    begin
      z_ExtractComponentEXT_ovr_0(res, src, num);
    end;
    
    public z_GenSymbolsEXT_adr := GetFuncAdr('glGenSymbolsEXT');
    public z_GenSymbolsEXT_ovr_0 := GetFuncOrNil&<function(datatype: DataTypeEXT; storagetype: VertexShaderStorageTypeEXT; range: ParameterRangeEXT; components: UInt32): UInt32>(z_GenSymbolsEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GenSymbolsEXT(datatype: DataTypeEXT; storagetype: VertexShaderStorageTypeEXT; range: ParameterRangeEXT; components: UInt32): UInt32;
    begin
      Result := z_GenSymbolsEXT_ovr_0(datatype, storagetype, range, components);
    end;
    
    public z_SetInvariantEXT_adr := GetFuncAdr('glSetInvariantEXT');
    public z_SetInvariantEXT_ovr_0 := GetFuncOrNil&<procedure(id: UInt32; &type: ScalarType; addr: IntPtr)>(z_SetInvariantEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure SetInvariantEXT(id: UInt32; &type: ScalarType; addr: IntPtr);
    begin
      z_SetInvariantEXT_ovr_0(id, &type, addr);
    end;
    
    public z_SetLocalConstantEXT_adr := GetFuncAdr('glSetLocalConstantEXT');
    public z_SetLocalConstantEXT_ovr_0 := GetFuncOrNil&<procedure(id: UInt32; &type: ScalarType; addr: IntPtr)>(z_SetLocalConstantEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure SetLocalConstantEXT(id: UInt32; &type: ScalarType; addr: IntPtr);
    begin
      z_SetLocalConstantEXT_ovr_0(id, &type, addr);
    end;
    
    public z_VariantbvEXT_adr := GetFuncAdr('glVariantbvEXT');
    public z_VariantbvEXT_ovr_0 := GetFuncOrNil&<procedure(id: UInt32; var addr: SByte)>(z_VariantbvEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VariantbvEXT(id: UInt32; addr: array of SByte);
    begin
      z_VariantbvEXT_ovr_0(id, addr[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VariantbvEXT(id: UInt32; var addr: SByte);
    begin
      z_VariantbvEXT_ovr_0(id, addr);
    end;
    public z_VariantbvEXT_ovr_2 := GetFuncOrNil&<procedure(id: UInt32; addr: IntPtr)>(z_VariantbvEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VariantbvEXT(id: UInt32; addr: IntPtr);
    begin
      z_VariantbvEXT_ovr_2(id, addr);
    end;
    
    public z_VariantsvEXT_adr := GetFuncAdr('glVariantsvEXT');
    public z_VariantsvEXT_ovr_0 := GetFuncOrNil&<procedure(id: UInt32; var addr: Int16)>(z_VariantsvEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VariantsvEXT(id: UInt32; addr: array of Int16);
    begin
      z_VariantsvEXT_ovr_0(id, addr[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VariantsvEXT(id: UInt32; var addr: Int16);
    begin
      z_VariantsvEXT_ovr_0(id, addr);
    end;
    public z_VariantsvEXT_ovr_2 := GetFuncOrNil&<procedure(id: UInt32; addr: IntPtr)>(z_VariantsvEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VariantsvEXT(id: UInt32; addr: IntPtr);
    begin
      z_VariantsvEXT_ovr_2(id, addr);
    end;
    
    public z_VariantivEXT_adr := GetFuncAdr('glVariantivEXT');
    public z_VariantivEXT_ovr_0 := GetFuncOrNil&<procedure(id: UInt32; var addr: Int32)>(z_VariantivEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VariantivEXT(id: UInt32; addr: array of Int32);
    begin
      z_VariantivEXT_ovr_0(id, addr[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VariantivEXT(id: UInt32; var addr: Int32);
    begin
      z_VariantivEXT_ovr_0(id, addr);
    end;
    public z_VariantivEXT_ovr_2 := GetFuncOrNil&<procedure(id: UInt32; addr: IntPtr)>(z_VariantivEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VariantivEXT(id: UInt32; addr: IntPtr);
    begin
      z_VariantivEXT_ovr_2(id, addr);
    end;
    
    public z_VariantfvEXT_adr := GetFuncAdr('glVariantfvEXT');
    public z_VariantfvEXT_ovr_0 := GetFuncOrNil&<procedure(id: UInt32; var addr: single)>(z_VariantfvEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VariantfvEXT(id: UInt32; addr: array of single);
    begin
      z_VariantfvEXT_ovr_0(id, addr[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VariantfvEXT(id: UInt32; var addr: single);
    begin
      z_VariantfvEXT_ovr_0(id, addr);
    end;
    public z_VariantfvEXT_ovr_2 := GetFuncOrNil&<procedure(id: UInt32; addr: IntPtr)>(z_VariantfvEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VariantfvEXT(id: UInt32; addr: IntPtr);
    begin
      z_VariantfvEXT_ovr_2(id, addr);
    end;
    
    public z_VariantdvEXT_adr := GetFuncAdr('glVariantdvEXT');
    public z_VariantdvEXT_ovr_0 := GetFuncOrNil&<procedure(id: UInt32; var addr: real)>(z_VariantdvEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VariantdvEXT(id: UInt32; addr: array of real);
    begin
      z_VariantdvEXT_ovr_0(id, addr[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VariantdvEXT(id: UInt32; var addr: real);
    begin
      z_VariantdvEXT_ovr_0(id, addr);
    end;
    public z_VariantdvEXT_ovr_2 := GetFuncOrNil&<procedure(id: UInt32; addr: IntPtr)>(z_VariantdvEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VariantdvEXT(id: UInt32; addr: IntPtr);
    begin
      z_VariantdvEXT_ovr_2(id, addr);
    end;
    
    public z_VariantubvEXT_adr := GetFuncAdr('glVariantubvEXT');
    public z_VariantubvEXT_ovr_0 := GetFuncOrNil&<procedure(id: UInt32; var addr: Byte)>(z_VariantubvEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VariantubvEXT(id: UInt32; addr: array of Byte);
    begin
      z_VariantubvEXT_ovr_0(id, addr[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VariantubvEXT(id: UInt32; var addr: Byte);
    begin
      z_VariantubvEXT_ovr_0(id, addr);
    end;
    public z_VariantubvEXT_ovr_2 := GetFuncOrNil&<procedure(id: UInt32; addr: IntPtr)>(z_VariantubvEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VariantubvEXT(id: UInt32; addr: IntPtr);
    begin
      z_VariantubvEXT_ovr_2(id, addr);
    end;
    
    public z_VariantusvEXT_adr := GetFuncAdr('glVariantusvEXT');
    public z_VariantusvEXT_ovr_0 := GetFuncOrNil&<procedure(id: UInt32; var addr: UInt16)>(z_VariantusvEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VariantusvEXT(id: UInt32; addr: array of UInt16);
    begin
      z_VariantusvEXT_ovr_0(id, addr[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VariantusvEXT(id: UInt32; var addr: UInt16);
    begin
      z_VariantusvEXT_ovr_0(id, addr);
    end;
    public z_VariantusvEXT_ovr_2 := GetFuncOrNil&<procedure(id: UInt32; addr: IntPtr)>(z_VariantusvEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VariantusvEXT(id: UInt32; addr: IntPtr);
    begin
      z_VariantusvEXT_ovr_2(id, addr);
    end;
    
    public z_VariantuivEXT_adr := GetFuncAdr('glVariantuivEXT');
    public z_VariantuivEXT_ovr_0 := GetFuncOrNil&<procedure(id: UInt32; var addr: UInt32)>(z_VariantuivEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VariantuivEXT(id: UInt32; addr: array of UInt32);
    begin
      z_VariantuivEXT_ovr_0(id, addr[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VariantuivEXT(id: UInt32; var addr: UInt32);
    begin
      z_VariantuivEXT_ovr_0(id, addr);
    end;
    public z_VariantuivEXT_ovr_2 := GetFuncOrNil&<procedure(id: UInt32; addr: IntPtr)>(z_VariantuivEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VariantuivEXT(id: UInt32; addr: IntPtr);
    begin
      z_VariantuivEXT_ovr_2(id, addr);
    end;
    
    public z_VariantPointerEXT_adr := GetFuncAdr('glVariantPointerEXT');
    public z_VariantPointerEXT_ovr_0 := GetFuncOrNil&<procedure(id: UInt32; &type: ScalarType; stride: UInt32; addr: IntPtr)>(z_VariantPointerEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VariantPointerEXT(id: UInt32; &type: ScalarType; stride: UInt32; addr: IntPtr);
    begin
      z_VariantPointerEXT_ovr_0(id, &type, stride, addr);
    end;
    
    public z_EnableVariantClientStateEXT_adr := GetFuncAdr('glEnableVariantClientStateEXT');
    public z_EnableVariantClientStateEXT_ovr_0 := GetFuncOrNil&<procedure(id: UInt32)>(z_EnableVariantClientStateEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure EnableVariantClientStateEXT(id: UInt32);
    begin
      z_EnableVariantClientStateEXT_ovr_0(id);
    end;
    
    public z_DisableVariantClientStateEXT_adr := GetFuncAdr('glDisableVariantClientStateEXT');
    public z_DisableVariantClientStateEXT_ovr_0 := GetFuncOrNil&<procedure(id: UInt32)>(z_DisableVariantClientStateEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure DisableVariantClientStateEXT(id: UInt32);
    begin
      z_DisableVariantClientStateEXT_ovr_0(id);
    end;
    
    public z_BindLightParameterEXT_adr := GetFuncAdr('glBindLightParameterEXT');
    public z_BindLightParameterEXT_ovr_0 := GetFuncOrNil&<function(light: LightName; value: LightParameter): UInt32>(z_BindLightParameterEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function BindLightParameterEXT(light: LightName; value: LightParameter): UInt32;
    begin
      Result := z_BindLightParameterEXT_ovr_0(light, value);
    end;
    
    public z_BindMaterialParameterEXT_adr := GetFuncAdr('glBindMaterialParameterEXT');
    public z_BindMaterialParameterEXT_ovr_0 := GetFuncOrNil&<function(face: DummyEnum; value: MaterialParameter): UInt32>(z_BindMaterialParameterEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function BindMaterialParameterEXT(face: DummyEnum; value: MaterialParameter): UInt32;
    begin
      Result := z_BindMaterialParameterEXT_ovr_0(face, value);
    end;
    
    public z_BindTexGenParameterEXT_adr := GetFuncAdr('glBindTexGenParameterEXT');
    public z_BindTexGenParameterEXT_ovr_0 := GetFuncOrNil&<function(&unit: TextureUnit; coord: TextureCoordName; value: TextureGenParameter): UInt32>(z_BindTexGenParameterEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function BindTexGenParameterEXT(&unit: TextureUnit; coord: TextureCoordName; value: TextureGenParameter): UInt32;
    begin
      Result := z_BindTexGenParameterEXT_ovr_0(&unit, coord, value);
    end;
    
    public z_BindTextureUnitParameterEXT_adr := GetFuncAdr('glBindTextureUnitParameterEXT');
    public z_BindTextureUnitParameterEXT_ovr_0 := GetFuncOrNil&<function(&unit: TextureUnit; value: VertexShaderTextureUnitParameter): UInt32>(z_BindTextureUnitParameterEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function BindTextureUnitParameterEXT(&unit: TextureUnit; value: VertexShaderTextureUnitParameter): UInt32;
    begin
      Result := z_BindTextureUnitParameterEXT_ovr_0(&unit, value);
    end;
    
    public z_BindParameterEXT_adr := GetFuncAdr('glBindParameterEXT');
    public z_BindParameterEXT_ovr_0 := GetFuncOrNil&<function(value: VertexShaderParameterEXT): UInt32>(z_BindParameterEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function BindParameterEXT(value: VertexShaderParameterEXT): UInt32;
    begin
      Result := z_BindParameterEXT_ovr_0(value);
    end;
    
    public z_IsVariantEnabledEXT_adr := GetFuncAdr('glIsVariantEnabledEXT');
    public z_IsVariantEnabledEXT_ovr_0 := GetFuncOrNil&<function(id: UInt32; cap: VariantCapEXT): boolean>(z_IsVariantEnabledEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function IsVariantEnabledEXT(id: UInt32; cap: VariantCapEXT): boolean;
    begin
      Result := z_IsVariantEnabledEXT_ovr_0(id, cap);
    end;
    
    public z_GetVariantBooleanvEXT_adr := GetFuncAdr('glGetVariantBooleanvEXT');
    public z_GetVariantBooleanvEXT_ovr_0 := GetFuncOrNil&<procedure(id: UInt32; value: GetVariantValueEXT; var data: boolean)>(z_GetVariantBooleanvEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetVariantBooleanvEXT(id: UInt32; value: GetVariantValueEXT; data: array of boolean);
    begin
      z_GetVariantBooleanvEXT_ovr_0(id, value, data[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetVariantBooleanvEXT(id: UInt32; value: GetVariantValueEXT; var data: boolean);
    begin
      z_GetVariantBooleanvEXT_ovr_0(id, value, data);
    end;
    public z_GetVariantBooleanvEXT_ovr_2 := GetFuncOrNil&<procedure(id: UInt32; value: GetVariantValueEXT; data: IntPtr)>(z_GetVariantBooleanvEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetVariantBooleanvEXT(id: UInt32; value: GetVariantValueEXT; data: IntPtr);
    begin
      z_GetVariantBooleanvEXT_ovr_2(id, value, data);
    end;
    
    public z_GetVariantIntegervEXT_adr := GetFuncAdr('glGetVariantIntegervEXT');
    public z_GetVariantIntegervEXT_ovr_0 := GetFuncOrNil&<procedure(id: UInt32; value: GetVariantValueEXT; var data: Int32)>(z_GetVariantIntegervEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetVariantIntegervEXT(id: UInt32; value: GetVariantValueEXT; data: array of Int32);
    begin
      z_GetVariantIntegervEXT_ovr_0(id, value, data[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetVariantIntegervEXT(id: UInt32; value: GetVariantValueEXT; var data: Int32);
    begin
      z_GetVariantIntegervEXT_ovr_0(id, value, data);
    end;
    public z_GetVariantIntegervEXT_ovr_2 := GetFuncOrNil&<procedure(id: UInt32; value: GetVariantValueEXT; data: IntPtr)>(z_GetVariantIntegervEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetVariantIntegervEXT(id: UInt32; value: GetVariantValueEXT; data: IntPtr);
    begin
      z_GetVariantIntegervEXT_ovr_2(id, value, data);
    end;
    
    public z_GetVariantFloatvEXT_adr := GetFuncAdr('glGetVariantFloatvEXT');
    public z_GetVariantFloatvEXT_ovr_0 := GetFuncOrNil&<procedure(id: UInt32; value: GetVariantValueEXT; var data: single)>(z_GetVariantFloatvEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetVariantFloatvEXT(id: UInt32; value: GetVariantValueEXT; data: array of single);
    begin
      z_GetVariantFloatvEXT_ovr_0(id, value, data[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetVariantFloatvEXT(id: UInt32; value: GetVariantValueEXT; var data: single);
    begin
      z_GetVariantFloatvEXT_ovr_0(id, value, data);
    end;
    public z_GetVariantFloatvEXT_ovr_2 := GetFuncOrNil&<procedure(id: UInt32; value: GetVariantValueEXT; data: IntPtr)>(z_GetVariantFloatvEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetVariantFloatvEXT(id: UInt32; value: GetVariantValueEXT; data: IntPtr);
    begin
      z_GetVariantFloatvEXT_ovr_2(id, value, data);
    end;
    
    public z_GetVariantPointervEXT_adr := GetFuncAdr('glGetVariantPointervEXT');
    public z_GetVariantPointervEXT_ovr_0 := GetFuncOrNil&<procedure(id: UInt32; value: GetVariantValueEXT; var data: IntPtr)>(z_GetVariantPointervEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetVariantPointervEXT(id: UInt32; value: GetVariantValueEXT; data: array of IntPtr);
    begin
      z_GetVariantPointervEXT_ovr_0(id, value, data[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetVariantPointervEXT(id: UInt32; value: GetVariantValueEXT; var data: IntPtr);
    begin
      z_GetVariantPointervEXT_ovr_0(id, value, data);
    end;
    public z_GetVariantPointervEXT_ovr_2 := GetFuncOrNil&<procedure(id: UInt32; value: GetVariantValueEXT; data: pointer)>(z_GetVariantPointervEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetVariantPointervEXT(id: UInt32; value: GetVariantValueEXT; data: pointer);
    begin
      z_GetVariantPointervEXT_ovr_2(id, value, data);
    end;
    
    public z_GetInvariantBooleanvEXT_adr := GetFuncAdr('glGetInvariantBooleanvEXT');
    public z_GetInvariantBooleanvEXT_ovr_0 := GetFuncOrNil&<procedure(id: UInt32; value: GetVariantValueEXT; var data: boolean)>(z_GetInvariantBooleanvEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetInvariantBooleanvEXT(id: UInt32; value: GetVariantValueEXT; data: array of boolean);
    begin
      z_GetInvariantBooleanvEXT_ovr_0(id, value, data[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetInvariantBooleanvEXT(id: UInt32; value: GetVariantValueEXT; var data: boolean);
    begin
      z_GetInvariantBooleanvEXT_ovr_0(id, value, data);
    end;
    public z_GetInvariantBooleanvEXT_ovr_2 := GetFuncOrNil&<procedure(id: UInt32; value: GetVariantValueEXT; data: IntPtr)>(z_GetInvariantBooleanvEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetInvariantBooleanvEXT(id: UInt32; value: GetVariantValueEXT; data: IntPtr);
    begin
      z_GetInvariantBooleanvEXT_ovr_2(id, value, data);
    end;
    
    public z_GetInvariantIntegervEXT_adr := GetFuncAdr('glGetInvariantIntegervEXT');
    public z_GetInvariantIntegervEXT_ovr_0 := GetFuncOrNil&<procedure(id: UInt32; value: GetVariantValueEXT; var data: Int32)>(z_GetInvariantIntegervEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetInvariantIntegervEXT(id: UInt32; value: GetVariantValueEXT; data: array of Int32);
    begin
      z_GetInvariantIntegervEXT_ovr_0(id, value, data[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetInvariantIntegervEXT(id: UInt32; value: GetVariantValueEXT; var data: Int32);
    begin
      z_GetInvariantIntegervEXT_ovr_0(id, value, data);
    end;
    public z_GetInvariantIntegervEXT_ovr_2 := GetFuncOrNil&<procedure(id: UInt32; value: GetVariantValueEXT; data: IntPtr)>(z_GetInvariantIntegervEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetInvariantIntegervEXT(id: UInt32; value: GetVariantValueEXT; data: IntPtr);
    begin
      z_GetInvariantIntegervEXT_ovr_2(id, value, data);
    end;
    
    public z_GetInvariantFloatvEXT_adr := GetFuncAdr('glGetInvariantFloatvEXT');
    public z_GetInvariantFloatvEXT_ovr_0 := GetFuncOrNil&<procedure(id: UInt32; value: GetVariantValueEXT; var data: single)>(z_GetInvariantFloatvEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetInvariantFloatvEXT(id: UInt32; value: GetVariantValueEXT; data: array of single);
    begin
      z_GetInvariantFloatvEXT_ovr_0(id, value, data[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetInvariantFloatvEXT(id: UInt32; value: GetVariantValueEXT; var data: single);
    begin
      z_GetInvariantFloatvEXT_ovr_0(id, value, data);
    end;
    public z_GetInvariantFloatvEXT_ovr_2 := GetFuncOrNil&<procedure(id: UInt32; value: GetVariantValueEXT; data: IntPtr)>(z_GetInvariantFloatvEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetInvariantFloatvEXT(id: UInt32; value: GetVariantValueEXT; data: IntPtr);
    begin
      z_GetInvariantFloatvEXT_ovr_2(id, value, data);
    end;
    
    public z_GetLocalConstantBooleanvEXT_adr := GetFuncAdr('glGetLocalConstantBooleanvEXT');
    public z_GetLocalConstantBooleanvEXT_ovr_0 := GetFuncOrNil&<procedure(id: UInt32; value: GetVariantValueEXT; var data: boolean)>(z_GetLocalConstantBooleanvEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetLocalConstantBooleanvEXT(id: UInt32; value: GetVariantValueEXT; data: array of boolean);
    begin
      z_GetLocalConstantBooleanvEXT_ovr_0(id, value, data[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetLocalConstantBooleanvEXT(id: UInt32; value: GetVariantValueEXT; var data: boolean);
    begin
      z_GetLocalConstantBooleanvEXT_ovr_0(id, value, data);
    end;
    public z_GetLocalConstantBooleanvEXT_ovr_2 := GetFuncOrNil&<procedure(id: UInt32; value: GetVariantValueEXT; data: IntPtr)>(z_GetLocalConstantBooleanvEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetLocalConstantBooleanvEXT(id: UInt32; value: GetVariantValueEXT; data: IntPtr);
    begin
      z_GetLocalConstantBooleanvEXT_ovr_2(id, value, data);
    end;
    
    public z_GetLocalConstantIntegervEXT_adr := GetFuncAdr('glGetLocalConstantIntegervEXT');
    public z_GetLocalConstantIntegervEXT_ovr_0 := GetFuncOrNil&<procedure(id: UInt32; value: GetVariantValueEXT; var data: Int32)>(z_GetLocalConstantIntegervEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetLocalConstantIntegervEXT(id: UInt32; value: GetVariantValueEXT; data: array of Int32);
    begin
      z_GetLocalConstantIntegervEXT_ovr_0(id, value, data[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetLocalConstantIntegervEXT(id: UInt32; value: GetVariantValueEXT; var data: Int32);
    begin
      z_GetLocalConstantIntegervEXT_ovr_0(id, value, data);
    end;
    public z_GetLocalConstantIntegervEXT_ovr_2 := GetFuncOrNil&<procedure(id: UInt32; value: GetVariantValueEXT; data: IntPtr)>(z_GetLocalConstantIntegervEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetLocalConstantIntegervEXT(id: UInt32; value: GetVariantValueEXT; data: IntPtr);
    begin
      z_GetLocalConstantIntegervEXT_ovr_2(id, value, data);
    end;
    
    public z_GetLocalConstantFloatvEXT_adr := GetFuncAdr('glGetLocalConstantFloatvEXT');
    public z_GetLocalConstantFloatvEXT_ovr_0 := GetFuncOrNil&<procedure(id: UInt32; value: GetVariantValueEXT; var data: single)>(z_GetLocalConstantFloatvEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetLocalConstantFloatvEXT(id: UInt32; value: GetVariantValueEXT; data: array of single);
    begin
      z_GetLocalConstantFloatvEXT_ovr_0(id, value, data[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetLocalConstantFloatvEXT(id: UInt32; value: GetVariantValueEXT; var data: single);
    begin
      z_GetLocalConstantFloatvEXT_ovr_0(id, value, data);
    end;
    public z_GetLocalConstantFloatvEXT_ovr_2 := GetFuncOrNil&<procedure(id: UInt32; value: GetVariantValueEXT; data: IntPtr)>(z_GetLocalConstantFloatvEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetLocalConstantFloatvEXT(id: UInt32; value: GetVariantValueEXT; data: IntPtr);
    begin
      z_GetLocalConstantFloatvEXT_ovr_2(id, value, data);
    end;
    
  end;
  
  glVertexWeightingEXT = sealed class
    public static function GetFuncAdr([MarshalAs(UnmanagedType.LPStr)] lpszProc: string): IntPtr;
    external 'opengl32.dll' name 'wglGetProcAddress';
    public static function GetFuncOrNil<T>(fadr: IntPtr) :=
    fadr=IntPtr.Zero ? default(T) :
    Marshal.GetDelegateForFunctionPointer&<T>(fadr);
    
    public z_VertexWeightfEXT_adr := GetFuncAdr('glVertexWeightfEXT');
    public z_VertexWeightfEXT_ovr_0 := GetFuncOrNil&<procedure(weight: single)>(z_VertexWeightfEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexWeightfEXT(weight: single);
    begin
      z_VertexWeightfEXT_ovr_0(weight);
    end;
    
    public z_VertexWeightfvEXT_adr := GetFuncAdr('glVertexWeightfvEXT');
    public z_VertexWeightfvEXT_ovr_0 := GetFuncOrNil&<procedure(var weight: single)>(z_VertexWeightfvEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexWeightfvEXT(weight: array of single);
    begin
      z_VertexWeightfvEXT_ovr_0(weight[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexWeightfvEXT(var weight: single);
    begin
      z_VertexWeightfvEXT_ovr_0(weight);
    end;
    public z_VertexWeightfvEXT_ovr_2 := GetFuncOrNil&<procedure(weight: IntPtr)>(z_VertexWeightfvEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexWeightfvEXT(weight: IntPtr);
    begin
      z_VertexWeightfvEXT_ovr_2(weight);
    end;
    
    public z_VertexWeightPointerEXT_adr := GetFuncAdr('glVertexWeightPointerEXT');
    public z_VertexWeightPointerEXT_ovr_0 := GetFuncOrNil&<procedure(size: Int32; &type: VertexWeightPointerTypeEXT; stride: Int32; pointer: IntPtr)>(z_VertexWeightPointerEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexWeightPointerEXT(size: Int32; &type: VertexWeightPointerTypeEXT; stride: Int32; pointer: IntPtr);
    begin
      z_VertexWeightPointerEXT_ovr_0(size, &type, stride, pointer);
    end;
    
  end;
  
  glWin32KeyedMutexEXT = sealed class
    public static function GetFuncAdr([MarshalAs(UnmanagedType.LPStr)] lpszProc: string): IntPtr;
    external 'opengl32.dll' name 'wglGetProcAddress';
    public static function GetFuncOrNil<T>(fadr: IntPtr) :=
    fadr=IntPtr.Zero ? default(T) :
    Marshal.GetDelegateForFunctionPointer&<T>(fadr);
    
    public z_AcquireKeyedMutexWin32EXT_adr := GetFuncAdr('glAcquireKeyedMutexWin32EXT');
    public z_AcquireKeyedMutexWin32EXT_ovr_0 := GetFuncOrNil&<function(memory: UInt32; key: UInt64; timeout: UInt32): boolean>(z_AcquireKeyedMutexWin32EXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function AcquireKeyedMutexWin32EXT(memory: UInt32; key: UInt64; timeout: UInt32): boolean;
    begin
      Result := z_AcquireKeyedMutexWin32EXT_ovr_0(memory, key, timeout);
    end;
    
    public z_ReleaseKeyedMutexWin32EXT_adr := GetFuncAdr('glReleaseKeyedMutexWin32EXT');
    public z_ReleaseKeyedMutexWin32EXT_ovr_0 := GetFuncOrNil&<function(memory: UInt32; key: UInt64): boolean>(z_ReleaseKeyedMutexWin32EXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function ReleaseKeyedMutexWin32EXT(memory: UInt32; key: UInt64): boolean;
    begin
      Result := z_ReleaseKeyedMutexWin32EXT_ovr_0(memory, key);
    end;
    
  end;
  
  glWindowRectanglesEXT = sealed class
    public static function GetFuncAdr([MarshalAs(UnmanagedType.LPStr)] lpszProc: string): IntPtr;
    external 'opengl32.dll' name 'wglGetProcAddress';
    public static function GetFuncOrNil<T>(fadr: IntPtr) :=
    fadr=IntPtr.Zero ? default(T) :
    Marshal.GetDelegateForFunctionPointer&<T>(fadr);
    
    public z_WindowRectanglesEXT_adr := GetFuncAdr('glWindowRectanglesEXT');
    public z_WindowRectanglesEXT_ovr_0 := GetFuncOrNil&<procedure(mode: DummyEnum; count: Int32; var box: Int32)>(z_WindowRectanglesEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure WindowRectanglesEXT(mode: DummyEnum; count: Int32; box: array of Int32);
    begin
      z_WindowRectanglesEXT_ovr_0(mode, count, box[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure WindowRectanglesEXT(mode: DummyEnum; count: Int32; var box: Int32);
    begin
      z_WindowRectanglesEXT_ovr_0(mode, count, box);
    end;
    public z_WindowRectanglesEXT_ovr_2 := GetFuncOrNil&<procedure(mode: DummyEnum; count: Int32; box: IntPtr)>(z_WindowRectanglesEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure WindowRectanglesEXT(mode: DummyEnum; count: Int32; box: IntPtr);
    begin
      z_WindowRectanglesEXT_ovr_2(mode, count, box);
    end;
    
  end;
  
  glX11SyncObjectEXT = sealed class
    public static function GetFuncAdr([MarshalAs(UnmanagedType.LPStr)] lpszProc: string): IntPtr;
    external 'opengl32.dll' name 'wglGetProcAddress';
    public static function GetFuncOrNil<T>(fadr: IntPtr) :=
    fadr=IntPtr.Zero ? default(T) :
    Marshal.GetDelegateForFunctionPointer&<T>(fadr);
    
    public z_ImportSyncEXT_adr := GetFuncAdr('glImportSyncEXT');
    public z_ImportSyncEXT_ovr_0 := GetFuncOrNil&<function(external_sync_type: DummyEnum; external_sync: IntPtr; flags: DummyFlags): GLsync>(z_ImportSyncEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function ImportSyncEXT(external_sync_type: DummyEnum; external_sync: IntPtr; flags: DummyFlags): GLsync;
    begin
      Result := z_ImportSyncEXT_ovr_0(external_sync_type, external_sync, flags);
    end;
    
  end;
  
  glFrameTerminatorGREMEDY = sealed class
    public static function GetFuncAdr([MarshalAs(UnmanagedType.LPStr)] lpszProc: string): IntPtr;
    external 'opengl32.dll' name 'wglGetProcAddress';
    public static function GetFuncOrNil<T>(fadr: IntPtr) :=
    fadr=IntPtr.Zero ? default(T) :
    Marshal.GetDelegateForFunctionPointer&<T>(fadr);
    
    public z_FrameTerminatorGREMEDY_adr := GetFuncAdr('glFrameTerminatorGREMEDY');
    public z_FrameTerminatorGREMEDY_ovr_0 := GetFuncOrNil&<procedure>(z_FrameTerminatorGREMEDY_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure FrameTerminatorGREMEDY;
    begin
      z_FrameTerminatorGREMEDY_ovr_0;
    end;
    
  end;
  
  glStringMarkerGREMEDY = sealed class
    public static function GetFuncAdr([MarshalAs(UnmanagedType.LPStr)] lpszProc: string): IntPtr;
    external 'opengl32.dll' name 'wglGetProcAddress';
    public static function GetFuncOrNil<T>(fadr: IntPtr) :=
    fadr=IntPtr.Zero ? default(T) :
    Marshal.GetDelegateForFunctionPointer&<T>(fadr);
    
    public z_StringMarkerGREMEDY_adr := GetFuncAdr('glStringMarkerGREMEDY');
    public z_StringMarkerGREMEDY_ovr_0 := GetFuncOrNil&<procedure(len: Int32; string: IntPtr)>(z_StringMarkerGREMEDY_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure StringMarkerGREMEDY(len: Int32; string: IntPtr);
    begin
      z_StringMarkerGREMEDY_ovr_0(len, string);
    end;
    
  end;
  
  glImageTransformHP = sealed class
    public static function GetFuncAdr([MarshalAs(UnmanagedType.LPStr)] lpszProc: string): IntPtr;
    external 'opengl32.dll' name 'wglGetProcAddress';
    public static function GetFuncOrNil<T>(fadr: IntPtr) :=
    fadr=IntPtr.Zero ? default(T) :
    Marshal.GetDelegateForFunctionPointer&<T>(fadr);
    
    public z_ImageTransformParameteriHP_adr := GetFuncAdr('glImageTransformParameteriHP');
    public z_ImageTransformParameteriHP_ovr_0 := GetFuncOrNil&<procedure(target: ImageTransformTargetHP; pname: ImageTransformPNameHP; param: Int32)>(z_ImageTransformParameteriHP_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ImageTransformParameteriHP(target: ImageTransformTargetHP; pname: ImageTransformPNameHP; param: Int32);
    begin
      z_ImageTransformParameteriHP_ovr_0(target, pname, param);
    end;
    
    public z_ImageTransformParameterfHP_adr := GetFuncAdr('glImageTransformParameterfHP');
    public z_ImageTransformParameterfHP_ovr_0 := GetFuncOrNil&<procedure(target: ImageTransformTargetHP; pname: ImageTransformPNameHP; param: single)>(z_ImageTransformParameterfHP_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ImageTransformParameterfHP(target: ImageTransformTargetHP; pname: ImageTransformPNameHP; param: single);
    begin
      z_ImageTransformParameterfHP_ovr_0(target, pname, param);
    end;
    
    public z_ImageTransformParameterivHP_adr := GetFuncAdr('glImageTransformParameterivHP');
    public z_ImageTransformParameterivHP_ovr_0 := GetFuncOrNil&<procedure(target: ImageTransformTargetHP; pname: ImageTransformPNameHP; var &params: Int32)>(z_ImageTransformParameterivHP_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ImageTransformParameterivHP(target: ImageTransformTargetHP; pname: ImageTransformPNameHP; &params: array of Int32);
    begin
      z_ImageTransformParameterivHP_ovr_0(target, pname, &params[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ImageTransformParameterivHP(target: ImageTransformTargetHP; pname: ImageTransformPNameHP; var &params: Int32);
    begin
      z_ImageTransformParameterivHP_ovr_0(target, pname, &params);
    end;
    public z_ImageTransformParameterivHP_ovr_2 := GetFuncOrNil&<procedure(target: ImageTransformTargetHP; pname: ImageTransformPNameHP; &params: IntPtr)>(z_ImageTransformParameterivHP_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ImageTransformParameterivHP(target: ImageTransformTargetHP; pname: ImageTransformPNameHP; &params: IntPtr);
    begin
      z_ImageTransformParameterivHP_ovr_2(target, pname, &params);
    end;
    
    public z_ImageTransformParameterfvHP_adr := GetFuncAdr('glImageTransformParameterfvHP');
    public z_ImageTransformParameterfvHP_ovr_0 := GetFuncOrNil&<procedure(target: ImageTransformTargetHP; pname: ImageTransformPNameHP; var &params: single)>(z_ImageTransformParameterfvHP_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ImageTransformParameterfvHP(target: ImageTransformTargetHP; pname: ImageTransformPNameHP; &params: array of single);
    begin
      z_ImageTransformParameterfvHP_ovr_0(target, pname, &params[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ImageTransformParameterfvHP(target: ImageTransformTargetHP; pname: ImageTransformPNameHP; var &params: single);
    begin
      z_ImageTransformParameterfvHP_ovr_0(target, pname, &params);
    end;
    public z_ImageTransformParameterfvHP_ovr_2 := GetFuncOrNil&<procedure(target: ImageTransformTargetHP; pname: ImageTransformPNameHP; &params: IntPtr)>(z_ImageTransformParameterfvHP_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ImageTransformParameterfvHP(target: ImageTransformTargetHP; pname: ImageTransformPNameHP; &params: IntPtr);
    begin
      z_ImageTransformParameterfvHP_ovr_2(target, pname, &params);
    end;
    
    public z_GetImageTransformParameterivHP_adr := GetFuncAdr('glGetImageTransformParameterivHP');
    public z_GetImageTransformParameterivHP_ovr_0 := GetFuncOrNil&<procedure(target: ImageTransformTargetHP; pname: ImageTransformPNameHP; var &params: Int32)>(z_GetImageTransformParameterivHP_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetImageTransformParameterivHP(target: ImageTransformTargetHP; pname: ImageTransformPNameHP; &params: array of Int32);
    begin
      z_GetImageTransformParameterivHP_ovr_0(target, pname, &params[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetImageTransformParameterivHP(target: ImageTransformTargetHP; pname: ImageTransformPNameHP; var &params: Int32);
    begin
      z_GetImageTransformParameterivHP_ovr_0(target, pname, &params);
    end;
    public z_GetImageTransformParameterivHP_ovr_2 := GetFuncOrNil&<procedure(target: ImageTransformTargetHP; pname: ImageTransformPNameHP; &params: IntPtr)>(z_GetImageTransformParameterivHP_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetImageTransformParameterivHP(target: ImageTransformTargetHP; pname: ImageTransformPNameHP; &params: IntPtr);
    begin
      z_GetImageTransformParameterivHP_ovr_2(target, pname, &params);
    end;
    
    public z_GetImageTransformParameterfvHP_adr := GetFuncAdr('glGetImageTransformParameterfvHP');
    public z_GetImageTransformParameterfvHP_ovr_0 := GetFuncOrNil&<procedure(target: ImageTransformTargetHP; pname: ImageTransformPNameHP; var &params: single)>(z_GetImageTransformParameterfvHP_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetImageTransformParameterfvHP(target: ImageTransformTargetHP; pname: ImageTransformPNameHP; &params: array of single);
    begin
      z_GetImageTransformParameterfvHP_ovr_0(target, pname, &params[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetImageTransformParameterfvHP(target: ImageTransformTargetHP; pname: ImageTransformPNameHP; var &params: single);
    begin
      z_GetImageTransformParameterfvHP_ovr_0(target, pname, &params);
    end;
    public z_GetImageTransformParameterfvHP_ovr_2 := GetFuncOrNil&<procedure(target: ImageTransformTargetHP; pname: ImageTransformPNameHP; &params: IntPtr)>(z_GetImageTransformParameterfvHP_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetImageTransformParameterfvHP(target: ImageTransformTargetHP; pname: ImageTransformPNameHP; &params: IntPtr);
    begin
      z_GetImageTransformParameterfvHP_ovr_2(target, pname, &params);
    end;
    
  end;
  
  glMultimodeDrawArraysIBM = sealed class
    public static function GetFuncAdr([MarshalAs(UnmanagedType.LPStr)] lpszProc: string): IntPtr;
    external 'opengl32.dll' name 'wglGetProcAddress';
    public static function GetFuncOrNil<T>(fadr: IntPtr) :=
    fadr=IntPtr.Zero ? default(T) :
    Marshal.GetDelegateForFunctionPointer&<T>(fadr);
    
    public z_MultiModeDrawArraysIBM_adr := GetFuncAdr('glMultiModeDrawArraysIBM');
    public z_MultiModeDrawArraysIBM_ovr_0 := GetFuncOrNil&<procedure(var mode: PrimitiveType; var first: Int32; var count: Int32; primcount: Int32; modestride: Int32)>(z_MultiModeDrawArraysIBM_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiModeDrawArraysIBM(mode: array of PrimitiveType; first: array of Int32; count: array of Int32; primcount: Int32; modestride: Int32);
    begin
      z_MultiModeDrawArraysIBM_ovr_0(mode[0], first[0], count[0], primcount, modestride);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiModeDrawArraysIBM(mode: array of PrimitiveType; first: array of Int32; var count: Int32; primcount: Int32; modestride: Int32);
    begin
      z_MultiModeDrawArraysIBM_ovr_0(mode[0], first[0], count, primcount, modestride);
    end;
    public z_MultiModeDrawArraysIBM_ovr_2 := GetFuncOrNil&<procedure(var mode: PrimitiveType; var first: Int32; count: IntPtr; primcount: Int32; modestride: Int32)>(z_MultiModeDrawArraysIBM_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiModeDrawArraysIBM(mode: array of PrimitiveType; first: array of Int32; count: IntPtr; primcount: Int32; modestride: Int32);
    begin
      z_MultiModeDrawArraysIBM_ovr_2(mode[0], first[0], count, primcount, modestride);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiModeDrawArraysIBM(mode: array of PrimitiveType; var first: Int32; count: array of Int32; primcount: Int32; modestride: Int32);
    begin
      z_MultiModeDrawArraysIBM_ovr_0(mode[0], first, count[0], primcount, modestride);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiModeDrawArraysIBM(mode: array of PrimitiveType; var first: Int32; var count: Int32; primcount: Int32; modestride: Int32);
    begin
      z_MultiModeDrawArraysIBM_ovr_0(mode[0], first, count, primcount, modestride);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiModeDrawArraysIBM(mode: array of PrimitiveType; var first: Int32; count: IntPtr; primcount: Int32; modestride: Int32);
    begin
      z_MultiModeDrawArraysIBM_ovr_2(mode[0], first, count, primcount, modestride);
    end;
    public z_MultiModeDrawArraysIBM_ovr_6 := GetFuncOrNil&<procedure(var mode: PrimitiveType; first: IntPtr; var count: Int32; primcount: Int32; modestride: Int32)>(z_MultiModeDrawArraysIBM_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiModeDrawArraysIBM(mode: array of PrimitiveType; first: IntPtr; count: array of Int32; primcount: Int32; modestride: Int32);
    begin
      z_MultiModeDrawArraysIBM_ovr_6(mode[0], first, count[0], primcount, modestride);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiModeDrawArraysIBM(mode: array of PrimitiveType; first: IntPtr; var count: Int32; primcount: Int32; modestride: Int32);
    begin
      z_MultiModeDrawArraysIBM_ovr_6(mode[0], first, count, primcount, modestride);
    end;
    public z_MultiModeDrawArraysIBM_ovr_8 := GetFuncOrNil&<procedure(var mode: PrimitiveType; first: IntPtr; count: IntPtr; primcount: Int32; modestride: Int32)>(z_MultiModeDrawArraysIBM_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiModeDrawArraysIBM(mode: array of PrimitiveType; first: IntPtr; count: IntPtr; primcount: Int32; modestride: Int32);
    begin
      z_MultiModeDrawArraysIBM_ovr_8(mode[0], first, count, primcount, modestride);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiModeDrawArraysIBM(var mode: PrimitiveType; first: array of Int32; count: array of Int32; primcount: Int32; modestride: Int32);
    begin
      z_MultiModeDrawArraysIBM_ovr_0(mode, first[0], count[0], primcount, modestride);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiModeDrawArraysIBM(var mode: PrimitiveType; first: array of Int32; var count: Int32; primcount: Int32; modestride: Int32);
    begin
      z_MultiModeDrawArraysIBM_ovr_0(mode, first[0], count, primcount, modestride);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiModeDrawArraysIBM(var mode: PrimitiveType; first: array of Int32; count: IntPtr; primcount: Int32; modestride: Int32);
    begin
      z_MultiModeDrawArraysIBM_ovr_2(mode, first[0], count, primcount, modestride);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiModeDrawArraysIBM(var mode: PrimitiveType; var first: Int32; count: array of Int32; primcount: Int32; modestride: Int32);
    begin
      z_MultiModeDrawArraysIBM_ovr_0(mode, first, count[0], primcount, modestride);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiModeDrawArraysIBM(var mode: PrimitiveType; var first: Int32; var count: Int32; primcount: Int32; modestride: Int32);
    begin
      z_MultiModeDrawArraysIBM_ovr_0(mode, first, count, primcount, modestride);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiModeDrawArraysIBM(var mode: PrimitiveType; var first: Int32; count: IntPtr; primcount: Int32; modestride: Int32);
    begin
      z_MultiModeDrawArraysIBM_ovr_2(mode, first, count, primcount, modestride);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiModeDrawArraysIBM(var mode: PrimitiveType; first: IntPtr; count: array of Int32; primcount: Int32; modestride: Int32);
    begin
      z_MultiModeDrawArraysIBM_ovr_6(mode, first, count[0], primcount, modestride);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiModeDrawArraysIBM(var mode: PrimitiveType; first: IntPtr; var count: Int32; primcount: Int32; modestride: Int32);
    begin
      z_MultiModeDrawArraysIBM_ovr_6(mode, first, count, primcount, modestride);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiModeDrawArraysIBM(var mode: PrimitiveType; first: IntPtr; count: IntPtr; primcount: Int32; modestride: Int32);
    begin
      z_MultiModeDrawArraysIBM_ovr_8(mode, first, count, primcount, modestride);
    end;
    public z_MultiModeDrawArraysIBM_ovr_18 := GetFuncOrNil&<procedure(mode: IntPtr; var first: Int32; var count: Int32; primcount: Int32; modestride: Int32)>(z_MultiModeDrawArraysIBM_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiModeDrawArraysIBM(mode: IntPtr; first: array of Int32; count: array of Int32; primcount: Int32; modestride: Int32);
    begin
      z_MultiModeDrawArraysIBM_ovr_18(mode, first[0], count[0], primcount, modestride);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiModeDrawArraysIBM(mode: IntPtr; first: array of Int32; var count: Int32; primcount: Int32; modestride: Int32);
    begin
      z_MultiModeDrawArraysIBM_ovr_18(mode, first[0], count, primcount, modestride);
    end;
    public z_MultiModeDrawArraysIBM_ovr_20 := GetFuncOrNil&<procedure(mode: IntPtr; var first: Int32; count: IntPtr; primcount: Int32; modestride: Int32)>(z_MultiModeDrawArraysIBM_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiModeDrawArraysIBM(mode: IntPtr; first: array of Int32; count: IntPtr; primcount: Int32; modestride: Int32);
    begin
      z_MultiModeDrawArraysIBM_ovr_20(mode, first[0], count, primcount, modestride);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiModeDrawArraysIBM(mode: IntPtr; var first: Int32; count: array of Int32; primcount: Int32; modestride: Int32);
    begin
      z_MultiModeDrawArraysIBM_ovr_18(mode, first, count[0], primcount, modestride);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiModeDrawArraysIBM(mode: IntPtr; var first: Int32; var count: Int32; primcount: Int32; modestride: Int32);
    begin
      z_MultiModeDrawArraysIBM_ovr_18(mode, first, count, primcount, modestride);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiModeDrawArraysIBM(mode: IntPtr; var first: Int32; count: IntPtr; primcount: Int32; modestride: Int32);
    begin
      z_MultiModeDrawArraysIBM_ovr_20(mode, first, count, primcount, modestride);
    end;
    public z_MultiModeDrawArraysIBM_ovr_24 := GetFuncOrNil&<procedure(mode: IntPtr; first: IntPtr; var count: Int32; primcount: Int32; modestride: Int32)>(z_MultiModeDrawArraysIBM_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiModeDrawArraysIBM(mode: IntPtr; first: IntPtr; count: array of Int32; primcount: Int32; modestride: Int32);
    begin
      z_MultiModeDrawArraysIBM_ovr_24(mode, first, count[0], primcount, modestride);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiModeDrawArraysIBM(mode: IntPtr; first: IntPtr; var count: Int32; primcount: Int32; modestride: Int32);
    begin
      z_MultiModeDrawArraysIBM_ovr_24(mode, first, count, primcount, modestride);
    end;
    public z_MultiModeDrawArraysIBM_ovr_26 := GetFuncOrNil&<procedure(mode: IntPtr; first: IntPtr; count: IntPtr; primcount: Int32; modestride: Int32)>(z_MultiModeDrawArraysIBM_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiModeDrawArraysIBM(mode: IntPtr; first: IntPtr; count: IntPtr; primcount: Int32; modestride: Int32);
    begin
      z_MultiModeDrawArraysIBM_ovr_26(mode, first, count, primcount, modestride);
    end;
    
    public z_MultiModeDrawElementsIBM_adr := GetFuncAdr('glMultiModeDrawElementsIBM');
    public z_MultiModeDrawElementsIBM_ovr_0 := GetFuncOrNil&<procedure(var mode: PrimitiveType; var count: Int32; &type: DrawElementsType; var indices: IntPtr; primcount: Int32; modestride: Int32)>(z_MultiModeDrawElementsIBM_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiModeDrawElementsIBM(mode: array of PrimitiveType; count: array of Int32; &type: DrawElementsType; indices: array of IntPtr; primcount: Int32; modestride: Int32);
    begin
      z_MultiModeDrawElementsIBM_ovr_0(mode[0], count[0], &type, indices[0], primcount, modestride);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiModeDrawElementsIBM(mode: array of PrimitiveType; count: array of Int32; &type: DrawElementsType; var indices: IntPtr; primcount: Int32; modestride: Int32);
    begin
      z_MultiModeDrawElementsIBM_ovr_0(mode[0], count[0], &type, indices, primcount, modestride);
    end;
    public z_MultiModeDrawElementsIBM_ovr_2 := GetFuncOrNil&<procedure(var mode: PrimitiveType; var count: Int32; &type: DrawElementsType; indices: pointer; primcount: Int32; modestride: Int32)>(z_MultiModeDrawElementsIBM_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiModeDrawElementsIBM(mode: array of PrimitiveType; count: array of Int32; &type: DrawElementsType; indices: pointer; primcount: Int32; modestride: Int32);
    begin
      z_MultiModeDrawElementsIBM_ovr_2(mode[0], count[0], &type, indices, primcount, modestride);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiModeDrawElementsIBM(mode: array of PrimitiveType; var count: Int32; &type: DrawElementsType; indices: array of IntPtr; primcount: Int32; modestride: Int32);
    begin
      z_MultiModeDrawElementsIBM_ovr_0(mode[0], count, &type, indices[0], primcount, modestride);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiModeDrawElementsIBM(mode: array of PrimitiveType; var count: Int32; &type: DrawElementsType; var indices: IntPtr; primcount: Int32; modestride: Int32);
    begin
      z_MultiModeDrawElementsIBM_ovr_0(mode[0], count, &type, indices, primcount, modestride);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiModeDrawElementsIBM(mode: array of PrimitiveType; var count: Int32; &type: DrawElementsType; indices: pointer; primcount: Int32; modestride: Int32);
    begin
      z_MultiModeDrawElementsIBM_ovr_2(mode[0], count, &type, indices, primcount, modestride);
    end;
    public z_MultiModeDrawElementsIBM_ovr_6 := GetFuncOrNil&<procedure(var mode: PrimitiveType; count: IntPtr; &type: DrawElementsType; var indices: IntPtr; primcount: Int32; modestride: Int32)>(z_MultiModeDrawElementsIBM_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiModeDrawElementsIBM(mode: array of PrimitiveType; count: IntPtr; &type: DrawElementsType; indices: array of IntPtr; primcount: Int32; modestride: Int32);
    begin
      z_MultiModeDrawElementsIBM_ovr_6(mode[0], count, &type, indices[0], primcount, modestride);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiModeDrawElementsIBM(mode: array of PrimitiveType; count: IntPtr; &type: DrawElementsType; var indices: IntPtr; primcount: Int32; modestride: Int32);
    begin
      z_MultiModeDrawElementsIBM_ovr_6(mode[0], count, &type, indices, primcount, modestride);
    end;
    public z_MultiModeDrawElementsIBM_ovr_8 := GetFuncOrNil&<procedure(var mode: PrimitiveType; count: IntPtr; &type: DrawElementsType; indices: pointer; primcount: Int32; modestride: Int32)>(z_MultiModeDrawElementsIBM_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiModeDrawElementsIBM(mode: array of PrimitiveType; count: IntPtr; &type: DrawElementsType; indices: pointer; primcount: Int32; modestride: Int32);
    begin
      z_MultiModeDrawElementsIBM_ovr_8(mode[0], count, &type, indices, primcount, modestride);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiModeDrawElementsIBM(var mode: PrimitiveType; count: array of Int32; &type: DrawElementsType; indices: array of IntPtr; primcount: Int32; modestride: Int32);
    begin
      z_MultiModeDrawElementsIBM_ovr_0(mode, count[0], &type, indices[0], primcount, modestride);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiModeDrawElementsIBM(var mode: PrimitiveType; count: array of Int32; &type: DrawElementsType; var indices: IntPtr; primcount: Int32; modestride: Int32);
    begin
      z_MultiModeDrawElementsIBM_ovr_0(mode, count[0], &type, indices, primcount, modestride);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiModeDrawElementsIBM(var mode: PrimitiveType; count: array of Int32; &type: DrawElementsType; indices: pointer; primcount: Int32; modestride: Int32);
    begin
      z_MultiModeDrawElementsIBM_ovr_2(mode, count[0], &type, indices, primcount, modestride);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiModeDrawElementsIBM(var mode: PrimitiveType; var count: Int32; &type: DrawElementsType; indices: array of IntPtr; primcount: Int32; modestride: Int32);
    begin
      z_MultiModeDrawElementsIBM_ovr_0(mode, count, &type, indices[0], primcount, modestride);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiModeDrawElementsIBM(var mode: PrimitiveType; var count: Int32; &type: DrawElementsType; var indices: IntPtr; primcount: Int32; modestride: Int32);
    begin
      z_MultiModeDrawElementsIBM_ovr_0(mode, count, &type, indices, primcount, modestride);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiModeDrawElementsIBM(var mode: PrimitiveType; var count: Int32; &type: DrawElementsType; indices: pointer; primcount: Int32; modestride: Int32);
    begin
      z_MultiModeDrawElementsIBM_ovr_2(mode, count, &type, indices, primcount, modestride);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiModeDrawElementsIBM(var mode: PrimitiveType; count: IntPtr; &type: DrawElementsType; indices: array of IntPtr; primcount: Int32; modestride: Int32);
    begin
      z_MultiModeDrawElementsIBM_ovr_6(mode, count, &type, indices[0], primcount, modestride);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiModeDrawElementsIBM(var mode: PrimitiveType; count: IntPtr; &type: DrawElementsType; var indices: IntPtr; primcount: Int32; modestride: Int32);
    begin
      z_MultiModeDrawElementsIBM_ovr_6(mode, count, &type, indices, primcount, modestride);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiModeDrawElementsIBM(var mode: PrimitiveType; count: IntPtr; &type: DrawElementsType; indices: pointer; primcount: Int32; modestride: Int32);
    begin
      z_MultiModeDrawElementsIBM_ovr_8(mode, count, &type, indices, primcount, modestride);
    end;
    public z_MultiModeDrawElementsIBM_ovr_18 := GetFuncOrNil&<procedure(mode: IntPtr; var count: Int32; &type: DrawElementsType; var indices: IntPtr; primcount: Int32; modestride: Int32)>(z_MultiModeDrawElementsIBM_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiModeDrawElementsIBM(mode: IntPtr; count: array of Int32; &type: DrawElementsType; indices: array of IntPtr; primcount: Int32; modestride: Int32);
    begin
      z_MultiModeDrawElementsIBM_ovr_18(mode, count[0], &type, indices[0], primcount, modestride);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiModeDrawElementsIBM(mode: IntPtr; count: array of Int32; &type: DrawElementsType; var indices: IntPtr; primcount: Int32; modestride: Int32);
    begin
      z_MultiModeDrawElementsIBM_ovr_18(mode, count[0], &type, indices, primcount, modestride);
    end;
    public z_MultiModeDrawElementsIBM_ovr_20 := GetFuncOrNil&<procedure(mode: IntPtr; var count: Int32; &type: DrawElementsType; indices: pointer; primcount: Int32; modestride: Int32)>(z_MultiModeDrawElementsIBM_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiModeDrawElementsIBM(mode: IntPtr; count: array of Int32; &type: DrawElementsType; indices: pointer; primcount: Int32; modestride: Int32);
    begin
      z_MultiModeDrawElementsIBM_ovr_20(mode, count[0], &type, indices, primcount, modestride);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiModeDrawElementsIBM(mode: IntPtr; var count: Int32; &type: DrawElementsType; indices: array of IntPtr; primcount: Int32; modestride: Int32);
    begin
      z_MultiModeDrawElementsIBM_ovr_18(mode, count, &type, indices[0], primcount, modestride);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiModeDrawElementsIBM(mode: IntPtr; var count: Int32; &type: DrawElementsType; var indices: IntPtr; primcount: Int32; modestride: Int32);
    begin
      z_MultiModeDrawElementsIBM_ovr_18(mode, count, &type, indices, primcount, modestride);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiModeDrawElementsIBM(mode: IntPtr; var count: Int32; &type: DrawElementsType; indices: pointer; primcount: Int32; modestride: Int32);
    begin
      z_MultiModeDrawElementsIBM_ovr_20(mode, count, &type, indices, primcount, modestride);
    end;
    public z_MultiModeDrawElementsIBM_ovr_24 := GetFuncOrNil&<procedure(mode: IntPtr; count: IntPtr; &type: DrawElementsType; var indices: IntPtr; primcount: Int32; modestride: Int32)>(z_MultiModeDrawElementsIBM_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiModeDrawElementsIBM(mode: IntPtr; count: IntPtr; &type: DrawElementsType; indices: array of IntPtr; primcount: Int32; modestride: Int32);
    begin
      z_MultiModeDrawElementsIBM_ovr_24(mode, count, &type, indices[0], primcount, modestride);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiModeDrawElementsIBM(mode: IntPtr; count: IntPtr; &type: DrawElementsType; var indices: IntPtr; primcount: Int32; modestride: Int32);
    begin
      z_MultiModeDrawElementsIBM_ovr_24(mode, count, &type, indices, primcount, modestride);
    end;
    public z_MultiModeDrawElementsIBM_ovr_26 := GetFuncOrNil&<procedure(mode: IntPtr; count: IntPtr; &type: DrawElementsType; indices: pointer; primcount: Int32; modestride: Int32)>(z_MultiModeDrawElementsIBM_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiModeDrawElementsIBM(mode: IntPtr; count: IntPtr; &type: DrawElementsType; indices: pointer; primcount: Int32; modestride: Int32);
    begin
      z_MultiModeDrawElementsIBM_ovr_26(mode, count, &type, indices, primcount, modestride);
    end;
    
  end;
  
  glStaticDataIBM = sealed class
    public static function GetFuncAdr([MarshalAs(UnmanagedType.LPStr)] lpszProc: string): IntPtr;
    external 'opengl32.dll' name 'wglGetProcAddress';
    public static function GetFuncOrNil<T>(fadr: IntPtr) :=
    fadr=IntPtr.Zero ? default(T) :
    Marshal.GetDelegateForFunctionPointer&<T>(fadr);
    
    public z_FlushStaticDataIBM_adr := GetFuncAdr('glFlushStaticDataIBM');
    public z_FlushStaticDataIBM_ovr_0 := GetFuncOrNil&<procedure(target: DummyEnum)>(z_FlushStaticDataIBM_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure FlushStaticDataIBM(target: DummyEnum);
    begin
      z_FlushStaticDataIBM_ovr_0(target);
    end;
    
  end;
  
  glVertexArrayListsIBM = sealed class
    public static function GetFuncAdr([MarshalAs(UnmanagedType.LPStr)] lpszProc: string): IntPtr;
    external 'opengl32.dll' name 'wglGetProcAddress';
    public static function GetFuncOrNil<T>(fadr: IntPtr) :=
    fadr=IntPtr.Zero ? default(T) :
    Marshal.GetDelegateForFunctionPointer&<T>(fadr);
    
    public z_ColorPointerListIBM_adr := GetFuncAdr('glColorPointerListIBM');
    public z_ColorPointerListIBM_ovr_0 := GetFuncOrNil&<procedure(size: Int32; &type: ColorPointerType; stride: Int32; var _pointer: IntPtr; ptrstride: Int32)>(z_ColorPointerListIBM_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ColorPointerListIBM(size: Int32; &type: ColorPointerType; stride: Int32; _pointer: array of IntPtr; ptrstride: Int32);
    begin
      z_ColorPointerListIBM_ovr_0(size, &type, stride, _pointer[0], ptrstride);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ColorPointerListIBM(size: Int32; &type: ColorPointerType; stride: Int32; var _pointer: IntPtr; ptrstride: Int32);
    begin
      z_ColorPointerListIBM_ovr_0(size, &type, stride, _pointer, ptrstride);
    end;
    public z_ColorPointerListIBM_ovr_2 := GetFuncOrNil&<procedure(size: Int32; &type: ColorPointerType; stride: Int32; _pointer: pointer; ptrstride: Int32)>(z_ColorPointerListIBM_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ColorPointerListIBM(size: Int32; &type: ColorPointerType; stride: Int32; _pointer: pointer; ptrstride: Int32);
    begin
      z_ColorPointerListIBM_ovr_2(size, &type, stride, _pointer, ptrstride);
    end;
    
    public z_SecondaryColorPointerListIBM_adr := GetFuncAdr('glSecondaryColorPointerListIBM');
    public z_SecondaryColorPointerListIBM_ovr_0 := GetFuncOrNil&<procedure(size: Int32; &type: SecondaryColorPointerTypeIBM; stride: Int32; var _pointer: IntPtr; ptrstride: Int32)>(z_SecondaryColorPointerListIBM_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure SecondaryColorPointerListIBM(size: Int32; &type: SecondaryColorPointerTypeIBM; stride: Int32; _pointer: array of IntPtr; ptrstride: Int32);
    begin
      z_SecondaryColorPointerListIBM_ovr_0(size, &type, stride, _pointer[0], ptrstride);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure SecondaryColorPointerListIBM(size: Int32; &type: SecondaryColorPointerTypeIBM; stride: Int32; var _pointer: IntPtr; ptrstride: Int32);
    begin
      z_SecondaryColorPointerListIBM_ovr_0(size, &type, stride, _pointer, ptrstride);
    end;
    public z_SecondaryColorPointerListIBM_ovr_2 := GetFuncOrNil&<procedure(size: Int32; &type: SecondaryColorPointerTypeIBM; stride: Int32; _pointer: pointer; ptrstride: Int32)>(z_SecondaryColorPointerListIBM_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure SecondaryColorPointerListIBM(size: Int32; &type: SecondaryColorPointerTypeIBM; stride: Int32; _pointer: pointer; ptrstride: Int32);
    begin
      z_SecondaryColorPointerListIBM_ovr_2(size, &type, stride, _pointer, ptrstride);
    end;
    
    public z_EdgeFlagPointerListIBM_adr := GetFuncAdr('glEdgeFlagPointerListIBM');
    public z_EdgeFlagPointerListIBM_ovr_0 := GetFuncOrNil&<procedure(stride: Int32; var pointer: IntPtr; ptrstride: Int32)>(z_EdgeFlagPointerListIBM_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure EdgeFlagPointerListIBM(stride: Int32; pointer: array of array of Byte; ptrstride: Int32);
    begin
      var par_2_temp_arr1 := pointer.ConvertAll(arr_el1->begin
        var l := sizeof(Byte)*arr_el1.Length;
        Result := Marshal.AllocHGlobal(l);
        Marshal.Copy(arr_el1,0,Result,l);
      end);
      z_EdgeFlagPointerListIBM_ovr_0(stride, par_2_temp_arr1[0], ptrstride);
      foreach var arr_el1 in par_2_temp_arr1 do Marshal.FreeHGlobal(arr_el1);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure EdgeFlagPointerListIBM(stride: Int32; pointer: array of IntPtr; ptrstride: Int32);
    begin
      z_EdgeFlagPointerListIBM_ovr_0(stride, pointer[0], ptrstride);
    end;
    public z_EdgeFlagPointerListIBM_ovr_2 := GetFuncOrNil&<procedure(stride: Int32; pointer: IntPtr; ptrstride: Int32)>(z_EdgeFlagPointerListIBM_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure EdgeFlagPointerListIBM(stride: Int32; pointer: IntPtr; ptrstride: Int32);
    begin
      z_EdgeFlagPointerListIBM_ovr_2(stride, pointer, ptrstride);
    end;
    
    public z_FogCoordPointerListIBM_adr := GetFuncAdr('glFogCoordPointerListIBM');
    public z_FogCoordPointerListIBM_ovr_0 := GetFuncOrNil&<procedure(&type: FogPointerTypeIBM; stride: Int32; var _pointer: IntPtr; ptrstride: Int32)>(z_FogCoordPointerListIBM_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure FogCoordPointerListIBM(&type: FogPointerTypeIBM; stride: Int32; _pointer: array of IntPtr; ptrstride: Int32);
    begin
      z_FogCoordPointerListIBM_ovr_0(&type, stride, _pointer[0], ptrstride);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure FogCoordPointerListIBM(&type: FogPointerTypeIBM; stride: Int32; var _pointer: IntPtr; ptrstride: Int32);
    begin
      z_FogCoordPointerListIBM_ovr_0(&type, stride, _pointer, ptrstride);
    end;
    public z_FogCoordPointerListIBM_ovr_2 := GetFuncOrNil&<procedure(&type: FogPointerTypeIBM; stride: Int32; _pointer: pointer; ptrstride: Int32)>(z_FogCoordPointerListIBM_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure FogCoordPointerListIBM(&type: FogPointerTypeIBM; stride: Int32; _pointer: pointer; ptrstride: Int32);
    begin
      z_FogCoordPointerListIBM_ovr_2(&type, stride, _pointer, ptrstride);
    end;
    
    public z_IndexPointerListIBM_adr := GetFuncAdr('glIndexPointerListIBM');
    public z_IndexPointerListIBM_ovr_0 := GetFuncOrNil&<procedure(&type: IndexPointerType; stride: Int32; var _pointer: IntPtr; ptrstride: Int32)>(z_IndexPointerListIBM_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure IndexPointerListIBM(&type: IndexPointerType; stride: Int32; _pointer: array of IntPtr; ptrstride: Int32);
    begin
      z_IndexPointerListIBM_ovr_0(&type, stride, _pointer[0], ptrstride);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure IndexPointerListIBM(&type: IndexPointerType; stride: Int32; var _pointer: IntPtr; ptrstride: Int32);
    begin
      z_IndexPointerListIBM_ovr_0(&type, stride, _pointer, ptrstride);
    end;
    public z_IndexPointerListIBM_ovr_2 := GetFuncOrNil&<procedure(&type: IndexPointerType; stride: Int32; _pointer: pointer; ptrstride: Int32)>(z_IndexPointerListIBM_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure IndexPointerListIBM(&type: IndexPointerType; stride: Int32; _pointer: pointer; ptrstride: Int32);
    begin
      z_IndexPointerListIBM_ovr_2(&type, stride, _pointer, ptrstride);
    end;
    
    public z_NormalPointerListIBM_adr := GetFuncAdr('glNormalPointerListIBM');
    public z_NormalPointerListIBM_ovr_0 := GetFuncOrNil&<procedure(&type: NormalPointerType; stride: Int32; var _pointer: IntPtr; ptrstride: Int32)>(z_NormalPointerListIBM_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure NormalPointerListIBM(&type: NormalPointerType; stride: Int32; _pointer: array of IntPtr; ptrstride: Int32);
    begin
      z_NormalPointerListIBM_ovr_0(&type, stride, _pointer[0], ptrstride);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure NormalPointerListIBM(&type: NormalPointerType; stride: Int32; var _pointer: IntPtr; ptrstride: Int32);
    begin
      z_NormalPointerListIBM_ovr_0(&type, stride, _pointer, ptrstride);
    end;
    public z_NormalPointerListIBM_ovr_2 := GetFuncOrNil&<procedure(&type: NormalPointerType; stride: Int32; _pointer: pointer; ptrstride: Int32)>(z_NormalPointerListIBM_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure NormalPointerListIBM(&type: NormalPointerType; stride: Int32; _pointer: pointer; ptrstride: Int32);
    begin
      z_NormalPointerListIBM_ovr_2(&type, stride, _pointer, ptrstride);
    end;
    
    public z_TexCoordPointerListIBM_adr := GetFuncAdr('glTexCoordPointerListIBM');
    public z_TexCoordPointerListIBM_ovr_0 := GetFuncOrNil&<procedure(size: Int32; &type: TexCoordPointerType; stride: Int32; var _pointer: IntPtr; ptrstride: Int32)>(z_TexCoordPointerListIBM_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TexCoordPointerListIBM(size: Int32; &type: TexCoordPointerType; stride: Int32; _pointer: array of IntPtr; ptrstride: Int32);
    begin
      z_TexCoordPointerListIBM_ovr_0(size, &type, stride, _pointer[0], ptrstride);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TexCoordPointerListIBM(size: Int32; &type: TexCoordPointerType; stride: Int32; var _pointer: IntPtr; ptrstride: Int32);
    begin
      z_TexCoordPointerListIBM_ovr_0(size, &type, stride, _pointer, ptrstride);
    end;
    public z_TexCoordPointerListIBM_ovr_2 := GetFuncOrNil&<procedure(size: Int32; &type: TexCoordPointerType; stride: Int32; _pointer: pointer; ptrstride: Int32)>(z_TexCoordPointerListIBM_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TexCoordPointerListIBM(size: Int32; &type: TexCoordPointerType; stride: Int32; _pointer: pointer; ptrstride: Int32);
    begin
      z_TexCoordPointerListIBM_ovr_2(size, &type, stride, _pointer, ptrstride);
    end;
    
    public z_VertexPointerListIBM_adr := GetFuncAdr('glVertexPointerListIBM');
    public z_VertexPointerListIBM_ovr_0 := GetFuncOrNil&<procedure(size: Int32; &type: VertexPointerType; stride: Int32; var _pointer: IntPtr; ptrstride: Int32)>(z_VertexPointerListIBM_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexPointerListIBM(size: Int32; &type: VertexPointerType; stride: Int32; _pointer: array of IntPtr; ptrstride: Int32);
    begin
      z_VertexPointerListIBM_ovr_0(size, &type, stride, _pointer[0], ptrstride);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexPointerListIBM(size: Int32; &type: VertexPointerType; stride: Int32; var _pointer: IntPtr; ptrstride: Int32);
    begin
      z_VertexPointerListIBM_ovr_0(size, &type, stride, _pointer, ptrstride);
    end;
    public z_VertexPointerListIBM_ovr_2 := GetFuncOrNil&<procedure(size: Int32; &type: VertexPointerType; stride: Int32; _pointer: pointer; ptrstride: Int32)>(z_VertexPointerListIBM_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexPointerListIBM(size: Int32; &type: VertexPointerType; stride: Int32; _pointer: pointer; ptrstride: Int32);
    begin
      z_VertexPointerListIBM_ovr_2(size, &type, stride, _pointer, ptrstride);
    end;
    
  end;
  
  glBlendFuncSeparateINGR = sealed class
    public static function GetFuncAdr([MarshalAs(UnmanagedType.LPStr)] lpszProc: string): IntPtr;
    external 'opengl32.dll' name 'wglGetProcAddress';
    public static function GetFuncOrNil<T>(fadr: IntPtr) :=
    fadr=IntPtr.Zero ? default(T) :
    Marshal.GetDelegateForFunctionPointer&<T>(fadr);
    
    public z_BlendFuncSeparateINGR_adr := GetFuncAdr('glBlendFuncSeparateINGR');
    public z_BlendFuncSeparateINGR_ovr_0 := GetFuncOrNil&<procedure(sfactorRGB: BlendingFactor; dfactorRGB: BlendingFactor; sfactorAlpha: BlendingFactor; dfactorAlpha: BlendingFactor)>(z_BlendFuncSeparateINGR_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure BlendFuncSeparateINGR(sfactorRGB: BlendingFactor; dfactorRGB: BlendingFactor; sfactorAlpha: BlendingFactor; dfactorAlpha: BlendingFactor);
    begin
      z_BlendFuncSeparateINGR_ovr_0(sfactorRGB, dfactorRGB, sfactorAlpha, dfactorAlpha);
    end;
    
  end;
  
  glFramebufferCMAAINTEL = sealed class
    public static function GetFuncAdr([MarshalAs(UnmanagedType.LPStr)] lpszProc: string): IntPtr;
    external 'opengl32.dll' name 'wglGetProcAddress';
    public static function GetFuncOrNil<T>(fadr: IntPtr) :=
    fadr=IntPtr.Zero ? default(T) :
    Marshal.GetDelegateForFunctionPointer&<T>(fadr);
    
    public z_ApplyFramebufferAttachmentCMAAINTEL_adr := GetFuncAdr('glApplyFramebufferAttachmentCMAAINTEL');
    public z_ApplyFramebufferAttachmentCMAAINTEL_ovr_0 := GetFuncOrNil&<procedure>(z_ApplyFramebufferAttachmentCMAAINTEL_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ApplyFramebufferAttachmentCMAAINTEL;
    begin
      z_ApplyFramebufferAttachmentCMAAINTEL_ovr_0;
    end;
    
  end;
  
  glMapTextureINTEL = sealed class
    public static function GetFuncAdr([MarshalAs(UnmanagedType.LPStr)] lpszProc: string): IntPtr;
    external 'opengl32.dll' name 'wglGetProcAddress';
    public static function GetFuncOrNil<T>(fadr: IntPtr) :=
    fadr=IntPtr.Zero ? default(T) :
    Marshal.GetDelegateForFunctionPointer&<T>(fadr);
    
    public z_SyncTextureINTEL_adr := GetFuncAdr('glSyncTextureINTEL');
    public z_SyncTextureINTEL_ovr_0 := GetFuncOrNil&<procedure(texture: UInt32)>(z_SyncTextureINTEL_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure SyncTextureINTEL(texture: UInt32);
    begin
      z_SyncTextureINTEL_ovr_0(texture);
    end;
    
    public z_UnmapTexture2DINTEL_adr := GetFuncAdr('glUnmapTexture2DINTEL');
    public z_UnmapTexture2DINTEL_ovr_0 := GetFuncOrNil&<procedure(texture: UInt32; level: Int32)>(z_UnmapTexture2DINTEL_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure UnmapTexture2DINTEL(texture: UInt32; level: Int32);
    begin
      z_UnmapTexture2DINTEL_ovr_0(texture, level);
    end;
    
    public z_MapTexture2DINTEL_adr := GetFuncAdr('glMapTexture2DINTEL');
    public z_MapTexture2DINTEL_ovr_0 := GetFuncOrNil&<function(texture: UInt32; level: Int32; access: DummyFlags; var stride: Int32; var layout: DummyEnum): IntPtr>(z_MapTexture2DINTEL_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function MapTexture2DINTEL(texture: UInt32; level: Int32; access: DummyFlags; stride: array of Int32; layout: array of DummyEnum): IntPtr;
    begin
      Result := z_MapTexture2DINTEL_ovr_0(texture, level, access, stride[0], layout[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function MapTexture2DINTEL(texture: UInt32; level: Int32; access: DummyFlags; stride: array of Int32; var layout: DummyEnum): IntPtr;
    begin
      Result := z_MapTexture2DINTEL_ovr_0(texture, level, access, stride[0], layout);
    end;
    public z_MapTexture2DINTEL_ovr_2 := GetFuncOrNil&<function(texture: UInt32; level: Int32; access: DummyFlags; var stride: Int32; layout: IntPtr): IntPtr>(z_MapTexture2DINTEL_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function MapTexture2DINTEL(texture: UInt32; level: Int32; access: DummyFlags; stride: array of Int32; layout: IntPtr): IntPtr;
    begin
      Result := z_MapTexture2DINTEL_ovr_2(texture, level, access, stride[0], layout);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function MapTexture2DINTEL(texture: UInt32; level: Int32; access: DummyFlags; var stride: Int32; layout: array of DummyEnum): IntPtr;
    begin
      Result := z_MapTexture2DINTEL_ovr_0(texture, level, access, stride, layout[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function MapTexture2DINTEL(texture: UInt32; level: Int32; access: DummyFlags; var stride: Int32; var layout: DummyEnum): IntPtr;
    begin
      Result := z_MapTexture2DINTEL_ovr_0(texture, level, access, stride, layout);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function MapTexture2DINTEL(texture: UInt32; level: Int32; access: DummyFlags; var stride: Int32; layout: IntPtr): IntPtr;
    begin
      Result := z_MapTexture2DINTEL_ovr_2(texture, level, access, stride, layout);
    end;
    public z_MapTexture2DINTEL_ovr_6 := GetFuncOrNil&<function(texture: UInt32; level: Int32; access: DummyFlags; stride: IntPtr; var layout: DummyEnum): IntPtr>(z_MapTexture2DINTEL_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function MapTexture2DINTEL(texture: UInt32; level: Int32; access: DummyFlags; stride: IntPtr; layout: array of DummyEnum): IntPtr;
    begin
      Result := z_MapTexture2DINTEL_ovr_6(texture, level, access, stride, layout[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function MapTexture2DINTEL(texture: UInt32; level: Int32; access: DummyFlags; stride: IntPtr; var layout: DummyEnum): IntPtr;
    begin
      Result := z_MapTexture2DINTEL_ovr_6(texture, level, access, stride, layout);
    end;
    public z_MapTexture2DINTEL_ovr_8 := GetFuncOrNil&<function(texture: UInt32; level: Int32; access: DummyFlags; stride: IntPtr; layout: IntPtr): IntPtr>(z_MapTexture2DINTEL_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function MapTexture2DINTEL(texture: UInt32; level: Int32; access: DummyFlags; stride: IntPtr; layout: IntPtr): IntPtr;
    begin
      Result := z_MapTexture2DINTEL_ovr_8(texture, level, access, stride, layout);
    end;
    
  end;
  
  glParallelArraysINTEL = sealed class
    public static function GetFuncAdr([MarshalAs(UnmanagedType.LPStr)] lpszProc: string): IntPtr;
    external 'opengl32.dll' name 'wglGetProcAddress';
    public static function GetFuncOrNil<T>(fadr: IntPtr) :=
    fadr=IntPtr.Zero ? default(T) :
    Marshal.GetDelegateForFunctionPointer&<T>(fadr);
    
    public z_VertexPointervINTEL_adr := GetFuncAdr('glVertexPointervINTEL');
    public z_VertexPointervINTEL_ovr_0 := GetFuncOrNil&<procedure(size: Int32; &type: VertexPointerType; var _pointer: IntPtr)>(z_VertexPointervINTEL_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexPointervINTEL(size: Int32; &type: VertexPointerType; _pointer: array of IntPtr);
    begin
      z_VertexPointervINTEL_ovr_0(size, &type, _pointer[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexPointervINTEL(size: Int32; &type: VertexPointerType; var _pointer: IntPtr);
    begin
      z_VertexPointervINTEL_ovr_0(size, &type, _pointer);
    end;
    public z_VertexPointervINTEL_ovr_2 := GetFuncOrNil&<procedure(size: Int32; &type: VertexPointerType; _pointer: pointer)>(z_VertexPointervINTEL_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexPointervINTEL(size: Int32; &type: VertexPointerType; _pointer: pointer);
    begin
      z_VertexPointervINTEL_ovr_2(size, &type, _pointer);
    end;
    
    public z_NormalPointervINTEL_adr := GetFuncAdr('glNormalPointervINTEL');
    public z_NormalPointervINTEL_ovr_0 := GetFuncOrNil&<procedure(&type: NormalPointerType; var _pointer: IntPtr)>(z_NormalPointervINTEL_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure NormalPointervINTEL(&type: NormalPointerType; _pointer: array of IntPtr);
    begin
      z_NormalPointervINTEL_ovr_0(&type, _pointer[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure NormalPointervINTEL(&type: NormalPointerType; var _pointer: IntPtr);
    begin
      z_NormalPointervINTEL_ovr_0(&type, _pointer);
    end;
    public z_NormalPointervINTEL_ovr_2 := GetFuncOrNil&<procedure(&type: NormalPointerType; _pointer: pointer)>(z_NormalPointervINTEL_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure NormalPointervINTEL(&type: NormalPointerType; _pointer: pointer);
    begin
      z_NormalPointervINTEL_ovr_2(&type, _pointer);
    end;
    
    public z_ColorPointervINTEL_adr := GetFuncAdr('glColorPointervINTEL');
    public z_ColorPointervINTEL_ovr_0 := GetFuncOrNil&<procedure(size: Int32; &type: VertexPointerType; var _pointer: IntPtr)>(z_ColorPointervINTEL_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ColorPointervINTEL(size: Int32; &type: VertexPointerType; _pointer: array of IntPtr);
    begin
      z_ColorPointervINTEL_ovr_0(size, &type, _pointer[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ColorPointervINTEL(size: Int32; &type: VertexPointerType; var _pointer: IntPtr);
    begin
      z_ColorPointervINTEL_ovr_0(size, &type, _pointer);
    end;
    public z_ColorPointervINTEL_ovr_2 := GetFuncOrNil&<procedure(size: Int32; &type: VertexPointerType; _pointer: pointer)>(z_ColorPointervINTEL_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ColorPointervINTEL(size: Int32; &type: VertexPointerType; _pointer: pointer);
    begin
      z_ColorPointervINTEL_ovr_2(size, &type, _pointer);
    end;
    
    public z_TexCoordPointervINTEL_adr := GetFuncAdr('glTexCoordPointervINTEL');
    public z_TexCoordPointervINTEL_ovr_0 := GetFuncOrNil&<procedure(size: Int32; &type: VertexPointerType; var _pointer: IntPtr)>(z_TexCoordPointervINTEL_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TexCoordPointervINTEL(size: Int32; &type: VertexPointerType; _pointer: array of IntPtr);
    begin
      z_TexCoordPointervINTEL_ovr_0(size, &type, _pointer[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TexCoordPointervINTEL(size: Int32; &type: VertexPointerType; var _pointer: IntPtr);
    begin
      z_TexCoordPointervINTEL_ovr_0(size, &type, _pointer);
    end;
    public z_TexCoordPointervINTEL_ovr_2 := GetFuncOrNil&<procedure(size: Int32; &type: VertexPointerType; _pointer: pointer)>(z_TexCoordPointervINTEL_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TexCoordPointervINTEL(size: Int32; &type: VertexPointerType; _pointer: pointer);
    begin
      z_TexCoordPointervINTEL_ovr_2(size, &type, _pointer);
    end;
    
  end;
  
  glPerformanceQueryINTEL = sealed class
    public static function GetFuncAdr([MarshalAs(UnmanagedType.LPStr)] lpszProc: string): IntPtr;
    external 'opengl32.dll' name 'wglGetProcAddress';
    public static function GetFuncOrNil<T>(fadr: IntPtr) :=
    fadr=IntPtr.Zero ? default(T) :
    Marshal.GetDelegateForFunctionPointer&<T>(fadr);
    
    public z_BeginPerfQueryINTEL_adr := GetFuncAdr('glBeginPerfQueryINTEL');
    public z_BeginPerfQueryINTEL_ovr_0 := GetFuncOrNil&<procedure(queryHandle: PerfQueryHandleINTEL)>(z_BeginPerfQueryINTEL_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure BeginPerfQueryINTEL(queryHandle: PerfQueryHandleINTEL);
    begin
      z_BeginPerfQueryINTEL_ovr_0(queryHandle);
    end;
    
    public z_CreatePerfQueryINTEL_adr := GetFuncAdr('glCreatePerfQueryINTEL');
    public z_CreatePerfQueryINTEL_ovr_0 := GetFuncOrNil&<procedure(queryId: PerfQueryIdINTEL; var queryHandle: PerfQueryHandleINTEL)>(z_CreatePerfQueryINTEL_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure CreatePerfQueryINTEL(queryId: PerfQueryIdINTEL; var queryHandle: PerfQueryHandleINTEL);
    begin
      z_CreatePerfQueryINTEL_ovr_0(queryId, queryHandle);
    end;
    public z_CreatePerfQueryINTEL_ovr_1 := GetFuncOrNil&<procedure(queryId: PerfQueryIdINTEL; queryHandle: IntPtr)>(z_CreatePerfQueryINTEL_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure CreatePerfQueryINTEL(queryId: PerfQueryIdINTEL; queryHandle: IntPtr);
    begin
      z_CreatePerfQueryINTEL_ovr_1(queryId, queryHandle);
    end;
    
    public z_DeletePerfQueryINTEL_adr := GetFuncAdr('glDeletePerfQueryINTEL');
    public z_DeletePerfQueryINTEL_ovr_0 := GetFuncOrNil&<procedure(queryHandle: PerfQueryHandleINTEL)>(z_DeletePerfQueryINTEL_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure DeletePerfQueryINTEL(queryHandle: PerfQueryHandleINTEL);
    begin
      z_DeletePerfQueryINTEL_ovr_0(queryHandle);
    end;
    
    public z_EndPerfQueryINTEL_adr := GetFuncAdr('glEndPerfQueryINTEL');
    public z_EndPerfQueryINTEL_ovr_0 := GetFuncOrNil&<procedure(queryHandle: PerfQueryHandleINTEL)>(z_EndPerfQueryINTEL_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure EndPerfQueryINTEL(queryHandle: PerfQueryHandleINTEL);
    begin
      z_EndPerfQueryINTEL_ovr_0(queryHandle);
    end;
    
    public z_GetFirstPerfQueryIdINTEL_adr := GetFuncAdr('glGetFirstPerfQueryIdINTEL');
    public z_GetFirstPerfQueryIdINTEL_ovr_0 := GetFuncOrNil&<procedure(var queryId: PerfQueryIdINTEL)>(z_GetFirstPerfQueryIdINTEL_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetFirstPerfQueryIdINTEL(var queryId: PerfQueryIdINTEL);
    begin
      z_GetFirstPerfQueryIdINTEL_ovr_0(queryId);
    end;
    public z_GetFirstPerfQueryIdINTEL_ovr_1 := GetFuncOrNil&<procedure(queryId: IntPtr)>(z_GetFirstPerfQueryIdINTEL_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetFirstPerfQueryIdINTEL(queryId: IntPtr);
    begin
      z_GetFirstPerfQueryIdINTEL_ovr_1(queryId);
    end;
    
    public z_GetNextPerfQueryIdINTEL_adr := GetFuncAdr('glGetNextPerfQueryIdINTEL');
    public z_GetNextPerfQueryIdINTEL_ovr_0 := GetFuncOrNil&<procedure(queryId: PerfQueryIdINTEL; nextQueryId: PerfQueryIdINTEL)>(z_GetNextPerfQueryIdINTEL_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetNextPerfQueryIdINTEL(queryId: PerfQueryIdINTEL; nextQueryId: PerfQueryIdINTEL);
    begin
      z_GetNextPerfQueryIdINTEL_ovr_0(queryId, nextQueryId);
    end;
    public z_GetNextPerfQueryIdINTEL_ovr_1 := GetFuncOrNil&<procedure(queryId: PerfQueryIdINTEL; nextQueryId: IntPtr)>(z_GetNextPerfQueryIdINTEL_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetNextPerfQueryIdINTEL(queryId: PerfQueryIdINTEL; nextQueryId: IntPtr);
    begin
      z_GetNextPerfQueryIdINTEL_ovr_1(queryId, nextQueryId);
    end;
    
    public z_GetPerfCounterInfoINTEL_adr := GetFuncAdr('glGetPerfCounterInfoINTEL');
    public z_GetPerfCounterInfoINTEL_ovr_0 := GetFuncOrNil&<procedure(queryId: PerfQueryIdINTEL; counterId: UInt32; counterNameLength: UInt32; counterName: IntPtr; counterDescLength: UInt32; counterDesc: IntPtr; var counterOffset: UInt32; var counterDataSize: UInt32; var counterTypeEnum: UInt32; var counterDataTypeEnum: UInt32; var rawCounterMaxValue: UInt64)>(z_GetPerfCounterInfoINTEL_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetPerfCounterInfoINTEL(queryId: PerfQueryIdINTEL; counterId: UInt32; counterNameLength: UInt32; counterName: IntPtr; counterDescLength: UInt32; counterDesc: IntPtr; var counterOffset: UInt32; var counterDataSize: UInt32; var counterTypeEnum: UInt32; var counterDataTypeEnum: UInt32; var rawCounterMaxValue: UInt64);
    begin
      z_GetPerfCounterInfoINTEL_ovr_0(queryId, counterId, counterNameLength, counterName, counterDescLength, counterDesc, counterOffset, counterDataSize, counterTypeEnum, counterDataTypeEnum, rawCounterMaxValue);
    end;
    public z_GetPerfCounterInfoINTEL_ovr_1 := GetFuncOrNil&<procedure(queryId: PerfQueryIdINTEL; counterId: UInt32; counterNameLength: UInt32; counterName: IntPtr; counterDescLength: UInt32; counterDesc: IntPtr; counterOffset: IntPtr; counterDataSize: IntPtr; counterTypeEnum: IntPtr; counterDataTypeEnum: IntPtr; rawCounterMaxValue: IntPtr)>(z_GetPerfCounterInfoINTEL_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetPerfCounterInfoINTEL(queryId: PerfQueryIdINTEL; counterId: UInt32; counterNameLength: UInt32; counterName: IntPtr; counterDescLength: UInt32; counterDesc: IntPtr; counterOffset: IntPtr; counterDataSize: IntPtr; counterTypeEnum: IntPtr; counterDataTypeEnum: IntPtr; rawCounterMaxValue: IntPtr);
    begin
      z_GetPerfCounterInfoINTEL_ovr_1(queryId, counterId, counterNameLength, counterName, counterDescLength, counterDesc, counterOffset, counterDataSize, counterTypeEnum, counterDataTypeEnum, rawCounterMaxValue);
    end;
    
    public z_GetPerfQueryDataINTEL_adr := GetFuncAdr('glGetPerfQueryDataINTEL');
    public z_GetPerfQueryDataINTEL_ovr_0 := GetFuncOrNil&<procedure(queryHandle: PerfQueryHandleINTEL; flags: PerfQueryDataFlagsINTEL; dataSize: Int32; data: IntPtr; var bytesWritten: UInt32)>(z_GetPerfQueryDataINTEL_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetPerfQueryDataINTEL(queryHandle: PerfQueryHandleINTEL; flags: PerfQueryDataFlagsINTEL; dataSize: Int32; data: IntPtr; var bytesWritten: UInt32);
    begin
      z_GetPerfQueryDataINTEL_ovr_0(queryHandle, flags, dataSize, data, bytesWritten);
    end;
    public z_GetPerfQueryDataINTEL_ovr_1 := GetFuncOrNil&<procedure(queryHandle: PerfQueryHandleINTEL; flags: PerfQueryDataFlagsINTEL; dataSize: Int32; data: IntPtr; bytesWritten: IntPtr)>(z_GetPerfQueryDataINTEL_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetPerfQueryDataINTEL(queryHandle: PerfQueryHandleINTEL; flags: PerfQueryDataFlagsINTEL; dataSize: Int32; data: IntPtr; bytesWritten: IntPtr);
    begin
      z_GetPerfQueryDataINTEL_ovr_1(queryHandle, flags, dataSize, data, bytesWritten);
    end;
    
    public z_GetPerfQueryIdByNameINTEL_adr := GetFuncAdr('glGetPerfQueryIdByNameINTEL');
    public z_GetPerfQueryIdByNameINTEL_ovr_0 := GetFuncOrNil&<procedure(queryName: IntPtr; var queryId: PerfQueryIdINTEL)>(z_GetPerfQueryIdByNameINTEL_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetPerfQueryIdByNameINTEL(queryName: string; var queryId: PerfQueryIdINTEL);
    begin
      var par_1_str_ptr := Marshal.StringToHGlobalAnsi(queryName);
      z_GetPerfQueryIdByNameINTEL_ovr_0(par_1_str_ptr, queryId);
      Marshal.FreeHGlobal(par_1_str_ptr);
    end;
    public z_GetPerfQueryIdByNameINTEL_ovr_1 := GetFuncOrNil&<procedure(queryName: IntPtr; queryId: IntPtr)>(z_GetPerfQueryIdByNameINTEL_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetPerfQueryIdByNameINTEL(queryName: string; queryId: IntPtr);
    begin
      var par_1_str_ptr := Marshal.StringToHGlobalAnsi(queryName);
      z_GetPerfQueryIdByNameINTEL_ovr_1(par_1_str_ptr, queryId);
      Marshal.FreeHGlobal(par_1_str_ptr);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetPerfQueryIdByNameINTEL(queryName: IntPtr; var queryId: PerfQueryIdINTEL);
    begin
      z_GetPerfQueryIdByNameINTEL_ovr_0(queryName, queryId);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetPerfQueryIdByNameINTEL(queryName: IntPtr; queryId: IntPtr);
    begin
      z_GetPerfQueryIdByNameINTEL_ovr_1(queryName, queryId);
    end;
    
    public z_GetPerfQueryInfoINTEL_adr := GetFuncAdr('glGetPerfQueryInfoINTEL');
    public z_GetPerfQueryInfoINTEL_ovr_0 := GetFuncOrNil&<procedure(queryId: PerfQueryIdINTEL; queryNameLength: UInt32; queryName: IntPtr; var dataSize: UInt32; var noCounters: UInt32; var noInstances: UInt32; var capsMask: PerfQueryCapFlagsINTEL)>(z_GetPerfQueryInfoINTEL_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetPerfQueryInfoINTEL(queryId: PerfQueryIdINTEL; queryNameLength: UInt32; queryName: IntPtr; var dataSize: UInt32; var noCounters: UInt32; var noInstances: UInt32; var capsMask: PerfQueryCapFlagsINTEL);
    begin
      z_GetPerfQueryInfoINTEL_ovr_0(queryId, queryNameLength, queryName, dataSize, noCounters, noInstances, capsMask);
    end;
    public z_GetPerfQueryInfoINTEL_ovr_1 := GetFuncOrNil&<procedure(queryId: PerfQueryIdINTEL; queryNameLength: UInt32; queryName: IntPtr; dataSize: IntPtr; noCounters: IntPtr; noInstances: IntPtr; var capsMask: PerfQueryCapFlagsINTEL)>(z_GetPerfQueryInfoINTEL_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetPerfQueryInfoINTEL(queryId: PerfQueryIdINTEL; queryNameLength: UInt32; queryName: IntPtr; dataSize: IntPtr; noCounters: IntPtr; noInstances: IntPtr; var capsMask: PerfQueryCapFlagsINTEL);
    begin
      z_GetPerfQueryInfoINTEL_ovr_1(queryId, queryNameLength, queryName, dataSize, noCounters, noInstances, capsMask);
    end;
    
  end;
  
  glBlendEquationAdvancedKHR = sealed class
    public static function GetFuncAdr([MarshalAs(UnmanagedType.LPStr)] lpszProc: string): IntPtr;
    external 'opengl32.dll' name 'wglGetProcAddress';
    public static function GetFuncOrNil<T>(fadr: IntPtr) :=
    fadr=IntPtr.Zero ? default(T) :
    Marshal.GetDelegateForFunctionPointer&<T>(fadr);
    
    public z_BlendBarrierKHR_adr := GetFuncAdr('glBlendBarrierKHR');
    public z_BlendBarrierKHR_ovr_0 := GetFuncOrNil&<procedure>(z_BlendBarrierKHR_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure BlendBarrierKHR;
    begin
      z_BlendBarrierKHR_ovr_0;
    end;
    
  end;
  
  glDebugKHR = sealed class
    public static function GetFuncAdr([MarshalAs(UnmanagedType.LPStr)] lpszProc: string): IntPtr;
    external 'opengl32.dll' name 'wglGetProcAddress';
    public static function GetFuncOrNil<T>(fadr: IntPtr) :=
    fadr=IntPtr.Zero ? default(T) :
    Marshal.GetDelegateForFunctionPointer&<T>(fadr);
    
    public z_DebugMessageControl_adr := GetFuncAdr('glDebugMessageControl');
    public z_DebugMessageControl_ovr_0 := GetFuncOrNil&<procedure(source: DebugSource; &type: DebugType; severity: DebugSeverity; count: Int32; var ids: UInt32; enabled: boolean)>(z_DebugMessageControl_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure DebugMessageControl(source: DebugSource; &type: DebugType; severity: DebugSeverity; count: Int32; ids: array of UInt32; enabled: boolean);
    begin
      z_DebugMessageControl_ovr_0(source, &type, severity, count, ids[0], enabled);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure DebugMessageControl(source: DebugSource; &type: DebugType; severity: DebugSeverity; count: Int32; var ids: UInt32; enabled: boolean);
    begin
      z_DebugMessageControl_ovr_0(source, &type, severity, count, ids, enabled);
    end;
    public z_DebugMessageControl_ovr_2 := GetFuncOrNil&<procedure(source: DebugSource; &type: DebugType; severity: DebugSeverity; count: Int32; ids: IntPtr; enabled: boolean)>(z_DebugMessageControl_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure DebugMessageControl(source: DebugSource; &type: DebugType; severity: DebugSeverity; count: Int32; ids: IntPtr; enabled: boolean);
    begin
      z_DebugMessageControl_ovr_2(source, &type, severity, count, ids, enabled);
    end;
    
    public z_DebugMessageInsert_adr := GetFuncAdr('glDebugMessageInsert');
    public z_DebugMessageInsert_ovr_0 := GetFuncOrNil&<procedure(source: DebugSource; &type: DebugType; id: UInt32; severity: DebugSeverity; length: Int32; buf: IntPtr)>(z_DebugMessageInsert_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure DebugMessageInsert(source: DebugSource; &type: DebugType; id: UInt32; severity: DebugSeverity; length: Int32; buf: string);
    begin
      var par_6_str_ptr := Marshal.StringToHGlobalAnsi(buf);
      z_DebugMessageInsert_ovr_0(source, &type, id, severity, length, par_6_str_ptr);
      Marshal.FreeHGlobal(par_6_str_ptr);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure DebugMessageInsert(source: DebugSource; &type: DebugType; id: UInt32; severity: DebugSeverity; length: Int32; buf: IntPtr);
    begin
      z_DebugMessageInsert_ovr_0(source, &type, id, severity, length, buf);
    end;
    
    public z_DebugMessageCallback_adr := GetFuncAdr('glDebugMessageCallback');
    public z_DebugMessageCallback_ovr_0 := GetFuncOrNil&<procedure(callback: GLDEBUGPROC; userParam: IntPtr)>(z_DebugMessageCallback_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure DebugMessageCallback(callback: GLDEBUGPROC; userParam: IntPtr);
    begin
      z_DebugMessageCallback_ovr_0(callback, userParam);
    end;
    
    public z_GetDebugMessageLog_adr := GetFuncAdr('glGetDebugMessageLog');
    public z_GetDebugMessageLog_ovr_0 := GetFuncOrNil&<function(count: UInt32; bufSize: Int32; var sources: DebugSource; var types: DebugType; var ids: UInt32; var severities: DebugSeverity; var lengths: Int32; messageLog: IntPtr): UInt32>(z_GetDebugMessageLog_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetDebugMessageLog(count: UInt32; bufSize: Int32; var sources: DebugSource; var types: DebugType; var ids: UInt32; var severities: DebugSeverity; var lengths: Int32; messageLog: IntPtr): UInt32;
    begin
      Result := z_GetDebugMessageLog_ovr_0(count, bufSize, sources, types, ids, severities, lengths, messageLog);
    end;
    public z_GetDebugMessageLog_ovr_1 := GetFuncOrNil&<function(count: UInt32; bufSize: Int32; sources: IntPtr; types: IntPtr; ids: IntPtr; severities: IntPtr; lengths: IntPtr; messageLog: IntPtr): UInt32>(z_GetDebugMessageLog_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetDebugMessageLog(count: UInt32; bufSize: Int32; sources: IntPtr; types: IntPtr; ids: IntPtr; severities: IntPtr; lengths: IntPtr; messageLog: IntPtr): UInt32;
    begin
      Result := z_GetDebugMessageLog_ovr_1(count, bufSize, sources, types, ids, severities, lengths, messageLog);
    end;
    
    public z_PushDebugGroup_adr := GetFuncAdr('glPushDebugGroup');
    public z_PushDebugGroup_ovr_0 := GetFuncOrNil&<procedure(source: DebugSource; id: UInt32; length: Int32; message: IntPtr)>(z_PushDebugGroup_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure PushDebugGroup(source: DebugSource; id: UInt32; length: Int32; message: string);
    begin
      var par_4_str_ptr := Marshal.StringToHGlobalAnsi(message);
      z_PushDebugGroup_ovr_0(source, id, length, par_4_str_ptr);
      Marshal.FreeHGlobal(par_4_str_ptr);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure PushDebugGroup(source: DebugSource; id: UInt32; length: Int32; message: IntPtr);
    begin
      z_PushDebugGroup_ovr_0(source, id, length, message);
    end;
    
    public z_PopDebugGroup_adr := GetFuncAdr('glPopDebugGroup');
    public z_PopDebugGroup_ovr_0 := GetFuncOrNil&<procedure>(z_PopDebugGroup_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure PopDebugGroup;
    begin
      z_PopDebugGroup_ovr_0;
    end;
    
    public z_ObjectLabel_adr := GetFuncAdr('glObjectLabel');
    public z_ObjectLabel_ovr_0 := GetFuncOrNil&<procedure(identifier: ObjectIdentifier; name: UInt32; length: Int32; &label: IntPtr)>(z_ObjectLabel_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ObjectLabel(identifier: ObjectIdentifier; name: UInt32; length: Int32; &label: string);
    begin
      var par_4_str_ptr := Marshal.StringToHGlobalAnsi(&label);
      z_ObjectLabel_ovr_0(identifier, name, length, par_4_str_ptr);
      Marshal.FreeHGlobal(par_4_str_ptr);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ObjectLabel(identifier: ObjectIdentifier; name: UInt32; length: Int32; &label: IntPtr);
    begin
      z_ObjectLabel_ovr_0(identifier, name, length, &label);
    end;
    
    public z_GetObjectLabel_adr := GetFuncAdr('glGetObjectLabel');
    public z_GetObjectLabel_ovr_0 := GetFuncOrNil&<procedure(identifier: ObjectIdentifier; name: UInt32; bufSize: Int32; var length: Int32; &label: IntPtr)>(z_GetObjectLabel_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetObjectLabel(identifier: ObjectIdentifier; name: UInt32; bufSize: Int32; length: array of Int32; &label: IntPtr);
    begin
      z_GetObjectLabel_ovr_0(identifier, name, bufSize, length[0], &label);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetObjectLabel(identifier: ObjectIdentifier; name: UInt32; bufSize: Int32; var length: Int32; &label: IntPtr);
    begin
      z_GetObjectLabel_ovr_0(identifier, name, bufSize, length, &label);
    end;
    public z_GetObjectLabel_ovr_2 := GetFuncOrNil&<procedure(identifier: ObjectIdentifier; name: UInt32; bufSize: Int32; length: IntPtr; &label: IntPtr)>(z_GetObjectLabel_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetObjectLabel(identifier: ObjectIdentifier; name: UInt32; bufSize: Int32; length: IntPtr; &label: IntPtr);
    begin
      z_GetObjectLabel_ovr_2(identifier, name, bufSize, length, &label);
    end;
    
    public z_ObjectPtrLabel_adr := GetFuncAdr('glObjectPtrLabel');
    public z_ObjectPtrLabel_ovr_0 := GetFuncOrNil&<procedure(ptr: IntPtr; length: Int32; &label: IntPtr)>(z_ObjectPtrLabel_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ObjectPtrLabel(ptr: IntPtr; length: Int32; &label: string);
    begin
      var par_3_str_ptr := Marshal.StringToHGlobalAnsi(&label);
      z_ObjectPtrLabel_ovr_0(ptr, length, par_3_str_ptr);
      Marshal.FreeHGlobal(par_3_str_ptr);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ObjectPtrLabel(ptr: IntPtr; length: Int32; &label: IntPtr);
    begin
      z_ObjectPtrLabel_ovr_0(ptr, length, &label);
    end;
    
    public z_GetObjectPtrLabel_adr := GetFuncAdr('glGetObjectPtrLabel');
    public z_GetObjectPtrLabel_ovr_0 := GetFuncOrNil&<procedure(ptr: IntPtr; bufSize: Int32; var length: Int32; &label: IntPtr)>(z_GetObjectPtrLabel_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetObjectPtrLabel(ptr: IntPtr; bufSize: Int32; length: array of Int32; &label: IntPtr);
    begin
      z_GetObjectPtrLabel_ovr_0(ptr, bufSize, length[0], &label);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetObjectPtrLabel(ptr: IntPtr; bufSize: Int32; var length: Int32; &label: IntPtr);
    begin
      z_GetObjectPtrLabel_ovr_0(ptr, bufSize, length, &label);
    end;
    public z_GetObjectPtrLabel_ovr_2 := GetFuncOrNil&<procedure(ptr: IntPtr; bufSize: Int32; length: IntPtr; &label: IntPtr)>(z_GetObjectPtrLabel_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetObjectPtrLabel(ptr: IntPtr; bufSize: Int32; length: IntPtr; &label: IntPtr);
    begin
      z_GetObjectPtrLabel_ovr_2(ptr, bufSize, length, &label);
    end;
    
    public z_GetPointerv_adr := GetFuncAdr('glGetPointerv');
    public z_GetPointerv_ovr_0 := GetFuncOrNil&<procedure(pname: GetPointervPName; var &params: IntPtr)>(z_GetPointerv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetPointerv(pname: GetPointervPName; &params: array of IntPtr);
    begin
      z_GetPointerv_ovr_0(pname, &params[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetPointerv(pname: GetPointervPName; var &params: IntPtr);
    begin
      z_GetPointerv_ovr_0(pname, &params);
    end;
    public z_GetPointerv_ovr_2 := GetFuncOrNil&<procedure(pname: GetPointervPName; &params: pointer)>(z_GetPointerv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetPointerv(pname: GetPointervPName; &params: pointer);
    begin
      z_GetPointerv_ovr_2(pname, &params);
    end;
    
  end;
  
  glRobustnessKHR = sealed class
    public static function GetFuncAdr([MarshalAs(UnmanagedType.LPStr)] lpszProc: string): IntPtr;
    external 'opengl32.dll' name 'wglGetProcAddress';
    public static function GetFuncOrNil<T>(fadr: IntPtr) :=
    fadr=IntPtr.Zero ? default(T) :
    Marshal.GetDelegateForFunctionPointer&<T>(fadr);
    
    public z_GetGraphicsResetStatus_adr := GetFuncAdr('glGetGraphicsResetStatus');
    public z_GetGraphicsResetStatus_ovr_0 := GetFuncOrNil&<function: GraphicsResetStatus>(z_GetGraphicsResetStatus_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetGraphicsResetStatus: GraphicsResetStatus;
    begin
      Result := z_GetGraphicsResetStatus_ovr_0;
    end;
    
    public z_ReadnPixels_adr := GetFuncAdr('glReadnPixels');
    public z_ReadnPixels_ovr_0 := GetFuncOrNil&<procedure(x: Int32; y: Int32; width: Int32; height: Int32; format: PixelFormat; &type: PixelType; bufSize: Int32; data: IntPtr)>(z_ReadnPixels_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ReadnPixels(x: Int32; y: Int32; width: Int32; height: Int32; format: PixelFormat; &type: PixelType; bufSize: Int32; data: IntPtr);
    begin
      z_ReadnPixels_ovr_0(x, y, width, height, format, &type, bufSize, data);
    end;
    
    public z_GetnUniformfv_adr := GetFuncAdr('glGetnUniformfv');
    public z_GetnUniformfv_ovr_0 := GetFuncOrNil&<procedure(&program: ProgramName; location: Int32; bufSize: Int32; var &params: single)>(z_GetnUniformfv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetnUniformfv(&program: ProgramName; location: Int32; bufSize: Int32; &params: array of single);
    begin
      z_GetnUniformfv_ovr_0(&program, location, bufSize, &params[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetnUniformfv(&program: ProgramName; location: Int32; bufSize: Int32; var &params: single);
    begin
      z_GetnUniformfv_ovr_0(&program, location, bufSize, &params);
    end;
    public z_GetnUniformfv_ovr_2 := GetFuncOrNil&<procedure(&program: ProgramName; location: Int32; bufSize: Int32; &params: IntPtr)>(z_GetnUniformfv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetnUniformfv(&program: ProgramName; location: Int32; bufSize: Int32; &params: IntPtr);
    begin
      z_GetnUniformfv_ovr_2(&program, location, bufSize, &params);
    end;
    
    public z_GetnUniformiv_adr := GetFuncAdr('glGetnUniformiv');
    public z_GetnUniformiv_ovr_0 := GetFuncOrNil&<procedure(&program: ProgramName; location: Int32; bufSize: Int32; var &params: Int32)>(z_GetnUniformiv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetnUniformiv(&program: ProgramName; location: Int32; bufSize: Int32; &params: array of Int32);
    begin
      z_GetnUniformiv_ovr_0(&program, location, bufSize, &params[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetnUniformiv(&program: ProgramName; location: Int32; bufSize: Int32; var &params: Int32);
    begin
      z_GetnUniformiv_ovr_0(&program, location, bufSize, &params);
    end;
    public z_GetnUniformiv_ovr_2 := GetFuncOrNil&<procedure(&program: ProgramName; location: Int32; bufSize: Int32; &params: IntPtr)>(z_GetnUniformiv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetnUniformiv(&program: ProgramName; location: Int32; bufSize: Int32; &params: IntPtr);
    begin
      z_GetnUniformiv_ovr_2(&program, location, bufSize, &params);
    end;
    
    public z_GetnUniformuiv_adr := GetFuncAdr('glGetnUniformuiv');
    public z_GetnUniformuiv_ovr_0 := GetFuncOrNil&<procedure(&program: ProgramName; location: Int32; bufSize: Int32; var &params: UInt32)>(z_GetnUniformuiv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetnUniformuiv(&program: ProgramName; location: Int32; bufSize: Int32; &params: array of UInt32);
    begin
      z_GetnUniformuiv_ovr_0(&program, location, bufSize, &params[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetnUniformuiv(&program: ProgramName; location: Int32; bufSize: Int32; var &params: UInt32);
    begin
      z_GetnUniformuiv_ovr_0(&program, location, bufSize, &params);
    end;
    public z_GetnUniformuiv_ovr_2 := GetFuncOrNil&<procedure(&program: ProgramName; location: Int32; bufSize: Int32; &params: IntPtr)>(z_GetnUniformuiv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetnUniformuiv(&program: ProgramName; location: Int32; bufSize: Int32; &params: IntPtr);
    begin
      z_GetnUniformuiv_ovr_2(&program, location, bufSize, &params);
    end;
    
  end;
  
  glParallelShaderCompileKHR = sealed class
    public static function GetFuncAdr([MarshalAs(UnmanagedType.LPStr)] lpszProc: string): IntPtr;
    external 'opengl32.dll' name 'wglGetProcAddress';
    public static function GetFuncOrNil<T>(fadr: IntPtr) :=
    fadr=IntPtr.Zero ? default(T) :
    Marshal.GetDelegateForFunctionPointer&<T>(fadr);
    
    public z_MaxShaderCompilerThreadsKHR_adr := GetFuncAdr('glMaxShaderCompilerThreadsKHR');
    public z_MaxShaderCompilerThreadsKHR_ovr_0 := GetFuncOrNil&<procedure(count: UInt32)>(z_MaxShaderCompilerThreadsKHR_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MaxShaderCompilerThreadsKHR(count: UInt32);
    begin
      z_MaxShaderCompilerThreadsKHR_ovr_0(count);
    end;
    
  end;
  
  glFramebufferFlipYMESA = sealed class
    public static function GetFuncAdr([MarshalAs(UnmanagedType.LPStr)] lpszProc: string): IntPtr;
    external 'opengl32.dll' name 'wglGetProcAddress';
    public static function GetFuncOrNil<T>(fadr: IntPtr) :=
    fadr=IntPtr.Zero ? default(T) :
    Marshal.GetDelegateForFunctionPointer&<T>(fadr);
    
    public z_FramebufferParameteriMESA_adr := GetFuncAdr('glFramebufferParameteriMESA');
    public z_FramebufferParameteriMESA_ovr_0 := GetFuncOrNil&<procedure(target: FramebufferTarget; pname: FramebufferParameterName; param: Int32)>(z_FramebufferParameteriMESA_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure FramebufferParameteriMESA(target: FramebufferTarget; pname: FramebufferParameterName; param: Int32);
    begin
      z_FramebufferParameteriMESA_ovr_0(target, pname, param);
    end;
    
    public z_GetFramebufferParameterivMESA_adr := GetFuncAdr('glGetFramebufferParameterivMESA');
    public z_GetFramebufferParameterivMESA_ovr_0 := GetFuncOrNil&<procedure(target: FramebufferTarget; pname: FramebufferAttachmentParameterName; var &params: Int32)>(z_GetFramebufferParameterivMESA_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetFramebufferParameterivMESA(target: FramebufferTarget; pname: FramebufferAttachmentParameterName; &params: array of Int32);
    begin
      z_GetFramebufferParameterivMESA_ovr_0(target, pname, &params[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetFramebufferParameterivMESA(target: FramebufferTarget; pname: FramebufferAttachmentParameterName; var &params: Int32);
    begin
      z_GetFramebufferParameterivMESA_ovr_0(target, pname, &params);
    end;
    public z_GetFramebufferParameterivMESA_ovr_2 := GetFuncOrNil&<procedure(target: FramebufferTarget; pname: FramebufferAttachmentParameterName; &params: IntPtr)>(z_GetFramebufferParameterivMESA_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetFramebufferParameterivMESA(target: FramebufferTarget; pname: FramebufferAttachmentParameterName; &params: IntPtr);
    begin
      z_GetFramebufferParameterivMESA_ovr_2(target, pname, &params);
    end;
    
  end;
  
  glResizeBuffersMESA = sealed class
    public static function GetFuncAdr([MarshalAs(UnmanagedType.LPStr)] lpszProc: string): IntPtr;
    external 'opengl32.dll' name 'wglGetProcAddress';
    public static function GetFuncOrNil<T>(fadr: IntPtr) :=
    fadr=IntPtr.Zero ? default(T) :
    Marshal.GetDelegateForFunctionPointer&<T>(fadr);
    
    public z_ResizeBuffersMESA_adr := GetFuncAdr('glResizeBuffersMESA');
    public z_ResizeBuffersMESA_ovr_0 := GetFuncOrNil&<procedure>(z_ResizeBuffersMESA_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ResizeBuffersMESA;
    begin
      z_ResizeBuffersMESA_ovr_0;
    end;
    
  end;
  
  glWindowPosMESA = sealed class
    public static function GetFuncAdr([MarshalAs(UnmanagedType.LPStr)] lpszProc: string): IntPtr;
    external 'opengl32.dll' name 'wglGetProcAddress';
    public static function GetFuncOrNil<T>(fadr: IntPtr) :=
    fadr=IntPtr.Zero ? default(T) :
    Marshal.GetDelegateForFunctionPointer&<T>(fadr);
    
    public z_WindowPos2dMESA_adr := GetFuncAdr('glWindowPos2dMESA');
    public z_WindowPos2dMESA_ovr_0 := GetFuncOrNil&<procedure(x: real; y: real)>(z_WindowPos2dMESA_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure WindowPos2dMESA(x: real; y: real);
    begin
      z_WindowPos2dMESA_ovr_0(x, y);
    end;
    
    public z_WindowPos2dvMESA_adr := GetFuncAdr('glWindowPos2dvMESA');
    public z_WindowPos2dvMESA_ovr_0 := GetFuncOrNil&<procedure(var v: real)>(z_WindowPos2dvMESA_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure WindowPos2dvMESA(v: array of real);
    begin
      z_WindowPos2dvMESA_ovr_0(v[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure WindowPos2dvMESA(var v: real);
    begin
      z_WindowPos2dvMESA_ovr_0(v);
    end;
    public z_WindowPos2dvMESA_ovr_2 := GetFuncOrNil&<procedure(v: IntPtr)>(z_WindowPos2dvMESA_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure WindowPos2dvMESA(v: IntPtr);
    begin
      z_WindowPos2dvMESA_ovr_2(v);
    end;
    
    public z_WindowPos2fMESA_adr := GetFuncAdr('glWindowPos2fMESA');
    public z_WindowPos2fMESA_ovr_0 := GetFuncOrNil&<procedure(x: single; y: single)>(z_WindowPos2fMESA_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure WindowPos2fMESA(x: single; y: single);
    begin
      z_WindowPos2fMESA_ovr_0(x, y);
    end;
    
    public z_WindowPos2fvMESA_adr := GetFuncAdr('glWindowPos2fvMESA');
    public z_WindowPos2fvMESA_ovr_0 := GetFuncOrNil&<procedure(var v: single)>(z_WindowPos2fvMESA_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure WindowPos2fvMESA(v: array of single);
    begin
      z_WindowPos2fvMESA_ovr_0(v[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure WindowPos2fvMESA(var v: single);
    begin
      z_WindowPos2fvMESA_ovr_0(v);
    end;
    public z_WindowPos2fvMESA_ovr_2 := GetFuncOrNil&<procedure(v: IntPtr)>(z_WindowPos2fvMESA_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure WindowPos2fvMESA(v: IntPtr);
    begin
      z_WindowPos2fvMESA_ovr_2(v);
    end;
    
    public z_WindowPos2iMESA_adr := GetFuncAdr('glWindowPos2iMESA');
    public z_WindowPos2iMESA_ovr_0 := GetFuncOrNil&<procedure(x: Int32; y: Int32)>(z_WindowPos2iMESA_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure WindowPos2iMESA(x: Int32; y: Int32);
    begin
      z_WindowPos2iMESA_ovr_0(x, y);
    end;
    
    public z_WindowPos2ivMESA_adr := GetFuncAdr('glWindowPos2ivMESA');
    public z_WindowPos2ivMESA_ovr_0 := GetFuncOrNil&<procedure(var v: Int32)>(z_WindowPos2ivMESA_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure WindowPos2ivMESA(v: array of Int32);
    begin
      z_WindowPos2ivMESA_ovr_0(v[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure WindowPos2ivMESA(var v: Int32);
    begin
      z_WindowPos2ivMESA_ovr_0(v);
    end;
    public z_WindowPos2ivMESA_ovr_2 := GetFuncOrNil&<procedure(v: IntPtr)>(z_WindowPos2ivMESA_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure WindowPos2ivMESA(v: IntPtr);
    begin
      z_WindowPos2ivMESA_ovr_2(v);
    end;
    
    public z_WindowPos2sMESA_adr := GetFuncAdr('glWindowPos2sMESA');
    public z_WindowPos2sMESA_ovr_0 := GetFuncOrNil&<procedure(x: Int16; y: Int16)>(z_WindowPos2sMESA_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure WindowPos2sMESA(x: Int16; y: Int16);
    begin
      z_WindowPos2sMESA_ovr_0(x, y);
    end;
    
    public z_WindowPos2svMESA_adr := GetFuncAdr('glWindowPos2svMESA');
    public z_WindowPos2svMESA_ovr_0 := GetFuncOrNil&<procedure(var v: Int16)>(z_WindowPos2svMESA_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure WindowPos2svMESA(v: array of Int16);
    begin
      z_WindowPos2svMESA_ovr_0(v[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure WindowPos2svMESA(var v: Int16);
    begin
      z_WindowPos2svMESA_ovr_0(v);
    end;
    public z_WindowPos2svMESA_ovr_2 := GetFuncOrNil&<procedure(v: IntPtr)>(z_WindowPos2svMESA_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure WindowPos2svMESA(v: IntPtr);
    begin
      z_WindowPos2svMESA_ovr_2(v);
    end;
    
    public z_WindowPos3dMESA_adr := GetFuncAdr('glWindowPos3dMESA');
    public z_WindowPos3dMESA_ovr_0 := GetFuncOrNil&<procedure(x: real; y: real; z: real)>(z_WindowPos3dMESA_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure WindowPos3dMESA(x: real; y: real; z: real);
    begin
      z_WindowPos3dMESA_ovr_0(x, y, z);
    end;
    
    public z_WindowPos3dvMESA_adr := GetFuncAdr('glWindowPos3dvMESA');
    public z_WindowPos3dvMESA_ovr_0 := GetFuncOrNil&<procedure(var v: real)>(z_WindowPos3dvMESA_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure WindowPos3dvMESA(v: array of real);
    begin
      z_WindowPos3dvMESA_ovr_0(v[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure WindowPos3dvMESA(var v: real);
    begin
      z_WindowPos3dvMESA_ovr_0(v);
    end;
    public z_WindowPos3dvMESA_ovr_2 := GetFuncOrNil&<procedure(v: IntPtr)>(z_WindowPos3dvMESA_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure WindowPos3dvMESA(v: IntPtr);
    begin
      z_WindowPos3dvMESA_ovr_2(v);
    end;
    
    public z_WindowPos3fMESA_adr := GetFuncAdr('glWindowPos3fMESA');
    public z_WindowPos3fMESA_ovr_0 := GetFuncOrNil&<procedure(x: single; y: single; z: single)>(z_WindowPos3fMESA_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure WindowPos3fMESA(x: single; y: single; z: single);
    begin
      z_WindowPos3fMESA_ovr_0(x, y, z);
    end;
    
    public z_WindowPos3fvMESA_adr := GetFuncAdr('glWindowPos3fvMESA');
    public z_WindowPos3fvMESA_ovr_0 := GetFuncOrNil&<procedure(var v: single)>(z_WindowPos3fvMESA_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure WindowPos3fvMESA(v: array of single);
    begin
      z_WindowPos3fvMESA_ovr_0(v[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure WindowPos3fvMESA(var v: single);
    begin
      z_WindowPos3fvMESA_ovr_0(v);
    end;
    public z_WindowPos3fvMESA_ovr_2 := GetFuncOrNil&<procedure(v: IntPtr)>(z_WindowPos3fvMESA_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure WindowPos3fvMESA(v: IntPtr);
    begin
      z_WindowPos3fvMESA_ovr_2(v);
    end;
    
    public z_WindowPos3iMESA_adr := GetFuncAdr('glWindowPos3iMESA');
    public z_WindowPos3iMESA_ovr_0 := GetFuncOrNil&<procedure(x: Int32; y: Int32; z: Int32)>(z_WindowPos3iMESA_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure WindowPos3iMESA(x: Int32; y: Int32; z: Int32);
    begin
      z_WindowPos3iMESA_ovr_0(x, y, z);
    end;
    
    public z_WindowPos3ivMESA_adr := GetFuncAdr('glWindowPos3ivMESA');
    public z_WindowPos3ivMESA_ovr_0 := GetFuncOrNil&<procedure(var v: Int32)>(z_WindowPos3ivMESA_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure WindowPos3ivMESA(v: array of Int32);
    begin
      z_WindowPos3ivMESA_ovr_0(v[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure WindowPos3ivMESA(var v: Int32);
    begin
      z_WindowPos3ivMESA_ovr_0(v);
    end;
    public z_WindowPos3ivMESA_ovr_2 := GetFuncOrNil&<procedure(v: IntPtr)>(z_WindowPos3ivMESA_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure WindowPos3ivMESA(v: IntPtr);
    begin
      z_WindowPos3ivMESA_ovr_2(v);
    end;
    
    public z_WindowPos3sMESA_adr := GetFuncAdr('glWindowPos3sMESA');
    public z_WindowPos3sMESA_ovr_0 := GetFuncOrNil&<procedure(x: Int16; y: Int16; z: Int16)>(z_WindowPos3sMESA_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure WindowPos3sMESA(x: Int16; y: Int16; z: Int16);
    begin
      z_WindowPos3sMESA_ovr_0(x, y, z);
    end;
    
    public z_WindowPos3svMESA_adr := GetFuncAdr('glWindowPos3svMESA');
    public z_WindowPos3svMESA_ovr_0 := GetFuncOrNil&<procedure(var v: Int16)>(z_WindowPos3svMESA_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure WindowPos3svMESA(v: array of Int16);
    begin
      z_WindowPos3svMESA_ovr_0(v[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure WindowPos3svMESA(var v: Int16);
    begin
      z_WindowPos3svMESA_ovr_0(v);
    end;
    public z_WindowPos3svMESA_ovr_2 := GetFuncOrNil&<procedure(v: IntPtr)>(z_WindowPos3svMESA_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure WindowPos3svMESA(v: IntPtr);
    begin
      z_WindowPos3svMESA_ovr_2(v);
    end;
    
    public z_WindowPos4dMESA_adr := GetFuncAdr('glWindowPos4dMESA');
    public z_WindowPos4dMESA_ovr_0 := GetFuncOrNil&<procedure(x: real; y: real; z: real; w: real)>(z_WindowPos4dMESA_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure WindowPos4dMESA(x: real; y: real; z: real; w: real);
    begin
      z_WindowPos4dMESA_ovr_0(x, y, z, w);
    end;
    
    public z_WindowPos4dvMESA_adr := GetFuncAdr('glWindowPos4dvMESA');
    public z_WindowPos4dvMESA_ovr_0 := GetFuncOrNil&<procedure(var v: real)>(z_WindowPos4dvMESA_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure WindowPos4dvMESA(v: array of real);
    begin
      z_WindowPos4dvMESA_ovr_0(v[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure WindowPos4dvMESA(var v: real);
    begin
      z_WindowPos4dvMESA_ovr_0(v);
    end;
    public z_WindowPos4dvMESA_ovr_2 := GetFuncOrNil&<procedure(v: IntPtr)>(z_WindowPos4dvMESA_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure WindowPos4dvMESA(v: IntPtr);
    begin
      z_WindowPos4dvMESA_ovr_2(v);
    end;
    
    public z_WindowPos4fMESA_adr := GetFuncAdr('glWindowPos4fMESA');
    public z_WindowPos4fMESA_ovr_0 := GetFuncOrNil&<procedure(x: single; y: single; z: single; w: single)>(z_WindowPos4fMESA_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure WindowPos4fMESA(x: single; y: single; z: single; w: single);
    begin
      z_WindowPos4fMESA_ovr_0(x, y, z, w);
    end;
    
    public z_WindowPos4fvMESA_adr := GetFuncAdr('glWindowPos4fvMESA');
    public z_WindowPos4fvMESA_ovr_0 := GetFuncOrNil&<procedure(var v: single)>(z_WindowPos4fvMESA_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure WindowPos4fvMESA(v: array of single);
    begin
      z_WindowPos4fvMESA_ovr_0(v[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure WindowPos4fvMESA(var v: single);
    begin
      z_WindowPos4fvMESA_ovr_0(v);
    end;
    public z_WindowPos4fvMESA_ovr_2 := GetFuncOrNil&<procedure(v: IntPtr)>(z_WindowPos4fvMESA_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure WindowPos4fvMESA(v: IntPtr);
    begin
      z_WindowPos4fvMESA_ovr_2(v);
    end;
    
    public z_WindowPos4iMESA_adr := GetFuncAdr('glWindowPos4iMESA');
    public z_WindowPos4iMESA_ovr_0 := GetFuncOrNil&<procedure(x: Int32; y: Int32; z: Int32; w: Int32)>(z_WindowPos4iMESA_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure WindowPos4iMESA(x: Int32; y: Int32; z: Int32; w: Int32);
    begin
      z_WindowPos4iMESA_ovr_0(x, y, z, w);
    end;
    
    public z_WindowPos4ivMESA_adr := GetFuncAdr('glWindowPos4ivMESA');
    public z_WindowPos4ivMESA_ovr_0 := GetFuncOrNil&<procedure(var v: Int32)>(z_WindowPos4ivMESA_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure WindowPos4ivMESA(v: array of Int32);
    begin
      z_WindowPos4ivMESA_ovr_0(v[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure WindowPos4ivMESA(var v: Int32);
    begin
      z_WindowPos4ivMESA_ovr_0(v);
    end;
    public z_WindowPos4ivMESA_ovr_2 := GetFuncOrNil&<procedure(v: IntPtr)>(z_WindowPos4ivMESA_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure WindowPos4ivMESA(v: IntPtr);
    begin
      z_WindowPos4ivMESA_ovr_2(v);
    end;
    
    public z_WindowPos4sMESA_adr := GetFuncAdr('glWindowPos4sMESA');
    public z_WindowPos4sMESA_ovr_0 := GetFuncOrNil&<procedure(x: Int16; y: Int16; z: Int16; w: Int16)>(z_WindowPos4sMESA_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure WindowPos4sMESA(x: Int16; y: Int16; z: Int16; w: Int16);
    begin
      z_WindowPos4sMESA_ovr_0(x, y, z, w);
    end;
    
    public z_WindowPos4svMESA_adr := GetFuncAdr('glWindowPos4svMESA');
    public z_WindowPos4svMESA_ovr_0 := GetFuncOrNil&<procedure(var v: Int16)>(z_WindowPos4svMESA_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure WindowPos4svMESA(v: array of Int16);
    begin
      z_WindowPos4svMESA_ovr_0(v[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure WindowPos4svMESA(var v: Int16);
    begin
      z_WindowPos4svMESA_ovr_0(v);
    end;
    public z_WindowPos4svMESA_ovr_2 := GetFuncOrNil&<procedure(v: IntPtr)>(z_WindowPos4svMESA_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure WindowPos4svMESA(v: IntPtr);
    begin
      z_WindowPos4svMESA_ovr_2(v);
    end;
    
  end;
  
  glConditionalRenderNVX = sealed class
    public static function GetFuncAdr([MarshalAs(UnmanagedType.LPStr)] lpszProc: string): IntPtr;
    external 'opengl32.dll' name 'wglGetProcAddress';
    public static function GetFuncOrNil<T>(fadr: IntPtr) :=
    fadr=IntPtr.Zero ? default(T) :
    Marshal.GetDelegateForFunctionPointer&<T>(fadr);
    
    public z_BeginConditionalRenderNVX_adr := GetFuncAdr('glBeginConditionalRenderNVX');
    public z_BeginConditionalRenderNVX_ovr_0 := GetFuncOrNil&<procedure(id: UInt32)>(z_BeginConditionalRenderNVX_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure BeginConditionalRenderNVX(id: UInt32);
    begin
      z_BeginConditionalRenderNVX_ovr_0(id);
    end;
    
    public z_EndConditionalRenderNVX_adr := GetFuncAdr('glEndConditionalRenderNVX');
    public z_EndConditionalRenderNVX_ovr_0 := GetFuncOrNil&<procedure>(z_EndConditionalRenderNVX_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure EndConditionalRenderNVX;
    begin
      z_EndConditionalRenderNVX_ovr_0;
    end;
    
  end;
  
  glLinkedGpuMulticastNVX = sealed class
    public static function GetFuncAdr([MarshalAs(UnmanagedType.LPStr)] lpszProc: string): IntPtr;
    external 'opengl32.dll' name 'wglGetProcAddress';
    public static function GetFuncOrNil<T>(fadr: IntPtr) :=
    fadr=IntPtr.Zero ? default(T) :
    Marshal.GetDelegateForFunctionPointer&<T>(fadr);
    
    public z_LGPUNamedBufferSubDataNVX_adr := GetFuncAdr('glLGPUNamedBufferSubDataNVX');
    public z_LGPUNamedBufferSubDataNVX_ovr_0 := GetFuncOrNil&<procedure(gpuMask: DummyFlags; buffer: UInt32; offset: IntPtr; size: IntPtr; data: IntPtr)>(z_LGPUNamedBufferSubDataNVX_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure LGPUNamedBufferSubDataNVX(gpuMask: DummyFlags; buffer: UInt32; offset: IntPtr; size: IntPtr; data: IntPtr);
    begin
      z_LGPUNamedBufferSubDataNVX_ovr_0(gpuMask, buffer, offset, size, data);
    end;
    
    public z_LGPUCopyImageSubDataNVX_adr := GetFuncAdr('glLGPUCopyImageSubDataNVX');
    public z_LGPUCopyImageSubDataNVX_ovr_0 := GetFuncOrNil&<procedure(sourceGpu: UInt32; destinationGpuMask: DummyFlags; srcName: UInt32; srcTarget: DummyEnum; srcLevel: Int32; srcX: Int32; srxY: Int32; srcZ: Int32; dstName: UInt32; dstTarget: DummyEnum; dstLevel: Int32; dstX: Int32; dstY: Int32; dstZ: Int32; width: Int32; height: Int32; depth: Int32)>(z_LGPUCopyImageSubDataNVX_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure LGPUCopyImageSubDataNVX(sourceGpu: UInt32; destinationGpuMask: DummyFlags; srcName: UInt32; srcTarget: DummyEnum; srcLevel: Int32; srcX: Int32; srxY: Int32; srcZ: Int32; dstName: UInt32; dstTarget: DummyEnum; dstLevel: Int32; dstX: Int32; dstY: Int32; dstZ: Int32; width: Int32; height: Int32; depth: Int32);
    begin
      z_LGPUCopyImageSubDataNVX_ovr_0(sourceGpu, destinationGpuMask, srcName, srcTarget, srcLevel, srcX, srxY, srcZ, dstName, dstTarget, dstLevel, dstX, dstY, dstZ, width, height, depth);
    end;
    
    public z_LGPUInterlockNVX_adr := GetFuncAdr('glLGPUInterlockNVX');
    public z_LGPUInterlockNVX_ovr_0 := GetFuncOrNil&<procedure>(z_LGPUInterlockNVX_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure LGPUInterlockNVX;
    begin
      z_LGPUInterlockNVX_ovr_0;
    end;
    
  end;
  
  glAlphaToCoverageDitherControlNV = sealed class
    public static function GetFuncAdr([MarshalAs(UnmanagedType.LPStr)] lpszProc: string): IntPtr;
    external 'opengl32.dll' name 'wglGetProcAddress';
    public static function GetFuncOrNil<T>(fadr: IntPtr) :=
    fadr=IntPtr.Zero ? default(T) :
    Marshal.GetDelegateForFunctionPointer&<T>(fadr);
    
    public z_AlphaToCoverageDitherControlNV_adr := GetFuncAdr('glAlphaToCoverageDitherControlNV');
    public z_AlphaToCoverageDitherControlNV_ovr_0 := GetFuncOrNil&<procedure(mode: DummyEnum)>(z_AlphaToCoverageDitherControlNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure AlphaToCoverageDitherControlNV(mode: DummyEnum);
    begin
      z_AlphaToCoverageDitherControlNV_ovr_0(mode);
    end;
    
  end;
  
  glBindlessMultiDrawIndirectNV = sealed class
    public static function GetFuncAdr([MarshalAs(UnmanagedType.LPStr)] lpszProc: string): IntPtr;
    external 'opengl32.dll' name 'wglGetProcAddress';
    public static function GetFuncOrNil<T>(fadr: IntPtr) :=
    fadr=IntPtr.Zero ? default(T) :
    Marshal.GetDelegateForFunctionPointer&<T>(fadr);
    
    public z_MultiDrawArraysIndirectBindlessNV_adr := GetFuncAdr('glMultiDrawArraysIndirectBindlessNV');
    public z_MultiDrawArraysIndirectBindlessNV_ovr_0 := GetFuncOrNil&<procedure(mode: PrimitiveType; indirect: IntPtr; drawCount: Int32; stride: Int32; vertexBufferCount: Int32)>(z_MultiDrawArraysIndirectBindlessNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiDrawArraysIndirectBindlessNV(mode: PrimitiveType; indirect: IntPtr; drawCount: Int32; stride: Int32; vertexBufferCount: Int32);
    begin
      z_MultiDrawArraysIndirectBindlessNV_ovr_0(mode, indirect, drawCount, stride, vertexBufferCount);
    end;
    
    public z_MultiDrawElementsIndirectBindlessNV_adr := GetFuncAdr('glMultiDrawElementsIndirectBindlessNV');
    public z_MultiDrawElementsIndirectBindlessNV_ovr_0 := GetFuncOrNil&<procedure(mode: PrimitiveType; &type: DrawElementsType; indirect: IntPtr; drawCount: Int32; stride: Int32; vertexBufferCount: Int32)>(z_MultiDrawElementsIndirectBindlessNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiDrawElementsIndirectBindlessNV(mode: PrimitiveType; &type: DrawElementsType; indirect: IntPtr; drawCount: Int32; stride: Int32; vertexBufferCount: Int32);
    begin
      z_MultiDrawElementsIndirectBindlessNV_ovr_0(mode, &type, indirect, drawCount, stride, vertexBufferCount);
    end;
    
  end;
  
  glBindlessMultiDrawIndirectCountNV = sealed class
    public static function GetFuncAdr([MarshalAs(UnmanagedType.LPStr)] lpszProc: string): IntPtr;
    external 'opengl32.dll' name 'wglGetProcAddress';
    public static function GetFuncOrNil<T>(fadr: IntPtr) :=
    fadr=IntPtr.Zero ? default(T) :
    Marshal.GetDelegateForFunctionPointer&<T>(fadr);
    
    public z_MultiDrawArraysIndirectBindlessCountNV_adr := GetFuncAdr('glMultiDrawArraysIndirectBindlessCountNV');
    public z_MultiDrawArraysIndirectBindlessCountNV_ovr_0 := GetFuncOrNil&<procedure(mode: PrimitiveType; indirect: IntPtr; drawCount: Int32; maxDrawCount: Int32; stride: Int32; vertexBufferCount: Int32)>(z_MultiDrawArraysIndirectBindlessCountNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiDrawArraysIndirectBindlessCountNV(mode: PrimitiveType; indirect: IntPtr; drawCount: Int32; maxDrawCount: Int32; stride: Int32; vertexBufferCount: Int32);
    begin
      z_MultiDrawArraysIndirectBindlessCountNV_ovr_0(mode, indirect, drawCount, maxDrawCount, stride, vertexBufferCount);
    end;
    
    public z_MultiDrawElementsIndirectBindlessCountNV_adr := GetFuncAdr('glMultiDrawElementsIndirectBindlessCountNV');
    public z_MultiDrawElementsIndirectBindlessCountNV_ovr_0 := GetFuncOrNil&<procedure(mode: PrimitiveType; &type: DrawElementsType; indirect: IntPtr; drawCount: Int32; maxDrawCount: Int32; stride: Int32; vertexBufferCount: Int32)>(z_MultiDrawElementsIndirectBindlessCountNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiDrawElementsIndirectBindlessCountNV(mode: PrimitiveType; &type: DrawElementsType; indirect: IntPtr; drawCount: Int32; maxDrawCount: Int32; stride: Int32; vertexBufferCount: Int32);
    begin
      z_MultiDrawElementsIndirectBindlessCountNV_ovr_0(mode, &type, indirect, drawCount, maxDrawCount, stride, vertexBufferCount);
    end;
    
  end;
  
  glBindlessTextureNV = sealed class
    public static function GetFuncAdr([MarshalAs(UnmanagedType.LPStr)] lpszProc: string): IntPtr;
    external 'opengl32.dll' name 'wglGetProcAddress';
    public static function GetFuncOrNil<T>(fadr: IntPtr) :=
    fadr=IntPtr.Zero ? default(T) :
    Marshal.GetDelegateForFunctionPointer&<T>(fadr);
    
    public z_GetTextureHandleNV_adr := GetFuncAdr('glGetTextureHandleNV');
    public z_GetTextureHandleNV_ovr_0 := GetFuncOrNil&<function(texture: UInt32): UInt64>(z_GetTextureHandleNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetTextureHandleNV(texture: UInt32): UInt64;
    begin
      Result := z_GetTextureHandleNV_ovr_0(texture);
    end;
    
    public z_GetTextureSamplerHandleNV_adr := GetFuncAdr('glGetTextureSamplerHandleNV');
    public z_GetTextureSamplerHandleNV_ovr_0 := GetFuncOrNil&<function(texture: UInt32; sampler: UInt32): UInt64>(z_GetTextureSamplerHandleNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetTextureSamplerHandleNV(texture: UInt32; sampler: UInt32): UInt64;
    begin
      Result := z_GetTextureSamplerHandleNV_ovr_0(texture, sampler);
    end;
    
    public z_MakeTextureHandleResidentNV_adr := GetFuncAdr('glMakeTextureHandleResidentNV');
    public z_MakeTextureHandleResidentNV_ovr_0 := GetFuncOrNil&<procedure(handle: UInt64)>(z_MakeTextureHandleResidentNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MakeTextureHandleResidentNV(handle: UInt64);
    begin
      z_MakeTextureHandleResidentNV_ovr_0(handle);
    end;
    
    public z_MakeTextureHandleNonResidentNV_adr := GetFuncAdr('glMakeTextureHandleNonResidentNV');
    public z_MakeTextureHandleNonResidentNV_ovr_0 := GetFuncOrNil&<procedure(handle: UInt64)>(z_MakeTextureHandleNonResidentNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MakeTextureHandleNonResidentNV(handle: UInt64);
    begin
      z_MakeTextureHandleNonResidentNV_ovr_0(handle);
    end;
    
    public z_GetImageHandleNV_adr := GetFuncAdr('glGetImageHandleNV');
    public z_GetImageHandleNV_ovr_0 := GetFuncOrNil&<function(texture: UInt32; level: Int32; layered: boolean; layer: Int32; format: PixelFormat): UInt64>(z_GetImageHandleNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetImageHandleNV(texture: UInt32; level: Int32; layered: boolean; layer: Int32; format: PixelFormat): UInt64;
    begin
      Result := z_GetImageHandleNV_ovr_0(texture, level, layered, layer, format);
    end;
    
    public z_MakeImageHandleResidentNV_adr := GetFuncAdr('glMakeImageHandleResidentNV');
    public z_MakeImageHandleResidentNV_ovr_0 := GetFuncOrNil&<procedure(handle: UInt64; access: DummyEnum)>(z_MakeImageHandleResidentNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MakeImageHandleResidentNV(handle: UInt64; access: DummyEnum);
    begin
      z_MakeImageHandleResidentNV_ovr_0(handle, access);
    end;
    
    public z_MakeImageHandleNonResidentNV_adr := GetFuncAdr('glMakeImageHandleNonResidentNV');
    public z_MakeImageHandleNonResidentNV_ovr_0 := GetFuncOrNil&<procedure(handle: UInt64)>(z_MakeImageHandleNonResidentNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MakeImageHandleNonResidentNV(handle: UInt64);
    begin
      z_MakeImageHandleNonResidentNV_ovr_0(handle);
    end;
    
    public z_UniformHandleui64NV_adr := GetFuncAdr('glUniformHandleui64NV');
    public z_UniformHandleui64NV_ovr_0 := GetFuncOrNil&<procedure(location: Int32; value: UInt64)>(z_UniformHandleui64NV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure UniformHandleui64NV(location: Int32; value: UInt64);
    begin
      z_UniformHandleui64NV_ovr_0(location, value);
    end;
    
    public z_UniformHandleui64vNV_adr := GetFuncAdr('glUniformHandleui64vNV');
    public z_UniformHandleui64vNV_ovr_0 := GetFuncOrNil&<procedure(location: Int32; count: Int32; var value: UInt64)>(z_UniformHandleui64vNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure UniformHandleui64vNV(location: Int32; count: Int32; value: array of UInt64);
    begin
      z_UniformHandleui64vNV_ovr_0(location, count, value[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure UniformHandleui64vNV(location: Int32; count: Int32; var value: UInt64);
    begin
      z_UniformHandleui64vNV_ovr_0(location, count, value);
    end;
    public z_UniformHandleui64vNV_ovr_2 := GetFuncOrNil&<procedure(location: Int32; count: Int32; value: IntPtr)>(z_UniformHandleui64vNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure UniformHandleui64vNV(location: Int32; count: Int32; value: IntPtr);
    begin
      z_UniformHandleui64vNV_ovr_2(location, count, value);
    end;
    
    public z_ProgramUniformHandleui64NV_adr := GetFuncAdr('glProgramUniformHandleui64NV');
    public z_ProgramUniformHandleui64NV_ovr_0 := GetFuncOrNil&<procedure(&program: UInt32; location: Int32; value: UInt64)>(z_ProgramUniformHandleui64NV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniformHandleui64NV(&program: UInt32; location: Int32; value: UInt64);
    begin
      z_ProgramUniformHandleui64NV_ovr_0(&program, location, value);
    end;
    
    public z_ProgramUniformHandleui64vNV_adr := GetFuncAdr('glProgramUniformHandleui64vNV');
    public z_ProgramUniformHandleui64vNV_ovr_0 := GetFuncOrNil&<procedure(&program: UInt32; location: Int32; count: Int32; var values: UInt64)>(z_ProgramUniformHandleui64vNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniformHandleui64vNV(&program: UInt32; location: Int32; count: Int32; values: array of UInt64);
    begin
      z_ProgramUniformHandleui64vNV_ovr_0(&program, location, count, values[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniformHandleui64vNV(&program: UInt32; location: Int32; count: Int32; var values: UInt64);
    begin
      z_ProgramUniformHandleui64vNV_ovr_0(&program, location, count, values);
    end;
    public z_ProgramUniformHandleui64vNV_ovr_2 := GetFuncOrNil&<procedure(&program: UInt32; location: Int32; count: Int32; values: IntPtr)>(z_ProgramUniformHandleui64vNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniformHandleui64vNV(&program: UInt32; location: Int32; count: Int32; values: IntPtr);
    begin
      z_ProgramUniformHandleui64vNV_ovr_2(&program, location, count, values);
    end;
    
    public z_IsTextureHandleResidentNV_adr := GetFuncAdr('glIsTextureHandleResidentNV');
    public z_IsTextureHandleResidentNV_ovr_0 := GetFuncOrNil&<function(handle: UInt64): boolean>(z_IsTextureHandleResidentNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function IsTextureHandleResidentNV(handle: UInt64): boolean;
    begin
      Result := z_IsTextureHandleResidentNV_ovr_0(handle);
    end;
    
    public z_IsImageHandleResidentNV_adr := GetFuncAdr('glIsImageHandleResidentNV');
    public z_IsImageHandleResidentNV_ovr_0 := GetFuncOrNil&<function(handle: UInt64): boolean>(z_IsImageHandleResidentNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function IsImageHandleResidentNV(handle: UInt64): boolean;
    begin
      Result := z_IsImageHandleResidentNV_ovr_0(handle);
    end;
    
  end;
  
  glBlendEquationAdvancedNV = sealed class
    public static function GetFuncAdr([MarshalAs(UnmanagedType.LPStr)] lpszProc: string): IntPtr;
    external 'opengl32.dll' name 'wglGetProcAddress';
    public static function GetFuncOrNil<T>(fadr: IntPtr) :=
    fadr=IntPtr.Zero ? default(T) :
    Marshal.GetDelegateForFunctionPointer&<T>(fadr);
    
    public z_BlendParameteriNV_adr := GetFuncAdr('glBlendParameteriNV');
    public z_BlendParameteriNV_ovr_0 := GetFuncOrNil&<procedure(pname: DummyEnum; value: Int32)>(z_BlendParameteriNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure BlendParameteriNV(pname: DummyEnum; value: Int32);
    begin
      z_BlendParameteriNV_ovr_0(pname, value);
    end;
    
    public z_BlendBarrierNV_adr := GetFuncAdr('glBlendBarrierNV');
    public z_BlendBarrierNV_ovr_0 := GetFuncOrNil&<procedure>(z_BlendBarrierNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure BlendBarrierNV;
    begin
      z_BlendBarrierNV_ovr_0;
    end;
    
  end;
  
  glClipSpaceWScalingNV = sealed class
    public static function GetFuncAdr([MarshalAs(UnmanagedType.LPStr)] lpszProc: string): IntPtr;
    external 'opengl32.dll' name 'wglGetProcAddress';
    public static function GetFuncOrNil<T>(fadr: IntPtr) :=
    fadr=IntPtr.Zero ? default(T) :
    Marshal.GetDelegateForFunctionPointer&<T>(fadr);
    
    public z_ViewportPositionWScaleNV_adr := GetFuncAdr('glViewportPositionWScaleNV');
    public z_ViewportPositionWScaleNV_ovr_0 := GetFuncOrNil&<procedure(index: UInt32; xcoeff: single; ycoeff: single)>(z_ViewportPositionWScaleNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ViewportPositionWScaleNV(index: UInt32; xcoeff: single; ycoeff: single);
    begin
      z_ViewportPositionWScaleNV_ovr_0(index, xcoeff, ycoeff);
    end;
    
  end;
  
  glCommandListNV = sealed class
    public static function GetFuncAdr([MarshalAs(UnmanagedType.LPStr)] lpszProc: string): IntPtr;
    external 'opengl32.dll' name 'wglGetProcAddress';
    public static function GetFuncOrNil<T>(fadr: IntPtr) :=
    fadr=IntPtr.Zero ? default(T) :
    Marshal.GetDelegateForFunctionPointer&<T>(fadr);
    
    public z_CreateStatesNV_adr := GetFuncAdr('glCreateStatesNV');
    public z_CreateStatesNV_ovr_0 := GetFuncOrNil&<procedure(n: Int32; var states: UInt32)>(z_CreateStatesNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure CreateStatesNV(n: Int32; states: array of UInt32);
    begin
      z_CreateStatesNV_ovr_0(n, states[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure CreateStatesNV(n: Int32; var states: UInt32);
    begin
      z_CreateStatesNV_ovr_0(n, states);
    end;
    public z_CreateStatesNV_ovr_2 := GetFuncOrNil&<procedure(n: Int32; states: IntPtr)>(z_CreateStatesNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure CreateStatesNV(n: Int32; states: IntPtr);
    begin
      z_CreateStatesNV_ovr_2(n, states);
    end;
    
    public z_DeleteStatesNV_adr := GetFuncAdr('glDeleteStatesNV');
    public z_DeleteStatesNV_ovr_0 := GetFuncOrNil&<procedure(n: Int32; var states: UInt32)>(z_DeleteStatesNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure DeleteStatesNV(n: Int32; states: array of UInt32);
    begin
      z_DeleteStatesNV_ovr_0(n, states[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure DeleteStatesNV(n: Int32; var states: UInt32);
    begin
      z_DeleteStatesNV_ovr_0(n, states);
    end;
    public z_DeleteStatesNV_ovr_2 := GetFuncOrNil&<procedure(n: Int32; states: IntPtr)>(z_DeleteStatesNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure DeleteStatesNV(n: Int32; states: IntPtr);
    begin
      z_DeleteStatesNV_ovr_2(n, states);
    end;
    
    public z_IsStateNV_adr := GetFuncAdr('glIsStateNV');
    public z_IsStateNV_ovr_0 := GetFuncOrNil&<function(state: UInt32): boolean>(z_IsStateNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function IsStateNV(state: UInt32): boolean;
    begin
      Result := z_IsStateNV_ovr_0(state);
    end;
    
    public z_StateCaptureNV_adr := GetFuncAdr('glStateCaptureNV');
    public z_StateCaptureNV_ovr_0 := GetFuncOrNil&<procedure(state: UInt32; mode: DummyEnum)>(z_StateCaptureNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure StateCaptureNV(state: UInt32; mode: DummyEnum);
    begin
      z_StateCaptureNV_ovr_0(state, mode);
    end;
    
    public z_GetCommandHeaderNV_adr := GetFuncAdr('glGetCommandHeaderNV');
    public z_GetCommandHeaderNV_ovr_0 := GetFuncOrNil&<function(tokenID: DummyEnum; size: UInt32): UInt32>(z_GetCommandHeaderNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetCommandHeaderNV(tokenID: DummyEnum; size: UInt32): UInt32;
    begin
      Result := z_GetCommandHeaderNV_ovr_0(tokenID, size);
    end;
    
    public z_GetStageIndexNV_adr := GetFuncAdr('glGetStageIndexNV');
    public z_GetStageIndexNV_ovr_0 := GetFuncOrNil&<function(_shadertype: ShaderType): UInt16>(z_GetStageIndexNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetStageIndexNV(_shadertype: ShaderType): UInt16;
    begin
      Result := z_GetStageIndexNV_ovr_0(_shadertype);
    end;
    
    public z_DrawCommandsNV_adr := GetFuncAdr('glDrawCommandsNV');
    public z_DrawCommandsNV_ovr_0 := GetFuncOrNil&<procedure(primitiveMode: DummyEnum; buffer: UInt32; var indirects: IntPtr; var sizes: Int32; count: UInt32)>(z_DrawCommandsNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure DrawCommandsNV(primitiveMode: DummyEnum; buffer: UInt32; indirects: array of IntPtr; sizes: array of Int32; count: UInt32);
    begin
      z_DrawCommandsNV_ovr_0(primitiveMode, buffer, indirects[0], sizes[0], count);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure DrawCommandsNV(primitiveMode: DummyEnum; buffer: UInt32; indirects: array of IntPtr; var sizes: Int32; count: UInt32);
    begin
      z_DrawCommandsNV_ovr_0(primitiveMode, buffer, indirects[0], sizes, count);
    end;
    public z_DrawCommandsNV_ovr_2 := GetFuncOrNil&<procedure(primitiveMode: DummyEnum; buffer: UInt32; var indirects: IntPtr; sizes: IntPtr; count: UInt32)>(z_DrawCommandsNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure DrawCommandsNV(primitiveMode: DummyEnum; buffer: UInt32; indirects: array of IntPtr; sizes: IntPtr; count: UInt32);
    begin
      z_DrawCommandsNV_ovr_2(primitiveMode, buffer, indirects[0], sizes, count);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure DrawCommandsNV(primitiveMode: DummyEnum; buffer: UInt32; var indirects: IntPtr; sizes: array of Int32; count: UInt32);
    begin
      z_DrawCommandsNV_ovr_0(primitiveMode, buffer, indirects, sizes[0], count);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure DrawCommandsNV(primitiveMode: DummyEnum; buffer: UInt32; var indirects: IntPtr; var sizes: Int32; count: UInt32);
    begin
      z_DrawCommandsNV_ovr_0(primitiveMode, buffer, indirects, sizes, count);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure DrawCommandsNV(primitiveMode: DummyEnum; buffer: UInt32; var indirects: IntPtr; sizes: IntPtr; count: UInt32);
    begin
      z_DrawCommandsNV_ovr_2(primitiveMode, buffer, indirects, sizes, count);
    end;
    public z_DrawCommandsNV_ovr_6 := GetFuncOrNil&<procedure(primitiveMode: DummyEnum; buffer: UInt32; indirects: pointer; var sizes: Int32; count: UInt32)>(z_DrawCommandsNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure DrawCommandsNV(primitiveMode: DummyEnum; buffer: UInt32; indirects: pointer; sizes: array of Int32; count: UInt32);
    begin
      z_DrawCommandsNV_ovr_6(primitiveMode, buffer, indirects, sizes[0], count);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure DrawCommandsNV(primitiveMode: DummyEnum; buffer: UInt32; indirects: pointer; var sizes: Int32; count: UInt32);
    begin
      z_DrawCommandsNV_ovr_6(primitiveMode, buffer, indirects, sizes, count);
    end;
    public z_DrawCommandsNV_ovr_8 := GetFuncOrNil&<procedure(primitiveMode: DummyEnum; buffer: UInt32; indirects: pointer; sizes: IntPtr; count: UInt32)>(z_DrawCommandsNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure DrawCommandsNV(primitiveMode: DummyEnum; buffer: UInt32; indirects: pointer; sizes: IntPtr; count: UInt32);
    begin
      z_DrawCommandsNV_ovr_8(primitiveMode, buffer, indirects, sizes, count);
    end;
    
    public z_DrawCommandsAddressNV_adr := GetFuncAdr('glDrawCommandsAddressNV');
    public z_DrawCommandsAddressNV_ovr_0 := GetFuncOrNil&<procedure(primitiveMode: DummyEnum; var indirects: UInt64; var sizes: Int32; count: UInt32)>(z_DrawCommandsAddressNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure DrawCommandsAddressNV(primitiveMode: DummyEnum; indirects: array of UInt64; sizes: array of Int32; count: UInt32);
    begin
      z_DrawCommandsAddressNV_ovr_0(primitiveMode, indirects[0], sizes[0], count);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure DrawCommandsAddressNV(primitiveMode: DummyEnum; indirects: array of UInt64; var sizes: Int32; count: UInt32);
    begin
      z_DrawCommandsAddressNV_ovr_0(primitiveMode, indirects[0], sizes, count);
    end;
    public z_DrawCommandsAddressNV_ovr_2 := GetFuncOrNil&<procedure(primitiveMode: DummyEnum; var indirects: UInt64; sizes: IntPtr; count: UInt32)>(z_DrawCommandsAddressNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure DrawCommandsAddressNV(primitiveMode: DummyEnum; indirects: array of UInt64; sizes: IntPtr; count: UInt32);
    begin
      z_DrawCommandsAddressNV_ovr_2(primitiveMode, indirects[0], sizes, count);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure DrawCommandsAddressNV(primitiveMode: DummyEnum; var indirects: UInt64; sizes: array of Int32; count: UInt32);
    begin
      z_DrawCommandsAddressNV_ovr_0(primitiveMode, indirects, sizes[0], count);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure DrawCommandsAddressNV(primitiveMode: DummyEnum; var indirects: UInt64; var sizes: Int32; count: UInt32);
    begin
      z_DrawCommandsAddressNV_ovr_0(primitiveMode, indirects, sizes, count);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure DrawCommandsAddressNV(primitiveMode: DummyEnum; var indirects: UInt64; sizes: IntPtr; count: UInt32);
    begin
      z_DrawCommandsAddressNV_ovr_2(primitiveMode, indirects, sizes, count);
    end;
    public z_DrawCommandsAddressNV_ovr_6 := GetFuncOrNil&<procedure(primitiveMode: DummyEnum; indirects: IntPtr; var sizes: Int32; count: UInt32)>(z_DrawCommandsAddressNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure DrawCommandsAddressNV(primitiveMode: DummyEnum; indirects: IntPtr; sizes: array of Int32; count: UInt32);
    begin
      z_DrawCommandsAddressNV_ovr_6(primitiveMode, indirects, sizes[0], count);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure DrawCommandsAddressNV(primitiveMode: DummyEnum; indirects: IntPtr; var sizes: Int32; count: UInt32);
    begin
      z_DrawCommandsAddressNV_ovr_6(primitiveMode, indirects, sizes, count);
    end;
    public z_DrawCommandsAddressNV_ovr_8 := GetFuncOrNil&<procedure(primitiveMode: DummyEnum; indirects: IntPtr; sizes: IntPtr; count: UInt32)>(z_DrawCommandsAddressNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure DrawCommandsAddressNV(primitiveMode: DummyEnum; indirects: IntPtr; sizes: IntPtr; count: UInt32);
    begin
      z_DrawCommandsAddressNV_ovr_8(primitiveMode, indirects, sizes, count);
    end;
    
    public z_DrawCommandsStatesNV_adr := GetFuncAdr('glDrawCommandsStatesNV');
    public z_DrawCommandsStatesNV_ovr_0 := GetFuncOrNil&<procedure(buffer: UInt32; var indirects: IntPtr; var sizes: Int32; var states: UInt32; var fbos: UInt32; count: UInt32)>(z_DrawCommandsStatesNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure DrawCommandsStatesNV(buffer: UInt32; indirects: array of IntPtr; sizes: array of Int32; states: array of UInt32; fbos: array of UInt32; count: UInt32);
    begin
      z_DrawCommandsStatesNV_ovr_0(buffer, indirects[0], sizes[0], states[0], fbos[0], count);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure DrawCommandsStatesNV(buffer: UInt32; indirects: array of IntPtr; sizes: array of Int32; states: array of UInt32; var fbos: UInt32; count: UInt32);
    begin
      z_DrawCommandsStatesNV_ovr_0(buffer, indirects[0], sizes[0], states[0], fbos, count);
    end;
    public z_DrawCommandsStatesNV_ovr_2 := GetFuncOrNil&<procedure(buffer: UInt32; var indirects: IntPtr; var sizes: Int32; var states: UInt32; fbos: IntPtr; count: UInt32)>(z_DrawCommandsStatesNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure DrawCommandsStatesNV(buffer: UInt32; indirects: array of IntPtr; sizes: array of Int32; states: array of UInt32; fbos: IntPtr; count: UInt32);
    begin
      z_DrawCommandsStatesNV_ovr_2(buffer, indirects[0], sizes[0], states[0], fbos, count);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure DrawCommandsStatesNV(buffer: UInt32; indirects: array of IntPtr; sizes: array of Int32; var states: UInt32; fbos: array of UInt32; count: UInt32);
    begin
      z_DrawCommandsStatesNV_ovr_0(buffer, indirects[0], sizes[0], states, fbos[0], count);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure DrawCommandsStatesNV(buffer: UInt32; indirects: array of IntPtr; sizes: array of Int32; var states: UInt32; var fbos: UInt32; count: UInt32);
    begin
      z_DrawCommandsStatesNV_ovr_0(buffer, indirects[0], sizes[0], states, fbos, count);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure DrawCommandsStatesNV(buffer: UInt32; indirects: array of IntPtr; sizes: array of Int32; var states: UInt32; fbos: IntPtr; count: UInt32);
    begin
      z_DrawCommandsStatesNV_ovr_2(buffer, indirects[0], sizes[0], states, fbos, count);
    end;
    public z_DrawCommandsStatesNV_ovr_6 := GetFuncOrNil&<procedure(buffer: UInt32; var indirects: IntPtr; var sizes: Int32; states: IntPtr; var fbos: UInt32; count: UInt32)>(z_DrawCommandsStatesNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure DrawCommandsStatesNV(buffer: UInt32; indirects: array of IntPtr; sizes: array of Int32; states: IntPtr; fbos: array of UInt32; count: UInt32);
    begin
      z_DrawCommandsStatesNV_ovr_6(buffer, indirects[0], sizes[0], states, fbos[0], count);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure DrawCommandsStatesNV(buffer: UInt32; indirects: array of IntPtr; sizes: array of Int32; states: IntPtr; var fbos: UInt32; count: UInt32);
    begin
      z_DrawCommandsStatesNV_ovr_6(buffer, indirects[0], sizes[0], states, fbos, count);
    end;
    public z_DrawCommandsStatesNV_ovr_8 := GetFuncOrNil&<procedure(buffer: UInt32; var indirects: IntPtr; var sizes: Int32; states: IntPtr; fbos: IntPtr; count: UInt32)>(z_DrawCommandsStatesNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure DrawCommandsStatesNV(buffer: UInt32; indirects: array of IntPtr; sizes: array of Int32; states: IntPtr; fbos: IntPtr; count: UInt32);
    begin
      z_DrawCommandsStatesNV_ovr_8(buffer, indirects[0], sizes[0], states, fbos, count);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure DrawCommandsStatesNV(buffer: UInt32; indirects: array of IntPtr; var sizes: Int32; states: array of UInt32; fbos: array of UInt32; count: UInt32);
    begin
      z_DrawCommandsStatesNV_ovr_0(buffer, indirects[0], sizes, states[0], fbos[0], count);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure DrawCommandsStatesNV(buffer: UInt32; indirects: array of IntPtr; var sizes: Int32; states: array of UInt32; var fbos: UInt32; count: UInt32);
    begin
      z_DrawCommandsStatesNV_ovr_0(buffer, indirects[0], sizes, states[0], fbos, count);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure DrawCommandsStatesNV(buffer: UInt32; indirects: array of IntPtr; var sizes: Int32; states: array of UInt32; fbos: IntPtr; count: UInt32);
    begin
      z_DrawCommandsStatesNV_ovr_2(buffer, indirects[0], sizes, states[0], fbos, count);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure DrawCommandsStatesNV(buffer: UInt32; indirects: array of IntPtr; var sizes: Int32; var states: UInt32; fbos: array of UInt32; count: UInt32);
    begin
      z_DrawCommandsStatesNV_ovr_0(buffer, indirects[0], sizes, states, fbos[0], count);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure DrawCommandsStatesNV(buffer: UInt32; indirects: array of IntPtr; var sizes: Int32; var states: UInt32; var fbos: UInt32; count: UInt32);
    begin
      z_DrawCommandsStatesNV_ovr_0(buffer, indirects[0], sizes, states, fbos, count);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure DrawCommandsStatesNV(buffer: UInt32; indirects: array of IntPtr; var sizes: Int32; var states: UInt32; fbos: IntPtr; count: UInt32);
    begin
      z_DrawCommandsStatesNV_ovr_2(buffer, indirects[0], sizes, states, fbos, count);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure DrawCommandsStatesNV(buffer: UInt32; indirects: array of IntPtr; var sizes: Int32; states: IntPtr; fbos: array of UInt32; count: UInt32);
    begin
      z_DrawCommandsStatesNV_ovr_6(buffer, indirects[0], sizes, states, fbos[0], count);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure DrawCommandsStatesNV(buffer: UInt32; indirects: array of IntPtr; var sizes: Int32; states: IntPtr; var fbos: UInt32; count: UInt32);
    begin
      z_DrawCommandsStatesNV_ovr_6(buffer, indirects[0], sizes, states, fbos, count);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure DrawCommandsStatesNV(buffer: UInt32; indirects: array of IntPtr; var sizes: Int32; states: IntPtr; fbos: IntPtr; count: UInt32);
    begin
      z_DrawCommandsStatesNV_ovr_8(buffer, indirects[0], sizes, states, fbos, count);
    end;
    public z_DrawCommandsStatesNV_ovr_18 := GetFuncOrNil&<procedure(buffer: UInt32; var indirects: IntPtr; sizes: IntPtr; var states: UInt32; var fbos: UInt32; count: UInt32)>(z_DrawCommandsStatesNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure DrawCommandsStatesNV(buffer: UInt32; indirects: array of IntPtr; sizes: IntPtr; states: array of UInt32; fbos: array of UInt32; count: UInt32);
    begin
      z_DrawCommandsStatesNV_ovr_18(buffer, indirects[0], sizes, states[0], fbos[0], count);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure DrawCommandsStatesNV(buffer: UInt32; indirects: array of IntPtr; sizes: IntPtr; states: array of UInt32; var fbos: UInt32; count: UInt32);
    begin
      z_DrawCommandsStatesNV_ovr_18(buffer, indirects[0], sizes, states[0], fbos, count);
    end;
    public z_DrawCommandsStatesNV_ovr_20 := GetFuncOrNil&<procedure(buffer: UInt32; var indirects: IntPtr; sizes: IntPtr; var states: UInt32; fbos: IntPtr; count: UInt32)>(z_DrawCommandsStatesNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure DrawCommandsStatesNV(buffer: UInt32; indirects: array of IntPtr; sizes: IntPtr; states: array of UInt32; fbos: IntPtr; count: UInt32);
    begin
      z_DrawCommandsStatesNV_ovr_20(buffer, indirects[0], sizes, states[0], fbos, count);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure DrawCommandsStatesNV(buffer: UInt32; indirects: array of IntPtr; sizes: IntPtr; var states: UInt32; fbos: array of UInt32; count: UInt32);
    begin
      z_DrawCommandsStatesNV_ovr_18(buffer, indirects[0], sizes, states, fbos[0], count);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure DrawCommandsStatesNV(buffer: UInt32; indirects: array of IntPtr; sizes: IntPtr; var states: UInt32; var fbos: UInt32; count: UInt32);
    begin
      z_DrawCommandsStatesNV_ovr_18(buffer, indirects[0], sizes, states, fbos, count);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure DrawCommandsStatesNV(buffer: UInt32; indirects: array of IntPtr; sizes: IntPtr; var states: UInt32; fbos: IntPtr; count: UInt32);
    begin
      z_DrawCommandsStatesNV_ovr_20(buffer, indirects[0], sizes, states, fbos, count);
    end;
    public z_DrawCommandsStatesNV_ovr_24 := GetFuncOrNil&<procedure(buffer: UInt32; var indirects: IntPtr; sizes: IntPtr; states: IntPtr; var fbos: UInt32; count: UInt32)>(z_DrawCommandsStatesNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure DrawCommandsStatesNV(buffer: UInt32; indirects: array of IntPtr; sizes: IntPtr; states: IntPtr; fbos: array of UInt32; count: UInt32);
    begin
      z_DrawCommandsStatesNV_ovr_24(buffer, indirects[0], sizes, states, fbos[0], count);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure DrawCommandsStatesNV(buffer: UInt32; indirects: array of IntPtr; sizes: IntPtr; states: IntPtr; var fbos: UInt32; count: UInt32);
    begin
      z_DrawCommandsStatesNV_ovr_24(buffer, indirects[0], sizes, states, fbos, count);
    end;
    public z_DrawCommandsStatesNV_ovr_26 := GetFuncOrNil&<procedure(buffer: UInt32; var indirects: IntPtr; sizes: IntPtr; states: IntPtr; fbos: IntPtr; count: UInt32)>(z_DrawCommandsStatesNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure DrawCommandsStatesNV(buffer: UInt32; indirects: array of IntPtr; sizes: IntPtr; states: IntPtr; fbos: IntPtr; count: UInt32);
    begin
      z_DrawCommandsStatesNV_ovr_26(buffer, indirects[0], sizes, states, fbos, count);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure DrawCommandsStatesNV(buffer: UInt32; var indirects: IntPtr; sizes: array of Int32; states: array of UInt32; fbos: array of UInt32; count: UInt32);
    begin
      z_DrawCommandsStatesNV_ovr_0(buffer, indirects, sizes[0], states[0], fbos[0], count);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure DrawCommandsStatesNV(buffer: UInt32; var indirects: IntPtr; sizes: array of Int32; states: array of UInt32; var fbos: UInt32; count: UInt32);
    begin
      z_DrawCommandsStatesNV_ovr_0(buffer, indirects, sizes[0], states[0], fbos, count);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure DrawCommandsStatesNV(buffer: UInt32; var indirects: IntPtr; sizes: array of Int32; states: array of UInt32; fbos: IntPtr; count: UInt32);
    begin
      z_DrawCommandsStatesNV_ovr_2(buffer, indirects, sizes[0], states[0], fbos, count);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure DrawCommandsStatesNV(buffer: UInt32; var indirects: IntPtr; sizes: array of Int32; var states: UInt32; fbos: array of UInt32; count: UInt32);
    begin
      z_DrawCommandsStatesNV_ovr_0(buffer, indirects, sizes[0], states, fbos[0], count);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure DrawCommandsStatesNV(buffer: UInt32; var indirects: IntPtr; sizes: array of Int32; var states: UInt32; var fbos: UInt32; count: UInt32);
    begin
      z_DrawCommandsStatesNV_ovr_0(buffer, indirects, sizes[0], states, fbos, count);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure DrawCommandsStatesNV(buffer: UInt32; var indirects: IntPtr; sizes: array of Int32; var states: UInt32; fbos: IntPtr; count: UInt32);
    begin
      z_DrawCommandsStatesNV_ovr_2(buffer, indirects, sizes[0], states, fbos, count);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure DrawCommandsStatesNV(buffer: UInt32; var indirects: IntPtr; sizes: array of Int32; states: IntPtr; fbos: array of UInt32; count: UInt32);
    begin
      z_DrawCommandsStatesNV_ovr_6(buffer, indirects, sizes[0], states, fbos[0], count);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure DrawCommandsStatesNV(buffer: UInt32; var indirects: IntPtr; sizes: array of Int32; states: IntPtr; var fbos: UInt32; count: UInt32);
    begin
      z_DrawCommandsStatesNV_ovr_6(buffer, indirects, sizes[0], states, fbos, count);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure DrawCommandsStatesNV(buffer: UInt32; var indirects: IntPtr; sizes: array of Int32; states: IntPtr; fbos: IntPtr; count: UInt32);
    begin
      z_DrawCommandsStatesNV_ovr_8(buffer, indirects, sizes[0], states, fbos, count);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure DrawCommandsStatesNV(buffer: UInt32; var indirects: IntPtr; var sizes: Int32; states: array of UInt32; fbos: array of UInt32; count: UInt32);
    begin
      z_DrawCommandsStatesNV_ovr_0(buffer, indirects, sizes, states[0], fbos[0], count);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure DrawCommandsStatesNV(buffer: UInt32; var indirects: IntPtr; var sizes: Int32; states: array of UInt32; var fbos: UInt32; count: UInt32);
    begin
      z_DrawCommandsStatesNV_ovr_0(buffer, indirects, sizes, states[0], fbos, count);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure DrawCommandsStatesNV(buffer: UInt32; var indirects: IntPtr; var sizes: Int32; states: array of UInt32; fbos: IntPtr; count: UInt32);
    begin
      z_DrawCommandsStatesNV_ovr_2(buffer, indirects, sizes, states[0], fbos, count);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure DrawCommandsStatesNV(buffer: UInt32; var indirects: IntPtr; var sizes: Int32; var states: UInt32; fbos: array of UInt32; count: UInt32);
    begin
      z_DrawCommandsStatesNV_ovr_0(buffer, indirects, sizes, states, fbos[0], count);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure DrawCommandsStatesNV(buffer: UInt32; var indirects: IntPtr; var sizes: Int32; var states: UInt32; var fbos: UInt32; count: UInt32);
    begin
      z_DrawCommandsStatesNV_ovr_0(buffer, indirects, sizes, states, fbos, count);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure DrawCommandsStatesNV(buffer: UInt32; var indirects: IntPtr; var sizes: Int32; var states: UInt32; fbos: IntPtr; count: UInt32);
    begin
      z_DrawCommandsStatesNV_ovr_2(buffer, indirects, sizes, states, fbos, count);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure DrawCommandsStatesNV(buffer: UInt32; var indirects: IntPtr; var sizes: Int32; states: IntPtr; fbos: array of UInt32; count: UInt32);
    begin
      z_DrawCommandsStatesNV_ovr_6(buffer, indirects, sizes, states, fbos[0], count);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure DrawCommandsStatesNV(buffer: UInt32; var indirects: IntPtr; var sizes: Int32; states: IntPtr; var fbos: UInt32; count: UInt32);
    begin
      z_DrawCommandsStatesNV_ovr_6(buffer, indirects, sizes, states, fbos, count);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure DrawCommandsStatesNV(buffer: UInt32; var indirects: IntPtr; var sizes: Int32; states: IntPtr; fbos: IntPtr; count: UInt32);
    begin
      z_DrawCommandsStatesNV_ovr_8(buffer, indirects, sizes, states, fbos, count);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure DrawCommandsStatesNV(buffer: UInt32; var indirects: IntPtr; sizes: IntPtr; states: array of UInt32; fbos: array of UInt32; count: UInt32);
    begin
      z_DrawCommandsStatesNV_ovr_18(buffer, indirects, sizes, states[0], fbos[0], count);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure DrawCommandsStatesNV(buffer: UInt32; var indirects: IntPtr; sizes: IntPtr; states: array of UInt32; var fbos: UInt32; count: UInt32);
    begin
      z_DrawCommandsStatesNV_ovr_18(buffer, indirects, sizes, states[0], fbos, count);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure DrawCommandsStatesNV(buffer: UInt32; var indirects: IntPtr; sizes: IntPtr; states: array of UInt32; fbos: IntPtr; count: UInt32);
    begin
      z_DrawCommandsStatesNV_ovr_20(buffer, indirects, sizes, states[0], fbos, count);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure DrawCommandsStatesNV(buffer: UInt32; var indirects: IntPtr; sizes: IntPtr; var states: UInt32; fbos: array of UInt32; count: UInt32);
    begin
      z_DrawCommandsStatesNV_ovr_18(buffer, indirects, sizes, states, fbos[0], count);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure DrawCommandsStatesNV(buffer: UInt32; var indirects: IntPtr; sizes: IntPtr; var states: UInt32; var fbos: UInt32; count: UInt32);
    begin
      z_DrawCommandsStatesNV_ovr_18(buffer, indirects, sizes, states, fbos, count);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure DrawCommandsStatesNV(buffer: UInt32; var indirects: IntPtr; sizes: IntPtr; var states: UInt32; fbos: IntPtr; count: UInt32);
    begin
      z_DrawCommandsStatesNV_ovr_20(buffer, indirects, sizes, states, fbos, count);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure DrawCommandsStatesNV(buffer: UInt32; var indirects: IntPtr; sizes: IntPtr; states: IntPtr; fbos: array of UInt32; count: UInt32);
    begin
      z_DrawCommandsStatesNV_ovr_24(buffer, indirects, sizes, states, fbos[0], count);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure DrawCommandsStatesNV(buffer: UInt32; var indirects: IntPtr; sizes: IntPtr; states: IntPtr; var fbos: UInt32; count: UInt32);
    begin
      z_DrawCommandsStatesNV_ovr_24(buffer, indirects, sizes, states, fbos, count);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure DrawCommandsStatesNV(buffer: UInt32; var indirects: IntPtr; sizes: IntPtr; states: IntPtr; fbos: IntPtr; count: UInt32);
    begin
      z_DrawCommandsStatesNV_ovr_26(buffer, indirects, sizes, states, fbos, count);
    end;
    public z_DrawCommandsStatesNV_ovr_54 := GetFuncOrNil&<procedure(buffer: UInt32; indirects: pointer; var sizes: Int32; var states: UInt32; var fbos: UInt32; count: UInt32)>(z_DrawCommandsStatesNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure DrawCommandsStatesNV(buffer: UInt32; indirects: pointer; sizes: array of Int32; states: array of UInt32; fbos: array of UInt32; count: UInt32);
    begin
      z_DrawCommandsStatesNV_ovr_54(buffer, indirects, sizes[0], states[0], fbos[0], count);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure DrawCommandsStatesNV(buffer: UInt32; indirects: pointer; sizes: array of Int32; states: array of UInt32; var fbos: UInt32; count: UInt32);
    begin
      z_DrawCommandsStatesNV_ovr_54(buffer, indirects, sizes[0], states[0], fbos, count);
    end;
    public z_DrawCommandsStatesNV_ovr_56 := GetFuncOrNil&<procedure(buffer: UInt32; indirects: pointer; var sizes: Int32; var states: UInt32; fbos: IntPtr; count: UInt32)>(z_DrawCommandsStatesNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure DrawCommandsStatesNV(buffer: UInt32; indirects: pointer; sizes: array of Int32; states: array of UInt32; fbos: IntPtr; count: UInt32);
    begin
      z_DrawCommandsStatesNV_ovr_56(buffer, indirects, sizes[0], states[0], fbos, count);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure DrawCommandsStatesNV(buffer: UInt32; indirects: pointer; sizes: array of Int32; var states: UInt32; fbos: array of UInt32; count: UInt32);
    begin
      z_DrawCommandsStatesNV_ovr_54(buffer, indirects, sizes[0], states, fbos[0], count);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure DrawCommandsStatesNV(buffer: UInt32; indirects: pointer; sizes: array of Int32; var states: UInt32; var fbos: UInt32; count: UInt32);
    begin
      z_DrawCommandsStatesNV_ovr_54(buffer, indirects, sizes[0], states, fbos, count);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure DrawCommandsStatesNV(buffer: UInt32; indirects: pointer; sizes: array of Int32; var states: UInt32; fbos: IntPtr; count: UInt32);
    begin
      z_DrawCommandsStatesNV_ovr_56(buffer, indirects, sizes[0], states, fbos, count);
    end;
    public z_DrawCommandsStatesNV_ovr_60 := GetFuncOrNil&<procedure(buffer: UInt32; indirects: pointer; var sizes: Int32; states: IntPtr; var fbos: UInt32; count: UInt32)>(z_DrawCommandsStatesNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure DrawCommandsStatesNV(buffer: UInt32; indirects: pointer; sizes: array of Int32; states: IntPtr; fbos: array of UInt32; count: UInt32);
    begin
      z_DrawCommandsStatesNV_ovr_60(buffer, indirects, sizes[0], states, fbos[0], count);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure DrawCommandsStatesNV(buffer: UInt32; indirects: pointer; sizes: array of Int32; states: IntPtr; var fbos: UInt32; count: UInt32);
    begin
      z_DrawCommandsStatesNV_ovr_60(buffer, indirects, sizes[0], states, fbos, count);
    end;
    public z_DrawCommandsStatesNV_ovr_62 := GetFuncOrNil&<procedure(buffer: UInt32; indirects: pointer; var sizes: Int32; states: IntPtr; fbos: IntPtr; count: UInt32)>(z_DrawCommandsStatesNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure DrawCommandsStatesNV(buffer: UInt32; indirects: pointer; sizes: array of Int32; states: IntPtr; fbos: IntPtr; count: UInt32);
    begin
      z_DrawCommandsStatesNV_ovr_62(buffer, indirects, sizes[0], states, fbos, count);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure DrawCommandsStatesNV(buffer: UInt32; indirects: pointer; var sizes: Int32; states: array of UInt32; fbos: array of UInt32; count: UInt32);
    begin
      z_DrawCommandsStatesNV_ovr_54(buffer, indirects, sizes, states[0], fbos[0], count);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure DrawCommandsStatesNV(buffer: UInt32; indirects: pointer; var sizes: Int32; states: array of UInt32; var fbos: UInt32; count: UInt32);
    begin
      z_DrawCommandsStatesNV_ovr_54(buffer, indirects, sizes, states[0], fbos, count);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure DrawCommandsStatesNV(buffer: UInt32; indirects: pointer; var sizes: Int32; states: array of UInt32; fbos: IntPtr; count: UInt32);
    begin
      z_DrawCommandsStatesNV_ovr_56(buffer, indirects, sizes, states[0], fbos, count);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure DrawCommandsStatesNV(buffer: UInt32; indirects: pointer; var sizes: Int32; var states: UInt32; fbos: array of UInt32; count: UInt32);
    begin
      z_DrawCommandsStatesNV_ovr_54(buffer, indirects, sizes, states, fbos[0], count);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure DrawCommandsStatesNV(buffer: UInt32; indirects: pointer; var sizes: Int32; var states: UInt32; var fbos: UInt32; count: UInt32);
    begin
      z_DrawCommandsStatesNV_ovr_54(buffer, indirects, sizes, states, fbos, count);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure DrawCommandsStatesNV(buffer: UInt32; indirects: pointer; var sizes: Int32; var states: UInt32; fbos: IntPtr; count: UInt32);
    begin
      z_DrawCommandsStatesNV_ovr_56(buffer, indirects, sizes, states, fbos, count);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure DrawCommandsStatesNV(buffer: UInt32; indirects: pointer; var sizes: Int32; states: IntPtr; fbos: array of UInt32; count: UInt32);
    begin
      z_DrawCommandsStatesNV_ovr_60(buffer, indirects, sizes, states, fbos[0], count);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure DrawCommandsStatesNV(buffer: UInt32; indirects: pointer; var sizes: Int32; states: IntPtr; var fbos: UInt32; count: UInt32);
    begin
      z_DrawCommandsStatesNV_ovr_60(buffer, indirects, sizes, states, fbos, count);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure DrawCommandsStatesNV(buffer: UInt32; indirects: pointer; var sizes: Int32; states: IntPtr; fbos: IntPtr; count: UInt32);
    begin
      z_DrawCommandsStatesNV_ovr_62(buffer, indirects, sizes, states, fbos, count);
    end;
    public z_DrawCommandsStatesNV_ovr_72 := GetFuncOrNil&<procedure(buffer: UInt32; indirects: pointer; sizes: IntPtr; var states: UInt32; var fbos: UInt32; count: UInt32)>(z_DrawCommandsStatesNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure DrawCommandsStatesNV(buffer: UInt32; indirects: pointer; sizes: IntPtr; states: array of UInt32; fbos: array of UInt32; count: UInt32);
    begin
      z_DrawCommandsStatesNV_ovr_72(buffer, indirects, sizes, states[0], fbos[0], count);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure DrawCommandsStatesNV(buffer: UInt32; indirects: pointer; sizes: IntPtr; states: array of UInt32; var fbos: UInt32; count: UInt32);
    begin
      z_DrawCommandsStatesNV_ovr_72(buffer, indirects, sizes, states[0], fbos, count);
    end;
    public z_DrawCommandsStatesNV_ovr_74 := GetFuncOrNil&<procedure(buffer: UInt32; indirects: pointer; sizes: IntPtr; var states: UInt32; fbos: IntPtr; count: UInt32)>(z_DrawCommandsStatesNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure DrawCommandsStatesNV(buffer: UInt32; indirects: pointer; sizes: IntPtr; states: array of UInt32; fbos: IntPtr; count: UInt32);
    begin
      z_DrawCommandsStatesNV_ovr_74(buffer, indirects, sizes, states[0], fbos, count);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure DrawCommandsStatesNV(buffer: UInt32; indirects: pointer; sizes: IntPtr; var states: UInt32; fbos: array of UInt32; count: UInt32);
    begin
      z_DrawCommandsStatesNV_ovr_72(buffer, indirects, sizes, states, fbos[0], count);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure DrawCommandsStatesNV(buffer: UInt32; indirects: pointer; sizes: IntPtr; var states: UInt32; var fbos: UInt32; count: UInt32);
    begin
      z_DrawCommandsStatesNV_ovr_72(buffer, indirects, sizes, states, fbos, count);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure DrawCommandsStatesNV(buffer: UInt32; indirects: pointer; sizes: IntPtr; var states: UInt32; fbos: IntPtr; count: UInt32);
    begin
      z_DrawCommandsStatesNV_ovr_74(buffer, indirects, sizes, states, fbos, count);
    end;
    public z_DrawCommandsStatesNV_ovr_78 := GetFuncOrNil&<procedure(buffer: UInt32; indirects: pointer; sizes: IntPtr; states: IntPtr; var fbos: UInt32; count: UInt32)>(z_DrawCommandsStatesNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure DrawCommandsStatesNV(buffer: UInt32; indirects: pointer; sizes: IntPtr; states: IntPtr; fbos: array of UInt32; count: UInt32);
    begin
      z_DrawCommandsStatesNV_ovr_78(buffer, indirects, sizes, states, fbos[0], count);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure DrawCommandsStatesNV(buffer: UInt32; indirects: pointer; sizes: IntPtr; states: IntPtr; var fbos: UInt32; count: UInt32);
    begin
      z_DrawCommandsStatesNV_ovr_78(buffer, indirects, sizes, states, fbos, count);
    end;
    public z_DrawCommandsStatesNV_ovr_80 := GetFuncOrNil&<procedure(buffer: UInt32; indirects: pointer; sizes: IntPtr; states: IntPtr; fbos: IntPtr; count: UInt32)>(z_DrawCommandsStatesNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure DrawCommandsStatesNV(buffer: UInt32; indirects: pointer; sizes: IntPtr; states: IntPtr; fbos: IntPtr; count: UInt32);
    begin
      z_DrawCommandsStatesNV_ovr_80(buffer, indirects, sizes, states, fbos, count);
    end;
    
    public z_DrawCommandsStatesAddressNV_adr := GetFuncAdr('glDrawCommandsStatesAddressNV');
    public z_DrawCommandsStatesAddressNV_ovr_0 := GetFuncOrNil&<procedure(var indirects: UInt64; var sizes: Int32; var states: UInt32; var fbos: UInt32; count: UInt32)>(z_DrawCommandsStatesAddressNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure DrawCommandsStatesAddressNV(indirects: array of UInt64; sizes: array of Int32; states: array of UInt32; fbos: array of UInt32; count: UInt32);
    begin
      z_DrawCommandsStatesAddressNV_ovr_0(indirects[0], sizes[0], states[0], fbos[0], count);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure DrawCommandsStatesAddressNV(indirects: array of UInt64; sizes: array of Int32; states: array of UInt32; var fbos: UInt32; count: UInt32);
    begin
      z_DrawCommandsStatesAddressNV_ovr_0(indirects[0], sizes[0], states[0], fbos, count);
    end;
    public z_DrawCommandsStatesAddressNV_ovr_2 := GetFuncOrNil&<procedure(var indirects: UInt64; var sizes: Int32; var states: UInt32; fbos: IntPtr; count: UInt32)>(z_DrawCommandsStatesAddressNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure DrawCommandsStatesAddressNV(indirects: array of UInt64; sizes: array of Int32; states: array of UInt32; fbos: IntPtr; count: UInt32);
    begin
      z_DrawCommandsStatesAddressNV_ovr_2(indirects[0], sizes[0], states[0], fbos, count);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure DrawCommandsStatesAddressNV(indirects: array of UInt64; sizes: array of Int32; var states: UInt32; fbos: array of UInt32; count: UInt32);
    begin
      z_DrawCommandsStatesAddressNV_ovr_0(indirects[0], sizes[0], states, fbos[0], count);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure DrawCommandsStatesAddressNV(indirects: array of UInt64; sizes: array of Int32; var states: UInt32; var fbos: UInt32; count: UInt32);
    begin
      z_DrawCommandsStatesAddressNV_ovr_0(indirects[0], sizes[0], states, fbos, count);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure DrawCommandsStatesAddressNV(indirects: array of UInt64; sizes: array of Int32; var states: UInt32; fbos: IntPtr; count: UInt32);
    begin
      z_DrawCommandsStatesAddressNV_ovr_2(indirects[0], sizes[0], states, fbos, count);
    end;
    public z_DrawCommandsStatesAddressNV_ovr_6 := GetFuncOrNil&<procedure(var indirects: UInt64; var sizes: Int32; states: IntPtr; var fbos: UInt32; count: UInt32)>(z_DrawCommandsStatesAddressNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure DrawCommandsStatesAddressNV(indirects: array of UInt64; sizes: array of Int32; states: IntPtr; fbos: array of UInt32; count: UInt32);
    begin
      z_DrawCommandsStatesAddressNV_ovr_6(indirects[0], sizes[0], states, fbos[0], count);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure DrawCommandsStatesAddressNV(indirects: array of UInt64; sizes: array of Int32; states: IntPtr; var fbos: UInt32; count: UInt32);
    begin
      z_DrawCommandsStatesAddressNV_ovr_6(indirects[0], sizes[0], states, fbos, count);
    end;
    public z_DrawCommandsStatesAddressNV_ovr_8 := GetFuncOrNil&<procedure(var indirects: UInt64; var sizes: Int32; states: IntPtr; fbos: IntPtr; count: UInt32)>(z_DrawCommandsStatesAddressNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure DrawCommandsStatesAddressNV(indirects: array of UInt64; sizes: array of Int32; states: IntPtr; fbos: IntPtr; count: UInt32);
    begin
      z_DrawCommandsStatesAddressNV_ovr_8(indirects[0], sizes[0], states, fbos, count);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure DrawCommandsStatesAddressNV(indirects: array of UInt64; var sizes: Int32; states: array of UInt32; fbos: array of UInt32; count: UInt32);
    begin
      z_DrawCommandsStatesAddressNV_ovr_0(indirects[0], sizes, states[0], fbos[0], count);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure DrawCommandsStatesAddressNV(indirects: array of UInt64; var sizes: Int32; states: array of UInt32; var fbos: UInt32; count: UInt32);
    begin
      z_DrawCommandsStatesAddressNV_ovr_0(indirects[0], sizes, states[0], fbos, count);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure DrawCommandsStatesAddressNV(indirects: array of UInt64; var sizes: Int32; states: array of UInt32; fbos: IntPtr; count: UInt32);
    begin
      z_DrawCommandsStatesAddressNV_ovr_2(indirects[0], sizes, states[0], fbos, count);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure DrawCommandsStatesAddressNV(indirects: array of UInt64; var sizes: Int32; var states: UInt32; fbos: array of UInt32; count: UInt32);
    begin
      z_DrawCommandsStatesAddressNV_ovr_0(indirects[0], sizes, states, fbos[0], count);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure DrawCommandsStatesAddressNV(indirects: array of UInt64; var sizes: Int32; var states: UInt32; var fbos: UInt32; count: UInt32);
    begin
      z_DrawCommandsStatesAddressNV_ovr_0(indirects[0], sizes, states, fbos, count);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure DrawCommandsStatesAddressNV(indirects: array of UInt64; var sizes: Int32; var states: UInt32; fbos: IntPtr; count: UInt32);
    begin
      z_DrawCommandsStatesAddressNV_ovr_2(indirects[0], sizes, states, fbos, count);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure DrawCommandsStatesAddressNV(indirects: array of UInt64; var sizes: Int32; states: IntPtr; fbos: array of UInt32; count: UInt32);
    begin
      z_DrawCommandsStatesAddressNV_ovr_6(indirects[0], sizes, states, fbos[0], count);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure DrawCommandsStatesAddressNV(indirects: array of UInt64; var sizes: Int32; states: IntPtr; var fbos: UInt32; count: UInt32);
    begin
      z_DrawCommandsStatesAddressNV_ovr_6(indirects[0], sizes, states, fbos, count);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure DrawCommandsStatesAddressNV(indirects: array of UInt64; var sizes: Int32; states: IntPtr; fbos: IntPtr; count: UInt32);
    begin
      z_DrawCommandsStatesAddressNV_ovr_8(indirects[0], sizes, states, fbos, count);
    end;
    public z_DrawCommandsStatesAddressNV_ovr_18 := GetFuncOrNil&<procedure(var indirects: UInt64; sizes: IntPtr; var states: UInt32; var fbos: UInt32; count: UInt32)>(z_DrawCommandsStatesAddressNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure DrawCommandsStatesAddressNV(indirects: array of UInt64; sizes: IntPtr; states: array of UInt32; fbos: array of UInt32; count: UInt32);
    begin
      z_DrawCommandsStatesAddressNV_ovr_18(indirects[0], sizes, states[0], fbos[0], count);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure DrawCommandsStatesAddressNV(indirects: array of UInt64; sizes: IntPtr; states: array of UInt32; var fbos: UInt32; count: UInt32);
    begin
      z_DrawCommandsStatesAddressNV_ovr_18(indirects[0], sizes, states[0], fbos, count);
    end;
    public z_DrawCommandsStatesAddressNV_ovr_20 := GetFuncOrNil&<procedure(var indirects: UInt64; sizes: IntPtr; var states: UInt32; fbos: IntPtr; count: UInt32)>(z_DrawCommandsStatesAddressNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure DrawCommandsStatesAddressNV(indirects: array of UInt64; sizes: IntPtr; states: array of UInt32; fbos: IntPtr; count: UInt32);
    begin
      z_DrawCommandsStatesAddressNV_ovr_20(indirects[0], sizes, states[0], fbos, count);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure DrawCommandsStatesAddressNV(indirects: array of UInt64; sizes: IntPtr; var states: UInt32; fbos: array of UInt32; count: UInt32);
    begin
      z_DrawCommandsStatesAddressNV_ovr_18(indirects[0], sizes, states, fbos[0], count);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure DrawCommandsStatesAddressNV(indirects: array of UInt64; sizes: IntPtr; var states: UInt32; var fbos: UInt32; count: UInt32);
    begin
      z_DrawCommandsStatesAddressNV_ovr_18(indirects[0], sizes, states, fbos, count);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure DrawCommandsStatesAddressNV(indirects: array of UInt64; sizes: IntPtr; var states: UInt32; fbos: IntPtr; count: UInt32);
    begin
      z_DrawCommandsStatesAddressNV_ovr_20(indirects[0], sizes, states, fbos, count);
    end;
    public z_DrawCommandsStatesAddressNV_ovr_24 := GetFuncOrNil&<procedure(var indirects: UInt64; sizes: IntPtr; states: IntPtr; var fbos: UInt32; count: UInt32)>(z_DrawCommandsStatesAddressNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure DrawCommandsStatesAddressNV(indirects: array of UInt64; sizes: IntPtr; states: IntPtr; fbos: array of UInt32; count: UInt32);
    begin
      z_DrawCommandsStatesAddressNV_ovr_24(indirects[0], sizes, states, fbos[0], count);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure DrawCommandsStatesAddressNV(indirects: array of UInt64; sizes: IntPtr; states: IntPtr; var fbos: UInt32; count: UInt32);
    begin
      z_DrawCommandsStatesAddressNV_ovr_24(indirects[0], sizes, states, fbos, count);
    end;
    public z_DrawCommandsStatesAddressNV_ovr_26 := GetFuncOrNil&<procedure(var indirects: UInt64; sizes: IntPtr; states: IntPtr; fbos: IntPtr; count: UInt32)>(z_DrawCommandsStatesAddressNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure DrawCommandsStatesAddressNV(indirects: array of UInt64; sizes: IntPtr; states: IntPtr; fbos: IntPtr; count: UInt32);
    begin
      z_DrawCommandsStatesAddressNV_ovr_26(indirects[0], sizes, states, fbos, count);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure DrawCommandsStatesAddressNV(var indirects: UInt64; sizes: array of Int32; states: array of UInt32; fbos: array of UInt32; count: UInt32);
    begin
      z_DrawCommandsStatesAddressNV_ovr_0(indirects, sizes[0], states[0], fbos[0], count);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure DrawCommandsStatesAddressNV(var indirects: UInt64; sizes: array of Int32; states: array of UInt32; var fbos: UInt32; count: UInt32);
    begin
      z_DrawCommandsStatesAddressNV_ovr_0(indirects, sizes[0], states[0], fbos, count);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure DrawCommandsStatesAddressNV(var indirects: UInt64; sizes: array of Int32; states: array of UInt32; fbos: IntPtr; count: UInt32);
    begin
      z_DrawCommandsStatesAddressNV_ovr_2(indirects, sizes[0], states[0], fbos, count);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure DrawCommandsStatesAddressNV(var indirects: UInt64; sizes: array of Int32; var states: UInt32; fbos: array of UInt32; count: UInt32);
    begin
      z_DrawCommandsStatesAddressNV_ovr_0(indirects, sizes[0], states, fbos[0], count);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure DrawCommandsStatesAddressNV(var indirects: UInt64; sizes: array of Int32; var states: UInt32; var fbos: UInt32; count: UInt32);
    begin
      z_DrawCommandsStatesAddressNV_ovr_0(indirects, sizes[0], states, fbos, count);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure DrawCommandsStatesAddressNV(var indirects: UInt64; sizes: array of Int32; var states: UInt32; fbos: IntPtr; count: UInt32);
    begin
      z_DrawCommandsStatesAddressNV_ovr_2(indirects, sizes[0], states, fbos, count);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure DrawCommandsStatesAddressNV(var indirects: UInt64; sizes: array of Int32; states: IntPtr; fbos: array of UInt32; count: UInt32);
    begin
      z_DrawCommandsStatesAddressNV_ovr_6(indirects, sizes[0], states, fbos[0], count);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure DrawCommandsStatesAddressNV(var indirects: UInt64; sizes: array of Int32; states: IntPtr; var fbos: UInt32; count: UInt32);
    begin
      z_DrawCommandsStatesAddressNV_ovr_6(indirects, sizes[0], states, fbos, count);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure DrawCommandsStatesAddressNV(var indirects: UInt64; sizes: array of Int32; states: IntPtr; fbos: IntPtr; count: UInt32);
    begin
      z_DrawCommandsStatesAddressNV_ovr_8(indirects, sizes[0], states, fbos, count);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure DrawCommandsStatesAddressNV(var indirects: UInt64; var sizes: Int32; states: array of UInt32; fbos: array of UInt32; count: UInt32);
    begin
      z_DrawCommandsStatesAddressNV_ovr_0(indirects, sizes, states[0], fbos[0], count);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure DrawCommandsStatesAddressNV(var indirects: UInt64; var sizes: Int32; states: array of UInt32; var fbos: UInt32; count: UInt32);
    begin
      z_DrawCommandsStatesAddressNV_ovr_0(indirects, sizes, states[0], fbos, count);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure DrawCommandsStatesAddressNV(var indirects: UInt64; var sizes: Int32; states: array of UInt32; fbos: IntPtr; count: UInt32);
    begin
      z_DrawCommandsStatesAddressNV_ovr_2(indirects, sizes, states[0], fbos, count);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure DrawCommandsStatesAddressNV(var indirects: UInt64; var sizes: Int32; var states: UInt32; fbos: array of UInt32; count: UInt32);
    begin
      z_DrawCommandsStatesAddressNV_ovr_0(indirects, sizes, states, fbos[0], count);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure DrawCommandsStatesAddressNV(var indirects: UInt64; var sizes: Int32; var states: UInt32; var fbos: UInt32; count: UInt32);
    begin
      z_DrawCommandsStatesAddressNV_ovr_0(indirects, sizes, states, fbos, count);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure DrawCommandsStatesAddressNV(var indirects: UInt64; var sizes: Int32; var states: UInt32; fbos: IntPtr; count: UInt32);
    begin
      z_DrawCommandsStatesAddressNV_ovr_2(indirects, sizes, states, fbos, count);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure DrawCommandsStatesAddressNV(var indirects: UInt64; var sizes: Int32; states: IntPtr; fbos: array of UInt32; count: UInt32);
    begin
      z_DrawCommandsStatesAddressNV_ovr_6(indirects, sizes, states, fbos[0], count);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure DrawCommandsStatesAddressNV(var indirects: UInt64; var sizes: Int32; states: IntPtr; var fbos: UInt32; count: UInt32);
    begin
      z_DrawCommandsStatesAddressNV_ovr_6(indirects, sizes, states, fbos, count);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure DrawCommandsStatesAddressNV(var indirects: UInt64; var sizes: Int32; states: IntPtr; fbos: IntPtr; count: UInt32);
    begin
      z_DrawCommandsStatesAddressNV_ovr_8(indirects, sizes, states, fbos, count);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure DrawCommandsStatesAddressNV(var indirects: UInt64; sizes: IntPtr; states: array of UInt32; fbos: array of UInt32; count: UInt32);
    begin
      z_DrawCommandsStatesAddressNV_ovr_18(indirects, sizes, states[0], fbos[0], count);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure DrawCommandsStatesAddressNV(var indirects: UInt64; sizes: IntPtr; states: array of UInt32; var fbos: UInt32; count: UInt32);
    begin
      z_DrawCommandsStatesAddressNV_ovr_18(indirects, sizes, states[0], fbos, count);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure DrawCommandsStatesAddressNV(var indirects: UInt64; sizes: IntPtr; states: array of UInt32; fbos: IntPtr; count: UInt32);
    begin
      z_DrawCommandsStatesAddressNV_ovr_20(indirects, sizes, states[0], fbos, count);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure DrawCommandsStatesAddressNV(var indirects: UInt64; sizes: IntPtr; var states: UInt32; fbos: array of UInt32; count: UInt32);
    begin
      z_DrawCommandsStatesAddressNV_ovr_18(indirects, sizes, states, fbos[0], count);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure DrawCommandsStatesAddressNV(var indirects: UInt64; sizes: IntPtr; var states: UInt32; var fbos: UInt32; count: UInt32);
    begin
      z_DrawCommandsStatesAddressNV_ovr_18(indirects, sizes, states, fbos, count);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure DrawCommandsStatesAddressNV(var indirects: UInt64; sizes: IntPtr; var states: UInt32; fbos: IntPtr; count: UInt32);
    begin
      z_DrawCommandsStatesAddressNV_ovr_20(indirects, sizes, states, fbos, count);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure DrawCommandsStatesAddressNV(var indirects: UInt64; sizes: IntPtr; states: IntPtr; fbos: array of UInt32; count: UInt32);
    begin
      z_DrawCommandsStatesAddressNV_ovr_24(indirects, sizes, states, fbos[0], count);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure DrawCommandsStatesAddressNV(var indirects: UInt64; sizes: IntPtr; states: IntPtr; var fbos: UInt32; count: UInt32);
    begin
      z_DrawCommandsStatesAddressNV_ovr_24(indirects, sizes, states, fbos, count);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure DrawCommandsStatesAddressNV(var indirects: UInt64; sizes: IntPtr; states: IntPtr; fbos: IntPtr; count: UInt32);
    begin
      z_DrawCommandsStatesAddressNV_ovr_26(indirects, sizes, states, fbos, count);
    end;
    public z_DrawCommandsStatesAddressNV_ovr_54 := GetFuncOrNil&<procedure(indirects: IntPtr; var sizes: Int32; var states: UInt32; var fbos: UInt32; count: UInt32)>(z_DrawCommandsStatesAddressNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure DrawCommandsStatesAddressNV(indirects: IntPtr; sizes: array of Int32; states: array of UInt32; fbos: array of UInt32; count: UInt32);
    begin
      z_DrawCommandsStatesAddressNV_ovr_54(indirects, sizes[0], states[0], fbos[0], count);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure DrawCommandsStatesAddressNV(indirects: IntPtr; sizes: array of Int32; states: array of UInt32; var fbos: UInt32; count: UInt32);
    begin
      z_DrawCommandsStatesAddressNV_ovr_54(indirects, sizes[0], states[0], fbos, count);
    end;
    public z_DrawCommandsStatesAddressNV_ovr_56 := GetFuncOrNil&<procedure(indirects: IntPtr; var sizes: Int32; var states: UInt32; fbos: IntPtr; count: UInt32)>(z_DrawCommandsStatesAddressNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure DrawCommandsStatesAddressNV(indirects: IntPtr; sizes: array of Int32; states: array of UInt32; fbos: IntPtr; count: UInt32);
    begin
      z_DrawCommandsStatesAddressNV_ovr_56(indirects, sizes[0], states[0], fbos, count);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure DrawCommandsStatesAddressNV(indirects: IntPtr; sizes: array of Int32; var states: UInt32; fbos: array of UInt32; count: UInt32);
    begin
      z_DrawCommandsStatesAddressNV_ovr_54(indirects, sizes[0], states, fbos[0], count);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure DrawCommandsStatesAddressNV(indirects: IntPtr; sizes: array of Int32; var states: UInt32; var fbos: UInt32; count: UInt32);
    begin
      z_DrawCommandsStatesAddressNV_ovr_54(indirects, sizes[0], states, fbos, count);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure DrawCommandsStatesAddressNV(indirects: IntPtr; sizes: array of Int32; var states: UInt32; fbos: IntPtr; count: UInt32);
    begin
      z_DrawCommandsStatesAddressNV_ovr_56(indirects, sizes[0], states, fbos, count);
    end;
    public z_DrawCommandsStatesAddressNV_ovr_60 := GetFuncOrNil&<procedure(indirects: IntPtr; var sizes: Int32; states: IntPtr; var fbos: UInt32; count: UInt32)>(z_DrawCommandsStatesAddressNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure DrawCommandsStatesAddressNV(indirects: IntPtr; sizes: array of Int32; states: IntPtr; fbos: array of UInt32; count: UInt32);
    begin
      z_DrawCommandsStatesAddressNV_ovr_60(indirects, sizes[0], states, fbos[0], count);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure DrawCommandsStatesAddressNV(indirects: IntPtr; sizes: array of Int32; states: IntPtr; var fbos: UInt32; count: UInt32);
    begin
      z_DrawCommandsStatesAddressNV_ovr_60(indirects, sizes[0], states, fbos, count);
    end;
    public z_DrawCommandsStatesAddressNV_ovr_62 := GetFuncOrNil&<procedure(indirects: IntPtr; var sizes: Int32; states: IntPtr; fbos: IntPtr; count: UInt32)>(z_DrawCommandsStatesAddressNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure DrawCommandsStatesAddressNV(indirects: IntPtr; sizes: array of Int32; states: IntPtr; fbos: IntPtr; count: UInt32);
    begin
      z_DrawCommandsStatesAddressNV_ovr_62(indirects, sizes[0], states, fbos, count);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure DrawCommandsStatesAddressNV(indirects: IntPtr; var sizes: Int32; states: array of UInt32; fbos: array of UInt32; count: UInt32);
    begin
      z_DrawCommandsStatesAddressNV_ovr_54(indirects, sizes, states[0], fbos[0], count);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure DrawCommandsStatesAddressNV(indirects: IntPtr; var sizes: Int32; states: array of UInt32; var fbos: UInt32; count: UInt32);
    begin
      z_DrawCommandsStatesAddressNV_ovr_54(indirects, sizes, states[0], fbos, count);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure DrawCommandsStatesAddressNV(indirects: IntPtr; var sizes: Int32; states: array of UInt32; fbos: IntPtr; count: UInt32);
    begin
      z_DrawCommandsStatesAddressNV_ovr_56(indirects, sizes, states[0], fbos, count);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure DrawCommandsStatesAddressNV(indirects: IntPtr; var sizes: Int32; var states: UInt32; fbos: array of UInt32; count: UInt32);
    begin
      z_DrawCommandsStatesAddressNV_ovr_54(indirects, sizes, states, fbos[0], count);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure DrawCommandsStatesAddressNV(indirects: IntPtr; var sizes: Int32; var states: UInt32; var fbos: UInt32; count: UInt32);
    begin
      z_DrawCommandsStatesAddressNV_ovr_54(indirects, sizes, states, fbos, count);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure DrawCommandsStatesAddressNV(indirects: IntPtr; var sizes: Int32; var states: UInt32; fbos: IntPtr; count: UInt32);
    begin
      z_DrawCommandsStatesAddressNV_ovr_56(indirects, sizes, states, fbos, count);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure DrawCommandsStatesAddressNV(indirects: IntPtr; var sizes: Int32; states: IntPtr; fbos: array of UInt32; count: UInt32);
    begin
      z_DrawCommandsStatesAddressNV_ovr_60(indirects, sizes, states, fbos[0], count);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure DrawCommandsStatesAddressNV(indirects: IntPtr; var sizes: Int32; states: IntPtr; var fbos: UInt32; count: UInt32);
    begin
      z_DrawCommandsStatesAddressNV_ovr_60(indirects, sizes, states, fbos, count);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure DrawCommandsStatesAddressNV(indirects: IntPtr; var sizes: Int32; states: IntPtr; fbos: IntPtr; count: UInt32);
    begin
      z_DrawCommandsStatesAddressNV_ovr_62(indirects, sizes, states, fbos, count);
    end;
    public z_DrawCommandsStatesAddressNV_ovr_72 := GetFuncOrNil&<procedure(indirects: IntPtr; sizes: IntPtr; var states: UInt32; var fbos: UInt32; count: UInt32)>(z_DrawCommandsStatesAddressNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure DrawCommandsStatesAddressNV(indirects: IntPtr; sizes: IntPtr; states: array of UInt32; fbos: array of UInt32; count: UInt32);
    begin
      z_DrawCommandsStatesAddressNV_ovr_72(indirects, sizes, states[0], fbos[0], count);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure DrawCommandsStatesAddressNV(indirects: IntPtr; sizes: IntPtr; states: array of UInt32; var fbos: UInt32; count: UInt32);
    begin
      z_DrawCommandsStatesAddressNV_ovr_72(indirects, sizes, states[0], fbos, count);
    end;
    public z_DrawCommandsStatesAddressNV_ovr_74 := GetFuncOrNil&<procedure(indirects: IntPtr; sizes: IntPtr; var states: UInt32; fbos: IntPtr; count: UInt32)>(z_DrawCommandsStatesAddressNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure DrawCommandsStatesAddressNV(indirects: IntPtr; sizes: IntPtr; states: array of UInt32; fbos: IntPtr; count: UInt32);
    begin
      z_DrawCommandsStatesAddressNV_ovr_74(indirects, sizes, states[0], fbos, count);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure DrawCommandsStatesAddressNV(indirects: IntPtr; sizes: IntPtr; var states: UInt32; fbos: array of UInt32; count: UInt32);
    begin
      z_DrawCommandsStatesAddressNV_ovr_72(indirects, sizes, states, fbos[0], count);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure DrawCommandsStatesAddressNV(indirects: IntPtr; sizes: IntPtr; var states: UInt32; var fbos: UInt32; count: UInt32);
    begin
      z_DrawCommandsStatesAddressNV_ovr_72(indirects, sizes, states, fbos, count);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure DrawCommandsStatesAddressNV(indirects: IntPtr; sizes: IntPtr; var states: UInt32; fbos: IntPtr; count: UInt32);
    begin
      z_DrawCommandsStatesAddressNV_ovr_74(indirects, sizes, states, fbos, count);
    end;
    public z_DrawCommandsStatesAddressNV_ovr_78 := GetFuncOrNil&<procedure(indirects: IntPtr; sizes: IntPtr; states: IntPtr; var fbos: UInt32; count: UInt32)>(z_DrawCommandsStatesAddressNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure DrawCommandsStatesAddressNV(indirects: IntPtr; sizes: IntPtr; states: IntPtr; fbos: array of UInt32; count: UInt32);
    begin
      z_DrawCommandsStatesAddressNV_ovr_78(indirects, sizes, states, fbos[0], count);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure DrawCommandsStatesAddressNV(indirects: IntPtr; sizes: IntPtr; states: IntPtr; var fbos: UInt32; count: UInt32);
    begin
      z_DrawCommandsStatesAddressNV_ovr_78(indirects, sizes, states, fbos, count);
    end;
    public z_DrawCommandsStatesAddressNV_ovr_80 := GetFuncOrNil&<procedure(indirects: IntPtr; sizes: IntPtr; states: IntPtr; fbos: IntPtr; count: UInt32)>(z_DrawCommandsStatesAddressNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure DrawCommandsStatesAddressNV(indirects: IntPtr; sizes: IntPtr; states: IntPtr; fbos: IntPtr; count: UInt32);
    begin
      z_DrawCommandsStatesAddressNV_ovr_80(indirects, sizes, states, fbos, count);
    end;
    
    public z_CreateCommandListsNV_adr := GetFuncAdr('glCreateCommandListsNV');
    public z_CreateCommandListsNV_ovr_0 := GetFuncOrNil&<procedure(n: Int32; var lists: UInt32)>(z_CreateCommandListsNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure CreateCommandListsNV(n: Int32; lists: array of UInt32);
    begin
      z_CreateCommandListsNV_ovr_0(n, lists[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure CreateCommandListsNV(n: Int32; var lists: UInt32);
    begin
      z_CreateCommandListsNV_ovr_0(n, lists);
    end;
    public z_CreateCommandListsNV_ovr_2 := GetFuncOrNil&<procedure(n: Int32; lists: IntPtr)>(z_CreateCommandListsNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure CreateCommandListsNV(n: Int32; lists: IntPtr);
    begin
      z_CreateCommandListsNV_ovr_2(n, lists);
    end;
    
    public z_DeleteCommandListsNV_adr := GetFuncAdr('glDeleteCommandListsNV');
    public z_DeleteCommandListsNV_ovr_0 := GetFuncOrNil&<procedure(n: Int32; var lists: UInt32)>(z_DeleteCommandListsNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure DeleteCommandListsNV(n: Int32; lists: array of UInt32);
    begin
      z_DeleteCommandListsNV_ovr_0(n, lists[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure DeleteCommandListsNV(n: Int32; var lists: UInt32);
    begin
      z_DeleteCommandListsNV_ovr_0(n, lists);
    end;
    public z_DeleteCommandListsNV_ovr_2 := GetFuncOrNil&<procedure(n: Int32; lists: IntPtr)>(z_DeleteCommandListsNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure DeleteCommandListsNV(n: Int32; lists: IntPtr);
    begin
      z_DeleteCommandListsNV_ovr_2(n, lists);
    end;
    
    public z_IsCommandListNV_adr := GetFuncAdr('glIsCommandListNV');
    public z_IsCommandListNV_ovr_0 := GetFuncOrNil&<function(list: UInt32): boolean>(z_IsCommandListNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function IsCommandListNV(list: UInt32): boolean;
    begin
      Result := z_IsCommandListNV_ovr_0(list);
    end;
    
    public z_ListDrawCommandsStatesClientNV_adr := GetFuncAdr('glListDrawCommandsStatesClientNV');
    public z_ListDrawCommandsStatesClientNV_ovr_0 := GetFuncOrNil&<procedure(list: UInt32; segment: UInt32; var indirects: IntPtr; var sizes: Int32; var states: UInt32; var fbos: UInt32; count: UInt32)>(z_ListDrawCommandsStatesClientNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ListDrawCommandsStatesClientNV(list: UInt32; segment: UInt32; indirects: array of IntPtr; sizes: array of Int32; states: array of UInt32; fbos: array of UInt32; count: UInt32);
    begin
      z_ListDrawCommandsStatesClientNV_ovr_0(list, segment, indirects[0], sizes[0], states[0], fbos[0], count);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ListDrawCommandsStatesClientNV(list: UInt32; segment: UInt32; indirects: array of IntPtr; sizes: array of Int32; states: array of UInt32; var fbos: UInt32; count: UInt32);
    begin
      z_ListDrawCommandsStatesClientNV_ovr_0(list, segment, indirects[0], sizes[0], states[0], fbos, count);
    end;
    public z_ListDrawCommandsStatesClientNV_ovr_2 := GetFuncOrNil&<procedure(list: UInt32; segment: UInt32; var indirects: IntPtr; var sizes: Int32; var states: UInt32; fbos: IntPtr; count: UInt32)>(z_ListDrawCommandsStatesClientNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ListDrawCommandsStatesClientNV(list: UInt32; segment: UInt32; indirects: array of IntPtr; sizes: array of Int32; states: array of UInt32; fbos: IntPtr; count: UInt32);
    begin
      z_ListDrawCommandsStatesClientNV_ovr_2(list, segment, indirects[0], sizes[0], states[0], fbos, count);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ListDrawCommandsStatesClientNV(list: UInt32; segment: UInt32; indirects: array of IntPtr; sizes: array of Int32; var states: UInt32; fbos: array of UInt32; count: UInt32);
    begin
      z_ListDrawCommandsStatesClientNV_ovr_0(list, segment, indirects[0], sizes[0], states, fbos[0], count);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ListDrawCommandsStatesClientNV(list: UInt32; segment: UInt32; indirects: array of IntPtr; sizes: array of Int32; var states: UInt32; var fbos: UInt32; count: UInt32);
    begin
      z_ListDrawCommandsStatesClientNV_ovr_0(list, segment, indirects[0], sizes[0], states, fbos, count);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ListDrawCommandsStatesClientNV(list: UInt32; segment: UInt32; indirects: array of IntPtr; sizes: array of Int32; var states: UInt32; fbos: IntPtr; count: UInt32);
    begin
      z_ListDrawCommandsStatesClientNV_ovr_2(list, segment, indirects[0], sizes[0], states, fbos, count);
    end;
    public z_ListDrawCommandsStatesClientNV_ovr_6 := GetFuncOrNil&<procedure(list: UInt32; segment: UInt32; var indirects: IntPtr; var sizes: Int32; states: IntPtr; var fbos: UInt32; count: UInt32)>(z_ListDrawCommandsStatesClientNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ListDrawCommandsStatesClientNV(list: UInt32; segment: UInt32; indirects: array of IntPtr; sizes: array of Int32; states: IntPtr; fbos: array of UInt32; count: UInt32);
    begin
      z_ListDrawCommandsStatesClientNV_ovr_6(list, segment, indirects[0], sizes[0], states, fbos[0], count);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ListDrawCommandsStatesClientNV(list: UInt32; segment: UInt32; indirects: array of IntPtr; sizes: array of Int32; states: IntPtr; var fbos: UInt32; count: UInt32);
    begin
      z_ListDrawCommandsStatesClientNV_ovr_6(list, segment, indirects[0], sizes[0], states, fbos, count);
    end;
    public z_ListDrawCommandsStatesClientNV_ovr_8 := GetFuncOrNil&<procedure(list: UInt32; segment: UInt32; var indirects: IntPtr; var sizes: Int32; states: IntPtr; fbos: IntPtr; count: UInt32)>(z_ListDrawCommandsStatesClientNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ListDrawCommandsStatesClientNV(list: UInt32; segment: UInt32; indirects: array of IntPtr; sizes: array of Int32; states: IntPtr; fbos: IntPtr; count: UInt32);
    begin
      z_ListDrawCommandsStatesClientNV_ovr_8(list, segment, indirects[0], sizes[0], states, fbos, count);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ListDrawCommandsStatesClientNV(list: UInt32; segment: UInt32; indirects: array of IntPtr; var sizes: Int32; states: array of UInt32; fbos: array of UInt32; count: UInt32);
    begin
      z_ListDrawCommandsStatesClientNV_ovr_0(list, segment, indirects[0], sizes, states[0], fbos[0], count);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ListDrawCommandsStatesClientNV(list: UInt32; segment: UInt32; indirects: array of IntPtr; var sizes: Int32; states: array of UInt32; var fbos: UInt32; count: UInt32);
    begin
      z_ListDrawCommandsStatesClientNV_ovr_0(list, segment, indirects[0], sizes, states[0], fbos, count);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ListDrawCommandsStatesClientNV(list: UInt32; segment: UInt32; indirects: array of IntPtr; var sizes: Int32; states: array of UInt32; fbos: IntPtr; count: UInt32);
    begin
      z_ListDrawCommandsStatesClientNV_ovr_2(list, segment, indirects[0], sizes, states[0], fbos, count);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ListDrawCommandsStatesClientNV(list: UInt32; segment: UInt32; indirects: array of IntPtr; var sizes: Int32; var states: UInt32; fbos: array of UInt32; count: UInt32);
    begin
      z_ListDrawCommandsStatesClientNV_ovr_0(list, segment, indirects[0], sizes, states, fbos[0], count);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ListDrawCommandsStatesClientNV(list: UInt32; segment: UInt32; indirects: array of IntPtr; var sizes: Int32; var states: UInt32; var fbos: UInt32; count: UInt32);
    begin
      z_ListDrawCommandsStatesClientNV_ovr_0(list, segment, indirects[0], sizes, states, fbos, count);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ListDrawCommandsStatesClientNV(list: UInt32; segment: UInt32; indirects: array of IntPtr; var sizes: Int32; var states: UInt32; fbos: IntPtr; count: UInt32);
    begin
      z_ListDrawCommandsStatesClientNV_ovr_2(list, segment, indirects[0], sizes, states, fbos, count);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ListDrawCommandsStatesClientNV(list: UInt32; segment: UInt32; indirects: array of IntPtr; var sizes: Int32; states: IntPtr; fbos: array of UInt32; count: UInt32);
    begin
      z_ListDrawCommandsStatesClientNV_ovr_6(list, segment, indirects[0], sizes, states, fbos[0], count);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ListDrawCommandsStatesClientNV(list: UInt32; segment: UInt32; indirects: array of IntPtr; var sizes: Int32; states: IntPtr; var fbos: UInt32; count: UInt32);
    begin
      z_ListDrawCommandsStatesClientNV_ovr_6(list, segment, indirects[0], sizes, states, fbos, count);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ListDrawCommandsStatesClientNV(list: UInt32; segment: UInt32; indirects: array of IntPtr; var sizes: Int32; states: IntPtr; fbos: IntPtr; count: UInt32);
    begin
      z_ListDrawCommandsStatesClientNV_ovr_8(list, segment, indirects[0], sizes, states, fbos, count);
    end;
    public z_ListDrawCommandsStatesClientNV_ovr_18 := GetFuncOrNil&<procedure(list: UInt32; segment: UInt32; var indirects: IntPtr; sizes: IntPtr; var states: UInt32; var fbos: UInt32; count: UInt32)>(z_ListDrawCommandsStatesClientNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ListDrawCommandsStatesClientNV(list: UInt32; segment: UInt32; indirects: array of IntPtr; sizes: IntPtr; states: array of UInt32; fbos: array of UInt32; count: UInt32);
    begin
      z_ListDrawCommandsStatesClientNV_ovr_18(list, segment, indirects[0], sizes, states[0], fbos[0], count);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ListDrawCommandsStatesClientNV(list: UInt32; segment: UInt32; indirects: array of IntPtr; sizes: IntPtr; states: array of UInt32; var fbos: UInt32; count: UInt32);
    begin
      z_ListDrawCommandsStatesClientNV_ovr_18(list, segment, indirects[0], sizes, states[0], fbos, count);
    end;
    public z_ListDrawCommandsStatesClientNV_ovr_20 := GetFuncOrNil&<procedure(list: UInt32; segment: UInt32; var indirects: IntPtr; sizes: IntPtr; var states: UInt32; fbos: IntPtr; count: UInt32)>(z_ListDrawCommandsStatesClientNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ListDrawCommandsStatesClientNV(list: UInt32; segment: UInt32; indirects: array of IntPtr; sizes: IntPtr; states: array of UInt32; fbos: IntPtr; count: UInt32);
    begin
      z_ListDrawCommandsStatesClientNV_ovr_20(list, segment, indirects[0], sizes, states[0], fbos, count);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ListDrawCommandsStatesClientNV(list: UInt32; segment: UInt32; indirects: array of IntPtr; sizes: IntPtr; var states: UInt32; fbos: array of UInt32; count: UInt32);
    begin
      z_ListDrawCommandsStatesClientNV_ovr_18(list, segment, indirects[0], sizes, states, fbos[0], count);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ListDrawCommandsStatesClientNV(list: UInt32; segment: UInt32; indirects: array of IntPtr; sizes: IntPtr; var states: UInt32; var fbos: UInt32; count: UInt32);
    begin
      z_ListDrawCommandsStatesClientNV_ovr_18(list, segment, indirects[0], sizes, states, fbos, count);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ListDrawCommandsStatesClientNV(list: UInt32; segment: UInt32; indirects: array of IntPtr; sizes: IntPtr; var states: UInt32; fbos: IntPtr; count: UInt32);
    begin
      z_ListDrawCommandsStatesClientNV_ovr_20(list, segment, indirects[0], sizes, states, fbos, count);
    end;
    public z_ListDrawCommandsStatesClientNV_ovr_24 := GetFuncOrNil&<procedure(list: UInt32; segment: UInt32; var indirects: IntPtr; sizes: IntPtr; states: IntPtr; var fbos: UInt32; count: UInt32)>(z_ListDrawCommandsStatesClientNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ListDrawCommandsStatesClientNV(list: UInt32; segment: UInt32; indirects: array of IntPtr; sizes: IntPtr; states: IntPtr; fbos: array of UInt32; count: UInt32);
    begin
      z_ListDrawCommandsStatesClientNV_ovr_24(list, segment, indirects[0], sizes, states, fbos[0], count);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ListDrawCommandsStatesClientNV(list: UInt32; segment: UInt32; indirects: array of IntPtr; sizes: IntPtr; states: IntPtr; var fbos: UInt32; count: UInt32);
    begin
      z_ListDrawCommandsStatesClientNV_ovr_24(list, segment, indirects[0], sizes, states, fbos, count);
    end;
    public z_ListDrawCommandsStatesClientNV_ovr_26 := GetFuncOrNil&<procedure(list: UInt32; segment: UInt32; var indirects: IntPtr; sizes: IntPtr; states: IntPtr; fbos: IntPtr; count: UInt32)>(z_ListDrawCommandsStatesClientNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ListDrawCommandsStatesClientNV(list: UInt32; segment: UInt32; indirects: array of IntPtr; sizes: IntPtr; states: IntPtr; fbos: IntPtr; count: UInt32);
    begin
      z_ListDrawCommandsStatesClientNV_ovr_26(list, segment, indirects[0], sizes, states, fbos, count);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ListDrawCommandsStatesClientNV(list: UInt32; segment: UInt32; var indirects: IntPtr; sizes: array of Int32; states: array of UInt32; fbos: array of UInt32; count: UInt32);
    begin
      z_ListDrawCommandsStatesClientNV_ovr_0(list, segment, indirects, sizes[0], states[0], fbos[0], count);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ListDrawCommandsStatesClientNV(list: UInt32; segment: UInt32; var indirects: IntPtr; sizes: array of Int32; states: array of UInt32; var fbos: UInt32; count: UInt32);
    begin
      z_ListDrawCommandsStatesClientNV_ovr_0(list, segment, indirects, sizes[0], states[0], fbos, count);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ListDrawCommandsStatesClientNV(list: UInt32; segment: UInt32; var indirects: IntPtr; sizes: array of Int32; states: array of UInt32; fbos: IntPtr; count: UInt32);
    begin
      z_ListDrawCommandsStatesClientNV_ovr_2(list, segment, indirects, sizes[0], states[0], fbos, count);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ListDrawCommandsStatesClientNV(list: UInt32; segment: UInt32; var indirects: IntPtr; sizes: array of Int32; var states: UInt32; fbos: array of UInt32; count: UInt32);
    begin
      z_ListDrawCommandsStatesClientNV_ovr_0(list, segment, indirects, sizes[0], states, fbos[0], count);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ListDrawCommandsStatesClientNV(list: UInt32; segment: UInt32; var indirects: IntPtr; sizes: array of Int32; var states: UInt32; var fbos: UInt32; count: UInt32);
    begin
      z_ListDrawCommandsStatesClientNV_ovr_0(list, segment, indirects, sizes[0], states, fbos, count);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ListDrawCommandsStatesClientNV(list: UInt32; segment: UInt32; var indirects: IntPtr; sizes: array of Int32; var states: UInt32; fbos: IntPtr; count: UInt32);
    begin
      z_ListDrawCommandsStatesClientNV_ovr_2(list, segment, indirects, sizes[0], states, fbos, count);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ListDrawCommandsStatesClientNV(list: UInt32; segment: UInt32; var indirects: IntPtr; sizes: array of Int32; states: IntPtr; fbos: array of UInt32; count: UInt32);
    begin
      z_ListDrawCommandsStatesClientNV_ovr_6(list, segment, indirects, sizes[0], states, fbos[0], count);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ListDrawCommandsStatesClientNV(list: UInt32; segment: UInt32; var indirects: IntPtr; sizes: array of Int32; states: IntPtr; var fbos: UInt32; count: UInt32);
    begin
      z_ListDrawCommandsStatesClientNV_ovr_6(list, segment, indirects, sizes[0], states, fbos, count);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ListDrawCommandsStatesClientNV(list: UInt32; segment: UInt32; var indirects: IntPtr; sizes: array of Int32; states: IntPtr; fbos: IntPtr; count: UInt32);
    begin
      z_ListDrawCommandsStatesClientNV_ovr_8(list, segment, indirects, sizes[0], states, fbos, count);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ListDrawCommandsStatesClientNV(list: UInt32; segment: UInt32; var indirects: IntPtr; var sizes: Int32; states: array of UInt32; fbos: array of UInt32; count: UInt32);
    begin
      z_ListDrawCommandsStatesClientNV_ovr_0(list, segment, indirects, sizes, states[0], fbos[0], count);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ListDrawCommandsStatesClientNV(list: UInt32; segment: UInt32; var indirects: IntPtr; var sizes: Int32; states: array of UInt32; var fbos: UInt32; count: UInt32);
    begin
      z_ListDrawCommandsStatesClientNV_ovr_0(list, segment, indirects, sizes, states[0], fbos, count);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ListDrawCommandsStatesClientNV(list: UInt32; segment: UInt32; var indirects: IntPtr; var sizes: Int32; states: array of UInt32; fbos: IntPtr; count: UInt32);
    begin
      z_ListDrawCommandsStatesClientNV_ovr_2(list, segment, indirects, sizes, states[0], fbos, count);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ListDrawCommandsStatesClientNV(list: UInt32; segment: UInt32; var indirects: IntPtr; var sizes: Int32; var states: UInt32; fbos: array of UInt32; count: UInt32);
    begin
      z_ListDrawCommandsStatesClientNV_ovr_0(list, segment, indirects, sizes, states, fbos[0], count);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ListDrawCommandsStatesClientNV(list: UInt32; segment: UInt32; var indirects: IntPtr; var sizes: Int32; var states: UInt32; var fbos: UInt32; count: UInt32);
    begin
      z_ListDrawCommandsStatesClientNV_ovr_0(list, segment, indirects, sizes, states, fbos, count);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ListDrawCommandsStatesClientNV(list: UInt32; segment: UInt32; var indirects: IntPtr; var sizes: Int32; var states: UInt32; fbos: IntPtr; count: UInt32);
    begin
      z_ListDrawCommandsStatesClientNV_ovr_2(list, segment, indirects, sizes, states, fbos, count);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ListDrawCommandsStatesClientNV(list: UInt32; segment: UInt32; var indirects: IntPtr; var sizes: Int32; states: IntPtr; fbos: array of UInt32; count: UInt32);
    begin
      z_ListDrawCommandsStatesClientNV_ovr_6(list, segment, indirects, sizes, states, fbos[0], count);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ListDrawCommandsStatesClientNV(list: UInt32; segment: UInt32; var indirects: IntPtr; var sizes: Int32; states: IntPtr; var fbos: UInt32; count: UInt32);
    begin
      z_ListDrawCommandsStatesClientNV_ovr_6(list, segment, indirects, sizes, states, fbos, count);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ListDrawCommandsStatesClientNV(list: UInt32; segment: UInt32; var indirects: IntPtr; var sizes: Int32; states: IntPtr; fbos: IntPtr; count: UInt32);
    begin
      z_ListDrawCommandsStatesClientNV_ovr_8(list, segment, indirects, sizes, states, fbos, count);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ListDrawCommandsStatesClientNV(list: UInt32; segment: UInt32; var indirects: IntPtr; sizes: IntPtr; states: array of UInt32; fbos: array of UInt32; count: UInt32);
    begin
      z_ListDrawCommandsStatesClientNV_ovr_18(list, segment, indirects, sizes, states[0], fbos[0], count);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ListDrawCommandsStatesClientNV(list: UInt32; segment: UInt32; var indirects: IntPtr; sizes: IntPtr; states: array of UInt32; var fbos: UInt32; count: UInt32);
    begin
      z_ListDrawCommandsStatesClientNV_ovr_18(list, segment, indirects, sizes, states[0], fbos, count);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ListDrawCommandsStatesClientNV(list: UInt32; segment: UInt32; var indirects: IntPtr; sizes: IntPtr; states: array of UInt32; fbos: IntPtr; count: UInt32);
    begin
      z_ListDrawCommandsStatesClientNV_ovr_20(list, segment, indirects, sizes, states[0], fbos, count);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ListDrawCommandsStatesClientNV(list: UInt32; segment: UInt32; var indirects: IntPtr; sizes: IntPtr; var states: UInt32; fbos: array of UInt32; count: UInt32);
    begin
      z_ListDrawCommandsStatesClientNV_ovr_18(list, segment, indirects, sizes, states, fbos[0], count);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ListDrawCommandsStatesClientNV(list: UInt32; segment: UInt32; var indirects: IntPtr; sizes: IntPtr; var states: UInt32; var fbos: UInt32; count: UInt32);
    begin
      z_ListDrawCommandsStatesClientNV_ovr_18(list, segment, indirects, sizes, states, fbos, count);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ListDrawCommandsStatesClientNV(list: UInt32; segment: UInt32; var indirects: IntPtr; sizes: IntPtr; var states: UInt32; fbos: IntPtr; count: UInt32);
    begin
      z_ListDrawCommandsStatesClientNV_ovr_20(list, segment, indirects, sizes, states, fbos, count);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ListDrawCommandsStatesClientNV(list: UInt32; segment: UInt32; var indirects: IntPtr; sizes: IntPtr; states: IntPtr; fbos: array of UInt32; count: UInt32);
    begin
      z_ListDrawCommandsStatesClientNV_ovr_24(list, segment, indirects, sizes, states, fbos[0], count);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ListDrawCommandsStatesClientNV(list: UInt32; segment: UInt32; var indirects: IntPtr; sizes: IntPtr; states: IntPtr; var fbos: UInt32; count: UInt32);
    begin
      z_ListDrawCommandsStatesClientNV_ovr_24(list, segment, indirects, sizes, states, fbos, count);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ListDrawCommandsStatesClientNV(list: UInt32; segment: UInt32; var indirects: IntPtr; sizes: IntPtr; states: IntPtr; fbos: IntPtr; count: UInt32);
    begin
      z_ListDrawCommandsStatesClientNV_ovr_26(list, segment, indirects, sizes, states, fbos, count);
    end;
    public z_ListDrawCommandsStatesClientNV_ovr_54 := GetFuncOrNil&<procedure(list: UInt32; segment: UInt32; indirects: pointer; var sizes: Int32; var states: UInt32; var fbos: UInt32; count: UInt32)>(z_ListDrawCommandsStatesClientNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ListDrawCommandsStatesClientNV(list: UInt32; segment: UInt32; indirects: pointer; sizes: array of Int32; states: array of UInt32; fbos: array of UInt32; count: UInt32);
    begin
      z_ListDrawCommandsStatesClientNV_ovr_54(list, segment, indirects, sizes[0], states[0], fbos[0], count);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ListDrawCommandsStatesClientNV(list: UInt32; segment: UInt32; indirects: pointer; sizes: array of Int32; states: array of UInt32; var fbos: UInt32; count: UInt32);
    begin
      z_ListDrawCommandsStatesClientNV_ovr_54(list, segment, indirects, sizes[0], states[0], fbos, count);
    end;
    public z_ListDrawCommandsStatesClientNV_ovr_56 := GetFuncOrNil&<procedure(list: UInt32; segment: UInt32; indirects: pointer; var sizes: Int32; var states: UInt32; fbos: IntPtr; count: UInt32)>(z_ListDrawCommandsStatesClientNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ListDrawCommandsStatesClientNV(list: UInt32; segment: UInt32; indirects: pointer; sizes: array of Int32; states: array of UInt32; fbos: IntPtr; count: UInt32);
    begin
      z_ListDrawCommandsStatesClientNV_ovr_56(list, segment, indirects, sizes[0], states[0], fbos, count);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ListDrawCommandsStatesClientNV(list: UInt32; segment: UInt32; indirects: pointer; sizes: array of Int32; var states: UInt32; fbos: array of UInt32; count: UInt32);
    begin
      z_ListDrawCommandsStatesClientNV_ovr_54(list, segment, indirects, sizes[0], states, fbos[0], count);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ListDrawCommandsStatesClientNV(list: UInt32; segment: UInt32; indirects: pointer; sizes: array of Int32; var states: UInt32; var fbos: UInt32; count: UInt32);
    begin
      z_ListDrawCommandsStatesClientNV_ovr_54(list, segment, indirects, sizes[0], states, fbos, count);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ListDrawCommandsStatesClientNV(list: UInt32; segment: UInt32; indirects: pointer; sizes: array of Int32; var states: UInt32; fbos: IntPtr; count: UInt32);
    begin
      z_ListDrawCommandsStatesClientNV_ovr_56(list, segment, indirects, sizes[0], states, fbos, count);
    end;
    public z_ListDrawCommandsStatesClientNV_ovr_60 := GetFuncOrNil&<procedure(list: UInt32; segment: UInt32; indirects: pointer; var sizes: Int32; states: IntPtr; var fbos: UInt32; count: UInt32)>(z_ListDrawCommandsStatesClientNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ListDrawCommandsStatesClientNV(list: UInt32; segment: UInt32; indirects: pointer; sizes: array of Int32; states: IntPtr; fbos: array of UInt32; count: UInt32);
    begin
      z_ListDrawCommandsStatesClientNV_ovr_60(list, segment, indirects, sizes[0], states, fbos[0], count);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ListDrawCommandsStatesClientNV(list: UInt32; segment: UInt32; indirects: pointer; sizes: array of Int32; states: IntPtr; var fbos: UInt32; count: UInt32);
    begin
      z_ListDrawCommandsStatesClientNV_ovr_60(list, segment, indirects, sizes[0], states, fbos, count);
    end;
    public z_ListDrawCommandsStatesClientNV_ovr_62 := GetFuncOrNil&<procedure(list: UInt32; segment: UInt32; indirects: pointer; var sizes: Int32; states: IntPtr; fbos: IntPtr; count: UInt32)>(z_ListDrawCommandsStatesClientNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ListDrawCommandsStatesClientNV(list: UInt32; segment: UInt32; indirects: pointer; sizes: array of Int32; states: IntPtr; fbos: IntPtr; count: UInt32);
    begin
      z_ListDrawCommandsStatesClientNV_ovr_62(list, segment, indirects, sizes[0], states, fbos, count);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ListDrawCommandsStatesClientNV(list: UInt32; segment: UInt32; indirects: pointer; var sizes: Int32; states: array of UInt32; fbos: array of UInt32; count: UInt32);
    begin
      z_ListDrawCommandsStatesClientNV_ovr_54(list, segment, indirects, sizes, states[0], fbos[0], count);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ListDrawCommandsStatesClientNV(list: UInt32; segment: UInt32; indirects: pointer; var sizes: Int32; states: array of UInt32; var fbos: UInt32; count: UInt32);
    begin
      z_ListDrawCommandsStatesClientNV_ovr_54(list, segment, indirects, sizes, states[0], fbos, count);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ListDrawCommandsStatesClientNV(list: UInt32; segment: UInt32; indirects: pointer; var sizes: Int32; states: array of UInt32; fbos: IntPtr; count: UInt32);
    begin
      z_ListDrawCommandsStatesClientNV_ovr_56(list, segment, indirects, sizes, states[0], fbos, count);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ListDrawCommandsStatesClientNV(list: UInt32; segment: UInt32; indirects: pointer; var sizes: Int32; var states: UInt32; fbos: array of UInt32; count: UInt32);
    begin
      z_ListDrawCommandsStatesClientNV_ovr_54(list, segment, indirects, sizes, states, fbos[0], count);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ListDrawCommandsStatesClientNV(list: UInt32; segment: UInt32; indirects: pointer; var sizes: Int32; var states: UInt32; var fbos: UInt32; count: UInt32);
    begin
      z_ListDrawCommandsStatesClientNV_ovr_54(list, segment, indirects, sizes, states, fbos, count);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ListDrawCommandsStatesClientNV(list: UInt32; segment: UInt32; indirects: pointer; var sizes: Int32; var states: UInt32; fbos: IntPtr; count: UInt32);
    begin
      z_ListDrawCommandsStatesClientNV_ovr_56(list, segment, indirects, sizes, states, fbos, count);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ListDrawCommandsStatesClientNV(list: UInt32; segment: UInt32; indirects: pointer; var sizes: Int32; states: IntPtr; fbos: array of UInt32; count: UInt32);
    begin
      z_ListDrawCommandsStatesClientNV_ovr_60(list, segment, indirects, sizes, states, fbos[0], count);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ListDrawCommandsStatesClientNV(list: UInt32; segment: UInt32; indirects: pointer; var sizes: Int32; states: IntPtr; var fbos: UInt32; count: UInt32);
    begin
      z_ListDrawCommandsStatesClientNV_ovr_60(list, segment, indirects, sizes, states, fbos, count);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ListDrawCommandsStatesClientNV(list: UInt32; segment: UInt32; indirects: pointer; var sizes: Int32; states: IntPtr; fbos: IntPtr; count: UInt32);
    begin
      z_ListDrawCommandsStatesClientNV_ovr_62(list, segment, indirects, sizes, states, fbos, count);
    end;
    public z_ListDrawCommandsStatesClientNV_ovr_72 := GetFuncOrNil&<procedure(list: UInt32; segment: UInt32; indirects: pointer; sizes: IntPtr; var states: UInt32; var fbos: UInt32; count: UInt32)>(z_ListDrawCommandsStatesClientNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ListDrawCommandsStatesClientNV(list: UInt32; segment: UInt32; indirects: pointer; sizes: IntPtr; states: array of UInt32; fbos: array of UInt32; count: UInt32);
    begin
      z_ListDrawCommandsStatesClientNV_ovr_72(list, segment, indirects, sizes, states[0], fbos[0], count);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ListDrawCommandsStatesClientNV(list: UInt32; segment: UInt32; indirects: pointer; sizes: IntPtr; states: array of UInt32; var fbos: UInt32; count: UInt32);
    begin
      z_ListDrawCommandsStatesClientNV_ovr_72(list, segment, indirects, sizes, states[0], fbos, count);
    end;
    public z_ListDrawCommandsStatesClientNV_ovr_74 := GetFuncOrNil&<procedure(list: UInt32; segment: UInt32; indirects: pointer; sizes: IntPtr; var states: UInt32; fbos: IntPtr; count: UInt32)>(z_ListDrawCommandsStatesClientNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ListDrawCommandsStatesClientNV(list: UInt32; segment: UInt32; indirects: pointer; sizes: IntPtr; states: array of UInt32; fbos: IntPtr; count: UInt32);
    begin
      z_ListDrawCommandsStatesClientNV_ovr_74(list, segment, indirects, sizes, states[0], fbos, count);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ListDrawCommandsStatesClientNV(list: UInt32; segment: UInt32; indirects: pointer; sizes: IntPtr; var states: UInt32; fbos: array of UInt32; count: UInt32);
    begin
      z_ListDrawCommandsStatesClientNV_ovr_72(list, segment, indirects, sizes, states, fbos[0], count);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ListDrawCommandsStatesClientNV(list: UInt32; segment: UInt32; indirects: pointer; sizes: IntPtr; var states: UInt32; var fbos: UInt32; count: UInt32);
    begin
      z_ListDrawCommandsStatesClientNV_ovr_72(list, segment, indirects, sizes, states, fbos, count);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ListDrawCommandsStatesClientNV(list: UInt32; segment: UInt32; indirects: pointer; sizes: IntPtr; var states: UInt32; fbos: IntPtr; count: UInt32);
    begin
      z_ListDrawCommandsStatesClientNV_ovr_74(list, segment, indirects, sizes, states, fbos, count);
    end;
    public z_ListDrawCommandsStatesClientNV_ovr_78 := GetFuncOrNil&<procedure(list: UInt32; segment: UInt32; indirects: pointer; sizes: IntPtr; states: IntPtr; var fbos: UInt32; count: UInt32)>(z_ListDrawCommandsStatesClientNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ListDrawCommandsStatesClientNV(list: UInt32; segment: UInt32; indirects: pointer; sizes: IntPtr; states: IntPtr; fbos: array of UInt32; count: UInt32);
    begin
      z_ListDrawCommandsStatesClientNV_ovr_78(list, segment, indirects, sizes, states, fbos[0], count);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ListDrawCommandsStatesClientNV(list: UInt32; segment: UInt32; indirects: pointer; sizes: IntPtr; states: IntPtr; var fbos: UInt32; count: UInt32);
    begin
      z_ListDrawCommandsStatesClientNV_ovr_78(list, segment, indirects, sizes, states, fbos, count);
    end;
    public z_ListDrawCommandsStatesClientNV_ovr_80 := GetFuncOrNil&<procedure(list: UInt32; segment: UInt32; indirects: pointer; sizes: IntPtr; states: IntPtr; fbos: IntPtr; count: UInt32)>(z_ListDrawCommandsStatesClientNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ListDrawCommandsStatesClientNV(list: UInt32; segment: UInt32; indirects: pointer; sizes: IntPtr; states: IntPtr; fbos: IntPtr; count: UInt32);
    begin
      z_ListDrawCommandsStatesClientNV_ovr_80(list, segment, indirects, sizes, states, fbos, count);
    end;
    
    public z_CommandListSegmentsNV_adr := GetFuncAdr('glCommandListSegmentsNV');
    public z_CommandListSegmentsNV_ovr_0 := GetFuncOrNil&<procedure(list: UInt32; segments: UInt32)>(z_CommandListSegmentsNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure CommandListSegmentsNV(list: UInt32; segments: UInt32);
    begin
      z_CommandListSegmentsNV_ovr_0(list, segments);
    end;
    
    public z_CompileCommandListNV_adr := GetFuncAdr('glCompileCommandListNV');
    public z_CompileCommandListNV_ovr_0 := GetFuncOrNil&<procedure(list: UInt32)>(z_CompileCommandListNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure CompileCommandListNV(list: UInt32);
    begin
      z_CompileCommandListNV_ovr_0(list);
    end;
    
    public z_CallCommandListNV_adr := GetFuncAdr('glCallCommandListNV');
    public z_CallCommandListNV_ovr_0 := GetFuncOrNil&<procedure(list: UInt32)>(z_CallCommandListNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure CallCommandListNV(list: UInt32);
    begin
      z_CallCommandListNV_ovr_0(list);
    end;
    
  end;
  
  glConditionalRenderNV = sealed class
    public static function GetFuncAdr([MarshalAs(UnmanagedType.LPStr)] lpszProc: string): IntPtr;
    external 'opengl32.dll' name 'wglGetProcAddress';
    public static function GetFuncOrNil<T>(fadr: IntPtr) :=
    fadr=IntPtr.Zero ? default(T) :
    Marshal.GetDelegateForFunctionPointer&<T>(fadr);
    
    public z_BeginConditionalRenderNV_adr := GetFuncAdr('glBeginConditionalRenderNV');
    public z_BeginConditionalRenderNV_ovr_0 := GetFuncOrNil&<procedure(id: UInt32; mode: ConditionalRenderMode)>(z_BeginConditionalRenderNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure BeginConditionalRenderNV(id: UInt32; mode: ConditionalRenderMode);
    begin
      z_BeginConditionalRenderNV_ovr_0(id, mode);
    end;
    
    public z_EndConditionalRenderNV_adr := GetFuncAdr('glEndConditionalRenderNV');
    public z_EndConditionalRenderNV_ovr_0 := GetFuncOrNil&<procedure>(z_EndConditionalRenderNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure EndConditionalRenderNV;
    begin
      z_EndConditionalRenderNV_ovr_0;
    end;
    
  end;
  
  glConservativeRasterNV = sealed class
    public static function GetFuncAdr([MarshalAs(UnmanagedType.LPStr)] lpszProc: string): IntPtr;
    external 'opengl32.dll' name 'wglGetProcAddress';
    public static function GetFuncOrNil<T>(fadr: IntPtr) :=
    fadr=IntPtr.Zero ? default(T) :
    Marshal.GetDelegateForFunctionPointer&<T>(fadr);
    
    public z_SubpixelPrecisionBiasNV_adr := GetFuncAdr('glSubpixelPrecisionBiasNV');
    public z_SubpixelPrecisionBiasNV_ovr_0 := GetFuncOrNil&<procedure(xbits: UInt32; ybits: UInt32)>(z_SubpixelPrecisionBiasNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure SubpixelPrecisionBiasNV(xbits: UInt32; ybits: UInt32);
    begin
      z_SubpixelPrecisionBiasNV_ovr_0(xbits, ybits);
    end;
    
  end;
  
  glConservativeRasterDilateNV = sealed class
    public static function GetFuncAdr([MarshalAs(UnmanagedType.LPStr)] lpszProc: string): IntPtr;
    external 'opengl32.dll' name 'wglGetProcAddress';
    public static function GetFuncOrNil<T>(fadr: IntPtr) :=
    fadr=IntPtr.Zero ? default(T) :
    Marshal.GetDelegateForFunctionPointer&<T>(fadr);
    
    public z_ConservativeRasterParameterfNV_adr := GetFuncAdr('glConservativeRasterParameterfNV');
    public z_ConservativeRasterParameterfNV_ovr_0 := GetFuncOrNil&<procedure(pname: DummyEnum; value: single)>(z_ConservativeRasterParameterfNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ConservativeRasterParameterfNV(pname: DummyEnum; value: single);
    begin
      z_ConservativeRasterParameterfNV_ovr_0(pname, value);
    end;
    
  end;
  
  glConservativeRasterPreSnapTrianglesNV = sealed class
    public static function GetFuncAdr([MarshalAs(UnmanagedType.LPStr)] lpszProc: string): IntPtr;
    external 'opengl32.dll' name 'wglGetProcAddress';
    public static function GetFuncOrNil<T>(fadr: IntPtr) :=
    fadr=IntPtr.Zero ? default(T) :
    Marshal.GetDelegateForFunctionPointer&<T>(fadr);
    
    public z_ConservativeRasterParameteriNV_adr := GetFuncAdr('glConservativeRasterParameteriNV');
    public z_ConservativeRasterParameteriNV_ovr_0 := GetFuncOrNil&<procedure(pname: DummyEnum; param: Int32)>(z_ConservativeRasterParameteriNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ConservativeRasterParameteriNV(pname: DummyEnum; param: Int32);
    begin
      z_ConservativeRasterParameteriNV_ovr_0(pname, param);
    end;
    
  end;
  
  glCopyImageNV = sealed class
    public static function GetFuncAdr([MarshalAs(UnmanagedType.LPStr)] lpszProc: string): IntPtr;
    external 'opengl32.dll' name 'wglGetProcAddress';
    public static function GetFuncOrNil<T>(fadr: IntPtr) :=
    fadr=IntPtr.Zero ? default(T) :
    Marshal.GetDelegateForFunctionPointer&<T>(fadr);
    
    public z_CopyImageSubDataNV_adr := GetFuncAdr('glCopyImageSubDataNV');
    public z_CopyImageSubDataNV_ovr_0 := GetFuncOrNil&<procedure(srcName: UInt32; srcTarget: CopyBufferSubDataTarget; srcLevel: Int32; srcX: Int32; srcY: Int32; srcZ: Int32; dstName: UInt32; dstTarget: CopyBufferSubDataTarget; dstLevel: Int32; dstX: Int32; dstY: Int32; dstZ: Int32; width: Int32; height: Int32; depth: Int32)>(z_CopyImageSubDataNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure CopyImageSubDataNV(srcName: UInt32; srcTarget: CopyBufferSubDataTarget; srcLevel: Int32; srcX: Int32; srcY: Int32; srcZ: Int32; dstName: UInt32; dstTarget: CopyBufferSubDataTarget; dstLevel: Int32; dstX: Int32; dstY: Int32; dstZ: Int32; width: Int32; height: Int32; depth: Int32);
    begin
      z_CopyImageSubDataNV_ovr_0(srcName, srcTarget, srcLevel, srcX, srcY, srcZ, dstName, dstTarget, dstLevel, dstX, dstY, dstZ, width, height, depth);
    end;
    
  end;
  
  glDepthBufferFloatNV = sealed class
    public static function GetFuncAdr([MarshalAs(UnmanagedType.LPStr)] lpszProc: string): IntPtr;
    external 'opengl32.dll' name 'wglGetProcAddress';
    public static function GetFuncOrNil<T>(fadr: IntPtr) :=
    fadr=IntPtr.Zero ? default(T) :
    Marshal.GetDelegateForFunctionPointer&<T>(fadr);
    
    public z_DepthRangedNV_adr := GetFuncAdr('glDepthRangedNV');
    public z_DepthRangedNV_ovr_0 := GetFuncOrNil&<procedure(zNear: real; zFar: real)>(z_DepthRangedNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure DepthRangedNV(zNear: real; zFar: real);
    begin
      z_DepthRangedNV_ovr_0(zNear, zFar);
    end;
    
    public z_ClearDepthdNV_adr := GetFuncAdr('glClearDepthdNV');
    public z_ClearDepthdNV_ovr_0 := GetFuncOrNil&<procedure(depth: real)>(z_ClearDepthdNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ClearDepthdNV(depth: real);
    begin
      z_ClearDepthdNV_ovr_0(depth);
    end;
    
    public z_DepthBoundsdNV_adr := GetFuncAdr('glDepthBoundsdNV');
    public z_DepthBoundsdNV_ovr_0 := GetFuncOrNil&<procedure(zmin: real; zmax: real)>(z_DepthBoundsdNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure DepthBoundsdNV(zmin: real; zmax: real);
    begin
      z_DepthBoundsdNV_ovr_0(zmin, zmax);
    end;
    
  end;
  
  glDrawTextureNV = sealed class
    public static function GetFuncAdr([MarshalAs(UnmanagedType.LPStr)] lpszProc: string): IntPtr;
    external 'opengl32.dll' name 'wglGetProcAddress';
    public static function GetFuncOrNil<T>(fadr: IntPtr) :=
    fadr=IntPtr.Zero ? default(T) :
    Marshal.GetDelegateForFunctionPointer&<T>(fadr);
    
    public z_DrawTextureNV_adr := GetFuncAdr('glDrawTextureNV');
    public z_DrawTextureNV_ovr_0 := GetFuncOrNil&<procedure(texture: UInt32; sampler: UInt32; x0: single; y0: single; x1: single; y1: single; z: single; s0: single; t0: single; s1: single; t1: single)>(z_DrawTextureNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure DrawTextureNV(texture: UInt32; sampler: UInt32; x0: single; y0: single; x1: single; y1: single; z: single; s0: single; t0: single; s1: single; t1: single);
    begin
      z_DrawTextureNV_ovr_0(texture, sampler, x0, y0, x1, y1, z, s0, t0, s1, t1);
    end;
    
  end;
  
  glDrawVulkanImageNV = sealed class
    public static function GetFuncAdr([MarshalAs(UnmanagedType.LPStr)] lpszProc: string): IntPtr;
    external 'opengl32.dll' name 'wglGetProcAddress';
    public static function GetFuncOrNil<T>(fadr: IntPtr) :=
    fadr=IntPtr.Zero ? default(T) :
    Marshal.GetDelegateForFunctionPointer&<T>(fadr);
    
    public z_DrawVkImageNV_adr := GetFuncAdr('glDrawVkImageNV');
    public z_DrawVkImageNV_ovr_0 := GetFuncOrNil&<procedure(vkImage: UInt64; sampler: UInt32; x0: single; y0: single; x1: single; y1: single; z: single; s0: single; t0: single; s1: single; t1: single)>(z_DrawVkImageNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure DrawVkImageNV(vkImage: UInt64; sampler: UInt32; x0: single; y0: single; x1: single; y1: single; z: single; s0: single; t0: single; s1: single; t1: single);
    begin
      z_DrawVkImageNV_ovr_0(vkImage, sampler, x0, y0, x1, y1, z, s0, t0, s1, t1);
    end;
    
    public z_GetVkProcAddrNV_adr := GetFuncAdr('glGetVkProcAddrNV');
    public z_GetVkProcAddrNV_ovr_0 := GetFuncOrNil&<function(name: IntPtr): GLVULKANPROCNV>(z_GetVkProcAddrNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetVkProcAddrNV(name: string): GLVULKANPROCNV;
    begin
      var par_1_str_ptr := Marshal.StringToHGlobalAnsi(name);
      Result := z_GetVkProcAddrNV_ovr_0(par_1_str_ptr);
      Marshal.FreeHGlobal(par_1_str_ptr);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetVkProcAddrNV(name: IntPtr): GLVULKANPROCNV;
    begin
      Result := z_GetVkProcAddrNV_ovr_0(name);
    end;
    
    public z_WaitVkSemaphoreNV_adr := GetFuncAdr('glWaitVkSemaphoreNV');
    public z_WaitVkSemaphoreNV_ovr_0 := GetFuncOrNil&<procedure(vkSemaphore: UInt64)>(z_WaitVkSemaphoreNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure WaitVkSemaphoreNV(vkSemaphore: UInt64);
    begin
      z_WaitVkSemaphoreNV_ovr_0(vkSemaphore);
    end;
    
    public z_SignalVkSemaphoreNV_adr := GetFuncAdr('glSignalVkSemaphoreNV');
    public z_SignalVkSemaphoreNV_ovr_0 := GetFuncOrNil&<procedure(vkSemaphore: UInt64)>(z_SignalVkSemaphoreNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure SignalVkSemaphoreNV(vkSemaphore: UInt64);
    begin
      z_SignalVkSemaphoreNV_ovr_0(vkSemaphore);
    end;
    
    public z_SignalVkFenceNV_adr := GetFuncAdr('glSignalVkFenceNV');
    public z_SignalVkFenceNV_ovr_0 := GetFuncOrNil&<procedure(vkFence: UInt64)>(z_SignalVkFenceNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure SignalVkFenceNV(vkFence: UInt64);
    begin
      z_SignalVkFenceNV_ovr_0(vkFence);
    end;
    
  end;
  
  glEvaluatorsNV = sealed class
    public static function GetFuncAdr([MarshalAs(UnmanagedType.LPStr)] lpszProc: string): IntPtr;
    external 'opengl32.dll' name 'wglGetProcAddress';
    public static function GetFuncOrNil<T>(fadr: IntPtr) :=
    fadr=IntPtr.Zero ? default(T) :
    Marshal.GetDelegateForFunctionPointer&<T>(fadr);
    
    public z_MapControlPointsNV_adr := GetFuncAdr('glMapControlPointsNV');
    public z_MapControlPointsNV_ovr_0 := GetFuncOrNil&<procedure(target: EvalTargetNV; index: UInt32; &type: MapTypeNV; ustride: Int32; vstride: Int32; uorder: Int32; vorder: Int32; &packed: boolean; points: IntPtr)>(z_MapControlPointsNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MapControlPointsNV(target: EvalTargetNV; index: UInt32; &type: MapTypeNV; ustride: Int32; vstride: Int32; uorder: Int32; vorder: Int32; &packed: boolean; points: IntPtr);
    begin
      z_MapControlPointsNV_ovr_0(target, index, &type, ustride, vstride, uorder, vorder, &packed, points);
    end;
    
    public z_MapParameterivNV_adr := GetFuncAdr('glMapParameterivNV');
    public z_MapParameterivNV_ovr_0 := GetFuncOrNil&<procedure(target: EvalTargetNV; pname: MapParameterNV; var &params: Int32)>(z_MapParameterivNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MapParameterivNV(target: EvalTargetNV; pname: MapParameterNV; &params: array of Int32);
    begin
      z_MapParameterivNV_ovr_0(target, pname, &params[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MapParameterivNV(target: EvalTargetNV; pname: MapParameterNV; var &params: Int32);
    begin
      z_MapParameterivNV_ovr_0(target, pname, &params);
    end;
    public z_MapParameterivNV_ovr_2 := GetFuncOrNil&<procedure(target: EvalTargetNV; pname: MapParameterNV; &params: IntPtr)>(z_MapParameterivNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MapParameterivNV(target: EvalTargetNV; pname: MapParameterNV; &params: IntPtr);
    begin
      z_MapParameterivNV_ovr_2(target, pname, &params);
    end;
    
    public z_MapParameterfvNV_adr := GetFuncAdr('glMapParameterfvNV');
    public z_MapParameterfvNV_ovr_0 := GetFuncOrNil&<procedure(target: EvalTargetNV; pname: MapParameterNV; var &params: single)>(z_MapParameterfvNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MapParameterfvNV(target: EvalTargetNV; pname: MapParameterNV; &params: array of single);
    begin
      z_MapParameterfvNV_ovr_0(target, pname, &params[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MapParameterfvNV(target: EvalTargetNV; pname: MapParameterNV; var &params: single);
    begin
      z_MapParameterfvNV_ovr_0(target, pname, &params);
    end;
    public z_MapParameterfvNV_ovr_2 := GetFuncOrNil&<procedure(target: EvalTargetNV; pname: MapParameterNV; &params: IntPtr)>(z_MapParameterfvNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MapParameterfvNV(target: EvalTargetNV; pname: MapParameterNV; &params: IntPtr);
    begin
      z_MapParameterfvNV_ovr_2(target, pname, &params);
    end;
    
    public z_GetMapControlPointsNV_adr := GetFuncAdr('glGetMapControlPointsNV');
    public z_GetMapControlPointsNV_ovr_0 := GetFuncOrNil&<procedure(target: EvalTargetNV; index: UInt32; &type: MapTypeNV; ustride: Int32; vstride: Int32; &packed: boolean; points: IntPtr)>(z_GetMapControlPointsNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetMapControlPointsNV(target: EvalTargetNV; index: UInt32; &type: MapTypeNV; ustride: Int32; vstride: Int32; &packed: boolean; points: IntPtr);
    begin
      z_GetMapControlPointsNV_ovr_0(target, index, &type, ustride, vstride, &packed, points);
    end;
    
    public z_GetMapParameterivNV_adr := GetFuncAdr('glGetMapParameterivNV');
    public z_GetMapParameterivNV_ovr_0 := GetFuncOrNil&<procedure(target: EvalTargetNV; pname: MapParameterNV; var &params: Int32)>(z_GetMapParameterivNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetMapParameterivNV(target: EvalTargetNV; pname: MapParameterNV; &params: array of Int32);
    begin
      z_GetMapParameterivNV_ovr_0(target, pname, &params[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetMapParameterivNV(target: EvalTargetNV; pname: MapParameterNV; var &params: Int32);
    begin
      z_GetMapParameterivNV_ovr_0(target, pname, &params);
    end;
    public z_GetMapParameterivNV_ovr_2 := GetFuncOrNil&<procedure(target: EvalTargetNV; pname: MapParameterNV; &params: IntPtr)>(z_GetMapParameterivNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetMapParameterivNV(target: EvalTargetNV; pname: MapParameterNV; &params: IntPtr);
    begin
      z_GetMapParameterivNV_ovr_2(target, pname, &params);
    end;
    
    public z_GetMapParameterfvNV_adr := GetFuncAdr('glGetMapParameterfvNV');
    public z_GetMapParameterfvNV_ovr_0 := GetFuncOrNil&<procedure(target: EvalTargetNV; pname: MapParameterNV; var &params: single)>(z_GetMapParameterfvNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetMapParameterfvNV(target: EvalTargetNV; pname: MapParameterNV; &params: array of single);
    begin
      z_GetMapParameterfvNV_ovr_0(target, pname, &params[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetMapParameterfvNV(target: EvalTargetNV; pname: MapParameterNV; var &params: single);
    begin
      z_GetMapParameterfvNV_ovr_0(target, pname, &params);
    end;
    public z_GetMapParameterfvNV_ovr_2 := GetFuncOrNil&<procedure(target: EvalTargetNV; pname: MapParameterNV; &params: IntPtr)>(z_GetMapParameterfvNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetMapParameterfvNV(target: EvalTargetNV; pname: MapParameterNV; &params: IntPtr);
    begin
      z_GetMapParameterfvNV_ovr_2(target, pname, &params);
    end;
    
    public z_GetMapAttribParameterivNV_adr := GetFuncAdr('glGetMapAttribParameterivNV');
    public z_GetMapAttribParameterivNV_ovr_0 := GetFuncOrNil&<procedure(target: EvalTargetNV; index: UInt32; pname: MapAttribParameterNV; var &params: Int32)>(z_GetMapAttribParameterivNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetMapAttribParameterivNV(target: EvalTargetNV; index: UInt32; pname: MapAttribParameterNV; &params: array of Int32);
    begin
      z_GetMapAttribParameterivNV_ovr_0(target, index, pname, &params[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetMapAttribParameterivNV(target: EvalTargetNV; index: UInt32; pname: MapAttribParameterNV; var &params: Int32);
    begin
      z_GetMapAttribParameterivNV_ovr_0(target, index, pname, &params);
    end;
    public z_GetMapAttribParameterivNV_ovr_2 := GetFuncOrNil&<procedure(target: EvalTargetNV; index: UInt32; pname: MapAttribParameterNV; &params: IntPtr)>(z_GetMapAttribParameterivNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetMapAttribParameterivNV(target: EvalTargetNV; index: UInt32; pname: MapAttribParameterNV; &params: IntPtr);
    begin
      z_GetMapAttribParameterivNV_ovr_2(target, index, pname, &params);
    end;
    
    public z_GetMapAttribParameterfvNV_adr := GetFuncAdr('glGetMapAttribParameterfvNV');
    public z_GetMapAttribParameterfvNV_ovr_0 := GetFuncOrNil&<procedure(target: EvalTargetNV; index: UInt32; pname: MapAttribParameterNV; var &params: single)>(z_GetMapAttribParameterfvNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetMapAttribParameterfvNV(target: EvalTargetNV; index: UInt32; pname: MapAttribParameterNV; &params: array of single);
    begin
      z_GetMapAttribParameterfvNV_ovr_0(target, index, pname, &params[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetMapAttribParameterfvNV(target: EvalTargetNV; index: UInt32; pname: MapAttribParameterNV; var &params: single);
    begin
      z_GetMapAttribParameterfvNV_ovr_0(target, index, pname, &params);
    end;
    public z_GetMapAttribParameterfvNV_ovr_2 := GetFuncOrNil&<procedure(target: EvalTargetNV; index: UInt32; pname: MapAttribParameterNV; &params: IntPtr)>(z_GetMapAttribParameterfvNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetMapAttribParameterfvNV(target: EvalTargetNV; index: UInt32; pname: MapAttribParameterNV; &params: IntPtr);
    begin
      z_GetMapAttribParameterfvNV_ovr_2(target, index, pname, &params);
    end;
    
    public z_EvalMapsNV_adr := GetFuncAdr('glEvalMapsNV');
    public z_EvalMapsNV_ovr_0 := GetFuncOrNil&<procedure(target: EvalTargetNV; mode: EvalMapsModeNV)>(z_EvalMapsNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure EvalMapsNV(target: EvalTargetNV; mode: EvalMapsModeNV);
    begin
      z_EvalMapsNV_ovr_0(target, mode);
    end;
    
  end;
  
  glExplicitMultisampleNV = sealed class
    public static function GetFuncAdr([MarshalAs(UnmanagedType.LPStr)] lpszProc: string): IntPtr;
    external 'opengl32.dll' name 'wglGetProcAddress';
    public static function GetFuncOrNil<T>(fadr: IntPtr) :=
    fadr=IntPtr.Zero ? default(T) :
    Marshal.GetDelegateForFunctionPointer&<T>(fadr);
    
    public z_GetMultisamplefvNV_adr := GetFuncAdr('glGetMultisamplefvNV');
    public z_GetMultisamplefvNV_ovr_0 := GetFuncOrNil&<procedure(pname: GetMultisamplePNameNV; index: UInt32; var val: single)>(z_GetMultisamplefvNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetMultisamplefvNV(pname: GetMultisamplePNameNV; index: UInt32; val: array of single);
    begin
      z_GetMultisamplefvNV_ovr_0(pname, index, val[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetMultisamplefvNV(pname: GetMultisamplePNameNV; index: UInt32; var val: single);
    begin
      z_GetMultisamplefvNV_ovr_0(pname, index, val);
    end;
    public z_GetMultisamplefvNV_ovr_2 := GetFuncOrNil&<procedure(pname: GetMultisamplePNameNV; index: UInt32; val: IntPtr)>(z_GetMultisamplefvNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetMultisamplefvNV(pname: GetMultisamplePNameNV; index: UInt32; val: IntPtr);
    begin
      z_GetMultisamplefvNV_ovr_2(pname, index, val);
    end;
    
    public z_SampleMaskIndexedNV_adr := GetFuncAdr('glSampleMaskIndexedNV');
    public z_SampleMaskIndexedNV_ovr_0 := GetFuncOrNil&<procedure(index: UInt32; mask: DummyFlags)>(z_SampleMaskIndexedNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure SampleMaskIndexedNV(index: UInt32; mask: DummyFlags);
    begin
      z_SampleMaskIndexedNV_ovr_0(index, mask);
    end;
    
    public z_TexRenderbufferNV_adr := GetFuncAdr('glTexRenderbufferNV');
    public z_TexRenderbufferNV_ovr_0 := GetFuncOrNil&<procedure(target: TextureTarget; renderbuffer: UInt32)>(z_TexRenderbufferNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TexRenderbufferNV(target: TextureTarget; renderbuffer: UInt32);
    begin
      z_TexRenderbufferNV_ovr_0(target, renderbuffer);
    end;
    
  end;
  
  glFenceNV = sealed class
    public static function GetFuncAdr([MarshalAs(UnmanagedType.LPStr)] lpszProc: string): IntPtr;
    external 'opengl32.dll' name 'wglGetProcAddress';
    public static function GetFuncOrNil<T>(fadr: IntPtr) :=
    fadr=IntPtr.Zero ? default(T) :
    Marshal.GetDelegateForFunctionPointer&<T>(fadr);
    
    public z_DeleteFencesNV_adr := GetFuncAdr('glDeleteFencesNV');
    public z_DeleteFencesNV_ovr_0 := GetFuncOrNil&<procedure(n: Int32; var fences: UInt32)>(z_DeleteFencesNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure DeleteFencesNV(n: Int32; fences: array of UInt32);
    begin
      z_DeleteFencesNV_ovr_0(n, fences[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure DeleteFencesNV(n: Int32; var fences: UInt32);
    begin
      z_DeleteFencesNV_ovr_0(n, fences);
    end;
    public z_DeleteFencesNV_ovr_2 := GetFuncOrNil&<procedure(n: Int32; fences: IntPtr)>(z_DeleteFencesNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure DeleteFencesNV(n: Int32; fences: IntPtr);
    begin
      z_DeleteFencesNV_ovr_2(n, fences);
    end;
    
    public z_GenFencesNV_adr := GetFuncAdr('glGenFencesNV');
    public z_GenFencesNV_ovr_0 := GetFuncOrNil&<procedure(n: Int32; var fences: UInt32)>(z_GenFencesNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GenFencesNV(n: Int32; fences: array of UInt32);
    begin
      z_GenFencesNV_ovr_0(n, fences[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GenFencesNV(n: Int32; var fences: UInt32);
    begin
      z_GenFencesNV_ovr_0(n, fences);
    end;
    public z_GenFencesNV_ovr_2 := GetFuncOrNil&<procedure(n: Int32; fences: IntPtr)>(z_GenFencesNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GenFencesNV(n: Int32; fences: IntPtr);
    begin
      z_GenFencesNV_ovr_2(n, fences);
    end;
    
    public z_IsFenceNV_adr := GetFuncAdr('glIsFenceNV');
    public z_IsFenceNV_ovr_0 := GetFuncOrNil&<function(fence: UInt32): boolean>(z_IsFenceNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function IsFenceNV(fence: UInt32): boolean;
    begin
      Result := z_IsFenceNV_ovr_0(fence);
    end;
    
    public z_TestFenceNV_adr := GetFuncAdr('glTestFenceNV');
    public z_TestFenceNV_ovr_0 := GetFuncOrNil&<function(fence: UInt32): boolean>(z_TestFenceNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function TestFenceNV(fence: UInt32): boolean;
    begin
      Result := z_TestFenceNV_ovr_0(fence);
    end;
    
    public z_GetFenceivNV_adr := GetFuncAdr('glGetFenceivNV');
    public z_GetFenceivNV_ovr_0 := GetFuncOrNil&<procedure(fence: UInt32; pname: FenceParameterNameNV; var &params: Int32)>(z_GetFenceivNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetFenceivNV(fence: UInt32; pname: FenceParameterNameNV; &params: array of Int32);
    begin
      z_GetFenceivNV_ovr_0(fence, pname, &params[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetFenceivNV(fence: UInt32; pname: FenceParameterNameNV; var &params: Int32);
    begin
      z_GetFenceivNV_ovr_0(fence, pname, &params);
    end;
    public z_GetFenceivNV_ovr_2 := GetFuncOrNil&<procedure(fence: UInt32; pname: FenceParameterNameNV; &params: IntPtr)>(z_GetFenceivNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetFenceivNV(fence: UInt32; pname: FenceParameterNameNV; &params: IntPtr);
    begin
      z_GetFenceivNV_ovr_2(fence, pname, &params);
    end;
    
    public z_FinishFenceNV_adr := GetFuncAdr('glFinishFenceNV');
    public z_FinishFenceNV_ovr_0 := GetFuncOrNil&<procedure(fence: UInt32)>(z_FinishFenceNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure FinishFenceNV(fence: UInt32);
    begin
      z_FinishFenceNV_ovr_0(fence);
    end;
    
    public z_SetFenceNV_adr := GetFuncAdr('glSetFenceNV');
    public z_SetFenceNV_ovr_0 := GetFuncOrNil&<procedure(fence: UInt32; condition: FenceConditionNV)>(z_SetFenceNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure SetFenceNV(fence: UInt32; condition: FenceConditionNV);
    begin
      z_SetFenceNV_ovr_0(fence, condition);
    end;
    
  end;
  
  glFragmentCoverageToColorNV = sealed class
    public static function GetFuncAdr([MarshalAs(UnmanagedType.LPStr)] lpszProc: string): IntPtr;
    external 'opengl32.dll' name 'wglGetProcAddress';
    public static function GetFuncOrNil<T>(fadr: IntPtr) :=
    fadr=IntPtr.Zero ? default(T) :
    Marshal.GetDelegateForFunctionPointer&<T>(fadr);
    
    public z_FragmentCoverageColorNV_adr := GetFuncAdr('glFragmentCoverageColorNV');
    public z_FragmentCoverageColorNV_ovr_0 := GetFuncOrNil&<procedure(color: UInt32)>(z_FragmentCoverageColorNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure FragmentCoverageColorNV(color: UInt32);
    begin
      z_FragmentCoverageColorNV_ovr_0(color);
    end;
    
  end;
  
  glFragmentProgramNV = sealed class
    public static function GetFuncAdr([MarshalAs(UnmanagedType.LPStr)] lpszProc: string): IntPtr;
    external 'opengl32.dll' name 'wglGetProcAddress';
    public static function GetFuncOrNil<T>(fadr: IntPtr) :=
    fadr=IntPtr.Zero ? default(T) :
    Marshal.GetDelegateForFunctionPointer&<T>(fadr);
    
    public z_ProgramNamedParameter4fNV_adr := GetFuncAdr('glProgramNamedParameter4fNV');
    public z_ProgramNamedParameter4fNV_ovr_0 := GetFuncOrNil&<procedure(id: UInt32; len: Int32; var name: Byte; x: single; y: single; z: single; w: single)>(z_ProgramNamedParameter4fNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramNamedParameter4fNV(id: UInt32; len: Int32; name: array of Byte; x: single; y: single; z: single; w: single);
    begin
      z_ProgramNamedParameter4fNV_ovr_0(id, len, name[0], x, y, z, w);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramNamedParameter4fNV(id: UInt32; len: Int32; var name: Byte; x: single; y: single; z: single; w: single);
    begin
      z_ProgramNamedParameter4fNV_ovr_0(id, len, name, x, y, z, w);
    end;
    public z_ProgramNamedParameter4fNV_ovr_2 := GetFuncOrNil&<procedure(id: UInt32; len: Int32; name: IntPtr; x: single; y: single; z: single; w: single)>(z_ProgramNamedParameter4fNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramNamedParameter4fNV(id: UInt32; len: Int32; name: IntPtr; x: single; y: single; z: single; w: single);
    begin
      z_ProgramNamedParameter4fNV_ovr_2(id, len, name, x, y, z, w);
    end;
    
    public z_ProgramNamedParameter4fvNV_adr := GetFuncAdr('glProgramNamedParameter4fvNV');
    public z_ProgramNamedParameter4fvNV_ovr_0 := GetFuncOrNil&<procedure(id: UInt32; len: Int32; var name: Byte; var v: single)>(z_ProgramNamedParameter4fvNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramNamedParameter4fvNV(id: UInt32; len: Int32; name: array of Byte; v: array of single);
    begin
      z_ProgramNamedParameter4fvNV_ovr_0(id, len, name[0], v[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramNamedParameter4fvNV(id: UInt32; len: Int32; name: array of Byte; var v: single);
    begin
      z_ProgramNamedParameter4fvNV_ovr_0(id, len, name[0], v);
    end;
    public z_ProgramNamedParameter4fvNV_ovr_2 := GetFuncOrNil&<procedure(id: UInt32; len: Int32; var name: Byte; v: IntPtr)>(z_ProgramNamedParameter4fvNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramNamedParameter4fvNV(id: UInt32; len: Int32; name: array of Byte; v: IntPtr);
    begin
      z_ProgramNamedParameter4fvNV_ovr_2(id, len, name[0], v);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramNamedParameter4fvNV(id: UInt32; len: Int32; var name: Byte; v: array of single);
    begin
      z_ProgramNamedParameter4fvNV_ovr_0(id, len, name, v[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramNamedParameter4fvNV(id: UInt32; len: Int32; var name: Byte; var v: single);
    begin
      z_ProgramNamedParameter4fvNV_ovr_0(id, len, name, v);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramNamedParameter4fvNV(id: UInt32; len: Int32; var name: Byte; v: IntPtr);
    begin
      z_ProgramNamedParameter4fvNV_ovr_2(id, len, name, v);
    end;
    public z_ProgramNamedParameter4fvNV_ovr_6 := GetFuncOrNil&<procedure(id: UInt32; len: Int32; name: IntPtr; var v: single)>(z_ProgramNamedParameter4fvNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramNamedParameter4fvNV(id: UInt32; len: Int32; name: IntPtr; v: array of single);
    begin
      z_ProgramNamedParameter4fvNV_ovr_6(id, len, name, v[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramNamedParameter4fvNV(id: UInt32; len: Int32; name: IntPtr; var v: single);
    begin
      z_ProgramNamedParameter4fvNV_ovr_6(id, len, name, v);
    end;
    public z_ProgramNamedParameter4fvNV_ovr_8 := GetFuncOrNil&<procedure(id: UInt32; len: Int32; name: IntPtr; v: IntPtr)>(z_ProgramNamedParameter4fvNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramNamedParameter4fvNV(id: UInt32; len: Int32; name: IntPtr; v: IntPtr);
    begin
      z_ProgramNamedParameter4fvNV_ovr_8(id, len, name, v);
    end;
    
    public z_ProgramNamedParameter4dNV_adr := GetFuncAdr('glProgramNamedParameter4dNV');
    public z_ProgramNamedParameter4dNV_ovr_0 := GetFuncOrNil&<procedure(id: UInt32; len: Int32; var name: Byte; x: real; y: real; z: real; w: real)>(z_ProgramNamedParameter4dNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramNamedParameter4dNV(id: UInt32; len: Int32; name: array of Byte; x: real; y: real; z: real; w: real);
    begin
      z_ProgramNamedParameter4dNV_ovr_0(id, len, name[0], x, y, z, w);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramNamedParameter4dNV(id: UInt32; len: Int32; var name: Byte; x: real; y: real; z: real; w: real);
    begin
      z_ProgramNamedParameter4dNV_ovr_0(id, len, name, x, y, z, w);
    end;
    public z_ProgramNamedParameter4dNV_ovr_2 := GetFuncOrNil&<procedure(id: UInt32; len: Int32; name: IntPtr; x: real; y: real; z: real; w: real)>(z_ProgramNamedParameter4dNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramNamedParameter4dNV(id: UInt32; len: Int32; name: IntPtr; x: real; y: real; z: real; w: real);
    begin
      z_ProgramNamedParameter4dNV_ovr_2(id, len, name, x, y, z, w);
    end;
    
    public z_ProgramNamedParameter4dvNV_adr := GetFuncAdr('glProgramNamedParameter4dvNV');
    public z_ProgramNamedParameter4dvNV_ovr_0 := GetFuncOrNil&<procedure(id: UInt32; len: Int32; var name: Byte; var v: real)>(z_ProgramNamedParameter4dvNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramNamedParameter4dvNV(id: UInt32; len: Int32; name: array of Byte; v: array of real);
    begin
      z_ProgramNamedParameter4dvNV_ovr_0(id, len, name[0], v[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramNamedParameter4dvNV(id: UInt32; len: Int32; name: array of Byte; var v: real);
    begin
      z_ProgramNamedParameter4dvNV_ovr_0(id, len, name[0], v);
    end;
    public z_ProgramNamedParameter4dvNV_ovr_2 := GetFuncOrNil&<procedure(id: UInt32; len: Int32; var name: Byte; v: IntPtr)>(z_ProgramNamedParameter4dvNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramNamedParameter4dvNV(id: UInt32; len: Int32; name: array of Byte; v: IntPtr);
    begin
      z_ProgramNamedParameter4dvNV_ovr_2(id, len, name[0], v);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramNamedParameter4dvNV(id: UInt32; len: Int32; var name: Byte; v: array of real);
    begin
      z_ProgramNamedParameter4dvNV_ovr_0(id, len, name, v[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramNamedParameter4dvNV(id: UInt32; len: Int32; var name: Byte; var v: real);
    begin
      z_ProgramNamedParameter4dvNV_ovr_0(id, len, name, v);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramNamedParameter4dvNV(id: UInt32; len: Int32; var name: Byte; v: IntPtr);
    begin
      z_ProgramNamedParameter4dvNV_ovr_2(id, len, name, v);
    end;
    public z_ProgramNamedParameter4dvNV_ovr_6 := GetFuncOrNil&<procedure(id: UInt32; len: Int32; name: IntPtr; var v: real)>(z_ProgramNamedParameter4dvNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramNamedParameter4dvNV(id: UInt32; len: Int32; name: IntPtr; v: array of real);
    begin
      z_ProgramNamedParameter4dvNV_ovr_6(id, len, name, v[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramNamedParameter4dvNV(id: UInt32; len: Int32; name: IntPtr; var v: real);
    begin
      z_ProgramNamedParameter4dvNV_ovr_6(id, len, name, v);
    end;
    public z_ProgramNamedParameter4dvNV_ovr_8 := GetFuncOrNil&<procedure(id: UInt32; len: Int32; name: IntPtr; v: IntPtr)>(z_ProgramNamedParameter4dvNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramNamedParameter4dvNV(id: UInt32; len: Int32; name: IntPtr; v: IntPtr);
    begin
      z_ProgramNamedParameter4dvNV_ovr_8(id, len, name, v);
    end;
    
    public z_GetProgramNamedParameterfvNV_adr := GetFuncAdr('glGetProgramNamedParameterfvNV');
    public z_GetProgramNamedParameterfvNV_ovr_0 := GetFuncOrNil&<procedure(id: UInt32; len: Int32; var name: Byte; var &params: single)>(z_GetProgramNamedParameterfvNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetProgramNamedParameterfvNV(id: UInt32; len: Int32; name: array of Byte; &params: array of single);
    begin
      z_GetProgramNamedParameterfvNV_ovr_0(id, len, name[0], &params[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetProgramNamedParameterfvNV(id: UInt32; len: Int32; name: array of Byte; var &params: single);
    begin
      z_GetProgramNamedParameterfvNV_ovr_0(id, len, name[0], &params);
    end;
    public z_GetProgramNamedParameterfvNV_ovr_2 := GetFuncOrNil&<procedure(id: UInt32; len: Int32; var name: Byte; &params: IntPtr)>(z_GetProgramNamedParameterfvNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetProgramNamedParameterfvNV(id: UInt32; len: Int32; name: array of Byte; &params: IntPtr);
    begin
      z_GetProgramNamedParameterfvNV_ovr_2(id, len, name[0], &params);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetProgramNamedParameterfvNV(id: UInt32; len: Int32; var name: Byte; &params: array of single);
    begin
      z_GetProgramNamedParameterfvNV_ovr_0(id, len, name, &params[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetProgramNamedParameterfvNV(id: UInt32; len: Int32; var name: Byte; var &params: single);
    begin
      z_GetProgramNamedParameterfvNV_ovr_0(id, len, name, &params);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetProgramNamedParameterfvNV(id: UInt32; len: Int32; var name: Byte; &params: IntPtr);
    begin
      z_GetProgramNamedParameterfvNV_ovr_2(id, len, name, &params);
    end;
    public z_GetProgramNamedParameterfvNV_ovr_6 := GetFuncOrNil&<procedure(id: UInt32; len: Int32; name: IntPtr; var &params: single)>(z_GetProgramNamedParameterfvNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetProgramNamedParameterfvNV(id: UInt32; len: Int32; name: IntPtr; &params: array of single);
    begin
      z_GetProgramNamedParameterfvNV_ovr_6(id, len, name, &params[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetProgramNamedParameterfvNV(id: UInt32; len: Int32; name: IntPtr; var &params: single);
    begin
      z_GetProgramNamedParameterfvNV_ovr_6(id, len, name, &params);
    end;
    public z_GetProgramNamedParameterfvNV_ovr_8 := GetFuncOrNil&<procedure(id: UInt32; len: Int32; name: IntPtr; &params: IntPtr)>(z_GetProgramNamedParameterfvNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetProgramNamedParameterfvNV(id: UInt32; len: Int32; name: IntPtr; &params: IntPtr);
    begin
      z_GetProgramNamedParameterfvNV_ovr_8(id, len, name, &params);
    end;
    
    public z_GetProgramNamedParameterdvNV_adr := GetFuncAdr('glGetProgramNamedParameterdvNV');
    public z_GetProgramNamedParameterdvNV_ovr_0 := GetFuncOrNil&<procedure(id: UInt32; len: Int32; var name: Byte; var &params: real)>(z_GetProgramNamedParameterdvNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetProgramNamedParameterdvNV(id: UInt32; len: Int32; name: array of Byte; &params: array of real);
    begin
      z_GetProgramNamedParameterdvNV_ovr_0(id, len, name[0], &params[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetProgramNamedParameterdvNV(id: UInt32; len: Int32; name: array of Byte; var &params: real);
    begin
      z_GetProgramNamedParameterdvNV_ovr_0(id, len, name[0], &params);
    end;
    public z_GetProgramNamedParameterdvNV_ovr_2 := GetFuncOrNil&<procedure(id: UInt32; len: Int32; var name: Byte; &params: IntPtr)>(z_GetProgramNamedParameterdvNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetProgramNamedParameterdvNV(id: UInt32; len: Int32; name: array of Byte; &params: IntPtr);
    begin
      z_GetProgramNamedParameterdvNV_ovr_2(id, len, name[0], &params);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetProgramNamedParameterdvNV(id: UInt32; len: Int32; var name: Byte; &params: array of real);
    begin
      z_GetProgramNamedParameterdvNV_ovr_0(id, len, name, &params[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetProgramNamedParameterdvNV(id: UInt32; len: Int32; var name: Byte; var &params: real);
    begin
      z_GetProgramNamedParameterdvNV_ovr_0(id, len, name, &params);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetProgramNamedParameterdvNV(id: UInt32; len: Int32; var name: Byte; &params: IntPtr);
    begin
      z_GetProgramNamedParameterdvNV_ovr_2(id, len, name, &params);
    end;
    public z_GetProgramNamedParameterdvNV_ovr_6 := GetFuncOrNil&<procedure(id: UInt32; len: Int32; name: IntPtr; var &params: real)>(z_GetProgramNamedParameterdvNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetProgramNamedParameterdvNV(id: UInt32; len: Int32; name: IntPtr; &params: array of real);
    begin
      z_GetProgramNamedParameterdvNV_ovr_6(id, len, name, &params[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetProgramNamedParameterdvNV(id: UInt32; len: Int32; name: IntPtr; var &params: real);
    begin
      z_GetProgramNamedParameterdvNV_ovr_6(id, len, name, &params);
    end;
    public z_GetProgramNamedParameterdvNV_ovr_8 := GetFuncOrNil&<procedure(id: UInt32; len: Int32; name: IntPtr; &params: IntPtr)>(z_GetProgramNamedParameterdvNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetProgramNamedParameterdvNV(id: UInt32; len: Int32; name: IntPtr; &params: IntPtr);
    begin
      z_GetProgramNamedParameterdvNV_ovr_8(id, len, name, &params);
    end;
    
  end;
  
  glFramebufferMixedSamplesNV = sealed class
    public static function GetFuncAdr([MarshalAs(UnmanagedType.LPStr)] lpszProc: string): IntPtr;
    external 'opengl32.dll' name 'wglGetProcAddress';
    public static function GetFuncOrNil<T>(fadr: IntPtr) :=
    fadr=IntPtr.Zero ? default(T) :
    Marshal.GetDelegateForFunctionPointer&<T>(fadr);
    
    public z_RasterSamplesEXT_adr := GetFuncAdr('glRasterSamplesEXT');
    public z_RasterSamplesEXT_ovr_0 := GetFuncOrNil&<procedure(samples: UInt32; fixedsamplelocations: boolean)>(z_RasterSamplesEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure RasterSamplesEXT(samples: UInt32; fixedsamplelocations: boolean);
    begin
      z_RasterSamplesEXT_ovr_0(samples, fixedsamplelocations);
    end;
    
    public z_CoverageModulationTableNV_adr := GetFuncAdr('glCoverageModulationTableNV');
    public z_CoverageModulationTableNV_ovr_0 := GetFuncOrNil&<procedure(n: Int32; var v: single)>(z_CoverageModulationTableNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure CoverageModulationTableNV(n: Int32; v: array of single);
    begin
      z_CoverageModulationTableNV_ovr_0(n, v[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure CoverageModulationTableNV(n: Int32; var v: single);
    begin
      z_CoverageModulationTableNV_ovr_0(n, v);
    end;
    public z_CoverageModulationTableNV_ovr_2 := GetFuncOrNil&<procedure(n: Int32; v: IntPtr)>(z_CoverageModulationTableNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure CoverageModulationTableNV(n: Int32; v: IntPtr);
    begin
      z_CoverageModulationTableNV_ovr_2(n, v);
    end;
    
    public z_GetCoverageModulationTableNV_adr := GetFuncAdr('glGetCoverageModulationTableNV');
    public z_GetCoverageModulationTableNV_ovr_0 := GetFuncOrNil&<procedure(bufSize: Int32; var v: single)>(z_GetCoverageModulationTableNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetCoverageModulationTableNV(bufSize: Int32; v: array of single);
    begin
      z_GetCoverageModulationTableNV_ovr_0(bufSize, v[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetCoverageModulationTableNV(bufSize: Int32; var v: single);
    begin
      z_GetCoverageModulationTableNV_ovr_0(bufSize, v);
    end;
    public z_GetCoverageModulationTableNV_ovr_2 := GetFuncOrNil&<procedure(bufSize: Int32; v: IntPtr)>(z_GetCoverageModulationTableNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetCoverageModulationTableNV(bufSize: Int32; v: IntPtr);
    begin
      z_GetCoverageModulationTableNV_ovr_2(bufSize, v);
    end;
    
    public z_CoverageModulationNV_adr := GetFuncAdr('glCoverageModulationNV');
    public z_CoverageModulationNV_ovr_0 := GetFuncOrNil&<procedure(components: DummyEnum)>(z_CoverageModulationNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure CoverageModulationNV(components: DummyEnum);
    begin
      z_CoverageModulationNV_ovr_0(components);
    end;
    
  end;
  
  glFramebufferMultisampleCoverageNV = sealed class
    public static function GetFuncAdr([MarshalAs(UnmanagedType.LPStr)] lpszProc: string): IntPtr;
    external 'opengl32.dll' name 'wglGetProcAddress';
    public static function GetFuncOrNil<T>(fadr: IntPtr) :=
    fadr=IntPtr.Zero ? default(T) :
    Marshal.GetDelegateForFunctionPointer&<T>(fadr);
    
    public z_RenderbufferStorageMultisampleCoverageNV_adr := GetFuncAdr('glRenderbufferStorageMultisampleCoverageNV');
    public z_RenderbufferStorageMultisampleCoverageNV_ovr_0 := GetFuncOrNil&<procedure(target: RenderbufferTarget; coverageSamples: Int32; colorSamples: Int32; _internalformat: InternalFormat; width: Int32; height: Int32)>(z_RenderbufferStorageMultisampleCoverageNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure RenderbufferStorageMultisampleCoverageNV(target: RenderbufferTarget; coverageSamples: Int32; colorSamples: Int32; _internalformat: InternalFormat; width: Int32; height: Int32);
    begin
      z_RenderbufferStorageMultisampleCoverageNV_ovr_0(target, coverageSamples, colorSamples, _internalformat, width, height);
    end;
    
  end;
  
  glGeometryProgram4NV = sealed class
    public static function GetFuncAdr([MarshalAs(UnmanagedType.LPStr)] lpszProc: string): IntPtr;
    external 'opengl32.dll' name 'wglGetProcAddress';
    public static function GetFuncOrNil<T>(fadr: IntPtr) :=
    fadr=IntPtr.Zero ? default(T) :
    Marshal.GetDelegateForFunctionPointer&<T>(fadr);
    
    public z_ProgramVertexLimitNV_adr := GetFuncAdr('glProgramVertexLimitNV');
    public z_ProgramVertexLimitNV_ovr_0 := GetFuncOrNil&<procedure(target: ProgramTarget; limit: Int32)>(z_ProgramVertexLimitNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramVertexLimitNV(target: ProgramTarget; limit: Int32);
    begin
      z_ProgramVertexLimitNV_ovr_0(target, limit);
    end;
    
    public z_FramebufferTextureEXT_adr := GetFuncAdr('glFramebufferTextureEXT');
    public z_FramebufferTextureEXT_ovr_0 := GetFuncOrNil&<procedure(target: FramebufferTarget; attachment: FramebufferAttachment; texture: UInt32; level: Int32)>(z_FramebufferTextureEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure FramebufferTextureEXT(target: FramebufferTarget; attachment: FramebufferAttachment; texture: UInt32; level: Int32);
    begin
      z_FramebufferTextureEXT_ovr_0(target, attachment, texture, level);
    end;
    
    public z_FramebufferTextureLayerEXT_adr := GetFuncAdr('glFramebufferTextureLayerEXT');
    public z_FramebufferTextureLayerEXT_ovr_0 := GetFuncOrNil&<procedure(target: FramebufferTarget; attachment: FramebufferAttachment; texture: UInt32; level: Int32; layer: Int32)>(z_FramebufferTextureLayerEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure FramebufferTextureLayerEXT(target: FramebufferTarget; attachment: FramebufferAttachment; texture: UInt32; level: Int32; layer: Int32);
    begin
      z_FramebufferTextureLayerEXT_ovr_0(target, attachment, texture, level, layer);
    end;
    
    public z_FramebufferTextureFaceEXT_adr := GetFuncAdr('glFramebufferTextureFaceEXT');
    public z_FramebufferTextureFaceEXT_ovr_0 := GetFuncOrNil&<procedure(target: FramebufferTarget; attachment: FramebufferAttachment; texture: UInt32; level: Int32; face: TextureTarget)>(z_FramebufferTextureFaceEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure FramebufferTextureFaceEXT(target: FramebufferTarget; attachment: FramebufferAttachment; texture: UInt32; level: Int32; face: TextureTarget);
    begin
      z_FramebufferTextureFaceEXT_ovr_0(target, attachment, texture, level, face);
    end;
    
  end;
  
  glGpuProgram4NV = sealed class
    public static function GetFuncAdr([MarshalAs(UnmanagedType.LPStr)] lpszProc: string): IntPtr;
    external 'opengl32.dll' name 'wglGetProcAddress';
    public static function GetFuncOrNil<T>(fadr: IntPtr) :=
    fadr=IntPtr.Zero ? default(T) :
    Marshal.GetDelegateForFunctionPointer&<T>(fadr);
    
    public z_ProgramLocalParameterI4iNV_adr := GetFuncAdr('glProgramLocalParameterI4iNV');
    public z_ProgramLocalParameterI4iNV_ovr_0 := GetFuncOrNil&<procedure(target: ProgramTarget; index: UInt32; x: Int32; y: Int32; z: Int32; w: Int32)>(z_ProgramLocalParameterI4iNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramLocalParameterI4iNV(target: ProgramTarget; index: UInt32; x: Int32; y: Int32; z: Int32; w: Int32);
    begin
      z_ProgramLocalParameterI4iNV_ovr_0(target, index, x, y, z, w);
    end;
    
    public z_ProgramLocalParameterI4ivNV_adr := GetFuncAdr('glProgramLocalParameterI4ivNV');
    public z_ProgramLocalParameterI4ivNV_ovr_0 := GetFuncOrNil&<procedure(target: ProgramTarget; index: UInt32; var &params: Int32)>(z_ProgramLocalParameterI4ivNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramLocalParameterI4ivNV(target: ProgramTarget; index: UInt32; &params: array of Int32);
    begin
      z_ProgramLocalParameterI4ivNV_ovr_0(target, index, &params[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramLocalParameterI4ivNV(target: ProgramTarget; index: UInt32; var &params: Int32);
    begin
      z_ProgramLocalParameterI4ivNV_ovr_0(target, index, &params);
    end;
    public z_ProgramLocalParameterI4ivNV_ovr_2 := GetFuncOrNil&<procedure(target: ProgramTarget; index: UInt32; &params: IntPtr)>(z_ProgramLocalParameterI4ivNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramLocalParameterI4ivNV(target: ProgramTarget; index: UInt32; &params: IntPtr);
    begin
      z_ProgramLocalParameterI4ivNV_ovr_2(target, index, &params);
    end;
    
    public z_ProgramLocalParametersI4ivNV_adr := GetFuncAdr('glProgramLocalParametersI4ivNV');
    public z_ProgramLocalParametersI4ivNV_ovr_0 := GetFuncOrNil&<procedure(target: ProgramTarget; index: UInt32; count: Int32; var &params: Int32)>(z_ProgramLocalParametersI4ivNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramLocalParametersI4ivNV(target: ProgramTarget; index: UInt32; count: Int32; &params: array of Int32);
    begin
      z_ProgramLocalParametersI4ivNV_ovr_0(target, index, count, &params[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramLocalParametersI4ivNV(target: ProgramTarget; index: UInt32; count: Int32; var &params: Int32);
    begin
      z_ProgramLocalParametersI4ivNV_ovr_0(target, index, count, &params);
    end;
    public z_ProgramLocalParametersI4ivNV_ovr_2 := GetFuncOrNil&<procedure(target: ProgramTarget; index: UInt32; count: Int32; &params: IntPtr)>(z_ProgramLocalParametersI4ivNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramLocalParametersI4ivNV(target: ProgramTarget; index: UInt32; count: Int32; &params: IntPtr);
    begin
      z_ProgramLocalParametersI4ivNV_ovr_2(target, index, count, &params);
    end;
    
    public z_ProgramLocalParameterI4uiNV_adr := GetFuncAdr('glProgramLocalParameterI4uiNV');
    public z_ProgramLocalParameterI4uiNV_ovr_0 := GetFuncOrNil&<procedure(target: ProgramTarget; index: UInt32; x: UInt32; y: UInt32; z: UInt32; w: UInt32)>(z_ProgramLocalParameterI4uiNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramLocalParameterI4uiNV(target: ProgramTarget; index: UInt32; x: UInt32; y: UInt32; z: UInt32; w: UInt32);
    begin
      z_ProgramLocalParameterI4uiNV_ovr_0(target, index, x, y, z, w);
    end;
    
    public z_ProgramLocalParameterI4uivNV_adr := GetFuncAdr('glProgramLocalParameterI4uivNV');
    public z_ProgramLocalParameterI4uivNV_ovr_0 := GetFuncOrNil&<procedure(target: ProgramTarget; index: UInt32; var &params: UInt32)>(z_ProgramLocalParameterI4uivNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramLocalParameterI4uivNV(target: ProgramTarget; index: UInt32; &params: array of UInt32);
    begin
      z_ProgramLocalParameterI4uivNV_ovr_0(target, index, &params[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramLocalParameterI4uivNV(target: ProgramTarget; index: UInt32; var &params: UInt32);
    begin
      z_ProgramLocalParameterI4uivNV_ovr_0(target, index, &params);
    end;
    public z_ProgramLocalParameterI4uivNV_ovr_2 := GetFuncOrNil&<procedure(target: ProgramTarget; index: UInt32; &params: IntPtr)>(z_ProgramLocalParameterI4uivNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramLocalParameterI4uivNV(target: ProgramTarget; index: UInt32; &params: IntPtr);
    begin
      z_ProgramLocalParameterI4uivNV_ovr_2(target, index, &params);
    end;
    
    public z_ProgramLocalParametersI4uivNV_adr := GetFuncAdr('glProgramLocalParametersI4uivNV');
    public z_ProgramLocalParametersI4uivNV_ovr_0 := GetFuncOrNil&<procedure(target: ProgramTarget; index: UInt32; count: Int32; var &params: UInt32)>(z_ProgramLocalParametersI4uivNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramLocalParametersI4uivNV(target: ProgramTarget; index: UInt32; count: Int32; &params: array of UInt32);
    begin
      z_ProgramLocalParametersI4uivNV_ovr_0(target, index, count, &params[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramLocalParametersI4uivNV(target: ProgramTarget; index: UInt32; count: Int32; var &params: UInt32);
    begin
      z_ProgramLocalParametersI4uivNV_ovr_0(target, index, count, &params);
    end;
    public z_ProgramLocalParametersI4uivNV_ovr_2 := GetFuncOrNil&<procedure(target: ProgramTarget; index: UInt32; count: Int32; &params: IntPtr)>(z_ProgramLocalParametersI4uivNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramLocalParametersI4uivNV(target: ProgramTarget; index: UInt32; count: Int32; &params: IntPtr);
    begin
      z_ProgramLocalParametersI4uivNV_ovr_2(target, index, count, &params);
    end;
    
    public z_ProgramEnvParameterI4iNV_adr := GetFuncAdr('glProgramEnvParameterI4iNV');
    public z_ProgramEnvParameterI4iNV_ovr_0 := GetFuncOrNil&<procedure(target: ProgramTarget; index: UInt32; x: Int32; y: Int32; z: Int32; w: Int32)>(z_ProgramEnvParameterI4iNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramEnvParameterI4iNV(target: ProgramTarget; index: UInt32; x: Int32; y: Int32; z: Int32; w: Int32);
    begin
      z_ProgramEnvParameterI4iNV_ovr_0(target, index, x, y, z, w);
    end;
    
    public z_ProgramEnvParameterI4ivNV_adr := GetFuncAdr('glProgramEnvParameterI4ivNV');
    public z_ProgramEnvParameterI4ivNV_ovr_0 := GetFuncOrNil&<procedure(target: ProgramTarget; index: UInt32; var &params: Int32)>(z_ProgramEnvParameterI4ivNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramEnvParameterI4ivNV(target: ProgramTarget; index: UInt32; &params: array of Int32);
    begin
      z_ProgramEnvParameterI4ivNV_ovr_0(target, index, &params[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramEnvParameterI4ivNV(target: ProgramTarget; index: UInt32; var &params: Int32);
    begin
      z_ProgramEnvParameterI4ivNV_ovr_0(target, index, &params);
    end;
    public z_ProgramEnvParameterI4ivNV_ovr_2 := GetFuncOrNil&<procedure(target: ProgramTarget; index: UInt32; &params: IntPtr)>(z_ProgramEnvParameterI4ivNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramEnvParameterI4ivNV(target: ProgramTarget; index: UInt32; &params: IntPtr);
    begin
      z_ProgramEnvParameterI4ivNV_ovr_2(target, index, &params);
    end;
    
    public z_ProgramEnvParametersI4ivNV_adr := GetFuncAdr('glProgramEnvParametersI4ivNV');
    public z_ProgramEnvParametersI4ivNV_ovr_0 := GetFuncOrNil&<procedure(target: ProgramTarget; index: UInt32; count: Int32; var &params: Int32)>(z_ProgramEnvParametersI4ivNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramEnvParametersI4ivNV(target: ProgramTarget; index: UInt32; count: Int32; &params: array of Int32);
    begin
      z_ProgramEnvParametersI4ivNV_ovr_0(target, index, count, &params[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramEnvParametersI4ivNV(target: ProgramTarget; index: UInt32; count: Int32; var &params: Int32);
    begin
      z_ProgramEnvParametersI4ivNV_ovr_0(target, index, count, &params);
    end;
    public z_ProgramEnvParametersI4ivNV_ovr_2 := GetFuncOrNil&<procedure(target: ProgramTarget; index: UInt32; count: Int32; &params: IntPtr)>(z_ProgramEnvParametersI4ivNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramEnvParametersI4ivNV(target: ProgramTarget; index: UInt32; count: Int32; &params: IntPtr);
    begin
      z_ProgramEnvParametersI4ivNV_ovr_2(target, index, count, &params);
    end;
    
    public z_ProgramEnvParameterI4uiNV_adr := GetFuncAdr('glProgramEnvParameterI4uiNV');
    public z_ProgramEnvParameterI4uiNV_ovr_0 := GetFuncOrNil&<procedure(target: ProgramTarget; index: UInt32; x: UInt32; y: UInt32; z: UInt32; w: UInt32)>(z_ProgramEnvParameterI4uiNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramEnvParameterI4uiNV(target: ProgramTarget; index: UInt32; x: UInt32; y: UInt32; z: UInt32; w: UInt32);
    begin
      z_ProgramEnvParameterI4uiNV_ovr_0(target, index, x, y, z, w);
    end;
    
    public z_ProgramEnvParameterI4uivNV_adr := GetFuncAdr('glProgramEnvParameterI4uivNV');
    public z_ProgramEnvParameterI4uivNV_ovr_0 := GetFuncOrNil&<procedure(target: ProgramTarget; index: UInt32; var &params: UInt32)>(z_ProgramEnvParameterI4uivNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramEnvParameterI4uivNV(target: ProgramTarget; index: UInt32; &params: array of UInt32);
    begin
      z_ProgramEnvParameterI4uivNV_ovr_0(target, index, &params[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramEnvParameterI4uivNV(target: ProgramTarget; index: UInt32; var &params: UInt32);
    begin
      z_ProgramEnvParameterI4uivNV_ovr_0(target, index, &params);
    end;
    public z_ProgramEnvParameterI4uivNV_ovr_2 := GetFuncOrNil&<procedure(target: ProgramTarget; index: UInt32; &params: IntPtr)>(z_ProgramEnvParameterI4uivNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramEnvParameterI4uivNV(target: ProgramTarget; index: UInt32; &params: IntPtr);
    begin
      z_ProgramEnvParameterI4uivNV_ovr_2(target, index, &params);
    end;
    
    public z_ProgramEnvParametersI4uivNV_adr := GetFuncAdr('glProgramEnvParametersI4uivNV');
    public z_ProgramEnvParametersI4uivNV_ovr_0 := GetFuncOrNil&<procedure(target: ProgramTarget; index: UInt32; count: Int32; var &params: UInt32)>(z_ProgramEnvParametersI4uivNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramEnvParametersI4uivNV(target: ProgramTarget; index: UInt32; count: Int32; &params: array of UInt32);
    begin
      z_ProgramEnvParametersI4uivNV_ovr_0(target, index, count, &params[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramEnvParametersI4uivNV(target: ProgramTarget; index: UInt32; count: Int32; var &params: UInt32);
    begin
      z_ProgramEnvParametersI4uivNV_ovr_0(target, index, count, &params);
    end;
    public z_ProgramEnvParametersI4uivNV_ovr_2 := GetFuncOrNil&<procedure(target: ProgramTarget; index: UInt32; count: Int32; &params: IntPtr)>(z_ProgramEnvParametersI4uivNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramEnvParametersI4uivNV(target: ProgramTarget; index: UInt32; count: Int32; &params: IntPtr);
    begin
      z_ProgramEnvParametersI4uivNV_ovr_2(target, index, count, &params);
    end;
    
    public z_GetProgramLocalParameterIivNV_adr := GetFuncAdr('glGetProgramLocalParameterIivNV');
    public z_GetProgramLocalParameterIivNV_ovr_0 := GetFuncOrNil&<procedure(target: ProgramTarget; index: UInt32; var &params: Int32)>(z_GetProgramLocalParameterIivNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetProgramLocalParameterIivNV(target: ProgramTarget; index: UInt32; &params: array of Int32);
    begin
      z_GetProgramLocalParameterIivNV_ovr_0(target, index, &params[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetProgramLocalParameterIivNV(target: ProgramTarget; index: UInt32; var &params: Int32);
    begin
      z_GetProgramLocalParameterIivNV_ovr_0(target, index, &params);
    end;
    public z_GetProgramLocalParameterIivNV_ovr_2 := GetFuncOrNil&<procedure(target: ProgramTarget; index: UInt32; &params: IntPtr)>(z_GetProgramLocalParameterIivNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetProgramLocalParameterIivNV(target: ProgramTarget; index: UInt32; &params: IntPtr);
    begin
      z_GetProgramLocalParameterIivNV_ovr_2(target, index, &params);
    end;
    
    public z_GetProgramLocalParameterIuivNV_adr := GetFuncAdr('glGetProgramLocalParameterIuivNV');
    public z_GetProgramLocalParameterIuivNV_ovr_0 := GetFuncOrNil&<procedure(target: ProgramTarget; index: UInt32; var &params: UInt32)>(z_GetProgramLocalParameterIuivNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetProgramLocalParameterIuivNV(target: ProgramTarget; index: UInt32; &params: array of UInt32);
    begin
      z_GetProgramLocalParameterIuivNV_ovr_0(target, index, &params[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetProgramLocalParameterIuivNV(target: ProgramTarget; index: UInt32; var &params: UInt32);
    begin
      z_GetProgramLocalParameterIuivNV_ovr_0(target, index, &params);
    end;
    public z_GetProgramLocalParameterIuivNV_ovr_2 := GetFuncOrNil&<procedure(target: ProgramTarget; index: UInt32; &params: IntPtr)>(z_GetProgramLocalParameterIuivNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetProgramLocalParameterIuivNV(target: ProgramTarget; index: UInt32; &params: IntPtr);
    begin
      z_GetProgramLocalParameterIuivNV_ovr_2(target, index, &params);
    end;
    
    public z_GetProgramEnvParameterIivNV_adr := GetFuncAdr('glGetProgramEnvParameterIivNV');
    public z_GetProgramEnvParameterIivNV_ovr_0 := GetFuncOrNil&<procedure(target: ProgramTarget; index: UInt32; var &params: Int32)>(z_GetProgramEnvParameterIivNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetProgramEnvParameterIivNV(target: ProgramTarget; index: UInt32; &params: array of Int32);
    begin
      z_GetProgramEnvParameterIivNV_ovr_0(target, index, &params[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetProgramEnvParameterIivNV(target: ProgramTarget; index: UInt32; var &params: Int32);
    begin
      z_GetProgramEnvParameterIivNV_ovr_0(target, index, &params);
    end;
    public z_GetProgramEnvParameterIivNV_ovr_2 := GetFuncOrNil&<procedure(target: ProgramTarget; index: UInt32; &params: IntPtr)>(z_GetProgramEnvParameterIivNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetProgramEnvParameterIivNV(target: ProgramTarget; index: UInt32; &params: IntPtr);
    begin
      z_GetProgramEnvParameterIivNV_ovr_2(target, index, &params);
    end;
    
    public z_GetProgramEnvParameterIuivNV_adr := GetFuncAdr('glGetProgramEnvParameterIuivNV');
    public z_GetProgramEnvParameterIuivNV_ovr_0 := GetFuncOrNil&<procedure(target: ProgramTarget; index: UInt32; var &params: UInt32)>(z_GetProgramEnvParameterIuivNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetProgramEnvParameterIuivNV(target: ProgramTarget; index: UInt32; &params: array of UInt32);
    begin
      z_GetProgramEnvParameterIuivNV_ovr_0(target, index, &params[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetProgramEnvParameterIuivNV(target: ProgramTarget; index: UInt32; var &params: UInt32);
    begin
      z_GetProgramEnvParameterIuivNV_ovr_0(target, index, &params);
    end;
    public z_GetProgramEnvParameterIuivNV_ovr_2 := GetFuncOrNil&<procedure(target: ProgramTarget; index: UInt32; &params: IntPtr)>(z_GetProgramEnvParameterIuivNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetProgramEnvParameterIuivNV(target: ProgramTarget; index: UInt32; &params: IntPtr);
    begin
      z_GetProgramEnvParameterIuivNV_ovr_2(target, index, &params);
    end;
    
  end;
  
  glGpuProgram5NV = sealed class
    public static function GetFuncAdr([MarshalAs(UnmanagedType.LPStr)] lpszProc: string): IntPtr;
    external 'opengl32.dll' name 'wglGetProcAddress';
    public static function GetFuncOrNil<T>(fadr: IntPtr) :=
    fadr=IntPtr.Zero ? default(T) :
    Marshal.GetDelegateForFunctionPointer&<T>(fadr);
    
    public z_ProgramSubroutineParametersuivNV_adr := GetFuncAdr('glProgramSubroutineParametersuivNV');
    public z_ProgramSubroutineParametersuivNV_ovr_0 := GetFuncOrNil&<procedure(target: DummyEnum; count: Int32; var &params: UInt32)>(z_ProgramSubroutineParametersuivNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramSubroutineParametersuivNV(target: DummyEnum; count: Int32; &params: array of UInt32);
    begin
      z_ProgramSubroutineParametersuivNV_ovr_0(target, count, &params[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramSubroutineParametersuivNV(target: DummyEnum; count: Int32; var &params: UInt32);
    begin
      z_ProgramSubroutineParametersuivNV_ovr_0(target, count, &params);
    end;
    public z_ProgramSubroutineParametersuivNV_ovr_2 := GetFuncOrNil&<procedure(target: DummyEnum; count: Int32; &params: IntPtr)>(z_ProgramSubroutineParametersuivNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramSubroutineParametersuivNV(target: DummyEnum; count: Int32; &params: IntPtr);
    begin
      z_ProgramSubroutineParametersuivNV_ovr_2(target, count, &params);
    end;
    
    public z_GetProgramSubroutineParameteruivNV_adr := GetFuncAdr('glGetProgramSubroutineParameteruivNV');
    public z_GetProgramSubroutineParameteruivNV_ovr_0 := GetFuncOrNil&<procedure(target: DummyEnum; index: UInt32; var param: UInt32)>(z_GetProgramSubroutineParameteruivNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetProgramSubroutineParameteruivNV(target: DummyEnum; index: UInt32; param: array of UInt32);
    begin
      z_GetProgramSubroutineParameteruivNV_ovr_0(target, index, param[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetProgramSubroutineParameteruivNV(target: DummyEnum; index: UInt32; var param: UInt32);
    begin
      z_GetProgramSubroutineParameteruivNV_ovr_0(target, index, param);
    end;
    public z_GetProgramSubroutineParameteruivNV_ovr_2 := GetFuncOrNil&<procedure(target: DummyEnum; index: UInt32; param: IntPtr)>(z_GetProgramSubroutineParameteruivNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetProgramSubroutineParameteruivNV(target: DummyEnum; index: UInt32; param: IntPtr);
    begin
      z_GetProgramSubroutineParameteruivNV_ovr_2(target, index, param);
    end;
    
  end;
  
  glGpuShader5NV = sealed class
    public static function GetFuncAdr([MarshalAs(UnmanagedType.LPStr)] lpszProc: string): IntPtr;
    external 'opengl32.dll' name 'wglGetProcAddress';
    public static function GetFuncOrNil<T>(fadr: IntPtr) :=
    fadr=IntPtr.Zero ? default(T) :
    Marshal.GetDelegateForFunctionPointer&<T>(fadr);
    
    public z_Uniform1i64NV_adr := GetFuncAdr('glUniform1i64NV');
    public z_Uniform1i64NV_ovr_0 := GetFuncOrNil&<procedure(location: Int32; x: Int64)>(z_Uniform1i64NV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Uniform1i64NV(location: Int32; x: Int64);
    begin
      z_Uniform1i64NV_ovr_0(location, x);
    end;
    
    public z_Uniform2i64NV_adr := GetFuncAdr('glUniform2i64NV');
    public z_Uniform2i64NV_ovr_0 := GetFuncOrNil&<procedure(location: Int32; x: Int64; y: Int64)>(z_Uniform2i64NV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Uniform2i64NV(location: Int32; x: Int64; y: Int64);
    begin
      z_Uniform2i64NV_ovr_0(location, x, y);
    end;
    
    public z_Uniform3i64NV_adr := GetFuncAdr('glUniform3i64NV');
    public z_Uniform3i64NV_ovr_0 := GetFuncOrNil&<procedure(location: Int32; x: Int64; y: Int64; z: Int64)>(z_Uniform3i64NV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Uniform3i64NV(location: Int32; x: Int64; y: Int64; z: Int64);
    begin
      z_Uniform3i64NV_ovr_0(location, x, y, z);
    end;
    
    public z_Uniform4i64NV_adr := GetFuncAdr('glUniform4i64NV');
    public z_Uniform4i64NV_ovr_0 := GetFuncOrNil&<procedure(location: Int32; x: Int64; y: Int64; z: Int64; w: Int64)>(z_Uniform4i64NV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Uniform4i64NV(location: Int32; x: Int64; y: Int64; z: Int64; w: Int64);
    begin
      z_Uniform4i64NV_ovr_0(location, x, y, z, w);
    end;
    
    public z_Uniform1i64vNV_adr := GetFuncAdr('glUniform1i64vNV');
    public z_Uniform1i64vNV_ovr_0 := GetFuncOrNil&<procedure(location: Int32; count: Int32; var value: Int64)>(z_Uniform1i64vNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Uniform1i64vNV(location: Int32; count: Int32; value: array of Int64);
    begin
      z_Uniform1i64vNV_ovr_0(location, count, value[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Uniform1i64vNV(location: Int32; count: Int32; var value: Int64);
    begin
      z_Uniform1i64vNV_ovr_0(location, count, value);
    end;
    public z_Uniform1i64vNV_ovr_2 := GetFuncOrNil&<procedure(location: Int32; count: Int32; value: IntPtr)>(z_Uniform1i64vNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Uniform1i64vNV(location: Int32; count: Int32; value: IntPtr);
    begin
      z_Uniform1i64vNV_ovr_2(location, count, value);
    end;
    
    public z_Uniform2i64vNV_adr := GetFuncAdr('glUniform2i64vNV');
    public z_Uniform2i64vNV_ovr_0 := GetFuncOrNil&<procedure(location: Int32; count: Int32; var value: Int64)>(z_Uniform2i64vNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Uniform2i64vNV(location: Int32; count: Int32; value: array of Int64);
    begin
      z_Uniform2i64vNV_ovr_0(location, count, value[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Uniform2i64vNV(location: Int32; count: Int32; var value: Int64);
    begin
      z_Uniform2i64vNV_ovr_0(location, count, value);
    end;
    public z_Uniform2i64vNV_ovr_2 := GetFuncOrNil&<procedure(location: Int32; count: Int32; value: IntPtr)>(z_Uniform2i64vNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Uniform2i64vNV(location: Int32; count: Int32; value: IntPtr);
    begin
      z_Uniform2i64vNV_ovr_2(location, count, value);
    end;
    
    public z_Uniform3i64vNV_adr := GetFuncAdr('glUniform3i64vNV');
    public z_Uniform3i64vNV_ovr_0 := GetFuncOrNil&<procedure(location: Int32; count: Int32; var value: Int64)>(z_Uniform3i64vNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Uniform3i64vNV(location: Int32; count: Int32; value: array of Int64);
    begin
      z_Uniform3i64vNV_ovr_0(location, count, value[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Uniform3i64vNV(location: Int32; count: Int32; var value: Int64);
    begin
      z_Uniform3i64vNV_ovr_0(location, count, value);
    end;
    public z_Uniform3i64vNV_ovr_2 := GetFuncOrNil&<procedure(location: Int32; count: Int32; value: IntPtr)>(z_Uniform3i64vNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Uniform3i64vNV(location: Int32; count: Int32; value: IntPtr);
    begin
      z_Uniform3i64vNV_ovr_2(location, count, value);
    end;
    
    public z_Uniform4i64vNV_adr := GetFuncAdr('glUniform4i64vNV');
    public z_Uniform4i64vNV_ovr_0 := GetFuncOrNil&<procedure(location: Int32; count: Int32; var value: Int64)>(z_Uniform4i64vNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Uniform4i64vNV(location: Int32; count: Int32; value: array of Int64);
    begin
      z_Uniform4i64vNV_ovr_0(location, count, value[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Uniform4i64vNV(location: Int32; count: Int32; var value: Int64);
    begin
      z_Uniform4i64vNV_ovr_0(location, count, value);
    end;
    public z_Uniform4i64vNV_ovr_2 := GetFuncOrNil&<procedure(location: Int32; count: Int32; value: IntPtr)>(z_Uniform4i64vNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Uniform4i64vNV(location: Int32; count: Int32; value: IntPtr);
    begin
      z_Uniform4i64vNV_ovr_2(location, count, value);
    end;
    
    public z_Uniform1ui64NV_adr := GetFuncAdr('glUniform1ui64NV');
    public z_Uniform1ui64NV_ovr_0 := GetFuncOrNil&<procedure(location: Int32; x: UInt64)>(z_Uniform1ui64NV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Uniform1ui64NV(location: Int32; x: UInt64);
    begin
      z_Uniform1ui64NV_ovr_0(location, x);
    end;
    
    public z_Uniform2ui64NV_adr := GetFuncAdr('glUniform2ui64NV');
    public z_Uniform2ui64NV_ovr_0 := GetFuncOrNil&<procedure(location: Int32; x: UInt64; y: UInt64)>(z_Uniform2ui64NV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Uniform2ui64NV(location: Int32; x: UInt64; y: UInt64);
    begin
      z_Uniform2ui64NV_ovr_0(location, x, y);
    end;
    
    public z_Uniform3ui64NV_adr := GetFuncAdr('glUniform3ui64NV');
    public z_Uniform3ui64NV_ovr_0 := GetFuncOrNil&<procedure(location: Int32; x: UInt64; y: UInt64; z: UInt64)>(z_Uniform3ui64NV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Uniform3ui64NV(location: Int32; x: UInt64; y: UInt64; z: UInt64);
    begin
      z_Uniform3ui64NV_ovr_0(location, x, y, z);
    end;
    
    public z_Uniform4ui64NV_adr := GetFuncAdr('glUniform4ui64NV');
    public z_Uniform4ui64NV_ovr_0 := GetFuncOrNil&<procedure(location: Int32; x: UInt64; y: UInt64; z: UInt64; w: UInt64)>(z_Uniform4ui64NV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Uniform4ui64NV(location: Int32; x: UInt64; y: UInt64; z: UInt64; w: UInt64);
    begin
      z_Uniform4ui64NV_ovr_0(location, x, y, z, w);
    end;
    
    public z_Uniform1ui64vNV_adr := GetFuncAdr('glUniform1ui64vNV');
    public z_Uniform1ui64vNV_ovr_0 := GetFuncOrNil&<procedure(location: Int32; count: Int32; var value: UInt64)>(z_Uniform1ui64vNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Uniform1ui64vNV(location: Int32; count: Int32; value: array of UInt64);
    begin
      z_Uniform1ui64vNV_ovr_0(location, count, value[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Uniform1ui64vNV(location: Int32; count: Int32; var value: UInt64);
    begin
      z_Uniform1ui64vNV_ovr_0(location, count, value);
    end;
    public z_Uniform1ui64vNV_ovr_2 := GetFuncOrNil&<procedure(location: Int32; count: Int32; value: IntPtr)>(z_Uniform1ui64vNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Uniform1ui64vNV(location: Int32; count: Int32; value: IntPtr);
    begin
      z_Uniform1ui64vNV_ovr_2(location, count, value);
    end;
    
    public z_Uniform2ui64vNV_adr := GetFuncAdr('glUniform2ui64vNV');
    public z_Uniform2ui64vNV_ovr_0 := GetFuncOrNil&<procedure(location: Int32; count: Int32; var value: UInt64)>(z_Uniform2ui64vNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Uniform2ui64vNV(location: Int32; count: Int32; value: array of UInt64);
    begin
      z_Uniform2ui64vNV_ovr_0(location, count, value[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Uniform2ui64vNV(location: Int32; count: Int32; var value: UInt64);
    begin
      z_Uniform2ui64vNV_ovr_0(location, count, value);
    end;
    public z_Uniform2ui64vNV_ovr_2 := GetFuncOrNil&<procedure(location: Int32; count: Int32; value: IntPtr)>(z_Uniform2ui64vNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Uniform2ui64vNV(location: Int32; count: Int32; value: IntPtr);
    begin
      z_Uniform2ui64vNV_ovr_2(location, count, value);
    end;
    
    public z_Uniform3ui64vNV_adr := GetFuncAdr('glUniform3ui64vNV');
    public z_Uniform3ui64vNV_ovr_0 := GetFuncOrNil&<procedure(location: Int32; count: Int32; var value: UInt64)>(z_Uniform3ui64vNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Uniform3ui64vNV(location: Int32; count: Int32; value: array of UInt64);
    begin
      z_Uniform3ui64vNV_ovr_0(location, count, value[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Uniform3ui64vNV(location: Int32; count: Int32; var value: UInt64);
    begin
      z_Uniform3ui64vNV_ovr_0(location, count, value);
    end;
    public z_Uniform3ui64vNV_ovr_2 := GetFuncOrNil&<procedure(location: Int32; count: Int32; value: IntPtr)>(z_Uniform3ui64vNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Uniform3ui64vNV(location: Int32; count: Int32; value: IntPtr);
    begin
      z_Uniform3ui64vNV_ovr_2(location, count, value);
    end;
    
    public z_Uniform4ui64vNV_adr := GetFuncAdr('glUniform4ui64vNV');
    public z_Uniform4ui64vNV_ovr_0 := GetFuncOrNil&<procedure(location: Int32; count: Int32; var value: UInt64)>(z_Uniform4ui64vNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Uniform4ui64vNV(location: Int32; count: Int32; value: array of UInt64);
    begin
      z_Uniform4ui64vNV_ovr_0(location, count, value[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Uniform4ui64vNV(location: Int32; count: Int32; var value: UInt64);
    begin
      z_Uniform4ui64vNV_ovr_0(location, count, value);
    end;
    public z_Uniform4ui64vNV_ovr_2 := GetFuncOrNil&<procedure(location: Int32; count: Int32; value: IntPtr)>(z_Uniform4ui64vNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Uniform4ui64vNV(location: Int32; count: Int32; value: IntPtr);
    begin
      z_Uniform4ui64vNV_ovr_2(location, count, value);
    end;
    
    public z_GetUniformi64vNV_adr := GetFuncAdr('glGetUniformi64vNV');
    public z_GetUniformi64vNV_ovr_0 := GetFuncOrNil&<procedure(&program: UInt32; location: Int32; var &params: Int64)>(z_GetUniformi64vNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetUniformi64vNV(&program: UInt32; location: Int32; &params: array of Int64);
    begin
      z_GetUniformi64vNV_ovr_0(&program, location, &params[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetUniformi64vNV(&program: UInt32; location: Int32; var &params: Int64);
    begin
      z_GetUniformi64vNV_ovr_0(&program, location, &params);
    end;
    public z_GetUniformi64vNV_ovr_2 := GetFuncOrNil&<procedure(&program: UInt32; location: Int32; &params: IntPtr)>(z_GetUniformi64vNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetUniformi64vNV(&program: UInt32; location: Int32; &params: IntPtr);
    begin
      z_GetUniformi64vNV_ovr_2(&program, location, &params);
    end;
    
    public z_ProgramUniform1i64NV_adr := GetFuncAdr('glProgramUniform1i64NV');
    public z_ProgramUniform1i64NV_ovr_0 := GetFuncOrNil&<procedure(&program: UInt32; location: Int32; x: Int64)>(z_ProgramUniform1i64NV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniform1i64NV(&program: UInt32; location: Int32; x: Int64);
    begin
      z_ProgramUniform1i64NV_ovr_0(&program, location, x);
    end;
    
    public z_ProgramUniform2i64NV_adr := GetFuncAdr('glProgramUniform2i64NV');
    public z_ProgramUniform2i64NV_ovr_0 := GetFuncOrNil&<procedure(&program: UInt32; location: Int32; x: Int64; y: Int64)>(z_ProgramUniform2i64NV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniform2i64NV(&program: UInt32; location: Int32; x: Int64; y: Int64);
    begin
      z_ProgramUniform2i64NV_ovr_0(&program, location, x, y);
    end;
    
    public z_ProgramUniform3i64NV_adr := GetFuncAdr('glProgramUniform3i64NV');
    public z_ProgramUniform3i64NV_ovr_0 := GetFuncOrNil&<procedure(&program: UInt32; location: Int32; x: Int64; y: Int64; z: Int64)>(z_ProgramUniform3i64NV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniform3i64NV(&program: UInt32; location: Int32; x: Int64; y: Int64; z: Int64);
    begin
      z_ProgramUniform3i64NV_ovr_0(&program, location, x, y, z);
    end;
    
    public z_ProgramUniform4i64NV_adr := GetFuncAdr('glProgramUniform4i64NV');
    public z_ProgramUniform4i64NV_ovr_0 := GetFuncOrNil&<procedure(&program: UInt32; location: Int32; x: Int64; y: Int64; z: Int64; w: Int64)>(z_ProgramUniform4i64NV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniform4i64NV(&program: UInt32; location: Int32; x: Int64; y: Int64; z: Int64; w: Int64);
    begin
      z_ProgramUniform4i64NV_ovr_0(&program, location, x, y, z, w);
    end;
    
    public z_ProgramUniform1i64vNV_adr := GetFuncAdr('glProgramUniform1i64vNV');
    public z_ProgramUniform1i64vNV_ovr_0 := GetFuncOrNil&<procedure(&program: UInt32; location: Int32; count: Int32; var value: Int64)>(z_ProgramUniform1i64vNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniform1i64vNV(&program: UInt32; location: Int32; count: Int32; value: array of Int64);
    begin
      z_ProgramUniform1i64vNV_ovr_0(&program, location, count, value[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniform1i64vNV(&program: UInt32; location: Int32; count: Int32; var value: Int64);
    begin
      z_ProgramUniform1i64vNV_ovr_0(&program, location, count, value);
    end;
    public z_ProgramUniform1i64vNV_ovr_2 := GetFuncOrNil&<procedure(&program: UInt32; location: Int32; count: Int32; value: IntPtr)>(z_ProgramUniform1i64vNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniform1i64vNV(&program: UInt32; location: Int32; count: Int32; value: IntPtr);
    begin
      z_ProgramUniform1i64vNV_ovr_2(&program, location, count, value);
    end;
    
    public z_ProgramUniform2i64vNV_adr := GetFuncAdr('glProgramUniform2i64vNV');
    public z_ProgramUniform2i64vNV_ovr_0 := GetFuncOrNil&<procedure(&program: UInt32; location: Int32; count: Int32; var value: Int64)>(z_ProgramUniform2i64vNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniform2i64vNV(&program: UInt32; location: Int32; count: Int32; value: array of Int64);
    begin
      z_ProgramUniform2i64vNV_ovr_0(&program, location, count, value[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniform2i64vNV(&program: UInt32; location: Int32; count: Int32; var value: Int64);
    begin
      z_ProgramUniform2i64vNV_ovr_0(&program, location, count, value);
    end;
    public z_ProgramUniform2i64vNV_ovr_2 := GetFuncOrNil&<procedure(&program: UInt32; location: Int32; count: Int32; value: IntPtr)>(z_ProgramUniform2i64vNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniform2i64vNV(&program: UInt32; location: Int32; count: Int32; value: IntPtr);
    begin
      z_ProgramUniform2i64vNV_ovr_2(&program, location, count, value);
    end;
    
    public z_ProgramUniform3i64vNV_adr := GetFuncAdr('glProgramUniform3i64vNV');
    public z_ProgramUniform3i64vNV_ovr_0 := GetFuncOrNil&<procedure(&program: UInt32; location: Int32; count: Int32; var value: Int64)>(z_ProgramUniform3i64vNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniform3i64vNV(&program: UInt32; location: Int32; count: Int32; value: array of Int64);
    begin
      z_ProgramUniform3i64vNV_ovr_0(&program, location, count, value[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniform3i64vNV(&program: UInt32; location: Int32; count: Int32; var value: Int64);
    begin
      z_ProgramUniform3i64vNV_ovr_0(&program, location, count, value);
    end;
    public z_ProgramUniform3i64vNV_ovr_2 := GetFuncOrNil&<procedure(&program: UInt32; location: Int32; count: Int32; value: IntPtr)>(z_ProgramUniform3i64vNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniform3i64vNV(&program: UInt32; location: Int32; count: Int32; value: IntPtr);
    begin
      z_ProgramUniform3i64vNV_ovr_2(&program, location, count, value);
    end;
    
    public z_ProgramUniform4i64vNV_adr := GetFuncAdr('glProgramUniform4i64vNV');
    public z_ProgramUniform4i64vNV_ovr_0 := GetFuncOrNil&<procedure(&program: UInt32; location: Int32; count: Int32; var value: Int64)>(z_ProgramUniform4i64vNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniform4i64vNV(&program: UInt32; location: Int32; count: Int32; value: array of Int64);
    begin
      z_ProgramUniform4i64vNV_ovr_0(&program, location, count, value[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniform4i64vNV(&program: UInt32; location: Int32; count: Int32; var value: Int64);
    begin
      z_ProgramUniform4i64vNV_ovr_0(&program, location, count, value);
    end;
    public z_ProgramUniform4i64vNV_ovr_2 := GetFuncOrNil&<procedure(&program: UInt32; location: Int32; count: Int32; value: IntPtr)>(z_ProgramUniform4i64vNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniform4i64vNV(&program: UInt32; location: Int32; count: Int32; value: IntPtr);
    begin
      z_ProgramUniform4i64vNV_ovr_2(&program, location, count, value);
    end;
    
    public z_ProgramUniform1ui64NV_adr := GetFuncAdr('glProgramUniform1ui64NV');
    public z_ProgramUniform1ui64NV_ovr_0 := GetFuncOrNil&<procedure(&program: UInt32; location: Int32; x: UInt64)>(z_ProgramUniform1ui64NV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniform1ui64NV(&program: UInt32; location: Int32; x: UInt64);
    begin
      z_ProgramUniform1ui64NV_ovr_0(&program, location, x);
    end;
    
    public z_ProgramUniform2ui64NV_adr := GetFuncAdr('glProgramUniform2ui64NV');
    public z_ProgramUniform2ui64NV_ovr_0 := GetFuncOrNil&<procedure(&program: UInt32; location: Int32; x: UInt64; y: UInt64)>(z_ProgramUniform2ui64NV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniform2ui64NV(&program: UInt32; location: Int32; x: UInt64; y: UInt64);
    begin
      z_ProgramUniform2ui64NV_ovr_0(&program, location, x, y);
    end;
    
    public z_ProgramUniform3ui64NV_adr := GetFuncAdr('glProgramUniform3ui64NV');
    public z_ProgramUniform3ui64NV_ovr_0 := GetFuncOrNil&<procedure(&program: UInt32; location: Int32; x: UInt64; y: UInt64; z: UInt64)>(z_ProgramUniform3ui64NV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniform3ui64NV(&program: UInt32; location: Int32; x: UInt64; y: UInt64; z: UInt64);
    begin
      z_ProgramUniform3ui64NV_ovr_0(&program, location, x, y, z);
    end;
    
    public z_ProgramUniform4ui64NV_adr := GetFuncAdr('glProgramUniform4ui64NV');
    public z_ProgramUniform4ui64NV_ovr_0 := GetFuncOrNil&<procedure(&program: UInt32; location: Int32; x: UInt64; y: UInt64; z: UInt64; w: UInt64)>(z_ProgramUniform4ui64NV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniform4ui64NV(&program: UInt32; location: Int32; x: UInt64; y: UInt64; z: UInt64; w: UInt64);
    begin
      z_ProgramUniform4ui64NV_ovr_0(&program, location, x, y, z, w);
    end;
    
    public z_ProgramUniform1ui64vNV_adr := GetFuncAdr('glProgramUniform1ui64vNV');
    public z_ProgramUniform1ui64vNV_ovr_0 := GetFuncOrNil&<procedure(&program: UInt32; location: Int32; count: Int32; var value: UInt64)>(z_ProgramUniform1ui64vNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniform1ui64vNV(&program: UInt32; location: Int32; count: Int32; value: array of UInt64);
    begin
      z_ProgramUniform1ui64vNV_ovr_0(&program, location, count, value[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniform1ui64vNV(&program: UInt32; location: Int32; count: Int32; var value: UInt64);
    begin
      z_ProgramUniform1ui64vNV_ovr_0(&program, location, count, value);
    end;
    public z_ProgramUniform1ui64vNV_ovr_2 := GetFuncOrNil&<procedure(&program: UInt32; location: Int32; count: Int32; value: IntPtr)>(z_ProgramUniform1ui64vNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniform1ui64vNV(&program: UInt32; location: Int32; count: Int32; value: IntPtr);
    begin
      z_ProgramUniform1ui64vNV_ovr_2(&program, location, count, value);
    end;
    
    public z_ProgramUniform2ui64vNV_adr := GetFuncAdr('glProgramUniform2ui64vNV');
    public z_ProgramUniform2ui64vNV_ovr_0 := GetFuncOrNil&<procedure(&program: UInt32; location: Int32; count: Int32; var value: UInt64)>(z_ProgramUniform2ui64vNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniform2ui64vNV(&program: UInt32; location: Int32; count: Int32; value: array of UInt64);
    begin
      z_ProgramUniform2ui64vNV_ovr_0(&program, location, count, value[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniform2ui64vNV(&program: UInt32; location: Int32; count: Int32; var value: UInt64);
    begin
      z_ProgramUniform2ui64vNV_ovr_0(&program, location, count, value);
    end;
    public z_ProgramUniform2ui64vNV_ovr_2 := GetFuncOrNil&<procedure(&program: UInt32; location: Int32; count: Int32; value: IntPtr)>(z_ProgramUniform2ui64vNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniform2ui64vNV(&program: UInt32; location: Int32; count: Int32; value: IntPtr);
    begin
      z_ProgramUniform2ui64vNV_ovr_2(&program, location, count, value);
    end;
    
    public z_ProgramUniform3ui64vNV_adr := GetFuncAdr('glProgramUniform3ui64vNV');
    public z_ProgramUniform3ui64vNV_ovr_0 := GetFuncOrNil&<procedure(&program: UInt32; location: Int32; count: Int32; var value: UInt64)>(z_ProgramUniform3ui64vNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniform3ui64vNV(&program: UInt32; location: Int32; count: Int32; value: array of UInt64);
    begin
      z_ProgramUniform3ui64vNV_ovr_0(&program, location, count, value[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniform3ui64vNV(&program: UInt32; location: Int32; count: Int32; var value: UInt64);
    begin
      z_ProgramUniform3ui64vNV_ovr_0(&program, location, count, value);
    end;
    public z_ProgramUniform3ui64vNV_ovr_2 := GetFuncOrNil&<procedure(&program: UInt32; location: Int32; count: Int32; value: IntPtr)>(z_ProgramUniform3ui64vNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniform3ui64vNV(&program: UInt32; location: Int32; count: Int32; value: IntPtr);
    begin
      z_ProgramUniform3ui64vNV_ovr_2(&program, location, count, value);
    end;
    
    public z_ProgramUniform4ui64vNV_adr := GetFuncAdr('glProgramUniform4ui64vNV');
    public z_ProgramUniform4ui64vNV_ovr_0 := GetFuncOrNil&<procedure(&program: UInt32; location: Int32; count: Int32; var value: UInt64)>(z_ProgramUniform4ui64vNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniform4ui64vNV(&program: UInt32; location: Int32; count: Int32; value: array of UInt64);
    begin
      z_ProgramUniform4ui64vNV_ovr_0(&program, location, count, value[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniform4ui64vNV(&program: UInt32; location: Int32; count: Int32; var value: UInt64);
    begin
      z_ProgramUniform4ui64vNV_ovr_0(&program, location, count, value);
    end;
    public z_ProgramUniform4ui64vNV_ovr_2 := GetFuncOrNil&<procedure(&program: UInt32; location: Int32; count: Int32; value: IntPtr)>(z_ProgramUniform4ui64vNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniform4ui64vNV(&program: UInt32; location: Int32; count: Int32; value: IntPtr);
    begin
      z_ProgramUniform4ui64vNV_ovr_2(&program, location, count, value);
    end;
    
  end;
  
  glHalfFloatNV = sealed class
    public static function GetFuncAdr([MarshalAs(UnmanagedType.LPStr)] lpszProc: string): IntPtr;
    external 'opengl32.dll' name 'wglGetProcAddress';
    public static function GetFuncOrNil<T>(fadr: IntPtr) :=
    fadr=IntPtr.Zero ? default(T) :
    Marshal.GetDelegateForFunctionPointer&<T>(fadr);
    
    public z_Vertex2hNV_adr := GetFuncAdr('glVertex2hNV');
    public z_Vertex2hNV_ovr_0 := GetFuncOrNil&<procedure(x: Half; y: Half)>(z_Vertex2hNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Vertex2hNV(x: Half; y: Half);
    begin
      z_Vertex2hNV_ovr_0(x, y);
    end;
    
    public z_Vertex2hvNV_adr := GetFuncAdr('glVertex2hvNV');
    public z_Vertex2hvNV_ovr_0 := GetFuncOrNil&<procedure(var v: Half)>(z_Vertex2hvNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Vertex2hvNV(v: array of Half);
    begin
      z_Vertex2hvNV_ovr_0(v[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Vertex2hvNV(var v: Half);
    begin
      z_Vertex2hvNV_ovr_0(v);
    end;
    public z_Vertex2hvNV_ovr_2 := GetFuncOrNil&<procedure(v: IntPtr)>(z_Vertex2hvNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Vertex2hvNV(v: IntPtr);
    begin
      z_Vertex2hvNV_ovr_2(v);
    end;
    
    public z_Vertex3hNV_adr := GetFuncAdr('glVertex3hNV');
    public z_Vertex3hNV_ovr_0 := GetFuncOrNil&<procedure(x: Half; y: Half; z: Half)>(z_Vertex3hNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Vertex3hNV(x: Half; y: Half; z: Half);
    begin
      z_Vertex3hNV_ovr_0(x, y, z);
    end;
    
    public z_Vertex3hvNV_adr := GetFuncAdr('glVertex3hvNV');
    public z_Vertex3hvNV_ovr_0 := GetFuncOrNil&<procedure(var v: Half)>(z_Vertex3hvNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Vertex3hvNV(v: array of Half);
    begin
      z_Vertex3hvNV_ovr_0(v[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Vertex3hvNV(var v: Half);
    begin
      z_Vertex3hvNV_ovr_0(v);
    end;
    public z_Vertex3hvNV_ovr_2 := GetFuncOrNil&<procedure(v: IntPtr)>(z_Vertex3hvNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Vertex3hvNV(v: IntPtr);
    begin
      z_Vertex3hvNV_ovr_2(v);
    end;
    
    public z_Vertex4hNV_adr := GetFuncAdr('glVertex4hNV');
    public z_Vertex4hNV_ovr_0 := GetFuncOrNil&<procedure(x: Half; y: Half; z: Half; w: Half)>(z_Vertex4hNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Vertex4hNV(x: Half; y: Half; z: Half; w: Half);
    begin
      z_Vertex4hNV_ovr_0(x, y, z, w);
    end;
    
    public z_Vertex4hvNV_adr := GetFuncAdr('glVertex4hvNV');
    public z_Vertex4hvNV_ovr_0 := GetFuncOrNil&<procedure(var v: Half)>(z_Vertex4hvNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Vertex4hvNV(v: array of Half);
    begin
      z_Vertex4hvNV_ovr_0(v[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Vertex4hvNV(var v: Half);
    begin
      z_Vertex4hvNV_ovr_0(v);
    end;
    public z_Vertex4hvNV_ovr_2 := GetFuncOrNil&<procedure(v: IntPtr)>(z_Vertex4hvNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Vertex4hvNV(v: IntPtr);
    begin
      z_Vertex4hvNV_ovr_2(v);
    end;
    
    public z_Normal3hNV_adr := GetFuncAdr('glNormal3hNV');
    public z_Normal3hNV_ovr_0 := GetFuncOrNil&<procedure(nx: Half; ny: Half; nz: Half)>(z_Normal3hNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Normal3hNV(nx: Half; ny: Half; nz: Half);
    begin
      z_Normal3hNV_ovr_0(nx, ny, nz);
    end;
    
    public z_Normal3hvNV_adr := GetFuncAdr('glNormal3hvNV');
    public z_Normal3hvNV_ovr_0 := GetFuncOrNil&<procedure(var v: Half)>(z_Normal3hvNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Normal3hvNV(v: array of Half);
    begin
      z_Normal3hvNV_ovr_0(v[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Normal3hvNV(var v: Half);
    begin
      z_Normal3hvNV_ovr_0(v);
    end;
    public z_Normal3hvNV_ovr_2 := GetFuncOrNil&<procedure(v: IntPtr)>(z_Normal3hvNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Normal3hvNV(v: IntPtr);
    begin
      z_Normal3hvNV_ovr_2(v);
    end;
    
    public z_Color3hNV_adr := GetFuncAdr('glColor3hNV');
    public z_Color3hNV_ovr_0 := GetFuncOrNil&<procedure(red: Half; green: Half; blue: Half)>(z_Color3hNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Color3hNV(red: Half; green: Half; blue: Half);
    begin
      z_Color3hNV_ovr_0(red, green, blue);
    end;
    
    public z_Color3hvNV_adr := GetFuncAdr('glColor3hvNV');
    public z_Color3hvNV_ovr_0 := GetFuncOrNil&<procedure(var v: Half)>(z_Color3hvNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Color3hvNV(v: array of Half);
    begin
      z_Color3hvNV_ovr_0(v[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Color3hvNV(var v: Half);
    begin
      z_Color3hvNV_ovr_0(v);
    end;
    public z_Color3hvNV_ovr_2 := GetFuncOrNil&<procedure(v: IntPtr)>(z_Color3hvNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Color3hvNV(v: IntPtr);
    begin
      z_Color3hvNV_ovr_2(v);
    end;
    
    public z_Color4hNV_adr := GetFuncAdr('glColor4hNV');
    public z_Color4hNV_ovr_0 := GetFuncOrNil&<procedure(red: Half; green: Half; blue: Half; alpha: Half)>(z_Color4hNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Color4hNV(red: Half; green: Half; blue: Half; alpha: Half);
    begin
      z_Color4hNV_ovr_0(red, green, blue, alpha);
    end;
    
    public z_Color4hvNV_adr := GetFuncAdr('glColor4hvNV');
    public z_Color4hvNV_ovr_0 := GetFuncOrNil&<procedure(var v: Half)>(z_Color4hvNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Color4hvNV(v: array of Half);
    begin
      z_Color4hvNV_ovr_0(v[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Color4hvNV(var v: Half);
    begin
      z_Color4hvNV_ovr_0(v);
    end;
    public z_Color4hvNV_ovr_2 := GetFuncOrNil&<procedure(v: IntPtr)>(z_Color4hvNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Color4hvNV(v: IntPtr);
    begin
      z_Color4hvNV_ovr_2(v);
    end;
    
    public z_TexCoord1hNV_adr := GetFuncAdr('glTexCoord1hNV');
    public z_TexCoord1hNV_ovr_0 := GetFuncOrNil&<procedure(s: Half)>(z_TexCoord1hNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TexCoord1hNV(s: Half);
    begin
      z_TexCoord1hNV_ovr_0(s);
    end;
    
    public z_TexCoord1hvNV_adr := GetFuncAdr('glTexCoord1hvNV');
    public z_TexCoord1hvNV_ovr_0 := GetFuncOrNil&<procedure(var v: Half)>(z_TexCoord1hvNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TexCoord1hvNV(v: array of Half);
    begin
      z_TexCoord1hvNV_ovr_0(v[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TexCoord1hvNV(var v: Half);
    begin
      z_TexCoord1hvNV_ovr_0(v);
    end;
    public z_TexCoord1hvNV_ovr_2 := GetFuncOrNil&<procedure(v: IntPtr)>(z_TexCoord1hvNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TexCoord1hvNV(v: IntPtr);
    begin
      z_TexCoord1hvNV_ovr_2(v);
    end;
    
    public z_TexCoord2hNV_adr := GetFuncAdr('glTexCoord2hNV');
    public z_TexCoord2hNV_ovr_0 := GetFuncOrNil&<procedure(s: Half; t: Half)>(z_TexCoord2hNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TexCoord2hNV(s: Half; t: Half);
    begin
      z_TexCoord2hNV_ovr_0(s, t);
    end;
    
    public z_TexCoord2hvNV_adr := GetFuncAdr('glTexCoord2hvNV');
    public z_TexCoord2hvNV_ovr_0 := GetFuncOrNil&<procedure(var v: Half)>(z_TexCoord2hvNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TexCoord2hvNV(v: array of Half);
    begin
      z_TexCoord2hvNV_ovr_0(v[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TexCoord2hvNV(var v: Half);
    begin
      z_TexCoord2hvNV_ovr_0(v);
    end;
    public z_TexCoord2hvNV_ovr_2 := GetFuncOrNil&<procedure(v: IntPtr)>(z_TexCoord2hvNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TexCoord2hvNV(v: IntPtr);
    begin
      z_TexCoord2hvNV_ovr_2(v);
    end;
    
    public z_TexCoord3hNV_adr := GetFuncAdr('glTexCoord3hNV');
    public z_TexCoord3hNV_ovr_0 := GetFuncOrNil&<procedure(s: Half; t: Half; r: Half)>(z_TexCoord3hNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TexCoord3hNV(s: Half; t: Half; r: Half);
    begin
      z_TexCoord3hNV_ovr_0(s, t, r);
    end;
    
    public z_TexCoord3hvNV_adr := GetFuncAdr('glTexCoord3hvNV');
    public z_TexCoord3hvNV_ovr_0 := GetFuncOrNil&<procedure(var v: Half)>(z_TexCoord3hvNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TexCoord3hvNV(v: array of Half);
    begin
      z_TexCoord3hvNV_ovr_0(v[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TexCoord3hvNV(var v: Half);
    begin
      z_TexCoord3hvNV_ovr_0(v);
    end;
    public z_TexCoord3hvNV_ovr_2 := GetFuncOrNil&<procedure(v: IntPtr)>(z_TexCoord3hvNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TexCoord3hvNV(v: IntPtr);
    begin
      z_TexCoord3hvNV_ovr_2(v);
    end;
    
    public z_TexCoord4hNV_adr := GetFuncAdr('glTexCoord4hNV');
    public z_TexCoord4hNV_ovr_0 := GetFuncOrNil&<procedure(s: Half; t: Half; r: Half; q: Half)>(z_TexCoord4hNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TexCoord4hNV(s: Half; t: Half; r: Half; q: Half);
    begin
      z_TexCoord4hNV_ovr_0(s, t, r, q);
    end;
    
    public z_TexCoord4hvNV_adr := GetFuncAdr('glTexCoord4hvNV');
    public z_TexCoord4hvNV_ovr_0 := GetFuncOrNil&<procedure(var v: Half)>(z_TexCoord4hvNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TexCoord4hvNV(v: array of Half);
    begin
      z_TexCoord4hvNV_ovr_0(v[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TexCoord4hvNV(var v: Half);
    begin
      z_TexCoord4hvNV_ovr_0(v);
    end;
    public z_TexCoord4hvNV_ovr_2 := GetFuncOrNil&<procedure(v: IntPtr)>(z_TexCoord4hvNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TexCoord4hvNV(v: IntPtr);
    begin
      z_TexCoord4hvNV_ovr_2(v);
    end;
    
    public z_MultiTexCoord1hNV_adr := GetFuncAdr('glMultiTexCoord1hNV');
    public z_MultiTexCoord1hNV_ovr_0 := GetFuncOrNil&<procedure(target: TextureUnit; s: Half)>(z_MultiTexCoord1hNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiTexCoord1hNV(target: TextureUnit; s: Half);
    begin
      z_MultiTexCoord1hNV_ovr_0(target, s);
    end;
    
    public z_MultiTexCoord1hvNV_adr := GetFuncAdr('glMultiTexCoord1hvNV');
    public z_MultiTexCoord1hvNV_ovr_0 := GetFuncOrNil&<procedure(target: TextureUnit; var v: Half)>(z_MultiTexCoord1hvNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiTexCoord1hvNV(target: TextureUnit; v: array of Half);
    begin
      z_MultiTexCoord1hvNV_ovr_0(target, v[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiTexCoord1hvNV(target: TextureUnit; var v: Half);
    begin
      z_MultiTexCoord1hvNV_ovr_0(target, v);
    end;
    public z_MultiTexCoord1hvNV_ovr_2 := GetFuncOrNil&<procedure(target: TextureUnit; v: IntPtr)>(z_MultiTexCoord1hvNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiTexCoord1hvNV(target: TextureUnit; v: IntPtr);
    begin
      z_MultiTexCoord1hvNV_ovr_2(target, v);
    end;
    
    public z_MultiTexCoord2hNV_adr := GetFuncAdr('glMultiTexCoord2hNV');
    public z_MultiTexCoord2hNV_ovr_0 := GetFuncOrNil&<procedure(target: TextureUnit; s: Half; t: Half)>(z_MultiTexCoord2hNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiTexCoord2hNV(target: TextureUnit; s: Half; t: Half);
    begin
      z_MultiTexCoord2hNV_ovr_0(target, s, t);
    end;
    
    public z_MultiTexCoord2hvNV_adr := GetFuncAdr('glMultiTexCoord2hvNV');
    public z_MultiTexCoord2hvNV_ovr_0 := GetFuncOrNil&<procedure(target: TextureUnit; var v: Half)>(z_MultiTexCoord2hvNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiTexCoord2hvNV(target: TextureUnit; v: array of Half);
    begin
      z_MultiTexCoord2hvNV_ovr_0(target, v[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiTexCoord2hvNV(target: TextureUnit; var v: Half);
    begin
      z_MultiTexCoord2hvNV_ovr_0(target, v);
    end;
    public z_MultiTexCoord2hvNV_ovr_2 := GetFuncOrNil&<procedure(target: TextureUnit; v: IntPtr)>(z_MultiTexCoord2hvNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiTexCoord2hvNV(target: TextureUnit; v: IntPtr);
    begin
      z_MultiTexCoord2hvNV_ovr_2(target, v);
    end;
    
    public z_MultiTexCoord3hNV_adr := GetFuncAdr('glMultiTexCoord3hNV');
    public z_MultiTexCoord3hNV_ovr_0 := GetFuncOrNil&<procedure(target: TextureUnit; s: Half; t: Half; r: Half)>(z_MultiTexCoord3hNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiTexCoord3hNV(target: TextureUnit; s: Half; t: Half; r: Half);
    begin
      z_MultiTexCoord3hNV_ovr_0(target, s, t, r);
    end;
    
    public z_MultiTexCoord3hvNV_adr := GetFuncAdr('glMultiTexCoord3hvNV');
    public z_MultiTexCoord3hvNV_ovr_0 := GetFuncOrNil&<procedure(target: TextureUnit; var v: Half)>(z_MultiTexCoord3hvNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiTexCoord3hvNV(target: TextureUnit; v: array of Half);
    begin
      z_MultiTexCoord3hvNV_ovr_0(target, v[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiTexCoord3hvNV(target: TextureUnit; var v: Half);
    begin
      z_MultiTexCoord3hvNV_ovr_0(target, v);
    end;
    public z_MultiTexCoord3hvNV_ovr_2 := GetFuncOrNil&<procedure(target: TextureUnit; v: IntPtr)>(z_MultiTexCoord3hvNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiTexCoord3hvNV(target: TextureUnit; v: IntPtr);
    begin
      z_MultiTexCoord3hvNV_ovr_2(target, v);
    end;
    
    public z_MultiTexCoord4hNV_adr := GetFuncAdr('glMultiTexCoord4hNV');
    public z_MultiTexCoord4hNV_ovr_0 := GetFuncOrNil&<procedure(target: TextureUnit; s: Half; t: Half; r: Half; q: Half)>(z_MultiTexCoord4hNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiTexCoord4hNV(target: TextureUnit; s: Half; t: Half; r: Half; q: Half);
    begin
      z_MultiTexCoord4hNV_ovr_0(target, s, t, r, q);
    end;
    
    public z_MultiTexCoord4hvNV_adr := GetFuncAdr('glMultiTexCoord4hvNV');
    public z_MultiTexCoord4hvNV_ovr_0 := GetFuncOrNil&<procedure(target: TextureUnit; var v: Half)>(z_MultiTexCoord4hvNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiTexCoord4hvNV(target: TextureUnit; v: array of Half);
    begin
      z_MultiTexCoord4hvNV_ovr_0(target, v[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiTexCoord4hvNV(target: TextureUnit; var v: Half);
    begin
      z_MultiTexCoord4hvNV_ovr_0(target, v);
    end;
    public z_MultiTexCoord4hvNV_ovr_2 := GetFuncOrNil&<procedure(target: TextureUnit; v: IntPtr)>(z_MultiTexCoord4hvNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiTexCoord4hvNV(target: TextureUnit; v: IntPtr);
    begin
      z_MultiTexCoord4hvNV_ovr_2(target, v);
    end;
    
    public z_FogCoordhNV_adr := GetFuncAdr('glFogCoordhNV');
    public z_FogCoordhNV_ovr_0 := GetFuncOrNil&<procedure(fog: Half)>(z_FogCoordhNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure FogCoordhNV(fog: Half);
    begin
      z_FogCoordhNV_ovr_0(fog);
    end;
    
    public z_FogCoordhvNV_adr := GetFuncAdr('glFogCoordhvNV');
    public z_FogCoordhvNV_ovr_0 := GetFuncOrNil&<procedure(var fog: Half)>(z_FogCoordhvNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure FogCoordhvNV(fog: array of Half);
    begin
      z_FogCoordhvNV_ovr_0(fog[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure FogCoordhvNV(var fog: Half);
    begin
      z_FogCoordhvNV_ovr_0(fog);
    end;
    public z_FogCoordhvNV_ovr_2 := GetFuncOrNil&<procedure(fog: IntPtr)>(z_FogCoordhvNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure FogCoordhvNV(fog: IntPtr);
    begin
      z_FogCoordhvNV_ovr_2(fog);
    end;
    
    public z_SecondaryColor3hNV_adr := GetFuncAdr('glSecondaryColor3hNV');
    public z_SecondaryColor3hNV_ovr_0 := GetFuncOrNil&<procedure(red: Half; green: Half; blue: Half)>(z_SecondaryColor3hNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure SecondaryColor3hNV(red: Half; green: Half; blue: Half);
    begin
      z_SecondaryColor3hNV_ovr_0(red, green, blue);
    end;
    
    public z_SecondaryColor3hvNV_adr := GetFuncAdr('glSecondaryColor3hvNV');
    public z_SecondaryColor3hvNV_ovr_0 := GetFuncOrNil&<procedure(var v: Half)>(z_SecondaryColor3hvNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure SecondaryColor3hvNV(v: array of Half);
    begin
      z_SecondaryColor3hvNV_ovr_0(v[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure SecondaryColor3hvNV(var v: Half);
    begin
      z_SecondaryColor3hvNV_ovr_0(v);
    end;
    public z_SecondaryColor3hvNV_ovr_2 := GetFuncOrNil&<procedure(v: IntPtr)>(z_SecondaryColor3hvNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure SecondaryColor3hvNV(v: IntPtr);
    begin
      z_SecondaryColor3hvNV_ovr_2(v);
    end;
    
    public z_VertexWeighthNV_adr := GetFuncAdr('glVertexWeighthNV');
    public z_VertexWeighthNV_ovr_0 := GetFuncOrNil&<procedure(weight: Half)>(z_VertexWeighthNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexWeighthNV(weight: Half);
    begin
      z_VertexWeighthNV_ovr_0(weight);
    end;
    
    public z_VertexWeighthvNV_adr := GetFuncAdr('glVertexWeighthvNV');
    public z_VertexWeighthvNV_ovr_0 := GetFuncOrNil&<procedure(var weight: Half)>(z_VertexWeighthvNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexWeighthvNV(weight: array of Half);
    begin
      z_VertexWeighthvNV_ovr_0(weight[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexWeighthvNV(var weight: Half);
    begin
      z_VertexWeighthvNV_ovr_0(weight);
    end;
    public z_VertexWeighthvNV_ovr_2 := GetFuncOrNil&<procedure(weight: IntPtr)>(z_VertexWeighthvNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexWeighthvNV(weight: IntPtr);
    begin
      z_VertexWeighthvNV_ovr_2(weight);
    end;
    
    public z_VertexAttrib1hNV_adr := GetFuncAdr('glVertexAttrib1hNV');
    public z_VertexAttrib1hNV_ovr_0 := GetFuncOrNil&<procedure(index: UInt32; x: Half)>(z_VertexAttrib1hNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttrib1hNV(index: UInt32; x: Half);
    begin
      z_VertexAttrib1hNV_ovr_0(index, x);
    end;
    
    public z_VertexAttrib1hvNV_adr := GetFuncAdr('glVertexAttrib1hvNV');
    public z_VertexAttrib1hvNV_ovr_0 := GetFuncOrNil&<procedure(index: UInt32; var v: Half)>(z_VertexAttrib1hvNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttrib1hvNV(index: UInt32; v: array of Half);
    begin
      z_VertexAttrib1hvNV_ovr_0(index, v[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttrib1hvNV(index: UInt32; var v: Half);
    begin
      z_VertexAttrib1hvNV_ovr_0(index, v);
    end;
    public z_VertexAttrib1hvNV_ovr_2 := GetFuncOrNil&<procedure(index: UInt32; v: IntPtr)>(z_VertexAttrib1hvNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttrib1hvNV(index: UInt32; v: IntPtr);
    begin
      z_VertexAttrib1hvNV_ovr_2(index, v);
    end;
    
    public z_VertexAttrib2hNV_adr := GetFuncAdr('glVertexAttrib2hNV');
    public z_VertexAttrib2hNV_ovr_0 := GetFuncOrNil&<procedure(index: UInt32; x: Half; y: Half)>(z_VertexAttrib2hNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttrib2hNV(index: UInt32; x: Half; y: Half);
    begin
      z_VertexAttrib2hNV_ovr_0(index, x, y);
    end;
    
    public z_VertexAttrib2hvNV_adr := GetFuncAdr('glVertexAttrib2hvNV');
    public z_VertexAttrib2hvNV_ovr_0 := GetFuncOrNil&<procedure(index: UInt32; var v: Half)>(z_VertexAttrib2hvNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttrib2hvNV(index: UInt32; v: array of Half);
    begin
      z_VertexAttrib2hvNV_ovr_0(index, v[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttrib2hvNV(index: UInt32; var v: Half);
    begin
      z_VertexAttrib2hvNV_ovr_0(index, v);
    end;
    public z_VertexAttrib2hvNV_ovr_2 := GetFuncOrNil&<procedure(index: UInt32; v: IntPtr)>(z_VertexAttrib2hvNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttrib2hvNV(index: UInt32; v: IntPtr);
    begin
      z_VertexAttrib2hvNV_ovr_2(index, v);
    end;
    
    public z_VertexAttrib3hNV_adr := GetFuncAdr('glVertexAttrib3hNV');
    public z_VertexAttrib3hNV_ovr_0 := GetFuncOrNil&<procedure(index: UInt32; x: Half; y: Half; z: Half)>(z_VertexAttrib3hNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttrib3hNV(index: UInt32; x: Half; y: Half; z: Half);
    begin
      z_VertexAttrib3hNV_ovr_0(index, x, y, z);
    end;
    
    public z_VertexAttrib3hvNV_adr := GetFuncAdr('glVertexAttrib3hvNV');
    public z_VertexAttrib3hvNV_ovr_0 := GetFuncOrNil&<procedure(index: UInt32; var v: Half)>(z_VertexAttrib3hvNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttrib3hvNV(index: UInt32; v: array of Half);
    begin
      z_VertexAttrib3hvNV_ovr_0(index, v[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttrib3hvNV(index: UInt32; var v: Half);
    begin
      z_VertexAttrib3hvNV_ovr_0(index, v);
    end;
    public z_VertexAttrib3hvNV_ovr_2 := GetFuncOrNil&<procedure(index: UInt32; v: IntPtr)>(z_VertexAttrib3hvNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttrib3hvNV(index: UInt32; v: IntPtr);
    begin
      z_VertexAttrib3hvNV_ovr_2(index, v);
    end;
    
    public z_VertexAttrib4hNV_adr := GetFuncAdr('glVertexAttrib4hNV');
    public z_VertexAttrib4hNV_ovr_0 := GetFuncOrNil&<procedure(index: UInt32; x: Half; y: Half; z: Half; w: Half)>(z_VertexAttrib4hNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttrib4hNV(index: UInt32; x: Half; y: Half; z: Half; w: Half);
    begin
      z_VertexAttrib4hNV_ovr_0(index, x, y, z, w);
    end;
    
    public z_VertexAttrib4hvNV_adr := GetFuncAdr('glVertexAttrib4hvNV');
    public z_VertexAttrib4hvNV_ovr_0 := GetFuncOrNil&<procedure(index: UInt32; var v: Half)>(z_VertexAttrib4hvNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttrib4hvNV(index: UInt32; v: array of Half);
    begin
      z_VertexAttrib4hvNV_ovr_0(index, v[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttrib4hvNV(index: UInt32; var v: Half);
    begin
      z_VertexAttrib4hvNV_ovr_0(index, v);
    end;
    public z_VertexAttrib4hvNV_ovr_2 := GetFuncOrNil&<procedure(index: UInt32; v: IntPtr)>(z_VertexAttrib4hvNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttrib4hvNV(index: UInt32; v: IntPtr);
    begin
      z_VertexAttrib4hvNV_ovr_2(index, v);
    end;
    
    public z_VertexAttribs1hvNV_adr := GetFuncAdr('glVertexAttribs1hvNV');
    public z_VertexAttribs1hvNV_ovr_0 := GetFuncOrNil&<procedure(index: UInt32; n: Int32; var v: Half)>(z_VertexAttribs1hvNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttribs1hvNV(index: UInt32; n: Int32; v: array of Half);
    begin
      z_VertexAttribs1hvNV_ovr_0(index, n, v[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttribs1hvNV(index: UInt32; n: Int32; var v: Half);
    begin
      z_VertexAttribs1hvNV_ovr_0(index, n, v);
    end;
    public z_VertexAttribs1hvNV_ovr_2 := GetFuncOrNil&<procedure(index: UInt32; n: Int32; v: IntPtr)>(z_VertexAttribs1hvNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttribs1hvNV(index: UInt32; n: Int32; v: IntPtr);
    begin
      z_VertexAttribs1hvNV_ovr_2(index, n, v);
    end;
    
    public z_VertexAttribs2hvNV_adr := GetFuncAdr('glVertexAttribs2hvNV');
    public z_VertexAttribs2hvNV_ovr_0 := GetFuncOrNil&<procedure(index: UInt32; n: Int32; var v: Half)>(z_VertexAttribs2hvNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttribs2hvNV(index: UInt32; n: Int32; v: array of Half);
    begin
      z_VertexAttribs2hvNV_ovr_0(index, n, v[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttribs2hvNV(index: UInt32; n: Int32; var v: Half);
    begin
      z_VertexAttribs2hvNV_ovr_0(index, n, v);
    end;
    public z_VertexAttribs2hvNV_ovr_2 := GetFuncOrNil&<procedure(index: UInt32; n: Int32; v: IntPtr)>(z_VertexAttribs2hvNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttribs2hvNV(index: UInt32; n: Int32; v: IntPtr);
    begin
      z_VertexAttribs2hvNV_ovr_2(index, n, v);
    end;
    
    public z_VertexAttribs3hvNV_adr := GetFuncAdr('glVertexAttribs3hvNV');
    public z_VertexAttribs3hvNV_ovr_0 := GetFuncOrNil&<procedure(index: UInt32; n: Int32; var v: Half)>(z_VertexAttribs3hvNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttribs3hvNV(index: UInt32; n: Int32; v: array of Half);
    begin
      z_VertexAttribs3hvNV_ovr_0(index, n, v[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttribs3hvNV(index: UInt32; n: Int32; var v: Half);
    begin
      z_VertexAttribs3hvNV_ovr_0(index, n, v);
    end;
    public z_VertexAttribs3hvNV_ovr_2 := GetFuncOrNil&<procedure(index: UInt32; n: Int32; v: IntPtr)>(z_VertexAttribs3hvNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttribs3hvNV(index: UInt32; n: Int32; v: IntPtr);
    begin
      z_VertexAttribs3hvNV_ovr_2(index, n, v);
    end;
    
    public z_VertexAttribs4hvNV_adr := GetFuncAdr('glVertexAttribs4hvNV');
    public z_VertexAttribs4hvNV_ovr_0 := GetFuncOrNil&<procedure(index: UInt32; n: Int32; var v: Half)>(z_VertexAttribs4hvNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttribs4hvNV(index: UInt32; n: Int32; v: array of Half);
    begin
      z_VertexAttribs4hvNV_ovr_0(index, n, v[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttribs4hvNV(index: UInt32; n: Int32; var v: Half);
    begin
      z_VertexAttribs4hvNV_ovr_0(index, n, v);
    end;
    public z_VertexAttribs4hvNV_ovr_2 := GetFuncOrNil&<procedure(index: UInt32; n: Int32; v: IntPtr)>(z_VertexAttribs4hvNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttribs4hvNV(index: UInt32; n: Int32; v: IntPtr);
    begin
      z_VertexAttribs4hvNV_ovr_2(index, n, v);
    end;
    
  end;
  
  glInternalformatSampleQueryNV = sealed class
    public static function GetFuncAdr([MarshalAs(UnmanagedType.LPStr)] lpszProc: string): IntPtr;
    external 'opengl32.dll' name 'wglGetProcAddress';
    public static function GetFuncOrNil<T>(fadr: IntPtr) :=
    fadr=IntPtr.Zero ? default(T) :
    Marshal.GetDelegateForFunctionPointer&<T>(fadr);
    
    public z_GetInternalformatSampleivNV_adr := GetFuncAdr('glGetInternalformatSampleivNV');
    public z_GetInternalformatSampleivNV_ovr_0 := GetFuncOrNil&<procedure(target: TextureTarget; _internalformat: InternalFormat; samples: Int32; pname: InternalFormatPName; count: Int32; var &params: Int32)>(z_GetInternalformatSampleivNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetInternalformatSampleivNV(target: TextureTarget; _internalformat: InternalFormat; samples: Int32; pname: InternalFormatPName; count: Int32; &params: array of Int32);
    begin
      z_GetInternalformatSampleivNV_ovr_0(target, _internalformat, samples, pname, count, &params[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetInternalformatSampleivNV(target: TextureTarget; _internalformat: InternalFormat; samples: Int32; pname: InternalFormatPName; count: Int32; var &params: Int32);
    begin
      z_GetInternalformatSampleivNV_ovr_0(target, _internalformat, samples, pname, count, &params);
    end;
    public z_GetInternalformatSampleivNV_ovr_2 := GetFuncOrNil&<procedure(target: TextureTarget; _internalformat: InternalFormat; samples: Int32; pname: InternalFormatPName; count: Int32; &params: IntPtr)>(z_GetInternalformatSampleivNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetInternalformatSampleivNV(target: TextureTarget; _internalformat: InternalFormat; samples: Int32; pname: InternalFormatPName; count: Int32; &params: IntPtr);
    begin
      z_GetInternalformatSampleivNV_ovr_2(target, _internalformat, samples, pname, count, &params);
    end;
    
  end;
  
  glGpuMulticastNV = sealed class
    public static function GetFuncAdr([MarshalAs(UnmanagedType.LPStr)] lpszProc: string): IntPtr;
    external 'opengl32.dll' name 'wglGetProcAddress';
    public static function GetFuncOrNil<T>(fadr: IntPtr) :=
    fadr=IntPtr.Zero ? default(T) :
    Marshal.GetDelegateForFunctionPointer&<T>(fadr);
    
    public z_RenderGpuMaskNV_adr := GetFuncAdr('glRenderGpuMaskNV');
    public z_RenderGpuMaskNV_ovr_0 := GetFuncOrNil&<procedure(mask: DummyFlags)>(z_RenderGpuMaskNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure RenderGpuMaskNV(mask: DummyFlags);
    begin
      z_RenderGpuMaskNV_ovr_0(mask);
    end;
    
    public z_MulticastBufferSubDataNV_adr := GetFuncAdr('glMulticastBufferSubDataNV');
    public z_MulticastBufferSubDataNV_ovr_0 := GetFuncOrNil&<procedure(gpuMask: DummyFlags; buffer: UInt32; offset: IntPtr; size: IntPtr; data: IntPtr)>(z_MulticastBufferSubDataNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MulticastBufferSubDataNV(gpuMask: DummyFlags; buffer: UInt32; offset: IntPtr; size: IntPtr; data: IntPtr);
    begin
      z_MulticastBufferSubDataNV_ovr_0(gpuMask, buffer, offset, size, data);
    end;
    
    public z_MulticastCopyBufferSubDataNV_adr := GetFuncAdr('glMulticastCopyBufferSubDataNV');
    public z_MulticastCopyBufferSubDataNV_ovr_0 := GetFuncOrNil&<procedure(readGpu: UInt32; writeGpuMask: DummyFlags; readBuffer: UInt32; writeBuffer: UInt32; readOffset: IntPtr; writeOffset: IntPtr; size: IntPtr)>(z_MulticastCopyBufferSubDataNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MulticastCopyBufferSubDataNV(readGpu: UInt32; writeGpuMask: DummyFlags; readBuffer: UInt32; writeBuffer: UInt32; readOffset: IntPtr; writeOffset: IntPtr; size: IntPtr);
    begin
      z_MulticastCopyBufferSubDataNV_ovr_0(readGpu, writeGpuMask, readBuffer, writeBuffer, readOffset, writeOffset, size);
    end;
    
    public z_MulticastCopyImageSubDataNV_adr := GetFuncAdr('glMulticastCopyImageSubDataNV');
    public z_MulticastCopyImageSubDataNV_ovr_0 := GetFuncOrNil&<procedure(srcGpu: UInt32; dstGpuMask: DummyFlags; srcName: UInt32; srcTarget: DummyEnum; srcLevel: Int32; srcX: Int32; srcY: Int32; srcZ: Int32; dstName: UInt32; dstTarget: DummyEnum; dstLevel: Int32; dstX: Int32; dstY: Int32; dstZ: Int32; srcWidth: Int32; srcHeight: Int32; srcDepth: Int32)>(z_MulticastCopyImageSubDataNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MulticastCopyImageSubDataNV(srcGpu: UInt32; dstGpuMask: DummyFlags; srcName: UInt32; srcTarget: DummyEnum; srcLevel: Int32; srcX: Int32; srcY: Int32; srcZ: Int32; dstName: UInt32; dstTarget: DummyEnum; dstLevel: Int32; dstX: Int32; dstY: Int32; dstZ: Int32; srcWidth: Int32; srcHeight: Int32; srcDepth: Int32);
    begin
      z_MulticastCopyImageSubDataNV_ovr_0(srcGpu, dstGpuMask, srcName, srcTarget, srcLevel, srcX, srcY, srcZ, dstName, dstTarget, dstLevel, dstX, dstY, dstZ, srcWidth, srcHeight, srcDepth);
    end;
    
    public z_MulticastBlitFramebufferNV_adr := GetFuncAdr('glMulticastBlitFramebufferNV');
    public z_MulticastBlitFramebufferNV_ovr_0 := GetFuncOrNil&<procedure(srcGpu: UInt32; dstGpu: UInt32; srcX0: Int32; srcY0: Int32; srcX1: Int32; srcY1: Int32; dstX0: Int32; dstY0: Int32; dstX1: Int32; dstY1: Int32; mask: ClearBufferMask; filter: DummyEnum)>(z_MulticastBlitFramebufferNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MulticastBlitFramebufferNV(srcGpu: UInt32; dstGpu: UInt32; srcX0: Int32; srcY0: Int32; srcX1: Int32; srcY1: Int32; dstX0: Int32; dstY0: Int32; dstX1: Int32; dstY1: Int32; mask: ClearBufferMask; filter: DummyEnum);
    begin
      z_MulticastBlitFramebufferNV_ovr_0(srcGpu, dstGpu, srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, mask, filter);
    end;
    
    public z_MulticastFramebufferSampleLocationsfvNV_adr := GetFuncAdr('glMulticastFramebufferSampleLocationsfvNV');
    public z_MulticastFramebufferSampleLocationsfvNV_ovr_0 := GetFuncOrNil&<procedure(gpu: UInt32; framebuffer: UInt32; start: UInt32; count: Int32; var v: single)>(z_MulticastFramebufferSampleLocationsfvNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MulticastFramebufferSampleLocationsfvNV(gpu: UInt32; framebuffer: UInt32; start: UInt32; count: Int32; v: array of single);
    begin
      z_MulticastFramebufferSampleLocationsfvNV_ovr_0(gpu, framebuffer, start, count, v[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MulticastFramebufferSampleLocationsfvNV(gpu: UInt32; framebuffer: UInt32; start: UInt32; count: Int32; var v: single);
    begin
      z_MulticastFramebufferSampleLocationsfvNV_ovr_0(gpu, framebuffer, start, count, v);
    end;
    public z_MulticastFramebufferSampleLocationsfvNV_ovr_2 := GetFuncOrNil&<procedure(gpu: UInt32; framebuffer: UInt32; start: UInt32; count: Int32; v: IntPtr)>(z_MulticastFramebufferSampleLocationsfvNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MulticastFramebufferSampleLocationsfvNV(gpu: UInt32; framebuffer: UInt32; start: UInt32; count: Int32; v: IntPtr);
    begin
      z_MulticastFramebufferSampleLocationsfvNV_ovr_2(gpu, framebuffer, start, count, v);
    end;
    
    public z_MulticastBarrierNV_adr := GetFuncAdr('glMulticastBarrierNV');
    public z_MulticastBarrierNV_ovr_0 := GetFuncOrNil&<procedure>(z_MulticastBarrierNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MulticastBarrierNV;
    begin
      z_MulticastBarrierNV_ovr_0;
    end;
    
    public z_MulticastWaitSyncNV_adr := GetFuncAdr('glMulticastWaitSyncNV');
    public z_MulticastWaitSyncNV_ovr_0 := GetFuncOrNil&<procedure(signalGpu: UInt32; waitGpuMask: DummyFlags)>(z_MulticastWaitSyncNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MulticastWaitSyncNV(signalGpu: UInt32; waitGpuMask: DummyFlags);
    begin
      z_MulticastWaitSyncNV_ovr_0(signalGpu, waitGpuMask);
    end;
    
    public z_MulticastGetQueryObjectivNV_adr := GetFuncAdr('glMulticastGetQueryObjectivNV');
    public z_MulticastGetQueryObjectivNV_ovr_0 := GetFuncOrNil&<procedure(gpu: UInt32; id: UInt32; pname: DummyEnum; var &params: Int32)>(z_MulticastGetQueryObjectivNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MulticastGetQueryObjectivNV(gpu: UInt32; id: UInt32; pname: DummyEnum; &params: array of Int32);
    begin
      z_MulticastGetQueryObjectivNV_ovr_0(gpu, id, pname, &params[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MulticastGetQueryObjectivNV(gpu: UInt32; id: UInt32; pname: DummyEnum; var &params: Int32);
    begin
      z_MulticastGetQueryObjectivNV_ovr_0(gpu, id, pname, &params);
    end;
    public z_MulticastGetQueryObjectivNV_ovr_2 := GetFuncOrNil&<procedure(gpu: UInt32; id: UInt32; pname: DummyEnum; &params: IntPtr)>(z_MulticastGetQueryObjectivNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MulticastGetQueryObjectivNV(gpu: UInt32; id: UInt32; pname: DummyEnum; &params: IntPtr);
    begin
      z_MulticastGetQueryObjectivNV_ovr_2(gpu, id, pname, &params);
    end;
    
    public z_MulticastGetQueryObjectuivNV_adr := GetFuncAdr('glMulticastGetQueryObjectuivNV');
    public z_MulticastGetQueryObjectuivNV_ovr_0 := GetFuncOrNil&<procedure(gpu: UInt32; id: UInt32; pname: DummyEnum; var &params: UInt32)>(z_MulticastGetQueryObjectuivNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MulticastGetQueryObjectuivNV(gpu: UInt32; id: UInt32; pname: DummyEnum; &params: array of UInt32);
    begin
      z_MulticastGetQueryObjectuivNV_ovr_0(gpu, id, pname, &params[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MulticastGetQueryObjectuivNV(gpu: UInt32; id: UInt32; pname: DummyEnum; var &params: UInt32);
    begin
      z_MulticastGetQueryObjectuivNV_ovr_0(gpu, id, pname, &params);
    end;
    public z_MulticastGetQueryObjectuivNV_ovr_2 := GetFuncOrNil&<procedure(gpu: UInt32; id: UInt32; pname: DummyEnum; &params: IntPtr)>(z_MulticastGetQueryObjectuivNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MulticastGetQueryObjectuivNV(gpu: UInt32; id: UInt32; pname: DummyEnum; &params: IntPtr);
    begin
      z_MulticastGetQueryObjectuivNV_ovr_2(gpu, id, pname, &params);
    end;
    
    public z_MulticastGetQueryObjecti64vNV_adr := GetFuncAdr('glMulticastGetQueryObjecti64vNV');
    public z_MulticastGetQueryObjecti64vNV_ovr_0 := GetFuncOrNil&<procedure(gpu: UInt32; id: UInt32; pname: DummyEnum; var &params: Int64)>(z_MulticastGetQueryObjecti64vNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MulticastGetQueryObjecti64vNV(gpu: UInt32; id: UInt32; pname: DummyEnum; &params: array of Int64);
    begin
      z_MulticastGetQueryObjecti64vNV_ovr_0(gpu, id, pname, &params[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MulticastGetQueryObjecti64vNV(gpu: UInt32; id: UInt32; pname: DummyEnum; var &params: Int64);
    begin
      z_MulticastGetQueryObjecti64vNV_ovr_0(gpu, id, pname, &params);
    end;
    public z_MulticastGetQueryObjecti64vNV_ovr_2 := GetFuncOrNil&<procedure(gpu: UInt32; id: UInt32; pname: DummyEnum; &params: IntPtr)>(z_MulticastGetQueryObjecti64vNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MulticastGetQueryObjecti64vNV(gpu: UInt32; id: UInt32; pname: DummyEnum; &params: IntPtr);
    begin
      z_MulticastGetQueryObjecti64vNV_ovr_2(gpu, id, pname, &params);
    end;
    
    public z_MulticastGetQueryObjectui64vNV_adr := GetFuncAdr('glMulticastGetQueryObjectui64vNV');
    public z_MulticastGetQueryObjectui64vNV_ovr_0 := GetFuncOrNil&<procedure(gpu: UInt32; id: UInt32; pname: DummyEnum; var &params: UInt64)>(z_MulticastGetQueryObjectui64vNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MulticastGetQueryObjectui64vNV(gpu: UInt32; id: UInt32; pname: DummyEnum; &params: array of UInt64);
    begin
      z_MulticastGetQueryObjectui64vNV_ovr_0(gpu, id, pname, &params[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MulticastGetQueryObjectui64vNV(gpu: UInt32; id: UInt32; pname: DummyEnum; var &params: UInt64);
    begin
      z_MulticastGetQueryObjectui64vNV_ovr_0(gpu, id, pname, &params);
    end;
    public z_MulticastGetQueryObjectui64vNV_ovr_2 := GetFuncOrNil&<procedure(gpu: UInt32; id: UInt32; pname: DummyEnum; &params: IntPtr)>(z_MulticastGetQueryObjectui64vNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MulticastGetQueryObjectui64vNV(gpu: UInt32; id: UInt32; pname: DummyEnum; &params: IntPtr);
    begin
      z_MulticastGetQueryObjectui64vNV_ovr_2(gpu, id, pname, &params);
    end;
    
  end;
  
  glGpuMulticast2NVX = sealed class
    public static function GetFuncAdr([MarshalAs(UnmanagedType.LPStr)] lpszProc: string): IntPtr;
    external 'opengl32.dll' name 'wglGetProcAddress';
    public static function GetFuncOrNil<T>(fadr: IntPtr) :=
    fadr=IntPtr.Zero ? default(T) :
    Marshal.GetDelegateForFunctionPointer&<T>(fadr);
    
    public z_UploadGpuMaskNVX_adr := GetFuncAdr('glUploadGpuMaskNVX');
    public z_UploadGpuMaskNVX_ovr_0 := GetFuncOrNil&<procedure(mask: DummyFlags)>(z_UploadGpuMaskNVX_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure UploadGpuMaskNVX(mask: DummyFlags);
    begin
      z_UploadGpuMaskNVX_ovr_0(mask);
    end;
    
    public z_MulticastViewportArrayvNVX_adr := GetFuncAdr('glMulticastViewportArrayvNVX');
    public z_MulticastViewportArrayvNVX_ovr_0 := GetFuncOrNil&<procedure(gpu: UInt32; first: UInt32; count: Int32; var v: single)>(z_MulticastViewportArrayvNVX_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MulticastViewportArrayvNVX(gpu: UInt32; first: UInt32; count: Int32; v: array of single);
    begin
      z_MulticastViewportArrayvNVX_ovr_0(gpu, first, count, v[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MulticastViewportArrayvNVX(gpu: UInt32; first: UInt32; count: Int32; var v: single);
    begin
      z_MulticastViewportArrayvNVX_ovr_0(gpu, first, count, v);
    end;
    public z_MulticastViewportArrayvNVX_ovr_2 := GetFuncOrNil&<procedure(gpu: UInt32; first: UInt32; count: Int32; v: IntPtr)>(z_MulticastViewportArrayvNVX_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MulticastViewportArrayvNVX(gpu: UInt32; first: UInt32; count: Int32; v: IntPtr);
    begin
      z_MulticastViewportArrayvNVX_ovr_2(gpu, first, count, v);
    end;
    
    public z_MulticastViewportPositionWScaleNVX_adr := GetFuncAdr('glMulticastViewportPositionWScaleNVX');
    public z_MulticastViewportPositionWScaleNVX_ovr_0 := GetFuncOrNil&<procedure(gpu: UInt32; index: UInt32; xcoeff: single; ycoeff: single)>(z_MulticastViewportPositionWScaleNVX_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MulticastViewportPositionWScaleNVX(gpu: UInt32; index: UInt32; xcoeff: single; ycoeff: single);
    begin
      z_MulticastViewportPositionWScaleNVX_ovr_0(gpu, index, xcoeff, ycoeff);
    end;
    
    public z_MulticastScissorArrayvNVX_adr := GetFuncAdr('glMulticastScissorArrayvNVX');
    public z_MulticastScissorArrayvNVX_ovr_0 := GetFuncOrNil&<procedure(gpu: UInt32; first: UInt32; count: Int32; var v: Int32)>(z_MulticastScissorArrayvNVX_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MulticastScissorArrayvNVX(gpu: UInt32; first: UInt32; count: Int32; v: array of Int32);
    begin
      z_MulticastScissorArrayvNVX_ovr_0(gpu, first, count, v[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MulticastScissorArrayvNVX(gpu: UInt32; first: UInt32; count: Int32; var v: Int32);
    begin
      z_MulticastScissorArrayvNVX_ovr_0(gpu, first, count, v);
    end;
    public z_MulticastScissorArrayvNVX_ovr_2 := GetFuncOrNil&<procedure(gpu: UInt32; first: UInt32; count: Int32; v: IntPtr)>(z_MulticastScissorArrayvNVX_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MulticastScissorArrayvNVX(gpu: UInt32; first: UInt32; count: Int32; v: IntPtr);
    begin
      z_MulticastScissorArrayvNVX_ovr_2(gpu, first, count, v);
    end;
    
    public z_AsyncCopyBufferSubDataNVX_adr := GetFuncAdr('glAsyncCopyBufferSubDataNVX');
    public z_AsyncCopyBufferSubDataNVX_ovr_0 := GetFuncOrNil&<function(waitSemaphoreCount: Int32; var waitSemaphoreArray: UInt32; var fenceValueArray: UInt64; readGpu: UInt32; writeGpuMask: DummyFlags; readBuffer: UInt32; writeBuffer: UInt32; readOffset: IntPtr; writeOffset: IntPtr; size: IntPtr; signalSemaphoreCount: Int32; var signalSemaphoreArray: UInt32; var signalValueArray: UInt64): UInt32>(z_AsyncCopyBufferSubDataNVX_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function AsyncCopyBufferSubDataNVX(waitSemaphoreCount: Int32; waitSemaphoreArray: array of UInt32; fenceValueArray: array of UInt64; readGpu: UInt32; writeGpuMask: DummyFlags; readBuffer: UInt32; writeBuffer: UInt32; readOffset: IntPtr; writeOffset: IntPtr; size: IntPtr; signalSemaphoreCount: Int32; signalSemaphoreArray: array of UInt32; signalValueArray: array of UInt64): UInt32;
    begin
      Result := z_AsyncCopyBufferSubDataNVX_ovr_0(waitSemaphoreCount, waitSemaphoreArray[0], fenceValueArray[0], readGpu, writeGpuMask, readBuffer, writeBuffer, readOffset, writeOffset, size, signalSemaphoreCount, signalSemaphoreArray[0], signalValueArray[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function AsyncCopyBufferSubDataNVX(waitSemaphoreCount: Int32; waitSemaphoreArray: array of UInt32; fenceValueArray: array of UInt64; readGpu: UInt32; writeGpuMask: DummyFlags; readBuffer: UInt32; writeBuffer: UInt32; readOffset: IntPtr; writeOffset: IntPtr; size: IntPtr; signalSemaphoreCount: Int32; signalSemaphoreArray: array of UInt32; var signalValueArray: UInt64): UInt32;
    begin
      Result := z_AsyncCopyBufferSubDataNVX_ovr_0(waitSemaphoreCount, waitSemaphoreArray[0], fenceValueArray[0], readGpu, writeGpuMask, readBuffer, writeBuffer, readOffset, writeOffset, size, signalSemaphoreCount, signalSemaphoreArray[0], signalValueArray);
    end;
    public z_AsyncCopyBufferSubDataNVX_ovr_2 := GetFuncOrNil&<function(waitSemaphoreCount: Int32; var waitSemaphoreArray: UInt32; var fenceValueArray: UInt64; readGpu: UInt32; writeGpuMask: DummyFlags; readBuffer: UInt32; writeBuffer: UInt32; readOffset: IntPtr; writeOffset: IntPtr; size: IntPtr; signalSemaphoreCount: Int32; var signalSemaphoreArray: UInt32; signalValueArray: IntPtr): UInt32>(z_AsyncCopyBufferSubDataNVX_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function AsyncCopyBufferSubDataNVX(waitSemaphoreCount: Int32; waitSemaphoreArray: array of UInt32; fenceValueArray: array of UInt64; readGpu: UInt32; writeGpuMask: DummyFlags; readBuffer: UInt32; writeBuffer: UInt32; readOffset: IntPtr; writeOffset: IntPtr; size: IntPtr; signalSemaphoreCount: Int32; signalSemaphoreArray: array of UInt32; signalValueArray: IntPtr): UInt32;
    begin
      Result := z_AsyncCopyBufferSubDataNVX_ovr_2(waitSemaphoreCount, waitSemaphoreArray[0], fenceValueArray[0], readGpu, writeGpuMask, readBuffer, writeBuffer, readOffset, writeOffset, size, signalSemaphoreCount, signalSemaphoreArray[0], signalValueArray);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function AsyncCopyBufferSubDataNVX(waitSemaphoreCount: Int32; waitSemaphoreArray: array of UInt32; fenceValueArray: array of UInt64; readGpu: UInt32; writeGpuMask: DummyFlags; readBuffer: UInt32; writeBuffer: UInt32; readOffset: IntPtr; writeOffset: IntPtr; size: IntPtr; signalSemaphoreCount: Int32; var signalSemaphoreArray: UInt32; signalValueArray: array of UInt64): UInt32;
    begin
      Result := z_AsyncCopyBufferSubDataNVX_ovr_0(waitSemaphoreCount, waitSemaphoreArray[0], fenceValueArray[0], readGpu, writeGpuMask, readBuffer, writeBuffer, readOffset, writeOffset, size, signalSemaphoreCount, signalSemaphoreArray, signalValueArray[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function AsyncCopyBufferSubDataNVX(waitSemaphoreCount: Int32; waitSemaphoreArray: array of UInt32; fenceValueArray: array of UInt64; readGpu: UInt32; writeGpuMask: DummyFlags; readBuffer: UInt32; writeBuffer: UInt32; readOffset: IntPtr; writeOffset: IntPtr; size: IntPtr; signalSemaphoreCount: Int32; var signalSemaphoreArray: UInt32; var signalValueArray: UInt64): UInt32;
    begin
      Result := z_AsyncCopyBufferSubDataNVX_ovr_0(waitSemaphoreCount, waitSemaphoreArray[0], fenceValueArray[0], readGpu, writeGpuMask, readBuffer, writeBuffer, readOffset, writeOffset, size, signalSemaphoreCount, signalSemaphoreArray, signalValueArray);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function AsyncCopyBufferSubDataNVX(waitSemaphoreCount: Int32; waitSemaphoreArray: array of UInt32; fenceValueArray: array of UInt64; readGpu: UInt32; writeGpuMask: DummyFlags; readBuffer: UInt32; writeBuffer: UInt32; readOffset: IntPtr; writeOffset: IntPtr; size: IntPtr; signalSemaphoreCount: Int32; var signalSemaphoreArray: UInt32; signalValueArray: IntPtr): UInt32;
    begin
      Result := z_AsyncCopyBufferSubDataNVX_ovr_2(waitSemaphoreCount, waitSemaphoreArray[0], fenceValueArray[0], readGpu, writeGpuMask, readBuffer, writeBuffer, readOffset, writeOffset, size, signalSemaphoreCount, signalSemaphoreArray, signalValueArray);
    end;
    public z_AsyncCopyBufferSubDataNVX_ovr_6 := GetFuncOrNil&<function(waitSemaphoreCount: Int32; var waitSemaphoreArray: UInt32; var fenceValueArray: UInt64; readGpu: UInt32; writeGpuMask: DummyFlags; readBuffer: UInt32; writeBuffer: UInt32; readOffset: IntPtr; writeOffset: IntPtr; size: IntPtr; signalSemaphoreCount: Int32; signalSemaphoreArray: IntPtr; var signalValueArray: UInt64): UInt32>(z_AsyncCopyBufferSubDataNVX_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function AsyncCopyBufferSubDataNVX(waitSemaphoreCount: Int32; waitSemaphoreArray: array of UInt32; fenceValueArray: array of UInt64; readGpu: UInt32; writeGpuMask: DummyFlags; readBuffer: UInt32; writeBuffer: UInt32; readOffset: IntPtr; writeOffset: IntPtr; size: IntPtr; signalSemaphoreCount: Int32; signalSemaphoreArray: IntPtr; signalValueArray: array of UInt64): UInt32;
    begin
      Result := z_AsyncCopyBufferSubDataNVX_ovr_6(waitSemaphoreCount, waitSemaphoreArray[0], fenceValueArray[0], readGpu, writeGpuMask, readBuffer, writeBuffer, readOffset, writeOffset, size, signalSemaphoreCount, signalSemaphoreArray, signalValueArray[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function AsyncCopyBufferSubDataNVX(waitSemaphoreCount: Int32; waitSemaphoreArray: array of UInt32; fenceValueArray: array of UInt64; readGpu: UInt32; writeGpuMask: DummyFlags; readBuffer: UInt32; writeBuffer: UInt32; readOffset: IntPtr; writeOffset: IntPtr; size: IntPtr; signalSemaphoreCount: Int32; signalSemaphoreArray: IntPtr; var signalValueArray: UInt64): UInt32;
    begin
      Result := z_AsyncCopyBufferSubDataNVX_ovr_6(waitSemaphoreCount, waitSemaphoreArray[0], fenceValueArray[0], readGpu, writeGpuMask, readBuffer, writeBuffer, readOffset, writeOffset, size, signalSemaphoreCount, signalSemaphoreArray, signalValueArray);
    end;
    public z_AsyncCopyBufferSubDataNVX_ovr_8 := GetFuncOrNil&<function(waitSemaphoreCount: Int32; var waitSemaphoreArray: UInt32; var fenceValueArray: UInt64; readGpu: UInt32; writeGpuMask: DummyFlags; readBuffer: UInt32; writeBuffer: UInt32; readOffset: IntPtr; writeOffset: IntPtr; size: IntPtr; signalSemaphoreCount: Int32; signalSemaphoreArray: IntPtr; signalValueArray: IntPtr): UInt32>(z_AsyncCopyBufferSubDataNVX_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function AsyncCopyBufferSubDataNVX(waitSemaphoreCount: Int32; waitSemaphoreArray: array of UInt32; fenceValueArray: array of UInt64; readGpu: UInt32; writeGpuMask: DummyFlags; readBuffer: UInt32; writeBuffer: UInt32; readOffset: IntPtr; writeOffset: IntPtr; size: IntPtr; signalSemaphoreCount: Int32; signalSemaphoreArray: IntPtr; signalValueArray: IntPtr): UInt32;
    begin
      Result := z_AsyncCopyBufferSubDataNVX_ovr_8(waitSemaphoreCount, waitSemaphoreArray[0], fenceValueArray[0], readGpu, writeGpuMask, readBuffer, writeBuffer, readOffset, writeOffset, size, signalSemaphoreCount, signalSemaphoreArray, signalValueArray);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function AsyncCopyBufferSubDataNVX(waitSemaphoreCount: Int32; waitSemaphoreArray: array of UInt32; var fenceValueArray: UInt64; readGpu: UInt32; writeGpuMask: DummyFlags; readBuffer: UInt32; writeBuffer: UInt32; readOffset: IntPtr; writeOffset: IntPtr; size: IntPtr; signalSemaphoreCount: Int32; signalSemaphoreArray: array of UInt32; signalValueArray: array of UInt64): UInt32;
    begin
      Result := z_AsyncCopyBufferSubDataNVX_ovr_0(waitSemaphoreCount, waitSemaphoreArray[0], fenceValueArray, readGpu, writeGpuMask, readBuffer, writeBuffer, readOffset, writeOffset, size, signalSemaphoreCount, signalSemaphoreArray[0], signalValueArray[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function AsyncCopyBufferSubDataNVX(waitSemaphoreCount: Int32; waitSemaphoreArray: array of UInt32; var fenceValueArray: UInt64; readGpu: UInt32; writeGpuMask: DummyFlags; readBuffer: UInt32; writeBuffer: UInt32; readOffset: IntPtr; writeOffset: IntPtr; size: IntPtr; signalSemaphoreCount: Int32; signalSemaphoreArray: array of UInt32; var signalValueArray: UInt64): UInt32;
    begin
      Result := z_AsyncCopyBufferSubDataNVX_ovr_0(waitSemaphoreCount, waitSemaphoreArray[0], fenceValueArray, readGpu, writeGpuMask, readBuffer, writeBuffer, readOffset, writeOffset, size, signalSemaphoreCount, signalSemaphoreArray[0], signalValueArray);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function AsyncCopyBufferSubDataNVX(waitSemaphoreCount: Int32; waitSemaphoreArray: array of UInt32; var fenceValueArray: UInt64; readGpu: UInt32; writeGpuMask: DummyFlags; readBuffer: UInt32; writeBuffer: UInt32; readOffset: IntPtr; writeOffset: IntPtr; size: IntPtr; signalSemaphoreCount: Int32; signalSemaphoreArray: array of UInt32; signalValueArray: IntPtr): UInt32;
    begin
      Result := z_AsyncCopyBufferSubDataNVX_ovr_2(waitSemaphoreCount, waitSemaphoreArray[0], fenceValueArray, readGpu, writeGpuMask, readBuffer, writeBuffer, readOffset, writeOffset, size, signalSemaphoreCount, signalSemaphoreArray[0], signalValueArray);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function AsyncCopyBufferSubDataNVX(waitSemaphoreCount: Int32; waitSemaphoreArray: array of UInt32; var fenceValueArray: UInt64; readGpu: UInt32; writeGpuMask: DummyFlags; readBuffer: UInt32; writeBuffer: UInt32; readOffset: IntPtr; writeOffset: IntPtr; size: IntPtr; signalSemaphoreCount: Int32; var signalSemaphoreArray: UInt32; signalValueArray: array of UInt64): UInt32;
    begin
      Result := z_AsyncCopyBufferSubDataNVX_ovr_0(waitSemaphoreCount, waitSemaphoreArray[0], fenceValueArray, readGpu, writeGpuMask, readBuffer, writeBuffer, readOffset, writeOffset, size, signalSemaphoreCount, signalSemaphoreArray, signalValueArray[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function AsyncCopyBufferSubDataNVX(waitSemaphoreCount: Int32; waitSemaphoreArray: array of UInt32; var fenceValueArray: UInt64; readGpu: UInt32; writeGpuMask: DummyFlags; readBuffer: UInt32; writeBuffer: UInt32; readOffset: IntPtr; writeOffset: IntPtr; size: IntPtr; signalSemaphoreCount: Int32; var signalSemaphoreArray: UInt32; var signalValueArray: UInt64): UInt32;
    begin
      Result := z_AsyncCopyBufferSubDataNVX_ovr_0(waitSemaphoreCount, waitSemaphoreArray[0], fenceValueArray, readGpu, writeGpuMask, readBuffer, writeBuffer, readOffset, writeOffset, size, signalSemaphoreCount, signalSemaphoreArray, signalValueArray);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function AsyncCopyBufferSubDataNVX(waitSemaphoreCount: Int32; waitSemaphoreArray: array of UInt32; var fenceValueArray: UInt64; readGpu: UInt32; writeGpuMask: DummyFlags; readBuffer: UInt32; writeBuffer: UInt32; readOffset: IntPtr; writeOffset: IntPtr; size: IntPtr; signalSemaphoreCount: Int32; var signalSemaphoreArray: UInt32; signalValueArray: IntPtr): UInt32;
    begin
      Result := z_AsyncCopyBufferSubDataNVX_ovr_2(waitSemaphoreCount, waitSemaphoreArray[0], fenceValueArray, readGpu, writeGpuMask, readBuffer, writeBuffer, readOffset, writeOffset, size, signalSemaphoreCount, signalSemaphoreArray, signalValueArray);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function AsyncCopyBufferSubDataNVX(waitSemaphoreCount: Int32; waitSemaphoreArray: array of UInt32; var fenceValueArray: UInt64; readGpu: UInt32; writeGpuMask: DummyFlags; readBuffer: UInt32; writeBuffer: UInt32; readOffset: IntPtr; writeOffset: IntPtr; size: IntPtr; signalSemaphoreCount: Int32; signalSemaphoreArray: IntPtr; signalValueArray: array of UInt64): UInt32;
    begin
      Result := z_AsyncCopyBufferSubDataNVX_ovr_6(waitSemaphoreCount, waitSemaphoreArray[0], fenceValueArray, readGpu, writeGpuMask, readBuffer, writeBuffer, readOffset, writeOffset, size, signalSemaphoreCount, signalSemaphoreArray, signalValueArray[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function AsyncCopyBufferSubDataNVX(waitSemaphoreCount: Int32; waitSemaphoreArray: array of UInt32; var fenceValueArray: UInt64; readGpu: UInt32; writeGpuMask: DummyFlags; readBuffer: UInt32; writeBuffer: UInt32; readOffset: IntPtr; writeOffset: IntPtr; size: IntPtr; signalSemaphoreCount: Int32; signalSemaphoreArray: IntPtr; var signalValueArray: UInt64): UInt32;
    begin
      Result := z_AsyncCopyBufferSubDataNVX_ovr_6(waitSemaphoreCount, waitSemaphoreArray[0], fenceValueArray, readGpu, writeGpuMask, readBuffer, writeBuffer, readOffset, writeOffset, size, signalSemaphoreCount, signalSemaphoreArray, signalValueArray);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function AsyncCopyBufferSubDataNVX(waitSemaphoreCount: Int32; waitSemaphoreArray: array of UInt32; var fenceValueArray: UInt64; readGpu: UInt32; writeGpuMask: DummyFlags; readBuffer: UInt32; writeBuffer: UInt32; readOffset: IntPtr; writeOffset: IntPtr; size: IntPtr; signalSemaphoreCount: Int32; signalSemaphoreArray: IntPtr; signalValueArray: IntPtr): UInt32;
    begin
      Result := z_AsyncCopyBufferSubDataNVX_ovr_8(waitSemaphoreCount, waitSemaphoreArray[0], fenceValueArray, readGpu, writeGpuMask, readBuffer, writeBuffer, readOffset, writeOffset, size, signalSemaphoreCount, signalSemaphoreArray, signalValueArray);
    end;
    public z_AsyncCopyBufferSubDataNVX_ovr_18 := GetFuncOrNil&<function(waitSemaphoreCount: Int32; var waitSemaphoreArray: UInt32; fenceValueArray: IntPtr; readGpu: UInt32; writeGpuMask: DummyFlags; readBuffer: UInt32; writeBuffer: UInt32; readOffset: IntPtr; writeOffset: IntPtr; size: IntPtr; signalSemaphoreCount: Int32; var signalSemaphoreArray: UInt32; var signalValueArray: UInt64): UInt32>(z_AsyncCopyBufferSubDataNVX_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function AsyncCopyBufferSubDataNVX(waitSemaphoreCount: Int32; waitSemaphoreArray: array of UInt32; fenceValueArray: IntPtr; readGpu: UInt32; writeGpuMask: DummyFlags; readBuffer: UInt32; writeBuffer: UInt32; readOffset: IntPtr; writeOffset: IntPtr; size: IntPtr; signalSemaphoreCount: Int32; signalSemaphoreArray: array of UInt32; signalValueArray: array of UInt64): UInt32;
    begin
      Result := z_AsyncCopyBufferSubDataNVX_ovr_18(waitSemaphoreCount, waitSemaphoreArray[0], fenceValueArray, readGpu, writeGpuMask, readBuffer, writeBuffer, readOffset, writeOffset, size, signalSemaphoreCount, signalSemaphoreArray[0], signalValueArray[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function AsyncCopyBufferSubDataNVX(waitSemaphoreCount: Int32; waitSemaphoreArray: array of UInt32; fenceValueArray: IntPtr; readGpu: UInt32; writeGpuMask: DummyFlags; readBuffer: UInt32; writeBuffer: UInt32; readOffset: IntPtr; writeOffset: IntPtr; size: IntPtr; signalSemaphoreCount: Int32; signalSemaphoreArray: array of UInt32; var signalValueArray: UInt64): UInt32;
    begin
      Result := z_AsyncCopyBufferSubDataNVX_ovr_18(waitSemaphoreCount, waitSemaphoreArray[0], fenceValueArray, readGpu, writeGpuMask, readBuffer, writeBuffer, readOffset, writeOffset, size, signalSemaphoreCount, signalSemaphoreArray[0], signalValueArray);
    end;
    public z_AsyncCopyBufferSubDataNVX_ovr_20 := GetFuncOrNil&<function(waitSemaphoreCount: Int32; var waitSemaphoreArray: UInt32; fenceValueArray: IntPtr; readGpu: UInt32; writeGpuMask: DummyFlags; readBuffer: UInt32; writeBuffer: UInt32; readOffset: IntPtr; writeOffset: IntPtr; size: IntPtr; signalSemaphoreCount: Int32; var signalSemaphoreArray: UInt32; signalValueArray: IntPtr): UInt32>(z_AsyncCopyBufferSubDataNVX_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function AsyncCopyBufferSubDataNVX(waitSemaphoreCount: Int32; waitSemaphoreArray: array of UInt32; fenceValueArray: IntPtr; readGpu: UInt32; writeGpuMask: DummyFlags; readBuffer: UInt32; writeBuffer: UInt32; readOffset: IntPtr; writeOffset: IntPtr; size: IntPtr; signalSemaphoreCount: Int32; signalSemaphoreArray: array of UInt32; signalValueArray: IntPtr): UInt32;
    begin
      Result := z_AsyncCopyBufferSubDataNVX_ovr_20(waitSemaphoreCount, waitSemaphoreArray[0], fenceValueArray, readGpu, writeGpuMask, readBuffer, writeBuffer, readOffset, writeOffset, size, signalSemaphoreCount, signalSemaphoreArray[0], signalValueArray);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function AsyncCopyBufferSubDataNVX(waitSemaphoreCount: Int32; waitSemaphoreArray: array of UInt32; fenceValueArray: IntPtr; readGpu: UInt32; writeGpuMask: DummyFlags; readBuffer: UInt32; writeBuffer: UInt32; readOffset: IntPtr; writeOffset: IntPtr; size: IntPtr; signalSemaphoreCount: Int32; var signalSemaphoreArray: UInt32; signalValueArray: array of UInt64): UInt32;
    begin
      Result := z_AsyncCopyBufferSubDataNVX_ovr_18(waitSemaphoreCount, waitSemaphoreArray[0], fenceValueArray, readGpu, writeGpuMask, readBuffer, writeBuffer, readOffset, writeOffset, size, signalSemaphoreCount, signalSemaphoreArray, signalValueArray[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function AsyncCopyBufferSubDataNVX(waitSemaphoreCount: Int32; waitSemaphoreArray: array of UInt32; fenceValueArray: IntPtr; readGpu: UInt32; writeGpuMask: DummyFlags; readBuffer: UInt32; writeBuffer: UInt32; readOffset: IntPtr; writeOffset: IntPtr; size: IntPtr; signalSemaphoreCount: Int32; var signalSemaphoreArray: UInt32; var signalValueArray: UInt64): UInt32;
    begin
      Result := z_AsyncCopyBufferSubDataNVX_ovr_18(waitSemaphoreCount, waitSemaphoreArray[0], fenceValueArray, readGpu, writeGpuMask, readBuffer, writeBuffer, readOffset, writeOffset, size, signalSemaphoreCount, signalSemaphoreArray, signalValueArray);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function AsyncCopyBufferSubDataNVX(waitSemaphoreCount: Int32; waitSemaphoreArray: array of UInt32; fenceValueArray: IntPtr; readGpu: UInt32; writeGpuMask: DummyFlags; readBuffer: UInt32; writeBuffer: UInt32; readOffset: IntPtr; writeOffset: IntPtr; size: IntPtr; signalSemaphoreCount: Int32; var signalSemaphoreArray: UInt32; signalValueArray: IntPtr): UInt32;
    begin
      Result := z_AsyncCopyBufferSubDataNVX_ovr_20(waitSemaphoreCount, waitSemaphoreArray[0], fenceValueArray, readGpu, writeGpuMask, readBuffer, writeBuffer, readOffset, writeOffset, size, signalSemaphoreCount, signalSemaphoreArray, signalValueArray);
    end;
    public z_AsyncCopyBufferSubDataNVX_ovr_24 := GetFuncOrNil&<function(waitSemaphoreCount: Int32; var waitSemaphoreArray: UInt32; fenceValueArray: IntPtr; readGpu: UInt32; writeGpuMask: DummyFlags; readBuffer: UInt32; writeBuffer: UInt32; readOffset: IntPtr; writeOffset: IntPtr; size: IntPtr; signalSemaphoreCount: Int32; signalSemaphoreArray: IntPtr; var signalValueArray: UInt64): UInt32>(z_AsyncCopyBufferSubDataNVX_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function AsyncCopyBufferSubDataNVX(waitSemaphoreCount: Int32; waitSemaphoreArray: array of UInt32; fenceValueArray: IntPtr; readGpu: UInt32; writeGpuMask: DummyFlags; readBuffer: UInt32; writeBuffer: UInt32; readOffset: IntPtr; writeOffset: IntPtr; size: IntPtr; signalSemaphoreCount: Int32; signalSemaphoreArray: IntPtr; signalValueArray: array of UInt64): UInt32;
    begin
      Result := z_AsyncCopyBufferSubDataNVX_ovr_24(waitSemaphoreCount, waitSemaphoreArray[0], fenceValueArray, readGpu, writeGpuMask, readBuffer, writeBuffer, readOffset, writeOffset, size, signalSemaphoreCount, signalSemaphoreArray, signalValueArray[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function AsyncCopyBufferSubDataNVX(waitSemaphoreCount: Int32; waitSemaphoreArray: array of UInt32; fenceValueArray: IntPtr; readGpu: UInt32; writeGpuMask: DummyFlags; readBuffer: UInt32; writeBuffer: UInt32; readOffset: IntPtr; writeOffset: IntPtr; size: IntPtr; signalSemaphoreCount: Int32; signalSemaphoreArray: IntPtr; var signalValueArray: UInt64): UInt32;
    begin
      Result := z_AsyncCopyBufferSubDataNVX_ovr_24(waitSemaphoreCount, waitSemaphoreArray[0], fenceValueArray, readGpu, writeGpuMask, readBuffer, writeBuffer, readOffset, writeOffset, size, signalSemaphoreCount, signalSemaphoreArray, signalValueArray);
    end;
    public z_AsyncCopyBufferSubDataNVX_ovr_26 := GetFuncOrNil&<function(waitSemaphoreCount: Int32; var waitSemaphoreArray: UInt32; fenceValueArray: IntPtr; readGpu: UInt32; writeGpuMask: DummyFlags; readBuffer: UInt32; writeBuffer: UInt32; readOffset: IntPtr; writeOffset: IntPtr; size: IntPtr; signalSemaphoreCount: Int32; signalSemaphoreArray: IntPtr; signalValueArray: IntPtr): UInt32>(z_AsyncCopyBufferSubDataNVX_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function AsyncCopyBufferSubDataNVX(waitSemaphoreCount: Int32; waitSemaphoreArray: array of UInt32; fenceValueArray: IntPtr; readGpu: UInt32; writeGpuMask: DummyFlags; readBuffer: UInt32; writeBuffer: UInt32; readOffset: IntPtr; writeOffset: IntPtr; size: IntPtr; signalSemaphoreCount: Int32; signalSemaphoreArray: IntPtr; signalValueArray: IntPtr): UInt32;
    begin
      Result := z_AsyncCopyBufferSubDataNVX_ovr_26(waitSemaphoreCount, waitSemaphoreArray[0], fenceValueArray, readGpu, writeGpuMask, readBuffer, writeBuffer, readOffset, writeOffset, size, signalSemaphoreCount, signalSemaphoreArray, signalValueArray);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function AsyncCopyBufferSubDataNVX(waitSemaphoreCount: Int32; var waitSemaphoreArray: UInt32; fenceValueArray: array of UInt64; readGpu: UInt32; writeGpuMask: DummyFlags; readBuffer: UInt32; writeBuffer: UInt32; readOffset: IntPtr; writeOffset: IntPtr; size: IntPtr; signalSemaphoreCount: Int32; signalSemaphoreArray: array of UInt32; signalValueArray: array of UInt64): UInt32;
    begin
      Result := z_AsyncCopyBufferSubDataNVX_ovr_0(waitSemaphoreCount, waitSemaphoreArray, fenceValueArray[0], readGpu, writeGpuMask, readBuffer, writeBuffer, readOffset, writeOffset, size, signalSemaphoreCount, signalSemaphoreArray[0], signalValueArray[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function AsyncCopyBufferSubDataNVX(waitSemaphoreCount: Int32; var waitSemaphoreArray: UInt32; fenceValueArray: array of UInt64; readGpu: UInt32; writeGpuMask: DummyFlags; readBuffer: UInt32; writeBuffer: UInt32; readOffset: IntPtr; writeOffset: IntPtr; size: IntPtr; signalSemaphoreCount: Int32; signalSemaphoreArray: array of UInt32; var signalValueArray: UInt64): UInt32;
    begin
      Result := z_AsyncCopyBufferSubDataNVX_ovr_0(waitSemaphoreCount, waitSemaphoreArray, fenceValueArray[0], readGpu, writeGpuMask, readBuffer, writeBuffer, readOffset, writeOffset, size, signalSemaphoreCount, signalSemaphoreArray[0], signalValueArray);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function AsyncCopyBufferSubDataNVX(waitSemaphoreCount: Int32; var waitSemaphoreArray: UInt32; fenceValueArray: array of UInt64; readGpu: UInt32; writeGpuMask: DummyFlags; readBuffer: UInt32; writeBuffer: UInt32; readOffset: IntPtr; writeOffset: IntPtr; size: IntPtr; signalSemaphoreCount: Int32; signalSemaphoreArray: array of UInt32; signalValueArray: IntPtr): UInt32;
    begin
      Result := z_AsyncCopyBufferSubDataNVX_ovr_2(waitSemaphoreCount, waitSemaphoreArray, fenceValueArray[0], readGpu, writeGpuMask, readBuffer, writeBuffer, readOffset, writeOffset, size, signalSemaphoreCount, signalSemaphoreArray[0], signalValueArray);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function AsyncCopyBufferSubDataNVX(waitSemaphoreCount: Int32; var waitSemaphoreArray: UInt32; fenceValueArray: array of UInt64; readGpu: UInt32; writeGpuMask: DummyFlags; readBuffer: UInt32; writeBuffer: UInt32; readOffset: IntPtr; writeOffset: IntPtr; size: IntPtr; signalSemaphoreCount: Int32; var signalSemaphoreArray: UInt32; signalValueArray: array of UInt64): UInt32;
    begin
      Result := z_AsyncCopyBufferSubDataNVX_ovr_0(waitSemaphoreCount, waitSemaphoreArray, fenceValueArray[0], readGpu, writeGpuMask, readBuffer, writeBuffer, readOffset, writeOffset, size, signalSemaphoreCount, signalSemaphoreArray, signalValueArray[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function AsyncCopyBufferSubDataNVX(waitSemaphoreCount: Int32; var waitSemaphoreArray: UInt32; fenceValueArray: array of UInt64; readGpu: UInt32; writeGpuMask: DummyFlags; readBuffer: UInt32; writeBuffer: UInt32; readOffset: IntPtr; writeOffset: IntPtr; size: IntPtr; signalSemaphoreCount: Int32; var signalSemaphoreArray: UInt32; var signalValueArray: UInt64): UInt32;
    begin
      Result := z_AsyncCopyBufferSubDataNVX_ovr_0(waitSemaphoreCount, waitSemaphoreArray, fenceValueArray[0], readGpu, writeGpuMask, readBuffer, writeBuffer, readOffset, writeOffset, size, signalSemaphoreCount, signalSemaphoreArray, signalValueArray);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function AsyncCopyBufferSubDataNVX(waitSemaphoreCount: Int32; var waitSemaphoreArray: UInt32; fenceValueArray: array of UInt64; readGpu: UInt32; writeGpuMask: DummyFlags; readBuffer: UInt32; writeBuffer: UInt32; readOffset: IntPtr; writeOffset: IntPtr; size: IntPtr; signalSemaphoreCount: Int32; var signalSemaphoreArray: UInt32; signalValueArray: IntPtr): UInt32;
    begin
      Result := z_AsyncCopyBufferSubDataNVX_ovr_2(waitSemaphoreCount, waitSemaphoreArray, fenceValueArray[0], readGpu, writeGpuMask, readBuffer, writeBuffer, readOffset, writeOffset, size, signalSemaphoreCount, signalSemaphoreArray, signalValueArray);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function AsyncCopyBufferSubDataNVX(waitSemaphoreCount: Int32; var waitSemaphoreArray: UInt32; fenceValueArray: array of UInt64; readGpu: UInt32; writeGpuMask: DummyFlags; readBuffer: UInt32; writeBuffer: UInt32; readOffset: IntPtr; writeOffset: IntPtr; size: IntPtr; signalSemaphoreCount: Int32; signalSemaphoreArray: IntPtr; signalValueArray: array of UInt64): UInt32;
    begin
      Result := z_AsyncCopyBufferSubDataNVX_ovr_6(waitSemaphoreCount, waitSemaphoreArray, fenceValueArray[0], readGpu, writeGpuMask, readBuffer, writeBuffer, readOffset, writeOffset, size, signalSemaphoreCount, signalSemaphoreArray, signalValueArray[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function AsyncCopyBufferSubDataNVX(waitSemaphoreCount: Int32; var waitSemaphoreArray: UInt32; fenceValueArray: array of UInt64; readGpu: UInt32; writeGpuMask: DummyFlags; readBuffer: UInt32; writeBuffer: UInt32; readOffset: IntPtr; writeOffset: IntPtr; size: IntPtr; signalSemaphoreCount: Int32; signalSemaphoreArray: IntPtr; var signalValueArray: UInt64): UInt32;
    begin
      Result := z_AsyncCopyBufferSubDataNVX_ovr_6(waitSemaphoreCount, waitSemaphoreArray, fenceValueArray[0], readGpu, writeGpuMask, readBuffer, writeBuffer, readOffset, writeOffset, size, signalSemaphoreCount, signalSemaphoreArray, signalValueArray);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function AsyncCopyBufferSubDataNVX(waitSemaphoreCount: Int32; var waitSemaphoreArray: UInt32; fenceValueArray: array of UInt64; readGpu: UInt32; writeGpuMask: DummyFlags; readBuffer: UInt32; writeBuffer: UInt32; readOffset: IntPtr; writeOffset: IntPtr; size: IntPtr; signalSemaphoreCount: Int32; signalSemaphoreArray: IntPtr; signalValueArray: IntPtr): UInt32;
    begin
      Result := z_AsyncCopyBufferSubDataNVX_ovr_8(waitSemaphoreCount, waitSemaphoreArray, fenceValueArray[0], readGpu, writeGpuMask, readBuffer, writeBuffer, readOffset, writeOffset, size, signalSemaphoreCount, signalSemaphoreArray, signalValueArray);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function AsyncCopyBufferSubDataNVX(waitSemaphoreCount: Int32; var waitSemaphoreArray: UInt32; var fenceValueArray: UInt64; readGpu: UInt32; writeGpuMask: DummyFlags; readBuffer: UInt32; writeBuffer: UInt32; readOffset: IntPtr; writeOffset: IntPtr; size: IntPtr; signalSemaphoreCount: Int32; signalSemaphoreArray: array of UInt32; signalValueArray: array of UInt64): UInt32;
    begin
      Result := z_AsyncCopyBufferSubDataNVX_ovr_0(waitSemaphoreCount, waitSemaphoreArray, fenceValueArray, readGpu, writeGpuMask, readBuffer, writeBuffer, readOffset, writeOffset, size, signalSemaphoreCount, signalSemaphoreArray[0], signalValueArray[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function AsyncCopyBufferSubDataNVX(waitSemaphoreCount: Int32; var waitSemaphoreArray: UInt32; var fenceValueArray: UInt64; readGpu: UInt32; writeGpuMask: DummyFlags; readBuffer: UInt32; writeBuffer: UInt32; readOffset: IntPtr; writeOffset: IntPtr; size: IntPtr; signalSemaphoreCount: Int32; signalSemaphoreArray: array of UInt32; var signalValueArray: UInt64): UInt32;
    begin
      Result := z_AsyncCopyBufferSubDataNVX_ovr_0(waitSemaphoreCount, waitSemaphoreArray, fenceValueArray, readGpu, writeGpuMask, readBuffer, writeBuffer, readOffset, writeOffset, size, signalSemaphoreCount, signalSemaphoreArray[0], signalValueArray);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function AsyncCopyBufferSubDataNVX(waitSemaphoreCount: Int32; var waitSemaphoreArray: UInt32; var fenceValueArray: UInt64; readGpu: UInt32; writeGpuMask: DummyFlags; readBuffer: UInt32; writeBuffer: UInt32; readOffset: IntPtr; writeOffset: IntPtr; size: IntPtr; signalSemaphoreCount: Int32; signalSemaphoreArray: array of UInt32; signalValueArray: IntPtr): UInt32;
    begin
      Result := z_AsyncCopyBufferSubDataNVX_ovr_2(waitSemaphoreCount, waitSemaphoreArray, fenceValueArray, readGpu, writeGpuMask, readBuffer, writeBuffer, readOffset, writeOffset, size, signalSemaphoreCount, signalSemaphoreArray[0], signalValueArray);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function AsyncCopyBufferSubDataNVX(waitSemaphoreCount: Int32; var waitSemaphoreArray: UInt32; var fenceValueArray: UInt64; readGpu: UInt32; writeGpuMask: DummyFlags; readBuffer: UInt32; writeBuffer: UInt32; readOffset: IntPtr; writeOffset: IntPtr; size: IntPtr; signalSemaphoreCount: Int32; var signalSemaphoreArray: UInt32; signalValueArray: array of UInt64): UInt32;
    begin
      Result := z_AsyncCopyBufferSubDataNVX_ovr_0(waitSemaphoreCount, waitSemaphoreArray, fenceValueArray, readGpu, writeGpuMask, readBuffer, writeBuffer, readOffset, writeOffset, size, signalSemaphoreCount, signalSemaphoreArray, signalValueArray[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function AsyncCopyBufferSubDataNVX(waitSemaphoreCount: Int32; var waitSemaphoreArray: UInt32; var fenceValueArray: UInt64; readGpu: UInt32; writeGpuMask: DummyFlags; readBuffer: UInt32; writeBuffer: UInt32; readOffset: IntPtr; writeOffset: IntPtr; size: IntPtr; signalSemaphoreCount: Int32; var signalSemaphoreArray: UInt32; var signalValueArray: UInt64): UInt32;
    begin
      Result := z_AsyncCopyBufferSubDataNVX_ovr_0(waitSemaphoreCount, waitSemaphoreArray, fenceValueArray, readGpu, writeGpuMask, readBuffer, writeBuffer, readOffset, writeOffset, size, signalSemaphoreCount, signalSemaphoreArray, signalValueArray);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function AsyncCopyBufferSubDataNVX(waitSemaphoreCount: Int32; var waitSemaphoreArray: UInt32; var fenceValueArray: UInt64; readGpu: UInt32; writeGpuMask: DummyFlags; readBuffer: UInt32; writeBuffer: UInt32; readOffset: IntPtr; writeOffset: IntPtr; size: IntPtr; signalSemaphoreCount: Int32; var signalSemaphoreArray: UInt32; signalValueArray: IntPtr): UInt32;
    begin
      Result := z_AsyncCopyBufferSubDataNVX_ovr_2(waitSemaphoreCount, waitSemaphoreArray, fenceValueArray, readGpu, writeGpuMask, readBuffer, writeBuffer, readOffset, writeOffset, size, signalSemaphoreCount, signalSemaphoreArray, signalValueArray);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function AsyncCopyBufferSubDataNVX(waitSemaphoreCount: Int32; var waitSemaphoreArray: UInt32; var fenceValueArray: UInt64; readGpu: UInt32; writeGpuMask: DummyFlags; readBuffer: UInt32; writeBuffer: UInt32; readOffset: IntPtr; writeOffset: IntPtr; size: IntPtr; signalSemaphoreCount: Int32; signalSemaphoreArray: IntPtr; signalValueArray: array of UInt64): UInt32;
    begin
      Result := z_AsyncCopyBufferSubDataNVX_ovr_6(waitSemaphoreCount, waitSemaphoreArray, fenceValueArray, readGpu, writeGpuMask, readBuffer, writeBuffer, readOffset, writeOffset, size, signalSemaphoreCount, signalSemaphoreArray, signalValueArray[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function AsyncCopyBufferSubDataNVX(waitSemaphoreCount: Int32; var waitSemaphoreArray: UInt32; var fenceValueArray: UInt64; readGpu: UInt32; writeGpuMask: DummyFlags; readBuffer: UInt32; writeBuffer: UInt32; readOffset: IntPtr; writeOffset: IntPtr; size: IntPtr; signalSemaphoreCount: Int32; signalSemaphoreArray: IntPtr; var signalValueArray: UInt64): UInt32;
    begin
      Result := z_AsyncCopyBufferSubDataNVX_ovr_6(waitSemaphoreCount, waitSemaphoreArray, fenceValueArray, readGpu, writeGpuMask, readBuffer, writeBuffer, readOffset, writeOffset, size, signalSemaphoreCount, signalSemaphoreArray, signalValueArray);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function AsyncCopyBufferSubDataNVX(waitSemaphoreCount: Int32; var waitSemaphoreArray: UInt32; var fenceValueArray: UInt64; readGpu: UInt32; writeGpuMask: DummyFlags; readBuffer: UInt32; writeBuffer: UInt32; readOffset: IntPtr; writeOffset: IntPtr; size: IntPtr; signalSemaphoreCount: Int32; signalSemaphoreArray: IntPtr; signalValueArray: IntPtr): UInt32;
    begin
      Result := z_AsyncCopyBufferSubDataNVX_ovr_8(waitSemaphoreCount, waitSemaphoreArray, fenceValueArray, readGpu, writeGpuMask, readBuffer, writeBuffer, readOffset, writeOffset, size, signalSemaphoreCount, signalSemaphoreArray, signalValueArray);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function AsyncCopyBufferSubDataNVX(waitSemaphoreCount: Int32; var waitSemaphoreArray: UInt32; fenceValueArray: IntPtr; readGpu: UInt32; writeGpuMask: DummyFlags; readBuffer: UInt32; writeBuffer: UInt32; readOffset: IntPtr; writeOffset: IntPtr; size: IntPtr; signalSemaphoreCount: Int32; signalSemaphoreArray: array of UInt32; signalValueArray: array of UInt64): UInt32;
    begin
      Result := z_AsyncCopyBufferSubDataNVX_ovr_18(waitSemaphoreCount, waitSemaphoreArray, fenceValueArray, readGpu, writeGpuMask, readBuffer, writeBuffer, readOffset, writeOffset, size, signalSemaphoreCount, signalSemaphoreArray[0], signalValueArray[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function AsyncCopyBufferSubDataNVX(waitSemaphoreCount: Int32; var waitSemaphoreArray: UInt32; fenceValueArray: IntPtr; readGpu: UInt32; writeGpuMask: DummyFlags; readBuffer: UInt32; writeBuffer: UInt32; readOffset: IntPtr; writeOffset: IntPtr; size: IntPtr; signalSemaphoreCount: Int32; signalSemaphoreArray: array of UInt32; var signalValueArray: UInt64): UInt32;
    begin
      Result := z_AsyncCopyBufferSubDataNVX_ovr_18(waitSemaphoreCount, waitSemaphoreArray, fenceValueArray, readGpu, writeGpuMask, readBuffer, writeBuffer, readOffset, writeOffset, size, signalSemaphoreCount, signalSemaphoreArray[0], signalValueArray);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function AsyncCopyBufferSubDataNVX(waitSemaphoreCount: Int32; var waitSemaphoreArray: UInt32; fenceValueArray: IntPtr; readGpu: UInt32; writeGpuMask: DummyFlags; readBuffer: UInt32; writeBuffer: UInt32; readOffset: IntPtr; writeOffset: IntPtr; size: IntPtr; signalSemaphoreCount: Int32; signalSemaphoreArray: array of UInt32; signalValueArray: IntPtr): UInt32;
    begin
      Result := z_AsyncCopyBufferSubDataNVX_ovr_20(waitSemaphoreCount, waitSemaphoreArray, fenceValueArray, readGpu, writeGpuMask, readBuffer, writeBuffer, readOffset, writeOffset, size, signalSemaphoreCount, signalSemaphoreArray[0], signalValueArray);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function AsyncCopyBufferSubDataNVX(waitSemaphoreCount: Int32; var waitSemaphoreArray: UInt32; fenceValueArray: IntPtr; readGpu: UInt32; writeGpuMask: DummyFlags; readBuffer: UInt32; writeBuffer: UInt32; readOffset: IntPtr; writeOffset: IntPtr; size: IntPtr; signalSemaphoreCount: Int32; var signalSemaphoreArray: UInt32; signalValueArray: array of UInt64): UInt32;
    begin
      Result := z_AsyncCopyBufferSubDataNVX_ovr_18(waitSemaphoreCount, waitSemaphoreArray, fenceValueArray, readGpu, writeGpuMask, readBuffer, writeBuffer, readOffset, writeOffset, size, signalSemaphoreCount, signalSemaphoreArray, signalValueArray[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function AsyncCopyBufferSubDataNVX(waitSemaphoreCount: Int32; var waitSemaphoreArray: UInt32; fenceValueArray: IntPtr; readGpu: UInt32; writeGpuMask: DummyFlags; readBuffer: UInt32; writeBuffer: UInt32; readOffset: IntPtr; writeOffset: IntPtr; size: IntPtr; signalSemaphoreCount: Int32; var signalSemaphoreArray: UInt32; var signalValueArray: UInt64): UInt32;
    begin
      Result := z_AsyncCopyBufferSubDataNVX_ovr_18(waitSemaphoreCount, waitSemaphoreArray, fenceValueArray, readGpu, writeGpuMask, readBuffer, writeBuffer, readOffset, writeOffset, size, signalSemaphoreCount, signalSemaphoreArray, signalValueArray);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function AsyncCopyBufferSubDataNVX(waitSemaphoreCount: Int32; var waitSemaphoreArray: UInt32; fenceValueArray: IntPtr; readGpu: UInt32; writeGpuMask: DummyFlags; readBuffer: UInt32; writeBuffer: UInt32; readOffset: IntPtr; writeOffset: IntPtr; size: IntPtr; signalSemaphoreCount: Int32; var signalSemaphoreArray: UInt32; signalValueArray: IntPtr): UInt32;
    begin
      Result := z_AsyncCopyBufferSubDataNVX_ovr_20(waitSemaphoreCount, waitSemaphoreArray, fenceValueArray, readGpu, writeGpuMask, readBuffer, writeBuffer, readOffset, writeOffset, size, signalSemaphoreCount, signalSemaphoreArray, signalValueArray);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function AsyncCopyBufferSubDataNVX(waitSemaphoreCount: Int32; var waitSemaphoreArray: UInt32; fenceValueArray: IntPtr; readGpu: UInt32; writeGpuMask: DummyFlags; readBuffer: UInt32; writeBuffer: UInt32; readOffset: IntPtr; writeOffset: IntPtr; size: IntPtr; signalSemaphoreCount: Int32; signalSemaphoreArray: IntPtr; signalValueArray: array of UInt64): UInt32;
    begin
      Result := z_AsyncCopyBufferSubDataNVX_ovr_24(waitSemaphoreCount, waitSemaphoreArray, fenceValueArray, readGpu, writeGpuMask, readBuffer, writeBuffer, readOffset, writeOffset, size, signalSemaphoreCount, signalSemaphoreArray, signalValueArray[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function AsyncCopyBufferSubDataNVX(waitSemaphoreCount: Int32; var waitSemaphoreArray: UInt32; fenceValueArray: IntPtr; readGpu: UInt32; writeGpuMask: DummyFlags; readBuffer: UInt32; writeBuffer: UInt32; readOffset: IntPtr; writeOffset: IntPtr; size: IntPtr; signalSemaphoreCount: Int32; signalSemaphoreArray: IntPtr; var signalValueArray: UInt64): UInt32;
    begin
      Result := z_AsyncCopyBufferSubDataNVX_ovr_24(waitSemaphoreCount, waitSemaphoreArray, fenceValueArray, readGpu, writeGpuMask, readBuffer, writeBuffer, readOffset, writeOffset, size, signalSemaphoreCount, signalSemaphoreArray, signalValueArray);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function AsyncCopyBufferSubDataNVX(waitSemaphoreCount: Int32; var waitSemaphoreArray: UInt32; fenceValueArray: IntPtr; readGpu: UInt32; writeGpuMask: DummyFlags; readBuffer: UInt32; writeBuffer: UInt32; readOffset: IntPtr; writeOffset: IntPtr; size: IntPtr; signalSemaphoreCount: Int32; signalSemaphoreArray: IntPtr; signalValueArray: IntPtr): UInt32;
    begin
      Result := z_AsyncCopyBufferSubDataNVX_ovr_26(waitSemaphoreCount, waitSemaphoreArray, fenceValueArray, readGpu, writeGpuMask, readBuffer, writeBuffer, readOffset, writeOffset, size, signalSemaphoreCount, signalSemaphoreArray, signalValueArray);
    end;
    public z_AsyncCopyBufferSubDataNVX_ovr_54 := GetFuncOrNil&<function(waitSemaphoreCount: Int32; waitSemaphoreArray: IntPtr; var fenceValueArray: UInt64; readGpu: UInt32; writeGpuMask: DummyFlags; readBuffer: UInt32; writeBuffer: UInt32; readOffset: IntPtr; writeOffset: IntPtr; size: IntPtr; signalSemaphoreCount: Int32; var signalSemaphoreArray: UInt32; var signalValueArray: UInt64): UInt32>(z_AsyncCopyBufferSubDataNVX_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function AsyncCopyBufferSubDataNVX(waitSemaphoreCount: Int32; waitSemaphoreArray: IntPtr; fenceValueArray: array of UInt64; readGpu: UInt32; writeGpuMask: DummyFlags; readBuffer: UInt32; writeBuffer: UInt32; readOffset: IntPtr; writeOffset: IntPtr; size: IntPtr; signalSemaphoreCount: Int32; signalSemaphoreArray: array of UInt32; signalValueArray: array of UInt64): UInt32;
    begin
      Result := z_AsyncCopyBufferSubDataNVX_ovr_54(waitSemaphoreCount, waitSemaphoreArray, fenceValueArray[0], readGpu, writeGpuMask, readBuffer, writeBuffer, readOffset, writeOffset, size, signalSemaphoreCount, signalSemaphoreArray[0], signalValueArray[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function AsyncCopyBufferSubDataNVX(waitSemaphoreCount: Int32; waitSemaphoreArray: IntPtr; fenceValueArray: array of UInt64; readGpu: UInt32; writeGpuMask: DummyFlags; readBuffer: UInt32; writeBuffer: UInt32; readOffset: IntPtr; writeOffset: IntPtr; size: IntPtr; signalSemaphoreCount: Int32; signalSemaphoreArray: array of UInt32; var signalValueArray: UInt64): UInt32;
    begin
      Result := z_AsyncCopyBufferSubDataNVX_ovr_54(waitSemaphoreCount, waitSemaphoreArray, fenceValueArray[0], readGpu, writeGpuMask, readBuffer, writeBuffer, readOffset, writeOffset, size, signalSemaphoreCount, signalSemaphoreArray[0], signalValueArray);
    end;
    public z_AsyncCopyBufferSubDataNVX_ovr_56 := GetFuncOrNil&<function(waitSemaphoreCount: Int32; waitSemaphoreArray: IntPtr; var fenceValueArray: UInt64; readGpu: UInt32; writeGpuMask: DummyFlags; readBuffer: UInt32; writeBuffer: UInt32; readOffset: IntPtr; writeOffset: IntPtr; size: IntPtr; signalSemaphoreCount: Int32; var signalSemaphoreArray: UInt32; signalValueArray: IntPtr): UInt32>(z_AsyncCopyBufferSubDataNVX_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function AsyncCopyBufferSubDataNVX(waitSemaphoreCount: Int32; waitSemaphoreArray: IntPtr; fenceValueArray: array of UInt64; readGpu: UInt32; writeGpuMask: DummyFlags; readBuffer: UInt32; writeBuffer: UInt32; readOffset: IntPtr; writeOffset: IntPtr; size: IntPtr; signalSemaphoreCount: Int32; signalSemaphoreArray: array of UInt32; signalValueArray: IntPtr): UInt32;
    begin
      Result := z_AsyncCopyBufferSubDataNVX_ovr_56(waitSemaphoreCount, waitSemaphoreArray, fenceValueArray[0], readGpu, writeGpuMask, readBuffer, writeBuffer, readOffset, writeOffset, size, signalSemaphoreCount, signalSemaphoreArray[0], signalValueArray);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function AsyncCopyBufferSubDataNVX(waitSemaphoreCount: Int32; waitSemaphoreArray: IntPtr; fenceValueArray: array of UInt64; readGpu: UInt32; writeGpuMask: DummyFlags; readBuffer: UInt32; writeBuffer: UInt32; readOffset: IntPtr; writeOffset: IntPtr; size: IntPtr; signalSemaphoreCount: Int32; var signalSemaphoreArray: UInt32; signalValueArray: array of UInt64): UInt32;
    begin
      Result := z_AsyncCopyBufferSubDataNVX_ovr_54(waitSemaphoreCount, waitSemaphoreArray, fenceValueArray[0], readGpu, writeGpuMask, readBuffer, writeBuffer, readOffset, writeOffset, size, signalSemaphoreCount, signalSemaphoreArray, signalValueArray[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function AsyncCopyBufferSubDataNVX(waitSemaphoreCount: Int32; waitSemaphoreArray: IntPtr; fenceValueArray: array of UInt64; readGpu: UInt32; writeGpuMask: DummyFlags; readBuffer: UInt32; writeBuffer: UInt32; readOffset: IntPtr; writeOffset: IntPtr; size: IntPtr; signalSemaphoreCount: Int32; var signalSemaphoreArray: UInt32; var signalValueArray: UInt64): UInt32;
    begin
      Result := z_AsyncCopyBufferSubDataNVX_ovr_54(waitSemaphoreCount, waitSemaphoreArray, fenceValueArray[0], readGpu, writeGpuMask, readBuffer, writeBuffer, readOffset, writeOffset, size, signalSemaphoreCount, signalSemaphoreArray, signalValueArray);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function AsyncCopyBufferSubDataNVX(waitSemaphoreCount: Int32; waitSemaphoreArray: IntPtr; fenceValueArray: array of UInt64; readGpu: UInt32; writeGpuMask: DummyFlags; readBuffer: UInt32; writeBuffer: UInt32; readOffset: IntPtr; writeOffset: IntPtr; size: IntPtr; signalSemaphoreCount: Int32; var signalSemaphoreArray: UInt32; signalValueArray: IntPtr): UInt32;
    begin
      Result := z_AsyncCopyBufferSubDataNVX_ovr_56(waitSemaphoreCount, waitSemaphoreArray, fenceValueArray[0], readGpu, writeGpuMask, readBuffer, writeBuffer, readOffset, writeOffset, size, signalSemaphoreCount, signalSemaphoreArray, signalValueArray);
    end;
    public z_AsyncCopyBufferSubDataNVX_ovr_60 := GetFuncOrNil&<function(waitSemaphoreCount: Int32; waitSemaphoreArray: IntPtr; var fenceValueArray: UInt64; readGpu: UInt32; writeGpuMask: DummyFlags; readBuffer: UInt32; writeBuffer: UInt32; readOffset: IntPtr; writeOffset: IntPtr; size: IntPtr; signalSemaphoreCount: Int32; signalSemaphoreArray: IntPtr; var signalValueArray: UInt64): UInt32>(z_AsyncCopyBufferSubDataNVX_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function AsyncCopyBufferSubDataNVX(waitSemaphoreCount: Int32; waitSemaphoreArray: IntPtr; fenceValueArray: array of UInt64; readGpu: UInt32; writeGpuMask: DummyFlags; readBuffer: UInt32; writeBuffer: UInt32; readOffset: IntPtr; writeOffset: IntPtr; size: IntPtr; signalSemaphoreCount: Int32; signalSemaphoreArray: IntPtr; signalValueArray: array of UInt64): UInt32;
    begin
      Result := z_AsyncCopyBufferSubDataNVX_ovr_60(waitSemaphoreCount, waitSemaphoreArray, fenceValueArray[0], readGpu, writeGpuMask, readBuffer, writeBuffer, readOffset, writeOffset, size, signalSemaphoreCount, signalSemaphoreArray, signalValueArray[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function AsyncCopyBufferSubDataNVX(waitSemaphoreCount: Int32; waitSemaphoreArray: IntPtr; fenceValueArray: array of UInt64; readGpu: UInt32; writeGpuMask: DummyFlags; readBuffer: UInt32; writeBuffer: UInt32; readOffset: IntPtr; writeOffset: IntPtr; size: IntPtr; signalSemaphoreCount: Int32; signalSemaphoreArray: IntPtr; var signalValueArray: UInt64): UInt32;
    begin
      Result := z_AsyncCopyBufferSubDataNVX_ovr_60(waitSemaphoreCount, waitSemaphoreArray, fenceValueArray[0], readGpu, writeGpuMask, readBuffer, writeBuffer, readOffset, writeOffset, size, signalSemaphoreCount, signalSemaphoreArray, signalValueArray);
    end;
    public z_AsyncCopyBufferSubDataNVX_ovr_62 := GetFuncOrNil&<function(waitSemaphoreCount: Int32; waitSemaphoreArray: IntPtr; var fenceValueArray: UInt64; readGpu: UInt32; writeGpuMask: DummyFlags; readBuffer: UInt32; writeBuffer: UInt32; readOffset: IntPtr; writeOffset: IntPtr; size: IntPtr; signalSemaphoreCount: Int32; signalSemaphoreArray: IntPtr; signalValueArray: IntPtr): UInt32>(z_AsyncCopyBufferSubDataNVX_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function AsyncCopyBufferSubDataNVX(waitSemaphoreCount: Int32; waitSemaphoreArray: IntPtr; fenceValueArray: array of UInt64; readGpu: UInt32; writeGpuMask: DummyFlags; readBuffer: UInt32; writeBuffer: UInt32; readOffset: IntPtr; writeOffset: IntPtr; size: IntPtr; signalSemaphoreCount: Int32; signalSemaphoreArray: IntPtr; signalValueArray: IntPtr): UInt32;
    begin
      Result := z_AsyncCopyBufferSubDataNVX_ovr_62(waitSemaphoreCount, waitSemaphoreArray, fenceValueArray[0], readGpu, writeGpuMask, readBuffer, writeBuffer, readOffset, writeOffset, size, signalSemaphoreCount, signalSemaphoreArray, signalValueArray);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function AsyncCopyBufferSubDataNVX(waitSemaphoreCount: Int32; waitSemaphoreArray: IntPtr; var fenceValueArray: UInt64; readGpu: UInt32; writeGpuMask: DummyFlags; readBuffer: UInt32; writeBuffer: UInt32; readOffset: IntPtr; writeOffset: IntPtr; size: IntPtr; signalSemaphoreCount: Int32; signalSemaphoreArray: array of UInt32; signalValueArray: array of UInt64): UInt32;
    begin
      Result := z_AsyncCopyBufferSubDataNVX_ovr_54(waitSemaphoreCount, waitSemaphoreArray, fenceValueArray, readGpu, writeGpuMask, readBuffer, writeBuffer, readOffset, writeOffset, size, signalSemaphoreCount, signalSemaphoreArray[0], signalValueArray[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function AsyncCopyBufferSubDataNVX(waitSemaphoreCount: Int32; waitSemaphoreArray: IntPtr; var fenceValueArray: UInt64; readGpu: UInt32; writeGpuMask: DummyFlags; readBuffer: UInt32; writeBuffer: UInt32; readOffset: IntPtr; writeOffset: IntPtr; size: IntPtr; signalSemaphoreCount: Int32; signalSemaphoreArray: array of UInt32; var signalValueArray: UInt64): UInt32;
    begin
      Result := z_AsyncCopyBufferSubDataNVX_ovr_54(waitSemaphoreCount, waitSemaphoreArray, fenceValueArray, readGpu, writeGpuMask, readBuffer, writeBuffer, readOffset, writeOffset, size, signalSemaphoreCount, signalSemaphoreArray[0], signalValueArray);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function AsyncCopyBufferSubDataNVX(waitSemaphoreCount: Int32; waitSemaphoreArray: IntPtr; var fenceValueArray: UInt64; readGpu: UInt32; writeGpuMask: DummyFlags; readBuffer: UInt32; writeBuffer: UInt32; readOffset: IntPtr; writeOffset: IntPtr; size: IntPtr; signalSemaphoreCount: Int32; signalSemaphoreArray: array of UInt32; signalValueArray: IntPtr): UInt32;
    begin
      Result := z_AsyncCopyBufferSubDataNVX_ovr_56(waitSemaphoreCount, waitSemaphoreArray, fenceValueArray, readGpu, writeGpuMask, readBuffer, writeBuffer, readOffset, writeOffset, size, signalSemaphoreCount, signalSemaphoreArray[0], signalValueArray);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function AsyncCopyBufferSubDataNVX(waitSemaphoreCount: Int32; waitSemaphoreArray: IntPtr; var fenceValueArray: UInt64; readGpu: UInt32; writeGpuMask: DummyFlags; readBuffer: UInt32; writeBuffer: UInt32; readOffset: IntPtr; writeOffset: IntPtr; size: IntPtr; signalSemaphoreCount: Int32; var signalSemaphoreArray: UInt32; signalValueArray: array of UInt64): UInt32;
    begin
      Result := z_AsyncCopyBufferSubDataNVX_ovr_54(waitSemaphoreCount, waitSemaphoreArray, fenceValueArray, readGpu, writeGpuMask, readBuffer, writeBuffer, readOffset, writeOffset, size, signalSemaphoreCount, signalSemaphoreArray, signalValueArray[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function AsyncCopyBufferSubDataNVX(waitSemaphoreCount: Int32; waitSemaphoreArray: IntPtr; var fenceValueArray: UInt64; readGpu: UInt32; writeGpuMask: DummyFlags; readBuffer: UInt32; writeBuffer: UInt32; readOffset: IntPtr; writeOffset: IntPtr; size: IntPtr; signalSemaphoreCount: Int32; var signalSemaphoreArray: UInt32; var signalValueArray: UInt64): UInt32;
    begin
      Result := z_AsyncCopyBufferSubDataNVX_ovr_54(waitSemaphoreCount, waitSemaphoreArray, fenceValueArray, readGpu, writeGpuMask, readBuffer, writeBuffer, readOffset, writeOffset, size, signalSemaphoreCount, signalSemaphoreArray, signalValueArray);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function AsyncCopyBufferSubDataNVX(waitSemaphoreCount: Int32; waitSemaphoreArray: IntPtr; var fenceValueArray: UInt64; readGpu: UInt32; writeGpuMask: DummyFlags; readBuffer: UInt32; writeBuffer: UInt32; readOffset: IntPtr; writeOffset: IntPtr; size: IntPtr; signalSemaphoreCount: Int32; var signalSemaphoreArray: UInt32; signalValueArray: IntPtr): UInt32;
    begin
      Result := z_AsyncCopyBufferSubDataNVX_ovr_56(waitSemaphoreCount, waitSemaphoreArray, fenceValueArray, readGpu, writeGpuMask, readBuffer, writeBuffer, readOffset, writeOffset, size, signalSemaphoreCount, signalSemaphoreArray, signalValueArray);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function AsyncCopyBufferSubDataNVX(waitSemaphoreCount: Int32; waitSemaphoreArray: IntPtr; var fenceValueArray: UInt64; readGpu: UInt32; writeGpuMask: DummyFlags; readBuffer: UInt32; writeBuffer: UInt32; readOffset: IntPtr; writeOffset: IntPtr; size: IntPtr; signalSemaphoreCount: Int32; signalSemaphoreArray: IntPtr; signalValueArray: array of UInt64): UInt32;
    begin
      Result := z_AsyncCopyBufferSubDataNVX_ovr_60(waitSemaphoreCount, waitSemaphoreArray, fenceValueArray, readGpu, writeGpuMask, readBuffer, writeBuffer, readOffset, writeOffset, size, signalSemaphoreCount, signalSemaphoreArray, signalValueArray[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function AsyncCopyBufferSubDataNVX(waitSemaphoreCount: Int32; waitSemaphoreArray: IntPtr; var fenceValueArray: UInt64; readGpu: UInt32; writeGpuMask: DummyFlags; readBuffer: UInt32; writeBuffer: UInt32; readOffset: IntPtr; writeOffset: IntPtr; size: IntPtr; signalSemaphoreCount: Int32; signalSemaphoreArray: IntPtr; var signalValueArray: UInt64): UInt32;
    begin
      Result := z_AsyncCopyBufferSubDataNVX_ovr_60(waitSemaphoreCount, waitSemaphoreArray, fenceValueArray, readGpu, writeGpuMask, readBuffer, writeBuffer, readOffset, writeOffset, size, signalSemaphoreCount, signalSemaphoreArray, signalValueArray);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function AsyncCopyBufferSubDataNVX(waitSemaphoreCount: Int32; waitSemaphoreArray: IntPtr; var fenceValueArray: UInt64; readGpu: UInt32; writeGpuMask: DummyFlags; readBuffer: UInt32; writeBuffer: UInt32; readOffset: IntPtr; writeOffset: IntPtr; size: IntPtr; signalSemaphoreCount: Int32; signalSemaphoreArray: IntPtr; signalValueArray: IntPtr): UInt32;
    begin
      Result := z_AsyncCopyBufferSubDataNVX_ovr_62(waitSemaphoreCount, waitSemaphoreArray, fenceValueArray, readGpu, writeGpuMask, readBuffer, writeBuffer, readOffset, writeOffset, size, signalSemaphoreCount, signalSemaphoreArray, signalValueArray);
    end;
    public z_AsyncCopyBufferSubDataNVX_ovr_72 := GetFuncOrNil&<function(waitSemaphoreCount: Int32; waitSemaphoreArray: IntPtr; fenceValueArray: IntPtr; readGpu: UInt32; writeGpuMask: DummyFlags; readBuffer: UInt32; writeBuffer: UInt32; readOffset: IntPtr; writeOffset: IntPtr; size: IntPtr; signalSemaphoreCount: Int32; var signalSemaphoreArray: UInt32; var signalValueArray: UInt64): UInt32>(z_AsyncCopyBufferSubDataNVX_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function AsyncCopyBufferSubDataNVX(waitSemaphoreCount: Int32; waitSemaphoreArray: IntPtr; fenceValueArray: IntPtr; readGpu: UInt32; writeGpuMask: DummyFlags; readBuffer: UInt32; writeBuffer: UInt32; readOffset: IntPtr; writeOffset: IntPtr; size: IntPtr; signalSemaphoreCount: Int32; signalSemaphoreArray: array of UInt32; signalValueArray: array of UInt64): UInt32;
    begin
      Result := z_AsyncCopyBufferSubDataNVX_ovr_72(waitSemaphoreCount, waitSemaphoreArray, fenceValueArray, readGpu, writeGpuMask, readBuffer, writeBuffer, readOffset, writeOffset, size, signalSemaphoreCount, signalSemaphoreArray[0], signalValueArray[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function AsyncCopyBufferSubDataNVX(waitSemaphoreCount: Int32; waitSemaphoreArray: IntPtr; fenceValueArray: IntPtr; readGpu: UInt32; writeGpuMask: DummyFlags; readBuffer: UInt32; writeBuffer: UInt32; readOffset: IntPtr; writeOffset: IntPtr; size: IntPtr; signalSemaphoreCount: Int32; signalSemaphoreArray: array of UInt32; var signalValueArray: UInt64): UInt32;
    begin
      Result := z_AsyncCopyBufferSubDataNVX_ovr_72(waitSemaphoreCount, waitSemaphoreArray, fenceValueArray, readGpu, writeGpuMask, readBuffer, writeBuffer, readOffset, writeOffset, size, signalSemaphoreCount, signalSemaphoreArray[0], signalValueArray);
    end;
    public z_AsyncCopyBufferSubDataNVX_ovr_74 := GetFuncOrNil&<function(waitSemaphoreCount: Int32; waitSemaphoreArray: IntPtr; fenceValueArray: IntPtr; readGpu: UInt32; writeGpuMask: DummyFlags; readBuffer: UInt32; writeBuffer: UInt32; readOffset: IntPtr; writeOffset: IntPtr; size: IntPtr; signalSemaphoreCount: Int32; var signalSemaphoreArray: UInt32; signalValueArray: IntPtr): UInt32>(z_AsyncCopyBufferSubDataNVX_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function AsyncCopyBufferSubDataNVX(waitSemaphoreCount: Int32; waitSemaphoreArray: IntPtr; fenceValueArray: IntPtr; readGpu: UInt32; writeGpuMask: DummyFlags; readBuffer: UInt32; writeBuffer: UInt32; readOffset: IntPtr; writeOffset: IntPtr; size: IntPtr; signalSemaphoreCount: Int32; signalSemaphoreArray: array of UInt32; signalValueArray: IntPtr): UInt32;
    begin
      Result := z_AsyncCopyBufferSubDataNVX_ovr_74(waitSemaphoreCount, waitSemaphoreArray, fenceValueArray, readGpu, writeGpuMask, readBuffer, writeBuffer, readOffset, writeOffset, size, signalSemaphoreCount, signalSemaphoreArray[0], signalValueArray);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function AsyncCopyBufferSubDataNVX(waitSemaphoreCount: Int32; waitSemaphoreArray: IntPtr; fenceValueArray: IntPtr; readGpu: UInt32; writeGpuMask: DummyFlags; readBuffer: UInt32; writeBuffer: UInt32; readOffset: IntPtr; writeOffset: IntPtr; size: IntPtr; signalSemaphoreCount: Int32; var signalSemaphoreArray: UInt32; signalValueArray: array of UInt64): UInt32;
    begin
      Result := z_AsyncCopyBufferSubDataNVX_ovr_72(waitSemaphoreCount, waitSemaphoreArray, fenceValueArray, readGpu, writeGpuMask, readBuffer, writeBuffer, readOffset, writeOffset, size, signalSemaphoreCount, signalSemaphoreArray, signalValueArray[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function AsyncCopyBufferSubDataNVX(waitSemaphoreCount: Int32; waitSemaphoreArray: IntPtr; fenceValueArray: IntPtr; readGpu: UInt32; writeGpuMask: DummyFlags; readBuffer: UInt32; writeBuffer: UInt32; readOffset: IntPtr; writeOffset: IntPtr; size: IntPtr; signalSemaphoreCount: Int32; var signalSemaphoreArray: UInt32; var signalValueArray: UInt64): UInt32;
    begin
      Result := z_AsyncCopyBufferSubDataNVX_ovr_72(waitSemaphoreCount, waitSemaphoreArray, fenceValueArray, readGpu, writeGpuMask, readBuffer, writeBuffer, readOffset, writeOffset, size, signalSemaphoreCount, signalSemaphoreArray, signalValueArray);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function AsyncCopyBufferSubDataNVX(waitSemaphoreCount: Int32; waitSemaphoreArray: IntPtr; fenceValueArray: IntPtr; readGpu: UInt32; writeGpuMask: DummyFlags; readBuffer: UInt32; writeBuffer: UInt32; readOffset: IntPtr; writeOffset: IntPtr; size: IntPtr; signalSemaphoreCount: Int32; var signalSemaphoreArray: UInt32; signalValueArray: IntPtr): UInt32;
    begin
      Result := z_AsyncCopyBufferSubDataNVX_ovr_74(waitSemaphoreCount, waitSemaphoreArray, fenceValueArray, readGpu, writeGpuMask, readBuffer, writeBuffer, readOffset, writeOffset, size, signalSemaphoreCount, signalSemaphoreArray, signalValueArray);
    end;
    public z_AsyncCopyBufferSubDataNVX_ovr_78 := GetFuncOrNil&<function(waitSemaphoreCount: Int32; waitSemaphoreArray: IntPtr; fenceValueArray: IntPtr; readGpu: UInt32; writeGpuMask: DummyFlags; readBuffer: UInt32; writeBuffer: UInt32; readOffset: IntPtr; writeOffset: IntPtr; size: IntPtr; signalSemaphoreCount: Int32; signalSemaphoreArray: IntPtr; var signalValueArray: UInt64): UInt32>(z_AsyncCopyBufferSubDataNVX_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function AsyncCopyBufferSubDataNVX(waitSemaphoreCount: Int32; waitSemaphoreArray: IntPtr; fenceValueArray: IntPtr; readGpu: UInt32; writeGpuMask: DummyFlags; readBuffer: UInt32; writeBuffer: UInt32; readOffset: IntPtr; writeOffset: IntPtr; size: IntPtr; signalSemaphoreCount: Int32; signalSemaphoreArray: IntPtr; signalValueArray: array of UInt64): UInt32;
    begin
      Result := z_AsyncCopyBufferSubDataNVX_ovr_78(waitSemaphoreCount, waitSemaphoreArray, fenceValueArray, readGpu, writeGpuMask, readBuffer, writeBuffer, readOffset, writeOffset, size, signalSemaphoreCount, signalSemaphoreArray, signalValueArray[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function AsyncCopyBufferSubDataNVX(waitSemaphoreCount: Int32; waitSemaphoreArray: IntPtr; fenceValueArray: IntPtr; readGpu: UInt32; writeGpuMask: DummyFlags; readBuffer: UInt32; writeBuffer: UInt32; readOffset: IntPtr; writeOffset: IntPtr; size: IntPtr; signalSemaphoreCount: Int32; signalSemaphoreArray: IntPtr; var signalValueArray: UInt64): UInt32;
    begin
      Result := z_AsyncCopyBufferSubDataNVX_ovr_78(waitSemaphoreCount, waitSemaphoreArray, fenceValueArray, readGpu, writeGpuMask, readBuffer, writeBuffer, readOffset, writeOffset, size, signalSemaphoreCount, signalSemaphoreArray, signalValueArray);
    end;
    public z_AsyncCopyBufferSubDataNVX_ovr_80 := GetFuncOrNil&<function(waitSemaphoreCount: Int32; waitSemaphoreArray: IntPtr; fenceValueArray: IntPtr; readGpu: UInt32; writeGpuMask: DummyFlags; readBuffer: UInt32; writeBuffer: UInt32; readOffset: IntPtr; writeOffset: IntPtr; size: IntPtr; signalSemaphoreCount: Int32; signalSemaphoreArray: IntPtr; signalValueArray: IntPtr): UInt32>(z_AsyncCopyBufferSubDataNVX_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function AsyncCopyBufferSubDataNVX(waitSemaphoreCount: Int32; waitSemaphoreArray: IntPtr; fenceValueArray: IntPtr; readGpu: UInt32; writeGpuMask: DummyFlags; readBuffer: UInt32; writeBuffer: UInt32; readOffset: IntPtr; writeOffset: IntPtr; size: IntPtr; signalSemaphoreCount: Int32; signalSemaphoreArray: IntPtr; signalValueArray: IntPtr): UInt32;
    begin
      Result := z_AsyncCopyBufferSubDataNVX_ovr_80(waitSemaphoreCount, waitSemaphoreArray, fenceValueArray, readGpu, writeGpuMask, readBuffer, writeBuffer, readOffset, writeOffset, size, signalSemaphoreCount, signalSemaphoreArray, signalValueArray);
    end;
    
    public z_AsyncCopyImageSubDataNVX_adr := GetFuncAdr('glAsyncCopyImageSubDataNVX');
    public z_AsyncCopyImageSubDataNVX_ovr_0 := GetFuncOrNil&<function(waitSemaphoreCount: Int32; var waitSemaphoreArray: UInt32; var waitValueArray: UInt64; srcGpu: UInt32; dstGpuMask: DummyFlags; srcName: UInt32; srcTarget: DummyEnum; srcLevel: Int32; srcX: Int32; srcY: Int32; srcZ: Int32; dstName: UInt32; dstTarget: DummyEnum; dstLevel: Int32; dstX: Int32; dstY: Int32; dstZ: Int32; srcWidth: Int32; srcHeight: Int32; srcDepth: Int32; signalSemaphoreCount: Int32; var signalSemaphoreArray: UInt32; var signalValueArray: UInt64): UInt32>(z_AsyncCopyImageSubDataNVX_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function AsyncCopyImageSubDataNVX(waitSemaphoreCount: Int32; waitSemaphoreArray: array of UInt32; waitValueArray: array of UInt64; srcGpu: UInt32; dstGpuMask: DummyFlags; srcName: UInt32; srcTarget: DummyEnum; srcLevel: Int32; srcX: Int32; srcY: Int32; srcZ: Int32; dstName: UInt32; dstTarget: DummyEnum; dstLevel: Int32; dstX: Int32; dstY: Int32; dstZ: Int32; srcWidth: Int32; srcHeight: Int32; srcDepth: Int32; signalSemaphoreCount: Int32; signalSemaphoreArray: array of UInt32; signalValueArray: array of UInt64): UInt32;
    begin
      Result := z_AsyncCopyImageSubDataNVX_ovr_0(waitSemaphoreCount, waitSemaphoreArray[0], waitValueArray[0], srcGpu, dstGpuMask, srcName, srcTarget, srcLevel, srcX, srcY, srcZ, dstName, dstTarget, dstLevel, dstX, dstY, dstZ, srcWidth, srcHeight, srcDepth, signalSemaphoreCount, signalSemaphoreArray[0], signalValueArray[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function AsyncCopyImageSubDataNVX(waitSemaphoreCount: Int32; waitSemaphoreArray: array of UInt32; waitValueArray: array of UInt64; srcGpu: UInt32; dstGpuMask: DummyFlags; srcName: UInt32; srcTarget: DummyEnum; srcLevel: Int32; srcX: Int32; srcY: Int32; srcZ: Int32; dstName: UInt32; dstTarget: DummyEnum; dstLevel: Int32; dstX: Int32; dstY: Int32; dstZ: Int32; srcWidth: Int32; srcHeight: Int32; srcDepth: Int32; signalSemaphoreCount: Int32; signalSemaphoreArray: array of UInt32; var signalValueArray: UInt64): UInt32;
    begin
      Result := z_AsyncCopyImageSubDataNVX_ovr_0(waitSemaphoreCount, waitSemaphoreArray[0], waitValueArray[0], srcGpu, dstGpuMask, srcName, srcTarget, srcLevel, srcX, srcY, srcZ, dstName, dstTarget, dstLevel, dstX, dstY, dstZ, srcWidth, srcHeight, srcDepth, signalSemaphoreCount, signalSemaphoreArray[0], signalValueArray);
    end;
    public z_AsyncCopyImageSubDataNVX_ovr_2 := GetFuncOrNil&<function(waitSemaphoreCount: Int32; var waitSemaphoreArray: UInt32; var waitValueArray: UInt64; srcGpu: UInt32; dstGpuMask: DummyFlags; srcName: UInt32; srcTarget: DummyEnum; srcLevel: Int32; srcX: Int32; srcY: Int32; srcZ: Int32; dstName: UInt32; dstTarget: DummyEnum; dstLevel: Int32; dstX: Int32; dstY: Int32; dstZ: Int32; srcWidth: Int32; srcHeight: Int32; srcDepth: Int32; signalSemaphoreCount: Int32; var signalSemaphoreArray: UInt32; signalValueArray: IntPtr): UInt32>(z_AsyncCopyImageSubDataNVX_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function AsyncCopyImageSubDataNVX(waitSemaphoreCount: Int32; waitSemaphoreArray: array of UInt32; waitValueArray: array of UInt64; srcGpu: UInt32; dstGpuMask: DummyFlags; srcName: UInt32; srcTarget: DummyEnum; srcLevel: Int32; srcX: Int32; srcY: Int32; srcZ: Int32; dstName: UInt32; dstTarget: DummyEnum; dstLevel: Int32; dstX: Int32; dstY: Int32; dstZ: Int32; srcWidth: Int32; srcHeight: Int32; srcDepth: Int32; signalSemaphoreCount: Int32; signalSemaphoreArray: array of UInt32; signalValueArray: IntPtr): UInt32;
    begin
      Result := z_AsyncCopyImageSubDataNVX_ovr_2(waitSemaphoreCount, waitSemaphoreArray[0], waitValueArray[0], srcGpu, dstGpuMask, srcName, srcTarget, srcLevel, srcX, srcY, srcZ, dstName, dstTarget, dstLevel, dstX, dstY, dstZ, srcWidth, srcHeight, srcDepth, signalSemaphoreCount, signalSemaphoreArray[0], signalValueArray);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function AsyncCopyImageSubDataNVX(waitSemaphoreCount: Int32; waitSemaphoreArray: array of UInt32; waitValueArray: array of UInt64; srcGpu: UInt32; dstGpuMask: DummyFlags; srcName: UInt32; srcTarget: DummyEnum; srcLevel: Int32; srcX: Int32; srcY: Int32; srcZ: Int32; dstName: UInt32; dstTarget: DummyEnum; dstLevel: Int32; dstX: Int32; dstY: Int32; dstZ: Int32; srcWidth: Int32; srcHeight: Int32; srcDepth: Int32; signalSemaphoreCount: Int32; var signalSemaphoreArray: UInt32; signalValueArray: array of UInt64): UInt32;
    begin
      Result := z_AsyncCopyImageSubDataNVX_ovr_0(waitSemaphoreCount, waitSemaphoreArray[0], waitValueArray[0], srcGpu, dstGpuMask, srcName, srcTarget, srcLevel, srcX, srcY, srcZ, dstName, dstTarget, dstLevel, dstX, dstY, dstZ, srcWidth, srcHeight, srcDepth, signalSemaphoreCount, signalSemaphoreArray, signalValueArray[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function AsyncCopyImageSubDataNVX(waitSemaphoreCount: Int32; waitSemaphoreArray: array of UInt32; waitValueArray: array of UInt64; srcGpu: UInt32; dstGpuMask: DummyFlags; srcName: UInt32; srcTarget: DummyEnum; srcLevel: Int32; srcX: Int32; srcY: Int32; srcZ: Int32; dstName: UInt32; dstTarget: DummyEnum; dstLevel: Int32; dstX: Int32; dstY: Int32; dstZ: Int32; srcWidth: Int32; srcHeight: Int32; srcDepth: Int32; signalSemaphoreCount: Int32; var signalSemaphoreArray: UInt32; var signalValueArray: UInt64): UInt32;
    begin
      Result := z_AsyncCopyImageSubDataNVX_ovr_0(waitSemaphoreCount, waitSemaphoreArray[0], waitValueArray[0], srcGpu, dstGpuMask, srcName, srcTarget, srcLevel, srcX, srcY, srcZ, dstName, dstTarget, dstLevel, dstX, dstY, dstZ, srcWidth, srcHeight, srcDepth, signalSemaphoreCount, signalSemaphoreArray, signalValueArray);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function AsyncCopyImageSubDataNVX(waitSemaphoreCount: Int32; waitSemaphoreArray: array of UInt32; waitValueArray: array of UInt64; srcGpu: UInt32; dstGpuMask: DummyFlags; srcName: UInt32; srcTarget: DummyEnum; srcLevel: Int32; srcX: Int32; srcY: Int32; srcZ: Int32; dstName: UInt32; dstTarget: DummyEnum; dstLevel: Int32; dstX: Int32; dstY: Int32; dstZ: Int32; srcWidth: Int32; srcHeight: Int32; srcDepth: Int32; signalSemaphoreCount: Int32; var signalSemaphoreArray: UInt32; signalValueArray: IntPtr): UInt32;
    begin
      Result := z_AsyncCopyImageSubDataNVX_ovr_2(waitSemaphoreCount, waitSemaphoreArray[0], waitValueArray[0], srcGpu, dstGpuMask, srcName, srcTarget, srcLevel, srcX, srcY, srcZ, dstName, dstTarget, dstLevel, dstX, dstY, dstZ, srcWidth, srcHeight, srcDepth, signalSemaphoreCount, signalSemaphoreArray, signalValueArray);
    end;
    public z_AsyncCopyImageSubDataNVX_ovr_6 := GetFuncOrNil&<function(waitSemaphoreCount: Int32; var waitSemaphoreArray: UInt32; var waitValueArray: UInt64; srcGpu: UInt32; dstGpuMask: DummyFlags; srcName: UInt32; srcTarget: DummyEnum; srcLevel: Int32; srcX: Int32; srcY: Int32; srcZ: Int32; dstName: UInt32; dstTarget: DummyEnum; dstLevel: Int32; dstX: Int32; dstY: Int32; dstZ: Int32; srcWidth: Int32; srcHeight: Int32; srcDepth: Int32; signalSemaphoreCount: Int32; signalSemaphoreArray: IntPtr; var signalValueArray: UInt64): UInt32>(z_AsyncCopyImageSubDataNVX_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function AsyncCopyImageSubDataNVX(waitSemaphoreCount: Int32; waitSemaphoreArray: array of UInt32; waitValueArray: array of UInt64; srcGpu: UInt32; dstGpuMask: DummyFlags; srcName: UInt32; srcTarget: DummyEnum; srcLevel: Int32; srcX: Int32; srcY: Int32; srcZ: Int32; dstName: UInt32; dstTarget: DummyEnum; dstLevel: Int32; dstX: Int32; dstY: Int32; dstZ: Int32; srcWidth: Int32; srcHeight: Int32; srcDepth: Int32; signalSemaphoreCount: Int32; signalSemaphoreArray: IntPtr; signalValueArray: array of UInt64): UInt32;
    begin
      Result := z_AsyncCopyImageSubDataNVX_ovr_6(waitSemaphoreCount, waitSemaphoreArray[0], waitValueArray[0], srcGpu, dstGpuMask, srcName, srcTarget, srcLevel, srcX, srcY, srcZ, dstName, dstTarget, dstLevel, dstX, dstY, dstZ, srcWidth, srcHeight, srcDepth, signalSemaphoreCount, signalSemaphoreArray, signalValueArray[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function AsyncCopyImageSubDataNVX(waitSemaphoreCount: Int32; waitSemaphoreArray: array of UInt32; waitValueArray: array of UInt64; srcGpu: UInt32; dstGpuMask: DummyFlags; srcName: UInt32; srcTarget: DummyEnum; srcLevel: Int32; srcX: Int32; srcY: Int32; srcZ: Int32; dstName: UInt32; dstTarget: DummyEnum; dstLevel: Int32; dstX: Int32; dstY: Int32; dstZ: Int32; srcWidth: Int32; srcHeight: Int32; srcDepth: Int32; signalSemaphoreCount: Int32; signalSemaphoreArray: IntPtr; var signalValueArray: UInt64): UInt32;
    begin
      Result := z_AsyncCopyImageSubDataNVX_ovr_6(waitSemaphoreCount, waitSemaphoreArray[0], waitValueArray[0], srcGpu, dstGpuMask, srcName, srcTarget, srcLevel, srcX, srcY, srcZ, dstName, dstTarget, dstLevel, dstX, dstY, dstZ, srcWidth, srcHeight, srcDepth, signalSemaphoreCount, signalSemaphoreArray, signalValueArray);
    end;
    public z_AsyncCopyImageSubDataNVX_ovr_8 := GetFuncOrNil&<function(waitSemaphoreCount: Int32; var waitSemaphoreArray: UInt32; var waitValueArray: UInt64; srcGpu: UInt32; dstGpuMask: DummyFlags; srcName: UInt32; srcTarget: DummyEnum; srcLevel: Int32; srcX: Int32; srcY: Int32; srcZ: Int32; dstName: UInt32; dstTarget: DummyEnum; dstLevel: Int32; dstX: Int32; dstY: Int32; dstZ: Int32; srcWidth: Int32; srcHeight: Int32; srcDepth: Int32; signalSemaphoreCount: Int32; signalSemaphoreArray: IntPtr; signalValueArray: IntPtr): UInt32>(z_AsyncCopyImageSubDataNVX_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function AsyncCopyImageSubDataNVX(waitSemaphoreCount: Int32; waitSemaphoreArray: array of UInt32; waitValueArray: array of UInt64; srcGpu: UInt32; dstGpuMask: DummyFlags; srcName: UInt32; srcTarget: DummyEnum; srcLevel: Int32; srcX: Int32; srcY: Int32; srcZ: Int32; dstName: UInt32; dstTarget: DummyEnum; dstLevel: Int32; dstX: Int32; dstY: Int32; dstZ: Int32; srcWidth: Int32; srcHeight: Int32; srcDepth: Int32; signalSemaphoreCount: Int32; signalSemaphoreArray: IntPtr; signalValueArray: IntPtr): UInt32;
    begin
      Result := z_AsyncCopyImageSubDataNVX_ovr_8(waitSemaphoreCount, waitSemaphoreArray[0], waitValueArray[0], srcGpu, dstGpuMask, srcName, srcTarget, srcLevel, srcX, srcY, srcZ, dstName, dstTarget, dstLevel, dstX, dstY, dstZ, srcWidth, srcHeight, srcDepth, signalSemaphoreCount, signalSemaphoreArray, signalValueArray);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function AsyncCopyImageSubDataNVX(waitSemaphoreCount: Int32; waitSemaphoreArray: array of UInt32; var waitValueArray: UInt64; srcGpu: UInt32; dstGpuMask: DummyFlags; srcName: UInt32; srcTarget: DummyEnum; srcLevel: Int32; srcX: Int32; srcY: Int32; srcZ: Int32; dstName: UInt32; dstTarget: DummyEnum; dstLevel: Int32; dstX: Int32; dstY: Int32; dstZ: Int32; srcWidth: Int32; srcHeight: Int32; srcDepth: Int32; signalSemaphoreCount: Int32; signalSemaphoreArray: array of UInt32; signalValueArray: array of UInt64): UInt32;
    begin
      Result := z_AsyncCopyImageSubDataNVX_ovr_0(waitSemaphoreCount, waitSemaphoreArray[0], waitValueArray, srcGpu, dstGpuMask, srcName, srcTarget, srcLevel, srcX, srcY, srcZ, dstName, dstTarget, dstLevel, dstX, dstY, dstZ, srcWidth, srcHeight, srcDepth, signalSemaphoreCount, signalSemaphoreArray[0], signalValueArray[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function AsyncCopyImageSubDataNVX(waitSemaphoreCount: Int32; waitSemaphoreArray: array of UInt32; var waitValueArray: UInt64; srcGpu: UInt32; dstGpuMask: DummyFlags; srcName: UInt32; srcTarget: DummyEnum; srcLevel: Int32; srcX: Int32; srcY: Int32; srcZ: Int32; dstName: UInt32; dstTarget: DummyEnum; dstLevel: Int32; dstX: Int32; dstY: Int32; dstZ: Int32; srcWidth: Int32; srcHeight: Int32; srcDepth: Int32; signalSemaphoreCount: Int32; signalSemaphoreArray: array of UInt32; var signalValueArray: UInt64): UInt32;
    begin
      Result := z_AsyncCopyImageSubDataNVX_ovr_0(waitSemaphoreCount, waitSemaphoreArray[0], waitValueArray, srcGpu, dstGpuMask, srcName, srcTarget, srcLevel, srcX, srcY, srcZ, dstName, dstTarget, dstLevel, dstX, dstY, dstZ, srcWidth, srcHeight, srcDepth, signalSemaphoreCount, signalSemaphoreArray[0], signalValueArray);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function AsyncCopyImageSubDataNVX(waitSemaphoreCount: Int32; waitSemaphoreArray: array of UInt32; var waitValueArray: UInt64; srcGpu: UInt32; dstGpuMask: DummyFlags; srcName: UInt32; srcTarget: DummyEnum; srcLevel: Int32; srcX: Int32; srcY: Int32; srcZ: Int32; dstName: UInt32; dstTarget: DummyEnum; dstLevel: Int32; dstX: Int32; dstY: Int32; dstZ: Int32; srcWidth: Int32; srcHeight: Int32; srcDepth: Int32; signalSemaphoreCount: Int32; signalSemaphoreArray: array of UInt32; signalValueArray: IntPtr): UInt32;
    begin
      Result := z_AsyncCopyImageSubDataNVX_ovr_2(waitSemaphoreCount, waitSemaphoreArray[0], waitValueArray, srcGpu, dstGpuMask, srcName, srcTarget, srcLevel, srcX, srcY, srcZ, dstName, dstTarget, dstLevel, dstX, dstY, dstZ, srcWidth, srcHeight, srcDepth, signalSemaphoreCount, signalSemaphoreArray[0], signalValueArray);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function AsyncCopyImageSubDataNVX(waitSemaphoreCount: Int32; waitSemaphoreArray: array of UInt32; var waitValueArray: UInt64; srcGpu: UInt32; dstGpuMask: DummyFlags; srcName: UInt32; srcTarget: DummyEnum; srcLevel: Int32; srcX: Int32; srcY: Int32; srcZ: Int32; dstName: UInt32; dstTarget: DummyEnum; dstLevel: Int32; dstX: Int32; dstY: Int32; dstZ: Int32; srcWidth: Int32; srcHeight: Int32; srcDepth: Int32; signalSemaphoreCount: Int32; var signalSemaphoreArray: UInt32; signalValueArray: array of UInt64): UInt32;
    begin
      Result := z_AsyncCopyImageSubDataNVX_ovr_0(waitSemaphoreCount, waitSemaphoreArray[0], waitValueArray, srcGpu, dstGpuMask, srcName, srcTarget, srcLevel, srcX, srcY, srcZ, dstName, dstTarget, dstLevel, dstX, dstY, dstZ, srcWidth, srcHeight, srcDepth, signalSemaphoreCount, signalSemaphoreArray, signalValueArray[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function AsyncCopyImageSubDataNVX(waitSemaphoreCount: Int32; waitSemaphoreArray: array of UInt32; var waitValueArray: UInt64; srcGpu: UInt32; dstGpuMask: DummyFlags; srcName: UInt32; srcTarget: DummyEnum; srcLevel: Int32; srcX: Int32; srcY: Int32; srcZ: Int32; dstName: UInt32; dstTarget: DummyEnum; dstLevel: Int32; dstX: Int32; dstY: Int32; dstZ: Int32; srcWidth: Int32; srcHeight: Int32; srcDepth: Int32; signalSemaphoreCount: Int32; var signalSemaphoreArray: UInt32; var signalValueArray: UInt64): UInt32;
    begin
      Result := z_AsyncCopyImageSubDataNVX_ovr_0(waitSemaphoreCount, waitSemaphoreArray[0], waitValueArray, srcGpu, dstGpuMask, srcName, srcTarget, srcLevel, srcX, srcY, srcZ, dstName, dstTarget, dstLevel, dstX, dstY, dstZ, srcWidth, srcHeight, srcDepth, signalSemaphoreCount, signalSemaphoreArray, signalValueArray);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function AsyncCopyImageSubDataNVX(waitSemaphoreCount: Int32; waitSemaphoreArray: array of UInt32; var waitValueArray: UInt64; srcGpu: UInt32; dstGpuMask: DummyFlags; srcName: UInt32; srcTarget: DummyEnum; srcLevel: Int32; srcX: Int32; srcY: Int32; srcZ: Int32; dstName: UInt32; dstTarget: DummyEnum; dstLevel: Int32; dstX: Int32; dstY: Int32; dstZ: Int32; srcWidth: Int32; srcHeight: Int32; srcDepth: Int32; signalSemaphoreCount: Int32; var signalSemaphoreArray: UInt32; signalValueArray: IntPtr): UInt32;
    begin
      Result := z_AsyncCopyImageSubDataNVX_ovr_2(waitSemaphoreCount, waitSemaphoreArray[0], waitValueArray, srcGpu, dstGpuMask, srcName, srcTarget, srcLevel, srcX, srcY, srcZ, dstName, dstTarget, dstLevel, dstX, dstY, dstZ, srcWidth, srcHeight, srcDepth, signalSemaphoreCount, signalSemaphoreArray, signalValueArray);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function AsyncCopyImageSubDataNVX(waitSemaphoreCount: Int32; waitSemaphoreArray: array of UInt32; var waitValueArray: UInt64; srcGpu: UInt32; dstGpuMask: DummyFlags; srcName: UInt32; srcTarget: DummyEnum; srcLevel: Int32; srcX: Int32; srcY: Int32; srcZ: Int32; dstName: UInt32; dstTarget: DummyEnum; dstLevel: Int32; dstX: Int32; dstY: Int32; dstZ: Int32; srcWidth: Int32; srcHeight: Int32; srcDepth: Int32; signalSemaphoreCount: Int32; signalSemaphoreArray: IntPtr; signalValueArray: array of UInt64): UInt32;
    begin
      Result := z_AsyncCopyImageSubDataNVX_ovr_6(waitSemaphoreCount, waitSemaphoreArray[0], waitValueArray, srcGpu, dstGpuMask, srcName, srcTarget, srcLevel, srcX, srcY, srcZ, dstName, dstTarget, dstLevel, dstX, dstY, dstZ, srcWidth, srcHeight, srcDepth, signalSemaphoreCount, signalSemaphoreArray, signalValueArray[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function AsyncCopyImageSubDataNVX(waitSemaphoreCount: Int32; waitSemaphoreArray: array of UInt32; var waitValueArray: UInt64; srcGpu: UInt32; dstGpuMask: DummyFlags; srcName: UInt32; srcTarget: DummyEnum; srcLevel: Int32; srcX: Int32; srcY: Int32; srcZ: Int32; dstName: UInt32; dstTarget: DummyEnum; dstLevel: Int32; dstX: Int32; dstY: Int32; dstZ: Int32; srcWidth: Int32; srcHeight: Int32; srcDepth: Int32; signalSemaphoreCount: Int32; signalSemaphoreArray: IntPtr; var signalValueArray: UInt64): UInt32;
    begin
      Result := z_AsyncCopyImageSubDataNVX_ovr_6(waitSemaphoreCount, waitSemaphoreArray[0], waitValueArray, srcGpu, dstGpuMask, srcName, srcTarget, srcLevel, srcX, srcY, srcZ, dstName, dstTarget, dstLevel, dstX, dstY, dstZ, srcWidth, srcHeight, srcDepth, signalSemaphoreCount, signalSemaphoreArray, signalValueArray);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function AsyncCopyImageSubDataNVX(waitSemaphoreCount: Int32; waitSemaphoreArray: array of UInt32; var waitValueArray: UInt64; srcGpu: UInt32; dstGpuMask: DummyFlags; srcName: UInt32; srcTarget: DummyEnum; srcLevel: Int32; srcX: Int32; srcY: Int32; srcZ: Int32; dstName: UInt32; dstTarget: DummyEnum; dstLevel: Int32; dstX: Int32; dstY: Int32; dstZ: Int32; srcWidth: Int32; srcHeight: Int32; srcDepth: Int32; signalSemaphoreCount: Int32; signalSemaphoreArray: IntPtr; signalValueArray: IntPtr): UInt32;
    begin
      Result := z_AsyncCopyImageSubDataNVX_ovr_8(waitSemaphoreCount, waitSemaphoreArray[0], waitValueArray, srcGpu, dstGpuMask, srcName, srcTarget, srcLevel, srcX, srcY, srcZ, dstName, dstTarget, dstLevel, dstX, dstY, dstZ, srcWidth, srcHeight, srcDepth, signalSemaphoreCount, signalSemaphoreArray, signalValueArray);
    end;
    public z_AsyncCopyImageSubDataNVX_ovr_18 := GetFuncOrNil&<function(waitSemaphoreCount: Int32; var waitSemaphoreArray: UInt32; waitValueArray: IntPtr; srcGpu: UInt32; dstGpuMask: DummyFlags; srcName: UInt32; srcTarget: DummyEnum; srcLevel: Int32; srcX: Int32; srcY: Int32; srcZ: Int32; dstName: UInt32; dstTarget: DummyEnum; dstLevel: Int32; dstX: Int32; dstY: Int32; dstZ: Int32; srcWidth: Int32; srcHeight: Int32; srcDepth: Int32; signalSemaphoreCount: Int32; var signalSemaphoreArray: UInt32; var signalValueArray: UInt64): UInt32>(z_AsyncCopyImageSubDataNVX_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function AsyncCopyImageSubDataNVX(waitSemaphoreCount: Int32; waitSemaphoreArray: array of UInt32; waitValueArray: IntPtr; srcGpu: UInt32; dstGpuMask: DummyFlags; srcName: UInt32; srcTarget: DummyEnum; srcLevel: Int32; srcX: Int32; srcY: Int32; srcZ: Int32; dstName: UInt32; dstTarget: DummyEnum; dstLevel: Int32; dstX: Int32; dstY: Int32; dstZ: Int32; srcWidth: Int32; srcHeight: Int32; srcDepth: Int32; signalSemaphoreCount: Int32; signalSemaphoreArray: array of UInt32; signalValueArray: array of UInt64): UInt32;
    begin
      Result := z_AsyncCopyImageSubDataNVX_ovr_18(waitSemaphoreCount, waitSemaphoreArray[0], waitValueArray, srcGpu, dstGpuMask, srcName, srcTarget, srcLevel, srcX, srcY, srcZ, dstName, dstTarget, dstLevel, dstX, dstY, dstZ, srcWidth, srcHeight, srcDepth, signalSemaphoreCount, signalSemaphoreArray[0], signalValueArray[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function AsyncCopyImageSubDataNVX(waitSemaphoreCount: Int32; waitSemaphoreArray: array of UInt32; waitValueArray: IntPtr; srcGpu: UInt32; dstGpuMask: DummyFlags; srcName: UInt32; srcTarget: DummyEnum; srcLevel: Int32; srcX: Int32; srcY: Int32; srcZ: Int32; dstName: UInt32; dstTarget: DummyEnum; dstLevel: Int32; dstX: Int32; dstY: Int32; dstZ: Int32; srcWidth: Int32; srcHeight: Int32; srcDepth: Int32; signalSemaphoreCount: Int32; signalSemaphoreArray: array of UInt32; var signalValueArray: UInt64): UInt32;
    begin
      Result := z_AsyncCopyImageSubDataNVX_ovr_18(waitSemaphoreCount, waitSemaphoreArray[0], waitValueArray, srcGpu, dstGpuMask, srcName, srcTarget, srcLevel, srcX, srcY, srcZ, dstName, dstTarget, dstLevel, dstX, dstY, dstZ, srcWidth, srcHeight, srcDepth, signalSemaphoreCount, signalSemaphoreArray[0], signalValueArray);
    end;
    public z_AsyncCopyImageSubDataNVX_ovr_20 := GetFuncOrNil&<function(waitSemaphoreCount: Int32; var waitSemaphoreArray: UInt32; waitValueArray: IntPtr; srcGpu: UInt32; dstGpuMask: DummyFlags; srcName: UInt32; srcTarget: DummyEnum; srcLevel: Int32; srcX: Int32; srcY: Int32; srcZ: Int32; dstName: UInt32; dstTarget: DummyEnum; dstLevel: Int32; dstX: Int32; dstY: Int32; dstZ: Int32; srcWidth: Int32; srcHeight: Int32; srcDepth: Int32; signalSemaphoreCount: Int32; var signalSemaphoreArray: UInt32; signalValueArray: IntPtr): UInt32>(z_AsyncCopyImageSubDataNVX_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function AsyncCopyImageSubDataNVX(waitSemaphoreCount: Int32; waitSemaphoreArray: array of UInt32; waitValueArray: IntPtr; srcGpu: UInt32; dstGpuMask: DummyFlags; srcName: UInt32; srcTarget: DummyEnum; srcLevel: Int32; srcX: Int32; srcY: Int32; srcZ: Int32; dstName: UInt32; dstTarget: DummyEnum; dstLevel: Int32; dstX: Int32; dstY: Int32; dstZ: Int32; srcWidth: Int32; srcHeight: Int32; srcDepth: Int32; signalSemaphoreCount: Int32; signalSemaphoreArray: array of UInt32; signalValueArray: IntPtr): UInt32;
    begin
      Result := z_AsyncCopyImageSubDataNVX_ovr_20(waitSemaphoreCount, waitSemaphoreArray[0], waitValueArray, srcGpu, dstGpuMask, srcName, srcTarget, srcLevel, srcX, srcY, srcZ, dstName, dstTarget, dstLevel, dstX, dstY, dstZ, srcWidth, srcHeight, srcDepth, signalSemaphoreCount, signalSemaphoreArray[0], signalValueArray);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function AsyncCopyImageSubDataNVX(waitSemaphoreCount: Int32; waitSemaphoreArray: array of UInt32; waitValueArray: IntPtr; srcGpu: UInt32; dstGpuMask: DummyFlags; srcName: UInt32; srcTarget: DummyEnum; srcLevel: Int32; srcX: Int32; srcY: Int32; srcZ: Int32; dstName: UInt32; dstTarget: DummyEnum; dstLevel: Int32; dstX: Int32; dstY: Int32; dstZ: Int32; srcWidth: Int32; srcHeight: Int32; srcDepth: Int32; signalSemaphoreCount: Int32; var signalSemaphoreArray: UInt32; signalValueArray: array of UInt64): UInt32;
    begin
      Result := z_AsyncCopyImageSubDataNVX_ovr_18(waitSemaphoreCount, waitSemaphoreArray[0], waitValueArray, srcGpu, dstGpuMask, srcName, srcTarget, srcLevel, srcX, srcY, srcZ, dstName, dstTarget, dstLevel, dstX, dstY, dstZ, srcWidth, srcHeight, srcDepth, signalSemaphoreCount, signalSemaphoreArray, signalValueArray[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function AsyncCopyImageSubDataNVX(waitSemaphoreCount: Int32; waitSemaphoreArray: array of UInt32; waitValueArray: IntPtr; srcGpu: UInt32; dstGpuMask: DummyFlags; srcName: UInt32; srcTarget: DummyEnum; srcLevel: Int32; srcX: Int32; srcY: Int32; srcZ: Int32; dstName: UInt32; dstTarget: DummyEnum; dstLevel: Int32; dstX: Int32; dstY: Int32; dstZ: Int32; srcWidth: Int32; srcHeight: Int32; srcDepth: Int32; signalSemaphoreCount: Int32; var signalSemaphoreArray: UInt32; var signalValueArray: UInt64): UInt32;
    begin
      Result := z_AsyncCopyImageSubDataNVX_ovr_18(waitSemaphoreCount, waitSemaphoreArray[0], waitValueArray, srcGpu, dstGpuMask, srcName, srcTarget, srcLevel, srcX, srcY, srcZ, dstName, dstTarget, dstLevel, dstX, dstY, dstZ, srcWidth, srcHeight, srcDepth, signalSemaphoreCount, signalSemaphoreArray, signalValueArray);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function AsyncCopyImageSubDataNVX(waitSemaphoreCount: Int32; waitSemaphoreArray: array of UInt32; waitValueArray: IntPtr; srcGpu: UInt32; dstGpuMask: DummyFlags; srcName: UInt32; srcTarget: DummyEnum; srcLevel: Int32; srcX: Int32; srcY: Int32; srcZ: Int32; dstName: UInt32; dstTarget: DummyEnum; dstLevel: Int32; dstX: Int32; dstY: Int32; dstZ: Int32; srcWidth: Int32; srcHeight: Int32; srcDepth: Int32; signalSemaphoreCount: Int32; var signalSemaphoreArray: UInt32; signalValueArray: IntPtr): UInt32;
    begin
      Result := z_AsyncCopyImageSubDataNVX_ovr_20(waitSemaphoreCount, waitSemaphoreArray[0], waitValueArray, srcGpu, dstGpuMask, srcName, srcTarget, srcLevel, srcX, srcY, srcZ, dstName, dstTarget, dstLevel, dstX, dstY, dstZ, srcWidth, srcHeight, srcDepth, signalSemaphoreCount, signalSemaphoreArray, signalValueArray);
    end;
    public z_AsyncCopyImageSubDataNVX_ovr_24 := GetFuncOrNil&<function(waitSemaphoreCount: Int32; var waitSemaphoreArray: UInt32; waitValueArray: IntPtr; srcGpu: UInt32; dstGpuMask: DummyFlags; srcName: UInt32; srcTarget: DummyEnum; srcLevel: Int32; srcX: Int32; srcY: Int32; srcZ: Int32; dstName: UInt32; dstTarget: DummyEnum; dstLevel: Int32; dstX: Int32; dstY: Int32; dstZ: Int32; srcWidth: Int32; srcHeight: Int32; srcDepth: Int32; signalSemaphoreCount: Int32; signalSemaphoreArray: IntPtr; var signalValueArray: UInt64): UInt32>(z_AsyncCopyImageSubDataNVX_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function AsyncCopyImageSubDataNVX(waitSemaphoreCount: Int32; waitSemaphoreArray: array of UInt32; waitValueArray: IntPtr; srcGpu: UInt32; dstGpuMask: DummyFlags; srcName: UInt32; srcTarget: DummyEnum; srcLevel: Int32; srcX: Int32; srcY: Int32; srcZ: Int32; dstName: UInt32; dstTarget: DummyEnum; dstLevel: Int32; dstX: Int32; dstY: Int32; dstZ: Int32; srcWidth: Int32; srcHeight: Int32; srcDepth: Int32; signalSemaphoreCount: Int32; signalSemaphoreArray: IntPtr; signalValueArray: array of UInt64): UInt32;
    begin
      Result := z_AsyncCopyImageSubDataNVX_ovr_24(waitSemaphoreCount, waitSemaphoreArray[0], waitValueArray, srcGpu, dstGpuMask, srcName, srcTarget, srcLevel, srcX, srcY, srcZ, dstName, dstTarget, dstLevel, dstX, dstY, dstZ, srcWidth, srcHeight, srcDepth, signalSemaphoreCount, signalSemaphoreArray, signalValueArray[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function AsyncCopyImageSubDataNVX(waitSemaphoreCount: Int32; waitSemaphoreArray: array of UInt32; waitValueArray: IntPtr; srcGpu: UInt32; dstGpuMask: DummyFlags; srcName: UInt32; srcTarget: DummyEnum; srcLevel: Int32; srcX: Int32; srcY: Int32; srcZ: Int32; dstName: UInt32; dstTarget: DummyEnum; dstLevel: Int32; dstX: Int32; dstY: Int32; dstZ: Int32; srcWidth: Int32; srcHeight: Int32; srcDepth: Int32; signalSemaphoreCount: Int32; signalSemaphoreArray: IntPtr; var signalValueArray: UInt64): UInt32;
    begin
      Result := z_AsyncCopyImageSubDataNVX_ovr_24(waitSemaphoreCount, waitSemaphoreArray[0], waitValueArray, srcGpu, dstGpuMask, srcName, srcTarget, srcLevel, srcX, srcY, srcZ, dstName, dstTarget, dstLevel, dstX, dstY, dstZ, srcWidth, srcHeight, srcDepth, signalSemaphoreCount, signalSemaphoreArray, signalValueArray);
    end;
    public z_AsyncCopyImageSubDataNVX_ovr_26 := GetFuncOrNil&<function(waitSemaphoreCount: Int32; var waitSemaphoreArray: UInt32; waitValueArray: IntPtr; srcGpu: UInt32; dstGpuMask: DummyFlags; srcName: UInt32; srcTarget: DummyEnum; srcLevel: Int32; srcX: Int32; srcY: Int32; srcZ: Int32; dstName: UInt32; dstTarget: DummyEnum; dstLevel: Int32; dstX: Int32; dstY: Int32; dstZ: Int32; srcWidth: Int32; srcHeight: Int32; srcDepth: Int32; signalSemaphoreCount: Int32; signalSemaphoreArray: IntPtr; signalValueArray: IntPtr): UInt32>(z_AsyncCopyImageSubDataNVX_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function AsyncCopyImageSubDataNVX(waitSemaphoreCount: Int32; waitSemaphoreArray: array of UInt32; waitValueArray: IntPtr; srcGpu: UInt32; dstGpuMask: DummyFlags; srcName: UInt32; srcTarget: DummyEnum; srcLevel: Int32; srcX: Int32; srcY: Int32; srcZ: Int32; dstName: UInt32; dstTarget: DummyEnum; dstLevel: Int32; dstX: Int32; dstY: Int32; dstZ: Int32; srcWidth: Int32; srcHeight: Int32; srcDepth: Int32; signalSemaphoreCount: Int32; signalSemaphoreArray: IntPtr; signalValueArray: IntPtr): UInt32;
    begin
      Result := z_AsyncCopyImageSubDataNVX_ovr_26(waitSemaphoreCount, waitSemaphoreArray[0], waitValueArray, srcGpu, dstGpuMask, srcName, srcTarget, srcLevel, srcX, srcY, srcZ, dstName, dstTarget, dstLevel, dstX, dstY, dstZ, srcWidth, srcHeight, srcDepth, signalSemaphoreCount, signalSemaphoreArray, signalValueArray);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function AsyncCopyImageSubDataNVX(waitSemaphoreCount: Int32; var waitSemaphoreArray: UInt32; waitValueArray: array of UInt64; srcGpu: UInt32; dstGpuMask: DummyFlags; srcName: UInt32; srcTarget: DummyEnum; srcLevel: Int32; srcX: Int32; srcY: Int32; srcZ: Int32; dstName: UInt32; dstTarget: DummyEnum; dstLevel: Int32; dstX: Int32; dstY: Int32; dstZ: Int32; srcWidth: Int32; srcHeight: Int32; srcDepth: Int32; signalSemaphoreCount: Int32; signalSemaphoreArray: array of UInt32; signalValueArray: array of UInt64): UInt32;
    begin
      Result := z_AsyncCopyImageSubDataNVX_ovr_0(waitSemaphoreCount, waitSemaphoreArray, waitValueArray[0], srcGpu, dstGpuMask, srcName, srcTarget, srcLevel, srcX, srcY, srcZ, dstName, dstTarget, dstLevel, dstX, dstY, dstZ, srcWidth, srcHeight, srcDepth, signalSemaphoreCount, signalSemaphoreArray[0], signalValueArray[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function AsyncCopyImageSubDataNVX(waitSemaphoreCount: Int32; var waitSemaphoreArray: UInt32; waitValueArray: array of UInt64; srcGpu: UInt32; dstGpuMask: DummyFlags; srcName: UInt32; srcTarget: DummyEnum; srcLevel: Int32; srcX: Int32; srcY: Int32; srcZ: Int32; dstName: UInt32; dstTarget: DummyEnum; dstLevel: Int32; dstX: Int32; dstY: Int32; dstZ: Int32; srcWidth: Int32; srcHeight: Int32; srcDepth: Int32; signalSemaphoreCount: Int32; signalSemaphoreArray: array of UInt32; var signalValueArray: UInt64): UInt32;
    begin
      Result := z_AsyncCopyImageSubDataNVX_ovr_0(waitSemaphoreCount, waitSemaphoreArray, waitValueArray[0], srcGpu, dstGpuMask, srcName, srcTarget, srcLevel, srcX, srcY, srcZ, dstName, dstTarget, dstLevel, dstX, dstY, dstZ, srcWidth, srcHeight, srcDepth, signalSemaphoreCount, signalSemaphoreArray[0], signalValueArray);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function AsyncCopyImageSubDataNVX(waitSemaphoreCount: Int32; var waitSemaphoreArray: UInt32; waitValueArray: array of UInt64; srcGpu: UInt32; dstGpuMask: DummyFlags; srcName: UInt32; srcTarget: DummyEnum; srcLevel: Int32; srcX: Int32; srcY: Int32; srcZ: Int32; dstName: UInt32; dstTarget: DummyEnum; dstLevel: Int32; dstX: Int32; dstY: Int32; dstZ: Int32; srcWidth: Int32; srcHeight: Int32; srcDepth: Int32; signalSemaphoreCount: Int32; signalSemaphoreArray: array of UInt32; signalValueArray: IntPtr): UInt32;
    begin
      Result := z_AsyncCopyImageSubDataNVX_ovr_2(waitSemaphoreCount, waitSemaphoreArray, waitValueArray[0], srcGpu, dstGpuMask, srcName, srcTarget, srcLevel, srcX, srcY, srcZ, dstName, dstTarget, dstLevel, dstX, dstY, dstZ, srcWidth, srcHeight, srcDepth, signalSemaphoreCount, signalSemaphoreArray[0], signalValueArray);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function AsyncCopyImageSubDataNVX(waitSemaphoreCount: Int32; var waitSemaphoreArray: UInt32; waitValueArray: array of UInt64; srcGpu: UInt32; dstGpuMask: DummyFlags; srcName: UInt32; srcTarget: DummyEnum; srcLevel: Int32; srcX: Int32; srcY: Int32; srcZ: Int32; dstName: UInt32; dstTarget: DummyEnum; dstLevel: Int32; dstX: Int32; dstY: Int32; dstZ: Int32; srcWidth: Int32; srcHeight: Int32; srcDepth: Int32; signalSemaphoreCount: Int32; var signalSemaphoreArray: UInt32; signalValueArray: array of UInt64): UInt32;
    begin
      Result := z_AsyncCopyImageSubDataNVX_ovr_0(waitSemaphoreCount, waitSemaphoreArray, waitValueArray[0], srcGpu, dstGpuMask, srcName, srcTarget, srcLevel, srcX, srcY, srcZ, dstName, dstTarget, dstLevel, dstX, dstY, dstZ, srcWidth, srcHeight, srcDepth, signalSemaphoreCount, signalSemaphoreArray, signalValueArray[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function AsyncCopyImageSubDataNVX(waitSemaphoreCount: Int32; var waitSemaphoreArray: UInt32; waitValueArray: array of UInt64; srcGpu: UInt32; dstGpuMask: DummyFlags; srcName: UInt32; srcTarget: DummyEnum; srcLevel: Int32; srcX: Int32; srcY: Int32; srcZ: Int32; dstName: UInt32; dstTarget: DummyEnum; dstLevel: Int32; dstX: Int32; dstY: Int32; dstZ: Int32; srcWidth: Int32; srcHeight: Int32; srcDepth: Int32; signalSemaphoreCount: Int32; var signalSemaphoreArray: UInt32; var signalValueArray: UInt64): UInt32;
    begin
      Result := z_AsyncCopyImageSubDataNVX_ovr_0(waitSemaphoreCount, waitSemaphoreArray, waitValueArray[0], srcGpu, dstGpuMask, srcName, srcTarget, srcLevel, srcX, srcY, srcZ, dstName, dstTarget, dstLevel, dstX, dstY, dstZ, srcWidth, srcHeight, srcDepth, signalSemaphoreCount, signalSemaphoreArray, signalValueArray);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function AsyncCopyImageSubDataNVX(waitSemaphoreCount: Int32; var waitSemaphoreArray: UInt32; waitValueArray: array of UInt64; srcGpu: UInt32; dstGpuMask: DummyFlags; srcName: UInt32; srcTarget: DummyEnum; srcLevel: Int32; srcX: Int32; srcY: Int32; srcZ: Int32; dstName: UInt32; dstTarget: DummyEnum; dstLevel: Int32; dstX: Int32; dstY: Int32; dstZ: Int32; srcWidth: Int32; srcHeight: Int32; srcDepth: Int32; signalSemaphoreCount: Int32; var signalSemaphoreArray: UInt32; signalValueArray: IntPtr): UInt32;
    begin
      Result := z_AsyncCopyImageSubDataNVX_ovr_2(waitSemaphoreCount, waitSemaphoreArray, waitValueArray[0], srcGpu, dstGpuMask, srcName, srcTarget, srcLevel, srcX, srcY, srcZ, dstName, dstTarget, dstLevel, dstX, dstY, dstZ, srcWidth, srcHeight, srcDepth, signalSemaphoreCount, signalSemaphoreArray, signalValueArray);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function AsyncCopyImageSubDataNVX(waitSemaphoreCount: Int32; var waitSemaphoreArray: UInt32; waitValueArray: array of UInt64; srcGpu: UInt32; dstGpuMask: DummyFlags; srcName: UInt32; srcTarget: DummyEnum; srcLevel: Int32; srcX: Int32; srcY: Int32; srcZ: Int32; dstName: UInt32; dstTarget: DummyEnum; dstLevel: Int32; dstX: Int32; dstY: Int32; dstZ: Int32; srcWidth: Int32; srcHeight: Int32; srcDepth: Int32; signalSemaphoreCount: Int32; signalSemaphoreArray: IntPtr; signalValueArray: array of UInt64): UInt32;
    begin
      Result := z_AsyncCopyImageSubDataNVX_ovr_6(waitSemaphoreCount, waitSemaphoreArray, waitValueArray[0], srcGpu, dstGpuMask, srcName, srcTarget, srcLevel, srcX, srcY, srcZ, dstName, dstTarget, dstLevel, dstX, dstY, dstZ, srcWidth, srcHeight, srcDepth, signalSemaphoreCount, signalSemaphoreArray, signalValueArray[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function AsyncCopyImageSubDataNVX(waitSemaphoreCount: Int32; var waitSemaphoreArray: UInt32; waitValueArray: array of UInt64; srcGpu: UInt32; dstGpuMask: DummyFlags; srcName: UInt32; srcTarget: DummyEnum; srcLevel: Int32; srcX: Int32; srcY: Int32; srcZ: Int32; dstName: UInt32; dstTarget: DummyEnum; dstLevel: Int32; dstX: Int32; dstY: Int32; dstZ: Int32; srcWidth: Int32; srcHeight: Int32; srcDepth: Int32; signalSemaphoreCount: Int32; signalSemaphoreArray: IntPtr; var signalValueArray: UInt64): UInt32;
    begin
      Result := z_AsyncCopyImageSubDataNVX_ovr_6(waitSemaphoreCount, waitSemaphoreArray, waitValueArray[0], srcGpu, dstGpuMask, srcName, srcTarget, srcLevel, srcX, srcY, srcZ, dstName, dstTarget, dstLevel, dstX, dstY, dstZ, srcWidth, srcHeight, srcDepth, signalSemaphoreCount, signalSemaphoreArray, signalValueArray);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function AsyncCopyImageSubDataNVX(waitSemaphoreCount: Int32; var waitSemaphoreArray: UInt32; waitValueArray: array of UInt64; srcGpu: UInt32; dstGpuMask: DummyFlags; srcName: UInt32; srcTarget: DummyEnum; srcLevel: Int32; srcX: Int32; srcY: Int32; srcZ: Int32; dstName: UInt32; dstTarget: DummyEnum; dstLevel: Int32; dstX: Int32; dstY: Int32; dstZ: Int32; srcWidth: Int32; srcHeight: Int32; srcDepth: Int32; signalSemaphoreCount: Int32; signalSemaphoreArray: IntPtr; signalValueArray: IntPtr): UInt32;
    begin
      Result := z_AsyncCopyImageSubDataNVX_ovr_8(waitSemaphoreCount, waitSemaphoreArray, waitValueArray[0], srcGpu, dstGpuMask, srcName, srcTarget, srcLevel, srcX, srcY, srcZ, dstName, dstTarget, dstLevel, dstX, dstY, dstZ, srcWidth, srcHeight, srcDepth, signalSemaphoreCount, signalSemaphoreArray, signalValueArray);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function AsyncCopyImageSubDataNVX(waitSemaphoreCount: Int32; var waitSemaphoreArray: UInt32; var waitValueArray: UInt64; srcGpu: UInt32; dstGpuMask: DummyFlags; srcName: UInt32; srcTarget: DummyEnum; srcLevel: Int32; srcX: Int32; srcY: Int32; srcZ: Int32; dstName: UInt32; dstTarget: DummyEnum; dstLevel: Int32; dstX: Int32; dstY: Int32; dstZ: Int32; srcWidth: Int32; srcHeight: Int32; srcDepth: Int32; signalSemaphoreCount: Int32; signalSemaphoreArray: array of UInt32; signalValueArray: array of UInt64): UInt32;
    begin
      Result := z_AsyncCopyImageSubDataNVX_ovr_0(waitSemaphoreCount, waitSemaphoreArray, waitValueArray, srcGpu, dstGpuMask, srcName, srcTarget, srcLevel, srcX, srcY, srcZ, dstName, dstTarget, dstLevel, dstX, dstY, dstZ, srcWidth, srcHeight, srcDepth, signalSemaphoreCount, signalSemaphoreArray[0], signalValueArray[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function AsyncCopyImageSubDataNVX(waitSemaphoreCount: Int32; var waitSemaphoreArray: UInt32; var waitValueArray: UInt64; srcGpu: UInt32; dstGpuMask: DummyFlags; srcName: UInt32; srcTarget: DummyEnum; srcLevel: Int32; srcX: Int32; srcY: Int32; srcZ: Int32; dstName: UInt32; dstTarget: DummyEnum; dstLevel: Int32; dstX: Int32; dstY: Int32; dstZ: Int32; srcWidth: Int32; srcHeight: Int32; srcDepth: Int32; signalSemaphoreCount: Int32; signalSemaphoreArray: array of UInt32; var signalValueArray: UInt64): UInt32;
    begin
      Result := z_AsyncCopyImageSubDataNVX_ovr_0(waitSemaphoreCount, waitSemaphoreArray, waitValueArray, srcGpu, dstGpuMask, srcName, srcTarget, srcLevel, srcX, srcY, srcZ, dstName, dstTarget, dstLevel, dstX, dstY, dstZ, srcWidth, srcHeight, srcDepth, signalSemaphoreCount, signalSemaphoreArray[0], signalValueArray);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function AsyncCopyImageSubDataNVX(waitSemaphoreCount: Int32; var waitSemaphoreArray: UInt32; var waitValueArray: UInt64; srcGpu: UInt32; dstGpuMask: DummyFlags; srcName: UInt32; srcTarget: DummyEnum; srcLevel: Int32; srcX: Int32; srcY: Int32; srcZ: Int32; dstName: UInt32; dstTarget: DummyEnum; dstLevel: Int32; dstX: Int32; dstY: Int32; dstZ: Int32; srcWidth: Int32; srcHeight: Int32; srcDepth: Int32; signalSemaphoreCount: Int32; signalSemaphoreArray: array of UInt32; signalValueArray: IntPtr): UInt32;
    begin
      Result := z_AsyncCopyImageSubDataNVX_ovr_2(waitSemaphoreCount, waitSemaphoreArray, waitValueArray, srcGpu, dstGpuMask, srcName, srcTarget, srcLevel, srcX, srcY, srcZ, dstName, dstTarget, dstLevel, dstX, dstY, dstZ, srcWidth, srcHeight, srcDepth, signalSemaphoreCount, signalSemaphoreArray[0], signalValueArray);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function AsyncCopyImageSubDataNVX(waitSemaphoreCount: Int32; var waitSemaphoreArray: UInt32; var waitValueArray: UInt64; srcGpu: UInt32; dstGpuMask: DummyFlags; srcName: UInt32; srcTarget: DummyEnum; srcLevel: Int32; srcX: Int32; srcY: Int32; srcZ: Int32; dstName: UInt32; dstTarget: DummyEnum; dstLevel: Int32; dstX: Int32; dstY: Int32; dstZ: Int32; srcWidth: Int32; srcHeight: Int32; srcDepth: Int32; signalSemaphoreCount: Int32; var signalSemaphoreArray: UInt32; signalValueArray: array of UInt64): UInt32;
    begin
      Result := z_AsyncCopyImageSubDataNVX_ovr_0(waitSemaphoreCount, waitSemaphoreArray, waitValueArray, srcGpu, dstGpuMask, srcName, srcTarget, srcLevel, srcX, srcY, srcZ, dstName, dstTarget, dstLevel, dstX, dstY, dstZ, srcWidth, srcHeight, srcDepth, signalSemaphoreCount, signalSemaphoreArray, signalValueArray[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function AsyncCopyImageSubDataNVX(waitSemaphoreCount: Int32; var waitSemaphoreArray: UInt32; var waitValueArray: UInt64; srcGpu: UInt32; dstGpuMask: DummyFlags; srcName: UInt32; srcTarget: DummyEnum; srcLevel: Int32; srcX: Int32; srcY: Int32; srcZ: Int32; dstName: UInt32; dstTarget: DummyEnum; dstLevel: Int32; dstX: Int32; dstY: Int32; dstZ: Int32; srcWidth: Int32; srcHeight: Int32; srcDepth: Int32; signalSemaphoreCount: Int32; var signalSemaphoreArray: UInt32; var signalValueArray: UInt64): UInt32;
    begin
      Result := z_AsyncCopyImageSubDataNVX_ovr_0(waitSemaphoreCount, waitSemaphoreArray, waitValueArray, srcGpu, dstGpuMask, srcName, srcTarget, srcLevel, srcX, srcY, srcZ, dstName, dstTarget, dstLevel, dstX, dstY, dstZ, srcWidth, srcHeight, srcDepth, signalSemaphoreCount, signalSemaphoreArray, signalValueArray);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function AsyncCopyImageSubDataNVX(waitSemaphoreCount: Int32; var waitSemaphoreArray: UInt32; var waitValueArray: UInt64; srcGpu: UInt32; dstGpuMask: DummyFlags; srcName: UInt32; srcTarget: DummyEnum; srcLevel: Int32; srcX: Int32; srcY: Int32; srcZ: Int32; dstName: UInt32; dstTarget: DummyEnum; dstLevel: Int32; dstX: Int32; dstY: Int32; dstZ: Int32; srcWidth: Int32; srcHeight: Int32; srcDepth: Int32; signalSemaphoreCount: Int32; var signalSemaphoreArray: UInt32; signalValueArray: IntPtr): UInt32;
    begin
      Result := z_AsyncCopyImageSubDataNVX_ovr_2(waitSemaphoreCount, waitSemaphoreArray, waitValueArray, srcGpu, dstGpuMask, srcName, srcTarget, srcLevel, srcX, srcY, srcZ, dstName, dstTarget, dstLevel, dstX, dstY, dstZ, srcWidth, srcHeight, srcDepth, signalSemaphoreCount, signalSemaphoreArray, signalValueArray);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function AsyncCopyImageSubDataNVX(waitSemaphoreCount: Int32; var waitSemaphoreArray: UInt32; var waitValueArray: UInt64; srcGpu: UInt32; dstGpuMask: DummyFlags; srcName: UInt32; srcTarget: DummyEnum; srcLevel: Int32; srcX: Int32; srcY: Int32; srcZ: Int32; dstName: UInt32; dstTarget: DummyEnum; dstLevel: Int32; dstX: Int32; dstY: Int32; dstZ: Int32; srcWidth: Int32; srcHeight: Int32; srcDepth: Int32; signalSemaphoreCount: Int32; signalSemaphoreArray: IntPtr; signalValueArray: array of UInt64): UInt32;
    begin
      Result := z_AsyncCopyImageSubDataNVX_ovr_6(waitSemaphoreCount, waitSemaphoreArray, waitValueArray, srcGpu, dstGpuMask, srcName, srcTarget, srcLevel, srcX, srcY, srcZ, dstName, dstTarget, dstLevel, dstX, dstY, dstZ, srcWidth, srcHeight, srcDepth, signalSemaphoreCount, signalSemaphoreArray, signalValueArray[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function AsyncCopyImageSubDataNVX(waitSemaphoreCount: Int32; var waitSemaphoreArray: UInt32; var waitValueArray: UInt64; srcGpu: UInt32; dstGpuMask: DummyFlags; srcName: UInt32; srcTarget: DummyEnum; srcLevel: Int32; srcX: Int32; srcY: Int32; srcZ: Int32; dstName: UInt32; dstTarget: DummyEnum; dstLevel: Int32; dstX: Int32; dstY: Int32; dstZ: Int32; srcWidth: Int32; srcHeight: Int32; srcDepth: Int32; signalSemaphoreCount: Int32; signalSemaphoreArray: IntPtr; var signalValueArray: UInt64): UInt32;
    begin
      Result := z_AsyncCopyImageSubDataNVX_ovr_6(waitSemaphoreCount, waitSemaphoreArray, waitValueArray, srcGpu, dstGpuMask, srcName, srcTarget, srcLevel, srcX, srcY, srcZ, dstName, dstTarget, dstLevel, dstX, dstY, dstZ, srcWidth, srcHeight, srcDepth, signalSemaphoreCount, signalSemaphoreArray, signalValueArray);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function AsyncCopyImageSubDataNVX(waitSemaphoreCount: Int32; var waitSemaphoreArray: UInt32; var waitValueArray: UInt64; srcGpu: UInt32; dstGpuMask: DummyFlags; srcName: UInt32; srcTarget: DummyEnum; srcLevel: Int32; srcX: Int32; srcY: Int32; srcZ: Int32; dstName: UInt32; dstTarget: DummyEnum; dstLevel: Int32; dstX: Int32; dstY: Int32; dstZ: Int32; srcWidth: Int32; srcHeight: Int32; srcDepth: Int32; signalSemaphoreCount: Int32; signalSemaphoreArray: IntPtr; signalValueArray: IntPtr): UInt32;
    begin
      Result := z_AsyncCopyImageSubDataNVX_ovr_8(waitSemaphoreCount, waitSemaphoreArray, waitValueArray, srcGpu, dstGpuMask, srcName, srcTarget, srcLevel, srcX, srcY, srcZ, dstName, dstTarget, dstLevel, dstX, dstY, dstZ, srcWidth, srcHeight, srcDepth, signalSemaphoreCount, signalSemaphoreArray, signalValueArray);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function AsyncCopyImageSubDataNVX(waitSemaphoreCount: Int32; var waitSemaphoreArray: UInt32; waitValueArray: IntPtr; srcGpu: UInt32; dstGpuMask: DummyFlags; srcName: UInt32; srcTarget: DummyEnum; srcLevel: Int32; srcX: Int32; srcY: Int32; srcZ: Int32; dstName: UInt32; dstTarget: DummyEnum; dstLevel: Int32; dstX: Int32; dstY: Int32; dstZ: Int32; srcWidth: Int32; srcHeight: Int32; srcDepth: Int32; signalSemaphoreCount: Int32; signalSemaphoreArray: array of UInt32; signalValueArray: array of UInt64): UInt32;
    begin
      Result := z_AsyncCopyImageSubDataNVX_ovr_18(waitSemaphoreCount, waitSemaphoreArray, waitValueArray, srcGpu, dstGpuMask, srcName, srcTarget, srcLevel, srcX, srcY, srcZ, dstName, dstTarget, dstLevel, dstX, dstY, dstZ, srcWidth, srcHeight, srcDepth, signalSemaphoreCount, signalSemaphoreArray[0], signalValueArray[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function AsyncCopyImageSubDataNVX(waitSemaphoreCount: Int32; var waitSemaphoreArray: UInt32; waitValueArray: IntPtr; srcGpu: UInt32; dstGpuMask: DummyFlags; srcName: UInt32; srcTarget: DummyEnum; srcLevel: Int32; srcX: Int32; srcY: Int32; srcZ: Int32; dstName: UInt32; dstTarget: DummyEnum; dstLevel: Int32; dstX: Int32; dstY: Int32; dstZ: Int32; srcWidth: Int32; srcHeight: Int32; srcDepth: Int32; signalSemaphoreCount: Int32; signalSemaphoreArray: array of UInt32; var signalValueArray: UInt64): UInt32;
    begin
      Result := z_AsyncCopyImageSubDataNVX_ovr_18(waitSemaphoreCount, waitSemaphoreArray, waitValueArray, srcGpu, dstGpuMask, srcName, srcTarget, srcLevel, srcX, srcY, srcZ, dstName, dstTarget, dstLevel, dstX, dstY, dstZ, srcWidth, srcHeight, srcDepth, signalSemaphoreCount, signalSemaphoreArray[0], signalValueArray);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function AsyncCopyImageSubDataNVX(waitSemaphoreCount: Int32; var waitSemaphoreArray: UInt32; waitValueArray: IntPtr; srcGpu: UInt32; dstGpuMask: DummyFlags; srcName: UInt32; srcTarget: DummyEnum; srcLevel: Int32; srcX: Int32; srcY: Int32; srcZ: Int32; dstName: UInt32; dstTarget: DummyEnum; dstLevel: Int32; dstX: Int32; dstY: Int32; dstZ: Int32; srcWidth: Int32; srcHeight: Int32; srcDepth: Int32; signalSemaphoreCount: Int32; signalSemaphoreArray: array of UInt32; signalValueArray: IntPtr): UInt32;
    begin
      Result := z_AsyncCopyImageSubDataNVX_ovr_20(waitSemaphoreCount, waitSemaphoreArray, waitValueArray, srcGpu, dstGpuMask, srcName, srcTarget, srcLevel, srcX, srcY, srcZ, dstName, dstTarget, dstLevel, dstX, dstY, dstZ, srcWidth, srcHeight, srcDepth, signalSemaphoreCount, signalSemaphoreArray[0], signalValueArray);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function AsyncCopyImageSubDataNVX(waitSemaphoreCount: Int32; var waitSemaphoreArray: UInt32; waitValueArray: IntPtr; srcGpu: UInt32; dstGpuMask: DummyFlags; srcName: UInt32; srcTarget: DummyEnum; srcLevel: Int32; srcX: Int32; srcY: Int32; srcZ: Int32; dstName: UInt32; dstTarget: DummyEnum; dstLevel: Int32; dstX: Int32; dstY: Int32; dstZ: Int32; srcWidth: Int32; srcHeight: Int32; srcDepth: Int32; signalSemaphoreCount: Int32; var signalSemaphoreArray: UInt32; signalValueArray: array of UInt64): UInt32;
    begin
      Result := z_AsyncCopyImageSubDataNVX_ovr_18(waitSemaphoreCount, waitSemaphoreArray, waitValueArray, srcGpu, dstGpuMask, srcName, srcTarget, srcLevel, srcX, srcY, srcZ, dstName, dstTarget, dstLevel, dstX, dstY, dstZ, srcWidth, srcHeight, srcDepth, signalSemaphoreCount, signalSemaphoreArray, signalValueArray[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function AsyncCopyImageSubDataNVX(waitSemaphoreCount: Int32; var waitSemaphoreArray: UInt32; waitValueArray: IntPtr; srcGpu: UInt32; dstGpuMask: DummyFlags; srcName: UInt32; srcTarget: DummyEnum; srcLevel: Int32; srcX: Int32; srcY: Int32; srcZ: Int32; dstName: UInt32; dstTarget: DummyEnum; dstLevel: Int32; dstX: Int32; dstY: Int32; dstZ: Int32; srcWidth: Int32; srcHeight: Int32; srcDepth: Int32; signalSemaphoreCount: Int32; var signalSemaphoreArray: UInt32; var signalValueArray: UInt64): UInt32;
    begin
      Result := z_AsyncCopyImageSubDataNVX_ovr_18(waitSemaphoreCount, waitSemaphoreArray, waitValueArray, srcGpu, dstGpuMask, srcName, srcTarget, srcLevel, srcX, srcY, srcZ, dstName, dstTarget, dstLevel, dstX, dstY, dstZ, srcWidth, srcHeight, srcDepth, signalSemaphoreCount, signalSemaphoreArray, signalValueArray);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function AsyncCopyImageSubDataNVX(waitSemaphoreCount: Int32; var waitSemaphoreArray: UInt32; waitValueArray: IntPtr; srcGpu: UInt32; dstGpuMask: DummyFlags; srcName: UInt32; srcTarget: DummyEnum; srcLevel: Int32; srcX: Int32; srcY: Int32; srcZ: Int32; dstName: UInt32; dstTarget: DummyEnum; dstLevel: Int32; dstX: Int32; dstY: Int32; dstZ: Int32; srcWidth: Int32; srcHeight: Int32; srcDepth: Int32; signalSemaphoreCount: Int32; var signalSemaphoreArray: UInt32; signalValueArray: IntPtr): UInt32;
    begin
      Result := z_AsyncCopyImageSubDataNVX_ovr_20(waitSemaphoreCount, waitSemaphoreArray, waitValueArray, srcGpu, dstGpuMask, srcName, srcTarget, srcLevel, srcX, srcY, srcZ, dstName, dstTarget, dstLevel, dstX, dstY, dstZ, srcWidth, srcHeight, srcDepth, signalSemaphoreCount, signalSemaphoreArray, signalValueArray);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function AsyncCopyImageSubDataNVX(waitSemaphoreCount: Int32; var waitSemaphoreArray: UInt32; waitValueArray: IntPtr; srcGpu: UInt32; dstGpuMask: DummyFlags; srcName: UInt32; srcTarget: DummyEnum; srcLevel: Int32; srcX: Int32; srcY: Int32; srcZ: Int32; dstName: UInt32; dstTarget: DummyEnum; dstLevel: Int32; dstX: Int32; dstY: Int32; dstZ: Int32; srcWidth: Int32; srcHeight: Int32; srcDepth: Int32; signalSemaphoreCount: Int32; signalSemaphoreArray: IntPtr; signalValueArray: array of UInt64): UInt32;
    begin
      Result := z_AsyncCopyImageSubDataNVX_ovr_24(waitSemaphoreCount, waitSemaphoreArray, waitValueArray, srcGpu, dstGpuMask, srcName, srcTarget, srcLevel, srcX, srcY, srcZ, dstName, dstTarget, dstLevel, dstX, dstY, dstZ, srcWidth, srcHeight, srcDepth, signalSemaphoreCount, signalSemaphoreArray, signalValueArray[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function AsyncCopyImageSubDataNVX(waitSemaphoreCount: Int32; var waitSemaphoreArray: UInt32; waitValueArray: IntPtr; srcGpu: UInt32; dstGpuMask: DummyFlags; srcName: UInt32; srcTarget: DummyEnum; srcLevel: Int32; srcX: Int32; srcY: Int32; srcZ: Int32; dstName: UInt32; dstTarget: DummyEnum; dstLevel: Int32; dstX: Int32; dstY: Int32; dstZ: Int32; srcWidth: Int32; srcHeight: Int32; srcDepth: Int32; signalSemaphoreCount: Int32; signalSemaphoreArray: IntPtr; var signalValueArray: UInt64): UInt32;
    begin
      Result := z_AsyncCopyImageSubDataNVX_ovr_24(waitSemaphoreCount, waitSemaphoreArray, waitValueArray, srcGpu, dstGpuMask, srcName, srcTarget, srcLevel, srcX, srcY, srcZ, dstName, dstTarget, dstLevel, dstX, dstY, dstZ, srcWidth, srcHeight, srcDepth, signalSemaphoreCount, signalSemaphoreArray, signalValueArray);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function AsyncCopyImageSubDataNVX(waitSemaphoreCount: Int32; var waitSemaphoreArray: UInt32; waitValueArray: IntPtr; srcGpu: UInt32; dstGpuMask: DummyFlags; srcName: UInt32; srcTarget: DummyEnum; srcLevel: Int32; srcX: Int32; srcY: Int32; srcZ: Int32; dstName: UInt32; dstTarget: DummyEnum; dstLevel: Int32; dstX: Int32; dstY: Int32; dstZ: Int32; srcWidth: Int32; srcHeight: Int32; srcDepth: Int32; signalSemaphoreCount: Int32; signalSemaphoreArray: IntPtr; signalValueArray: IntPtr): UInt32;
    begin
      Result := z_AsyncCopyImageSubDataNVX_ovr_26(waitSemaphoreCount, waitSemaphoreArray, waitValueArray, srcGpu, dstGpuMask, srcName, srcTarget, srcLevel, srcX, srcY, srcZ, dstName, dstTarget, dstLevel, dstX, dstY, dstZ, srcWidth, srcHeight, srcDepth, signalSemaphoreCount, signalSemaphoreArray, signalValueArray);
    end;
    public z_AsyncCopyImageSubDataNVX_ovr_54 := GetFuncOrNil&<function(waitSemaphoreCount: Int32; waitSemaphoreArray: IntPtr; var waitValueArray: UInt64; srcGpu: UInt32; dstGpuMask: DummyFlags; srcName: UInt32; srcTarget: DummyEnum; srcLevel: Int32; srcX: Int32; srcY: Int32; srcZ: Int32; dstName: UInt32; dstTarget: DummyEnum; dstLevel: Int32; dstX: Int32; dstY: Int32; dstZ: Int32; srcWidth: Int32; srcHeight: Int32; srcDepth: Int32; signalSemaphoreCount: Int32; var signalSemaphoreArray: UInt32; var signalValueArray: UInt64): UInt32>(z_AsyncCopyImageSubDataNVX_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function AsyncCopyImageSubDataNVX(waitSemaphoreCount: Int32; waitSemaphoreArray: IntPtr; waitValueArray: array of UInt64; srcGpu: UInt32; dstGpuMask: DummyFlags; srcName: UInt32; srcTarget: DummyEnum; srcLevel: Int32; srcX: Int32; srcY: Int32; srcZ: Int32; dstName: UInt32; dstTarget: DummyEnum; dstLevel: Int32; dstX: Int32; dstY: Int32; dstZ: Int32; srcWidth: Int32; srcHeight: Int32; srcDepth: Int32; signalSemaphoreCount: Int32; signalSemaphoreArray: array of UInt32; signalValueArray: array of UInt64): UInt32;
    begin
      Result := z_AsyncCopyImageSubDataNVX_ovr_54(waitSemaphoreCount, waitSemaphoreArray, waitValueArray[0], srcGpu, dstGpuMask, srcName, srcTarget, srcLevel, srcX, srcY, srcZ, dstName, dstTarget, dstLevel, dstX, dstY, dstZ, srcWidth, srcHeight, srcDepth, signalSemaphoreCount, signalSemaphoreArray[0], signalValueArray[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function AsyncCopyImageSubDataNVX(waitSemaphoreCount: Int32; waitSemaphoreArray: IntPtr; waitValueArray: array of UInt64; srcGpu: UInt32; dstGpuMask: DummyFlags; srcName: UInt32; srcTarget: DummyEnum; srcLevel: Int32; srcX: Int32; srcY: Int32; srcZ: Int32; dstName: UInt32; dstTarget: DummyEnum; dstLevel: Int32; dstX: Int32; dstY: Int32; dstZ: Int32; srcWidth: Int32; srcHeight: Int32; srcDepth: Int32; signalSemaphoreCount: Int32; signalSemaphoreArray: array of UInt32; var signalValueArray: UInt64): UInt32;
    begin
      Result := z_AsyncCopyImageSubDataNVX_ovr_54(waitSemaphoreCount, waitSemaphoreArray, waitValueArray[0], srcGpu, dstGpuMask, srcName, srcTarget, srcLevel, srcX, srcY, srcZ, dstName, dstTarget, dstLevel, dstX, dstY, dstZ, srcWidth, srcHeight, srcDepth, signalSemaphoreCount, signalSemaphoreArray[0], signalValueArray);
    end;
    public z_AsyncCopyImageSubDataNVX_ovr_56 := GetFuncOrNil&<function(waitSemaphoreCount: Int32; waitSemaphoreArray: IntPtr; var waitValueArray: UInt64; srcGpu: UInt32; dstGpuMask: DummyFlags; srcName: UInt32; srcTarget: DummyEnum; srcLevel: Int32; srcX: Int32; srcY: Int32; srcZ: Int32; dstName: UInt32; dstTarget: DummyEnum; dstLevel: Int32; dstX: Int32; dstY: Int32; dstZ: Int32; srcWidth: Int32; srcHeight: Int32; srcDepth: Int32; signalSemaphoreCount: Int32; var signalSemaphoreArray: UInt32; signalValueArray: IntPtr): UInt32>(z_AsyncCopyImageSubDataNVX_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function AsyncCopyImageSubDataNVX(waitSemaphoreCount: Int32; waitSemaphoreArray: IntPtr; waitValueArray: array of UInt64; srcGpu: UInt32; dstGpuMask: DummyFlags; srcName: UInt32; srcTarget: DummyEnum; srcLevel: Int32; srcX: Int32; srcY: Int32; srcZ: Int32; dstName: UInt32; dstTarget: DummyEnum; dstLevel: Int32; dstX: Int32; dstY: Int32; dstZ: Int32; srcWidth: Int32; srcHeight: Int32; srcDepth: Int32; signalSemaphoreCount: Int32; signalSemaphoreArray: array of UInt32; signalValueArray: IntPtr): UInt32;
    begin
      Result := z_AsyncCopyImageSubDataNVX_ovr_56(waitSemaphoreCount, waitSemaphoreArray, waitValueArray[0], srcGpu, dstGpuMask, srcName, srcTarget, srcLevel, srcX, srcY, srcZ, dstName, dstTarget, dstLevel, dstX, dstY, dstZ, srcWidth, srcHeight, srcDepth, signalSemaphoreCount, signalSemaphoreArray[0], signalValueArray);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function AsyncCopyImageSubDataNVX(waitSemaphoreCount: Int32; waitSemaphoreArray: IntPtr; waitValueArray: array of UInt64; srcGpu: UInt32; dstGpuMask: DummyFlags; srcName: UInt32; srcTarget: DummyEnum; srcLevel: Int32; srcX: Int32; srcY: Int32; srcZ: Int32; dstName: UInt32; dstTarget: DummyEnum; dstLevel: Int32; dstX: Int32; dstY: Int32; dstZ: Int32; srcWidth: Int32; srcHeight: Int32; srcDepth: Int32; signalSemaphoreCount: Int32; var signalSemaphoreArray: UInt32; signalValueArray: array of UInt64): UInt32;
    begin
      Result := z_AsyncCopyImageSubDataNVX_ovr_54(waitSemaphoreCount, waitSemaphoreArray, waitValueArray[0], srcGpu, dstGpuMask, srcName, srcTarget, srcLevel, srcX, srcY, srcZ, dstName, dstTarget, dstLevel, dstX, dstY, dstZ, srcWidth, srcHeight, srcDepth, signalSemaphoreCount, signalSemaphoreArray, signalValueArray[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function AsyncCopyImageSubDataNVX(waitSemaphoreCount: Int32; waitSemaphoreArray: IntPtr; waitValueArray: array of UInt64; srcGpu: UInt32; dstGpuMask: DummyFlags; srcName: UInt32; srcTarget: DummyEnum; srcLevel: Int32; srcX: Int32; srcY: Int32; srcZ: Int32; dstName: UInt32; dstTarget: DummyEnum; dstLevel: Int32; dstX: Int32; dstY: Int32; dstZ: Int32; srcWidth: Int32; srcHeight: Int32; srcDepth: Int32; signalSemaphoreCount: Int32; var signalSemaphoreArray: UInt32; var signalValueArray: UInt64): UInt32;
    begin
      Result := z_AsyncCopyImageSubDataNVX_ovr_54(waitSemaphoreCount, waitSemaphoreArray, waitValueArray[0], srcGpu, dstGpuMask, srcName, srcTarget, srcLevel, srcX, srcY, srcZ, dstName, dstTarget, dstLevel, dstX, dstY, dstZ, srcWidth, srcHeight, srcDepth, signalSemaphoreCount, signalSemaphoreArray, signalValueArray);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function AsyncCopyImageSubDataNVX(waitSemaphoreCount: Int32; waitSemaphoreArray: IntPtr; waitValueArray: array of UInt64; srcGpu: UInt32; dstGpuMask: DummyFlags; srcName: UInt32; srcTarget: DummyEnum; srcLevel: Int32; srcX: Int32; srcY: Int32; srcZ: Int32; dstName: UInt32; dstTarget: DummyEnum; dstLevel: Int32; dstX: Int32; dstY: Int32; dstZ: Int32; srcWidth: Int32; srcHeight: Int32; srcDepth: Int32; signalSemaphoreCount: Int32; var signalSemaphoreArray: UInt32; signalValueArray: IntPtr): UInt32;
    begin
      Result := z_AsyncCopyImageSubDataNVX_ovr_56(waitSemaphoreCount, waitSemaphoreArray, waitValueArray[0], srcGpu, dstGpuMask, srcName, srcTarget, srcLevel, srcX, srcY, srcZ, dstName, dstTarget, dstLevel, dstX, dstY, dstZ, srcWidth, srcHeight, srcDepth, signalSemaphoreCount, signalSemaphoreArray, signalValueArray);
    end;
    public z_AsyncCopyImageSubDataNVX_ovr_60 := GetFuncOrNil&<function(waitSemaphoreCount: Int32; waitSemaphoreArray: IntPtr; var waitValueArray: UInt64; srcGpu: UInt32; dstGpuMask: DummyFlags; srcName: UInt32; srcTarget: DummyEnum; srcLevel: Int32; srcX: Int32; srcY: Int32; srcZ: Int32; dstName: UInt32; dstTarget: DummyEnum; dstLevel: Int32; dstX: Int32; dstY: Int32; dstZ: Int32; srcWidth: Int32; srcHeight: Int32; srcDepth: Int32; signalSemaphoreCount: Int32; signalSemaphoreArray: IntPtr; var signalValueArray: UInt64): UInt32>(z_AsyncCopyImageSubDataNVX_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function AsyncCopyImageSubDataNVX(waitSemaphoreCount: Int32; waitSemaphoreArray: IntPtr; waitValueArray: array of UInt64; srcGpu: UInt32; dstGpuMask: DummyFlags; srcName: UInt32; srcTarget: DummyEnum; srcLevel: Int32; srcX: Int32; srcY: Int32; srcZ: Int32; dstName: UInt32; dstTarget: DummyEnum; dstLevel: Int32; dstX: Int32; dstY: Int32; dstZ: Int32; srcWidth: Int32; srcHeight: Int32; srcDepth: Int32; signalSemaphoreCount: Int32; signalSemaphoreArray: IntPtr; signalValueArray: array of UInt64): UInt32;
    begin
      Result := z_AsyncCopyImageSubDataNVX_ovr_60(waitSemaphoreCount, waitSemaphoreArray, waitValueArray[0], srcGpu, dstGpuMask, srcName, srcTarget, srcLevel, srcX, srcY, srcZ, dstName, dstTarget, dstLevel, dstX, dstY, dstZ, srcWidth, srcHeight, srcDepth, signalSemaphoreCount, signalSemaphoreArray, signalValueArray[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function AsyncCopyImageSubDataNVX(waitSemaphoreCount: Int32; waitSemaphoreArray: IntPtr; waitValueArray: array of UInt64; srcGpu: UInt32; dstGpuMask: DummyFlags; srcName: UInt32; srcTarget: DummyEnum; srcLevel: Int32; srcX: Int32; srcY: Int32; srcZ: Int32; dstName: UInt32; dstTarget: DummyEnum; dstLevel: Int32; dstX: Int32; dstY: Int32; dstZ: Int32; srcWidth: Int32; srcHeight: Int32; srcDepth: Int32; signalSemaphoreCount: Int32; signalSemaphoreArray: IntPtr; var signalValueArray: UInt64): UInt32;
    begin
      Result := z_AsyncCopyImageSubDataNVX_ovr_60(waitSemaphoreCount, waitSemaphoreArray, waitValueArray[0], srcGpu, dstGpuMask, srcName, srcTarget, srcLevel, srcX, srcY, srcZ, dstName, dstTarget, dstLevel, dstX, dstY, dstZ, srcWidth, srcHeight, srcDepth, signalSemaphoreCount, signalSemaphoreArray, signalValueArray);
    end;
    public z_AsyncCopyImageSubDataNVX_ovr_62 := GetFuncOrNil&<function(waitSemaphoreCount: Int32; waitSemaphoreArray: IntPtr; var waitValueArray: UInt64; srcGpu: UInt32; dstGpuMask: DummyFlags; srcName: UInt32; srcTarget: DummyEnum; srcLevel: Int32; srcX: Int32; srcY: Int32; srcZ: Int32; dstName: UInt32; dstTarget: DummyEnum; dstLevel: Int32; dstX: Int32; dstY: Int32; dstZ: Int32; srcWidth: Int32; srcHeight: Int32; srcDepth: Int32; signalSemaphoreCount: Int32; signalSemaphoreArray: IntPtr; signalValueArray: IntPtr): UInt32>(z_AsyncCopyImageSubDataNVX_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function AsyncCopyImageSubDataNVX(waitSemaphoreCount: Int32; waitSemaphoreArray: IntPtr; waitValueArray: array of UInt64; srcGpu: UInt32; dstGpuMask: DummyFlags; srcName: UInt32; srcTarget: DummyEnum; srcLevel: Int32; srcX: Int32; srcY: Int32; srcZ: Int32; dstName: UInt32; dstTarget: DummyEnum; dstLevel: Int32; dstX: Int32; dstY: Int32; dstZ: Int32; srcWidth: Int32; srcHeight: Int32; srcDepth: Int32; signalSemaphoreCount: Int32; signalSemaphoreArray: IntPtr; signalValueArray: IntPtr): UInt32;
    begin
      Result := z_AsyncCopyImageSubDataNVX_ovr_62(waitSemaphoreCount, waitSemaphoreArray, waitValueArray[0], srcGpu, dstGpuMask, srcName, srcTarget, srcLevel, srcX, srcY, srcZ, dstName, dstTarget, dstLevel, dstX, dstY, dstZ, srcWidth, srcHeight, srcDepth, signalSemaphoreCount, signalSemaphoreArray, signalValueArray);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function AsyncCopyImageSubDataNVX(waitSemaphoreCount: Int32; waitSemaphoreArray: IntPtr; var waitValueArray: UInt64; srcGpu: UInt32; dstGpuMask: DummyFlags; srcName: UInt32; srcTarget: DummyEnum; srcLevel: Int32; srcX: Int32; srcY: Int32; srcZ: Int32; dstName: UInt32; dstTarget: DummyEnum; dstLevel: Int32; dstX: Int32; dstY: Int32; dstZ: Int32; srcWidth: Int32; srcHeight: Int32; srcDepth: Int32; signalSemaphoreCount: Int32; signalSemaphoreArray: array of UInt32; signalValueArray: array of UInt64): UInt32;
    begin
      Result := z_AsyncCopyImageSubDataNVX_ovr_54(waitSemaphoreCount, waitSemaphoreArray, waitValueArray, srcGpu, dstGpuMask, srcName, srcTarget, srcLevel, srcX, srcY, srcZ, dstName, dstTarget, dstLevel, dstX, dstY, dstZ, srcWidth, srcHeight, srcDepth, signalSemaphoreCount, signalSemaphoreArray[0], signalValueArray[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function AsyncCopyImageSubDataNVX(waitSemaphoreCount: Int32; waitSemaphoreArray: IntPtr; var waitValueArray: UInt64; srcGpu: UInt32; dstGpuMask: DummyFlags; srcName: UInt32; srcTarget: DummyEnum; srcLevel: Int32; srcX: Int32; srcY: Int32; srcZ: Int32; dstName: UInt32; dstTarget: DummyEnum; dstLevel: Int32; dstX: Int32; dstY: Int32; dstZ: Int32; srcWidth: Int32; srcHeight: Int32; srcDepth: Int32; signalSemaphoreCount: Int32; signalSemaphoreArray: array of UInt32; var signalValueArray: UInt64): UInt32;
    begin
      Result := z_AsyncCopyImageSubDataNVX_ovr_54(waitSemaphoreCount, waitSemaphoreArray, waitValueArray, srcGpu, dstGpuMask, srcName, srcTarget, srcLevel, srcX, srcY, srcZ, dstName, dstTarget, dstLevel, dstX, dstY, dstZ, srcWidth, srcHeight, srcDepth, signalSemaphoreCount, signalSemaphoreArray[0], signalValueArray);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function AsyncCopyImageSubDataNVX(waitSemaphoreCount: Int32; waitSemaphoreArray: IntPtr; var waitValueArray: UInt64; srcGpu: UInt32; dstGpuMask: DummyFlags; srcName: UInt32; srcTarget: DummyEnum; srcLevel: Int32; srcX: Int32; srcY: Int32; srcZ: Int32; dstName: UInt32; dstTarget: DummyEnum; dstLevel: Int32; dstX: Int32; dstY: Int32; dstZ: Int32; srcWidth: Int32; srcHeight: Int32; srcDepth: Int32; signalSemaphoreCount: Int32; signalSemaphoreArray: array of UInt32; signalValueArray: IntPtr): UInt32;
    begin
      Result := z_AsyncCopyImageSubDataNVX_ovr_56(waitSemaphoreCount, waitSemaphoreArray, waitValueArray, srcGpu, dstGpuMask, srcName, srcTarget, srcLevel, srcX, srcY, srcZ, dstName, dstTarget, dstLevel, dstX, dstY, dstZ, srcWidth, srcHeight, srcDepth, signalSemaphoreCount, signalSemaphoreArray[0], signalValueArray);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function AsyncCopyImageSubDataNVX(waitSemaphoreCount: Int32; waitSemaphoreArray: IntPtr; var waitValueArray: UInt64; srcGpu: UInt32; dstGpuMask: DummyFlags; srcName: UInt32; srcTarget: DummyEnum; srcLevel: Int32; srcX: Int32; srcY: Int32; srcZ: Int32; dstName: UInt32; dstTarget: DummyEnum; dstLevel: Int32; dstX: Int32; dstY: Int32; dstZ: Int32; srcWidth: Int32; srcHeight: Int32; srcDepth: Int32; signalSemaphoreCount: Int32; var signalSemaphoreArray: UInt32; signalValueArray: array of UInt64): UInt32;
    begin
      Result := z_AsyncCopyImageSubDataNVX_ovr_54(waitSemaphoreCount, waitSemaphoreArray, waitValueArray, srcGpu, dstGpuMask, srcName, srcTarget, srcLevel, srcX, srcY, srcZ, dstName, dstTarget, dstLevel, dstX, dstY, dstZ, srcWidth, srcHeight, srcDepth, signalSemaphoreCount, signalSemaphoreArray, signalValueArray[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function AsyncCopyImageSubDataNVX(waitSemaphoreCount: Int32; waitSemaphoreArray: IntPtr; var waitValueArray: UInt64; srcGpu: UInt32; dstGpuMask: DummyFlags; srcName: UInt32; srcTarget: DummyEnum; srcLevel: Int32; srcX: Int32; srcY: Int32; srcZ: Int32; dstName: UInt32; dstTarget: DummyEnum; dstLevel: Int32; dstX: Int32; dstY: Int32; dstZ: Int32; srcWidth: Int32; srcHeight: Int32; srcDepth: Int32; signalSemaphoreCount: Int32; var signalSemaphoreArray: UInt32; var signalValueArray: UInt64): UInt32;
    begin
      Result := z_AsyncCopyImageSubDataNVX_ovr_54(waitSemaphoreCount, waitSemaphoreArray, waitValueArray, srcGpu, dstGpuMask, srcName, srcTarget, srcLevel, srcX, srcY, srcZ, dstName, dstTarget, dstLevel, dstX, dstY, dstZ, srcWidth, srcHeight, srcDepth, signalSemaphoreCount, signalSemaphoreArray, signalValueArray);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function AsyncCopyImageSubDataNVX(waitSemaphoreCount: Int32; waitSemaphoreArray: IntPtr; var waitValueArray: UInt64; srcGpu: UInt32; dstGpuMask: DummyFlags; srcName: UInt32; srcTarget: DummyEnum; srcLevel: Int32; srcX: Int32; srcY: Int32; srcZ: Int32; dstName: UInt32; dstTarget: DummyEnum; dstLevel: Int32; dstX: Int32; dstY: Int32; dstZ: Int32; srcWidth: Int32; srcHeight: Int32; srcDepth: Int32; signalSemaphoreCount: Int32; var signalSemaphoreArray: UInt32; signalValueArray: IntPtr): UInt32;
    begin
      Result := z_AsyncCopyImageSubDataNVX_ovr_56(waitSemaphoreCount, waitSemaphoreArray, waitValueArray, srcGpu, dstGpuMask, srcName, srcTarget, srcLevel, srcX, srcY, srcZ, dstName, dstTarget, dstLevel, dstX, dstY, dstZ, srcWidth, srcHeight, srcDepth, signalSemaphoreCount, signalSemaphoreArray, signalValueArray);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function AsyncCopyImageSubDataNVX(waitSemaphoreCount: Int32; waitSemaphoreArray: IntPtr; var waitValueArray: UInt64; srcGpu: UInt32; dstGpuMask: DummyFlags; srcName: UInt32; srcTarget: DummyEnum; srcLevel: Int32; srcX: Int32; srcY: Int32; srcZ: Int32; dstName: UInt32; dstTarget: DummyEnum; dstLevel: Int32; dstX: Int32; dstY: Int32; dstZ: Int32; srcWidth: Int32; srcHeight: Int32; srcDepth: Int32; signalSemaphoreCount: Int32; signalSemaphoreArray: IntPtr; signalValueArray: array of UInt64): UInt32;
    begin
      Result := z_AsyncCopyImageSubDataNVX_ovr_60(waitSemaphoreCount, waitSemaphoreArray, waitValueArray, srcGpu, dstGpuMask, srcName, srcTarget, srcLevel, srcX, srcY, srcZ, dstName, dstTarget, dstLevel, dstX, dstY, dstZ, srcWidth, srcHeight, srcDepth, signalSemaphoreCount, signalSemaphoreArray, signalValueArray[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function AsyncCopyImageSubDataNVX(waitSemaphoreCount: Int32; waitSemaphoreArray: IntPtr; var waitValueArray: UInt64; srcGpu: UInt32; dstGpuMask: DummyFlags; srcName: UInt32; srcTarget: DummyEnum; srcLevel: Int32; srcX: Int32; srcY: Int32; srcZ: Int32; dstName: UInt32; dstTarget: DummyEnum; dstLevel: Int32; dstX: Int32; dstY: Int32; dstZ: Int32; srcWidth: Int32; srcHeight: Int32; srcDepth: Int32; signalSemaphoreCount: Int32; signalSemaphoreArray: IntPtr; var signalValueArray: UInt64): UInt32;
    begin
      Result := z_AsyncCopyImageSubDataNVX_ovr_60(waitSemaphoreCount, waitSemaphoreArray, waitValueArray, srcGpu, dstGpuMask, srcName, srcTarget, srcLevel, srcX, srcY, srcZ, dstName, dstTarget, dstLevel, dstX, dstY, dstZ, srcWidth, srcHeight, srcDepth, signalSemaphoreCount, signalSemaphoreArray, signalValueArray);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function AsyncCopyImageSubDataNVX(waitSemaphoreCount: Int32; waitSemaphoreArray: IntPtr; var waitValueArray: UInt64; srcGpu: UInt32; dstGpuMask: DummyFlags; srcName: UInt32; srcTarget: DummyEnum; srcLevel: Int32; srcX: Int32; srcY: Int32; srcZ: Int32; dstName: UInt32; dstTarget: DummyEnum; dstLevel: Int32; dstX: Int32; dstY: Int32; dstZ: Int32; srcWidth: Int32; srcHeight: Int32; srcDepth: Int32; signalSemaphoreCount: Int32; signalSemaphoreArray: IntPtr; signalValueArray: IntPtr): UInt32;
    begin
      Result := z_AsyncCopyImageSubDataNVX_ovr_62(waitSemaphoreCount, waitSemaphoreArray, waitValueArray, srcGpu, dstGpuMask, srcName, srcTarget, srcLevel, srcX, srcY, srcZ, dstName, dstTarget, dstLevel, dstX, dstY, dstZ, srcWidth, srcHeight, srcDepth, signalSemaphoreCount, signalSemaphoreArray, signalValueArray);
    end;
    public z_AsyncCopyImageSubDataNVX_ovr_72 := GetFuncOrNil&<function(waitSemaphoreCount: Int32; waitSemaphoreArray: IntPtr; waitValueArray: IntPtr; srcGpu: UInt32; dstGpuMask: DummyFlags; srcName: UInt32; srcTarget: DummyEnum; srcLevel: Int32; srcX: Int32; srcY: Int32; srcZ: Int32; dstName: UInt32; dstTarget: DummyEnum; dstLevel: Int32; dstX: Int32; dstY: Int32; dstZ: Int32; srcWidth: Int32; srcHeight: Int32; srcDepth: Int32; signalSemaphoreCount: Int32; var signalSemaphoreArray: UInt32; var signalValueArray: UInt64): UInt32>(z_AsyncCopyImageSubDataNVX_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function AsyncCopyImageSubDataNVX(waitSemaphoreCount: Int32; waitSemaphoreArray: IntPtr; waitValueArray: IntPtr; srcGpu: UInt32; dstGpuMask: DummyFlags; srcName: UInt32; srcTarget: DummyEnum; srcLevel: Int32; srcX: Int32; srcY: Int32; srcZ: Int32; dstName: UInt32; dstTarget: DummyEnum; dstLevel: Int32; dstX: Int32; dstY: Int32; dstZ: Int32; srcWidth: Int32; srcHeight: Int32; srcDepth: Int32; signalSemaphoreCount: Int32; signalSemaphoreArray: array of UInt32; signalValueArray: array of UInt64): UInt32;
    begin
      Result := z_AsyncCopyImageSubDataNVX_ovr_72(waitSemaphoreCount, waitSemaphoreArray, waitValueArray, srcGpu, dstGpuMask, srcName, srcTarget, srcLevel, srcX, srcY, srcZ, dstName, dstTarget, dstLevel, dstX, dstY, dstZ, srcWidth, srcHeight, srcDepth, signalSemaphoreCount, signalSemaphoreArray[0], signalValueArray[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function AsyncCopyImageSubDataNVX(waitSemaphoreCount: Int32; waitSemaphoreArray: IntPtr; waitValueArray: IntPtr; srcGpu: UInt32; dstGpuMask: DummyFlags; srcName: UInt32; srcTarget: DummyEnum; srcLevel: Int32; srcX: Int32; srcY: Int32; srcZ: Int32; dstName: UInt32; dstTarget: DummyEnum; dstLevel: Int32; dstX: Int32; dstY: Int32; dstZ: Int32; srcWidth: Int32; srcHeight: Int32; srcDepth: Int32; signalSemaphoreCount: Int32; signalSemaphoreArray: array of UInt32; var signalValueArray: UInt64): UInt32;
    begin
      Result := z_AsyncCopyImageSubDataNVX_ovr_72(waitSemaphoreCount, waitSemaphoreArray, waitValueArray, srcGpu, dstGpuMask, srcName, srcTarget, srcLevel, srcX, srcY, srcZ, dstName, dstTarget, dstLevel, dstX, dstY, dstZ, srcWidth, srcHeight, srcDepth, signalSemaphoreCount, signalSemaphoreArray[0], signalValueArray);
    end;
    public z_AsyncCopyImageSubDataNVX_ovr_74 := GetFuncOrNil&<function(waitSemaphoreCount: Int32; waitSemaphoreArray: IntPtr; waitValueArray: IntPtr; srcGpu: UInt32; dstGpuMask: DummyFlags; srcName: UInt32; srcTarget: DummyEnum; srcLevel: Int32; srcX: Int32; srcY: Int32; srcZ: Int32; dstName: UInt32; dstTarget: DummyEnum; dstLevel: Int32; dstX: Int32; dstY: Int32; dstZ: Int32; srcWidth: Int32; srcHeight: Int32; srcDepth: Int32; signalSemaphoreCount: Int32; var signalSemaphoreArray: UInt32; signalValueArray: IntPtr): UInt32>(z_AsyncCopyImageSubDataNVX_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function AsyncCopyImageSubDataNVX(waitSemaphoreCount: Int32; waitSemaphoreArray: IntPtr; waitValueArray: IntPtr; srcGpu: UInt32; dstGpuMask: DummyFlags; srcName: UInt32; srcTarget: DummyEnum; srcLevel: Int32; srcX: Int32; srcY: Int32; srcZ: Int32; dstName: UInt32; dstTarget: DummyEnum; dstLevel: Int32; dstX: Int32; dstY: Int32; dstZ: Int32; srcWidth: Int32; srcHeight: Int32; srcDepth: Int32; signalSemaphoreCount: Int32; signalSemaphoreArray: array of UInt32; signalValueArray: IntPtr): UInt32;
    begin
      Result := z_AsyncCopyImageSubDataNVX_ovr_74(waitSemaphoreCount, waitSemaphoreArray, waitValueArray, srcGpu, dstGpuMask, srcName, srcTarget, srcLevel, srcX, srcY, srcZ, dstName, dstTarget, dstLevel, dstX, dstY, dstZ, srcWidth, srcHeight, srcDepth, signalSemaphoreCount, signalSemaphoreArray[0], signalValueArray);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function AsyncCopyImageSubDataNVX(waitSemaphoreCount: Int32; waitSemaphoreArray: IntPtr; waitValueArray: IntPtr; srcGpu: UInt32; dstGpuMask: DummyFlags; srcName: UInt32; srcTarget: DummyEnum; srcLevel: Int32; srcX: Int32; srcY: Int32; srcZ: Int32; dstName: UInt32; dstTarget: DummyEnum; dstLevel: Int32; dstX: Int32; dstY: Int32; dstZ: Int32; srcWidth: Int32; srcHeight: Int32; srcDepth: Int32; signalSemaphoreCount: Int32; var signalSemaphoreArray: UInt32; signalValueArray: array of UInt64): UInt32;
    begin
      Result := z_AsyncCopyImageSubDataNVX_ovr_72(waitSemaphoreCount, waitSemaphoreArray, waitValueArray, srcGpu, dstGpuMask, srcName, srcTarget, srcLevel, srcX, srcY, srcZ, dstName, dstTarget, dstLevel, dstX, dstY, dstZ, srcWidth, srcHeight, srcDepth, signalSemaphoreCount, signalSemaphoreArray, signalValueArray[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function AsyncCopyImageSubDataNVX(waitSemaphoreCount: Int32; waitSemaphoreArray: IntPtr; waitValueArray: IntPtr; srcGpu: UInt32; dstGpuMask: DummyFlags; srcName: UInt32; srcTarget: DummyEnum; srcLevel: Int32; srcX: Int32; srcY: Int32; srcZ: Int32; dstName: UInt32; dstTarget: DummyEnum; dstLevel: Int32; dstX: Int32; dstY: Int32; dstZ: Int32; srcWidth: Int32; srcHeight: Int32; srcDepth: Int32; signalSemaphoreCount: Int32; var signalSemaphoreArray: UInt32; var signalValueArray: UInt64): UInt32;
    begin
      Result := z_AsyncCopyImageSubDataNVX_ovr_72(waitSemaphoreCount, waitSemaphoreArray, waitValueArray, srcGpu, dstGpuMask, srcName, srcTarget, srcLevel, srcX, srcY, srcZ, dstName, dstTarget, dstLevel, dstX, dstY, dstZ, srcWidth, srcHeight, srcDepth, signalSemaphoreCount, signalSemaphoreArray, signalValueArray);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function AsyncCopyImageSubDataNVX(waitSemaphoreCount: Int32; waitSemaphoreArray: IntPtr; waitValueArray: IntPtr; srcGpu: UInt32; dstGpuMask: DummyFlags; srcName: UInt32; srcTarget: DummyEnum; srcLevel: Int32; srcX: Int32; srcY: Int32; srcZ: Int32; dstName: UInt32; dstTarget: DummyEnum; dstLevel: Int32; dstX: Int32; dstY: Int32; dstZ: Int32; srcWidth: Int32; srcHeight: Int32; srcDepth: Int32; signalSemaphoreCount: Int32; var signalSemaphoreArray: UInt32; signalValueArray: IntPtr): UInt32;
    begin
      Result := z_AsyncCopyImageSubDataNVX_ovr_74(waitSemaphoreCount, waitSemaphoreArray, waitValueArray, srcGpu, dstGpuMask, srcName, srcTarget, srcLevel, srcX, srcY, srcZ, dstName, dstTarget, dstLevel, dstX, dstY, dstZ, srcWidth, srcHeight, srcDepth, signalSemaphoreCount, signalSemaphoreArray, signalValueArray);
    end;
    public z_AsyncCopyImageSubDataNVX_ovr_78 := GetFuncOrNil&<function(waitSemaphoreCount: Int32; waitSemaphoreArray: IntPtr; waitValueArray: IntPtr; srcGpu: UInt32; dstGpuMask: DummyFlags; srcName: UInt32; srcTarget: DummyEnum; srcLevel: Int32; srcX: Int32; srcY: Int32; srcZ: Int32; dstName: UInt32; dstTarget: DummyEnum; dstLevel: Int32; dstX: Int32; dstY: Int32; dstZ: Int32; srcWidth: Int32; srcHeight: Int32; srcDepth: Int32; signalSemaphoreCount: Int32; signalSemaphoreArray: IntPtr; var signalValueArray: UInt64): UInt32>(z_AsyncCopyImageSubDataNVX_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function AsyncCopyImageSubDataNVX(waitSemaphoreCount: Int32; waitSemaphoreArray: IntPtr; waitValueArray: IntPtr; srcGpu: UInt32; dstGpuMask: DummyFlags; srcName: UInt32; srcTarget: DummyEnum; srcLevel: Int32; srcX: Int32; srcY: Int32; srcZ: Int32; dstName: UInt32; dstTarget: DummyEnum; dstLevel: Int32; dstX: Int32; dstY: Int32; dstZ: Int32; srcWidth: Int32; srcHeight: Int32; srcDepth: Int32; signalSemaphoreCount: Int32; signalSemaphoreArray: IntPtr; signalValueArray: array of UInt64): UInt32;
    begin
      Result := z_AsyncCopyImageSubDataNVX_ovr_78(waitSemaphoreCount, waitSemaphoreArray, waitValueArray, srcGpu, dstGpuMask, srcName, srcTarget, srcLevel, srcX, srcY, srcZ, dstName, dstTarget, dstLevel, dstX, dstY, dstZ, srcWidth, srcHeight, srcDepth, signalSemaphoreCount, signalSemaphoreArray, signalValueArray[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function AsyncCopyImageSubDataNVX(waitSemaphoreCount: Int32; waitSemaphoreArray: IntPtr; waitValueArray: IntPtr; srcGpu: UInt32; dstGpuMask: DummyFlags; srcName: UInt32; srcTarget: DummyEnum; srcLevel: Int32; srcX: Int32; srcY: Int32; srcZ: Int32; dstName: UInt32; dstTarget: DummyEnum; dstLevel: Int32; dstX: Int32; dstY: Int32; dstZ: Int32; srcWidth: Int32; srcHeight: Int32; srcDepth: Int32; signalSemaphoreCount: Int32; signalSemaphoreArray: IntPtr; var signalValueArray: UInt64): UInt32;
    begin
      Result := z_AsyncCopyImageSubDataNVX_ovr_78(waitSemaphoreCount, waitSemaphoreArray, waitValueArray, srcGpu, dstGpuMask, srcName, srcTarget, srcLevel, srcX, srcY, srcZ, dstName, dstTarget, dstLevel, dstX, dstY, dstZ, srcWidth, srcHeight, srcDepth, signalSemaphoreCount, signalSemaphoreArray, signalValueArray);
    end;
    public z_AsyncCopyImageSubDataNVX_ovr_80 := GetFuncOrNil&<function(waitSemaphoreCount: Int32; waitSemaphoreArray: IntPtr; waitValueArray: IntPtr; srcGpu: UInt32; dstGpuMask: DummyFlags; srcName: UInt32; srcTarget: DummyEnum; srcLevel: Int32; srcX: Int32; srcY: Int32; srcZ: Int32; dstName: UInt32; dstTarget: DummyEnum; dstLevel: Int32; dstX: Int32; dstY: Int32; dstZ: Int32; srcWidth: Int32; srcHeight: Int32; srcDepth: Int32; signalSemaphoreCount: Int32; signalSemaphoreArray: IntPtr; signalValueArray: IntPtr): UInt32>(z_AsyncCopyImageSubDataNVX_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function AsyncCopyImageSubDataNVX(waitSemaphoreCount: Int32; waitSemaphoreArray: IntPtr; waitValueArray: IntPtr; srcGpu: UInt32; dstGpuMask: DummyFlags; srcName: UInt32; srcTarget: DummyEnum; srcLevel: Int32; srcX: Int32; srcY: Int32; srcZ: Int32; dstName: UInt32; dstTarget: DummyEnum; dstLevel: Int32; dstX: Int32; dstY: Int32; dstZ: Int32; srcWidth: Int32; srcHeight: Int32; srcDepth: Int32; signalSemaphoreCount: Int32; signalSemaphoreArray: IntPtr; signalValueArray: IntPtr): UInt32;
    begin
      Result := z_AsyncCopyImageSubDataNVX_ovr_80(waitSemaphoreCount, waitSemaphoreArray, waitValueArray, srcGpu, dstGpuMask, srcName, srcTarget, srcLevel, srcX, srcY, srcZ, dstName, dstTarget, dstLevel, dstX, dstY, dstZ, srcWidth, srcHeight, srcDepth, signalSemaphoreCount, signalSemaphoreArray, signalValueArray);
    end;
    
  end;
  
  glProgressFenceNVX = sealed class
    public static function GetFuncAdr([MarshalAs(UnmanagedType.LPStr)] lpszProc: string): IntPtr;
    external 'opengl32.dll' name 'wglGetProcAddress';
    public static function GetFuncOrNil<T>(fadr: IntPtr) :=
    fadr=IntPtr.Zero ? default(T) :
    Marshal.GetDelegateForFunctionPointer&<T>(fadr);
    
    public z_CreateProgressFenceNVX_adr := GetFuncAdr('glCreateProgressFenceNVX');
    public z_CreateProgressFenceNVX_ovr_0 := GetFuncOrNil&<function: UInt32>(z_CreateProgressFenceNVX_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function CreateProgressFenceNVX: UInt32;
    begin
      Result := z_CreateProgressFenceNVX_ovr_0;
    end;
    
    public z_SignalSemaphoreui64NVX_adr := GetFuncAdr('glSignalSemaphoreui64NVX');
    public z_SignalSemaphoreui64NVX_ovr_0 := GetFuncOrNil&<procedure(signalGpu: UInt32; fenceObjectCount: Int32; var semaphoreArray: UInt32; var fenceValueArray: UInt64)>(z_SignalSemaphoreui64NVX_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure SignalSemaphoreui64NVX(signalGpu: UInt32; fenceObjectCount: Int32; semaphoreArray: array of UInt32; fenceValueArray: array of UInt64);
    begin
      z_SignalSemaphoreui64NVX_ovr_0(signalGpu, fenceObjectCount, semaphoreArray[0], fenceValueArray[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure SignalSemaphoreui64NVX(signalGpu: UInt32; fenceObjectCount: Int32; semaphoreArray: array of UInt32; var fenceValueArray: UInt64);
    begin
      z_SignalSemaphoreui64NVX_ovr_0(signalGpu, fenceObjectCount, semaphoreArray[0], fenceValueArray);
    end;
    public z_SignalSemaphoreui64NVX_ovr_2 := GetFuncOrNil&<procedure(signalGpu: UInt32; fenceObjectCount: Int32; var semaphoreArray: UInt32; fenceValueArray: IntPtr)>(z_SignalSemaphoreui64NVX_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure SignalSemaphoreui64NVX(signalGpu: UInt32; fenceObjectCount: Int32; semaphoreArray: array of UInt32; fenceValueArray: IntPtr);
    begin
      z_SignalSemaphoreui64NVX_ovr_2(signalGpu, fenceObjectCount, semaphoreArray[0], fenceValueArray);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure SignalSemaphoreui64NVX(signalGpu: UInt32; fenceObjectCount: Int32; var semaphoreArray: UInt32; fenceValueArray: array of UInt64);
    begin
      z_SignalSemaphoreui64NVX_ovr_0(signalGpu, fenceObjectCount, semaphoreArray, fenceValueArray[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure SignalSemaphoreui64NVX(signalGpu: UInt32; fenceObjectCount: Int32; var semaphoreArray: UInt32; var fenceValueArray: UInt64);
    begin
      z_SignalSemaphoreui64NVX_ovr_0(signalGpu, fenceObjectCount, semaphoreArray, fenceValueArray);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure SignalSemaphoreui64NVX(signalGpu: UInt32; fenceObjectCount: Int32; var semaphoreArray: UInt32; fenceValueArray: IntPtr);
    begin
      z_SignalSemaphoreui64NVX_ovr_2(signalGpu, fenceObjectCount, semaphoreArray, fenceValueArray);
    end;
    public z_SignalSemaphoreui64NVX_ovr_6 := GetFuncOrNil&<procedure(signalGpu: UInt32; fenceObjectCount: Int32; semaphoreArray: IntPtr; var fenceValueArray: UInt64)>(z_SignalSemaphoreui64NVX_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure SignalSemaphoreui64NVX(signalGpu: UInt32; fenceObjectCount: Int32; semaphoreArray: IntPtr; fenceValueArray: array of UInt64);
    begin
      z_SignalSemaphoreui64NVX_ovr_6(signalGpu, fenceObjectCount, semaphoreArray, fenceValueArray[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure SignalSemaphoreui64NVX(signalGpu: UInt32; fenceObjectCount: Int32; semaphoreArray: IntPtr; var fenceValueArray: UInt64);
    begin
      z_SignalSemaphoreui64NVX_ovr_6(signalGpu, fenceObjectCount, semaphoreArray, fenceValueArray);
    end;
    public z_SignalSemaphoreui64NVX_ovr_8 := GetFuncOrNil&<procedure(signalGpu: UInt32; fenceObjectCount: Int32; semaphoreArray: IntPtr; fenceValueArray: IntPtr)>(z_SignalSemaphoreui64NVX_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure SignalSemaphoreui64NVX(signalGpu: UInt32; fenceObjectCount: Int32; semaphoreArray: IntPtr; fenceValueArray: IntPtr);
    begin
      z_SignalSemaphoreui64NVX_ovr_8(signalGpu, fenceObjectCount, semaphoreArray, fenceValueArray);
    end;
    
    public z_WaitSemaphoreui64NVX_adr := GetFuncAdr('glWaitSemaphoreui64NVX');
    public z_WaitSemaphoreui64NVX_ovr_0 := GetFuncOrNil&<procedure(waitGpu: UInt32; fenceObjectCount: Int32; var semaphoreArray: UInt32; var fenceValueArray: UInt64)>(z_WaitSemaphoreui64NVX_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure WaitSemaphoreui64NVX(waitGpu: UInt32; fenceObjectCount: Int32; semaphoreArray: array of UInt32; fenceValueArray: array of UInt64);
    begin
      z_WaitSemaphoreui64NVX_ovr_0(waitGpu, fenceObjectCount, semaphoreArray[0], fenceValueArray[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure WaitSemaphoreui64NVX(waitGpu: UInt32; fenceObjectCount: Int32; semaphoreArray: array of UInt32; var fenceValueArray: UInt64);
    begin
      z_WaitSemaphoreui64NVX_ovr_0(waitGpu, fenceObjectCount, semaphoreArray[0], fenceValueArray);
    end;
    public z_WaitSemaphoreui64NVX_ovr_2 := GetFuncOrNil&<procedure(waitGpu: UInt32; fenceObjectCount: Int32; var semaphoreArray: UInt32; fenceValueArray: IntPtr)>(z_WaitSemaphoreui64NVX_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure WaitSemaphoreui64NVX(waitGpu: UInt32; fenceObjectCount: Int32; semaphoreArray: array of UInt32; fenceValueArray: IntPtr);
    begin
      z_WaitSemaphoreui64NVX_ovr_2(waitGpu, fenceObjectCount, semaphoreArray[0], fenceValueArray);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure WaitSemaphoreui64NVX(waitGpu: UInt32; fenceObjectCount: Int32; var semaphoreArray: UInt32; fenceValueArray: array of UInt64);
    begin
      z_WaitSemaphoreui64NVX_ovr_0(waitGpu, fenceObjectCount, semaphoreArray, fenceValueArray[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure WaitSemaphoreui64NVX(waitGpu: UInt32; fenceObjectCount: Int32; var semaphoreArray: UInt32; var fenceValueArray: UInt64);
    begin
      z_WaitSemaphoreui64NVX_ovr_0(waitGpu, fenceObjectCount, semaphoreArray, fenceValueArray);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure WaitSemaphoreui64NVX(waitGpu: UInt32; fenceObjectCount: Int32; var semaphoreArray: UInt32; fenceValueArray: IntPtr);
    begin
      z_WaitSemaphoreui64NVX_ovr_2(waitGpu, fenceObjectCount, semaphoreArray, fenceValueArray);
    end;
    public z_WaitSemaphoreui64NVX_ovr_6 := GetFuncOrNil&<procedure(waitGpu: UInt32; fenceObjectCount: Int32; semaphoreArray: IntPtr; var fenceValueArray: UInt64)>(z_WaitSemaphoreui64NVX_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure WaitSemaphoreui64NVX(waitGpu: UInt32; fenceObjectCount: Int32; semaphoreArray: IntPtr; fenceValueArray: array of UInt64);
    begin
      z_WaitSemaphoreui64NVX_ovr_6(waitGpu, fenceObjectCount, semaphoreArray, fenceValueArray[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure WaitSemaphoreui64NVX(waitGpu: UInt32; fenceObjectCount: Int32; semaphoreArray: IntPtr; var fenceValueArray: UInt64);
    begin
      z_WaitSemaphoreui64NVX_ovr_6(waitGpu, fenceObjectCount, semaphoreArray, fenceValueArray);
    end;
    public z_WaitSemaphoreui64NVX_ovr_8 := GetFuncOrNil&<procedure(waitGpu: UInt32; fenceObjectCount: Int32; semaphoreArray: IntPtr; fenceValueArray: IntPtr)>(z_WaitSemaphoreui64NVX_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure WaitSemaphoreui64NVX(waitGpu: UInt32; fenceObjectCount: Int32; semaphoreArray: IntPtr; fenceValueArray: IntPtr);
    begin
      z_WaitSemaphoreui64NVX_ovr_8(waitGpu, fenceObjectCount, semaphoreArray, fenceValueArray);
    end;
    
    public z_ClientWaitSemaphoreui64NVX_adr := GetFuncAdr('glClientWaitSemaphoreui64NVX');
    public z_ClientWaitSemaphoreui64NVX_ovr_0 := GetFuncOrNil&<procedure(fenceObjectCount: Int32; var semaphoreArray: UInt32; var fenceValueArray: UInt64)>(z_ClientWaitSemaphoreui64NVX_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ClientWaitSemaphoreui64NVX(fenceObjectCount: Int32; semaphoreArray: array of UInt32; fenceValueArray: array of UInt64);
    begin
      z_ClientWaitSemaphoreui64NVX_ovr_0(fenceObjectCount, semaphoreArray[0], fenceValueArray[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ClientWaitSemaphoreui64NVX(fenceObjectCount: Int32; semaphoreArray: array of UInt32; var fenceValueArray: UInt64);
    begin
      z_ClientWaitSemaphoreui64NVX_ovr_0(fenceObjectCount, semaphoreArray[0], fenceValueArray);
    end;
    public z_ClientWaitSemaphoreui64NVX_ovr_2 := GetFuncOrNil&<procedure(fenceObjectCount: Int32; var semaphoreArray: UInt32; fenceValueArray: IntPtr)>(z_ClientWaitSemaphoreui64NVX_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ClientWaitSemaphoreui64NVX(fenceObjectCount: Int32; semaphoreArray: array of UInt32; fenceValueArray: IntPtr);
    begin
      z_ClientWaitSemaphoreui64NVX_ovr_2(fenceObjectCount, semaphoreArray[0], fenceValueArray);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ClientWaitSemaphoreui64NVX(fenceObjectCount: Int32; var semaphoreArray: UInt32; fenceValueArray: array of UInt64);
    begin
      z_ClientWaitSemaphoreui64NVX_ovr_0(fenceObjectCount, semaphoreArray, fenceValueArray[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ClientWaitSemaphoreui64NVX(fenceObjectCount: Int32; var semaphoreArray: UInt32; var fenceValueArray: UInt64);
    begin
      z_ClientWaitSemaphoreui64NVX_ovr_0(fenceObjectCount, semaphoreArray, fenceValueArray);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ClientWaitSemaphoreui64NVX(fenceObjectCount: Int32; var semaphoreArray: UInt32; fenceValueArray: IntPtr);
    begin
      z_ClientWaitSemaphoreui64NVX_ovr_2(fenceObjectCount, semaphoreArray, fenceValueArray);
    end;
    public z_ClientWaitSemaphoreui64NVX_ovr_6 := GetFuncOrNil&<procedure(fenceObjectCount: Int32; semaphoreArray: IntPtr; var fenceValueArray: UInt64)>(z_ClientWaitSemaphoreui64NVX_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ClientWaitSemaphoreui64NVX(fenceObjectCount: Int32; semaphoreArray: IntPtr; fenceValueArray: array of UInt64);
    begin
      z_ClientWaitSemaphoreui64NVX_ovr_6(fenceObjectCount, semaphoreArray, fenceValueArray[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ClientWaitSemaphoreui64NVX(fenceObjectCount: Int32; semaphoreArray: IntPtr; var fenceValueArray: UInt64);
    begin
      z_ClientWaitSemaphoreui64NVX_ovr_6(fenceObjectCount, semaphoreArray, fenceValueArray);
    end;
    public z_ClientWaitSemaphoreui64NVX_ovr_8 := GetFuncOrNil&<procedure(fenceObjectCount: Int32; semaphoreArray: IntPtr; fenceValueArray: IntPtr)>(z_ClientWaitSemaphoreui64NVX_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ClientWaitSemaphoreui64NVX(fenceObjectCount: Int32; semaphoreArray: IntPtr; fenceValueArray: IntPtr);
    begin
      z_ClientWaitSemaphoreui64NVX_ovr_8(fenceObjectCount, semaphoreArray, fenceValueArray);
    end;
    
  end;
  
  glMemoryAttachmentNV = sealed class
    public static function GetFuncAdr([MarshalAs(UnmanagedType.LPStr)] lpszProc: string): IntPtr;
    external 'opengl32.dll' name 'wglGetProcAddress';
    public static function GetFuncOrNil<T>(fadr: IntPtr) :=
    fadr=IntPtr.Zero ? default(T) :
    Marshal.GetDelegateForFunctionPointer&<T>(fadr);
    
    public z_GetMemoryObjectDetachedResourcesuivNV_adr := GetFuncAdr('glGetMemoryObjectDetachedResourcesuivNV');
    public z_GetMemoryObjectDetachedResourcesuivNV_ovr_0 := GetFuncOrNil&<procedure(memory: UInt32; pname: DummyEnum; first: Int32; count: Int32; var &params: UInt32)>(z_GetMemoryObjectDetachedResourcesuivNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetMemoryObjectDetachedResourcesuivNV(memory: UInt32; pname: DummyEnum; first: Int32; count: Int32; &params: array of UInt32);
    begin
      z_GetMemoryObjectDetachedResourcesuivNV_ovr_0(memory, pname, first, count, &params[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetMemoryObjectDetachedResourcesuivNV(memory: UInt32; pname: DummyEnum; first: Int32; count: Int32; var &params: UInt32);
    begin
      z_GetMemoryObjectDetachedResourcesuivNV_ovr_0(memory, pname, first, count, &params);
    end;
    public z_GetMemoryObjectDetachedResourcesuivNV_ovr_2 := GetFuncOrNil&<procedure(memory: UInt32; pname: DummyEnum; first: Int32; count: Int32; &params: IntPtr)>(z_GetMemoryObjectDetachedResourcesuivNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetMemoryObjectDetachedResourcesuivNV(memory: UInt32; pname: DummyEnum; first: Int32; count: Int32; &params: IntPtr);
    begin
      z_GetMemoryObjectDetachedResourcesuivNV_ovr_2(memory, pname, first, count, &params);
    end;
    
    public z_ResetMemoryObjectParameterNV_adr := GetFuncAdr('glResetMemoryObjectParameterNV');
    public z_ResetMemoryObjectParameterNV_ovr_0 := GetFuncOrNil&<procedure(memory: UInt32; pname: DummyEnum)>(z_ResetMemoryObjectParameterNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ResetMemoryObjectParameterNV(memory: UInt32; pname: DummyEnum);
    begin
      z_ResetMemoryObjectParameterNV_ovr_0(memory, pname);
    end;
    
    public z_TexAttachMemoryNV_adr := GetFuncAdr('glTexAttachMemoryNV');
    public z_TexAttachMemoryNV_ovr_0 := GetFuncOrNil&<procedure(target: TextureTarget; memory: UInt32; offset: UInt64)>(z_TexAttachMemoryNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TexAttachMemoryNV(target: TextureTarget; memory: UInt32; offset: UInt64);
    begin
      z_TexAttachMemoryNV_ovr_0(target, memory, offset);
    end;
    
    public z_BufferAttachMemoryNV_adr := GetFuncAdr('glBufferAttachMemoryNV');
    public z_BufferAttachMemoryNV_ovr_0 := GetFuncOrNil&<procedure(target: BufferTargetARB; memory: UInt32; offset: UInt64)>(z_BufferAttachMemoryNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure BufferAttachMemoryNV(target: BufferTargetARB; memory: UInt32; offset: UInt64);
    begin
      z_BufferAttachMemoryNV_ovr_0(target, memory, offset);
    end;
    
    public z_TextureAttachMemoryNV_adr := GetFuncAdr('glTextureAttachMemoryNV');
    public z_TextureAttachMemoryNV_ovr_0 := GetFuncOrNil&<procedure(texture: UInt32; memory: UInt32; offset: UInt64)>(z_TextureAttachMemoryNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TextureAttachMemoryNV(texture: UInt32; memory: UInt32; offset: UInt64);
    begin
      z_TextureAttachMemoryNV_ovr_0(texture, memory, offset);
    end;
    
    public z_NamedBufferAttachMemoryNV_adr := GetFuncAdr('glNamedBufferAttachMemoryNV');
    public z_NamedBufferAttachMemoryNV_ovr_0 := GetFuncOrNil&<procedure(buffer: UInt32; memory: UInt32; offset: UInt64)>(z_NamedBufferAttachMemoryNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure NamedBufferAttachMemoryNV(buffer: UInt32; memory: UInt32; offset: UInt64);
    begin
      z_NamedBufferAttachMemoryNV_ovr_0(buffer, memory, offset);
    end;
    
  end;
  
  glMeshShaderNV = sealed class
    public static function GetFuncAdr([MarshalAs(UnmanagedType.LPStr)] lpszProc: string): IntPtr;
    external 'opengl32.dll' name 'wglGetProcAddress';
    public static function GetFuncOrNil<T>(fadr: IntPtr) :=
    fadr=IntPtr.Zero ? default(T) :
    Marshal.GetDelegateForFunctionPointer&<T>(fadr);
    
    public z_DrawMeshTasksNV_adr := GetFuncAdr('glDrawMeshTasksNV');
    public z_DrawMeshTasksNV_ovr_0 := GetFuncOrNil&<procedure(first: UInt32; count: UInt32)>(z_DrawMeshTasksNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure DrawMeshTasksNV(first: UInt32; count: UInt32);
    begin
      z_DrawMeshTasksNV_ovr_0(first, count);
    end;
    
    public z_DrawMeshTasksIndirectNV_adr := GetFuncAdr('glDrawMeshTasksIndirectNV');
    public z_DrawMeshTasksIndirectNV_ovr_0 := GetFuncOrNil&<procedure(indirect: IntPtr)>(z_DrawMeshTasksIndirectNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure DrawMeshTasksIndirectNV(indirect: IntPtr);
    begin
      z_DrawMeshTasksIndirectNV_ovr_0(indirect);
    end;
    
    public z_MultiDrawMeshTasksIndirectNV_adr := GetFuncAdr('glMultiDrawMeshTasksIndirectNV');
    public z_MultiDrawMeshTasksIndirectNV_ovr_0 := GetFuncOrNil&<procedure(indirect: IntPtr; drawcount: Int32; stride: Int32)>(z_MultiDrawMeshTasksIndirectNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiDrawMeshTasksIndirectNV(indirect: IntPtr; drawcount: Int32; stride: Int32);
    begin
      z_MultiDrawMeshTasksIndirectNV_ovr_0(indirect, drawcount, stride);
    end;
    
    public z_MultiDrawMeshTasksIndirectCountNV_adr := GetFuncAdr('glMultiDrawMeshTasksIndirectCountNV');
    public z_MultiDrawMeshTasksIndirectCountNV_ovr_0 := GetFuncOrNil&<procedure(indirect: IntPtr; drawcount: IntPtr; maxdrawcount: Int32; stride: Int32)>(z_MultiDrawMeshTasksIndirectCountNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiDrawMeshTasksIndirectCountNV(indirect: IntPtr; drawcount: IntPtr; maxdrawcount: Int32; stride: Int32);
    begin
      z_MultiDrawMeshTasksIndirectCountNV_ovr_0(indirect, drawcount, maxdrawcount, stride);
    end;
    
  end;
  
  glOcclusionQueryNV = sealed class
    public static function GetFuncAdr([MarshalAs(UnmanagedType.LPStr)] lpszProc: string): IntPtr;
    external 'opengl32.dll' name 'wglGetProcAddress';
    public static function GetFuncOrNil<T>(fadr: IntPtr) :=
    fadr=IntPtr.Zero ? default(T) :
    Marshal.GetDelegateForFunctionPointer&<T>(fadr);
    
    public z_GenOcclusionQueriesNV_adr := GetFuncAdr('glGenOcclusionQueriesNV');
    public z_GenOcclusionQueriesNV_ovr_0 := GetFuncOrNil&<procedure(n: Int32; var ids: UInt32)>(z_GenOcclusionQueriesNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GenOcclusionQueriesNV(n: Int32; ids: array of UInt32);
    begin
      z_GenOcclusionQueriesNV_ovr_0(n, ids[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GenOcclusionQueriesNV(n: Int32; var ids: UInt32);
    begin
      z_GenOcclusionQueriesNV_ovr_0(n, ids);
    end;
    public z_GenOcclusionQueriesNV_ovr_2 := GetFuncOrNil&<procedure(n: Int32; ids: IntPtr)>(z_GenOcclusionQueriesNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GenOcclusionQueriesNV(n: Int32; ids: IntPtr);
    begin
      z_GenOcclusionQueriesNV_ovr_2(n, ids);
    end;
    
    public z_DeleteOcclusionQueriesNV_adr := GetFuncAdr('glDeleteOcclusionQueriesNV');
    public z_DeleteOcclusionQueriesNV_ovr_0 := GetFuncOrNil&<procedure(n: Int32; var ids: UInt32)>(z_DeleteOcclusionQueriesNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure DeleteOcclusionQueriesNV(n: Int32; ids: array of UInt32);
    begin
      z_DeleteOcclusionQueriesNV_ovr_0(n, ids[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure DeleteOcclusionQueriesNV(n: Int32; var ids: UInt32);
    begin
      z_DeleteOcclusionQueriesNV_ovr_0(n, ids);
    end;
    public z_DeleteOcclusionQueriesNV_ovr_2 := GetFuncOrNil&<procedure(n: Int32; ids: IntPtr)>(z_DeleteOcclusionQueriesNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure DeleteOcclusionQueriesNV(n: Int32; ids: IntPtr);
    begin
      z_DeleteOcclusionQueriesNV_ovr_2(n, ids);
    end;
    
    public z_IsOcclusionQueryNV_adr := GetFuncAdr('glIsOcclusionQueryNV');
    public z_IsOcclusionQueryNV_ovr_0 := GetFuncOrNil&<function(id: UInt32): boolean>(z_IsOcclusionQueryNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function IsOcclusionQueryNV(id: UInt32): boolean;
    begin
      Result := z_IsOcclusionQueryNV_ovr_0(id);
    end;
    
    public z_BeginOcclusionQueryNV_adr := GetFuncAdr('glBeginOcclusionQueryNV');
    public z_BeginOcclusionQueryNV_ovr_0 := GetFuncOrNil&<procedure(id: UInt32)>(z_BeginOcclusionQueryNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure BeginOcclusionQueryNV(id: UInt32);
    begin
      z_BeginOcclusionQueryNV_ovr_0(id);
    end;
    
    public z_EndOcclusionQueryNV_adr := GetFuncAdr('glEndOcclusionQueryNV');
    public z_EndOcclusionQueryNV_ovr_0 := GetFuncOrNil&<procedure>(z_EndOcclusionQueryNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure EndOcclusionQueryNV;
    begin
      z_EndOcclusionQueryNV_ovr_0;
    end;
    
    public z_GetOcclusionQueryivNV_adr := GetFuncAdr('glGetOcclusionQueryivNV');
    public z_GetOcclusionQueryivNV_ovr_0 := GetFuncOrNil&<procedure(id: UInt32; pname: OcclusionQueryParameterNameNV; var &params: Int32)>(z_GetOcclusionQueryivNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetOcclusionQueryivNV(id: UInt32; pname: OcclusionQueryParameterNameNV; &params: array of Int32);
    begin
      z_GetOcclusionQueryivNV_ovr_0(id, pname, &params[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetOcclusionQueryivNV(id: UInt32; pname: OcclusionQueryParameterNameNV; var &params: Int32);
    begin
      z_GetOcclusionQueryivNV_ovr_0(id, pname, &params);
    end;
    public z_GetOcclusionQueryivNV_ovr_2 := GetFuncOrNil&<procedure(id: UInt32; pname: OcclusionQueryParameterNameNV; &params: IntPtr)>(z_GetOcclusionQueryivNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetOcclusionQueryivNV(id: UInt32; pname: OcclusionQueryParameterNameNV; &params: IntPtr);
    begin
      z_GetOcclusionQueryivNV_ovr_2(id, pname, &params);
    end;
    
    public z_GetOcclusionQueryuivNV_adr := GetFuncAdr('glGetOcclusionQueryuivNV');
    public z_GetOcclusionQueryuivNV_ovr_0 := GetFuncOrNil&<procedure(id: UInt32; pname: OcclusionQueryParameterNameNV; var &params: UInt32)>(z_GetOcclusionQueryuivNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetOcclusionQueryuivNV(id: UInt32; pname: OcclusionQueryParameterNameNV; &params: array of UInt32);
    begin
      z_GetOcclusionQueryuivNV_ovr_0(id, pname, &params[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetOcclusionQueryuivNV(id: UInt32; pname: OcclusionQueryParameterNameNV; var &params: UInt32);
    begin
      z_GetOcclusionQueryuivNV_ovr_0(id, pname, &params);
    end;
    public z_GetOcclusionQueryuivNV_ovr_2 := GetFuncOrNil&<procedure(id: UInt32; pname: OcclusionQueryParameterNameNV; &params: IntPtr)>(z_GetOcclusionQueryuivNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetOcclusionQueryuivNV(id: UInt32; pname: OcclusionQueryParameterNameNV; &params: IntPtr);
    begin
      z_GetOcclusionQueryuivNV_ovr_2(id, pname, &params);
    end;
    
  end;
  
  glParameterBufferObjectNV = sealed class
    public static function GetFuncAdr([MarshalAs(UnmanagedType.LPStr)] lpszProc: string): IntPtr;
    external 'opengl32.dll' name 'wglGetProcAddress';
    public static function GetFuncOrNil<T>(fadr: IntPtr) :=
    fadr=IntPtr.Zero ? default(T) :
    Marshal.GetDelegateForFunctionPointer&<T>(fadr);
    
    public z_ProgramBufferParametersfvNV_adr := GetFuncAdr('glProgramBufferParametersfvNV');
    public z_ProgramBufferParametersfvNV_ovr_0 := GetFuncOrNil&<procedure(target: ProgramTarget; bindingIndex: UInt32; wordIndex: UInt32; count: Int32; var &params: single)>(z_ProgramBufferParametersfvNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramBufferParametersfvNV(target: ProgramTarget; bindingIndex: UInt32; wordIndex: UInt32; count: Int32; &params: array of single);
    begin
      z_ProgramBufferParametersfvNV_ovr_0(target, bindingIndex, wordIndex, count, &params[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramBufferParametersfvNV(target: ProgramTarget; bindingIndex: UInt32; wordIndex: UInt32; count: Int32; var &params: single);
    begin
      z_ProgramBufferParametersfvNV_ovr_0(target, bindingIndex, wordIndex, count, &params);
    end;
    public z_ProgramBufferParametersfvNV_ovr_2 := GetFuncOrNil&<procedure(target: ProgramTarget; bindingIndex: UInt32; wordIndex: UInt32; count: Int32; &params: IntPtr)>(z_ProgramBufferParametersfvNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramBufferParametersfvNV(target: ProgramTarget; bindingIndex: UInt32; wordIndex: UInt32; count: Int32; &params: IntPtr);
    begin
      z_ProgramBufferParametersfvNV_ovr_2(target, bindingIndex, wordIndex, count, &params);
    end;
    
    public z_ProgramBufferParametersIivNV_adr := GetFuncAdr('glProgramBufferParametersIivNV');
    public z_ProgramBufferParametersIivNV_ovr_0 := GetFuncOrNil&<procedure(target: ProgramTarget; bindingIndex: UInt32; wordIndex: UInt32; count: Int32; var &params: Int32)>(z_ProgramBufferParametersIivNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramBufferParametersIivNV(target: ProgramTarget; bindingIndex: UInt32; wordIndex: UInt32; count: Int32; &params: array of Int32);
    begin
      z_ProgramBufferParametersIivNV_ovr_0(target, bindingIndex, wordIndex, count, &params[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramBufferParametersIivNV(target: ProgramTarget; bindingIndex: UInt32; wordIndex: UInt32; count: Int32; var &params: Int32);
    begin
      z_ProgramBufferParametersIivNV_ovr_0(target, bindingIndex, wordIndex, count, &params);
    end;
    public z_ProgramBufferParametersIivNV_ovr_2 := GetFuncOrNil&<procedure(target: ProgramTarget; bindingIndex: UInt32; wordIndex: UInt32; count: Int32; &params: IntPtr)>(z_ProgramBufferParametersIivNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramBufferParametersIivNV(target: ProgramTarget; bindingIndex: UInt32; wordIndex: UInt32; count: Int32; &params: IntPtr);
    begin
      z_ProgramBufferParametersIivNV_ovr_2(target, bindingIndex, wordIndex, count, &params);
    end;
    
    public z_ProgramBufferParametersIuivNV_adr := GetFuncAdr('glProgramBufferParametersIuivNV');
    public z_ProgramBufferParametersIuivNV_ovr_0 := GetFuncOrNil&<procedure(target: ProgramTarget; bindingIndex: UInt32; wordIndex: UInt32; count: Int32; var &params: UInt32)>(z_ProgramBufferParametersIuivNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramBufferParametersIuivNV(target: ProgramTarget; bindingIndex: UInt32; wordIndex: UInt32; count: Int32; &params: array of UInt32);
    begin
      z_ProgramBufferParametersIuivNV_ovr_0(target, bindingIndex, wordIndex, count, &params[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramBufferParametersIuivNV(target: ProgramTarget; bindingIndex: UInt32; wordIndex: UInt32; count: Int32; var &params: UInt32);
    begin
      z_ProgramBufferParametersIuivNV_ovr_0(target, bindingIndex, wordIndex, count, &params);
    end;
    public z_ProgramBufferParametersIuivNV_ovr_2 := GetFuncOrNil&<procedure(target: ProgramTarget; bindingIndex: UInt32; wordIndex: UInt32; count: Int32; &params: IntPtr)>(z_ProgramBufferParametersIuivNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramBufferParametersIuivNV(target: ProgramTarget; bindingIndex: UInt32; wordIndex: UInt32; count: Int32; &params: IntPtr);
    begin
      z_ProgramBufferParametersIuivNV_ovr_2(target, bindingIndex, wordIndex, count, &params);
    end;
    
  end;
  
  glPathRenderingNV = sealed class
    public static function GetFuncAdr([MarshalAs(UnmanagedType.LPStr)] lpszProc: string): IntPtr;
    external 'opengl32.dll' name 'wglGetProcAddress';
    public static function GetFuncOrNil<T>(fadr: IntPtr) :=
    fadr=IntPtr.Zero ? default(T) :
    Marshal.GetDelegateForFunctionPointer&<T>(fadr);
    
    public z_GenPathsNV_adr := GetFuncAdr('glGenPathsNV');
    public z_GenPathsNV_ovr_0 := GetFuncOrNil&<function(range: Int32): UInt32>(z_GenPathsNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GenPathsNV(range: Int32): UInt32;
    begin
      Result := z_GenPathsNV_ovr_0(range);
    end;
    
    public z_DeletePathsNV_adr := GetFuncAdr('glDeletePathsNV');
    public z_DeletePathsNV_ovr_0 := GetFuncOrNil&<procedure(path: UInt32; range: Int32)>(z_DeletePathsNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure DeletePathsNV(path: UInt32; range: Int32);
    begin
      z_DeletePathsNV_ovr_0(path, range);
    end;
    
    public z_IsPathNV_adr := GetFuncAdr('glIsPathNV');
    public z_IsPathNV_ovr_0 := GetFuncOrNil&<function(path: UInt32): boolean>(z_IsPathNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function IsPathNV(path: UInt32): boolean;
    begin
      Result := z_IsPathNV_ovr_0(path);
    end;
    
    public z_PathCommandsNV_adr := GetFuncAdr('glPathCommandsNV');
    public z_PathCommandsNV_ovr_0 := GetFuncOrNil&<procedure(path: UInt32; numCommands: Int32; var commands: Byte; numCoords: Int32; coordType: PathCoordType; coords: IntPtr)>(z_PathCommandsNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure PathCommandsNV(path: UInt32; numCommands: Int32; commands: array of Byte; numCoords: Int32; coordType: PathCoordType; coords: IntPtr);
    begin
      z_PathCommandsNV_ovr_0(path, numCommands, commands[0], numCoords, coordType, coords);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure PathCommandsNV(path: UInt32; numCommands: Int32; var commands: Byte; numCoords: Int32; coordType: PathCoordType; coords: IntPtr);
    begin
      z_PathCommandsNV_ovr_0(path, numCommands, commands, numCoords, coordType, coords);
    end;
    public z_PathCommandsNV_ovr_2 := GetFuncOrNil&<procedure(path: UInt32; numCommands: Int32; commands: IntPtr; numCoords: Int32; coordType: PathCoordType; coords: IntPtr)>(z_PathCommandsNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure PathCommandsNV(path: UInt32; numCommands: Int32; commands: IntPtr; numCoords: Int32; coordType: PathCoordType; coords: IntPtr);
    begin
      z_PathCommandsNV_ovr_2(path, numCommands, commands, numCoords, coordType, coords);
    end;
    
    public z_PathCoordsNV_adr := GetFuncAdr('glPathCoordsNV');
    public z_PathCoordsNV_ovr_0 := GetFuncOrNil&<procedure(path: UInt32; numCoords: Int32; coordType: PathCoordType; coords: IntPtr)>(z_PathCoordsNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure PathCoordsNV(path: UInt32; numCoords: Int32; coordType: PathCoordType; coords: IntPtr);
    begin
      z_PathCoordsNV_ovr_0(path, numCoords, coordType, coords);
    end;
    
    public z_PathSubCommandsNV_adr := GetFuncAdr('glPathSubCommandsNV');
    public z_PathSubCommandsNV_ovr_0 := GetFuncOrNil&<procedure(path: UInt32; commandStart: Int32; commandsToDelete: Int32; numCommands: Int32; var commands: Byte; numCoords: Int32; coordType: PathCoordType; coords: IntPtr)>(z_PathSubCommandsNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure PathSubCommandsNV(path: UInt32; commandStart: Int32; commandsToDelete: Int32; numCommands: Int32; commands: array of Byte; numCoords: Int32; coordType: PathCoordType; coords: IntPtr);
    begin
      z_PathSubCommandsNV_ovr_0(path, commandStart, commandsToDelete, numCommands, commands[0], numCoords, coordType, coords);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure PathSubCommandsNV(path: UInt32; commandStart: Int32; commandsToDelete: Int32; numCommands: Int32; var commands: Byte; numCoords: Int32; coordType: PathCoordType; coords: IntPtr);
    begin
      z_PathSubCommandsNV_ovr_0(path, commandStart, commandsToDelete, numCommands, commands, numCoords, coordType, coords);
    end;
    public z_PathSubCommandsNV_ovr_2 := GetFuncOrNil&<procedure(path: UInt32; commandStart: Int32; commandsToDelete: Int32; numCommands: Int32; commands: IntPtr; numCoords: Int32; coordType: PathCoordType; coords: IntPtr)>(z_PathSubCommandsNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure PathSubCommandsNV(path: UInt32; commandStart: Int32; commandsToDelete: Int32; numCommands: Int32; commands: IntPtr; numCoords: Int32; coordType: PathCoordType; coords: IntPtr);
    begin
      z_PathSubCommandsNV_ovr_2(path, commandStart, commandsToDelete, numCommands, commands, numCoords, coordType, coords);
    end;
    
    public z_PathSubCoordsNV_adr := GetFuncAdr('glPathSubCoordsNV');
    public z_PathSubCoordsNV_ovr_0 := GetFuncOrNil&<procedure(path: UInt32; coordStart: Int32; numCoords: Int32; coordType: PathCoordType; coords: IntPtr)>(z_PathSubCoordsNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure PathSubCoordsNV(path: UInt32; coordStart: Int32; numCoords: Int32; coordType: PathCoordType; coords: IntPtr);
    begin
      z_PathSubCoordsNV_ovr_0(path, coordStart, numCoords, coordType, coords);
    end;
    
    public z_PathStringNV_adr := GetFuncAdr('glPathStringNV');
    public z_PathStringNV_ovr_0 := GetFuncOrNil&<procedure(path: UInt32; format: PathStringFormat; length: Int32; pathString: IntPtr)>(z_PathStringNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure PathStringNV(path: UInt32; format: PathStringFormat; length: Int32; pathString: IntPtr);
    begin
      z_PathStringNV_ovr_0(path, format, length, pathString);
    end;
    
    public z_PathGlyphsNV_adr := GetFuncAdr('glPathGlyphsNV');
    public z_PathGlyphsNV_ovr_0 := GetFuncOrNil&<procedure(firstPathName: UInt32; fontTarget: PathFontTarget; fontName: IntPtr; fontStyle: PathFontStyle; numGlyphs: Int32; &type: PathElementType; charcodes: IntPtr; handleMissingGlyphs: PathHandleMissingGlyphs; pathParameterTemplate: UInt32; emScale: single)>(z_PathGlyphsNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure PathGlyphsNV(firstPathName: UInt32; fontTarget: PathFontTarget; fontName: IntPtr; fontStyle: PathFontStyle; numGlyphs: Int32; &type: PathElementType; charcodes: IntPtr; handleMissingGlyphs: PathHandleMissingGlyphs; pathParameterTemplate: UInt32; emScale: single);
    begin
      z_PathGlyphsNV_ovr_0(firstPathName, fontTarget, fontName, fontStyle, numGlyphs, &type, charcodes, handleMissingGlyphs, pathParameterTemplate, emScale);
    end;
    
    public z_PathGlyphRangeNV_adr := GetFuncAdr('glPathGlyphRangeNV');
    public z_PathGlyphRangeNV_ovr_0 := GetFuncOrNil&<procedure(firstPathName: UInt32; fontTarget: PathFontTarget; fontName: IntPtr; fontStyle: PathFontStyle; firstGlyph: UInt32; numGlyphs: Int32; handleMissingGlyphs: PathHandleMissingGlyphs; pathParameterTemplate: UInt32; emScale: single)>(z_PathGlyphRangeNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure PathGlyphRangeNV(firstPathName: UInt32; fontTarget: PathFontTarget; fontName: IntPtr; fontStyle: PathFontStyle; firstGlyph: UInt32; numGlyphs: Int32; handleMissingGlyphs: PathHandleMissingGlyphs; pathParameterTemplate: UInt32; emScale: single);
    begin
      z_PathGlyphRangeNV_ovr_0(firstPathName, fontTarget, fontName, fontStyle, firstGlyph, numGlyphs, handleMissingGlyphs, pathParameterTemplate, emScale);
    end;
    
    public z_WeightPathsNV_adr := GetFuncAdr('glWeightPathsNV');
    public z_WeightPathsNV_ovr_0 := GetFuncOrNil&<procedure(resultPath: UInt32; numPaths: Int32; var paths: UInt32; var weights: single)>(z_WeightPathsNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure WeightPathsNV(resultPath: UInt32; numPaths: Int32; paths: array of UInt32; weights: array of single);
    begin
      z_WeightPathsNV_ovr_0(resultPath, numPaths, paths[0], weights[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure WeightPathsNV(resultPath: UInt32; numPaths: Int32; paths: array of UInt32; var weights: single);
    begin
      z_WeightPathsNV_ovr_0(resultPath, numPaths, paths[0], weights);
    end;
    public z_WeightPathsNV_ovr_2 := GetFuncOrNil&<procedure(resultPath: UInt32; numPaths: Int32; var paths: UInt32; weights: IntPtr)>(z_WeightPathsNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure WeightPathsNV(resultPath: UInt32; numPaths: Int32; paths: array of UInt32; weights: IntPtr);
    begin
      z_WeightPathsNV_ovr_2(resultPath, numPaths, paths[0], weights);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure WeightPathsNV(resultPath: UInt32; numPaths: Int32; var paths: UInt32; weights: array of single);
    begin
      z_WeightPathsNV_ovr_0(resultPath, numPaths, paths, weights[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure WeightPathsNV(resultPath: UInt32; numPaths: Int32; var paths: UInt32; var weights: single);
    begin
      z_WeightPathsNV_ovr_0(resultPath, numPaths, paths, weights);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure WeightPathsNV(resultPath: UInt32; numPaths: Int32; var paths: UInt32; weights: IntPtr);
    begin
      z_WeightPathsNV_ovr_2(resultPath, numPaths, paths, weights);
    end;
    public z_WeightPathsNV_ovr_6 := GetFuncOrNil&<procedure(resultPath: UInt32; numPaths: Int32; paths: IntPtr; var weights: single)>(z_WeightPathsNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure WeightPathsNV(resultPath: UInt32; numPaths: Int32; paths: IntPtr; weights: array of single);
    begin
      z_WeightPathsNV_ovr_6(resultPath, numPaths, paths, weights[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure WeightPathsNV(resultPath: UInt32; numPaths: Int32; paths: IntPtr; var weights: single);
    begin
      z_WeightPathsNV_ovr_6(resultPath, numPaths, paths, weights);
    end;
    public z_WeightPathsNV_ovr_8 := GetFuncOrNil&<procedure(resultPath: UInt32; numPaths: Int32; paths: IntPtr; weights: IntPtr)>(z_WeightPathsNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure WeightPathsNV(resultPath: UInt32; numPaths: Int32; paths: IntPtr; weights: IntPtr);
    begin
      z_WeightPathsNV_ovr_8(resultPath, numPaths, paths, weights);
    end;
    
    public z_CopyPathNV_adr := GetFuncAdr('glCopyPathNV');
    public z_CopyPathNV_ovr_0 := GetFuncOrNil&<procedure(resultPath: UInt32; srcPath: UInt32)>(z_CopyPathNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure CopyPathNV(resultPath: UInt32; srcPath: UInt32);
    begin
      z_CopyPathNV_ovr_0(resultPath, srcPath);
    end;
    
    public z_InterpolatePathsNV_adr := GetFuncAdr('glInterpolatePathsNV');
    public z_InterpolatePathsNV_ovr_0 := GetFuncOrNil&<procedure(resultPath: UInt32; pathA: UInt32; pathB: UInt32; weight: single)>(z_InterpolatePathsNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure InterpolatePathsNV(resultPath: UInt32; pathA: UInt32; pathB: UInt32; weight: single);
    begin
      z_InterpolatePathsNV_ovr_0(resultPath, pathA, pathB, weight);
    end;
    
    public z_TransformPathNV_adr := GetFuncAdr('glTransformPathNV');
    public z_TransformPathNV_ovr_0 := GetFuncOrNil&<procedure(resultPath: UInt32; srcPath: UInt32; transformType: PathTransformType; var transformValues: single)>(z_TransformPathNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TransformPathNV(resultPath: UInt32; srcPath: UInt32; transformType: PathTransformType; transformValues: array of single);
    begin
      z_TransformPathNV_ovr_0(resultPath, srcPath, transformType, transformValues[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TransformPathNV(resultPath: UInt32; srcPath: UInt32; transformType: PathTransformType; var transformValues: single);
    begin
      z_TransformPathNV_ovr_0(resultPath, srcPath, transformType, transformValues);
    end;
    public z_TransformPathNV_ovr_2 := GetFuncOrNil&<procedure(resultPath: UInt32; srcPath: UInt32; transformType: PathTransformType; transformValues: IntPtr)>(z_TransformPathNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TransformPathNV(resultPath: UInt32; srcPath: UInt32; transformType: PathTransformType; transformValues: IntPtr);
    begin
      z_TransformPathNV_ovr_2(resultPath, srcPath, transformType, transformValues);
    end;
    
    public z_PathParameterivNV_adr := GetFuncAdr('glPathParameterivNV');
    public z_PathParameterivNV_ovr_0 := GetFuncOrNil&<procedure(path: UInt32; pname: PathParameter; var value: Int32)>(z_PathParameterivNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure PathParameterivNV(path: UInt32; pname: PathParameter; value: array of Int32);
    begin
      z_PathParameterivNV_ovr_0(path, pname, value[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure PathParameterivNV(path: UInt32; pname: PathParameter; var value: Int32);
    begin
      z_PathParameterivNV_ovr_0(path, pname, value);
    end;
    public z_PathParameterivNV_ovr_2 := GetFuncOrNil&<procedure(path: UInt32; pname: PathParameter; value: IntPtr)>(z_PathParameterivNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure PathParameterivNV(path: UInt32; pname: PathParameter; value: IntPtr);
    begin
      z_PathParameterivNV_ovr_2(path, pname, value);
    end;
    
    public z_PathParameteriNV_adr := GetFuncAdr('glPathParameteriNV');
    public z_PathParameteriNV_ovr_0 := GetFuncOrNil&<procedure(path: UInt32; pname: PathParameter; value: Int32)>(z_PathParameteriNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure PathParameteriNV(path: UInt32; pname: PathParameter; value: Int32);
    begin
      z_PathParameteriNV_ovr_0(path, pname, value);
    end;
    
    public z_PathParameterfvNV_adr := GetFuncAdr('glPathParameterfvNV');
    public z_PathParameterfvNV_ovr_0 := GetFuncOrNil&<procedure(path: UInt32; pname: PathParameter; var value: single)>(z_PathParameterfvNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure PathParameterfvNV(path: UInt32; pname: PathParameter; value: array of single);
    begin
      z_PathParameterfvNV_ovr_0(path, pname, value[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure PathParameterfvNV(path: UInt32; pname: PathParameter; var value: single);
    begin
      z_PathParameterfvNV_ovr_0(path, pname, value);
    end;
    public z_PathParameterfvNV_ovr_2 := GetFuncOrNil&<procedure(path: UInt32; pname: PathParameter; value: IntPtr)>(z_PathParameterfvNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure PathParameterfvNV(path: UInt32; pname: PathParameter; value: IntPtr);
    begin
      z_PathParameterfvNV_ovr_2(path, pname, value);
    end;
    
    public z_PathParameterfNV_adr := GetFuncAdr('glPathParameterfNV');
    public z_PathParameterfNV_ovr_0 := GetFuncOrNil&<procedure(path: UInt32; pname: PathParameter; value: single)>(z_PathParameterfNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure PathParameterfNV(path: UInt32; pname: PathParameter; value: single);
    begin
      z_PathParameterfNV_ovr_0(path, pname, value);
    end;
    
    public z_PathDashArrayNV_adr := GetFuncAdr('glPathDashArrayNV');
    public z_PathDashArrayNV_ovr_0 := GetFuncOrNil&<procedure(path: UInt32; dashCount: Int32; var dashArray: single)>(z_PathDashArrayNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure PathDashArrayNV(path: UInt32; dashCount: Int32; dashArray: array of single);
    begin
      z_PathDashArrayNV_ovr_0(path, dashCount, dashArray[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure PathDashArrayNV(path: UInt32; dashCount: Int32; var dashArray: single);
    begin
      z_PathDashArrayNV_ovr_0(path, dashCount, dashArray);
    end;
    public z_PathDashArrayNV_ovr_2 := GetFuncOrNil&<procedure(path: UInt32; dashCount: Int32; dashArray: IntPtr)>(z_PathDashArrayNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure PathDashArrayNV(path: UInt32; dashCount: Int32; dashArray: IntPtr);
    begin
      z_PathDashArrayNV_ovr_2(path, dashCount, dashArray);
    end;
    
    public z_PathStencilFuncNV_adr := GetFuncAdr('glPathStencilFuncNV');
    public z_PathStencilFuncNV_ovr_0 := GetFuncOrNil&<procedure(func: StencilFunction; ref: Int32; mask: UInt32)>(z_PathStencilFuncNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure PathStencilFuncNV(func: StencilFunction; ref: Int32; mask: UInt32);
    begin
      z_PathStencilFuncNV_ovr_0(func, ref, mask);
    end;
    
    public z_PathStencilDepthOffsetNV_adr := GetFuncAdr('glPathStencilDepthOffsetNV');
    public z_PathStencilDepthOffsetNV_ovr_0 := GetFuncOrNil&<procedure(factor: single; units: single)>(z_PathStencilDepthOffsetNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure PathStencilDepthOffsetNV(factor: single; units: single);
    begin
      z_PathStencilDepthOffsetNV_ovr_0(factor, units);
    end;
    
    public z_StencilFillPathNV_adr := GetFuncAdr('glStencilFillPathNV');
    public z_StencilFillPathNV_ovr_0 := GetFuncOrNil&<procedure(path: UInt32; fillMode: PathFillMode; mask: UInt32)>(z_StencilFillPathNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure StencilFillPathNV(path: UInt32; fillMode: PathFillMode; mask: UInt32);
    begin
      z_StencilFillPathNV_ovr_0(path, fillMode, mask);
    end;
    
    public z_StencilStrokePathNV_adr := GetFuncAdr('glStencilStrokePathNV');
    public z_StencilStrokePathNV_ovr_0 := GetFuncOrNil&<procedure(path: UInt32; reference: Int32; mask: UInt32)>(z_StencilStrokePathNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure StencilStrokePathNV(path: UInt32; reference: Int32; mask: UInt32);
    begin
      z_StencilStrokePathNV_ovr_0(path, reference, mask);
    end;
    
    public z_StencilFillPathInstancedNV_adr := GetFuncAdr('glStencilFillPathInstancedNV');
    public z_StencilFillPathInstancedNV_ovr_0 := GetFuncOrNil&<procedure(numPaths: Int32; pathNameType: PathElementType; paths: IntPtr; pathBase: UInt32; fillMode: PathFillMode; mask: UInt32; transformType: PathTransformType; var transformValues: single)>(z_StencilFillPathInstancedNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure StencilFillPathInstancedNV(numPaths: Int32; pathNameType: PathElementType; paths: IntPtr; pathBase: UInt32; fillMode: PathFillMode; mask: UInt32; transformType: PathTransformType; transformValues: array of single);
    begin
      z_StencilFillPathInstancedNV_ovr_0(numPaths, pathNameType, paths, pathBase, fillMode, mask, transformType, transformValues[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure StencilFillPathInstancedNV(numPaths: Int32; pathNameType: PathElementType; paths: IntPtr; pathBase: UInt32; fillMode: PathFillMode; mask: UInt32; transformType: PathTransformType; var transformValues: single);
    begin
      z_StencilFillPathInstancedNV_ovr_0(numPaths, pathNameType, paths, pathBase, fillMode, mask, transformType, transformValues);
    end;
    public z_StencilFillPathInstancedNV_ovr_2 := GetFuncOrNil&<procedure(numPaths: Int32; pathNameType: PathElementType; paths: IntPtr; pathBase: UInt32; fillMode: PathFillMode; mask: UInt32; transformType: PathTransformType; transformValues: IntPtr)>(z_StencilFillPathInstancedNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure StencilFillPathInstancedNV(numPaths: Int32; pathNameType: PathElementType; paths: IntPtr; pathBase: UInt32; fillMode: PathFillMode; mask: UInt32; transformType: PathTransformType; transformValues: IntPtr);
    begin
      z_StencilFillPathInstancedNV_ovr_2(numPaths, pathNameType, paths, pathBase, fillMode, mask, transformType, transformValues);
    end;
    
    public z_StencilStrokePathInstancedNV_adr := GetFuncAdr('glStencilStrokePathInstancedNV');
    public z_StencilStrokePathInstancedNV_ovr_0 := GetFuncOrNil&<procedure(numPaths: Int32; pathNameType: PathElementType; paths: IntPtr; pathBase: UInt32; reference: Int32; mask: UInt32; transformType: PathTransformType; var transformValues: single)>(z_StencilStrokePathInstancedNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure StencilStrokePathInstancedNV(numPaths: Int32; pathNameType: PathElementType; paths: IntPtr; pathBase: UInt32; reference: Int32; mask: UInt32; transformType: PathTransformType; transformValues: array of single);
    begin
      z_StencilStrokePathInstancedNV_ovr_0(numPaths, pathNameType, paths, pathBase, reference, mask, transformType, transformValues[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure StencilStrokePathInstancedNV(numPaths: Int32; pathNameType: PathElementType; paths: IntPtr; pathBase: UInt32; reference: Int32; mask: UInt32; transformType: PathTransformType; var transformValues: single);
    begin
      z_StencilStrokePathInstancedNV_ovr_0(numPaths, pathNameType, paths, pathBase, reference, mask, transformType, transformValues);
    end;
    public z_StencilStrokePathInstancedNV_ovr_2 := GetFuncOrNil&<procedure(numPaths: Int32; pathNameType: PathElementType; paths: IntPtr; pathBase: UInt32; reference: Int32; mask: UInt32; transformType: PathTransformType; transformValues: IntPtr)>(z_StencilStrokePathInstancedNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure StencilStrokePathInstancedNV(numPaths: Int32; pathNameType: PathElementType; paths: IntPtr; pathBase: UInt32; reference: Int32; mask: UInt32; transformType: PathTransformType; transformValues: IntPtr);
    begin
      z_StencilStrokePathInstancedNV_ovr_2(numPaths, pathNameType, paths, pathBase, reference, mask, transformType, transformValues);
    end;
    
    public z_PathCoverDepthFuncNV_adr := GetFuncAdr('glPathCoverDepthFuncNV');
    public z_PathCoverDepthFuncNV_ovr_0 := GetFuncOrNil&<procedure(func: DepthFunction)>(z_PathCoverDepthFuncNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure PathCoverDepthFuncNV(func: DepthFunction);
    begin
      z_PathCoverDepthFuncNV_ovr_0(func);
    end;
    
    public z_CoverFillPathNV_adr := GetFuncAdr('glCoverFillPathNV');
    public z_CoverFillPathNV_ovr_0 := GetFuncOrNil&<procedure(path: UInt32; coverMode: PathCoverMode)>(z_CoverFillPathNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure CoverFillPathNV(path: UInt32; coverMode: PathCoverMode);
    begin
      z_CoverFillPathNV_ovr_0(path, coverMode);
    end;
    
    public z_CoverStrokePathNV_adr := GetFuncAdr('glCoverStrokePathNV');
    public z_CoverStrokePathNV_ovr_0 := GetFuncOrNil&<procedure(path: UInt32; coverMode: PathCoverMode)>(z_CoverStrokePathNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure CoverStrokePathNV(path: UInt32; coverMode: PathCoverMode);
    begin
      z_CoverStrokePathNV_ovr_0(path, coverMode);
    end;
    
    public z_CoverFillPathInstancedNV_adr := GetFuncAdr('glCoverFillPathInstancedNV');
    public z_CoverFillPathInstancedNV_ovr_0 := GetFuncOrNil&<procedure(numPaths: Int32; pathNameType: PathElementType; paths: IntPtr; pathBase: UInt32; coverMode: PathCoverMode; transformType: PathTransformType; var transformValues: single)>(z_CoverFillPathInstancedNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure CoverFillPathInstancedNV(numPaths: Int32; pathNameType: PathElementType; paths: IntPtr; pathBase: UInt32; coverMode: PathCoverMode; transformType: PathTransformType; transformValues: array of single);
    begin
      z_CoverFillPathInstancedNV_ovr_0(numPaths, pathNameType, paths, pathBase, coverMode, transformType, transformValues[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure CoverFillPathInstancedNV(numPaths: Int32; pathNameType: PathElementType; paths: IntPtr; pathBase: UInt32; coverMode: PathCoverMode; transformType: PathTransformType; var transformValues: single);
    begin
      z_CoverFillPathInstancedNV_ovr_0(numPaths, pathNameType, paths, pathBase, coverMode, transformType, transformValues);
    end;
    public z_CoverFillPathInstancedNV_ovr_2 := GetFuncOrNil&<procedure(numPaths: Int32; pathNameType: PathElementType; paths: IntPtr; pathBase: UInt32; coverMode: PathCoverMode; transformType: PathTransformType; transformValues: IntPtr)>(z_CoverFillPathInstancedNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure CoverFillPathInstancedNV(numPaths: Int32; pathNameType: PathElementType; paths: IntPtr; pathBase: UInt32; coverMode: PathCoverMode; transformType: PathTransformType; transformValues: IntPtr);
    begin
      z_CoverFillPathInstancedNV_ovr_2(numPaths, pathNameType, paths, pathBase, coverMode, transformType, transformValues);
    end;
    
    public z_CoverStrokePathInstancedNV_adr := GetFuncAdr('glCoverStrokePathInstancedNV');
    public z_CoverStrokePathInstancedNV_ovr_0 := GetFuncOrNil&<procedure(numPaths: Int32; pathNameType: PathElementType; paths: IntPtr; pathBase: UInt32; coverMode: PathCoverMode; transformType: PathTransformType; var transformValues: single)>(z_CoverStrokePathInstancedNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure CoverStrokePathInstancedNV(numPaths: Int32; pathNameType: PathElementType; paths: IntPtr; pathBase: UInt32; coverMode: PathCoverMode; transformType: PathTransformType; transformValues: array of single);
    begin
      z_CoverStrokePathInstancedNV_ovr_0(numPaths, pathNameType, paths, pathBase, coverMode, transformType, transformValues[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure CoverStrokePathInstancedNV(numPaths: Int32; pathNameType: PathElementType; paths: IntPtr; pathBase: UInt32; coverMode: PathCoverMode; transformType: PathTransformType; var transformValues: single);
    begin
      z_CoverStrokePathInstancedNV_ovr_0(numPaths, pathNameType, paths, pathBase, coverMode, transformType, transformValues);
    end;
    public z_CoverStrokePathInstancedNV_ovr_2 := GetFuncOrNil&<procedure(numPaths: Int32; pathNameType: PathElementType; paths: IntPtr; pathBase: UInt32; coverMode: PathCoverMode; transformType: PathTransformType; transformValues: IntPtr)>(z_CoverStrokePathInstancedNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure CoverStrokePathInstancedNV(numPaths: Int32; pathNameType: PathElementType; paths: IntPtr; pathBase: UInt32; coverMode: PathCoverMode; transformType: PathTransformType; transformValues: IntPtr);
    begin
      z_CoverStrokePathInstancedNV_ovr_2(numPaths, pathNameType, paths, pathBase, coverMode, transformType, transformValues);
    end;
    
    public z_GetPathParameterivNV_adr := GetFuncAdr('glGetPathParameterivNV');
    public z_GetPathParameterivNV_ovr_0 := GetFuncOrNil&<procedure(path: UInt32; pname: PathParameter; var value: Int32)>(z_GetPathParameterivNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetPathParameterivNV(path: UInt32; pname: PathParameter; value: array of Int32);
    begin
      z_GetPathParameterivNV_ovr_0(path, pname, value[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetPathParameterivNV(path: UInt32; pname: PathParameter; var value: Int32);
    begin
      z_GetPathParameterivNV_ovr_0(path, pname, value);
    end;
    public z_GetPathParameterivNV_ovr_2 := GetFuncOrNil&<procedure(path: UInt32; pname: PathParameter; value: IntPtr)>(z_GetPathParameterivNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetPathParameterivNV(path: UInt32; pname: PathParameter; value: IntPtr);
    begin
      z_GetPathParameterivNV_ovr_2(path, pname, value);
    end;
    
    public z_GetPathParameterfvNV_adr := GetFuncAdr('glGetPathParameterfvNV');
    public z_GetPathParameterfvNV_ovr_0 := GetFuncOrNil&<procedure(path: UInt32; pname: PathParameter; var value: single)>(z_GetPathParameterfvNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetPathParameterfvNV(path: UInt32; pname: PathParameter; value: array of single);
    begin
      z_GetPathParameterfvNV_ovr_0(path, pname, value[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetPathParameterfvNV(path: UInt32; pname: PathParameter; var value: single);
    begin
      z_GetPathParameterfvNV_ovr_0(path, pname, value);
    end;
    public z_GetPathParameterfvNV_ovr_2 := GetFuncOrNil&<procedure(path: UInt32; pname: PathParameter; value: IntPtr)>(z_GetPathParameterfvNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetPathParameterfvNV(path: UInt32; pname: PathParameter; value: IntPtr);
    begin
      z_GetPathParameterfvNV_ovr_2(path, pname, value);
    end;
    
    public z_GetPathCommandsNV_adr := GetFuncAdr('glGetPathCommandsNV');
    public z_GetPathCommandsNV_ovr_0 := GetFuncOrNil&<procedure(path: UInt32; var commands: Byte)>(z_GetPathCommandsNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetPathCommandsNV(path: UInt32; commands: array of Byte);
    begin
      z_GetPathCommandsNV_ovr_0(path, commands[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetPathCommandsNV(path: UInt32; var commands: Byte);
    begin
      z_GetPathCommandsNV_ovr_0(path, commands);
    end;
    public z_GetPathCommandsNV_ovr_2 := GetFuncOrNil&<procedure(path: UInt32; commands: IntPtr)>(z_GetPathCommandsNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetPathCommandsNV(path: UInt32; commands: IntPtr);
    begin
      z_GetPathCommandsNV_ovr_2(path, commands);
    end;
    
    public z_GetPathCoordsNV_adr := GetFuncAdr('glGetPathCoordsNV');
    public z_GetPathCoordsNV_ovr_0 := GetFuncOrNil&<procedure(path: UInt32; var coords: single)>(z_GetPathCoordsNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetPathCoordsNV(path: UInt32; coords: array of single);
    begin
      z_GetPathCoordsNV_ovr_0(path, coords[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetPathCoordsNV(path: UInt32; var coords: single);
    begin
      z_GetPathCoordsNV_ovr_0(path, coords);
    end;
    public z_GetPathCoordsNV_ovr_2 := GetFuncOrNil&<procedure(path: UInt32; coords: IntPtr)>(z_GetPathCoordsNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetPathCoordsNV(path: UInt32; coords: IntPtr);
    begin
      z_GetPathCoordsNV_ovr_2(path, coords);
    end;
    
    public z_GetPathDashArrayNV_adr := GetFuncAdr('glGetPathDashArrayNV');
    public z_GetPathDashArrayNV_ovr_0 := GetFuncOrNil&<procedure(path: UInt32; var dashArray: single)>(z_GetPathDashArrayNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetPathDashArrayNV(path: UInt32; dashArray: array of single);
    begin
      z_GetPathDashArrayNV_ovr_0(path, dashArray[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetPathDashArrayNV(path: UInt32; var dashArray: single);
    begin
      z_GetPathDashArrayNV_ovr_0(path, dashArray);
    end;
    public z_GetPathDashArrayNV_ovr_2 := GetFuncOrNil&<procedure(path: UInt32; dashArray: IntPtr)>(z_GetPathDashArrayNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetPathDashArrayNV(path: UInt32; dashArray: IntPtr);
    begin
      z_GetPathDashArrayNV_ovr_2(path, dashArray);
    end;
    
    public z_GetPathMetricsNV_adr := GetFuncAdr('glGetPathMetricsNV');
    public z_GetPathMetricsNV_ovr_0 := GetFuncOrNil&<procedure(metricQueryMask: PathMetricMask; numPaths: Int32; pathNameType: PathElementType; paths: IntPtr; pathBase: UInt32; stride: Int32; var metrics: single)>(z_GetPathMetricsNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetPathMetricsNV(metricQueryMask: PathMetricMask; numPaths: Int32; pathNameType: PathElementType; paths: IntPtr; pathBase: UInt32; stride: Int32; metrics: array of single);
    begin
      z_GetPathMetricsNV_ovr_0(metricQueryMask, numPaths, pathNameType, paths, pathBase, stride, metrics[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetPathMetricsNV(metricQueryMask: PathMetricMask; numPaths: Int32; pathNameType: PathElementType; paths: IntPtr; pathBase: UInt32; stride: Int32; var metrics: single);
    begin
      z_GetPathMetricsNV_ovr_0(metricQueryMask, numPaths, pathNameType, paths, pathBase, stride, metrics);
    end;
    public z_GetPathMetricsNV_ovr_2 := GetFuncOrNil&<procedure(metricQueryMask: PathMetricMask; numPaths: Int32; pathNameType: PathElementType; paths: IntPtr; pathBase: UInt32; stride: Int32; metrics: IntPtr)>(z_GetPathMetricsNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetPathMetricsNV(metricQueryMask: PathMetricMask; numPaths: Int32; pathNameType: PathElementType; paths: IntPtr; pathBase: UInt32; stride: Int32; metrics: IntPtr);
    begin
      z_GetPathMetricsNV_ovr_2(metricQueryMask, numPaths, pathNameType, paths, pathBase, stride, metrics);
    end;
    
    public z_GetPathMetricRangeNV_adr := GetFuncAdr('glGetPathMetricRangeNV');
    public z_GetPathMetricRangeNV_ovr_0 := GetFuncOrNil&<procedure(metricQueryMask: PathMetricMask; firstPathName: UInt32; numPaths: Int32; stride: Int32; var metrics: single)>(z_GetPathMetricRangeNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetPathMetricRangeNV(metricQueryMask: PathMetricMask; firstPathName: UInt32; numPaths: Int32; stride: Int32; metrics: array of single);
    begin
      z_GetPathMetricRangeNV_ovr_0(metricQueryMask, firstPathName, numPaths, stride, metrics[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetPathMetricRangeNV(metricQueryMask: PathMetricMask; firstPathName: UInt32; numPaths: Int32; stride: Int32; var metrics: single);
    begin
      z_GetPathMetricRangeNV_ovr_0(metricQueryMask, firstPathName, numPaths, stride, metrics);
    end;
    public z_GetPathMetricRangeNV_ovr_2 := GetFuncOrNil&<procedure(metricQueryMask: PathMetricMask; firstPathName: UInt32; numPaths: Int32; stride: Int32; metrics: IntPtr)>(z_GetPathMetricRangeNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetPathMetricRangeNV(metricQueryMask: PathMetricMask; firstPathName: UInt32; numPaths: Int32; stride: Int32; metrics: IntPtr);
    begin
      z_GetPathMetricRangeNV_ovr_2(metricQueryMask, firstPathName, numPaths, stride, metrics);
    end;
    
    public z_GetPathSpacingNV_adr := GetFuncAdr('glGetPathSpacingNV');
    public z_GetPathSpacingNV_ovr_0 := GetFuncOrNil&<procedure(_pathListMode: PathListMode; numPaths: Int32; pathNameType: PathElementType; paths: IntPtr; pathBase: UInt32; advanceScale: single; kerningScale: single; transformType: PathTransformType; var returnedSpacing: single)>(z_GetPathSpacingNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetPathSpacingNV(_pathListMode: PathListMode; numPaths: Int32; pathNameType: PathElementType; paths: IntPtr; pathBase: UInt32; advanceScale: single; kerningScale: single; transformType: PathTransformType; returnedSpacing: array of single);
    begin
      z_GetPathSpacingNV_ovr_0(_pathListMode, numPaths, pathNameType, paths, pathBase, advanceScale, kerningScale, transformType, returnedSpacing[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetPathSpacingNV(_pathListMode: PathListMode; numPaths: Int32; pathNameType: PathElementType; paths: IntPtr; pathBase: UInt32; advanceScale: single; kerningScale: single; transformType: PathTransformType; var returnedSpacing: single);
    begin
      z_GetPathSpacingNV_ovr_0(_pathListMode, numPaths, pathNameType, paths, pathBase, advanceScale, kerningScale, transformType, returnedSpacing);
    end;
    public z_GetPathSpacingNV_ovr_2 := GetFuncOrNil&<procedure(_pathListMode: PathListMode; numPaths: Int32; pathNameType: PathElementType; paths: IntPtr; pathBase: UInt32; advanceScale: single; kerningScale: single; transformType: PathTransformType; returnedSpacing: IntPtr)>(z_GetPathSpacingNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetPathSpacingNV(_pathListMode: PathListMode; numPaths: Int32; pathNameType: PathElementType; paths: IntPtr; pathBase: UInt32; advanceScale: single; kerningScale: single; transformType: PathTransformType; returnedSpacing: IntPtr);
    begin
      z_GetPathSpacingNV_ovr_2(_pathListMode, numPaths, pathNameType, paths, pathBase, advanceScale, kerningScale, transformType, returnedSpacing);
    end;
    
    public z_IsPointInFillPathNV_adr := GetFuncAdr('glIsPointInFillPathNV');
    public z_IsPointInFillPathNV_ovr_0 := GetFuncOrNil&<function(path: UInt32; mask: UInt32; x: single; y: single): boolean>(z_IsPointInFillPathNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function IsPointInFillPathNV(path: UInt32; mask: UInt32; x: single; y: single): boolean;
    begin
      Result := z_IsPointInFillPathNV_ovr_0(path, mask, x, y);
    end;
    
    public z_IsPointInStrokePathNV_adr := GetFuncAdr('glIsPointInStrokePathNV');
    public z_IsPointInStrokePathNV_ovr_0 := GetFuncOrNil&<function(path: UInt32; x: single; y: single): boolean>(z_IsPointInStrokePathNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function IsPointInStrokePathNV(path: UInt32; x: single; y: single): boolean;
    begin
      Result := z_IsPointInStrokePathNV_ovr_0(path, x, y);
    end;
    
    public z_GetPathLengthNV_adr := GetFuncAdr('glGetPathLengthNV');
    public z_GetPathLengthNV_ovr_0 := GetFuncOrNil&<function(path: UInt32; startSegment: Int32; numSegments: Int32): single>(z_GetPathLengthNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetPathLengthNV(path: UInt32; startSegment: Int32; numSegments: Int32): single;
    begin
      Result := z_GetPathLengthNV_ovr_0(path, startSegment, numSegments);
    end;
    
    public z_PointAlongPathNV_adr := GetFuncAdr('glPointAlongPathNV');
    public z_PointAlongPathNV_ovr_0 := GetFuncOrNil&<function(path: UInt32; startSegment: Int32; numSegments: Int32; distance: single; var x: single; var y: single; var tangentX: single; var tangentY: single): boolean>(z_PointAlongPathNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function PointAlongPathNV(path: UInt32; startSegment: Int32; numSegments: Int32; distance: single; x: array of single; y: array of single; tangentX: array of single; tangentY: array of single): boolean;
    begin
      Result := z_PointAlongPathNV_ovr_0(path, startSegment, numSegments, distance, x[0], y[0], tangentX[0], tangentY[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function PointAlongPathNV(path: UInt32; startSegment: Int32; numSegments: Int32; distance: single; x: array of single; y: array of single; tangentX: array of single; var tangentY: single): boolean;
    begin
      Result := z_PointAlongPathNV_ovr_0(path, startSegment, numSegments, distance, x[0], y[0], tangentX[0], tangentY);
    end;
    public z_PointAlongPathNV_ovr_2 := GetFuncOrNil&<function(path: UInt32; startSegment: Int32; numSegments: Int32; distance: single; var x: single; var y: single; var tangentX: single; tangentY: IntPtr): boolean>(z_PointAlongPathNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function PointAlongPathNV(path: UInt32; startSegment: Int32; numSegments: Int32; distance: single; x: array of single; y: array of single; tangentX: array of single; tangentY: IntPtr): boolean;
    begin
      Result := z_PointAlongPathNV_ovr_2(path, startSegment, numSegments, distance, x[0], y[0], tangentX[0], tangentY);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function PointAlongPathNV(path: UInt32; startSegment: Int32; numSegments: Int32; distance: single; x: array of single; y: array of single; var tangentX: single; tangentY: array of single): boolean;
    begin
      Result := z_PointAlongPathNV_ovr_0(path, startSegment, numSegments, distance, x[0], y[0], tangentX, tangentY[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function PointAlongPathNV(path: UInt32; startSegment: Int32; numSegments: Int32; distance: single; x: array of single; y: array of single; var tangentX: single; var tangentY: single): boolean;
    begin
      Result := z_PointAlongPathNV_ovr_0(path, startSegment, numSegments, distance, x[0], y[0], tangentX, tangentY);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function PointAlongPathNV(path: UInt32; startSegment: Int32; numSegments: Int32; distance: single; x: array of single; y: array of single; var tangentX: single; tangentY: IntPtr): boolean;
    begin
      Result := z_PointAlongPathNV_ovr_2(path, startSegment, numSegments, distance, x[0], y[0], tangentX, tangentY);
    end;
    public z_PointAlongPathNV_ovr_6 := GetFuncOrNil&<function(path: UInt32; startSegment: Int32; numSegments: Int32; distance: single; var x: single; var y: single; tangentX: IntPtr; var tangentY: single): boolean>(z_PointAlongPathNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function PointAlongPathNV(path: UInt32; startSegment: Int32; numSegments: Int32; distance: single; x: array of single; y: array of single; tangentX: IntPtr; tangentY: array of single): boolean;
    begin
      Result := z_PointAlongPathNV_ovr_6(path, startSegment, numSegments, distance, x[0], y[0], tangentX, tangentY[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function PointAlongPathNV(path: UInt32; startSegment: Int32; numSegments: Int32; distance: single; x: array of single; y: array of single; tangentX: IntPtr; var tangentY: single): boolean;
    begin
      Result := z_PointAlongPathNV_ovr_6(path, startSegment, numSegments, distance, x[0], y[0], tangentX, tangentY);
    end;
    public z_PointAlongPathNV_ovr_8 := GetFuncOrNil&<function(path: UInt32; startSegment: Int32; numSegments: Int32; distance: single; var x: single; var y: single; tangentX: IntPtr; tangentY: IntPtr): boolean>(z_PointAlongPathNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function PointAlongPathNV(path: UInt32; startSegment: Int32; numSegments: Int32; distance: single; x: array of single; y: array of single; tangentX: IntPtr; tangentY: IntPtr): boolean;
    begin
      Result := z_PointAlongPathNV_ovr_8(path, startSegment, numSegments, distance, x[0], y[0], tangentX, tangentY);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function PointAlongPathNV(path: UInt32; startSegment: Int32; numSegments: Int32; distance: single; x: array of single; var y: single; tangentX: array of single; tangentY: array of single): boolean;
    begin
      Result := z_PointAlongPathNV_ovr_0(path, startSegment, numSegments, distance, x[0], y, tangentX[0], tangentY[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function PointAlongPathNV(path: UInt32; startSegment: Int32; numSegments: Int32; distance: single; x: array of single; var y: single; tangentX: array of single; var tangentY: single): boolean;
    begin
      Result := z_PointAlongPathNV_ovr_0(path, startSegment, numSegments, distance, x[0], y, tangentX[0], tangentY);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function PointAlongPathNV(path: UInt32; startSegment: Int32; numSegments: Int32; distance: single; x: array of single; var y: single; tangentX: array of single; tangentY: IntPtr): boolean;
    begin
      Result := z_PointAlongPathNV_ovr_2(path, startSegment, numSegments, distance, x[0], y, tangentX[0], tangentY);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function PointAlongPathNV(path: UInt32; startSegment: Int32; numSegments: Int32; distance: single; x: array of single; var y: single; var tangentX: single; tangentY: array of single): boolean;
    begin
      Result := z_PointAlongPathNV_ovr_0(path, startSegment, numSegments, distance, x[0], y, tangentX, tangentY[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function PointAlongPathNV(path: UInt32; startSegment: Int32; numSegments: Int32; distance: single; x: array of single; var y: single; var tangentX: single; var tangentY: single): boolean;
    begin
      Result := z_PointAlongPathNV_ovr_0(path, startSegment, numSegments, distance, x[0], y, tangentX, tangentY);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function PointAlongPathNV(path: UInt32; startSegment: Int32; numSegments: Int32; distance: single; x: array of single; var y: single; var tangentX: single; tangentY: IntPtr): boolean;
    begin
      Result := z_PointAlongPathNV_ovr_2(path, startSegment, numSegments, distance, x[0], y, tangentX, tangentY);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function PointAlongPathNV(path: UInt32; startSegment: Int32; numSegments: Int32; distance: single; x: array of single; var y: single; tangentX: IntPtr; tangentY: array of single): boolean;
    begin
      Result := z_PointAlongPathNV_ovr_6(path, startSegment, numSegments, distance, x[0], y, tangentX, tangentY[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function PointAlongPathNV(path: UInt32; startSegment: Int32; numSegments: Int32; distance: single; x: array of single; var y: single; tangentX: IntPtr; var tangentY: single): boolean;
    begin
      Result := z_PointAlongPathNV_ovr_6(path, startSegment, numSegments, distance, x[0], y, tangentX, tangentY);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function PointAlongPathNV(path: UInt32; startSegment: Int32; numSegments: Int32; distance: single; x: array of single; var y: single; tangentX: IntPtr; tangentY: IntPtr): boolean;
    begin
      Result := z_PointAlongPathNV_ovr_8(path, startSegment, numSegments, distance, x[0], y, tangentX, tangentY);
    end;
    public z_PointAlongPathNV_ovr_18 := GetFuncOrNil&<function(path: UInt32; startSegment: Int32; numSegments: Int32; distance: single; var x: single; y: IntPtr; var tangentX: single; var tangentY: single): boolean>(z_PointAlongPathNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function PointAlongPathNV(path: UInt32; startSegment: Int32; numSegments: Int32; distance: single; x: array of single; y: IntPtr; tangentX: array of single; tangentY: array of single): boolean;
    begin
      Result := z_PointAlongPathNV_ovr_18(path, startSegment, numSegments, distance, x[0], y, tangentX[0], tangentY[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function PointAlongPathNV(path: UInt32; startSegment: Int32; numSegments: Int32; distance: single; x: array of single; y: IntPtr; tangentX: array of single; var tangentY: single): boolean;
    begin
      Result := z_PointAlongPathNV_ovr_18(path, startSegment, numSegments, distance, x[0], y, tangentX[0], tangentY);
    end;
    public z_PointAlongPathNV_ovr_20 := GetFuncOrNil&<function(path: UInt32; startSegment: Int32; numSegments: Int32; distance: single; var x: single; y: IntPtr; var tangentX: single; tangentY: IntPtr): boolean>(z_PointAlongPathNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function PointAlongPathNV(path: UInt32; startSegment: Int32; numSegments: Int32; distance: single; x: array of single; y: IntPtr; tangentX: array of single; tangentY: IntPtr): boolean;
    begin
      Result := z_PointAlongPathNV_ovr_20(path, startSegment, numSegments, distance, x[0], y, tangentX[0], tangentY);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function PointAlongPathNV(path: UInt32; startSegment: Int32; numSegments: Int32; distance: single; x: array of single; y: IntPtr; var tangentX: single; tangentY: array of single): boolean;
    begin
      Result := z_PointAlongPathNV_ovr_18(path, startSegment, numSegments, distance, x[0], y, tangentX, tangentY[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function PointAlongPathNV(path: UInt32; startSegment: Int32; numSegments: Int32; distance: single; x: array of single; y: IntPtr; var tangentX: single; var tangentY: single): boolean;
    begin
      Result := z_PointAlongPathNV_ovr_18(path, startSegment, numSegments, distance, x[0], y, tangentX, tangentY);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function PointAlongPathNV(path: UInt32; startSegment: Int32; numSegments: Int32; distance: single; x: array of single; y: IntPtr; var tangentX: single; tangentY: IntPtr): boolean;
    begin
      Result := z_PointAlongPathNV_ovr_20(path, startSegment, numSegments, distance, x[0], y, tangentX, tangentY);
    end;
    public z_PointAlongPathNV_ovr_24 := GetFuncOrNil&<function(path: UInt32; startSegment: Int32; numSegments: Int32; distance: single; var x: single; y: IntPtr; tangentX: IntPtr; var tangentY: single): boolean>(z_PointAlongPathNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function PointAlongPathNV(path: UInt32; startSegment: Int32; numSegments: Int32; distance: single; x: array of single; y: IntPtr; tangentX: IntPtr; tangentY: array of single): boolean;
    begin
      Result := z_PointAlongPathNV_ovr_24(path, startSegment, numSegments, distance, x[0], y, tangentX, tangentY[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function PointAlongPathNV(path: UInt32; startSegment: Int32; numSegments: Int32; distance: single; x: array of single; y: IntPtr; tangentX: IntPtr; var tangentY: single): boolean;
    begin
      Result := z_PointAlongPathNV_ovr_24(path, startSegment, numSegments, distance, x[0], y, tangentX, tangentY);
    end;
    public z_PointAlongPathNV_ovr_26 := GetFuncOrNil&<function(path: UInt32; startSegment: Int32; numSegments: Int32; distance: single; var x: single; y: IntPtr; tangentX: IntPtr; tangentY: IntPtr): boolean>(z_PointAlongPathNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function PointAlongPathNV(path: UInt32; startSegment: Int32; numSegments: Int32; distance: single; x: array of single; y: IntPtr; tangentX: IntPtr; tangentY: IntPtr): boolean;
    begin
      Result := z_PointAlongPathNV_ovr_26(path, startSegment, numSegments, distance, x[0], y, tangentX, tangentY);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function PointAlongPathNV(path: UInt32; startSegment: Int32; numSegments: Int32; distance: single; var x: single; y: array of single; tangentX: array of single; tangentY: array of single): boolean;
    begin
      Result := z_PointAlongPathNV_ovr_0(path, startSegment, numSegments, distance, x, y[0], tangentX[0], tangentY[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function PointAlongPathNV(path: UInt32; startSegment: Int32; numSegments: Int32; distance: single; var x: single; y: array of single; tangentX: array of single; var tangentY: single): boolean;
    begin
      Result := z_PointAlongPathNV_ovr_0(path, startSegment, numSegments, distance, x, y[0], tangentX[0], tangentY);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function PointAlongPathNV(path: UInt32; startSegment: Int32; numSegments: Int32; distance: single; var x: single; y: array of single; tangentX: array of single; tangentY: IntPtr): boolean;
    begin
      Result := z_PointAlongPathNV_ovr_2(path, startSegment, numSegments, distance, x, y[0], tangentX[0], tangentY);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function PointAlongPathNV(path: UInt32; startSegment: Int32; numSegments: Int32; distance: single; var x: single; y: array of single; var tangentX: single; tangentY: array of single): boolean;
    begin
      Result := z_PointAlongPathNV_ovr_0(path, startSegment, numSegments, distance, x, y[0], tangentX, tangentY[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function PointAlongPathNV(path: UInt32; startSegment: Int32; numSegments: Int32; distance: single; var x: single; y: array of single; var tangentX: single; var tangentY: single): boolean;
    begin
      Result := z_PointAlongPathNV_ovr_0(path, startSegment, numSegments, distance, x, y[0], tangentX, tangentY);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function PointAlongPathNV(path: UInt32; startSegment: Int32; numSegments: Int32; distance: single; var x: single; y: array of single; var tangentX: single; tangentY: IntPtr): boolean;
    begin
      Result := z_PointAlongPathNV_ovr_2(path, startSegment, numSegments, distance, x, y[0], tangentX, tangentY);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function PointAlongPathNV(path: UInt32; startSegment: Int32; numSegments: Int32; distance: single; var x: single; y: array of single; tangentX: IntPtr; tangentY: array of single): boolean;
    begin
      Result := z_PointAlongPathNV_ovr_6(path, startSegment, numSegments, distance, x, y[0], tangentX, tangentY[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function PointAlongPathNV(path: UInt32; startSegment: Int32; numSegments: Int32; distance: single; var x: single; y: array of single; tangentX: IntPtr; var tangentY: single): boolean;
    begin
      Result := z_PointAlongPathNV_ovr_6(path, startSegment, numSegments, distance, x, y[0], tangentX, tangentY);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function PointAlongPathNV(path: UInt32; startSegment: Int32; numSegments: Int32; distance: single; var x: single; y: array of single; tangentX: IntPtr; tangentY: IntPtr): boolean;
    begin
      Result := z_PointAlongPathNV_ovr_8(path, startSegment, numSegments, distance, x, y[0], tangentX, tangentY);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function PointAlongPathNV(path: UInt32; startSegment: Int32; numSegments: Int32; distance: single; var x: single; var y: single; tangentX: array of single; tangentY: array of single): boolean;
    begin
      Result := z_PointAlongPathNV_ovr_0(path, startSegment, numSegments, distance, x, y, tangentX[0], tangentY[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function PointAlongPathNV(path: UInt32; startSegment: Int32; numSegments: Int32; distance: single; var x: single; var y: single; tangentX: array of single; var tangentY: single): boolean;
    begin
      Result := z_PointAlongPathNV_ovr_0(path, startSegment, numSegments, distance, x, y, tangentX[0], tangentY);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function PointAlongPathNV(path: UInt32; startSegment: Int32; numSegments: Int32; distance: single; var x: single; var y: single; tangentX: array of single; tangentY: IntPtr): boolean;
    begin
      Result := z_PointAlongPathNV_ovr_2(path, startSegment, numSegments, distance, x, y, tangentX[0], tangentY);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function PointAlongPathNV(path: UInt32; startSegment: Int32; numSegments: Int32; distance: single; var x: single; var y: single; var tangentX: single; tangentY: array of single): boolean;
    begin
      Result := z_PointAlongPathNV_ovr_0(path, startSegment, numSegments, distance, x, y, tangentX, tangentY[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function PointAlongPathNV(path: UInt32; startSegment: Int32; numSegments: Int32; distance: single; var x: single; var y: single; var tangentX: single; var tangentY: single): boolean;
    begin
      Result := z_PointAlongPathNV_ovr_0(path, startSegment, numSegments, distance, x, y, tangentX, tangentY);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function PointAlongPathNV(path: UInt32; startSegment: Int32; numSegments: Int32; distance: single; var x: single; var y: single; var tangentX: single; tangentY: IntPtr): boolean;
    begin
      Result := z_PointAlongPathNV_ovr_2(path, startSegment, numSegments, distance, x, y, tangentX, tangentY);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function PointAlongPathNV(path: UInt32; startSegment: Int32; numSegments: Int32; distance: single; var x: single; var y: single; tangentX: IntPtr; tangentY: array of single): boolean;
    begin
      Result := z_PointAlongPathNV_ovr_6(path, startSegment, numSegments, distance, x, y, tangentX, tangentY[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function PointAlongPathNV(path: UInt32; startSegment: Int32; numSegments: Int32; distance: single; var x: single; var y: single; tangentX: IntPtr; var tangentY: single): boolean;
    begin
      Result := z_PointAlongPathNV_ovr_6(path, startSegment, numSegments, distance, x, y, tangentX, tangentY);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function PointAlongPathNV(path: UInt32; startSegment: Int32; numSegments: Int32; distance: single; var x: single; var y: single; tangentX: IntPtr; tangentY: IntPtr): boolean;
    begin
      Result := z_PointAlongPathNV_ovr_8(path, startSegment, numSegments, distance, x, y, tangentX, tangentY);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function PointAlongPathNV(path: UInt32; startSegment: Int32; numSegments: Int32; distance: single; var x: single; y: IntPtr; tangentX: array of single; tangentY: array of single): boolean;
    begin
      Result := z_PointAlongPathNV_ovr_18(path, startSegment, numSegments, distance, x, y, tangentX[0], tangentY[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function PointAlongPathNV(path: UInt32; startSegment: Int32; numSegments: Int32; distance: single; var x: single; y: IntPtr; tangentX: array of single; var tangentY: single): boolean;
    begin
      Result := z_PointAlongPathNV_ovr_18(path, startSegment, numSegments, distance, x, y, tangentX[0], tangentY);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function PointAlongPathNV(path: UInt32; startSegment: Int32; numSegments: Int32; distance: single; var x: single; y: IntPtr; tangentX: array of single; tangentY: IntPtr): boolean;
    begin
      Result := z_PointAlongPathNV_ovr_20(path, startSegment, numSegments, distance, x, y, tangentX[0], tangentY);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function PointAlongPathNV(path: UInt32; startSegment: Int32; numSegments: Int32; distance: single; var x: single; y: IntPtr; var tangentX: single; tangentY: array of single): boolean;
    begin
      Result := z_PointAlongPathNV_ovr_18(path, startSegment, numSegments, distance, x, y, tangentX, tangentY[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function PointAlongPathNV(path: UInt32; startSegment: Int32; numSegments: Int32; distance: single; var x: single; y: IntPtr; var tangentX: single; var tangentY: single): boolean;
    begin
      Result := z_PointAlongPathNV_ovr_18(path, startSegment, numSegments, distance, x, y, tangentX, tangentY);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function PointAlongPathNV(path: UInt32; startSegment: Int32; numSegments: Int32; distance: single; var x: single; y: IntPtr; var tangentX: single; tangentY: IntPtr): boolean;
    begin
      Result := z_PointAlongPathNV_ovr_20(path, startSegment, numSegments, distance, x, y, tangentX, tangentY);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function PointAlongPathNV(path: UInt32; startSegment: Int32; numSegments: Int32; distance: single; var x: single; y: IntPtr; tangentX: IntPtr; tangentY: array of single): boolean;
    begin
      Result := z_PointAlongPathNV_ovr_24(path, startSegment, numSegments, distance, x, y, tangentX, tangentY[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function PointAlongPathNV(path: UInt32; startSegment: Int32; numSegments: Int32; distance: single; var x: single; y: IntPtr; tangentX: IntPtr; var tangentY: single): boolean;
    begin
      Result := z_PointAlongPathNV_ovr_24(path, startSegment, numSegments, distance, x, y, tangentX, tangentY);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function PointAlongPathNV(path: UInt32; startSegment: Int32; numSegments: Int32; distance: single; var x: single; y: IntPtr; tangentX: IntPtr; tangentY: IntPtr): boolean;
    begin
      Result := z_PointAlongPathNV_ovr_26(path, startSegment, numSegments, distance, x, y, tangentX, tangentY);
    end;
    public z_PointAlongPathNV_ovr_54 := GetFuncOrNil&<function(path: UInt32; startSegment: Int32; numSegments: Int32; distance: single; x: IntPtr; var y: single; var tangentX: single; var tangentY: single): boolean>(z_PointAlongPathNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function PointAlongPathNV(path: UInt32; startSegment: Int32; numSegments: Int32; distance: single; x: IntPtr; y: array of single; tangentX: array of single; tangentY: array of single): boolean;
    begin
      Result := z_PointAlongPathNV_ovr_54(path, startSegment, numSegments, distance, x, y[0], tangentX[0], tangentY[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function PointAlongPathNV(path: UInt32; startSegment: Int32; numSegments: Int32; distance: single; x: IntPtr; y: array of single; tangentX: array of single; var tangentY: single): boolean;
    begin
      Result := z_PointAlongPathNV_ovr_54(path, startSegment, numSegments, distance, x, y[0], tangentX[0], tangentY);
    end;
    public z_PointAlongPathNV_ovr_56 := GetFuncOrNil&<function(path: UInt32; startSegment: Int32; numSegments: Int32; distance: single; x: IntPtr; var y: single; var tangentX: single; tangentY: IntPtr): boolean>(z_PointAlongPathNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function PointAlongPathNV(path: UInt32; startSegment: Int32; numSegments: Int32; distance: single; x: IntPtr; y: array of single; tangentX: array of single; tangentY: IntPtr): boolean;
    begin
      Result := z_PointAlongPathNV_ovr_56(path, startSegment, numSegments, distance, x, y[0], tangentX[0], tangentY);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function PointAlongPathNV(path: UInt32; startSegment: Int32; numSegments: Int32; distance: single; x: IntPtr; y: array of single; var tangentX: single; tangentY: array of single): boolean;
    begin
      Result := z_PointAlongPathNV_ovr_54(path, startSegment, numSegments, distance, x, y[0], tangentX, tangentY[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function PointAlongPathNV(path: UInt32; startSegment: Int32; numSegments: Int32; distance: single; x: IntPtr; y: array of single; var tangentX: single; var tangentY: single): boolean;
    begin
      Result := z_PointAlongPathNV_ovr_54(path, startSegment, numSegments, distance, x, y[0], tangentX, tangentY);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function PointAlongPathNV(path: UInt32; startSegment: Int32; numSegments: Int32; distance: single; x: IntPtr; y: array of single; var tangentX: single; tangentY: IntPtr): boolean;
    begin
      Result := z_PointAlongPathNV_ovr_56(path, startSegment, numSegments, distance, x, y[0], tangentX, tangentY);
    end;
    public z_PointAlongPathNV_ovr_60 := GetFuncOrNil&<function(path: UInt32; startSegment: Int32; numSegments: Int32; distance: single; x: IntPtr; var y: single; tangentX: IntPtr; var tangentY: single): boolean>(z_PointAlongPathNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function PointAlongPathNV(path: UInt32; startSegment: Int32; numSegments: Int32; distance: single; x: IntPtr; y: array of single; tangentX: IntPtr; tangentY: array of single): boolean;
    begin
      Result := z_PointAlongPathNV_ovr_60(path, startSegment, numSegments, distance, x, y[0], tangentX, tangentY[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function PointAlongPathNV(path: UInt32; startSegment: Int32; numSegments: Int32; distance: single; x: IntPtr; y: array of single; tangentX: IntPtr; var tangentY: single): boolean;
    begin
      Result := z_PointAlongPathNV_ovr_60(path, startSegment, numSegments, distance, x, y[0], tangentX, tangentY);
    end;
    public z_PointAlongPathNV_ovr_62 := GetFuncOrNil&<function(path: UInt32; startSegment: Int32; numSegments: Int32; distance: single; x: IntPtr; var y: single; tangentX: IntPtr; tangentY: IntPtr): boolean>(z_PointAlongPathNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function PointAlongPathNV(path: UInt32; startSegment: Int32; numSegments: Int32; distance: single; x: IntPtr; y: array of single; tangentX: IntPtr; tangentY: IntPtr): boolean;
    begin
      Result := z_PointAlongPathNV_ovr_62(path, startSegment, numSegments, distance, x, y[0], tangentX, tangentY);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function PointAlongPathNV(path: UInt32; startSegment: Int32; numSegments: Int32; distance: single; x: IntPtr; var y: single; tangentX: array of single; tangentY: array of single): boolean;
    begin
      Result := z_PointAlongPathNV_ovr_54(path, startSegment, numSegments, distance, x, y, tangentX[0], tangentY[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function PointAlongPathNV(path: UInt32; startSegment: Int32; numSegments: Int32; distance: single; x: IntPtr; var y: single; tangentX: array of single; var tangentY: single): boolean;
    begin
      Result := z_PointAlongPathNV_ovr_54(path, startSegment, numSegments, distance, x, y, tangentX[0], tangentY);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function PointAlongPathNV(path: UInt32; startSegment: Int32; numSegments: Int32; distance: single; x: IntPtr; var y: single; tangentX: array of single; tangentY: IntPtr): boolean;
    begin
      Result := z_PointAlongPathNV_ovr_56(path, startSegment, numSegments, distance, x, y, tangentX[0], tangentY);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function PointAlongPathNV(path: UInt32; startSegment: Int32; numSegments: Int32; distance: single; x: IntPtr; var y: single; var tangentX: single; tangentY: array of single): boolean;
    begin
      Result := z_PointAlongPathNV_ovr_54(path, startSegment, numSegments, distance, x, y, tangentX, tangentY[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function PointAlongPathNV(path: UInt32; startSegment: Int32; numSegments: Int32; distance: single; x: IntPtr; var y: single; var tangentX: single; var tangentY: single): boolean;
    begin
      Result := z_PointAlongPathNV_ovr_54(path, startSegment, numSegments, distance, x, y, tangentX, tangentY);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function PointAlongPathNV(path: UInt32; startSegment: Int32; numSegments: Int32; distance: single; x: IntPtr; var y: single; var tangentX: single; tangentY: IntPtr): boolean;
    begin
      Result := z_PointAlongPathNV_ovr_56(path, startSegment, numSegments, distance, x, y, tangentX, tangentY);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function PointAlongPathNV(path: UInt32; startSegment: Int32; numSegments: Int32; distance: single; x: IntPtr; var y: single; tangentX: IntPtr; tangentY: array of single): boolean;
    begin
      Result := z_PointAlongPathNV_ovr_60(path, startSegment, numSegments, distance, x, y, tangentX, tangentY[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function PointAlongPathNV(path: UInt32; startSegment: Int32; numSegments: Int32; distance: single; x: IntPtr; var y: single; tangentX: IntPtr; var tangentY: single): boolean;
    begin
      Result := z_PointAlongPathNV_ovr_60(path, startSegment, numSegments, distance, x, y, tangentX, tangentY);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function PointAlongPathNV(path: UInt32; startSegment: Int32; numSegments: Int32; distance: single; x: IntPtr; var y: single; tangentX: IntPtr; tangentY: IntPtr): boolean;
    begin
      Result := z_PointAlongPathNV_ovr_62(path, startSegment, numSegments, distance, x, y, tangentX, tangentY);
    end;
    public z_PointAlongPathNV_ovr_72 := GetFuncOrNil&<function(path: UInt32; startSegment: Int32; numSegments: Int32; distance: single; x: IntPtr; y: IntPtr; var tangentX: single; var tangentY: single): boolean>(z_PointAlongPathNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function PointAlongPathNV(path: UInt32; startSegment: Int32; numSegments: Int32; distance: single; x: IntPtr; y: IntPtr; tangentX: array of single; tangentY: array of single): boolean;
    begin
      Result := z_PointAlongPathNV_ovr_72(path, startSegment, numSegments, distance, x, y, tangentX[0], tangentY[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function PointAlongPathNV(path: UInt32; startSegment: Int32; numSegments: Int32; distance: single; x: IntPtr; y: IntPtr; tangentX: array of single; var tangentY: single): boolean;
    begin
      Result := z_PointAlongPathNV_ovr_72(path, startSegment, numSegments, distance, x, y, tangentX[0], tangentY);
    end;
    public z_PointAlongPathNV_ovr_74 := GetFuncOrNil&<function(path: UInt32; startSegment: Int32; numSegments: Int32; distance: single; x: IntPtr; y: IntPtr; var tangentX: single; tangentY: IntPtr): boolean>(z_PointAlongPathNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function PointAlongPathNV(path: UInt32; startSegment: Int32; numSegments: Int32; distance: single; x: IntPtr; y: IntPtr; tangentX: array of single; tangentY: IntPtr): boolean;
    begin
      Result := z_PointAlongPathNV_ovr_74(path, startSegment, numSegments, distance, x, y, tangentX[0], tangentY);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function PointAlongPathNV(path: UInt32; startSegment: Int32; numSegments: Int32; distance: single; x: IntPtr; y: IntPtr; var tangentX: single; tangentY: array of single): boolean;
    begin
      Result := z_PointAlongPathNV_ovr_72(path, startSegment, numSegments, distance, x, y, tangentX, tangentY[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function PointAlongPathNV(path: UInt32; startSegment: Int32; numSegments: Int32; distance: single; x: IntPtr; y: IntPtr; var tangentX: single; var tangentY: single): boolean;
    begin
      Result := z_PointAlongPathNV_ovr_72(path, startSegment, numSegments, distance, x, y, tangentX, tangentY);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function PointAlongPathNV(path: UInt32; startSegment: Int32; numSegments: Int32; distance: single; x: IntPtr; y: IntPtr; var tangentX: single; tangentY: IntPtr): boolean;
    begin
      Result := z_PointAlongPathNV_ovr_74(path, startSegment, numSegments, distance, x, y, tangentX, tangentY);
    end;
    public z_PointAlongPathNV_ovr_78 := GetFuncOrNil&<function(path: UInt32; startSegment: Int32; numSegments: Int32; distance: single; x: IntPtr; y: IntPtr; tangentX: IntPtr; var tangentY: single): boolean>(z_PointAlongPathNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function PointAlongPathNV(path: UInt32; startSegment: Int32; numSegments: Int32; distance: single; x: IntPtr; y: IntPtr; tangentX: IntPtr; tangentY: array of single): boolean;
    begin
      Result := z_PointAlongPathNV_ovr_78(path, startSegment, numSegments, distance, x, y, tangentX, tangentY[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function PointAlongPathNV(path: UInt32; startSegment: Int32; numSegments: Int32; distance: single; x: IntPtr; y: IntPtr; tangentX: IntPtr; var tangentY: single): boolean;
    begin
      Result := z_PointAlongPathNV_ovr_78(path, startSegment, numSegments, distance, x, y, tangentX, tangentY);
    end;
    public z_PointAlongPathNV_ovr_80 := GetFuncOrNil&<function(path: UInt32; startSegment: Int32; numSegments: Int32; distance: single; x: IntPtr; y: IntPtr; tangentX: IntPtr; tangentY: IntPtr): boolean>(z_PointAlongPathNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function PointAlongPathNV(path: UInt32; startSegment: Int32; numSegments: Int32; distance: single; x: IntPtr; y: IntPtr; tangentX: IntPtr; tangentY: IntPtr): boolean;
    begin
      Result := z_PointAlongPathNV_ovr_80(path, startSegment, numSegments, distance, x, y, tangentX, tangentY);
    end;
    
    public z_MatrixLoad3x2fNV_adr := GetFuncAdr('glMatrixLoad3x2fNV');
    public z_MatrixLoad3x2fNV_ovr_0 := GetFuncOrNil&<procedure(matrixMode: DummyEnum; var m: single)>(z_MatrixLoad3x2fNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MatrixLoad3x2fNV(matrixMode: DummyEnum; m: array of single);
    begin
      z_MatrixLoad3x2fNV_ovr_0(matrixMode, m[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MatrixLoad3x2fNV(matrixMode: DummyEnum; var m: single);
    begin
      z_MatrixLoad3x2fNV_ovr_0(matrixMode, m);
    end;
    public z_MatrixLoad3x2fNV_ovr_2 := GetFuncOrNil&<procedure(matrixMode: DummyEnum; m: IntPtr)>(z_MatrixLoad3x2fNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MatrixLoad3x2fNV(matrixMode: DummyEnum; m: IntPtr);
    begin
      z_MatrixLoad3x2fNV_ovr_2(matrixMode, m);
    end;
    
    public z_MatrixLoad3x3fNV_adr := GetFuncAdr('glMatrixLoad3x3fNV');
    public z_MatrixLoad3x3fNV_ovr_0 := GetFuncOrNil&<procedure(matrixMode: DummyEnum; var m: single)>(z_MatrixLoad3x3fNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MatrixLoad3x3fNV(matrixMode: DummyEnum; m: array of single);
    begin
      z_MatrixLoad3x3fNV_ovr_0(matrixMode, m[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MatrixLoad3x3fNV(matrixMode: DummyEnum; var m: single);
    begin
      z_MatrixLoad3x3fNV_ovr_0(matrixMode, m);
    end;
    public z_MatrixLoad3x3fNV_ovr_2 := GetFuncOrNil&<procedure(matrixMode: DummyEnum; m: IntPtr)>(z_MatrixLoad3x3fNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MatrixLoad3x3fNV(matrixMode: DummyEnum; m: IntPtr);
    begin
      z_MatrixLoad3x3fNV_ovr_2(matrixMode, m);
    end;
    
    public z_MatrixLoadTranspose3x3fNV_adr := GetFuncAdr('glMatrixLoadTranspose3x3fNV');
    public z_MatrixLoadTranspose3x3fNV_ovr_0 := GetFuncOrNil&<procedure(matrixMode: DummyEnum; var m: single)>(z_MatrixLoadTranspose3x3fNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MatrixLoadTranspose3x3fNV(matrixMode: DummyEnum; m: array of single);
    begin
      z_MatrixLoadTranspose3x3fNV_ovr_0(matrixMode, m[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MatrixLoadTranspose3x3fNV(matrixMode: DummyEnum; var m: single);
    begin
      z_MatrixLoadTranspose3x3fNV_ovr_0(matrixMode, m);
    end;
    public z_MatrixLoadTranspose3x3fNV_ovr_2 := GetFuncOrNil&<procedure(matrixMode: DummyEnum; m: IntPtr)>(z_MatrixLoadTranspose3x3fNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MatrixLoadTranspose3x3fNV(matrixMode: DummyEnum; m: IntPtr);
    begin
      z_MatrixLoadTranspose3x3fNV_ovr_2(matrixMode, m);
    end;
    
    public z_MatrixMult3x2fNV_adr := GetFuncAdr('glMatrixMult3x2fNV');
    public z_MatrixMult3x2fNV_ovr_0 := GetFuncOrNil&<procedure(matrixMode: DummyEnum; var m: single)>(z_MatrixMult3x2fNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MatrixMult3x2fNV(matrixMode: DummyEnum; m: array of single);
    begin
      z_MatrixMult3x2fNV_ovr_0(matrixMode, m[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MatrixMult3x2fNV(matrixMode: DummyEnum; var m: single);
    begin
      z_MatrixMult3x2fNV_ovr_0(matrixMode, m);
    end;
    public z_MatrixMult3x2fNV_ovr_2 := GetFuncOrNil&<procedure(matrixMode: DummyEnum; m: IntPtr)>(z_MatrixMult3x2fNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MatrixMult3x2fNV(matrixMode: DummyEnum; m: IntPtr);
    begin
      z_MatrixMult3x2fNV_ovr_2(matrixMode, m);
    end;
    
    public z_MatrixMult3x3fNV_adr := GetFuncAdr('glMatrixMult3x3fNV');
    public z_MatrixMult3x3fNV_ovr_0 := GetFuncOrNil&<procedure(matrixMode: DummyEnum; var m: single)>(z_MatrixMult3x3fNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MatrixMult3x3fNV(matrixMode: DummyEnum; m: array of single);
    begin
      z_MatrixMult3x3fNV_ovr_0(matrixMode, m[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MatrixMult3x3fNV(matrixMode: DummyEnum; var m: single);
    begin
      z_MatrixMult3x3fNV_ovr_0(matrixMode, m);
    end;
    public z_MatrixMult3x3fNV_ovr_2 := GetFuncOrNil&<procedure(matrixMode: DummyEnum; m: IntPtr)>(z_MatrixMult3x3fNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MatrixMult3x3fNV(matrixMode: DummyEnum; m: IntPtr);
    begin
      z_MatrixMult3x3fNV_ovr_2(matrixMode, m);
    end;
    
    public z_MatrixMultTranspose3x3fNV_adr := GetFuncAdr('glMatrixMultTranspose3x3fNV');
    public z_MatrixMultTranspose3x3fNV_ovr_0 := GetFuncOrNil&<procedure(matrixMode: DummyEnum; var m: single)>(z_MatrixMultTranspose3x3fNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MatrixMultTranspose3x3fNV(matrixMode: DummyEnum; m: array of single);
    begin
      z_MatrixMultTranspose3x3fNV_ovr_0(matrixMode, m[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MatrixMultTranspose3x3fNV(matrixMode: DummyEnum; var m: single);
    begin
      z_MatrixMultTranspose3x3fNV_ovr_0(matrixMode, m);
    end;
    public z_MatrixMultTranspose3x3fNV_ovr_2 := GetFuncOrNil&<procedure(matrixMode: DummyEnum; m: IntPtr)>(z_MatrixMultTranspose3x3fNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MatrixMultTranspose3x3fNV(matrixMode: DummyEnum; m: IntPtr);
    begin
      z_MatrixMultTranspose3x3fNV_ovr_2(matrixMode, m);
    end;
    
    public z_StencilThenCoverFillPathNV_adr := GetFuncAdr('glStencilThenCoverFillPathNV');
    public z_StencilThenCoverFillPathNV_ovr_0 := GetFuncOrNil&<procedure(path: UInt32; fillMode: DummyEnum; mask: UInt32; coverMode: DummyEnum)>(z_StencilThenCoverFillPathNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure StencilThenCoverFillPathNV(path: UInt32; fillMode: DummyEnum; mask: UInt32; coverMode: DummyEnum);
    begin
      z_StencilThenCoverFillPathNV_ovr_0(path, fillMode, mask, coverMode);
    end;
    
    public z_StencilThenCoverStrokePathNV_adr := GetFuncAdr('glStencilThenCoverStrokePathNV');
    public z_StencilThenCoverStrokePathNV_ovr_0 := GetFuncOrNil&<procedure(path: UInt32; reference: Int32; mask: UInt32; coverMode: DummyEnum)>(z_StencilThenCoverStrokePathNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure StencilThenCoverStrokePathNV(path: UInt32; reference: Int32; mask: UInt32; coverMode: DummyEnum);
    begin
      z_StencilThenCoverStrokePathNV_ovr_0(path, reference, mask, coverMode);
    end;
    
    public z_StencilThenCoverFillPathInstancedNV_adr := GetFuncAdr('glStencilThenCoverFillPathInstancedNV');
    public z_StencilThenCoverFillPathInstancedNV_ovr_0 := GetFuncOrNil&<procedure(numPaths: Int32; pathNameType: DummyEnum; paths: IntPtr; pathBase: UInt32; fillMode: DummyEnum; mask: UInt32; coverMode: DummyEnum; transformType: DummyEnum; var transformValues: single)>(z_StencilThenCoverFillPathInstancedNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure StencilThenCoverFillPathInstancedNV(numPaths: Int32; pathNameType: DummyEnum; paths: IntPtr; pathBase: UInt32; fillMode: DummyEnum; mask: UInt32; coverMode: DummyEnum; transformType: DummyEnum; transformValues: array of single);
    begin
      z_StencilThenCoverFillPathInstancedNV_ovr_0(numPaths, pathNameType, paths, pathBase, fillMode, mask, coverMode, transformType, transformValues[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure StencilThenCoverFillPathInstancedNV(numPaths: Int32; pathNameType: DummyEnum; paths: IntPtr; pathBase: UInt32; fillMode: DummyEnum; mask: UInt32; coverMode: DummyEnum; transformType: DummyEnum; var transformValues: single);
    begin
      z_StencilThenCoverFillPathInstancedNV_ovr_0(numPaths, pathNameType, paths, pathBase, fillMode, mask, coverMode, transformType, transformValues);
    end;
    public z_StencilThenCoverFillPathInstancedNV_ovr_2 := GetFuncOrNil&<procedure(numPaths: Int32; pathNameType: DummyEnum; paths: IntPtr; pathBase: UInt32; fillMode: DummyEnum; mask: UInt32; coverMode: DummyEnum; transformType: DummyEnum; transformValues: IntPtr)>(z_StencilThenCoverFillPathInstancedNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure StencilThenCoverFillPathInstancedNV(numPaths: Int32; pathNameType: DummyEnum; paths: IntPtr; pathBase: UInt32; fillMode: DummyEnum; mask: UInt32; coverMode: DummyEnum; transformType: DummyEnum; transformValues: IntPtr);
    begin
      z_StencilThenCoverFillPathInstancedNV_ovr_2(numPaths, pathNameType, paths, pathBase, fillMode, mask, coverMode, transformType, transformValues);
    end;
    
    public z_StencilThenCoverStrokePathInstancedNV_adr := GetFuncAdr('glStencilThenCoverStrokePathInstancedNV');
    public z_StencilThenCoverStrokePathInstancedNV_ovr_0 := GetFuncOrNil&<procedure(numPaths: Int32; pathNameType: DummyEnum; paths: IntPtr; pathBase: UInt32; reference: Int32; mask: UInt32; coverMode: DummyEnum; transformType: DummyEnum; var transformValues: single)>(z_StencilThenCoverStrokePathInstancedNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure StencilThenCoverStrokePathInstancedNV(numPaths: Int32; pathNameType: DummyEnum; paths: IntPtr; pathBase: UInt32; reference: Int32; mask: UInt32; coverMode: DummyEnum; transformType: DummyEnum; transformValues: array of single);
    begin
      z_StencilThenCoverStrokePathInstancedNV_ovr_0(numPaths, pathNameType, paths, pathBase, reference, mask, coverMode, transformType, transformValues[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure StencilThenCoverStrokePathInstancedNV(numPaths: Int32; pathNameType: DummyEnum; paths: IntPtr; pathBase: UInt32; reference: Int32; mask: UInt32; coverMode: DummyEnum; transformType: DummyEnum; var transformValues: single);
    begin
      z_StencilThenCoverStrokePathInstancedNV_ovr_0(numPaths, pathNameType, paths, pathBase, reference, mask, coverMode, transformType, transformValues);
    end;
    public z_StencilThenCoverStrokePathInstancedNV_ovr_2 := GetFuncOrNil&<procedure(numPaths: Int32; pathNameType: DummyEnum; paths: IntPtr; pathBase: UInt32; reference: Int32; mask: UInt32; coverMode: DummyEnum; transformType: DummyEnum; transformValues: IntPtr)>(z_StencilThenCoverStrokePathInstancedNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure StencilThenCoverStrokePathInstancedNV(numPaths: Int32; pathNameType: DummyEnum; paths: IntPtr; pathBase: UInt32; reference: Int32; mask: UInt32; coverMode: DummyEnum; transformType: DummyEnum; transformValues: IntPtr);
    begin
      z_StencilThenCoverStrokePathInstancedNV_ovr_2(numPaths, pathNameType, paths, pathBase, reference, mask, coverMode, transformType, transformValues);
    end;
    
    public z_PathGlyphIndexRangeNV_adr := GetFuncAdr('glPathGlyphIndexRangeNV');
    public z_PathGlyphIndexRangeNV_ovr_0 := GetFuncOrNil&<function(fontTarget: DummyEnum; fontName: IntPtr; fontStyle: PathFontStyle; pathParameterTemplate: UInt32; emScale: single; baseAndCount: UInt32): DummyEnum>(z_PathGlyphIndexRangeNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function PathGlyphIndexRangeNV(fontTarget: DummyEnum; fontName: IntPtr; fontStyle: PathFontStyle; pathParameterTemplate: UInt32; emScale: single; baseAndCount: UInt32): DummyEnum;
    begin
      Result := z_PathGlyphIndexRangeNV_ovr_0(fontTarget, fontName, fontStyle, pathParameterTemplate, emScale, baseAndCount);
    end;
    
    public z_PathGlyphIndexArrayNV_adr := GetFuncAdr('glPathGlyphIndexArrayNV');
    public z_PathGlyphIndexArrayNV_ovr_0 := GetFuncOrNil&<function(firstPathName: UInt32; fontTarget: DummyEnum; fontName: IntPtr; fontStyle: PathFontStyle; firstGlyphIndex: UInt32; numGlyphs: Int32; pathParameterTemplate: UInt32; emScale: single): DummyEnum>(z_PathGlyphIndexArrayNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function PathGlyphIndexArrayNV(firstPathName: UInt32; fontTarget: DummyEnum; fontName: IntPtr; fontStyle: PathFontStyle; firstGlyphIndex: UInt32; numGlyphs: Int32; pathParameterTemplate: UInt32; emScale: single): DummyEnum;
    begin
      Result := z_PathGlyphIndexArrayNV_ovr_0(firstPathName, fontTarget, fontName, fontStyle, firstGlyphIndex, numGlyphs, pathParameterTemplate, emScale);
    end;
    
    public z_PathMemoryGlyphIndexArrayNV_adr := GetFuncAdr('glPathMemoryGlyphIndexArrayNV');
    public z_PathMemoryGlyphIndexArrayNV_ovr_0 := GetFuncOrNil&<function(firstPathName: UInt32; fontTarget: DummyEnum; fontSize: IntPtr; fontData: IntPtr; faceIndex: Int32; firstGlyphIndex: UInt32; numGlyphs: Int32; pathParameterTemplate: UInt32; emScale: single): DummyEnum>(z_PathMemoryGlyphIndexArrayNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function PathMemoryGlyphIndexArrayNV(firstPathName: UInt32; fontTarget: DummyEnum; fontSize: IntPtr; fontData: IntPtr; faceIndex: Int32; firstGlyphIndex: UInt32; numGlyphs: Int32; pathParameterTemplate: UInt32; emScale: single): DummyEnum;
    begin
      Result := z_PathMemoryGlyphIndexArrayNV_ovr_0(firstPathName, fontTarget, fontSize, fontData, faceIndex, firstGlyphIndex, numGlyphs, pathParameterTemplate, emScale);
    end;
    
    public z_ProgramPathFragmentInputGenNV_adr := GetFuncAdr('glProgramPathFragmentInputGenNV');
    public z_ProgramPathFragmentInputGenNV_ovr_0 := GetFuncOrNil&<procedure(&program: UInt32; location: Int32; genMode: DummyEnum; components: Int32; var coeffs: single)>(z_ProgramPathFragmentInputGenNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramPathFragmentInputGenNV(&program: UInt32; location: Int32; genMode: DummyEnum; components: Int32; coeffs: array of single);
    begin
      z_ProgramPathFragmentInputGenNV_ovr_0(&program, location, genMode, components, coeffs[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramPathFragmentInputGenNV(&program: UInt32; location: Int32; genMode: DummyEnum; components: Int32; var coeffs: single);
    begin
      z_ProgramPathFragmentInputGenNV_ovr_0(&program, location, genMode, components, coeffs);
    end;
    public z_ProgramPathFragmentInputGenNV_ovr_2 := GetFuncOrNil&<procedure(&program: UInt32; location: Int32; genMode: DummyEnum; components: Int32; coeffs: IntPtr)>(z_ProgramPathFragmentInputGenNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramPathFragmentInputGenNV(&program: UInt32; location: Int32; genMode: DummyEnum; components: Int32; coeffs: IntPtr);
    begin
      z_ProgramPathFragmentInputGenNV_ovr_2(&program, location, genMode, components, coeffs);
    end;
    
    public z_GetProgramResourcefvNV_adr := GetFuncAdr('glGetProgramResourcefvNV');
    public z_GetProgramResourcefvNV_ovr_0 := GetFuncOrNil&<procedure(&program: UInt32; _programInterface: ProgramInterface; index: UInt32; propCount: Int32; var props: DummyEnum; count: Int32; var length: Int32; var &params: single)>(z_GetProgramResourcefvNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetProgramResourcefvNV(&program: UInt32; _programInterface: ProgramInterface; index: UInt32; propCount: Int32; props: array of DummyEnum; count: Int32; length: array of Int32; &params: array of single);
    begin
      z_GetProgramResourcefvNV_ovr_0(&program, _programInterface, index, propCount, props[0], count, length[0], &params[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetProgramResourcefvNV(&program: UInt32; _programInterface: ProgramInterface; index: UInt32; propCount: Int32; props: array of DummyEnum; count: Int32; length: array of Int32; var &params: single);
    begin
      z_GetProgramResourcefvNV_ovr_0(&program, _programInterface, index, propCount, props[0], count, length[0], &params);
    end;
    public z_GetProgramResourcefvNV_ovr_2 := GetFuncOrNil&<procedure(&program: UInt32; _programInterface: ProgramInterface; index: UInt32; propCount: Int32; var props: DummyEnum; count: Int32; var length: Int32; &params: IntPtr)>(z_GetProgramResourcefvNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetProgramResourcefvNV(&program: UInt32; _programInterface: ProgramInterface; index: UInt32; propCount: Int32; props: array of DummyEnum; count: Int32; length: array of Int32; &params: IntPtr);
    begin
      z_GetProgramResourcefvNV_ovr_2(&program, _programInterface, index, propCount, props[0], count, length[0], &params);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetProgramResourcefvNV(&program: UInt32; _programInterface: ProgramInterface; index: UInt32; propCount: Int32; props: array of DummyEnum; count: Int32; var length: Int32; &params: array of single);
    begin
      z_GetProgramResourcefvNV_ovr_0(&program, _programInterface, index, propCount, props[0], count, length, &params[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetProgramResourcefvNV(&program: UInt32; _programInterface: ProgramInterface; index: UInt32; propCount: Int32; props: array of DummyEnum; count: Int32; var length: Int32; var &params: single);
    begin
      z_GetProgramResourcefvNV_ovr_0(&program, _programInterface, index, propCount, props[0], count, length, &params);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetProgramResourcefvNV(&program: UInt32; _programInterface: ProgramInterface; index: UInt32; propCount: Int32; props: array of DummyEnum; count: Int32; var length: Int32; &params: IntPtr);
    begin
      z_GetProgramResourcefvNV_ovr_2(&program, _programInterface, index, propCount, props[0], count, length, &params);
    end;
    public z_GetProgramResourcefvNV_ovr_6 := GetFuncOrNil&<procedure(&program: UInt32; _programInterface: ProgramInterface; index: UInt32; propCount: Int32; var props: DummyEnum; count: Int32; length: IntPtr; var &params: single)>(z_GetProgramResourcefvNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetProgramResourcefvNV(&program: UInt32; _programInterface: ProgramInterface; index: UInt32; propCount: Int32; props: array of DummyEnum; count: Int32; length: IntPtr; &params: array of single);
    begin
      z_GetProgramResourcefvNV_ovr_6(&program, _programInterface, index, propCount, props[0], count, length, &params[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetProgramResourcefvNV(&program: UInt32; _programInterface: ProgramInterface; index: UInt32; propCount: Int32; props: array of DummyEnum; count: Int32; length: IntPtr; var &params: single);
    begin
      z_GetProgramResourcefvNV_ovr_6(&program, _programInterface, index, propCount, props[0], count, length, &params);
    end;
    public z_GetProgramResourcefvNV_ovr_8 := GetFuncOrNil&<procedure(&program: UInt32; _programInterface: ProgramInterface; index: UInt32; propCount: Int32; var props: DummyEnum; count: Int32; length: IntPtr; &params: IntPtr)>(z_GetProgramResourcefvNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetProgramResourcefvNV(&program: UInt32; _programInterface: ProgramInterface; index: UInt32; propCount: Int32; props: array of DummyEnum; count: Int32; length: IntPtr; &params: IntPtr);
    begin
      z_GetProgramResourcefvNV_ovr_8(&program, _programInterface, index, propCount, props[0], count, length, &params);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetProgramResourcefvNV(&program: UInt32; _programInterface: ProgramInterface; index: UInt32; propCount: Int32; var props: DummyEnum; count: Int32; length: array of Int32; &params: array of single);
    begin
      z_GetProgramResourcefvNV_ovr_0(&program, _programInterface, index, propCount, props, count, length[0], &params[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetProgramResourcefvNV(&program: UInt32; _programInterface: ProgramInterface; index: UInt32; propCount: Int32; var props: DummyEnum; count: Int32; length: array of Int32; var &params: single);
    begin
      z_GetProgramResourcefvNV_ovr_0(&program, _programInterface, index, propCount, props, count, length[0], &params);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetProgramResourcefvNV(&program: UInt32; _programInterface: ProgramInterface; index: UInt32; propCount: Int32; var props: DummyEnum; count: Int32; length: array of Int32; &params: IntPtr);
    begin
      z_GetProgramResourcefvNV_ovr_2(&program, _programInterface, index, propCount, props, count, length[0], &params);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetProgramResourcefvNV(&program: UInt32; _programInterface: ProgramInterface; index: UInt32; propCount: Int32; var props: DummyEnum; count: Int32; var length: Int32; &params: array of single);
    begin
      z_GetProgramResourcefvNV_ovr_0(&program, _programInterface, index, propCount, props, count, length, &params[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetProgramResourcefvNV(&program: UInt32; _programInterface: ProgramInterface; index: UInt32; propCount: Int32; var props: DummyEnum; count: Int32; var length: Int32; var &params: single);
    begin
      z_GetProgramResourcefvNV_ovr_0(&program, _programInterface, index, propCount, props, count, length, &params);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetProgramResourcefvNV(&program: UInt32; _programInterface: ProgramInterface; index: UInt32; propCount: Int32; var props: DummyEnum; count: Int32; var length: Int32; &params: IntPtr);
    begin
      z_GetProgramResourcefvNV_ovr_2(&program, _programInterface, index, propCount, props, count, length, &params);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetProgramResourcefvNV(&program: UInt32; _programInterface: ProgramInterface; index: UInt32; propCount: Int32; var props: DummyEnum; count: Int32; length: IntPtr; &params: array of single);
    begin
      z_GetProgramResourcefvNV_ovr_6(&program, _programInterface, index, propCount, props, count, length, &params[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetProgramResourcefvNV(&program: UInt32; _programInterface: ProgramInterface; index: UInt32; propCount: Int32; var props: DummyEnum; count: Int32; length: IntPtr; var &params: single);
    begin
      z_GetProgramResourcefvNV_ovr_6(&program, _programInterface, index, propCount, props, count, length, &params);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetProgramResourcefvNV(&program: UInt32; _programInterface: ProgramInterface; index: UInt32; propCount: Int32; var props: DummyEnum; count: Int32; length: IntPtr; &params: IntPtr);
    begin
      z_GetProgramResourcefvNV_ovr_8(&program, _programInterface, index, propCount, props, count, length, &params);
    end;
    public z_GetProgramResourcefvNV_ovr_18 := GetFuncOrNil&<procedure(&program: UInt32; _programInterface: ProgramInterface; index: UInt32; propCount: Int32; props: IntPtr; count: Int32; var length: Int32; var &params: single)>(z_GetProgramResourcefvNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetProgramResourcefvNV(&program: UInt32; _programInterface: ProgramInterface; index: UInt32; propCount: Int32; props: IntPtr; count: Int32; length: array of Int32; &params: array of single);
    begin
      z_GetProgramResourcefvNV_ovr_18(&program, _programInterface, index, propCount, props, count, length[0], &params[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetProgramResourcefvNV(&program: UInt32; _programInterface: ProgramInterface; index: UInt32; propCount: Int32; props: IntPtr; count: Int32; length: array of Int32; var &params: single);
    begin
      z_GetProgramResourcefvNV_ovr_18(&program, _programInterface, index, propCount, props, count, length[0], &params);
    end;
    public z_GetProgramResourcefvNV_ovr_20 := GetFuncOrNil&<procedure(&program: UInt32; _programInterface: ProgramInterface; index: UInt32; propCount: Int32; props: IntPtr; count: Int32; var length: Int32; &params: IntPtr)>(z_GetProgramResourcefvNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetProgramResourcefvNV(&program: UInt32; _programInterface: ProgramInterface; index: UInt32; propCount: Int32; props: IntPtr; count: Int32; length: array of Int32; &params: IntPtr);
    begin
      z_GetProgramResourcefvNV_ovr_20(&program, _programInterface, index, propCount, props, count, length[0], &params);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetProgramResourcefvNV(&program: UInt32; _programInterface: ProgramInterface; index: UInt32; propCount: Int32; props: IntPtr; count: Int32; var length: Int32; &params: array of single);
    begin
      z_GetProgramResourcefvNV_ovr_18(&program, _programInterface, index, propCount, props, count, length, &params[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetProgramResourcefvNV(&program: UInt32; _programInterface: ProgramInterface; index: UInt32; propCount: Int32; props: IntPtr; count: Int32; var length: Int32; var &params: single);
    begin
      z_GetProgramResourcefvNV_ovr_18(&program, _programInterface, index, propCount, props, count, length, &params);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetProgramResourcefvNV(&program: UInt32; _programInterface: ProgramInterface; index: UInt32; propCount: Int32; props: IntPtr; count: Int32; var length: Int32; &params: IntPtr);
    begin
      z_GetProgramResourcefvNV_ovr_20(&program, _programInterface, index, propCount, props, count, length, &params);
    end;
    public z_GetProgramResourcefvNV_ovr_24 := GetFuncOrNil&<procedure(&program: UInt32; _programInterface: ProgramInterface; index: UInt32; propCount: Int32; props: IntPtr; count: Int32; length: IntPtr; var &params: single)>(z_GetProgramResourcefvNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetProgramResourcefvNV(&program: UInt32; _programInterface: ProgramInterface; index: UInt32; propCount: Int32; props: IntPtr; count: Int32; length: IntPtr; &params: array of single);
    begin
      z_GetProgramResourcefvNV_ovr_24(&program, _programInterface, index, propCount, props, count, length, &params[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetProgramResourcefvNV(&program: UInt32; _programInterface: ProgramInterface; index: UInt32; propCount: Int32; props: IntPtr; count: Int32; length: IntPtr; var &params: single);
    begin
      z_GetProgramResourcefvNV_ovr_24(&program, _programInterface, index, propCount, props, count, length, &params);
    end;
    public z_GetProgramResourcefvNV_ovr_26 := GetFuncOrNil&<procedure(&program: UInt32; _programInterface: ProgramInterface; index: UInt32; propCount: Int32; props: IntPtr; count: Int32; length: IntPtr; &params: IntPtr)>(z_GetProgramResourcefvNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetProgramResourcefvNV(&program: UInt32; _programInterface: ProgramInterface; index: UInt32; propCount: Int32; props: IntPtr; count: Int32; length: IntPtr; &params: IntPtr);
    begin
      z_GetProgramResourcefvNV_ovr_26(&program, _programInterface, index, propCount, props, count, length, &params);
    end;
    
    public z_PathColorGenNV_adr := GetFuncAdr('glPathColorGenNV');
    public z_PathColorGenNV_ovr_0 := GetFuncOrNil&<procedure(color: PathColor; genMode: PathGenMode; colorFormat: PathColorFormat; var coeffs: single)>(z_PathColorGenNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure PathColorGenNV(color: PathColor; genMode: PathGenMode; colorFormat: PathColorFormat; coeffs: array of single);
    begin
      z_PathColorGenNV_ovr_0(color, genMode, colorFormat, coeffs[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure PathColorGenNV(color: PathColor; genMode: PathGenMode; colorFormat: PathColorFormat; var coeffs: single);
    begin
      z_PathColorGenNV_ovr_0(color, genMode, colorFormat, coeffs);
    end;
    public z_PathColorGenNV_ovr_2 := GetFuncOrNil&<procedure(color: PathColor; genMode: PathGenMode; colorFormat: PathColorFormat; coeffs: IntPtr)>(z_PathColorGenNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure PathColorGenNV(color: PathColor; genMode: PathGenMode; colorFormat: PathColorFormat; coeffs: IntPtr);
    begin
      z_PathColorGenNV_ovr_2(color, genMode, colorFormat, coeffs);
    end;
    
    public z_PathTexGenNV_adr := GetFuncAdr('glPathTexGenNV');
    public z_PathTexGenNV_ovr_0 := GetFuncOrNil&<procedure(texCoordSet: PathColor; genMode: PathGenMode; components: Int32; var coeffs: single)>(z_PathTexGenNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure PathTexGenNV(texCoordSet: PathColor; genMode: PathGenMode; components: Int32; coeffs: array of single);
    begin
      z_PathTexGenNV_ovr_0(texCoordSet, genMode, components, coeffs[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure PathTexGenNV(texCoordSet: PathColor; genMode: PathGenMode; components: Int32; var coeffs: single);
    begin
      z_PathTexGenNV_ovr_0(texCoordSet, genMode, components, coeffs);
    end;
    public z_PathTexGenNV_ovr_2 := GetFuncOrNil&<procedure(texCoordSet: PathColor; genMode: PathGenMode; components: Int32; coeffs: IntPtr)>(z_PathTexGenNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure PathTexGenNV(texCoordSet: PathColor; genMode: PathGenMode; components: Int32; coeffs: IntPtr);
    begin
      z_PathTexGenNV_ovr_2(texCoordSet, genMode, components, coeffs);
    end;
    
    public z_PathFogGenNV_adr := GetFuncAdr('glPathFogGenNV');
    public z_PathFogGenNV_ovr_0 := GetFuncOrNil&<procedure(genMode: PathGenMode)>(z_PathFogGenNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure PathFogGenNV(genMode: PathGenMode);
    begin
      z_PathFogGenNV_ovr_0(genMode);
    end;
    
    public z_GetPathColorGenivNV_adr := GetFuncAdr('glGetPathColorGenivNV');
    public z_GetPathColorGenivNV_ovr_0 := GetFuncOrNil&<procedure(color: PathColor; pname: PathGenMode; var value: Int32)>(z_GetPathColorGenivNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetPathColorGenivNV(color: PathColor; pname: PathGenMode; value: array of Int32);
    begin
      z_GetPathColorGenivNV_ovr_0(color, pname, value[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetPathColorGenivNV(color: PathColor; pname: PathGenMode; var value: Int32);
    begin
      z_GetPathColorGenivNV_ovr_0(color, pname, value);
    end;
    public z_GetPathColorGenivNV_ovr_2 := GetFuncOrNil&<procedure(color: PathColor; pname: PathGenMode; value: IntPtr)>(z_GetPathColorGenivNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetPathColorGenivNV(color: PathColor; pname: PathGenMode; value: IntPtr);
    begin
      z_GetPathColorGenivNV_ovr_2(color, pname, value);
    end;
    
    public z_GetPathColorGenfvNV_adr := GetFuncAdr('glGetPathColorGenfvNV');
    public z_GetPathColorGenfvNV_ovr_0 := GetFuncOrNil&<procedure(color: PathColor; pname: PathGenMode; var value: single)>(z_GetPathColorGenfvNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetPathColorGenfvNV(color: PathColor; pname: PathGenMode; value: array of single);
    begin
      z_GetPathColorGenfvNV_ovr_0(color, pname, value[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetPathColorGenfvNV(color: PathColor; pname: PathGenMode; var value: single);
    begin
      z_GetPathColorGenfvNV_ovr_0(color, pname, value);
    end;
    public z_GetPathColorGenfvNV_ovr_2 := GetFuncOrNil&<procedure(color: PathColor; pname: PathGenMode; value: IntPtr)>(z_GetPathColorGenfvNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetPathColorGenfvNV(color: PathColor; pname: PathGenMode; value: IntPtr);
    begin
      z_GetPathColorGenfvNV_ovr_2(color, pname, value);
    end;
    
    public z_GetPathTexGenivNV_adr := GetFuncAdr('glGetPathTexGenivNV');
    public z_GetPathTexGenivNV_ovr_0 := GetFuncOrNil&<procedure(texCoordSet: TextureUnit; pname: PathGenMode; var value: Int32)>(z_GetPathTexGenivNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetPathTexGenivNV(texCoordSet: TextureUnit; pname: PathGenMode; value: array of Int32);
    begin
      z_GetPathTexGenivNV_ovr_0(texCoordSet, pname, value[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetPathTexGenivNV(texCoordSet: TextureUnit; pname: PathGenMode; var value: Int32);
    begin
      z_GetPathTexGenivNV_ovr_0(texCoordSet, pname, value);
    end;
    public z_GetPathTexGenivNV_ovr_2 := GetFuncOrNil&<procedure(texCoordSet: TextureUnit; pname: PathGenMode; value: IntPtr)>(z_GetPathTexGenivNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetPathTexGenivNV(texCoordSet: TextureUnit; pname: PathGenMode; value: IntPtr);
    begin
      z_GetPathTexGenivNV_ovr_2(texCoordSet, pname, value);
    end;
    
    public z_GetPathTexGenfvNV_adr := GetFuncAdr('glGetPathTexGenfvNV');
    public z_GetPathTexGenfvNV_ovr_0 := GetFuncOrNil&<procedure(texCoordSet: TextureUnit; pname: PathGenMode; var value: single)>(z_GetPathTexGenfvNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetPathTexGenfvNV(texCoordSet: TextureUnit; pname: PathGenMode; value: array of single);
    begin
      z_GetPathTexGenfvNV_ovr_0(texCoordSet, pname, value[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetPathTexGenfvNV(texCoordSet: TextureUnit; pname: PathGenMode; var value: single);
    begin
      z_GetPathTexGenfvNV_ovr_0(texCoordSet, pname, value);
    end;
    public z_GetPathTexGenfvNV_ovr_2 := GetFuncOrNil&<procedure(texCoordSet: TextureUnit; pname: PathGenMode; value: IntPtr)>(z_GetPathTexGenfvNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetPathTexGenfvNV(texCoordSet: TextureUnit; pname: PathGenMode; value: IntPtr);
    begin
      z_GetPathTexGenfvNV_ovr_2(texCoordSet, pname, value);
    end;
    
    public z_MatrixFrustumEXT_adr := GetFuncAdr('glMatrixFrustumEXT');
    public z_MatrixFrustumEXT_ovr_0 := GetFuncOrNil&<procedure(mode: MatrixMode; left: real; right: real; bottom: real; top: real; zNear: real; zFar: real)>(z_MatrixFrustumEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MatrixFrustumEXT(mode: MatrixMode; left: real; right: real; bottom: real; top: real; zNear: real; zFar: real);
    begin
      z_MatrixFrustumEXT_ovr_0(mode, left, right, bottom, top, zNear, zFar);
    end;
    
    public z_MatrixLoadIdentityEXT_adr := GetFuncAdr('glMatrixLoadIdentityEXT');
    public z_MatrixLoadIdentityEXT_ovr_0 := GetFuncOrNil&<procedure(mode: MatrixMode)>(z_MatrixLoadIdentityEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MatrixLoadIdentityEXT(mode: MatrixMode);
    begin
      z_MatrixLoadIdentityEXT_ovr_0(mode);
    end;
    
    public z_MatrixLoadTransposefEXT_adr := GetFuncAdr('glMatrixLoadTransposefEXT');
    public z_MatrixLoadTransposefEXT_ovr_0 := GetFuncOrNil&<procedure(mode: MatrixMode; var m: single)>(z_MatrixLoadTransposefEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MatrixLoadTransposefEXT(mode: MatrixMode; m: array of single);
    begin
      z_MatrixLoadTransposefEXT_ovr_0(mode, m[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MatrixLoadTransposefEXT(mode: MatrixMode; var m: single);
    begin
      z_MatrixLoadTransposefEXT_ovr_0(mode, m);
    end;
    public z_MatrixLoadTransposefEXT_ovr_2 := GetFuncOrNil&<procedure(mode: MatrixMode; m: IntPtr)>(z_MatrixLoadTransposefEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MatrixLoadTransposefEXT(mode: MatrixMode; m: IntPtr);
    begin
      z_MatrixLoadTransposefEXT_ovr_2(mode, m);
    end;
    
    public z_MatrixLoadTransposedEXT_adr := GetFuncAdr('glMatrixLoadTransposedEXT');
    public z_MatrixLoadTransposedEXT_ovr_0 := GetFuncOrNil&<procedure(mode: MatrixMode; var m: real)>(z_MatrixLoadTransposedEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MatrixLoadTransposedEXT(mode: MatrixMode; m: array of real);
    begin
      z_MatrixLoadTransposedEXT_ovr_0(mode, m[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MatrixLoadTransposedEXT(mode: MatrixMode; var m: real);
    begin
      z_MatrixLoadTransposedEXT_ovr_0(mode, m);
    end;
    public z_MatrixLoadTransposedEXT_ovr_2 := GetFuncOrNil&<procedure(mode: MatrixMode; m: IntPtr)>(z_MatrixLoadTransposedEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MatrixLoadTransposedEXT(mode: MatrixMode; m: IntPtr);
    begin
      z_MatrixLoadTransposedEXT_ovr_2(mode, m);
    end;
    
    public z_MatrixLoadfEXT_adr := GetFuncAdr('glMatrixLoadfEXT');
    public z_MatrixLoadfEXT_ovr_0 := GetFuncOrNil&<procedure(mode: MatrixMode; var m: single)>(z_MatrixLoadfEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MatrixLoadfEXT(mode: MatrixMode; m: array of single);
    begin
      z_MatrixLoadfEXT_ovr_0(mode, m[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MatrixLoadfEXT(mode: MatrixMode; var m: single);
    begin
      z_MatrixLoadfEXT_ovr_0(mode, m);
    end;
    public z_MatrixLoadfEXT_ovr_2 := GetFuncOrNil&<procedure(mode: MatrixMode; m: IntPtr)>(z_MatrixLoadfEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MatrixLoadfEXT(mode: MatrixMode; m: IntPtr);
    begin
      z_MatrixLoadfEXT_ovr_2(mode, m);
    end;
    
    public z_MatrixLoaddEXT_adr := GetFuncAdr('glMatrixLoaddEXT');
    public z_MatrixLoaddEXT_ovr_0 := GetFuncOrNil&<procedure(mode: MatrixMode; var m: real)>(z_MatrixLoaddEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MatrixLoaddEXT(mode: MatrixMode; m: array of real);
    begin
      z_MatrixLoaddEXT_ovr_0(mode, m[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MatrixLoaddEXT(mode: MatrixMode; var m: real);
    begin
      z_MatrixLoaddEXT_ovr_0(mode, m);
    end;
    public z_MatrixLoaddEXT_ovr_2 := GetFuncOrNil&<procedure(mode: MatrixMode; m: IntPtr)>(z_MatrixLoaddEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MatrixLoaddEXT(mode: MatrixMode; m: IntPtr);
    begin
      z_MatrixLoaddEXT_ovr_2(mode, m);
    end;
    
    public z_MatrixMultTransposefEXT_adr := GetFuncAdr('glMatrixMultTransposefEXT');
    public z_MatrixMultTransposefEXT_ovr_0 := GetFuncOrNil&<procedure(mode: MatrixMode; var m: single)>(z_MatrixMultTransposefEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MatrixMultTransposefEXT(mode: MatrixMode; m: array of single);
    begin
      z_MatrixMultTransposefEXT_ovr_0(mode, m[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MatrixMultTransposefEXT(mode: MatrixMode; var m: single);
    begin
      z_MatrixMultTransposefEXT_ovr_0(mode, m);
    end;
    public z_MatrixMultTransposefEXT_ovr_2 := GetFuncOrNil&<procedure(mode: MatrixMode; m: IntPtr)>(z_MatrixMultTransposefEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MatrixMultTransposefEXT(mode: MatrixMode; m: IntPtr);
    begin
      z_MatrixMultTransposefEXT_ovr_2(mode, m);
    end;
    
    public z_MatrixMultTransposedEXT_adr := GetFuncAdr('glMatrixMultTransposedEXT');
    public z_MatrixMultTransposedEXT_ovr_0 := GetFuncOrNil&<procedure(mode: MatrixMode; var m: real)>(z_MatrixMultTransposedEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MatrixMultTransposedEXT(mode: MatrixMode; m: array of real);
    begin
      z_MatrixMultTransposedEXT_ovr_0(mode, m[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MatrixMultTransposedEXT(mode: MatrixMode; var m: real);
    begin
      z_MatrixMultTransposedEXT_ovr_0(mode, m);
    end;
    public z_MatrixMultTransposedEXT_ovr_2 := GetFuncOrNil&<procedure(mode: MatrixMode; m: IntPtr)>(z_MatrixMultTransposedEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MatrixMultTransposedEXT(mode: MatrixMode; m: IntPtr);
    begin
      z_MatrixMultTransposedEXT_ovr_2(mode, m);
    end;
    
    public z_MatrixMultfEXT_adr := GetFuncAdr('glMatrixMultfEXT');
    public z_MatrixMultfEXT_ovr_0 := GetFuncOrNil&<procedure(mode: MatrixMode; var m: single)>(z_MatrixMultfEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MatrixMultfEXT(mode: MatrixMode; m: array of single);
    begin
      z_MatrixMultfEXT_ovr_0(mode, m[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MatrixMultfEXT(mode: MatrixMode; var m: single);
    begin
      z_MatrixMultfEXT_ovr_0(mode, m);
    end;
    public z_MatrixMultfEXT_ovr_2 := GetFuncOrNil&<procedure(mode: MatrixMode; m: IntPtr)>(z_MatrixMultfEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MatrixMultfEXT(mode: MatrixMode; m: IntPtr);
    begin
      z_MatrixMultfEXT_ovr_2(mode, m);
    end;
    
    public z_MatrixMultdEXT_adr := GetFuncAdr('glMatrixMultdEXT');
    public z_MatrixMultdEXT_ovr_0 := GetFuncOrNil&<procedure(mode: MatrixMode; var m: real)>(z_MatrixMultdEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MatrixMultdEXT(mode: MatrixMode; m: array of real);
    begin
      z_MatrixMultdEXT_ovr_0(mode, m[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MatrixMultdEXT(mode: MatrixMode; var m: real);
    begin
      z_MatrixMultdEXT_ovr_0(mode, m);
    end;
    public z_MatrixMultdEXT_ovr_2 := GetFuncOrNil&<procedure(mode: MatrixMode; m: IntPtr)>(z_MatrixMultdEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MatrixMultdEXT(mode: MatrixMode; m: IntPtr);
    begin
      z_MatrixMultdEXT_ovr_2(mode, m);
    end;
    
    public z_MatrixOrthoEXT_adr := GetFuncAdr('glMatrixOrthoEXT');
    public z_MatrixOrthoEXT_ovr_0 := GetFuncOrNil&<procedure(mode: MatrixMode; left: real; right: real; bottom: real; top: real; zNear: real; zFar: real)>(z_MatrixOrthoEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MatrixOrthoEXT(mode: MatrixMode; left: real; right: real; bottom: real; top: real; zNear: real; zFar: real);
    begin
      z_MatrixOrthoEXT_ovr_0(mode, left, right, bottom, top, zNear, zFar);
    end;
    
    public z_MatrixPopEXT_adr := GetFuncAdr('glMatrixPopEXT');
    public z_MatrixPopEXT_ovr_0 := GetFuncOrNil&<procedure(mode: MatrixMode)>(z_MatrixPopEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MatrixPopEXT(mode: MatrixMode);
    begin
      z_MatrixPopEXT_ovr_0(mode);
    end;
    
    public z_MatrixPushEXT_adr := GetFuncAdr('glMatrixPushEXT');
    public z_MatrixPushEXT_ovr_0 := GetFuncOrNil&<procedure(mode: MatrixMode)>(z_MatrixPushEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MatrixPushEXT(mode: MatrixMode);
    begin
      z_MatrixPushEXT_ovr_0(mode);
    end;
    
    public z_MatrixRotatefEXT_adr := GetFuncAdr('glMatrixRotatefEXT');
    public z_MatrixRotatefEXT_ovr_0 := GetFuncOrNil&<procedure(mode: MatrixMode; angle: single; x: single; y: single; z: single)>(z_MatrixRotatefEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MatrixRotatefEXT(mode: MatrixMode; angle: single; x: single; y: single; z: single);
    begin
      z_MatrixRotatefEXT_ovr_0(mode, angle, x, y, z);
    end;
    
    public z_MatrixRotatedEXT_adr := GetFuncAdr('glMatrixRotatedEXT');
    public z_MatrixRotatedEXT_ovr_0 := GetFuncOrNil&<procedure(mode: MatrixMode; angle: real; x: real; y: real; z: real)>(z_MatrixRotatedEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MatrixRotatedEXT(mode: MatrixMode; angle: real; x: real; y: real; z: real);
    begin
      z_MatrixRotatedEXT_ovr_0(mode, angle, x, y, z);
    end;
    
    public z_MatrixScalefEXT_adr := GetFuncAdr('glMatrixScalefEXT');
    public z_MatrixScalefEXT_ovr_0 := GetFuncOrNil&<procedure(mode: MatrixMode; x: single; y: single; z: single)>(z_MatrixScalefEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MatrixScalefEXT(mode: MatrixMode; x: single; y: single; z: single);
    begin
      z_MatrixScalefEXT_ovr_0(mode, x, y, z);
    end;
    
    public z_MatrixScaledEXT_adr := GetFuncAdr('glMatrixScaledEXT');
    public z_MatrixScaledEXT_ovr_0 := GetFuncOrNil&<procedure(mode: MatrixMode; x: real; y: real; z: real)>(z_MatrixScaledEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MatrixScaledEXT(mode: MatrixMode; x: real; y: real; z: real);
    begin
      z_MatrixScaledEXT_ovr_0(mode, x, y, z);
    end;
    
    public z_MatrixTranslatefEXT_adr := GetFuncAdr('glMatrixTranslatefEXT');
    public z_MatrixTranslatefEXT_ovr_0 := GetFuncOrNil&<procedure(mode: MatrixMode; x: single; y: single; z: single)>(z_MatrixTranslatefEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MatrixTranslatefEXT(mode: MatrixMode; x: single; y: single; z: single);
    begin
      z_MatrixTranslatefEXT_ovr_0(mode, x, y, z);
    end;
    
    public z_MatrixTranslatedEXT_adr := GetFuncAdr('glMatrixTranslatedEXT');
    public z_MatrixTranslatedEXT_ovr_0 := GetFuncOrNil&<procedure(mode: MatrixMode; x: real; y: real; z: real)>(z_MatrixTranslatedEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MatrixTranslatedEXT(mode: MatrixMode; x: real; y: real; z: real);
    begin
      z_MatrixTranslatedEXT_ovr_0(mode, x, y, z);
    end;
    
  end;
  
  glPixelDataRangeNV = sealed class
    public static function GetFuncAdr([MarshalAs(UnmanagedType.LPStr)] lpszProc: string): IntPtr;
    external 'opengl32.dll' name 'wglGetProcAddress';
    public static function GetFuncOrNil<T>(fadr: IntPtr) :=
    fadr=IntPtr.Zero ? default(T) :
    Marshal.GetDelegateForFunctionPointer&<T>(fadr);
    
    public z_PixelDataRangeNV_adr := GetFuncAdr('glPixelDataRangeNV');
    public z_PixelDataRangeNV_ovr_0 := GetFuncOrNil&<procedure(target: PixelDataRangeTargetNV; length: Int32; pointer: IntPtr)>(z_PixelDataRangeNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure PixelDataRangeNV(target: PixelDataRangeTargetNV; length: Int32; pointer: IntPtr);
    begin
      z_PixelDataRangeNV_ovr_0(target, length, pointer);
    end;
    
    public z_FlushPixelDataRangeNV_adr := GetFuncAdr('glFlushPixelDataRangeNV');
    public z_FlushPixelDataRangeNV_ovr_0 := GetFuncOrNil&<procedure(target: PixelDataRangeTargetNV)>(z_FlushPixelDataRangeNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure FlushPixelDataRangeNV(target: PixelDataRangeTargetNV);
    begin
      z_FlushPixelDataRangeNV_ovr_0(target);
    end;
    
  end;
  
  glPointSpriteNV = sealed class
    public static function GetFuncAdr([MarshalAs(UnmanagedType.LPStr)] lpszProc: string): IntPtr;
    external 'opengl32.dll' name 'wglGetProcAddress';
    public static function GetFuncOrNil<T>(fadr: IntPtr) :=
    fadr=IntPtr.Zero ? default(T) :
    Marshal.GetDelegateForFunctionPointer&<T>(fadr);
    
    public z_PointParameteriNV_adr := GetFuncAdr('glPointParameteriNV');
    public z_PointParameteriNV_ovr_0 := GetFuncOrNil&<procedure(pname: PointParameterNameARB; param: Int32)>(z_PointParameteriNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure PointParameteriNV(pname: PointParameterNameARB; param: Int32);
    begin
      z_PointParameteriNV_ovr_0(pname, param);
    end;
    
    public z_PointParameterivNV_adr := GetFuncAdr('glPointParameterivNV');
    public z_PointParameterivNV_ovr_0 := GetFuncOrNil&<procedure(pname: PointParameterNameARB; var &params: Int32)>(z_PointParameterivNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure PointParameterivNV(pname: PointParameterNameARB; &params: array of Int32);
    begin
      z_PointParameterivNV_ovr_0(pname, &params[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure PointParameterivNV(pname: PointParameterNameARB; var &params: Int32);
    begin
      z_PointParameterivNV_ovr_0(pname, &params);
    end;
    public z_PointParameterivNV_ovr_2 := GetFuncOrNil&<procedure(pname: PointParameterNameARB; &params: IntPtr)>(z_PointParameterivNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure PointParameterivNV(pname: PointParameterNameARB; &params: IntPtr);
    begin
      z_PointParameterivNV_ovr_2(pname, &params);
    end;
    
  end;
  
  glPresentVideoNV = sealed class
    public static function GetFuncAdr([MarshalAs(UnmanagedType.LPStr)] lpszProc: string): IntPtr;
    external 'opengl32.dll' name 'wglGetProcAddress';
    public static function GetFuncOrNil<T>(fadr: IntPtr) :=
    fadr=IntPtr.Zero ? default(T) :
    Marshal.GetDelegateForFunctionPointer&<T>(fadr);
    
    public z_PresentFrameKeyedNV_adr := GetFuncAdr('glPresentFrameKeyedNV');
    public z_PresentFrameKeyedNV_ovr_0 := GetFuncOrNil&<procedure(video_slot: UInt32; minPresentTime: UInt64; beginPresentTimeId: UInt32; presentDurationId: UInt32; &type: DummyEnum; target0: DummyEnum; fill0: UInt32; key0: UInt32; target1: DummyEnum; fill1: UInt32; key1: UInt32)>(z_PresentFrameKeyedNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure PresentFrameKeyedNV(video_slot: UInt32; minPresentTime: UInt64; beginPresentTimeId: UInt32; presentDurationId: UInt32; &type: DummyEnum; target0: DummyEnum; fill0: UInt32; key0: UInt32; target1: DummyEnum; fill1: UInt32; key1: UInt32);
    begin
      z_PresentFrameKeyedNV_ovr_0(video_slot, minPresentTime, beginPresentTimeId, presentDurationId, &type, target0, fill0, key0, target1, fill1, key1);
    end;
    
    public z_PresentFrameDualFillNV_adr := GetFuncAdr('glPresentFrameDualFillNV');
    public z_PresentFrameDualFillNV_ovr_0 := GetFuncOrNil&<procedure(video_slot: UInt32; minPresentTime: UInt64; beginPresentTimeId: UInt32; presentDurationId: UInt32; &type: DummyEnum; target0: DummyEnum; fill0: UInt32; target1: DummyEnum; fill1: UInt32; target2: DummyEnum; fill2: UInt32; target3: DummyEnum; fill3: UInt32)>(z_PresentFrameDualFillNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure PresentFrameDualFillNV(video_slot: UInt32; minPresentTime: UInt64; beginPresentTimeId: UInt32; presentDurationId: UInt32; &type: DummyEnum; target0: DummyEnum; fill0: UInt32; target1: DummyEnum; fill1: UInt32; target2: DummyEnum; fill2: UInt32; target3: DummyEnum; fill3: UInt32);
    begin
      z_PresentFrameDualFillNV_ovr_0(video_slot, minPresentTime, beginPresentTimeId, presentDurationId, &type, target0, fill0, target1, fill1, target2, fill2, target3, fill3);
    end;
    
    public z_GetVideoivNV_adr := GetFuncAdr('glGetVideoivNV');
    public z_GetVideoivNV_ovr_0 := GetFuncOrNil&<procedure(video_slot: UInt32; pname: DummyEnum; var &params: Int32)>(z_GetVideoivNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetVideoivNV(video_slot: UInt32; pname: DummyEnum; &params: array of Int32);
    begin
      z_GetVideoivNV_ovr_0(video_slot, pname, &params[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetVideoivNV(video_slot: UInt32; pname: DummyEnum; var &params: Int32);
    begin
      z_GetVideoivNV_ovr_0(video_slot, pname, &params);
    end;
    public z_GetVideoivNV_ovr_2 := GetFuncOrNil&<procedure(video_slot: UInt32; pname: DummyEnum; &params: IntPtr)>(z_GetVideoivNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetVideoivNV(video_slot: UInt32; pname: DummyEnum; &params: IntPtr);
    begin
      z_GetVideoivNV_ovr_2(video_slot, pname, &params);
    end;
    
    public z_GetVideouivNV_adr := GetFuncAdr('glGetVideouivNV');
    public z_GetVideouivNV_ovr_0 := GetFuncOrNil&<procedure(video_slot: UInt32; pname: DummyEnum; var &params: UInt32)>(z_GetVideouivNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetVideouivNV(video_slot: UInt32; pname: DummyEnum; &params: array of UInt32);
    begin
      z_GetVideouivNV_ovr_0(video_slot, pname, &params[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetVideouivNV(video_slot: UInt32; pname: DummyEnum; var &params: UInt32);
    begin
      z_GetVideouivNV_ovr_0(video_slot, pname, &params);
    end;
    public z_GetVideouivNV_ovr_2 := GetFuncOrNil&<procedure(video_slot: UInt32; pname: DummyEnum; &params: IntPtr)>(z_GetVideouivNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetVideouivNV(video_slot: UInt32; pname: DummyEnum; &params: IntPtr);
    begin
      z_GetVideouivNV_ovr_2(video_slot, pname, &params);
    end;
    
    public z_GetVideoi64vNV_adr := GetFuncAdr('glGetVideoi64vNV');
    public z_GetVideoi64vNV_ovr_0 := GetFuncOrNil&<procedure(video_slot: UInt32; pname: DummyEnum; var &params: Int64)>(z_GetVideoi64vNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetVideoi64vNV(video_slot: UInt32; pname: DummyEnum; &params: array of Int64);
    begin
      z_GetVideoi64vNV_ovr_0(video_slot, pname, &params[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetVideoi64vNV(video_slot: UInt32; pname: DummyEnum; var &params: Int64);
    begin
      z_GetVideoi64vNV_ovr_0(video_slot, pname, &params);
    end;
    public z_GetVideoi64vNV_ovr_2 := GetFuncOrNil&<procedure(video_slot: UInt32; pname: DummyEnum; &params: IntPtr)>(z_GetVideoi64vNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetVideoi64vNV(video_slot: UInt32; pname: DummyEnum; &params: IntPtr);
    begin
      z_GetVideoi64vNV_ovr_2(video_slot, pname, &params);
    end;
    
    public z_GetVideoui64vNV_adr := GetFuncAdr('glGetVideoui64vNV');
    public z_GetVideoui64vNV_ovr_0 := GetFuncOrNil&<procedure(video_slot: UInt32; pname: DummyEnum; var &params: UInt64)>(z_GetVideoui64vNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetVideoui64vNV(video_slot: UInt32; pname: DummyEnum; &params: array of UInt64);
    begin
      z_GetVideoui64vNV_ovr_0(video_slot, pname, &params[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetVideoui64vNV(video_slot: UInt32; pname: DummyEnum; var &params: UInt64);
    begin
      z_GetVideoui64vNV_ovr_0(video_slot, pname, &params);
    end;
    public z_GetVideoui64vNV_ovr_2 := GetFuncOrNil&<procedure(video_slot: UInt32; pname: DummyEnum; &params: IntPtr)>(z_GetVideoui64vNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetVideoui64vNV(video_slot: UInt32; pname: DummyEnum; &params: IntPtr);
    begin
      z_GetVideoui64vNV_ovr_2(video_slot, pname, &params);
    end;
    
  end;
  
  glPrimitiveRestartNV = sealed class
    public static function GetFuncAdr([MarshalAs(UnmanagedType.LPStr)] lpszProc: string): IntPtr;
    external 'opengl32.dll' name 'wglGetProcAddress';
    public static function GetFuncOrNil<T>(fadr: IntPtr) :=
    fadr=IntPtr.Zero ? default(T) :
    Marshal.GetDelegateForFunctionPointer&<T>(fadr);
    
    public z_PrimitiveRestartNV_adr := GetFuncAdr('glPrimitiveRestartNV');
    public z_PrimitiveRestartNV_ovr_0 := GetFuncOrNil&<procedure>(z_PrimitiveRestartNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure PrimitiveRestartNV;
    begin
      z_PrimitiveRestartNV_ovr_0;
    end;
    
    public z_PrimitiveRestartIndexNV_adr := GetFuncAdr('glPrimitiveRestartIndexNV');
    public z_PrimitiveRestartIndexNV_ovr_0 := GetFuncOrNil&<procedure(index: UInt32)>(z_PrimitiveRestartIndexNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure PrimitiveRestartIndexNV(index: UInt32);
    begin
      z_PrimitiveRestartIndexNV_ovr_0(index);
    end;
    
  end;
  
  glQueryResourceNV = sealed class
    public static function GetFuncAdr([MarshalAs(UnmanagedType.LPStr)] lpszProc: string): IntPtr;
    external 'opengl32.dll' name 'wglGetProcAddress';
    public static function GetFuncOrNil<T>(fadr: IntPtr) :=
    fadr=IntPtr.Zero ? default(T) :
    Marshal.GetDelegateForFunctionPointer&<T>(fadr);
    
    public z_QueryResourceNV_adr := GetFuncAdr('glQueryResourceNV');
    public z_QueryResourceNV_ovr_0 := GetFuncOrNil&<function(queryType: DummyEnum; tagId: Int32; count: UInt32; var buffer: Int32): Int32>(z_QueryResourceNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function QueryResourceNV(queryType: DummyEnum; tagId: Int32; count: UInt32; buffer: array of Int32): Int32;
    begin
      Result := z_QueryResourceNV_ovr_0(queryType, tagId, count, buffer[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function QueryResourceNV(queryType: DummyEnum; tagId: Int32; count: UInt32; var buffer: Int32): Int32;
    begin
      Result := z_QueryResourceNV_ovr_0(queryType, tagId, count, buffer);
    end;
    public z_QueryResourceNV_ovr_2 := GetFuncOrNil&<function(queryType: DummyEnum; tagId: Int32; count: UInt32; buffer: IntPtr): Int32>(z_QueryResourceNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function QueryResourceNV(queryType: DummyEnum; tagId: Int32; count: UInt32; buffer: IntPtr): Int32;
    begin
      Result := z_QueryResourceNV_ovr_2(queryType, tagId, count, buffer);
    end;
    
  end;
  
  glQueryResourceTagNV = sealed class
    public static function GetFuncAdr([MarshalAs(UnmanagedType.LPStr)] lpszProc: string): IntPtr;
    external 'opengl32.dll' name 'wglGetProcAddress';
    public static function GetFuncOrNil<T>(fadr: IntPtr) :=
    fadr=IntPtr.Zero ? default(T) :
    Marshal.GetDelegateForFunctionPointer&<T>(fadr);
    
    public z_GenQueryResourceTagNV_adr := GetFuncAdr('glGenQueryResourceTagNV');
    public z_GenQueryResourceTagNV_ovr_0 := GetFuncOrNil&<procedure(n: Int32; var tagIds: Int32)>(z_GenQueryResourceTagNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GenQueryResourceTagNV(n: Int32; tagIds: array of Int32);
    begin
      z_GenQueryResourceTagNV_ovr_0(n, tagIds[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GenQueryResourceTagNV(n: Int32; var tagIds: Int32);
    begin
      z_GenQueryResourceTagNV_ovr_0(n, tagIds);
    end;
    public z_GenQueryResourceTagNV_ovr_2 := GetFuncOrNil&<procedure(n: Int32; tagIds: IntPtr)>(z_GenQueryResourceTagNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GenQueryResourceTagNV(n: Int32; tagIds: IntPtr);
    begin
      z_GenQueryResourceTagNV_ovr_2(n, tagIds);
    end;
    
    public z_DeleteQueryResourceTagNV_adr := GetFuncAdr('glDeleteQueryResourceTagNV');
    public z_DeleteQueryResourceTagNV_ovr_0 := GetFuncOrNil&<procedure(n: Int32; var tagIds: Int32)>(z_DeleteQueryResourceTagNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure DeleteQueryResourceTagNV(n: Int32; tagIds: array of Int32);
    begin
      z_DeleteQueryResourceTagNV_ovr_0(n, tagIds[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure DeleteQueryResourceTagNV(n: Int32; var tagIds: Int32);
    begin
      z_DeleteQueryResourceTagNV_ovr_0(n, tagIds);
    end;
    public z_DeleteQueryResourceTagNV_ovr_2 := GetFuncOrNil&<procedure(n: Int32; tagIds: IntPtr)>(z_DeleteQueryResourceTagNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure DeleteQueryResourceTagNV(n: Int32; tagIds: IntPtr);
    begin
      z_DeleteQueryResourceTagNV_ovr_2(n, tagIds);
    end;
    
    public z_QueryResourceTagNV_adr := GetFuncAdr('glQueryResourceTagNV');
    public z_QueryResourceTagNV_ovr_0 := GetFuncOrNil&<procedure(tagId: Int32; tagString: IntPtr)>(z_QueryResourceTagNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure QueryResourceTagNV(tagId: Int32; tagString: string);
    begin
      var par_2_str_ptr := Marshal.StringToHGlobalAnsi(tagString);
      z_QueryResourceTagNV_ovr_0(tagId, par_2_str_ptr);
      Marshal.FreeHGlobal(par_2_str_ptr);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure QueryResourceTagNV(tagId: Int32; tagString: IntPtr);
    begin
      z_QueryResourceTagNV_ovr_0(tagId, tagString);
    end;
    
  end;
  
  glRegisterCombinersNV = sealed class
    public static function GetFuncAdr([MarshalAs(UnmanagedType.LPStr)] lpszProc: string): IntPtr;
    external 'opengl32.dll' name 'wglGetProcAddress';
    public static function GetFuncOrNil<T>(fadr: IntPtr) :=
    fadr=IntPtr.Zero ? default(T) :
    Marshal.GetDelegateForFunctionPointer&<T>(fadr);
    
    public z_CombinerParameterfvNV_adr := GetFuncAdr('glCombinerParameterfvNV');
    public z_CombinerParameterfvNV_ovr_0 := GetFuncOrNil&<procedure(pname: CombinerParameterNV; var &params: single)>(z_CombinerParameterfvNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure CombinerParameterfvNV(pname: CombinerParameterNV; &params: array of single);
    begin
      z_CombinerParameterfvNV_ovr_0(pname, &params[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure CombinerParameterfvNV(pname: CombinerParameterNV; var &params: single);
    begin
      z_CombinerParameterfvNV_ovr_0(pname, &params);
    end;
    public z_CombinerParameterfvNV_ovr_2 := GetFuncOrNil&<procedure(pname: CombinerParameterNV; &params: IntPtr)>(z_CombinerParameterfvNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure CombinerParameterfvNV(pname: CombinerParameterNV; &params: IntPtr);
    begin
      z_CombinerParameterfvNV_ovr_2(pname, &params);
    end;
    
    public z_CombinerParameterfNV_adr := GetFuncAdr('glCombinerParameterfNV');
    public z_CombinerParameterfNV_ovr_0 := GetFuncOrNil&<procedure(pname: CombinerParameterNV; param: single)>(z_CombinerParameterfNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure CombinerParameterfNV(pname: CombinerParameterNV; param: single);
    begin
      z_CombinerParameterfNV_ovr_0(pname, param);
    end;
    
    public z_CombinerParameterivNV_adr := GetFuncAdr('glCombinerParameterivNV');
    public z_CombinerParameterivNV_ovr_0 := GetFuncOrNil&<procedure(pname: CombinerParameterNV; var &params: Int32)>(z_CombinerParameterivNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure CombinerParameterivNV(pname: CombinerParameterNV; &params: array of Int32);
    begin
      z_CombinerParameterivNV_ovr_0(pname, &params[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure CombinerParameterivNV(pname: CombinerParameterNV; var &params: Int32);
    begin
      z_CombinerParameterivNV_ovr_0(pname, &params);
    end;
    public z_CombinerParameterivNV_ovr_2 := GetFuncOrNil&<procedure(pname: CombinerParameterNV; &params: IntPtr)>(z_CombinerParameterivNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure CombinerParameterivNV(pname: CombinerParameterNV; &params: IntPtr);
    begin
      z_CombinerParameterivNV_ovr_2(pname, &params);
    end;
    
    public z_CombinerParameteriNV_adr := GetFuncAdr('glCombinerParameteriNV');
    public z_CombinerParameteriNV_ovr_0 := GetFuncOrNil&<procedure(pname: CombinerParameterNV; param: Int32)>(z_CombinerParameteriNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure CombinerParameteriNV(pname: CombinerParameterNV; param: Int32);
    begin
      z_CombinerParameteriNV_ovr_0(pname, param);
    end;
    
    public z_CombinerInputNV_adr := GetFuncAdr('glCombinerInputNV');
    public z_CombinerInputNV_ovr_0 := GetFuncOrNil&<procedure(stage: CombinerStageNV; portion: CombinerPortionNV; variable: CombinerVariableNV; input: CombinerRegisterNV; mapping: CombinerMappingNV; componentUsage: CombinerComponentUsageNV)>(z_CombinerInputNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure CombinerInputNV(stage: CombinerStageNV; portion: CombinerPortionNV; variable: CombinerVariableNV; input: CombinerRegisterNV; mapping: CombinerMappingNV; componentUsage: CombinerComponentUsageNV);
    begin
      z_CombinerInputNV_ovr_0(stage, portion, variable, input, mapping, componentUsage);
    end;
    
    public z_CombinerOutputNV_adr := GetFuncAdr('glCombinerOutputNV');
    public z_CombinerOutputNV_ovr_0 := GetFuncOrNil&<procedure(stage: CombinerStageNV; portion: CombinerPortionNV; abOutput: CombinerRegisterNV; cdOutput: CombinerRegisterNV; sumOutput: CombinerRegisterNV; scale: CombinerScaleNV; bias: CombinerBiasNV; abDotProduct: boolean; cdDotProduct: boolean; muxSum: boolean)>(z_CombinerOutputNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure CombinerOutputNV(stage: CombinerStageNV; portion: CombinerPortionNV; abOutput: CombinerRegisterNV; cdOutput: CombinerRegisterNV; sumOutput: CombinerRegisterNV; scale: CombinerScaleNV; bias: CombinerBiasNV; abDotProduct: boolean; cdDotProduct: boolean; muxSum: boolean);
    begin
      z_CombinerOutputNV_ovr_0(stage, portion, abOutput, cdOutput, sumOutput, scale, bias, abDotProduct, cdDotProduct, muxSum);
    end;
    
    public z_FinalCombinerInputNV_adr := GetFuncAdr('glFinalCombinerInputNV');
    public z_FinalCombinerInputNV_ovr_0 := GetFuncOrNil&<procedure(variable: CombinerVariableNV; input: CombinerRegisterNV; mapping: CombinerMappingNV; componentUsage: CombinerComponentUsageNV)>(z_FinalCombinerInputNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure FinalCombinerInputNV(variable: CombinerVariableNV; input: CombinerRegisterNV; mapping: CombinerMappingNV; componentUsage: CombinerComponentUsageNV);
    begin
      z_FinalCombinerInputNV_ovr_0(variable, input, mapping, componentUsage);
    end;
    
    public z_GetCombinerInputParameterfvNV_adr := GetFuncAdr('glGetCombinerInputParameterfvNV');
    public z_GetCombinerInputParameterfvNV_ovr_0 := GetFuncOrNil&<procedure(stage: CombinerStageNV; portion: CombinerPortionNV; variable: CombinerVariableNV; pname: CombinerParameterNV; var &params: single)>(z_GetCombinerInputParameterfvNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetCombinerInputParameterfvNV(stage: CombinerStageNV; portion: CombinerPortionNV; variable: CombinerVariableNV; pname: CombinerParameterNV; &params: array of single);
    begin
      z_GetCombinerInputParameterfvNV_ovr_0(stage, portion, variable, pname, &params[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetCombinerInputParameterfvNV(stage: CombinerStageNV; portion: CombinerPortionNV; variable: CombinerVariableNV; pname: CombinerParameterNV; var &params: single);
    begin
      z_GetCombinerInputParameterfvNV_ovr_0(stage, portion, variable, pname, &params);
    end;
    public z_GetCombinerInputParameterfvNV_ovr_2 := GetFuncOrNil&<procedure(stage: CombinerStageNV; portion: CombinerPortionNV; variable: CombinerVariableNV; pname: CombinerParameterNV; &params: IntPtr)>(z_GetCombinerInputParameterfvNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetCombinerInputParameterfvNV(stage: CombinerStageNV; portion: CombinerPortionNV; variable: CombinerVariableNV; pname: CombinerParameterNV; &params: IntPtr);
    begin
      z_GetCombinerInputParameterfvNV_ovr_2(stage, portion, variable, pname, &params);
    end;
    
    public z_GetCombinerInputParameterivNV_adr := GetFuncAdr('glGetCombinerInputParameterivNV');
    public z_GetCombinerInputParameterivNV_ovr_0 := GetFuncOrNil&<procedure(stage: CombinerStageNV; portion: CombinerPortionNV; variable: CombinerVariableNV; pname: CombinerParameterNV; var &params: Int32)>(z_GetCombinerInputParameterivNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetCombinerInputParameterivNV(stage: CombinerStageNV; portion: CombinerPortionNV; variable: CombinerVariableNV; pname: CombinerParameterNV; &params: array of Int32);
    begin
      z_GetCombinerInputParameterivNV_ovr_0(stage, portion, variable, pname, &params[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetCombinerInputParameterivNV(stage: CombinerStageNV; portion: CombinerPortionNV; variable: CombinerVariableNV; pname: CombinerParameterNV; var &params: Int32);
    begin
      z_GetCombinerInputParameterivNV_ovr_0(stage, portion, variable, pname, &params);
    end;
    public z_GetCombinerInputParameterivNV_ovr_2 := GetFuncOrNil&<procedure(stage: CombinerStageNV; portion: CombinerPortionNV; variable: CombinerVariableNV; pname: CombinerParameterNV; &params: IntPtr)>(z_GetCombinerInputParameterivNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetCombinerInputParameterivNV(stage: CombinerStageNV; portion: CombinerPortionNV; variable: CombinerVariableNV; pname: CombinerParameterNV; &params: IntPtr);
    begin
      z_GetCombinerInputParameterivNV_ovr_2(stage, portion, variable, pname, &params);
    end;
    
    public z_GetCombinerOutputParameterfvNV_adr := GetFuncAdr('glGetCombinerOutputParameterfvNV');
    public z_GetCombinerOutputParameterfvNV_ovr_0 := GetFuncOrNil&<procedure(stage: CombinerStageNV; portion: CombinerPortionNV; pname: CombinerParameterNV; var &params: single)>(z_GetCombinerOutputParameterfvNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetCombinerOutputParameterfvNV(stage: CombinerStageNV; portion: CombinerPortionNV; pname: CombinerParameterNV; &params: array of single);
    begin
      z_GetCombinerOutputParameterfvNV_ovr_0(stage, portion, pname, &params[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetCombinerOutputParameterfvNV(stage: CombinerStageNV; portion: CombinerPortionNV; pname: CombinerParameterNV; var &params: single);
    begin
      z_GetCombinerOutputParameterfvNV_ovr_0(stage, portion, pname, &params);
    end;
    public z_GetCombinerOutputParameterfvNV_ovr_2 := GetFuncOrNil&<procedure(stage: CombinerStageNV; portion: CombinerPortionNV; pname: CombinerParameterNV; &params: IntPtr)>(z_GetCombinerOutputParameterfvNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetCombinerOutputParameterfvNV(stage: CombinerStageNV; portion: CombinerPortionNV; pname: CombinerParameterNV; &params: IntPtr);
    begin
      z_GetCombinerOutputParameterfvNV_ovr_2(stage, portion, pname, &params);
    end;
    
    public z_GetCombinerOutputParameterivNV_adr := GetFuncAdr('glGetCombinerOutputParameterivNV');
    public z_GetCombinerOutputParameterivNV_ovr_0 := GetFuncOrNil&<procedure(stage: CombinerStageNV; portion: CombinerPortionNV; pname: CombinerParameterNV; var &params: Int32)>(z_GetCombinerOutputParameterivNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetCombinerOutputParameterivNV(stage: CombinerStageNV; portion: CombinerPortionNV; pname: CombinerParameterNV; &params: array of Int32);
    begin
      z_GetCombinerOutputParameterivNV_ovr_0(stage, portion, pname, &params[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetCombinerOutputParameterivNV(stage: CombinerStageNV; portion: CombinerPortionNV; pname: CombinerParameterNV; var &params: Int32);
    begin
      z_GetCombinerOutputParameterivNV_ovr_0(stage, portion, pname, &params);
    end;
    public z_GetCombinerOutputParameterivNV_ovr_2 := GetFuncOrNil&<procedure(stage: CombinerStageNV; portion: CombinerPortionNV; pname: CombinerParameterNV; &params: IntPtr)>(z_GetCombinerOutputParameterivNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetCombinerOutputParameterivNV(stage: CombinerStageNV; portion: CombinerPortionNV; pname: CombinerParameterNV; &params: IntPtr);
    begin
      z_GetCombinerOutputParameterivNV_ovr_2(stage, portion, pname, &params);
    end;
    
    public z_GetFinalCombinerInputParameterfvNV_adr := GetFuncAdr('glGetFinalCombinerInputParameterfvNV');
    public z_GetFinalCombinerInputParameterfvNV_ovr_0 := GetFuncOrNil&<procedure(variable: CombinerVariableNV; pname: CombinerParameterNV; var &params: single)>(z_GetFinalCombinerInputParameterfvNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetFinalCombinerInputParameterfvNV(variable: CombinerVariableNV; pname: CombinerParameterNV; &params: array of single);
    begin
      z_GetFinalCombinerInputParameterfvNV_ovr_0(variable, pname, &params[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetFinalCombinerInputParameterfvNV(variable: CombinerVariableNV; pname: CombinerParameterNV; var &params: single);
    begin
      z_GetFinalCombinerInputParameterfvNV_ovr_0(variable, pname, &params);
    end;
    public z_GetFinalCombinerInputParameterfvNV_ovr_2 := GetFuncOrNil&<procedure(variable: CombinerVariableNV; pname: CombinerParameterNV; &params: IntPtr)>(z_GetFinalCombinerInputParameterfvNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetFinalCombinerInputParameterfvNV(variable: CombinerVariableNV; pname: CombinerParameterNV; &params: IntPtr);
    begin
      z_GetFinalCombinerInputParameterfvNV_ovr_2(variable, pname, &params);
    end;
    
    public z_GetFinalCombinerInputParameterivNV_adr := GetFuncAdr('glGetFinalCombinerInputParameterivNV');
    public z_GetFinalCombinerInputParameterivNV_ovr_0 := GetFuncOrNil&<procedure(variable: CombinerVariableNV; pname: CombinerParameterNV; var &params: Int32)>(z_GetFinalCombinerInputParameterivNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetFinalCombinerInputParameterivNV(variable: CombinerVariableNV; pname: CombinerParameterNV; &params: array of Int32);
    begin
      z_GetFinalCombinerInputParameterivNV_ovr_0(variable, pname, &params[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetFinalCombinerInputParameterivNV(variable: CombinerVariableNV; pname: CombinerParameterNV; var &params: Int32);
    begin
      z_GetFinalCombinerInputParameterivNV_ovr_0(variable, pname, &params);
    end;
    public z_GetFinalCombinerInputParameterivNV_ovr_2 := GetFuncOrNil&<procedure(variable: CombinerVariableNV; pname: CombinerParameterNV; &params: IntPtr)>(z_GetFinalCombinerInputParameterivNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetFinalCombinerInputParameterivNV(variable: CombinerVariableNV; pname: CombinerParameterNV; &params: IntPtr);
    begin
      z_GetFinalCombinerInputParameterivNV_ovr_2(variable, pname, &params);
    end;
    
  end;
  
  glRegisterCombiners2NV = sealed class
    public static function GetFuncAdr([MarshalAs(UnmanagedType.LPStr)] lpszProc: string): IntPtr;
    external 'opengl32.dll' name 'wglGetProcAddress';
    public static function GetFuncOrNil<T>(fadr: IntPtr) :=
    fadr=IntPtr.Zero ? default(T) :
    Marshal.GetDelegateForFunctionPointer&<T>(fadr);
    
    public z_CombinerStageParameterfvNV_adr := GetFuncAdr('glCombinerStageParameterfvNV');
    public z_CombinerStageParameterfvNV_ovr_0 := GetFuncOrNil&<procedure(stage: CombinerStageNV; pname: CombinerParameterNV; var &params: single)>(z_CombinerStageParameterfvNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure CombinerStageParameterfvNV(stage: CombinerStageNV; pname: CombinerParameterNV; &params: array of single);
    begin
      z_CombinerStageParameterfvNV_ovr_0(stage, pname, &params[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure CombinerStageParameterfvNV(stage: CombinerStageNV; pname: CombinerParameterNV; var &params: single);
    begin
      z_CombinerStageParameterfvNV_ovr_0(stage, pname, &params);
    end;
    public z_CombinerStageParameterfvNV_ovr_2 := GetFuncOrNil&<procedure(stage: CombinerStageNV; pname: CombinerParameterNV; &params: IntPtr)>(z_CombinerStageParameterfvNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure CombinerStageParameterfvNV(stage: CombinerStageNV; pname: CombinerParameterNV; &params: IntPtr);
    begin
      z_CombinerStageParameterfvNV_ovr_2(stage, pname, &params);
    end;
    
    public z_GetCombinerStageParameterfvNV_adr := GetFuncAdr('glGetCombinerStageParameterfvNV');
    public z_GetCombinerStageParameterfvNV_ovr_0 := GetFuncOrNil&<procedure(stage: CombinerStageNV; pname: CombinerParameterNV; var &params: single)>(z_GetCombinerStageParameterfvNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetCombinerStageParameterfvNV(stage: CombinerStageNV; pname: CombinerParameterNV; &params: array of single);
    begin
      z_GetCombinerStageParameterfvNV_ovr_0(stage, pname, &params[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetCombinerStageParameterfvNV(stage: CombinerStageNV; pname: CombinerParameterNV; var &params: single);
    begin
      z_GetCombinerStageParameterfvNV_ovr_0(stage, pname, &params);
    end;
    public z_GetCombinerStageParameterfvNV_ovr_2 := GetFuncOrNil&<procedure(stage: CombinerStageNV; pname: CombinerParameterNV; &params: IntPtr)>(z_GetCombinerStageParameterfvNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetCombinerStageParameterfvNV(stage: CombinerStageNV; pname: CombinerParameterNV; &params: IntPtr);
    begin
      z_GetCombinerStageParameterfvNV_ovr_2(stage, pname, &params);
    end;
    
  end;
  
  glSampleLocationsNV = sealed class
    public static function GetFuncAdr([MarshalAs(UnmanagedType.LPStr)] lpszProc: string): IntPtr;
    external 'opengl32.dll' name 'wglGetProcAddress';
    public static function GetFuncOrNil<T>(fadr: IntPtr) :=
    fadr=IntPtr.Zero ? default(T) :
    Marshal.GetDelegateForFunctionPointer&<T>(fadr);
    
    public z_FramebufferSampleLocationsfvNV_adr := GetFuncAdr('glFramebufferSampleLocationsfvNV');
    public z_FramebufferSampleLocationsfvNV_ovr_0 := GetFuncOrNil&<procedure(target: FramebufferTarget; start: UInt32; count: Int32; var v: single)>(z_FramebufferSampleLocationsfvNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure FramebufferSampleLocationsfvNV(target: FramebufferTarget; start: UInt32; count: Int32; v: array of single);
    begin
      z_FramebufferSampleLocationsfvNV_ovr_0(target, start, count, v[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure FramebufferSampleLocationsfvNV(target: FramebufferTarget; start: UInt32; count: Int32; var v: single);
    begin
      z_FramebufferSampleLocationsfvNV_ovr_0(target, start, count, v);
    end;
    public z_FramebufferSampleLocationsfvNV_ovr_2 := GetFuncOrNil&<procedure(target: FramebufferTarget; start: UInt32; count: Int32; v: IntPtr)>(z_FramebufferSampleLocationsfvNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure FramebufferSampleLocationsfvNV(target: FramebufferTarget; start: UInt32; count: Int32; v: IntPtr);
    begin
      z_FramebufferSampleLocationsfvNV_ovr_2(target, start, count, v);
    end;
    
    public z_NamedFramebufferSampleLocationsfvNV_adr := GetFuncAdr('glNamedFramebufferSampleLocationsfvNV');
    public z_NamedFramebufferSampleLocationsfvNV_ovr_0 := GetFuncOrNil&<procedure(framebuffer: UInt32; start: UInt32; count: Int32; var v: single)>(z_NamedFramebufferSampleLocationsfvNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure NamedFramebufferSampleLocationsfvNV(framebuffer: UInt32; start: UInt32; count: Int32; v: array of single);
    begin
      z_NamedFramebufferSampleLocationsfvNV_ovr_0(framebuffer, start, count, v[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure NamedFramebufferSampleLocationsfvNV(framebuffer: UInt32; start: UInt32; count: Int32; var v: single);
    begin
      z_NamedFramebufferSampleLocationsfvNV_ovr_0(framebuffer, start, count, v);
    end;
    public z_NamedFramebufferSampleLocationsfvNV_ovr_2 := GetFuncOrNil&<procedure(framebuffer: UInt32; start: UInt32; count: Int32; v: IntPtr)>(z_NamedFramebufferSampleLocationsfvNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure NamedFramebufferSampleLocationsfvNV(framebuffer: UInt32; start: UInt32; count: Int32; v: IntPtr);
    begin
      z_NamedFramebufferSampleLocationsfvNV_ovr_2(framebuffer, start, count, v);
    end;
    
    public z_ResolveDepthValuesNV_adr := GetFuncAdr('glResolveDepthValuesNV');
    public z_ResolveDepthValuesNV_ovr_0 := GetFuncOrNil&<procedure>(z_ResolveDepthValuesNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ResolveDepthValuesNV;
    begin
      z_ResolveDepthValuesNV_ovr_0;
    end;
    
  end;
  
  glScissorExclusiveNV = sealed class
    public static function GetFuncAdr([MarshalAs(UnmanagedType.LPStr)] lpszProc: string): IntPtr;
    external 'opengl32.dll' name 'wglGetProcAddress';
    public static function GetFuncOrNil<T>(fadr: IntPtr) :=
    fadr=IntPtr.Zero ? default(T) :
    Marshal.GetDelegateForFunctionPointer&<T>(fadr);
    
    public z_ScissorExclusiveNV_adr := GetFuncAdr('glScissorExclusiveNV');
    public z_ScissorExclusiveNV_ovr_0 := GetFuncOrNil&<procedure(x: Int32; y: Int32; width: Int32; height: Int32)>(z_ScissorExclusiveNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ScissorExclusiveNV(x: Int32; y: Int32; width: Int32; height: Int32);
    begin
      z_ScissorExclusiveNV_ovr_0(x, y, width, height);
    end;
    
    public z_ScissorExclusiveArrayvNV_adr := GetFuncAdr('glScissorExclusiveArrayvNV');
    public z_ScissorExclusiveArrayvNV_ovr_0 := GetFuncOrNil&<procedure(first: UInt32; count: Int32; var v: Int32)>(z_ScissorExclusiveArrayvNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ScissorExclusiveArrayvNV(first: UInt32; count: Int32; v: array of Int32);
    begin
      z_ScissorExclusiveArrayvNV_ovr_0(first, count, v[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ScissorExclusiveArrayvNV(first: UInt32; count: Int32; var v: Int32);
    begin
      z_ScissorExclusiveArrayvNV_ovr_0(first, count, v);
    end;
    public z_ScissorExclusiveArrayvNV_ovr_2 := GetFuncOrNil&<procedure(first: UInt32; count: Int32; v: IntPtr)>(z_ScissorExclusiveArrayvNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ScissorExclusiveArrayvNV(first: UInt32; count: Int32; v: IntPtr);
    begin
      z_ScissorExclusiveArrayvNV_ovr_2(first, count, v);
    end;
    
  end;
  
  glShaderBufferLoadNV = sealed class
    public static function GetFuncAdr([MarshalAs(UnmanagedType.LPStr)] lpszProc: string): IntPtr;
    external 'opengl32.dll' name 'wglGetProcAddress';
    public static function GetFuncOrNil<T>(fadr: IntPtr) :=
    fadr=IntPtr.Zero ? default(T) :
    Marshal.GetDelegateForFunctionPointer&<T>(fadr);
    
    public z_MakeBufferResidentNV_adr := GetFuncAdr('glMakeBufferResidentNV');
    public z_MakeBufferResidentNV_ovr_0 := GetFuncOrNil&<procedure(target: DummyEnum; access: DummyEnum)>(z_MakeBufferResidentNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MakeBufferResidentNV(target: DummyEnum; access: DummyEnum);
    begin
      z_MakeBufferResidentNV_ovr_0(target, access);
    end;
    
    public z_MakeBufferNonResidentNV_adr := GetFuncAdr('glMakeBufferNonResidentNV');
    public z_MakeBufferNonResidentNV_ovr_0 := GetFuncOrNil&<procedure(target: DummyEnum)>(z_MakeBufferNonResidentNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MakeBufferNonResidentNV(target: DummyEnum);
    begin
      z_MakeBufferNonResidentNV_ovr_0(target);
    end;
    
    public z_IsBufferResidentNV_adr := GetFuncAdr('glIsBufferResidentNV');
    public z_IsBufferResidentNV_ovr_0 := GetFuncOrNil&<function(target: DummyEnum): boolean>(z_IsBufferResidentNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function IsBufferResidentNV(target: DummyEnum): boolean;
    begin
      Result := z_IsBufferResidentNV_ovr_0(target);
    end;
    
    public z_MakeNamedBufferResidentNV_adr := GetFuncAdr('glMakeNamedBufferResidentNV');
    public z_MakeNamedBufferResidentNV_ovr_0 := GetFuncOrNil&<procedure(buffer: UInt32; access: DummyEnum)>(z_MakeNamedBufferResidentNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MakeNamedBufferResidentNV(buffer: UInt32; access: DummyEnum);
    begin
      z_MakeNamedBufferResidentNV_ovr_0(buffer, access);
    end;
    
    public z_MakeNamedBufferNonResidentNV_adr := GetFuncAdr('glMakeNamedBufferNonResidentNV');
    public z_MakeNamedBufferNonResidentNV_ovr_0 := GetFuncOrNil&<procedure(buffer: UInt32)>(z_MakeNamedBufferNonResidentNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MakeNamedBufferNonResidentNV(buffer: UInt32);
    begin
      z_MakeNamedBufferNonResidentNV_ovr_0(buffer);
    end;
    
    public z_IsNamedBufferResidentNV_adr := GetFuncAdr('glIsNamedBufferResidentNV');
    public z_IsNamedBufferResidentNV_ovr_0 := GetFuncOrNil&<function(buffer: UInt32): boolean>(z_IsNamedBufferResidentNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function IsNamedBufferResidentNV(buffer: UInt32): boolean;
    begin
      Result := z_IsNamedBufferResidentNV_ovr_0(buffer);
    end;
    
    public z_GetBufferParameterui64vNV_adr := GetFuncAdr('glGetBufferParameterui64vNV');
    public z_GetBufferParameterui64vNV_ovr_0 := GetFuncOrNil&<procedure(target: BufferTargetARB; pname: DummyEnum; var &params: UInt64)>(z_GetBufferParameterui64vNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetBufferParameterui64vNV(target: BufferTargetARB; pname: DummyEnum; &params: array of UInt64);
    begin
      z_GetBufferParameterui64vNV_ovr_0(target, pname, &params[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetBufferParameterui64vNV(target: BufferTargetARB; pname: DummyEnum; var &params: UInt64);
    begin
      z_GetBufferParameterui64vNV_ovr_0(target, pname, &params);
    end;
    public z_GetBufferParameterui64vNV_ovr_2 := GetFuncOrNil&<procedure(target: BufferTargetARB; pname: DummyEnum; &params: IntPtr)>(z_GetBufferParameterui64vNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetBufferParameterui64vNV(target: BufferTargetARB; pname: DummyEnum; &params: IntPtr);
    begin
      z_GetBufferParameterui64vNV_ovr_2(target, pname, &params);
    end;
    
    public z_GetNamedBufferParameterui64vNV_adr := GetFuncAdr('glGetNamedBufferParameterui64vNV');
    public z_GetNamedBufferParameterui64vNV_ovr_0 := GetFuncOrNil&<procedure(buffer: UInt32; pname: VertexBufferObjectParameter; var &params: UInt64)>(z_GetNamedBufferParameterui64vNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetNamedBufferParameterui64vNV(buffer: UInt32; pname: VertexBufferObjectParameter; &params: array of UInt64);
    begin
      z_GetNamedBufferParameterui64vNV_ovr_0(buffer, pname, &params[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetNamedBufferParameterui64vNV(buffer: UInt32; pname: VertexBufferObjectParameter; var &params: UInt64);
    begin
      z_GetNamedBufferParameterui64vNV_ovr_0(buffer, pname, &params);
    end;
    public z_GetNamedBufferParameterui64vNV_ovr_2 := GetFuncOrNil&<procedure(buffer: UInt32; pname: VertexBufferObjectParameter; &params: IntPtr)>(z_GetNamedBufferParameterui64vNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetNamedBufferParameterui64vNV(buffer: UInt32; pname: VertexBufferObjectParameter; &params: IntPtr);
    begin
      z_GetNamedBufferParameterui64vNV_ovr_2(buffer, pname, &params);
    end;
    
    public z_GetIntegerui64vNV_adr := GetFuncAdr('glGetIntegerui64vNV');
    public z_GetIntegerui64vNV_ovr_0 := GetFuncOrNil&<procedure(value: DummyEnum; var result: UInt64)>(z_GetIntegerui64vNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetIntegerui64vNV(value: DummyEnum; result: array of UInt64);
    begin
      z_GetIntegerui64vNV_ovr_0(value, result[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetIntegerui64vNV(value: DummyEnum; var result: UInt64);
    begin
      z_GetIntegerui64vNV_ovr_0(value, result);
    end;
    public z_GetIntegerui64vNV_ovr_2 := GetFuncOrNil&<procedure(value: DummyEnum; result: IntPtr)>(z_GetIntegerui64vNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetIntegerui64vNV(value: DummyEnum; result: IntPtr);
    begin
      z_GetIntegerui64vNV_ovr_2(value, result);
    end;
    
    public z_Uniformui64NV_adr := GetFuncAdr('glUniformui64NV');
    public z_Uniformui64NV_ovr_0 := GetFuncOrNil&<procedure(location: Int32; value: UInt64)>(z_Uniformui64NV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Uniformui64NV(location: Int32; value: UInt64);
    begin
      z_Uniformui64NV_ovr_0(location, value);
    end;
    
    public z_Uniformui64vNV_adr := GetFuncAdr('glUniformui64vNV');
    public z_Uniformui64vNV_ovr_0 := GetFuncOrNil&<procedure(location: Int32; count: Int32; var value: UInt64)>(z_Uniformui64vNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Uniformui64vNV(location: Int32; count: Int32; value: array of UInt64);
    begin
      z_Uniformui64vNV_ovr_0(location, count, value[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Uniformui64vNV(location: Int32; count: Int32; var value: UInt64);
    begin
      z_Uniformui64vNV_ovr_0(location, count, value);
    end;
    public z_Uniformui64vNV_ovr_2 := GetFuncOrNil&<procedure(location: Int32; count: Int32; value: IntPtr)>(z_Uniformui64vNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Uniformui64vNV(location: Int32; count: Int32; value: IntPtr);
    begin
      z_Uniformui64vNV_ovr_2(location, count, value);
    end;
    
    public z_GetUniformui64vNV_adr := GetFuncAdr('glGetUniformui64vNV');
    public z_GetUniformui64vNV_ovr_0 := GetFuncOrNil&<procedure(&program: UInt32; location: Int32; var &params: UInt64)>(z_GetUniformui64vNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetUniformui64vNV(&program: UInt32; location: Int32; &params: array of UInt64);
    begin
      z_GetUniformui64vNV_ovr_0(&program, location, &params[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetUniformui64vNV(&program: UInt32; location: Int32; var &params: UInt64);
    begin
      z_GetUniformui64vNV_ovr_0(&program, location, &params);
    end;
    public z_GetUniformui64vNV_ovr_2 := GetFuncOrNil&<procedure(&program: UInt32; location: Int32; &params: IntPtr)>(z_GetUniformui64vNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetUniformui64vNV(&program: UInt32; location: Int32; &params: IntPtr);
    begin
      z_GetUniformui64vNV_ovr_2(&program, location, &params);
    end;
    
    public z_ProgramUniformui64NV_adr := GetFuncAdr('glProgramUniformui64NV');
    public z_ProgramUniformui64NV_ovr_0 := GetFuncOrNil&<procedure(&program: UInt32; location: Int32; value: UInt64)>(z_ProgramUniformui64NV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniformui64NV(&program: UInt32; location: Int32; value: UInt64);
    begin
      z_ProgramUniformui64NV_ovr_0(&program, location, value);
    end;
    
    public z_ProgramUniformui64vNV_adr := GetFuncAdr('glProgramUniformui64vNV');
    public z_ProgramUniformui64vNV_ovr_0 := GetFuncOrNil&<procedure(&program: UInt32; location: Int32; count: Int32; var value: UInt64)>(z_ProgramUniformui64vNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniformui64vNV(&program: UInt32; location: Int32; count: Int32; value: array of UInt64);
    begin
      z_ProgramUniformui64vNV_ovr_0(&program, location, count, value[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniformui64vNV(&program: UInt32; location: Int32; count: Int32; var value: UInt64);
    begin
      z_ProgramUniformui64vNV_ovr_0(&program, location, count, value);
    end;
    public z_ProgramUniformui64vNV_ovr_2 := GetFuncOrNil&<procedure(&program: UInt32; location: Int32; count: Int32; value: IntPtr)>(z_ProgramUniformui64vNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramUniformui64vNV(&program: UInt32; location: Int32; count: Int32; value: IntPtr);
    begin
      z_ProgramUniformui64vNV_ovr_2(&program, location, count, value);
    end;
    
  end;
  
  glShadingRateImageNV = sealed class
    public static function GetFuncAdr([MarshalAs(UnmanagedType.LPStr)] lpszProc: string): IntPtr;
    external 'opengl32.dll' name 'wglGetProcAddress';
    public static function GetFuncOrNil<T>(fadr: IntPtr) :=
    fadr=IntPtr.Zero ? default(T) :
    Marshal.GetDelegateForFunctionPointer&<T>(fadr);
    
    public z_BindShadingRateImageNV_adr := GetFuncAdr('glBindShadingRateImageNV');
    public z_BindShadingRateImageNV_ovr_0 := GetFuncOrNil&<procedure(texture: UInt32)>(z_BindShadingRateImageNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure BindShadingRateImageNV(texture: UInt32);
    begin
      z_BindShadingRateImageNV_ovr_0(texture);
    end;
    
    public z_GetShadingRateImagePaletteNV_adr := GetFuncAdr('glGetShadingRateImagePaletteNV');
    public z_GetShadingRateImagePaletteNV_ovr_0 := GetFuncOrNil&<procedure(viewport: UInt32; entry: UInt32; var rate: DummyEnum)>(z_GetShadingRateImagePaletteNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetShadingRateImagePaletteNV(viewport: UInt32; entry: UInt32; rate: array of DummyEnum);
    begin
      z_GetShadingRateImagePaletteNV_ovr_0(viewport, entry, rate[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetShadingRateImagePaletteNV(viewport: UInt32; entry: UInt32; var rate: DummyEnum);
    begin
      z_GetShadingRateImagePaletteNV_ovr_0(viewport, entry, rate);
    end;
    public z_GetShadingRateImagePaletteNV_ovr_2 := GetFuncOrNil&<procedure(viewport: UInt32; entry: UInt32; rate: IntPtr)>(z_GetShadingRateImagePaletteNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetShadingRateImagePaletteNV(viewport: UInt32; entry: UInt32; rate: IntPtr);
    begin
      z_GetShadingRateImagePaletteNV_ovr_2(viewport, entry, rate);
    end;
    
    public z_GetShadingRateSampleLocationivNV_adr := GetFuncAdr('glGetShadingRateSampleLocationivNV');
    public z_GetShadingRateSampleLocationivNV_ovr_0 := GetFuncOrNil&<procedure(rate: DummyEnum; samples: UInt32; index: UInt32; var location: Int32)>(z_GetShadingRateSampleLocationivNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetShadingRateSampleLocationivNV(rate: DummyEnum; samples: UInt32; index: UInt32; location: array of Int32);
    begin
      z_GetShadingRateSampleLocationivNV_ovr_0(rate, samples, index, location[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetShadingRateSampleLocationivNV(rate: DummyEnum; samples: UInt32; index: UInt32; var location: Int32);
    begin
      z_GetShadingRateSampleLocationivNV_ovr_0(rate, samples, index, location);
    end;
    public z_GetShadingRateSampleLocationivNV_ovr_2 := GetFuncOrNil&<procedure(rate: DummyEnum; samples: UInt32; index: UInt32; location: IntPtr)>(z_GetShadingRateSampleLocationivNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetShadingRateSampleLocationivNV(rate: DummyEnum; samples: UInt32; index: UInt32; location: IntPtr);
    begin
      z_GetShadingRateSampleLocationivNV_ovr_2(rate, samples, index, location);
    end;
    
    public z_ShadingRateImageBarrierNV_adr := GetFuncAdr('glShadingRateImageBarrierNV');
    public z_ShadingRateImageBarrierNV_ovr_0 := GetFuncOrNil&<procedure(synchronize: boolean)>(z_ShadingRateImageBarrierNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ShadingRateImageBarrierNV(synchronize: boolean);
    begin
      z_ShadingRateImageBarrierNV_ovr_0(synchronize);
    end;
    
    public z_ShadingRateImagePaletteNV_adr := GetFuncAdr('glShadingRateImagePaletteNV');
    public z_ShadingRateImagePaletteNV_ovr_0 := GetFuncOrNil&<procedure(viewport: UInt32; first: UInt32; count: Int32; var rates: DummyEnum)>(z_ShadingRateImagePaletteNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ShadingRateImagePaletteNV(viewport: UInt32; first: UInt32; count: Int32; rates: array of DummyEnum);
    begin
      z_ShadingRateImagePaletteNV_ovr_0(viewport, first, count, rates[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ShadingRateImagePaletteNV(viewport: UInt32; first: UInt32; count: Int32; var rates: DummyEnum);
    begin
      z_ShadingRateImagePaletteNV_ovr_0(viewport, first, count, rates);
    end;
    public z_ShadingRateImagePaletteNV_ovr_2 := GetFuncOrNil&<procedure(viewport: UInt32; first: UInt32; count: Int32; rates: IntPtr)>(z_ShadingRateImagePaletteNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ShadingRateImagePaletteNV(viewport: UInt32; first: UInt32; count: Int32; rates: IntPtr);
    begin
      z_ShadingRateImagePaletteNV_ovr_2(viewport, first, count, rates);
    end;
    
    public z_ShadingRateSampleOrderNV_adr := GetFuncAdr('glShadingRateSampleOrderNV');
    public z_ShadingRateSampleOrderNV_ovr_0 := GetFuncOrNil&<procedure(order: DummyEnum)>(z_ShadingRateSampleOrderNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ShadingRateSampleOrderNV(order: DummyEnum);
    begin
      z_ShadingRateSampleOrderNV_ovr_0(order);
    end;
    
    public z_ShadingRateSampleOrderCustomNV_adr := GetFuncAdr('glShadingRateSampleOrderCustomNV');
    public z_ShadingRateSampleOrderCustomNV_ovr_0 := GetFuncOrNil&<procedure(rate: DummyEnum; samples: UInt32; var locations: Int32)>(z_ShadingRateSampleOrderCustomNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ShadingRateSampleOrderCustomNV(rate: DummyEnum; samples: UInt32; locations: array of Int32);
    begin
      z_ShadingRateSampleOrderCustomNV_ovr_0(rate, samples, locations[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ShadingRateSampleOrderCustomNV(rate: DummyEnum; samples: UInt32; var locations: Int32);
    begin
      z_ShadingRateSampleOrderCustomNV_ovr_0(rate, samples, locations);
    end;
    public z_ShadingRateSampleOrderCustomNV_ovr_2 := GetFuncOrNil&<procedure(rate: DummyEnum; samples: UInt32; locations: IntPtr)>(z_ShadingRateSampleOrderCustomNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ShadingRateSampleOrderCustomNV(rate: DummyEnum; samples: UInt32; locations: IntPtr);
    begin
      z_ShadingRateSampleOrderCustomNV_ovr_2(rate, samples, locations);
    end;
    
  end;
  
  glTextureBarrierNV = sealed class
    public static function GetFuncAdr([MarshalAs(UnmanagedType.LPStr)] lpszProc: string): IntPtr;
    external 'opengl32.dll' name 'wglGetProcAddress';
    public static function GetFuncOrNil<T>(fadr: IntPtr) :=
    fadr=IntPtr.Zero ? default(T) :
    Marshal.GetDelegateForFunctionPointer&<T>(fadr);
    
    public z_TextureBarrierNV_adr := GetFuncAdr('glTextureBarrierNV');
    public z_TextureBarrierNV_ovr_0 := GetFuncOrNil&<procedure>(z_TextureBarrierNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TextureBarrierNV;
    begin
      z_TextureBarrierNV_ovr_0;
    end;
    
  end;
  
  glTextureMultisampleNV = sealed class
    public static function GetFuncAdr([MarshalAs(UnmanagedType.LPStr)] lpszProc: string): IntPtr;
    external 'opengl32.dll' name 'wglGetProcAddress';
    public static function GetFuncOrNil<T>(fadr: IntPtr) :=
    fadr=IntPtr.Zero ? default(T) :
    Marshal.GetDelegateForFunctionPointer&<T>(fadr);
    
    public z_TexImage2DMultisampleCoverageNV_adr := GetFuncAdr('glTexImage2DMultisampleCoverageNV');
    public z_TexImage2DMultisampleCoverageNV_ovr_0 := GetFuncOrNil&<procedure(target: TextureTarget; coverageSamples: Int32; colorSamples: Int32; internalFormat: Int32; width: Int32; height: Int32; fixedSampleLocations: boolean)>(z_TexImage2DMultisampleCoverageNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TexImage2DMultisampleCoverageNV(target: TextureTarget; coverageSamples: Int32; colorSamples: Int32; internalFormat: Int32; width: Int32; height: Int32; fixedSampleLocations: boolean);
    begin
      z_TexImage2DMultisampleCoverageNV_ovr_0(target, coverageSamples, colorSamples, internalFormat, width, height, fixedSampleLocations);
    end;
    
    public z_TexImage3DMultisampleCoverageNV_adr := GetFuncAdr('glTexImage3DMultisampleCoverageNV');
    public z_TexImage3DMultisampleCoverageNV_ovr_0 := GetFuncOrNil&<procedure(target: TextureTarget; coverageSamples: Int32; colorSamples: Int32; internalFormat: Int32; width: Int32; height: Int32; depth: Int32; fixedSampleLocations: boolean)>(z_TexImage3DMultisampleCoverageNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TexImage3DMultisampleCoverageNV(target: TextureTarget; coverageSamples: Int32; colorSamples: Int32; internalFormat: Int32; width: Int32; height: Int32; depth: Int32; fixedSampleLocations: boolean);
    begin
      z_TexImage3DMultisampleCoverageNV_ovr_0(target, coverageSamples, colorSamples, internalFormat, width, height, depth, fixedSampleLocations);
    end;
    
    public z_TextureImage2DMultisampleNV_adr := GetFuncAdr('glTextureImage2DMultisampleNV');
    public z_TextureImage2DMultisampleNV_ovr_0 := GetFuncOrNil&<procedure(texture: UInt32; target: TextureTarget; samples: Int32; internalFormat: Int32; width: Int32; height: Int32; fixedSampleLocations: boolean)>(z_TextureImage2DMultisampleNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TextureImage2DMultisampleNV(texture: UInt32; target: TextureTarget; samples: Int32; internalFormat: Int32; width: Int32; height: Int32; fixedSampleLocations: boolean);
    begin
      z_TextureImage2DMultisampleNV_ovr_0(texture, target, samples, internalFormat, width, height, fixedSampleLocations);
    end;
    
    public z_TextureImage3DMultisampleNV_adr := GetFuncAdr('glTextureImage3DMultisampleNV');
    public z_TextureImage3DMultisampleNV_ovr_0 := GetFuncOrNil&<procedure(texture: UInt32; target: TextureTarget; samples: Int32; internalFormat: Int32; width: Int32; height: Int32; depth: Int32; fixedSampleLocations: boolean)>(z_TextureImage3DMultisampleNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TextureImage3DMultisampleNV(texture: UInt32; target: TextureTarget; samples: Int32; internalFormat: Int32; width: Int32; height: Int32; depth: Int32; fixedSampleLocations: boolean);
    begin
      z_TextureImage3DMultisampleNV_ovr_0(texture, target, samples, internalFormat, width, height, depth, fixedSampleLocations);
    end;
    
    public z_TextureImage2DMultisampleCoverageNV_adr := GetFuncAdr('glTextureImage2DMultisampleCoverageNV');
    public z_TextureImage2DMultisampleCoverageNV_ovr_0 := GetFuncOrNil&<procedure(texture: UInt32; target: TextureTarget; coverageSamples: Int32; colorSamples: Int32; internalFormat: Int32; width: Int32; height: Int32; fixedSampleLocations: boolean)>(z_TextureImage2DMultisampleCoverageNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TextureImage2DMultisampleCoverageNV(texture: UInt32; target: TextureTarget; coverageSamples: Int32; colorSamples: Int32; internalFormat: Int32; width: Int32; height: Int32; fixedSampleLocations: boolean);
    begin
      z_TextureImage2DMultisampleCoverageNV_ovr_0(texture, target, coverageSamples, colorSamples, internalFormat, width, height, fixedSampleLocations);
    end;
    
    public z_TextureImage3DMultisampleCoverageNV_adr := GetFuncAdr('glTextureImage3DMultisampleCoverageNV');
    public z_TextureImage3DMultisampleCoverageNV_ovr_0 := GetFuncOrNil&<procedure(texture: UInt32; target: TextureTarget; coverageSamples: Int32; colorSamples: Int32; internalFormat: Int32; width: Int32; height: Int32; depth: Int32; fixedSampleLocations: boolean)>(z_TextureImage3DMultisampleCoverageNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TextureImage3DMultisampleCoverageNV(texture: UInt32; target: TextureTarget; coverageSamples: Int32; colorSamples: Int32; internalFormat: Int32; width: Int32; height: Int32; depth: Int32; fixedSampleLocations: boolean);
    begin
      z_TextureImage3DMultisampleCoverageNV_ovr_0(texture, target, coverageSamples, colorSamples, internalFormat, width, height, depth, fixedSampleLocations);
    end;
    
  end;
  
  glTransformFeedbackNV = sealed class
    public static function GetFuncAdr([MarshalAs(UnmanagedType.LPStr)] lpszProc: string): IntPtr;
    external 'opengl32.dll' name 'wglGetProcAddress';
    public static function GetFuncOrNil<T>(fadr: IntPtr) :=
    fadr=IntPtr.Zero ? default(T) :
    Marshal.GetDelegateForFunctionPointer&<T>(fadr);
    
    public z_BeginTransformFeedbackNV_adr := GetFuncAdr('glBeginTransformFeedbackNV');
    public z_BeginTransformFeedbackNV_ovr_0 := GetFuncOrNil&<procedure(primitiveMode: PrimitiveType)>(z_BeginTransformFeedbackNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure BeginTransformFeedbackNV(primitiveMode: PrimitiveType);
    begin
      z_BeginTransformFeedbackNV_ovr_0(primitiveMode);
    end;
    
    public z_EndTransformFeedbackNV_adr := GetFuncAdr('glEndTransformFeedbackNV');
    public z_EndTransformFeedbackNV_ovr_0 := GetFuncOrNil&<procedure>(z_EndTransformFeedbackNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure EndTransformFeedbackNV;
    begin
      z_EndTransformFeedbackNV_ovr_0;
    end;
    
    public z_TransformFeedbackAttribsNV_adr := GetFuncAdr('glTransformFeedbackAttribsNV');
    public z_TransformFeedbackAttribsNV_ovr_0 := GetFuncOrNil&<procedure(count: Int32; var attribs: Int32; bufferMode: DummyEnum)>(z_TransformFeedbackAttribsNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TransformFeedbackAttribsNV(count: Int32; attribs: array of Int32; bufferMode: DummyEnum);
    begin
      z_TransformFeedbackAttribsNV_ovr_0(count, attribs[0], bufferMode);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TransformFeedbackAttribsNV(count: Int32; var attribs: Int32; bufferMode: DummyEnum);
    begin
      z_TransformFeedbackAttribsNV_ovr_0(count, attribs, bufferMode);
    end;
    public z_TransformFeedbackAttribsNV_ovr_2 := GetFuncOrNil&<procedure(count: Int32; attribs: IntPtr; bufferMode: DummyEnum)>(z_TransformFeedbackAttribsNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TransformFeedbackAttribsNV(count: Int32; attribs: IntPtr; bufferMode: DummyEnum);
    begin
      z_TransformFeedbackAttribsNV_ovr_2(count, attribs, bufferMode);
    end;
    
    public z_BindBufferRangeNV_adr := GetFuncAdr('glBindBufferRangeNV');
    public z_BindBufferRangeNV_ovr_0 := GetFuncOrNil&<procedure(target: BufferTargetARB; index: UInt32; buffer: UInt32; offset: IntPtr; size: IntPtr)>(z_BindBufferRangeNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure BindBufferRangeNV(target: BufferTargetARB; index: UInt32; buffer: UInt32; offset: IntPtr; size: IntPtr);
    begin
      z_BindBufferRangeNV_ovr_0(target, index, buffer, offset, size);
    end;
    
    public z_BindBufferOffsetNV_adr := GetFuncAdr('glBindBufferOffsetNV');
    public z_BindBufferOffsetNV_ovr_0 := GetFuncOrNil&<procedure(target: BufferTargetARB; index: UInt32; buffer: UInt32; offset: IntPtr)>(z_BindBufferOffsetNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure BindBufferOffsetNV(target: BufferTargetARB; index: UInt32; buffer: UInt32; offset: IntPtr);
    begin
      z_BindBufferOffsetNV_ovr_0(target, index, buffer, offset);
    end;
    
    public z_BindBufferBaseNV_adr := GetFuncAdr('glBindBufferBaseNV');
    public z_BindBufferBaseNV_ovr_0 := GetFuncOrNil&<procedure(target: BufferTargetARB; index: UInt32; buffer: UInt32)>(z_BindBufferBaseNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure BindBufferBaseNV(target: BufferTargetARB; index: UInt32; buffer: UInt32);
    begin
      z_BindBufferBaseNV_ovr_0(target, index, buffer);
    end;
    
    public z_TransformFeedbackVaryingsNV_adr := GetFuncAdr('glTransformFeedbackVaryingsNV');
    public z_TransformFeedbackVaryingsNV_ovr_0 := GetFuncOrNil&<procedure(&program: UInt32; count: Int32; var locations: Int32; bufferMode: DummyEnum)>(z_TransformFeedbackVaryingsNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TransformFeedbackVaryingsNV(&program: UInt32; count: Int32; locations: array of Int32; bufferMode: DummyEnum);
    begin
      z_TransformFeedbackVaryingsNV_ovr_0(&program, count, locations[0], bufferMode);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TransformFeedbackVaryingsNV(&program: UInt32; count: Int32; var locations: Int32; bufferMode: DummyEnum);
    begin
      z_TransformFeedbackVaryingsNV_ovr_0(&program, count, locations, bufferMode);
    end;
    public z_TransformFeedbackVaryingsNV_ovr_2 := GetFuncOrNil&<procedure(&program: UInt32; count: Int32; locations: IntPtr; bufferMode: DummyEnum)>(z_TransformFeedbackVaryingsNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TransformFeedbackVaryingsNV(&program: UInt32; count: Int32; locations: IntPtr; bufferMode: DummyEnum);
    begin
      z_TransformFeedbackVaryingsNV_ovr_2(&program, count, locations, bufferMode);
    end;
    
    public z_ActiveVaryingNV_adr := GetFuncAdr('glActiveVaryingNV');
    public z_ActiveVaryingNV_ovr_0 := GetFuncOrNil&<procedure(&program: UInt32; name: IntPtr)>(z_ActiveVaryingNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ActiveVaryingNV(&program: UInt32; name: string);
    begin
      var par_2_str_ptr := Marshal.StringToHGlobalAnsi(name);
      z_ActiveVaryingNV_ovr_0(&program, par_2_str_ptr);
      Marshal.FreeHGlobal(par_2_str_ptr);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ActiveVaryingNV(&program: UInt32; name: IntPtr);
    begin
      z_ActiveVaryingNV_ovr_0(&program, name);
    end;
    
    public z_GetVaryingLocationNV_adr := GetFuncAdr('glGetVaryingLocationNV');
    public z_GetVaryingLocationNV_ovr_0 := GetFuncOrNil&<function(&program: UInt32; name: IntPtr): Int32>(z_GetVaryingLocationNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetVaryingLocationNV(&program: UInt32; name: string): Int32;
    begin
      var par_2_str_ptr := Marshal.StringToHGlobalAnsi(name);
      Result := z_GetVaryingLocationNV_ovr_0(&program, par_2_str_ptr);
      Marshal.FreeHGlobal(par_2_str_ptr);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetVaryingLocationNV(&program: UInt32; name: IntPtr): Int32;
    begin
      Result := z_GetVaryingLocationNV_ovr_0(&program, name);
    end;
    
    public z_GetActiveVaryingNV_adr := GetFuncAdr('glGetActiveVaryingNV');
    public z_GetActiveVaryingNV_ovr_0 := GetFuncOrNil&<procedure(&program: UInt32; index: UInt32; bufSize: Int32; var length: Int32; var size: Int32; var &type: DummyEnum; name: IntPtr)>(z_GetActiveVaryingNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetActiveVaryingNV(&program: UInt32; index: UInt32; bufSize: Int32; length: array of Int32; size: array of Int32; &type: array of DummyEnum; name: IntPtr);
    begin
      z_GetActiveVaryingNV_ovr_0(&program, index, bufSize, length[0], size[0], &type[0], name);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetActiveVaryingNV(&program: UInt32; index: UInt32; bufSize: Int32; length: array of Int32; size: array of Int32; var &type: DummyEnum; name: IntPtr);
    begin
      z_GetActiveVaryingNV_ovr_0(&program, index, bufSize, length[0], size[0], &type, name);
    end;
    public z_GetActiveVaryingNV_ovr_2 := GetFuncOrNil&<procedure(&program: UInt32; index: UInt32; bufSize: Int32; var length: Int32; var size: Int32; &type: IntPtr; name: IntPtr)>(z_GetActiveVaryingNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetActiveVaryingNV(&program: UInt32; index: UInt32; bufSize: Int32; length: array of Int32; size: array of Int32; &type: IntPtr; name: IntPtr);
    begin
      z_GetActiveVaryingNV_ovr_2(&program, index, bufSize, length[0], size[0], &type, name);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetActiveVaryingNV(&program: UInt32; index: UInt32; bufSize: Int32; length: array of Int32; var size: Int32; &type: array of DummyEnum; name: IntPtr);
    begin
      z_GetActiveVaryingNV_ovr_0(&program, index, bufSize, length[0], size, &type[0], name);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetActiveVaryingNV(&program: UInt32; index: UInt32; bufSize: Int32; length: array of Int32; var size: Int32; var &type: DummyEnum; name: IntPtr);
    begin
      z_GetActiveVaryingNV_ovr_0(&program, index, bufSize, length[0], size, &type, name);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetActiveVaryingNV(&program: UInt32; index: UInt32; bufSize: Int32; length: array of Int32; var size: Int32; &type: IntPtr; name: IntPtr);
    begin
      z_GetActiveVaryingNV_ovr_2(&program, index, bufSize, length[0], size, &type, name);
    end;
    public z_GetActiveVaryingNV_ovr_6 := GetFuncOrNil&<procedure(&program: UInt32; index: UInt32; bufSize: Int32; var length: Int32; size: IntPtr; var &type: DummyEnum; name: IntPtr)>(z_GetActiveVaryingNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetActiveVaryingNV(&program: UInt32; index: UInt32; bufSize: Int32; length: array of Int32; size: IntPtr; &type: array of DummyEnum; name: IntPtr);
    begin
      z_GetActiveVaryingNV_ovr_6(&program, index, bufSize, length[0], size, &type[0], name);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetActiveVaryingNV(&program: UInt32; index: UInt32; bufSize: Int32; length: array of Int32; size: IntPtr; var &type: DummyEnum; name: IntPtr);
    begin
      z_GetActiveVaryingNV_ovr_6(&program, index, bufSize, length[0], size, &type, name);
    end;
    public z_GetActiveVaryingNV_ovr_8 := GetFuncOrNil&<procedure(&program: UInt32; index: UInt32; bufSize: Int32; var length: Int32; size: IntPtr; &type: IntPtr; name: IntPtr)>(z_GetActiveVaryingNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetActiveVaryingNV(&program: UInt32; index: UInt32; bufSize: Int32; length: array of Int32; size: IntPtr; &type: IntPtr; name: IntPtr);
    begin
      z_GetActiveVaryingNV_ovr_8(&program, index, bufSize, length[0], size, &type, name);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetActiveVaryingNV(&program: UInt32; index: UInt32; bufSize: Int32; var length: Int32; size: array of Int32; &type: array of DummyEnum; name: IntPtr);
    begin
      z_GetActiveVaryingNV_ovr_0(&program, index, bufSize, length, size[0], &type[0], name);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetActiveVaryingNV(&program: UInt32; index: UInt32; bufSize: Int32; var length: Int32; size: array of Int32; var &type: DummyEnum; name: IntPtr);
    begin
      z_GetActiveVaryingNV_ovr_0(&program, index, bufSize, length, size[0], &type, name);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetActiveVaryingNV(&program: UInt32; index: UInt32; bufSize: Int32; var length: Int32; size: array of Int32; &type: IntPtr; name: IntPtr);
    begin
      z_GetActiveVaryingNV_ovr_2(&program, index, bufSize, length, size[0], &type, name);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetActiveVaryingNV(&program: UInt32; index: UInt32; bufSize: Int32; var length: Int32; var size: Int32; &type: array of DummyEnum; name: IntPtr);
    begin
      z_GetActiveVaryingNV_ovr_0(&program, index, bufSize, length, size, &type[0], name);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetActiveVaryingNV(&program: UInt32; index: UInt32; bufSize: Int32; var length: Int32; var size: Int32; var &type: DummyEnum; name: IntPtr);
    begin
      z_GetActiveVaryingNV_ovr_0(&program, index, bufSize, length, size, &type, name);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetActiveVaryingNV(&program: UInt32; index: UInt32; bufSize: Int32; var length: Int32; var size: Int32; &type: IntPtr; name: IntPtr);
    begin
      z_GetActiveVaryingNV_ovr_2(&program, index, bufSize, length, size, &type, name);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetActiveVaryingNV(&program: UInt32; index: UInt32; bufSize: Int32; var length: Int32; size: IntPtr; &type: array of DummyEnum; name: IntPtr);
    begin
      z_GetActiveVaryingNV_ovr_6(&program, index, bufSize, length, size, &type[0], name);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetActiveVaryingNV(&program: UInt32; index: UInt32; bufSize: Int32; var length: Int32; size: IntPtr; var &type: DummyEnum; name: IntPtr);
    begin
      z_GetActiveVaryingNV_ovr_6(&program, index, bufSize, length, size, &type, name);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetActiveVaryingNV(&program: UInt32; index: UInt32; bufSize: Int32; var length: Int32; size: IntPtr; &type: IntPtr; name: IntPtr);
    begin
      z_GetActiveVaryingNV_ovr_8(&program, index, bufSize, length, size, &type, name);
    end;
    public z_GetActiveVaryingNV_ovr_18 := GetFuncOrNil&<procedure(&program: UInt32; index: UInt32; bufSize: Int32; length: IntPtr; var size: Int32; var &type: DummyEnum; name: IntPtr)>(z_GetActiveVaryingNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetActiveVaryingNV(&program: UInt32; index: UInt32; bufSize: Int32; length: IntPtr; size: array of Int32; &type: array of DummyEnum; name: IntPtr);
    begin
      z_GetActiveVaryingNV_ovr_18(&program, index, bufSize, length, size[0], &type[0], name);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetActiveVaryingNV(&program: UInt32; index: UInt32; bufSize: Int32; length: IntPtr; size: array of Int32; var &type: DummyEnum; name: IntPtr);
    begin
      z_GetActiveVaryingNV_ovr_18(&program, index, bufSize, length, size[0], &type, name);
    end;
    public z_GetActiveVaryingNV_ovr_20 := GetFuncOrNil&<procedure(&program: UInt32; index: UInt32; bufSize: Int32; length: IntPtr; var size: Int32; &type: IntPtr; name: IntPtr)>(z_GetActiveVaryingNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetActiveVaryingNV(&program: UInt32; index: UInt32; bufSize: Int32; length: IntPtr; size: array of Int32; &type: IntPtr; name: IntPtr);
    begin
      z_GetActiveVaryingNV_ovr_20(&program, index, bufSize, length, size[0], &type, name);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetActiveVaryingNV(&program: UInt32; index: UInt32; bufSize: Int32; length: IntPtr; var size: Int32; &type: array of DummyEnum; name: IntPtr);
    begin
      z_GetActiveVaryingNV_ovr_18(&program, index, bufSize, length, size, &type[0], name);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetActiveVaryingNV(&program: UInt32; index: UInt32; bufSize: Int32; length: IntPtr; var size: Int32; var &type: DummyEnum; name: IntPtr);
    begin
      z_GetActiveVaryingNV_ovr_18(&program, index, bufSize, length, size, &type, name);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetActiveVaryingNV(&program: UInt32; index: UInt32; bufSize: Int32; length: IntPtr; var size: Int32; &type: IntPtr; name: IntPtr);
    begin
      z_GetActiveVaryingNV_ovr_20(&program, index, bufSize, length, size, &type, name);
    end;
    public z_GetActiveVaryingNV_ovr_24 := GetFuncOrNil&<procedure(&program: UInt32; index: UInt32; bufSize: Int32; length: IntPtr; size: IntPtr; var &type: DummyEnum; name: IntPtr)>(z_GetActiveVaryingNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetActiveVaryingNV(&program: UInt32; index: UInt32; bufSize: Int32; length: IntPtr; size: IntPtr; &type: array of DummyEnum; name: IntPtr);
    begin
      z_GetActiveVaryingNV_ovr_24(&program, index, bufSize, length, size, &type[0], name);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetActiveVaryingNV(&program: UInt32; index: UInt32; bufSize: Int32; length: IntPtr; size: IntPtr; var &type: DummyEnum; name: IntPtr);
    begin
      z_GetActiveVaryingNV_ovr_24(&program, index, bufSize, length, size, &type, name);
    end;
    public z_GetActiveVaryingNV_ovr_26 := GetFuncOrNil&<procedure(&program: UInt32; index: UInt32; bufSize: Int32; length: IntPtr; size: IntPtr; &type: IntPtr; name: IntPtr)>(z_GetActiveVaryingNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetActiveVaryingNV(&program: UInt32; index: UInt32; bufSize: Int32; length: IntPtr; size: IntPtr; &type: IntPtr; name: IntPtr);
    begin
      z_GetActiveVaryingNV_ovr_26(&program, index, bufSize, length, size, &type, name);
    end;
    
    public z_GetTransformFeedbackVaryingNV_adr := GetFuncAdr('glGetTransformFeedbackVaryingNV');
    public z_GetTransformFeedbackVaryingNV_ovr_0 := GetFuncOrNil&<procedure(&program: UInt32; index: UInt32; var location: Int32)>(z_GetTransformFeedbackVaryingNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetTransformFeedbackVaryingNV(&program: UInt32; index: UInt32; location: array of Int32);
    begin
      z_GetTransformFeedbackVaryingNV_ovr_0(&program, index, location[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetTransformFeedbackVaryingNV(&program: UInt32; index: UInt32; var location: Int32);
    begin
      z_GetTransformFeedbackVaryingNV_ovr_0(&program, index, location);
    end;
    public z_GetTransformFeedbackVaryingNV_ovr_2 := GetFuncOrNil&<procedure(&program: UInt32; index: UInt32; location: IntPtr)>(z_GetTransformFeedbackVaryingNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetTransformFeedbackVaryingNV(&program: UInt32; index: UInt32; location: IntPtr);
    begin
      z_GetTransformFeedbackVaryingNV_ovr_2(&program, index, location);
    end;
    
    public z_TransformFeedbackStreamAttribsNV_adr := GetFuncAdr('glTransformFeedbackStreamAttribsNV');
    public z_TransformFeedbackStreamAttribsNV_ovr_0 := GetFuncOrNil&<procedure(count: Int32; var attribs: Int32; nbuffers: Int32; var bufstreams: Int32; bufferMode: DummyEnum)>(z_TransformFeedbackStreamAttribsNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TransformFeedbackStreamAttribsNV(count: Int32; attribs: array of Int32; nbuffers: Int32; bufstreams: array of Int32; bufferMode: DummyEnum);
    begin
      z_TransformFeedbackStreamAttribsNV_ovr_0(count, attribs[0], nbuffers, bufstreams[0], bufferMode);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TransformFeedbackStreamAttribsNV(count: Int32; attribs: array of Int32; nbuffers: Int32; var bufstreams: Int32; bufferMode: DummyEnum);
    begin
      z_TransformFeedbackStreamAttribsNV_ovr_0(count, attribs[0], nbuffers, bufstreams, bufferMode);
    end;
    public z_TransformFeedbackStreamAttribsNV_ovr_2 := GetFuncOrNil&<procedure(count: Int32; var attribs: Int32; nbuffers: Int32; bufstreams: IntPtr; bufferMode: DummyEnum)>(z_TransformFeedbackStreamAttribsNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TransformFeedbackStreamAttribsNV(count: Int32; attribs: array of Int32; nbuffers: Int32; bufstreams: IntPtr; bufferMode: DummyEnum);
    begin
      z_TransformFeedbackStreamAttribsNV_ovr_2(count, attribs[0], nbuffers, bufstreams, bufferMode);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TransformFeedbackStreamAttribsNV(count: Int32; var attribs: Int32; nbuffers: Int32; bufstreams: array of Int32; bufferMode: DummyEnum);
    begin
      z_TransformFeedbackStreamAttribsNV_ovr_0(count, attribs, nbuffers, bufstreams[0], bufferMode);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TransformFeedbackStreamAttribsNV(count: Int32; var attribs: Int32; nbuffers: Int32; var bufstreams: Int32; bufferMode: DummyEnum);
    begin
      z_TransformFeedbackStreamAttribsNV_ovr_0(count, attribs, nbuffers, bufstreams, bufferMode);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TransformFeedbackStreamAttribsNV(count: Int32; var attribs: Int32; nbuffers: Int32; bufstreams: IntPtr; bufferMode: DummyEnum);
    begin
      z_TransformFeedbackStreamAttribsNV_ovr_2(count, attribs, nbuffers, bufstreams, bufferMode);
    end;
    public z_TransformFeedbackStreamAttribsNV_ovr_6 := GetFuncOrNil&<procedure(count: Int32; attribs: IntPtr; nbuffers: Int32; var bufstreams: Int32; bufferMode: DummyEnum)>(z_TransformFeedbackStreamAttribsNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TransformFeedbackStreamAttribsNV(count: Int32; attribs: IntPtr; nbuffers: Int32; bufstreams: array of Int32; bufferMode: DummyEnum);
    begin
      z_TransformFeedbackStreamAttribsNV_ovr_6(count, attribs, nbuffers, bufstreams[0], bufferMode);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TransformFeedbackStreamAttribsNV(count: Int32; attribs: IntPtr; nbuffers: Int32; var bufstreams: Int32; bufferMode: DummyEnum);
    begin
      z_TransformFeedbackStreamAttribsNV_ovr_6(count, attribs, nbuffers, bufstreams, bufferMode);
    end;
    public z_TransformFeedbackStreamAttribsNV_ovr_8 := GetFuncOrNil&<procedure(count: Int32; attribs: IntPtr; nbuffers: Int32; bufstreams: IntPtr; bufferMode: DummyEnum)>(z_TransformFeedbackStreamAttribsNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TransformFeedbackStreamAttribsNV(count: Int32; attribs: IntPtr; nbuffers: Int32; bufstreams: IntPtr; bufferMode: DummyEnum);
    begin
      z_TransformFeedbackStreamAttribsNV_ovr_8(count, attribs, nbuffers, bufstreams, bufferMode);
    end;
    
  end;
  
  glTransformFeedback2NV = sealed class
    public static function GetFuncAdr([MarshalAs(UnmanagedType.LPStr)] lpszProc: string): IntPtr;
    external 'opengl32.dll' name 'wglGetProcAddress';
    public static function GetFuncOrNil<T>(fadr: IntPtr) :=
    fadr=IntPtr.Zero ? default(T) :
    Marshal.GetDelegateForFunctionPointer&<T>(fadr);
    
    public z_BindTransformFeedbackNV_adr := GetFuncAdr('glBindTransformFeedbackNV');
    public z_BindTransformFeedbackNV_ovr_0 := GetFuncOrNil&<procedure(target: BufferTargetARB; id: UInt32)>(z_BindTransformFeedbackNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure BindTransformFeedbackNV(target: BufferTargetARB; id: UInt32);
    begin
      z_BindTransformFeedbackNV_ovr_0(target, id);
    end;
    
    public z_DeleteTransformFeedbacksNV_adr := GetFuncAdr('glDeleteTransformFeedbacksNV');
    public z_DeleteTransformFeedbacksNV_ovr_0 := GetFuncOrNil&<procedure(n: Int32; var ids: UInt32)>(z_DeleteTransformFeedbacksNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure DeleteTransformFeedbacksNV(n: Int32; ids: array of UInt32);
    begin
      z_DeleteTransformFeedbacksNV_ovr_0(n, ids[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure DeleteTransformFeedbacksNV(n: Int32; var ids: UInt32);
    begin
      z_DeleteTransformFeedbacksNV_ovr_0(n, ids);
    end;
    public z_DeleteTransformFeedbacksNV_ovr_2 := GetFuncOrNil&<procedure(n: Int32; ids: IntPtr)>(z_DeleteTransformFeedbacksNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure DeleteTransformFeedbacksNV(n: Int32; ids: IntPtr);
    begin
      z_DeleteTransformFeedbacksNV_ovr_2(n, ids);
    end;
    
    public z_GenTransformFeedbacksNV_adr := GetFuncAdr('glGenTransformFeedbacksNV');
    public z_GenTransformFeedbacksNV_ovr_0 := GetFuncOrNil&<procedure(n: Int32; var ids: UInt32)>(z_GenTransformFeedbacksNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GenTransformFeedbacksNV(n: Int32; ids: array of UInt32);
    begin
      z_GenTransformFeedbacksNV_ovr_0(n, ids[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GenTransformFeedbacksNV(n: Int32; var ids: UInt32);
    begin
      z_GenTransformFeedbacksNV_ovr_0(n, ids);
    end;
    public z_GenTransformFeedbacksNV_ovr_2 := GetFuncOrNil&<procedure(n: Int32; ids: IntPtr)>(z_GenTransformFeedbacksNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GenTransformFeedbacksNV(n: Int32; ids: IntPtr);
    begin
      z_GenTransformFeedbacksNV_ovr_2(n, ids);
    end;
    
    public z_IsTransformFeedbackNV_adr := GetFuncAdr('glIsTransformFeedbackNV');
    public z_IsTransformFeedbackNV_ovr_0 := GetFuncOrNil&<function(id: UInt32): boolean>(z_IsTransformFeedbackNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function IsTransformFeedbackNV(id: UInt32): boolean;
    begin
      Result := z_IsTransformFeedbackNV_ovr_0(id);
    end;
    
    public z_PauseTransformFeedbackNV_adr := GetFuncAdr('glPauseTransformFeedbackNV');
    public z_PauseTransformFeedbackNV_ovr_0 := GetFuncOrNil&<procedure>(z_PauseTransformFeedbackNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure PauseTransformFeedbackNV;
    begin
      z_PauseTransformFeedbackNV_ovr_0;
    end;
    
    public z_ResumeTransformFeedbackNV_adr := GetFuncAdr('glResumeTransformFeedbackNV');
    public z_ResumeTransformFeedbackNV_ovr_0 := GetFuncOrNil&<procedure>(z_ResumeTransformFeedbackNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ResumeTransformFeedbackNV;
    begin
      z_ResumeTransformFeedbackNV_ovr_0;
    end;
    
    public z_DrawTransformFeedbackNV_adr := GetFuncAdr('glDrawTransformFeedbackNV');
    public z_DrawTransformFeedbackNV_ovr_0 := GetFuncOrNil&<procedure(mode: PrimitiveType; id: UInt32)>(z_DrawTransformFeedbackNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure DrawTransformFeedbackNV(mode: PrimitiveType; id: UInt32);
    begin
      z_DrawTransformFeedbackNV_ovr_0(mode, id);
    end;
    
  end;
  
  glVdpauInteropNV = sealed class
    public static function GetFuncAdr([MarshalAs(UnmanagedType.LPStr)] lpszProc: string): IntPtr;
    external 'opengl32.dll' name 'wglGetProcAddress';
    public static function GetFuncOrNil<T>(fadr: IntPtr) :=
    fadr=IntPtr.Zero ? default(T) :
    Marshal.GetDelegateForFunctionPointer&<T>(fadr);
    
    public z_VDPAUInitNV_adr := GetFuncAdr('glVDPAUInitNV');
    public z_VDPAUInitNV_ovr_0 := GetFuncOrNil&<procedure(vdpDevice: IntPtr; getProcAddress: IntPtr)>(z_VDPAUInitNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VDPAUInitNV(vdpDevice: IntPtr; getProcAddress: IntPtr);
    begin
      z_VDPAUInitNV_ovr_0(vdpDevice, getProcAddress);
    end;
    
    public z_VDPAUFiniNV_adr := GetFuncAdr('glVDPAUFiniNV');
    public z_VDPAUFiniNV_ovr_0 := GetFuncOrNil&<procedure>(z_VDPAUFiniNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VDPAUFiniNV;
    begin
      z_VDPAUFiniNV_ovr_0;
    end;
    
    public z_VDPAURegisterVideoSurfaceNV_adr := GetFuncAdr('glVDPAURegisterVideoSurfaceNV');
    public z_VDPAURegisterVideoSurfaceNV_ovr_0 := GetFuncOrNil&<function(vdpSurface: IntPtr; target: DummyEnum; numTextureNames: Int32; var textureNames: UInt32): GLvdpauSurfaceNV>(z_VDPAURegisterVideoSurfaceNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function VDPAURegisterVideoSurfaceNV(vdpSurface: IntPtr; target: DummyEnum; numTextureNames: Int32; textureNames: array of UInt32): GLvdpauSurfaceNV;
    begin
      Result := z_VDPAURegisterVideoSurfaceNV_ovr_0(vdpSurface, target, numTextureNames, textureNames[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function VDPAURegisterVideoSurfaceNV(vdpSurface: IntPtr; target: DummyEnum; numTextureNames: Int32; var textureNames: UInt32): GLvdpauSurfaceNV;
    begin
      Result := z_VDPAURegisterVideoSurfaceNV_ovr_0(vdpSurface, target, numTextureNames, textureNames);
    end;
    public z_VDPAURegisterVideoSurfaceNV_ovr_2 := GetFuncOrNil&<function(vdpSurface: IntPtr; target: DummyEnum; numTextureNames: Int32; textureNames: IntPtr): GLvdpauSurfaceNV>(z_VDPAURegisterVideoSurfaceNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function VDPAURegisterVideoSurfaceNV(vdpSurface: IntPtr; target: DummyEnum; numTextureNames: Int32; textureNames: IntPtr): GLvdpauSurfaceNV;
    begin
      Result := z_VDPAURegisterVideoSurfaceNV_ovr_2(vdpSurface, target, numTextureNames, textureNames);
    end;
    
    public z_VDPAURegisterOutputSurfaceNV_adr := GetFuncAdr('glVDPAURegisterOutputSurfaceNV');
    public z_VDPAURegisterOutputSurfaceNV_ovr_0 := GetFuncOrNil&<function(vdpSurface: IntPtr; target: DummyEnum; numTextureNames: Int32; var textureNames: UInt32): GLvdpauSurfaceNV>(z_VDPAURegisterOutputSurfaceNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function VDPAURegisterOutputSurfaceNV(vdpSurface: IntPtr; target: DummyEnum; numTextureNames: Int32; textureNames: array of UInt32): GLvdpauSurfaceNV;
    begin
      Result := z_VDPAURegisterOutputSurfaceNV_ovr_0(vdpSurface, target, numTextureNames, textureNames[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function VDPAURegisterOutputSurfaceNV(vdpSurface: IntPtr; target: DummyEnum; numTextureNames: Int32; var textureNames: UInt32): GLvdpauSurfaceNV;
    begin
      Result := z_VDPAURegisterOutputSurfaceNV_ovr_0(vdpSurface, target, numTextureNames, textureNames);
    end;
    public z_VDPAURegisterOutputSurfaceNV_ovr_2 := GetFuncOrNil&<function(vdpSurface: IntPtr; target: DummyEnum; numTextureNames: Int32; textureNames: IntPtr): GLvdpauSurfaceNV>(z_VDPAURegisterOutputSurfaceNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function VDPAURegisterOutputSurfaceNV(vdpSurface: IntPtr; target: DummyEnum; numTextureNames: Int32; textureNames: IntPtr): GLvdpauSurfaceNV;
    begin
      Result := z_VDPAURegisterOutputSurfaceNV_ovr_2(vdpSurface, target, numTextureNames, textureNames);
    end;
    
    public z_VDPAUIsSurfaceNV_adr := GetFuncAdr('glVDPAUIsSurfaceNV');
    public z_VDPAUIsSurfaceNV_ovr_0 := GetFuncOrNil&<function(surface: GLvdpauSurfaceNV): boolean>(z_VDPAUIsSurfaceNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function VDPAUIsSurfaceNV(surface: GLvdpauSurfaceNV): boolean;
    begin
      Result := z_VDPAUIsSurfaceNV_ovr_0(surface);
    end;
    
    public z_VDPAUUnregisterSurfaceNV_adr := GetFuncAdr('glVDPAUUnregisterSurfaceNV');
    public z_VDPAUUnregisterSurfaceNV_ovr_0 := GetFuncOrNil&<procedure(surface: GLvdpauSurfaceNV)>(z_VDPAUUnregisterSurfaceNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VDPAUUnregisterSurfaceNV(surface: GLvdpauSurfaceNV);
    begin
      z_VDPAUUnregisterSurfaceNV_ovr_0(surface);
    end;
    
    public z_VDPAUGetSurfaceivNV_adr := GetFuncAdr('glVDPAUGetSurfaceivNV');
    public z_VDPAUGetSurfaceivNV_ovr_0 := GetFuncOrNil&<procedure(surface: GLvdpauSurfaceNV; pname: DummyEnum; count: Int32; var length: Int32; var values: Int32)>(z_VDPAUGetSurfaceivNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VDPAUGetSurfaceivNV(surface: GLvdpauSurfaceNV; pname: DummyEnum; count: Int32; length: array of Int32; values: array of Int32);
    begin
      z_VDPAUGetSurfaceivNV_ovr_0(surface, pname, count, length[0], values[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VDPAUGetSurfaceivNV(surface: GLvdpauSurfaceNV; pname: DummyEnum; count: Int32; length: array of Int32; var values: Int32);
    begin
      z_VDPAUGetSurfaceivNV_ovr_0(surface, pname, count, length[0], values);
    end;
    public z_VDPAUGetSurfaceivNV_ovr_2 := GetFuncOrNil&<procedure(surface: GLvdpauSurfaceNV; pname: DummyEnum; count: Int32; var length: Int32; values: IntPtr)>(z_VDPAUGetSurfaceivNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VDPAUGetSurfaceivNV(surface: GLvdpauSurfaceNV; pname: DummyEnum; count: Int32; length: array of Int32; values: IntPtr);
    begin
      z_VDPAUGetSurfaceivNV_ovr_2(surface, pname, count, length[0], values);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VDPAUGetSurfaceivNV(surface: GLvdpauSurfaceNV; pname: DummyEnum; count: Int32; var length: Int32; values: array of Int32);
    begin
      z_VDPAUGetSurfaceivNV_ovr_0(surface, pname, count, length, values[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VDPAUGetSurfaceivNV(surface: GLvdpauSurfaceNV; pname: DummyEnum; count: Int32; var length: Int32; var values: Int32);
    begin
      z_VDPAUGetSurfaceivNV_ovr_0(surface, pname, count, length, values);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VDPAUGetSurfaceivNV(surface: GLvdpauSurfaceNV; pname: DummyEnum; count: Int32; var length: Int32; values: IntPtr);
    begin
      z_VDPAUGetSurfaceivNV_ovr_2(surface, pname, count, length, values);
    end;
    public z_VDPAUGetSurfaceivNV_ovr_6 := GetFuncOrNil&<procedure(surface: GLvdpauSurfaceNV; pname: DummyEnum; count: Int32; length: IntPtr; var values: Int32)>(z_VDPAUGetSurfaceivNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VDPAUGetSurfaceivNV(surface: GLvdpauSurfaceNV; pname: DummyEnum; count: Int32; length: IntPtr; values: array of Int32);
    begin
      z_VDPAUGetSurfaceivNV_ovr_6(surface, pname, count, length, values[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VDPAUGetSurfaceivNV(surface: GLvdpauSurfaceNV; pname: DummyEnum; count: Int32; length: IntPtr; var values: Int32);
    begin
      z_VDPAUGetSurfaceivNV_ovr_6(surface, pname, count, length, values);
    end;
    public z_VDPAUGetSurfaceivNV_ovr_8 := GetFuncOrNil&<procedure(surface: GLvdpauSurfaceNV; pname: DummyEnum; count: Int32; length: IntPtr; values: IntPtr)>(z_VDPAUGetSurfaceivNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VDPAUGetSurfaceivNV(surface: GLvdpauSurfaceNV; pname: DummyEnum; count: Int32; length: IntPtr; values: IntPtr);
    begin
      z_VDPAUGetSurfaceivNV_ovr_8(surface, pname, count, length, values);
    end;
    
    public z_VDPAUSurfaceAccessNV_adr := GetFuncAdr('glVDPAUSurfaceAccessNV');
    public z_VDPAUSurfaceAccessNV_ovr_0 := GetFuncOrNil&<procedure(surface: GLvdpauSurfaceNV; access: DummyEnum)>(z_VDPAUSurfaceAccessNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VDPAUSurfaceAccessNV(surface: GLvdpauSurfaceNV; access: DummyEnum);
    begin
      z_VDPAUSurfaceAccessNV_ovr_0(surface, access);
    end;
    
    public z_VDPAUMapSurfacesNV_adr := GetFuncAdr('glVDPAUMapSurfacesNV');
    public z_VDPAUMapSurfacesNV_ovr_0 := GetFuncOrNil&<procedure(numSurfaces: Int32; var surfaces: GLvdpauSurfaceNV)>(z_VDPAUMapSurfacesNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VDPAUMapSurfacesNV(numSurfaces: Int32; surfaces: array of GLvdpauSurfaceNV);
    begin
      z_VDPAUMapSurfacesNV_ovr_0(numSurfaces, surfaces[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VDPAUMapSurfacesNV(numSurfaces: Int32; var surfaces: GLvdpauSurfaceNV);
    begin
      z_VDPAUMapSurfacesNV_ovr_0(numSurfaces, surfaces);
    end;
    public z_VDPAUMapSurfacesNV_ovr_2 := GetFuncOrNil&<procedure(numSurfaces: Int32; surfaces: IntPtr)>(z_VDPAUMapSurfacesNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VDPAUMapSurfacesNV(numSurfaces: Int32; surfaces: IntPtr);
    begin
      z_VDPAUMapSurfacesNV_ovr_2(numSurfaces, surfaces);
    end;
    
    public z_VDPAUUnmapSurfacesNV_adr := GetFuncAdr('glVDPAUUnmapSurfacesNV');
    public z_VDPAUUnmapSurfacesNV_ovr_0 := GetFuncOrNil&<procedure(numSurface: Int32; var surfaces: GLvdpauSurfaceNV)>(z_VDPAUUnmapSurfacesNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VDPAUUnmapSurfacesNV(numSurface: Int32; surfaces: array of GLvdpauSurfaceNV);
    begin
      z_VDPAUUnmapSurfacesNV_ovr_0(numSurface, surfaces[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VDPAUUnmapSurfacesNV(numSurface: Int32; var surfaces: GLvdpauSurfaceNV);
    begin
      z_VDPAUUnmapSurfacesNV_ovr_0(numSurface, surfaces);
    end;
    public z_VDPAUUnmapSurfacesNV_ovr_2 := GetFuncOrNil&<procedure(numSurface: Int32; surfaces: IntPtr)>(z_VDPAUUnmapSurfacesNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VDPAUUnmapSurfacesNV(numSurface: Int32; surfaces: IntPtr);
    begin
      z_VDPAUUnmapSurfacesNV_ovr_2(numSurface, surfaces);
    end;
    
  end;
  
  glVdpauInterop2NV = sealed class
    public static function GetFuncAdr([MarshalAs(UnmanagedType.LPStr)] lpszProc: string): IntPtr;
    external 'opengl32.dll' name 'wglGetProcAddress';
    public static function GetFuncOrNil<T>(fadr: IntPtr) :=
    fadr=IntPtr.Zero ? default(T) :
    Marshal.GetDelegateForFunctionPointer&<T>(fadr);
    
    public z_VDPAURegisterVideoSurfaceWithPictureStructureNV_adr := GetFuncAdr('glVDPAURegisterVideoSurfaceWithPictureStructureNV');
    public z_VDPAURegisterVideoSurfaceWithPictureStructureNV_ovr_0 := GetFuncOrNil&<function(vdpSurface: IntPtr; target: DummyEnum; numTextureNames: Int32; var textureNames: UInt32; isFrameStructure: boolean): GLvdpauSurfaceNV>(z_VDPAURegisterVideoSurfaceWithPictureStructureNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function VDPAURegisterVideoSurfaceWithPictureStructureNV(vdpSurface: IntPtr; target: DummyEnum; numTextureNames: Int32; textureNames: array of UInt32; isFrameStructure: boolean): GLvdpauSurfaceNV;
    begin
      Result := z_VDPAURegisterVideoSurfaceWithPictureStructureNV_ovr_0(vdpSurface, target, numTextureNames, textureNames[0], isFrameStructure);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function VDPAURegisterVideoSurfaceWithPictureStructureNV(vdpSurface: IntPtr; target: DummyEnum; numTextureNames: Int32; var textureNames: UInt32; isFrameStructure: boolean): GLvdpauSurfaceNV;
    begin
      Result := z_VDPAURegisterVideoSurfaceWithPictureStructureNV_ovr_0(vdpSurface, target, numTextureNames, textureNames, isFrameStructure);
    end;
    public z_VDPAURegisterVideoSurfaceWithPictureStructureNV_ovr_2 := GetFuncOrNil&<function(vdpSurface: IntPtr; target: DummyEnum; numTextureNames: Int32; textureNames: IntPtr; isFrameStructure: boolean): GLvdpauSurfaceNV>(z_VDPAURegisterVideoSurfaceWithPictureStructureNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function VDPAURegisterVideoSurfaceWithPictureStructureNV(vdpSurface: IntPtr; target: DummyEnum; numTextureNames: Int32; textureNames: IntPtr; isFrameStructure: boolean): GLvdpauSurfaceNV;
    begin
      Result := z_VDPAURegisterVideoSurfaceWithPictureStructureNV_ovr_2(vdpSurface, target, numTextureNames, textureNames, isFrameStructure);
    end;
    
  end;
  
  glVertexArrayRangeNV = sealed class
    public static function GetFuncAdr([MarshalAs(UnmanagedType.LPStr)] lpszProc: string): IntPtr;
    external 'opengl32.dll' name 'wglGetProcAddress';
    public static function GetFuncOrNil<T>(fadr: IntPtr) :=
    fadr=IntPtr.Zero ? default(T) :
    Marshal.GetDelegateForFunctionPointer&<T>(fadr);
    
    public z_FlushVertexArrayRangeNV_adr := GetFuncAdr('glFlushVertexArrayRangeNV');
    public z_FlushVertexArrayRangeNV_ovr_0 := GetFuncOrNil&<procedure>(z_FlushVertexArrayRangeNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure FlushVertexArrayRangeNV;
    begin
      z_FlushVertexArrayRangeNV_ovr_0;
    end;
    
    public z_VertexArrayRangeNV_adr := GetFuncAdr('glVertexArrayRangeNV');
    public z_VertexArrayRangeNV_ovr_0 := GetFuncOrNil&<procedure(length: Int32; pointer: IntPtr)>(z_VertexArrayRangeNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexArrayRangeNV(length: Int32; pointer: IntPtr);
    begin
      z_VertexArrayRangeNV_ovr_0(length, pointer);
    end;
    
  end;
  
  glVertexAttribInteger64bitNV = sealed class
    public static function GetFuncAdr([MarshalAs(UnmanagedType.LPStr)] lpszProc: string): IntPtr;
    external 'opengl32.dll' name 'wglGetProcAddress';
    public static function GetFuncOrNil<T>(fadr: IntPtr) :=
    fadr=IntPtr.Zero ? default(T) :
    Marshal.GetDelegateForFunctionPointer&<T>(fadr);
    
    public z_VertexAttribL1i64NV_adr := GetFuncAdr('glVertexAttribL1i64NV');
    public z_VertexAttribL1i64NV_ovr_0 := GetFuncOrNil&<procedure(index: UInt32; x: Int64)>(z_VertexAttribL1i64NV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttribL1i64NV(index: UInt32; x: Int64);
    begin
      z_VertexAttribL1i64NV_ovr_0(index, x);
    end;
    
    public z_VertexAttribL2i64NV_adr := GetFuncAdr('glVertexAttribL2i64NV');
    public z_VertexAttribL2i64NV_ovr_0 := GetFuncOrNil&<procedure(index: UInt32; x: Int64; y: Int64)>(z_VertexAttribL2i64NV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttribL2i64NV(index: UInt32; x: Int64; y: Int64);
    begin
      z_VertexAttribL2i64NV_ovr_0(index, x, y);
    end;
    
    public z_VertexAttribL3i64NV_adr := GetFuncAdr('glVertexAttribL3i64NV');
    public z_VertexAttribL3i64NV_ovr_0 := GetFuncOrNil&<procedure(index: UInt32; x: Int64; y: Int64; z: Int64)>(z_VertexAttribL3i64NV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttribL3i64NV(index: UInt32; x: Int64; y: Int64; z: Int64);
    begin
      z_VertexAttribL3i64NV_ovr_0(index, x, y, z);
    end;
    
    public z_VertexAttribL4i64NV_adr := GetFuncAdr('glVertexAttribL4i64NV');
    public z_VertexAttribL4i64NV_ovr_0 := GetFuncOrNil&<procedure(index: UInt32; x: Int64; y: Int64; z: Int64; w: Int64)>(z_VertexAttribL4i64NV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttribL4i64NV(index: UInt32; x: Int64; y: Int64; z: Int64; w: Int64);
    begin
      z_VertexAttribL4i64NV_ovr_0(index, x, y, z, w);
    end;
    
    public z_VertexAttribL1i64vNV_adr := GetFuncAdr('glVertexAttribL1i64vNV');
    public z_VertexAttribL1i64vNV_ovr_0 := GetFuncOrNil&<procedure(index: UInt32; var v: Int64)>(z_VertexAttribL1i64vNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttribL1i64vNV(index: UInt32; v: array of Int64);
    begin
      z_VertexAttribL1i64vNV_ovr_0(index, v[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttribL1i64vNV(index: UInt32; var v: Int64);
    begin
      z_VertexAttribL1i64vNV_ovr_0(index, v);
    end;
    public z_VertexAttribL1i64vNV_ovr_2 := GetFuncOrNil&<procedure(index: UInt32; v: IntPtr)>(z_VertexAttribL1i64vNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttribL1i64vNV(index: UInt32; v: IntPtr);
    begin
      z_VertexAttribL1i64vNV_ovr_2(index, v);
    end;
    
    public z_VertexAttribL2i64vNV_adr := GetFuncAdr('glVertexAttribL2i64vNV');
    public z_VertexAttribL2i64vNV_ovr_0 := GetFuncOrNil&<procedure(index: UInt32; var v: Int64)>(z_VertexAttribL2i64vNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttribL2i64vNV(index: UInt32; v: array of Int64);
    begin
      z_VertexAttribL2i64vNV_ovr_0(index, v[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttribL2i64vNV(index: UInt32; var v: Int64);
    begin
      z_VertexAttribL2i64vNV_ovr_0(index, v);
    end;
    public z_VertexAttribL2i64vNV_ovr_2 := GetFuncOrNil&<procedure(index: UInt32; v: IntPtr)>(z_VertexAttribL2i64vNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttribL2i64vNV(index: UInt32; v: IntPtr);
    begin
      z_VertexAttribL2i64vNV_ovr_2(index, v);
    end;
    
    public z_VertexAttribL3i64vNV_adr := GetFuncAdr('glVertexAttribL3i64vNV');
    public z_VertexAttribL3i64vNV_ovr_0 := GetFuncOrNil&<procedure(index: UInt32; var v: Int64)>(z_VertexAttribL3i64vNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttribL3i64vNV(index: UInt32; v: array of Int64);
    begin
      z_VertexAttribL3i64vNV_ovr_0(index, v[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttribL3i64vNV(index: UInt32; var v: Int64);
    begin
      z_VertexAttribL3i64vNV_ovr_0(index, v);
    end;
    public z_VertexAttribL3i64vNV_ovr_2 := GetFuncOrNil&<procedure(index: UInt32; v: IntPtr)>(z_VertexAttribL3i64vNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttribL3i64vNV(index: UInt32; v: IntPtr);
    begin
      z_VertexAttribL3i64vNV_ovr_2(index, v);
    end;
    
    public z_VertexAttribL4i64vNV_adr := GetFuncAdr('glVertexAttribL4i64vNV');
    public z_VertexAttribL4i64vNV_ovr_0 := GetFuncOrNil&<procedure(index: UInt32; var v: Int64)>(z_VertexAttribL4i64vNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttribL4i64vNV(index: UInt32; v: array of Int64);
    begin
      z_VertexAttribL4i64vNV_ovr_0(index, v[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttribL4i64vNV(index: UInt32; var v: Int64);
    begin
      z_VertexAttribL4i64vNV_ovr_0(index, v);
    end;
    public z_VertexAttribL4i64vNV_ovr_2 := GetFuncOrNil&<procedure(index: UInt32; v: IntPtr)>(z_VertexAttribL4i64vNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttribL4i64vNV(index: UInt32; v: IntPtr);
    begin
      z_VertexAttribL4i64vNV_ovr_2(index, v);
    end;
    
    public z_VertexAttribL1ui64NV_adr := GetFuncAdr('glVertexAttribL1ui64NV');
    public z_VertexAttribL1ui64NV_ovr_0 := GetFuncOrNil&<procedure(index: UInt32; x: UInt64)>(z_VertexAttribL1ui64NV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttribL1ui64NV(index: UInt32; x: UInt64);
    begin
      z_VertexAttribL1ui64NV_ovr_0(index, x);
    end;
    
    public z_VertexAttribL2ui64NV_adr := GetFuncAdr('glVertexAttribL2ui64NV');
    public z_VertexAttribL2ui64NV_ovr_0 := GetFuncOrNil&<procedure(index: UInt32; x: UInt64; y: UInt64)>(z_VertexAttribL2ui64NV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttribL2ui64NV(index: UInt32; x: UInt64; y: UInt64);
    begin
      z_VertexAttribL2ui64NV_ovr_0(index, x, y);
    end;
    
    public z_VertexAttribL3ui64NV_adr := GetFuncAdr('glVertexAttribL3ui64NV');
    public z_VertexAttribL3ui64NV_ovr_0 := GetFuncOrNil&<procedure(index: UInt32; x: UInt64; y: UInt64; z: UInt64)>(z_VertexAttribL3ui64NV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttribL3ui64NV(index: UInt32; x: UInt64; y: UInt64; z: UInt64);
    begin
      z_VertexAttribL3ui64NV_ovr_0(index, x, y, z);
    end;
    
    public z_VertexAttribL4ui64NV_adr := GetFuncAdr('glVertexAttribL4ui64NV');
    public z_VertexAttribL4ui64NV_ovr_0 := GetFuncOrNil&<procedure(index: UInt32; x: UInt64; y: UInt64; z: UInt64; w: UInt64)>(z_VertexAttribL4ui64NV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttribL4ui64NV(index: UInt32; x: UInt64; y: UInt64; z: UInt64; w: UInt64);
    begin
      z_VertexAttribL4ui64NV_ovr_0(index, x, y, z, w);
    end;
    
    public z_VertexAttribL1ui64vNV_adr := GetFuncAdr('glVertexAttribL1ui64vNV');
    public z_VertexAttribL1ui64vNV_ovr_0 := GetFuncOrNil&<procedure(index: UInt32; var v: UInt64)>(z_VertexAttribL1ui64vNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttribL1ui64vNV(index: UInt32; v: array of UInt64);
    begin
      z_VertexAttribL1ui64vNV_ovr_0(index, v[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttribL1ui64vNV(index: UInt32; var v: UInt64);
    begin
      z_VertexAttribL1ui64vNV_ovr_0(index, v);
    end;
    public z_VertexAttribL1ui64vNV_ovr_2 := GetFuncOrNil&<procedure(index: UInt32; v: IntPtr)>(z_VertexAttribL1ui64vNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttribL1ui64vNV(index: UInt32; v: IntPtr);
    begin
      z_VertexAttribL1ui64vNV_ovr_2(index, v);
    end;
    
    public z_VertexAttribL2ui64vNV_adr := GetFuncAdr('glVertexAttribL2ui64vNV');
    public z_VertexAttribL2ui64vNV_ovr_0 := GetFuncOrNil&<procedure(index: UInt32; var v: UInt64)>(z_VertexAttribL2ui64vNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttribL2ui64vNV(index: UInt32; v: array of UInt64);
    begin
      z_VertexAttribL2ui64vNV_ovr_0(index, v[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttribL2ui64vNV(index: UInt32; var v: UInt64);
    begin
      z_VertexAttribL2ui64vNV_ovr_0(index, v);
    end;
    public z_VertexAttribL2ui64vNV_ovr_2 := GetFuncOrNil&<procedure(index: UInt32; v: IntPtr)>(z_VertexAttribL2ui64vNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttribL2ui64vNV(index: UInt32; v: IntPtr);
    begin
      z_VertexAttribL2ui64vNV_ovr_2(index, v);
    end;
    
    public z_VertexAttribL3ui64vNV_adr := GetFuncAdr('glVertexAttribL3ui64vNV');
    public z_VertexAttribL3ui64vNV_ovr_0 := GetFuncOrNil&<procedure(index: UInt32; var v: UInt64)>(z_VertexAttribL3ui64vNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttribL3ui64vNV(index: UInt32; v: array of UInt64);
    begin
      z_VertexAttribL3ui64vNV_ovr_0(index, v[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttribL3ui64vNV(index: UInt32; var v: UInt64);
    begin
      z_VertexAttribL3ui64vNV_ovr_0(index, v);
    end;
    public z_VertexAttribL3ui64vNV_ovr_2 := GetFuncOrNil&<procedure(index: UInt32; v: IntPtr)>(z_VertexAttribL3ui64vNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttribL3ui64vNV(index: UInt32; v: IntPtr);
    begin
      z_VertexAttribL3ui64vNV_ovr_2(index, v);
    end;
    
    public z_VertexAttribL4ui64vNV_adr := GetFuncAdr('glVertexAttribL4ui64vNV');
    public z_VertexAttribL4ui64vNV_ovr_0 := GetFuncOrNil&<procedure(index: UInt32; var v: UInt64)>(z_VertexAttribL4ui64vNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttribL4ui64vNV(index: UInt32; v: array of UInt64);
    begin
      z_VertexAttribL4ui64vNV_ovr_0(index, v[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttribL4ui64vNV(index: UInt32; var v: UInt64);
    begin
      z_VertexAttribL4ui64vNV_ovr_0(index, v);
    end;
    public z_VertexAttribL4ui64vNV_ovr_2 := GetFuncOrNil&<procedure(index: UInt32; v: IntPtr)>(z_VertexAttribL4ui64vNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttribL4ui64vNV(index: UInt32; v: IntPtr);
    begin
      z_VertexAttribL4ui64vNV_ovr_2(index, v);
    end;
    
    public z_GetVertexAttribLi64vNV_adr := GetFuncAdr('glGetVertexAttribLi64vNV');
    public z_GetVertexAttribLi64vNV_ovr_0 := GetFuncOrNil&<procedure(index: UInt32; pname: VertexAttribEnum; var &params: Int64)>(z_GetVertexAttribLi64vNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetVertexAttribLi64vNV(index: UInt32; pname: VertexAttribEnum; &params: array of Int64);
    begin
      z_GetVertexAttribLi64vNV_ovr_0(index, pname, &params[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetVertexAttribLi64vNV(index: UInt32; pname: VertexAttribEnum; var &params: Int64);
    begin
      z_GetVertexAttribLi64vNV_ovr_0(index, pname, &params);
    end;
    public z_GetVertexAttribLi64vNV_ovr_2 := GetFuncOrNil&<procedure(index: UInt32; pname: VertexAttribEnum; &params: IntPtr)>(z_GetVertexAttribLi64vNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetVertexAttribLi64vNV(index: UInt32; pname: VertexAttribEnum; &params: IntPtr);
    begin
      z_GetVertexAttribLi64vNV_ovr_2(index, pname, &params);
    end;
    
    public z_GetVertexAttribLui64vNV_adr := GetFuncAdr('glGetVertexAttribLui64vNV');
    public z_GetVertexAttribLui64vNV_ovr_0 := GetFuncOrNil&<procedure(index: UInt32; pname: VertexAttribEnum; var &params: UInt64)>(z_GetVertexAttribLui64vNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetVertexAttribLui64vNV(index: UInt32; pname: VertexAttribEnum; &params: array of UInt64);
    begin
      z_GetVertexAttribLui64vNV_ovr_0(index, pname, &params[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetVertexAttribLui64vNV(index: UInt32; pname: VertexAttribEnum; var &params: UInt64);
    begin
      z_GetVertexAttribLui64vNV_ovr_0(index, pname, &params);
    end;
    public z_GetVertexAttribLui64vNV_ovr_2 := GetFuncOrNil&<procedure(index: UInt32; pname: VertexAttribEnum; &params: IntPtr)>(z_GetVertexAttribLui64vNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetVertexAttribLui64vNV(index: UInt32; pname: VertexAttribEnum; &params: IntPtr);
    begin
      z_GetVertexAttribLui64vNV_ovr_2(index, pname, &params);
    end;
    
    public z_VertexAttribLFormatNV_adr := GetFuncAdr('glVertexAttribLFormatNV');
    public z_VertexAttribLFormatNV_ovr_0 := GetFuncOrNil&<procedure(index: UInt32; size: Int32; &type: VertexAttribLType; stride: Int32)>(z_VertexAttribLFormatNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttribLFormatNV(index: UInt32; size: Int32; &type: VertexAttribLType; stride: Int32);
    begin
      z_VertexAttribLFormatNV_ovr_0(index, size, &type, stride);
    end;
    
  end;
  
  glVertexBufferUnifiedMemoryNV = sealed class
    public static function GetFuncAdr([MarshalAs(UnmanagedType.LPStr)] lpszProc: string): IntPtr;
    external 'opengl32.dll' name 'wglGetProcAddress';
    public static function GetFuncOrNil<T>(fadr: IntPtr) :=
    fadr=IntPtr.Zero ? default(T) :
    Marshal.GetDelegateForFunctionPointer&<T>(fadr);
    
    public z_BufferAddressRangeNV_adr := GetFuncAdr('glBufferAddressRangeNV');
    public z_BufferAddressRangeNV_ovr_0 := GetFuncOrNil&<procedure(pname: DummyEnum; index: UInt32; address: UInt64; length: IntPtr)>(z_BufferAddressRangeNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure BufferAddressRangeNV(pname: DummyEnum; index: UInt32; address: UInt64; length: IntPtr);
    begin
      z_BufferAddressRangeNV_ovr_0(pname, index, address, length);
    end;
    
    public z_VertexFormatNV_adr := GetFuncAdr('glVertexFormatNV');
    public z_VertexFormatNV_ovr_0 := GetFuncOrNil&<procedure(size: Int32; &type: VertexPointerType; stride: Int32)>(z_VertexFormatNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexFormatNV(size: Int32; &type: VertexPointerType; stride: Int32);
    begin
      z_VertexFormatNV_ovr_0(size, &type, stride);
    end;
    
    public z_NormalFormatNV_adr := GetFuncAdr('glNormalFormatNV');
    public z_NormalFormatNV_ovr_0 := GetFuncOrNil&<procedure(&type: DummyEnum; stride: Int32)>(z_NormalFormatNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure NormalFormatNV(&type: DummyEnum; stride: Int32);
    begin
      z_NormalFormatNV_ovr_0(&type, stride);
    end;
    
    public z_ColorFormatNV_adr := GetFuncAdr('glColorFormatNV');
    public z_ColorFormatNV_ovr_0 := GetFuncOrNil&<procedure(size: Int32; &type: DummyEnum; stride: Int32)>(z_ColorFormatNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ColorFormatNV(size: Int32; &type: DummyEnum; stride: Int32);
    begin
      z_ColorFormatNV_ovr_0(size, &type, stride);
    end;
    
    public z_IndexFormatNV_adr := GetFuncAdr('glIndexFormatNV');
    public z_IndexFormatNV_ovr_0 := GetFuncOrNil&<procedure(&type: DummyEnum; stride: Int32)>(z_IndexFormatNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure IndexFormatNV(&type: DummyEnum; stride: Int32);
    begin
      z_IndexFormatNV_ovr_0(&type, stride);
    end;
    
    public z_TexCoordFormatNV_adr := GetFuncAdr('glTexCoordFormatNV');
    public z_TexCoordFormatNV_ovr_0 := GetFuncOrNil&<procedure(size: Int32; &type: DummyEnum; stride: Int32)>(z_TexCoordFormatNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TexCoordFormatNV(size: Int32; &type: DummyEnum; stride: Int32);
    begin
      z_TexCoordFormatNV_ovr_0(size, &type, stride);
    end;
    
    public z_EdgeFlagFormatNV_adr := GetFuncAdr('glEdgeFlagFormatNV');
    public z_EdgeFlagFormatNV_ovr_0 := GetFuncOrNil&<procedure(stride: Int32)>(z_EdgeFlagFormatNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure EdgeFlagFormatNV(stride: Int32);
    begin
      z_EdgeFlagFormatNV_ovr_0(stride);
    end;
    
    public z_SecondaryColorFormatNV_adr := GetFuncAdr('glSecondaryColorFormatNV');
    public z_SecondaryColorFormatNV_ovr_0 := GetFuncOrNil&<procedure(size: Int32; &type: ColorPointerType; stride: Int32)>(z_SecondaryColorFormatNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure SecondaryColorFormatNV(size: Int32; &type: ColorPointerType; stride: Int32);
    begin
      z_SecondaryColorFormatNV_ovr_0(size, &type, stride);
    end;
    
    public z_FogCoordFormatNV_adr := GetFuncAdr('glFogCoordFormatNV');
    public z_FogCoordFormatNV_ovr_0 := GetFuncOrNil&<procedure(&type: DummyEnum; stride: Int32)>(z_FogCoordFormatNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure FogCoordFormatNV(&type: DummyEnum; stride: Int32);
    begin
      z_FogCoordFormatNV_ovr_0(&type, stride);
    end;
    
    public z_VertexAttribFormatNV_adr := GetFuncAdr('glVertexAttribFormatNV');
    public z_VertexAttribFormatNV_ovr_0 := GetFuncOrNil&<procedure(index: UInt32; size: Int32; &type: VertexAttribType; normalized: boolean; stride: Int32)>(z_VertexAttribFormatNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttribFormatNV(index: UInt32; size: Int32; &type: VertexAttribType; normalized: boolean; stride: Int32);
    begin
      z_VertexAttribFormatNV_ovr_0(index, size, &type, normalized, stride);
    end;
    
    public z_VertexAttribIFormatNV_adr := GetFuncAdr('glVertexAttribIFormatNV');
    public z_VertexAttribIFormatNV_ovr_0 := GetFuncOrNil&<procedure(index: UInt32; size: Int32; &type: VertexAttribIType; stride: Int32)>(z_VertexAttribIFormatNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttribIFormatNV(index: UInt32; size: Int32; &type: VertexAttribIType; stride: Int32);
    begin
      z_VertexAttribIFormatNV_ovr_0(index, size, &type, stride);
    end;
    
    public z_GetIntegerui64i_vNV_adr := GetFuncAdr('glGetIntegerui64i_vNV');
    public z_GetIntegerui64i_vNV_ovr_0 := GetFuncOrNil&<procedure(value: DummyEnum; index: UInt32; var result: UInt64)>(z_GetIntegerui64i_vNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetIntegerui64i_vNV(value: DummyEnum; index: UInt32; result: array of UInt64);
    begin
      z_GetIntegerui64i_vNV_ovr_0(value, index, result[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetIntegerui64i_vNV(value: DummyEnum; index: UInt32; var result: UInt64);
    begin
      z_GetIntegerui64i_vNV_ovr_0(value, index, result);
    end;
    public z_GetIntegerui64i_vNV_ovr_2 := GetFuncOrNil&<procedure(value: DummyEnum; index: UInt32; result: IntPtr)>(z_GetIntegerui64i_vNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetIntegerui64i_vNV(value: DummyEnum; index: UInt32; result: IntPtr);
    begin
      z_GetIntegerui64i_vNV_ovr_2(value, index, result);
    end;
    
  end;
  
  glVertexProgramNV = sealed class
    public static function GetFuncAdr([MarshalAs(UnmanagedType.LPStr)] lpszProc: string): IntPtr;
    external 'opengl32.dll' name 'wglGetProcAddress';
    public static function GetFuncOrNil<T>(fadr: IntPtr) :=
    fadr=IntPtr.Zero ? default(T) :
    Marshal.GetDelegateForFunctionPointer&<T>(fadr);
    
    public z_AreProgramsResidentNV_adr := GetFuncAdr('glAreProgramsResidentNV');
    public z_AreProgramsResidentNV_ovr_0 := GetFuncOrNil&<function(n: Int32; var programs: UInt32; var residences: boolean): boolean>(z_AreProgramsResidentNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function AreProgramsResidentNV(n: Int32; programs: array of UInt32; residences: array of boolean): boolean;
    begin
      Result := z_AreProgramsResidentNV_ovr_0(n, programs[0], residences[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function AreProgramsResidentNV(n: Int32; programs: array of UInt32; var residences: boolean): boolean;
    begin
      Result := z_AreProgramsResidentNV_ovr_0(n, programs[0], residences);
    end;
    public z_AreProgramsResidentNV_ovr_2 := GetFuncOrNil&<function(n: Int32; var programs: UInt32; residences: IntPtr): boolean>(z_AreProgramsResidentNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function AreProgramsResidentNV(n: Int32; programs: array of UInt32; residences: IntPtr): boolean;
    begin
      Result := z_AreProgramsResidentNV_ovr_2(n, programs[0], residences);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function AreProgramsResidentNV(n: Int32; var programs: UInt32; residences: array of boolean): boolean;
    begin
      Result := z_AreProgramsResidentNV_ovr_0(n, programs, residences[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function AreProgramsResidentNV(n: Int32; var programs: UInt32; var residences: boolean): boolean;
    begin
      Result := z_AreProgramsResidentNV_ovr_0(n, programs, residences);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function AreProgramsResidentNV(n: Int32; var programs: UInt32; residences: IntPtr): boolean;
    begin
      Result := z_AreProgramsResidentNV_ovr_2(n, programs, residences);
    end;
    public z_AreProgramsResidentNV_ovr_6 := GetFuncOrNil&<function(n: Int32; programs: IntPtr; var residences: boolean): boolean>(z_AreProgramsResidentNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function AreProgramsResidentNV(n: Int32; programs: IntPtr; residences: array of boolean): boolean;
    begin
      Result := z_AreProgramsResidentNV_ovr_6(n, programs, residences[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function AreProgramsResidentNV(n: Int32; programs: IntPtr; var residences: boolean): boolean;
    begin
      Result := z_AreProgramsResidentNV_ovr_6(n, programs, residences);
    end;
    public z_AreProgramsResidentNV_ovr_8 := GetFuncOrNil&<function(n: Int32; programs: IntPtr; residences: IntPtr): boolean>(z_AreProgramsResidentNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function AreProgramsResidentNV(n: Int32; programs: IntPtr; residences: IntPtr): boolean;
    begin
      Result := z_AreProgramsResidentNV_ovr_8(n, programs, residences);
    end;
    
    public z_BindProgramNV_adr := GetFuncAdr('glBindProgramNV');
    public z_BindProgramNV_ovr_0 := GetFuncOrNil&<procedure(target: VertexAttribEnumNV; id: UInt32)>(z_BindProgramNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure BindProgramNV(target: VertexAttribEnumNV; id: UInt32);
    begin
      z_BindProgramNV_ovr_0(target, id);
    end;
    
    public z_DeleteProgramsNV_adr := GetFuncAdr('glDeleteProgramsNV');
    public z_DeleteProgramsNV_ovr_0 := GetFuncOrNil&<procedure(n: Int32; var programs: UInt32)>(z_DeleteProgramsNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure DeleteProgramsNV(n: Int32; programs: array of UInt32);
    begin
      z_DeleteProgramsNV_ovr_0(n, programs[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure DeleteProgramsNV(n: Int32; var programs: UInt32);
    begin
      z_DeleteProgramsNV_ovr_0(n, programs);
    end;
    public z_DeleteProgramsNV_ovr_2 := GetFuncOrNil&<procedure(n: Int32; programs: IntPtr)>(z_DeleteProgramsNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure DeleteProgramsNV(n: Int32; programs: IntPtr);
    begin
      z_DeleteProgramsNV_ovr_2(n, programs);
    end;
    
    public z_ExecuteProgramNV_adr := GetFuncAdr('glExecuteProgramNV');
    public z_ExecuteProgramNV_ovr_0 := GetFuncOrNil&<procedure(target: VertexAttribEnumNV; id: UInt32; var &params: single)>(z_ExecuteProgramNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ExecuteProgramNV(target: VertexAttribEnumNV; id: UInt32; &params: array of single);
    begin
      z_ExecuteProgramNV_ovr_0(target, id, &params[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ExecuteProgramNV(target: VertexAttribEnumNV; id: UInt32; var &params: single);
    begin
      z_ExecuteProgramNV_ovr_0(target, id, &params);
    end;
    public z_ExecuteProgramNV_ovr_2 := GetFuncOrNil&<procedure(target: VertexAttribEnumNV; id: UInt32; &params: IntPtr)>(z_ExecuteProgramNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ExecuteProgramNV(target: VertexAttribEnumNV; id: UInt32; &params: IntPtr);
    begin
      z_ExecuteProgramNV_ovr_2(target, id, &params);
    end;
    
    public z_GenProgramsNV_adr := GetFuncAdr('glGenProgramsNV');
    public z_GenProgramsNV_ovr_0 := GetFuncOrNil&<procedure(n: Int32; var programs: UInt32)>(z_GenProgramsNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GenProgramsNV(n: Int32; programs: array of UInt32);
    begin
      z_GenProgramsNV_ovr_0(n, programs[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GenProgramsNV(n: Int32; var programs: UInt32);
    begin
      z_GenProgramsNV_ovr_0(n, programs);
    end;
    public z_GenProgramsNV_ovr_2 := GetFuncOrNil&<procedure(n: Int32; programs: IntPtr)>(z_GenProgramsNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GenProgramsNV(n: Int32; programs: IntPtr);
    begin
      z_GenProgramsNV_ovr_2(n, programs);
    end;
    
    public z_GetProgramParameterdvNV_adr := GetFuncAdr('glGetProgramParameterdvNV');
    public z_GetProgramParameterdvNV_ovr_0 := GetFuncOrNil&<procedure(target: VertexAttribEnumNV; index: UInt32; pname: VertexAttribEnumNV; var &params: real)>(z_GetProgramParameterdvNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetProgramParameterdvNV(target: VertexAttribEnumNV; index: UInt32; pname: VertexAttribEnumNV; &params: array of real);
    begin
      z_GetProgramParameterdvNV_ovr_0(target, index, pname, &params[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetProgramParameterdvNV(target: VertexAttribEnumNV; index: UInt32; pname: VertexAttribEnumNV; var &params: real);
    begin
      z_GetProgramParameterdvNV_ovr_0(target, index, pname, &params);
    end;
    public z_GetProgramParameterdvNV_ovr_2 := GetFuncOrNil&<procedure(target: VertexAttribEnumNV; index: UInt32; pname: VertexAttribEnumNV; &params: IntPtr)>(z_GetProgramParameterdvNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetProgramParameterdvNV(target: VertexAttribEnumNV; index: UInt32; pname: VertexAttribEnumNV; &params: IntPtr);
    begin
      z_GetProgramParameterdvNV_ovr_2(target, index, pname, &params);
    end;
    
    public z_GetProgramParameterfvNV_adr := GetFuncAdr('glGetProgramParameterfvNV');
    public z_GetProgramParameterfvNV_ovr_0 := GetFuncOrNil&<procedure(target: VertexAttribEnumNV; index: UInt32; pname: VertexAttribEnumNV; var &params: single)>(z_GetProgramParameterfvNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetProgramParameterfvNV(target: VertexAttribEnumNV; index: UInt32; pname: VertexAttribEnumNV; &params: array of single);
    begin
      z_GetProgramParameterfvNV_ovr_0(target, index, pname, &params[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetProgramParameterfvNV(target: VertexAttribEnumNV; index: UInt32; pname: VertexAttribEnumNV; var &params: single);
    begin
      z_GetProgramParameterfvNV_ovr_0(target, index, pname, &params);
    end;
    public z_GetProgramParameterfvNV_ovr_2 := GetFuncOrNil&<procedure(target: VertexAttribEnumNV; index: UInt32; pname: VertexAttribEnumNV; &params: IntPtr)>(z_GetProgramParameterfvNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetProgramParameterfvNV(target: VertexAttribEnumNV; index: UInt32; pname: VertexAttribEnumNV; &params: IntPtr);
    begin
      z_GetProgramParameterfvNV_ovr_2(target, index, pname, &params);
    end;
    
    public z_GetProgramivNV_adr := GetFuncAdr('glGetProgramivNV');
    public z_GetProgramivNV_ovr_0 := GetFuncOrNil&<procedure(id: UInt32; pname: VertexAttribEnumNV; var &params: Int32)>(z_GetProgramivNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetProgramivNV(id: UInt32; pname: VertexAttribEnumNV; &params: array of Int32);
    begin
      z_GetProgramivNV_ovr_0(id, pname, &params[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetProgramivNV(id: UInt32; pname: VertexAttribEnumNV; var &params: Int32);
    begin
      z_GetProgramivNV_ovr_0(id, pname, &params);
    end;
    public z_GetProgramivNV_ovr_2 := GetFuncOrNil&<procedure(id: UInt32; pname: VertexAttribEnumNV; &params: IntPtr)>(z_GetProgramivNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetProgramivNV(id: UInt32; pname: VertexAttribEnumNV; &params: IntPtr);
    begin
      z_GetProgramivNV_ovr_2(id, pname, &params);
    end;
    
    public z_GetProgramStringNV_adr := GetFuncAdr('glGetProgramStringNV');
    public z_GetProgramStringNV_ovr_0 := GetFuncOrNil&<procedure(id: UInt32; pname: VertexAttribEnumNV; var &program: Byte)>(z_GetProgramStringNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetProgramStringNV(id: UInt32; pname: VertexAttribEnumNV; &program: array of Byte);
    begin
      z_GetProgramStringNV_ovr_0(id, pname, &program[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetProgramStringNV(id: UInt32; pname: VertexAttribEnumNV; var &program: Byte);
    begin
      z_GetProgramStringNV_ovr_0(id, pname, &program);
    end;
    public z_GetProgramStringNV_ovr_2 := GetFuncOrNil&<procedure(id: UInt32; pname: VertexAttribEnumNV; &program: IntPtr)>(z_GetProgramStringNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetProgramStringNV(id: UInt32; pname: VertexAttribEnumNV; &program: IntPtr);
    begin
      z_GetProgramStringNV_ovr_2(id, pname, &program);
    end;
    
    public z_GetTrackMatrixivNV_adr := GetFuncAdr('glGetTrackMatrixivNV');
    public z_GetTrackMatrixivNV_ovr_0 := GetFuncOrNil&<procedure(target: VertexAttribEnumNV; address: UInt32; pname: VertexAttribEnumNV; var &params: Int32)>(z_GetTrackMatrixivNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetTrackMatrixivNV(target: VertexAttribEnumNV; address: UInt32; pname: VertexAttribEnumNV; &params: array of Int32);
    begin
      z_GetTrackMatrixivNV_ovr_0(target, address, pname, &params[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetTrackMatrixivNV(target: VertexAttribEnumNV; address: UInt32; pname: VertexAttribEnumNV; var &params: Int32);
    begin
      z_GetTrackMatrixivNV_ovr_0(target, address, pname, &params);
    end;
    public z_GetTrackMatrixivNV_ovr_2 := GetFuncOrNil&<procedure(target: VertexAttribEnumNV; address: UInt32; pname: VertexAttribEnumNV; &params: IntPtr)>(z_GetTrackMatrixivNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetTrackMatrixivNV(target: VertexAttribEnumNV; address: UInt32; pname: VertexAttribEnumNV; &params: IntPtr);
    begin
      z_GetTrackMatrixivNV_ovr_2(target, address, pname, &params);
    end;
    
    public z_GetVertexAttribdvNV_adr := GetFuncAdr('glGetVertexAttribdvNV');
    public z_GetVertexAttribdvNV_ovr_0 := GetFuncOrNil&<procedure(index: UInt32; pname: VertexAttribEnumNV; var &params: real)>(z_GetVertexAttribdvNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetVertexAttribdvNV(index: UInt32; pname: VertexAttribEnumNV; &params: array of real);
    begin
      z_GetVertexAttribdvNV_ovr_0(index, pname, &params[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetVertexAttribdvNV(index: UInt32; pname: VertexAttribEnumNV; var &params: real);
    begin
      z_GetVertexAttribdvNV_ovr_0(index, pname, &params);
    end;
    public z_GetVertexAttribdvNV_ovr_2 := GetFuncOrNil&<procedure(index: UInt32; pname: VertexAttribEnumNV; &params: IntPtr)>(z_GetVertexAttribdvNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetVertexAttribdvNV(index: UInt32; pname: VertexAttribEnumNV; &params: IntPtr);
    begin
      z_GetVertexAttribdvNV_ovr_2(index, pname, &params);
    end;
    
    public z_GetVertexAttribfvNV_adr := GetFuncAdr('glGetVertexAttribfvNV');
    public z_GetVertexAttribfvNV_ovr_0 := GetFuncOrNil&<procedure(index: UInt32; pname: VertexAttribEnumNV; var &params: single)>(z_GetVertexAttribfvNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetVertexAttribfvNV(index: UInt32; pname: VertexAttribEnumNV; &params: array of single);
    begin
      z_GetVertexAttribfvNV_ovr_0(index, pname, &params[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetVertexAttribfvNV(index: UInt32; pname: VertexAttribEnumNV; var &params: single);
    begin
      z_GetVertexAttribfvNV_ovr_0(index, pname, &params);
    end;
    public z_GetVertexAttribfvNV_ovr_2 := GetFuncOrNil&<procedure(index: UInt32; pname: VertexAttribEnumNV; &params: IntPtr)>(z_GetVertexAttribfvNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetVertexAttribfvNV(index: UInt32; pname: VertexAttribEnumNV; &params: IntPtr);
    begin
      z_GetVertexAttribfvNV_ovr_2(index, pname, &params);
    end;
    
    public z_GetVertexAttribivNV_adr := GetFuncAdr('glGetVertexAttribivNV');
    public z_GetVertexAttribivNV_ovr_0 := GetFuncOrNil&<procedure(index: UInt32; pname: VertexAttribEnumNV; var &params: Int32)>(z_GetVertexAttribivNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetVertexAttribivNV(index: UInt32; pname: VertexAttribEnumNV; &params: array of Int32);
    begin
      z_GetVertexAttribivNV_ovr_0(index, pname, &params[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetVertexAttribivNV(index: UInt32; pname: VertexAttribEnumNV; var &params: Int32);
    begin
      z_GetVertexAttribivNV_ovr_0(index, pname, &params);
    end;
    public z_GetVertexAttribivNV_ovr_2 := GetFuncOrNil&<procedure(index: UInt32; pname: VertexAttribEnumNV; &params: IntPtr)>(z_GetVertexAttribivNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetVertexAttribivNV(index: UInt32; pname: VertexAttribEnumNV; &params: IntPtr);
    begin
      z_GetVertexAttribivNV_ovr_2(index, pname, &params);
    end;
    
    public z_GetVertexAttribPointervNV_adr := GetFuncAdr('glGetVertexAttribPointervNV');
    public z_GetVertexAttribPointervNV_ovr_0 := GetFuncOrNil&<procedure(index: UInt32; pname: VertexAttribEnumNV; var _pointer: IntPtr)>(z_GetVertexAttribPointervNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetVertexAttribPointervNV(index: UInt32; pname: VertexAttribEnumNV; _pointer: array of IntPtr);
    begin
      z_GetVertexAttribPointervNV_ovr_0(index, pname, _pointer[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetVertexAttribPointervNV(index: UInt32; pname: VertexAttribEnumNV; var _pointer: IntPtr);
    begin
      z_GetVertexAttribPointervNV_ovr_0(index, pname, _pointer);
    end;
    public z_GetVertexAttribPointervNV_ovr_2 := GetFuncOrNil&<procedure(index: UInt32; pname: VertexAttribEnumNV; _pointer: pointer)>(z_GetVertexAttribPointervNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetVertexAttribPointervNV(index: UInt32; pname: VertexAttribEnumNV; _pointer: pointer);
    begin
      z_GetVertexAttribPointervNV_ovr_2(index, pname, _pointer);
    end;
    
    public z_IsProgramNV_adr := GetFuncAdr('glIsProgramNV');
    public z_IsProgramNV_ovr_0 := GetFuncOrNil&<function(id: UInt32): boolean>(z_IsProgramNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function IsProgramNV(id: UInt32): boolean;
    begin
      Result := z_IsProgramNV_ovr_0(id);
    end;
    
    public z_LoadProgramNV_adr := GetFuncAdr('glLoadProgramNV');
    public z_LoadProgramNV_ovr_0 := GetFuncOrNil&<procedure(target: VertexAttribEnumNV; id: UInt32; len: Int32; var &program: Byte)>(z_LoadProgramNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure LoadProgramNV(target: VertexAttribEnumNV; id: UInt32; len: Int32; &program: array of Byte);
    begin
      z_LoadProgramNV_ovr_0(target, id, len, &program[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure LoadProgramNV(target: VertexAttribEnumNV; id: UInt32; len: Int32; var &program: Byte);
    begin
      z_LoadProgramNV_ovr_0(target, id, len, &program);
    end;
    public z_LoadProgramNV_ovr_2 := GetFuncOrNil&<procedure(target: VertexAttribEnumNV; id: UInt32; len: Int32; &program: IntPtr)>(z_LoadProgramNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure LoadProgramNV(target: VertexAttribEnumNV; id: UInt32; len: Int32; &program: IntPtr);
    begin
      z_LoadProgramNV_ovr_2(target, id, len, &program);
    end;
    
    public z_ProgramParameter4dNV_adr := GetFuncAdr('glProgramParameter4dNV');
    public z_ProgramParameter4dNV_ovr_0 := GetFuncOrNil&<procedure(target: VertexAttribEnumNV; index: UInt32; x: real; y: real; z: real; w: real)>(z_ProgramParameter4dNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramParameter4dNV(target: VertexAttribEnumNV; index: UInt32; x: real; y: real; z: real; w: real);
    begin
      z_ProgramParameter4dNV_ovr_0(target, index, x, y, z, w);
    end;
    
    public z_ProgramParameter4dvNV_adr := GetFuncAdr('glProgramParameter4dvNV');
    public z_ProgramParameter4dvNV_ovr_0 := GetFuncOrNil&<procedure(target: VertexAttribEnumNV; index: UInt32; var v: real)>(z_ProgramParameter4dvNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramParameter4dvNV(target: VertexAttribEnumNV; index: UInt32; v: array of real);
    begin
      z_ProgramParameter4dvNV_ovr_0(target, index, v[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramParameter4dvNV(target: VertexAttribEnumNV; index: UInt32; var v: real);
    begin
      z_ProgramParameter4dvNV_ovr_0(target, index, v);
    end;
    public z_ProgramParameter4dvNV_ovr_2 := GetFuncOrNil&<procedure(target: VertexAttribEnumNV; index: UInt32; v: IntPtr)>(z_ProgramParameter4dvNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramParameter4dvNV(target: VertexAttribEnumNV; index: UInt32; v: IntPtr);
    begin
      z_ProgramParameter4dvNV_ovr_2(target, index, v);
    end;
    
    public z_ProgramParameter4fNV_adr := GetFuncAdr('glProgramParameter4fNV');
    public z_ProgramParameter4fNV_ovr_0 := GetFuncOrNil&<procedure(target: VertexAttribEnumNV; index: UInt32; x: single; y: single; z: single; w: single)>(z_ProgramParameter4fNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramParameter4fNV(target: VertexAttribEnumNV; index: UInt32; x: single; y: single; z: single; w: single);
    begin
      z_ProgramParameter4fNV_ovr_0(target, index, x, y, z, w);
    end;
    
    public z_ProgramParameter4fvNV_adr := GetFuncAdr('glProgramParameter4fvNV');
    public z_ProgramParameter4fvNV_ovr_0 := GetFuncOrNil&<procedure(target: VertexAttribEnumNV; index: UInt32; var v: single)>(z_ProgramParameter4fvNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramParameter4fvNV(target: VertexAttribEnumNV; index: UInt32; v: array of single);
    begin
      z_ProgramParameter4fvNV_ovr_0(target, index, v[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramParameter4fvNV(target: VertexAttribEnumNV; index: UInt32; var v: single);
    begin
      z_ProgramParameter4fvNV_ovr_0(target, index, v);
    end;
    public z_ProgramParameter4fvNV_ovr_2 := GetFuncOrNil&<procedure(target: VertexAttribEnumNV; index: UInt32; v: IntPtr)>(z_ProgramParameter4fvNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramParameter4fvNV(target: VertexAttribEnumNV; index: UInt32; v: IntPtr);
    begin
      z_ProgramParameter4fvNV_ovr_2(target, index, v);
    end;
    
    public z_ProgramParameters4dvNV_adr := GetFuncAdr('glProgramParameters4dvNV');
    public z_ProgramParameters4dvNV_ovr_0 := GetFuncOrNil&<procedure(target: VertexAttribEnumNV; index: UInt32; count: Int32; var v: real)>(z_ProgramParameters4dvNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramParameters4dvNV(target: VertexAttribEnumNV; index: UInt32; count: Int32; v: array of real);
    begin
      z_ProgramParameters4dvNV_ovr_0(target, index, count, v[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramParameters4dvNV(target: VertexAttribEnumNV; index: UInt32; count: Int32; var v: real);
    begin
      z_ProgramParameters4dvNV_ovr_0(target, index, count, v);
    end;
    public z_ProgramParameters4dvNV_ovr_2 := GetFuncOrNil&<procedure(target: VertexAttribEnumNV; index: UInt32; count: Int32; v: IntPtr)>(z_ProgramParameters4dvNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramParameters4dvNV(target: VertexAttribEnumNV; index: UInt32; count: Int32; v: IntPtr);
    begin
      z_ProgramParameters4dvNV_ovr_2(target, index, count, v);
    end;
    
    public z_ProgramParameters4fvNV_adr := GetFuncAdr('glProgramParameters4fvNV');
    public z_ProgramParameters4fvNV_ovr_0 := GetFuncOrNil&<procedure(target: VertexAttribEnumNV; index: UInt32; count: Int32; var v: single)>(z_ProgramParameters4fvNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramParameters4fvNV(target: VertexAttribEnumNV; index: UInt32; count: Int32; v: array of single);
    begin
      z_ProgramParameters4fvNV_ovr_0(target, index, count, v[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramParameters4fvNV(target: VertexAttribEnumNV; index: UInt32; count: Int32; var v: single);
    begin
      z_ProgramParameters4fvNV_ovr_0(target, index, count, v);
    end;
    public z_ProgramParameters4fvNV_ovr_2 := GetFuncOrNil&<procedure(target: VertexAttribEnumNV; index: UInt32; count: Int32; v: IntPtr)>(z_ProgramParameters4fvNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ProgramParameters4fvNV(target: VertexAttribEnumNV; index: UInt32; count: Int32; v: IntPtr);
    begin
      z_ProgramParameters4fvNV_ovr_2(target, index, count, v);
    end;
    
    public z_RequestResidentProgramsNV_adr := GetFuncAdr('glRequestResidentProgramsNV');
    public z_RequestResidentProgramsNV_ovr_0 := GetFuncOrNil&<procedure(n: Int32; var programs: UInt32)>(z_RequestResidentProgramsNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure RequestResidentProgramsNV(n: Int32; programs: array of UInt32);
    begin
      z_RequestResidentProgramsNV_ovr_0(n, programs[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure RequestResidentProgramsNV(n: Int32; var programs: UInt32);
    begin
      z_RequestResidentProgramsNV_ovr_0(n, programs);
    end;
    public z_RequestResidentProgramsNV_ovr_2 := GetFuncOrNil&<procedure(n: Int32; programs: IntPtr)>(z_RequestResidentProgramsNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure RequestResidentProgramsNV(n: Int32; programs: IntPtr);
    begin
      z_RequestResidentProgramsNV_ovr_2(n, programs);
    end;
    
    public z_TrackMatrixNV_adr := GetFuncAdr('glTrackMatrixNV');
    public z_TrackMatrixNV_ovr_0 := GetFuncOrNil&<procedure(target: VertexAttribEnumNV; address: UInt32; matrix: VertexAttribEnumNV; transform: VertexAttribEnumNV)>(z_TrackMatrixNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TrackMatrixNV(target: VertexAttribEnumNV; address: UInt32; matrix: VertexAttribEnumNV; transform: VertexAttribEnumNV);
    begin
      z_TrackMatrixNV_ovr_0(target, address, matrix, transform);
    end;
    
    public z_VertexAttribPointerNV_adr := GetFuncAdr('glVertexAttribPointerNV');
    public z_VertexAttribPointerNV_ovr_0 := GetFuncOrNil&<procedure(index: UInt32; fsize: Int32; &type: VertexAttribEnumNV; stride: Int32; pointer: IntPtr)>(z_VertexAttribPointerNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttribPointerNV(index: UInt32; fsize: Int32; &type: VertexAttribEnumNV; stride: Int32; pointer: IntPtr);
    begin
      z_VertexAttribPointerNV_ovr_0(index, fsize, &type, stride, pointer);
    end;
    
    public z_VertexAttrib1dNV_adr := GetFuncAdr('glVertexAttrib1dNV');
    public z_VertexAttrib1dNV_ovr_0 := GetFuncOrNil&<procedure(index: UInt32; x: real)>(z_VertexAttrib1dNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttrib1dNV(index: UInt32; x: real);
    begin
      z_VertexAttrib1dNV_ovr_0(index, x);
    end;
    
    public z_VertexAttrib1dvNV_adr := GetFuncAdr('glVertexAttrib1dvNV');
    public z_VertexAttrib1dvNV_ovr_0 := GetFuncOrNil&<procedure(index: UInt32; var v: real)>(z_VertexAttrib1dvNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttrib1dvNV(index: UInt32; v: array of real);
    begin
      z_VertexAttrib1dvNV_ovr_0(index, v[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttrib1dvNV(index: UInt32; var v: real);
    begin
      z_VertexAttrib1dvNV_ovr_0(index, v);
    end;
    public z_VertexAttrib1dvNV_ovr_2 := GetFuncOrNil&<procedure(index: UInt32; v: IntPtr)>(z_VertexAttrib1dvNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttrib1dvNV(index: UInt32; v: IntPtr);
    begin
      z_VertexAttrib1dvNV_ovr_2(index, v);
    end;
    
    public z_VertexAttrib1fNV_adr := GetFuncAdr('glVertexAttrib1fNV');
    public z_VertexAttrib1fNV_ovr_0 := GetFuncOrNil&<procedure(index: UInt32; x: single)>(z_VertexAttrib1fNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttrib1fNV(index: UInt32; x: single);
    begin
      z_VertexAttrib1fNV_ovr_0(index, x);
    end;
    
    public z_VertexAttrib1fvNV_adr := GetFuncAdr('glVertexAttrib1fvNV');
    public z_VertexAttrib1fvNV_ovr_0 := GetFuncOrNil&<procedure(index: UInt32; var v: single)>(z_VertexAttrib1fvNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttrib1fvNV(index: UInt32; v: array of single);
    begin
      z_VertexAttrib1fvNV_ovr_0(index, v[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttrib1fvNV(index: UInt32; var v: single);
    begin
      z_VertexAttrib1fvNV_ovr_0(index, v);
    end;
    public z_VertexAttrib1fvNV_ovr_2 := GetFuncOrNil&<procedure(index: UInt32; v: IntPtr)>(z_VertexAttrib1fvNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttrib1fvNV(index: UInt32; v: IntPtr);
    begin
      z_VertexAttrib1fvNV_ovr_2(index, v);
    end;
    
    public z_VertexAttrib1sNV_adr := GetFuncAdr('glVertexAttrib1sNV');
    public z_VertexAttrib1sNV_ovr_0 := GetFuncOrNil&<procedure(index: UInt32; x: Int16)>(z_VertexAttrib1sNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttrib1sNV(index: UInt32; x: Int16);
    begin
      z_VertexAttrib1sNV_ovr_0(index, x);
    end;
    
    public z_VertexAttrib1svNV_adr := GetFuncAdr('glVertexAttrib1svNV');
    public z_VertexAttrib1svNV_ovr_0 := GetFuncOrNil&<procedure(index: UInt32; var v: Int16)>(z_VertexAttrib1svNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttrib1svNV(index: UInt32; v: array of Int16);
    begin
      z_VertexAttrib1svNV_ovr_0(index, v[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttrib1svNV(index: UInt32; var v: Int16);
    begin
      z_VertexAttrib1svNV_ovr_0(index, v);
    end;
    public z_VertexAttrib1svNV_ovr_2 := GetFuncOrNil&<procedure(index: UInt32; v: IntPtr)>(z_VertexAttrib1svNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttrib1svNV(index: UInt32; v: IntPtr);
    begin
      z_VertexAttrib1svNV_ovr_2(index, v);
    end;
    
    public z_VertexAttrib2dNV_adr := GetFuncAdr('glVertexAttrib2dNV');
    public z_VertexAttrib2dNV_ovr_0 := GetFuncOrNil&<procedure(index: UInt32; x: real; y: real)>(z_VertexAttrib2dNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttrib2dNV(index: UInt32; x: real; y: real);
    begin
      z_VertexAttrib2dNV_ovr_0(index, x, y);
    end;
    
    public z_VertexAttrib2dvNV_adr := GetFuncAdr('glVertexAttrib2dvNV');
    public z_VertexAttrib2dvNV_ovr_0 := GetFuncOrNil&<procedure(index: UInt32; var v: real)>(z_VertexAttrib2dvNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttrib2dvNV(index: UInt32; v: array of real);
    begin
      z_VertexAttrib2dvNV_ovr_0(index, v[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttrib2dvNV(index: UInt32; var v: real);
    begin
      z_VertexAttrib2dvNV_ovr_0(index, v);
    end;
    public z_VertexAttrib2dvNV_ovr_2 := GetFuncOrNil&<procedure(index: UInt32; v: IntPtr)>(z_VertexAttrib2dvNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttrib2dvNV(index: UInt32; v: IntPtr);
    begin
      z_VertexAttrib2dvNV_ovr_2(index, v);
    end;
    
    public z_VertexAttrib2fNV_adr := GetFuncAdr('glVertexAttrib2fNV');
    public z_VertexAttrib2fNV_ovr_0 := GetFuncOrNil&<procedure(index: UInt32; x: single; y: single)>(z_VertexAttrib2fNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttrib2fNV(index: UInt32; x: single; y: single);
    begin
      z_VertexAttrib2fNV_ovr_0(index, x, y);
    end;
    
    public z_VertexAttrib2fvNV_adr := GetFuncAdr('glVertexAttrib2fvNV');
    public z_VertexAttrib2fvNV_ovr_0 := GetFuncOrNil&<procedure(index: UInt32; var v: single)>(z_VertexAttrib2fvNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttrib2fvNV(index: UInt32; v: array of single);
    begin
      z_VertexAttrib2fvNV_ovr_0(index, v[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttrib2fvNV(index: UInt32; var v: single);
    begin
      z_VertexAttrib2fvNV_ovr_0(index, v);
    end;
    public z_VertexAttrib2fvNV_ovr_2 := GetFuncOrNil&<procedure(index: UInt32; v: IntPtr)>(z_VertexAttrib2fvNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttrib2fvNV(index: UInt32; v: IntPtr);
    begin
      z_VertexAttrib2fvNV_ovr_2(index, v);
    end;
    
    public z_VertexAttrib2sNV_adr := GetFuncAdr('glVertexAttrib2sNV');
    public z_VertexAttrib2sNV_ovr_0 := GetFuncOrNil&<procedure(index: UInt32; x: Int16; y: Int16)>(z_VertexAttrib2sNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttrib2sNV(index: UInt32; x: Int16; y: Int16);
    begin
      z_VertexAttrib2sNV_ovr_0(index, x, y);
    end;
    
    public z_VertexAttrib2svNV_adr := GetFuncAdr('glVertexAttrib2svNV');
    public z_VertexAttrib2svNV_ovr_0 := GetFuncOrNil&<procedure(index: UInt32; var v: Int16)>(z_VertexAttrib2svNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttrib2svNV(index: UInt32; v: array of Int16);
    begin
      z_VertexAttrib2svNV_ovr_0(index, v[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttrib2svNV(index: UInt32; var v: Int16);
    begin
      z_VertexAttrib2svNV_ovr_0(index, v);
    end;
    public z_VertexAttrib2svNV_ovr_2 := GetFuncOrNil&<procedure(index: UInt32; v: IntPtr)>(z_VertexAttrib2svNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttrib2svNV(index: UInt32; v: IntPtr);
    begin
      z_VertexAttrib2svNV_ovr_2(index, v);
    end;
    
    public z_VertexAttrib3dNV_adr := GetFuncAdr('glVertexAttrib3dNV');
    public z_VertexAttrib3dNV_ovr_0 := GetFuncOrNil&<procedure(index: UInt32; x: real; y: real; z: real)>(z_VertexAttrib3dNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttrib3dNV(index: UInt32; x: real; y: real; z: real);
    begin
      z_VertexAttrib3dNV_ovr_0(index, x, y, z);
    end;
    
    public z_VertexAttrib3dvNV_adr := GetFuncAdr('glVertexAttrib3dvNV');
    public z_VertexAttrib3dvNV_ovr_0 := GetFuncOrNil&<procedure(index: UInt32; var v: real)>(z_VertexAttrib3dvNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttrib3dvNV(index: UInt32; v: array of real);
    begin
      z_VertexAttrib3dvNV_ovr_0(index, v[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttrib3dvNV(index: UInt32; var v: real);
    begin
      z_VertexAttrib3dvNV_ovr_0(index, v);
    end;
    public z_VertexAttrib3dvNV_ovr_2 := GetFuncOrNil&<procedure(index: UInt32; v: IntPtr)>(z_VertexAttrib3dvNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttrib3dvNV(index: UInt32; v: IntPtr);
    begin
      z_VertexAttrib3dvNV_ovr_2(index, v);
    end;
    
    public z_VertexAttrib3fNV_adr := GetFuncAdr('glVertexAttrib3fNV');
    public z_VertexAttrib3fNV_ovr_0 := GetFuncOrNil&<procedure(index: UInt32; x: single; y: single; z: single)>(z_VertexAttrib3fNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttrib3fNV(index: UInt32; x: single; y: single; z: single);
    begin
      z_VertexAttrib3fNV_ovr_0(index, x, y, z);
    end;
    
    public z_VertexAttrib3fvNV_adr := GetFuncAdr('glVertexAttrib3fvNV');
    public z_VertexAttrib3fvNV_ovr_0 := GetFuncOrNil&<procedure(index: UInt32; var v: single)>(z_VertexAttrib3fvNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttrib3fvNV(index: UInt32; v: array of single);
    begin
      z_VertexAttrib3fvNV_ovr_0(index, v[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttrib3fvNV(index: UInt32; var v: single);
    begin
      z_VertexAttrib3fvNV_ovr_0(index, v);
    end;
    public z_VertexAttrib3fvNV_ovr_2 := GetFuncOrNil&<procedure(index: UInt32; v: IntPtr)>(z_VertexAttrib3fvNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttrib3fvNV(index: UInt32; v: IntPtr);
    begin
      z_VertexAttrib3fvNV_ovr_2(index, v);
    end;
    
    public z_VertexAttrib3sNV_adr := GetFuncAdr('glVertexAttrib3sNV');
    public z_VertexAttrib3sNV_ovr_0 := GetFuncOrNil&<procedure(index: UInt32; x: Int16; y: Int16; z: Int16)>(z_VertexAttrib3sNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttrib3sNV(index: UInt32; x: Int16; y: Int16; z: Int16);
    begin
      z_VertexAttrib3sNV_ovr_0(index, x, y, z);
    end;
    
    public z_VertexAttrib3svNV_adr := GetFuncAdr('glVertexAttrib3svNV');
    public z_VertexAttrib3svNV_ovr_0 := GetFuncOrNil&<procedure(index: UInt32; var v: Int16)>(z_VertexAttrib3svNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttrib3svNV(index: UInt32; v: array of Int16);
    begin
      z_VertexAttrib3svNV_ovr_0(index, v[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttrib3svNV(index: UInt32; var v: Int16);
    begin
      z_VertexAttrib3svNV_ovr_0(index, v);
    end;
    public z_VertexAttrib3svNV_ovr_2 := GetFuncOrNil&<procedure(index: UInt32; v: IntPtr)>(z_VertexAttrib3svNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttrib3svNV(index: UInt32; v: IntPtr);
    begin
      z_VertexAttrib3svNV_ovr_2(index, v);
    end;
    
    public z_VertexAttrib4dNV_adr := GetFuncAdr('glVertexAttrib4dNV');
    public z_VertexAttrib4dNV_ovr_0 := GetFuncOrNil&<procedure(index: UInt32; x: real; y: real; z: real; w: real)>(z_VertexAttrib4dNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttrib4dNV(index: UInt32; x: real; y: real; z: real; w: real);
    begin
      z_VertexAttrib4dNV_ovr_0(index, x, y, z, w);
    end;
    
    public z_VertexAttrib4dvNV_adr := GetFuncAdr('glVertexAttrib4dvNV');
    public z_VertexAttrib4dvNV_ovr_0 := GetFuncOrNil&<procedure(index: UInt32; var v: real)>(z_VertexAttrib4dvNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttrib4dvNV(index: UInt32; v: array of real);
    begin
      z_VertexAttrib4dvNV_ovr_0(index, v[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttrib4dvNV(index: UInt32; var v: real);
    begin
      z_VertexAttrib4dvNV_ovr_0(index, v);
    end;
    public z_VertexAttrib4dvNV_ovr_2 := GetFuncOrNil&<procedure(index: UInt32; v: IntPtr)>(z_VertexAttrib4dvNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttrib4dvNV(index: UInt32; v: IntPtr);
    begin
      z_VertexAttrib4dvNV_ovr_2(index, v);
    end;
    
    public z_VertexAttrib4fNV_adr := GetFuncAdr('glVertexAttrib4fNV');
    public z_VertexAttrib4fNV_ovr_0 := GetFuncOrNil&<procedure(index: UInt32; x: single; y: single; z: single; w: single)>(z_VertexAttrib4fNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttrib4fNV(index: UInt32; x: single; y: single; z: single; w: single);
    begin
      z_VertexAttrib4fNV_ovr_0(index, x, y, z, w);
    end;
    
    public z_VertexAttrib4fvNV_adr := GetFuncAdr('glVertexAttrib4fvNV');
    public z_VertexAttrib4fvNV_ovr_0 := GetFuncOrNil&<procedure(index: UInt32; var v: single)>(z_VertexAttrib4fvNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttrib4fvNV(index: UInt32; v: array of single);
    begin
      z_VertexAttrib4fvNV_ovr_0(index, v[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttrib4fvNV(index: UInt32; var v: single);
    begin
      z_VertexAttrib4fvNV_ovr_0(index, v);
    end;
    public z_VertexAttrib4fvNV_ovr_2 := GetFuncOrNil&<procedure(index: UInt32; v: IntPtr)>(z_VertexAttrib4fvNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttrib4fvNV(index: UInt32; v: IntPtr);
    begin
      z_VertexAttrib4fvNV_ovr_2(index, v);
    end;
    
    public z_VertexAttrib4sNV_adr := GetFuncAdr('glVertexAttrib4sNV');
    public z_VertexAttrib4sNV_ovr_0 := GetFuncOrNil&<procedure(index: UInt32; x: Int16; y: Int16; z: Int16; w: Int16)>(z_VertexAttrib4sNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttrib4sNV(index: UInt32; x: Int16; y: Int16; z: Int16; w: Int16);
    begin
      z_VertexAttrib4sNV_ovr_0(index, x, y, z, w);
    end;
    
    public z_VertexAttrib4svNV_adr := GetFuncAdr('glVertexAttrib4svNV');
    public z_VertexAttrib4svNV_ovr_0 := GetFuncOrNil&<procedure(index: UInt32; var v: Int16)>(z_VertexAttrib4svNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttrib4svNV(index: UInt32; v: array of Int16);
    begin
      z_VertexAttrib4svNV_ovr_0(index, v[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttrib4svNV(index: UInt32; var v: Int16);
    begin
      z_VertexAttrib4svNV_ovr_0(index, v);
    end;
    public z_VertexAttrib4svNV_ovr_2 := GetFuncOrNil&<procedure(index: UInt32; v: IntPtr)>(z_VertexAttrib4svNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttrib4svNV(index: UInt32; v: IntPtr);
    begin
      z_VertexAttrib4svNV_ovr_2(index, v);
    end;
    
    public z_VertexAttrib4ubNV_adr := GetFuncAdr('glVertexAttrib4ubNV');
    public z_VertexAttrib4ubNV_ovr_0 := GetFuncOrNil&<procedure(index: UInt32; x: Byte; y: Byte; z: Byte; w: Byte)>(z_VertexAttrib4ubNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttrib4ubNV(index: UInt32; x: Byte; y: Byte; z: Byte; w: Byte);
    begin
      z_VertexAttrib4ubNV_ovr_0(index, x, y, z, w);
    end;
    
    public z_VertexAttrib4ubvNV_adr := GetFuncAdr('glVertexAttrib4ubvNV');
    public z_VertexAttrib4ubvNV_ovr_0 := GetFuncOrNil&<procedure(index: UInt32; var v: Byte)>(z_VertexAttrib4ubvNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttrib4ubvNV(index: UInt32; v: array of Byte);
    begin
      z_VertexAttrib4ubvNV_ovr_0(index, v[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttrib4ubvNV(index: UInt32; var v: Byte);
    begin
      z_VertexAttrib4ubvNV_ovr_0(index, v);
    end;
    public z_VertexAttrib4ubvNV_ovr_2 := GetFuncOrNil&<procedure(index: UInt32; v: IntPtr)>(z_VertexAttrib4ubvNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttrib4ubvNV(index: UInt32; v: IntPtr);
    begin
      z_VertexAttrib4ubvNV_ovr_2(index, v);
    end;
    
    public z_VertexAttribs1dvNV_adr := GetFuncAdr('glVertexAttribs1dvNV');
    public z_VertexAttribs1dvNV_ovr_0 := GetFuncOrNil&<procedure(index: UInt32; count: Int32; var v: real)>(z_VertexAttribs1dvNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttribs1dvNV(index: UInt32; count: Int32; v: array of real);
    begin
      z_VertexAttribs1dvNV_ovr_0(index, count, v[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttribs1dvNV(index: UInt32; count: Int32; var v: real);
    begin
      z_VertexAttribs1dvNV_ovr_0(index, count, v);
    end;
    public z_VertexAttribs1dvNV_ovr_2 := GetFuncOrNil&<procedure(index: UInt32; count: Int32; v: IntPtr)>(z_VertexAttribs1dvNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttribs1dvNV(index: UInt32; count: Int32; v: IntPtr);
    begin
      z_VertexAttribs1dvNV_ovr_2(index, count, v);
    end;
    
    public z_VertexAttribs1fvNV_adr := GetFuncAdr('glVertexAttribs1fvNV');
    public z_VertexAttribs1fvNV_ovr_0 := GetFuncOrNil&<procedure(index: UInt32; count: Int32; var v: single)>(z_VertexAttribs1fvNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttribs1fvNV(index: UInt32; count: Int32; v: array of single);
    begin
      z_VertexAttribs1fvNV_ovr_0(index, count, v[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttribs1fvNV(index: UInt32; count: Int32; var v: single);
    begin
      z_VertexAttribs1fvNV_ovr_0(index, count, v);
    end;
    public z_VertexAttribs1fvNV_ovr_2 := GetFuncOrNil&<procedure(index: UInt32; count: Int32; v: IntPtr)>(z_VertexAttribs1fvNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttribs1fvNV(index: UInt32; count: Int32; v: IntPtr);
    begin
      z_VertexAttribs1fvNV_ovr_2(index, count, v);
    end;
    
    public z_VertexAttribs1svNV_adr := GetFuncAdr('glVertexAttribs1svNV');
    public z_VertexAttribs1svNV_ovr_0 := GetFuncOrNil&<procedure(index: UInt32; count: Int32; var v: Int16)>(z_VertexAttribs1svNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttribs1svNV(index: UInt32; count: Int32; v: array of Int16);
    begin
      z_VertexAttribs1svNV_ovr_0(index, count, v[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttribs1svNV(index: UInt32; count: Int32; var v: Int16);
    begin
      z_VertexAttribs1svNV_ovr_0(index, count, v);
    end;
    public z_VertexAttribs1svNV_ovr_2 := GetFuncOrNil&<procedure(index: UInt32; count: Int32; v: IntPtr)>(z_VertexAttribs1svNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttribs1svNV(index: UInt32; count: Int32; v: IntPtr);
    begin
      z_VertexAttribs1svNV_ovr_2(index, count, v);
    end;
    
    public z_VertexAttribs2dvNV_adr := GetFuncAdr('glVertexAttribs2dvNV');
    public z_VertexAttribs2dvNV_ovr_0 := GetFuncOrNil&<procedure(index: UInt32; count: Int32; var v: real)>(z_VertexAttribs2dvNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttribs2dvNV(index: UInt32; count: Int32; v: array of real);
    begin
      z_VertexAttribs2dvNV_ovr_0(index, count, v[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttribs2dvNV(index: UInt32; count: Int32; var v: real);
    begin
      z_VertexAttribs2dvNV_ovr_0(index, count, v);
    end;
    public z_VertexAttribs2dvNV_ovr_2 := GetFuncOrNil&<procedure(index: UInt32; count: Int32; v: IntPtr)>(z_VertexAttribs2dvNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttribs2dvNV(index: UInt32; count: Int32; v: IntPtr);
    begin
      z_VertexAttribs2dvNV_ovr_2(index, count, v);
    end;
    
    public z_VertexAttribs2fvNV_adr := GetFuncAdr('glVertexAttribs2fvNV');
    public z_VertexAttribs2fvNV_ovr_0 := GetFuncOrNil&<procedure(index: UInt32; count: Int32; var v: single)>(z_VertexAttribs2fvNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttribs2fvNV(index: UInt32; count: Int32; v: array of single);
    begin
      z_VertexAttribs2fvNV_ovr_0(index, count, v[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttribs2fvNV(index: UInt32; count: Int32; var v: single);
    begin
      z_VertexAttribs2fvNV_ovr_0(index, count, v);
    end;
    public z_VertexAttribs2fvNV_ovr_2 := GetFuncOrNil&<procedure(index: UInt32; count: Int32; v: IntPtr)>(z_VertexAttribs2fvNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttribs2fvNV(index: UInt32; count: Int32; v: IntPtr);
    begin
      z_VertexAttribs2fvNV_ovr_2(index, count, v);
    end;
    
    public z_VertexAttribs2svNV_adr := GetFuncAdr('glVertexAttribs2svNV');
    public z_VertexAttribs2svNV_ovr_0 := GetFuncOrNil&<procedure(index: UInt32; count: Int32; var v: Int16)>(z_VertexAttribs2svNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttribs2svNV(index: UInt32; count: Int32; v: array of Int16);
    begin
      z_VertexAttribs2svNV_ovr_0(index, count, v[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttribs2svNV(index: UInt32; count: Int32; var v: Int16);
    begin
      z_VertexAttribs2svNV_ovr_0(index, count, v);
    end;
    public z_VertexAttribs2svNV_ovr_2 := GetFuncOrNil&<procedure(index: UInt32; count: Int32; v: IntPtr)>(z_VertexAttribs2svNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttribs2svNV(index: UInt32; count: Int32; v: IntPtr);
    begin
      z_VertexAttribs2svNV_ovr_2(index, count, v);
    end;
    
    public z_VertexAttribs3dvNV_adr := GetFuncAdr('glVertexAttribs3dvNV');
    public z_VertexAttribs3dvNV_ovr_0 := GetFuncOrNil&<procedure(index: UInt32; count: Int32; var v: real)>(z_VertexAttribs3dvNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttribs3dvNV(index: UInt32; count: Int32; v: array of real);
    begin
      z_VertexAttribs3dvNV_ovr_0(index, count, v[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttribs3dvNV(index: UInt32; count: Int32; var v: real);
    begin
      z_VertexAttribs3dvNV_ovr_0(index, count, v);
    end;
    public z_VertexAttribs3dvNV_ovr_2 := GetFuncOrNil&<procedure(index: UInt32; count: Int32; v: IntPtr)>(z_VertexAttribs3dvNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttribs3dvNV(index: UInt32; count: Int32; v: IntPtr);
    begin
      z_VertexAttribs3dvNV_ovr_2(index, count, v);
    end;
    
    public z_VertexAttribs3fvNV_adr := GetFuncAdr('glVertexAttribs3fvNV');
    public z_VertexAttribs3fvNV_ovr_0 := GetFuncOrNil&<procedure(index: UInt32; count: Int32; var v: single)>(z_VertexAttribs3fvNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttribs3fvNV(index: UInt32; count: Int32; v: array of single);
    begin
      z_VertexAttribs3fvNV_ovr_0(index, count, v[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttribs3fvNV(index: UInt32; count: Int32; var v: single);
    begin
      z_VertexAttribs3fvNV_ovr_0(index, count, v);
    end;
    public z_VertexAttribs3fvNV_ovr_2 := GetFuncOrNil&<procedure(index: UInt32; count: Int32; v: IntPtr)>(z_VertexAttribs3fvNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttribs3fvNV(index: UInt32; count: Int32; v: IntPtr);
    begin
      z_VertexAttribs3fvNV_ovr_2(index, count, v);
    end;
    
    public z_VertexAttribs3svNV_adr := GetFuncAdr('glVertexAttribs3svNV');
    public z_VertexAttribs3svNV_ovr_0 := GetFuncOrNil&<procedure(index: UInt32; count: Int32; var v: Int16)>(z_VertexAttribs3svNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttribs3svNV(index: UInt32; count: Int32; v: array of Int16);
    begin
      z_VertexAttribs3svNV_ovr_0(index, count, v[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttribs3svNV(index: UInt32; count: Int32; var v: Int16);
    begin
      z_VertexAttribs3svNV_ovr_0(index, count, v);
    end;
    public z_VertexAttribs3svNV_ovr_2 := GetFuncOrNil&<procedure(index: UInt32; count: Int32; v: IntPtr)>(z_VertexAttribs3svNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttribs3svNV(index: UInt32; count: Int32; v: IntPtr);
    begin
      z_VertexAttribs3svNV_ovr_2(index, count, v);
    end;
    
    public z_VertexAttribs4dvNV_adr := GetFuncAdr('glVertexAttribs4dvNV');
    public z_VertexAttribs4dvNV_ovr_0 := GetFuncOrNil&<procedure(index: UInt32; count: Int32; var v: real)>(z_VertexAttribs4dvNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttribs4dvNV(index: UInt32; count: Int32; v: array of real);
    begin
      z_VertexAttribs4dvNV_ovr_0(index, count, v[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttribs4dvNV(index: UInt32; count: Int32; var v: real);
    begin
      z_VertexAttribs4dvNV_ovr_0(index, count, v);
    end;
    public z_VertexAttribs4dvNV_ovr_2 := GetFuncOrNil&<procedure(index: UInt32; count: Int32; v: IntPtr)>(z_VertexAttribs4dvNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttribs4dvNV(index: UInt32; count: Int32; v: IntPtr);
    begin
      z_VertexAttribs4dvNV_ovr_2(index, count, v);
    end;
    
    public z_VertexAttribs4fvNV_adr := GetFuncAdr('glVertexAttribs4fvNV');
    public z_VertexAttribs4fvNV_ovr_0 := GetFuncOrNil&<procedure(index: UInt32; count: Int32; var v: single)>(z_VertexAttribs4fvNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttribs4fvNV(index: UInt32; count: Int32; v: array of single);
    begin
      z_VertexAttribs4fvNV_ovr_0(index, count, v[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttribs4fvNV(index: UInt32; count: Int32; var v: single);
    begin
      z_VertexAttribs4fvNV_ovr_0(index, count, v);
    end;
    public z_VertexAttribs4fvNV_ovr_2 := GetFuncOrNil&<procedure(index: UInt32; count: Int32; v: IntPtr)>(z_VertexAttribs4fvNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttribs4fvNV(index: UInt32; count: Int32; v: IntPtr);
    begin
      z_VertexAttribs4fvNV_ovr_2(index, count, v);
    end;
    
    public z_VertexAttribs4svNV_adr := GetFuncAdr('glVertexAttribs4svNV');
    public z_VertexAttribs4svNV_ovr_0 := GetFuncOrNil&<procedure(index: UInt32; count: Int32; var v: Int16)>(z_VertexAttribs4svNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttribs4svNV(index: UInt32; count: Int32; v: array of Int16);
    begin
      z_VertexAttribs4svNV_ovr_0(index, count, v[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttribs4svNV(index: UInt32; count: Int32; var v: Int16);
    begin
      z_VertexAttribs4svNV_ovr_0(index, count, v);
    end;
    public z_VertexAttribs4svNV_ovr_2 := GetFuncOrNil&<procedure(index: UInt32; count: Int32; v: IntPtr)>(z_VertexAttribs4svNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttribs4svNV(index: UInt32; count: Int32; v: IntPtr);
    begin
      z_VertexAttribs4svNV_ovr_2(index, count, v);
    end;
    
    public z_VertexAttribs4ubvNV_adr := GetFuncAdr('glVertexAttribs4ubvNV');
    public z_VertexAttribs4ubvNV_ovr_0 := GetFuncOrNil&<procedure(index: UInt32; count: Int32; var v: Byte)>(z_VertexAttribs4ubvNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttribs4ubvNV(index: UInt32; count: Int32; v: array of Byte);
    begin
      z_VertexAttribs4ubvNV_ovr_0(index, count, v[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttribs4ubvNV(index: UInt32; count: Int32; var v: Byte);
    begin
      z_VertexAttribs4ubvNV_ovr_0(index, count, v);
    end;
    public z_VertexAttribs4ubvNV_ovr_2 := GetFuncOrNil&<procedure(index: UInt32; count: Int32; v: IntPtr)>(z_VertexAttribs4ubvNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttribs4ubvNV(index: UInt32; count: Int32; v: IntPtr);
    begin
      z_VertexAttribs4ubvNV_ovr_2(index, count, v);
    end;
    
  end;
  
  glVertexProgram4NV = sealed class
    public static function GetFuncAdr([MarshalAs(UnmanagedType.LPStr)] lpszProc: string): IntPtr;
    external 'opengl32.dll' name 'wglGetProcAddress';
    public static function GetFuncOrNil<T>(fadr: IntPtr) :=
    fadr=IntPtr.Zero ? default(T) :
    Marshal.GetDelegateForFunctionPointer&<T>(fadr);
    
    public z_VertexAttribI1iEXT_adr := GetFuncAdr('glVertexAttribI1iEXT');
    public z_VertexAttribI1iEXT_ovr_0 := GetFuncOrNil&<procedure(index: UInt32; x: Int32)>(z_VertexAttribI1iEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttribI1iEXT(index: UInt32; x: Int32);
    begin
      z_VertexAttribI1iEXT_ovr_0(index, x);
    end;
    
    public z_VertexAttribI2iEXT_adr := GetFuncAdr('glVertexAttribI2iEXT');
    public z_VertexAttribI2iEXT_ovr_0 := GetFuncOrNil&<procedure(index: UInt32; x: Int32; y: Int32)>(z_VertexAttribI2iEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttribI2iEXT(index: UInt32; x: Int32; y: Int32);
    begin
      z_VertexAttribI2iEXT_ovr_0(index, x, y);
    end;
    
    public z_VertexAttribI3iEXT_adr := GetFuncAdr('glVertexAttribI3iEXT');
    public z_VertexAttribI3iEXT_ovr_0 := GetFuncOrNil&<procedure(index: UInt32; x: Int32; y: Int32; z: Int32)>(z_VertexAttribI3iEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttribI3iEXT(index: UInt32; x: Int32; y: Int32; z: Int32);
    begin
      z_VertexAttribI3iEXT_ovr_0(index, x, y, z);
    end;
    
    public z_VertexAttribI4iEXT_adr := GetFuncAdr('glVertexAttribI4iEXT');
    public z_VertexAttribI4iEXT_ovr_0 := GetFuncOrNil&<procedure(index: UInt32; x: Int32; y: Int32; z: Int32; w: Int32)>(z_VertexAttribI4iEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttribI4iEXT(index: UInt32; x: Int32; y: Int32; z: Int32; w: Int32);
    begin
      z_VertexAttribI4iEXT_ovr_0(index, x, y, z, w);
    end;
    
    public z_VertexAttribI1uiEXT_adr := GetFuncAdr('glVertexAttribI1uiEXT');
    public z_VertexAttribI1uiEXT_ovr_0 := GetFuncOrNil&<procedure(index: UInt32; x: UInt32)>(z_VertexAttribI1uiEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttribI1uiEXT(index: UInt32; x: UInt32);
    begin
      z_VertexAttribI1uiEXT_ovr_0(index, x);
    end;
    
    public z_VertexAttribI2uiEXT_adr := GetFuncAdr('glVertexAttribI2uiEXT');
    public z_VertexAttribI2uiEXT_ovr_0 := GetFuncOrNil&<procedure(index: UInt32; x: UInt32; y: UInt32)>(z_VertexAttribI2uiEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttribI2uiEXT(index: UInt32; x: UInt32; y: UInt32);
    begin
      z_VertexAttribI2uiEXT_ovr_0(index, x, y);
    end;
    
    public z_VertexAttribI3uiEXT_adr := GetFuncAdr('glVertexAttribI3uiEXT');
    public z_VertexAttribI3uiEXT_ovr_0 := GetFuncOrNil&<procedure(index: UInt32; x: UInt32; y: UInt32; z: UInt32)>(z_VertexAttribI3uiEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttribI3uiEXT(index: UInt32; x: UInt32; y: UInt32; z: UInt32);
    begin
      z_VertexAttribI3uiEXT_ovr_0(index, x, y, z);
    end;
    
    public z_VertexAttribI4uiEXT_adr := GetFuncAdr('glVertexAttribI4uiEXT');
    public z_VertexAttribI4uiEXT_ovr_0 := GetFuncOrNil&<procedure(index: UInt32; x: UInt32; y: UInt32; z: UInt32; w: UInt32)>(z_VertexAttribI4uiEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttribI4uiEXT(index: UInt32; x: UInt32; y: UInt32; z: UInt32; w: UInt32);
    begin
      z_VertexAttribI4uiEXT_ovr_0(index, x, y, z, w);
    end;
    
    public z_VertexAttribI1ivEXT_adr := GetFuncAdr('glVertexAttribI1ivEXT');
    public z_VertexAttribI1ivEXT_ovr_0 := GetFuncOrNil&<procedure(index: UInt32; var v: Int32)>(z_VertexAttribI1ivEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttribI1ivEXT(index: UInt32; v: array of Int32);
    begin
      z_VertexAttribI1ivEXT_ovr_0(index, v[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttribI1ivEXT(index: UInt32; var v: Int32);
    begin
      z_VertexAttribI1ivEXT_ovr_0(index, v);
    end;
    public z_VertexAttribI1ivEXT_ovr_2 := GetFuncOrNil&<procedure(index: UInt32; v: IntPtr)>(z_VertexAttribI1ivEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttribI1ivEXT(index: UInt32; v: IntPtr);
    begin
      z_VertexAttribI1ivEXT_ovr_2(index, v);
    end;
    
    public z_VertexAttribI2ivEXT_adr := GetFuncAdr('glVertexAttribI2ivEXT');
    public z_VertexAttribI2ivEXT_ovr_0 := GetFuncOrNil&<procedure(index: UInt32; var v: Int32)>(z_VertexAttribI2ivEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttribI2ivEXT(index: UInt32; v: array of Int32);
    begin
      z_VertexAttribI2ivEXT_ovr_0(index, v[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttribI2ivEXT(index: UInt32; var v: Int32);
    begin
      z_VertexAttribI2ivEXT_ovr_0(index, v);
    end;
    public z_VertexAttribI2ivEXT_ovr_2 := GetFuncOrNil&<procedure(index: UInt32; v: IntPtr)>(z_VertexAttribI2ivEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttribI2ivEXT(index: UInt32; v: IntPtr);
    begin
      z_VertexAttribI2ivEXT_ovr_2(index, v);
    end;
    
    public z_VertexAttribI3ivEXT_adr := GetFuncAdr('glVertexAttribI3ivEXT');
    public z_VertexAttribI3ivEXT_ovr_0 := GetFuncOrNil&<procedure(index: UInt32; var v: Int32)>(z_VertexAttribI3ivEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttribI3ivEXT(index: UInt32; v: array of Int32);
    begin
      z_VertexAttribI3ivEXT_ovr_0(index, v[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttribI3ivEXT(index: UInt32; var v: Int32);
    begin
      z_VertexAttribI3ivEXT_ovr_0(index, v);
    end;
    public z_VertexAttribI3ivEXT_ovr_2 := GetFuncOrNil&<procedure(index: UInt32; v: IntPtr)>(z_VertexAttribI3ivEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttribI3ivEXT(index: UInt32; v: IntPtr);
    begin
      z_VertexAttribI3ivEXT_ovr_2(index, v);
    end;
    
    public z_VertexAttribI4ivEXT_adr := GetFuncAdr('glVertexAttribI4ivEXT');
    public z_VertexAttribI4ivEXT_ovr_0 := GetFuncOrNil&<procedure(index: UInt32; var v: Int32)>(z_VertexAttribI4ivEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttribI4ivEXT(index: UInt32; v: array of Int32);
    begin
      z_VertexAttribI4ivEXT_ovr_0(index, v[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttribI4ivEXT(index: UInt32; var v: Int32);
    begin
      z_VertexAttribI4ivEXT_ovr_0(index, v);
    end;
    public z_VertexAttribI4ivEXT_ovr_2 := GetFuncOrNil&<procedure(index: UInt32; v: IntPtr)>(z_VertexAttribI4ivEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttribI4ivEXT(index: UInt32; v: IntPtr);
    begin
      z_VertexAttribI4ivEXT_ovr_2(index, v);
    end;
    
    public z_VertexAttribI1uivEXT_adr := GetFuncAdr('glVertexAttribI1uivEXT');
    public z_VertexAttribI1uivEXT_ovr_0 := GetFuncOrNil&<procedure(index: UInt32; var v: UInt32)>(z_VertexAttribI1uivEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttribI1uivEXT(index: UInt32; v: array of UInt32);
    begin
      z_VertexAttribI1uivEXT_ovr_0(index, v[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttribI1uivEXT(index: UInt32; var v: UInt32);
    begin
      z_VertexAttribI1uivEXT_ovr_0(index, v);
    end;
    public z_VertexAttribI1uivEXT_ovr_2 := GetFuncOrNil&<procedure(index: UInt32; v: IntPtr)>(z_VertexAttribI1uivEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttribI1uivEXT(index: UInt32; v: IntPtr);
    begin
      z_VertexAttribI1uivEXT_ovr_2(index, v);
    end;
    
    public z_VertexAttribI2uivEXT_adr := GetFuncAdr('glVertexAttribI2uivEXT');
    public z_VertexAttribI2uivEXT_ovr_0 := GetFuncOrNil&<procedure(index: UInt32; var v: UInt32)>(z_VertexAttribI2uivEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttribI2uivEXT(index: UInt32; v: array of UInt32);
    begin
      z_VertexAttribI2uivEXT_ovr_0(index, v[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttribI2uivEXT(index: UInt32; var v: UInt32);
    begin
      z_VertexAttribI2uivEXT_ovr_0(index, v);
    end;
    public z_VertexAttribI2uivEXT_ovr_2 := GetFuncOrNil&<procedure(index: UInt32; v: IntPtr)>(z_VertexAttribI2uivEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttribI2uivEXT(index: UInt32; v: IntPtr);
    begin
      z_VertexAttribI2uivEXT_ovr_2(index, v);
    end;
    
    public z_VertexAttribI3uivEXT_adr := GetFuncAdr('glVertexAttribI3uivEXT');
    public z_VertexAttribI3uivEXT_ovr_0 := GetFuncOrNil&<procedure(index: UInt32; var v: UInt32)>(z_VertexAttribI3uivEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttribI3uivEXT(index: UInt32; v: array of UInt32);
    begin
      z_VertexAttribI3uivEXT_ovr_0(index, v[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttribI3uivEXT(index: UInt32; var v: UInt32);
    begin
      z_VertexAttribI3uivEXT_ovr_0(index, v);
    end;
    public z_VertexAttribI3uivEXT_ovr_2 := GetFuncOrNil&<procedure(index: UInt32; v: IntPtr)>(z_VertexAttribI3uivEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttribI3uivEXT(index: UInt32; v: IntPtr);
    begin
      z_VertexAttribI3uivEXT_ovr_2(index, v);
    end;
    
    public z_VertexAttribI4uivEXT_adr := GetFuncAdr('glVertexAttribI4uivEXT');
    public z_VertexAttribI4uivEXT_ovr_0 := GetFuncOrNil&<procedure(index: UInt32; var v: UInt32)>(z_VertexAttribI4uivEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttribI4uivEXT(index: UInt32; v: array of UInt32);
    begin
      z_VertexAttribI4uivEXT_ovr_0(index, v[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttribI4uivEXT(index: UInt32; var v: UInt32);
    begin
      z_VertexAttribI4uivEXT_ovr_0(index, v);
    end;
    public z_VertexAttribI4uivEXT_ovr_2 := GetFuncOrNil&<procedure(index: UInt32; v: IntPtr)>(z_VertexAttribI4uivEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttribI4uivEXT(index: UInt32; v: IntPtr);
    begin
      z_VertexAttribI4uivEXT_ovr_2(index, v);
    end;
    
    public z_VertexAttribI4bvEXT_adr := GetFuncAdr('glVertexAttribI4bvEXT');
    public z_VertexAttribI4bvEXT_ovr_0 := GetFuncOrNil&<procedure(index: UInt32; var v: SByte)>(z_VertexAttribI4bvEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttribI4bvEXT(index: UInt32; v: array of SByte);
    begin
      z_VertexAttribI4bvEXT_ovr_0(index, v[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttribI4bvEXT(index: UInt32; var v: SByte);
    begin
      z_VertexAttribI4bvEXT_ovr_0(index, v);
    end;
    public z_VertexAttribI4bvEXT_ovr_2 := GetFuncOrNil&<procedure(index: UInt32; v: IntPtr)>(z_VertexAttribI4bvEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttribI4bvEXT(index: UInt32; v: IntPtr);
    begin
      z_VertexAttribI4bvEXT_ovr_2(index, v);
    end;
    
    public z_VertexAttribI4svEXT_adr := GetFuncAdr('glVertexAttribI4svEXT');
    public z_VertexAttribI4svEXT_ovr_0 := GetFuncOrNil&<procedure(index: UInt32; var v: Int16)>(z_VertexAttribI4svEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttribI4svEXT(index: UInt32; v: array of Int16);
    begin
      z_VertexAttribI4svEXT_ovr_0(index, v[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttribI4svEXT(index: UInt32; var v: Int16);
    begin
      z_VertexAttribI4svEXT_ovr_0(index, v);
    end;
    public z_VertexAttribI4svEXT_ovr_2 := GetFuncOrNil&<procedure(index: UInt32; v: IntPtr)>(z_VertexAttribI4svEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttribI4svEXT(index: UInt32; v: IntPtr);
    begin
      z_VertexAttribI4svEXT_ovr_2(index, v);
    end;
    
    public z_VertexAttribI4ubvEXT_adr := GetFuncAdr('glVertexAttribI4ubvEXT');
    public z_VertexAttribI4ubvEXT_ovr_0 := GetFuncOrNil&<procedure(index: UInt32; var v: Byte)>(z_VertexAttribI4ubvEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttribI4ubvEXT(index: UInt32; v: array of Byte);
    begin
      z_VertexAttribI4ubvEXT_ovr_0(index, v[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttribI4ubvEXT(index: UInt32; var v: Byte);
    begin
      z_VertexAttribI4ubvEXT_ovr_0(index, v);
    end;
    public z_VertexAttribI4ubvEXT_ovr_2 := GetFuncOrNil&<procedure(index: UInt32; v: IntPtr)>(z_VertexAttribI4ubvEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttribI4ubvEXT(index: UInt32; v: IntPtr);
    begin
      z_VertexAttribI4ubvEXT_ovr_2(index, v);
    end;
    
    public z_VertexAttribI4usvEXT_adr := GetFuncAdr('glVertexAttribI4usvEXT');
    public z_VertexAttribI4usvEXT_ovr_0 := GetFuncOrNil&<procedure(index: UInt32; var v: UInt16)>(z_VertexAttribI4usvEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttribI4usvEXT(index: UInt32; v: array of UInt16);
    begin
      z_VertexAttribI4usvEXT_ovr_0(index, v[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttribI4usvEXT(index: UInt32; var v: UInt16);
    begin
      z_VertexAttribI4usvEXT_ovr_0(index, v);
    end;
    public z_VertexAttribI4usvEXT_ovr_2 := GetFuncOrNil&<procedure(index: UInt32; v: IntPtr)>(z_VertexAttribI4usvEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttribI4usvEXT(index: UInt32; v: IntPtr);
    begin
      z_VertexAttribI4usvEXT_ovr_2(index, v);
    end;
    
    public z_VertexAttribIPointerEXT_adr := GetFuncAdr('glVertexAttribIPointerEXT');
    public z_VertexAttribIPointerEXT_ovr_0 := GetFuncOrNil&<procedure(index: UInt32; size: Int32; &type: VertexAttribPointerType; stride: Int32; pointer: IntPtr)>(z_VertexAttribIPointerEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VertexAttribIPointerEXT(index: UInt32; size: Int32; &type: VertexAttribPointerType; stride: Int32; pointer: IntPtr);
    begin
      z_VertexAttribIPointerEXT_ovr_0(index, size, &type, stride, pointer);
    end;
    
    public z_GetVertexAttribIivEXT_adr := GetFuncAdr('glGetVertexAttribIivEXT');
    public z_GetVertexAttribIivEXT_ovr_0 := GetFuncOrNil&<procedure(index: UInt32; pname: VertexAttribEnum; var &params: Int32)>(z_GetVertexAttribIivEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetVertexAttribIivEXT(index: UInt32; pname: VertexAttribEnum; &params: array of Int32);
    begin
      z_GetVertexAttribIivEXT_ovr_0(index, pname, &params[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetVertexAttribIivEXT(index: UInt32; pname: VertexAttribEnum; var &params: Int32);
    begin
      z_GetVertexAttribIivEXT_ovr_0(index, pname, &params);
    end;
    public z_GetVertexAttribIivEXT_ovr_2 := GetFuncOrNil&<procedure(index: UInt32; pname: VertexAttribEnum; &params: IntPtr)>(z_GetVertexAttribIivEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetVertexAttribIivEXT(index: UInt32; pname: VertexAttribEnum; &params: IntPtr);
    begin
      z_GetVertexAttribIivEXT_ovr_2(index, pname, &params);
    end;
    
    public z_GetVertexAttribIuivEXT_adr := GetFuncAdr('glGetVertexAttribIuivEXT');
    public z_GetVertexAttribIuivEXT_ovr_0 := GetFuncOrNil&<procedure(index: UInt32; pname: VertexAttribEnum; var &params: UInt32)>(z_GetVertexAttribIuivEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetVertexAttribIuivEXT(index: UInt32; pname: VertexAttribEnum; &params: array of UInt32);
    begin
      z_GetVertexAttribIuivEXT_ovr_0(index, pname, &params[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetVertexAttribIuivEXT(index: UInt32; pname: VertexAttribEnum; var &params: UInt32);
    begin
      z_GetVertexAttribIuivEXT_ovr_0(index, pname, &params);
    end;
    public z_GetVertexAttribIuivEXT_ovr_2 := GetFuncOrNil&<procedure(index: UInt32; pname: VertexAttribEnum; &params: IntPtr)>(z_GetVertexAttribIuivEXT_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetVertexAttribIuivEXT(index: UInt32; pname: VertexAttribEnum; &params: IntPtr);
    begin
      z_GetVertexAttribIuivEXT_ovr_2(index, pname, &params);
    end;
    
  end;
  
  glVideoCaptureNV = sealed class
    public static function GetFuncAdr([MarshalAs(UnmanagedType.LPStr)] lpszProc: string): IntPtr;
    external 'opengl32.dll' name 'wglGetProcAddress';
    public static function GetFuncOrNil<T>(fadr: IntPtr) :=
    fadr=IntPtr.Zero ? default(T) :
    Marshal.GetDelegateForFunctionPointer&<T>(fadr);
    
    public z_BeginVideoCaptureNV_adr := GetFuncAdr('glBeginVideoCaptureNV');
    public z_BeginVideoCaptureNV_ovr_0 := GetFuncOrNil&<procedure(video_capture_slot: UInt32)>(z_BeginVideoCaptureNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure BeginVideoCaptureNV(video_capture_slot: UInt32);
    begin
      z_BeginVideoCaptureNV_ovr_0(video_capture_slot);
    end;
    
    public z_BindVideoCaptureStreamBufferNV_adr := GetFuncAdr('glBindVideoCaptureStreamBufferNV');
    public z_BindVideoCaptureStreamBufferNV_ovr_0 := GetFuncOrNil&<procedure(video_capture_slot: UInt32; stream: UInt32; frame_region: DummyEnum; offset: IntPtr)>(z_BindVideoCaptureStreamBufferNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure BindVideoCaptureStreamBufferNV(video_capture_slot: UInt32; stream: UInt32; frame_region: DummyEnum; offset: IntPtr);
    begin
      z_BindVideoCaptureStreamBufferNV_ovr_0(video_capture_slot, stream, frame_region, offset);
    end;
    
    public z_BindVideoCaptureStreamTextureNV_adr := GetFuncAdr('glBindVideoCaptureStreamTextureNV');
    public z_BindVideoCaptureStreamTextureNV_ovr_0 := GetFuncOrNil&<procedure(video_capture_slot: UInt32; stream: UInt32; frame_region: DummyEnum; target: DummyEnum; texture: UInt32)>(z_BindVideoCaptureStreamTextureNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure BindVideoCaptureStreamTextureNV(video_capture_slot: UInt32; stream: UInt32; frame_region: DummyEnum; target: DummyEnum; texture: UInt32);
    begin
      z_BindVideoCaptureStreamTextureNV_ovr_0(video_capture_slot, stream, frame_region, target, texture);
    end;
    
    public z_EndVideoCaptureNV_adr := GetFuncAdr('glEndVideoCaptureNV');
    public z_EndVideoCaptureNV_ovr_0 := GetFuncOrNil&<procedure(video_capture_slot: UInt32)>(z_EndVideoCaptureNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure EndVideoCaptureNV(video_capture_slot: UInt32);
    begin
      z_EndVideoCaptureNV_ovr_0(video_capture_slot);
    end;
    
    public z_GetVideoCaptureivNV_adr := GetFuncAdr('glGetVideoCaptureivNV');
    public z_GetVideoCaptureivNV_ovr_0 := GetFuncOrNil&<procedure(video_capture_slot: UInt32; pname: DummyEnum; var &params: Int32)>(z_GetVideoCaptureivNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetVideoCaptureivNV(video_capture_slot: UInt32; pname: DummyEnum; &params: array of Int32);
    begin
      z_GetVideoCaptureivNV_ovr_0(video_capture_slot, pname, &params[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetVideoCaptureivNV(video_capture_slot: UInt32; pname: DummyEnum; var &params: Int32);
    begin
      z_GetVideoCaptureivNV_ovr_0(video_capture_slot, pname, &params);
    end;
    public z_GetVideoCaptureivNV_ovr_2 := GetFuncOrNil&<procedure(video_capture_slot: UInt32; pname: DummyEnum; &params: IntPtr)>(z_GetVideoCaptureivNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetVideoCaptureivNV(video_capture_slot: UInt32; pname: DummyEnum; &params: IntPtr);
    begin
      z_GetVideoCaptureivNV_ovr_2(video_capture_slot, pname, &params);
    end;
    
    public z_GetVideoCaptureStreamivNV_adr := GetFuncAdr('glGetVideoCaptureStreamivNV');
    public z_GetVideoCaptureStreamivNV_ovr_0 := GetFuncOrNil&<procedure(video_capture_slot: UInt32; stream: UInt32; pname: DummyEnum; var &params: Int32)>(z_GetVideoCaptureStreamivNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetVideoCaptureStreamivNV(video_capture_slot: UInt32; stream: UInt32; pname: DummyEnum; &params: array of Int32);
    begin
      z_GetVideoCaptureStreamivNV_ovr_0(video_capture_slot, stream, pname, &params[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetVideoCaptureStreamivNV(video_capture_slot: UInt32; stream: UInt32; pname: DummyEnum; var &params: Int32);
    begin
      z_GetVideoCaptureStreamivNV_ovr_0(video_capture_slot, stream, pname, &params);
    end;
    public z_GetVideoCaptureStreamivNV_ovr_2 := GetFuncOrNil&<procedure(video_capture_slot: UInt32; stream: UInt32; pname: DummyEnum; &params: IntPtr)>(z_GetVideoCaptureStreamivNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetVideoCaptureStreamivNV(video_capture_slot: UInt32; stream: UInt32; pname: DummyEnum; &params: IntPtr);
    begin
      z_GetVideoCaptureStreamivNV_ovr_2(video_capture_slot, stream, pname, &params);
    end;
    
    public z_GetVideoCaptureStreamfvNV_adr := GetFuncAdr('glGetVideoCaptureStreamfvNV');
    public z_GetVideoCaptureStreamfvNV_ovr_0 := GetFuncOrNil&<procedure(video_capture_slot: UInt32; stream: UInt32; pname: DummyEnum; var &params: single)>(z_GetVideoCaptureStreamfvNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetVideoCaptureStreamfvNV(video_capture_slot: UInt32; stream: UInt32; pname: DummyEnum; &params: array of single);
    begin
      z_GetVideoCaptureStreamfvNV_ovr_0(video_capture_slot, stream, pname, &params[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetVideoCaptureStreamfvNV(video_capture_slot: UInt32; stream: UInt32; pname: DummyEnum; var &params: single);
    begin
      z_GetVideoCaptureStreamfvNV_ovr_0(video_capture_slot, stream, pname, &params);
    end;
    public z_GetVideoCaptureStreamfvNV_ovr_2 := GetFuncOrNil&<procedure(video_capture_slot: UInt32; stream: UInt32; pname: DummyEnum; &params: IntPtr)>(z_GetVideoCaptureStreamfvNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetVideoCaptureStreamfvNV(video_capture_slot: UInt32; stream: UInt32; pname: DummyEnum; &params: IntPtr);
    begin
      z_GetVideoCaptureStreamfvNV_ovr_2(video_capture_slot, stream, pname, &params);
    end;
    
    public z_GetVideoCaptureStreamdvNV_adr := GetFuncAdr('glGetVideoCaptureStreamdvNV');
    public z_GetVideoCaptureStreamdvNV_ovr_0 := GetFuncOrNil&<procedure(video_capture_slot: UInt32; stream: UInt32; pname: DummyEnum; var &params: real)>(z_GetVideoCaptureStreamdvNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetVideoCaptureStreamdvNV(video_capture_slot: UInt32; stream: UInt32; pname: DummyEnum; &params: array of real);
    begin
      z_GetVideoCaptureStreamdvNV_ovr_0(video_capture_slot, stream, pname, &params[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetVideoCaptureStreamdvNV(video_capture_slot: UInt32; stream: UInt32; pname: DummyEnum; var &params: real);
    begin
      z_GetVideoCaptureStreamdvNV_ovr_0(video_capture_slot, stream, pname, &params);
    end;
    public z_GetVideoCaptureStreamdvNV_ovr_2 := GetFuncOrNil&<procedure(video_capture_slot: UInt32; stream: UInt32; pname: DummyEnum; &params: IntPtr)>(z_GetVideoCaptureStreamdvNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetVideoCaptureStreamdvNV(video_capture_slot: UInt32; stream: UInt32; pname: DummyEnum; &params: IntPtr);
    begin
      z_GetVideoCaptureStreamdvNV_ovr_2(video_capture_slot, stream, pname, &params);
    end;
    
    public z_VideoCaptureNV_adr := GetFuncAdr('glVideoCaptureNV');
    public z_VideoCaptureNV_ovr_0 := GetFuncOrNil&<function(video_capture_slot: UInt32; var sequence_num: UInt32; var capture_time: UInt64): DummyEnum>(z_VideoCaptureNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function VideoCaptureNV(video_capture_slot: UInt32; sequence_num: array of UInt32; capture_time: array of UInt64): DummyEnum;
    begin
      Result := z_VideoCaptureNV_ovr_0(video_capture_slot, sequence_num[0], capture_time[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function VideoCaptureNV(video_capture_slot: UInt32; sequence_num: array of UInt32; var capture_time: UInt64): DummyEnum;
    begin
      Result := z_VideoCaptureNV_ovr_0(video_capture_slot, sequence_num[0], capture_time);
    end;
    public z_VideoCaptureNV_ovr_2 := GetFuncOrNil&<function(video_capture_slot: UInt32; var sequence_num: UInt32; capture_time: IntPtr): DummyEnum>(z_VideoCaptureNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function VideoCaptureNV(video_capture_slot: UInt32; sequence_num: array of UInt32; capture_time: IntPtr): DummyEnum;
    begin
      Result := z_VideoCaptureNV_ovr_2(video_capture_slot, sequence_num[0], capture_time);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function VideoCaptureNV(video_capture_slot: UInt32; var sequence_num: UInt32; capture_time: array of UInt64): DummyEnum;
    begin
      Result := z_VideoCaptureNV_ovr_0(video_capture_slot, sequence_num, capture_time[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function VideoCaptureNV(video_capture_slot: UInt32; var sequence_num: UInt32; var capture_time: UInt64): DummyEnum;
    begin
      Result := z_VideoCaptureNV_ovr_0(video_capture_slot, sequence_num, capture_time);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function VideoCaptureNV(video_capture_slot: UInt32; var sequence_num: UInt32; capture_time: IntPtr): DummyEnum;
    begin
      Result := z_VideoCaptureNV_ovr_2(video_capture_slot, sequence_num, capture_time);
    end;
    public z_VideoCaptureNV_ovr_6 := GetFuncOrNil&<function(video_capture_slot: UInt32; sequence_num: IntPtr; var capture_time: UInt64): DummyEnum>(z_VideoCaptureNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function VideoCaptureNV(video_capture_slot: UInt32; sequence_num: IntPtr; capture_time: array of UInt64): DummyEnum;
    begin
      Result := z_VideoCaptureNV_ovr_6(video_capture_slot, sequence_num, capture_time[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function VideoCaptureNV(video_capture_slot: UInt32; sequence_num: IntPtr; var capture_time: UInt64): DummyEnum;
    begin
      Result := z_VideoCaptureNV_ovr_6(video_capture_slot, sequence_num, capture_time);
    end;
    public z_VideoCaptureNV_ovr_8 := GetFuncOrNil&<function(video_capture_slot: UInt32; sequence_num: IntPtr; capture_time: IntPtr): DummyEnum>(z_VideoCaptureNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function VideoCaptureNV(video_capture_slot: UInt32; sequence_num: IntPtr; capture_time: IntPtr): DummyEnum;
    begin
      Result := z_VideoCaptureNV_ovr_8(video_capture_slot, sequence_num, capture_time);
    end;
    
    public z_VideoCaptureStreamParameterivNV_adr := GetFuncAdr('glVideoCaptureStreamParameterivNV');
    public z_VideoCaptureStreamParameterivNV_ovr_0 := GetFuncOrNil&<procedure(video_capture_slot: UInt32; stream: UInt32; pname: DummyEnum; var &params: Int32)>(z_VideoCaptureStreamParameterivNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VideoCaptureStreamParameterivNV(video_capture_slot: UInt32; stream: UInt32; pname: DummyEnum; &params: array of Int32);
    begin
      z_VideoCaptureStreamParameterivNV_ovr_0(video_capture_slot, stream, pname, &params[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VideoCaptureStreamParameterivNV(video_capture_slot: UInt32; stream: UInt32; pname: DummyEnum; var &params: Int32);
    begin
      z_VideoCaptureStreamParameterivNV_ovr_0(video_capture_slot, stream, pname, &params);
    end;
    public z_VideoCaptureStreamParameterivNV_ovr_2 := GetFuncOrNil&<procedure(video_capture_slot: UInt32; stream: UInt32; pname: DummyEnum; &params: IntPtr)>(z_VideoCaptureStreamParameterivNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VideoCaptureStreamParameterivNV(video_capture_slot: UInt32; stream: UInt32; pname: DummyEnum; &params: IntPtr);
    begin
      z_VideoCaptureStreamParameterivNV_ovr_2(video_capture_slot, stream, pname, &params);
    end;
    
    public z_VideoCaptureStreamParameterfvNV_adr := GetFuncAdr('glVideoCaptureStreamParameterfvNV');
    public z_VideoCaptureStreamParameterfvNV_ovr_0 := GetFuncOrNil&<procedure(video_capture_slot: UInt32; stream: UInt32; pname: DummyEnum; var &params: single)>(z_VideoCaptureStreamParameterfvNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VideoCaptureStreamParameterfvNV(video_capture_slot: UInt32; stream: UInt32; pname: DummyEnum; &params: array of single);
    begin
      z_VideoCaptureStreamParameterfvNV_ovr_0(video_capture_slot, stream, pname, &params[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VideoCaptureStreamParameterfvNV(video_capture_slot: UInt32; stream: UInt32; pname: DummyEnum; var &params: single);
    begin
      z_VideoCaptureStreamParameterfvNV_ovr_0(video_capture_slot, stream, pname, &params);
    end;
    public z_VideoCaptureStreamParameterfvNV_ovr_2 := GetFuncOrNil&<procedure(video_capture_slot: UInt32; stream: UInt32; pname: DummyEnum; &params: IntPtr)>(z_VideoCaptureStreamParameterfvNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VideoCaptureStreamParameterfvNV(video_capture_slot: UInt32; stream: UInt32; pname: DummyEnum; &params: IntPtr);
    begin
      z_VideoCaptureStreamParameterfvNV_ovr_2(video_capture_slot, stream, pname, &params);
    end;
    
    public z_VideoCaptureStreamParameterdvNV_adr := GetFuncAdr('glVideoCaptureStreamParameterdvNV');
    public z_VideoCaptureStreamParameterdvNV_ovr_0 := GetFuncOrNil&<procedure(video_capture_slot: UInt32; stream: UInt32; pname: DummyEnum; var &params: real)>(z_VideoCaptureStreamParameterdvNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VideoCaptureStreamParameterdvNV(video_capture_slot: UInt32; stream: UInt32; pname: DummyEnum; &params: array of real);
    begin
      z_VideoCaptureStreamParameterdvNV_ovr_0(video_capture_slot, stream, pname, &params[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VideoCaptureStreamParameterdvNV(video_capture_slot: UInt32; stream: UInt32; pname: DummyEnum; var &params: real);
    begin
      z_VideoCaptureStreamParameterdvNV_ovr_0(video_capture_slot, stream, pname, &params);
    end;
    public z_VideoCaptureStreamParameterdvNV_ovr_2 := GetFuncOrNil&<procedure(video_capture_slot: UInt32; stream: UInt32; pname: DummyEnum; &params: IntPtr)>(z_VideoCaptureStreamParameterdvNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure VideoCaptureStreamParameterdvNV(video_capture_slot: UInt32; stream: UInt32; pname: DummyEnum; &params: IntPtr);
    begin
      z_VideoCaptureStreamParameterdvNV_ovr_2(video_capture_slot, stream, pname, &params);
    end;
    
  end;
  
  glViewportSwizzleNV = sealed class
    public static function GetFuncAdr([MarshalAs(UnmanagedType.LPStr)] lpszProc: string): IntPtr;
    external 'opengl32.dll' name 'wglGetProcAddress';
    public static function GetFuncOrNil<T>(fadr: IntPtr) :=
    fadr=IntPtr.Zero ? default(T) :
    Marshal.GetDelegateForFunctionPointer&<T>(fadr);
    
    public z_ViewportSwizzleNV_adr := GetFuncAdr('glViewportSwizzleNV');
    public z_ViewportSwizzleNV_ovr_0 := GetFuncOrNil&<procedure(index: UInt32; swizzlex: DummyEnum; swizzley: DummyEnum; swizzlez: DummyEnum; swizzlew: DummyEnum)>(z_ViewportSwizzleNV_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ViewportSwizzleNV(index: UInt32; swizzlex: DummyEnum; swizzley: DummyEnum; swizzlez: DummyEnum; swizzlew: DummyEnum);
    begin
      z_ViewportSwizzleNV_ovr_0(index, swizzlex, swizzley, swizzlez, swizzlew);
    end;
    
  end;
  
  glByteCoordinatesOES = sealed class
    public static function GetFuncAdr([MarshalAs(UnmanagedType.LPStr)] lpszProc: string): IntPtr;
    external 'opengl32.dll' name 'wglGetProcAddress';
    public static function GetFuncOrNil<T>(fadr: IntPtr) :=
    fadr=IntPtr.Zero ? default(T) :
    Marshal.GetDelegateForFunctionPointer&<T>(fadr);
    
    public z_MultiTexCoord1bOES_adr := GetFuncAdr('glMultiTexCoord1bOES');
    public z_MultiTexCoord1bOES_ovr_0 := GetFuncOrNil&<procedure(texture: TextureUnit; s: SByte)>(z_MultiTexCoord1bOES_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiTexCoord1bOES(texture: TextureUnit; s: SByte);
    begin
      z_MultiTexCoord1bOES_ovr_0(texture, s);
    end;
    
    public z_MultiTexCoord1bvOES_adr := GetFuncAdr('glMultiTexCoord1bvOES');
    public z_MultiTexCoord1bvOES_ovr_0 := GetFuncOrNil&<procedure(texture: TextureUnit; var coords: SByte)>(z_MultiTexCoord1bvOES_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiTexCoord1bvOES(texture: TextureUnit; coords: array of SByte);
    begin
      z_MultiTexCoord1bvOES_ovr_0(texture, coords[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiTexCoord1bvOES(texture: TextureUnit; var coords: SByte);
    begin
      z_MultiTexCoord1bvOES_ovr_0(texture, coords);
    end;
    public z_MultiTexCoord1bvOES_ovr_2 := GetFuncOrNil&<procedure(texture: TextureUnit; coords: IntPtr)>(z_MultiTexCoord1bvOES_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiTexCoord1bvOES(texture: TextureUnit; coords: IntPtr);
    begin
      z_MultiTexCoord1bvOES_ovr_2(texture, coords);
    end;
    
    public z_MultiTexCoord2bOES_adr := GetFuncAdr('glMultiTexCoord2bOES');
    public z_MultiTexCoord2bOES_ovr_0 := GetFuncOrNil&<procedure(texture: TextureUnit; s: SByte; t: SByte)>(z_MultiTexCoord2bOES_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiTexCoord2bOES(texture: TextureUnit; s: SByte; t: SByte);
    begin
      z_MultiTexCoord2bOES_ovr_0(texture, s, t);
    end;
    
    public z_MultiTexCoord2bvOES_adr := GetFuncAdr('glMultiTexCoord2bvOES');
    public z_MultiTexCoord2bvOES_ovr_0 := GetFuncOrNil&<procedure(texture: TextureUnit; var coords: SByte)>(z_MultiTexCoord2bvOES_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiTexCoord2bvOES(texture: TextureUnit; coords: array of SByte);
    begin
      z_MultiTexCoord2bvOES_ovr_0(texture, coords[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiTexCoord2bvOES(texture: TextureUnit; var coords: SByte);
    begin
      z_MultiTexCoord2bvOES_ovr_0(texture, coords);
    end;
    public z_MultiTexCoord2bvOES_ovr_2 := GetFuncOrNil&<procedure(texture: TextureUnit; coords: IntPtr)>(z_MultiTexCoord2bvOES_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiTexCoord2bvOES(texture: TextureUnit; coords: IntPtr);
    begin
      z_MultiTexCoord2bvOES_ovr_2(texture, coords);
    end;
    
    public z_MultiTexCoord3bOES_adr := GetFuncAdr('glMultiTexCoord3bOES');
    public z_MultiTexCoord3bOES_ovr_0 := GetFuncOrNil&<procedure(texture: TextureUnit; s: SByte; t: SByte; r: SByte)>(z_MultiTexCoord3bOES_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiTexCoord3bOES(texture: TextureUnit; s: SByte; t: SByte; r: SByte);
    begin
      z_MultiTexCoord3bOES_ovr_0(texture, s, t, r);
    end;
    
    public z_MultiTexCoord3bvOES_adr := GetFuncAdr('glMultiTexCoord3bvOES');
    public z_MultiTexCoord3bvOES_ovr_0 := GetFuncOrNil&<procedure(texture: TextureUnit; var coords: SByte)>(z_MultiTexCoord3bvOES_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiTexCoord3bvOES(texture: TextureUnit; coords: array of SByte);
    begin
      z_MultiTexCoord3bvOES_ovr_0(texture, coords[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiTexCoord3bvOES(texture: TextureUnit; var coords: SByte);
    begin
      z_MultiTexCoord3bvOES_ovr_0(texture, coords);
    end;
    public z_MultiTexCoord3bvOES_ovr_2 := GetFuncOrNil&<procedure(texture: TextureUnit; coords: IntPtr)>(z_MultiTexCoord3bvOES_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiTexCoord3bvOES(texture: TextureUnit; coords: IntPtr);
    begin
      z_MultiTexCoord3bvOES_ovr_2(texture, coords);
    end;
    
    public z_MultiTexCoord4bOES_adr := GetFuncAdr('glMultiTexCoord4bOES');
    public z_MultiTexCoord4bOES_ovr_0 := GetFuncOrNil&<procedure(texture: TextureUnit; s: SByte; t: SByte; r: SByte; q: SByte)>(z_MultiTexCoord4bOES_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiTexCoord4bOES(texture: TextureUnit; s: SByte; t: SByte; r: SByte; q: SByte);
    begin
      z_MultiTexCoord4bOES_ovr_0(texture, s, t, r, q);
    end;
    
    public z_MultiTexCoord4bvOES_adr := GetFuncAdr('glMultiTexCoord4bvOES');
    public z_MultiTexCoord4bvOES_ovr_0 := GetFuncOrNil&<procedure(texture: TextureUnit; var coords: SByte)>(z_MultiTexCoord4bvOES_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiTexCoord4bvOES(texture: TextureUnit; coords: array of SByte);
    begin
      z_MultiTexCoord4bvOES_ovr_0(texture, coords[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiTexCoord4bvOES(texture: TextureUnit; var coords: SByte);
    begin
      z_MultiTexCoord4bvOES_ovr_0(texture, coords);
    end;
    public z_MultiTexCoord4bvOES_ovr_2 := GetFuncOrNil&<procedure(texture: TextureUnit; coords: IntPtr)>(z_MultiTexCoord4bvOES_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiTexCoord4bvOES(texture: TextureUnit; coords: IntPtr);
    begin
      z_MultiTexCoord4bvOES_ovr_2(texture, coords);
    end;
    
    public z_TexCoord1bOES_adr := GetFuncAdr('glTexCoord1bOES');
    public z_TexCoord1bOES_ovr_0 := GetFuncOrNil&<procedure(s: SByte)>(z_TexCoord1bOES_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TexCoord1bOES(s: SByte);
    begin
      z_TexCoord1bOES_ovr_0(s);
    end;
    
    public z_TexCoord1bvOES_adr := GetFuncAdr('glTexCoord1bvOES');
    public z_TexCoord1bvOES_ovr_0 := GetFuncOrNil&<procedure(var coords: SByte)>(z_TexCoord1bvOES_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TexCoord1bvOES(coords: array of SByte);
    begin
      z_TexCoord1bvOES_ovr_0(coords[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TexCoord1bvOES(var coords: SByte);
    begin
      z_TexCoord1bvOES_ovr_0(coords);
    end;
    public z_TexCoord1bvOES_ovr_2 := GetFuncOrNil&<procedure(coords: IntPtr)>(z_TexCoord1bvOES_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TexCoord1bvOES(coords: IntPtr);
    begin
      z_TexCoord1bvOES_ovr_2(coords);
    end;
    
    public z_TexCoord2bOES_adr := GetFuncAdr('glTexCoord2bOES');
    public z_TexCoord2bOES_ovr_0 := GetFuncOrNil&<procedure(s: SByte; t: SByte)>(z_TexCoord2bOES_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TexCoord2bOES(s: SByte; t: SByte);
    begin
      z_TexCoord2bOES_ovr_0(s, t);
    end;
    
    public z_TexCoord2bvOES_adr := GetFuncAdr('glTexCoord2bvOES');
    public z_TexCoord2bvOES_ovr_0 := GetFuncOrNil&<procedure(var coords: SByte)>(z_TexCoord2bvOES_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TexCoord2bvOES(coords: array of SByte);
    begin
      z_TexCoord2bvOES_ovr_0(coords[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TexCoord2bvOES(var coords: SByte);
    begin
      z_TexCoord2bvOES_ovr_0(coords);
    end;
    public z_TexCoord2bvOES_ovr_2 := GetFuncOrNil&<procedure(coords: IntPtr)>(z_TexCoord2bvOES_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TexCoord2bvOES(coords: IntPtr);
    begin
      z_TexCoord2bvOES_ovr_2(coords);
    end;
    
    public z_TexCoord3bOES_adr := GetFuncAdr('glTexCoord3bOES');
    public z_TexCoord3bOES_ovr_0 := GetFuncOrNil&<procedure(s: SByte; t: SByte; r: SByte)>(z_TexCoord3bOES_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TexCoord3bOES(s: SByte; t: SByte; r: SByte);
    begin
      z_TexCoord3bOES_ovr_0(s, t, r);
    end;
    
    public z_TexCoord3bvOES_adr := GetFuncAdr('glTexCoord3bvOES');
    public z_TexCoord3bvOES_ovr_0 := GetFuncOrNil&<procedure(var coords: SByte)>(z_TexCoord3bvOES_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TexCoord3bvOES(coords: array of SByte);
    begin
      z_TexCoord3bvOES_ovr_0(coords[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TexCoord3bvOES(var coords: SByte);
    begin
      z_TexCoord3bvOES_ovr_0(coords);
    end;
    public z_TexCoord3bvOES_ovr_2 := GetFuncOrNil&<procedure(coords: IntPtr)>(z_TexCoord3bvOES_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TexCoord3bvOES(coords: IntPtr);
    begin
      z_TexCoord3bvOES_ovr_2(coords);
    end;
    
    public z_TexCoord4bOES_adr := GetFuncAdr('glTexCoord4bOES');
    public z_TexCoord4bOES_ovr_0 := GetFuncOrNil&<procedure(s: SByte; t: SByte; r: SByte; q: SByte)>(z_TexCoord4bOES_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TexCoord4bOES(s: SByte; t: SByte; r: SByte; q: SByte);
    begin
      z_TexCoord4bOES_ovr_0(s, t, r, q);
    end;
    
    public z_TexCoord4bvOES_adr := GetFuncAdr('glTexCoord4bvOES');
    public z_TexCoord4bvOES_ovr_0 := GetFuncOrNil&<procedure(var coords: SByte)>(z_TexCoord4bvOES_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TexCoord4bvOES(coords: array of SByte);
    begin
      z_TexCoord4bvOES_ovr_0(coords[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TexCoord4bvOES(var coords: SByte);
    begin
      z_TexCoord4bvOES_ovr_0(coords);
    end;
    public z_TexCoord4bvOES_ovr_2 := GetFuncOrNil&<procedure(coords: IntPtr)>(z_TexCoord4bvOES_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TexCoord4bvOES(coords: IntPtr);
    begin
      z_TexCoord4bvOES_ovr_2(coords);
    end;
    
    public z_Vertex2bOES_adr := GetFuncAdr('glVertex2bOES');
    public z_Vertex2bOES_ovr_0 := GetFuncOrNil&<procedure(x: SByte; y: SByte)>(z_Vertex2bOES_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Vertex2bOES(x: SByte; y: SByte);
    begin
      z_Vertex2bOES_ovr_0(x, y);
    end;
    
    public z_Vertex2bvOES_adr := GetFuncAdr('glVertex2bvOES');
    public z_Vertex2bvOES_ovr_0 := GetFuncOrNil&<procedure(var coords: SByte)>(z_Vertex2bvOES_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Vertex2bvOES(coords: array of SByte);
    begin
      z_Vertex2bvOES_ovr_0(coords[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Vertex2bvOES(var coords: SByte);
    begin
      z_Vertex2bvOES_ovr_0(coords);
    end;
    public z_Vertex2bvOES_ovr_2 := GetFuncOrNil&<procedure(coords: IntPtr)>(z_Vertex2bvOES_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Vertex2bvOES(coords: IntPtr);
    begin
      z_Vertex2bvOES_ovr_2(coords);
    end;
    
    public z_Vertex3bOES_adr := GetFuncAdr('glVertex3bOES');
    public z_Vertex3bOES_ovr_0 := GetFuncOrNil&<procedure(x: SByte; y: SByte; z: SByte)>(z_Vertex3bOES_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Vertex3bOES(x: SByte; y: SByte; z: SByte);
    begin
      z_Vertex3bOES_ovr_0(x, y, z);
    end;
    
    public z_Vertex3bvOES_adr := GetFuncAdr('glVertex3bvOES');
    public z_Vertex3bvOES_ovr_0 := GetFuncOrNil&<procedure(var coords: SByte)>(z_Vertex3bvOES_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Vertex3bvOES(coords: array of SByte);
    begin
      z_Vertex3bvOES_ovr_0(coords[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Vertex3bvOES(var coords: SByte);
    begin
      z_Vertex3bvOES_ovr_0(coords);
    end;
    public z_Vertex3bvOES_ovr_2 := GetFuncOrNil&<procedure(coords: IntPtr)>(z_Vertex3bvOES_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Vertex3bvOES(coords: IntPtr);
    begin
      z_Vertex3bvOES_ovr_2(coords);
    end;
    
    public z_Vertex4bOES_adr := GetFuncAdr('glVertex4bOES');
    public z_Vertex4bOES_ovr_0 := GetFuncOrNil&<procedure(x: SByte; y: SByte; z: SByte; w: SByte)>(z_Vertex4bOES_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Vertex4bOES(x: SByte; y: SByte; z: SByte; w: SByte);
    begin
      z_Vertex4bOES_ovr_0(x, y, z, w);
    end;
    
    public z_Vertex4bvOES_adr := GetFuncAdr('glVertex4bvOES');
    public z_Vertex4bvOES_ovr_0 := GetFuncOrNil&<procedure(var coords: SByte)>(z_Vertex4bvOES_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Vertex4bvOES(coords: array of SByte);
    begin
      z_Vertex4bvOES_ovr_0(coords[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Vertex4bvOES(var coords: SByte);
    begin
      z_Vertex4bvOES_ovr_0(coords);
    end;
    public z_Vertex4bvOES_ovr_2 := GetFuncOrNil&<procedure(coords: IntPtr)>(z_Vertex4bvOES_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Vertex4bvOES(coords: IntPtr);
    begin
      z_Vertex4bvOES_ovr_2(coords);
    end;
    
  end;
  
  glFixedPointOES = sealed class
    public static function GetFuncAdr([MarshalAs(UnmanagedType.LPStr)] lpszProc: string): IntPtr;
    external 'opengl32.dll' name 'wglGetProcAddress';
    public static function GetFuncOrNil<T>(fadr: IntPtr) :=
    fadr=IntPtr.Zero ? default(T) :
    Marshal.GetDelegateForFunctionPointer&<T>(fadr);
    
    public z_AlphaFuncxOES_adr := GetFuncAdr('glAlphaFuncxOES');
    public z_AlphaFuncxOES_ovr_0 := GetFuncOrNil&<procedure(func: AlphaFunction; ref: Fixed)>(z_AlphaFuncxOES_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure AlphaFuncxOES(func: AlphaFunction; ref: Fixed);
    begin
      z_AlphaFuncxOES_ovr_0(func, ref);
    end;
    
    public z_ClearColorxOES_adr := GetFuncAdr('glClearColorxOES');
    public z_ClearColorxOES_ovr_0 := GetFuncOrNil&<procedure(red: Fixed; green: Fixed; blue: Fixed; alpha: Fixed)>(z_ClearColorxOES_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ClearColorxOES(red: Fixed; green: Fixed; blue: Fixed; alpha: Fixed);
    begin
      z_ClearColorxOES_ovr_0(red, green, blue, alpha);
    end;
    
    public z_ClearDepthxOES_adr := GetFuncAdr('glClearDepthxOES');
    public z_ClearDepthxOES_ovr_0 := GetFuncOrNil&<procedure(depth: Fixed)>(z_ClearDepthxOES_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ClearDepthxOES(depth: Fixed);
    begin
      z_ClearDepthxOES_ovr_0(depth);
    end;
    
    public z_ClipPlanexOES_adr := GetFuncAdr('glClipPlanexOES');
    public z_ClipPlanexOES_ovr_0 := GetFuncOrNil&<procedure(plane: ClipPlaneName; var equation: Fixed)>(z_ClipPlanexOES_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ClipPlanexOES(plane: ClipPlaneName; equation: array of Fixed);
    begin
      z_ClipPlanexOES_ovr_0(plane, equation[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ClipPlanexOES(plane: ClipPlaneName; var equation: Fixed);
    begin
      z_ClipPlanexOES_ovr_0(plane, equation);
    end;
    public z_ClipPlanexOES_ovr_2 := GetFuncOrNil&<procedure(plane: ClipPlaneName; equation: IntPtr)>(z_ClipPlanexOES_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ClipPlanexOES(plane: ClipPlaneName; equation: IntPtr);
    begin
      z_ClipPlanexOES_ovr_2(plane, equation);
    end;
    
    public z_Color4xOES_adr := GetFuncAdr('glColor4xOES');
    public z_Color4xOES_ovr_0 := GetFuncOrNil&<procedure(red: Fixed; green: Fixed; blue: Fixed; alpha: Fixed)>(z_Color4xOES_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Color4xOES(red: Fixed; green: Fixed; blue: Fixed; alpha: Fixed);
    begin
      z_Color4xOES_ovr_0(red, green, blue, alpha);
    end;
    
    public z_DepthRangexOES_adr := GetFuncAdr('glDepthRangexOES');
    public z_DepthRangexOES_ovr_0 := GetFuncOrNil&<procedure(n: Fixed; f: Fixed)>(z_DepthRangexOES_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure DepthRangexOES(n: Fixed; f: Fixed);
    begin
      z_DepthRangexOES_ovr_0(n, f);
    end;
    
    public z_FogxOES_adr := GetFuncAdr('glFogxOES');
    public z_FogxOES_ovr_0 := GetFuncOrNil&<procedure(pname: FogPName; param: Fixed)>(z_FogxOES_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure FogxOES(pname: FogPName; param: Fixed);
    begin
      z_FogxOES_ovr_0(pname, param);
    end;
    
    public z_FogxvOES_adr := GetFuncAdr('glFogxvOES');
    public z_FogxvOES_ovr_0 := GetFuncOrNil&<procedure(pname: FogPName; var param: Fixed)>(z_FogxvOES_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure FogxvOES(pname: FogPName; param: array of Fixed);
    begin
      z_FogxvOES_ovr_0(pname, param[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure FogxvOES(pname: FogPName; var param: Fixed);
    begin
      z_FogxvOES_ovr_0(pname, param);
    end;
    public z_FogxvOES_ovr_2 := GetFuncOrNil&<procedure(pname: FogPName; param: IntPtr)>(z_FogxvOES_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure FogxvOES(pname: FogPName; param: IntPtr);
    begin
      z_FogxvOES_ovr_2(pname, param);
    end;
    
    public z_FrustumxOES_adr := GetFuncAdr('glFrustumxOES');
    public z_FrustumxOES_ovr_0 := GetFuncOrNil&<procedure(l: Fixed; r: Fixed; b: Fixed; t: Fixed; n: Fixed; f: Fixed)>(z_FrustumxOES_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure FrustumxOES(l: Fixed; r: Fixed; b: Fixed; t: Fixed; n: Fixed; f: Fixed);
    begin
      z_FrustumxOES_ovr_0(l, r, b, t, n, f);
    end;
    
    public z_GetClipPlanexOES_adr := GetFuncAdr('glGetClipPlanexOES');
    public z_GetClipPlanexOES_ovr_0 := GetFuncOrNil&<procedure(plane: ClipPlaneName; var equation: Fixed)>(z_GetClipPlanexOES_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetClipPlanexOES(plane: ClipPlaneName; equation: array of Fixed);
    begin
      z_GetClipPlanexOES_ovr_0(plane, equation[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetClipPlanexOES(plane: ClipPlaneName; var equation: Fixed);
    begin
      z_GetClipPlanexOES_ovr_0(plane, equation);
    end;
    public z_GetClipPlanexOES_ovr_2 := GetFuncOrNil&<procedure(plane: ClipPlaneName; equation: IntPtr)>(z_GetClipPlanexOES_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetClipPlanexOES(plane: ClipPlaneName; equation: IntPtr);
    begin
      z_GetClipPlanexOES_ovr_2(plane, equation);
    end;
    
    public z_GetFixedvOES_adr := GetFuncAdr('glGetFixedvOES');
    public z_GetFixedvOES_ovr_0 := GetFuncOrNil&<procedure(pname: GetPName; var &params: Fixed)>(z_GetFixedvOES_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetFixedvOES(pname: GetPName; &params: array of Fixed);
    begin
      z_GetFixedvOES_ovr_0(pname, &params[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetFixedvOES(pname: GetPName; var &params: Fixed);
    begin
      z_GetFixedvOES_ovr_0(pname, &params);
    end;
    public z_GetFixedvOES_ovr_2 := GetFuncOrNil&<procedure(pname: GetPName; &params: IntPtr)>(z_GetFixedvOES_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetFixedvOES(pname: GetPName; &params: IntPtr);
    begin
      z_GetFixedvOES_ovr_2(pname, &params);
    end;
    
    public z_GetTexEnvxvOES_adr := GetFuncAdr('glGetTexEnvxvOES');
    public z_GetTexEnvxvOES_ovr_0 := GetFuncOrNil&<procedure(target: TextureEnvTarget; pname: TextureEnvParameter; var &params: Fixed)>(z_GetTexEnvxvOES_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetTexEnvxvOES(target: TextureEnvTarget; pname: TextureEnvParameter; &params: array of Fixed);
    begin
      z_GetTexEnvxvOES_ovr_0(target, pname, &params[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetTexEnvxvOES(target: TextureEnvTarget; pname: TextureEnvParameter; var &params: Fixed);
    begin
      z_GetTexEnvxvOES_ovr_0(target, pname, &params);
    end;
    public z_GetTexEnvxvOES_ovr_2 := GetFuncOrNil&<procedure(target: TextureEnvTarget; pname: TextureEnvParameter; &params: IntPtr)>(z_GetTexEnvxvOES_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetTexEnvxvOES(target: TextureEnvTarget; pname: TextureEnvParameter; &params: IntPtr);
    begin
      z_GetTexEnvxvOES_ovr_2(target, pname, &params);
    end;
    
    public z_GetTexParameterxvOES_adr := GetFuncAdr('glGetTexParameterxvOES');
    public z_GetTexParameterxvOES_ovr_0 := GetFuncOrNil&<procedure(target: TextureTarget; pname: GetTextureParameter; var &params: Fixed)>(z_GetTexParameterxvOES_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetTexParameterxvOES(target: TextureTarget; pname: GetTextureParameter; &params: array of Fixed);
    begin
      z_GetTexParameterxvOES_ovr_0(target, pname, &params[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetTexParameterxvOES(target: TextureTarget; pname: GetTextureParameter; var &params: Fixed);
    begin
      z_GetTexParameterxvOES_ovr_0(target, pname, &params);
    end;
    public z_GetTexParameterxvOES_ovr_2 := GetFuncOrNil&<procedure(target: TextureTarget; pname: GetTextureParameter; &params: IntPtr)>(z_GetTexParameterxvOES_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetTexParameterxvOES(target: TextureTarget; pname: GetTextureParameter; &params: IntPtr);
    begin
      z_GetTexParameterxvOES_ovr_2(target, pname, &params);
    end;
    
    public z_LightModelxOES_adr := GetFuncAdr('glLightModelxOES');
    public z_LightModelxOES_ovr_0 := GetFuncOrNil&<procedure(pname: LightModelParameter; param: Fixed)>(z_LightModelxOES_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure LightModelxOES(pname: LightModelParameter; param: Fixed);
    begin
      z_LightModelxOES_ovr_0(pname, param);
    end;
    
    public z_LightModelxvOES_adr := GetFuncAdr('glLightModelxvOES');
    public z_LightModelxvOES_ovr_0 := GetFuncOrNil&<procedure(pname: LightModelParameter; var param: Fixed)>(z_LightModelxvOES_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure LightModelxvOES(pname: LightModelParameter; param: array of Fixed);
    begin
      z_LightModelxvOES_ovr_0(pname, param[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure LightModelxvOES(pname: LightModelParameter; var param: Fixed);
    begin
      z_LightModelxvOES_ovr_0(pname, param);
    end;
    public z_LightModelxvOES_ovr_2 := GetFuncOrNil&<procedure(pname: LightModelParameter; param: IntPtr)>(z_LightModelxvOES_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure LightModelxvOES(pname: LightModelParameter; param: IntPtr);
    begin
      z_LightModelxvOES_ovr_2(pname, param);
    end;
    
    public z_LightxOES_adr := GetFuncAdr('glLightxOES');
    public z_LightxOES_ovr_0 := GetFuncOrNil&<procedure(light: LightName; pname: LightParameter; param: Fixed)>(z_LightxOES_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure LightxOES(light: LightName; pname: LightParameter; param: Fixed);
    begin
      z_LightxOES_ovr_0(light, pname, param);
    end;
    
    public z_LightxvOES_adr := GetFuncAdr('glLightxvOES');
    public z_LightxvOES_ovr_0 := GetFuncOrNil&<procedure(light: LightName; pname: LightParameter; var &params: Fixed)>(z_LightxvOES_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure LightxvOES(light: LightName; pname: LightParameter; &params: array of Fixed);
    begin
      z_LightxvOES_ovr_0(light, pname, &params[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure LightxvOES(light: LightName; pname: LightParameter; var &params: Fixed);
    begin
      z_LightxvOES_ovr_0(light, pname, &params);
    end;
    public z_LightxvOES_ovr_2 := GetFuncOrNil&<procedure(light: LightName; pname: LightParameter; &params: IntPtr)>(z_LightxvOES_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure LightxvOES(light: LightName; pname: LightParameter; &params: IntPtr);
    begin
      z_LightxvOES_ovr_2(light, pname, &params);
    end;
    
    public z_LineWidthxOES_adr := GetFuncAdr('glLineWidthxOES');
    public z_LineWidthxOES_ovr_0 := GetFuncOrNil&<procedure(width: Fixed)>(z_LineWidthxOES_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure LineWidthxOES(width: Fixed);
    begin
      z_LineWidthxOES_ovr_0(width);
    end;
    
    public z_LoadMatrixxOES_adr := GetFuncAdr('glLoadMatrixxOES');
    public z_LoadMatrixxOES_ovr_0 := GetFuncOrNil&<procedure(var m: Fixed)>(z_LoadMatrixxOES_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure LoadMatrixxOES(m: array of Fixed);
    begin
      z_LoadMatrixxOES_ovr_0(m[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure LoadMatrixxOES(var m: Fixed);
    begin
      z_LoadMatrixxOES_ovr_0(m);
    end;
    public z_LoadMatrixxOES_ovr_2 := GetFuncOrNil&<procedure(m: IntPtr)>(z_LoadMatrixxOES_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure LoadMatrixxOES(m: IntPtr);
    begin
      z_LoadMatrixxOES_ovr_2(m);
    end;
    
    public z_MaterialxOES_adr := GetFuncAdr('glMaterialxOES');
    public z_MaterialxOES_ovr_0 := GetFuncOrNil&<procedure(face: DummyEnum; pname: MaterialParameter; param: Fixed)>(z_MaterialxOES_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MaterialxOES(face: DummyEnum; pname: MaterialParameter; param: Fixed);
    begin
      z_MaterialxOES_ovr_0(face, pname, param);
    end;
    
    public z_MaterialxvOES_adr := GetFuncAdr('glMaterialxvOES');
    public z_MaterialxvOES_ovr_0 := GetFuncOrNil&<procedure(face: DummyEnum; pname: MaterialParameter; var param: Fixed)>(z_MaterialxvOES_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MaterialxvOES(face: DummyEnum; pname: MaterialParameter; param: array of Fixed);
    begin
      z_MaterialxvOES_ovr_0(face, pname, param[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MaterialxvOES(face: DummyEnum; pname: MaterialParameter; var param: Fixed);
    begin
      z_MaterialxvOES_ovr_0(face, pname, param);
    end;
    public z_MaterialxvOES_ovr_2 := GetFuncOrNil&<procedure(face: DummyEnum; pname: MaterialParameter; param: IntPtr)>(z_MaterialxvOES_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MaterialxvOES(face: DummyEnum; pname: MaterialParameter; param: IntPtr);
    begin
      z_MaterialxvOES_ovr_2(face, pname, param);
    end;
    
    public z_MultMatrixxOES_adr := GetFuncAdr('glMultMatrixxOES');
    public z_MultMatrixxOES_ovr_0 := GetFuncOrNil&<procedure(var m: Fixed)>(z_MultMatrixxOES_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultMatrixxOES(m: array of Fixed);
    begin
      z_MultMatrixxOES_ovr_0(m[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultMatrixxOES(var m: Fixed);
    begin
      z_MultMatrixxOES_ovr_0(m);
    end;
    public z_MultMatrixxOES_ovr_2 := GetFuncOrNil&<procedure(m: IntPtr)>(z_MultMatrixxOES_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultMatrixxOES(m: IntPtr);
    begin
      z_MultMatrixxOES_ovr_2(m);
    end;
    
    public z_MultiTexCoord4xOES_adr := GetFuncAdr('glMultiTexCoord4xOES');
    public z_MultiTexCoord4xOES_ovr_0 := GetFuncOrNil&<procedure(texture: TextureUnit; s: Fixed; t: Fixed; r: Fixed; q: Fixed)>(z_MultiTexCoord4xOES_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiTexCoord4xOES(texture: TextureUnit; s: Fixed; t: Fixed; r: Fixed; q: Fixed);
    begin
      z_MultiTexCoord4xOES_ovr_0(texture, s, t, r, q);
    end;
    
    public z_Normal3xOES_adr := GetFuncAdr('glNormal3xOES');
    public z_Normal3xOES_ovr_0 := GetFuncOrNil&<procedure(nx: Fixed; ny: Fixed; nz: Fixed)>(z_Normal3xOES_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Normal3xOES(nx: Fixed; ny: Fixed; nz: Fixed);
    begin
      z_Normal3xOES_ovr_0(nx, ny, nz);
    end;
    
    public z_OrthoxOES_adr := GetFuncAdr('glOrthoxOES');
    public z_OrthoxOES_ovr_0 := GetFuncOrNil&<procedure(l: Fixed; r: Fixed; b: Fixed; t: Fixed; n: Fixed; f: Fixed)>(z_OrthoxOES_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure OrthoxOES(l: Fixed; r: Fixed; b: Fixed; t: Fixed; n: Fixed; f: Fixed);
    begin
      z_OrthoxOES_ovr_0(l, r, b, t, n, f);
    end;
    
    public z_PointParameterxvOES_adr := GetFuncAdr('glPointParameterxvOES');
    public z_PointParameterxvOES_ovr_0 := GetFuncOrNil&<procedure(pname: PointParameterNameARB; var &params: Fixed)>(z_PointParameterxvOES_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure PointParameterxvOES(pname: PointParameterNameARB; &params: array of Fixed);
    begin
      z_PointParameterxvOES_ovr_0(pname, &params[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure PointParameterxvOES(pname: PointParameterNameARB; var &params: Fixed);
    begin
      z_PointParameterxvOES_ovr_0(pname, &params);
    end;
    public z_PointParameterxvOES_ovr_2 := GetFuncOrNil&<procedure(pname: PointParameterNameARB; &params: IntPtr)>(z_PointParameterxvOES_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure PointParameterxvOES(pname: PointParameterNameARB; &params: IntPtr);
    begin
      z_PointParameterxvOES_ovr_2(pname, &params);
    end;
    
    public z_PointSizexOES_adr := GetFuncAdr('glPointSizexOES');
    public z_PointSizexOES_ovr_0 := GetFuncOrNil&<procedure(size: Fixed)>(z_PointSizexOES_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure PointSizexOES(size: Fixed);
    begin
      z_PointSizexOES_ovr_0(size);
    end;
    
    public z_PolygonOffsetxOES_adr := GetFuncAdr('glPolygonOffsetxOES');
    public z_PolygonOffsetxOES_ovr_0 := GetFuncOrNil&<procedure(factor: Fixed; units: Fixed)>(z_PolygonOffsetxOES_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure PolygonOffsetxOES(factor: Fixed; units: Fixed);
    begin
      z_PolygonOffsetxOES_ovr_0(factor, units);
    end;
    
    public z_RotatexOES_adr := GetFuncAdr('glRotatexOES');
    public z_RotatexOES_ovr_0 := GetFuncOrNil&<procedure(angle: Fixed; x: Fixed; y: Fixed; z: Fixed)>(z_RotatexOES_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure RotatexOES(angle: Fixed; x: Fixed; y: Fixed; z: Fixed);
    begin
      z_RotatexOES_ovr_0(angle, x, y, z);
    end;
    
    public z_ScalexOES_adr := GetFuncAdr('glScalexOES');
    public z_ScalexOES_ovr_0 := GetFuncOrNil&<procedure(x: Fixed; y: Fixed; z: Fixed)>(z_ScalexOES_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ScalexOES(x: Fixed; y: Fixed; z: Fixed);
    begin
      z_ScalexOES_ovr_0(x, y, z);
    end;
    
    public z_TexEnvxOES_adr := GetFuncAdr('glTexEnvxOES');
    public z_TexEnvxOES_ovr_0 := GetFuncOrNil&<procedure(target: TextureEnvTarget; pname: TextureEnvParameter; param: Fixed)>(z_TexEnvxOES_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TexEnvxOES(target: TextureEnvTarget; pname: TextureEnvParameter; param: Fixed);
    begin
      z_TexEnvxOES_ovr_0(target, pname, param);
    end;
    
    public z_TexEnvxvOES_adr := GetFuncAdr('glTexEnvxvOES');
    public z_TexEnvxvOES_ovr_0 := GetFuncOrNil&<procedure(target: TextureEnvTarget; pname: TextureEnvParameter; var &params: Fixed)>(z_TexEnvxvOES_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TexEnvxvOES(target: TextureEnvTarget; pname: TextureEnvParameter; &params: array of Fixed);
    begin
      z_TexEnvxvOES_ovr_0(target, pname, &params[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TexEnvxvOES(target: TextureEnvTarget; pname: TextureEnvParameter; var &params: Fixed);
    begin
      z_TexEnvxvOES_ovr_0(target, pname, &params);
    end;
    public z_TexEnvxvOES_ovr_2 := GetFuncOrNil&<procedure(target: TextureEnvTarget; pname: TextureEnvParameter; &params: IntPtr)>(z_TexEnvxvOES_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TexEnvxvOES(target: TextureEnvTarget; pname: TextureEnvParameter; &params: IntPtr);
    begin
      z_TexEnvxvOES_ovr_2(target, pname, &params);
    end;
    
    public z_TexParameterxOES_adr := GetFuncAdr('glTexParameterxOES');
    public z_TexParameterxOES_ovr_0 := GetFuncOrNil&<procedure(target: TextureTarget; pname: GetTextureParameter; param: Fixed)>(z_TexParameterxOES_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TexParameterxOES(target: TextureTarget; pname: GetTextureParameter; param: Fixed);
    begin
      z_TexParameterxOES_ovr_0(target, pname, param);
    end;
    
    public z_TexParameterxvOES_adr := GetFuncAdr('glTexParameterxvOES');
    public z_TexParameterxvOES_ovr_0 := GetFuncOrNil&<procedure(target: TextureTarget; pname: GetTextureParameter; var &params: Fixed)>(z_TexParameterxvOES_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TexParameterxvOES(target: TextureTarget; pname: GetTextureParameter; &params: array of Fixed);
    begin
      z_TexParameterxvOES_ovr_0(target, pname, &params[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TexParameterxvOES(target: TextureTarget; pname: GetTextureParameter; var &params: Fixed);
    begin
      z_TexParameterxvOES_ovr_0(target, pname, &params);
    end;
    public z_TexParameterxvOES_ovr_2 := GetFuncOrNil&<procedure(target: TextureTarget; pname: GetTextureParameter; &params: IntPtr)>(z_TexParameterxvOES_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TexParameterxvOES(target: TextureTarget; pname: GetTextureParameter; &params: IntPtr);
    begin
      z_TexParameterxvOES_ovr_2(target, pname, &params);
    end;
    
    public z_TranslatexOES_adr := GetFuncAdr('glTranslatexOES');
    public z_TranslatexOES_ovr_0 := GetFuncOrNil&<procedure(x: Fixed; y: Fixed; z: Fixed)>(z_TranslatexOES_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TranslatexOES(x: Fixed; y: Fixed; z: Fixed);
    begin
      z_TranslatexOES_ovr_0(x, y, z);
    end;
    
    public z_AccumxOES_adr := GetFuncAdr('glAccumxOES');
    public z_AccumxOES_ovr_0 := GetFuncOrNil&<procedure(op: DummyEnum; value: Fixed)>(z_AccumxOES_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure AccumxOES(op: DummyEnum; value: Fixed);
    begin
      z_AccumxOES_ovr_0(op, value);
    end;
    
    public z_BitmapxOES_adr := GetFuncAdr('glBitmapxOES');
    public z_BitmapxOES_ovr_0 := GetFuncOrNil&<procedure(width: Int32; height: Int32; xorig: Fixed; yorig: Fixed; xmove: Fixed; ymove: Fixed; var bitmap: Byte)>(z_BitmapxOES_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure BitmapxOES(width: Int32; height: Int32; xorig: Fixed; yorig: Fixed; xmove: Fixed; ymove: Fixed; bitmap: array of Byte);
    begin
      z_BitmapxOES_ovr_0(width, height, xorig, yorig, xmove, ymove, bitmap[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure BitmapxOES(width: Int32; height: Int32; xorig: Fixed; yorig: Fixed; xmove: Fixed; ymove: Fixed; var bitmap: Byte);
    begin
      z_BitmapxOES_ovr_0(width, height, xorig, yorig, xmove, ymove, bitmap);
    end;
    public z_BitmapxOES_ovr_2 := GetFuncOrNil&<procedure(width: Int32; height: Int32; xorig: Fixed; yorig: Fixed; xmove: Fixed; ymove: Fixed; bitmap: IntPtr)>(z_BitmapxOES_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure BitmapxOES(width: Int32; height: Int32; xorig: Fixed; yorig: Fixed; xmove: Fixed; ymove: Fixed; bitmap: IntPtr);
    begin
      z_BitmapxOES_ovr_2(width, height, xorig, yorig, xmove, ymove, bitmap);
    end;
    
    public z_BlendColorxOES_adr := GetFuncAdr('glBlendColorxOES');
    public z_BlendColorxOES_ovr_0 := GetFuncOrNil&<procedure(red: Fixed; green: Fixed; blue: Fixed; alpha: Fixed)>(z_BlendColorxOES_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure BlendColorxOES(red: Fixed; green: Fixed; blue: Fixed; alpha: Fixed);
    begin
      z_BlendColorxOES_ovr_0(red, green, blue, alpha);
    end;
    
    public z_ClearAccumxOES_adr := GetFuncAdr('glClearAccumxOES');
    public z_ClearAccumxOES_ovr_0 := GetFuncOrNil&<procedure(red: Fixed; green: Fixed; blue: Fixed; alpha: Fixed)>(z_ClearAccumxOES_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ClearAccumxOES(red: Fixed; green: Fixed; blue: Fixed; alpha: Fixed);
    begin
      z_ClearAccumxOES_ovr_0(red, green, blue, alpha);
    end;
    
    public z_Color3xOES_adr := GetFuncAdr('glColor3xOES');
    public z_Color3xOES_ovr_0 := GetFuncOrNil&<procedure(red: Fixed; green: Fixed; blue: Fixed)>(z_Color3xOES_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Color3xOES(red: Fixed; green: Fixed; blue: Fixed);
    begin
      z_Color3xOES_ovr_0(red, green, blue);
    end;
    
    public z_Color3xvOES_adr := GetFuncAdr('glColor3xvOES');
    public z_Color3xvOES_ovr_0 := GetFuncOrNil&<procedure(var components: Fixed)>(z_Color3xvOES_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Color3xvOES(components: array of Fixed);
    begin
      z_Color3xvOES_ovr_0(components[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Color3xvOES(var components: Fixed);
    begin
      z_Color3xvOES_ovr_0(components);
    end;
    public z_Color3xvOES_ovr_2 := GetFuncOrNil&<procedure(components: IntPtr)>(z_Color3xvOES_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Color3xvOES(components: IntPtr);
    begin
      z_Color3xvOES_ovr_2(components);
    end;
    
    public z_Color4xvOES_adr := GetFuncAdr('glColor4xvOES');
    public z_Color4xvOES_ovr_0 := GetFuncOrNil&<procedure(var components: Fixed)>(z_Color4xvOES_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Color4xvOES(components: array of Fixed);
    begin
      z_Color4xvOES_ovr_0(components[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Color4xvOES(var components: Fixed);
    begin
      z_Color4xvOES_ovr_0(components);
    end;
    public z_Color4xvOES_ovr_2 := GetFuncOrNil&<procedure(components: IntPtr)>(z_Color4xvOES_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Color4xvOES(components: IntPtr);
    begin
      z_Color4xvOES_ovr_2(components);
    end;
    
    public z_ConvolutionParameterxOES_adr := GetFuncAdr('glConvolutionParameterxOES');
    public z_ConvolutionParameterxOES_ovr_0 := GetFuncOrNil&<procedure(target: ConvolutionTargetEXT; pname: ConvolutionParameterEXT; param: Fixed)>(z_ConvolutionParameterxOES_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ConvolutionParameterxOES(target: ConvolutionTargetEXT; pname: ConvolutionParameterEXT; param: Fixed);
    begin
      z_ConvolutionParameterxOES_ovr_0(target, pname, param);
    end;
    
    public z_ConvolutionParameterxvOES_adr := GetFuncAdr('glConvolutionParameterxvOES');
    public z_ConvolutionParameterxvOES_ovr_0 := GetFuncOrNil&<procedure(target: ConvolutionTargetEXT; pname: ConvolutionParameterEXT; var &params: Fixed)>(z_ConvolutionParameterxvOES_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ConvolutionParameterxvOES(target: ConvolutionTargetEXT; pname: ConvolutionParameterEXT; &params: array of Fixed);
    begin
      z_ConvolutionParameterxvOES_ovr_0(target, pname, &params[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ConvolutionParameterxvOES(target: ConvolutionTargetEXT; pname: ConvolutionParameterEXT; var &params: Fixed);
    begin
      z_ConvolutionParameterxvOES_ovr_0(target, pname, &params);
    end;
    public z_ConvolutionParameterxvOES_ovr_2 := GetFuncOrNil&<procedure(target: ConvolutionTargetEXT; pname: ConvolutionParameterEXT; &params: IntPtr)>(z_ConvolutionParameterxvOES_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ConvolutionParameterxvOES(target: ConvolutionTargetEXT; pname: ConvolutionParameterEXT; &params: IntPtr);
    begin
      z_ConvolutionParameterxvOES_ovr_2(target, pname, &params);
    end;
    
    public z_EvalCoord1xOES_adr := GetFuncAdr('glEvalCoord1xOES');
    public z_EvalCoord1xOES_ovr_0 := GetFuncOrNil&<procedure(u: Fixed)>(z_EvalCoord1xOES_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure EvalCoord1xOES(u: Fixed);
    begin
      z_EvalCoord1xOES_ovr_0(u);
    end;
    
    public z_EvalCoord1xvOES_adr := GetFuncAdr('glEvalCoord1xvOES');
    public z_EvalCoord1xvOES_ovr_0 := GetFuncOrNil&<procedure(var coords: Fixed)>(z_EvalCoord1xvOES_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure EvalCoord1xvOES(coords: array of Fixed);
    begin
      z_EvalCoord1xvOES_ovr_0(coords[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure EvalCoord1xvOES(var coords: Fixed);
    begin
      z_EvalCoord1xvOES_ovr_0(coords);
    end;
    public z_EvalCoord1xvOES_ovr_2 := GetFuncOrNil&<procedure(coords: IntPtr)>(z_EvalCoord1xvOES_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure EvalCoord1xvOES(coords: IntPtr);
    begin
      z_EvalCoord1xvOES_ovr_2(coords);
    end;
    
    public z_EvalCoord2xOES_adr := GetFuncAdr('glEvalCoord2xOES');
    public z_EvalCoord2xOES_ovr_0 := GetFuncOrNil&<procedure(u: Fixed; v: Fixed)>(z_EvalCoord2xOES_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure EvalCoord2xOES(u: Fixed; v: Fixed);
    begin
      z_EvalCoord2xOES_ovr_0(u, v);
    end;
    
    public z_EvalCoord2xvOES_adr := GetFuncAdr('glEvalCoord2xvOES');
    public z_EvalCoord2xvOES_ovr_0 := GetFuncOrNil&<procedure(var coords: Fixed)>(z_EvalCoord2xvOES_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure EvalCoord2xvOES(coords: array of Fixed);
    begin
      z_EvalCoord2xvOES_ovr_0(coords[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure EvalCoord2xvOES(var coords: Fixed);
    begin
      z_EvalCoord2xvOES_ovr_0(coords);
    end;
    public z_EvalCoord2xvOES_ovr_2 := GetFuncOrNil&<procedure(coords: IntPtr)>(z_EvalCoord2xvOES_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure EvalCoord2xvOES(coords: IntPtr);
    begin
      z_EvalCoord2xvOES_ovr_2(coords);
    end;
    
    public z_FeedbackBufferxOES_adr := GetFuncAdr('glFeedbackBufferxOES');
    public z_FeedbackBufferxOES_ovr_0 := GetFuncOrNil&<procedure(n: Int32; &type: DummyEnum; var buffer: Fixed)>(z_FeedbackBufferxOES_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure FeedbackBufferxOES(n: Int32; &type: DummyEnum; buffer: array of Fixed);
    begin
      z_FeedbackBufferxOES_ovr_0(n, &type, buffer[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure FeedbackBufferxOES(n: Int32; &type: DummyEnum; var buffer: Fixed);
    begin
      z_FeedbackBufferxOES_ovr_0(n, &type, buffer);
    end;
    public z_FeedbackBufferxOES_ovr_2 := GetFuncOrNil&<procedure(n: Int32; &type: DummyEnum; buffer: IntPtr)>(z_FeedbackBufferxOES_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure FeedbackBufferxOES(n: Int32; &type: DummyEnum; buffer: IntPtr);
    begin
      z_FeedbackBufferxOES_ovr_2(n, &type, buffer);
    end;
    
    public z_GetConvolutionParameterxvOES_adr := GetFuncAdr('glGetConvolutionParameterxvOES');
    public z_GetConvolutionParameterxvOES_ovr_0 := GetFuncOrNil&<procedure(target: DummyEnum; pname: DummyEnum; var &params: Fixed)>(z_GetConvolutionParameterxvOES_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetConvolutionParameterxvOES(target: DummyEnum; pname: DummyEnum; &params: array of Fixed);
    begin
      z_GetConvolutionParameterxvOES_ovr_0(target, pname, &params[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetConvolutionParameterxvOES(target: DummyEnum; pname: DummyEnum; var &params: Fixed);
    begin
      z_GetConvolutionParameterxvOES_ovr_0(target, pname, &params);
    end;
    public z_GetConvolutionParameterxvOES_ovr_2 := GetFuncOrNil&<procedure(target: DummyEnum; pname: DummyEnum; &params: IntPtr)>(z_GetConvolutionParameterxvOES_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetConvolutionParameterxvOES(target: DummyEnum; pname: DummyEnum; &params: IntPtr);
    begin
      z_GetConvolutionParameterxvOES_ovr_2(target, pname, &params);
    end;
    
    public z_GetHistogramParameterxvOES_adr := GetFuncAdr('glGetHistogramParameterxvOES');
    public z_GetHistogramParameterxvOES_ovr_0 := GetFuncOrNil&<procedure(target: HistogramTargetEXT; pname: GetHistogramParameterPNameEXT; var &params: Fixed)>(z_GetHistogramParameterxvOES_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetHistogramParameterxvOES(target: HistogramTargetEXT; pname: GetHistogramParameterPNameEXT; &params: array of Fixed);
    begin
      z_GetHistogramParameterxvOES_ovr_0(target, pname, &params[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetHistogramParameterxvOES(target: HistogramTargetEXT; pname: GetHistogramParameterPNameEXT; var &params: Fixed);
    begin
      z_GetHistogramParameterxvOES_ovr_0(target, pname, &params);
    end;
    public z_GetHistogramParameterxvOES_ovr_2 := GetFuncOrNil&<procedure(target: HistogramTargetEXT; pname: GetHistogramParameterPNameEXT; &params: IntPtr)>(z_GetHistogramParameterxvOES_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetHistogramParameterxvOES(target: HistogramTargetEXT; pname: GetHistogramParameterPNameEXT; &params: IntPtr);
    begin
      z_GetHistogramParameterxvOES_ovr_2(target, pname, &params);
    end;
    
    public z_GetLightxOES_adr := GetFuncAdr('glGetLightxOES');
    public z_GetLightxOES_ovr_0 := GetFuncOrNil&<procedure(light: LightName; pname: LightParameter; var &params: Fixed)>(z_GetLightxOES_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetLightxOES(light: LightName; pname: LightParameter; &params: array of Fixed);
    begin
      z_GetLightxOES_ovr_0(light, pname, &params[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetLightxOES(light: LightName; pname: LightParameter; var &params: Fixed);
    begin
      z_GetLightxOES_ovr_0(light, pname, &params);
    end;
    public z_GetLightxOES_ovr_2 := GetFuncOrNil&<procedure(light: LightName; pname: LightParameter; &params: IntPtr)>(z_GetLightxOES_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetLightxOES(light: LightName; pname: LightParameter; &params: IntPtr);
    begin
      z_GetLightxOES_ovr_2(light, pname, &params);
    end;
    
    public z_GetMapxvOES_adr := GetFuncAdr('glGetMapxvOES');
    public z_GetMapxvOES_ovr_0 := GetFuncOrNil&<procedure(target: MapTarget; query: GetMapQuery; var v: Fixed)>(z_GetMapxvOES_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetMapxvOES(target: MapTarget; query: GetMapQuery; v: array of Fixed);
    begin
      z_GetMapxvOES_ovr_0(target, query, v[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetMapxvOES(target: MapTarget; query: GetMapQuery; var v: Fixed);
    begin
      z_GetMapxvOES_ovr_0(target, query, v);
    end;
    public z_GetMapxvOES_ovr_2 := GetFuncOrNil&<procedure(target: MapTarget; query: GetMapQuery; v: IntPtr)>(z_GetMapxvOES_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetMapxvOES(target: MapTarget; query: GetMapQuery; v: IntPtr);
    begin
      z_GetMapxvOES_ovr_2(target, query, v);
    end;
    
    public z_GetMaterialxOES_adr := GetFuncAdr('glGetMaterialxOES');
    public z_GetMaterialxOES_ovr_0 := GetFuncOrNil&<procedure(face: DummyEnum; pname: MaterialParameter; param: Fixed)>(z_GetMaterialxOES_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetMaterialxOES(face: DummyEnum; pname: MaterialParameter; param: Fixed);
    begin
      z_GetMaterialxOES_ovr_0(face, pname, param);
    end;
    
    public z_GetPixelMapxv_adr := GetFuncAdr('glGetPixelMapxv');
    public z_GetPixelMapxv_ovr_0 := GetFuncOrNil&<procedure(map: PixelMap; size: Int32; var values: Fixed)>(z_GetPixelMapxv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetPixelMapxv(map: PixelMap; size: Int32; values: array of Fixed);
    begin
      z_GetPixelMapxv_ovr_0(map, size, values[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetPixelMapxv(map: PixelMap; size: Int32; var values: Fixed);
    begin
      z_GetPixelMapxv_ovr_0(map, size, values);
    end;
    public z_GetPixelMapxv_ovr_2 := GetFuncOrNil&<procedure(map: PixelMap; size: Int32; values: IntPtr)>(z_GetPixelMapxv_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetPixelMapxv(map: PixelMap; size: Int32; values: IntPtr);
    begin
      z_GetPixelMapxv_ovr_2(map, size, values);
    end;
    
    public z_GetTexGenxvOES_adr := GetFuncAdr('glGetTexGenxvOES');
    public z_GetTexGenxvOES_ovr_0 := GetFuncOrNil&<procedure(coord: TextureCoordName; pname: TextureGenParameter; var &params: Fixed)>(z_GetTexGenxvOES_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetTexGenxvOES(coord: TextureCoordName; pname: TextureGenParameter; &params: array of Fixed);
    begin
      z_GetTexGenxvOES_ovr_0(coord, pname, &params[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetTexGenxvOES(coord: TextureCoordName; pname: TextureGenParameter; var &params: Fixed);
    begin
      z_GetTexGenxvOES_ovr_0(coord, pname, &params);
    end;
    public z_GetTexGenxvOES_ovr_2 := GetFuncOrNil&<procedure(coord: TextureCoordName; pname: TextureGenParameter; &params: IntPtr)>(z_GetTexGenxvOES_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetTexGenxvOES(coord: TextureCoordName; pname: TextureGenParameter; &params: IntPtr);
    begin
      z_GetTexGenxvOES_ovr_2(coord, pname, &params);
    end;
    
    public z_GetTexLevelParameterxvOES_adr := GetFuncAdr('glGetTexLevelParameterxvOES');
    public z_GetTexLevelParameterxvOES_ovr_0 := GetFuncOrNil&<procedure(target: TextureTarget; level: Int32; pname: GetTextureParameter; var &params: Fixed)>(z_GetTexLevelParameterxvOES_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetTexLevelParameterxvOES(target: TextureTarget; level: Int32; pname: GetTextureParameter; &params: array of Fixed);
    begin
      z_GetTexLevelParameterxvOES_ovr_0(target, level, pname, &params[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetTexLevelParameterxvOES(target: TextureTarget; level: Int32; pname: GetTextureParameter; var &params: Fixed);
    begin
      z_GetTexLevelParameterxvOES_ovr_0(target, level, pname, &params);
    end;
    public z_GetTexLevelParameterxvOES_ovr_2 := GetFuncOrNil&<procedure(target: TextureTarget; level: Int32; pname: GetTextureParameter; &params: IntPtr)>(z_GetTexLevelParameterxvOES_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetTexLevelParameterxvOES(target: TextureTarget; level: Int32; pname: GetTextureParameter; &params: IntPtr);
    begin
      z_GetTexLevelParameterxvOES_ovr_2(target, level, pname, &params);
    end;
    
    public z_IndexxOES_adr := GetFuncAdr('glIndexxOES');
    public z_IndexxOES_ovr_0 := GetFuncOrNil&<procedure(component: Fixed)>(z_IndexxOES_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure IndexxOES(component: Fixed);
    begin
      z_IndexxOES_ovr_0(component);
    end;
    
    public z_IndexxvOES_adr := GetFuncAdr('glIndexxvOES');
    public z_IndexxvOES_ovr_0 := GetFuncOrNil&<procedure(var component: Fixed)>(z_IndexxvOES_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure IndexxvOES(component: array of Fixed);
    begin
      z_IndexxvOES_ovr_0(component[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure IndexxvOES(var component: Fixed);
    begin
      z_IndexxvOES_ovr_0(component);
    end;
    public z_IndexxvOES_ovr_2 := GetFuncOrNil&<procedure(component: IntPtr)>(z_IndexxvOES_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure IndexxvOES(component: IntPtr);
    begin
      z_IndexxvOES_ovr_2(component);
    end;
    
    public z_LoadTransposeMatrixxOES_adr := GetFuncAdr('glLoadTransposeMatrixxOES');
    public z_LoadTransposeMatrixxOES_ovr_0 := GetFuncOrNil&<procedure(var m: Fixed)>(z_LoadTransposeMatrixxOES_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure LoadTransposeMatrixxOES(m: array of Fixed);
    begin
      z_LoadTransposeMatrixxOES_ovr_0(m[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure LoadTransposeMatrixxOES(var m: Fixed);
    begin
      z_LoadTransposeMatrixxOES_ovr_0(m);
    end;
    public z_LoadTransposeMatrixxOES_ovr_2 := GetFuncOrNil&<procedure(m: IntPtr)>(z_LoadTransposeMatrixxOES_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure LoadTransposeMatrixxOES(m: IntPtr);
    begin
      z_LoadTransposeMatrixxOES_ovr_2(m);
    end;
    
    public z_Map1xOES_adr := GetFuncAdr('glMap1xOES');
    public z_Map1xOES_ovr_0 := GetFuncOrNil&<procedure(target: MapTarget; u1: Fixed; u2: Fixed; stride: Int32; order: Int32; points: Fixed)>(z_Map1xOES_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Map1xOES(target: MapTarget; u1: Fixed; u2: Fixed; stride: Int32; order: Int32; points: Fixed);
    begin
      z_Map1xOES_ovr_0(target, u1, u2, stride, order, points);
    end;
    
    public z_Map2xOES_adr := GetFuncAdr('glMap2xOES');
    public z_Map2xOES_ovr_0 := GetFuncOrNil&<procedure(target: MapTarget; u1: Fixed; u2: Fixed; ustride: Int32; uorder: Int32; v1: Fixed; v2: Fixed; vstride: Int32; vorder: Int32; points: Fixed)>(z_Map2xOES_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Map2xOES(target: MapTarget; u1: Fixed; u2: Fixed; ustride: Int32; uorder: Int32; v1: Fixed; v2: Fixed; vstride: Int32; vorder: Int32; points: Fixed);
    begin
      z_Map2xOES_ovr_0(target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, points);
    end;
    
    public z_MapGrid1xOES_adr := GetFuncAdr('glMapGrid1xOES');
    public z_MapGrid1xOES_ovr_0 := GetFuncOrNil&<procedure(n: Int32; u1: Fixed; u2: Fixed)>(z_MapGrid1xOES_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MapGrid1xOES(n: Int32; u1: Fixed; u2: Fixed);
    begin
      z_MapGrid1xOES_ovr_0(n, u1, u2);
    end;
    
    public z_MapGrid2xOES_adr := GetFuncAdr('glMapGrid2xOES');
    public z_MapGrid2xOES_ovr_0 := GetFuncOrNil&<procedure(n: Int32; u1: Fixed; u2: Fixed; v1: Fixed; v2: Fixed)>(z_MapGrid2xOES_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MapGrid2xOES(n: Int32; u1: Fixed; u2: Fixed; v1: Fixed; v2: Fixed);
    begin
      z_MapGrid2xOES_ovr_0(n, u1, u2, v1, v2);
    end;
    
    public z_MultTransposeMatrixxOES_adr := GetFuncAdr('glMultTransposeMatrixxOES');
    public z_MultTransposeMatrixxOES_ovr_0 := GetFuncOrNil&<procedure(var m: Fixed)>(z_MultTransposeMatrixxOES_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultTransposeMatrixxOES(m: array of Fixed);
    begin
      z_MultTransposeMatrixxOES_ovr_0(m[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultTransposeMatrixxOES(var m: Fixed);
    begin
      z_MultTransposeMatrixxOES_ovr_0(m);
    end;
    public z_MultTransposeMatrixxOES_ovr_2 := GetFuncOrNil&<procedure(m: IntPtr)>(z_MultTransposeMatrixxOES_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultTransposeMatrixxOES(m: IntPtr);
    begin
      z_MultTransposeMatrixxOES_ovr_2(m);
    end;
    
    public z_MultiTexCoord1xOES_adr := GetFuncAdr('glMultiTexCoord1xOES');
    public z_MultiTexCoord1xOES_ovr_0 := GetFuncOrNil&<procedure(texture: TextureUnit; s: Fixed)>(z_MultiTexCoord1xOES_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiTexCoord1xOES(texture: TextureUnit; s: Fixed);
    begin
      z_MultiTexCoord1xOES_ovr_0(texture, s);
    end;
    
    public z_MultiTexCoord1xvOES_adr := GetFuncAdr('glMultiTexCoord1xvOES');
    public z_MultiTexCoord1xvOES_ovr_0 := GetFuncOrNil&<procedure(texture: TextureUnit; var coords: Fixed)>(z_MultiTexCoord1xvOES_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiTexCoord1xvOES(texture: TextureUnit; coords: array of Fixed);
    begin
      z_MultiTexCoord1xvOES_ovr_0(texture, coords[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiTexCoord1xvOES(texture: TextureUnit; var coords: Fixed);
    begin
      z_MultiTexCoord1xvOES_ovr_0(texture, coords);
    end;
    public z_MultiTexCoord1xvOES_ovr_2 := GetFuncOrNil&<procedure(texture: TextureUnit; coords: IntPtr)>(z_MultiTexCoord1xvOES_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiTexCoord1xvOES(texture: TextureUnit; coords: IntPtr);
    begin
      z_MultiTexCoord1xvOES_ovr_2(texture, coords);
    end;
    
    public z_MultiTexCoord2xOES_adr := GetFuncAdr('glMultiTexCoord2xOES');
    public z_MultiTexCoord2xOES_ovr_0 := GetFuncOrNil&<procedure(texture: TextureUnit; s: Fixed; t: Fixed)>(z_MultiTexCoord2xOES_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiTexCoord2xOES(texture: TextureUnit; s: Fixed; t: Fixed);
    begin
      z_MultiTexCoord2xOES_ovr_0(texture, s, t);
    end;
    
    public z_MultiTexCoord2xvOES_adr := GetFuncAdr('glMultiTexCoord2xvOES');
    public z_MultiTexCoord2xvOES_ovr_0 := GetFuncOrNil&<procedure(texture: TextureUnit; var coords: Fixed)>(z_MultiTexCoord2xvOES_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiTexCoord2xvOES(texture: TextureUnit; coords: array of Fixed);
    begin
      z_MultiTexCoord2xvOES_ovr_0(texture, coords[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiTexCoord2xvOES(texture: TextureUnit; var coords: Fixed);
    begin
      z_MultiTexCoord2xvOES_ovr_0(texture, coords);
    end;
    public z_MultiTexCoord2xvOES_ovr_2 := GetFuncOrNil&<procedure(texture: TextureUnit; coords: IntPtr)>(z_MultiTexCoord2xvOES_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiTexCoord2xvOES(texture: TextureUnit; coords: IntPtr);
    begin
      z_MultiTexCoord2xvOES_ovr_2(texture, coords);
    end;
    
    public z_MultiTexCoord3xOES_adr := GetFuncAdr('glMultiTexCoord3xOES');
    public z_MultiTexCoord3xOES_ovr_0 := GetFuncOrNil&<procedure(texture: TextureUnit; s: Fixed; t: Fixed; r: Fixed)>(z_MultiTexCoord3xOES_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiTexCoord3xOES(texture: TextureUnit; s: Fixed; t: Fixed; r: Fixed);
    begin
      z_MultiTexCoord3xOES_ovr_0(texture, s, t, r);
    end;
    
    public z_MultiTexCoord3xvOES_adr := GetFuncAdr('glMultiTexCoord3xvOES');
    public z_MultiTexCoord3xvOES_ovr_0 := GetFuncOrNil&<procedure(texture: TextureUnit; var coords: Fixed)>(z_MultiTexCoord3xvOES_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiTexCoord3xvOES(texture: TextureUnit; coords: array of Fixed);
    begin
      z_MultiTexCoord3xvOES_ovr_0(texture, coords[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiTexCoord3xvOES(texture: TextureUnit; var coords: Fixed);
    begin
      z_MultiTexCoord3xvOES_ovr_0(texture, coords);
    end;
    public z_MultiTexCoord3xvOES_ovr_2 := GetFuncOrNil&<procedure(texture: TextureUnit; coords: IntPtr)>(z_MultiTexCoord3xvOES_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiTexCoord3xvOES(texture: TextureUnit; coords: IntPtr);
    begin
      z_MultiTexCoord3xvOES_ovr_2(texture, coords);
    end;
    
    public z_MultiTexCoord4xvOES_adr := GetFuncAdr('glMultiTexCoord4xvOES');
    public z_MultiTexCoord4xvOES_ovr_0 := GetFuncOrNil&<procedure(texture: TextureUnit; var coords: Fixed)>(z_MultiTexCoord4xvOES_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiTexCoord4xvOES(texture: TextureUnit; coords: array of Fixed);
    begin
      z_MultiTexCoord4xvOES_ovr_0(texture, coords[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiTexCoord4xvOES(texture: TextureUnit; var coords: Fixed);
    begin
      z_MultiTexCoord4xvOES_ovr_0(texture, coords);
    end;
    public z_MultiTexCoord4xvOES_ovr_2 := GetFuncOrNil&<procedure(texture: TextureUnit; coords: IntPtr)>(z_MultiTexCoord4xvOES_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure MultiTexCoord4xvOES(texture: TextureUnit; coords: IntPtr);
    begin
      z_MultiTexCoord4xvOES_ovr_2(texture, coords);
    end;
    
    public z_Normal3xvOES_adr := GetFuncAdr('glNormal3xvOES');
    public z_Normal3xvOES_ovr_0 := GetFuncOrNil&<procedure(var coords: Fixed)>(z_Normal3xvOES_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Normal3xvOES(coords: array of Fixed);
    begin
      z_Normal3xvOES_ovr_0(coords[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Normal3xvOES(var coords: Fixed);
    begin
      z_Normal3xvOES_ovr_0(coords);
    end;
    public z_Normal3xvOES_ovr_2 := GetFuncOrNil&<procedure(coords: IntPtr)>(z_Normal3xvOES_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Normal3xvOES(coords: IntPtr);
    begin
      z_Normal3xvOES_ovr_2(coords);
    end;
    
    public z_PassThroughxOES_adr := GetFuncAdr('glPassThroughxOES');
    public z_PassThroughxOES_ovr_0 := GetFuncOrNil&<procedure(token: Fixed)>(z_PassThroughxOES_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure PassThroughxOES(token: Fixed);
    begin
      z_PassThroughxOES_ovr_0(token);
    end;
    
    public z_PixelMapx_adr := GetFuncAdr('glPixelMapx');
    public z_PixelMapx_ovr_0 := GetFuncOrNil&<procedure(map: PixelMap; size: Int32; var values: Fixed)>(z_PixelMapx_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure PixelMapx(map: PixelMap; size: Int32; values: array of Fixed);
    begin
      z_PixelMapx_ovr_0(map, size, values[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure PixelMapx(map: PixelMap; size: Int32; var values: Fixed);
    begin
      z_PixelMapx_ovr_0(map, size, values);
    end;
    public z_PixelMapx_ovr_2 := GetFuncOrNil&<procedure(map: PixelMap; size: Int32; values: IntPtr)>(z_PixelMapx_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure PixelMapx(map: PixelMap; size: Int32; values: IntPtr);
    begin
      z_PixelMapx_ovr_2(map, size, values);
    end;
    
    public z_PixelStorex_adr := GetFuncAdr('glPixelStorex');
    public z_PixelStorex_ovr_0 := GetFuncOrNil&<procedure(pname: PixelStoreParameter; param: Fixed)>(z_PixelStorex_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure PixelStorex(pname: PixelStoreParameter; param: Fixed);
    begin
      z_PixelStorex_ovr_0(pname, param);
    end;
    
    public z_PixelTransferxOES_adr := GetFuncAdr('glPixelTransferxOES');
    public z_PixelTransferxOES_ovr_0 := GetFuncOrNil&<procedure(pname: PixelTransferParameter; param: Fixed)>(z_PixelTransferxOES_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure PixelTransferxOES(pname: PixelTransferParameter; param: Fixed);
    begin
      z_PixelTransferxOES_ovr_0(pname, param);
    end;
    
    public z_PixelZoomxOES_adr := GetFuncAdr('glPixelZoomxOES');
    public z_PixelZoomxOES_ovr_0 := GetFuncOrNil&<procedure(xfactor: Fixed; yfactor: Fixed)>(z_PixelZoomxOES_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure PixelZoomxOES(xfactor: Fixed; yfactor: Fixed);
    begin
      z_PixelZoomxOES_ovr_0(xfactor, yfactor);
    end;
    
    public z_PrioritizeTexturesxOES_adr := GetFuncAdr('glPrioritizeTexturesxOES');
    public z_PrioritizeTexturesxOES_ovr_0 := GetFuncOrNil&<procedure(n: Int32; var textures: UInt32; var priorities: Fixed)>(z_PrioritizeTexturesxOES_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure PrioritizeTexturesxOES(n: Int32; textures: array of UInt32; priorities: array of Fixed);
    begin
      z_PrioritizeTexturesxOES_ovr_0(n, textures[0], priorities[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure PrioritizeTexturesxOES(n: Int32; textures: array of UInt32; var priorities: Fixed);
    begin
      z_PrioritizeTexturesxOES_ovr_0(n, textures[0], priorities);
    end;
    public z_PrioritizeTexturesxOES_ovr_2 := GetFuncOrNil&<procedure(n: Int32; var textures: UInt32; priorities: IntPtr)>(z_PrioritizeTexturesxOES_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure PrioritizeTexturesxOES(n: Int32; textures: array of UInt32; priorities: IntPtr);
    begin
      z_PrioritizeTexturesxOES_ovr_2(n, textures[0], priorities);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure PrioritizeTexturesxOES(n: Int32; var textures: UInt32; priorities: array of Fixed);
    begin
      z_PrioritizeTexturesxOES_ovr_0(n, textures, priorities[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure PrioritizeTexturesxOES(n: Int32; var textures: UInt32; var priorities: Fixed);
    begin
      z_PrioritizeTexturesxOES_ovr_0(n, textures, priorities);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure PrioritizeTexturesxOES(n: Int32; var textures: UInt32; priorities: IntPtr);
    begin
      z_PrioritizeTexturesxOES_ovr_2(n, textures, priorities);
    end;
    public z_PrioritizeTexturesxOES_ovr_6 := GetFuncOrNil&<procedure(n: Int32; textures: IntPtr; var priorities: Fixed)>(z_PrioritizeTexturesxOES_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure PrioritizeTexturesxOES(n: Int32; textures: IntPtr; priorities: array of Fixed);
    begin
      z_PrioritizeTexturesxOES_ovr_6(n, textures, priorities[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure PrioritizeTexturesxOES(n: Int32; textures: IntPtr; var priorities: Fixed);
    begin
      z_PrioritizeTexturesxOES_ovr_6(n, textures, priorities);
    end;
    public z_PrioritizeTexturesxOES_ovr_8 := GetFuncOrNil&<procedure(n: Int32; textures: IntPtr; priorities: IntPtr)>(z_PrioritizeTexturesxOES_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure PrioritizeTexturesxOES(n: Int32; textures: IntPtr; priorities: IntPtr);
    begin
      z_PrioritizeTexturesxOES_ovr_8(n, textures, priorities);
    end;
    
    public z_RasterPos2xOES_adr := GetFuncAdr('glRasterPos2xOES');
    public z_RasterPos2xOES_ovr_0 := GetFuncOrNil&<procedure(x: Fixed; y: Fixed)>(z_RasterPos2xOES_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure RasterPos2xOES(x: Fixed; y: Fixed);
    begin
      z_RasterPos2xOES_ovr_0(x, y);
    end;
    
    public z_RasterPos2xvOES_adr := GetFuncAdr('glRasterPos2xvOES');
    public z_RasterPos2xvOES_ovr_0 := GetFuncOrNil&<procedure(var coords: Fixed)>(z_RasterPos2xvOES_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure RasterPos2xvOES(coords: array of Fixed);
    begin
      z_RasterPos2xvOES_ovr_0(coords[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure RasterPos2xvOES(var coords: Fixed);
    begin
      z_RasterPos2xvOES_ovr_0(coords);
    end;
    public z_RasterPos2xvOES_ovr_2 := GetFuncOrNil&<procedure(coords: IntPtr)>(z_RasterPos2xvOES_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure RasterPos2xvOES(coords: IntPtr);
    begin
      z_RasterPos2xvOES_ovr_2(coords);
    end;
    
    public z_RasterPos3xOES_adr := GetFuncAdr('glRasterPos3xOES');
    public z_RasterPos3xOES_ovr_0 := GetFuncOrNil&<procedure(x: Fixed; y: Fixed; z: Fixed)>(z_RasterPos3xOES_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure RasterPos3xOES(x: Fixed; y: Fixed; z: Fixed);
    begin
      z_RasterPos3xOES_ovr_0(x, y, z);
    end;
    
    public z_RasterPos3xvOES_adr := GetFuncAdr('glRasterPos3xvOES');
    public z_RasterPos3xvOES_ovr_0 := GetFuncOrNil&<procedure(var coords: Fixed)>(z_RasterPos3xvOES_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure RasterPos3xvOES(coords: array of Fixed);
    begin
      z_RasterPos3xvOES_ovr_0(coords[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure RasterPos3xvOES(var coords: Fixed);
    begin
      z_RasterPos3xvOES_ovr_0(coords);
    end;
    public z_RasterPos3xvOES_ovr_2 := GetFuncOrNil&<procedure(coords: IntPtr)>(z_RasterPos3xvOES_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure RasterPos3xvOES(coords: IntPtr);
    begin
      z_RasterPos3xvOES_ovr_2(coords);
    end;
    
    public z_RasterPos4xOES_adr := GetFuncAdr('glRasterPos4xOES');
    public z_RasterPos4xOES_ovr_0 := GetFuncOrNil&<procedure(x: Fixed; y: Fixed; z: Fixed; w: Fixed)>(z_RasterPos4xOES_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure RasterPos4xOES(x: Fixed; y: Fixed; z: Fixed; w: Fixed);
    begin
      z_RasterPos4xOES_ovr_0(x, y, z, w);
    end;
    
    public z_RasterPos4xvOES_adr := GetFuncAdr('glRasterPos4xvOES');
    public z_RasterPos4xvOES_ovr_0 := GetFuncOrNil&<procedure(var coords: Fixed)>(z_RasterPos4xvOES_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure RasterPos4xvOES(coords: array of Fixed);
    begin
      z_RasterPos4xvOES_ovr_0(coords[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure RasterPos4xvOES(var coords: Fixed);
    begin
      z_RasterPos4xvOES_ovr_0(coords);
    end;
    public z_RasterPos4xvOES_ovr_2 := GetFuncOrNil&<procedure(coords: IntPtr)>(z_RasterPos4xvOES_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure RasterPos4xvOES(coords: IntPtr);
    begin
      z_RasterPos4xvOES_ovr_2(coords);
    end;
    
    public z_RectxOES_adr := GetFuncAdr('glRectxOES');
    public z_RectxOES_ovr_0 := GetFuncOrNil&<procedure(x1: Fixed; y1: Fixed; x2: Fixed; y2: Fixed)>(z_RectxOES_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure RectxOES(x1: Fixed; y1: Fixed; x2: Fixed; y2: Fixed);
    begin
      z_RectxOES_ovr_0(x1, y1, x2, y2);
    end;
    
    public z_RectxvOES_adr := GetFuncAdr('glRectxvOES');
    public z_RectxvOES_ovr_0 := GetFuncOrNil&<procedure(var v1: Fixed; var v2: Fixed)>(z_RectxvOES_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure RectxvOES(v1: array of Fixed; v2: array of Fixed);
    begin
      z_RectxvOES_ovr_0(v1[0], v2[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure RectxvOES(v1: array of Fixed; var v2: Fixed);
    begin
      z_RectxvOES_ovr_0(v1[0], v2);
    end;
    public z_RectxvOES_ovr_2 := GetFuncOrNil&<procedure(var v1: Fixed; v2: IntPtr)>(z_RectxvOES_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure RectxvOES(v1: array of Fixed; v2: IntPtr);
    begin
      z_RectxvOES_ovr_2(v1[0], v2);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure RectxvOES(var v1: Fixed; v2: array of Fixed);
    begin
      z_RectxvOES_ovr_0(v1, v2[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure RectxvOES(var v1: Fixed; var v2: Fixed);
    begin
      z_RectxvOES_ovr_0(v1, v2);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure RectxvOES(var v1: Fixed; v2: IntPtr);
    begin
      z_RectxvOES_ovr_2(v1, v2);
    end;
    public z_RectxvOES_ovr_6 := GetFuncOrNil&<procedure(v1: IntPtr; var v2: Fixed)>(z_RectxvOES_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure RectxvOES(v1: IntPtr; v2: array of Fixed);
    begin
      z_RectxvOES_ovr_6(v1, v2[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure RectxvOES(v1: IntPtr; var v2: Fixed);
    begin
      z_RectxvOES_ovr_6(v1, v2);
    end;
    public z_RectxvOES_ovr_8 := GetFuncOrNil&<procedure(v1: IntPtr; v2: IntPtr)>(z_RectxvOES_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure RectxvOES(v1: IntPtr; v2: IntPtr);
    begin
      z_RectxvOES_ovr_8(v1, v2);
    end;
    
    public z_TexCoord1xOES_adr := GetFuncAdr('glTexCoord1xOES');
    public z_TexCoord1xOES_ovr_0 := GetFuncOrNil&<procedure(s: Fixed)>(z_TexCoord1xOES_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TexCoord1xOES(s: Fixed);
    begin
      z_TexCoord1xOES_ovr_0(s);
    end;
    
    public z_TexCoord1xvOES_adr := GetFuncAdr('glTexCoord1xvOES');
    public z_TexCoord1xvOES_ovr_0 := GetFuncOrNil&<procedure(var coords: Fixed)>(z_TexCoord1xvOES_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TexCoord1xvOES(coords: array of Fixed);
    begin
      z_TexCoord1xvOES_ovr_0(coords[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TexCoord1xvOES(var coords: Fixed);
    begin
      z_TexCoord1xvOES_ovr_0(coords);
    end;
    public z_TexCoord1xvOES_ovr_2 := GetFuncOrNil&<procedure(coords: IntPtr)>(z_TexCoord1xvOES_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TexCoord1xvOES(coords: IntPtr);
    begin
      z_TexCoord1xvOES_ovr_2(coords);
    end;
    
    public z_TexCoord2xOES_adr := GetFuncAdr('glTexCoord2xOES');
    public z_TexCoord2xOES_ovr_0 := GetFuncOrNil&<procedure(s: Fixed; t: Fixed)>(z_TexCoord2xOES_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TexCoord2xOES(s: Fixed; t: Fixed);
    begin
      z_TexCoord2xOES_ovr_0(s, t);
    end;
    
    public z_TexCoord2xvOES_adr := GetFuncAdr('glTexCoord2xvOES');
    public z_TexCoord2xvOES_ovr_0 := GetFuncOrNil&<procedure(var coords: Fixed)>(z_TexCoord2xvOES_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TexCoord2xvOES(coords: array of Fixed);
    begin
      z_TexCoord2xvOES_ovr_0(coords[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TexCoord2xvOES(var coords: Fixed);
    begin
      z_TexCoord2xvOES_ovr_0(coords);
    end;
    public z_TexCoord2xvOES_ovr_2 := GetFuncOrNil&<procedure(coords: IntPtr)>(z_TexCoord2xvOES_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TexCoord2xvOES(coords: IntPtr);
    begin
      z_TexCoord2xvOES_ovr_2(coords);
    end;
    
    public z_TexCoord3xOES_adr := GetFuncAdr('glTexCoord3xOES');
    public z_TexCoord3xOES_ovr_0 := GetFuncOrNil&<procedure(s: Fixed; t: Fixed; r: Fixed)>(z_TexCoord3xOES_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TexCoord3xOES(s: Fixed; t: Fixed; r: Fixed);
    begin
      z_TexCoord3xOES_ovr_0(s, t, r);
    end;
    
    public z_TexCoord3xvOES_adr := GetFuncAdr('glTexCoord3xvOES');
    public z_TexCoord3xvOES_ovr_0 := GetFuncOrNil&<procedure(var coords: Fixed)>(z_TexCoord3xvOES_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TexCoord3xvOES(coords: array of Fixed);
    begin
      z_TexCoord3xvOES_ovr_0(coords[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TexCoord3xvOES(var coords: Fixed);
    begin
      z_TexCoord3xvOES_ovr_0(coords);
    end;
    public z_TexCoord3xvOES_ovr_2 := GetFuncOrNil&<procedure(coords: IntPtr)>(z_TexCoord3xvOES_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TexCoord3xvOES(coords: IntPtr);
    begin
      z_TexCoord3xvOES_ovr_2(coords);
    end;
    
    public z_TexCoord4xOES_adr := GetFuncAdr('glTexCoord4xOES');
    public z_TexCoord4xOES_ovr_0 := GetFuncOrNil&<procedure(s: Fixed; t: Fixed; r: Fixed; q: Fixed)>(z_TexCoord4xOES_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TexCoord4xOES(s: Fixed; t: Fixed; r: Fixed; q: Fixed);
    begin
      z_TexCoord4xOES_ovr_0(s, t, r, q);
    end;
    
    public z_TexCoord4xvOES_adr := GetFuncAdr('glTexCoord4xvOES');
    public z_TexCoord4xvOES_ovr_0 := GetFuncOrNil&<procedure(var coords: Fixed)>(z_TexCoord4xvOES_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TexCoord4xvOES(coords: array of Fixed);
    begin
      z_TexCoord4xvOES_ovr_0(coords[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TexCoord4xvOES(var coords: Fixed);
    begin
      z_TexCoord4xvOES_ovr_0(coords);
    end;
    public z_TexCoord4xvOES_ovr_2 := GetFuncOrNil&<procedure(coords: IntPtr)>(z_TexCoord4xvOES_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TexCoord4xvOES(coords: IntPtr);
    begin
      z_TexCoord4xvOES_ovr_2(coords);
    end;
    
    public z_TexGenxOES_adr := GetFuncAdr('glTexGenxOES');
    public z_TexGenxOES_ovr_0 := GetFuncOrNil&<procedure(coord: TextureCoordName; pname: TextureGenParameter; param: Fixed)>(z_TexGenxOES_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TexGenxOES(coord: TextureCoordName; pname: TextureGenParameter; param: Fixed);
    begin
      z_TexGenxOES_ovr_0(coord, pname, param);
    end;
    
    public z_TexGenxvOES_adr := GetFuncAdr('glTexGenxvOES');
    public z_TexGenxvOES_ovr_0 := GetFuncOrNil&<procedure(coord: TextureCoordName; pname: TextureGenParameter; var &params: Fixed)>(z_TexGenxvOES_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TexGenxvOES(coord: TextureCoordName; pname: TextureGenParameter; &params: array of Fixed);
    begin
      z_TexGenxvOES_ovr_0(coord, pname, &params[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TexGenxvOES(coord: TextureCoordName; pname: TextureGenParameter; var &params: Fixed);
    begin
      z_TexGenxvOES_ovr_0(coord, pname, &params);
    end;
    public z_TexGenxvOES_ovr_2 := GetFuncOrNil&<procedure(coord: TextureCoordName; pname: TextureGenParameter; &params: IntPtr)>(z_TexGenxvOES_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TexGenxvOES(coord: TextureCoordName; pname: TextureGenParameter; &params: IntPtr);
    begin
      z_TexGenxvOES_ovr_2(coord, pname, &params);
    end;
    
    public z_Vertex2xOES_adr := GetFuncAdr('glVertex2xOES');
    public z_Vertex2xOES_ovr_0 := GetFuncOrNil&<procedure(x: Fixed)>(z_Vertex2xOES_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Vertex2xOES(x: Fixed);
    begin
      z_Vertex2xOES_ovr_0(x);
    end;
    
    public z_Vertex2xvOES_adr := GetFuncAdr('glVertex2xvOES');
    public z_Vertex2xvOES_ovr_0 := GetFuncOrNil&<procedure(var coords: Fixed)>(z_Vertex2xvOES_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Vertex2xvOES(coords: array of Fixed);
    begin
      z_Vertex2xvOES_ovr_0(coords[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Vertex2xvOES(var coords: Fixed);
    begin
      z_Vertex2xvOES_ovr_0(coords);
    end;
    public z_Vertex2xvOES_ovr_2 := GetFuncOrNil&<procedure(coords: IntPtr)>(z_Vertex2xvOES_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Vertex2xvOES(coords: IntPtr);
    begin
      z_Vertex2xvOES_ovr_2(coords);
    end;
    
    public z_Vertex3xOES_adr := GetFuncAdr('glVertex3xOES');
    public z_Vertex3xOES_ovr_0 := GetFuncOrNil&<procedure(x: Fixed; y: Fixed)>(z_Vertex3xOES_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Vertex3xOES(x: Fixed; y: Fixed);
    begin
      z_Vertex3xOES_ovr_0(x, y);
    end;
    
    public z_Vertex3xvOES_adr := GetFuncAdr('glVertex3xvOES');
    public z_Vertex3xvOES_ovr_0 := GetFuncOrNil&<procedure(var coords: Fixed)>(z_Vertex3xvOES_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Vertex3xvOES(coords: array of Fixed);
    begin
      z_Vertex3xvOES_ovr_0(coords[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Vertex3xvOES(var coords: Fixed);
    begin
      z_Vertex3xvOES_ovr_0(coords);
    end;
    public z_Vertex3xvOES_ovr_2 := GetFuncOrNil&<procedure(coords: IntPtr)>(z_Vertex3xvOES_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Vertex3xvOES(coords: IntPtr);
    begin
      z_Vertex3xvOES_ovr_2(coords);
    end;
    
    public z_Vertex4xOES_adr := GetFuncAdr('glVertex4xOES');
    public z_Vertex4xOES_ovr_0 := GetFuncOrNil&<procedure(x: Fixed; y: Fixed; z: Fixed)>(z_Vertex4xOES_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Vertex4xOES(x: Fixed; y: Fixed; z: Fixed);
    begin
      z_Vertex4xOES_ovr_0(x, y, z);
    end;
    
    public z_Vertex4xvOES_adr := GetFuncAdr('glVertex4xvOES');
    public z_Vertex4xvOES_ovr_0 := GetFuncOrNil&<procedure(var coords: Fixed)>(z_Vertex4xvOES_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Vertex4xvOES(coords: array of Fixed);
    begin
      z_Vertex4xvOES_ovr_0(coords[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Vertex4xvOES(var coords: Fixed);
    begin
      z_Vertex4xvOES_ovr_0(coords);
    end;
    public z_Vertex4xvOES_ovr_2 := GetFuncOrNil&<procedure(coords: IntPtr)>(z_Vertex4xvOES_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Vertex4xvOES(coords: IntPtr);
    begin
      z_Vertex4xvOES_ovr_2(coords);
    end;
    
  end;
  
  glQueryMatrixOES = sealed class
    public static function GetFuncAdr([MarshalAs(UnmanagedType.LPStr)] lpszProc: string): IntPtr;
    external 'opengl32.dll' name 'wglGetProcAddress';
    public static function GetFuncOrNil<T>(fadr: IntPtr) :=
    fadr=IntPtr.Zero ? default(T) :
    Marshal.GetDelegateForFunctionPointer&<T>(fadr);
    
    public z_QueryMatrixxOES_adr := GetFuncAdr('glQueryMatrixxOES');
    public z_QueryMatrixxOES_ovr_0 := GetFuncOrNil&<function(var mantissa: Fixed; var exponent: Int32): DummyFlags>(z_QueryMatrixxOES_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function QueryMatrixxOES(mantissa: array of Fixed; exponent: array of Int32): DummyFlags;
    begin
      Result := z_QueryMatrixxOES_ovr_0(mantissa[0], exponent[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function QueryMatrixxOES(mantissa: array of Fixed; var exponent: Int32): DummyFlags;
    begin
      Result := z_QueryMatrixxOES_ovr_0(mantissa[0], exponent);
    end;
    public z_QueryMatrixxOES_ovr_2 := GetFuncOrNil&<function(var mantissa: Fixed; exponent: IntPtr): DummyFlags>(z_QueryMatrixxOES_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function QueryMatrixxOES(mantissa: array of Fixed; exponent: IntPtr): DummyFlags;
    begin
      Result := z_QueryMatrixxOES_ovr_2(mantissa[0], exponent);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function QueryMatrixxOES(var mantissa: Fixed; exponent: array of Int32): DummyFlags;
    begin
      Result := z_QueryMatrixxOES_ovr_0(mantissa, exponent[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function QueryMatrixxOES(var mantissa: Fixed; var exponent: Int32): DummyFlags;
    begin
      Result := z_QueryMatrixxOES_ovr_0(mantissa, exponent);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function QueryMatrixxOES(var mantissa: Fixed; exponent: IntPtr): DummyFlags;
    begin
      Result := z_QueryMatrixxOES_ovr_2(mantissa, exponent);
    end;
    public z_QueryMatrixxOES_ovr_6 := GetFuncOrNil&<function(mantissa: IntPtr; var exponent: Int32): DummyFlags>(z_QueryMatrixxOES_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function QueryMatrixxOES(mantissa: IntPtr; exponent: array of Int32): DummyFlags;
    begin
      Result := z_QueryMatrixxOES_ovr_6(mantissa, exponent[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function QueryMatrixxOES(mantissa: IntPtr; var exponent: Int32): DummyFlags;
    begin
      Result := z_QueryMatrixxOES_ovr_6(mantissa, exponent);
    end;
    public z_QueryMatrixxOES_ovr_8 := GetFuncOrNil&<function(mantissa: IntPtr; exponent: IntPtr): DummyFlags>(z_QueryMatrixxOES_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function QueryMatrixxOES(mantissa: IntPtr; exponent: IntPtr): DummyFlags;
    begin
      Result := z_QueryMatrixxOES_ovr_8(mantissa, exponent);
    end;
    
  end;
  
  glSinglePrecisionOES = sealed class
    public static function GetFuncAdr([MarshalAs(UnmanagedType.LPStr)] lpszProc: string): IntPtr;
    external 'opengl32.dll' name 'wglGetProcAddress';
    public static function GetFuncOrNil<T>(fadr: IntPtr) :=
    fadr=IntPtr.Zero ? default(T) :
    Marshal.GetDelegateForFunctionPointer&<T>(fadr);
    
    public z_ClearDepthfOES_adr := GetFuncAdr('glClearDepthfOES');
    public z_ClearDepthfOES_ovr_0 := GetFuncOrNil&<procedure(depth: single)>(z_ClearDepthfOES_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ClearDepthfOES(depth: single);
    begin
      z_ClearDepthfOES_ovr_0(depth);
    end;
    
    public z_ClipPlanefOES_adr := GetFuncAdr('glClipPlanefOES');
    public z_ClipPlanefOES_ovr_0 := GetFuncOrNil&<procedure(plane: ClipPlaneName; var equation: single)>(z_ClipPlanefOES_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ClipPlanefOES(plane: ClipPlaneName; equation: array of single);
    begin
      z_ClipPlanefOES_ovr_0(plane, equation[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ClipPlanefOES(plane: ClipPlaneName; var equation: single);
    begin
      z_ClipPlanefOES_ovr_0(plane, equation);
    end;
    public z_ClipPlanefOES_ovr_2 := GetFuncOrNil&<procedure(plane: ClipPlaneName; equation: IntPtr)>(z_ClipPlanefOES_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ClipPlanefOES(plane: ClipPlaneName; equation: IntPtr);
    begin
      z_ClipPlanefOES_ovr_2(plane, equation);
    end;
    
    public z_DepthRangefOES_adr := GetFuncAdr('glDepthRangefOES');
    public z_DepthRangefOES_ovr_0 := GetFuncOrNil&<procedure(n: single; f: single)>(z_DepthRangefOES_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure DepthRangefOES(n: single; f: single);
    begin
      z_DepthRangefOES_ovr_0(n, f);
    end;
    
    public z_FrustumfOES_adr := GetFuncAdr('glFrustumfOES');
    public z_FrustumfOES_ovr_0 := GetFuncOrNil&<procedure(l: single; r: single; b: single; t: single; n: single; f: single)>(z_FrustumfOES_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure FrustumfOES(l: single; r: single; b: single; t: single; n: single; f: single);
    begin
      z_FrustumfOES_ovr_0(l, r, b, t, n, f);
    end;
    
    public z_GetClipPlanefOES_adr := GetFuncAdr('glGetClipPlanefOES');
    public z_GetClipPlanefOES_ovr_0 := GetFuncOrNil&<procedure(plane: ClipPlaneName; var equation: single)>(z_GetClipPlanefOES_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetClipPlanefOES(plane: ClipPlaneName; equation: array of single);
    begin
      z_GetClipPlanefOES_ovr_0(plane, equation[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetClipPlanefOES(plane: ClipPlaneName; var equation: single);
    begin
      z_GetClipPlanefOES_ovr_0(plane, equation);
    end;
    public z_GetClipPlanefOES_ovr_2 := GetFuncOrNil&<procedure(plane: ClipPlaneName; equation: IntPtr)>(z_GetClipPlanefOES_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetClipPlanefOES(plane: ClipPlaneName; equation: IntPtr);
    begin
      z_GetClipPlanefOES_ovr_2(plane, equation);
    end;
    
    public z_OrthofOES_adr := GetFuncAdr('glOrthofOES');
    public z_OrthofOES_ovr_0 := GetFuncOrNil&<procedure(l: single; r: single; b: single; t: single; n: single; f: single)>(z_OrthofOES_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure OrthofOES(l: single; r: single; b: single; t: single; n: single; f: single);
    begin
      z_OrthofOES_ovr_0(l, r, b, t, n, f);
    end;
    
  end;
  
  glMultiviewOVR = sealed class
    public static function GetFuncAdr([MarshalAs(UnmanagedType.LPStr)] lpszProc: string): IntPtr;
    external 'opengl32.dll' name 'wglGetProcAddress';
    public static function GetFuncOrNil<T>(fadr: IntPtr) :=
    fadr=IntPtr.Zero ? default(T) :
    Marshal.GetDelegateForFunctionPointer&<T>(fadr);
    
    public z_FramebufferTextureMultiviewOVR_adr := GetFuncAdr('glFramebufferTextureMultiviewOVR');
    public z_FramebufferTextureMultiviewOVR_ovr_0 := GetFuncOrNil&<procedure(target: FramebufferTarget; attachment: FramebufferAttachment; texture: UInt32; level: Int32; baseViewIndex: Int32; numViews: Int32)>(z_FramebufferTextureMultiviewOVR_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure FramebufferTextureMultiviewOVR(target: FramebufferTarget; attachment: FramebufferAttachment; texture: UInt32; level: Int32; baseViewIndex: Int32; numViews: Int32);
    begin
      z_FramebufferTextureMultiviewOVR_ovr_0(target, attachment, texture, level, baseViewIndex, numViews);
    end;
    
  end;
  
  glMiscHintsPGI = sealed class
    public static function GetFuncAdr([MarshalAs(UnmanagedType.LPStr)] lpszProc: string): IntPtr;
    external 'opengl32.dll' name 'wglGetProcAddress';
    public static function GetFuncOrNil<T>(fadr: IntPtr) :=
    fadr=IntPtr.Zero ? default(T) :
    Marshal.GetDelegateForFunctionPointer&<T>(fadr);
    
    public z_HintPGI_adr := GetFuncAdr('glHintPGI');
    public z_HintPGI_ovr_0 := GetFuncOrNil&<procedure(target: HintTargetPGI; mode: Int32)>(z_HintPGI_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure HintPGI(target: HintTargetPGI; mode: Int32);
    begin
      z_HintPGI_ovr_0(target, mode);
    end;
    
  end;
  
  glDetailTextureSGIS = sealed class
    public static function GetFuncAdr([MarshalAs(UnmanagedType.LPStr)] lpszProc: string): IntPtr;
    external 'opengl32.dll' name 'wglGetProcAddress';
    public static function GetFuncOrNil<T>(fadr: IntPtr) :=
    fadr=IntPtr.Zero ? default(T) :
    Marshal.GetDelegateForFunctionPointer&<T>(fadr);
    
    public z_DetailTexFuncSGIS_adr := GetFuncAdr('glDetailTexFuncSGIS');
    public z_DetailTexFuncSGIS_ovr_0 := GetFuncOrNil&<procedure(target: TextureTarget; n: Int32; var points: single)>(z_DetailTexFuncSGIS_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure DetailTexFuncSGIS(target: TextureTarget; n: Int32; points: array of single);
    begin
      z_DetailTexFuncSGIS_ovr_0(target, n, points[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure DetailTexFuncSGIS(target: TextureTarget; n: Int32; var points: single);
    begin
      z_DetailTexFuncSGIS_ovr_0(target, n, points);
    end;
    public z_DetailTexFuncSGIS_ovr_2 := GetFuncOrNil&<procedure(target: TextureTarget; n: Int32; points: IntPtr)>(z_DetailTexFuncSGIS_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure DetailTexFuncSGIS(target: TextureTarget; n: Int32; points: IntPtr);
    begin
      z_DetailTexFuncSGIS_ovr_2(target, n, points);
    end;
    
    public z_GetDetailTexFuncSGIS_adr := GetFuncAdr('glGetDetailTexFuncSGIS');
    public z_GetDetailTexFuncSGIS_ovr_0 := GetFuncOrNil&<procedure(target: TextureTarget; var points: single)>(z_GetDetailTexFuncSGIS_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetDetailTexFuncSGIS(target: TextureTarget; points: array of single);
    begin
      z_GetDetailTexFuncSGIS_ovr_0(target, points[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetDetailTexFuncSGIS(target: TextureTarget; var points: single);
    begin
      z_GetDetailTexFuncSGIS_ovr_0(target, points);
    end;
    public z_GetDetailTexFuncSGIS_ovr_2 := GetFuncOrNil&<procedure(target: TextureTarget; points: IntPtr)>(z_GetDetailTexFuncSGIS_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetDetailTexFuncSGIS(target: TextureTarget; points: IntPtr);
    begin
      z_GetDetailTexFuncSGIS_ovr_2(target, points);
    end;
    
  end;
  
  glFogFunctionSGIS = sealed class
    public static function GetFuncAdr([MarshalAs(UnmanagedType.LPStr)] lpszProc: string): IntPtr;
    external 'opengl32.dll' name 'wglGetProcAddress';
    public static function GetFuncOrNil<T>(fadr: IntPtr) :=
    fadr=IntPtr.Zero ? default(T) :
    Marshal.GetDelegateForFunctionPointer&<T>(fadr);
    
    public z_FogFuncSGIS_adr := GetFuncAdr('glFogFuncSGIS');
    public z_FogFuncSGIS_ovr_0 := GetFuncOrNil&<procedure(n: Int32; var points: single)>(z_FogFuncSGIS_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure FogFuncSGIS(n: Int32; points: array of single);
    begin
      z_FogFuncSGIS_ovr_0(n, points[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure FogFuncSGIS(n: Int32; var points: single);
    begin
      z_FogFuncSGIS_ovr_0(n, points);
    end;
    public z_FogFuncSGIS_ovr_2 := GetFuncOrNil&<procedure(n: Int32; points: IntPtr)>(z_FogFuncSGIS_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure FogFuncSGIS(n: Int32; points: IntPtr);
    begin
      z_FogFuncSGIS_ovr_2(n, points);
    end;
    
    public z_GetFogFuncSGIS_adr := GetFuncAdr('glGetFogFuncSGIS');
    public z_GetFogFuncSGIS_ovr_0 := GetFuncOrNil&<procedure(var points: single)>(z_GetFogFuncSGIS_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetFogFuncSGIS(points: array of single);
    begin
      z_GetFogFuncSGIS_ovr_0(points[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetFogFuncSGIS(var points: single);
    begin
      z_GetFogFuncSGIS_ovr_0(points);
    end;
    public z_GetFogFuncSGIS_ovr_2 := GetFuncOrNil&<procedure(points: IntPtr)>(z_GetFogFuncSGIS_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetFogFuncSGIS(points: IntPtr);
    begin
      z_GetFogFuncSGIS_ovr_2(points);
    end;
    
  end;
  
  glMultisampleSGIS = sealed class
    public static function GetFuncAdr([MarshalAs(UnmanagedType.LPStr)] lpszProc: string): IntPtr;
    external 'opengl32.dll' name 'wglGetProcAddress';
    public static function GetFuncOrNil<T>(fadr: IntPtr) :=
    fadr=IntPtr.Zero ? default(T) :
    Marshal.GetDelegateForFunctionPointer&<T>(fadr);
    
    public z_SampleMaskSGIS_adr := GetFuncAdr('glSampleMaskSGIS');
    public z_SampleMaskSGIS_ovr_0 := GetFuncOrNil&<procedure(value: single; invert: boolean)>(z_SampleMaskSGIS_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure SampleMaskSGIS(value: single; invert: boolean);
    begin
      z_SampleMaskSGIS_ovr_0(value, invert);
    end;
    
    public z_SamplePatternSGIS_adr := GetFuncAdr('glSamplePatternSGIS');
    public z_SamplePatternSGIS_ovr_0 := GetFuncOrNil&<procedure(pattern: OpenGL.SamplePatternSGIS)>(z_SamplePatternSGIS_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure SamplePatternSGIS(pattern: OpenGL.SamplePatternSGIS);
    begin
      z_SamplePatternSGIS_ovr_0(pattern);
    end;
    
  end;
  
  glPixelTextureSGIS = sealed class
    public static function GetFuncAdr([MarshalAs(UnmanagedType.LPStr)] lpszProc: string): IntPtr;
    external 'opengl32.dll' name 'wglGetProcAddress';
    public static function GetFuncOrNil<T>(fadr: IntPtr) :=
    fadr=IntPtr.Zero ? default(T) :
    Marshal.GetDelegateForFunctionPointer&<T>(fadr);
    
    public z_PixelTexGenParameteriSGIS_adr := GetFuncAdr('glPixelTexGenParameteriSGIS');
    public z_PixelTexGenParameteriSGIS_ovr_0 := GetFuncOrNil&<procedure(pname: PixelTexGenParameterNameSGIS; param: Int32)>(z_PixelTexGenParameteriSGIS_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure PixelTexGenParameteriSGIS(pname: PixelTexGenParameterNameSGIS; param: Int32);
    begin
      z_PixelTexGenParameteriSGIS_ovr_0(pname, param);
    end;
    
    public z_PixelTexGenParameterivSGIS_adr := GetFuncAdr('glPixelTexGenParameterivSGIS');
    public z_PixelTexGenParameterivSGIS_ovr_0 := GetFuncOrNil&<procedure(pname: PixelTexGenParameterNameSGIS; var &params: Int32)>(z_PixelTexGenParameterivSGIS_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure PixelTexGenParameterivSGIS(pname: PixelTexGenParameterNameSGIS; &params: array of Int32);
    begin
      z_PixelTexGenParameterivSGIS_ovr_0(pname, &params[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure PixelTexGenParameterivSGIS(pname: PixelTexGenParameterNameSGIS; var &params: Int32);
    begin
      z_PixelTexGenParameterivSGIS_ovr_0(pname, &params);
    end;
    public z_PixelTexGenParameterivSGIS_ovr_2 := GetFuncOrNil&<procedure(pname: PixelTexGenParameterNameSGIS; &params: IntPtr)>(z_PixelTexGenParameterivSGIS_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure PixelTexGenParameterivSGIS(pname: PixelTexGenParameterNameSGIS; &params: IntPtr);
    begin
      z_PixelTexGenParameterivSGIS_ovr_2(pname, &params);
    end;
    
    public z_PixelTexGenParameterfSGIS_adr := GetFuncAdr('glPixelTexGenParameterfSGIS');
    public z_PixelTexGenParameterfSGIS_ovr_0 := GetFuncOrNil&<procedure(pname: PixelTexGenParameterNameSGIS; param: single)>(z_PixelTexGenParameterfSGIS_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure PixelTexGenParameterfSGIS(pname: PixelTexGenParameterNameSGIS; param: single);
    begin
      z_PixelTexGenParameterfSGIS_ovr_0(pname, param);
    end;
    
    public z_PixelTexGenParameterfvSGIS_adr := GetFuncAdr('glPixelTexGenParameterfvSGIS');
    public z_PixelTexGenParameterfvSGIS_ovr_0 := GetFuncOrNil&<procedure(pname: PixelTexGenParameterNameSGIS; var &params: single)>(z_PixelTexGenParameterfvSGIS_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure PixelTexGenParameterfvSGIS(pname: PixelTexGenParameterNameSGIS; &params: array of single);
    begin
      z_PixelTexGenParameterfvSGIS_ovr_0(pname, &params[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure PixelTexGenParameterfvSGIS(pname: PixelTexGenParameterNameSGIS; var &params: single);
    begin
      z_PixelTexGenParameterfvSGIS_ovr_0(pname, &params);
    end;
    public z_PixelTexGenParameterfvSGIS_ovr_2 := GetFuncOrNil&<procedure(pname: PixelTexGenParameterNameSGIS; &params: IntPtr)>(z_PixelTexGenParameterfvSGIS_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure PixelTexGenParameterfvSGIS(pname: PixelTexGenParameterNameSGIS; &params: IntPtr);
    begin
      z_PixelTexGenParameterfvSGIS_ovr_2(pname, &params);
    end;
    
    public z_GetPixelTexGenParameterivSGIS_adr := GetFuncAdr('glGetPixelTexGenParameterivSGIS');
    public z_GetPixelTexGenParameterivSGIS_ovr_0 := GetFuncOrNil&<procedure(pname: PixelTexGenParameterNameSGIS; var &params: Int32)>(z_GetPixelTexGenParameterivSGIS_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetPixelTexGenParameterivSGIS(pname: PixelTexGenParameterNameSGIS; &params: array of Int32);
    begin
      z_GetPixelTexGenParameterivSGIS_ovr_0(pname, &params[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetPixelTexGenParameterivSGIS(pname: PixelTexGenParameterNameSGIS; var &params: Int32);
    begin
      z_GetPixelTexGenParameterivSGIS_ovr_0(pname, &params);
    end;
    public z_GetPixelTexGenParameterivSGIS_ovr_2 := GetFuncOrNil&<procedure(pname: PixelTexGenParameterNameSGIS; &params: IntPtr)>(z_GetPixelTexGenParameterivSGIS_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetPixelTexGenParameterivSGIS(pname: PixelTexGenParameterNameSGIS; &params: IntPtr);
    begin
      z_GetPixelTexGenParameterivSGIS_ovr_2(pname, &params);
    end;
    
    public z_GetPixelTexGenParameterfvSGIS_adr := GetFuncAdr('glGetPixelTexGenParameterfvSGIS');
    public z_GetPixelTexGenParameterfvSGIS_ovr_0 := GetFuncOrNil&<procedure(pname: PixelTexGenParameterNameSGIS; var &params: single)>(z_GetPixelTexGenParameterfvSGIS_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetPixelTexGenParameterfvSGIS(pname: PixelTexGenParameterNameSGIS; &params: array of single);
    begin
      z_GetPixelTexGenParameterfvSGIS_ovr_0(pname, &params[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetPixelTexGenParameterfvSGIS(pname: PixelTexGenParameterNameSGIS; var &params: single);
    begin
      z_GetPixelTexGenParameterfvSGIS_ovr_0(pname, &params);
    end;
    public z_GetPixelTexGenParameterfvSGIS_ovr_2 := GetFuncOrNil&<procedure(pname: PixelTexGenParameterNameSGIS; &params: IntPtr)>(z_GetPixelTexGenParameterfvSGIS_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetPixelTexGenParameterfvSGIS(pname: PixelTexGenParameterNameSGIS; &params: IntPtr);
    begin
      z_GetPixelTexGenParameterfvSGIS_ovr_2(pname, &params);
    end;
    
  end;
  
  glPointParametersSGIS = sealed class
    public static function GetFuncAdr([MarshalAs(UnmanagedType.LPStr)] lpszProc: string): IntPtr;
    external 'opengl32.dll' name 'wglGetProcAddress';
    public static function GetFuncOrNil<T>(fadr: IntPtr) :=
    fadr=IntPtr.Zero ? default(T) :
    Marshal.GetDelegateForFunctionPointer&<T>(fadr);
    
    public z_PointParameterfSGIS_adr := GetFuncAdr('glPointParameterfSGIS');
    public z_PointParameterfSGIS_ovr_0 := GetFuncOrNil&<procedure(pname: PointParameterNameARB; param: single)>(z_PointParameterfSGIS_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure PointParameterfSGIS(pname: PointParameterNameARB; param: single);
    begin
      z_PointParameterfSGIS_ovr_0(pname, param);
    end;
    
    public z_PointParameterfvSGIS_adr := GetFuncAdr('glPointParameterfvSGIS');
    public z_PointParameterfvSGIS_ovr_0 := GetFuncOrNil&<procedure(pname: PointParameterNameARB; var &params: single)>(z_PointParameterfvSGIS_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure PointParameterfvSGIS(pname: PointParameterNameARB; &params: array of single);
    begin
      z_PointParameterfvSGIS_ovr_0(pname, &params[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure PointParameterfvSGIS(pname: PointParameterNameARB; var &params: single);
    begin
      z_PointParameterfvSGIS_ovr_0(pname, &params);
    end;
    public z_PointParameterfvSGIS_ovr_2 := GetFuncOrNil&<procedure(pname: PointParameterNameARB; &params: IntPtr)>(z_PointParameterfvSGIS_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure PointParameterfvSGIS(pname: PointParameterNameARB; &params: IntPtr);
    begin
      z_PointParameterfvSGIS_ovr_2(pname, &params);
    end;
    
  end;
  
  glSharpenTextureSGIS = sealed class
    public static function GetFuncAdr([MarshalAs(UnmanagedType.LPStr)] lpszProc: string): IntPtr;
    external 'opengl32.dll' name 'wglGetProcAddress';
    public static function GetFuncOrNil<T>(fadr: IntPtr) :=
    fadr=IntPtr.Zero ? default(T) :
    Marshal.GetDelegateForFunctionPointer&<T>(fadr);
    
    public z_SharpenTexFuncSGIS_adr := GetFuncAdr('glSharpenTexFuncSGIS');
    public z_SharpenTexFuncSGIS_ovr_0 := GetFuncOrNil&<procedure(target: TextureTarget; n: Int32; var points: single)>(z_SharpenTexFuncSGIS_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure SharpenTexFuncSGIS(target: TextureTarget; n: Int32; points: array of single);
    begin
      z_SharpenTexFuncSGIS_ovr_0(target, n, points[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure SharpenTexFuncSGIS(target: TextureTarget; n: Int32; var points: single);
    begin
      z_SharpenTexFuncSGIS_ovr_0(target, n, points);
    end;
    public z_SharpenTexFuncSGIS_ovr_2 := GetFuncOrNil&<procedure(target: TextureTarget; n: Int32; points: IntPtr)>(z_SharpenTexFuncSGIS_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure SharpenTexFuncSGIS(target: TextureTarget; n: Int32; points: IntPtr);
    begin
      z_SharpenTexFuncSGIS_ovr_2(target, n, points);
    end;
    
    public z_GetSharpenTexFuncSGIS_adr := GetFuncAdr('glGetSharpenTexFuncSGIS');
    public z_GetSharpenTexFuncSGIS_ovr_0 := GetFuncOrNil&<procedure(target: TextureTarget; var points: single)>(z_GetSharpenTexFuncSGIS_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetSharpenTexFuncSGIS(target: TextureTarget; points: array of single);
    begin
      z_GetSharpenTexFuncSGIS_ovr_0(target, points[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetSharpenTexFuncSGIS(target: TextureTarget; var points: single);
    begin
      z_GetSharpenTexFuncSGIS_ovr_0(target, points);
    end;
    public z_GetSharpenTexFuncSGIS_ovr_2 := GetFuncOrNil&<procedure(target: TextureTarget; points: IntPtr)>(z_GetSharpenTexFuncSGIS_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetSharpenTexFuncSGIS(target: TextureTarget; points: IntPtr);
    begin
      z_GetSharpenTexFuncSGIS_ovr_2(target, points);
    end;
    
  end;
  
  glTexture4DSGIS = sealed class
    public static function GetFuncAdr([MarshalAs(UnmanagedType.LPStr)] lpszProc: string): IntPtr;
    external 'opengl32.dll' name 'wglGetProcAddress';
    public static function GetFuncOrNil<T>(fadr: IntPtr) :=
    fadr=IntPtr.Zero ? default(T) :
    Marshal.GetDelegateForFunctionPointer&<T>(fadr);
    
    public z_TexImage4DSGIS_adr := GetFuncAdr('glTexImage4DSGIS');
    public z_TexImage4DSGIS_ovr_0 := GetFuncOrNil&<procedure(target: TextureTarget; level: Int32; _internalformat: InternalFormat; width: Int32; height: Int32; depth: Int32; size4d: Int32; border: Int32; format: PixelFormat; &type: PixelType; pixels: IntPtr)>(z_TexImage4DSGIS_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TexImage4DSGIS(target: TextureTarget; level: Int32; _internalformat: InternalFormat; width: Int32; height: Int32; depth: Int32; size4d: Int32; border: Int32; format: PixelFormat; &type: PixelType; pixels: IntPtr);
    begin
      z_TexImage4DSGIS_ovr_0(target, level, _internalformat, width, height, depth, size4d, border, format, &type, pixels);
    end;
    
    public z_TexSubImage4DSGIS_adr := GetFuncAdr('glTexSubImage4DSGIS');
    public z_TexSubImage4DSGIS_ovr_0 := GetFuncOrNil&<procedure(target: TextureTarget; level: Int32; xoffset: Int32; yoffset: Int32; zoffset: Int32; woffset: Int32; width: Int32; height: Int32; depth: Int32; size4d: Int32; format: PixelFormat; &type: PixelType; pixels: IntPtr)>(z_TexSubImage4DSGIS_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TexSubImage4DSGIS(target: TextureTarget; level: Int32; xoffset: Int32; yoffset: Int32; zoffset: Int32; woffset: Int32; width: Int32; height: Int32; depth: Int32; size4d: Int32; format: PixelFormat; &type: PixelType; pixels: IntPtr);
    begin
      z_TexSubImage4DSGIS_ovr_0(target, level, xoffset, yoffset, zoffset, woffset, width, height, depth, size4d, format, &type, pixels);
    end;
    
  end;
  
  glTextureColorMaskSGIS = sealed class
    public static function GetFuncAdr([MarshalAs(UnmanagedType.LPStr)] lpszProc: string): IntPtr;
    external 'opengl32.dll' name 'wglGetProcAddress';
    public static function GetFuncOrNil<T>(fadr: IntPtr) :=
    fadr=IntPtr.Zero ? default(T) :
    Marshal.GetDelegateForFunctionPointer&<T>(fadr);
    
    public z_TextureColorMaskSGIS_adr := GetFuncAdr('glTextureColorMaskSGIS');
    public z_TextureColorMaskSGIS_ovr_0 := GetFuncOrNil&<procedure(red: boolean; green: boolean; blue: boolean; alpha: boolean)>(z_TextureColorMaskSGIS_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TextureColorMaskSGIS(red: boolean; green: boolean; blue: boolean; alpha: boolean);
    begin
      z_TextureColorMaskSGIS_ovr_0(red, green, blue, alpha);
    end;
    
  end;
  
  glTextureFilter4SGIS = sealed class
    public static function GetFuncAdr([MarshalAs(UnmanagedType.LPStr)] lpszProc: string): IntPtr;
    external 'opengl32.dll' name 'wglGetProcAddress';
    public static function GetFuncOrNil<T>(fadr: IntPtr) :=
    fadr=IntPtr.Zero ? default(T) :
    Marshal.GetDelegateForFunctionPointer&<T>(fadr);
    
    public z_GetTexFilterFuncSGIS_adr := GetFuncAdr('glGetTexFilterFuncSGIS');
    public z_GetTexFilterFuncSGIS_ovr_0 := GetFuncOrNil&<procedure(target: TextureTarget; filter: TextureFilterSGIS; var weights: single)>(z_GetTexFilterFuncSGIS_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetTexFilterFuncSGIS(target: TextureTarget; filter: TextureFilterSGIS; weights: array of single);
    begin
      z_GetTexFilterFuncSGIS_ovr_0(target, filter, weights[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetTexFilterFuncSGIS(target: TextureTarget; filter: TextureFilterSGIS; var weights: single);
    begin
      z_GetTexFilterFuncSGIS_ovr_0(target, filter, weights);
    end;
    public z_GetTexFilterFuncSGIS_ovr_2 := GetFuncOrNil&<procedure(target: TextureTarget; filter: TextureFilterSGIS; weights: IntPtr)>(z_GetTexFilterFuncSGIS_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetTexFilterFuncSGIS(target: TextureTarget; filter: TextureFilterSGIS; weights: IntPtr);
    begin
      z_GetTexFilterFuncSGIS_ovr_2(target, filter, weights);
    end;
    
    public z_TexFilterFuncSGIS_adr := GetFuncAdr('glTexFilterFuncSGIS');
    public z_TexFilterFuncSGIS_ovr_0 := GetFuncOrNil&<procedure(target: TextureTarget; filter: TextureFilterSGIS; n: Int32; var weights: single)>(z_TexFilterFuncSGIS_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TexFilterFuncSGIS(target: TextureTarget; filter: TextureFilterSGIS; n: Int32; weights: array of single);
    begin
      z_TexFilterFuncSGIS_ovr_0(target, filter, n, weights[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TexFilterFuncSGIS(target: TextureTarget; filter: TextureFilterSGIS; n: Int32; var weights: single);
    begin
      z_TexFilterFuncSGIS_ovr_0(target, filter, n, weights);
    end;
    public z_TexFilterFuncSGIS_ovr_2 := GetFuncOrNil&<procedure(target: TextureTarget; filter: TextureFilterSGIS; n: Int32; weights: IntPtr)>(z_TexFilterFuncSGIS_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TexFilterFuncSGIS(target: TextureTarget; filter: TextureFilterSGIS; n: Int32; weights: IntPtr);
    begin
      z_TexFilterFuncSGIS_ovr_2(target, filter, n, weights);
    end;
    
  end;
  
  glAsyncSGIX = sealed class
    public static function GetFuncAdr([MarshalAs(UnmanagedType.LPStr)] lpszProc: string): IntPtr;
    external 'opengl32.dll' name 'wglGetProcAddress';
    public static function GetFuncOrNil<T>(fadr: IntPtr) :=
    fadr=IntPtr.Zero ? default(T) :
    Marshal.GetDelegateForFunctionPointer&<T>(fadr);
    
    public z_AsyncMarkerSGIX_adr := GetFuncAdr('glAsyncMarkerSGIX');
    public z_AsyncMarkerSGIX_ovr_0 := GetFuncOrNil&<procedure(marker: UInt32)>(z_AsyncMarkerSGIX_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure AsyncMarkerSGIX(marker: UInt32);
    begin
      z_AsyncMarkerSGIX_ovr_0(marker);
    end;
    
    public z_FinishAsyncSGIX_adr := GetFuncAdr('glFinishAsyncSGIX');
    public z_FinishAsyncSGIX_ovr_0 := GetFuncOrNil&<function(var markerp: UInt32): Int32>(z_FinishAsyncSGIX_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function FinishAsyncSGIX(markerp: array of UInt32): Int32;
    begin
      Result := z_FinishAsyncSGIX_ovr_0(markerp[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function FinishAsyncSGIX(var markerp: UInt32): Int32;
    begin
      Result := z_FinishAsyncSGIX_ovr_0(markerp);
    end;
    public z_FinishAsyncSGIX_ovr_2 := GetFuncOrNil&<function(markerp: IntPtr): Int32>(z_FinishAsyncSGIX_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function FinishAsyncSGIX(markerp: IntPtr): Int32;
    begin
      Result := z_FinishAsyncSGIX_ovr_2(markerp);
    end;
    
    public z_PollAsyncSGIX_adr := GetFuncAdr('glPollAsyncSGIX');
    public z_PollAsyncSGIX_ovr_0 := GetFuncOrNil&<function(var markerp: UInt32): Int32>(z_PollAsyncSGIX_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function PollAsyncSGIX(markerp: array of UInt32): Int32;
    begin
      Result := z_PollAsyncSGIX_ovr_0(markerp[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function PollAsyncSGIX(var markerp: UInt32): Int32;
    begin
      Result := z_PollAsyncSGIX_ovr_0(markerp);
    end;
    public z_PollAsyncSGIX_ovr_2 := GetFuncOrNil&<function(markerp: IntPtr): Int32>(z_PollAsyncSGIX_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function PollAsyncSGIX(markerp: IntPtr): Int32;
    begin
      Result := z_PollAsyncSGIX_ovr_2(markerp);
    end;
    
    public z_GenAsyncMarkersSGIX_adr := GetFuncAdr('glGenAsyncMarkersSGIX');
    public z_GenAsyncMarkersSGIX_ovr_0 := GetFuncOrNil&<function(range: Int32): UInt32>(z_GenAsyncMarkersSGIX_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GenAsyncMarkersSGIX(range: Int32): UInt32;
    begin
      Result := z_GenAsyncMarkersSGIX_ovr_0(range);
    end;
    
    public z_DeleteAsyncMarkersSGIX_adr := GetFuncAdr('glDeleteAsyncMarkersSGIX');
    public z_DeleteAsyncMarkersSGIX_ovr_0 := GetFuncOrNil&<procedure(marker: UInt32; range: Int32)>(z_DeleteAsyncMarkersSGIX_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure DeleteAsyncMarkersSGIX(marker: UInt32; range: Int32);
    begin
      z_DeleteAsyncMarkersSGIX_ovr_0(marker, range);
    end;
    
    public z_IsAsyncMarkerSGIX_adr := GetFuncAdr('glIsAsyncMarkerSGIX');
    public z_IsAsyncMarkerSGIX_ovr_0 := GetFuncOrNil&<function(marker: UInt32): boolean>(z_IsAsyncMarkerSGIX_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function IsAsyncMarkerSGIX(marker: UInt32): boolean;
    begin
      Result := z_IsAsyncMarkerSGIX_ovr_0(marker);
    end;
    
  end;
  
  glFlushRasterSGIX = sealed class
    public static function GetFuncAdr([MarshalAs(UnmanagedType.LPStr)] lpszProc: string): IntPtr;
    external 'opengl32.dll' name 'wglGetProcAddress';
    public static function GetFuncOrNil<T>(fadr: IntPtr) :=
    fadr=IntPtr.Zero ? default(T) :
    Marshal.GetDelegateForFunctionPointer&<T>(fadr);
    
    public z_FlushRasterSGIX_adr := GetFuncAdr('glFlushRasterSGIX');
    public z_FlushRasterSGIX_ovr_0 := GetFuncOrNil&<procedure>(z_FlushRasterSGIX_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure FlushRasterSGIX;
    begin
      z_FlushRasterSGIX_ovr_0;
    end;
    
  end;
  
  glFragmentLightingSGIX = sealed class
    public static function GetFuncAdr([MarshalAs(UnmanagedType.LPStr)] lpszProc: string): IntPtr;
    external 'opengl32.dll' name 'wglGetProcAddress';
    public static function GetFuncOrNil<T>(fadr: IntPtr) :=
    fadr=IntPtr.Zero ? default(T) :
    Marshal.GetDelegateForFunctionPointer&<T>(fadr);
    
    public z_FragmentColorMaterialSGIX_adr := GetFuncAdr('glFragmentColorMaterialSGIX');
    public z_FragmentColorMaterialSGIX_ovr_0 := GetFuncOrNil&<procedure(face: DummyEnum; mode: MaterialParameter)>(z_FragmentColorMaterialSGIX_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure FragmentColorMaterialSGIX(face: DummyEnum; mode: MaterialParameter);
    begin
      z_FragmentColorMaterialSGIX_ovr_0(face, mode);
    end;
    
    public z_FragmentLightfSGIX_adr := GetFuncAdr('glFragmentLightfSGIX');
    public z_FragmentLightfSGIX_ovr_0 := GetFuncOrNil&<procedure(light: FragmentLightNameSGIX; pname: FragmentLightParameterSGIX; param: single)>(z_FragmentLightfSGIX_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure FragmentLightfSGIX(light: FragmentLightNameSGIX; pname: FragmentLightParameterSGIX; param: single);
    begin
      z_FragmentLightfSGIX_ovr_0(light, pname, param);
    end;
    
    public z_FragmentLightfvSGIX_adr := GetFuncAdr('glFragmentLightfvSGIX');
    public z_FragmentLightfvSGIX_ovr_0 := GetFuncOrNil&<procedure(light: FragmentLightNameSGIX; pname: FragmentLightParameterSGIX; var &params: single)>(z_FragmentLightfvSGIX_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure FragmentLightfvSGIX(light: FragmentLightNameSGIX; pname: FragmentLightParameterSGIX; &params: array of single);
    begin
      z_FragmentLightfvSGIX_ovr_0(light, pname, &params[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure FragmentLightfvSGIX(light: FragmentLightNameSGIX; pname: FragmentLightParameterSGIX; var &params: single);
    begin
      z_FragmentLightfvSGIX_ovr_0(light, pname, &params);
    end;
    public z_FragmentLightfvSGIX_ovr_2 := GetFuncOrNil&<procedure(light: FragmentLightNameSGIX; pname: FragmentLightParameterSGIX; &params: IntPtr)>(z_FragmentLightfvSGIX_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure FragmentLightfvSGIX(light: FragmentLightNameSGIX; pname: FragmentLightParameterSGIX; &params: IntPtr);
    begin
      z_FragmentLightfvSGIX_ovr_2(light, pname, &params);
    end;
    
    public z_FragmentLightiSGIX_adr := GetFuncAdr('glFragmentLightiSGIX');
    public z_FragmentLightiSGIX_ovr_0 := GetFuncOrNil&<procedure(light: FragmentLightNameSGIX; pname: FragmentLightParameterSGIX; param: Int32)>(z_FragmentLightiSGIX_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure FragmentLightiSGIX(light: FragmentLightNameSGIX; pname: FragmentLightParameterSGIX; param: Int32);
    begin
      z_FragmentLightiSGIX_ovr_0(light, pname, param);
    end;
    
    public z_FragmentLightivSGIX_adr := GetFuncAdr('glFragmentLightivSGIX');
    public z_FragmentLightivSGIX_ovr_0 := GetFuncOrNil&<procedure(light: FragmentLightNameSGIX; pname: FragmentLightParameterSGIX; var &params: Int32)>(z_FragmentLightivSGIX_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure FragmentLightivSGIX(light: FragmentLightNameSGIX; pname: FragmentLightParameterSGIX; &params: array of Int32);
    begin
      z_FragmentLightivSGIX_ovr_0(light, pname, &params[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure FragmentLightivSGIX(light: FragmentLightNameSGIX; pname: FragmentLightParameterSGIX; var &params: Int32);
    begin
      z_FragmentLightivSGIX_ovr_0(light, pname, &params);
    end;
    public z_FragmentLightivSGIX_ovr_2 := GetFuncOrNil&<procedure(light: FragmentLightNameSGIX; pname: FragmentLightParameterSGIX; &params: IntPtr)>(z_FragmentLightivSGIX_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure FragmentLightivSGIX(light: FragmentLightNameSGIX; pname: FragmentLightParameterSGIX; &params: IntPtr);
    begin
      z_FragmentLightivSGIX_ovr_2(light, pname, &params);
    end;
    
    public z_FragmentLightModelfSGIX_adr := GetFuncAdr('glFragmentLightModelfSGIX');
    public z_FragmentLightModelfSGIX_ovr_0 := GetFuncOrNil&<procedure(pname: FragmentLightModelParameterSGIX; param: single)>(z_FragmentLightModelfSGIX_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure FragmentLightModelfSGIX(pname: FragmentLightModelParameterSGIX; param: single);
    begin
      z_FragmentLightModelfSGIX_ovr_0(pname, param);
    end;
    
    public z_FragmentLightModelfvSGIX_adr := GetFuncAdr('glFragmentLightModelfvSGIX');
    public z_FragmentLightModelfvSGIX_ovr_0 := GetFuncOrNil&<procedure(pname: FragmentLightModelParameterSGIX; var &params: single)>(z_FragmentLightModelfvSGIX_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure FragmentLightModelfvSGIX(pname: FragmentLightModelParameterSGIX; &params: array of single);
    begin
      z_FragmentLightModelfvSGIX_ovr_0(pname, &params[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure FragmentLightModelfvSGIX(pname: FragmentLightModelParameterSGIX; var &params: single);
    begin
      z_FragmentLightModelfvSGIX_ovr_0(pname, &params);
    end;
    public z_FragmentLightModelfvSGIX_ovr_2 := GetFuncOrNil&<procedure(pname: FragmentLightModelParameterSGIX; &params: IntPtr)>(z_FragmentLightModelfvSGIX_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure FragmentLightModelfvSGIX(pname: FragmentLightModelParameterSGIX; &params: IntPtr);
    begin
      z_FragmentLightModelfvSGIX_ovr_2(pname, &params);
    end;
    
    public z_FragmentLightModeliSGIX_adr := GetFuncAdr('glFragmentLightModeliSGIX');
    public z_FragmentLightModeliSGIX_ovr_0 := GetFuncOrNil&<procedure(pname: FragmentLightModelParameterSGIX; param: Int32)>(z_FragmentLightModeliSGIX_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure FragmentLightModeliSGIX(pname: FragmentLightModelParameterSGIX; param: Int32);
    begin
      z_FragmentLightModeliSGIX_ovr_0(pname, param);
    end;
    
    public z_FragmentLightModelivSGIX_adr := GetFuncAdr('glFragmentLightModelivSGIX');
    public z_FragmentLightModelivSGIX_ovr_0 := GetFuncOrNil&<procedure(pname: FragmentLightModelParameterSGIX; var &params: Int32)>(z_FragmentLightModelivSGIX_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure FragmentLightModelivSGIX(pname: FragmentLightModelParameterSGIX; &params: array of Int32);
    begin
      z_FragmentLightModelivSGIX_ovr_0(pname, &params[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure FragmentLightModelivSGIX(pname: FragmentLightModelParameterSGIX; var &params: Int32);
    begin
      z_FragmentLightModelivSGIX_ovr_0(pname, &params);
    end;
    public z_FragmentLightModelivSGIX_ovr_2 := GetFuncOrNil&<procedure(pname: FragmentLightModelParameterSGIX; &params: IntPtr)>(z_FragmentLightModelivSGIX_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure FragmentLightModelivSGIX(pname: FragmentLightModelParameterSGIX; &params: IntPtr);
    begin
      z_FragmentLightModelivSGIX_ovr_2(pname, &params);
    end;
    
    public z_FragmentMaterialfSGIX_adr := GetFuncAdr('glFragmentMaterialfSGIX');
    public z_FragmentMaterialfSGIX_ovr_0 := GetFuncOrNil&<procedure(face: DummyEnum; pname: MaterialParameter; param: single)>(z_FragmentMaterialfSGIX_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure FragmentMaterialfSGIX(face: DummyEnum; pname: MaterialParameter; param: single);
    begin
      z_FragmentMaterialfSGIX_ovr_0(face, pname, param);
    end;
    
    public z_FragmentMaterialfvSGIX_adr := GetFuncAdr('glFragmentMaterialfvSGIX');
    public z_FragmentMaterialfvSGIX_ovr_0 := GetFuncOrNil&<procedure(face: DummyEnum; pname: MaterialParameter; var &params: single)>(z_FragmentMaterialfvSGIX_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure FragmentMaterialfvSGIX(face: DummyEnum; pname: MaterialParameter; &params: array of single);
    begin
      z_FragmentMaterialfvSGIX_ovr_0(face, pname, &params[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure FragmentMaterialfvSGIX(face: DummyEnum; pname: MaterialParameter; var &params: single);
    begin
      z_FragmentMaterialfvSGIX_ovr_0(face, pname, &params);
    end;
    public z_FragmentMaterialfvSGIX_ovr_2 := GetFuncOrNil&<procedure(face: DummyEnum; pname: MaterialParameter; &params: IntPtr)>(z_FragmentMaterialfvSGIX_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure FragmentMaterialfvSGIX(face: DummyEnum; pname: MaterialParameter; &params: IntPtr);
    begin
      z_FragmentMaterialfvSGIX_ovr_2(face, pname, &params);
    end;
    
    public z_FragmentMaterialiSGIX_adr := GetFuncAdr('glFragmentMaterialiSGIX');
    public z_FragmentMaterialiSGIX_ovr_0 := GetFuncOrNil&<procedure(face: DummyEnum; pname: MaterialParameter; param: Int32)>(z_FragmentMaterialiSGIX_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure FragmentMaterialiSGIX(face: DummyEnum; pname: MaterialParameter; param: Int32);
    begin
      z_FragmentMaterialiSGIX_ovr_0(face, pname, param);
    end;
    
    public z_FragmentMaterialivSGIX_adr := GetFuncAdr('glFragmentMaterialivSGIX');
    public z_FragmentMaterialivSGIX_ovr_0 := GetFuncOrNil&<procedure(face: DummyEnum; pname: MaterialParameter; var &params: Int32)>(z_FragmentMaterialivSGIX_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure FragmentMaterialivSGIX(face: DummyEnum; pname: MaterialParameter; &params: array of Int32);
    begin
      z_FragmentMaterialivSGIX_ovr_0(face, pname, &params[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure FragmentMaterialivSGIX(face: DummyEnum; pname: MaterialParameter; var &params: Int32);
    begin
      z_FragmentMaterialivSGIX_ovr_0(face, pname, &params);
    end;
    public z_FragmentMaterialivSGIX_ovr_2 := GetFuncOrNil&<procedure(face: DummyEnum; pname: MaterialParameter; &params: IntPtr)>(z_FragmentMaterialivSGIX_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure FragmentMaterialivSGIX(face: DummyEnum; pname: MaterialParameter; &params: IntPtr);
    begin
      z_FragmentMaterialivSGIX_ovr_2(face, pname, &params);
    end;
    
    public z_GetFragmentLightfvSGIX_adr := GetFuncAdr('glGetFragmentLightfvSGIX');
    public z_GetFragmentLightfvSGIX_ovr_0 := GetFuncOrNil&<procedure(light: FragmentLightNameSGIX; pname: FragmentLightParameterSGIX; var &params: single)>(z_GetFragmentLightfvSGIX_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetFragmentLightfvSGIX(light: FragmentLightNameSGIX; pname: FragmentLightParameterSGIX; &params: array of single);
    begin
      z_GetFragmentLightfvSGIX_ovr_0(light, pname, &params[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetFragmentLightfvSGIX(light: FragmentLightNameSGIX; pname: FragmentLightParameterSGIX; var &params: single);
    begin
      z_GetFragmentLightfvSGIX_ovr_0(light, pname, &params);
    end;
    public z_GetFragmentLightfvSGIX_ovr_2 := GetFuncOrNil&<procedure(light: FragmentLightNameSGIX; pname: FragmentLightParameterSGIX; &params: IntPtr)>(z_GetFragmentLightfvSGIX_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetFragmentLightfvSGIX(light: FragmentLightNameSGIX; pname: FragmentLightParameterSGIX; &params: IntPtr);
    begin
      z_GetFragmentLightfvSGIX_ovr_2(light, pname, &params);
    end;
    
    public z_GetFragmentLightivSGIX_adr := GetFuncAdr('glGetFragmentLightivSGIX');
    public z_GetFragmentLightivSGIX_ovr_0 := GetFuncOrNil&<procedure(light: FragmentLightNameSGIX; pname: FragmentLightParameterSGIX; var &params: Int32)>(z_GetFragmentLightivSGIX_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetFragmentLightivSGIX(light: FragmentLightNameSGIX; pname: FragmentLightParameterSGIX; &params: array of Int32);
    begin
      z_GetFragmentLightivSGIX_ovr_0(light, pname, &params[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetFragmentLightivSGIX(light: FragmentLightNameSGIX; pname: FragmentLightParameterSGIX; var &params: Int32);
    begin
      z_GetFragmentLightivSGIX_ovr_0(light, pname, &params);
    end;
    public z_GetFragmentLightivSGIX_ovr_2 := GetFuncOrNil&<procedure(light: FragmentLightNameSGIX; pname: FragmentLightParameterSGIX; &params: IntPtr)>(z_GetFragmentLightivSGIX_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetFragmentLightivSGIX(light: FragmentLightNameSGIX; pname: FragmentLightParameterSGIX; &params: IntPtr);
    begin
      z_GetFragmentLightivSGIX_ovr_2(light, pname, &params);
    end;
    
    public z_GetFragmentMaterialfvSGIX_adr := GetFuncAdr('glGetFragmentMaterialfvSGIX');
    public z_GetFragmentMaterialfvSGIX_ovr_0 := GetFuncOrNil&<procedure(face: DummyEnum; pname: MaterialParameter; var &params: single)>(z_GetFragmentMaterialfvSGIX_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetFragmentMaterialfvSGIX(face: DummyEnum; pname: MaterialParameter; &params: array of single);
    begin
      z_GetFragmentMaterialfvSGIX_ovr_0(face, pname, &params[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetFragmentMaterialfvSGIX(face: DummyEnum; pname: MaterialParameter; var &params: single);
    begin
      z_GetFragmentMaterialfvSGIX_ovr_0(face, pname, &params);
    end;
    public z_GetFragmentMaterialfvSGIX_ovr_2 := GetFuncOrNil&<procedure(face: DummyEnum; pname: MaterialParameter; &params: IntPtr)>(z_GetFragmentMaterialfvSGIX_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetFragmentMaterialfvSGIX(face: DummyEnum; pname: MaterialParameter; &params: IntPtr);
    begin
      z_GetFragmentMaterialfvSGIX_ovr_2(face, pname, &params);
    end;
    
    public z_GetFragmentMaterialivSGIX_adr := GetFuncAdr('glGetFragmentMaterialivSGIX');
    public z_GetFragmentMaterialivSGIX_ovr_0 := GetFuncOrNil&<procedure(face: DummyEnum; pname: MaterialParameter; var &params: Int32)>(z_GetFragmentMaterialivSGIX_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetFragmentMaterialivSGIX(face: DummyEnum; pname: MaterialParameter; &params: array of Int32);
    begin
      z_GetFragmentMaterialivSGIX_ovr_0(face, pname, &params[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetFragmentMaterialivSGIX(face: DummyEnum; pname: MaterialParameter; var &params: Int32);
    begin
      z_GetFragmentMaterialivSGIX_ovr_0(face, pname, &params);
    end;
    public z_GetFragmentMaterialivSGIX_ovr_2 := GetFuncOrNil&<procedure(face: DummyEnum; pname: MaterialParameter; &params: IntPtr)>(z_GetFragmentMaterialivSGIX_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetFragmentMaterialivSGIX(face: DummyEnum; pname: MaterialParameter; &params: IntPtr);
    begin
      z_GetFragmentMaterialivSGIX_ovr_2(face, pname, &params);
    end;
    
    public z_LightEnviSGIX_adr := GetFuncAdr('glLightEnviSGIX');
    public z_LightEnviSGIX_ovr_0 := GetFuncOrNil&<procedure(pname: LightEnvParameterSGIX; param: Int32)>(z_LightEnviSGIX_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure LightEnviSGIX(pname: LightEnvParameterSGIX; param: Int32);
    begin
      z_LightEnviSGIX_ovr_0(pname, param);
    end;
    
  end;
  
  glFramezoomSGIX = sealed class
    public static function GetFuncAdr([MarshalAs(UnmanagedType.LPStr)] lpszProc: string): IntPtr;
    external 'opengl32.dll' name 'wglGetProcAddress';
    public static function GetFuncOrNil<T>(fadr: IntPtr) :=
    fadr=IntPtr.Zero ? default(T) :
    Marshal.GetDelegateForFunctionPointer&<T>(fadr);
    
    public z_FrameZoomSGIX_adr := GetFuncAdr('glFrameZoomSGIX');
    public z_FrameZoomSGIX_ovr_0 := GetFuncOrNil&<procedure(factor: Int32)>(z_FrameZoomSGIX_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure FrameZoomSGIX(factor: Int32);
    begin
      z_FrameZoomSGIX_ovr_0(factor);
    end;
    
  end;
  
  glIglooInterfaceSGIX = sealed class
    public static function GetFuncAdr([MarshalAs(UnmanagedType.LPStr)] lpszProc: string): IntPtr;
    external 'opengl32.dll' name 'wglGetProcAddress';
    public static function GetFuncOrNil<T>(fadr: IntPtr) :=
    fadr=IntPtr.Zero ? default(T) :
    Marshal.GetDelegateForFunctionPointer&<T>(fadr);
    
    public z_IglooInterfaceSGIX_adr := GetFuncAdr('glIglooInterfaceSGIX');
    public z_IglooInterfaceSGIX_ovr_0 := GetFuncOrNil&<procedure(pname: DummyEnum; &params: IntPtr)>(z_IglooInterfaceSGIX_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure IglooInterfaceSGIX(pname: DummyEnum; &params: IntPtr);
    begin
      z_IglooInterfaceSGIX_ovr_0(pname, &params);
    end;
    
  end;
  
  glInstrumentsSGIX = sealed class
    public static function GetFuncAdr([MarshalAs(UnmanagedType.LPStr)] lpszProc: string): IntPtr;
    external 'opengl32.dll' name 'wglGetProcAddress';
    public static function GetFuncOrNil<T>(fadr: IntPtr) :=
    fadr=IntPtr.Zero ? default(T) :
    Marshal.GetDelegateForFunctionPointer&<T>(fadr);
    
    public z_GetInstrumentsSGIX_adr := GetFuncAdr('glGetInstrumentsSGIX');
    public z_GetInstrumentsSGIX_ovr_0 := GetFuncOrNil&<function: Int32>(z_GetInstrumentsSGIX_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function GetInstrumentsSGIX: Int32;
    begin
      Result := z_GetInstrumentsSGIX_ovr_0;
    end;
    
    public z_InstrumentsBufferSGIX_adr := GetFuncAdr('glInstrumentsBufferSGIX');
    public z_InstrumentsBufferSGIX_ovr_0 := GetFuncOrNil&<procedure(size: Int32; var buffer: Int32)>(z_InstrumentsBufferSGIX_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure InstrumentsBufferSGIX(size: Int32; buffer: array of Int32);
    begin
      z_InstrumentsBufferSGIX_ovr_0(size, buffer[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure InstrumentsBufferSGIX(size: Int32; var buffer: Int32);
    begin
      z_InstrumentsBufferSGIX_ovr_0(size, buffer);
    end;
    public z_InstrumentsBufferSGIX_ovr_2 := GetFuncOrNil&<procedure(size: Int32; buffer: IntPtr)>(z_InstrumentsBufferSGIX_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure InstrumentsBufferSGIX(size: Int32; buffer: IntPtr);
    begin
      z_InstrumentsBufferSGIX_ovr_2(size, buffer);
    end;
    
    public z_PollInstrumentsSGIX_adr := GetFuncAdr('glPollInstrumentsSGIX');
    public z_PollInstrumentsSGIX_ovr_0 := GetFuncOrNil&<function(var marker_p: Int32): Int32>(z_PollInstrumentsSGIX_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function PollInstrumentsSGIX(marker_p: array of Int32): Int32;
    begin
      Result := z_PollInstrumentsSGIX_ovr_0(marker_p[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function PollInstrumentsSGIX(var marker_p: Int32): Int32;
    begin
      Result := z_PollInstrumentsSGIX_ovr_0(marker_p);
    end;
    public z_PollInstrumentsSGIX_ovr_2 := GetFuncOrNil&<function(marker_p: IntPtr): Int32>(z_PollInstrumentsSGIX_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function PollInstrumentsSGIX(marker_p: IntPtr): Int32;
    begin
      Result := z_PollInstrumentsSGIX_ovr_2(marker_p);
    end;
    
    public z_ReadInstrumentsSGIX_adr := GetFuncAdr('glReadInstrumentsSGIX');
    public z_ReadInstrumentsSGIX_ovr_0 := GetFuncOrNil&<procedure(marker: Int32)>(z_ReadInstrumentsSGIX_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ReadInstrumentsSGIX(marker: Int32);
    begin
      z_ReadInstrumentsSGIX_ovr_0(marker);
    end;
    
    public z_StartInstrumentsSGIX_adr := GetFuncAdr('glStartInstrumentsSGIX');
    public z_StartInstrumentsSGIX_ovr_0 := GetFuncOrNil&<procedure>(z_StartInstrumentsSGIX_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure StartInstrumentsSGIX;
    begin
      z_StartInstrumentsSGIX_ovr_0;
    end;
    
    public z_StopInstrumentsSGIX_adr := GetFuncAdr('glStopInstrumentsSGIX');
    public z_StopInstrumentsSGIX_ovr_0 := GetFuncOrNil&<procedure(marker: Int32)>(z_StopInstrumentsSGIX_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure StopInstrumentsSGIX(marker: Int32);
    begin
      z_StopInstrumentsSGIX_ovr_0(marker);
    end;
    
  end;
  
  glListPrioritySGIX = sealed class
    public static function GetFuncAdr([MarshalAs(UnmanagedType.LPStr)] lpszProc: string): IntPtr;
    external 'opengl32.dll' name 'wglGetProcAddress';
    public static function GetFuncOrNil<T>(fadr: IntPtr) :=
    fadr=IntPtr.Zero ? default(T) :
    Marshal.GetDelegateForFunctionPointer&<T>(fadr);
    
    public z_GetListParameterfvSGIX_adr := GetFuncAdr('glGetListParameterfvSGIX');
    public z_GetListParameterfvSGIX_ovr_0 := GetFuncOrNil&<procedure(list: UInt32; pname: ListParameterName; var &params: single)>(z_GetListParameterfvSGIX_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetListParameterfvSGIX(list: UInt32; pname: ListParameterName; &params: array of single);
    begin
      z_GetListParameterfvSGIX_ovr_0(list, pname, &params[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetListParameterfvSGIX(list: UInt32; pname: ListParameterName; var &params: single);
    begin
      z_GetListParameterfvSGIX_ovr_0(list, pname, &params);
    end;
    public z_GetListParameterfvSGIX_ovr_2 := GetFuncOrNil&<procedure(list: UInt32; pname: ListParameterName; &params: IntPtr)>(z_GetListParameterfvSGIX_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetListParameterfvSGIX(list: UInt32; pname: ListParameterName; &params: IntPtr);
    begin
      z_GetListParameterfvSGIX_ovr_2(list, pname, &params);
    end;
    
    public z_GetListParameterivSGIX_adr := GetFuncAdr('glGetListParameterivSGIX');
    public z_GetListParameterivSGIX_ovr_0 := GetFuncOrNil&<procedure(list: UInt32; pname: ListParameterName; var &params: Int32)>(z_GetListParameterivSGIX_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetListParameterivSGIX(list: UInt32; pname: ListParameterName; &params: array of Int32);
    begin
      z_GetListParameterivSGIX_ovr_0(list, pname, &params[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetListParameterivSGIX(list: UInt32; pname: ListParameterName; var &params: Int32);
    begin
      z_GetListParameterivSGIX_ovr_0(list, pname, &params);
    end;
    public z_GetListParameterivSGIX_ovr_2 := GetFuncOrNil&<procedure(list: UInt32; pname: ListParameterName; &params: IntPtr)>(z_GetListParameterivSGIX_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetListParameterivSGIX(list: UInt32; pname: ListParameterName; &params: IntPtr);
    begin
      z_GetListParameterivSGIX_ovr_2(list, pname, &params);
    end;
    
    public z_ListParameterfSGIX_adr := GetFuncAdr('glListParameterfSGIX');
    public z_ListParameterfSGIX_ovr_0 := GetFuncOrNil&<procedure(list: UInt32; pname: ListParameterName; param: single)>(z_ListParameterfSGIX_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ListParameterfSGIX(list: UInt32; pname: ListParameterName; param: single);
    begin
      z_ListParameterfSGIX_ovr_0(list, pname, param);
    end;
    
    public z_ListParameterfvSGIX_adr := GetFuncAdr('glListParameterfvSGIX');
    public z_ListParameterfvSGIX_ovr_0 := GetFuncOrNil&<procedure(list: UInt32; pname: ListParameterName; var &params: single)>(z_ListParameterfvSGIX_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ListParameterfvSGIX(list: UInt32; pname: ListParameterName; &params: array of single);
    begin
      z_ListParameterfvSGIX_ovr_0(list, pname, &params[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ListParameterfvSGIX(list: UInt32; pname: ListParameterName; var &params: single);
    begin
      z_ListParameterfvSGIX_ovr_0(list, pname, &params);
    end;
    public z_ListParameterfvSGIX_ovr_2 := GetFuncOrNil&<procedure(list: UInt32; pname: ListParameterName; &params: IntPtr)>(z_ListParameterfvSGIX_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ListParameterfvSGIX(list: UInt32; pname: ListParameterName; &params: IntPtr);
    begin
      z_ListParameterfvSGIX_ovr_2(list, pname, &params);
    end;
    
    public z_ListParameteriSGIX_adr := GetFuncAdr('glListParameteriSGIX');
    public z_ListParameteriSGIX_ovr_0 := GetFuncOrNil&<procedure(list: UInt32; pname: ListParameterName; param: Int32)>(z_ListParameteriSGIX_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ListParameteriSGIX(list: UInt32; pname: ListParameterName; param: Int32);
    begin
      z_ListParameteriSGIX_ovr_0(list, pname, param);
    end;
    
    public z_ListParameterivSGIX_adr := GetFuncAdr('glListParameterivSGIX');
    public z_ListParameterivSGIX_ovr_0 := GetFuncOrNil&<procedure(list: UInt32; pname: ListParameterName; var &params: Int32)>(z_ListParameterivSGIX_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ListParameterivSGIX(list: UInt32; pname: ListParameterName; &params: array of Int32);
    begin
      z_ListParameterivSGIX_ovr_0(list, pname, &params[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ListParameterivSGIX(list: UInt32; pname: ListParameterName; var &params: Int32);
    begin
      z_ListParameterivSGIX_ovr_0(list, pname, &params);
    end;
    public z_ListParameterivSGIX_ovr_2 := GetFuncOrNil&<procedure(list: UInt32; pname: ListParameterName; &params: IntPtr)>(z_ListParameterivSGIX_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ListParameterivSGIX(list: UInt32; pname: ListParameterName; &params: IntPtr);
    begin
      z_ListParameterivSGIX_ovr_2(list, pname, &params);
    end;
    
  end;
  
  glPixelTextureSGIX = sealed class
    public static function GetFuncAdr([MarshalAs(UnmanagedType.LPStr)] lpszProc: string): IntPtr;
    external 'opengl32.dll' name 'wglGetProcAddress';
    public static function GetFuncOrNil<T>(fadr: IntPtr) :=
    fadr=IntPtr.Zero ? default(T) :
    Marshal.GetDelegateForFunctionPointer&<T>(fadr);
    
    public z_PixelTexGenSGIX_adr := GetFuncAdr('glPixelTexGenSGIX');
    public z_PixelTexGenSGIX_ovr_0 := GetFuncOrNil&<procedure(mode: PixelTexGenModeSGIX)>(z_PixelTexGenSGIX_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure PixelTexGenSGIX(mode: PixelTexGenModeSGIX);
    begin
      z_PixelTexGenSGIX_ovr_0(mode);
    end;
    
  end;
  
  glPolynomialFfdSGIX = sealed class
    public static function GetFuncAdr([MarshalAs(UnmanagedType.LPStr)] lpszProc: string): IntPtr;
    external 'opengl32.dll' name 'wglGetProcAddress';
    public static function GetFuncOrNil<T>(fadr: IntPtr) :=
    fadr=IntPtr.Zero ? default(T) :
    Marshal.GetDelegateForFunctionPointer&<T>(fadr);
    
    public z_DeformationMap3dSGIX_adr := GetFuncAdr('glDeformationMap3dSGIX');
    public z_DeformationMap3dSGIX_ovr_0 := GetFuncOrNil&<procedure(target: FfdTargetSGIX; u1: real; u2: real; ustride: Int32; uorder: Int32; v1: real; v2: real; vstride: Int32; vorder: Int32; w1: real; w2: real; wstride: Int32; worder: Int32; var points: real)>(z_DeformationMap3dSGIX_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure DeformationMap3dSGIX(target: FfdTargetSGIX; u1: real; u2: real; ustride: Int32; uorder: Int32; v1: real; v2: real; vstride: Int32; vorder: Int32; w1: real; w2: real; wstride: Int32; worder: Int32; points: array of real);
    begin
      z_DeformationMap3dSGIX_ovr_0(target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, w1, w2, wstride, worder, points[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure DeformationMap3dSGIX(target: FfdTargetSGIX; u1: real; u2: real; ustride: Int32; uorder: Int32; v1: real; v2: real; vstride: Int32; vorder: Int32; w1: real; w2: real; wstride: Int32; worder: Int32; var points: real);
    begin
      z_DeformationMap3dSGIX_ovr_0(target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, w1, w2, wstride, worder, points);
    end;
    public z_DeformationMap3dSGIX_ovr_2 := GetFuncOrNil&<procedure(target: FfdTargetSGIX; u1: real; u2: real; ustride: Int32; uorder: Int32; v1: real; v2: real; vstride: Int32; vorder: Int32; w1: real; w2: real; wstride: Int32; worder: Int32; points: IntPtr)>(z_DeformationMap3dSGIX_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure DeformationMap3dSGIX(target: FfdTargetSGIX; u1: real; u2: real; ustride: Int32; uorder: Int32; v1: real; v2: real; vstride: Int32; vorder: Int32; w1: real; w2: real; wstride: Int32; worder: Int32; points: IntPtr);
    begin
      z_DeformationMap3dSGIX_ovr_2(target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, w1, w2, wstride, worder, points);
    end;
    
    public z_DeformationMap3fSGIX_adr := GetFuncAdr('glDeformationMap3fSGIX');
    public z_DeformationMap3fSGIX_ovr_0 := GetFuncOrNil&<procedure(target: FfdTargetSGIX; u1: single; u2: single; ustride: Int32; uorder: Int32; v1: single; v2: single; vstride: Int32; vorder: Int32; w1: single; w2: single; wstride: Int32; worder: Int32; var points: single)>(z_DeformationMap3fSGIX_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure DeformationMap3fSGIX(target: FfdTargetSGIX; u1: single; u2: single; ustride: Int32; uorder: Int32; v1: single; v2: single; vstride: Int32; vorder: Int32; w1: single; w2: single; wstride: Int32; worder: Int32; points: array of single);
    begin
      z_DeformationMap3fSGIX_ovr_0(target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, w1, w2, wstride, worder, points[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure DeformationMap3fSGIX(target: FfdTargetSGIX; u1: single; u2: single; ustride: Int32; uorder: Int32; v1: single; v2: single; vstride: Int32; vorder: Int32; w1: single; w2: single; wstride: Int32; worder: Int32; var points: single);
    begin
      z_DeformationMap3fSGIX_ovr_0(target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, w1, w2, wstride, worder, points);
    end;
    public z_DeformationMap3fSGIX_ovr_2 := GetFuncOrNil&<procedure(target: FfdTargetSGIX; u1: single; u2: single; ustride: Int32; uorder: Int32; v1: single; v2: single; vstride: Int32; vorder: Int32; w1: single; w2: single; wstride: Int32; worder: Int32; points: IntPtr)>(z_DeformationMap3fSGIX_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure DeformationMap3fSGIX(target: FfdTargetSGIX; u1: single; u2: single; ustride: Int32; uorder: Int32; v1: single; v2: single; vstride: Int32; vorder: Int32; w1: single; w2: single; wstride: Int32; worder: Int32; points: IntPtr);
    begin
      z_DeformationMap3fSGIX_ovr_2(target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, w1, w2, wstride, worder, points);
    end;
    
    public z_DeformSGIX_adr := GetFuncAdr('glDeformSGIX');
    public z_DeformSGIX_ovr_0 := GetFuncOrNil&<procedure(mask: DummyFlags)>(z_DeformSGIX_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure DeformSGIX(mask: DummyFlags);
    begin
      z_DeformSGIX_ovr_0(mask);
    end;
    
    public z_LoadIdentityDeformationMapSGIX_adr := GetFuncAdr('glLoadIdentityDeformationMapSGIX');
    public z_LoadIdentityDeformationMapSGIX_ovr_0 := GetFuncOrNil&<procedure(mask: DummyFlags)>(z_LoadIdentityDeformationMapSGIX_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure LoadIdentityDeformationMapSGIX(mask: DummyFlags);
    begin
      z_LoadIdentityDeformationMapSGIX_ovr_0(mask);
    end;
    
  end;
  
  glReferencePlaneSGIX = sealed class
    public static function GetFuncAdr([MarshalAs(UnmanagedType.LPStr)] lpszProc: string): IntPtr;
    external 'opengl32.dll' name 'wglGetProcAddress';
    public static function GetFuncOrNil<T>(fadr: IntPtr) :=
    fadr=IntPtr.Zero ? default(T) :
    Marshal.GetDelegateForFunctionPointer&<T>(fadr);
    
    public z_ReferencePlaneSGIX_adr := GetFuncAdr('glReferencePlaneSGIX');
    public z_ReferencePlaneSGIX_ovr_0 := GetFuncOrNil&<procedure(var equation: real)>(z_ReferencePlaneSGIX_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ReferencePlaneSGIX(equation: array of real);
    begin
      z_ReferencePlaneSGIX_ovr_0(equation[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ReferencePlaneSGIX(var equation: real);
    begin
      z_ReferencePlaneSGIX_ovr_0(equation);
    end;
    public z_ReferencePlaneSGIX_ovr_2 := GetFuncOrNil&<procedure(equation: IntPtr)>(z_ReferencePlaneSGIX_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ReferencePlaneSGIX(equation: IntPtr);
    begin
      z_ReferencePlaneSGIX_ovr_2(equation);
    end;
    
  end;
  
  glSpriteSGIX = sealed class
    public static function GetFuncAdr([MarshalAs(UnmanagedType.LPStr)] lpszProc: string): IntPtr;
    external 'opengl32.dll' name 'wglGetProcAddress';
    public static function GetFuncOrNil<T>(fadr: IntPtr) :=
    fadr=IntPtr.Zero ? default(T) :
    Marshal.GetDelegateForFunctionPointer&<T>(fadr);
    
    public z_SpriteParameterfSGIX_adr := GetFuncAdr('glSpriteParameterfSGIX');
    public z_SpriteParameterfSGIX_ovr_0 := GetFuncOrNil&<procedure(pname: SpriteParameterNameSGIX; param: single)>(z_SpriteParameterfSGIX_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure SpriteParameterfSGIX(pname: SpriteParameterNameSGIX; param: single);
    begin
      z_SpriteParameterfSGIX_ovr_0(pname, param);
    end;
    
    public z_SpriteParameterfvSGIX_adr := GetFuncAdr('glSpriteParameterfvSGIX');
    public z_SpriteParameterfvSGIX_ovr_0 := GetFuncOrNil&<procedure(pname: SpriteParameterNameSGIX; var &params: single)>(z_SpriteParameterfvSGIX_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure SpriteParameterfvSGIX(pname: SpriteParameterNameSGIX; &params: array of single);
    begin
      z_SpriteParameterfvSGIX_ovr_0(pname, &params[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure SpriteParameterfvSGIX(pname: SpriteParameterNameSGIX; var &params: single);
    begin
      z_SpriteParameterfvSGIX_ovr_0(pname, &params);
    end;
    public z_SpriteParameterfvSGIX_ovr_2 := GetFuncOrNil&<procedure(pname: SpriteParameterNameSGIX; &params: IntPtr)>(z_SpriteParameterfvSGIX_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure SpriteParameterfvSGIX(pname: SpriteParameterNameSGIX; &params: IntPtr);
    begin
      z_SpriteParameterfvSGIX_ovr_2(pname, &params);
    end;
    
    public z_SpriteParameteriSGIX_adr := GetFuncAdr('glSpriteParameteriSGIX');
    public z_SpriteParameteriSGIX_ovr_0 := GetFuncOrNil&<procedure(pname: SpriteParameterNameSGIX; param: Int32)>(z_SpriteParameteriSGIX_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure SpriteParameteriSGIX(pname: SpriteParameterNameSGIX; param: Int32);
    begin
      z_SpriteParameteriSGIX_ovr_0(pname, param);
    end;
    
    public z_SpriteParameterivSGIX_adr := GetFuncAdr('glSpriteParameterivSGIX');
    public z_SpriteParameterivSGIX_ovr_0 := GetFuncOrNil&<procedure(pname: SpriteParameterNameSGIX; var &params: Int32)>(z_SpriteParameterivSGIX_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure SpriteParameterivSGIX(pname: SpriteParameterNameSGIX; &params: array of Int32);
    begin
      z_SpriteParameterivSGIX_ovr_0(pname, &params[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure SpriteParameterivSGIX(pname: SpriteParameterNameSGIX; var &params: Int32);
    begin
      z_SpriteParameterivSGIX_ovr_0(pname, &params);
    end;
    public z_SpriteParameterivSGIX_ovr_2 := GetFuncOrNil&<procedure(pname: SpriteParameterNameSGIX; &params: IntPtr)>(z_SpriteParameterivSGIX_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure SpriteParameterivSGIX(pname: SpriteParameterNameSGIX; &params: IntPtr);
    begin
      z_SpriteParameterivSGIX_ovr_2(pname, &params);
    end;
    
  end;
  
  glTagSampleBufferSGIX = sealed class
    public static function GetFuncAdr([MarshalAs(UnmanagedType.LPStr)] lpszProc: string): IntPtr;
    external 'opengl32.dll' name 'wglGetProcAddress';
    public static function GetFuncOrNil<T>(fadr: IntPtr) :=
    fadr=IntPtr.Zero ? default(T) :
    Marshal.GetDelegateForFunctionPointer&<T>(fadr);
    
    public z_TagSampleBufferSGIX_adr := GetFuncAdr('glTagSampleBufferSGIX');
    public z_TagSampleBufferSGIX_ovr_0 := GetFuncOrNil&<procedure>(z_TagSampleBufferSGIX_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TagSampleBufferSGIX;
    begin
      z_TagSampleBufferSGIX_ovr_0;
    end;
    
  end;
  
  glColorTableSGI = sealed class
    public static function GetFuncAdr([MarshalAs(UnmanagedType.LPStr)] lpszProc: string): IntPtr;
    external 'opengl32.dll' name 'wglGetProcAddress';
    public static function GetFuncOrNil<T>(fadr: IntPtr) :=
    fadr=IntPtr.Zero ? default(T) :
    Marshal.GetDelegateForFunctionPointer&<T>(fadr);
    
    public z_ColorTableSGI_adr := GetFuncAdr('glColorTableSGI');
    public z_ColorTableSGI_ovr_0 := GetFuncOrNil&<procedure(target: ColorTableTargetSGI; _internalformat: InternalFormat; width: Int32; format: PixelFormat; &type: PixelType; table: IntPtr)>(z_ColorTableSGI_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ColorTableSGI(target: ColorTableTargetSGI; _internalformat: InternalFormat; width: Int32; format: PixelFormat; &type: PixelType; table: IntPtr);
    begin
      z_ColorTableSGI_ovr_0(target, _internalformat, width, format, &type, table);
    end;
    
    public z_ColorTableParameterfvSGI_adr := GetFuncAdr('glColorTableParameterfvSGI');
    public z_ColorTableParameterfvSGI_ovr_0 := GetFuncOrNil&<procedure(target: ColorTableTargetSGI; pname: DummyEnum; var &params: single)>(z_ColorTableParameterfvSGI_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ColorTableParameterfvSGI(target: ColorTableTargetSGI; pname: DummyEnum; &params: array of single);
    begin
      z_ColorTableParameterfvSGI_ovr_0(target, pname, &params[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ColorTableParameterfvSGI(target: ColorTableTargetSGI; pname: DummyEnum; var &params: single);
    begin
      z_ColorTableParameterfvSGI_ovr_0(target, pname, &params);
    end;
    public z_ColorTableParameterfvSGI_ovr_2 := GetFuncOrNil&<procedure(target: ColorTableTargetSGI; pname: DummyEnum; &params: IntPtr)>(z_ColorTableParameterfvSGI_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ColorTableParameterfvSGI(target: ColorTableTargetSGI; pname: DummyEnum; &params: IntPtr);
    begin
      z_ColorTableParameterfvSGI_ovr_2(target, pname, &params);
    end;
    
    public z_ColorTableParameterivSGI_adr := GetFuncAdr('glColorTableParameterivSGI');
    public z_ColorTableParameterivSGI_ovr_0 := GetFuncOrNil&<procedure(target: ColorTableTargetSGI; pname: DummyEnum; var &params: Int32)>(z_ColorTableParameterivSGI_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ColorTableParameterivSGI(target: ColorTableTargetSGI; pname: DummyEnum; &params: array of Int32);
    begin
      z_ColorTableParameterivSGI_ovr_0(target, pname, &params[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ColorTableParameterivSGI(target: ColorTableTargetSGI; pname: DummyEnum; var &params: Int32);
    begin
      z_ColorTableParameterivSGI_ovr_0(target, pname, &params);
    end;
    public z_ColorTableParameterivSGI_ovr_2 := GetFuncOrNil&<procedure(target: ColorTableTargetSGI; pname: DummyEnum; &params: IntPtr)>(z_ColorTableParameterivSGI_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ColorTableParameterivSGI(target: ColorTableTargetSGI; pname: DummyEnum; &params: IntPtr);
    begin
      z_ColorTableParameterivSGI_ovr_2(target, pname, &params);
    end;
    
    public z_CopyColorTableSGI_adr := GetFuncAdr('glCopyColorTableSGI');
    public z_CopyColorTableSGI_ovr_0 := GetFuncOrNil&<procedure(target: ColorTableTargetSGI; _internalformat: InternalFormat; x: Int32; y: Int32; width: Int32)>(z_CopyColorTableSGI_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure CopyColorTableSGI(target: ColorTableTargetSGI; _internalformat: InternalFormat; x: Int32; y: Int32; width: Int32);
    begin
      z_CopyColorTableSGI_ovr_0(target, _internalformat, x, y, width);
    end;
    
    public z_GetColorTableSGI_adr := GetFuncAdr('glGetColorTableSGI');
    public z_GetColorTableSGI_ovr_0 := GetFuncOrNil&<procedure(target: ColorTableTargetSGI; format: PixelFormat; &type: PixelType; table: IntPtr)>(z_GetColorTableSGI_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetColorTableSGI(target: ColorTableTargetSGI; format: PixelFormat; &type: PixelType; table: IntPtr);
    begin
      z_GetColorTableSGI_ovr_0(target, format, &type, table);
    end;
    
    public z_GetColorTableParameterfvSGI_adr := GetFuncAdr('glGetColorTableParameterfvSGI');
    public z_GetColorTableParameterfvSGI_ovr_0 := GetFuncOrNil&<procedure(target: ColorTableTargetSGI; pname: GetColorTableParameterPNameSGI; var &params: single)>(z_GetColorTableParameterfvSGI_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetColorTableParameterfvSGI(target: ColorTableTargetSGI; pname: GetColorTableParameterPNameSGI; &params: array of single);
    begin
      z_GetColorTableParameterfvSGI_ovr_0(target, pname, &params[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetColorTableParameterfvSGI(target: ColorTableTargetSGI; pname: GetColorTableParameterPNameSGI; var &params: single);
    begin
      z_GetColorTableParameterfvSGI_ovr_0(target, pname, &params);
    end;
    public z_GetColorTableParameterfvSGI_ovr_2 := GetFuncOrNil&<procedure(target: ColorTableTargetSGI; pname: GetColorTableParameterPNameSGI; &params: IntPtr)>(z_GetColorTableParameterfvSGI_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetColorTableParameterfvSGI(target: ColorTableTargetSGI; pname: GetColorTableParameterPNameSGI; &params: IntPtr);
    begin
      z_GetColorTableParameterfvSGI_ovr_2(target, pname, &params);
    end;
    
    public z_GetColorTableParameterivSGI_adr := GetFuncAdr('glGetColorTableParameterivSGI');
    public z_GetColorTableParameterivSGI_ovr_0 := GetFuncOrNil&<procedure(target: ColorTableTargetSGI; pname: GetColorTableParameterPNameSGI; var &params: Int32)>(z_GetColorTableParameterivSGI_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetColorTableParameterivSGI(target: ColorTableTargetSGI; pname: GetColorTableParameterPNameSGI; &params: array of Int32);
    begin
      z_GetColorTableParameterivSGI_ovr_0(target, pname, &params[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetColorTableParameterivSGI(target: ColorTableTargetSGI; pname: GetColorTableParameterPNameSGI; var &params: Int32);
    begin
      z_GetColorTableParameterivSGI_ovr_0(target, pname, &params);
    end;
    public z_GetColorTableParameterivSGI_ovr_2 := GetFuncOrNil&<procedure(target: ColorTableTargetSGI; pname: GetColorTableParameterPNameSGI; &params: IntPtr)>(z_GetColorTableParameterivSGI_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GetColorTableParameterivSGI(target: ColorTableTargetSGI; pname: GetColorTableParameterPNameSGI; &params: IntPtr);
    begin
      z_GetColorTableParameterivSGI_ovr_2(target, pname, &params);
    end;
    
  end;
  
  glConstantDataSUNX = sealed class
    public static function GetFuncAdr([MarshalAs(UnmanagedType.LPStr)] lpszProc: string): IntPtr;
    external 'opengl32.dll' name 'wglGetProcAddress';
    public static function GetFuncOrNil<T>(fadr: IntPtr) :=
    fadr=IntPtr.Zero ? default(T) :
    Marshal.GetDelegateForFunctionPointer&<T>(fadr);
    
    public z_FinishTextureSUNX_adr := GetFuncAdr('glFinishTextureSUNX');
    public z_FinishTextureSUNX_ovr_0 := GetFuncOrNil&<procedure>(z_FinishTextureSUNX_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure FinishTextureSUNX;
    begin
      z_FinishTextureSUNX_ovr_0;
    end;
    
  end;
  
  glGlobalAlphaSUN = sealed class
    public static function GetFuncAdr([MarshalAs(UnmanagedType.LPStr)] lpszProc: string): IntPtr;
    external 'opengl32.dll' name 'wglGetProcAddress';
    public static function GetFuncOrNil<T>(fadr: IntPtr) :=
    fadr=IntPtr.Zero ? default(T) :
    Marshal.GetDelegateForFunctionPointer&<T>(fadr);
    
    public z_GlobalAlphaFactorbSUN_adr := GetFuncAdr('glGlobalAlphaFactorbSUN');
    public z_GlobalAlphaFactorbSUN_ovr_0 := GetFuncOrNil&<procedure(factor: SByte)>(z_GlobalAlphaFactorbSUN_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GlobalAlphaFactorbSUN(factor: SByte);
    begin
      z_GlobalAlphaFactorbSUN_ovr_0(factor);
    end;
    
    public z_GlobalAlphaFactorsSUN_adr := GetFuncAdr('glGlobalAlphaFactorsSUN');
    public z_GlobalAlphaFactorsSUN_ovr_0 := GetFuncOrNil&<procedure(factor: Int16)>(z_GlobalAlphaFactorsSUN_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GlobalAlphaFactorsSUN(factor: Int16);
    begin
      z_GlobalAlphaFactorsSUN_ovr_0(factor);
    end;
    
    public z_GlobalAlphaFactoriSUN_adr := GetFuncAdr('glGlobalAlphaFactoriSUN');
    public z_GlobalAlphaFactoriSUN_ovr_0 := GetFuncOrNil&<procedure(factor: Int32)>(z_GlobalAlphaFactoriSUN_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GlobalAlphaFactoriSUN(factor: Int32);
    begin
      z_GlobalAlphaFactoriSUN_ovr_0(factor);
    end;
    
    public z_GlobalAlphaFactorfSUN_adr := GetFuncAdr('glGlobalAlphaFactorfSUN');
    public z_GlobalAlphaFactorfSUN_ovr_0 := GetFuncOrNil&<procedure(factor: single)>(z_GlobalAlphaFactorfSUN_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GlobalAlphaFactorfSUN(factor: single);
    begin
      z_GlobalAlphaFactorfSUN_ovr_0(factor);
    end;
    
    public z_GlobalAlphaFactordSUN_adr := GetFuncAdr('glGlobalAlphaFactordSUN');
    public z_GlobalAlphaFactordSUN_ovr_0 := GetFuncOrNil&<procedure(factor: real)>(z_GlobalAlphaFactordSUN_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GlobalAlphaFactordSUN(factor: real);
    begin
      z_GlobalAlphaFactordSUN_ovr_0(factor);
    end;
    
    public z_GlobalAlphaFactorubSUN_adr := GetFuncAdr('glGlobalAlphaFactorubSUN');
    public z_GlobalAlphaFactorubSUN_ovr_0 := GetFuncOrNil&<procedure(factor: Byte)>(z_GlobalAlphaFactorubSUN_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GlobalAlphaFactorubSUN(factor: Byte);
    begin
      z_GlobalAlphaFactorubSUN_ovr_0(factor);
    end;
    
    public z_GlobalAlphaFactorusSUN_adr := GetFuncAdr('glGlobalAlphaFactorusSUN');
    public z_GlobalAlphaFactorusSUN_ovr_0 := GetFuncOrNil&<procedure(factor: UInt16)>(z_GlobalAlphaFactorusSUN_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GlobalAlphaFactorusSUN(factor: UInt16);
    begin
      z_GlobalAlphaFactorusSUN_ovr_0(factor);
    end;
    
    public z_GlobalAlphaFactoruiSUN_adr := GetFuncAdr('glGlobalAlphaFactoruiSUN');
    public z_GlobalAlphaFactoruiSUN_ovr_0 := GetFuncOrNil&<procedure(factor: UInt32)>(z_GlobalAlphaFactoruiSUN_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure GlobalAlphaFactoruiSUN(factor: UInt32);
    begin
      z_GlobalAlphaFactoruiSUN_ovr_0(factor);
    end;
    
  end;
  
  glMeshArraySUN = sealed class
    public static function GetFuncAdr([MarshalAs(UnmanagedType.LPStr)] lpszProc: string): IntPtr;
    external 'opengl32.dll' name 'wglGetProcAddress';
    public static function GetFuncOrNil<T>(fadr: IntPtr) :=
    fadr=IntPtr.Zero ? default(T) :
    Marshal.GetDelegateForFunctionPointer&<T>(fadr);
    
    public z_DrawMeshArraysSUN_adr := GetFuncAdr('glDrawMeshArraysSUN');
    public z_DrawMeshArraysSUN_ovr_0 := GetFuncOrNil&<procedure(mode: PrimitiveType; first: Int32; count: Int32; width: Int32)>(z_DrawMeshArraysSUN_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure DrawMeshArraysSUN(mode: PrimitiveType; first: Int32; count: Int32; width: Int32);
    begin
      z_DrawMeshArraysSUN_ovr_0(mode, first, count, width);
    end;
    
  end;
  
  glTriangleListSUN = sealed class
    public static function GetFuncAdr([MarshalAs(UnmanagedType.LPStr)] lpszProc: string): IntPtr;
    external 'opengl32.dll' name 'wglGetProcAddress';
    public static function GetFuncOrNil<T>(fadr: IntPtr) :=
    fadr=IntPtr.Zero ? default(T) :
    Marshal.GetDelegateForFunctionPointer&<T>(fadr);
    
    public z_ReplacementCodeuiSUN_adr := GetFuncAdr('glReplacementCodeuiSUN');
    public z_ReplacementCodeuiSUN_ovr_0 := GetFuncOrNil&<procedure(code: UInt32)>(z_ReplacementCodeuiSUN_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ReplacementCodeuiSUN(code: UInt32);
    begin
      z_ReplacementCodeuiSUN_ovr_0(code);
    end;
    
    public z_ReplacementCodeusSUN_adr := GetFuncAdr('glReplacementCodeusSUN');
    public z_ReplacementCodeusSUN_ovr_0 := GetFuncOrNil&<procedure(code: UInt16)>(z_ReplacementCodeusSUN_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ReplacementCodeusSUN(code: UInt16);
    begin
      z_ReplacementCodeusSUN_ovr_0(code);
    end;
    
    public z_ReplacementCodeubSUN_adr := GetFuncAdr('glReplacementCodeubSUN');
    public z_ReplacementCodeubSUN_ovr_0 := GetFuncOrNil&<procedure(code: Byte)>(z_ReplacementCodeubSUN_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ReplacementCodeubSUN(code: Byte);
    begin
      z_ReplacementCodeubSUN_ovr_0(code);
    end;
    
    public z_ReplacementCodeuivSUN_adr := GetFuncAdr('glReplacementCodeuivSUN');
    public z_ReplacementCodeuivSUN_ovr_0 := GetFuncOrNil&<procedure(var code: UInt32)>(z_ReplacementCodeuivSUN_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ReplacementCodeuivSUN(code: array of UInt32);
    begin
      z_ReplacementCodeuivSUN_ovr_0(code[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ReplacementCodeuivSUN(var code: UInt32);
    begin
      z_ReplacementCodeuivSUN_ovr_0(code);
    end;
    public z_ReplacementCodeuivSUN_ovr_2 := GetFuncOrNil&<procedure(code: IntPtr)>(z_ReplacementCodeuivSUN_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ReplacementCodeuivSUN(code: IntPtr);
    begin
      z_ReplacementCodeuivSUN_ovr_2(code);
    end;
    
    public z_ReplacementCodeusvSUN_adr := GetFuncAdr('glReplacementCodeusvSUN');
    public z_ReplacementCodeusvSUN_ovr_0 := GetFuncOrNil&<procedure(var code: UInt16)>(z_ReplacementCodeusvSUN_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ReplacementCodeusvSUN(code: array of UInt16);
    begin
      z_ReplacementCodeusvSUN_ovr_0(code[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ReplacementCodeusvSUN(var code: UInt16);
    begin
      z_ReplacementCodeusvSUN_ovr_0(code);
    end;
    public z_ReplacementCodeusvSUN_ovr_2 := GetFuncOrNil&<procedure(code: IntPtr)>(z_ReplacementCodeusvSUN_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ReplacementCodeusvSUN(code: IntPtr);
    begin
      z_ReplacementCodeusvSUN_ovr_2(code);
    end;
    
    public z_ReplacementCodeubvSUN_adr := GetFuncAdr('glReplacementCodeubvSUN');
    public z_ReplacementCodeubvSUN_ovr_0 := GetFuncOrNil&<procedure(var code: Byte)>(z_ReplacementCodeubvSUN_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ReplacementCodeubvSUN(code: array of Byte);
    begin
      z_ReplacementCodeubvSUN_ovr_0(code[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ReplacementCodeubvSUN(var code: Byte);
    begin
      z_ReplacementCodeubvSUN_ovr_0(code);
    end;
    public z_ReplacementCodeubvSUN_ovr_2 := GetFuncOrNil&<procedure(code: IntPtr)>(z_ReplacementCodeubvSUN_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ReplacementCodeubvSUN(code: IntPtr);
    begin
      z_ReplacementCodeubvSUN_ovr_2(code);
    end;
    
    public z_ReplacementCodePointerSUN_adr := GetFuncAdr('glReplacementCodePointerSUN');
    public z_ReplacementCodePointerSUN_ovr_0 := GetFuncOrNil&<procedure(&type: ReplacementCodeTypeSUN; stride: Int32; var _pointer: IntPtr)>(z_ReplacementCodePointerSUN_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ReplacementCodePointerSUN(&type: ReplacementCodeTypeSUN; stride: Int32; _pointer: array of IntPtr);
    begin
      z_ReplacementCodePointerSUN_ovr_0(&type, stride, _pointer[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ReplacementCodePointerSUN(&type: ReplacementCodeTypeSUN; stride: Int32; var _pointer: IntPtr);
    begin
      z_ReplacementCodePointerSUN_ovr_0(&type, stride, _pointer);
    end;
    public z_ReplacementCodePointerSUN_ovr_2 := GetFuncOrNil&<procedure(&type: ReplacementCodeTypeSUN; stride: Int32; _pointer: pointer)>(z_ReplacementCodePointerSUN_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ReplacementCodePointerSUN(&type: ReplacementCodeTypeSUN; stride: Int32; _pointer: pointer);
    begin
      z_ReplacementCodePointerSUN_ovr_2(&type, stride, _pointer);
    end;
    
  end;
  
  glVertexSUN = sealed class
    public static function GetFuncAdr([MarshalAs(UnmanagedType.LPStr)] lpszProc: string): IntPtr;
    external 'opengl32.dll' name 'wglGetProcAddress';
    public static function GetFuncOrNil<T>(fadr: IntPtr) :=
    fadr=IntPtr.Zero ? default(T) :
    Marshal.GetDelegateForFunctionPointer&<T>(fadr);
    
    public z_Color4ubVertex2fSUN_adr := GetFuncAdr('glColor4ubVertex2fSUN');
    public z_Color4ubVertex2fSUN_ovr_0 := GetFuncOrNil&<procedure(r: Byte; g: Byte; b: Byte; a: Byte; x: single; y: single)>(z_Color4ubVertex2fSUN_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Color4ubVertex2fSUN(r: Byte; g: Byte; b: Byte; a: Byte; x: single; y: single);
    begin
      z_Color4ubVertex2fSUN_ovr_0(r, g, b, a, x, y);
    end;
    
    public z_Color4ubVertex2fvSUN_adr := GetFuncAdr('glColor4ubVertex2fvSUN');
    public z_Color4ubVertex2fvSUN_ovr_0 := GetFuncOrNil&<procedure(var c: Vec4ub; var v: Vec2f)>(z_Color4ubVertex2fvSUN_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Color4ubVertex2fvSUN(var c: Vec4ub; var v: Vec2f);
    begin
      z_Color4ubVertex2fvSUN_ovr_0(c, v);
    end;
    public z_Color4ubVertex2fvSUN_ovr_1 := GetFuncOrNil&<procedure(var c: Byte; var v: single)>(z_Color4ubVertex2fvSUN_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Color4ubVertex2fvSUN(c: array of Byte; v: array of single);
    begin
      z_Color4ubVertex2fvSUN_ovr_1(c[0], v[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Color4ubVertex2fvSUN(var c: Byte; var v: single);
    begin
      z_Color4ubVertex2fvSUN_ovr_1(c, v);
    end;
    public z_Color4ubVertex2fvSUN_ovr_3 := GetFuncOrNil&<procedure(c: IntPtr; v: IntPtr)>(z_Color4ubVertex2fvSUN_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Color4ubVertex2fvSUN(c: IntPtr; v: IntPtr);
    begin
      z_Color4ubVertex2fvSUN_ovr_3(c, v);
    end;
    
    public z_Color4ubVertex3fSUN_adr := GetFuncAdr('glColor4ubVertex3fSUN');
    public z_Color4ubVertex3fSUN_ovr_0 := GetFuncOrNil&<procedure(r: Byte; g: Byte; b: Byte; a: Byte; x: single; y: single; z: single)>(z_Color4ubVertex3fSUN_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Color4ubVertex3fSUN(r: Byte; g: Byte; b: Byte; a: Byte; x: single; y: single; z: single);
    begin
      z_Color4ubVertex3fSUN_ovr_0(r, g, b, a, x, y, z);
    end;
    
    public z_Color4ubVertex3fvSUN_adr := GetFuncAdr('glColor4ubVertex3fvSUN');
    public z_Color4ubVertex3fvSUN_ovr_0 := GetFuncOrNil&<procedure(var c: Vec4ub; var v: Vec3f)>(z_Color4ubVertex3fvSUN_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Color4ubVertex3fvSUN(var c: Vec4ub; var v: Vec3f);
    begin
      z_Color4ubVertex3fvSUN_ovr_0(c, v);
    end;
    public z_Color4ubVertex3fvSUN_ovr_1 := GetFuncOrNil&<procedure(var c: Byte; var v: single)>(z_Color4ubVertex3fvSUN_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Color4ubVertex3fvSUN(c: array of Byte; v: array of single);
    begin
      z_Color4ubVertex3fvSUN_ovr_1(c[0], v[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Color4ubVertex3fvSUN(var c: Byte; var v: single);
    begin
      z_Color4ubVertex3fvSUN_ovr_1(c, v);
    end;
    public z_Color4ubVertex3fvSUN_ovr_3 := GetFuncOrNil&<procedure(c: IntPtr; v: IntPtr)>(z_Color4ubVertex3fvSUN_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Color4ubVertex3fvSUN(c: IntPtr; v: IntPtr);
    begin
      z_Color4ubVertex3fvSUN_ovr_3(c, v);
    end;
    
    public z_Color3fVertex3fSUN_adr := GetFuncAdr('glColor3fVertex3fSUN');
    public z_Color3fVertex3fSUN_ovr_0 := GetFuncOrNil&<procedure(r: single; g: single; b: single; x: single; y: single; z: single)>(z_Color3fVertex3fSUN_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Color3fVertex3fSUN(r: single; g: single; b: single; x: single; y: single; z: single);
    begin
      z_Color3fVertex3fSUN_ovr_0(r, g, b, x, y, z);
    end;
    
    public z_Color3fVertex3fvSUN_adr := GetFuncAdr('glColor3fVertex3fvSUN');
    public z_Color3fVertex3fvSUN_ovr_0 := GetFuncOrNil&<procedure(var c: Vec3f; var v: Vec3f)>(z_Color3fVertex3fvSUN_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Color3fVertex3fvSUN(var c: Vec3f; var v: Vec3f);
    begin
      z_Color3fVertex3fvSUN_ovr_0(c, v);
    end;
    public z_Color3fVertex3fvSUN_ovr_1 := GetFuncOrNil&<procedure(var c: single; var v: single)>(z_Color3fVertex3fvSUN_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Color3fVertex3fvSUN(c: array of single; v: array of single);
    begin
      z_Color3fVertex3fvSUN_ovr_1(c[0], v[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Color3fVertex3fvSUN(var c: single; var v: single);
    begin
      z_Color3fVertex3fvSUN_ovr_1(c, v);
    end;
    public z_Color3fVertex3fvSUN_ovr_3 := GetFuncOrNil&<procedure(c: IntPtr; v: IntPtr)>(z_Color3fVertex3fvSUN_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Color3fVertex3fvSUN(c: IntPtr; v: IntPtr);
    begin
      z_Color3fVertex3fvSUN_ovr_3(c, v);
    end;
    
    public z_Normal3fVertex3fSUN_adr := GetFuncAdr('glNormal3fVertex3fSUN');
    public z_Normal3fVertex3fSUN_ovr_0 := GetFuncOrNil&<procedure(nx: single; ny: single; nz: single; x: single; y: single; z: single)>(z_Normal3fVertex3fSUN_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Normal3fVertex3fSUN(nx: single; ny: single; nz: single; x: single; y: single; z: single);
    begin
      z_Normal3fVertex3fSUN_ovr_0(nx, ny, nz, x, y, z);
    end;
    
    public z_Normal3fVertex3fvSUN_adr := GetFuncAdr('glNormal3fVertex3fvSUN');
    public z_Normal3fVertex3fvSUN_ovr_0 := GetFuncOrNil&<procedure(var n: Vec3f; var v: Vec3f)>(z_Normal3fVertex3fvSUN_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Normal3fVertex3fvSUN(var n: Vec3f; var v: Vec3f);
    begin
      z_Normal3fVertex3fvSUN_ovr_0(n, v);
    end;
    public z_Normal3fVertex3fvSUN_ovr_1 := GetFuncOrNil&<procedure(var n: single; var v: single)>(z_Normal3fVertex3fvSUN_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Normal3fVertex3fvSUN(n: array of single; v: array of single);
    begin
      z_Normal3fVertex3fvSUN_ovr_1(n[0], v[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Normal3fVertex3fvSUN(var n: single; var v: single);
    begin
      z_Normal3fVertex3fvSUN_ovr_1(n, v);
    end;
    public z_Normal3fVertex3fvSUN_ovr_3 := GetFuncOrNil&<procedure(n: IntPtr; v: IntPtr)>(z_Normal3fVertex3fvSUN_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Normal3fVertex3fvSUN(n: IntPtr; v: IntPtr);
    begin
      z_Normal3fVertex3fvSUN_ovr_3(n, v);
    end;
    
    public z_Color4fNormal3fVertex3fSUN_adr := GetFuncAdr('glColor4fNormal3fVertex3fSUN');
    public z_Color4fNormal3fVertex3fSUN_ovr_0 := GetFuncOrNil&<procedure(r: single; g: single; b: single; a: single; nx: single; ny: single; nz: single; x: single; y: single; z: single)>(z_Color4fNormal3fVertex3fSUN_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Color4fNormal3fVertex3fSUN(r: single; g: single; b: single; a: single; nx: single; ny: single; nz: single; x: single; y: single; z: single);
    begin
      z_Color4fNormal3fVertex3fSUN_ovr_0(r, g, b, a, nx, ny, nz, x, y, z);
    end;
    
    public z_Color4fNormal3fVertex3fvSUN_adr := GetFuncAdr('glColor4fNormal3fVertex3fvSUN');
    public z_Color4fNormal3fVertex3fvSUN_ovr_0 := GetFuncOrNil&<procedure(var c: Vec4f; var n: Vec3f; var v: Vec3f)>(z_Color4fNormal3fVertex3fvSUN_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Color4fNormal3fVertex3fvSUN(var c: Vec4f; var n: Vec3f; var v: Vec3f);
    begin
      z_Color4fNormal3fVertex3fvSUN_ovr_0(c, n, v);
    end;
    public z_Color4fNormal3fVertex3fvSUN_ovr_1 := GetFuncOrNil&<procedure(var c: single; var n: single; var v: single)>(z_Color4fNormal3fVertex3fvSUN_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Color4fNormal3fVertex3fvSUN(c: array of single; n: array of single; v: array of single);
    begin
      z_Color4fNormal3fVertex3fvSUN_ovr_1(c[0], n[0], v[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Color4fNormal3fVertex3fvSUN(var c: single; var n: single; var v: single);
    begin
      z_Color4fNormal3fVertex3fvSUN_ovr_1(c, n, v);
    end;
    public z_Color4fNormal3fVertex3fvSUN_ovr_3 := GetFuncOrNil&<procedure(c: IntPtr; n: IntPtr; v: IntPtr)>(z_Color4fNormal3fVertex3fvSUN_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure Color4fNormal3fVertex3fvSUN(c: IntPtr; n: IntPtr; v: IntPtr);
    begin
      z_Color4fNormal3fVertex3fvSUN_ovr_3(c, n, v);
    end;
    
    public z_TexCoord2fVertex3fSUN_adr := GetFuncAdr('glTexCoord2fVertex3fSUN');
    public z_TexCoord2fVertex3fSUN_ovr_0 := GetFuncOrNil&<procedure(s: single; t: single; x: single; y: single; z: single)>(z_TexCoord2fVertex3fSUN_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TexCoord2fVertex3fSUN(s: single; t: single; x: single; y: single; z: single);
    begin
      z_TexCoord2fVertex3fSUN_ovr_0(s, t, x, y, z);
    end;
    
    public z_TexCoord2fVertex3fvSUN_adr := GetFuncAdr('glTexCoord2fVertex3fvSUN');
    public z_TexCoord2fVertex3fvSUN_ovr_0 := GetFuncOrNil&<procedure(var tc: Vec2f; var v: Vec3f)>(z_TexCoord2fVertex3fvSUN_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TexCoord2fVertex3fvSUN(var tc: Vec2f; var v: Vec3f);
    begin
      z_TexCoord2fVertex3fvSUN_ovr_0(tc, v);
    end;
    public z_TexCoord2fVertex3fvSUN_ovr_1 := GetFuncOrNil&<procedure(var tc: single; var v: single)>(z_TexCoord2fVertex3fvSUN_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TexCoord2fVertex3fvSUN(tc: array of single; v: array of single);
    begin
      z_TexCoord2fVertex3fvSUN_ovr_1(tc[0], v[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TexCoord2fVertex3fvSUN(var tc: single; var v: single);
    begin
      z_TexCoord2fVertex3fvSUN_ovr_1(tc, v);
    end;
    public z_TexCoord2fVertex3fvSUN_ovr_3 := GetFuncOrNil&<procedure(tc: IntPtr; v: IntPtr)>(z_TexCoord2fVertex3fvSUN_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TexCoord2fVertex3fvSUN(tc: IntPtr; v: IntPtr);
    begin
      z_TexCoord2fVertex3fvSUN_ovr_3(tc, v);
    end;
    
    public z_TexCoord4fVertex4fSUN_adr := GetFuncAdr('glTexCoord4fVertex4fSUN');
    public z_TexCoord4fVertex4fSUN_ovr_0 := GetFuncOrNil&<procedure(s: single; t: single; p: single; q: single; x: single; y: single; z: single; w: single)>(z_TexCoord4fVertex4fSUN_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TexCoord4fVertex4fSUN(s: single; t: single; p: single; q: single; x: single; y: single; z: single; w: single);
    begin
      z_TexCoord4fVertex4fSUN_ovr_0(s, t, p, q, x, y, z, w);
    end;
    
    public z_TexCoord4fVertex4fvSUN_adr := GetFuncAdr('glTexCoord4fVertex4fvSUN');
    public z_TexCoord4fVertex4fvSUN_ovr_0 := GetFuncOrNil&<procedure(var tc: Vec4f; var v: Vec4f)>(z_TexCoord4fVertex4fvSUN_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TexCoord4fVertex4fvSUN(var tc: Vec4f; var v: Vec4f);
    begin
      z_TexCoord4fVertex4fvSUN_ovr_0(tc, v);
    end;
    public z_TexCoord4fVertex4fvSUN_ovr_1 := GetFuncOrNil&<procedure(var tc: single; var v: single)>(z_TexCoord4fVertex4fvSUN_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TexCoord4fVertex4fvSUN(tc: array of single; v: array of single);
    begin
      z_TexCoord4fVertex4fvSUN_ovr_1(tc[0], v[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TexCoord4fVertex4fvSUN(var tc: single; var v: single);
    begin
      z_TexCoord4fVertex4fvSUN_ovr_1(tc, v);
    end;
    public z_TexCoord4fVertex4fvSUN_ovr_3 := GetFuncOrNil&<procedure(tc: IntPtr; v: IntPtr)>(z_TexCoord4fVertex4fvSUN_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TexCoord4fVertex4fvSUN(tc: IntPtr; v: IntPtr);
    begin
      z_TexCoord4fVertex4fvSUN_ovr_3(tc, v);
    end;
    
    public z_TexCoord2fColor4ubVertex3fSUN_adr := GetFuncAdr('glTexCoord2fColor4ubVertex3fSUN');
    public z_TexCoord2fColor4ubVertex3fSUN_ovr_0 := GetFuncOrNil&<procedure(s: single; t: single; r: Byte; g: Byte; b: Byte; a: Byte; x: single; y: single; z: single)>(z_TexCoord2fColor4ubVertex3fSUN_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TexCoord2fColor4ubVertex3fSUN(s: single; t: single; r: Byte; g: Byte; b: Byte; a: Byte; x: single; y: single; z: single);
    begin
      z_TexCoord2fColor4ubVertex3fSUN_ovr_0(s, t, r, g, b, a, x, y, z);
    end;
    
    public z_TexCoord2fColor4ubVertex3fvSUN_adr := GetFuncAdr('glTexCoord2fColor4ubVertex3fvSUN');
    public z_TexCoord2fColor4ubVertex3fvSUN_ovr_0 := GetFuncOrNil&<procedure(var tc: Vec2f; var c: Vec4ub; var v: Vec3f)>(z_TexCoord2fColor4ubVertex3fvSUN_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TexCoord2fColor4ubVertex3fvSUN(var tc: Vec2f; var c: Vec4ub; var v: Vec3f);
    begin
      z_TexCoord2fColor4ubVertex3fvSUN_ovr_0(tc, c, v);
    end;
    public z_TexCoord2fColor4ubVertex3fvSUN_ovr_1 := GetFuncOrNil&<procedure(var tc: single; var c: Byte; var v: single)>(z_TexCoord2fColor4ubVertex3fvSUN_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TexCoord2fColor4ubVertex3fvSUN(tc: array of single; c: array of Byte; v: array of single);
    begin
      z_TexCoord2fColor4ubVertex3fvSUN_ovr_1(tc[0], c[0], v[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TexCoord2fColor4ubVertex3fvSUN(var tc: single; var c: Byte; var v: single);
    begin
      z_TexCoord2fColor4ubVertex3fvSUN_ovr_1(tc, c, v);
    end;
    public z_TexCoord2fColor4ubVertex3fvSUN_ovr_3 := GetFuncOrNil&<procedure(tc: IntPtr; c: IntPtr; v: IntPtr)>(z_TexCoord2fColor4ubVertex3fvSUN_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TexCoord2fColor4ubVertex3fvSUN(tc: IntPtr; c: IntPtr; v: IntPtr);
    begin
      z_TexCoord2fColor4ubVertex3fvSUN_ovr_3(tc, c, v);
    end;
    
    public z_TexCoord2fColor3fVertex3fSUN_adr := GetFuncAdr('glTexCoord2fColor3fVertex3fSUN');
    public z_TexCoord2fColor3fVertex3fSUN_ovr_0 := GetFuncOrNil&<procedure(s: single; t: single; r: single; g: single; b: single; x: single; y: single; z: single)>(z_TexCoord2fColor3fVertex3fSUN_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TexCoord2fColor3fVertex3fSUN(s: single; t: single; r: single; g: single; b: single; x: single; y: single; z: single);
    begin
      z_TexCoord2fColor3fVertex3fSUN_ovr_0(s, t, r, g, b, x, y, z);
    end;
    
    public z_TexCoord2fColor3fVertex3fvSUN_adr := GetFuncAdr('glTexCoord2fColor3fVertex3fvSUN');
    public z_TexCoord2fColor3fVertex3fvSUN_ovr_0 := GetFuncOrNil&<procedure(var tc: Vec2f; var c: Vec3f; var v: Vec3f)>(z_TexCoord2fColor3fVertex3fvSUN_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TexCoord2fColor3fVertex3fvSUN(var tc: Vec2f; var c: Vec3f; var v: Vec3f);
    begin
      z_TexCoord2fColor3fVertex3fvSUN_ovr_0(tc, c, v);
    end;
    public z_TexCoord2fColor3fVertex3fvSUN_ovr_1 := GetFuncOrNil&<procedure(var tc: single; var c: single; var v: single)>(z_TexCoord2fColor3fVertex3fvSUN_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TexCoord2fColor3fVertex3fvSUN(tc: array of single; c: array of single; v: array of single);
    begin
      z_TexCoord2fColor3fVertex3fvSUN_ovr_1(tc[0], c[0], v[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TexCoord2fColor3fVertex3fvSUN(var tc: single; var c: single; var v: single);
    begin
      z_TexCoord2fColor3fVertex3fvSUN_ovr_1(tc, c, v);
    end;
    public z_TexCoord2fColor3fVertex3fvSUN_ovr_3 := GetFuncOrNil&<procedure(tc: IntPtr; c: IntPtr; v: IntPtr)>(z_TexCoord2fColor3fVertex3fvSUN_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TexCoord2fColor3fVertex3fvSUN(tc: IntPtr; c: IntPtr; v: IntPtr);
    begin
      z_TexCoord2fColor3fVertex3fvSUN_ovr_3(tc, c, v);
    end;
    
    public z_TexCoord2fNormal3fVertex3fSUN_adr := GetFuncAdr('glTexCoord2fNormal3fVertex3fSUN');
    public z_TexCoord2fNormal3fVertex3fSUN_ovr_0 := GetFuncOrNil&<procedure(s: single; t: single; nx: single; ny: single; nz: single; x: single; y: single; z: single)>(z_TexCoord2fNormal3fVertex3fSUN_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TexCoord2fNormal3fVertex3fSUN(s: single; t: single; nx: single; ny: single; nz: single; x: single; y: single; z: single);
    begin
      z_TexCoord2fNormal3fVertex3fSUN_ovr_0(s, t, nx, ny, nz, x, y, z);
    end;
    
    public z_TexCoord2fNormal3fVertex3fvSUN_adr := GetFuncAdr('glTexCoord2fNormal3fVertex3fvSUN');
    public z_TexCoord2fNormal3fVertex3fvSUN_ovr_0 := GetFuncOrNil&<procedure(var tc: Vec2f; var n: Vec3f; var v: Vec3f)>(z_TexCoord2fNormal3fVertex3fvSUN_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TexCoord2fNormal3fVertex3fvSUN(var tc: Vec2f; var n: Vec3f; var v: Vec3f);
    begin
      z_TexCoord2fNormal3fVertex3fvSUN_ovr_0(tc, n, v);
    end;
    public z_TexCoord2fNormal3fVertex3fvSUN_ovr_1 := GetFuncOrNil&<procedure(var tc: single; var n: single; var v: single)>(z_TexCoord2fNormal3fVertex3fvSUN_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TexCoord2fNormal3fVertex3fvSUN(tc: array of single; n: array of single; v: array of single);
    begin
      z_TexCoord2fNormal3fVertex3fvSUN_ovr_1(tc[0], n[0], v[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TexCoord2fNormal3fVertex3fvSUN(var tc: single; var n: single; var v: single);
    begin
      z_TexCoord2fNormal3fVertex3fvSUN_ovr_1(tc, n, v);
    end;
    public z_TexCoord2fNormal3fVertex3fvSUN_ovr_3 := GetFuncOrNil&<procedure(tc: IntPtr; n: IntPtr; v: IntPtr)>(z_TexCoord2fNormal3fVertex3fvSUN_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TexCoord2fNormal3fVertex3fvSUN(tc: IntPtr; n: IntPtr; v: IntPtr);
    begin
      z_TexCoord2fNormal3fVertex3fvSUN_ovr_3(tc, n, v);
    end;
    
    public z_TexCoord2fColor4fNormal3fVertex3fSUN_adr := GetFuncAdr('glTexCoord2fColor4fNormal3fVertex3fSUN');
    public z_TexCoord2fColor4fNormal3fVertex3fSUN_ovr_0 := GetFuncOrNil&<procedure(s: single; t: single; r: single; g: single; b: single; a: single; nx: single; ny: single; nz: single; x: single; y: single; z: single)>(z_TexCoord2fColor4fNormal3fVertex3fSUN_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TexCoord2fColor4fNormal3fVertex3fSUN(s: single; t: single; r: single; g: single; b: single; a: single; nx: single; ny: single; nz: single; x: single; y: single; z: single);
    begin
      z_TexCoord2fColor4fNormal3fVertex3fSUN_ovr_0(s, t, r, g, b, a, nx, ny, nz, x, y, z);
    end;
    
    public z_TexCoord2fColor4fNormal3fVertex3fvSUN_adr := GetFuncAdr('glTexCoord2fColor4fNormal3fVertex3fvSUN');
    public z_TexCoord2fColor4fNormal3fVertex3fvSUN_ovr_0 := GetFuncOrNil&<procedure(var tc: Vec2f; var c: Vec4f; var n: Vec3f; var v: Vec3f)>(z_TexCoord2fColor4fNormal3fVertex3fvSUN_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TexCoord2fColor4fNormal3fVertex3fvSUN(var tc: Vec2f; var c: Vec4f; var n: Vec3f; var v: Vec3f);
    begin
      z_TexCoord2fColor4fNormal3fVertex3fvSUN_ovr_0(tc, c, n, v);
    end;
    public z_TexCoord2fColor4fNormal3fVertex3fvSUN_ovr_1 := GetFuncOrNil&<procedure(var tc: single; var c: single; var n: single; var v: single)>(z_TexCoord2fColor4fNormal3fVertex3fvSUN_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TexCoord2fColor4fNormal3fVertex3fvSUN(tc: array of single; c: array of single; n: array of single; v: array of single);
    begin
      z_TexCoord2fColor4fNormal3fVertex3fvSUN_ovr_1(tc[0], c[0], n[0], v[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TexCoord2fColor4fNormal3fVertex3fvSUN(var tc: single; var c: single; var n: single; var v: single);
    begin
      z_TexCoord2fColor4fNormal3fVertex3fvSUN_ovr_1(tc, c, n, v);
    end;
    public z_TexCoord2fColor4fNormal3fVertex3fvSUN_ovr_3 := GetFuncOrNil&<procedure(tc: IntPtr; c: IntPtr; n: IntPtr; v: IntPtr)>(z_TexCoord2fColor4fNormal3fVertex3fvSUN_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TexCoord2fColor4fNormal3fVertex3fvSUN(tc: IntPtr; c: IntPtr; n: IntPtr; v: IntPtr);
    begin
      z_TexCoord2fColor4fNormal3fVertex3fvSUN_ovr_3(tc, c, n, v);
    end;
    
    public z_TexCoord4fColor4fNormal3fVertex4fSUN_adr := GetFuncAdr('glTexCoord4fColor4fNormal3fVertex4fSUN');
    public z_TexCoord4fColor4fNormal3fVertex4fSUN_ovr_0 := GetFuncOrNil&<procedure(s: single; t: single; p: single; q: single; r: single; g: single; b: single; a: single; nx: single; ny: single; nz: single; x: single; y: single; z: single; w: single)>(z_TexCoord4fColor4fNormal3fVertex4fSUN_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TexCoord4fColor4fNormal3fVertex4fSUN(s: single; t: single; p: single; q: single; r: single; g: single; b: single; a: single; nx: single; ny: single; nz: single; x: single; y: single; z: single; w: single);
    begin
      z_TexCoord4fColor4fNormal3fVertex4fSUN_ovr_0(s, t, p, q, r, g, b, a, nx, ny, nz, x, y, z, w);
    end;
    
    public z_TexCoord4fColor4fNormal3fVertex4fvSUN_adr := GetFuncAdr('glTexCoord4fColor4fNormal3fVertex4fvSUN');
    public z_TexCoord4fColor4fNormal3fVertex4fvSUN_ovr_0 := GetFuncOrNil&<procedure(var tc: Vec4f; var c: Vec4f; var n: Vec3f; var v: Vec4f)>(z_TexCoord4fColor4fNormal3fVertex4fvSUN_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TexCoord4fColor4fNormal3fVertex4fvSUN(var tc: Vec4f; var c: Vec4f; var n: Vec3f; var v: Vec4f);
    begin
      z_TexCoord4fColor4fNormal3fVertex4fvSUN_ovr_0(tc, c, n, v);
    end;
    public z_TexCoord4fColor4fNormal3fVertex4fvSUN_ovr_1 := GetFuncOrNil&<procedure(var tc: single; var c: single; var n: single; var v: single)>(z_TexCoord4fColor4fNormal3fVertex4fvSUN_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TexCoord4fColor4fNormal3fVertex4fvSUN(tc: array of single; c: array of single; n: array of single; v: array of single);
    begin
      z_TexCoord4fColor4fNormal3fVertex4fvSUN_ovr_1(tc[0], c[0], n[0], v[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TexCoord4fColor4fNormal3fVertex4fvSUN(var tc: single; var c: single; var n: single; var v: single);
    begin
      z_TexCoord4fColor4fNormal3fVertex4fvSUN_ovr_1(tc, c, n, v);
    end;
    public z_TexCoord4fColor4fNormal3fVertex4fvSUN_ovr_3 := GetFuncOrNil&<procedure(tc: IntPtr; c: IntPtr; n: IntPtr; v: IntPtr)>(z_TexCoord4fColor4fNormal3fVertex4fvSUN_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure TexCoord4fColor4fNormal3fVertex4fvSUN(tc: IntPtr; c: IntPtr; n: IntPtr; v: IntPtr);
    begin
      z_TexCoord4fColor4fNormal3fVertex4fvSUN_ovr_3(tc, c, n, v);
    end;
    
    public z_ReplacementCodeuiVertex3fSUN_adr := GetFuncAdr('glReplacementCodeuiVertex3fSUN');
    public z_ReplacementCodeuiVertex3fSUN_ovr_0 := GetFuncOrNil&<procedure(rc: UInt32; x: single; y: single; z: single)>(z_ReplacementCodeuiVertex3fSUN_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ReplacementCodeuiVertex3fSUN(rc: UInt32; x: single; y: single; z: single);
    begin
      z_ReplacementCodeuiVertex3fSUN_ovr_0(rc, x, y, z);
    end;
    
    public z_ReplacementCodeuiVertex3fvSUN_adr := GetFuncAdr('glReplacementCodeuiVertex3fvSUN');
    public z_ReplacementCodeuiVertex3fvSUN_ovr_0 := GetFuncOrNil&<procedure(var rc: UInt32; var v: Vec3f)>(z_ReplacementCodeuiVertex3fvSUN_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ReplacementCodeuiVertex3fvSUN(var rc: UInt32; var v: Vec3f);
    begin
      z_ReplacementCodeuiVertex3fvSUN_ovr_0(rc, v);
    end;
    public z_ReplacementCodeuiVertex3fvSUN_ovr_1 := GetFuncOrNil&<procedure(var rc: UInt32; var v: single)>(z_ReplacementCodeuiVertex3fvSUN_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ReplacementCodeuiVertex3fvSUN(var rc: UInt32; v: array of single);
    begin
      z_ReplacementCodeuiVertex3fvSUN_ovr_1(rc, v[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ReplacementCodeuiVertex3fvSUN(var rc: UInt32; var v: single);
    begin
      z_ReplacementCodeuiVertex3fvSUN_ovr_1(rc, v);
    end;
    public z_ReplacementCodeuiVertex3fvSUN_ovr_3 := GetFuncOrNil&<procedure(rc: IntPtr; v: IntPtr)>(z_ReplacementCodeuiVertex3fvSUN_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ReplacementCodeuiVertex3fvSUN(rc: IntPtr; v: IntPtr);
    begin
      z_ReplacementCodeuiVertex3fvSUN_ovr_3(rc, v);
    end;
    
    public z_ReplacementCodeuiColor4ubVertex3fSUN_adr := GetFuncAdr('glReplacementCodeuiColor4ubVertex3fSUN');
    public z_ReplacementCodeuiColor4ubVertex3fSUN_ovr_0 := GetFuncOrNil&<procedure(rc: UInt32; r: Byte; g: Byte; b: Byte; a: Byte; x: single; y: single; z: single)>(z_ReplacementCodeuiColor4ubVertex3fSUN_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ReplacementCodeuiColor4ubVertex3fSUN(rc: UInt32; r: Byte; g: Byte; b: Byte; a: Byte; x: single; y: single; z: single);
    begin
      z_ReplacementCodeuiColor4ubVertex3fSUN_ovr_0(rc, r, g, b, a, x, y, z);
    end;
    
    public z_ReplacementCodeuiColor4ubVertex3fvSUN_adr := GetFuncAdr('glReplacementCodeuiColor4ubVertex3fvSUN');
    public z_ReplacementCodeuiColor4ubVertex3fvSUN_ovr_0 := GetFuncOrNil&<procedure(var rc: UInt32; var c: Vec4ub; var v: Vec3f)>(z_ReplacementCodeuiColor4ubVertex3fvSUN_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ReplacementCodeuiColor4ubVertex3fvSUN(var rc: UInt32; var c: Vec4ub; var v: Vec3f);
    begin
      z_ReplacementCodeuiColor4ubVertex3fvSUN_ovr_0(rc, c, v);
    end;
    public z_ReplacementCodeuiColor4ubVertex3fvSUN_ovr_1 := GetFuncOrNil&<procedure(var rc: UInt32; var c: Byte; var v: single)>(z_ReplacementCodeuiColor4ubVertex3fvSUN_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ReplacementCodeuiColor4ubVertex3fvSUN(var rc: UInt32; c: array of Byte; v: array of single);
    begin
      z_ReplacementCodeuiColor4ubVertex3fvSUN_ovr_1(rc, c[0], v[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ReplacementCodeuiColor4ubVertex3fvSUN(var rc: UInt32; var c: Byte; var v: single);
    begin
      z_ReplacementCodeuiColor4ubVertex3fvSUN_ovr_1(rc, c, v);
    end;
    public z_ReplacementCodeuiColor4ubVertex3fvSUN_ovr_3 := GetFuncOrNil&<procedure(rc: IntPtr; c: IntPtr; v: IntPtr)>(z_ReplacementCodeuiColor4ubVertex3fvSUN_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ReplacementCodeuiColor4ubVertex3fvSUN(rc: IntPtr; c: IntPtr; v: IntPtr);
    begin
      z_ReplacementCodeuiColor4ubVertex3fvSUN_ovr_3(rc, c, v);
    end;
    
    public z_ReplacementCodeuiColor3fVertex3fSUN_adr := GetFuncAdr('glReplacementCodeuiColor3fVertex3fSUN');
    public z_ReplacementCodeuiColor3fVertex3fSUN_ovr_0 := GetFuncOrNil&<procedure(rc: UInt32; r: single; g: single; b: single; x: single; y: single; z: single)>(z_ReplacementCodeuiColor3fVertex3fSUN_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ReplacementCodeuiColor3fVertex3fSUN(rc: UInt32; r: single; g: single; b: single; x: single; y: single; z: single);
    begin
      z_ReplacementCodeuiColor3fVertex3fSUN_ovr_0(rc, r, g, b, x, y, z);
    end;
    
    public z_ReplacementCodeuiColor3fVertex3fvSUN_adr := GetFuncAdr('glReplacementCodeuiColor3fVertex3fvSUN');
    public z_ReplacementCodeuiColor3fVertex3fvSUN_ovr_0 := GetFuncOrNil&<procedure(var rc: UInt32; var c: Vec3f; var v: Vec3f)>(z_ReplacementCodeuiColor3fVertex3fvSUN_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ReplacementCodeuiColor3fVertex3fvSUN(var rc: UInt32; var c: Vec3f; var v: Vec3f);
    begin
      z_ReplacementCodeuiColor3fVertex3fvSUN_ovr_0(rc, c, v);
    end;
    public z_ReplacementCodeuiColor3fVertex3fvSUN_ovr_1 := GetFuncOrNil&<procedure(var rc: UInt32; var c: single; var v: single)>(z_ReplacementCodeuiColor3fVertex3fvSUN_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ReplacementCodeuiColor3fVertex3fvSUN(var rc: UInt32; c: array of single; v: array of single);
    begin
      z_ReplacementCodeuiColor3fVertex3fvSUN_ovr_1(rc, c[0], v[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ReplacementCodeuiColor3fVertex3fvSUN(var rc: UInt32; var c: single; var v: single);
    begin
      z_ReplacementCodeuiColor3fVertex3fvSUN_ovr_1(rc, c, v);
    end;
    public z_ReplacementCodeuiColor3fVertex3fvSUN_ovr_3 := GetFuncOrNil&<procedure(rc: IntPtr; c: IntPtr; v: IntPtr)>(z_ReplacementCodeuiColor3fVertex3fvSUN_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ReplacementCodeuiColor3fVertex3fvSUN(rc: IntPtr; c: IntPtr; v: IntPtr);
    begin
      z_ReplacementCodeuiColor3fVertex3fvSUN_ovr_3(rc, c, v);
    end;
    
    public z_ReplacementCodeuiNormal3fVertex3fSUN_adr := GetFuncAdr('glReplacementCodeuiNormal3fVertex3fSUN');
    public z_ReplacementCodeuiNormal3fVertex3fSUN_ovr_0 := GetFuncOrNil&<procedure(rc: UInt32; nx: single; ny: single; nz: single; x: single; y: single; z: single)>(z_ReplacementCodeuiNormal3fVertex3fSUN_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ReplacementCodeuiNormal3fVertex3fSUN(rc: UInt32; nx: single; ny: single; nz: single; x: single; y: single; z: single);
    begin
      z_ReplacementCodeuiNormal3fVertex3fSUN_ovr_0(rc, nx, ny, nz, x, y, z);
    end;
    
    public z_ReplacementCodeuiNormal3fVertex3fvSUN_adr := GetFuncAdr('glReplacementCodeuiNormal3fVertex3fvSUN');
    public z_ReplacementCodeuiNormal3fVertex3fvSUN_ovr_0 := GetFuncOrNil&<procedure(var rc: UInt32; var n: Vec3f; var v: Vec3f)>(z_ReplacementCodeuiNormal3fVertex3fvSUN_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ReplacementCodeuiNormal3fVertex3fvSUN(var rc: UInt32; var n: Vec3f; var v: Vec3f);
    begin
      z_ReplacementCodeuiNormal3fVertex3fvSUN_ovr_0(rc, n, v);
    end;
    public z_ReplacementCodeuiNormal3fVertex3fvSUN_ovr_1 := GetFuncOrNil&<procedure(var rc: UInt32; var n: single; var v: single)>(z_ReplacementCodeuiNormal3fVertex3fvSUN_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ReplacementCodeuiNormal3fVertex3fvSUN(var rc: UInt32; n: array of single; v: array of single);
    begin
      z_ReplacementCodeuiNormal3fVertex3fvSUN_ovr_1(rc, n[0], v[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ReplacementCodeuiNormal3fVertex3fvSUN(var rc: UInt32; var n: single; var v: single);
    begin
      z_ReplacementCodeuiNormal3fVertex3fvSUN_ovr_1(rc, n, v);
    end;
    public z_ReplacementCodeuiNormal3fVertex3fvSUN_ovr_3 := GetFuncOrNil&<procedure(rc: IntPtr; n: IntPtr; v: IntPtr)>(z_ReplacementCodeuiNormal3fVertex3fvSUN_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ReplacementCodeuiNormal3fVertex3fvSUN(rc: IntPtr; n: IntPtr; v: IntPtr);
    begin
      z_ReplacementCodeuiNormal3fVertex3fvSUN_ovr_3(rc, n, v);
    end;
    
    public z_ReplacementCodeuiColor4fNormal3fVertex3fSUN_adr := GetFuncAdr('glReplacementCodeuiColor4fNormal3fVertex3fSUN');
    public z_ReplacementCodeuiColor4fNormal3fVertex3fSUN_ovr_0 := GetFuncOrNil&<procedure(rc: UInt32; r: single; g: single; b: single; a: single; nx: single; ny: single; nz: single; x: single; y: single; z: single)>(z_ReplacementCodeuiColor4fNormal3fVertex3fSUN_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ReplacementCodeuiColor4fNormal3fVertex3fSUN(rc: UInt32; r: single; g: single; b: single; a: single; nx: single; ny: single; nz: single; x: single; y: single; z: single);
    begin
      z_ReplacementCodeuiColor4fNormal3fVertex3fSUN_ovr_0(rc, r, g, b, a, nx, ny, nz, x, y, z);
    end;
    
    public z_ReplacementCodeuiColor4fNormal3fVertex3fvSUN_adr := GetFuncAdr('glReplacementCodeuiColor4fNormal3fVertex3fvSUN');
    public z_ReplacementCodeuiColor4fNormal3fVertex3fvSUN_ovr_0 := GetFuncOrNil&<procedure(var rc: UInt32; var c: Vec4f; var n: Vec3f; var v: Vec3f)>(z_ReplacementCodeuiColor4fNormal3fVertex3fvSUN_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ReplacementCodeuiColor4fNormal3fVertex3fvSUN(var rc: UInt32; var c: Vec4f; var n: Vec3f; var v: Vec3f);
    begin
      z_ReplacementCodeuiColor4fNormal3fVertex3fvSUN_ovr_0(rc, c, n, v);
    end;
    public z_ReplacementCodeuiColor4fNormal3fVertex3fvSUN_ovr_1 := GetFuncOrNil&<procedure(var rc: UInt32; var c: single; var n: single; var v: single)>(z_ReplacementCodeuiColor4fNormal3fVertex3fvSUN_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ReplacementCodeuiColor4fNormal3fVertex3fvSUN(var rc: UInt32; c: array of single; n: array of single; v: array of single);
    begin
      z_ReplacementCodeuiColor4fNormal3fVertex3fvSUN_ovr_1(rc, c[0], n[0], v[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ReplacementCodeuiColor4fNormal3fVertex3fvSUN(var rc: UInt32; var c: single; var n: single; var v: single);
    begin
      z_ReplacementCodeuiColor4fNormal3fVertex3fvSUN_ovr_1(rc, c, n, v);
    end;
    public z_ReplacementCodeuiColor4fNormal3fVertex3fvSUN_ovr_3 := GetFuncOrNil&<procedure(rc: IntPtr; c: IntPtr; n: IntPtr; v: IntPtr)>(z_ReplacementCodeuiColor4fNormal3fVertex3fvSUN_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ReplacementCodeuiColor4fNormal3fVertex3fvSUN(rc: IntPtr; c: IntPtr; n: IntPtr; v: IntPtr);
    begin
      z_ReplacementCodeuiColor4fNormal3fVertex3fvSUN_ovr_3(rc, c, n, v);
    end;
    
    public z_ReplacementCodeuiTexCoord2fVertex3fSUN_adr := GetFuncAdr('glReplacementCodeuiTexCoord2fVertex3fSUN');
    public z_ReplacementCodeuiTexCoord2fVertex3fSUN_ovr_0 := GetFuncOrNil&<procedure(rc: UInt32; s: single; t: single; x: single; y: single; z: single)>(z_ReplacementCodeuiTexCoord2fVertex3fSUN_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ReplacementCodeuiTexCoord2fVertex3fSUN(rc: UInt32; s: single; t: single; x: single; y: single; z: single);
    begin
      z_ReplacementCodeuiTexCoord2fVertex3fSUN_ovr_0(rc, s, t, x, y, z);
    end;
    
    public z_ReplacementCodeuiTexCoord2fVertex3fvSUN_adr := GetFuncAdr('glReplacementCodeuiTexCoord2fVertex3fvSUN');
    public z_ReplacementCodeuiTexCoord2fVertex3fvSUN_ovr_0 := GetFuncOrNil&<procedure(var rc: UInt32; var tc: Vec2f; var v: Vec3f)>(z_ReplacementCodeuiTexCoord2fVertex3fvSUN_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ReplacementCodeuiTexCoord2fVertex3fvSUN(var rc: UInt32; var tc: Vec2f; var v: Vec3f);
    begin
      z_ReplacementCodeuiTexCoord2fVertex3fvSUN_ovr_0(rc, tc, v);
    end;
    public z_ReplacementCodeuiTexCoord2fVertex3fvSUN_ovr_1 := GetFuncOrNil&<procedure(var rc: UInt32; var tc: single; var v: single)>(z_ReplacementCodeuiTexCoord2fVertex3fvSUN_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ReplacementCodeuiTexCoord2fVertex3fvSUN(var rc: UInt32; tc: array of single; v: array of single);
    begin
      z_ReplacementCodeuiTexCoord2fVertex3fvSUN_ovr_1(rc, tc[0], v[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ReplacementCodeuiTexCoord2fVertex3fvSUN(var rc: UInt32; var tc: single; var v: single);
    begin
      z_ReplacementCodeuiTexCoord2fVertex3fvSUN_ovr_1(rc, tc, v);
    end;
    public z_ReplacementCodeuiTexCoord2fVertex3fvSUN_ovr_3 := GetFuncOrNil&<procedure(rc: IntPtr; tc: IntPtr; v: IntPtr)>(z_ReplacementCodeuiTexCoord2fVertex3fvSUN_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ReplacementCodeuiTexCoord2fVertex3fvSUN(rc: IntPtr; tc: IntPtr; v: IntPtr);
    begin
      z_ReplacementCodeuiTexCoord2fVertex3fvSUN_ovr_3(rc, tc, v);
    end;
    
    public z_ReplacementCodeuiTexCoord2fNormal3fVertex3fSUN_adr := GetFuncAdr('glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN');
    public z_ReplacementCodeuiTexCoord2fNormal3fVertex3fSUN_ovr_0 := GetFuncOrNil&<procedure(rc: UInt32; s: single; t: single; nx: single; ny: single; nz: single; x: single; y: single; z: single)>(z_ReplacementCodeuiTexCoord2fNormal3fVertex3fSUN_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ReplacementCodeuiTexCoord2fNormal3fVertex3fSUN(rc: UInt32; s: single; t: single; nx: single; ny: single; nz: single; x: single; y: single; z: single);
    begin
      z_ReplacementCodeuiTexCoord2fNormal3fVertex3fSUN_ovr_0(rc, s, t, nx, ny, nz, x, y, z);
    end;
    
    public z_ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN_adr := GetFuncAdr('glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN');
    public z_ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN_ovr_0 := GetFuncOrNil&<procedure(var rc: UInt32; var tc: Vec2f; var n: Vec3f; var v: Vec3f)>(z_ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(var rc: UInt32; var tc: Vec2f; var n: Vec3f; var v: Vec3f);
    begin
      z_ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN_ovr_0(rc, tc, n, v);
    end;
    public z_ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN_ovr_1 := GetFuncOrNil&<procedure(var rc: UInt32; var tc: single; var n: single; var v: single)>(z_ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(var rc: UInt32; tc: array of single; n: array of single; v: array of single);
    begin
      z_ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN_ovr_1(rc, tc[0], n[0], v[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(var rc: UInt32; var tc: single; var n: single; var v: single);
    begin
      z_ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN_ovr_1(rc, tc, n, v);
    end;
    public z_ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN_ovr_3 := GetFuncOrNil&<procedure(rc: IntPtr; tc: IntPtr; n: IntPtr; v: IntPtr)>(z_ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(rc: IntPtr; tc: IntPtr; n: IntPtr; v: IntPtr);
    begin
      z_ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN_ovr_3(rc, tc, n, v);
    end;
    
    public z_ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN_adr := GetFuncAdr('glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN');
    public z_ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN_ovr_0 := GetFuncOrNil&<procedure(rc: UInt32; s: single; t: single; r: single; g: single; b: single; a: single; nx: single; ny: single; nz: single; x: single; y: single; z: single)>(z_ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN(rc: UInt32; s: single; t: single; r: single; g: single; b: single; a: single; nx: single; ny: single; nz: single; x: single; y: single; z: single);
    begin
      z_ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN_ovr_0(rc, s, t, r, g, b, a, nx, ny, nz, x, y, z);
    end;
    
    public z_ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_adr := GetFuncAdr('glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN');
    public z_ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_ovr_0 := GetFuncOrNil&<procedure(var rc: UInt32; var tc: Vec2f; var c: Vec4f; var n: Vec3f; var v: Vec3f)>(z_ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(var rc: UInt32; var tc: Vec2f; var c: Vec4f; var n: Vec3f; var v: Vec3f);
    begin
      z_ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_ovr_0(rc, tc, c, n, v);
    end;
    public z_ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_ovr_1 := GetFuncOrNil&<procedure(var rc: UInt32; var tc: single; var c: single; var n: single; var v: single)>(z_ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(var rc: UInt32; tc: array of single; c: array of single; n: array of single; v: array of single);
    begin
      z_ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_ovr_1(rc, tc[0], c[0], n[0], v[0]);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(var rc: UInt32; var tc: single; var c: single; var n: single; var v: single);
    begin
      z_ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_ovr_1(rc, tc, c, n, v);
    end;
    public z_ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_ovr_3 := GetFuncOrNil&<procedure(rc: IntPtr; tc: IntPtr; c: IntPtr; n: IntPtr; v: IntPtr)>(z_ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(rc: IntPtr; tc: IntPtr; c: IntPtr; n: IntPtr; v: IntPtr);
    begin
      z_ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_ovr_3(rc, tc, c, n, v);
    end;
    
  end;
  
  wglStereoControl3DL = static class
    
    private static function _z_SetStereoEmitterState3DL_ovr0(hDC: GDI_DC; uState: UInt32): UInt32;
    external 'opengl32.dll' name 'wglSetStereoEmitterState3DL';
    public static z_SetStereoEmitterState3DL_ovr0 := _z_SetStereoEmitterState3DL_ovr0;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function SetStereoEmitterState3DL(hDC: GDI_DC; uState: UInt32): UInt32 := z_SetStereoEmitterState3DL_ovr0(hDC, uState);
    
  end;
  
  wglGpuAssociationAMD = static class
    
    private static function _z_GetGPUIDsAMD_ovr0(maxCount: UInt32; [MarshalAs(UnmanagedType.LPArray)] ids: array of UInt32): UInt32;
    external 'opengl32.dll' name 'wglGetGPUIDsAMD';
    public static z_GetGPUIDsAMD_ovr0 := _z_GetGPUIDsAMD_ovr0;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function GetGPUIDsAMD(maxCount: UInt32; ids: array of UInt32): UInt32 := z_GetGPUIDsAMD_ovr0(maxCount, ids);
    private static function _z_GetGPUIDsAMD_ovr1(maxCount: UInt32; var ids: UInt32): UInt32;
    external 'opengl32.dll' name 'wglGetGPUIDsAMD';
    public static z_GetGPUIDsAMD_ovr1 := _z_GetGPUIDsAMD_ovr1;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function GetGPUIDsAMD(maxCount: UInt32; var ids: UInt32): UInt32 := z_GetGPUIDsAMD_ovr1(maxCount, ids);
    private static function _z_GetGPUIDsAMD_ovr2(maxCount: UInt32; ids: IntPtr): UInt32;
    external 'opengl32.dll' name 'wglGetGPUIDsAMD';
    public static z_GetGPUIDsAMD_ovr2 := _z_GetGPUIDsAMD_ovr2;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function GetGPUIDsAMD(maxCount: UInt32; ids: IntPtr): UInt32 := z_GetGPUIDsAMD_ovr2(maxCount, ids);
    
    private static function _z_GetGPUInfoAMD_ovr0(id: UInt32; &property: Int32; dataType: DummyEnum; size: UInt32; data: IntPtr): Int32;
    external 'opengl32.dll' name 'wglGetGPUInfoAMD';
    public static z_GetGPUInfoAMD_ovr0 := _z_GetGPUInfoAMD_ovr0;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function GetGPUInfoAMD(id: UInt32; &property: Int32; dataType: DummyEnum; size: UInt32; data: IntPtr): Int32 := z_GetGPUInfoAMD_ovr0(id, &property, dataType, size, data);
    
    private static function _z_GetContextGPUIDAMD_ovr0(hglrc: GLContext): UInt32;
    external 'opengl32.dll' name 'wglGetContextGPUIDAMD';
    public static z_GetContextGPUIDAMD_ovr0 := _z_GetContextGPUIDAMD_ovr0;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function GetContextGPUIDAMD(hglrc: GLContext): UInt32 := z_GetContextGPUIDAMD_ovr0(hglrc);
    
    private static function _z_CreateAssociatedContextAMD_ovr0(id: UInt32): GLContext;
    external 'opengl32.dll' name 'wglCreateAssociatedContextAMD';
    public static z_CreateAssociatedContextAMD_ovr0 := _z_CreateAssociatedContextAMD_ovr0;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function CreateAssociatedContextAMD(id: UInt32): GLContext := z_CreateAssociatedContextAMD_ovr0(id);
    
    private static function _z_CreateAssociatedContextAttribsAMD_ovr0(id: UInt32; hShareContext: GLContext; [MarshalAs(UnmanagedType.LPArray)] attribList: array of Int32): GLContext;
    external 'opengl32.dll' name 'wglCreateAssociatedContextAttribsAMD';
    public static z_CreateAssociatedContextAttribsAMD_ovr0 := _z_CreateAssociatedContextAttribsAMD_ovr0;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function CreateAssociatedContextAttribsAMD(id: UInt32; hShareContext: GLContext; attribList: array of Int32): GLContext := z_CreateAssociatedContextAttribsAMD_ovr0(id, hShareContext, attribList);
    private static function _z_CreateAssociatedContextAttribsAMD_ovr1(id: UInt32; hShareContext: GLContext; var attribList: Int32): GLContext;
    external 'opengl32.dll' name 'wglCreateAssociatedContextAttribsAMD';
    public static z_CreateAssociatedContextAttribsAMD_ovr1 := _z_CreateAssociatedContextAttribsAMD_ovr1;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function CreateAssociatedContextAttribsAMD(id: UInt32; hShareContext: GLContext; var attribList: Int32): GLContext := z_CreateAssociatedContextAttribsAMD_ovr1(id, hShareContext, attribList);
    private static function _z_CreateAssociatedContextAttribsAMD_ovr2(id: UInt32; hShareContext: GLContext; attribList: IntPtr): GLContext;
    external 'opengl32.dll' name 'wglCreateAssociatedContextAttribsAMD';
    public static z_CreateAssociatedContextAttribsAMD_ovr2 := _z_CreateAssociatedContextAttribsAMD_ovr2;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function CreateAssociatedContextAttribsAMD(id: UInt32; hShareContext: GLContext; attribList: IntPtr): GLContext := z_CreateAssociatedContextAttribsAMD_ovr2(id, hShareContext, attribList);
    
    private static function _z_DeleteAssociatedContextAMD_ovr0(hglrc: GLContext): UInt32;
    external 'opengl32.dll' name 'wglDeleteAssociatedContextAMD';
    public static z_DeleteAssociatedContextAMD_ovr0 := _z_DeleteAssociatedContextAMD_ovr0;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function DeleteAssociatedContextAMD(hglrc: GLContext): UInt32 := z_DeleteAssociatedContextAMD_ovr0(hglrc);
    
    private static function _z_MakeAssociatedContextCurrentAMD_ovr0(hglrc: GLContext): UInt32;
    external 'opengl32.dll' name 'wglMakeAssociatedContextCurrentAMD';
    public static z_MakeAssociatedContextCurrentAMD_ovr0 := _z_MakeAssociatedContextCurrentAMD_ovr0;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function MakeAssociatedContextCurrentAMD(hglrc: GLContext): UInt32 := z_MakeAssociatedContextCurrentAMD_ovr0(hglrc);
    
    private static function _z_GetCurrentAssociatedContextAMD_ovr0: GLContext;
    external 'opengl32.dll' name 'wglGetCurrentAssociatedContextAMD';
    public static z_GetCurrentAssociatedContextAMD_ovr0: function: GLContext := _z_GetCurrentAssociatedContextAMD_ovr0;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function GetCurrentAssociatedContextAMD: GLContext := z_GetCurrentAssociatedContextAMD_ovr0;
    
    private static procedure _z_BlitContextFramebufferAMD_ovr0(dstCtx: GLContext; srcX0: Int32; srcY0: Int32; srcX1: Int32; srcY1: Int32; dstX0: Int32; dstY0: Int32; dstX1: Int32; dstY1: Int32; mask: DummyFlags; filter: DummyEnum);
    external 'opengl32.dll' name 'wglBlitContextFramebufferAMD';
    public static z_BlitContextFramebufferAMD_ovr0 := _z_BlitContextFramebufferAMD_ovr0;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static procedure BlitContextFramebufferAMD(dstCtx: GLContext; srcX0: Int32; srcY0: Int32; srcX1: Int32; srcY1: Int32; dstX0: Int32; dstY0: Int32; dstX1: Int32; dstY1: Int32; mask: DummyFlags; filter: DummyEnum) := z_BlitContextFramebufferAMD_ovr0(dstCtx, srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, mask, filter);
    
  end;
  
  wglBufferRegionARB = static class
    
    private static function _z_CreateBufferRegionARB_ovr0(hDC: GDI_DC; iLayerPlane: Int32; uType: UInt32): IntPtr;
    external 'opengl32.dll' name 'wglCreateBufferRegionARB';
    public static z_CreateBufferRegionARB_ovr0 := _z_CreateBufferRegionARB_ovr0;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function CreateBufferRegionARB(hDC: GDI_DC; iLayerPlane: Int32; uType: UInt32): IntPtr := z_CreateBufferRegionARB_ovr0(hDC, iLayerPlane, uType);
    
    private static procedure _z_DeleteBufferRegionARB_ovr0(hRegion: IntPtr);
    external 'opengl32.dll' name 'wglDeleteBufferRegionARB';
    public static z_DeleteBufferRegionARB_ovr0 := _z_DeleteBufferRegionARB_ovr0;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static procedure DeleteBufferRegionARB(hRegion: IntPtr) := z_DeleteBufferRegionARB_ovr0(hRegion);
    
    private static function _z_SaveBufferRegionARB_ovr0(hRegion: IntPtr; x: Int32; y: Int32; width: Int32; height: Int32): UInt32;
    external 'opengl32.dll' name 'wglSaveBufferRegionARB';
    public static z_SaveBufferRegionARB_ovr0 := _z_SaveBufferRegionARB_ovr0;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function SaveBufferRegionARB(hRegion: IntPtr; x: Int32; y: Int32; width: Int32; height: Int32): UInt32 := z_SaveBufferRegionARB_ovr0(hRegion, x, y, width, height);
    
    private static function _z_RestoreBufferRegionARB_ovr0(hRegion: IntPtr; x: Int32; y: Int32; width: Int32; height: Int32; xSrc: Int32; ySrc: Int32): UInt32;
    external 'opengl32.dll' name 'wglRestoreBufferRegionARB';
    public static z_RestoreBufferRegionARB_ovr0 := _z_RestoreBufferRegionARB_ovr0;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function RestoreBufferRegionARB(hRegion: IntPtr; x: Int32; y: Int32; width: Int32; height: Int32; xSrc: Int32; ySrc: Int32): UInt32 := z_RestoreBufferRegionARB_ovr0(hRegion, x, y, width, height, xSrc, ySrc);
    
  end;
  
  wglCreateContextARB = static class
    
    private static function _z_CreateContextAttribsARB_ovr0(hDC: GDI_DC; hShareContext: GLContext; [MarshalAs(UnmanagedType.LPArray)] attribList: array of Int32): GLContext;
    external 'opengl32.dll' name 'wglCreateContextAttribsARB';
    public static z_CreateContextAttribsARB_ovr0 := _z_CreateContextAttribsARB_ovr0;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function CreateContextAttribsARB(hDC: GDI_DC; hShareContext: GLContext; attribList: array of Int32): GLContext := z_CreateContextAttribsARB_ovr0(hDC, hShareContext, attribList);
    private static function _z_CreateContextAttribsARB_ovr1(hDC: GDI_DC; hShareContext: GLContext; var attribList: Int32): GLContext;
    external 'opengl32.dll' name 'wglCreateContextAttribsARB';
    public static z_CreateContextAttribsARB_ovr1 := _z_CreateContextAttribsARB_ovr1;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function CreateContextAttribsARB(hDC: GDI_DC; hShareContext: GLContext; var attribList: Int32): GLContext := z_CreateContextAttribsARB_ovr1(hDC, hShareContext, attribList);
    private static function _z_CreateContextAttribsARB_ovr2(hDC: GDI_DC; hShareContext: GLContext; attribList: IntPtr): GLContext;
    external 'opengl32.dll' name 'wglCreateContextAttribsARB';
    public static z_CreateContextAttribsARB_ovr2 := _z_CreateContextAttribsARB_ovr2;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function CreateContextAttribsARB(hDC: GDI_DC; hShareContext: GLContext; attribList: IntPtr): GLContext := z_CreateContextAttribsARB_ovr2(hDC, hShareContext, attribList);
    
  end;
  
  wglExtensionsStringARB = static class
    
    private [Result: MarshalAs(UnmanagedType.LPStr)] static function _z_GetExtensionsStringARB_ovr0(hdc: GDI_DC): string;
    external 'opengl32.dll' name 'wglGetExtensionsStringARB';
    public static z_GetExtensionsStringARB_ovr0 := _z_GetExtensionsStringARB_ovr0;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function GetExtensionsStringARB(hdc: GDI_DC): string := z_GetExtensionsStringARB_ovr0(hdc);
    
  end;
  
  wglMakeCurrentReadARB = static class
    
    private static function _z_MakeContextCurrentARB_ovr0(hDrawDC: GDI_DC; hReadDC: GDI_DC; hglrc: GLContext): UInt32;
    external 'opengl32.dll' name 'wglMakeContextCurrentARB';
    public static z_MakeContextCurrentARB_ovr0 := _z_MakeContextCurrentARB_ovr0;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function MakeContextCurrentARB(hDrawDC: GDI_DC; hReadDC: GDI_DC; hglrc: GLContext): UInt32 := z_MakeContextCurrentARB_ovr0(hDrawDC, hReadDC, hglrc);
    
    private static function _z_GetCurrentReadDCARB_ovr0: GDI_DC;
    external 'opengl32.dll' name 'wglGetCurrentReadDCARB';
    public static z_GetCurrentReadDCARB_ovr0: function: GDI_DC := _z_GetCurrentReadDCARB_ovr0;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function GetCurrentReadDCARB: GDI_DC := z_GetCurrentReadDCARB_ovr0;
    
  end;
  
  wglPbufferARB = static class
    
    private static function _z_CreatePbufferARB_ovr0(hDC: GDI_DC; iPixelFormat: Int32; iWidth: Int32; iHeight: Int32; [MarshalAs(UnmanagedType.LPArray)] piAttribList: array of Int32): HPBUFFER;
    external 'opengl32.dll' name 'wglCreatePbufferARB';
    public static z_CreatePbufferARB_ovr0 := _z_CreatePbufferARB_ovr0;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function CreatePbufferARB(hDC: GDI_DC; iPixelFormat: Int32; iWidth: Int32; iHeight: Int32; piAttribList: array of Int32): HPBUFFER := z_CreatePbufferARB_ovr0(hDC, iPixelFormat, iWidth, iHeight, piAttribList);
    private static function _z_CreatePbufferARB_ovr1(hDC: GDI_DC; iPixelFormat: Int32; iWidth: Int32; iHeight: Int32; var piAttribList: Int32): HPBUFFER;
    external 'opengl32.dll' name 'wglCreatePbufferARB';
    public static z_CreatePbufferARB_ovr1 := _z_CreatePbufferARB_ovr1;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function CreatePbufferARB(hDC: GDI_DC; iPixelFormat: Int32; iWidth: Int32; iHeight: Int32; var piAttribList: Int32): HPBUFFER := z_CreatePbufferARB_ovr1(hDC, iPixelFormat, iWidth, iHeight, piAttribList);
    private static function _z_CreatePbufferARB_ovr2(hDC: GDI_DC; iPixelFormat: Int32; iWidth: Int32; iHeight: Int32; piAttribList: IntPtr): HPBUFFER;
    external 'opengl32.dll' name 'wglCreatePbufferARB';
    public static z_CreatePbufferARB_ovr2 := _z_CreatePbufferARB_ovr2;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function CreatePbufferARB(hDC: GDI_DC; iPixelFormat: Int32; iWidth: Int32; iHeight: Int32; piAttribList: IntPtr): HPBUFFER := z_CreatePbufferARB_ovr2(hDC, iPixelFormat, iWidth, iHeight, piAttribList);
    
    private static function _z_GetPbufferDCARB_ovr0(_hPbuffer: HPBUFFER): GDI_DC;
    external 'opengl32.dll' name 'wglGetPbufferDCARB';
    public static z_GetPbufferDCARB_ovr0 := _z_GetPbufferDCARB_ovr0;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function GetPbufferDCARB(_hPbuffer: HPBUFFER): GDI_DC := z_GetPbufferDCARB_ovr0(_hPbuffer);
    
    private static function _z_ReleasePbufferDCARB_ovr0(_hPbuffer: HPBUFFER; hDC: GDI_DC): Int32;
    external 'opengl32.dll' name 'wglReleasePbufferDCARB';
    public static z_ReleasePbufferDCARB_ovr0 := _z_ReleasePbufferDCARB_ovr0;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function ReleasePbufferDCARB(_hPbuffer: HPBUFFER; hDC: GDI_DC): Int32 := z_ReleasePbufferDCARB_ovr0(_hPbuffer, hDC);
    
    private static function _z_DestroyPbufferARB_ovr0(_hPbuffer: HPBUFFER): UInt32;
    external 'opengl32.dll' name 'wglDestroyPbufferARB';
    public static z_DestroyPbufferARB_ovr0 := _z_DestroyPbufferARB_ovr0;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function DestroyPbufferARB(_hPbuffer: HPBUFFER): UInt32 := z_DestroyPbufferARB_ovr0(_hPbuffer);
    
    private static function _z_QueryPbufferARB_ovr0(_hPbuffer: HPBUFFER; iAttribute: Int32; [MarshalAs(UnmanagedType.LPArray)] piValue: array of Int32): UInt32;
    external 'opengl32.dll' name 'wglQueryPbufferARB';
    public static z_QueryPbufferARB_ovr0 := _z_QueryPbufferARB_ovr0;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function QueryPbufferARB(_hPbuffer: HPBUFFER; iAttribute: Int32; piValue: array of Int32): UInt32 := z_QueryPbufferARB_ovr0(_hPbuffer, iAttribute, piValue);
    private static function _z_QueryPbufferARB_ovr1(_hPbuffer: HPBUFFER; iAttribute: Int32; var piValue: Int32): UInt32;
    external 'opengl32.dll' name 'wglQueryPbufferARB';
    public static z_QueryPbufferARB_ovr1 := _z_QueryPbufferARB_ovr1;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function QueryPbufferARB(_hPbuffer: HPBUFFER; iAttribute: Int32; var piValue: Int32): UInt32 := z_QueryPbufferARB_ovr1(_hPbuffer, iAttribute, piValue);
    private static function _z_QueryPbufferARB_ovr2(_hPbuffer: HPBUFFER; iAttribute: Int32; piValue: IntPtr): UInt32;
    external 'opengl32.dll' name 'wglQueryPbufferARB';
    public static z_QueryPbufferARB_ovr2 := _z_QueryPbufferARB_ovr2;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function QueryPbufferARB(_hPbuffer: HPBUFFER; iAttribute: Int32; piValue: IntPtr): UInt32 := z_QueryPbufferARB_ovr2(_hPbuffer, iAttribute, piValue);
    
  end;
  
  wglPixelFormatARB = static class
    
    private static function _z_GetPixelFormatAttribivARB_ovr0(hdc: GDI_DC; iPixelFormat: Int32; iLayerPlane: Int32; nAttributes: UInt32; [MarshalAs(UnmanagedType.LPArray)] piAttributes: array of Int32; [MarshalAs(UnmanagedType.LPArray)] piValues: array of Int32): UInt32;
    external 'opengl32.dll' name 'wglGetPixelFormatAttribivARB';
    public static z_GetPixelFormatAttribivARB_ovr0 := _z_GetPixelFormatAttribivARB_ovr0;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function GetPixelFormatAttribivARB(hdc: GDI_DC; iPixelFormat: Int32; iLayerPlane: Int32; nAttributes: UInt32; piAttributes: array of Int32; piValues: array of Int32): UInt32 := z_GetPixelFormatAttribivARB_ovr0(hdc, iPixelFormat, iLayerPlane, nAttributes, piAttributes, piValues);
    private static function _z_GetPixelFormatAttribivARB_ovr1(hdc: GDI_DC; iPixelFormat: Int32; iLayerPlane: Int32; nAttributes: UInt32; [MarshalAs(UnmanagedType.LPArray)] piAttributes: array of Int32; var piValues: Int32): UInt32;
    external 'opengl32.dll' name 'wglGetPixelFormatAttribivARB';
    public static z_GetPixelFormatAttribivARB_ovr1 := _z_GetPixelFormatAttribivARB_ovr1;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function GetPixelFormatAttribivARB(hdc: GDI_DC; iPixelFormat: Int32; iLayerPlane: Int32; nAttributes: UInt32; piAttributes: array of Int32; var piValues: Int32): UInt32 := z_GetPixelFormatAttribivARB_ovr1(hdc, iPixelFormat, iLayerPlane, nAttributes, piAttributes, piValues);
    private static function _z_GetPixelFormatAttribivARB_ovr2(hdc: GDI_DC; iPixelFormat: Int32; iLayerPlane: Int32; nAttributes: UInt32; [MarshalAs(UnmanagedType.LPArray)] piAttributes: array of Int32; piValues: IntPtr): UInt32;
    external 'opengl32.dll' name 'wglGetPixelFormatAttribivARB';
    public static z_GetPixelFormatAttribivARB_ovr2 := _z_GetPixelFormatAttribivARB_ovr2;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function GetPixelFormatAttribivARB(hdc: GDI_DC; iPixelFormat: Int32; iLayerPlane: Int32; nAttributes: UInt32; piAttributes: array of Int32; piValues: IntPtr): UInt32 := z_GetPixelFormatAttribivARB_ovr2(hdc, iPixelFormat, iLayerPlane, nAttributes, piAttributes, piValues);
    private static function _z_GetPixelFormatAttribivARB_ovr3(hdc: GDI_DC; iPixelFormat: Int32; iLayerPlane: Int32; nAttributes: UInt32; var piAttributes: Int32; [MarshalAs(UnmanagedType.LPArray)] piValues: array of Int32): UInt32;
    external 'opengl32.dll' name 'wglGetPixelFormatAttribivARB';
    public static z_GetPixelFormatAttribivARB_ovr3 := _z_GetPixelFormatAttribivARB_ovr3;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function GetPixelFormatAttribivARB(hdc: GDI_DC; iPixelFormat: Int32; iLayerPlane: Int32; nAttributes: UInt32; var piAttributes: Int32; piValues: array of Int32): UInt32 := z_GetPixelFormatAttribivARB_ovr3(hdc, iPixelFormat, iLayerPlane, nAttributes, piAttributes, piValues);
    private static function _z_GetPixelFormatAttribivARB_ovr4(hdc: GDI_DC; iPixelFormat: Int32; iLayerPlane: Int32; nAttributes: UInt32; var piAttributes: Int32; var piValues: Int32): UInt32;
    external 'opengl32.dll' name 'wglGetPixelFormatAttribivARB';
    public static z_GetPixelFormatAttribivARB_ovr4 := _z_GetPixelFormatAttribivARB_ovr4;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function GetPixelFormatAttribivARB(hdc: GDI_DC; iPixelFormat: Int32; iLayerPlane: Int32; nAttributes: UInt32; var piAttributes: Int32; var piValues: Int32): UInt32 := z_GetPixelFormatAttribivARB_ovr4(hdc, iPixelFormat, iLayerPlane, nAttributes, piAttributes, piValues);
    private static function _z_GetPixelFormatAttribivARB_ovr5(hdc: GDI_DC; iPixelFormat: Int32; iLayerPlane: Int32; nAttributes: UInt32; var piAttributes: Int32; piValues: IntPtr): UInt32;
    external 'opengl32.dll' name 'wglGetPixelFormatAttribivARB';
    public static z_GetPixelFormatAttribivARB_ovr5 := _z_GetPixelFormatAttribivARB_ovr5;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function GetPixelFormatAttribivARB(hdc: GDI_DC; iPixelFormat: Int32; iLayerPlane: Int32; nAttributes: UInt32; var piAttributes: Int32; piValues: IntPtr): UInt32 := z_GetPixelFormatAttribivARB_ovr5(hdc, iPixelFormat, iLayerPlane, nAttributes, piAttributes, piValues);
    private static function _z_GetPixelFormatAttribivARB_ovr6(hdc: GDI_DC; iPixelFormat: Int32; iLayerPlane: Int32; nAttributes: UInt32; piAttributes: IntPtr; [MarshalAs(UnmanagedType.LPArray)] piValues: array of Int32): UInt32;
    external 'opengl32.dll' name 'wglGetPixelFormatAttribivARB';
    public static z_GetPixelFormatAttribivARB_ovr6 := _z_GetPixelFormatAttribivARB_ovr6;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function GetPixelFormatAttribivARB(hdc: GDI_DC; iPixelFormat: Int32; iLayerPlane: Int32; nAttributes: UInt32; piAttributes: IntPtr; piValues: array of Int32): UInt32 := z_GetPixelFormatAttribivARB_ovr6(hdc, iPixelFormat, iLayerPlane, nAttributes, piAttributes, piValues);
    private static function _z_GetPixelFormatAttribivARB_ovr7(hdc: GDI_DC; iPixelFormat: Int32; iLayerPlane: Int32; nAttributes: UInt32; piAttributes: IntPtr; var piValues: Int32): UInt32;
    external 'opengl32.dll' name 'wglGetPixelFormatAttribivARB';
    public static z_GetPixelFormatAttribivARB_ovr7 := _z_GetPixelFormatAttribivARB_ovr7;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function GetPixelFormatAttribivARB(hdc: GDI_DC; iPixelFormat: Int32; iLayerPlane: Int32; nAttributes: UInt32; piAttributes: IntPtr; var piValues: Int32): UInt32 := z_GetPixelFormatAttribivARB_ovr7(hdc, iPixelFormat, iLayerPlane, nAttributes, piAttributes, piValues);
    private static function _z_GetPixelFormatAttribivARB_ovr8(hdc: GDI_DC; iPixelFormat: Int32; iLayerPlane: Int32; nAttributes: UInt32; piAttributes: IntPtr; piValues: IntPtr): UInt32;
    external 'opengl32.dll' name 'wglGetPixelFormatAttribivARB';
    public static z_GetPixelFormatAttribivARB_ovr8 := _z_GetPixelFormatAttribivARB_ovr8;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function GetPixelFormatAttribivARB(hdc: GDI_DC; iPixelFormat: Int32; iLayerPlane: Int32; nAttributes: UInt32; piAttributes: IntPtr; piValues: IntPtr): UInt32 := z_GetPixelFormatAttribivARB_ovr8(hdc, iPixelFormat, iLayerPlane, nAttributes, piAttributes, piValues);
    
    private static function _z_GetPixelFormatAttribfvARB_ovr0(hdc: GDI_DC; iPixelFormat: Int32; iLayerPlane: Int32; nAttributes: UInt32; [MarshalAs(UnmanagedType.LPArray)] piAttributes: array of Int32; [MarshalAs(UnmanagedType.LPArray)] pfValues: array of single): UInt32;
    external 'opengl32.dll' name 'wglGetPixelFormatAttribfvARB';
    public static z_GetPixelFormatAttribfvARB_ovr0 := _z_GetPixelFormatAttribfvARB_ovr0;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function GetPixelFormatAttribfvARB(hdc: GDI_DC; iPixelFormat: Int32; iLayerPlane: Int32; nAttributes: UInt32; piAttributes: array of Int32; pfValues: array of single): UInt32 := z_GetPixelFormatAttribfvARB_ovr0(hdc, iPixelFormat, iLayerPlane, nAttributes, piAttributes, pfValues);
    private static function _z_GetPixelFormatAttribfvARB_ovr1(hdc: GDI_DC; iPixelFormat: Int32; iLayerPlane: Int32; nAttributes: UInt32; [MarshalAs(UnmanagedType.LPArray)] piAttributes: array of Int32; var pfValues: single): UInt32;
    external 'opengl32.dll' name 'wglGetPixelFormatAttribfvARB';
    public static z_GetPixelFormatAttribfvARB_ovr1 := _z_GetPixelFormatAttribfvARB_ovr1;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function GetPixelFormatAttribfvARB(hdc: GDI_DC; iPixelFormat: Int32; iLayerPlane: Int32; nAttributes: UInt32; piAttributes: array of Int32; var pfValues: single): UInt32 := z_GetPixelFormatAttribfvARB_ovr1(hdc, iPixelFormat, iLayerPlane, nAttributes, piAttributes, pfValues);
    private static function _z_GetPixelFormatAttribfvARB_ovr2(hdc: GDI_DC; iPixelFormat: Int32; iLayerPlane: Int32; nAttributes: UInt32; [MarshalAs(UnmanagedType.LPArray)] piAttributes: array of Int32; pfValues: IntPtr): UInt32;
    external 'opengl32.dll' name 'wglGetPixelFormatAttribfvARB';
    public static z_GetPixelFormatAttribfvARB_ovr2 := _z_GetPixelFormatAttribfvARB_ovr2;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function GetPixelFormatAttribfvARB(hdc: GDI_DC; iPixelFormat: Int32; iLayerPlane: Int32; nAttributes: UInt32; piAttributes: array of Int32; pfValues: IntPtr): UInt32 := z_GetPixelFormatAttribfvARB_ovr2(hdc, iPixelFormat, iLayerPlane, nAttributes, piAttributes, pfValues);
    private static function _z_GetPixelFormatAttribfvARB_ovr3(hdc: GDI_DC; iPixelFormat: Int32; iLayerPlane: Int32; nAttributes: UInt32; var piAttributes: Int32; [MarshalAs(UnmanagedType.LPArray)] pfValues: array of single): UInt32;
    external 'opengl32.dll' name 'wglGetPixelFormatAttribfvARB';
    public static z_GetPixelFormatAttribfvARB_ovr3 := _z_GetPixelFormatAttribfvARB_ovr3;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function GetPixelFormatAttribfvARB(hdc: GDI_DC; iPixelFormat: Int32; iLayerPlane: Int32; nAttributes: UInt32; var piAttributes: Int32; pfValues: array of single): UInt32 := z_GetPixelFormatAttribfvARB_ovr3(hdc, iPixelFormat, iLayerPlane, nAttributes, piAttributes, pfValues);
    private static function _z_GetPixelFormatAttribfvARB_ovr4(hdc: GDI_DC; iPixelFormat: Int32; iLayerPlane: Int32; nAttributes: UInt32; var piAttributes: Int32; var pfValues: single): UInt32;
    external 'opengl32.dll' name 'wglGetPixelFormatAttribfvARB';
    public static z_GetPixelFormatAttribfvARB_ovr4 := _z_GetPixelFormatAttribfvARB_ovr4;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function GetPixelFormatAttribfvARB(hdc: GDI_DC; iPixelFormat: Int32; iLayerPlane: Int32; nAttributes: UInt32; var piAttributes: Int32; var pfValues: single): UInt32 := z_GetPixelFormatAttribfvARB_ovr4(hdc, iPixelFormat, iLayerPlane, nAttributes, piAttributes, pfValues);
    private static function _z_GetPixelFormatAttribfvARB_ovr5(hdc: GDI_DC; iPixelFormat: Int32; iLayerPlane: Int32; nAttributes: UInt32; var piAttributes: Int32; pfValues: IntPtr): UInt32;
    external 'opengl32.dll' name 'wglGetPixelFormatAttribfvARB';
    public static z_GetPixelFormatAttribfvARB_ovr5 := _z_GetPixelFormatAttribfvARB_ovr5;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function GetPixelFormatAttribfvARB(hdc: GDI_DC; iPixelFormat: Int32; iLayerPlane: Int32; nAttributes: UInt32; var piAttributes: Int32; pfValues: IntPtr): UInt32 := z_GetPixelFormatAttribfvARB_ovr5(hdc, iPixelFormat, iLayerPlane, nAttributes, piAttributes, pfValues);
    private static function _z_GetPixelFormatAttribfvARB_ovr6(hdc: GDI_DC; iPixelFormat: Int32; iLayerPlane: Int32; nAttributes: UInt32; piAttributes: IntPtr; [MarshalAs(UnmanagedType.LPArray)] pfValues: array of single): UInt32;
    external 'opengl32.dll' name 'wglGetPixelFormatAttribfvARB';
    public static z_GetPixelFormatAttribfvARB_ovr6 := _z_GetPixelFormatAttribfvARB_ovr6;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function GetPixelFormatAttribfvARB(hdc: GDI_DC; iPixelFormat: Int32; iLayerPlane: Int32; nAttributes: UInt32; piAttributes: IntPtr; pfValues: array of single): UInt32 := z_GetPixelFormatAttribfvARB_ovr6(hdc, iPixelFormat, iLayerPlane, nAttributes, piAttributes, pfValues);
    private static function _z_GetPixelFormatAttribfvARB_ovr7(hdc: GDI_DC; iPixelFormat: Int32; iLayerPlane: Int32; nAttributes: UInt32; piAttributes: IntPtr; var pfValues: single): UInt32;
    external 'opengl32.dll' name 'wglGetPixelFormatAttribfvARB';
    public static z_GetPixelFormatAttribfvARB_ovr7 := _z_GetPixelFormatAttribfvARB_ovr7;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function GetPixelFormatAttribfvARB(hdc: GDI_DC; iPixelFormat: Int32; iLayerPlane: Int32; nAttributes: UInt32; piAttributes: IntPtr; var pfValues: single): UInt32 := z_GetPixelFormatAttribfvARB_ovr7(hdc, iPixelFormat, iLayerPlane, nAttributes, piAttributes, pfValues);
    private static function _z_GetPixelFormatAttribfvARB_ovr8(hdc: GDI_DC; iPixelFormat: Int32; iLayerPlane: Int32; nAttributes: UInt32; piAttributes: IntPtr; pfValues: IntPtr): UInt32;
    external 'opengl32.dll' name 'wglGetPixelFormatAttribfvARB';
    public static z_GetPixelFormatAttribfvARB_ovr8 := _z_GetPixelFormatAttribfvARB_ovr8;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function GetPixelFormatAttribfvARB(hdc: GDI_DC; iPixelFormat: Int32; iLayerPlane: Int32; nAttributes: UInt32; piAttributes: IntPtr; pfValues: IntPtr): UInt32 := z_GetPixelFormatAttribfvARB_ovr8(hdc, iPixelFormat, iLayerPlane, nAttributes, piAttributes, pfValues);
    
    private static function _z_ChoosePixelFormatARB_ovr0(hdc: GDI_DC; [MarshalAs(UnmanagedType.LPArray)] piAttribIList: array of Int32; [MarshalAs(UnmanagedType.LPArray)] pfAttribFList: array of single; nMaxFormats: UInt32; [MarshalAs(UnmanagedType.LPArray)] piFormats: array of Int32; [MarshalAs(UnmanagedType.LPArray)] nNumFormats: array of UInt32): UInt32;
    external 'opengl32.dll' name 'wglChoosePixelFormatARB';
    public static z_ChoosePixelFormatARB_ovr0 := _z_ChoosePixelFormatARB_ovr0;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function ChoosePixelFormatARB(hdc: GDI_DC; piAttribIList: array of Int32; pfAttribFList: array of single; nMaxFormats: UInt32; piFormats: array of Int32; nNumFormats: array of UInt32): UInt32 := z_ChoosePixelFormatARB_ovr0(hdc, piAttribIList, pfAttribFList, nMaxFormats, piFormats, nNumFormats);
    private static function _z_ChoosePixelFormatARB_ovr1(hdc: GDI_DC; [MarshalAs(UnmanagedType.LPArray)] piAttribIList: array of Int32; [MarshalAs(UnmanagedType.LPArray)] pfAttribFList: array of single; nMaxFormats: UInt32; [MarshalAs(UnmanagedType.LPArray)] piFormats: array of Int32; var nNumFormats: UInt32): UInt32;
    external 'opengl32.dll' name 'wglChoosePixelFormatARB';
    public static z_ChoosePixelFormatARB_ovr1 := _z_ChoosePixelFormatARB_ovr1;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function ChoosePixelFormatARB(hdc: GDI_DC; piAttribIList: array of Int32; pfAttribFList: array of single; nMaxFormats: UInt32; piFormats: array of Int32; var nNumFormats: UInt32): UInt32 := z_ChoosePixelFormatARB_ovr1(hdc, piAttribIList, pfAttribFList, nMaxFormats, piFormats, nNumFormats);
    private static function _z_ChoosePixelFormatARB_ovr2(hdc: GDI_DC; [MarshalAs(UnmanagedType.LPArray)] piAttribIList: array of Int32; [MarshalAs(UnmanagedType.LPArray)] pfAttribFList: array of single; nMaxFormats: UInt32; [MarshalAs(UnmanagedType.LPArray)] piFormats: array of Int32; nNumFormats: IntPtr): UInt32;
    external 'opengl32.dll' name 'wglChoosePixelFormatARB';
    public static z_ChoosePixelFormatARB_ovr2 := _z_ChoosePixelFormatARB_ovr2;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function ChoosePixelFormatARB(hdc: GDI_DC; piAttribIList: array of Int32; pfAttribFList: array of single; nMaxFormats: UInt32; piFormats: array of Int32; nNumFormats: IntPtr): UInt32 := z_ChoosePixelFormatARB_ovr2(hdc, piAttribIList, pfAttribFList, nMaxFormats, piFormats, nNumFormats);
    private static function _z_ChoosePixelFormatARB_ovr3(hdc: GDI_DC; [MarshalAs(UnmanagedType.LPArray)] piAttribIList: array of Int32; [MarshalAs(UnmanagedType.LPArray)] pfAttribFList: array of single; nMaxFormats: UInt32; var piFormats: Int32; [MarshalAs(UnmanagedType.LPArray)] nNumFormats: array of UInt32): UInt32;
    external 'opengl32.dll' name 'wglChoosePixelFormatARB';
    public static z_ChoosePixelFormatARB_ovr3 := _z_ChoosePixelFormatARB_ovr3;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function ChoosePixelFormatARB(hdc: GDI_DC; piAttribIList: array of Int32; pfAttribFList: array of single; nMaxFormats: UInt32; var piFormats: Int32; nNumFormats: array of UInt32): UInt32 := z_ChoosePixelFormatARB_ovr3(hdc, piAttribIList, pfAttribFList, nMaxFormats, piFormats, nNumFormats);
    private static function _z_ChoosePixelFormatARB_ovr4(hdc: GDI_DC; [MarshalAs(UnmanagedType.LPArray)] piAttribIList: array of Int32; [MarshalAs(UnmanagedType.LPArray)] pfAttribFList: array of single; nMaxFormats: UInt32; var piFormats: Int32; var nNumFormats: UInt32): UInt32;
    external 'opengl32.dll' name 'wglChoosePixelFormatARB';
    public static z_ChoosePixelFormatARB_ovr4 := _z_ChoosePixelFormatARB_ovr4;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function ChoosePixelFormatARB(hdc: GDI_DC; piAttribIList: array of Int32; pfAttribFList: array of single; nMaxFormats: UInt32; var piFormats: Int32; var nNumFormats: UInt32): UInt32 := z_ChoosePixelFormatARB_ovr4(hdc, piAttribIList, pfAttribFList, nMaxFormats, piFormats, nNumFormats);
    private static function _z_ChoosePixelFormatARB_ovr5(hdc: GDI_DC; [MarshalAs(UnmanagedType.LPArray)] piAttribIList: array of Int32; [MarshalAs(UnmanagedType.LPArray)] pfAttribFList: array of single; nMaxFormats: UInt32; var piFormats: Int32; nNumFormats: IntPtr): UInt32;
    external 'opengl32.dll' name 'wglChoosePixelFormatARB';
    public static z_ChoosePixelFormatARB_ovr5 := _z_ChoosePixelFormatARB_ovr5;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function ChoosePixelFormatARB(hdc: GDI_DC; piAttribIList: array of Int32; pfAttribFList: array of single; nMaxFormats: UInt32; var piFormats: Int32; nNumFormats: IntPtr): UInt32 := z_ChoosePixelFormatARB_ovr5(hdc, piAttribIList, pfAttribFList, nMaxFormats, piFormats, nNumFormats);
    private static function _z_ChoosePixelFormatARB_ovr6(hdc: GDI_DC; [MarshalAs(UnmanagedType.LPArray)] piAttribIList: array of Int32; [MarshalAs(UnmanagedType.LPArray)] pfAttribFList: array of single; nMaxFormats: UInt32; piFormats: IntPtr; [MarshalAs(UnmanagedType.LPArray)] nNumFormats: array of UInt32): UInt32;
    external 'opengl32.dll' name 'wglChoosePixelFormatARB';
    public static z_ChoosePixelFormatARB_ovr6 := _z_ChoosePixelFormatARB_ovr6;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function ChoosePixelFormatARB(hdc: GDI_DC; piAttribIList: array of Int32; pfAttribFList: array of single; nMaxFormats: UInt32; piFormats: IntPtr; nNumFormats: array of UInt32): UInt32 := z_ChoosePixelFormatARB_ovr6(hdc, piAttribIList, pfAttribFList, nMaxFormats, piFormats, nNumFormats);
    private static function _z_ChoosePixelFormatARB_ovr7(hdc: GDI_DC; [MarshalAs(UnmanagedType.LPArray)] piAttribIList: array of Int32; [MarshalAs(UnmanagedType.LPArray)] pfAttribFList: array of single; nMaxFormats: UInt32; piFormats: IntPtr; var nNumFormats: UInt32): UInt32;
    external 'opengl32.dll' name 'wglChoosePixelFormatARB';
    public static z_ChoosePixelFormatARB_ovr7 := _z_ChoosePixelFormatARB_ovr7;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function ChoosePixelFormatARB(hdc: GDI_DC; piAttribIList: array of Int32; pfAttribFList: array of single; nMaxFormats: UInt32; piFormats: IntPtr; var nNumFormats: UInt32): UInt32 := z_ChoosePixelFormatARB_ovr7(hdc, piAttribIList, pfAttribFList, nMaxFormats, piFormats, nNumFormats);
    private static function _z_ChoosePixelFormatARB_ovr8(hdc: GDI_DC; [MarshalAs(UnmanagedType.LPArray)] piAttribIList: array of Int32; [MarshalAs(UnmanagedType.LPArray)] pfAttribFList: array of single; nMaxFormats: UInt32; piFormats: IntPtr; nNumFormats: IntPtr): UInt32;
    external 'opengl32.dll' name 'wglChoosePixelFormatARB';
    public static z_ChoosePixelFormatARB_ovr8 := _z_ChoosePixelFormatARB_ovr8;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function ChoosePixelFormatARB(hdc: GDI_DC; piAttribIList: array of Int32; pfAttribFList: array of single; nMaxFormats: UInt32; piFormats: IntPtr; nNumFormats: IntPtr): UInt32 := z_ChoosePixelFormatARB_ovr8(hdc, piAttribIList, pfAttribFList, nMaxFormats, piFormats, nNumFormats);
    private static function _z_ChoosePixelFormatARB_ovr9(hdc: GDI_DC; [MarshalAs(UnmanagedType.LPArray)] piAttribIList: array of Int32; var pfAttribFList: single; nMaxFormats: UInt32; [MarshalAs(UnmanagedType.LPArray)] piFormats: array of Int32; [MarshalAs(UnmanagedType.LPArray)] nNumFormats: array of UInt32): UInt32;
    external 'opengl32.dll' name 'wglChoosePixelFormatARB';
    public static z_ChoosePixelFormatARB_ovr9 := _z_ChoosePixelFormatARB_ovr9;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function ChoosePixelFormatARB(hdc: GDI_DC; piAttribIList: array of Int32; var pfAttribFList: single; nMaxFormats: UInt32; piFormats: array of Int32; nNumFormats: array of UInt32): UInt32 := z_ChoosePixelFormatARB_ovr9(hdc, piAttribIList, pfAttribFList, nMaxFormats, piFormats, nNumFormats);
    private static function _z_ChoosePixelFormatARB_ovr10(hdc: GDI_DC; [MarshalAs(UnmanagedType.LPArray)] piAttribIList: array of Int32; var pfAttribFList: single; nMaxFormats: UInt32; [MarshalAs(UnmanagedType.LPArray)] piFormats: array of Int32; var nNumFormats: UInt32): UInt32;
    external 'opengl32.dll' name 'wglChoosePixelFormatARB';
    public static z_ChoosePixelFormatARB_ovr10 := _z_ChoosePixelFormatARB_ovr10;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function ChoosePixelFormatARB(hdc: GDI_DC; piAttribIList: array of Int32; var pfAttribFList: single; nMaxFormats: UInt32; piFormats: array of Int32; var nNumFormats: UInt32): UInt32 := z_ChoosePixelFormatARB_ovr10(hdc, piAttribIList, pfAttribFList, nMaxFormats, piFormats, nNumFormats);
    private static function _z_ChoosePixelFormatARB_ovr11(hdc: GDI_DC; [MarshalAs(UnmanagedType.LPArray)] piAttribIList: array of Int32; var pfAttribFList: single; nMaxFormats: UInt32; [MarshalAs(UnmanagedType.LPArray)] piFormats: array of Int32; nNumFormats: IntPtr): UInt32;
    external 'opengl32.dll' name 'wglChoosePixelFormatARB';
    public static z_ChoosePixelFormatARB_ovr11 := _z_ChoosePixelFormatARB_ovr11;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function ChoosePixelFormatARB(hdc: GDI_DC; piAttribIList: array of Int32; var pfAttribFList: single; nMaxFormats: UInt32; piFormats: array of Int32; nNumFormats: IntPtr): UInt32 := z_ChoosePixelFormatARB_ovr11(hdc, piAttribIList, pfAttribFList, nMaxFormats, piFormats, nNumFormats);
    private static function _z_ChoosePixelFormatARB_ovr12(hdc: GDI_DC; [MarshalAs(UnmanagedType.LPArray)] piAttribIList: array of Int32; var pfAttribFList: single; nMaxFormats: UInt32; var piFormats: Int32; [MarshalAs(UnmanagedType.LPArray)] nNumFormats: array of UInt32): UInt32;
    external 'opengl32.dll' name 'wglChoosePixelFormatARB';
    public static z_ChoosePixelFormatARB_ovr12 := _z_ChoosePixelFormatARB_ovr12;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function ChoosePixelFormatARB(hdc: GDI_DC; piAttribIList: array of Int32; var pfAttribFList: single; nMaxFormats: UInt32; var piFormats: Int32; nNumFormats: array of UInt32): UInt32 := z_ChoosePixelFormatARB_ovr12(hdc, piAttribIList, pfAttribFList, nMaxFormats, piFormats, nNumFormats);
    private static function _z_ChoosePixelFormatARB_ovr13(hdc: GDI_DC; [MarshalAs(UnmanagedType.LPArray)] piAttribIList: array of Int32; var pfAttribFList: single; nMaxFormats: UInt32; var piFormats: Int32; var nNumFormats: UInt32): UInt32;
    external 'opengl32.dll' name 'wglChoosePixelFormatARB';
    public static z_ChoosePixelFormatARB_ovr13 := _z_ChoosePixelFormatARB_ovr13;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function ChoosePixelFormatARB(hdc: GDI_DC; piAttribIList: array of Int32; var pfAttribFList: single; nMaxFormats: UInt32; var piFormats: Int32; var nNumFormats: UInt32): UInt32 := z_ChoosePixelFormatARB_ovr13(hdc, piAttribIList, pfAttribFList, nMaxFormats, piFormats, nNumFormats);
    private static function _z_ChoosePixelFormatARB_ovr14(hdc: GDI_DC; [MarshalAs(UnmanagedType.LPArray)] piAttribIList: array of Int32; var pfAttribFList: single; nMaxFormats: UInt32; var piFormats: Int32; nNumFormats: IntPtr): UInt32;
    external 'opengl32.dll' name 'wglChoosePixelFormatARB';
    public static z_ChoosePixelFormatARB_ovr14 := _z_ChoosePixelFormatARB_ovr14;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function ChoosePixelFormatARB(hdc: GDI_DC; piAttribIList: array of Int32; var pfAttribFList: single; nMaxFormats: UInt32; var piFormats: Int32; nNumFormats: IntPtr): UInt32 := z_ChoosePixelFormatARB_ovr14(hdc, piAttribIList, pfAttribFList, nMaxFormats, piFormats, nNumFormats);
    private static function _z_ChoosePixelFormatARB_ovr15(hdc: GDI_DC; [MarshalAs(UnmanagedType.LPArray)] piAttribIList: array of Int32; var pfAttribFList: single; nMaxFormats: UInt32; piFormats: IntPtr; [MarshalAs(UnmanagedType.LPArray)] nNumFormats: array of UInt32): UInt32;
    external 'opengl32.dll' name 'wglChoosePixelFormatARB';
    public static z_ChoosePixelFormatARB_ovr15 := _z_ChoosePixelFormatARB_ovr15;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function ChoosePixelFormatARB(hdc: GDI_DC; piAttribIList: array of Int32; var pfAttribFList: single; nMaxFormats: UInt32; piFormats: IntPtr; nNumFormats: array of UInt32): UInt32 := z_ChoosePixelFormatARB_ovr15(hdc, piAttribIList, pfAttribFList, nMaxFormats, piFormats, nNumFormats);
    private static function _z_ChoosePixelFormatARB_ovr16(hdc: GDI_DC; [MarshalAs(UnmanagedType.LPArray)] piAttribIList: array of Int32; var pfAttribFList: single; nMaxFormats: UInt32; piFormats: IntPtr; var nNumFormats: UInt32): UInt32;
    external 'opengl32.dll' name 'wglChoosePixelFormatARB';
    public static z_ChoosePixelFormatARB_ovr16 := _z_ChoosePixelFormatARB_ovr16;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function ChoosePixelFormatARB(hdc: GDI_DC; piAttribIList: array of Int32; var pfAttribFList: single; nMaxFormats: UInt32; piFormats: IntPtr; var nNumFormats: UInt32): UInt32 := z_ChoosePixelFormatARB_ovr16(hdc, piAttribIList, pfAttribFList, nMaxFormats, piFormats, nNumFormats);
    private static function _z_ChoosePixelFormatARB_ovr17(hdc: GDI_DC; [MarshalAs(UnmanagedType.LPArray)] piAttribIList: array of Int32; var pfAttribFList: single; nMaxFormats: UInt32; piFormats: IntPtr; nNumFormats: IntPtr): UInt32;
    external 'opengl32.dll' name 'wglChoosePixelFormatARB';
    public static z_ChoosePixelFormatARB_ovr17 := _z_ChoosePixelFormatARB_ovr17;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function ChoosePixelFormatARB(hdc: GDI_DC; piAttribIList: array of Int32; var pfAttribFList: single; nMaxFormats: UInt32; piFormats: IntPtr; nNumFormats: IntPtr): UInt32 := z_ChoosePixelFormatARB_ovr17(hdc, piAttribIList, pfAttribFList, nMaxFormats, piFormats, nNumFormats);
    private static function _z_ChoosePixelFormatARB_ovr18(hdc: GDI_DC; [MarshalAs(UnmanagedType.LPArray)] piAttribIList: array of Int32; pfAttribFList: IntPtr; nMaxFormats: UInt32; [MarshalAs(UnmanagedType.LPArray)] piFormats: array of Int32; [MarshalAs(UnmanagedType.LPArray)] nNumFormats: array of UInt32): UInt32;
    external 'opengl32.dll' name 'wglChoosePixelFormatARB';
    public static z_ChoosePixelFormatARB_ovr18 := _z_ChoosePixelFormatARB_ovr18;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function ChoosePixelFormatARB(hdc: GDI_DC; piAttribIList: array of Int32; pfAttribFList: IntPtr; nMaxFormats: UInt32; piFormats: array of Int32; nNumFormats: array of UInt32): UInt32 := z_ChoosePixelFormatARB_ovr18(hdc, piAttribIList, pfAttribFList, nMaxFormats, piFormats, nNumFormats);
    private static function _z_ChoosePixelFormatARB_ovr19(hdc: GDI_DC; [MarshalAs(UnmanagedType.LPArray)] piAttribIList: array of Int32; pfAttribFList: IntPtr; nMaxFormats: UInt32; [MarshalAs(UnmanagedType.LPArray)] piFormats: array of Int32; var nNumFormats: UInt32): UInt32;
    external 'opengl32.dll' name 'wglChoosePixelFormatARB';
    public static z_ChoosePixelFormatARB_ovr19 := _z_ChoosePixelFormatARB_ovr19;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function ChoosePixelFormatARB(hdc: GDI_DC; piAttribIList: array of Int32; pfAttribFList: IntPtr; nMaxFormats: UInt32; piFormats: array of Int32; var nNumFormats: UInt32): UInt32 := z_ChoosePixelFormatARB_ovr19(hdc, piAttribIList, pfAttribFList, nMaxFormats, piFormats, nNumFormats);
    private static function _z_ChoosePixelFormatARB_ovr20(hdc: GDI_DC; [MarshalAs(UnmanagedType.LPArray)] piAttribIList: array of Int32; pfAttribFList: IntPtr; nMaxFormats: UInt32; [MarshalAs(UnmanagedType.LPArray)] piFormats: array of Int32; nNumFormats: IntPtr): UInt32;
    external 'opengl32.dll' name 'wglChoosePixelFormatARB';
    public static z_ChoosePixelFormatARB_ovr20 := _z_ChoosePixelFormatARB_ovr20;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function ChoosePixelFormatARB(hdc: GDI_DC; piAttribIList: array of Int32; pfAttribFList: IntPtr; nMaxFormats: UInt32; piFormats: array of Int32; nNumFormats: IntPtr): UInt32 := z_ChoosePixelFormatARB_ovr20(hdc, piAttribIList, pfAttribFList, nMaxFormats, piFormats, nNumFormats);
    private static function _z_ChoosePixelFormatARB_ovr21(hdc: GDI_DC; [MarshalAs(UnmanagedType.LPArray)] piAttribIList: array of Int32; pfAttribFList: IntPtr; nMaxFormats: UInt32; var piFormats: Int32; [MarshalAs(UnmanagedType.LPArray)] nNumFormats: array of UInt32): UInt32;
    external 'opengl32.dll' name 'wglChoosePixelFormatARB';
    public static z_ChoosePixelFormatARB_ovr21 := _z_ChoosePixelFormatARB_ovr21;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function ChoosePixelFormatARB(hdc: GDI_DC; piAttribIList: array of Int32; pfAttribFList: IntPtr; nMaxFormats: UInt32; var piFormats: Int32; nNumFormats: array of UInt32): UInt32 := z_ChoosePixelFormatARB_ovr21(hdc, piAttribIList, pfAttribFList, nMaxFormats, piFormats, nNumFormats);
    private static function _z_ChoosePixelFormatARB_ovr22(hdc: GDI_DC; [MarshalAs(UnmanagedType.LPArray)] piAttribIList: array of Int32; pfAttribFList: IntPtr; nMaxFormats: UInt32; var piFormats: Int32; var nNumFormats: UInt32): UInt32;
    external 'opengl32.dll' name 'wglChoosePixelFormatARB';
    public static z_ChoosePixelFormatARB_ovr22 := _z_ChoosePixelFormatARB_ovr22;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function ChoosePixelFormatARB(hdc: GDI_DC; piAttribIList: array of Int32; pfAttribFList: IntPtr; nMaxFormats: UInt32; var piFormats: Int32; var nNumFormats: UInt32): UInt32 := z_ChoosePixelFormatARB_ovr22(hdc, piAttribIList, pfAttribFList, nMaxFormats, piFormats, nNumFormats);
    private static function _z_ChoosePixelFormatARB_ovr23(hdc: GDI_DC; [MarshalAs(UnmanagedType.LPArray)] piAttribIList: array of Int32; pfAttribFList: IntPtr; nMaxFormats: UInt32; var piFormats: Int32; nNumFormats: IntPtr): UInt32;
    external 'opengl32.dll' name 'wglChoosePixelFormatARB';
    public static z_ChoosePixelFormatARB_ovr23 := _z_ChoosePixelFormatARB_ovr23;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function ChoosePixelFormatARB(hdc: GDI_DC; piAttribIList: array of Int32; pfAttribFList: IntPtr; nMaxFormats: UInt32; var piFormats: Int32; nNumFormats: IntPtr): UInt32 := z_ChoosePixelFormatARB_ovr23(hdc, piAttribIList, pfAttribFList, nMaxFormats, piFormats, nNumFormats);
    private static function _z_ChoosePixelFormatARB_ovr24(hdc: GDI_DC; [MarshalAs(UnmanagedType.LPArray)] piAttribIList: array of Int32; pfAttribFList: IntPtr; nMaxFormats: UInt32; piFormats: IntPtr; [MarshalAs(UnmanagedType.LPArray)] nNumFormats: array of UInt32): UInt32;
    external 'opengl32.dll' name 'wglChoosePixelFormatARB';
    public static z_ChoosePixelFormatARB_ovr24 := _z_ChoosePixelFormatARB_ovr24;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function ChoosePixelFormatARB(hdc: GDI_DC; piAttribIList: array of Int32; pfAttribFList: IntPtr; nMaxFormats: UInt32; piFormats: IntPtr; nNumFormats: array of UInt32): UInt32 := z_ChoosePixelFormatARB_ovr24(hdc, piAttribIList, pfAttribFList, nMaxFormats, piFormats, nNumFormats);
    private static function _z_ChoosePixelFormatARB_ovr25(hdc: GDI_DC; [MarshalAs(UnmanagedType.LPArray)] piAttribIList: array of Int32; pfAttribFList: IntPtr; nMaxFormats: UInt32; piFormats: IntPtr; var nNumFormats: UInt32): UInt32;
    external 'opengl32.dll' name 'wglChoosePixelFormatARB';
    public static z_ChoosePixelFormatARB_ovr25 := _z_ChoosePixelFormatARB_ovr25;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function ChoosePixelFormatARB(hdc: GDI_DC; piAttribIList: array of Int32; pfAttribFList: IntPtr; nMaxFormats: UInt32; piFormats: IntPtr; var nNumFormats: UInt32): UInt32 := z_ChoosePixelFormatARB_ovr25(hdc, piAttribIList, pfAttribFList, nMaxFormats, piFormats, nNumFormats);
    private static function _z_ChoosePixelFormatARB_ovr26(hdc: GDI_DC; [MarshalAs(UnmanagedType.LPArray)] piAttribIList: array of Int32; pfAttribFList: IntPtr; nMaxFormats: UInt32; piFormats: IntPtr; nNumFormats: IntPtr): UInt32;
    external 'opengl32.dll' name 'wglChoosePixelFormatARB';
    public static z_ChoosePixelFormatARB_ovr26 := _z_ChoosePixelFormatARB_ovr26;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function ChoosePixelFormatARB(hdc: GDI_DC; piAttribIList: array of Int32; pfAttribFList: IntPtr; nMaxFormats: UInt32; piFormats: IntPtr; nNumFormats: IntPtr): UInt32 := z_ChoosePixelFormatARB_ovr26(hdc, piAttribIList, pfAttribFList, nMaxFormats, piFormats, nNumFormats);
    private static function _z_ChoosePixelFormatARB_ovr27(hdc: GDI_DC; var piAttribIList: Int32; [MarshalAs(UnmanagedType.LPArray)] pfAttribFList: array of single; nMaxFormats: UInt32; [MarshalAs(UnmanagedType.LPArray)] piFormats: array of Int32; [MarshalAs(UnmanagedType.LPArray)] nNumFormats: array of UInt32): UInt32;
    external 'opengl32.dll' name 'wglChoosePixelFormatARB';
    public static z_ChoosePixelFormatARB_ovr27 := _z_ChoosePixelFormatARB_ovr27;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function ChoosePixelFormatARB(hdc: GDI_DC; var piAttribIList: Int32; pfAttribFList: array of single; nMaxFormats: UInt32; piFormats: array of Int32; nNumFormats: array of UInt32): UInt32 := z_ChoosePixelFormatARB_ovr27(hdc, piAttribIList, pfAttribFList, nMaxFormats, piFormats, nNumFormats);
    private static function _z_ChoosePixelFormatARB_ovr28(hdc: GDI_DC; var piAttribIList: Int32; [MarshalAs(UnmanagedType.LPArray)] pfAttribFList: array of single; nMaxFormats: UInt32; [MarshalAs(UnmanagedType.LPArray)] piFormats: array of Int32; var nNumFormats: UInt32): UInt32;
    external 'opengl32.dll' name 'wglChoosePixelFormatARB';
    public static z_ChoosePixelFormatARB_ovr28 := _z_ChoosePixelFormatARB_ovr28;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function ChoosePixelFormatARB(hdc: GDI_DC; var piAttribIList: Int32; pfAttribFList: array of single; nMaxFormats: UInt32; piFormats: array of Int32; var nNumFormats: UInt32): UInt32 := z_ChoosePixelFormatARB_ovr28(hdc, piAttribIList, pfAttribFList, nMaxFormats, piFormats, nNumFormats);
    private static function _z_ChoosePixelFormatARB_ovr29(hdc: GDI_DC; var piAttribIList: Int32; [MarshalAs(UnmanagedType.LPArray)] pfAttribFList: array of single; nMaxFormats: UInt32; [MarshalAs(UnmanagedType.LPArray)] piFormats: array of Int32; nNumFormats: IntPtr): UInt32;
    external 'opengl32.dll' name 'wglChoosePixelFormatARB';
    public static z_ChoosePixelFormatARB_ovr29 := _z_ChoosePixelFormatARB_ovr29;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function ChoosePixelFormatARB(hdc: GDI_DC; var piAttribIList: Int32; pfAttribFList: array of single; nMaxFormats: UInt32; piFormats: array of Int32; nNumFormats: IntPtr): UInt32 := z_ChoosePixelFormatARB_ovr29(hdc, piAttribIList, pfAttribFList, nMaxFormats, piFormats, nNumFormats);
    private static function _z_ChoosePixelFormatARB_ovr30(hdc: GDI_DC; var piAttribIList: Int32; [MarshalAs(UnmanagedType.LPArray)] pfAttribFList: array of single; nMaxFormats: UInt32; var piFormats: Int32; [MarshalAs(UnmanagedType.LPArray)] nNumFormats: array of UInt32): UInt32;
    external 'opengl32.dll' name 'wglChoosePixelFormatARB';
    public static z_ChoosePixelFormatARB_ovr30 := _z_ChoosePixelFormatARB_ovr30;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function ChoosePixelFormatARB(hdc: GDI_DC; var piAttribIList: Int32; pfAttribFList: array of single; nMaxFormats: UInt32; var piFormats: Int32; nNumFormats: array of UInt32): UInt32 := z_ChoosePixelFormatARB_ovr30(hdc, piAttribIList, pfAttribFList, nMaxFormats, piFormats, nNumFormats);
    private static function _z_ChoosePixelFormatARB_ovr31(hdc: GDI_DC; var piAttribIList: Int32; [MarshalAs(UnmanagedType.LPArray)] pfAttribFList: array of single; nMaxFormats: UInt32; var piFormats: Int32; var nNumFormats: UInt32): UInt32;
    external 'opengl32.dll' name 'wglChoosePixelFormatARB';
    public static z_ChoosePixelFormatARB_ovr31 := _z_ChoosePixelFormatARB_ovr31;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function ChoosePixelFormatARB(hdc: GDI_DC; var piAttribIList: Int32; pfAttribFList: array of single; nMaxFormats: UInt32; var piFormats: Int32; var nNumFormats: UInt32): UInt32 := z_ChoosePixelFormatARB_ovr31(hdc, piAttribIList, pfAttribFList, nMaxFormats, piFormats, nNumFormats);
    private static function _z_ChoosePixelFormatARB_ovr32(hdc: GDI_DC; var piAttribIList: Int32; [MarshalAs(UnmanagedType.LPArray)] pfAttribFList: array of single; nMaxFormats: UInt32; var piFormats: Int32; nNumFormats: IntPtr): UInt32;
    external 'opengl32.dll' name 'wglChoosePixelFormatARB';
    public static z_ChoosePixelFormatARB_ovr32 := _z_ChoosePixelFormatARB_ovr32;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function ChoosePixelFormatARB(hdc: GDI_DC; var piAttribIList: Int32; pfAttribFList: array of single; nMaxFormats: UInt32; var piFormats: Int32; nNumFormats: IntPtr): UInt32 := z_ChoosePixelFormatARB_ovr32(hdc, piAttribIList, pfAttribFList, nMaxFormats, piFormats, nNumFormats);
    private static function _z_ChoosePixelFormatARB_ovr33(hdc: GDI_DC; var piAttribIList: Int32; [MarshalAs(UnmanagedType.LPArray)] pfAttribFList: array of single; nMaxFormats: UInt32; piFormats: IntPtr; [MarshalAs(UnmanagedType.LPArray)] nNumFormats: array of UInt32): UInt32;
    external 'opengl32.dll' name 'wglChoosePixelFormatARB';
    public static z_ChoosePixelFormatARB_ovr33 := _z_ChoosePixelFormatARB_ovr33;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function ChoosePixelFormatARB(hdc: GDI_DC; var piAttribIList: Int32; pfAttribFList: array of single; nMaxFormats: UInt32; piFormats: IntPtr; nNumFormats: array of UInt32): UInt32 := z_ChoosePixelFormatARB_ovr33(hdc, piAttribIList, pfAttribFList, nMaxFormats, piFormats, nNumFormats);
    private static function _z_ChoosePixelFormatARB_ovr34(hdc: GDI_DC; var piAttribIList: Int32; [MarshalAs(UnmanagedType.LPArray)] pfAttribFList: array of single; nMaxFormats: UInt32; piFormats: IntPtr; var nNumFormats: UInt32): UInt32;
    external 'opengl32.dll' name 'wglChoosePixelFormatARB';
    public static z_ChoosePixelFormatARB_ovr34 := _z_ChoosePixelFormatARB_ovr34;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function ChoosePixelFormatARB(hdc: GDI_DC; var piAttribIList: Int32; pfAttribFList: array of single; nMaxFormats: UInt32; piFormats: IntPtr; var nNumFormats: UInt32): UInt32 := z_ChoosePixelFormatARB_ovr34(hdc, piAttribIList, pfAttribFList, nMaxFormats, piFormats, nNumFormats);
    private static function _z_ChoosePixelFormatARB_ovr35(hdc: GDI_DC; var piAttribIList: Int32; [MarshalAs(UnmanagedType.LPArray)] pfAttribFList: array of single; nMaxFormats: UInt32; piFormats: IntPtr; nNumFormats: IntPtr): UInt32;
    external 'opengl32.dll' name 'wglChoosePixelFormatARB';
    public static z_ChoosePixelFormatARB_ovr35 := _z_ChoosePixelFormatARB_ovr35;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function ChoosePixelFormatARB(hdc: GDI_DC; var piAttribIList: Int32; pfAttribFList: array of single; nMaxFormats: UInt32; piFormats: IntPtr; nNumFormats: IntPtr): UInt32 := z_ChoosePixelFormatARB_ovr35(hdc, piAttribIList, pfAttribFList, nMaxFormats, piFormats, nNumFormats);
    private static function _z_ChoosePixelFormatARB_ovr36(hdc: GDI_DC; var piAttribIList: Int32; var pfAttribFList: single; nMaxFormats: UInt32; [MarshalAs(UnmanagedType.LPArray)] piFormats: array of Int32; [MarshalAs(UnmanagedType.LPArray)] nNumFormats: array of UInt32): UInt32;
    external 'opengl32.dll' name 'wglChoosePixelFormatARB';
    public static z_ChoosePixelFormatARB_ovr36 := _z_ChoosePixelFormatARB_ovr36;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function ChoosePixelFormatARB(hdc: GDI_DC; var piAttribIList: Int32; var pfAttribFList: single; nMaxFormats: UInt32; piFormats: array of Int32; nNumFormats: array of UInt32): UInt32 := z_ChoosePixelFormatARB_ovr36(hdc, piAttribIList, pfAttribFList, nMaxFormats, piFormats, nNumFormats);
    private static function _z_ChoosePixelFormatARB_ovr37(hdc: GDI_DC; var piAttribIList: Int32; var pfAttribFList: single; nMaxFormats: UInt32; [MarshalAs(UnmanagedType.LPArray)] piFormats: array of Int32; var nNumFormats: UInt32): UInt32;
    external 'opengl32.dll' name 'wglChoosePixelFormatARB';
    public static z_ChoosePixelFormatARB_ovr37 := _z_ChoosePixelFormatARB_ovr37;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function ChoosePixelFormatARB(hdc: GDI_DC; var piAttribIList: Int32; var pfAttribFList: single; nMaxFormats: UInt32; piFormats: array of Int32; var nNumFormats: UInt32): UInt32 := z_ChoosePixelFormatARB_ovr37(hdc, piAttribIList, pfAttribFList, nMaxFormats, piFormats, nNumFormats);
    private static function _z_ChoosePixelFormatARB_ovr38(hdc: GDI_DC; var piAttribIList: Int32; var pfAttribFList: single; nMaxFormats: UInt32; [MarshalAs(UnmanagedType.LPArray)] piFormats: array of Int32; nNumFormats: IntPtr): UInt32;
    external 'opengl32.dll' name 'wglChoosePixelFormatARB';
    public static z_ChoosePixelFormatARB_ovr38 := _z_ChoosePixelFormatARB_ovr38;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function ChoosePixelFormatARB(hdc: GDI_DC; var piAttribIList: Int32; var pfAttribFList: single; nMaxFormats: UInt32; piFormats: array of Int32; nNumFormats: IntPtr): UInt32 := z_ChoosePixelFormatARB_ovr38(hdc, piAttribIList, pfAttribFList, nMaxFormats, piFormats, nNumFormats);
    private static function _z_ChoosePixelFormatARB_ovr39(hdc: GDI_DC; var piAttribIList: Int32; var pfAttribFList: single; nMaxFormats: UInt32; var piFormats: Int32; [MarshalAs(UnmanagedType.LPArray)] nNumFormats: array of UInt32): UInt32;
    external 'opengl32.dll' name 'wglChoosePixelFormatARB';
    public static z_ChoosePixelFormatARB_ovr39 := _z_ChoosePixelFormatARB_ovr39;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function ChoosePixelFormatARB(hdc: GDI_DC; var piAttribIList: Int32; var pfAttribFList: single; nMaxFormats: UInt32; var piFormats: Int32; nNumFormats: array of UInt32): UInt32 := z_ChoosePixelFormatARB_ovr39(hdc, piAttribIList, pfAttribFList, nMaxFormats, piFormats, nNumFormats);
    private static function _z_ChoosePixelFormatARB_ovr40(hdc: GDI_DC; var piAttribIList: Int32; var pfAttribFList: single; nMaxFormats: UInt32; var piFormats: Int32; var nNumFormats: UInt32): UInt32;
    external 'opengl32.dll' name 'wglChoosePixelFormatARB';
    public static z_ChoosePixelFormatARB_ovr40 := _z_ChoosePixelFormatARB_ovr40;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function ChoosePixelFormatARB(hdc: GDI_DC; var piAttribIList: Int32; var pfAttribFList: single; nMaxFormats: UInt32; var piFormats: Int32; var nNumFormats: UInt32): UInt32 := z_ChoosePixelFormatARB_ovr40(hdc, piAttribIList, pfAttribFList, nMaxFormats, piFormats, nNumFormats);
    private static function _z_ChoosePixelFormatARB_ovr41(hdc: GDI_DC; var piAttribIList: Int32; var pfAttribFList: single; nMaxFormats: UInt32; var piFormats: Int32; nNumFormats: IntPtr): UInt32;
    external 'opengl32.dll' name 'wglChoosePixelFormatARB';
    public static z_ChoosePixelFormatARB_ovr41 := _z_ChoosePixelFormatARB_ovr41;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function ChoosePixelFormatARB(hdc: GDI_DC; var piAttribIList: Int32; var pfAttribFList: single; nMaxFormats: UInt32; var piFormats: Int32; nNumFormats: IntPtr): UInt32 := z_ChoosePixelFormatARB_ovr41(hdc, piAttribIList, pfAttribFList, nMaxFormats, piFormats, nNumFormats);
    private static function _z_ChoosePixelFormatARB_ovr42(hdc: GDI_DC; var piAttribIList: Int32; var pfAttribFList: single; nMaxFormats: UInt32; piFormats: IntPtr; [MarshalAs(UnmanagedType.LPArray)] nNumFormats: array of UInt32): UInt32;
    external 'opengl32.dll' name 'wglChoosePixelFormatARB';
    public static z_ChoosePixelFormatARB_ovr42 := _z_ChoosePixelFormatARB_ovr42;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function ChoosePixelFormatARB(hdc: GDI_DC; var piAttribIList: Int32; var pfAttribFList: single; nMaxFormats: UInt32; piFormats: IntPtr; nNumFormats: array of UInt32): UInt32 := z_ChoosePixelFormatARB_ovr42(hdc, piAttribIList, pfAttribFList, nMaxFormats, piFormats, nNumFormats);
    private static function _z_ChoosePixelFormatARB_ovr43(hdc: GDI_DC; var piAttribIList: Int32; var pfAttribFList: single; nMaxFormats: UInt32; piFormats: IntPtr; var nNumFormats: UInt32): UInt32;
    external 'opengl32.dll' name 'wglChoosePixelFormatARB';
    public static z_ChoosePixelFormatARB_ovr43 := _z_ChoosePixelFormatARB_ovr43;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function ChoosePixelFormatARB(hdc: GDI_DC; var piAttribIList: Int32; var pfAttribFList: single; nMaxFormats: UInt32; piFormats: IntPtr; var nNumFormats: UInt32): UInt32 := z_ChoosePixelFormatARB_ovr43(hdc, piAttribIList, pfAttribFList, nMaxFormats, piFormats, nNumFormats);
    private static function _z_ChoosePixelFormatARB_ovr44(hdc: GDI_DC; var piAttribIList: Int32; var pfAttribFList: single; nMaxFormats: UInt32; piFormats: IntPtr; nNumFormats: IntPtr): UInt32;
    external 'opengl32.dll' name 'wglChoosePixelFormatARB';
    public static z_ChoosePixelFormatARB_ovr44 := _z_ChoosePixelFormatARB_ovr44;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function ChoosePixelFormatARB(hdc: GDI_DC; var piAttribIList: Int32; var pfAttribFList: single; nMaxFormats: UInt32; piFormats: IntPtr; nNumFormats: IntPtr): UInt32 := z_ChoosePixelFormatARB_ovr44(hdc, piAttribIList, pfAttribFList, nMaxFormats, piFormats, nNumFormats);
    private static function _z_ChoosePixelFormatARB_ovr45(hdc: GDI_DC; var piAttribIList: Int32; pfAttribFList: IntPtr; nMaxFormats: UInt32; [MarshalAs(UnmanagedType.LPArray)] piFormats: array of Int32; [MarshalAs(UnmanagedType.LPArray)] nNumFormats: array of UInt32): UInt32;
    external 'opengl32.dll' name 'wglChoosePixelFormatARB';
    public static z_ChoosePixelFormatARB_ovr45 := _z_ChoosePixelFormatARB_ovr45;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function ChoosePixelFormatARB(hdc: GDI_DC; var piAttribIList: Int32; pfAttribFList: IntPtr; nMaxFormats: UInt32; piFormats: array of Int32; nNumFormats: array of UInt32): UInt32 := z_ChoosePixelFormatARB_ovr45(hdc, piAttribIList, pfAttribFList, nMaxFormats, piFormats, nNumFormats);
    private static function _z_ChoosePixelFormatARB_ovr46(hdc: GDI_DC; var piAttribIList: Int32; pfAttribFList: IntPtr; nMaxFormats: UInt32; [MarshalAs(UnmanagedType.LPArray)] piFormats: array of Int32; var nNumFormats: UInt32): UInt32;
    external 'opengl32.dll' name 'wglChoosePixelFormatARB';
    public static z_ChoosePixelFormatARB_ovr46 := _z_ChoosePixelFormatARB_ovr46;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function ChoosePixelFormatARB(hdc: GDI_DC; var piAttribIList: Int32; pfAttribFList: IntPtr; nMaxFormats: UInt32; piFormats: array of Int32; var nNumFormats: UInt32): UInt32 := z_ChoosePixelFormatARB_ovr46(hdc, piAttribIList, pfAttribFList, nMaxFormats, piFormats, nNumFormats);
    private static function _z_ChoosePixelFormatARB_ovr47(hdc: GDI_DC; var piAttribIList: Int32; pfAttribFList: IntPtr; nMaxFormats: UInt32; [MarshalAs(UnmanagedType.LPArray)] piFormats: array of Int32; nNumFormats: IntPtr): UInt32;
    external 'opengl32.dll' name 'wglChoosePixelFormatARB';
    public static z_ChoosePixelFormatARB_ovr47 := _z_ChoosePixelFormatARB_ovr47;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function ChoosePixelFormatARB(hdc: GDI_DC; var piAttribIList: Int32; pfAttribFList: IntPtr; nMaxFormats: UInt32; piFormats: array of Int32; nNumFormats: IntPtr): UInt32 := z_ChoosePixelFormatARB_ovr47(hdc, piAttribIList, pfAttribFList, nMaxFormats, piFormats, nNumFormats);
    private static function _z_ChoosePixelFormatARB_ovr48(hdc: GDI_DC; var piAttribIList: Int32; pfAttribFList: IntPtr; nMaxFormats: UInt32; var piFormats: Int32; [MarshalAs(UnmanagedType.LPArray)] nNumFormats: array of UInt32): UInt32;
    external 'opengl32.dll' name 'wglChoosePixelFormatARB';
    public static z_ChoosePixelFormatARB_ovr48 := _z_ChoosePixelFormatARB_ovr48;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function ChoosePixelFormatARB(hdc: GDI_DC; var piAttribIList: Int32; pfAttribFList: IntPtr; nMaxFormats: UInt32; var piFormats: Int32; nNumFormats: array of UInt32): UInt32 := z_ChoosePixelFormatARB_ovr48(hdc, piAttribIList, pfAttribFList, nMaxFormats, piFormats, nNumFormats);
    private static function _z_ChoosePixelFormatARB_ovr49(hdc: GDI_DC; var piAttribIList: Int32; pfAttribFList: IntPtr; nMaxFormats: UInt32; var piFormats: Int32; var nNumFormats: UInt32): UInt32;
    external 'opengl32.dll' name 'wglChoosePixelFormatARB';
    public static z_ChoosePixelFormatARB_ovr49 := _z_ChoosePixelFormatARB_ovr49;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function ChoosePixelFormatARB(hdc: GDI_DC; var piAttribIList: Int32; pfAttribFList: IntPtr; nMaxFormats: UInt32; var piFormats: Int32; var nNumFormats: UInt32): UInt32 := z_ChoosePixelFormatARB_ovr49(hdc, piAttribIList, pfAttribFList, nMaxFormats, piFormats, nNumFormats);
    private static function _z_ChoosePixelFormatARB_ovr50(hdc: GDI_DC; var piAttribIList: Int32; pfAttribFList: IntPtr; nMaxFormats: UInt32; var piFormats: Int32; nNumFormats: IntPtr): UInt32;
    external 'opengl32.dll' name 'wglChoosePixelFormatARB';
    public static z_ChoosePixelFormatARB_ovr50 := _z_ChoosePixelFormatARB_ovr50;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function ChoosePixelFormatARB(hdc: GDI_DC; var piAttribIList: Int32; pfAttribFList: IntPtr; nMaxFormats: UInt32; var piFormats: Int32; nNumFormats: IntPtr): UInt32 := z_ChoosePixelFormatARB_ovr50(hdc, piAttribIList, pfAttribFList, nMaxFormats, piFormats, nNumFormats);
    private static function _z_ChoosePixelFormatARB_ovr51(hdc: GDI_DC; var piAttribIList: Int32; pfAttribFList: IntPtr; nMaxFormats: UInt32; piFormats: IntPtr; [MarshalAs(UnmanagedType.LPArray)] nNumFormats: array of UInt32): UInt32;
    external 'opengl32.dll' name 'wglChoosePixelFormatARB';
    public static z_ChoosePixelFormatARB_ovr51 := _z_ChoosePixelFormatARB_ovr51;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function ChoosePixelFormatARB(hdc: GDI_DC; var piAttribIList: Int32; pfAttribFList: IntPtr; nMaxFormats: UInt32; piFormats: IntPtr; nNumFormats: array of UInt32): UInt32 := z_ChoosePixelFormatARB_ovr51(hdc, piAttribIList, pfAttribFList, nMaxFormats, piFormats, nNumFormats);
    private static function _z_ChoosePixelFormatARB_ovr52(hdc: GDI_DC; var piAttribIList: Int32; pfAttribFList: IntPtr; nMaxFormats: UInt32; piFormats: IntPtr; var nNumFormats: UInt32): UInt32;
    external 'opengl32.dll' name 'wglChoosePixelFormatARB';
    public static z_ChoosePixelFormatARB_ovr52 := _z_ChoosePixelFormatARB_ovr52;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function ChoosePixelFormatARB(hdc: GDI_DC; var piAttribIList: Int32; pfAttribFList: IntPtr; nMaxFormats: UInt32; piFormats: IntPtr; var nNumFormats: UInt32): UInt32 := z_ChoosePixelFormatARB_ovr52(hdc, piAttribIList, pfAttribFList, nMaxFormats, piFormats, nNumFormats);
    private static function _z_ChoosePixelFormatARB_ovr53(hdc: GDI_DC; var piAttribIList: Int32; pfAttribFList: IntPtr; nMaxFormats: UInt32; piFormats: IntPtr; nNumFormats: IntPtr): UInt32;
    external 'opengl32.dll' name 'wglChoosePixelFormatARB';
    public static z_ChoosePixelFormatARB_ovr53 := _z_ChoosePixelFormatARB_ovr53;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function ChoosePixelFormatARB(hdc: GDI_DC; var piAttribIList: Int32; pfAttribFList: IntPtr; nMaxFormats: UInt32; piFormats: IntPtr; nNumFormats: IntPtr): UInt32 := z_ChoosePixelFormatARB_ovr53(hdc, piAttribIList, pfAttribFList, nMaxFormats, piFormats, nNumFormats);
    private static function _z_ChoosePixelFormatARB_ovr54(hdc: GDI_DC; piAttribIList: IntPtr; [MarshalAs(UnmanagedType.LPArray)] pfAttribFList: array of single; nMaxFormats: UInt32; [MarshalAs(UnmanagedType.LPArray)] piFormats: array of Int32; [MarshalAs(UnmanagedType.LPArray)] nNumFormats: array of UInt32): UInt32;
    external 'opengl32.dll' name 'wglChoosePixelFormatARB';
    public static z_ChoosePixelFormatARB_ovr54 := _z_ChoosePixelFormatARB_ovr54;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function ChoosePixelFormatARB(hdc: GDI_DC; piAttribIList: IntPtr; pfAttribFList: array of single; nMaxFormats: UInt32; piFormats: array of Int32; nNumFormats: array of UInt32): UInt32 := z_ChoosePixelFormatARB_ovr54(hdc, piAttribIList, pfAttribFList, nMaxFormats, piFormats, nNumFormats);
    private static function _z_ChoosePixelFormatARB_ovr55(hdc: GDI_DC; piAttribIList: IntPtr; [MarshalAs(UnmanagedType.LPArray)] pfAttribFList: array of single; nMaxFormats: UInt32; [MarshalAs(UnmanagedType.LPArray)] piFormats: array of Int32; var nNumFormats: UInt32): UInt32;
    external 'opengl32.dll' name 'wglChoosePixelFormatARB';
    public static z_ChoosePixelFormatARB_ovr55 := _z_ChoosePixelFormatARB_ovr55;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function ChoosePixelFormatARB(hdc: GDI_DC; piAttribIList: IntPtr; pfAttribFList: array of single; nMaxFormats: UInt32; piFormats: array of Int32; var nNumFormats: UInt32): UInt32 := z_ChoosePixelFormatARB_ovr55(hdc, piAttribIList, pfAttribFList, nMaxFormats, piFormats, nNumFormats);
    private static function _z_ChoosePixelFormatARB_ovr56(hdc: GDI_DC; piAttribIList: IntPtr; [MarshalAs(UnmanagedType.LPArray)] pfAttribFList: array of single; nMaxFormats: UInt32; [MarshalAs(UnmanagedType.LPArray)] piFormats: array of Int32; nNumFormats: IntPtr): UInt32;
    external 'opengl32.dll' name 'wglChoosePixelFormatARB';
    public static z_ChoosePixelFormatARB_ovr56 := _z_ChoosePixelFormatARB_ovr56;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function ChoosePixelFormatARB(hdc: GDI_DC; piAttribIList: IntPtr; pfAttribFList: array of single; nMaxFormats: UInt32; piFormats: array of Int32; nNumFormats: IntPtr): UInt32 := z_ChoosePixelFormatARB_ovr56(hdc, piAttribIList, pfAttribFList, nMaxFormats, piFormats, nNumFormats);
    private static function _z_ChoosePixelFormatARB_ovr57(hdc: GDI_DC; piAttribIList: IntPtr; [MarshalAs(UnmanagedType.LPArray)] pfAttribFList: array of single; nMaxFormats: UInt32; var piFormats: Int32; [MarshalAs(UnmanagedType.LPArray)] nNumFormats: array of UInt32): UInt32;
    external 'opengl32.dll' name 'wglChoosePixelFormatARB';
    public static z_ChoosePixelFormatARB_ovr57 := _z_ChoosePixelFormatARB_ovr57;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function ChoosePixelFormatARB(hdc: GDI_DC; piAttribIList: IntPtr; pfAttribFList: array of single; nMaxFormats: UInt32; var piFormats: Int32; nNumFormats: array of UInt32): UInt32 := z_ChoosePixelFormatARB_ovr57(hdc, piAttribIList, pfAttribFList, nMaxFormats, piFormats, nNumFormats);
    private static function _z_ChoosePixelFormatARB_ovr58(hdc: GDI_DC; piAttribIList: IntPtr; [MarshalAs(UnmanagedType.LPArray)] pfAttribFList: array of single; nMaxFormats: UInt32; var piFormats: Int32; var nNumFormats: UInt32): UInt32;
    external 'opengl32.dll' name 'wglChoosePixelFormatARB';
    public static z_ChoosePixelFormatARB_ovr58 := _z_ChoosePixelFormatARB_ovr58;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function ChoosePixelFormatARB(hdc: GDI_DC; piAttribIList: IntPtr; pfAttribFList: array of single; nMaxFormats: UInt32; var piFormats: Int32; var nNumFormats: UInt32): UInt32 := z_ChoosePixelFormatARB_ovr58(hdc, piAttribIList, pfAttribFList, nMaxFormats, piFormats, nNumFormats);
    private static function _z_ChoosePixelFormatARB_ovr59(hdc: GDI_DC; piAttribIList: IntPtr; [MarshalAs(UnmanagedType.LPArray)] pfAttribFList: array of single; nMaxFormats: UInt32; var piFormats: Int32; nNumFormats: IntPtr): UInt32;
    external 'opengl32.dll' name 'wglChoosePixelFormatARB';
    public static z_ChoosePixelFormatARB_ovr59 := _z_ChoosePixelFormatARB_ovr59;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function ChoosePixelFormatARB(hdc: GDI_DC; piAttribIList: IntPtr; pfAttribFList: array of single; nMaxFormats: UInt32; var piFormats: Int32; nNumFormats: IntPtr): UInt32 := z_ChoosePixelFormatARB_ovr59(hdc, piAttribIList, pfAttribFList, nMaxFormats, piFormats, nNumFormats);
    private static function _z_ChoosePixelFormatARB_ovr60(hdc: GDI_DC; piAttribIList: IntPtr; [MarshalAs(UnmanagedType.LPArray)] pfAttribFList: array of single; nMaxFormats: UInt32; piFormats: IntPtr; [MarshalAs(UnmanagedType.LPArray)] nNumFormats: array of UInt32): UInt32;
    external 'opengl32.dll' name 'wglChoosePixelFormatARB';
    public static z_ChoosePixelFormatARB_ovr60 := _z_ChoosePixelFormatARB_ovr60;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function ChoosePixelFormatARB(hdc: GDI_DC; piAttribIList: IntPtr; pfAttribFList: array of single; nMaxFormats: UInt32; piFormats: IntPtr; nNumFormats: array of UInt32): UInt32 := z_ChoosePixelFormatARB_ovr60(hdc, piAttribIList, pfAttribFList, nMaxFormats, piFormats, nNumFormats);
    private static function _z_ChoosePixelFormatARB_ovr61(hdc: GDI_DC; piAttribIList: IntPtr; [MarshalAs(UnmanagedType.LPArray)] pfAttribFList: array of single; nMaxFormats: UInt32; piFormats: IntPtr; var nNumFormats: UInt32): UInt32;
    external 'opengl32.dll' name 'wglChoosePixelFormatARB';
    public static z_ChoosePixelFormatARB_ovr61 := _z_ChoosePixelFormatARB_ovr61;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function ChoosePixelFormatARB(hdc: GDI_DC; piAttribIList: IntPtr; pfAttribFList: array of single; nMaxFormats: UInt32; piFormats: IntPtr; var nNumFormats: UInt32): UInt32 := z_ChoosePixelFormatARB_ovr61(hdc, piAttribIList, pfAttribFList, nMaxFormats, piFormats, nNumFormats);
    private static function _z_ChoosePixelFormatARB_ovr62(hdc: GDI_DC; piAttribIList: IntPtr; [MarshalAs(UnmanagedType.LPArray)] pfAttribFList: array of single; nMaxFormats: UInt32; piFormats: IntPtr; nNumFormats: IntPtr): UInt32;
    external 'opengl32.dll' name 'wglChoosePixelFormatARB';
    public static z_ChoosePixelFormatARB_ovr62 := _z_ChoosePixelFormatARB_ovr62;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function ChoosePixelFormatARB(hdc: GDI_DC; piAttribIList: IntPtr; pfAttribFList: array of single; nMaxFormats: UInt32; piFormats: IntPtr; nNumFormats: IntPtr): UInt32 := z_ChoosePixelFormatARB_ovr62(hdc, piAttribIList, pfAttribFList, nMaxFormats, piFormats, nNumFormats);
    private static function _z_ChoosePixelFormatARB_ovr63(hdc: GDI_DC; piAttribIList: IntPtr; var pfAttribFList: single; nMaxFormats: UInt32; [MarshalAs(UnmanagedType.LPArray)] piFormats: array of Int32; [MarshalAs(UnmanagedType.LPArray)] nNumFormats: array of UInt32): UInt32;
    external 'opengl32.dll' name 'wglChoosePixelFormatARB';
    public static z_ChoosePixelFormatARB_ovr63 := _z_ChoosePixelFormatARB_ovr63;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function ChoosePixelFormatARB(hdc: GDI_DC; piAttribIList: IntPtr; var pfAttribFList: single; nMaxFormats: UInt32; piFormats: array of Int32; nNumFormats: array of UInt32): UInt32 := z_ChoosePixelFormatARB_ovr63(hdc, piAttribIList, pfAttribFList, nMaxFormats, piFormats, nNumFormats);
    private static function _z_ChoosePixelFormatARB_ovr64(hdc: GDI_DC; piAttribIList: IntPtr; var pfAttribFList: single; nMaxFormats: UInt32; [MarshalAs(UnmanagedType.LPArray)] piFormats: array of Int32; var nNumFormats: UInt32): UInt32;
    external 'opengl32.dll' name 'wglChoosePixelFormatARB';
    public static z_ChoosePixelFormatARB_ovr64 := _z_ChoosePixelFormatARB_ovr64;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function ChoosePixelFormatARB(hdc: GDI_DC; piAttribIList: IntPtr; var pfAttribFList: single; nMaxFormats: UInt32; piFormats: array of Int32; var nNumFormats: UInt32): UInt32 := z_ChoosePixelFormatARB_ovr64(hdc, piAttribIList, pfAttribFList, nMaxFormats, piFormats, nNumFormats);
    private static function _z_ChoosePixelFormatARB_ovr65(hdc: GDI_DC; piAttribIList: IntPtr; var pfAttribFList: single; nMaxFormats: UInt32; [MarshalAs(UnmanagedType.LPArray)] piFormats: array of Int32; nNumFormats: IntPtr): UInt32;
    external 'opengl32.dll' name 'wglChoosePixelFormatARB';
    public static z_ChoosePixelFormatARB_ovr65 := _z_ChoosePixelFormatARB_ovr65;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function ChoosePixelFormatARB(hdc: GDI_DC; piAttribIList: IntPtr; var pfAttribFList: single; nMaxFormats: UInt32; piFormats: array of Int32; nNumFormats: IntPtr): UInt32 := z_ChoosePixelFormatARB_ovr65(hdc, piAttribIList, pfAttribFList, nMaxFormats, piFormats, nNumFormats);
    private static function _z_ChoosePixelFormatARB_ovr66(hdc: GDI_DC; piAttribIList: IntPtr; var pfAttribFList: single; nMaxFormats: UInt32; var piFormats: Int32; [MarshalAs(UnmanagedType.LPArray)] nNumFormats: array of UInt32): UInt32;
    external 'opengl32.dll' name 'wglChoosePixelFormatARB';
    public static z_ChoosePixelFormatARB_ovr66 := _z_ChoosePixelFormatARB_ovr66;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function ChoosePixelFormatARB(hdc: GDI_DC; piAttribIList: IntPtr; var pfAttribFList: single; nMaxFormats: UInt32; var piFormats: Int32; nNumFormats: array of UInt32): UInt32 := z_ChoosePixelFormatARB_ovr66(hdc, piAttribIList, pfAttribFList, nMaxFormats, piFormats, nNumFormats);
    private static function _z_ChoosePixelFormatARB_ovr67(hdc: GDI_DC; piAttribIList: IntPtr; var pfAttribFList: single; nMaxFormats: UInt32; var piFormats: Int32; var nNumFormats: UInt32): UInt32;
    external 'opengl32.dll' name 'wglChoosePixelFormatARB';
    public static z_ChoosePixelFormatARB_ovr67 := _z_ChoosePixelFormatARB_ovr67;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function ChoosePixelFormatARB(hdc: GDI_DC; piAttribIList: IntPtr; var pfAttribFList: single; nMaxFormats: UInt32; var piFormats: Int32; var nNumFormats: UInt32): UInt32 := z_ChoosePixelFormatARB_ovr67(hdc, piAttribIList, pfAttribFList, nMaxFormats, piFormats, nNumFormats);
    private static function _z_ChoosePixelFormatARB_ovr68(hdc: GDI_DC; piAttribIList: IntPtr; var pfAttribFList: single; nMaxFormats: UInt32; var piFormats: Int32; nNumFormats: IntPtr): UInt32;
    external 'opengl32.dll' name 'wglChoosePixelFormatARB';
    public static z_ChoosePixelFormatARB_ovr68 := _z_ChoosePixelFormatARB_ovr68;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function ChoosePixelFormatARB(hdc: GDI_DC; piAttribIList: IntPtr; var pfAttribFList: single; nMaxFormats: UInt32; var piFormats: Int32; nNumFormats: IntPtr): UInt32 := z_ChoosePixelFormatARB_ovr68(hdc, piAttribIList, pfAttribFList, nMaxFormats, piFormats, nNumFormats);
    private static function _z_ChoosePixelFormatARB_ovr69(hdc: GDI_DC; piAttribIList: IntPtr; var pfAttribFList: single; nMaxFormats: UInt32; piFormats: IntPtr; [MarshalAs(UnmanagedType.LPArray)] nNumFormats: array of UInt32): UInt32;
    external 'opengl32.dll' name 'wglChoosePixelFormatARB';
    public static z_ChoosePixelFormatARB_ovr69 := _z_ChoosePixelFormatARB_ovr69;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function ChoosePixelFormatARB(hdc: GDI_DC; piAttribIList: IntPtr; var pfAttribFList: single; nMaxFormats: UInt32; piFormats: IntPtr; nNumFormats: array of UInt32): UInt32 := z_ChoosePixelFormatARB_ovr69(hdc, piAttribIList, pfAttribFList, nMaxFormats, piFormats, nNumFormats);
    private static function _z_ChoosePixelFormatARB_ovr70(hdc: GDI_DC; piAttribIList: IntPtr; var pfAttribFList: single; nMaxFormats: UInt32; piFormats: IntPtr; var nNumFormats: UInt32): UInt32;
    external 'opengl32.dll' name 'wglChoosePixelFormatARB';
    public static z_ChoosePixelFormatARB_ovr70 := _z_ChoosePixelFormatARB_ovr70;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function ChoosePixelFormatARB(hdc: GDI_DC; piAttribIList: IntPtr; var pfAttribFList: single; nMaxFormats: UInt32; piFormats: IntPtr; var nNumFormats: UInt32): UInt32 := z_ChoosePixelFormatARB_ovr70(hdc, piAttribIList, pfAttribFList, nMaxFormats, piFormats, nNumFormats);
    private static function _z_ChoosePixelFormatARB_ovr71(hdc: GDI_DC; piAttribIList: IntPtr; var pfAttribFList: single; nMaxFormats: UInt32; piFormats: IntPtr; nNumFormats: IntPtr): UInt32;
    external 'opengl32.dll' name 'wglChoosePixelFormatARB';
    public static z_ChoosePixelFormatARB_ovr71 := _z_ChoosePixelFormatARB_ovr71;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function ChoosePixelFormatARB(hdc: GDI_DC; piAttribIList: IntPtr; var pfAttribFList: single; nMaxFormats: UInt32; piFormats: IntPtr; nNumFormats: IntPtr): UInt32 := z_ChoosePixelFormatARB_ovr71(hdc, piAttribIList, pfAttribFList, nMaxFormats, piFormats, nNumFormats);
    private static function _z_ChoosePixelFormatARB_ovr72(hdc: GDI_DC; piAttribIList: IntPtr; pfAttribFList: IntPtr; nMaxFormats: UInt32; [MarshalAs(UnmanagedType.LPArray)] piFormats: array of Int32; [MarshalAs(UnmanagedType.LPArray)] nNumFormats: array of UInt32): UInt32;
    external 'opengl32.dll' name 'wglChoosePixelFormatARB';
    public static z_ChoosePixelFormatARB_ovr72 := _z_ChoosePixelFormatARB_ovr72;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function ChoosePixelFormatARB(hdc: GDI_DC; piAttribIList: IntPtr; pfAttribFList: IntPtr; nMaxFormats: UInt32; piFormats: array of Int32; nNumFormats: array of UInt32): UInt32 := z_ChoosePixelFormatARB_ovr72(hdc, piAttribIList, pfAttribFList, nMaxFormats, piFormats, nNumFormats);
    private static function _z_ChoosePixelFormatARB_ovr73(hdc: GDI_DC; piAttribIList: IntPtr; pfAttribFList: IntPtr; nMaxFormats: UInt32; [MarshalAs(UnmanagedType.LPArray)] piFormats: array of Int32; var nNumFormats: UInt32): UInt32;
    external 'opengl32.dll' name 'wglChoosePixelFormatARB';
    public static z_ChoosePixelFormatARB_ovr73 := _z_ChoosePixelFormatARB_ovr73;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function ChoosePixelFormatARB(hdc: GDI_DC; piAttribIList: IntPtr; pfAttribFList: IntPtr; nMaxFormats: UInt32; piFormats: array of Int32; var nNumFormats: UInt32): UInt32 := z_ChoosePixelFormatARB_ovr73(hdc, piAttribIList, pfAttribFList, nMaxFormats, piFormats, nNumFormats);
    private static function _z_ChoosePixelFormatARB_ovr74(hdc: GDI_DC; piAttribIList: IntPtr; pfAttribFList: IntPtr; nMaxFormats: UInt32; [MarshalAs(UnmanagedType.LPArray)] piFormats: array of Int32; nNumFormats: IntPtr): UInt32;
    external 'opengl32.dll' name 'wglChoosePixelFormatARB';
    public static z_ChoosePixelFormatARB_ovr74 := _z_ChoosePixelFormatARB_ovr74;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function ChoosePixelFormatARB(hdc: GDI_DC; piAttribIList: IntPtr; pfAttribFList: IntPtr; nMaxFormats: UInt32; piFormats: array of Int32; nNumFormats: IntPtr): UInt32 := z_ChoosePixelFormatARB_ovr74(hdc, piAttribIList, pfAttribFList, nMaxFormats, piFormats, nNumFormats);
    private static function _z_ChoosePixelFormatARB_ovr75(hdc: GDI_DC; piAttribIList: IntPtr; pfAttribFList: IntPtr; nMaxFormats: UInt32; var piFormats: Int32; [MarshalAs(UnmanagedType.LPArray)] nNumFormats: array of UInt32): UInt32;
    external 'opengl32.dll' name 'wglChoosePixelFormatARB';
    public static z_ChoosePixelFormatARB_ovr75 := _z_ChoosePixelFormatARB_ovr75;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function ChoosePixelFormatARB(hdc: GDI_DC; piAttribIList: IntPtr; pfAttribFList: IntPtr; nMaxFormats: UInt32; var piFormats: Int32; nNumFormats: array of UInt32): UInt32 := z_ChoosePixelFormatARB_ovr75(hdc, piAttribIList, pfAttribFList, nMaxFormats, piFormats, nNumFormats);
    private static function _z_ChoosePixelFormatARB_ovr76(hdc: GDI_DC; piAttribIList: IntPtr; pfAttribFList: IntPtr; nMaxFormats: UInt32; var piFormats: Int32; var nNumFormats: UInt32): UInt32;
    external 'opengl32.dll' name 'wglChoosePixelFormatARB';
    public static z_ChoosePixelFormatARB_ovr76 := _z_ChoosePixelFormatARB_ovr76;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function ChoosePixelFormatARB(hdc: GDI_DC; piAttribIList: IntPtr; pfAttribFList: IntPtr; nMaxFormats: UInt32; var piFormats: Int32; var nNumFormats: UInt32): UInt32 := z_ChoosePixelFormatARB_ovr76(hdc, piAttribIList, pfAttribFList, nMaxFormats, piFormats, nNumFormats);
    private static function _z_ChoosePixelFormatARB_ovr77(hdc: GDI_DC; piAttribIList: IntPtr; pfAttribFList: IntPtr; nMaxFormats: UInt32; var piFormats: Int32; nNumFormats: IntPtr): UInt32;
    external 'opengl32.dll' name 'wglChoosePixelFormatARB';
    public static z_ChoosePixelFormatARB_ovr77 := _z_ChoosePixelFormatARB_ovr77;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function ChoosePixelFormatARB(hdc: GDI_DC; piAttribIList: IntPtr; pfAttribFList: IntPtr; nMaxFormats: UInt32; var piFormats: Int32; nNumFormats: IntPtr): UInt32 := z_ChoosePixelFormatARB_ovr77(hdc, piAttribIList, pfAttribFList, nMaxFormats, piFormats, nNumFormats);
    private static function _z_ChoosePixelFormatARB_ovr78(hdc: GDI_DC; piAttribIList: IntPtr; pfAttribFList: IntPtr; nMaxFormats: UInt32; piFormats: IntPtr; [MarshalAs(UnmanagedType.LPArray)] nNumFormats: array of UInt32): UInt32;
    external 'opengl32.dll' name 'wglChoosePixelFormatARB';
    public static z_ChoosePixelFormatARB_ovr78 := _z_ChoosePixelFormatARB_ovr78;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function ChoosePixelFormatARB(hdc: GDI_DC; piAttribIList: IntPtr; pfAttribFList: IntPtr; nMaxFormats: UInt32; piFormats: IntPtr; nNumFormats: array of UInt32): UInt32 := z_ChoosePixelFormatARB_ovr78(hdc, piAttribIList, pfAttribFList, nMaxFormats, piFormats, nNumFormats);
    private static function _z_ChoosePixelFormatARB_ovr79(hdc: GDI_DC; piAttribIList: IntPtr; pfAttribFList: IntPtr; nMaxFormats: UInt32; piFormats: IntPtr; var nNumFormats: UInt32): UInt32;
    external 'opengl32.dll' name 'wglChoosePixelFormatARB';
    public static z_ChoosePixelFormatARB_ovr79 := _z_ChoosePixelFormatARB_ovr79;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function ChoosePixelFormatARB(hdc: GDI_DC; piAttribIList: IntPtr; pfAttribFList: IntPtr; nMaxFormats: UInt32; piFormats: IntPtr; var nNumFormats: UInt32): UInt32 := z_ChoosePixelFormatARB_ovr79(hdc, piAttribIList, pfAttribFList, nMaxFormats, piFormats, nNumFormats);
    private static function _z_ChoosePixelFormatARB_ovr80(hdc: GDI_DC; piAttribIList: IntPtr; pfAttribFList: IntPtr; nMaxFormats: UInt32; piFormats: IntPtr; nNumFormats: IntPtr): UInt32;
    external 'opengl32.dll' name 'wglChoosePixelFormatARB';
    public static z_ChoosePixelFormatARB_ovr80 := _z_ChoosePixelFormatARB_ovr80;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function ChoosePixelFormatARB(hdc: GDI_DC; piAttribIList: IntPtr; pfAttribFList: IntPtr; nMaxFormats: UInt32; piFormats: IntPtr; nNumFormats: IntPtr): UInt32 := z_ChoosePixelFormatARB_ovr80(hdc, piAttribIList, pfAttribFList, nMaxFormats, piFormats, nNumFormats);
    
  end;
  
  wglRenderTextureARB = static class
    
    private static function _z_BindTexImageARB_ovr0(_hPbuffer: HPBUFFER; iBuffer: Int32): UInt32;
    external 'opengl32.dll' name 'wglBindTexImageARB';
    public static z_BindTexImageARB_ovr0 := _z_BindTexImageARB_ovr0;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function BindTexImageARB(_hPbuffer: HPBUFFER; iBuffer: Int32): UInt32 := z_BindTexImageARB_ovr0(_hPbuffer, iBuffer);
    
    private static function _z_ReleaseTexImageARB_ovr0(_hPbuffer: HPBUFFER; iBuffer: Int32): UInt32;
    external 'opengl32.dll' name 'wglReleaseTexImageARB';
    public static z_ReleaseTexImageARB_ovr0 := _z_ReleaseTexImageARB_ovr0;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function ReleaseTexImageARB(_hPbuffer: HPBUFFER; iBuffer: Int32): UInt32 := z_ReleaseTexImageARB_ovr0(_hPbuffer, iBuffer);
    
    private static function _z_SetPbufferAttribARB_ovr0(_hPbuffer: HPBUFFER; [MarshalAs(UnmanagedType.LPArray)] piAttribList: array of Int32): UInt32;
    external 'opengl32.dll' name 'wglSetPbufferAttribARB';
    public static z_SetPbufferAttribARB_ovr0 := _z_SetPbufferAttribARB_ovr0;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function SetPbufferAttribARB(_hPbuffer: HPBUFFER; piAttribList: array of Int32): UInt32 := z_SetPbufferAttribARB_ovr0(_hPbuffer, piAttribList);
    private static function _z_SetPbufferAttribARB_ovr1(_hPbuffer: HPBUFFER; var piAttribList: Int32): UInt32;
    external 'opengl32.dll' name 'wglSetPbufferAttribARB';
    public static z_SetPbufferAttribARB_ovr1 := _z_SetPbufferAttribARB_ovr1;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function SetPbufferAttribARB(_hPbuffer: HPBUFFER; var piAttribList: Int32): UInt32 := z_SetPbufferAttribARB_ovr1(_hPbuffer, piAttribList);
    private static function _z_SetPbufferAttribARB_ovr2(_hPbuffer: HPBUFFER; piAttribList: IntPtr): UInt32;
    external 'opengl32.dll' name 'wglSetPbufferAttribARB';
    public static z_SetPbufferAttribARB_ovr2 := _z_SetPbufferAttribARB_ovr2;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function SetPbufferAttribARB(_hPbuffer: HPBUFFER; piAttribList: IntPtr): UInt32 := z_SetPbufferAttribARB_ovr2(_hPbuffer, piAttribList);
    
  end;
  
  wglDisplayColorTableEXT = static class
    
    private static function _z_CreateDisplayColorTableEXT_ovr0(id: UInt16): boolean;
    external 'opengl32.dll' name 'wglCreateDisplayColorTableEXT';
    public static z_CreateDisplayColorTableEXT_ovr0 := _z_CreateDisplayColorTableEXT_ovr0;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function CreateDisplayColorTableEXT(id: UInt16): boolean := z_CreateDisplayColorTableEXT_ovr0(id);
    
    private static function _z_LoadDisplayColorTableEXT_ovr0([MarshalAs(UnmanagedType.LPArray)] table: array of UInt16; length: UInt32): boolean;
    external 'opengl32.dll' name 'wglLoadDisplayColorTableEXT';
    public static z_LoadDisplayColorTableEXT_ovr0 := _z_LoadDisplayColorTableEXT_ovr0;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function LoadDisplayColorTableEXT(table: array of UInt16; length: UInt32): boolean := z_LoadDisplayColorTableEXT_ovr0(table, length);
    private static function _z_LoadDisplayColorTableEXT_ovr1(var table: UInt16; length: UInt32): boolean;
    external 'opengl32.dll' name 'wglLoadDisplayColorTableEXT';
    public static z_LoadDisplayColorTableEXT_ovr1 := _z_LoadDisplayColorTableEXT_ovr1;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function LoadDisplayColorTableEXT(var table: UInt16; length: UInt32): boolean := z_LoadDisplayColorTableEXT_ovr1(table, length);
    private static function _z_LoadDisplayColorTableEXT_ovr2(table: IntPtr; length: UInt32): boolean;
    external 'opengl32.dll' name 'wglLoadDisplayColorTableEXT';
    public static z_LoadDisplayColorTableEXT_ovr2 := _z_LoadDisplayColorTableEXT_ovr2;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function LoadDisplayColorTableEXT(table: IntPtr; length: UInt32): boolean := z_LoadDisplayColorTableEXT_ovr2(table, length);
    
    private static function _z_BindDisplayColorTableEXT_ovr0(id: UInt16): boolean;
    external 'opengl32.dll' name 'wglBindDisplayColorTableEXT';
    public static z_BindDisplayColorTableEXT_ovr0 := _z_BindDisplayColorTableEXT_ovr0;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function BindDisplayColorTableEXT(id: UInt16): boolean := z_BindDisplayColorTableEXT_ovr0(id);
    
    private static procedure _z_DestroyDisplayColorTableEXT_ovr0(id: UInt16);
    external 'opengl32.dll' name 'wglDestroyDisplayColorTableEXT';
    public static z_DestroyDisplayColorTableEXT_ovr0 := _z_DestroyDisplayColorTableEXT_ovr0;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static procedure DestroyDisplayColorTableEXT(id: UInt16) := z_DestroyDisplayColorTableEXT_ovr0(id);
    
  end;
  
  wglExtensionsStringEXT = static class
    
    private [Result: MarshalAs(UnmanagedType.LPStr)] static function _z_GetExtensionsStringEXT_ovr0: string;
    external 'opengl32.dll' name 'wglGetExtensionsStringEXT';
    public static z_GetExtensionsStringEXT_ovr0: function: string := _z_GetExtensionsStringEXT_ovr0;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function GetExtensionsStringEXT: string := z_GetExtensionsStringEXT_ovr0;
    
  end;
  
  wglMakeCurrentReadEXT = static class
    
    private static function _z_MakeContextCurrentEXT_ovr0(hDrawDC: GDI_DC; hReadDC: GDI_DC; hglrc: GLContext): UInt32;
    external 'opengl32.dll' name 'wglMakeContextCurrentEXT';
    public static z_MakeContextCurrentEXT_ovr0 := _z_MakeContextCurrentEXT_ovr0;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function MakeContextCurrentEXT(hDrawDC: GDI_DC; hReadDC: GDI_DC; hglrc: GLContext): UInt32 := z_MakeContextCurrentEXT_ovr0(hDrawDC, hReadDC, hglrc);
    
    private static function _z_GetCurrentReadDCEXT_ovr0: GDI_DC;
    external 'opengl32.dll' name 'wglGetCurrentReadDCEXT';
    public static z_GetCurrentReadDCEXT_ovr0: function: GDI_DC := _z_GetCurrentReadDCEXT_ovr0;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function GetCurrentReadDCEXT: GDI_DC := z_GetCurrentReadDCEXT_ovr0;
    
  end;
  
  wglPbufferEXT = static class
    
    private static function _z_CreatePbufferEXT_ovr0(hDC: GDI_DC; iPixelFormat: Int32; iWidth: Int32; iHeight: Int32; [MarshalAs(UnmanagedType.LPArray)] piAttribList: array of Int32): HPBUFFER;
    external 'opengl32.dll' name 'wglCreatePbufferEXT';
    public static z_CreatePbufferEXT_ovr0 := _z_CreatePbufferEXT_ovr0;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function CreatePbufferEXT(hDC: GDI_DC; iPixelFormat: Int32; iWidth: Int32; iHeight: Int32; piAttribList: array of Int32): HPBUFFER := z_CreatePbufferEXT_ovr0(hDC, iPixelFormat, iWidth, iHeight, piAttribList);
    private static function _z_CreatePbufferEXT_ovr1(hDC: GDI_DC; iPixelFormat: Int32; iWidth: Int32; iHeight: Int32; var piAttribList: Int32): HPBUFFER;
    external 'opengl32.dll' name 'wglCreatePbufferEXT';
    public static z_CreatePbufferEXT_ovr1 := _z_CreatePbufferEXT_ovr1;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function CreatePbufferEXT(hDC: GDI_DC; iPixelFormat: Int32; iWidth: Int32; iHeight: Int32; var piAttribList: Int32): HPBUFFER := z_CreatePbufferEXT_ovr1(hDC, iPixelFormat, iWidth, iHeight, piAttribList);
    private static function _z_CreatePbufferEXT_ovr2(hDC: GDI_DC; iPixelFormat: Int32; iWidth: Int32; iHeight: Int32; piAttribList: IntPtr): HPBUFFER;
    external 'opengl32.dll' name 'wglCreatePbufferEXT';
    public static z_CreatePbufferEXT_ovr2 := _z_CreatePbufferEXT_ovr2;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function CreatePbufferEXT(hDC: GDI_DC; iPixelFormat: Int32; iWidth: Int32; iHeight: Int32; piAttribList: IntPtr): HPBUFFER := z_CreatePbufferEXT_ovr2(hDC, iPixelFormat, iWidth, iHeight, piAttribList);
    
    private static function _z_GetPbufferDCEXT_ovr0(_hPbuffer: HPBUFFER): GDI_DC;
    external 'opengl32.dll' name 'wglGetPbufferDCEXT';
    public static z_GetPbufferDCEXT_ovr0 := _z_GetPbufferDCEXT_ovr0;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function GetPbufferDCEXT(_hPbuffer: HPBUFFER): GDI_DC := z_GetPbufferDCEXT_ovr0(_hPbuffer);
    
    private static function _z_ReleasePbufferDCEXT_ovr0(_hPbuffer: HPBUFFER; hDC: GDI_DC): Int32;
    external 'opengl32.dll' name 'wglReleasePbufferDCEXT';
    public static z_ReleasePbufferDCEXT_ovr0 := _z_ReleasePbufferDCEXT_ovr0;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function ReleasePbufferDCEXT(_hPbuffer: HPBUFFER; hDC: GDI_DC): Int32 := z_ReleasePbufferDCEXT_ovr0(_hPbuffer, hDC);
    
    private static function _z_DestroyPbufferEXT_ovr0(_hPbuffer: HPBUFFER): UInt32;
    external 'opengl32.dll' name 'wglDestroyPbufferEXT';
    public static z_DestroyPbufferEXT_ovr0 := _z_DestroyPbufferEXT_ovr0;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function DestroyPbufferEXT(_hPbuffer: HPBUFFER): UInt32 := z_DestroyPbufferEXT_ovr0(_hPbuffer);
    
    private static function _z_QueryPbufferEXT_ovr0(_hPbuffer: HPBUFFER; iAttribute: Int32; [MarshalAs(UnmanagedType.LPArray)] piValue: array of Int32): UInt32;
    external 'opengl32.dll' name 'wglQueryPbufferEXT';
    public static z_QueryPbufferEXT_ovr0 := _z_QueryPbufferEXT_ovr0;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function QueryPbufferEXT(_hPbuffer: HPBUFFER; iAttribute: Int32; piValue: array of Int32): UInt32 := z_QueryPbufferEXT_ovr0(_hPbuffer, iAttribute, piValue);
    private static function _z_QueryPbufferEXT_ovr1(_hPbuffer: HPBUFFER; iAttribute: Int32; var piValue: Int32): UInt32;
    external 'opengl32.dll' name 'wglQueryPbufferEXT';
    public static z_QueryPbufferEXT_ovr1 := _z_QueryPbufferEXT_ovr1;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function QueryPbufferEXT(_hPbuffer: HPBUFFER; iAttribute: Int32; var piValue: Int32): UInt32 := z_QueryPbufferEXT_ovr1(_hPbuffer, iAttribute, piValue);
    private static function _z_QueryPbufferEXT_ovr2(_hPbuffer: HPBUFFER; iAttribute: Int32; piValue: IntPtr): UInt32;
    external 'opengl32.dll' name 'wglQueryPbufferEXT';
    public static z_QueryPbufferEXT_ovr2 := _z_QueryPbufferEXT_ovr2;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function QueryPbufferEXT(_hPbuffer: HPBUFFER; iAttribute: Int32; piValue: IntPtr): UInt32 := z_QueryPbufferEXT_ovr2(_hPbuffer, iAttribute, piValue);
    
  end;
  
  wglPixelFormatEXT = static class
    
    private static function _z_GetPixelFormatAttribivEXT_ovr0(hdc: GDI_DC; iPixelFormat: Int32; iLayerPlane: Int32; nAttributes: UInt32; [MarshalAs(UnmanagedType.LPArray)] piAttributes: array of Int32; [MarshalAs(UnmanagedType.LPArray)] piValues: array of Int32): UInt32;
    external 'opengl32.dll' name 'wglGetPixelFormatAttribivEXT';
    public static z_GetPixelFormatAttribivEXT_ovr0 := _z_GetPixelFormatAttribivEXT_ovr0;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function GetPixelFormatAttribivEXT(hdc: GDI_DC; iPixelFormat: Int32; iLayerPlane: Int32; nAttributes: UInt32; piAttributes: array of Int32; piValues: array of Int32): UInt32 := z_GetPixelFormatAttribivEXT_ovr0(hdc, iPixelFormat, iLayerPlane, nAttributes, piAttributes, piValues);
    private static function _z_GetPixelFormatAttribivEXT_ovr1(hdc: GDI_DC; iPixelFormat: Int32; iLayerPlane: Int32; nAttributes: UInt32; [MarshalAs(UnmanagedType.LPArray)] piAttributes: array of Int32; var piValues: Int32): UInt32;
    external 'opengl32.dll' name 'wglGetPixelFormatAttribivEXT';
    public static z_GetPixelFormatAttribivEXT_ovr1 := _z_GetPixelFormatAttribivEXT_ovr1;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function GetPixelFormatAttribivEXT(hdc: GDI_DC; iPixelFormat: Int32; iLayerPlane: Int32; nAttributes: UInt32; piAttributes: array of Int32; var piValues: Int32): UInt32 := z_GetPixelFormatAttribivEXT_ovr1(hdc, iPixelFormat, iLayerPlane, nAttributes, piAttributes, piValues);
    private static function _z_GetPixelFormatAttribivEXT_ovr2(hdc: GDI_DC; iPixelFormat: Int32; iLayerPlane: Int32; nAttributes: UInt32; [MarshalAs(UnmanagedType.LPArray)] piAttributes: array of Int32; piValues: IntPtr): UInt32;
    external 'opengl32.dll' name 'wglGetPixelFormatAttribivEXT';
    public static z_GetPixelFormatAttribivEXT_ovr2 := _z_GetPixelFormatAttribivEXT_ovr2;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function GetPixelFormatAttribivEXT(hdc: GDI_DC; iPixelFormat: Int32; iLayerPlane: Int32; nAttributes: UInt32; piAttributes: array of Int32; piValues: IntPtr): UInt32 := z_GetPixelFormatAttribivEXT_ovr2(hdc, iPixelFormat, iLayerPlane, nAttributes, piAttributes, piValues);
    private static function _z_GetPixelFormatAttribivEXT_ovr3(hdc: GDI_DC; iPixelFormat: Int32; iLayerPlane: Int32; nAttributes: UInt32; var piAttributes: Int32; [MarshalAs(UnmanagedType.LPArray)] piValues: array of Int32): UInt32;
    external 'opengl32.dll' name 'wglGetPixelFormatAttribivEXT';
    public static z_GetPixelFormatAttribivEXT_ovr3 := _z_GetPixelFormatAttribivEXT_ovr3;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function GetPixelFormatAttribivEXT(hdc: GDI_DC; iPixelFormat: Int32; iLayerPlane: Int32; nAttributes: UInt32; var piAttributes: Int32; piValues: array of Int32): UInt32 := z_GetPixelFormatAttribivEXT_ovr3(hdc, iPixelFormat, iLayerPlane, nAttributes, piAttributes, piValues);
    private static function _z_GetPixelFormatAttribivEXT_ovr4(hdc: GDI_DC; iPixelFormat: Int32; iLayerPlane: Int32; nAttributes: UInt32; var piAttributes: Int32; var piValues: Int32): UInt32;
    external 'opengl32.dll' name 'wglGetPixelFormatAttribivEXT';
    public static z_GetPixelFormatAttribivEXT_ovr4 := _z_GetPixelFormatAttribivEXT_ovr4;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function GetPixelFormatAttribivEXT(hdc: GDI_DC; iPixelFormat: Int32; iLayerPlane: Int32; nAttributes: UInt32; var piAttributes: Int32; var piValues: Int32): UInt32 := z_GetPixelFormatAttribivEXT_ovr4(hdc, iPixelFormat, iLayerPlane, nAttributes, piAttributes, piValues);
    private static function _z_GetPixelFormatAttribivEXT_ovr5(hdc: GDI_DC; iPixelFormat: Int32; iLayerPlane: Int32; nAttributes: UInt32; var piAttributes: Int32; piValues: IntPtr): UInt32;
    external 'opengl32.dll' name 'wglGetPixelFormatAttribivEXT';
    public static z_GetPixelFormatAttribivEXT_ovr5 := _z_GetPixelFormatAttribivEXT_ovr5;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function GetPixelFormatAttribivEXT(hdc: GDI_DC; iPixelFormat: Int32; iLayerPlane: Int32; nAttributes: UInt32; var piAttributes: Int32; piValues: IntPtr): UInt32 := z_GetPixelFormatAttribivEXT_ovr5(hdc, iPixelFormat, iLayerPlane, nAttributes, piAttributes, piValues);
    private static function _z_GetPixelFormatAttribivEXT_ovr6(hdc: GDI_DC; iPixelFormat: Int32; iLayerPlane: Int32; nAttributes: UInt32; piAttributes: IntPtr; [MarshalAs(UnmanagedType.LPArray)] piValues: array of Int32): UInt32;
    external 'opengl32.dll' name 'wglGetPixelFormatAttribivEXT';
    public static z_GetPixelFormatAttribivEXT_ovr6 := _z_GetPixelFormatAttribivEXT_ovr6;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function GetPixelFormatAttribivEXT(hdc: GDI_DC; iPixelFormat: Int32; iLayerPlane: Int32; nAttributes: UInt32; piAttributes: IntPtr; piValues: array of Int32): UInt32 := z_GetPixelFormatAttribivEXT_ovr6(hdc, iPixelFormat, iLayerPlane, nAttributes, piAttributes, piValues);
    private static function _z_GetPixelFormatAttribivEXT_ovr7(hdc: GDI_DC; iPixelFormat: Int32; iLayerPlane: Int32; nAttributes: UInt32; piAttributes: IntPtr; var piValues: Int32): UInt32;
    external 'opengl32.dll' name 'wglGetPixelFormatAttribivEXT';
    public static z_GetPixelFormatAttribivEXT_ovr7 := _z_GetPixelFormatAttribivEXT_ovr7;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function GetPixelFormatAttribivEXT(hdc: GDI_DC; iPixelFormat: Int32; iLayerPlane: Int32; nAttributes: UInt32; piAttributes: IntPtr; var piValues: Int32): UInt32 := z_GetPixelFormatAttribivEXT_ovr7(hdc, iPixelFormat, iLayerPlane, nAttributes, piAttributes, piValues);
    private static function _z_GetPixelFormatAttribivEXT_ovr8(hdc: GDI_DC; iPixelFormat: Int32; iLayerPlane: Int32; nAttributes: UInt32; piAttributes: IntPtr; piValues: IntPtr): UInt32;
    external 'opengl32.dll' name 'wglGetPixelFormatAttribivEXT';
    public static z_GetPixelFormatAttribivEXT_ovr8 := _z_GetPixelFormatAttribivEXT_ovr8;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function GetPixelFormatAttribivEXT(hdc: GDI_DC; iPixelFormat: Int32; iLayerPlane: Int32; nAttributes: UInt32; piAttributes: IntPtr; piValues: IntPtr): UInt32 := z_GetPixelFormatAttribivEXT_ovr8(hdc, iPixelFormat, iLayerPlane, nAttributes, piAttributes, piValues);
    
    private static function _z_GetPixelFormatAttribfvEXT_ovr0(hdc: GDI_DC; iPixelFormat: Int32; iLayerPlane: Int32; nAttributes: UInt32; [MarshalAs(UnmanagedType.LPArray)] piAttributes: array of Int32; [MarshalAs(UnmanagedType.LPArray)] pfValues: array of single): UInt32;
    external 'opengl32.dll' name 'wglGetPixelFormatAttribfvEXT';
    public static z_GetPixelFormatAttribfvEXT_ovr0 := _z_GetPixelFormatAttribfvEXT_ovr0;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function GetPixelFormatAttribfvEXT(hdc: GDI_DC; iPixelFormat: Int32; iLayerPlane: Int32; nAttributes: UInt32; piAttributes: array of Int32; pfValues: array of single): UInt32 := z_GetPixelFormatAttribfvEXT_ovr0(hdc, iPixelFormat, iLayerPlane, nAttributes, piAttributes, pfValues);
    private static function _z_GetPixelFormatAttribfvEXT_ovr1(hdc: GDI_DC; iPixelFormat: Int32; iLayerPlane: Int32; nAttributes: UInt32; [MarshalAs(UnmanagedType.LPArray)] piAttributes: array of Int32; var pfValues: single): UInt32;
    external 'opengl32.dll' name 'wglGetPixelFormatAttribfvEXT';
    public static z_GetPixelFormatAttribfvEXT_ovr1 := _z_GetPixelFormatAttribfvEXT_ovr1;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function GetPixelFormatAttribfvEXT(hdc: GDI_DC; iPixelFormat: Int32; iLayerPlane: Int32; nAttributes: UInt32; piAttributes: array of Int32; var pfValues: single): UInt32 := z_GetPixelFormatAttribfvEXT_ovr1(hdc, iPixelFormat, iLayerPlane, nAttributes, piAttributes, pfValues);
    private static function _z_GetPixelFormatAttribfvEXT_ovr2(hdc: GDI_DC; iPixelFormat: Int32; iLayerPlane: Int32; nAttributes: UInt32; [MarshalAs(UnmanagedType.LPArray)] piAttributes: array of Int32; pfValues: IntPtr): UInt32;
    external 'opengl32.dll' name 'wglGetPixelFormatAttribfvEXT';
    public static z_GetPixelFormatAttribfvEXT_ovr2 := _z_GetPixelFormatAttribfvEXT_ovr2;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function GetPixelFormatAttribfvEXT(hdc: GDI_DC; iPixelFormat: Int32; iLayerPlane: Int32; nAttributes: UInt32; piAttributes: array of Int32; pfValues: IntPtr): UInt32 := z_GetPixelFormatAttribfvEXT_ovr2(hdc, iPixelFormat, iLayerPlane, nAttributes, piAttributes, pfValues);
    private static function _z_GetPixelFormatAttribfvEXT_ovr3(hdc: GDI_DC; iPixelFormat: Int32; iLayerPlane: Int32; nAttributes: UInt32; var piAttributes: Int32; [MarshalAs(UnmanagedType.LPArray)] pfValues: array of single): UInt32;
    external 'opengl32.dll' name 'wglGetPixelFormatAttribfvEXT';
    public static z_GetPixelFormatAttribfvEXT_ovr3 := _z_GetPixelFormatAttribfvEXT_ovr3;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function GetPixelFormatAttribfvEXT(hdc: GDI_DC; iPixelFormat: Int32; iLayerPlane: Int32; nAttributes: UInt32; var piAttributes: Int32; pfValues: array of single): UInt32 := z_GetPixelFormatAttribfvEXT_ovr3(hdc, iPixelFormat, iLayerPlane, nAttributes, piAttributes, pfValues);
    private static function _z_GetPixelFormatAttribfvEXT_ovr4(hdc: GDI_DC; iPixelFormat: Int32; iLayerPlane: Int32; nAttributes: UInt32; var piAttributes: Int32; var pfValues: single): UInt32;
    external 'opengl32.dll' name 'wglGetPixelFormatAttribfvEXT';
    public static z_GetPixelFormatAttribfvEXT_ovr4 := _z_GetPixelFormatAttribfvEXT_ovr4;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function GetPixelFormatAttribfvEXT(hdc: GDI_DC; iPixelFormat: Int32; iLayerPlane: Int32; nAttributes: UInt32; var piAttributes: Int32; var pfValues: single): UInt32 := z_GetPixelFormatAttribfvEXT_ovr4(hdc, iPixelFormat, iLayerPlane, nAttributes, piAttributes, pfValues);
    private static function _z_GetPixelFormatAttribfvEXT_ovr5(hdc: GDI_DC; iPixelFormat: Int32; iLayerPlane: Int32; nAttributes: UInt32; var piAttributes: Int32; pfValues: IntPtr): UInt32;
    external 'opengl32.dll' name 'wglGetPixelFormatAttribfvEXT';
    public static z_GetPixelFormatAttribfvEXT_ovr5 := _z_GetPixelFormatAttribfvEXT_ovr5;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function GetPixelFormatAttribfvEXT(hdc: GDI_DC; iPixelFormat: Int32; iLayerPlane: Int32; nAttributes: UInt32; var piAttributes: Int32; pfValues: IntPtr): UInt32 := z_GetPixelFormatAttribfvEXT_ovr5(hdc, iPixelFormat, iLayerPlane, nAttributes, piAttributes, pfValues);
    private static function _z_GetPixelFormatAttribfvEXT_ovr6(hdc: GDI_DC; iPixelFormat: Int32; iLayerPlane: Int32; nAttributes: UInt32; piAttributes: IntPtr; [MarshalAs(UnmanagedType.LPArray)] pfValues: array of single): UInt32;
    external 'opengl32.dll' name 'wglGetPixelFormatAttribfvEXT';
    public static z_GetPixelFormatAttribfvEXT_ovr6 := _z_GetPixelFormatAttribfvEXT_ovr6;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function GetPixelFormatAttribfvEXT(hdc: GDI_DC; iPixelFormat: Int32; iLayerPlane: Int32; nAttributes: UInt32; piAttributes: IntPtr; pfValues: array of single): UInt32 := z_GetPixelFormatAttribfvEXT_ovr6(hdc, iPixelFormat, iLayerPlane, nAttributes, piAttributes, pfValues);
    private static function _z_GetPixelFormatAttribfvEXT_ovr7(hdc: GDI_DC; iPixelFormat: Int32; iLayerPlane: Int32; nAttributes: UInt32; piAttributes: IntPtr; var pfValues: single): UInt32;
    external 'opengl32.dll' name 'wglGetPixelFormatAttribfvEXT';
    public static z_GetPixelFormatAttribfvEXT_ovr7 := _z_GetPixelFormatAttribfvEXT_ovr7;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function GetPixelFormatAttribfvEXT(hdc: GDI_DC; iPixelFormat: Int32; iLayerPlane: Int32; nAttributes: UInt32; piAttributes: IntPtr; var pfValues: single): UInt32 := z_GetPixelFormatAttribfvEXT_ovr7(hdc, iPixelFormat, iLayerPlane, nAttributes, piAttributes, pfValues);
    private static function _z_GetPixelFormatAttribfvEXT_ovr8(hdc: GDI_DC; iPixelFormat: Int32; iLayerPlane: Int32; nAttributes: UInt32; piAttributes: IntPtr; pfValues: IntPtr): UInt32;
    external 'opengl32.dll' name 'wglGetPixelFormatAttribfvEXT';
    public static z_GetPixelFormatAttribfvEXT_ovr8 := _z_GetPixelFormatAttribfvEXT_ovr8;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function GetPixelFormatAttribfvEXT(hdc: GDI_DC; iPixelFormat: Int32; iLayerPlane: Int32; nAttributes: UInt32; piAttributes: IntPtr; pfValues: IntPtr): UInt32 := z_GetPixelFormatAttribfvEXT_ovr8(hdc, iPixelFormat, iLayerPlane, nAttributes, piAttributes, pfValues);
    
    private static function _z_ChoosePixelFormatEXT_ovr0(hdc: GDI_DC; [MarshalAs(UnmanagedType.LPArray)] piAttribIList: array of Int32; [MarshalAs(UnmanagedType.LPArray)] pfAttribFList: array of single; nMaxFormats: UInt32; [MarshalAs(UnmanagedType.LPArray)] piFormats: array of Int32; [MarshalAs(UnmanagedType.LPArray)] nNumFormats: array of UInt32): UInt32;
    external 'opengl32.dll' name 'wglChoosePixelFormatEXT';
    public static z_ChoosePixelFormatEXT_ovr0 := _z_ChoosePixelFormatEXT_ovr0;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function ChoosePixelFormatEXT(hdc: GDI_DC; piAttribIList: array of Int32; pfAttribFList: array of single; nMaxFormats: UInt32; piFormats: array of Int32; nNumFormats: array of UInt32): UInt32 := z_ChoosePixelFormatEXT_ovr0(hdc, piAttribIList, pfAttribFList, nMaxFormats, piFormats, nNumFormats);
    private static function _z_ChoosePixelFormatEXT_ovr1(hdc: GDI_DC; [MarshalAs(UnmanagedType.LPArray)] piAttribIList: array of Int32; [MarshalAs(UnmanagedType.LPArray)] pfAttribFList: array of single; nMaxFormats: UInt32; [MarshalAs(UnmanagedType.LPArray)] piFormats: array of Int32; var nNumFormats: UInt32): UInt32;
    external 'opengl32.dll' name 'wglChoosePixelFormatEXT';
    public static z_ChoosePixelFormatEXT_ovr1 := _z_ChoosePixelFormatEXT_ovr1;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function ChoosePixelFormatEXT(hdc: GDI_DC; piAttribIList: array of Int32; pfAttribFList: array of single; nMaxFormats: UInt32; piFormats: array of Int32; var nNumFormats: UInt32): UInt32 := z_ChoosePixelFormatEXT_ovr1(hdc, piAttribIList, pfAttribFList, nMaxFormats, piFormats, nNumFormats);
    private static function _z_ChoosePixelFormatEXT_ovr2(hdc: GDI_DC; [MarshalAs(UnmanagedType.LPArray)] piAttribIList: array of Int32; [MarshalAs(UnmanagedType.LPArray)] pfAttribFList: array of single; nMaxFormats: UInt32; [MarshalAs(UnmanagedType.LPArray)] piFormats: array of Int32; nNumFormats: IntPtr): UInt32;
    external 'opengl32.dll' name 'wglChoosePixelFormatEXT';
    public static z_ChoosePixelFormatEXT_ovr2 := _z_ChoosePixelFormatEXT_ovr2;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function ChoosePixelFormatEXT(hdc: GDI_DC; piAttribIList: array of Int32; pfAttribFList: array of single; nMaxFormats: UInt32; piFormats: array of Int32; nNumFormats: IntPtr): UInt32 := z_ChoosePixelFormatEXT_ovr2(hdc, piAttribIList, pfAttribFList, nMaxFormats, piFormats, nNumFormats);
    private static function _z_ChoosePixelFormatEXT_ovr3(hdc: GDI_DC; [MarshalAs(UnmanagedType.LPArray)] piAttribIList: array of Int32; [MarshalAs(UnmanagedType.LPArray)] pfAttribFList: array of single; nMaxFormats: UInt32; var piFormats: Int32; [MarshalAs(UnmanagedType.LPArray)] nNumFormats: array of UInt32): UInt32;
    external 'opengl32.dll' name 'wglChoosePixelFormatEXT';
    public static z_ChoosePixelFormatEXT_ovr3 := _z_ChoosePixelFormatEXT_ovr3;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function ChoosePixelFormatEXT(hdc: GDI_DC; piAttribIList: array of Int32; pfAttribFList: array of single; nMaxFormats: UInt32; var piFormats: Int32; nNumFormats: array of UInt32): UInt32 := z_ChoosePixelFormatEXT_ovr3(hdc, piAttribIList, pfAttribFList, nMaxFormats, piFormats, nNumFormats);
    private static function _z_ChoosePixelFormatEXT_ovr4(hdc: GDI_DC; [MarshalAs(UnmanagedType.LPArray)] piAttribIList: array of Int32; [MarshalAs(UnmanagedType.LPArray)] pfAttribFList: array of single; nMaxFormats: UInt32; var piFormats: Int32; var nNumFormats: UInt32): UInt32;
    external 'opengl32.dll' name 'wglChoosePixelFormatEXT';
    public static z_ChoosePixelFormatEXT_ovr4 := _z_ChoosePixelFormatEXT_ovr4;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function ChoosePixelFormatEXT(hdc: GDI_DC; piAttribIList: array of Int32; pfAttribFList: array of single; nMaxFormats: UInt32; var piFormats: Int32; var nNumFormats: UInt32): UInt32 := z_ChoosePixelFormatEXT_ovr4(hdc, piAttribIList, pfAttribFList, nMaxFormats, piFormats, nNumFormats);
    private static function _z_ChoosePixelFormatEXT_ovr5(hdc: GDI_DC; [MarshalAs(UnmanagedType.LPArray)] piAttribIList: array of Int32; [MarshalAs(UnmanagedType.LPArray)] pfAttribFList: array of single; nMaxFormats: UInt32; var piFormats: Int32; nNumFormats: IntPtr): UInt32;
    external 'opengl32.dll' name 'wglChoosePixelFormatEXT';
    public static z_ChoosePixelFormatEXT_ovr5 := _z_ChoosePixelFormatEXT_ovr5;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function ChoosePixelFormatEXT(hdc: GDI_DC; piAttribIList: array of Int32; pfAttribFList: array of single; nMaxFormats: UInt32; var piFormats: Int32; nNumFormats: IntPtr): UInt32 := z_ChoosePixelFormatEXT_ovr5(hdc, piAttribIList, pfAttribFList, nMaxFormats, piFormats, nNumFormats);
    private static function _z_ChoosePixelFormatEXT_ovr6(hdc: GDI_DC; [MarshalAs(UnmanagedType.LPArray)] piAttribIList: array of Int32; [MarshalAs(UnmanagedType.LPArray)] pfAttribFList: array of single; nMaxFormats: UInt32; piFormats: IntPtr; [MarshalAs(UnmanagedType.LPArray)] nNumFormats: array of UInt32): UInt32;
    external 'opengl32.dll' name 'wglChoosePixelFormatEXT';
    public static z_ChoosePixelFormatEXT_ovr6 := _z_ChoosePixelFormatEXT_ovr6;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function ChoosePixelFormatEXT(hdc: GDI_DC; piAttribIList: array of Int32; pfAttribFList: array of single; nMaxFormats: UInt32; piFormats: IntPtr; nNumFormats: array of UInt32): UInt32 := z_ChoosePixelFormatEXT_ovr6(hdc, piAttribIList, pfAttribFList, nMaxFormats, piFormats, nNumFormats);
    private static function _z_ChoosePixelFormatEXT_ovr7(hdc: GDI_DC; [MarshalAs(UnmanagedType.LPArray)] piAttribIList: array of Int32; [MarshalAs(UnmanagedType.LPArray)] pfAttribFList: array of single; nMaxFormats: UInt32; piFormats: IntPtr; var nNumFormats: UInt32): UInt32;
    external 'opengl32.dll' name 'wglChoosePixelFormatEXT';
    public static z_ChoosePixelFormatEXT_ovr7 := _z_ChoosePixelFormatEXT_ovr7;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function ChoosePixelFormatEXT(hdc: GDI_DC; piAttribIList: array of Int32; pfAttribFList: array of single; nMaxFormats: UInt32; piFormats: IntPtr; var nNumFormats: UInt32): UInt32 := z_ChoosePixelFormatEXT_ovr7(hdc, piAttribIList, pfAttribFList, nMaxFormats, piFormats, nNumFormats);
    private static function _z_ChoosePixelFormatEXT_ovr8(hdc: GDI_DC; [MarshalAs(UnmanagedType.LPArray)] piAttribIList: array of Int32; [MarshalAs(UnmanagedType.LPArray)] pfAttribFList: array of single; nMaxFormats: UInt32; piFormats: IntPtr; nNumFormats: IntPtr): UInt32;
    external 'opengl32.dll' name 'wglChoosePixelFormatEXT';
    public static z_ChoosePixelFormatEXT_ovr8 := _z_ChoosePixelFormatEXT_ovr8;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function ChoosePixelFormatEXT(hdc: GDI_DC; piAttribIList: array of Int32; pfAttribFList: array of single; nMaxFormats: UInt32; piFormats: IntPtr; nNumFormats: IntPtr): UInt32 := z_ChoosePixelFormatEXT_ovr8(hdc, piAttribIList, pfAttribFList, nMaxFormats, piFormats, nNumFormats);
    private static function _z_ChoosePixelFormatEXT_ovr9(hdc: GDI_DC; [MarshalAs(UnmanagedType.LPArray)] piAttribIList: array of Int32; var pfAttribFList: single; nMaxFormats: UInt32; [MarshalAs(UnmanagedType.LPArray)] piFormats: array of Int32; [MarshalAs(UnmanagedType.LPArray)] nNumFormats: array of UInt32): UInt32;
    external 'opengl32.dll' name 'wglChoosePixelFormatEXT';
    public static z_ChoosePixelFormatEXT_ovr9 := _z_ChoosePixelFormatEXT_ovr9;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function ChoosePixelFormatEXT(hdc: GDI_DC; piAttribIList: array of Int32; var pfAttribFList: single; nMaxFormats: UInt32; piFormats: array of Int32; nNumFormats: array of UInt32): UInt32 := z_ChoosePixelFormatEXT_ovr9(hdc, piAttribIList, pfAttribFList, nMaxFormats, piFormats, nNumFormats);
    private static function _z_ChoosePixelFormatEXT_ovr10(hdc: GDI_DC; [MarshalAs(UnmanagedType.LPArray)] piAttribIList: array of Int32; var pfAttribFList: single; nMaxFormats: UInt32; [MarshalAs(UnmanagedType.LPArray)] piFormats: array of Int32; var nNumFormats: UInt32): UInt32;
    external 'opengl32.dll' name 'wglChoosePixelFormatEXT';
    public static z_ChoosePixelFormatEXT_ovr10 := _z_ChoosePixelFormatEXT_ovr10;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function ChoosePixelFormatEXT(hdc: GDI_DC; piAttribIList: array of Int32; var pfAttribFList: single; nMaxFormats: UInt32; piFormats: array of Int32; var nNumFormats: UInt32): UInt32 := z_ChoosePixelFormatEXT_ovr10(hdc, piAttribIList, pfAttribFList, nMaxFormats, piFormats, nNumFormats);
    private static function _z_ChoosePixelFormatEXT_ovr11(hdc: GDI_DC; [MarshalAs(UnmanagedType.LPArray)] piAttribIList: array of Int32; var pfAttribFList: single; nMaxFormats: UInt32; [MarshalAs(UnmanagedType.LPArray)] piFormats: array of Int32; nNumFormats: IntPtr): UInt32;
    external 'opengl32.dll' name 'wglChoosePixelFormatEXT';
    public static z_ChoosePixelFormatEXT_ovr11 := _z_ChoosePixelFormatEXT_ovr11;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function ChoosePixelFormatEXT(hdc: GDI_DC; piAttribIList: array of Int32; var pfAttribFList: single; nMaxFormats: UInt32; piFormats: array of Int32; nNumFormats: IntPtr): UInt32 := z_ChoosePixelFormatEXT_ovr11(hdc, piAttribIList, pfAttribFList, nMaxFormats, piFormats, nNumFormats);
    private static function _z_ChoosePixelFormatEXT_ovr12(hdc: GDI_DC; [MarshalAs(UnmanagedType.LPArray)] piAttribIList: array of Int32; var pfAttribFList: single; nMaxFormats: UInt32; var piFormats: Int32; [MarshalAs(UnmanagedType.LPArray)] nNumFormats: array of UInt32): UInt32;
    external 'opengl32.dll' name 'wglChoosePixelFormatEXT';
    public static z_ChoosePixelFormatEXT_ovr12 := _z_ChoosePixelFormatEXT_ovr12;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function ChoosePixelFormatEXT(hdc: GDI_DC; piAttribIList: array of Int32; var pfAttribFList: single; nMaxFormats: UInt32; var piFormats: Int32; nNumFormats: array of UInt32): UInt32 := z_ChoosePixelFormatEXT_ovr12(hdc, piAttribIList, pfAttribFList, nMaxFormats, piFormats, nNumFormats);
    private static function _z_ChoosePixelFormatEXT_ovr13(hdc: GDI_DC; [MarshalAs(UnmanagedType.LPArray)] piAttribIList: array of Int32; var pfAttribFList: single; nMaxFormats: UInt32; var piFormats: Int32; var nNumFormats: UInt32): UInt32;
    external 'opengl32.dll' name 'wglChoosePixelFormatEXT';
    public static z_ChoosePixelFormatEXT_ovr13 := _z_ChoosePixelFormatEXT_ovr13;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function ChoosePixelFormatEXT(hdc: GDI_DC; piAttribIList: array of Int32; var pfAttribFList: single; nMaxFormats: UInt32; var piFormats: Int32; var nNumFormats: UInt32): UInt32 := z_ChoosePixelFormatEXT_ovr13(hdc, piAttribIList, pfAttribFList, nMaxFormats, piFormats, nNumFormats);
    private static function _z_ChoosePixelFormatEXT_ovr14(hdc: GDI_DC; [MarshalAs(UnmanagedType.LPArray)] piAttribIList: array of Int32; var pfAttribFList: single; nMaxFormats: UInt32; var piFormats: Int32; nNumFormats: IntPtr): UInt32;
    external 'opengl32.dll' name 'wglChoosePixelFormatEXT';
    public static z_ChoosePixelFormatEXT_ovr14 := _z_ChoosePixelFormatEXT_ovr14;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function ChoosePixelFormatEXT(hdc: GDI_DC; piAttribIList: array of Int32; var pfAttribFList: single; nMaxFormats: UInt32; var piFormats: Int32; nNumFormats: IntPtr): UInt32 := z_ChoosePixelFormatEXT_ovr14(hdc, piAttribIList, pfAttribFList, nMaxFormats, piFormats, nNumFormats);
    private static function _z_ChoosePixelFormatEXT_ovr15(hdc: GDI_DC; [MarshalAs(UnmanagedType.LPArray)] piAttribIList: array of Int32; var pfAttribFList: single; nMaxFormats: UInt32; piFormats: IntPtr; [MarshalAs(UnmanagedType.LPArray)] nNumFormats: array of UInt32): UInt32;
    external 'opengl32.dll' name 'wglChoosePixelFormatEXT';
    public static z_ChoosePixelFormatEXT_ovr15 := _z_ChoosePixelFormatEXT_ovr15;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function ChoosePixelFormatEXT(hdc: GDI_DC; piAttribIList: array of Int32; var pfAttribFList: single; nMaxFormats: UInt32; piFormats: IntPtr; nNumFormats: array of UInt32): UInt32 := z_ChoosePixelFormatEXT_ovr15(hdc, piAttribIList, pfAttribFList, nMaxFormats, piFormats, nNumFormats);
    private static function _z_ChoosePixelFormatEXT_ovr16(hdc: GDI_DC; [MarshalAs(UnmanagedType.LPArray)] piAttribIList: array of Int32; var pfAttribFList: single; nMaxFormats: UInt32; piFormats: IntPtr; var nNumFormats: UInt32): UInt32;
    external 'opengl32.dll' name 'wglChoosePixelFormatEXT';
    public static z_ChoosePixelFormatEXT_ovr16 := _z_ChoosePixelFormatEXT_ovr16;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function ChoosePixelFormatEXT(hdc: GDI_DC; piAttribIList: array of Int32; var pfAttribFList: single; nMaxFormats: UInt32; piFormats: IntPtr; var nNumFormats: UInt32): UInt32 := z_ChoosePixelFormatEXT_ovr16(hdc, piAttribIList, pfAttribFList, nMaxFormats, piFormats, nNumFormats);
    private static function _z_ChoosePixelFormatEXT_ovr17(hdc: GDI_DC; [MarshalAs(UnmanagedType.LPArray)] piAttribIList: array of Int32; var pfAttribFList: single; nMaxFormats: UInt32; piFormats: IntPtr; nNumFormats: IntPtr): UInt32;
    external 'opengl32.dll' name 'wglChoosePixelFormatEXT';
    public static z_ChoosePixelFormatEXT_ovr17 := _z_ChoosePixelFormatEXT_ovr17;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function ChoosePixelFormatEXT(hdc: GDI_DC; piAttribIList: array of Int32; var pfAttribFList: single; nMaxFormats: UInt32; piFormats: IntPtr; nNumFormats: IntPtr): UInt32 := z_ChoosePixelFormatEXT_ovr17(hdc, piAttribIList, pfAttribFList, nMaxFormats, piFormats, nNumFormats);
    private static function _z_ChoosePixelFormatEXT_ovr18(hdc: GDI_DC; [MarshalAs(UnmanagedType.LPArray)] piAttribIList: array of Int32; pfAttribFList: IntPtr; nMaxFormats: UInt32; [MarshalAs(UnmanagedType.LPArray)] piFormats: array of Int32; [MarshalAs(UnmanagedType.LPArray)] nNumFormats: array of UInt32): UInt32;
    external 'opengl32.dll' name 'wglChoosePixelFormatEXT';
    public static z_ChoosePixelFormatEXT_ovr18 := _z_ChoosePixelFormatEXT_ovr18;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function ChoosePixelFormatEXT(hdc: GDI_DC; piAttribIList: array of Int32; pfAttribFList: IntPtr; nMaxFormats: UInt32; piFormats: array of Int32; nNumFormats: array of UInt32): UInt32 := z_ChoosePixelFormatEXT_ovr18(hdc, piAttribIList, pfAttribFList, nMaxFormats, piFormats, nNumFormats);
    private static function _z_ChoosePixelFormatEXT_ovr19(hdc: GDI_DC; [MarshalAs(UnmanagedType.LPArray)] piAttribIList: array of Int32; pfAttribFList: IntPtr; nMaxFormats: UInt32; [MarshalAs(UnmanagedType.LPArray)] piFormats: array of Int32; var nNumFormats: UInt32): UInt32;
    external 'opengl32.dll' name 'wglChoosePixelFormatEXT';
    public static z_ChoosePixelFormatEXT_ovr19 := _z_ChoosePixelFormatEXT_ovr19;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function ChoosePixelFormatEXT(hdc: GDI_DC; piAttribIList: array of Int32; pfAttribFList: IntPtr; nMaxFormats: UInt32; piFormats: array of Int32; var nNumFormats: UInt32): UInt32 := z_ChoosePixelFormatEXT_ovr19(hdc, piAttribIList, pfAttribFList, nMaxFormats, piFormats, nNumFormats);
    private static function _z_ChoosePixelFormatEXT_ovr20(hdc: GDI_DC; [MarshalAs(UnmanagedType.LPArray)] piAttribIList: array of Int32; pfAttribFList: IntPtr; nMaxFormats: UInt32; [MarshalAs(UnmanagedType.LPArray)] piFormats: array of Int32; nNumFormats: IntPtr): UInt32;
    external 'opengl32.dll' name 'wglChoosePixelFormatEXT';
    public static z_ChoosePixelFormatEXT_ovr20 := _z_ChoosePixelFormatEXT_ovr20;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function ChoosePixelFormatEXT(hdc: GDI_DC; piAttribIList: array of Int32; pfAttribFList: IntPtr; nMaxFormats: UInt32; piFormats: array of Int32; nNumFormats: IntPtr): UInt32 := z_ChoosePixelFormatEXT_ovr20(hdc, piAttribIList, pfAttribFList, nMaxFormats, piFormats, nNumFormats);
    private static function _z_ChoosePixelFormatEXT_ovr21(hdc: GDI_DC; [MarshalAs(UnmanagedType.LPArray)] piAttribIList: array of Int32; pfAttribFList: IntPtr; nMaxFormats: UInt32; var piFormats: Int32; [MarshalAs(UnmanagedType.LPArray)] nNumFormats: array of UInt32): UInt32;
    external 'opengl32.dll' name 'wglChoosePixelFormatEXT';
    public static z_ChoosePixelFormatEXT_ovr21 := _z_ChoosePixelFormatEXT_ovr21;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function ChoosePixelFormatEXT(hdc: GDI_DC; piAttribIList: array of Int32; pfAttribFList: IntPtr; nMaxFormats: UInt32; var piFormats: Int32; nNumFormats: array of UInt32): UInt32 := z_ChoosePixelFormatEXT_ovr21(hdc, piAttribIList, pfAttribFList, nMaxFormats, piFormats, nNumFormats);
    private static function _z_ChoosePixelFormatEXT_ovr22(hdc: GDI_DC; [MarshalAs(UnmanagedType.LPArray)] piAttribIList: array of Int32; pfAttribFList: IntPtr; nMaxFormats: UInt32; var piFormats: Int32; var nNumFormats: UInt32): UInt32;
    external 'opengl32.dll' name 'wglChoosePixelFormatEXT';
    public static z_ChoosePixelFormatEXT_ovr22 := _z_ChoosePixelFormatEXT_ovr22;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function ChoosePixelFormatEXT(hdc: GDI_DC; piAttribIList: array of Int32; pfAttribFList: IntPtr; nMaxFormats: UInt32; var piFormats: Int32; var nNumFormats: UInt32): UInt32 := z_ChoosePixelFormatEXT_ovr22(hdc, piAttribIList, pfAttribFList, nMaxFormats, piFormats, nNumFormats);
    private static function _z_ChoosePixelFormatEXT_ovr23(hdc: GDI_DC; [MarshalAs(UnmanagedType.LPArray)] piAttribIList: array of Int32; pfAttribFList: IntPtr; nMaxFormats: UInt32; var piFormats: Int32; nNumFormats: IntPtr): UInt32;
    external 'opengl32.dll' name 'wglChoosePixelFormatEXT';
    public static z_ChoosePixelFormatEXT_ovr23 := _z_ChoosePixelFormatEXT_ovr23;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function ChoosePixelFormatEXT(hdc: GDI_DC; piAttribIList: array of Int32; pfAttribFList: IntPtr; nMaxFormats: UInt32; var piFormats: Int32; nNumFormats: IntPtr): UInt32 := z_ChoosePixelFormatEXT_ovr23(hdc, piAttribIList, pfAttribFList, nMaxFormats, piFormats, nNumFormats);
    private static function _z_ChoosePixelFormatEXT_ovr24(hdc: GDI_DC; [MarshalAs(UnmanagedType.LPArray)] piAttribIList: array of Int32; pfAttribFList: IntPtr; nMaxFormats: UInt32; piFormats: IntPtr; [MarshalAs(UnmanagedType.LPArray)] nNumFormats: array of UInt32): UInt32;
    external 'opengl32.dll' name 'wglChoosePixelFormatEXT';
    public static z_ChoosePixelFormatEXT_ovr24 := _z_ChoosePixelFormatEXT_ovr24;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function ChoosePixelFormatEXT(hdc: GDI_DC; piAttribIList: array of Int32; pfAttribFList: IntPtr; nMaxFormats: UInt32; piFormats: IntPtr; nNumFormats: array of UInt32): UInt32 := z_ChoosePixelFormatEXT_ovr24(hdc, piAttribIList, pfAttribFList, nMaxFormats, piFormats, nNumFormats);
    private static function _z_ChoosePixelFormatEXT_ovr25(hdc: GDI_DC; [MarshalAs(UnmanagedType.LPArray)] piAttribIList: array of Int32; pfAttribFList: IntPtr; nMaxFormats: UInt32; piFormats: IntPtr; var nNumFormats: UInt32): UInt32;
    external 'opengl32.dll' name 'wglChoosePixelFormatEXT';
    public static z_ChoosePixelFormatEXT_ovr25 := _z_ChoosePixelFormatEXT_ovr25;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function ChoosePixelFormatEXT(hdc: GDI_DC; piAttribIList: array of Int32; pfAttribFList: IntPtr; nMaxFormats: UInt32; piFormats: IntPtr; var nNumFormats: UInt32): UInt32 := z_ChoosePixelFormatEXT_ovr25(hdc, piAttribIList, pfAttribFList, nMaxFormats, piFormats, nNumFormats);
    private static function _z_ChoosePixelFormatEXT_ovr26(hdc: GDI_DC; [MarshalAs(UnmanagedType.LPArray)] piAttribIList: array of Int32; pfAttribFList: IntPtr; nMaxFormats: UInt32; piFormats: IntPtr; nNumFormats: IntPtr): UInt32;
    external 'opengl32.dll' name 'wglChoosePixelFormatEXT';
    public static z_ChoosePixelFormatEXT_ovr26 := _z_ChoosePixelFormatEXT_ovr26;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function ChoosePixelFormatEXT(hdc: GDI_DC; piAttribIList: array of Int32; pfAttribFList: IntPtr; nMaxFormats: UInt32; piFormats: IntPtr; nNumFormats: IntPtr): UInt32 := z_ChoosePixelFormatEXT_ovr26(hdc, piAttribIList, pfAttribFList, nMaxFormats, piFormats, nNumFormats);
    private static function _z_ChoosePixelFormatEXT_ovr27(hdc: GDI_DC; var piAttribIList: Int32; [MarshalAs(UnmanagedType.LPArray)] pfAttribFList: array of single; nMaxFormats: UInt32; [MarshalAs(UnmanagedType.LPArray)] piFormats: array of Int32; [MarshalAs(UnmanagedType.LPArray)] nNumFormats: array of UInt32): UInt32;
    external 'opengl32.dll' name 'wglChoosePixelFormatEXT';
    public static z_ChoosePixelFormatEXT_ovr27 := _z_ChoosePixelFormatEXT_ovr27;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function ChoosePixelFormatEXT(hdc: GDI_DC; var piAttribIList: Int32; pfAttribFList: array of single; nMaxFormats: UInt32; piFormats: array of Int32; nNumFormats: array of UInt32): UInt32 := z_ChoosePixelFormatEXT_ovr27(hdc, piAttribIList, pfAttribFList, nMaxFormats, piFormats, nNumFormats);
    private static function _z_ChoosePixelFormatEXT_ovr28(hdc: GDI_DC; var piAttribIList: Int32; [MarshalAs(UnmanagedType.LPArray)] pfAttribFList: array of single; nMaxFormats: UInt32; [MarshalAs(UnmanagedType.LPArray)] piFormats: array of Int32; var nNumFormats: UInt32): UInt32;
    external 'opengl32.dll' name 'wglChoosePixelFormatEXT';
    public static z_ChoosePixelFormatEXT_ovr28 := _z_ChoosePixelFormatEXT_ovr28;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function ChoosePixelFormatEXT(hdc: GDI_DC; var piAttribIList: Int32; pfAttribFList: array of single; nMaxFormats: UInt32; piFormats: array of Int32; var nNumFormats: UInt32): UInt32 := z_ChoosePixelFormatEXT_ovr28(hdc, piAttribIList, pfAttribFList, nMaxFormats, piFormats, nNumFormats);
    private static function _z_ChoosePixelFormatEXT_ovr29(hdc: GDI_DC; var piAttribIList: Int32; [MarshalAs(UnmanagedType.LPArray)] pfAttribFList: array of single; nMaxFormats: UInt32; [MarshalAs(UnmanagedType.LPArray)] piFormats: array of Int32; nNumFormats: IntPtr): UInt32;
    external 'opengl32.dll' name 'wglChoosePixelFormatEXT';
    public static z_ChoosePixelFormatEXT_ovr29 := _z_ChoosePixelFormatEXT_ovr29;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function ChoosePixelFormatEXT(hdc: GDI_DC; var piAttribIList: Int32; pfAttribFList: array of single; nMaxFormats: UInt32; piFormats: array of Int32; nNumFormats: IntPtr): UInt32 := z_ChoosePixelFormatEXT_ovr29(hdc, piAttribIList, pfAttribFList, nMaxFormats, piFormats, nNumFormats);
    private static function _z_ChoosePixelFormatEXT_ovr30(hdc: GDI_DC; var piAttribIList: Int32; [MarshalAs(UnmanagedType.LPArray)] pfAttribFList: array of single; nMaxFormats: UInt32; var piFormats: Int32; [MarshalAs(UnmanagedType.LPArray)] nNumFormats: array of UInt32): UInt32;
    external 'opengl32.dll' name 'wglChoosePixelFormatEXT';
    public static z_ChoosePixelFormatEXT_ovr30 := _z_ChoosePixelFormatEXT_ovr30;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function ChoosePixelFormatEXT(hdc: GDI_DC; var piAttribIList: Int32; pfAttribFList: array of single; nMaxFormats: UInt32; var piFormats: Int32; nNumFormats: array of UInt32): UInt32 := z_ChoosePixelFormatEXT_ovr30(hdc, piAttribIList, pfAttribFList, nMaxFormats, piFormats, nNumFormats);
    private static function _z_ChoosePixelFormatEXT_ovr31(hdc: GDI_DC; var piAttribIList: Int32; [MarshalAs(UnmanagedType.LPArray)] pfAttribFList: array of single; nMaxFormats: UInt32; var piFormats: Int32; var nNumFormats: UInt32): UInt32;
    external 'opengl32.dll' name 'wglChoosePixelFormatEXT';
    public static z_ChoosePixelFormatEXT_ovr31 := _z_ChoosePixelFormatEXT_ovr31;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function ChoosePixelFormatEXT(hdc: GDI_DC; var piAttribIList: Int32; pfAttribFList: array of single; nMaxFormats: UInt32; var piFormats: Int32; var nNumFormats: UInt32): UInt32 := z_ChoosePixelFormatEXT_ovr31(hdc, piAttribIList, pfAttribFList, nMaxFormats, piFormats, nNumFormats);
    private static function _z_ChoosePixelFormatEXT_ovr32(hdc: GDI_DC; var piAttribIList: Int32; [MarshalAs(UnmanagedType.LPArray)] pfAttribFList: array of single; nMaxFormats: UInt32; var piFormats: Int32; nNumFormats: IntPtr): UInt32;
    external 'opengl32.dll' name 'wglChoosePixelFormatEXT';
    public static z_ChoosePixelFormatEXT_ovr32 := _z_ChoosePixelFormatEXT_ovr32;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function ChoosePixelFormatEXT(hdc: GDI_DC; var piAttribIList: Int32; pfAttribFList: array of single; nMaxFormats: UInt32; var piFormats: Int32; nNumFormats: IntPtr): UInt32 := z_ChoosePixelFormatEXT_ovr32(hdc, piAttribIList, pfAttribFList, nMaxFormats, piFormats, nNumFormats);
    private static function _z_ChoosePixelFormatEXT_ovr33(hdc: GDI_DC; var piAttribIList: Int32; [MarshalAs(UnmanagedType.LPArray)] pfAttribFList: array of single; nMaxFormats: UInt32; piFormats: IntPtr; [MarshalAs(UnmanagedType.LPArray)] nNumFormats: array of UInt32): UInt32;
    external 'opengl32.dll' name 'wglChoosePixelFormatEXT';
    public static z_ChoosePixelFormatEXT_ovr33 := _z_ChoosePixelFormatEXT_ovr33;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function ChoosePixelFormatEXT(hdc: GDI_DC; var piAttribIList: Int32; pfAttribFList: array of single; nMaxFormats: UInt32; piFormats: IntPtr; nNumFormats: array of UInt32): UInt32 := z_ChoosePixelFormatEXT_ovr33(hdc, piAttribIList, pfAttribFList, nMaxFormats, piFormats, nNumFormats);
    private static function _z_ChoosePixelFormatEXT_ovr34(hdc: GDI_DC; var piAttribIList: Int32; [MarshalAs(UnmanagedType.LPArray)] pfAttribFList: array of single; nMaxFormats: UInt32; piFormats: IntPtr; var nNumFormats: UInt32): UInt32;
    external 'opengl32.dll' name 'wglChoosePixelFormatEXT';
    public static z_ChoosePixelFormatEXT_ovr34 := _z_ChoosePixelFormatEXT_ovr34;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function ChoosePixelFormatEXT(hdc: GDI_DC; var piAttribIList: Int32; pfAttribFList: array of single; nMaxFormats: UInt32; piFormats: IntPtr; var nNumFormats: UInt32): UInt32 := z_ChoosePixelFormatEXT_ovr34(hdc, piAttribIList, pfAttribFList, nMaxFormats, piFormats, nNumFormats);
    private static function _z_ChoosePixelFormatEXT_ovr35(hdc: GDI_DC; var piAttribIList: Int32; [MarshalAs(UnmanagedType.LPArray)] pfAttribFList: array of single; nMaxFormats: UInt32; piFormats: IntPtr; nNumFormats: IntPtr): UInt32;
    external 'opengl32.dll' name 'wglChoosePixelFormatEXT';
    public static z_ChoosePixelFormatEXT_ovr35 := _z_ChoosePixelFormatEXT_ovr35;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function ChoosePixelFormatEXT(hdc: GDI_DC; var piAttribIList: Int32; pfAttribFList: array of single; nMaxFormats: UInt32; piFormats: IntPtr; nNumFormats: IntPtr): UInt32 := z_ChoosePixelFormatEXT_ovr35(hdc, piAttribIList, pfAttribFList, nMaxFormats, piFormats, nNumFormats);
    private static function _z_ChoosePixelFormatEXT_ovr36(hdc: GDI_DC; var piAttribIList: Int32; var pfAttribFList: single; nMaxFormats: UInt32; [MarshalAs(UnmanagedType.LPArray)] piFormats: array of Int32; [MarshalAs(UnmanagedType.LPArray)] nNumFormats: array of UInt32): UInt32;
    external 'opengl32.dll' name 'wglChoosePixelFormatEXT';
    public static z_ChoosePixelFormatEXT_ovr36 := _z_ChoosePixelFormatEXT_ovr36;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function ChoosePixelFormatEXT(hdc: GDI_DC; var piAttribIList: Int32; var pfAttribFList: single; nMaxFormats: UInt32; piFormats: array of Int32; nNumFormats: array of UInt32): UInt32 := z_ChoosePixelFormatEXT_ovr36(hdc, piAttribIList, pfAttribFList, nMaxFormats, piFormats, nNumFormats);
    private static function _z_ChoosePixelFormatEXT_ovr37(hdc: GDI_DC; var piAttribIList: Int32; var pfAttribFList: single; nMaxFormats: UInt32; [MarshalAs(UnmanagedType.LPArray)] piFormats: array of Int32; var nNumFormats: UInt32): UInt32;
    external 'opengl32.dll' name 'wglChoosePixelFormatEXT';
    public static z_ChoosePixelFormatEXT_ovr37 := _z_ChoosePixelFormatEXT_ovr37;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function ChoosePixelFormatEXT(hdc: GDI_DC; var piAttribIList: Int32; var pfAttribFList: single; nMaxFormats: UInt32; piFormats: array of Int32; var nNumFormats: UInt32): UInt32 := z_ChoosePixelFormatEXT_ovr37(hdc, piAttribIList, pfAttribFList, nMaxFormats, piFormats, nNumFormats);
    private static function _z_ChoosePixelFormatEXT_ovr38(hdc: GDI_DC; var piAttribIList: Int32; var pfAttribFList: single; nMaxFormats: UInt32; [MarshalAs(UnmanagedType.LPArray)] piFormats: array of Int32; nNumFormats: IntPtr): UInt32;
    external 'opengl32.dll' name 'wglChoosePixelFormatEXT';
    public static z_ChoosePixelFormatEXT_ovr38 := _z_ChoosePixelFormatEXT_ovr38;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function ChoosePixelFormatEXT(hdc: GDI_DC; var piAttribIList: Int32; var pfAttribFList: single; nMaxFormats: UInt32; piFormats: array of Int32; nNumFormats: IntPtr): UInt32 := z_ChoosePixelFormatEXT_ovr38(hdc, piAttribIList, pfAttribFList, nMaxFormats, piFormats, nNumFormats);
    private static function _z_ChoosePixelFormatEXT_ovr39(hdc: GDI_DC; var piAttribIList: Int32; var pfAttribFList: single; nMaxFormats: UInt32; var piFormats: Int32; [MarshalAs(UnmanagedType.LPArray)] nNumFormats: array of UInt32): UInt32;
    external 'opengl32.dll' name 'wglChoosePixelFormatEXT';
    public static z_ChoosePixelFormatEXT_ovr39 := _z_ChoosePixelFormatEXT_ovr39;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function ChoosePixelFormatEXT(hdc: GDI_DC; var piAttribIList: Int32; var pfAttribFList: single; nMaxFormats: UInt32; var piFormats: Int32; nNumFormats: array of UInt32): UInt32 := z_ChoosePixelFormatEXT_ovr39(hdc, piAttribIList, pfAttribFList, nMaxFormats, piFormats, nNumFormats);
    private static function _z_ChoosePixelFormatEXT_ovr40(hdc: GDI_DC; var piAttribIList: Int32; var pfAttribFList: single; nMaxFormats: UInt32; var piFormats: Int32; var nNumFormats: UInt32): UInt32;
    external 'opengl32.dll' name 'wglChoosePixelFormatEXT';
    public static z_ChoosePixelFormatEXT_ovr40 := _z_ChoosePixelFormatEXT_ovr40;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function ChoosePixelFormatEXT(hdc: GDI_DC; var piAttribIList: Int32; var pfAttribFList: single; nMaxFormats: UInt32; var piFormats: Int32; var nNumFormats: UInt32): UInt32 := z_ChoosePixelFormatEXT_ovr40(hdc, piAttribIList, pfAttribFList, nMaxFormats, piFormats, nNumFormats);
    private static function _z_ChoosePixelFormatEXT_ovr41(hdc: GDI_DC; var piAttribIList: Int32; var pfAttribFList: single; nMaxFormats: UInt32; var piFormats: Int32; nNumFormats: IntPtr): UInt32;
    external 'opengl32.dll' name 'wglChoosePixelFormatEXT';
    public static z_ChoosePixelFormatEXT_ovr41 := _z_ChoosePixelFormatEXT_ovr41;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function ChoosePixelFormatEXT(hdc: GDI_DC; var piAttribIList: Int32; var pfAttribFList: single; nMaxFormats: UInt32; var piFormats: Int32; nNumFormats: IntPtr): UInt32 := z_ChoosePixelFormatEXT_ovr41(hdc, piAttribIList, pfAttribFList, nMaxFormats, piFormats, nNumFormats);
    private static function _z_ChoosePixelFormatEXT_ovr42(hdc: GDI_DC; var piAttribIList: Int32; var pfAttribFList: single; nMaxFormats: UInt32; piFormats: IntPtr; [MarshalAs(UnmanagedType.LPArray)] nNumFormats: array of UInt32): UInt32;
    external 'opengl32.dll' name 'wglChoosePixelFormatEXT';
    public static z_ChoosePixelFormatEXT_ovr42 := _z_ChoosePixelFormatEXT_ovr42;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function ChoosePixelFormatEXT(hdc: GDI_DC; var piAttribIList: Int32; var pfAttribFList: single; nMaxFormats: UInt32; piFormats: IntPtr; nNumFormats: array of UInt32): UInt32 := z_ChoosePixelFormatEXT_ovr42(hdc, piAttribIList, pfAttribFList, nMaxFormats, piFormats, nNumFormats);
    private static function _z_ChoosePixelFormatEXT_ovr43(hdc: GDI_DC; var piAttribIList: Int32; var pfAttribFList: single; nMaxFormats: UInt32; piFormats: IntPtr; var nNumFormats: UInt32): UInt32;
    external 'opengl32.dll' name 'wglChoosePixelFormatEXT';
    public static z_ChoosePixelFormatEXT_ovr43 := _z_ChoosePixelFormatEXT_ovr43;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function ChoosePixelFormatEXT(hdc: GDI_DC; var piAttribIList: Int32; var pfAttribFList: single; nMaxFormats: UInt32; piFormats: IntPtr; var nNumFormats: UInt32): UInt32 := z_ChoosePixelFormatEXT_ovr43(hdc, piAttribIList, pfAttribFList, nMaxFormats, piFormats, nNumFormats);
    private static function _z_ChoosePixelFormatEXT_ovr44(hdc: GDI_DC; var piAttribIList: Int32; var pfAttribFList: single; nMaxFormats: UInt32; piFormats: IntPtr; nNumFormats: IntPtr): UInt32;
    external 'opengl32.dll' name 'wglChoosePixelFormatEXT';
    public static z_ChoosePixelFormatEXT_ovr44 := _z_ChoosePixelFormatEXT_ovr44;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function ChoosePixelFormatEXT(hdc: GDI_DC; var piAttribIList: Int32; var pfAttribFList: single; nMaxFormats: UInt32; piFormats: IntPtr; nNumFormats: IntPtr): UInt32 := z_ChoosePixelFormatEXT_ovr44(hdc, piAttribIList, pfAttribFList, nMaxFormats, piFormats, nNumFormats);
    private static function _z_ChoosePixelFormatEXT_ovr45(hdc: GDI_DC; var piAttribIList: Int32; pfAttribFList: IntPtr; nMaxFormats: UInt32; [MarshalAs(UnmanagedType.LPArray)] piFormats: array of Int32; [MarshalAs(UnmanagedType.LPArray)] nNumFormats: array of UInt32): UInt32;
    external 'opengl32.dll' name 'wglChoosePixelFormatEXT';
    public static z_ChoosePixelFormatEXT_ovr45 := _z_ChoosePixelFormatEXT_ovr45;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function ChoosePixelFormatEXT(hdc: GDI_DC; var piAttribIList: Int32; pfAttribFList: IntPtr; nMaxFormats: UInt32; piFormats: array of Int32; nNumFormats: array of UInt32): UInt32 := z_ChoosePixelFormatEXT_ovr45(hdc, piAttribIList, pfAttribFList, nMaxFormats, piFormats, nNumFormats);
    private static function _z_ChoosePixelFormatEXT_ovr46(hdc: GDI_DC; var piAttribIList: Int32; pfAttribFList: IntPtr; nMaxFormats: UInt32; [MarshalAs(UnmanagedType.LPArray)] piFormats: array of Int32; var nNumFormats: UInt32): UInt32;
    external 'opengl32.dll' name 'wglChoosePixelFormatEXT';
    public static z_ChoosePixelFormatEXT_ovr46 := _z_ChoosePixelFormatEXT_ovr46;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function ChoosePixelFormatEXT(hdc: GDI_DC; var piAttribIList: Int32; pfAttribFList: IntPtr; nMaxFormats: UInt32; piFormats: array of Int32; var nNumFormats: UInt32): UInt32 := z_ChoosePixelFormatEXT_ovr46(hdc, piAttribIList, pfAttribFList, nMaxFormats, piFormats, nNumFormats);
    private static function _z_ChoosePixelFormatEXT_ovr47(hdc: GDI_DC; var piAttribIList: Int32; pfAttribFList: IntPtr; nMaxFormats: UInt32; [MarshalAs(UnmanagedType.LPArray)] piFormats: array of Int32; nNumFormats: IntPtr): UInt32;
    external 'opengl32.dll' name 'wglChoosePixelFormatEXT';
    public static z_ChoosePixelFormatEXT_ovr47 := _z_ChoosePixelFormatEXT_ovr47;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function ChoosePixelFormatEXT(hdc: GDI_DC; var piAttribIList: Int32; pfAttribFList: IntPtr; nMaxFormats: UInt32; piFormats: array of Int32; nNumFormats: IntPtr): UInt32 := z_ChoosePixelFormatEXT_ovr47(hdc, piAttribIList, pfAttribFList, nMaxFormats, piFormats, nNumFormats);
    private static function _z_ChoosePixelFormatEXT_ovr48(hdc: GDI_DC; var piAttribIList: Int32; pfAttribFList: IntPtr; nMaxFormats: UInt32; var piFormats: Int32; [MarshalAs(UnmanagedType.LPArray)] nNumFormats: array of UInt32): UInt32;
    external 'opengl32.dll' name 'wglChoosePixelFormatEXT';
    public static z_ChoosePixelFormatEXT_ovr48 := _z_ChoosePixelFormatEXT_ovr48;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function ChoosePixelFormatEXT(hdc: GDI_DC; var piAttribIList: Int32; pfAttribFList: IntPtr; nMaxFormats: UInt32; var piFormats: Int32; nNumFormats: array of UInt32): UInt32 := z_ChoosePixelFormatEXT_ovr48(hdc, piAttribIList, pfAttribFList, nMaxFormats, piFormats, nNumFormats);
    private static function _z_ChoosePixelFormatEXT_ovr49(hdc: GDI_DC; var piAttribIList: Int32; pfAttribFList: IntPtr; nMaxFormats: UInt32; var piFormats: Int32; var nNumFormats: UInt32): UInt32;
    external 'opengl32.dll' name 'wglChoosePixelFormatEXT';
    public static z_ChoosePixelFormatEXT_ovr49 := _z_ChoosePixelFormatEXT_ovr49;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function ChoosePixelFormatEXT(hdc: GDI_DC; var piAttribIList: Int32; pfAttribFList: IntPtr; nMaxFormats: UInt32; var piFormats: Int32; var nNumFormats: UInt32): UInt32 := z_ChoosePixelFormatEXT_ovr49(hdc, piAttribIList, pfAttribFList, nMaxFormats, piFormats, nNumFormats);
    private static function _z_ChoosePixelFormatEXT_ovr50(hdc: GDI_DC; var piAttribIList: Int32; pfAttribFList: IntPtr; nMaxFormats: UInt32; var piFormats: Int32; nNumFormats: IntPtr): UInt32;
    external 'opengl32.dll' name 'wglChoosePixelFormatEXT';
    public static z_ChoosePixelFormatEXT_ovr50 := _z_ChoosePixelFormatEXT_ovr50;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function ChoosePixelFormatEXT(hdc: GDI_DC; var piAttribIList: Int32; pfAttribFList: IntPtr; nMaxFormats: UInt32; var piFormats: Int32; nNumFormats: IntPtr): UInt32 := z_ChoosePixelFormatEXT_ovr50(hdc, piAttribIList, pfAttribFList, nMaxFormats, piFormats, nNumFormats);
    private static function _z_ChoosePixelFormatEXT_ovr51(hdc: GDI_DC; var piAttribIList: Int32; pfAttribFList: IntPtr; nMaxFormats: UInt32; piFormats: IntPtr; [MarshalAs(UnmanagedType.LPArray)] nNumFormats: array of UInt32): UInt32;
    external 'opengl32.dll' name 'wglChoosePixelFormatEXT';
    public static z_ChoosePixelFormatEXT_ovr51 := _z_ChoosePixelFormatEXT_ovr51;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function ChoosePixelFormatEXT(hdc: GDI_DC; var piAttribIList: Int32; pfAttribFList: IntPtr; nMaxFormats: UInt32; piFormats: IntPtr; nNumFormats: array of UInt32): UInt32 := z_ChoosePixelFormatEXT_ovr51(hdc, piAttribIList, pfAttribFList, nMaxFormats, piFormats, nNumFormats);
    private static function _z_ChoosePixelFormatEXT_ovr52(hdc: GDI_DC; var piAttribIList: Int32; pfAttribFList: IntPtr; nMaxFormats: UInt32; piFormats: IntPtr; var nNumFormats: UInt32): UInt32;
    external 'opengl32.dll' name 'wglChoosePixelFormatEXT';
    public static z_ChoosePixelFormatEXT_ovr52 := _z_ChoosePixelFormatEXT_ovr52;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function ChoosePixelFormatEXT(hdc: GDI_DC; var piAttribIList: Int32; pfAttribFList: IntPtr; nMaxFormats: UInt32; piFormats: IntPtr; var nNumFormats: UInt32): UInt32 := z_ChoosePixelFormatEXT_ovr52(hdc, piAttribIList, pfAttribFList, nMaxFormats, piFormats, nNumFormats);
    private static function _z_ChoosePixelFormatEXT_ovr53(hdc: GDI_DC; var piAttribIList: Int32; pfAttribFList: IntPtr; nMaxFormats: UInt32; piFormats: IntPtr; nNumFormats: IntPtr): UInt32;
    external 'opengl32.dll' name 'wglChoosePixelFormatEXT';
    public static z_ChoosePixelFormatEXT_ovr53 := _z_ChoosePixelFormatEXT_ovr53;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function ChoosePixelFormatEXT(hdc: GDI_DC; var piAttribIList: Int32; pfAttribFList: IntPtr; nMaxFormats: UInt32; piFormats: IntPtr; nNumFormats: IntPtr): UInt32 := z_ChoosePixelFormatEXT_ovr53(hdc, piAttribIList, pfAttribFList, nMaxFormats, piFormats, nNumFormats);
    private static function _z_ChoosePixelFormatEXT_ovr54(hdc: GDI_DC; piAttribIList: IntPtr; [MarshalAs(UnmanagedType.LPArray)] pfAttribFList: array of single; nMaxFormats: UInt32; [MarshalAs(UnmanagedType.LPArray)] piFormats: array of Int32; [MarshalAs(UnmanagedType.LPArray)] nNumFormats: array of UInt32): UInt32;
    external 'opengl32.dll' name 'wglChoosePixelFormatEXT';
    public static z_ChoosePixelFormatEXT_ovr54 := _z_ChoosePixelFormatEXT_ovr54;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function ChoosePixelFormatEXT(hdc: GDI_DC; piAttribIList: IntPtr; pfAttribFList: array of single; nMaxFormats: UInt32; piFormats: array of Int32; nNumFormats: array of UInt32): UInt32 := z_ChoosePixelFormatEXT_ovr54(hdc, piAttribIList, pfAttribFList, nMaxFormats, piFormats, nNumFormats);
    private static function _z_ChoosePixelFormatEXT_ovr55(hdc: GDI_DC; piAttribIList: IntPtr; [MarshalAs(UnmanagedType.LPArray)] pfAttribFList: array of single; nMaxFormats: UInt32; [MarshalAs(UnmanagedType.LPArray)] piFormats: array of Int32; var nNumFormats: UInt32): UInt32;
    external 'opengl32.dll' name 'wglChoosePixelFormatEXT';
    public static z_ChoosePixelFormatEXT_ovr55 := _z_ChoosePixelFormatEXT_ovr55;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function ChoosePixelFormatEXT(hdc: GDI_DC; piAttribIList: IntPtr; pfAttribFList: array of single; nMaxFormats: UInt32; piFormats: array of Int32; var nNumFormats: UInt32): UInt32 := z_ChoosePixelFormatEXT_ovr55(hdc, piAttribIList, pfAttribFList, nMaxFormats, piFormats, nNumFormats);
    private static function _z_ChoosePixelFormatEXT_ovr56(hdc: GDI_DC; piAttribIList: IntPtr; [MarshalAs(UnmanagedType.LPArray)] pfAttribFList: array of single; nMaxFormats: UInt32; [MarshalAs(UnmanagedType.LPArray)] piFormats: array of Int32; nNumFormats: IntPtr): UInt32;
    external 'opengl32.dll' name 'wglChoosePixelFormatEXT';
    public static z_ChoosePixelFormatEXT_ovr56 := _z_ChoosePixelFormatEXT_ovr56;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function ChoosePixelFormatEXT(hdc: GDI_DC; piAttribIList: IntPtr; pfAttribFList: array of single; nMaxFormats: UInt32; piFormats: array of Int32; nNumFormats: IntPtr): UInt32 := z_ChoosePixelFormatEXT_ovr56(hdc, piAttribIList, pfAttribFList, nMaxFormats, piFormats, nNumFormats);
    private static function _z_ChoosePixelFormatEXT_ovr57(hdc: GDI_DC; piAttribIList: IntPtr; [MarshalAs(UnmanagedType.LPArray)] pfAttribFList: array of single; nMaxFormats: UInt32; var piFormats: Int32; [MarshalAs(UnmanagedType.LPArray)] nNumFormats: array of UInt32): UInt32;
    external 'opengl32.dll' name 'wglChoosePixelFormatEXT';
    public static z_ChoosePixelFormatEXT_ovr57 := _z_ChoosePixelFormatEXT_ovr57;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function ChoosePixelFormatEXT(hdc: GDI_DC; piAttribIList: IntPtr; pfAttribFList: array of single; nMaxFormats: UInt32; var piFormats: Int32; nNumFormats: array of UInt32): UInt32 := z_ChoosePixelFormatEXT_ovr57(hdc, piAttribIList, pfAttribFList, nMaxFormats, piFormats, nNumFormats);
    private static function _z_ChoosePixelFormatEXT_ovr58(hdc: GDI_DC; piAttribIList: IntPtr; [MarshalAs(UnmanagedType.LPArray)] pfAttribFList: array of single; nMaxFormats: UInt32; var piFormats: Int32; var nNumFormats: UInt32): UInt32;
    external 'opengl32.dll' name 'wglChoosePixelFormatEXT';
    public static z_ChoosePixelFormatEXT_ovr58 := _z_ChoosePixelFormatEXT_ovr58;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function ChoosePixelFormatEXT(hdc: GDI_DC; piAttribIList: IntPtr; pfAttribFList: array of single; nMaxFormats: UInt32; var piFormats: Int32; var nNumFormats: UInt32): UInt32 := z_ChoosePixelFormatEXT_ovr58(hdc, piAttribIList, pfAttribFList, nMaxFormats, piFormats, nNumFormats);
    private static function _z_ChoosePixelFormatEXT_ovr59(hdc: GDI_DC; piAttribIList: IntPtr; [MarshalAs(UnmanagedType.LPArray)] pfAttribFList: array of single; nMaxFormats: UInt32; var piFormats: Int32; nNumFormats: IntPtr): UInt32;
    external 'opengl32.dll' name 'wglChoosePixelFormatEXT';
    public static z_ChoosePixelFormatEXT_ovr59 := _z_ChoosePixelFormatEXT_ovr59;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function ChoosePixelFormatEXT(hdc: GDI_DC; piAttribIList: IntPtr; pfAttribFList: array of single; nMaxFormats: UInt32; var piFormats: Int32; nNumFormats: IntPtr): UInt32 := z_ChoosePixelFormatEXT_ovr59(hdc, piAttribIList, pfAttribFList, nMaxFormats, piFormats, nNumFormats);
    private static function _z_ChoosePixelFormatEXT_ovr60(hdc: GDI_DC; piAttribIList: IntPtr; [MarshalAs(UnmanagedType.LPArray)] pfAttribFList: array of single; nMaxFormats: UInt32; piFormats: IntPtr; [MarshalAs(UnmanagedType.LPArray)] nNumFormats: array of UInt32): UInt32;
    external 'opengl32.dll' name 'wglChoosePixelFormatEXT';
    public static z_ChoosePixelFormatEXT_ovr60 := _z_ChoosePixelFormatEXT_ovr60;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function ChoosePixelFormatEXT(hdc: GDI_DC; piAttribIList: IntPtr; pfAttribFList: array of single; nMaxFormats: UInt32; piFormats: IntPtr; nNumFormats: array of UInt32): UInt32 := z_ChoosePixelFormatEXT_ovr60(hdc, piAttribIList, pfAttribFList, nMaxFormats, piFormats, nNumFormats);
    private static function _z_ChoosePixelFormatEXT_ovr61(hdc: GDI_DC; piAttribIList: IntPtr; [MarshalAs(UnmanagedType.LPArray)] pfAttribFList: array of single; nMaxFormats: UInt32; piFormats: IntPtr; var nNumFormats: UInt32): UInt32;
    external 'opengl32.dll' name 'wglChoosePixelFormatEXT';
    public static z_ChoosePixelFormatEXT_ovr61 := _z_ChoosePixelFormatEXT_ovr61;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function ChoosePixelFormatEXT(hdc: GDI_DC; piAttribIList: IntPtr; pfAttribFList: array of single; nMaxFormats: UInt32; piFormats: IntPtr; var nNumFormats: UInt32): UInt32 := z_ChoosePixelFormatEXT_ovr61(hdc, piAttribIList, pfAttribFList, nMaxFormats, piFormats, nNumFormats);
    private static function _z_ChoosePixelFormatEXT_ovr62(hdc: GDI_DC; piAttribIList: IntPtr; [MarshalAs(UnmanagedType.LPArray)] pfAttribFList: array of single; nMaxFormats: UInt32; piFormats: IntPtr; nNumFormats: IntPtr): UInt32;
    external 'opengl32.dll' name 'wglChoosePixelFormatEXT';
    public static z_ChoosePixelFormatEXT_ovr62 := _z_ChoosePixelFormatEXT_ovr62;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function ChoosePixelFormatEXT(hdc: GDI_DC; piAttribIList: IntPtr; pfAttribFList: array of single; nMaxFormats: UInt32; piFormats: IntPtr; nNumFormats: IntPtr): UInt32 := z_ChoosePixelFormatEXT_ovr62(hdc, piAttribIList, pfAttribFList, nMaxFormats, piFormats, nNumFormats);
    private static function _z_ChoosePixelFormatEXT_ovr63(hdc: GDI_DC; piAttribIList: IntPtr; var pfAttribFList: single; nMaxFormats: UInt32; [MarshalAs(UnmanagedType.LPArray)] piFormats: array of Int32; [MarshalAs(UnmanagedType.LPArray)] nNumFormats: array of UInt32): UInt32;
    external 'opengl32.dll' name 'wglChoosePixelFormatEXT';
    public static z_ChoosePixelFormatEXT_ovr63 := _z_ChoosePixelFormatEXT_ovr63;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function ChoosePixelFormatEXT(hdc: GDI_DC; piAttribIList: IntPtr; var pfAttribFList: single; nMaxFormats: UInt32; piFormats: array of Int32; nNumFormats: array of UInt32): UInt32 := z_ChoosePixelFormatEXT_ovr63(hdc, piAttribIList, pfAttribFList, nMaxFormats, piFormats, nNumFormats);
    private static function _z_ChoosePixelFormatEXT_ovr64(hdc: GDI_DC; piAttribIList: IntPtr; var pfAttribFList: single; nMaxFormats: UInt32; [MarshalAs(UnmanagedType.LPArray)] piFormats: array of Int32; var nNumFormats: UInt32): UInt32;
    external 'opengl32.dll' name 'wglChoosePixelFormatEXT';
    public static z_ChoosePixelFormatEXT_ovr64 := _z_ChoosePixelFormatEXT_ovr64;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function ChoosePixelFormatEXT(hdc: GDI_DC; piAttribIList: IntPtr; var pfAttribFList: single; nMaxFormats: UInt32; piFormats: array of Int32; var nNumFormats: UInt32): UInt32 := z_ChoosePixelFormatEXT_ovr64(hdc, piAttribIList, pfAttribFList, nMaxFormats, piFormats, nNumFormats);
    private static function _z_ChoosePixelFormatEXT_ovr65(hdc: GDI_DC; piAttribIList: IntPtr; var pfAttribFList: single; nMaxFormats: UInt32; [MarshalAs(UnmanagedType.LPArray)] piFormats: array of Int32; nNumFormats: IntPtr): UInt32;
    external 'opengl32.dll' name 'wglChoosePixelFormatEXT';
    public static z_ChoosePixelFormatEXT_ovr65 := _z_ChoosePixelFormatEXT_ovr65;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function ChoosePixelFormatEXT(hdc: GDI_DC; piAttribIList: IntPtr; var pfAttribFList: single; nMaxFormats: UInt32; piFormats: array of Int32; nNumFormats: IntPtr): UInt32 := z_ChoosePixelFormatEXT_ovr65(hdc, piAttribIList, pfAttribFList, nMaxFormats, piFormats, nNumFormats);
    private static function _z_ChoosePixelFormatEXT_ovr66(hdc: GDI_DC; piAttribIList: IntPtr; var pfAttribFList: single; nMaxFormats: UInt32; var piFormats: Int32; [MarshalAs(UnmanagedType.LPArray)] nNumFormats: array of UInt32): UInt32;
    external 'opengl32.dll' name 'wglChoosePixelFormatEXT';
    public static z_ChoosePixelFormatEXT_ovr66 := _z_ChoosePixelFormatEXT_ovr66;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function ChoosePixelFormatEXT(hdc: GDI_DC; piAttribIList: IntPtr; var pfAttribFList: single; nMaxFormats: UInt32; var piFormats: Int32; nNumFormats: array of UInt32): UInt32 := z_ChoosePixelFormatEXT_ovr66(hdc, piAttribIList, pfAttribFList, nMaxFormats, piFormats, nNumFormats);
    private static function _z_ChoosePixelFormatEXT_ovr67(hdc: GDI_DC; piAttribIList: IntPtr; var pfAttribFList: single; nMaxFormats: UInt32; var piFormats: Int32; var nNumFormats: UInt32): UInt32;
    external 'opengl32.dll' name 'wglChoosePixelFormatEXT';
    public static z_ChoosePixelFormatEXT_ovr67 := _z_ChoosePixelFormatEXT_ovr67;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function ChoosePixelFormatEXT(hdc: GDI_DC; piAttribIList: IntPtr; var pfAttribFList: single; nMaxFormats: UInt32; var piFormats: Int32; var nNumFormats: UInt32): UInt32 := z_ChoosePixelFormatEXT_ovr67(hdc, piAttribIList, pfAttribFList, nMaxFormats, piFormats, nNumFormats);
    private static function _z_ChoosePixelFormatEXT_ovr68(hdc: GDI_DC; piAttribIList: IntPtr; var pfAttribFList: single; nMaxFormats: UInt32; var piFormats: Int32; nNumFormats: IntPtr): UInt32;
    external 'opengl32.dll' name 'wglChoosePixelFormatEXT';
    public static z_ChoosePixelFormatEXT_ovr68 := _z_ChoosePixelFormatEXT_ovr68;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function ChoosePixelFormatEXT(hdc: GDI_DC; piAttribIList: IntPtr; var pfAttribFList: single; nMaxFormats: UInt32; var piFormats: Int32; nNumFormats: IntPtr): UInt32 := z_ChoosePixelFormatEXT_ovr68(hdc, piAttribIList, pfAttribFList, nMaxFormats, piFormats, nNumFormats);
    private static function _z_ChoosePixelFormatEXT_ovr69(hdc: GDI_DC; piAttribIList: IntPtr; var pfAttribFList: single; nMaxFormats: UInt32; piFormats: IntPtr; [MarshalAs(UnmanagedType.LPArray)] nNumFormats: array of UInt32): UInt32;
    external 'opengl32.dll' name 'wglChoosePixelFormatEXT';
    public static z_ChoosePixelFormatEXT_ovr69 := _z_ChoosePixelFormatEXT_ovr69;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function ChoosePixelFormatEXT(hdc: GDI_DC; piAttribIList: IntPtr; var pfAttribFList: single; nMaxFormats: UInt32; piFormats: IntPtr; nNumFormats: array of UInt32): UInt32 := z_ChoosePixelFormatEXT_ovr69(hdc, piAttribIList, pfAttribFList, nMaxFormats, piFormats, nNumFormats);
    private static function _z_ChoosePixelFormatEXT_ovr70(hdc: GDI_DC; piAttribIList: IntPtr; var pfAttribFList: single; nMaxFormats: UInt32; piFormats: IntPtr; var nNumFormats: UInt32): UInt32;
    external 'opengl32.dll' name 'wglChoosePixelFormatEXT';
    public static z_ChoosePixelFormatEXT_ovr70 := _z_ChoosePixelFormatEXT_ovr70;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function ChoosePixelFormatEXT(hdc: GDI_DC; piAttribIList: IntPtr; var pfAttribFList: single; nMaxFormats: UInt32; piFormats: IntPtr; var nNumFormats: UInt32): UInt32 := z_ChoosePixelFormatEXT_ovr70(hdc, piAttribIList, pfAttribFList, nMaxFormats, piFormats, nNumFormats);
    private static function _z_ChoosePixelFormatEXT_ovr71(hdc: GDI_DC; piAttribIList: IntPtr; var pfAttribFList: single; nMaxFormats: UInt32; piFormats: IntPtr; nNumFormats: IntPtr): UInt32;
    external 'opengl32.dll' name 'wglChoosePixelFormatEXT';
    public static z_ChoosePixelFormatEXT_ovr71 := _z_ChoosePixelFormatEXT_ovr71;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function ChoosePixelFormatEXT(hdc: GDI_DC; piAttribIList: IntPtr; var pfAttribFList: single; nMaxFormats: UInt32; piFormats: IntPtr; nNumFormats: IntPtr): UInt32 := z_ChoosePixelFormatEXT_ovr71(hdc, piAttribIList, pfAttribFList, nMaxFormats, piFormats, nNumFormats);
    private static function _z_ChoosePixelFormatEXT_ovr72(hdc: GDI_DC; piAttribIList: IntPtr; pfAttribFList: IntPtr; nMaxFormats: UInt32; [MarshalAs(UnmanagedType.LPArray)] piFormats: array of Int32; [MarshalAs(UnmanagedType.LPArray)] nNumFormats: array of UInt32): UInt32;
    external 'opengl32.dll' name 'wglChoosePixelFormatEXT';
    public static z_ChoosePixelFormatEXT_ovr72 := _z_ChoosePixelFormatEXT_ovr72;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function ChoosePixelFormatEXT(hdc: GDI_DC; piAttribIList: IntPtr; pfAttribFList: IntPtr; nMaxFormats: UInt32; piFormats: array of Int32; nNumFormats: array of UInt32): UInt32 := z_ChoosePixelFormatEXT_ovr72(hdc, piAttribIList, pfAttribFList, nMaxFormats, piFormats, nNumFormats);
    private static function _z_ChoosePixelFormatEXT_ovr73(hdc: GDI_DC; piAttribIList: IntPtr; pfAttribFList: IntPtr; nMaxFormats: UInt32; [MarshalAs(UnmanagedType.LPArray)] piFormats: array of Int32; var nNumFormats: UInt32): UInt32;
    external 'opengl32.dll' name 'wglChoosePixelFormatEXT';
    public static z_ChoosePixelFormatEXT_ovr73 := _z_ChoosePixelFormatEXT_ovr73;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function ChoosePixelFormatEXT(hdc: GDI_DC; piAttribIList: IntPtr; pfAttribFList: IntPtr; nMaxFormats: UInt32; piFormats: array of Int32; var nNumFormats: UInt32): UInt32 := z_ChoosePixelFormatEXT_ovr73(hdc, piAttribIList, pfAttribFList, nMaxFormats, piFormats, nNumFormats);
    private static function _z_ChoosePixelFormatEXT_ovr74(hdc: GDI_DC; piAttribIList: IntPtr; pfAttribFList: IntPtr; nMaxFormats: UInt32; [MarshalAs(UnmanagedType.LPArray)] piFormats: array of Int32; nNumFormats: IntPtr): UInt32;
    external 'opengl32.dll' name 'wglChoosePixelFormatEXT';
    public static z_ChoosePixelFormatEXT_ovr74 := _z_ChoosePixelFormatEXT_ovr74;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function ChoosePixelFormatEXT(hdc: GDI_DC; piAttribIList: IntPtr; pfAttribFList: IntPtr; nMaxFormats: UInt32; piFormats: array of Int32; nNumFormats: IntPtr): UInt32 := z_ChoosePixelFormatEXT_ovr74(hdc, piAttribIList, pfAttribFList, nMaxFormats, piFormats, nNumFormats);
    private static function _z_ChoosePixelFormatEXT_ovr75(hdc: GDI_DC; piAttribIList: IntPtr; pfAttribFList: IntPtr; nMaxFormats: UInt32; var piFormats: Int32; [MarshalAs(UnmanagedType.LPArray)] nNumFormats: array of UInt32): UInt32;
    external 'opengl32.dll' name 'wglChoosePixelFormatEXT';
    public static z_ChoosePixelFormatEXT_ovr75 := _z_ChoosePixelFormatEXT_ovr75;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function ChoosePixelFormatEXT(hdc: GDI_DC; piAttribIList: IntPtr; pfAttribFList: IntPtr; nMaxFormats: UInt32; var piFormats: Int32; nNumFormats: array of UInt32): UInt32 := z_ChoosePixelFormatEXT_ovr75(hdc, piAttribIList, pfAttribFList, nMaxFormats, piFormats, nNumFormats);
    private static function _z_ChoosePixelFormatEXT_ovr76(hdc: GDI_DC; piAttribIList: IntPtr; pfAttribFList: IntPtr; nMaxFormats: UInt32; var piFormats: Int32; var nNumFormats: UInt32): UInt32;
    external 'opengl32.dll' name 'wglChoosePixelFormatEXT';
    public static z_ChoosePixelFormatEXT_ovr76 := _z_ChoosePixelFormatEXT_ovr76;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function ChoosePixelFormatEXT(hdc: GDI_DC; piAttribIList: IntPtr; pfAttribFList: IntPtr; nMaxFormats: UInt32; var piFormats: Int32; var nNumFormats: UInt32): UInt32 := z_ChoosePixelFormatEXT_ovr76(hdc, piAttribIList, pfAttribFList, nMaxFormats, piFormats, nNumFormats);
    private static function _z_ChoosePixelFormatEXT_ovr77(hdc: GDI_DC; piAttribIList: IntPtr; pfAttribFList: IntPtr; nMaxFormats: UInt32; var piFormats: Int32; nNumFormats: IntPtr): UInt32;
    external 'opengl32.dll' name 'wglChoosePixelFormatEXT';
    public static z_ChoosePixelFormatEXT_ovr77 := _z_ChoosePixelFormatEXT_ovr77;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function ChoosePixelFormatEXT(hdc: GDI_DC; piAttribIList: IntPtr; pfAttribFList: IntPtr; nMaxFormats: UInt32; var piFormats: Int32; nNumFormats: IntPtr): UInt32 := z_ChoosePixelFormatEXT_ovr77(hdc, piAttribIList, pfAttribFList, nMaxFormats, piFormats, nNumFormats);
    private static function _z_ChoosePixelFormatEXT_ovr78(hdc: GDI_DC; piAttribIList: IntPtr; pfAttribFList: IntPtr; nMaxFormats: UInt32; piFormats: IntPtr; [MarshalAs(UnmanagedType.LPArray)] nNumFormats: array of UInt32): UInt32;
    external 'opengl32.dll' name 'wglChoosePixelFormatEXT';
    public static z_ChoosePixelFormatEXT_ovr78 := _z_ChoosePixelFormatEXT_ovr78;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function ChoosePixelFormatEXT(hdc: GDI_DC; piAttribIList: IntPtr; pfAttribFList: IntPtr; nMaxFormats: UInt32; piFormats: IntPtr; nNumFormats: array of UInt32): UInt32 := z_ChoosePixelFormatEXT_ovr78(hdc, piAttribIList, pfAttribFList, nMaxFormats, piFormats, nNumFormats);
    private static function _z_ChoosePixelFormatEXT_ovr79(hdc: GDI_DC; piAttribIList: IntPtr; pfAttribFList: IntPtr; nMaxFormats: UInt32; piFormats: IntPtr; var nNumFormats: UInt32): UInt32;
    external 'opengl32.dll' name 'wglChoosePixelFormatEXT';
    public static z_ChoosePixelFormatEXT_ovr79 := _z_ChoosePixelFormatEXT_ovr79;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function ChoosePixelFormatEXT(hdc: GDI_DC; piAttribIList: IntPtr; pfAttribFList: IntPtr; nMaxFormats: UInt32; piFormats: IntPtr; var nNumFormats: UInt32): UInt32 := z_ChoosePixelFormatEXT_ovr79(hdc, piAttribIList, pfAttribFList, nMaxFormats, piFormats, nNumFormats);
    private static function _z_ChoosePixelFormatEXT_ovr80(hdc: GDI_DC; piAttribIList: IntPtr; pfAttribFList: IntPtr; nMaxFormats: UInt32; piFormats: IntPtr; nNumFormats: IntPtr): UInt32;
    external 'opengl32.dll' name 'wglChoosePixelFormatEXT';
    public static z_ChoosePixelFormatEXT_ovr80 := _z_ChoosePixelFormatEXT_ovr80;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function ChoosePixelFormatEXT(hdc: GDI_DC; piAttribIList: IntPtr; pfAttribFList: IntPtr; nMaxFormats: UInt32; piFormats: IntPtr; nNumFormats: IntPtr): UInt32 := z_ChoosePixelFormatEXT_ovr80(hdc, piAttribIList, pfAttribFList, nMaxFormats, piFormats, nNumFormats);
    
  end;
  
  wglSwapControlEXT = static class
    
    private static function _z_SwapIntervalEXT_ovr0(interval: Int32): UInt32;
    external 'opengl32.dll' name 'wglSwapIntervalEXT';
    public static z_SwapIntervalEXT_ovr0 := _z_SwapIntervalEXT_ovr0;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function SwapIntervalEXT(interval: Int32): UInt32 := z_SwapIntervalEXT_ovr0(interval);
    
    private static function _z_GetSwapIntervalEXT_ovr0: Int32;
    external 'opengl32.dll' name 'wglGetSwapIntervalEXT';
    public static z_GetSwapIntervalEXT_ovr0: function: Int32 := _z_GetSwapIntervalEXT_ovr0;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function GetSwapIntervalEXT: Int32 := z_GetSwapIntervalEXT_ovr0;
    
  end;
  
  wglDigitalVideoControlI3D = static class
    
    private static function _z_GetDigitalVideoParametersI3D_ovr0(hDC: GDI_DC; iAttribute: Int32; [MarshalAs(UnmanagedType.LPArray)] piValue: array of Int32): UInt32;
    external 'opengl32.dll' name 'wglGetDigitalVideoParametersI3D';
    public static z_GetDigitalVideoParametersI3D_ovr0 := _z_GetDigitalVideoParametersI3D_ovr0;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function GetDigitalVideoParametersI3D(hDC: GDI_DC; iAttribute: Int32; piValue: array of Int32): UInt32 := z_GetDigitalVideoParametersI3D_ovr0(hDC, iAttribute, piValue);
    private static function _z_GetDigitalVideoParametersI3D_ovr1(hDC: GDI_DC; iAttribute: Int32; var piValue: Int32): UInt32;
    external 'opengl32.dll' name 'wglGetDigitalVideoParametersI3D';
    public static z_GetDigitalVideoParametersI3D_ovr1 := _z_GetDigitalVideoParametersI3D_ovr1;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function GetDigitalVideoParametersI3D(hDC: GDI_DC; iAttribute: Int32; var piValue: Int32): UInt32 := z_GetDigitalVideoParametersI3D_ovr1(hDC, iAttribute, piValue);
    private static function _z_GetDigitalVideoParametersI3D_ovr2(hDC: GDI_DC; iAttribute: Int32; piValue: IntPtr): UInt32;
    external 'opengl32.dll' name 'wglGetDigitalVideoParametersI3D';
    public static z_GetDigitalVideoParametersI3D_ovr2 := _z_GetDigitalVideoParametersI3D_ovr2;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function GetDigitalVideoParametersI3D(hDC: GDI_DC; iAttribute: Int32; piValue: IntPtr): UInt32 := z_GetDigitalVideoParametersI3D_ovr2(hDC, iAttribute, piValue);
    
    private static function _z_SetDigitalVideoParametersI3D_ovr0(hDC: GDI_DC; iAttribute: Int32; [MarshalAs(UnmanagedType.LPArray)] piValue: array of Int32): UInt32;
    external 'opengl32.dll' name 'wglSetDigitalVideoParametersI3D';
    public static z_SetDigitalVideoParametersI3D_ovr0 := _z_SetDigitalVideoParametersI3D_ovr0;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function SetDigitalVideoParametersI3D(hDC: GDI_DC; iAttribute: Int32; piValue: array of Int32): UInt32 := z_SetDigitalVideoParametersI3D_ovr0(hDC, iAttribute, piValue);
    private static function _z_SetDigitalVideoParametersI3D_ovr1(hDC: GDI_DC; iAttribute: Int32; var piValue: Int32): UInt32;
    external 'opengl32.dll' name 'wglSetDigitalVideoParametersI3D';
    public static z_SetDigitalVideoParametersI3D_ovr1 := _z_SetDigitalVideoParametersI3D_ovr1;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function SetDigitalVideoParametersI3D(hDC: GDI_DC; iAttribute: Int32; var piValue: Int32): UInt32 := z_SetDigitalVideoParametersI3D_ovr1(hDC, iAttribute, piValue);
    private static function _z_SetDigitalVideoParametersI3D_ovr2(hDC: GDI_DC; iAttribute: Int32; piValue: IntPtr): UInt32;
    external 'opengl32.dll' name 'wglSetDigitalVideoParametersI3D';
    public static z_SetDigitalVideoParametersI3D_ovr2 := _z_SetDigitalVideoParametersI3D_ovr2;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function SetDigitalVideoParametersI3D(hDC: GDI_DC; iAttribute: Int32; piValue: IntPtr): UInt32 := z_SetDigitalVideoParametersI3D_ovr2(hDC, iAttribute, piValue);
    
  end;
  
  wglGammaI3D = static class
    
    private static function _z_GetGammaTableParametersI3D_ovr0(hDC: GDI_DC; iAttribute: Int32; [MarshalAs(UnmanagedType.LPArray)] piValue: array of Int32): UInt32;
    external 'opengl32.dll' name 'wglGetGammaTableParametersI3D';
    public static z_GetGammaTableParametersI3D_ovr0 := _z_GetGammaTableParametersI3D_ovr0;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function GetGammaTableParametersI3D(hDC: GDI_DC; iAttribute: Int32; piValue: array of Int32): UInt32 := z_GetGammaTableParametersI3D_ovr0(hDC, iAttribute, piValue);
    private static function _z_GetGammaTableParametersI3D_ovr1(hDC: GDI_DC; iAttribute: Int32; var piValue: Int32): UInt32;
    external 'opengl32.dll' name 'wglGetGammaTableParametersI3D';
    public static z_GetGammaTableParametersI3D_ovr1 := _z_GetGammaTableParametersI3D_ovr1;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function GetGammaTableParametersI3D(hDC: GDI_DC; iAttribute: Int32; var piValue: Int32): UInt32 := z_GetGammaTableParametersI3D_ovr1(hDC, iAttribute, piValue);
    private static function _z_GetGammaTableParametersI3D_ovr2(hDC: GDI_DC; iAttribute: Int32; piValue: IntPtr): UInt32;
    external 'opengl32.dll' name 'wglGetGammaTableParametersI3D';
    public static z_GetGammaTableParametersI3D_ovr2 := _z_GetGammaTableParametersI3D_ovr2;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function GetGammaTableParametersI3D(hDC: GDI_DC; iAttribute: Int32; piValue: IntPtr): UInt32 := z_GetGammaTableParametersI3D_ovr2(hDC, iAttribute, piValue);
    
    private static function _z_SetGammaTableParametersI3D_ovr0(hDC: GDI_DC; iAttribute: Int32; [MarshalAs(UnmanagedType.LPArray)] piValue: array of Int32): UInt32;
    external 'opengl32.dll' name 'wglSetGammaTableParametersI3D';
    public static z_SetGammaTableParametersI3D_ovr0 := _z_SetGammaTableParametersI3D_ovr0;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function SetGammaTableParametersI3D(hDC: GDI_DC; iAttribute: Int32; piValue: array of Int32): UInt32 := z_SetGammaTableParametersI3D_ovr0(hDC, iAttribute, piValue);
    private static function _z_SetGammaTableParametersI3D_ovr1(hDC: GDI_DC; iAttribute: Int32; var piValue: Int32): UInt32;
    external 'opengl32.dll' name 'wglSetGammaTableParametersI3D';
    public static z_SetGammaTableParametersI3D_ovr1 := _z_SetGammaTableParametersI3D_ovr1;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function SetGammaTableParametersI3D(hDC: GDI_DC; iAttribute: Int32; var piValue: Int32): UInt32 := z_SetGammaTableParametersI3D_ovr1(hDC, iAttribute, piValue);
    private static function _z_SetGammaTableParametersI3D_ovr2(hDC: GDI_DC; iAttribute: Int32; piValue: IntPtr): UInt32;
    external 'opengl32.dll' name 'wglSetGammaTableParametersI3D';
    public static z_SetGammaTableParametersI3D_ovr2 := _z_SetGammaTableParametersI3D_ovr2;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function SetGammaTableParametersI3D(hDC: GDI_DC; iAttribute: Int32; piValue: IntPtr): UInt32 := z_SetGammaTableParametersI3D_ovr2(hDC, iAttribute, piValue);
    
    private static function _z_GetGammaTableI3D_ovr0(hDC: GDI_DC; iEntries: Int32; [MarshalAs(UnmanagedType.LPArray)] puRed: array of UInt16; [MarshalAs(UnmanagedType.LPArray)] puGreen: array of UInt16; [MarshalAs(UnmanagedType.LPArray)] puBlue: array of UInt16): UInt32;
    external 'opengl32.dll' name 'wglGetGammaTableI3D';
    public static z_GetGammaTableI3D_ovr0 := _z_GetGammaTableI3D_ovr0;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function GetGammaTableI3D(hDC: GDI_DC; iEntries: Int32; puRed: array of UInt16; puGreen: array of UInt16; puBlue: array of UInt16): UInt32 := z_GetGammaTableI3D_ovr0(hDC, iEntries, puRed, puGreen, puBlue);
    private static function _z_GetGammaTableI3D_ovr1(hDC: GDI_DC; iEntries: Int32; [MarshalAs(UnmanagedType.LPArray)] puRed: array of UInt16; [MarshalAs(UnmanagedType.LPArray)] puGreen: array of UInt16; var puBlue: UInt16): UInt32;
    external 'opengl32.dll' name 'wglGetGammaTableI3D';
    public static z_GetGammaTableI3D_ovr1 := _z_GetGammaTableI3D_ovr1;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function GetGammaTableI3D(hDC: GDI_DC; iEntries: Int32; puRed: array of UInt16; puGreen: array of UInt16; var puBlue: UInt16): UInt32 := z_GetGammaTableI3D_ovr1(hDC, iEntries, puRed, puGreen, puBlue);
    private static function _z_GetGammaTableI3D_ovr2(hDC: GDI_DC; iEntries: Int32; [MarshalAs(UnmanagedType.LPArray)] puRed: array of UInt16; [MarshalAs(UnmanagedType.LPArray)] puGreen: array of UInt16; puBlue: IntPtr): UInt32;
    external 'opengl32.dll' name 'wglGetGammaTableI3D';
    public static z_GetGammaTableI3D_ovr2 := _z_GetGammaTableI3D_ovr2;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function GetGammaTableI3D(hDC: GDI_DC; iEntries: Int32; puRed: array of UInt16; puGreen: array of UInt16; puBlue: IntPtr): UInt32 := z_GetGammaTableI3D_ovr2(hDC, iEntries, puRed, puGreen, puBlue);
    private static function _z_GetGammaTableI3D_ovr3(hDC: GDI_DC; iEntries: Int32; [MarshalAs(UnmanagedType.LPArray)] puRed: array of UInt16; var puGreen: UInt16; [MarshalAs(UnmanagedType.LPArray)] puBlue: array of UInt16): UInt32;
    external 'opengl32.dll' name 'wglGetGammaTableI3D';
    public static z_GetGammaTableI3D_ovr3 := _z_GetGammaTableI3D_ovr3;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function GetGammaTableI3D(hDC: GDI_DC; iEntries: Int32; puRed: array of UInt16; var puGreen: UInt16; puBlue: array of UInt16): UInt32 := z_GetGammaTableI3D_ovr3(hDC, iEntries, puRed, puGreen, puBlue);
    private static function _z_GetGammaTableI3D_ovr4(hDC: GDI_DC; iEntries: Int32; [MarshalAs(UnmanagedType.LPArray)] puRed: array of UInt16; var puGreen: UInt16; var puBlue: UInt16): UInt32;
    external 'opengl32.dll' name 'wglGetGammaTableI3D';
    public static z_GetGammaTableI3D_ovr4 := _z_GetGammaTableI3D_ovr4;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function GetGammaTableI3D(hDC: GDI_DC; iEntries: Int32; puRed: array of UInt16; var puGreen: UInt16; var puBlue: UInt16): UInt32 := z_GetGammaTableI3D_ovr4(hDC, iEntries, puRed, puGreen, puBlue);
    private static function _z_GetGammaTableI3D_ovr5(hDC: GDI_DC; iEntries: Int32; [MarshalAs(UnmanagedType.LPArray)] puRed: array of UInt16; var puGreen: UInt16; puBlue: IntPtr): UInt32;
    external 'opengl32.dll' name 'wglGetGammaTableI3D';
    public static z_GetGammaTableI3D_ovr5 := _z_GetGammaTableI3D_ovr5;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function GetGammaTableI3D(hDC: GDI_DC; iEntries: Int32; puRed: array of UInt16; var puGreen: UInt16; puBlue: IntPtr): UInt32 := z_GetGammaTableI3D_ovr5(hDC, iEntries, puRed, puGreen, puBlue);
    private static function _z_GetGammaTableI3D_ovr6(hDC: GDI_DC; iEntries: Int32; [MarshalAs(UnmanagedType.LPArray)] puRed: array of UInt16; puGreen: IntPtr; [MarshalAs(UnmanagedType.LPArray)] puBlue: array of UInt16): UInt32;
    external 'opengl32.dll' name 'wglGetGammaTableI3D';
    public static z_GetGammaTableI3D_ovr6 := _z_GetGammaTableI3D_ovr6;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function GetGammaTableI3D(hDC: GDI_DC; iEntries: Int32; puRed: array of UInt16; puGreen: IntPtr; puBlue: array of UInt16): UInt32 := z_GetGammaTableI3D_ovr6(hDC, iEntries, puRed, puGreen, puBlue);
    private static function _z_GetGammaTableI3D_ovr7(hDC: GDI_DC; iEntries: Int32; [MarshalAs(UnmanagedType.LPArray)] puRed: array of UInt16; puGreen: IntPtr; var puBlue: UInt16): UInt32;
    external 'opengl32.dll' name 'wglGetGammaTableI3D';
    public static z_GetGammaTableI3D_ovr7 := _z_GetGammaTableI3D_ovr7;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function GetGammaTableI3D(hDC: GDI_DC; iEntries: Int32; puRed: array of UInt16; puGreen: IntPtr; var puBlue: UInt16): UInt32 := z_GetGammaTableI3D_ovr7(hDC, iEntries, puRed, puGreen, puBlue);
    private static function _z_GetGammaTableI3D_ovr8(hDC: GDI_DC; iEntries: Int32; [MarshalAs(UnmanagedType.LPArray)] puRed: array of UInt16; puGreen: IntPtr; puBlue: IntPtr): UInt32;
    external 'opengl32.dll' name 'wglGetGammaTableI3D';
    public static z_GetGammaTableI3D_ovr8 := _z_GetGammaTableI3D_ovr8;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function GetGammaTableI3D(hDC: GDI_DC; iEntries: Int32; puRed: array of UInt16; puGreen: IntPtr; puBlue: IntPtr): UInt32 := z_GetGammaTableI3D_ovr8(hDC, iEntries, puRed, puGreen, puBlue);
    private static function _z_GetGammaTableI3D_ovr9(hDC: GDI_DC; iEntries: Int32; var puRed: UInt16; [MarshalAs(UnmanagedType.LPArray)] puGreen: array of UInt16; [MarshalAs(UnmanagedType.LPArray)] puBlue: array of UInt16): UInt32;
    external 'opengl32.dll' name 'wglGetGammaTableI3D';
    public static z_GetGammaTableI3D_ovr9 := _z_GetGammaTableI3D_ovr9;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function GetGammaTableI3D(hDC: GDI_DC; iEntries: Int32; var puRed: UInt16; puGreen: array of UInt16; puBlue: array of UInt16): UInt32 := z_GetGammaTableI3D_ovr9(hDC, iEntries, puRed, puGreen, puBlue);
    private static function _z_GetGammaTableI3D_ovr10(hDC: GDI_DC; iEntries: Int32; var puRed: UInt16; [MarshalAs(UnmanagedType.LPArray)] puGreen: array of UInt16; var puBlue: UInt16): UInt32;
    external 'opengl32.dll' name 'wglGetGammaTableI3D';
    public static z_GetGammaTableI3D_ovr10 := _z_GetGammaTableI3D_ovr10;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function GetGammaTableI3D(hDC: GDI_DC; iEntries: Int32; var puRed: UInt16; puGreen: array of UInt16; var puBlue: UInt16): UInt32 := z_GetGammaTableI3D_ovr10(hDC, iEntries, puRed, puGreen, puBlue);
    private static function _z_GetGammaTableI3D_ovr11(hDC: GDI_DC; iEntries: Int32; var puRed: UInt16; [MarshalAs(UnmanagedType.LPArray)] puGreen: array of UInt16; puBlue: IntPtr): UInt32;
    external 'opengl32.dll' name 'wglGetGammaTableI3D';
    public static z_GetGammaTableI3D_ovr11 := _z_GetGammaTableI3D_ovr11;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function GetGammaTableI3D(hDC: GDI_DC; iEntries: Int32; var puRed: UInt16; puGreen: array of UInt16; puBlue: IntPtr): UInt32 := z_GetGammaTableI3D_ovr11(hDC, iEntries, puRed, puGreen, puBlue);
    private static function _z_GetGammaTableI3D_ovr12(hDC: GDI_DC; iEntries: Int32; var puRed: UInt16; var puGreen: UInt16; [MarshalAs(UnmanagedType.LPArray)] puBlue: array of UInt16): UInt32;
    external 'opengl32.dll' name 'wglGetGammaTableI3D';
    public static z_GetGammaTableI3D_ovr12 := _z_GetGammaTableI3D_ovr12;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function GetGammaTableI3D(hDC: GDI_DC; iEntries: Int32; var puRed: UInt16; var puGreen: UInt16; puBlue: array of UInt16): UInt32 := z_GetGammaTableI3D_ovr12(hDC, iEntries, puRed, puGreen, puBlue);
    private static function _z_GetGammaTableI3D_ovr13(hDC: GDI_DC; iEntries: Int32; var puRed: UInt16; var puGreen: UInt16; var puBlue: UInt16): UInt32;
    external 'opengl32.dll' name 'wglGetGammaTableI3D';
    public static z_GetGammaTableI3D_ovr13 := _z_GetGammaTableI3D_ovr13;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function GetGammaTableI3D(hDC: GDI_DC; iEntries: Int32; var puRed: UInt16; var puGreen: UInt16; var puBlue: UInt16): UInt32 := z_GetGammaTableI3D_ovr13(hDC, iEntries, puRed, puGreen, puBlue);
    private static function _z_GetGammaTableI3D_ovr14(hDC: GDI_DC; iEntries: Int32; var puRed: UInt16; var puGreen: UInt16; puBlue: IntPtr): UInt32;
    external 'opengl32.dll' name 'wglGetGammaTableI3D';
    public static z_GetGammaTableI3D_ovr14 := _z_GetGammaTableI3D_ovr14;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function GetGammaTableI3D(hDC: GDI_DC; iEntries: Int32; var puRed: UInt16; var puGreen: UInt16; puBlue: IntPtr): UInt32 := z_GetGammaTableI3D_ovr14(hDC, iEntries, puRed, puGreen, puBlue);
    private static function _z_GetGammaTableI3D_ovr15(hDC: GDI_DC; iEntries: Int32; var puRed: UInt16; puGreen: IntPtr; [MarshalAs(UnmanagedType.LPArray)] puBlue: array of UInt16): UInt32;
    external 'opengl32.dll' name 'wglGetGammaTableI3D';
    public static z_GetGammaTableI3D_ovr15 := _z_GetGammaTableI3D_ovr15;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function GetGammaTableI3D(hDC: GDI_DC; iEntries: Int32; var puRed: UInt16; puGreen: IntPtr; puBlue: array of UInt16): UInt32 := z_GetGammaTableI3D_ovr15(hDC, iEntries, puRed, puGreen, puBlue);
    private static function _z_GetGammaTableI3D_ovr16(hDC: GDI_DC; iEntries: Int32; var puRed: UInt16; puGreen: IntPtr; var puBlue: UInt16): UInt32;
    external 'opengl32.dll' name 'wglGetGammaTableI3D';
    public static z_GetGammaTableI3D_ovr16 := _z_GetGammaTableI3D_ovr16;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function GetGammaTableI3D(hDC: GDI_DC; iEntries: Int32; var puRed: UInt16; puGreen: IntPtr; var puBlue: UInt16): UInt32 := z_GetGammaTableI3D_ovr16(hDC, iEntries, puRed, puGreen, puBlue);
    private static function _z_GetGammaTableI3D_ovr17(hDC: GDI_DC; iEntries: Int32; var puRed: UInt16; puGreen: IntPtr; puBlue: IntPtr): UInt32;
    external 'opengl32.dll' name 'wglGetGammaTableI3D';
    public static z_GetGammaTableI3D_ovr17 := _z_GetGammaTableI3D_ovr17;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function GetGammaTableI3D(hDC: GDI_DC; iEntries: Int32; var puRed: UInt16; puGreen: IntPtr; puBlue: IntPtr): UInt32 := z_GetGammaTableI3D_ovr17(hDC, iEntries, puRed, puGreen, puBlue);
    private static function _z_GetGammaTableI3D_ovr18(hDC: GDI_DC; iEntries: Int32; puRed: IntPtr; [MarshalAs(UnmanagedType.LPArray)] puGreen: array of UInt16; [MarshalAs(UnmanagedType.LPArray)] puBlue: array of UInt16): UInt32;
    external 'opengl32.dll' name 'wglGetGammaTableI3D';
    public static z_GetGammaTableI3D_ovr18 := _z_GetGammaTableI3D_ovr18;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function GetGammaTableI3D(hDC: GDI_DC; iEntries: Int32; puRed: IntPtr; puGreen: array of UInt16; puBlue: array of UInt16): UInt32 := z_GetGammaTableI3D_ovr18(hDC, iEntries, puRed, puGreen, puBlue);
    private static function _z_GetGammaTableI3D_ovr19(hDC: GDI_DC; iEntries: Int32; puRed: IntPtr; [MarshalAs(UnmanagedType.LPArray)] puGreen: array of UInt16; var puBlue: UInt16): UInt32;
    external 'opengl32.dll' name 'wglGetGammaTableI3D';
    public static z_GetGammaTableI3D_ovr19 := _z_GetGammaTableI3D_ovr19;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function GetGammaTableI3D(hDC: GDI_DC; iEntries: Int32; puRed: IntPtr; puGreen: array of UInt16; var puBlue: UInt16): UInt32 := z_GetGammaTableI3D_ovr19(hDC, iEntries, puRed, puGreen, puBlue);
    private static function _z_GetGammaTableI3D_ovr20(hDC: GDI_DC; iEntries: Int32; puRed: IntPtr; [MarshalAs(UnmanagedType.LPArray)] puGreen: array of UInt16; puBlue: IntPtr): UInt32;
    external 'opengl32.dll' name 'wglGetGammaTableI3D';
    public static z_GetGammaTableI3D_ovr20 := _z_GetGammaTableI3D_ovr20;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function GetGammaTableI3D(hDC: GDI_DC; iEntries: Int32; puRed: IntPtr; puGreen: array of UInt16; puBlue: IntPtr): UInt32 := z_GetGammaTableI3D_ovr20(hDC, iEntries, puRed, puGreen, puBlue);
    private static function _z_GetGammaTableI3D_ovr21(hDC: GDI_DC; iEntries: Int32; puRed: IntPtr; var puGreen: UInt16; [MarshalAs(UnmanagedType.LPArray)] puBlue: array of UInt16): UInt32;
    external 'opengl32.dll' name 'wglGetGammaTableI3D';
    public static z_GetGammaTableI3D_ovr21 := _z_GetGammaTableI3D_ovr21;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function GetGammaTableI3D(hDC: GDI_DC; iEntries: Int32; puRed: IntPtr; var puGreen: UInt16; puBlue: array of UInt16): UInt32 := z_GetGammaTableI3D_ovr21(hDC, iEntries, puRed, puGreen, puBlue);
    private static function _z_GetGammaTableI3D_ovr22(hDC: GDI_DC; iEntries: Int32; puRed: IntPtr; var puGreen: UInt16; var puBlue: UInt16): UInt32;
    external 'opengl32.dll' name 'wglGetGammaTableI3D';
    public static z_GetGammaTableI3D_ovr22 := _z_GetGammaTableI3D_ovr22;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function GetGammaTableI3D(hDC: GDI_DC; iEntries: Int32; puRed: IntPtr; var puGreen: UInt16; var puBlue: UInt16): UInt32 := z_GetGammaTableI3D_ovr22(hDC, iEntries, puRed, puGreen, puBlue);
    private static function _z_GetGammaTableI3D_ovr23(hDC: GDI_DC; iEntries: Int32; puRed: IntPtr; var puGreen: UInt16; puBlue: IntPtr): UInt32;
    external 'opengl32.dll' name 'wglGetGammaTableI3D';
    public static z_GetGammaTableI3D_ovr23 := _z_GetGammaTableI3D_ovr23;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function GetGammaTableI3D(hDC: GDI_DC; iEntries: Int32; puRed: IntPtr; var puGreen: UInt16; puBlue: IntPtr): UInt32 := z_GetGammaTableI3D_ovr23(hDC, iEntries, puRed, puGreen, puBlue);
    private static function _z_GetGammaTableI3D_ovr24(hDC: GDI_DC; iEntries: Int32; puRed: IntPtr; puGreen: IntPtr; [MarshalAs(UnmanagedType.LPArray)] puBlue: array of UInt16): UInt32;
    external 'opengl32.dll' name 'wglGetGammaTableI3D';
    public static z_GetGammaTableI3D_ovr24 := _z_GetGammaTableI3D_ovr24;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function GetGammaTableI3D(hDC: GDI_DC; iEntries: Int32; puRed: IntPtr; puGreen: IntPtr; puBlue: array of UInt16): UInt32 := z_GetGammaTableI3D_ovr24(hDC, iEntries, puRed, puGreen, puBlue);
    private static function _z_GetGammaTableI3D_ovr25(hDC: GDI_DC; iEntries: Int32; puRed: IntPtr; puGreen: IntPtr; var puBlue: UInt16): UInt32;
    external 'opengl32.dll' name 'wglGetGammaTableI3D';
    public static z_GetGammaTableI3D_ovr25 := _z_GetGammaTableI3D_ovr25;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function GetGammaTableI3D(hDC: GDI_DC; iEntries: Int32; puRed: IntPtr; puGreen: IntPtr; var puBlue: UInt16): UInt32 := z_GetGammaTableI3D_ovr25(hDC, iEntries, puRed, puGreen, puBlue);
    private static function _z_GetGammaTableI3D_ovr26(hDC: GDI_DC; iEntries: Int32; puRed: IntPtr; puGreen: IntPtr; puBlue: IntPtr): UInt32;
    external 'opengl32.dll' name 'wglGetGammaTableI3D';
    public static z_GetGammaTableI3D_ovr26 := _z_GetGammaTableI3D_ovr26;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function GetGammaTableI3D(hDC: GDI_DC; iEntries: Int32; puRed: IntPtr; puGreen: IntPtr; puBlue: IntPtr): UInt32 := z_GetGammaTableI3D_ovr26(hDC, iEntries, puRed, puGreen, puBlue);
    
    private static function _z_SetGammaTableI3D_ovr0(hDC: GDI_DC; iEntries: Int32; [MarshalAs(UnmanagedType.LPArray)] puRed: array of UInt16; [MarshalAs(UnmanagedType.LPArray)] puGreen: array of UInt16; [MarshalAs(UnmanagedType.LPArray)] puBlue: array of UInt16): UInt32;
    external 'opengl32.dll' name 'wglSetGammaTableI3D';
    public static z_SetGammaTableI3D_ovr0 := _z_SetGammaTableI3D_ovr0;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function SetGammaTableI3D(hDC: GDI_DC; iEntries: Int32; puRed: array of UInt16; puGreen: array of UInt16; puBlue: array of UInt16): UInt32 := z_SetGammaTableI3D_ovr0(hDC, iEntries, puRed, puGreen, puBlue);
    private static function _z_SetGammaTableI3D_ovr1(hDC: GDI_DC; iEntries: Int32; [MarshalAs(UnmanagedType.LPArray)] puRed: array of UInt16; [MarshalAs(UnmanagedType.LPArray)] puGreen: array of UInt16; var puBlue: UInt16): UInt32;
    external 'opengl32.dll' name 'wglSetGammaTableI3D';
    public static z_SetGammaTableI3D_ovr1 := _z_SetGammaTableI3D_ovr1;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function SetGammaTableI3D(hDC: GDI_DC; iEntries: Int32; puRed: array of UInt16; puGreen: array of UInt16; var puBlue: UInt16): UInt32 := z_SetGammaTableI3D_ovr1(hDC, iEntries, puRed, puGreen, puBlue);
    private static function _z_SetGammaTableI3D_ovr2(hDC: GDI_DC; iEntries: Int32; [MarshalAs(UnmanagedType.LPArray)] puRed: array of UInt16; [MarshalAs(UnmanagedType.LPArray)] puGreen: array of UInt16; puBlue: IntPtr): UInt32;
    external 'opengl32.dll' name 'wglSetGammaTableI3D';
    public static z_SetGammaTableI3D_ovr2 := _z_SetGammaTableI3D_ovr2;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function SetGammaTableI3D(hDC: GDI_DC; iEntries: Int32; puRed: array of UInt16; puGreen: array of UInt16; puBlue: IntPtr): UInt32 := z_SetGammaTableI3D_ovr2(hDC, iEntries, puRed, puGreen, puBlue);
    private static function _z_SetGammaTableI3D_ovr3(hDC: GDI_DC; iEntries: Int32; [MarshalAs(UnmanagedType.LPArray)] puRed: array of UInt16; var puGreen: UInt16; [MarshalAs(UnmanagedType.LPArray)] puBlue: array of UInt16): UInt32;
    external 'opengl32.dll' name 'wglSetGammaTableI3D';
    public static z_SetGammaTableI3D_ovr3 := _z_SetGammaTableI3D_ovr3;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function SetGammaTableI3D(hDC: GDI_DC; iEntries: Int32; puRed: array of UInt16; var puGreen: UInt16; puBlue: array of UInt16): UInt32 := z_SetGammaTableI3D_ovr3(hDC, iEntries, puRed, puGreen, puBlue);
    private static function _z_SetGammaTableI3D_ovr4(hDC: GDI_DC; iEntries: Int32; [MarshalAs(UnmanagedType.LPArray)] puRed: array of UInt16; var puGreen: UInt16; var puBlue: UInt16): UInt32;
    external 'opengl32.dll' name 'wglSetGammaTableI3D';
    public static z_SetGammaTableI3D_ovr4 := _z_SetGammaTableI3D_ovr4;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function SetGammaTableI3D(hDC: GDI_DC; iEntries: Int32; puRed: array of UInt16; var puGreen: UInt16; var puBlue: UInt16): UInt32 := z_SetGammaTableI3D_ovr4(hDC, iEntries, puRed, puGreen, puBlue);
    private static function _z_SetGammaTableI3D_ovr5(hDC: GDI_DC; iEntries: Int32; [MarshalAs(UnmanagedType.LPArray)] puRed: array of UInt16; var puGreen: UInt16; puBlue: IntPtr): UInt32;
    external 'opengl32.dll' name 'wglSetGammaTableI3D';
    public static z_SetGammaTableI3D_ovr5 := _z_SetGammaTableI3D_ovr5;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function SetGammaTableI3D(hDC: GDI_DC; iEntries: Int32; puRed: array of UInt16; var puGreen: UInt16; puBlue: IntPtr): UInt32 := z_SetGammaTableI3D_ovr5(hDC, iEntries, puRed, puGreen, puBlue);
    private static function _z_SetGammaTableI3D_ovr6(hDC: GDI_DC; iEntries: Int32; [MarshalAs(UnmanagedType.LPArray)] puRed: array of UInt16; puGreen: IntPtr; [MarshalAs(UnmanagedType.LPArray)] puBlue: array of UInt16): UInt32;
    external 'opengl32.dll' name 'wglSetGammaTableI3D';
    public static z_SetGammaTableI3D_ovr6 := _z_SetGammaTableI3D_ovr6;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function SetGammaTableI3D(hDC: GDI_DC; iEntries: Int32; puRed: array of UInt16; puGreen: IntPtr; puBlue: array of UInt16): UInt32 := z_SetGammaTableI3D_ovr6(hDC, iEntries, puRed, puGreen, puBlue);
    private static function _z_SetGammaTableI3D_ovr7(hDC: GDI_DC; iEntries: Int32; [MarshalAs(UnmanagedType.LPArray)] puRed: array of UInt16; puGreen: IntPtr; var puBlue: UInt16): UInt32;
    external 'opengl32.dll' name 'wglSetGammaTableI3D';
    public static z_SetGammaTableI3D_ovr7 := _z_SetGammaTableI3D_ovr7;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function SetGammaTableI3D(hDC: GDI_DC; iEntries: Int32; puRed: array of UInt16; puGreen: IntPtr; var puBlue: UInt16): UInt32 := z_SetGammaTableI3D_ovr7(hDC, iEntries, puRed, puGreen, puBlue);
    private static function _z_SetGammaTableI3D_ovr8(hDC: GDI_DC; iEntries: Int32; [MarshalAs(UnmanagedType.LPArray)] puRed: array of UInt16; puGreen: IntPtr; puBlue: IntPtr): UInt32;
    external 'opengl32.dll' name 'wglSetGammaTableI3D';
    public static z_SetGammaTableI3D_ovr8 := _z_SetGammaTableI3D_ovr8;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function SetGammaTableI3D(hDC: GDI_DC; iEntries: Int32; puRed: array of UInt16; puGreen: IntPtr; puBlue: IntPtr): UInt32 := z_SetGammaTableI3D_ovr8(hDC, iEntries, puRed, puGreen, puBlue);
    private static function _z_SetGammaTableI3D_ovr9(hDC: GDI_DC; iEntries: Int32; var puRed: UInt16; [MarshalAs(UnmanagedType.LPArray)] puGreen: array of UInt16; [MarshalAs(UnmanagedType.LPArray)] puBlue: array of UInt16): UInt32;
    external 'opengl32.dll' name 'wglSetGammaTableI3D';
    public static z_SetGammaTableI3D_ovr9 := _z_SetGammaTableI3D_ovr9;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function SetGammaTableI3D(hDC: GDI_DC; iEntries: Int32; var puRed: UInt16; puGreen: array of UInt16; puBlue: array of UInt16): UInt32 := z_SetGammaTableI3D_ovr9(hDC, iEntries, puRed, puGreen, puBlue);
    private static function _z_SetGammaTableI3D_ovr10(hDC: GDI_DC; iEntries: Int32; var puRed: UInt16; [MarshalAs(UnmanagedType.LPArray)] puGreen: array of UInt16; var puBlue: UInt16): UInt32;
    external 'opengl32.dll' name 'wglSetGammaTableI3D';
    public static z_SetGammaTableI3D_ovr10 := _z_SetGammaTableI3D_ovr10;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function SetGammaTableI3D(hDC: GDI_DC; iEntries: Int32; var puRed: UInt16; puGreen: array of UInt16; var puBlue: UInt16): UInt32 := z_SetGammaTableI3D_ovr10(hDC, iEntries, puRed, puGreen, puBlue);
    private static function _z_SetGammaTableI3D_ovr11(hDC: GDI_DC; iEntries: Int32; var puRed: UInt16; [MarshalAs(UnmanagedType.LPArray)] puGreen: array of UInt16; puBlue: IntPtr): UInt32;
    external 'opengl32.dll' name 'wglSetGammaTableI3D';
    public static z_SetGammaTableI3D_ovr11 := _z_SetGammaTableI3D_ovr11;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function SetGammaTableI3D(hDC: GDI_DC; iEntries: Int32; var puRed: UInt16; puGreen: array of UInt16; puBlue: IntPtr): UInt32 := z_SetGammaTableI3D_ovr11(hDC, iEntries, puRed, puGreen, puBlue);
    private static function _z_SetGammaTableI3D_ovr12(hDC: GDI_DC; iEntries: Int32; var puRed: UInt16; var puGreen: UInt16; [MarshalAs(UnmanagedType.LPArray)] puBlue: array of UInt16): UInt32;
    external 'opengl32.dll' name 'wglSetGammaTableI3D';
    public static z_SetGammaTableI3D_ovr12 := _z_SetGammaTableI3D_ovr12;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function SetGammaTableI3D(hDC: GDI_DC; iEntries: Int32; var puRed: UInt16; var puGreen: UInt16; puBlue: array of UInt16): UInt32 := z_SetGammaTableI3D_ovr12(hDC, iEntries, puRed, puGreen, puBlue);
    private static function _z_SetGammaTableI3D_ovr13(hDC: GDI_DC; iEntries: Int32; var puRed: UInt16; var puGreen: UInt16; var puBlue: UInt16): UInt32;
    external 'opengl32.dll' name 'wglSetGammaTableI3D';
    public static z_SetGammaTableI3D_ovr13 := _z_SetGammaTableI3D_ovr13;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function SetGammaTableI3D(hDC: GDI_DC; iEntries: Int32; var puRed: UInt16; var puGreen: UInt16; var puBlue: UInt16): UInt32 := z_SetGammaTableI3D_ovr13(hDC, iEntries, puRed, puGreen, puBlue);
    private static function _z_SetGammaTableI3D_ovr14(hDC: GDI_DC; iEntries: Int32; var puRed: UInt16; var puGreen: UInt16; puBlue: IntPtr): UInt32;
    external 'opengl32.dll' name 'wglSetGammaTableI3D';
    public static z_SetGammaTableI3D_ovr14 := _z_SetGammaTableI3D_ovr14;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function SetGammaTableI3D(hDC: GDI_DC; iEntries: Int32; var puRed: UInt16; var puGreen: UInt16; puBlue: IntPtr): UInt32 := z_SetGammaTableI3D_ovr14(hDC, iEntries, puRed, puGreen, puBlue);
    private static function _z_SetGammaTableI3D_ovr15(hDC: GDI_DC; iEntries: Int32; var puRed: UInt16; puGreen: IntPtr; [MarshalAs(UnmanagedType.LPArray)] puBlue: array of UInt16): UInt32;
    external 'opengl32.dll' name 'wglSetGammaTableI3D';
    public static z_SetGammaTableI3D_ovr15 := _z_SetGammaTableI3D_ovr15;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function SetGammaTableI3D(hDC: GDI_DC; iEntries: Int32; var puRed: UInt16; puGreen: IntPtr; puBlue: array of UInt16): UInt32 := z_SetGammaTableI3D_ovr15(hDC, iEntries, puRed, puGreen, puBlue);
    private static function _z_SetGammaTableI3D_ovr16(hDC: GDI_DC; iEntries: Int32; var puRed: UInt16; puGreen: IntPtr; var puBlue: UInt16): UInt32;
    external 'opengl32.dll' name 'wglSetGammaTableI3D';
    public static z_SetGammaTableI3D_ovr16 := _z_SetGammaTableI3D_ovr16;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function SetGammaTableI3D(hDC: GDI_DC; iEntries: Int32; var puRed: UInt16; puGreen: IntPtr; var puBlue: UInt16): UInt32 := z_SetGammaTableI3D_ovr16(hDC, iEntries, puRed, puGreen, puBlue);
    private static function _z_SetGammaTableI3D_ovr17(hDC: GDI_DC; iEntries: Int32; var puRed: UInt16; puGreen: IntPtr; puBlue: IntPtr): UInt32;
    external 'opengl32.dll' name 'wglSetGammaTableI3D';
    public static z_SetGammaTableI3D_ovr17 := _z_SetGammaTableI3D_ovr17;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function SetGammaTableI3D(hDC: GDI_DC; iEntries: Int32; var puRed: UInt16; puGreen: IntPtr; puBlue: IntPtr): UInt32 := z_SetGammaTableI3D_ovr17(hDC, iEntries, puRed, puGreen, puBlue);
    private static function _z_SetGammaTableI3D_ovr18(hDC: GDI_DC; iEntries: Int32; puRed: IntPtr; [MarshalAs(UnmanagedType.LPArray)] puGreen: array of UInt16; [MarshalAs(UnmanagedType.LPArray)] puBlue: array of UInt16): UInt32;
    external 'opengl32.dll' name 'wglSetGammaTableI3D';
    public static z_SetGammaTableI3D_ovr18 := _z_SetGammaTableI3D_ovr18;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function SetGammaTableI3D(hDC: GDI_DC; iEntries: Int32; puRed: IntPtr; puGreen: array of UInt16; puBlue: array of UInt16): UInt32 := z_SetGammaTableI3D_ovr18(hDC, iEntries, puRed, puGreen, puBlue);
    private static function _z_SetGammaTableI3D_ovr19(hDC: GDI_DC; iEntries: Int32; puRed: IntPtr; [MarshalAs(UnmanagedType.LPArray)] puGreen: array of UInt16; var puBlue: UInt16): UInt32;
    external 'opengl32.dll' name 'wglSetGammaTableI3D';
    public static z_SetGammaTableI3D_ovr19 := _z_SetGammaTableI3D_ovr19;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function SetGammaTableI3D(hDC: GDI_DC; iEntries: Int32; puRed: IntPtr; puGreen: array of UInt16; var puBlue: UInt16): UInt32 := z_SetGammaTableI3D_ovr19(hDC, iEntries, puRed, puGreen, puBlue);
    private static function _z_SetGammaTableI3D_ovr20(hDC: GDI_DC; iEntries: Int32; puRed: IntPtr; [MarshalAs(UnmanagedType.LPArray)] puGreen: array of UInt16; puBlue: IntPtr): UInt32;
    external 'opengl32.dll' name 'wglSetGammaTableI3D';
    public static z_SetGammaTableI3D_ovr20 := _z_SetGammaTableI3D_ovr20;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function SetGammaTableI3D(hDC: GDI_DC; iEntries: Int32; puRed: IntPtr; puGreen: array of UInt16; puBlue: IntPtr): UInt32 := z_SetGammaTableI3D_ovr20(hDC, iEntries, puRed, puGreen, puBlue);
    private static function _z_SetGammaTableI3D_ovr21(hDC: GDI_DC; iEntries: Int32; puRed: IntPtr; var puGreen: UInt16; [MarshalAs(UnmanagedType.LPArray)] puBlue: array of UInt16): UInt32;
    external 'opengl32.dll' name 'wglSetGammaTableI3D';
    public static z_SetGammaTableI3D_ovr21 := _z_SetGammaTableI3D_ovr21;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function SetGammaTableI3D(hDC: GDI_DC; iEntries: Int32; puRed: IntPtr; var puGreen: UInt16; puBlue: array of UInt16): UInt32 := z_SetGammaTableI3D_ovr21(hDC, iEntries, puRed, puGreen, puBlue);
    private static function _z_SetGammaTableI3D_ovr22(hDC: GDI_DC; iEntries: Int32; puRed: IntPtr; var puGreen: UInt16; var puBlue: UInt16): UInt32;
    external 'opengl32.dll' name 'wglSetGammaTableI3D';
    public static z_SetGammaTableI3D_ovr22 := _z_SetGammaTableI3D_ovr22;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function SetGammaTableI3D(hDC: GDI_DC; iEntries: Int32; puRed: IntPtr; var puGreen: UInt16; var puBlue: UInt16): UInt32 := z_SetGammaTableI3D_ovr22(hDC, iEntries, puRed, puGreen, puBlue);
    private static function _z_SetGammaTableI3D_ovr23(hDC: GDI_DC; iEntries: Int32; puRed: IntPtr; var puGreen: UInt16; puBlue: IntPtr): UInt32;
    external 'opengl32.dll' name 'wglSetGammaTableI3D';
    public static z_SetGammaTableI3D_ovr23 := _z_SetGammaTableI3D_ovr23;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function SetGammaTableI3D(hDC: GDI_DC; iEntries: Int32; puRed: IntPtr; var puGreen: UInt16; puBlue: IntPtr): UInt32 := z_SetGammaTableI3D_ovr23(hDC, iEntries, puRed, puGreen, puBlue);
    private static function _z_SetGammaTableI3D_ovr24(hDC: GDI_DC; iEntries: Int32; puRed: IntPtr; puGreen: IntPtr; [MarshalAs(UnmanagedType.LPArray)] puBlue: array of UInt16): UInt32;
    external 'opengl32.dll' name 'wglSetGammaTableI3D';
    public static z_SetGammaTableI3D_ovr24 := _z_SetGammaTableI3D_ovr24;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function SetGammaTableI3D(hDC: GDI_DC; iEntries: Int32; puRed: IntPtr; puGreen: IntPtr; puBlue: array of UInt16): UInt32 := z_SetGammaTableI3D_ovr24(hDC, iEntries, puRed, puGreen, puBlue);
    private static function _z_SetGammaTableI3D_ovr25(hDC: GDI_DC; iEntries: Int32; puRed: IntPtr; puGreen: IntPtr; var puBlue: UInt16): UInt32;
    external 'opengl32.dll' name 'wglSetGammaTableI3D';
    public static z_SetGammaTableI3D_ovr25 := _z_SetGammaTableI3D_ovr25;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function SetGammaTableI3D(hDC: GDI_DC; iEntries: Int32; puRed: IntPtr; puGreen: IntPtr; var puBlue: UInt16): UInt32 := z_SetGammaTableI3D_ovr25(hDC, iEntries, puRed, puGreen, puBlue);
    private static function _z_SetGammaTableI3D_ovr26(hDC: GDI_DC; iEntries: Int32; puRed: IntPtr; puGreen: IntPtr; puBlue: IntPtr): UInt32;
    external 'opengl32.dll' name 'wglSetGammaTableI3D';
    public static z_SetGammaTableI3D_ovr26 := _z_SetGammaTableI3D_ovr26;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function SetGammaTableI3D(hDC: GDI_DC; iEntries: Int32; puRed: IntPtr; puGreen: IntPtr; puBlue: IntPtr): UInt32 := z_SetGammaTableI3D_ovr26(hDC, iEntries, puRed, puGreen, puBlue);
    
  end;
  
  wglGenlockI3D = static class
    
    private static function _z_EnableGenlockI3D_ovr0(hDC: GDI_DC): UInt32;
    external 'opengl32.dll' name 'wglEnableGenlockI3D';
    public static z_EnableGenlockI3D_ovr0 := _z_EnableGenlockI3D_ovr0;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnableGenlockI3D(hDC: GDI_DC): UInt32 := z_EnableGenlockI3D_ovr0(hDC);
    
    private static function _z_DisableGenlockI3D_ovr0(hDC: GDI_DC): UInt32;
    external 'opengl32.dll' name 'wglDisableGenlockI3D';
    public static z_DisableGenlockI3D_ovr0 := _z_DisableGenlockI3D_ovr0;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function DisableGenlockI3D(hDC: GDI_DC): UInt32 := z_DisableGenlockI3D_ovr0(hDC);
    
    private static function _z_IsEnabledGenlockI3D_ovr0(hDC: GDI_DC; [MarshalAs(UnmanagedType.LPArray)] pFlag: array of UInt32): UInt32;
    external 'opengl32.dll' name 'wglIsEnabledGenlockI3D';
    public static z_IsEnabledGenlockI3D_ovr0 := _z_IsEnabledGenlockI3D_ovr0;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function IsEnabledGenlockI3D(hDC: GDI_DC; pFlag: array of UInt32): UInt32 := z_IsEnabledGenlockI3D_ovr0(hDC, pFlag);
    private static function _z_IsEnabledGenlockI3D_ovr1(hDC: GDI_DC; var pFlag: UInt32): UInt32;
    external 'opengl32.dll' name 'wglIsEnabledGenlockI3D';
    public static z_IsEnabledGenlockI3D_ovr1 := _z_IsEnabledGenlockI3D_ovr1;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function IsEnabledGenlockI3D(hDC: GDI_DC; var pFlag: UInt32): UInt32 := z_IsEnabledGenlockI3D_ovr1(hDC, pFlag);
    private static function _z_IsEnabledGenlockI3D_ovr2(hDC: GDI_DC; pFlag: IntPtr): UInt32;
    external 'opengl32.dll' name 'wglIsEnabledGenlockI3D';
    public static z_IsEnabledGenlockI3D_ovr2 := _z_IsEnabledGenlockI3D_ovr2;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function IsEnabledGenlockI3D(hDC: GDI_DC; pFlag: IntPtr): UInt32 := z_IsEnabledGenlockI3D_ovr2(hDC, pFlag);
    
    private static function _z_GenlockSourceI3D_ovr0(hDC: GDI_DC; uSource: UInt32): UInt32;
    external 'opengl32.dll' name 'wglGenlockSourceI3D';
    public static z_GenlockSourceI3D_ovr0 := _z_GenlockSourceI3D_ovr0;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function GenlockSourceI3D(hDC: GDI_DC; uSource: UInt32): UInt32 := z_GenlockSourceI3D_ovr0(hDC, uSource);
    
    private static function _z_GetGenlockSourceI3D_ovr0(hDC: GDI_DC; [MarshalAs(UnmanagedType.LPArray)] uSource: array of UInt32): UInt32;
    external 'opengl32.dll' name 'wglGetGenlockSourceI3D';
    public static z_GetGenlockSourceI3D_ovr0 := _z_GetGenlockSourceI3D_ovr0;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function GetGenlockSourceI3D(hDC: GDI_DC; uSource: array of UInt32): UInt32 := z_GetGenlockSourceI3D_ovr0(hDC, uSource);
    private static function _z_GetGenlockSourceI3D_ovr1(hDC: GDI_DC; var uSource: UInt32): UInt32;
    external 'opengl32.dll' name 'wglGetGenlockSourceI3D';
    public static z_GetGenlockSourceI3D_ovr1 := _z_GetGenlockSourceI3D_ovr1;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function GetGenlockSourceI3D(hDC: GDI_DC; var uSource: UInt32): UInt32 := z_GetGenlockSourceI3D_ovr1(hDC, uSource);
    private static function _z_GetGenlockSourceI3D_ovr2(hDC: GDI_DC; uSource: IntPtr): UInt32;
    external 'opengl32.dll' name 'wglGetGenlockSourceI3D';
    public static z_GetGenlockSourceI3D_ovr2 := _z_GetGenlockSourceI3D_ovr2;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function GetGenlockSourceI3D(hDC: GDI_DC; uSource: IntPtr): UInt32 := z_GetGenlockSourceI3D_ovr2(hDC, uSource);
    
    private static function _z_GenlockSourceEdgeI3D_ovr0(hDC: GDI_DC; uEdge: UInt32): UInt32;
    external 'opengl32.dll' name 'wglGenlockSourceEdgeI3D';
    public static z_GenlockSourceEdgeI3D_ovr0 := _z_GenlockSourceEdgeI3D_ovr0;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function GenlockSourceEdgeI3D(hDC: GDI_DC; uEdge: UInt32): UInt32 := z_GenlockSourceEdgeI3D_ovr0(hDC, uEdge);
    
    private static function _z_GetGenlockSourceEdgeI3D_ovr0(hDC: GDI_DC; [MarshalAs(UnmanagedType.LPArray)] uEdge: array of UInt32): UInt32;
    external 'opengl32.dll' name 'wglGetGenlockSourceEdgeI3D';
    public static z_GetGenlockSourceEdgeI3D_ovr0 := _z_GetGenlockSourceEdgeI3D_ovr0;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function GetGenlockSourceEdgeI3D(hDC: GDI_DC; uEdge: array of UInt32): UInt32 := z_GetGenlockSourceEdgeI3D_ovr0(hDC, uEdge);
    private static function _z_GetGenlockSourceEdgeI3D_ovr1(hDC: GDI_DC; var uEdge: UInt32): UInt32;
    external 'opengl32.dll' name 'wglGetGenlockSourceEdgeI3D';
    public static z_GetGenlockSourceEdgeI3D_ovr1 := _z_GetGenlockSourceEdgeI3D_ovr1;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function GetGenlockSourceEdgeI3D(hDC: GDI_DC; var uEdge: UInt32): UInt32 := z_GetGenlockSourceEdgeI3D_ovr1(hDC, uEdge);
    private static function _z_GetGenlockSourceEdgeI3D_ovr2(hDC: GDI_DC; uEdge: IntPtr): UInt32;
    external 'opengl32.dll' name 'wglGetGenlockSourceEdgeI3D';
    public static z_GetGenlockSourceEdgeI3D_ovr2 := _z_GetGenlockSourceEdgeI3D_ovr2;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function GetGenlockSourceEdgeI3D(hDC: GDI_DC; uEdge: IntPtr): UInt32 := z_GetGenlockSourceEdgeI3D_ovr2(hDC, uEdge);
    
    private static function _z_GenlockSampleRateI3D_ovr0(hDC: GDI_DC; uRate: UInt32): UInt32;
    external 'opengl32.dll' name 'wglGenlockSampleRateI3D';
    public static z_GenlockSampleRateI3D_ovr0 := _z_GenlockSampleRateI3D_ovr0;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function GenlockSampleRateI3D(hDC: GDI_DC; uRate: UInt32): UInt32 := z_GenlockSampleRateI3D_ovr0(hDC, uRate);
    
    private static function _z_GetGenlockSampleRateI3D_ovr0(hDC: GDI_DC; [MarshalAs(UnmanagedType.LPArray)] uRate: array of UInt32): UInt32;
    external 'opengl32.dll' name 'wglGetGenlockSampleRateI3D';
    public static z_GetGenlockSampleRateI3D_ovr0 := _z_GetGenlockSampleRateI3D_ovr0;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function GetGenlockSampleRateI3D(hDC: GDI_DC; uRate: array of UInt32): UInt32 := z_GetGenlockSampleRateI3D_ovr0(hDC, uRate);
    private static function _z_GetGenlockSampleRateI3D_ovr1(hDC: GDI_DC; var uRate: UInt32): UInt32;
    external 'opengl32.dll' name 'wglGetGenlockSampleRateI3D';
    public static z_GetGenlockSampleRateI3D_ovr1 := _z_GetGenlockSampleRateI3D_ovr1;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function GetGenlockSampleRateI3D(hDC: GDI_DC; var uRate: UInt32): UInt32 := z_GetGenlockSampleRateI3D_ovr1(hDC, uRate);
    private static function _z_GetGenlockSampleRateI3D_ovr2(hDC: GDI_DC; uRate: IntPtr): UInt32;
    external 'opengl32.dll' name 'wglGetGenlockSampleRateI3D';
    public static z_GetGenlockSampleRateI3D_ovr2 := _z_GetGenlockSampleRateI3D_ovr2;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function GetGenlockSampleRateI3D(hDC: GDI_DC; uRate: IntPtr): UInt32 := z_GetGenlockSampleRateI3D_ovr2(hDC, uRate);
    
    private static function _z_GenlockSourceDelayI3D_ovr0(hDC: GDI_DC; uDelay: UInt32): UInt32;
    external 'opengl32.dll' name 'wglGenlockSourceDelayI3D';
    public static z_GenlockSourceDelayI3D_ovr0 := _z_GenlockSourceDelayI3D_ovr0;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function GenlockSourceDelayI3D(hDC: GDI_DC; uDelay: UInt32): UInt32 := z_GenlockSourceDelayI3D_ovr0(hDC, uDelay);
    
    private static function _z_GetGenlockSourceDelayI3D_ovr0(hDC: GDI_DC; [MarshalAs(UnmanagedType.LPArray)] uDelay: array of UInt32): UInt32;
    external 'opengl32.dll' name 'wglGetGenlockSourceDelayI3D';
    public static z_GetGenlockSourceDelayI3D_ovr0 := _z_GetGenlockSourceDelayI3D_ovr0;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function GetGenlockSourceDelayI3D(hDC: GDI_DC; uDelay: array of UInt32): UInt32 := z_GetGenlockSourceDelayI3D_ovr0(hDC, uDelay);
    private static function _z_GetGenlockSourceDelayI3D_ovr1(hDC: GDI_DC; var uDelay: UInt32): UInt32;
    external 'opengl32.dll' name 'wglGetGenlockSourceDelayI3D';
    public static z_GetGenlockSourceDelayI3D_ovr1 := _z_GetGenlockSourceDelayI3D_ovr1;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function GetGenlockSourceDelayI3D(hDC: GDI_DC; var uDelay: UInt32): UInt32 := z_GetGenlockSourceDelayI3D_ovr1(hDC, uDelay);
    private static function _z_GetGenlockSourceDelayI3D_ovr2(hDC: GDI_DC; uDelay: IntPtr): UInt32;
    external 'opengl32.dll' name 'wglGetGenlockSourceDelayI3D';
    public static z_GetGenlockSourceDelayI3D_ovr2 := _z_GetGenlockSourceDelayI3D_ovr2;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function GetGenlockSourceDelayI3D(hDC: GDI_DC; uDelay: IntPtr): UInt32 := z_GetGenlockSourceDelayI3D_ovr2(hDC, uDelay);
    
    private static function _z_QueryGenlockMaxSourceDelayI3D_ovr0(hDC: GDI_DC; [MarshalAs(UnmanagedType.LPArray)] uMaxLineDelay: array of UInt32; [MarshalAs(UnmanagedType.LPArray)] uMaxPixelDelay: array of UInt32): UInt32;
    external 'opengl32.dll' name 'wglQueryGenlockMaxSourceDelayI3D';
    public static z_QueryGenlockMaxSourceDelayI3D_ovr0 := _z_QueryGenlockMaxSourceDelayI3D_ovr0;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function QueryGenlockMaxSourceDelayI3D(hDC: GDI_DC; uMaxLineDelay: array of UInt32; uMaxPixelDelay: array of UInt32): UInt32 := z_QueryGenlockMaxSourceDelayI3D_ovr0(hDC, uMaxLineDelay, uMaxPixelDelay);
    private static function _z_QueryGenlockMaxSourceDelayI3D_ovr1(hDC: GDI_DC; [MarshalAs(UnmanagedType.LPArray)] uMaxLineDelay: array of UInt32; var uMaxPixelDelay: UInt32): UInt32;
    external 'opengl32.dll' name 'wglQueryGenlockMaxSourceDelayI3D';
    public static z_QueryGenlockMaxSourceDelayI3D_ovr1 := _z_QueryGenlockMaxSourceDelayI3D_ovr1;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function QueryGenlockMaxSourceDelayI3D(hDC: GDI_DC; uMaxLineDelay: array of UInt32; var uMaxPixelDelay: UInt32): UInt32 := z_QueryGenlockMaxSourceDelayI3D_ovr1(hDC, uMaxLineDelay, uMaxPixelDelay);
    private static function _z_QueryGenlockMaxSourceDelayI3D_ovr2(hDC: GDI_DC; [MarshalAs(UnmanagedType.LPArray)] uMaxLineDelay: array of UInt32; uMaxPixelDelay: IntPtr): UInt32;
    external 'opengl32.dll' name 'wglQueryGenlockMaxSourceDelayI3D';
    public static z_QueryGenlockMaxSourceDelayI3D_ovr2 := _z_QueryGenlockMaxSourceDelayI3D_ovr2;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function QueryGenlockMaxSourceDelayI3D(hDC: GDI_DC; uMaxLineDelay: array of UInt32; uMaxPixelDelay: IntPtr): UInt32 := z_QueryGenlockMaxSourceDelayI3D_ovr2(hDC, uMaxLineDelay, uMaxPixelDelay);
    private static function _z_QueryGenlockMaxSourceDelayI3D_ovr3(hDC: GDI_DC; var uMaxLineDelay: UInt32; [MarshalAs(UnmanagedType.LPArray)] uMaxPixelDelay: array of UInt32): UInt32;
    external 'opengl32.dll' name 'wglQueryGenlockMaxSourceDelayI3D';
    public static z_QueryGenlockMaxSourceDelayI3D_ovr3 := _z_QueryGenlockMaxSourceDelayI3D_ovr3;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function QueryGenlockMaxSourceDelayI3D(hDC: GDI_DC; var uMaxLineDelay: UInt32; uMaxPixelDelay: array of UInt32): UInt32 := z_QueryGenlockMaxSourceDelayI3D_ovr3(hDC, uMaxLineDelay, uMaxPixelDelay);
    private static function _z_QueryGenlockMaxSourceDelayI3D_ovr4(hDC: GDI_DC; var uMaxLineDelay: UInt32; var uMaxPixelDelay: UInt32): UInt32;
    external 'opengl32.dll' name 'wglQueryGenlockMaxSourceDelayI3D';
    public static z_QueryGenlockMaxSourceDelayI3D_ovr4 := _z_QueryGenlockMaxSourceDelayI3D_ovr4;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function QueryGenlockMaxSourceDelayI3D(hDC: GDI_DC; var uMaxLineDelay: UInt32; var uMaxPixelDelay: UInt32): UInt32 := z_QueryGenlockMaxSourceDelayI3D_ovr4(hDC, uMaxLineDelay, uMaxPixelDelay);
    private static function _z_QueryGenlockMaxSourceDelayI3D_ovr5(hDC: GDI_DC; var uMaxLineDelay: UInt32; uMaxPixelDelay: IntPtr): UInt32;
    external 'opengl32.dll' name 'wglQueryGenlockMaxSourceDelayI3D';
    public static z_QueryGenlockMaxSourceDelayI3D_ovr5 := _z_QueryGenlockMaxSourceDelayI3D_ovr5;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function QueryGenlockMaxSourceDelayI3D(hDC: GDI_DC; var uMaxLineDelay: UInt32; uMaxPixelDelay: IntPtr): UInt32 := z_QueryGenlockMaxSourceDelayI3D_ovr5(hDC, uMaxLineDelay, uMaxPixelDelay);
    private static function _z_QueryGenlockMaxSourceDelayI3D_ovr6(hDC: GDI_DC; uMaxLineDelay: IntPtr; [MarshalAs(UnmanagedType.LPArray)] uMaxPixelDelay: array of UInt32): UInt32;
    external 'opengl32.dll' name 'wglQueryGenlockMaxSourceDelayI3D';
    public static z_QueryGenlockMaxSourceDelayI3D_ovr6 := _z_QueryGenlockMaxSourceDelayI3D_ovr6;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function QueryGenlockMaxSourceDelayI3D(hDC: GDI_DC; uMaxLineDelay: IntPtr; uMaxPixelDelay: array of UInt32): UInt32 := z_QueryGenlockMaxSourceDelayI3D_ovr6(hDC, uMaxLineDelay, uMaxPixelDelay);
    private static function _z_QueryGenlockMaxSourceDelayI3D_ovr7(hDC: GDI_DC; uMaxLineDelay: IntPtr; var uMaxPixelDelay: UInt32): UInt32;
    external 'opengl32.dll' name 'wglQueryGenlockMaxSourceDelayI3D';
    public static z_QueryGenlockMaxSourceDelayI3D_ovr7 := _z_QueryGenlockMaxSourceDelayI3D_ovr7;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function QueryGenlockMaxSourceDelayI3D(hDC: GDI_DC; uMaxLineDelay: IntPtr; var uMaxPixelDelay: UInt32): UInt32 := z_QueryGenlockMaxSourceDelayI3D_ovr7(hDC, uMaxLineDelay, uMaxPixelDelay);
    private static function _z_QueryGenlockMaxSourceDelayI3D_ovr8(hDC: GDI_DC; uMaxLineDelay: IntPtr; uMaxPixelDelay: IntPtr): UInt32;
    external 'opengl32.dll' name 'wglQueryGenlockMaxSourceDelayI3D';
    public static z_QueryGenlockMaxSourceDelayI3D_ovr8 := _z_QueryGenlockMaxSourceDelayI3D_ovr8;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function QueryGenlockMaxSourceDelayI3D(hDC: GDI_DC; uMaxLineDelay: IntPtr; uMaxPixelDelay: IntPtr): UInt32 := z_QueryGenlockMaxSourceDelayI3D_ovr8(hDC, uMaxLineDelay, uMaxPixelDelay);
    
  end;
  
  wglImageBufferI3D = static class
    
    private static function _z_CreateImageBufferI3D_ovr0(hDC: GDI_DC; dwSize: UInt32; uFlags: UInt32): IntPtr;
    external 'opengl32.dll' name 'wglCreateImageBufferI3D';
    public static z_CreateImageBufferI3D_ovr0 := _z_CreateImageBufferI3D_ovr0;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function CreateImageBufferI3D(hDC: GDI_DC; dwSize: UInt32; uFlags: UInt32): IntPtr := z_CreateImageBufferI3D_ovr0(hDC, dwSize, uFlags);
    
    private static function _z_DestroyImageBufferI3D_ovr0(hDC: GDI_DC; pAddress: IntPtr): UInt32;
    external 'opengl32.dll' name 'wglDestroyImageBufferI3D';
    public static z_DestroyImageBufferI3D_ovr0 := _z_DestroyImageBufferI3D_ovr0;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function DestroyImageBufferI3D(hDC: GDI_DC; pAddress: IntPtr): UInt32 := z_DestroyImageBufferI3D_ovr0(hDC, pAddress);
    
    private static function _z_AssociateImageBufferEventsI3D_ovr0(hDC: GDI_DC; [MarshalAs(UnmanagedType.LPArray)] pEvent: array of IntPtr; [MarshalAs(UnmanagedType.LPArray)] pAddress: array of IntPtr; [MarshalAs(UnmanagedType.LPArray)] pSize: array of UInt32; count: UInt32): UInt32;
    external 'opengl32.dll' name 'wglAssociateImageBufferEventsI3D';
    public static z_AssociateImageBufferEventsI3D_ovr0 := _z_AssociateImageBufferEventsI3D_ovr0;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function AssociateImageBufferEventsI3D(hDC: GDI_DC; pEvent: array of IntPtr; pAddress: array of IntPtr; pSize: array of UInt32; count: UInt32): UInt32 := z_AssociateImageBufferEventsI3D_ovr0(hDC, pEvent, pAddress, pSize, count);
    private static function _z_AssociateImageBufferEventsI3D_ovr1(hDC: GDI_DC; [MarshalAs(UnmanagedType.LPArray)] pEvent: array of IntPtr; [MarshalAs(UnmanagedType.LPArray)] pAddress: array of IntPtr; var pSize: UInt32; count: UInt32): UInt32;
    external 'opengl32.dll' name 'wglAssociateImageBufferEventsI3D';
    public static z_AssociateImageBufferEventsI3D_ovr1 := _z_AssociateImageBufferEventsI3D_ovr1;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function AssociateImageBufferEventsI3D(hDC: GDI_DC; pEvent: array of IntPtr; pAddress: array of IntPtr; var pSize: UInt32; count: UInt32): UInt32 := z_AssociateImageBufferEventsI3D_ovr1(hDC, pEvent, pAddress, pSize, count);
    private static function _z_AssociateImageBufferEventsI3D_ovr2(hDC: GDI_DC; [MarshalAs(UnmanagedType.LPArray)] pEvent: array of IntPtr; [MarshalAs(UnmanagedType.LPArray)] pAddress: array of IntPtr; pSize: IntPtr; count: UInt32): UInt32;
    external 'opengl32.dll' name 'wglAssociateImageBufferEventsI3D';
    public static z_AssociateImageBufferEventsI3D_ovr2 := _z_AssociateImageBufferEventsI3D_ovr2;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function AssociateImageBufferEventsI3D(hDC: GDI_DC; pEvent: array of IntPtr; pAddress: array of IntPtr; pSize: IntPtr; count: UInt32): UInt32 := z_AssociateImageBufferEventsI3D_ovr2(hDC, pEvent, pAddress, pSize, count);
    private static function _z_AssociateImageBufferEventsI3D_ovr3(hDC: GDI_DC; [MarshalAs(UnmanagedType.LPArray)] pEvent: array of IntPtr; var pAddress: IntPtr; [MarshalAs(UnmanagedType.LPArray)] pSize: array of UInt32; count: UInt32): UInt32;
    external 'opengl32.dll' name 'wglAssociateImageBufferEventsI3D';
    public static z_AssociateImageBufferEventsI3D_ovr3 := _z_AssociateImageBufferEventsI3D_ovr3;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function AssociateImageBufferEventsI3D(hDC: GDI_DC; pEvent: array of IntPtr; var pAddress: IntPtr; pSize: array of UInt32; count: UInt32): UInt32 := z_AssociateImageBufferEventsI3D_ovr3(hDC, pEvent, pAddress, pSize, count);
    private static function _z_AssociateImageBufferEventsI3D_ovr4(hDC: GDI_DC; [MarshalAs(UnmanagedType.LPArray)] pEvent: array of IntPtr; var pAddress: IntPtr; var pSize: UInt32; count: UInt32): UInt32;
    external 'opengl32.dll' name 'wglAssociateImageBufferEventsI3D';
    public static z_AssociateImageBufferEventsI3D_ovr4 := _z_AssociateImageBufferEventsI3D_ovr4;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function AssociateImageBufferEventsI3D(hDC: GDI_DC; pEvent: array of IntPtr; var pAddress: IntPtr; var pSize: UInt32; count: UInt32): UInt32 := z_AssociateImageBufferEventsI3D_ovr4(hDC, pEvent, pAddress, pSize, count);
    private static function _z_AssociateImageBufferEventsI3D_ovr5(hDC: GDI_DC; [MarshalAs(UnmanagedType.LPArray)] pEvent: array of IntPtr; var pAddress: IntPtr; pSize: IntPtr; count: UInt32): UInt32;
    external 'opengl32.dll' name 'wglAssociateImageBufferEventsI3D';
    public static z_AssociateImageBufferEventsI3D_ovr5 := _z_AssociateImageBufferEventsI3D_ovr5;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function AssociateImageBufferEventsI3D(hDC: GDI_DC; pEvent: array of IntPtr; var pAddress: IntPtr; pSize: IntPtr; count: UInt32): UInt32 := z_AssociateImageBufferEventsI3D_ovr5(hDC, pEvent, pAddress, pSize, count);
    private static function _z_AssociateImageBufferEventsI3D_ovr6(hDC: GDI_DC; [MarshalAs(UnmanagedType.LPArray)] pEvent: array of IntPtr; pAddress: pointer; [MarshalAs(UnmanagedType.LPArray)] pSize: array of UInt32; count: UInt32): UInt32;
    external 'opengl32.dll' name 'wglAssociateImageBufferEventsI3D';
    public static z_AssociateImageBufferEventsI3D_ovr6 := _z_AssociateImageBufferEventsI3D_ovr6;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function AssociateImageBufferEventsI3D(hDC: GDI_DC; pEvent: array of IntPtr; pAddress: pointer; pSize: array of UInt32; count: UInt32): UInt32 := z_AssociateImageBufferEventsI3D_ovr6(hDC, pEvent, pAddress, pSize, count);
    private static function _z_AssociateImageBufferEventsI3D_ovr7(hDC: GDI_DC; [MarshalAs(UnmanagedType.LPArray)] pEvent: array of IntPtr; pAddress: pointer; var pSize: UInt32; count: UInt32): UInt32;
    external 'opengl32.dll' name 'wglAssociateImageBufferEventsI3D';
    public static z_AssociateImageBufferEventsI3D_ovr7 := _z_AssociateImageBufferEventsI3D_ovr7;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function AssociateImageBufferEventsI3D(hDC: GDI_DC; pEvent: array of IntPtr; pAddress: pointer; var pSize: UInt32; count: UInt32): UInt32 := z_AssociateImageBufferEventsI3D_ovr7(hDC, pEvent, pAddress, pSize, count);
    private static function _z_AssociateImageBufferEventsI3D_ovr8(hDC: GDI_DC; [MarshalAs(UnmanagedType.LPArray)] pEvent: array of IntPtr; pAddress: pointer; pSize: IntPtr; count: UInt32): UInt32;
    external 'opengl32.dll' name 'wglAssociateImageBufferEventsI3D';
    public static z_AssociateImageBufferEventsI3D_ovr8 := _z_AssociateImageBufferEventsI3D_ovr8;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function AssociateImageBufferEventsI3D(hDC: GDI_DC; pEvent: array of IntPtr; pAddress: pointer; pSize: IntPtr; count: UInt32): UInt32 := z_AssociateImageBufferEventsI3D_ovr8(hDC, pEvent, pAddress, pSize, count);
    private static function _z_AssociateImageBufferEventsI3D_ovr9(hDC: GDI_DC; var pEvent: IntPtr; [MarshalAs(UnmanagedType.LPArray)] pAddress: array of IntPtr; [MarshalAs(UnmanagedType.LPArray)] pSize: array of UInt32; count: UInt32): UInt32;
    external 'opengl32.dll' name 'wglAssociateImageBufferEventsI3D';
    public static z_AssociateImageBufferEventsI3D_ovr9 := _z_AssociateImageBufferEventsI3D_ovr9;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function AssociateImageBufferEventsI3D(hDC: GDI_DC; var pEvent: IntPtr; pAddress: array of IntPtr; pSize: array of UInt32; count: UInt32): UInt32 := z_AssociateImageBufferEventsI3D_ovr9(hDC, pEvent, pAddress, pSize, count);
    private static function _z_AssociateImageBufferEventsI3D_ovr10(hDC: GDI_DC; var pEvent: IntPtr; [MarshalAs(UnmanagedType.LPArray)] pAddress: array of IntPtr; var pSize: UInt32; count: UInt32): UInt32;
    external 'opengl32.dll' name 'wglAssociateImageBufferEventsI3D';
    public static z_AssociateImageBufferEventsI3D_ovr10 := _z_AssociateImageBufferEventsI3D_ovr10;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function AssociateImageBufferEventsI3D(hDC: GDI_DC; var pEvent: IntPtr; pAddress: array of IntPtr; var pSize: UInt32; count: UInt32): UInt32 := z_AssociateImageBufferEventsI3D_ovr10(hDC, pEvent, pAddress, pSize, count);
    private static function _z_AssociateImageBufferEventsI3D_ovr11(hDC: GDI_DC; var pEvent: IntPtr; [MarshalAs(UnmanagedType.LPArray)] pAddress: array of IntPtr; pSize: IntPtr; count: UInt32): UInt32;
    external 'opengl32.dll' name 'wglAssociateImageBufferEventsI3D';
    public static z_AssociateImageBufferEventsI3D_ovr11 := _z_AssociateImageBufferEventsI3D_ovr11;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function AssociateImageBufferEventsI3D(hDC: GDI_DC; var pEvent: IntPtr; pAddress: array of IntPtr; pSize: IntPtr; count: UInt32): UInt32 := z_AssociateImageBufferEventsI3D_ovr11(hDC, pEvent, pAddress, pSize, count);
    private static function _z_AssociateImageBufferEventsI3D_ovr12(hDC: GDI_DC; var pEvent: IntPtr; var pAddress: IntPtr; [MarshalAs(UnmanagedType.LPArray)] pSize: array of UInt32; count: UInt32): UInt32;
    external 'opengl32.dll' name 'wglAssociateImageBufferEventsI3D';
    public static z_AssociateImageBufferEventsI3D_ovr12 := _z_AssociateImageBufferEventsI3D_ovr12;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function AssociateImageBufferEventsI3D(hDC: GDI_DC; var pEvent: IntPtr; var pAddress: IntPtr; pSize: array of UInt32; count: UInt32): UInt32 := z_AssociateImageBufferEventsI3D_ovr12(hDC, pEvent, pAddress, pSize, count);
    private static function _z_AssociateImageBufferEventsI3D_ovr13(hDC: GDI_DC; var pEvent: IntPtr; var pAddress: IntPtr; var pSize: UInt32; count: UInt32): UInt32;
    external 'opengl32.dll' name 'wglAssociateImageBufferEventsI3D';
    public static z_AssociateImageBufferEventsI3D_ovr13 := _z_AssociateImageBufferEventsI3D_ovr13;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function AssociateImageBufferEventsI3D(hDC: GDI_DC; var pEvent: IntPtr; var pAddress: IntPtr; var pSize: UInt32; count: UInt32): UInt32 := z_AssociateImageBufferEventsI3D_ovr13(hDC, pEvent, pAddress, pSize, count);
    private static function _z_AssociateImageBufferEventsI3D_ovr14(hDC: GDI_DC; var pEvent: IntPtr; var pAddress: IntPtr; pSize: IntPtr; count: UInt32): UInt32;
    external 'opengl32.dll' name 'wglAssociateImageBufferEventsI3D';
    public static z_AssociateImageBufferEventsI3D_ovr14 := _z_AssociateImageBufferEventsI3D_ovr14;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function AssociateImageBufferEventsI3D(hDC: GDI_DC; var pEvent: IntPtr; var pAddress: IntPtr; pSize: IntPtr; count: UInt32): UInt32 := z_AssociateImageBufferEventsI3D_ovr14(hDC, pEvent, pAddress, pSize, count);
    private static function _z_AssociateImageBufferEventsI3D_ovr15(hDC: GDI_DC; var pEvent: IntPtr; pAddress: pointer; [MarshalAs(UnmanagedType.LPArray)] pSize: array of UInt32; count: UInt32): UInt32;
    external 'opengl32.dll' name 'wglAssociateImageBufferEventsI3D';
    public static z_AssociateImageBufferEventsI3D_ovr15 := _z_AssociateImageBufferEventsI3D_ovr15;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function AssociateImageBufferEventsI3D(hDC: GDI_DC; var pEvent: IntPtr; pAddress: pointer; pSize: array of UInt32; count: UInt32): UInt32 := z_AssociateImageBufferEventsI3D_ovr15(hDC, pEvent, pAddress, pSize, count);
    private static function _z_AssociateImageBufferEventsI3D_ovr16(hDC: GDI_DC; var pEvent: IntPtr; pAddress: pointer; var pSize: UInt32; count: UInt32): UInt32;
    external 'opengl32.dll' name 'wglAssociateImageBufferEventsI3D';
    public static z_AssociateImageBufferEventsI3D_ovr16 := _z_AssociateImageBufferEventsI3D_ovr16;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function AssociateImageBufferEventsI3D(hDC: GDI_DC; var pEvent: IntPtr; pAddress: pointer; var pSize: UInt32; count: UInt32): UInt32 := z_AssociateImageBufferEventsI3D_ovr16(hDC, pEvent, pAddress, pSize, count);
    private static function _z_AssociateImageBufferEventsI3D_ovr17(hDC: GDI_DC; var pEvent: IntPtr; pAddress: pointer; pSize: IntPtr; count: UInt32): UInt32;
    external 'opengl32.dll' name 'wglAssociateImageBufferEventsI3D';
    public static z_AssociateImageBufferEventsI3D_ovr17 := _z_AssociateImageBufferEventsI3D_ovr17;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function AssociateImageBufferEventsI3D(hDC: GDI_DC; var pEvent: IntPtr; pAddress: pointer; pSize: IntPtr; count: UInt32): UInt32 := z_AssociateImageBufferEventsI3D_ovr17(hDC, pEvent, pAddress, pSize, count);
    private static function _z_AssociateImageBufferEventsI3D_ovr18(hDC: GDI_DC; pEvent: pointer; [MarshalAs(UnmanagedType.LPArray)] pAddress: array of IntPtr; [MarshalAs(UnmanagedType.LPArray)] pSize: array of UInt32; count: UInt32): UInt32;
    external 'opengl32.dll' name 'wglAssociateImageBufferEventsI3D';
    public static z_AssociateImageBufferEventsI3D_ovr18 := _z_AssociateImageBufferEventsI3D_ovr18;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function AssociateImageBufferEventsI3D(hDC: GDI_DC; pEvent: pointer; pAddress: array of IntPtr; pSize: array of UInt32; count: UInt32): UInt32 := z_AssociateImageBufferEventsI3D_ovr18(hDC, pEvent, pAddress, pSize, count);
    private static function _z_AssociateImageBufferEventsI3D_ovr19(hDC: GDI_DC; pEvent: pointer; [MarshalAs(UnmanagedType.LPArray)] pAddress: array of IntPtr; var pSize: UInt32; count: UInt32): UInt32;
    external 'opengl32.dll' name 'wglAssociateImageBufferEventsI3D';
    public static z_AssociateImageBufferEventsI3D_ovr19 := _z_AssociateImageBufferEventsI3D_ovr19;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function AssociateImageBufferEventsI3D(hDC: GDI_DC; pEvent: pointer; pAddress: array of IntPtr; var pSize: UInt32; count: UInt32): UInt32 := z_AssociateImageBufferEventsI3D_ovr19(hDC, pEvent, pAddress, pSize, count);
    private static function _z_AssociateImageBufferEventsI3D_ovr20(hDC: GDI_DC; pEvent: pointer; [MarshalAs(UnmanagedType.LPArray)] pAddress: array of IntPtr; pSize: IntPtr; count: UInt32): UInt32;
    external 'opengl32.dll' name 'wglAssociateImageBufferEventsI3D';
    public static z_AssociateImageBufferEventsI3D_ovr20 := _z_AssociateImageBufferEventsI3D_ovr20;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function AssociateImageBufferEventsI3D(hDC: GDI_DC; pEvent: pointer; pAddress: array of IntPtr; pSize: IntPtr; count: UInt32): UInt32 := z_AssociateImageBufferEventsI3D_ovr20(hDC, pEvent, pAddress, pSize, count);
    private static function _z_AssociateImageBufferEventsI3D_ovr21(hDC: GDI_DC; pEvent: pointer; var pAddress: IntPtr; [MarshalAs(UnmanagedType.LPArray)] pSize: array of UInt32; count: UInt32): UInt32;
    external 'opengl32.dll' name 'wglAssociateImageBufferEventsI3D';
    public static z_AssociateImageBufferEventsI3D_ovr21 := _z_AssociateImageBufferEventsI3D_ovr21;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function AssociateImageBufferEventsI3D(hDC: GDI_DC; pEvent: pointer; var pAddress: IntPtr; pSize: array of UInt32; count: UInt32): UInt32 := z_AssociateImageBufferEventsI3D_ovr21(hDC, pEvent, pAddress, pSize, count);
    private static function _z_AssociateImageBufferEventsI3D_ovr22(hDC: GDI_DC; pEvent: pointer; var pAddress: IntPtr; var pSize: UInt32; count: UInt32): UInt32;
    external 'opengl32.dll' name 'wglAssociateImageBufferEventsI3D';
    public static z_AssociateImageBufferEventsI3D_ovr22 := _z_AssociateImageBufferEventsI3D_ovr22;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function AssociateImageBufferEventsI3D(hDC: GDI_DC; pEvent: pointer; var pAddress: IntPtr; var pSize: UInt32; count: UInt32): UInt32 := z_AssociateImageBufferEventsI3D_ovr22(hDC, pEvent, pAddress, pSize, count);
    private static function _z_AssociateImageBufferEventsI3D_ovr23(hDC: GDI_DC; pEvent: pointer; var pAddress: IntPtr; pSize: IntPtr; count: UInt32): UInt32;
    external 'opengl32.dll' name 'wglAssociateImageBufferEventsI3D';
    public static z_AssociateImageBufferEventsI3D_ovr23 := _z_AssociateImageBufferEventsI3D_ovr23;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function AssociateImageBufferEventsI3D(hDC: GDI_DC; pEvent: pointer; var pAddress: IntPtr; pSize: IntPtr; count: UInt32): UInt32 := z_AssociateImageBufferEventsI3D_ovr23(hDC, pEvent, pAddress, pSize, count);
    private static function _z_AssociateImageBufferEventsI3D_ovr24(hDC: GDI_DC; pEvent: pointer; pAddress: pointer; [MarshalAs(UnmanagedType.LPArray)] pSize: array of UInt32; count: UInt32): UInt32;
    external 'opengl32.dll' name 'wglAssociateImageBufferEventsI3D';
    public static z_AssociateImageBufferEventsI3D_ovr24 := _z_AssociateImageBufferEventsI3D_ovr24;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function AssociateImageBufferEventsI3D(hDC: GDI_DC; pEvent: pointer; pAddress: pointer; pSize: array of UInt32; count: UInt32): UInt32 := z_AssociateImageBufferEventsI3D_ovr24(hDC, pEvent, pAddress, pSize, count);
    private static function _z_AssociateImageBufferEventsI3D_ovr25(hDC: GDI_DC; pEvent: pointer; pAddress: pointer; var pSize: UInt32; count: UInt32): UInt32;
    external 'opengl32.dll' name 'wglAssociateImageBufferEventsI3D';
    public static z_AssociateImageBufferEventsI3D_ovr25 := _z_AssociateImageBufferEventsI3D_ovr25;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function AssociateImageBufferEventsI3D(hDC: GDI_DC; pEvent: pointer; pAddress: pointer; var pSize: UInt32; count: UInt32): UInt32 := z_AssociateImageBufferEventsI3D_ovr25(hDC, pEvent, pAddress, pSize, count);
    private static function _z_AssociateImageBufferEventsI3D_ovr26(hDC: GDI_DC; pEvent: pointer; pAddress: pointer; pSize: IntPtr; count: UInt32): UInt32;
    external 'opengl32.dll' name 'wglAssociateImageBufferEventsI3D';
    public static z_AssociateImageBufferEventsI3D_ovr26 := _z_AssociateImageBufferEventsI3D_ovr26;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function AssociateImageBufferEventsI3D(hDC: GDI_DC; pEvent: pointer; pAddress: pointer; pSize: IntPtr; count: UInt32): UInt32 := z_AssociateImageBufferEventsI3D_ovr26(hDC, pEvent, pAddress, pSize, count);
    
    private static function _z_ReleaseImageBufferEventsI3D_ovr0(hDC: GDI_DC; [MarshalAs(UnmanagedType.LPArray)] pAddress: array of IntPtr; count: UInt32): UInt32;
    external 'opengl32.dll' name 'wglReleaseImageBufferEventsI3D';
    public static z_ReleaseImageBufferEventsI3D_ovr0 := _z_ReleaseImageBufferEventsI3D_ovr0;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function ReleaseImageBufferEventsI3D(hDC: GDI_DC; pAddress: array of IntPtr; count: UInt32): UInt32 := z_ReleaseImageBufferEventsI3D_ovr0(hDC, pAddress, count);
    private static function _z_ReleaseImageBufferEventsI3D_ovr1(hDC: GDI_DC; var pAddress: IntPtr; count: UInt32): UInt32;
    external 'opengl32.dll' name 'wglReleaseImageBufferEventsI3D';
    public static z_ReleaseImageBufferEventsI3D_ovr1 := _z_ReleaseImageBufferEventsI3D_ovr1;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function ReleaseImageBufferEventsI3D(hDC: GDI_DC; var pAddress: IntPtr; count: UInt32): UInt32 := z_ReleaseImageBufferEventsI3D_ovr1(hDC, pAddress, count);
    private static function _z_ReleaseImageBufferEventsI3D_ovr2(hDC: GDI_DC; pAddress: pointer; count: UInt32): UInt32;
    external 'opengl32.dll' name 'wglReleaseImageBufferEventsI3D';
    public static z_ReleaseImageBufferEventsI3D_ovr2 := _z_ReleaseImageBufferEventsI3D_ovr2;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function ReleaseImageBufferEventsI3D(hDC: GDI_DC; pAddress: pointer; count: UInt32): UInt32 := z_ReleaseImageBufferEventsI3D_ovr2(hDC, pAddress, count);
    
  end;
  
  wglSwapFrameLockI3D = static class
    
    private static function _z_EnableFrameLockI3D_ovr0: UInt32;
    external 'opengl32.dll' name 'wglEnableFrameLockI3D';
    public static z_EnableFrameLockI3D_ovr0: function: UInt32 := _z_EnableFrameLockI3D_ovr0;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnableFrameLockI3D: UInt32 := z_EnableFrameLockI3D_ovr0;
    
    private static function _z_DisableFrameLockI3D_ovr0: UInt32;
    external 'opengl32.dll' name 'wglDisableFrameLockI3D';
    public static z_DisableFrameLockI3D_ovr0: function: UInt32 := _z_DisableFrameLockI3D_ovr0;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function DisableFrameLockI3D: UInt32 := z_DisableFrameLockI3D_ovr0;
    
    private static function _z_IsEnabledFrameLockI3D_ovr0([MarshalAs(UnmanagedType.LPArray)] pFlag: array of UInt32): UInt32;
    external 'opengl32.dll' name 'wglIsEnabledFrameLockI3D';
    public static z_IsEnabledFrameLockI3D_ovr0 := _z_IsEnabledFrameLockI3D_ovr0;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function IsEnabledFrameLockI3D(pFlag: array of UInt32): UInt32 := z_IsEnabledFrameLockI3D_ovr0(pFlag);
    private static function _z_IsEnabledFrameLockI3D_ovr1(var pFlag: UInt32): UInt32;
    external 'opengl32.dll' name 'wglIsEnabledFrameLockI3D';
    public static z_IsEnabledFrameLockI3D_ovr1 := _z_IsEnabledFrameLockI3D_ovr1;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function IsEnabledFrameLockI3D(var pFlag: UInt32): UInt32 := z_IsEnabledFrameLockI3D_ovr1(pFlag);
    private static function _z_IsEnabledFrameLockI3D_ovr2(pFlag: IntPtr): UInt32;
    external 'opengl32.dll' name 'wglIsEnabledFrameLockI3D';
    public static z_IsEnabledFrameLockI3D_ovr2 := _z_IsEnabledFrameLockI3D_ovr2;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function IsEnabledFrameLockI3D(pFlag: IntPtr): UInt32 := z_IsEnabledFrameLockI3D_ovr2(pFlag);
    
    private static function _z_QueryFrameLockMasterI3D_ovr0([MarshalAs(UnmanagedType.LPArray)] pFlag: array of UInt32): UInt32;
    external 'opengl32.dll' name 'wglQueryFrameLockMasterI3D';
    public static z_QueryFrameLockMasterI3D_ovr0 := _z_QueryFrameLockMasterI3D_ovr0;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function QueryFrameLockMasterI3D(pFlag: array of UInt32): UInt32 := z_QueryFrameLockMasterI3D_ovr0(pFlag);
    private static function _z_QueryFrameLockMasterI3D_ovr1(var pFlag: UInt32): UInt32;
    external 'opengl32.dll' name 'wglQueryFrameLockMasterI3D';
    public static z_QueryFrameLockMasterI3D_ovr1 := _z_QueryFrameLockMasterI3D_ovr1;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function QueryFrameLockMasterI3D(var pFlag: UInt32): UInt32 := z_QueryFrameLockMasterI3D_ovr1(pFlag);
    private static function _z_QueryFrameLockMasterI3D_ovr2(pFlag: IntPtr): UInt32;
    external 'opengl32.dll' name 'wglQueryFrameLockMasterI3D';
    public static z_QueryFrameLockMasterI3D_ovr2 := _z_QueryFrameLockMasterI3D_ovr2;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function QueryFrameLockMasterI3D(pFlag: IntPtr): UInt32 := z_QueryFrameLockMasterI3D_ovr2(pFlag);
    
  end;
  
  wglSwapFrameUsageI3D = static class
    
    private static function _z_GetFrameUsageI3D_ovr0([MarshalAs(UnmanagedType.LPArray)] pUsage: array of single): UInt32;
    external 'opengl32.dll' name 'wglGetFrameUsageI3D';
    public static z_GetFrameUsageI3D_ovr0 := _z_GetFrameUsageI3D_ovr0;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function GetFrameUsageI3D(pUsage: array of single): UInt32 := z_GetFrameUsageI3D_ovr0(pUsage);
    private static function _z_GetFrameUsageI3D_ovr1(var pUsage: single): UInt32;
    external 'opengl32.dll' name 'wglGetFrameUsageI3D';
    public static z_GetFrameUsageI3D_ovr1 := _z_GetFrameUsageI3D_ovr1;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function GetFrameUsageI3D(var pUsage: single): UInt32 := z_GetFrameUsageI3D_ovr1(pUsage);
    private static function _z_GetFrameUsageI3D_ovr2(pUsage: IntPtr): UInt32;
    external 'opengl32.dll' name 'wglGetFrameUsageI3D';
    public static z_GetFrameUsageI3D_ovr2 := _z_GetFrameUsageI3D_ovr2;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function GetFrameUsageI3D(pUsage: IntPtr): UInt32 := z_GetFrameUsageI3D_ovr2(pUsage);
    
    private static function _z_BeginFrameTrackingI3D_ovr0: UInt32;
    external 'opengl32.dll' name 'wglBeginFrameTrackingI3D';
    public static z_BeginFrameTrackingI3D_ovr0: function: UInt32 := _z_BeginFrameTrackingI3D_ovr0;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function BeginFrameTrackingI3D: UInt32 := z_BeginFrameTrackingI3D_ovr0;
    
    private static function _z_EndFrameTrackingI3D_ovr0: UInt32;
    external 'opengl32.dll' name 'wglEndFrameTrackingI3D';
    public static z_EndFrameTrackingI3D_ovr0: function: UInt32 := _z_EndFrameTrackingI3D_ovr0;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EndFrameTrackingI3D: UInt32 := z_EndFrameTrackingI3D_ovr0;
    
    private static function _z_QueryFrameTrackingI3D_ovr0([MarshalAs(UnmanagedType.LPArray)] pFrameCount: array of UInt32; [MarshalAs(UnmanagedType.LPArray)] pMissedFrames: array of UInt32; [MarshalAs(UnmanagedType.LPArray)] pLastMissedUsage: array of single): UInt32;
    external 'opengl32.dll' name 'wglQueryFrameTrackingI3D';
    public static z_QueryFrameTrackingI3D_ovr0 := _z_QueryFrameTrackingI3D_ovr0;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function QueryFrameTrackingI3D(pFrameCount: array of UInt32; pMissedFrames: array of UInt32; pLastMissedUsage: array of single): UInt32 := z_QueryFrameTrackingI3D_ovr0(pFrameCount, pMissedFrames, pLastMissedUsage);
    private static function _z_QueryFrameTrackingI3D_ovr1([MarshalAs(UnmanagedType.LPArray)] pFrameCount: array of UInt32; [MarshalAs(UnmanagedType.LPArray)] pMissedFrames: array of UInt32; var pLastMissedUsage: single): UInt32;
    external 'opengl32.dll' name 'wglQueryFrameTrackingI3D';
    public static z_QueryFrameTrackingI3D_ovr1 := _z_QueryFrameTrackingI3D_ovr1;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function QueryFrameTrackingI3D(pFrameCount: array of UInt32; pMissedFrames: array of UInt32; var pLastMissedUsage: single): UInt32 := z_QueryFrameTrackingI3D_ovr1(pFrameCount, pMissedFrames, pLastMissedUsage);
    private static function _z_QueryFrameTrackingI3D_ovr2([MarshalAs(UnmanagedType.LPArray)] pFrameCount: array of UInt32; [MarshalAs(UnmanagedType.LPArray)] pMissedFrames: array of UInt32; pLastMissedUsage: IntPtr): UInt32;
    external 'opengl32.dll' name 'wglQueryFrameTrackingI3D';
    public static z_QueryFrameTrackingI3D_ovr2 := _z_QueryFrameTrackingI3D_ovr2;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function QueryFrameTrackingI3D(pFrameCount: array of UInt32; pMissedFrames: array of UInt32; pLastMissedUsage: IntPtr): UInt32 := z_QueryFrameTrackingI3D_ovr2(pFrameCount, pMissedFrames, pLastMissedUsage);
    private static function _z_QueryFrameTrackingI3D_ovr3([MarshalAs(UnmanagedType.LPArray)] pFrameCount: array of UInt32; var pMissedFrames: UInt32; [MarshalAs(UnmanagedType.LPArray)] pLastMissedUsage: array of single): UInt32;
    external 'opengl32.dll' name 'wglQueryFrameTrackingI3D';
    public static z_QueryFrameTrackingI3D_ovr3 := _z_QueryFrameTrackingI3D_ovr3;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function QueryFrameTrackingI3D(pFrameCount: array of UInt32; var pMissedFrames: UInt32; pLastMissedUsage: array of single): UInt32 := z_QueryFrameTrackingI3D_ovr3(pFrameCount, pMissedFrames, pLastMissedUsage);
    private static function _z_QueryFrameTrackingI3D_ovr4([MarshalAs(UnmanagedType.LPArray)] pFrameCount: array of UInt32; var pMissedFrames: UInt32; var pLastMissedUsage: single): UInt32;
    external 'opengl32.dll' name 'wglQueryFrameTrackingI3D';
    public static z_QueryFrameTrackingI3D_ovr4 := _z_QueryFrameTrackingI3D_ovr4;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function QueryFrameTrackingI3D(pFrameCount: array of UInt32; var pMissedFrames: UInt32; var pLastMissedUsage: single): UInt32 := z_QueryFrameTrackingI3D_ovr4(pFrameCount, pMissedFrames, pLastMissedUsage);
    private static function _z_QueryFrameTrackingI3D_ovr5([MarshalAs(UnmanagedType.LPArray)] pFrameCount: array of UInt32; var pMissedFrames: UInt32; pLastMissedUsage: IntPtr): UInt32;
    external 'opengl32.dll' name 'wglQueryFrameTrackingI3D';
    public static z_QueryFrameTrackingI3D_ovr5 := _z_QueryFrameTrackingI3D_ovr5;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function QueryFrameTrackingI3D(pFrameCount: array of UInt32; var pMissedFrames: UInt32; pLastMissedUsage: IntPtr): UInt32 := z_QueryFrameTrackingI3D_ovr5(pFrameCount, pMissedFrames, pLastMissedUsage);
    private static function _z_QueryFrameTrackingI3D_ovr6([MarshalAs(UnmanagedType.LPArray)] pFrameCount: array of UInt32; pMissedFrames: IntPtr; [MarshalAs(UnmanagedType.LPArray)] pLastMissedUsage: array of single): UInt32;
    external 'opengl32.dll' name 'wglQueryFrameTrackingI3D';
    public static z_QueryFrameTrackingI3D_ovr6 := _z_QueryFrameTrackingI3D_ovr6;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function QueryFrameTrackingI3D(pFrameCount: array of UInt32; pMissedFrames: IntPtr; pLastMissedUsage: array of single): UInt32 := z_QueryFrameTrackingI3D_ovr6(pFrameCount, pMissedFrames, pLastMissedUsage);
    private static function _z_QueryFrameTrackingI3D_ovr7([MarshalAs(UnmanagedType.LPArray)] pFrameCount: array of UInt32; pMissedFrames: IntPtr; var pLastMissedUsage: single): UInt32;
    external 'opengl32.dll' name 'wglQueryFrameTrackingI3D';
    public static z_QueryFrameTrackingI3D_ovr7 := _z_QueryFrameTrackingI3D_ovr7;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function QueryFrameTrackingI3D(pFrameCount: array of UInt32; pMissedFrames: IntPtr; var pLastMissedUsage: single): UInt32 := z_QueryFrameTrackingI3D_ovr7(pFrameCount, pMissedFrames, pLastMissedUsage);
    private static function _z_QueryFrameTrackingI3D_ovr8([MarshalAs(UnmanagedType.LPArray)] pFrameCount: array of UInt32; pMissedFrames: IntPtr; pLastMissedUsage: IntPtr): UInt32;
    external 'opengl32.dll' name 'wglQueryFrameTrackingI3D';
    public static z_QueryFrameTrackingI3D_ovr8 := _z_QueryFrameTrackingI3D_ovr8;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function QueryFrameTrackingI3D(pFrameCount: array of UInt32; pMissedFrames: IntPtr; pLastMissedUsage: IntPtr): UInt32 := z_QueryFrameTrackingI3D_ovr8(pFrameCount, pMissedFrames, pLastMissedUsage);
    private static function _z_QueryFrameTrackingI3D_ovr9(var pFrameCount: UInt32; [MarshalAs(UnmanagedType.LPArray)] pMissedFrames: array of UInt32; [MarshalAs(UnmanagedType.LPArray)] pLastMissedUsage: array of single): UInt32;
    external 'opengl32.dll' name 'wglQueryFrameTrackingI3D';
    public static z_QueryFrameTrackingI3D_ovr9 := _z_QueryFrameTrackingI3D_ovr9;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function QueryFrameTrackingI3D(var pFrameCount: UInt32; pMissedFrames: array of UInt32; pLastMissedUsage: array of single): UInt32 := z_QueryFrameTrackingI3D_ovr9(pFrameCount, pMissedFrames, pLastMissedUsage);
    private static function _z_QueryFrameTrackingI3D_ovr10(var pFrameCount: UInt32; [MarshalAs(UnmanagedType.LPArray)] pMissedFrames: array of UInt32; var pLastMissedUsage: single): UInt32;
    external 'opengl32.dll' name 'wglQueryFrameTrackingI3D';
    public static z_QueryFrameTrackingI3D_ovr10 := _z_QueryFrameTrackingI3D_ovr10;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function QueryFrameTrackingI3D(var pFrameCount: UInt32; pMissedFrames: array of UInt32; var pLastMissedUsage: single): UInt32 := z_QueryFrameTrackingI3D_ovr10(pFrameCount, pMissedFrames, pLastMissedUsage);
    private static function _z_QueryFrameTrackingI3D_ovr11(var pFrameCount: UInt32; [MarshalAs(UnmanagedType.LPArray)] pMissedFrames: array of UInt32; pLastMissedUsage: IntPtr): UInt32;
    external 'opengl32.dll' name 'wglQueryFrameTrackingI3D';
    public static z_QueryFrameTrackingI3D_ovr11 := _z_QueryFrameTrackingI3D_ovr11;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function QueryFrameTrackingI3D(var pFrameCount: UInt32; pMissedFrames: array of UInt32; pLastMissedUsage: IntPtr): UInt32 := z_QueryFrameTrackingI3D_ovr11(pFrameCount, pMissedFrames, pLastMissedUsage);
    private static function _z_QueryFrameTrackingI3D_ovr12(var pFrameCount: UInt32; var pMissedFrames: UInt32; [MarshalAs(UnmanagedType.LPArray)] pLastMissedUsage: array of single): UInt32;
    external 'opengl32.dll' name 'wglQueryFrameTrackingI3D';
    public static z_QueryFrameTrackingI3D_ovr12 := _z_QueryFrameTrackingI3D_ovr12;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function QueryFrameTrackingI3D(var pFrameCount: UInt32; var pMissedFrames: UInt32; pLastMissedUsage: array of single): UInt32 := z_QueryFrameTrackingI3D_ovr12(pFrameCount, pMissedFrames, pLastMissedUsage);
    private static function _z_QueryFrameTrackingI3D_ovr13(var pFrameCount: UInt32; var pMissedFrames: UInt32; var pLastMissedUsage: single): UInt32;
    external 'opengl32.dll' name 'wglQueryFrameTrackingI3D';
    public static z_QueryFrameTrackingI3D_ovr13 := _z_QueryFrameTrackingI3D_ovr13;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function QueryFrameTrackingI3D(var pFrameCount: UInt32; var pMissedFrames: UInt32; var pLastMissedUsage: single): UInt32 := z_QueryFrameTrackingI3D_ovr13(pFrameCount, pMissedFrames, pLastMissedUsage);
    private static function _z_QueryFrameTrackingI3D_ovr14(var pFrameCount: UInt32; var pMissedFrames: UInt32; pLastMissedUsage: IntPtr): UInt32;
    external 'opengl32.dll' name 'wglQueryFrameTrackingI3D';
    public static z_QueryFrameTrackingI3D_ovr14 := _z_QueryFrameTrackingI3D_ovr14;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function QueryFrameTrackingI3D(var pFrameCount: UInt32; var pMissedFrames: UInt32; pLastMissedUsage: IntPtr): UInt32 := z_QueryFrameTrackingI3D_ovr14(pFrameCount, pMissedFrames, pLastMissedUsage);
    private static function _z_QueryFrameTrackingI3D_ovr15(var pFrameCount: UInt32; pMissedFrames: IntPtr; [MarshalAs(UnmanagedType.LPArray)] pLastMissedUsage: array of single): UInt32;
    external 'opengl32.dll' name 'wglQueryFrameTrackingI3D';
    public static z_QueryFrameTrackingI3D_ovr15 := _z_QueryFrameTrackingI3D_ovr15;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function QueryFrameTrackingI3D(var pFrameCount: UInt32; pMissedFrames: IntPtr; pLastMissedUsage: array of single): UInt32 := z_QueryFrameTrackingI3D_ovr15(pFrameCount, pMissedFrames, pLastMissedUsage);
    private static function _z_QueryFrameTrackingI3D_ovr16(var pFrameCount: UInt32; pMissedFrames: IntPtr; var pLastMissedUsage: single): UInt32;
    external 'opengl32.dll' name 'wglQueryFrameTrackingI3D';
    public static z_QueryFrameTrackingI3D_ovr16 := _z_QueryFrameTrackingI3D_ovr16;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function QueryFrameTrackingI3D(var pFrameCount: UInt32; pMissedFrames: IntPtr; var pLastMissedUsage: single): UInt32 := z_QueryFrameTrackingI3D_ovr16(pFrameCount, pMissedFrames, pLastMissedUsage);
    private static function _z_QueryFrameTrackingI3D_ovr17(var pFrameCount: UInt32; pMissedFrames: IntPtr; pLastMissedUsage: IntPtr): UInt32;
    external 'opengl32.dll' name 'wglQueryFrameTrackingI3D';
    public static z_QueryFrameTrackingI3D_ovr17 := _z_QueryFrameTrackingI3D_ovr17;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function QueryFrameTrackingI3D(var pFrameCount: UInt32; pMissedFrames: IntPtr; pLastMissedUsage: IntPtr): UInt32 := z_QueryFrameTrackingI3D_ovr17(pFrameCount, pMissedFrames, pLastMissedUsage);
    private static function _z_QueryFrameTrackingI3D_ovr18(pFrameCount: IntPtr; [MarshalAs(UnmanagedType.LPArray)] pMissedFrames: array of UInt32; [MarshalAs(UnmanagedType.LPArray)] pLastMissedUsage: array of single): UInt32;
    external 'opengl32.dll' name 'wglQueryFrameTrackingI3D';
    public static z_QueryFrameTrackingI3D_ovr18 := _z_QueryFrameTrackingI3D_ovr18;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function QueryFrameTrackingI3D(pFrameCount: IntPtr; pMissedFrames: array of UInt32; pLastMissedUsage: array of single): UInt32 := z_QueryFrameTrackingI3D_ovr18(pFrameCount, pMissedFrames, pLastMissedUsage);
    private static function _z_QueryFrameTrackingI3D_ovr19(pFrameCount: IntPtr; [MarshalAs(UnmanagedType.LPArray)] pMissedFrames: array of UInt32; var pLastMissedUsage: single): UInt32;
    external 'opengl32.dll' name 'wglQueryFrameTrackingI3D';
    public static z_QueryFrameTrackingI3D_ovr19 := _z_QueryFrameTrackingI3D_ovr19;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function QueryFrameTrackingI3D(pFrameCount: IntPtr; pMissedFrames: array of UInt32; var pLastMissedUsage: single): UInt32 := z_QueryFrameTrackingI3D_ovr19(pFrameCount, pMissedFrames, pLastMissedUsage);
    private static function _z_QueryFrameTrackingI3D_ovr20(pFrameCount: IntPtr; [MarshalAs(UnmanagedType.LPArray)] pMissedFrames: array of UInt32; pLastMissedUsage: IntPtr): UInt32;
    external 'opengl32.dll' name 'wglQueryFrameTrackingI3D';
    public static z_QueryFrameTrackingI3D_ovr20 := _z_QueryFrameTrackingI3D_ovr20;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function QueryFrameTrackingI3D(pFrameCount: IntPtr; pMissedFrames: array of UInt32; pLastMissedUsage: IntPtr): UInt32 := z_QueryFrameTrackingI3D_ovr20(pFrameCount, pMissedFrames, pLastMissedUsage);
    private static function _z_QueryFrameTrackingI3D_ovr21(pFrameCount: IntPtr; var pMissedFrames: UInt32; [MarshalAs(UnmanagedType.LPArray)] pLastMissedUsage: array of single): UInt32;
    external 'opengl32.dll' name 'wglQueryFrameTrackingI3D';
    public static z_QueryFrameTrackingI3D_ovr21 := _z_QueryFrameTrackingI3D_ovr21;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function QueryFrameTrackingI3D(pFrameCount: IntPtr; var pMissedFrames: UInt32; pLastMissedUsage: array of single): UInt32 := z_QueryFrameTrackingI3D_ovr21(pFrameCount, pMissedFrames, pLastMissedUsage);
    private static function _z_QueryFrameTrackingI3D_ovr22(pFrameCount: IntPtr; var pMissedFrames: UInt32; var pLastMissedUsage: single): UInt32;
    external 'opengl32.dll' name 'wglQueryFrameTrackingI3D';
    public static z_QueryFrameTrackingI3D_ovr22 := _z_QueryFrameTrackingI3D_ovr22;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function QueryFrameTrackingI3D(pFrameCount: IntPtr; var pMissedFrames: UInt32; var pLastMissedUsage: single): UInt32 := z_QueryFrameTrackingI3D_ovr22(pFrameCount, pMissedFrames, pLastMissedUsage);
    private static function _z_QueryFrameTrackingI3D_ovr23(pFrameCount: IntPtr; var pMissedFrames: UInt32; pLastMissedUsage: IntPtr): UInt32;
    external 'opengl32.dll' name 'wglQueryFrameTrackingI3D';
    public static z_QueryFrameTrackingI3D_ovr23 := _z_QueryFrameTrackingI3D_ovr23;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function QueryFrameTrackingI3D(pFrameCount: IntPtr; var pMissedFrames: UInt32; pLastMissedUsage: IntPtr): UInt32 := z_QueryFrameTrackingI3D_ovr23(pFrameCount, pMissedFrames, pLastMissedUsage);
    private static function _z_QueryFrameTrackingI3D_ovr24(pFrameCount: IntPtr; pMissedFrames: IntPtr; [MarshalAs(UnmanagedType.LPArray)] pLastMissedUsage: array of single): UInt32;
    external 'opengl32.dll' name 'wglQueryFrameTrackingI3D';
    public static z_QueryFrameTrackingI3D_ovr24 := _z_QueryFrameTrackingI3D_ovr24;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function QueryFrameTrackingI3D(pFrameCount: IntPtr; pMissedFrames: IntPtr; pLastMissedUsage: array of single): UInt32 := z_QueryFrameTrackingI3D_ovr24(pFrameCount, pMissedFrames, pLastMissedUsage);
    private static function _z_QueryFrameTrackingI3D_ovr25(pFrameCount: IntPtr; pMissedFrames: IntPtr; var pLastMissedUsage: single): UInt32;
    external 'opengl32.dll' name 'wglQueryFrameTrackingI3D';
    public static z_QueryFrameTrackingI3D_ovr25 := _z_QueryFrameTrackingI3D_ovr25;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function QueryFrameTrackingI3D(pFrameCount: IntPtr; pMissedFrames: IntPtr; var pLastMissedUsage: single): UInt32 := z_QueryFrameTrackingI3D_ovr25(pFrameCount, pMissedFrames, pLastMissedUsage);
    private static function _z_QueryFrameTrackingI3D_ovr26(pFrameCount: IntPtr; pMissedFrames: IntPtr; pLastMissedUsage: IntPtr): UInt32;
    external 'opengl32.dll' name 'wglQueryFrameTrackingI3D';
    public static z_QueryFrameTrackingI3D_ovr26 := _z_QueryFrameTrackingI3D_ovr26;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function QueryFrameTrackingI3D(pFrameCount: IntPtr; pMissedFrames: IntPtr; pLastMissedUsage: IntPtr): UInt32 := z_QueryFrameTrackingI3D_ovr26(pFrameCount, pMissedFrames, pLastMissedUsage);
    
  end;
  
  wglCopyImageNV = static class
    
    private static function _z_CopyImageSubDataNV_ovr0(hSrcRC: GLContext; srcName: UInt32; srcTarget: DummyEnum; srcLevel: Int32; srcX: Int32; srcY: Int32; srcZ: Int32; hDstRC: GLContext; dstName: UInt32; dstTarget: DummyEnum; dstLevel: Int32; dstX: Int32; dstY: Int32; dstZ: Int32; width: Int32; height: Int32; depth: Int32): UInt32;
    external 'opengl32.dll' name 'wglCopyImageSubDataNV';
    public static z_CopyImageSubDataNV_ovr0 := _z_CopyImageSubDataNV_ovr0;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function CopyImageSubDataNV(hSrcRC: GLContext; srcName: UInt32; srcTarget: DummyEnum; srcLevel: Int32; srcX: Int32; srcY: Int32; srcZ: Int32; hDstRC: GLContext; dstName: UInt32; dstTarget: DummyEnum; dstLevel: Int32; dstX: Int32; dstY: Int32; dstZ: Int32; width: Int32; height: Int32; depth: Int32): UInt32 := z_CopyImageSubDataNV_ovr0(hSrcRC, srcName, srcTarget, srcLevel, srcX, srcY, srcZ, hDstRC, dstName, dstTarget, dstLevel, dstX, dstY, dstZ, width, height, depth);
    
  end;
  
  wglDelayBeforeSwapNV = static class
    
    private static function _z_DelayBeforeSwapNV_ovr0(hDC: GDI_DC; seconds: single): UInt32;
    external 'opengl32.dll' name 'wglDelayBeforeSwapNV';
    public static z_DelayBeforeSwapNV_ovr0 := _z_DelayBeforeSwapNV_ovr0;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function DelayBeforeSwapNV(hDC: GDI_DC; seconds: single): UInt32 := z_DelayBeforeSwapNV_ovr0(hDC, seconds);
    
  end;
  
  wglDXInteropNV = static class
    
    private static function _z_DXSetResourceShareHandleNV_ovr0(dxObject: IntPtr; shareHandle: IntPtr): UInt32;
    external 'opengl32.dll' name 'wglDXSetResourceShareHandleNV';
    public static z_DXSetResourceShareHandleNV_ovr0 := _z_DXSetResourceShareHandleNV_ovr0;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function DXSetResourceShareHandleNV(dxObject: IntPtr; shareHandle: IntPtr): UInt32 := z_DXSetResourceShareHandleNV_ovr0(dxObject, shareHandle);
    
    private static function _z_DXOpenDeviceNV_ovr0(dxDevice: IntPtr): IntPtr;
    external 'opengl32.dll' name 'wglDXOpenDeviceNV';
    public static z_DXOpenDeviceNV_ovr0 := _z_DXOpenDeviceNV_ovr0;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function DXOpenDeviceNV(dxDevice: IntPtr): IntPtr := z_DXOpenDeviceNV_ovr0(dxDevice);
    
    private static function _z_DXCloseDeviceNV_ovr0(hDevice: IntPtr): UInt32;
    external 'opengl32.dll' name 'wglDXCloseDeviceNV';
    public static z_DXCloseDeviceNV_ovr0 := _z_DXCloseDeviceNV_ovr0;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function DXCloseDeviceNV(hDevice: IntPtr): UInt32 := z_DXCloseDeviceNV_ovr0(hDevice);
    
    private static function _z_DXRegisterObjectNV_ovr0(hDevice: IntPtr; dxObject: IntPtr; name: UInt32; &type: DummyEnum; access: DummyEnum): IntPtr;
    external 'opengl32.dll' name 'wglDXRegisterObjectNV';
    public static z_DXRegisterObjectNV_ovr0 := _z_DXRegisterObjectNV_ovr0;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function DXRegisterObjectNV(hDevice: IntPtr; dxObject: IntPtr; name: UInt32; &type: DummyEnum; access: DummyEnum): IntPtr := z_DXRegisterObjectNV_ovr0(hDevice, dxObject, name, &type, access);
    
    private static function _z_DXUnregisterObjectNV_ovr0(hDevice: IntPtr; hObject: IntPtr): UInt32;
    external 'opengl32.dll' name 'wglDXUnregisterObjectNV';
    public static z_DXUnregisterObjectNV_ovr0 := _z_DXUnregisterObjectNV_ovr0;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function DXUnregisterObjectNV(hDevice: IntPtr; hObject: IntPtr): UInt32 := z_DXUnregisterObjectNV_ovr0(hDevice, hObject);
    
    private static function _z_DXObjectAccessNV_ovr0(hObject: IntPtr; access: DummyEnum): UInt32;
    external 'opengl32.dll' name 'wglDXObjectAccessNV';
    public static z_DXObjectAccessNV_ovr0 := _z_DXObjectAccessNV_ovr0;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function DXObjectAccessNV(hObject: IntPtr; access: DummyEnum): UInt32 := z_DXObjectAccessNV_ovr0(hObject, access);
    
    private static function _z_DXLockObjectsNV_ovr0(hDevice: IntPtr; count: Int32; [MarshalAs(UnmanagedType.LPArray)] hObjects: array of IntPtr): UInt32;
    external 'opengl32.dll' name 'wglDXLockObjectsNV';
    public static z_DXLockObjectsNV_ovr0 := _z_DXLockObjectsNV_ovr0;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function DXLockObjectsNV(hDevice: IntPtr; count: Int32; hObjects: array of IntPtr): UInt32 := z_DXLockObjectsNV_ovr0(hDevice, count, hObjects);
    private static function _z_DXLockObjectsNV_ovr1(hDevice: IntPtr; count: Int32; var hObjects: IntPtr): UInt32;
    external 'opengl32.dll' name 'wglDXLockObjectsNV';
    public static z_DXLockObjectsNV_ovr1 := _z_DXLockObjectsNV_ovr1;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function DXLockObjectsNV(hDevice: IntPtr; count: Int32; var hObjects: IntPtr): UInt32 := z_DXLockObjectsNV_ovr1(hDevice, count, hObjects);
    private static function _z_DXLockObjectsNV_ovr2(hDevice: IntPtr; count: Int32; hObjects: pointer): UInt32;
    external 'opengl32.dll' name 'wglDXLockObjectsNV';
    public static z_DXLockObjectsNV_ovr2 := _z_DXLockObjectsNV_ovr2;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function DXLockObjectsNV(hDevice: IntPtr; count: Int32; hObjects: pointer): UInt32 := z_DXLockObjectsNV_ovr2(hDevice, count, hObjects);
    
    private static function _z_DXUnlockObjectsNV_ovr0(hDevice: IntPtr; count: Int32; [MarshalAs(UnmanagedType.LPArray)] hObjects: array of IntPtr): UInt32;
    external 'opengl32.dll' name 'wglDXUnlockObjectsNV';
    public static z_DXUnlockObjectsNV_ovr0 := _z_DXUnlockObjectsNV_ovr0;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function DXUnlockObjectsNV(hDevice: IntPtr; count: Int32; hObjects: array of IntPtr): UInt32 := z_DXUnlockObjectsNV_ovr0(hDevice, count, hObjects);
    private static function _z_DXUnlockObjectsNV_ovr1(hDevice: IntPtr; count: Int32; var hObjects: IntPtr): UInt32;
    external 'opengl32.dll' name 'wglDXUnlockObjectsNV';
    public static z_DXUnlockObjectsNV_ovr1 := _z_DXUnlockObjectsNV_ovr1;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function DXUnlockObjectsNV(hDevice: IntPtr; count: Int32; var hObjects: IntPtr): UInt32 := z_DXUnlockObjectsNV_ovr1(hDevice, count, hObjects);
    private static function _z_DXUnlockObjectsNV_ovr2(hDevice: IntPtr; count: Int32; hObjects: pointer): UInt32;
    external 'opengl32.dll' name 'wglDXUnlockObjectsNV';
    public static z_DXUnlockObjectsNV_ovr2 := _z_DXUnlockObjectsNV_ovr2;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function DXUnlockObjectsNV(hDevice: IntPtr; count: Int32; hObjects: pointer): UInt32 := z_DXUnlockObjectsNV_ovr2(hDevice, count, hObjects);
    
  end;
  
  wglGpuAffinityNV = static class
    
    private static function _z_EnumGpusNV_ovr0(iGpuIndex: UInt32; [MarshalAs(UnmanagedType.LPArray)] phGpu: array of HGPUNV): UInt32;
    external 'opengl32.dll' name 'wglEnumGpusNV';
    public static z_EnumGpusNV_ovr0 := _z_EnumGpusNV_ovr0;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnumGpusNV(iGpuIndex: UInt32; phGpu: array of HGPUNV): UInt32 := z_EnumGpusNV_ovr0(iGpuIndex, phGpu);
    private static function _z_EnumGpusNV_ovr1(iGpuIndex: UInt32; var phGpu: HGPUNV): UInt32;
    external 'opengl32.dll' name 'wglEnumGpusNV';
    public static z_EnumGpusNV_ovr1 := _z_EnumGpusNV_ovr1;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnumGpusNV(iGpuIndex: UInt32; var phGpu: HGPUNV): UInt32 := z_EnumGpusNV_ovr1(iGpuIndex, phGpu);
    private static function _z_EnumGpusNV_ovr2(iGpuIndex: UInt32; phGpu: IntPtr): UInt32;
    external 'opengl32.dll' name 'wglEnumGpusNV';
    public static z_EnumGpusNV_ovr2 := _z_EnumGpusNV_ovr2;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnumGpusNV(iGpuIndex: UInt32; phGpu: IntPtr): UInt32 := z_EnumGpusNV_ovr2(iGpuIndex, phGpu);
    
    private static function _z_EnumGpuDevicesNV_ovr0(hGpu: HGPUNV; iDeviceIndex: UInt32; lpGpuDevice: PGPU_DEVICE): UInt32;
    external 'opengl32.dll' name 'wglEnumGpuDevicesNV';
    public static z_EnumGpuDevicesNV_ovr0 := _z_EnumGpuDevicesNV_ovr0;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnumGpuDevicesNV(hGpu: HGPUNV; iDeviceIndex: UInt32; lpGpuDevice: PGPU_DEVICE): UInt32 := z_EnumGpuDevicesNV_ovr0(hGpu, iDeviceIndex, lpGpuDevice);
    
    private static function _z_CreateAffinityDCNV_ovr0([MarshalAs(UnmanagedType.LPArray)] phGpuList: array of HGPUNV): GDI_DC;
    external 'opengl32.dll' name 'wglCreateAffinityDCNV';
    public static z_CreateAffinityDCNV_ovr0 := _z_CreateAffinityDCNV_ovr0;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function CreateAffinityDCNV(phGpuList: array of HGPUNV): GDI_DC := z_CreateAffinityDCNV_ovr0(phGpuList);
    private static function _z_CreateAffinityDCNV_ovr1(var phGpuList: HGPUNV): GDI_DC;
    external 'opengl32.dll' name 'wglCreateAffinityDCNV';
    public static z_CreateAffinityDCNV_ovr1 := _z_CreateAffinityDCNV_ovr1;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function CreateAffinityDCNV(var phGpuList: HGPUNV): GDI_DC := z_CreateAffinityDCNV_ovr1(phGpuList);
    private static function _z_CreateAffinityDCNV_ovr2(phGpuList: IntPtr): GDI_DC;
    external 'opengl32.dll' name 'wglCreateAffinityDCNV';
    public static z_CreateAffinityDCNV_ovr2 := _z_CreateAffinityDCNV_ovr2;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function CreateAffinityDCNV(phGpuList: IntPtr): GDI_DC := z_CreateAffinityDCNV_ovr2(phGpuList);
    
    private static function _z_EnumGpusFromAffinityDCNV_ovr0(hAffinityDC: GDI_DC; iGpuIndex: UInt32; [MarshalAs(UnmanagedType.LPArray)] hGpu: array of HGPUNV): UInt32;
    external 'opengl32.dll' name 'wglEnumGpusFromAffinityDCNV';
    public static z_EnumGpusFromAffinityDCNV_ovr0 := _z_EnumGpusFromAffinityDCNV_ovr0;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnumGpusFromAffinityDCNV(hAffinityDC: GDI_DC; iGpuIndex: UInt32; hGpu: array of HGPUNV): UInt32 := z_EnumGpusFromAffinityDCNV_ovr0(hAffinityDC, iGpuIndex, hGpu);
    private static function _z_EnumGpusFromAffinityDCNV_ovr1(hAffinityDC: GDI_DC; iGpuIndex: UInt32; var hGpu: HGPUNV): UInt32;
    external 'opengl32.dll' name 'wglEnumGpusFromAffinityDCNV';
    public static z_EnumGpusFromAffinityDCNV_ovr1 := _z_EnumGpusFromAffinityDCNV_ovr1;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnumGpusFromAffinityDCNV(hAffinityDC: GDI_DC; iGpuIndex: UInt32; var hGpu: HGPUNV): UInt32 := z_EnumGpusFromAffinityDCNV_ovr1(hAffinityDC, iGpuIndex, hGpu);
    private static function _z_EnumGpusFromAffinityDCNV_ovr2(hAffinityDC: GDI_DC; iGpuIndex: UInt32; hGpu: IntPtr): UInt32;
    external 'opengl32.dll' name 'wglEnumGpusFromAffinityDCNV';
    public static z_EnumGpusFromAffinityDCNV_ovr2 := _z_EnumGpusFromAffinityDCNV_ovr2;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnumGpusFromAffinityDCNV(hAffinityDC: GDI_DC; iGpuIndex: UInt32; hGpu: IntPtr): UInt32 := z_EnumGpusFromAffinityDCNV_ovr2(hAffinityDC, iGpuIndex, hGpu);
    
    private static function _z_DeleteDCNV_ovr0(hdc: GDI_DC): UInt32;
    external 'opengl32.dll' name 'wglDeleteDCNV';
    public static z_DeleteDCNV_ovr0 := _z_DeleteDCNV_ovr0;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function DeleteDCNV(hdc: GDI_DC): UInt32 := z_DeleteDCNV_ovr0(hdc);
    
  end;
  
  wglPresentVideoNV = static class
    
    private static function _z_EnumerateVideoDevicesNV_ovr0(hDc: GDI_DC; [MarshalAs(UnmanagedType.LPArray)] phDeviceList: array of HVIDEOOUTPUTDEVICENV): Int32;
    external 'opengl32.dll' name 'wglEnumerateVideoDevicesNV';
    public static z_EnumerateVideoDevicesNV_ovr0 := _z_EnumerateVideoDevicesNV_ovr0;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnumerateVideoDevicesNV(hDc: GDI_DC; phDeviceList: array of HVIDEOOUTPUTDEVICENV): Int32 := z_EnumerateVideoDevicesNV_ovr0(hDc, phDeviceList);
    private static function _z_EnumerateVideoDevicesNV_ovr1(hDc: GDI_DC; var phDeviceList: HVIDEOOUTPUTDEVICENV): Int32;
    external 'opengl32.dll' name 'wglEnumerateVideoDevicesNV';
    public static z_EnumerateVideoDevicesNV_ovr1 := _z_EnumerateVideoDevicesNV_ovr1;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnumerateVideoDevicesNV(hDc: GDI_DC; var phDeviceList: HVIDEOOUTPUTDEVICENV): Int32 := z_EnumerateVideoDevicesNV_ovr1(hDc, phDeviceList);
    private static function _z_EnumerateVideoDevicesNV_ovr2(hDc: GDI_DC; phDeviceList: IntPtr): Int32;
    external 'opengl32.dll' name 'wglEnumerateVideoDevicesNV';
    public static z_EnumerateVideoDevicesNV_ovr2 := _z_EnumerateVideoDevicesNV_ovr2;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnumerateVideoDevicesNV(hDc: GDI_DC; phDeviceList: IntPtr): Int32 := z_EnumerateVideoDevicesNV_ovr2(hDc, phDeviceList);
    
    private static function _z_BindVideoDeviceNV_ovr0(hDc: GDI_DC; uVideoSlot: UInt32; hVideoDevice: HVIDEOOUTPUTDEVICENV; [MarshalAs(UnmanagedType.LPArray)] piAttribList: array of Int32): UInt32;
    external 'opengl32.dll' name 'wglBindVideoDeviceNV';
    public static z_BindVideoDeviceNV_ovr0 := _z_BindVideoDeviceNV_ovr0;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function BindVideoDeviceNV(hDc: GDI_DC; uVideoSlot: UInt32; hVideoDevice: HVIDEOOUTPUTDEVICENV; piAttribList: array of Int32): UInt32 := z_BindVideoDeviceNV_ovr0(hDc, uVideoSlot, hVideoDevice, piAttribList);
    private static function _z_BindVideoDeviceNV_ovr1(hDc: GDI_DC; uVideoSlot: UInt32; hVideoDevice: HVIDEOOUTPUTDEVICENV; var piAttribList: Int32): UInt32;
    external 'opengl32.dll' name 'wglBindVideoDeviceNV';
    public static z_BindVideoDeviceNV_ovr1 := _z_BindVideoDeviceNV_ovr1;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function BindVideoDeviceNV(hDc: GDI_DC; uVideoSlot: UInt32; hVideoDevice: HVIDEOOUTPUTDEVICENV; var piAttribList: Int32): UInt32 := z_BindVideoDeviceNV_ovr1(hDc, uVideoSlot, hVideoDevice, piAttribList);
    private static function _z_BindVideoDeviceNV_ovr2(hDc: GDI_DC; uVideoSlot: UInt32; hVideoDevice: HVIDEOOUTPUTDEVICENV; piAttribList: IntPtr): UInt32;
    external 'opengl32.dll' name 'wglBindVideoDeviceNV';
    public static z_BindVideoDeviceNV_ovr2 := _z_BindVideoDeviceNV_ovr2;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function BindVideoDeviceNV(hDc: GDI_DC; uVideoSlot: UInt32; hVideoDevice: HVIDEOOUTPUTDEVICENV; piAttribList: IntPtr): UInt32 := z_BindVideoDeviceNV_ovr2(hDc, uVideoSlot, hVideoDevice, piAttribList);
    
    private static function _z_QueryCurrentContextNV_ovr0(iAttribute: Int32; [MarshalAs(UnmanagedType.LPArray)] piValue: array of Int32): UInt32;
    external 'opengl32.dll' name 'wglQueryCurrentContextNV';
    public static z_QueryCurrentContextNV_ovr0 := _z_QueryCurrentContextNV_ovr0;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function QueryCurrentContextNV(iAttribute: Int32; piValue: array of Int32): UInt32 := z_QueryCurrentContextNV_ovr0(iAttribute, piValue);
    private static function _z_QueryCurrentContextNV_ovr1(iAttribute: Int32; var piValue: Int32): UInt32;
    external 'opengl32.dll' name 'wglQueryCurrentContextNV';
    public static z_QueryCurrentContextNV_ovr1 := _z_QueryCurrentContextNV_ovr1;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function QueryCurrentContextNV(iAttribute: Int32; var piValue: Int32): UInt32 := z_QueryCurrentContextNV_ovr1(iAttribute, piValue);
    private static function _z_QueryCurrentContextNV_ovr2(iAttribute: Int32; piValue: IntPtr): UInt32;
    external 'opengl32.dll' name 'wglQueryCurrentContextNV';
    public static z_QueryCurrentContextNV_ovr2 := _z_QueryCurrentContextNV_ovr2;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function QueryCurrentContextNV(iAttribute: Int32; piValue: IntPtr): UInt32 := z_QueryCurrentContextNV_ovr2(iAttribute, piValue);
    
  end;
  
  wglSwapGroupNV = static class
    
    private static function _z_JoinSwapGroupNV_ovr0(hDC: GDI_DC; group: UInt32): UInt32;
    external 'opengl32.dll' name 'wglJoinSwapGroupNV';
    public static z_JoinSwapGroupNV_ovr0 := _z_JoinSwapGroupNV_ovr0;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function JoinSwapGroupNV(hDC: GDI_DC; group: UInt32): UInt32 := z_JoinSwapGroupNV_ovr0(hDC, group);
    
    private static function _z_BindSwapBarrierNV_ovr0(group: UInt32; barrier: UInt32): UInt32;
    external 'opengl32.dll' name 'wglBindSwapBarrierNV';
    public static z_BindSwapBarrierNV_ovr0 := _z_BindSwapBarrierNV_ovr0;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function BindSwapBarrierNV(group: UInt32; barrier: UInt32): UInt32 := z_BindSwapBarrierNV_ovr0(group, barrier);
    
    private static function _z_QuerySwapGroupNV_ovr0(hDC: GDI_DC; [MarshalAs(UnmanagedType.LPArray)] group: array of UInt32; [MarshalAs(UnmanagedType.LPArray)] barrier: array of UInt32): UInt32;
    external 'opengl32.dll' name 'wglQuerySwapGroupNV';
    public static z_QuerySwapGroupNV_ovr0 := _z_QuerySwapGroupNV_ovr0;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function QuerySwapGroupNV(hDC: GDI_DC; group: array of UInt32; barrier: array of UInt32): UInt32 := z_QuerySwapGroupNV_ovr0(hDC, group, barrier);
    private static function _z_QuerySwapGroupNV_ovr1(hDC: GDI_DC; [MarshalAs(UnmanagedType.LPArray)] group: array of UInt32; var barrier: UInt32): UInt32;
    external 'opengl32.dll' name 'wglQuerySwapGroupNV';
    public static z_QuerySwapGroupNV_ovr1 := _z_QuerySwapGroupNV_ovr1;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function QuerySwapGroupNV(hDC: GDI_DC; group: array of UInt32; var barrier: UInt32): UInt32 := z_QuerySwapGroupNV_ovr1(hDC, group, barrier);
    private static function _z_QuerySwapGroupNV_ovr2(hDC: GDI_DC; [MarshalAs(UnmanagedType.LPArray)] group: array of UInt32; barrier: IntPtr): UInt32;
    external 'opengl32.dll' name 'wglQuerySwapGroupNV';
    public static z_QuerySwapGroupNV_ovr2 := _z_QuerySwapGroupNV_ovr2;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function QuerySwapGroupNV(hDC: GDI_DC; group: array of UInt32; barrier: IntPtr): UInt32 := z_QuerySwapGroupNV_ovr2(hDC, group, barrier);
    private static function _z_QuerySwapGroupNV_ovr3(hDC: GDI_DC; var group: UInt32; [MarshalAs(UnmanagedType.LPArray)] barrier: array of UInt32): UInt32;
    external 'opengl32.dll' name 'wglQuerySwapGroupNV';
    public static z_QuerySwapGroupNV_ovr3 := _z_QuerySwapGroupNV_ovr3;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function QuerySwapGroupNV(hDC: GDI_DC; var group: UInt32; barrier: array of UInt32): UInt32 := z_QuerySwapGroupNV_ovr3(hDC, group, barrier);
    private static function _z_QuerySwapGroupNV_ovr4(hDC: GDI_DC; var group: UInt32; var barrier: UInt32): UInt32;
    external 'opengl32.dll' name 'wglQuerySwapGroupNV';
    public static z_QuerySwapGroupNV_ovr4 := _z_QuerySwapGroupNV_ovr4;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function QuerySwapGroupNV(hDC: GDI_DC; var group: UInt32; var barrier: UInt32): UInt32 := z_QuerySwapGroupNV_ovr4(hDC, group, barrier);
    private static function _z_QuerySwapGroupNV_ovr5(hDC: GDI_DC; var group: UInt32; barrier: IntPtr): UInt32;
    external 'opengl32.dll' name 'wglQuerySwapGroupNV';
    public static z_QuerySwapGroupNV_ovr5 := _z_QuerySwapGroupNV_ovr5;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function QuerySwapGroupNV(hDC: GDI_DC; var group: UInt32; barrier: IntPtr): UInt32 := z_QuerySwapGroupNV_ovr5(hDC, group, barrier);
    private static function _z_QuerySwapGroupNV_ovr6(hDC: GDI_DC; group: IntPtr; [MarshalAs(UnmanagedType.LPArray)] barrier: array of UInt32): UInt32;
    external 'opengl32.dll' name 'wglQuerySwapGroupNV';
    public static z_QuerySwapGroupNV_ovr6 := _z_QuerySwapGroupNV_ovr6;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function QuerySwapGroupNV(hDC: GDI_DC; group: IntPtr; barrier: array of UInt32): UInt32 := z_QuerySwapGroupNV_ovr6(hDC, group, barrier);
    private static function _z_QuerySwapGroupNV_ovr7(hDC: GDI_DC; group: IntPtr; var barrier: UInt32): UInt32;
    external 'opengl32.dll' name 'wglQuerySwapGroupNV';
    public static z_QuerySwapGroupNV_ovr7 := _z_QuerySwapGroupNV_ovr7;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function QuerySwapGroupNV(hDC: GDI_DC; group: IntPtr; var barrier: UInt32): UInt32 := z_QuerySwapGroupNV_ovr7(hDC, group, barrier);
    private static function _z_QuerySwapGroupNV_ovr8(hDC: GDI_DC; group: IntPtr; barrier: IntPtr): UInt32;
    external 'opengl32.dll' name 'wglQuerySwapGroupNV';
    public static z_QuerySwapGroupNV_ovr8 := _z_QuerySwapGroupNV_ovr8;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function QuerySwapGroupNV(hDC: GDI_DC; group: IntPtr; barrier: IntPtr): UInt32 := z_QuerySwapGroupNV_ovr8(hDC, group, barrier);
    
    private static function _z_QueryMaxSwapGroupsNV_ovr0(hDC: GDI_DC; [MarshalAs(UnmanagedType.LPArray)] maxGroups: array of UInt32; [MarshalAs(UnmanagedType.LPArray)] maxBarriers: array of UInt32): UInt32;
    external 'opengl32.dll' name 'wglQueryMaxSwapGroupsNV';
    public static z_QueryMaxSwapGroupsNV_ovr0 := _z_QueryMaxSwapGroupsNV_ovr0;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function QueryMaxSwapGroupsNV(hDC: GDI_DC; maxGroups: array of UInt32; maxBarriers: array of UInt32): UInt32 := z_QueryMaxSwapGroupsNV_ovr0(hDC, maxGroups, maxBarriers);
    private static function _z_QueryMaxSwapGroupsNV_ovr1(hDC: GDI_DC; [MarshalAs(UnmanagedType.LPArray)] maxGroups: array of UInt32; var maxBarriers: UInt32): UInt32;
    external 'opengl32.dll' name 'wglQueryMaxSwapGroupsNV';
    public static z_QueryMaxSwapGroupsNV_ovr1 := _z_QueryMaxSwapGroupsNV_ovr1;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function QueryMaxSwapGroupsNV(hDC: GDI_DC; maxGroups: array of UInt32; var maxBarriers: UInt32): UInt32 := z_QueryMaxSwapGroupsNV_ovr1(hDC, maxGroups, maxBarriers);
    private static function _z_QueryMaxSwapGroupsNV_ovr2(hDC: GDI_DC; [MarshalAs(UnmanagedType.LPArray)] maxGroups: array of UInt32; maxBarriers: IntPtr): UInt32;
    external 'opengl32.dll' name 'wglQueryMaxSwapGroupsNV';
    public static z_QueryMaxSwapGroupsNV_ovr2 := _z_QueryMaxSwapGroupsNV_ovr2;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function QueryMaxSwapGroupsNV(hDC: GDI_DC; maxGroups: array of UInt32; maxBarriers: IntPtr): UInt32 := z_QueryMaxSwapGroupsNV_ovr2(hDC, maxGroups, maxBarriers);
    private static function _z_QueryMaxSwapGroupsNV_ovr3(hDC: GDI_DC; var maxGroups: UInt32; [MarshalAs(UnmanagedType.LPArray)] maxBarriers: array of UInt32): UInt32;
    external 'opengl32.dll' name 'wglQueryMaxSwapGroupsNV';
    public static z_QueryMaxSwapGroupsNV_ovr3 := _z_QueryMaxSwapGroupsNV_ovr3;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function QueryMaxSwapGroupsNV(hDC: GDI_DC; var maxGroups: UInt32; maxBarriers: array of UInt32): UInt32 := z_QueryMaxSwapGroupsNV_ovr3(hDC, maxGroups, maxBarriers);
    private static function _z_QueryMaxSwapGroupsNV_ovr4(hDC: GDI_DC; var maxGroups: UInt32; var maxBarriers: UInt32): UInt32;
    external 'opengl32.dll' name 'wglQueryMaxSwapGroupsNV';
    public static z_QueryMaxSwapGroupsNV_ovr4 := _z_QueryMaxSwapGroupsNV_ovr4;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function QueryMaxSwapGroupsNV(hDC: GDI_DC; var maxGroups: UInt32; var maxBarriers: UInt32): UInt32 := z_QueryMaxSwapGroupsNV_ovr4(hDC, maxGroups, maxBarriers);
    private static function _z_QueryMaxSwapGroupsNV_ovr5(hDC: GDI_DC; var maxGroups: UInt32; maxBarriers: IntPtr): UInt32;
    external 'opengl32.dll' name 'wglQueryMaxSwapGroupsNV';
    public static z_QueryMaxSwapGroupsNV_ovr5 := _z_QueryMaxSwapGroupsNV_ovr5;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function QueryMaxSwapGroupsNV(hDC: GDI_DC; var maxGroups: UInt32; maxBarriers: IntPtr): UInt32 := z_QueryMaxSwapGroupsNV_ovr5(hDC, maxGroups, maxBarriers);
    private static function _z_QueryMaxSwapGroupsNV_ovr6(hDC: GDI_DC; maxGroups: IntPtr; [MarshalAs(UnmanagedType.LPArray)] maxBarriers: array of UInt32): UInt32;
    external 'opengl32.dll' name 'wglQueryMaxSwapGroupsNV';
    public static z_QueryMaxSwapGroupsNV_ovr6 := _z_QueryMaxSwapGroupsNV_ovr6;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function QueryMaxSwapGroupsNV(hDC: GDI_DC; maxGroups: IntPtr; maxBarriers: array of UInt32): UInt32 := z_QueryMaxSwapGroupsNV_ovr6(hDC, maxGroups, maxBarriers);
    private static function _z_QueryMaxSwapGroupsNV_ovr7(hDC: GDI_DC; maxGroups: IntPtr; var maxBarriers: UInt32): UInt32;
    external 'opengl32.dll' name 'wglQueryMaxSwapGroupsNV';
    public static z_QueryMaxSwapGroupsNV_ovr7 := _z_QueryMaxSwapGroupsNV_ovr7;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function QueryMaxSwapGroupsNV(hDC: GDI_DC; maxGroups: IntPtr; var maxBarriers: UInt32): UInt32 := z_QueryMaxSwapGroupsNV_ovr7(hDC, maxGroups, maxBarriers);
    private static function _z_QueryMaxSwapGroupsNV_ovr8(hDC: GDI_DC; maxGroups: IntPtr; maxBarriers: IntPtr): UInt32;
    external 'opengl32.dll' name 'wglQueryMaxSwapGroupsNV';
    public static z_QueryMaxSwapGroupsNV_ovr8 := _z_QueryMaxSwapGroupsNV_ovr8;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function QueryMaxSwapGroupsNV(hDC: GDI_DC; maxGroups: IntPtr; maxBarriers: IntPtr): UInt32 := z_QueryMaxSwapGroupsNV_ovr8(hDC, maxGroups, maxBarriers);
    
    private static function _z_QueryFrameCountNV_ovr0(hDC: GDI_DC; [MarshalAs(UnmanagedType.LPArray)] count: array of UInt32): UInt32;
    external 'opengl32.dll' name 'wglQueryFrameCountNV';
    public static z_QueryFrameCountNV_ovr0 := _z_QueryFrameCountNV_ovr0;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function QueryFrameCountNV(hDC: GDI_DC; count: array of UInt32): UInt32 := z_QueryFrameCountNV_ovr0(hDC, count);
    private static function _z_QueryFrameCountNV_ovr1(hDC: GDI_DC; var count: UInt32): UInt32;
    external 'opengl32.dll' name 'wglQueryFrameCountNV';
    public static z_QueryFrameCountNV_ovr1 := _z_QueryFrameCountNV_ovr1;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function QueryFrameCountNV(hDC: GDI_DC; var count: UInt32): UInt32 := z_QueryFrameCountNV_ovr1(hDC, count);
    private static function _z_QueryFrameCountNV_ovr2(hDC: GDI_DC; count: IntPtr): UInt32;
    external 'opengl32.dll' name 'wglQueryFrameCountNV';
    public static z_QueryFrameCountNV_ovr2 := _z_QueryFrameCountNV_ovr2;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function QueryFrameCountNV(hDC: GDI_DC; count: IntPtr): UInt32 := z_QueryFrameCountNV_ovr2(hDC, count);
    
    private static function _z_ResetFrameCountNV_ovr0(hDC: GDI_DC): UInt32;
    external 'opengl32.dll' name 'wglResetFrameCountNV';
    public static z_ResetFrameCountNV_ovr0 := _z_ResetFrameCountNV_ovr0;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function ResetFrameCountNV(hDC: GDI_DC): UInt32 := z_ResetFrameCountNV_ovr0(hDC);
    
  end;
  
  wglVideoCaptureNV = static class
    
    private static function _z_BindVideoCaptureDeviceNV_ovr0(uVideoSlot: UInt32; hDevice: HVIDEOINPUTDEVICENV): UInt32;
    external 'opengl32.dll' name 'wglBindVideoCaptureDeviceNV';
    public static z_BindVideoCaptureDeviceNV_ovr0 := _z_BindVideoCaptureDeviceNV_ovr0;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function BindVideoCaptureDeviceNV(uVideoSlot: UInt32; hDevice: HVIDEOINPUTDEVICENV): UInt32 := z_BindVideoCaptureDeviceNV_ovr0(uVideoSlot, hDevice);
    
    private static function _z_EnumerateVideoCaptureDevicesNV_ovr0(hDc: GDI_DC; [MarshalAs(UnmanagedType.LPArray)] phDeviceList: array of HVIDEOINPUTDEVICENV): UInt32;
    external 'opengl32.dll' name 'wglEnumerateVideoCaptureDevicesNV';
    public static z_EnumerateVideoCaptureDevicesNV_ovr0 := _z_EnumerateVideoCaptureDevicesNV_ovr0;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnumerateVideoCaptureDevicesNV(hDc: GDI_DC; phDeviceList: array of HVIDEOINPUTDEVICENV): UInt32 := z_EnumerateVideoCaptureDevicesNV_ovr0(hDc, phDeviceList);
    private static function _z_EnumerateVideoCaptureDevicesNV_ovr1(hDc: GDI_DC; var phDeviceList: HVIDEOINPUTDEVICENV): UInt32;
    external 'opengl32.dll' name 'wglEnumerateVideoCaptureDevicesNV';
    public static z_EnumerateVideoCaptureDevicesNV_ovr1 := _z_EnumerateVideoCaptureDevicesNV_ovr1;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnumerateVideoCaptureDevicesNV(hDc: GDI_DC; var phDeviceList: HVIDEOINPUTDEVICENV): UInt32 := z_EnumerateVideoCaptureDevicesNV_ovr1(hDc, phDeviceList);
    private static function _z_EnumerateVideoCaptureDevicesNV_ovr2(hDc: GDI_DC; phDeviceList: IntPtr): UInt32;
    external 'opengl32.dll' name 'wglEnumerateVideoCaptureDevicesNV';
    public static z_EnumerateVideoCaptureDevicesNV_ovr2 := _z_EnumerateVideoCaptureDevicesNV_ovr2;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnumerateVideoCaptureDevicesNV(hDc: GDI_DC; phDeviceList: IntPtr): UInt32 := z_EnumerateVideoCaptureDevicesNV_ovr2(hDc, phDeviceList);
    
    private static function _z_LockVideoCaptureDeviceNV_ovr0(hDc: GDI_DC; hDevice: HVIDEOINPUTDEVICENV): UInt32;
    external 'opengl32.dll' name 'wglLockVideoCaptureDeviceNV';
    public static z_LockVideoCaptureDeviceNV_ovr0 := _z_LockVideoCaptureDeviceNV_ovr0;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function LockVideoCaptureDeviceNV(hDc: GDI_DC; hDevice: HVIDEOINPUTDEVICENV): UInt32 := z_LockVideoCaptureDeviceNV_ovr0(hDc, hDevice);
    
    private static function _z_QueryVideoCaptureDeviceNV_ovr0(hDc: GDI_DC; hDevice: HVIDEOINPUTDEVICENV; iAttribute: Int32; [MarshalAs(UnmanagedType.LPArray)] piValue: array of Int32): UInt32;
    external 'opengl32.dll' name 'wglQueryVideoCaptureDeviceNV';
    public static z_QueryVideoCaptureDeviceNV_ovr0 := _z_QueryVideoCaptureDeviceNV_ovr0;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function QueryVideoCaptureDeviceNV(hDc: GDI_DC; hDevice: HVIDEOINPUTDEVICENV; iAttribute: Int32; piValue: array of Int32): UInt32 := z_QueryVideoCaptureDeviceNV_ovr0(hDc, hDevice, iAttribute, piValue);
    private static function _z_QueryVideoCaptureDeviceNV_ovr1(hDc: GDI_DC; hDevice: HVIDEOINPUTDEVICENV; iAttribute: Int32; var piValue: Int32): UInt32;
    external 'opengl32.dll' name 'wglQueryVideoCaptureDeviceNV';
    public static z_QueryVideoCaptureDeviceNV_ovr1 := _z_QueryVideoCaptureDeviceNV_ovr1;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function QueryVideoCaptureDeviceNV(hDc: GDI_DC; hDevice: HVIDEOINPUTDEVICENV; iAttribute: Int32; var piValue: Int32): UInt32 := z_QueryVideoCaptureDeviceNV_ovr1(hDc, hDevice, iAttribute, piValue);
    private static function _z_QueryVideoCaptureDeviceNV_ovr2(hDc: GDI_DC; hDevice: HVIDEOINPUTDEVICENV; iAttribute: Int32; piValue: IntPtr): UInt32;
    external 'opengl32.dll' name 'wglQueryVideoCaptureDeviceNV';
    public static z_QueryVideoCaptureDeviceNV_ovr2 := _z_QueryVideoCaptureDeviceNV_ovr2;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function QueryVideoCaptureDeviceNV(hDc: GDI_DC; hDevice: HVIDEOINPUTDEVICENV; iAttribute: Int32; piValue: IntPtr): UInt32 := z_QueryVideoCaptureDeviceNV_ovr2(hDc, hDevice, iAttribute, piValue);
    
    private static function _z_ReleaseVideoCaptureDeviceNV_ovr0(hDc: GDI_DC; hDevice: HVIDEOINPUTDEVICENV): UInt32;
    external 'opengl32.dll' name 'wglReleaseVideoCaptureDeviceNV';
    public static z_ReleaseVideoCaptureDeviceNV_ovr0 := _z_ReleaseVideoCaptureDeviceNV_ovr0;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function ReleaseVideoCaptureDeviceNV(hDc: GDI_DC; hDevice: HVIDEOINPUTDEVICENV): UInt32 := z_ReleaseVideoCaptureDeviceNV_ovr0(hDc, hDevice);
    
  end;
  
  wglVideoOutputNV = static class
    
    private static function _z_GetVideoDeviceNV_ovr0(hDC: GDI_DC; numDevices: Int32; [MarshalAs(UnmanagedType.LPArray)] hVideoDevice: array of HPVIDEODEV): UInt32;
    external 'opengl32.dll' name 'wglGetVideoDeviceNV';
    public static z_GetVideoDeviceNV_ovr0 := _z_GetVideoDeviceNV_ovr0;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function GetVideoDeviceNV(hDC: GDI_DC; numDevices: Int32; hVideoDevice: array of HPVIDEODEV): UInt32 := z_GetVideoDeviceNV_ovr0(hDC, numDevices, hVideoDevice);
    private static function _z_GetVideoDeviceNV_ovr1(hDC: GDI_DC; numDevices: Int32; var hVideoDevice: HPVIDEODEV): UInt32;
    external 'opengl32.dll' name 'wglGetVideoDeviceNV';
    public static z_GetVideoDeviceNV_ovr1 := _z_GetVideoDeviceNV_ovr1;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function GetVideoDeviceNV(hDC: GDI_DC; numDevices: Int32; var hVideoDevice: HPVIDEODEV): UInt32 := z_GetVideoDeviceNV_ovr1(hDC, numDevices, hVideoDevice);
    private static function _z_GetVideoDeviceNV_ovr2(hDC: GDI_DC; numDevices: Int32; hVideoDevice: IntPtr): UInt32;
    external 'opengl32.dll' name 'wglGetVideoDeviceNV';
    public static z_GetVideoDeviceNV_ovr2 := _z_GetVideoDeviceNV_ovr2;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function GetVideoDeviceNV(hDC: GDI_DC; numDevices: Int32; hVideoDevice: IntPtr): UInt32 := z_GetVideoDeviceNV_ovr2(hDC, numDevices, hVideoDevice);
    
    private static function _z_ReleaseVideoDeviceNV_ovr0(hVideoDevice: HPVIDEODEV): UInt32;
    external 'opengl32.dll' name 'wglReleaseVideoDeviceNV';
    public static z_ReleaseVideoDeviceNV_ovr0 := _z_ReleaseVideoDeviceNV_ovr0;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function ReleaseVideoDeviceNV(hVideoDevice: HPVIDEODEV): UInt32 := z_ReleaseVideoDeviceNV_ovr0(hVideoDevice);
    
    private static function _z_BindVideoImageNV_ovr0(hVideoDevice: HPVIDEODEV; _hPbuffer: HPBUFFER; iVideoBuffer: Int32): UInt32;
    external 'opengl32.dll' name 'wglBindVideoImageNV';
    public static z_BindVideoImageNV_ovr0 := _z_BindVideoImageNV_ovr0;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function BindVideoImageNV(hVideoDevice: HPVIDEODEV; _hPbuffer: HPBUFFER; iVideoBuffer: Int32): UInt32 := z_BindVideoImageNV_ovr0(hVideoDevice, _hPbuffer, iVideoBuffer);
    
    private static function _z_ReleaseVideoImageNV_ovr0(_hPbuffer: HPBUFFER; iVideoBuffer: Int32): UInt32;
    external 'opengl32.dll' name 'wglReleaseVideoImageNV';
    public static z_ReleaseVideoImageNV_ovr0 := _z_ReleaseVideoImageNV_ovr0;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function ReleaseVideoImageNV(_hPbuffer: HPBUFFER; iVideoBuffer: Int32): UInt32 := z_ReleaseVideoImageNV_ovr0(_hPbuffer, iVideoBuffer);
    
    private static function _z_SendPbufferToVideoNV_ovr0(_hPbuffer: HPBUFFER; iBufferType: Int32; [MarshalAs(UnmanagedType.LPArray)] pulCounterPbuffer: array of UInt64; bBlock: UInt32): UInt32;
    external 'opengl32.dll' name 'wglSendPbufferToVideoNV';
    public static z_SendPbufferToVideoNV_ovr0 := _z_SendPbufferToVideoNV_ovr0;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function SendPbufferToVideoNV(_hPbuffer: HPBUFFER; iBufferType: Int32; pulCounterPbuffer: array of UInt64; bBlock: UInt32): UInt32 := z_SendPbufferToVideoNV_ovr0(_hPbuffer, iBufferType, pulCounterPbuffer, bBlock);
    private static function _z_SendPbufferToVideoNV_ovr1(_hPbuffer: HPBUFFER; iBufferType: Int32; var pulCounterPbuffer: UInt64; bBlock: UInt32): UInt32;
    external 'opengl32.dll' name 'wglSendPbufferToVideoNV';
    public static z_SendPbufferToVideoNV_ovr1 := _z_SendPbufferToVideoNV_ovr1;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function SendPbufferToVideoNV(_hPbuffer: HPBUFFER; iBufferType: Int32; var pulCounterPbuffer: UInt64; bBlock: UInt32): UInt32 := z_SendPbufferToVideoNV_ovr1(_hPbuffer, iBufferType, pulCounterPbuffer, bBlock);
    private static function _z_SendPbufferToVideoNV_ovr2(_hPbuffer: HPBUFFER; iBufferType: Int32; pulCounterPbuffer: IntPtr; bBlock: UInt32): UInt32;
    external 'opengl32.dll' name 'wglSendPbufferToVideoNV';
    public static z_SendPbufferToVideoNV_ovr2 := _z_SendPbufferToVideoNV_ovr2;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function SendPbufferToVideoNV(_hPbuffer: HPBUFFER; iBufferType: Int32; pulCounterPbuffer: IntPtr; bBlock: UInt32): UInt32 := z_SendPbufferToVideoNV_ovr2(_hPbuffer, iBufferType, pulCounterPbuffer, bBlock);
    
    private static function _z_GetVideoInfoNV_ovr0(hpVideoDevice: HPVIDEODEV; [MarshalAs(UnmanagedType.LPArray)] pulCounterOutputPbuffer: array of UInt64; [MarshalAs(UnmanagedType.LPArray)] pulCounterOutputVideo: array of UInt64): UInt32;
    external 'opengl32.dll' name 'wglGetVideoInfoNV';
    public static z_GetVideoInfoNV_ovr0 := _z_GetVideoInfoNV_ovr0;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function GetVideoInfoNV(hpVideoDevice: HPVIDEODEV; pulCounterOutputPbuffer: array of UInt64; pulCounterOutputVideo: array of UInt64): UInt32 := z_GetVideoInfoNV_ovr0(hpVideoDevice, pulCounterOutputPbuffer, pulCounterOutputVideo);
    private static function _z_GetVideoInfoNV_ovr1(hpVideoDevice: HPVIDEODEV; [MarshalAs(UnmanagedType.LPArray)] pulCounterOutputPbuffer: array of UInt64; var pulCounterOutputVideo: UInt64): UInt32;
    external 'opengl32.dll' name 'wglGetVideoInfoNV';
    public static z_GetVideoInfoNV_ovr1 := _z_GetVideoInfoNV_ovr1;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function GetVideoInfoNV(hpVideoDevice: HPVIDEODEV; pulCounterOutputPbuffer: array of UInt64; var pulCounterOutputVideo: UInt64): UInt32 := z_GetVideoInfoNV_ovr1(hpVideoDevice, pulCounterOutputPbuffer, pulCounterOutputVideo);
    private static function _z_GetVideoInfoNV_ovr2(hpVideoDevice: HPVIDEODEV; [MarshalAs(UnmanagedType.LPArray)] pulCounterOutputPbuffer: array of UInt64; pulCounterOutputVideo: IntPtr): UInt32;
    external 'opengl32.dll' name 'wglGetVideoInfoNV';
    public static z_GetVideoInfoNV_ovr2 := _z_GetVideoInfoNV_ovr2;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function GetVideoInfoNV(hpVideoDevice: HPVIDEODEV; pulCounterOutputPbuffer: array of UInt64; pulCounterOutputVideo: IntPtr): UInt32 := z_GetVideoInfoNV_ovr2(hpVideoDevice, pulCounterOutputPbuffer, pulCounterOutputVideo);
    private static function _z_GetVideoInfoNV_ovr3(hpVideoDevice: HPVIDEODEV; var pulCounterOutputPbuffer: UInt64; [MarshalAs(UnmanagedType.LPArray)] pulCounterOutputVideo: array of UInt64): UInt32;
    external 'opengl32.dll' name 'wglGetVideoInfoNV';
    public static z_GetVideoInfoNV_ovr3 := _z_GetVideoInfoNV_ovr3;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function GetVideoInfoNV(hpVideoDevice: HPVIDEODEV; var pulCounterOutputPbuffer: UInt64; pulCounterOutputVideo: array of UInt64): UInt32 := z_GetVideoInfoNV_ovr3(hpVideoDevice, pulCounterOutputPbuffer, pulCounterOutputVideo);
    private static function _z_GetVideoInfoNV_ovr4(hpVideoDevice: HPVIDEODEV; var pulCounterOutputPbuffer: UInt64; var pulCounterOutputVideo: UInt64): UInt32;
    external 'opengl32.dll' name 'wglGetVideoInfoNV';
    public static z_GetVideoInfoNV_ovr4 := _z_GetVideoInfoNV_ovr4;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function GetVideoInfoNV(hpVideoDevice: HPVIDEODEV; var pulCounterOutputPbuffer: UInt64; var pulCounterOutputVideo: UInt64): UInt32 := z_GetVideoInfoNV_ovr4(hpVideoDevice, pulCounterOutputPbuffer, pulCounterOutputVideo);
    private static function _z_GetVideoInfoNV_ovr5(hpVideoDevice: HPVIDEODEV; var pulCounterOutputPbuffer: UInt64; pulCounterOutputVideo: IntPtr): UInt32;
    external 'opengl32.dll' name 'wglGetVideoInfoNV';
    public static z_GetVideoInfoNV_ovr5 := _z_GetVideoInfoNV_ovr5;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function GetVideoInfoNV(hpVideoDevice: HPVIDEODEV; var pulCounterOutputPbuffer: UInt64; pulCounterOutputVideo: IntPtr): UInt32 := z_GetVideoInfoNV_ovr5(hpVideoDevice, pulCounterOutputPbuffer, pulCounterOutputVideo);
    private static function _z_GetVideoInfoNV_ovr6(hpVideoDevice: HPVIDEODEV; pulCounterOutputPbuffer: IntPtr; [MarshalAs(UnmanagedType.LPArray)] pulCounterOutputVideo: array of UInt64): UInt32;
    external 'opengl32.dll' name 'wglGetVideoInfoNV';
    public static z_GetVideoInfoNV_ovr6 := _z_GetVideoInfoNV_ovr6;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function GetVideoInfoNV(hpVideoDevice: HPVIDEODEV; pulCounterOutputPbuffer: IntPtr; pulCounterOutputVideo: array of UInt64): UInt32 := z_GetVideoInfoNV_ovr6(hpVideoDevice, pulCounterOutputPbuffer, pulCounterOutputVideo);
    private static function _z_GetVideoInfoNV_ovr7(hpVideoDevice: HPVIDEODEV; pulCounterOutputPbuffer: IntPtr; var pulCounterOutputVideo: UInt64): UInt32;
    external 'opengl32.dll' name 'wglGetVideoInfoNV';
    public static z_GetVideoInfoNV_ovr7 := _z_GetVideoInfoNV_ovr7;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function GetVideoInfoNV(hpVideoDevice: HPVIDEODEV; pulCounterOutputPbuffer: IntPtr; var pulCounterOutputVideo: UInt64): UInt32 := z_GetVideoInfoNV_ovr7(hpVideoDevice, pulCounterOutputPbuffer, pulCounterOutputVideo);
    private static function _z_GetVideoInfoNV_ovr8(hpVideoDevice: HPVIDEODEV; pulCounterOutputPbuffer: IntPtr; pulCounterOutputVideo: IntPtr): UInt32;
    external 'opengl32.dll' name 'wglGetVideoInfoNV';
    public static z_GetVideoInfoNV_ovr8 := _z_GetVideoInfoNV_ovr8;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function GetVideoInfoNV(hpVideoDevice: HPVIDEODEV; pulCounterOutputPbuffer: IntPtr; pulCounterOutputVideo: IntPtr): UInt32 := z_GetVideoInfoNV_ovr8(hpVideoDevice, pulCounterOutputPbuffer, pulCounterOutputVideo);
    
  end;
  
  wglVertexArrayRangeNV = static class
    
    private static function _z_AllocateMemoryNV_ovr0(size: Int32; readfreq: single; writefreq: single; priority: single): IntPtr;
    external 'opengl32.dll' name 'wglAllocateMemoryNV';
    public static z_AllocateMemoryNV_ovr0 := _z_AllocateMemoryNV_ovr0;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function AllocateMemoryNV(size: Int32; readfreq: single; writefreq: single; priority: single): IntPtr := z_AllocateMemoryNV_ovr0(size, readfreq, writefreq, priority);
    
    private static procedure _z_FreeMemoryNV_ovr0(pointer: IntPtr);
    external 'opengl32.dll' name 'wglFreeMemoryNV';
    public static z_FreeMemoryNV_ovr0 := _z_FreeMemoryNV_ovr0;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static procedure FreeMemoryNV(pointer: IntPtr) := z_FreeMemoryNV_ovr0(pointer);
    
  end;
  
  wglSyncControlOML = static class
    
    private static function _z_GetSyncValuesOML_ovr0(hdc: GDI_DC; [MarshalAs(UnmanagedType.LPArray)] ust: array of Int64; [MarshalAs(UnmanagedType.LPArray)] msc: array of Int64; [MarshalAs(UnmanagedType.LPArray)] sbc: array of Int64): UInt32;
    external 'opengl32.dll' name 'wglGetSyncValuesOML';
    public static z_GetSyncValuesOML_ovr0 := _z_GetSyncValuesOML_ovr0;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function GetSyncValuesOML(hdc: GDI_DC; ust: array of Int64; msc: array of Int64; sbc: array of Int64): UInt32 := z_GetSyncValuesOML_ovr0(hdc, ust, msc, sbc);
    private static function _z_GetSyncValuesOML_ovr1(hdc: GDI_DC; [MarshalAs(UnmanagedType.LPArray)] ust: array of Int64; [MarshalAs(UnmanagedType.LPArray)] msc: array of Int64; var sbc: Int64): UInt32;
    external 'opengl32.dll' name 'wglGetSyncValuesOML';
    public static z_GetSyncValuesOML_ovr1 := _z_GetSyncValuesOML_ovr1;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function GetSyncValuesOML(hdc: GDI_DC; ust: array of Int64; msc: array of Int64; var sbc: Int64): UInt32 := z_GetSyncValuesOML_ovr1(hdc, ust, msc, sbc);
    private static function _z_GetSyncValuesOML_ovr2(hdc: GDI_DC; [MarshalAs(UnmanagedType.LPArray)] ust: array of Int64; [MarshalAs(UnmanagedType.LPArray)] msc: array of Int64; sbc: IntPtr): UInt32;
    external 'opengl32.dll' name 'wglGetSyncValuesOML';
    public static z_GetSyncValuesOML_ovr2 := _z_GetSyncValuesOML_ovr2;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function GetSyncValuesOML(hdc: GDI_DC; ust: array of Int64; msc: array of Int64; sbc: IntPtr): UInt32 := z_GetSyncValuesOML_ovr2(hdc, ust, msc, sbc);
    private static function _z_GetSyncValuesOML_ovr3(hdc: GDI_DC; [MarshalAs(UnmanagedType.LPArray)] ust: array of Int64; var msc: Int64; [MarshalAs(UnmanagedType.LPArray)] sbc: array of Int64): UInt32;
    external 'opengl32.dll' name 'wglGetSyncValuesOML';
    public static z_GetSyncValuesOML_ovr3 := _z_GetSyncValuesOML_ovr3;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function GetSyncValuesOML(hdc: GDI_DC; ust: array of Int64; var msc: Int64; sbc: array of Int64): UInt32 := z_GetSyncValuesOML_ovr3(hdc, ust, msc, sbc);
    private static function _z_GetSyncValuesOML_ovr4(hdc: GDI_DC; [MarshalAs(UnmanagedType.LPArray)] ust: array of Int64; var msc: Int64; var sbc: Int64): UInt32;
    external 'opengl32.dll' name 'wglGetSyncValuesOML';
    public static z_GetSyncValuesOML_ovr4 := _z_GetSyncValuesOML_ovr4;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function GetSyncValuesOML(hdc: GDI_DC; ust: array of Int64; var msc: Int64; var sbc: Int64): UInt32 := z_GetSyncValuesOML_ovr4(hdc, ust, msc, sbc);
    private static function _z_GetSyncValuesOML_ovr5(hdc: GDI_DC; [MarshalAs(UnmanagedType.LPArray)] ust: array of Int64; var msc: Int64; sbc: IntPtr): UInt32;
    external 'opengl32.dll' name 'wglGetSyncValuesOML';
    public static z_GetSyncValuesOML_ovr5 := _z_GetSyncValuesOML_ovr5;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function GetSyncValuesOML(hdc: GDI_DC; ust: array of Int64; var msc: Int64; sbc: IntPtr): UInt32 := z_GetSyncValuesOML_ovr5(hdc, ust, msc, sbc);
    private static function _z_GetSyncValuesOML_ovr6(hdc: GDI_DC; [MarshalAs(UnmanagedType.LPArray)] ust: array of Int64; msc: IntPtr; [MarshalAs(UnmanagedType.LPArray)] sbc: array of Int64): UInt32;
    external 'opengl32.dll' name 'wglGetSyncValuesOML';
    public static z_GetSyncValuesOML_ovr6 := _z_GetSyncValuesOML_ovr6;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function GetSyncValuesOML(hdc: GDI_DC; ust: array of Int64; msc: IntPtr; sbc: array of Int64): UInt32 := z_GetSyncValuesOML_ovr6(hdc, ust, msc, sbc);
    private static function _z_GetSyncValuesOML_ovr7(hdc: GDI_DC; [MarshalAs(UnmanagedType.LPArray)] ust: array of Int64; msc: IntPtr; var sbc: Int64): UInt32;
    external 'opengl32.dll' name 'wglGetSyncValuesOML';
    public static z_GetSyncValuesOML_ovr7 := _z_GetSyncValuesOML_ovr7;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function GetSyncValuesOML(hdc: GDI_DC; ust: array of Int64; msc: IntPtr; var sbc: Int64): UInt32 := z_GetSyncValuesOML_ovr7(hdc, ust, msc, sbc);
    private static function _z_GetSyncValuesOML_ovr8(hdc: GDI_DC; [MarshalAs(UnmanagedType.LPArray)] ust: array of Int64; msc: IntPtr; sbc: IntPtr): UInt32;
    external 'opengl32.dll' name 'wglGetSyncValuesOML';
    public static z_GetSyncValuesOML_ovr8 := _z_GetSyncValuesOML_ovr8;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function GetSyncValuesOML(hdc: GDI_DC; ust: array of Int64; msc: IntPtr; sbc: IntPtr): UInt32 := z_GetSyncValuesOML_ovr8(hdc, ust, msc, sbc);
    private static function _z_GetSyncValuesOML_ovr9(hdc: GDI_DC; var ust: Int64; [MarshalAs(UnmanagedType.LPArray)] msc: array of Int64; [MarshalAs(UnmanagedType.LPArray)] sbc: array of Int64): UInt32;
    external 'opengl32.dll' name 'wglGetSyncValuesOML';
    public static z_GetSyncValuesOML_ovr9 := _z_GetSyncValuesOML_ovr9;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function GetSyncValuesOML(hdc: GDI_DC; var ust: Int64; msc: array of Int64; sbc: array of Int64): UInt32 := z_GetSyncValuesOML_ovr9(hdc, ust, msc, sbc);
    private static function _z_GetSyncValuesOML_ovr10(hdc: GDI_DC; var ust: Int64; [MarshalAs(UnmanagedType.LPArray)] msc: array of Int64; var sbc: Int64): UInt32;
    external 'opengl32.dll' name 'wglGetSyncValuesOML';
    public static z_GetSyncValuesOML_ovr10 := _z_GetSyncValuesOML_ovr10;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function GetSyncValuesOML(hdc: GDI_DC; var ust: Int64; msc: array of Int64; var sbc: Int64): UInt32 := z_GetSyncValuesOML_ovr10(hdc, ust, msc, sbc);
    private static function _z_GetSyncValuesOML_ovr11(hdc: GDI_DC; var ust: Int64; [MarshalAs(UnmanagedType.LPArray)] msc: array of Int64; sbc: IntPtr): UInt32;
    external 'opengl32.dll' name 'wglGetSyncValuesOML';
    public static z_GetSyncValuesOML_ovr11 := _z_GetSyncValuesOML_ovr11;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function GetSyncValuesOML(hdc: GDI_DC; var ust: Int64; msc: array of Int64; sbc: IntPtr): UInt32 := z_GetSyncValuesOML_ovr11(hdc, ust, msc, sbc);
    private static function _z_GetSyncValuesOML_ovr12(hdc: GDI_DC; var ust: Int64; var msc: Int64; [MarshalAs(UnmanagedType.LPArray)] sbc: array of Int64): UInt32;
    external 'opengl32.dll' name 'wglGetSyncValuesOML';
    public static z_GetSyncValuesOML_ovr12 := _z_GetSyncValuesOML_ovr12;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function GetSyncValuesOML(hdc: GDI_DC; var ust: Int64; var msc: Int64; sbc: array of Int64): UInt32 := z_GetSyncValuesOML_ovr12(hdc, ust, msc, sbc);
    private static function _z_GetSyncValuesOML_ovr13(hdc: GDI_DC; var ust: Int64; var msc: Int64; var sbc: Int64): UInt32;
    external 'opengl32.dll' name 'wglGetSyncValuesOML';
    public static z_GetSyncValuesOML_ovr13 := _z_GetSyncValuesOML_ovr13;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function GetSyncValuesOML(hdc: GDI_DC; var ust: Int64; var msc: Int64; var sbc: Int64): UInt32 := z_GetSyncValuesOML_ovr13(hdc, ust, msc, sbc);
    private static function _z_GetSyncValuesOML_ovr14(hdc: GDI_DC; var ust: Int64; var msc: Int64; sbc: IntPtr): UInt32;
    external 'opengl32.dll' name 'wglGetSyncValuesOML';
    public static z_GetSyncValuesOML_ovr14 := _z_GetSyncValuesOML_ovr14;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function GetSyncValuesOML(hdc: GDI_DC; var ust: Int64; var msc: Int64; sbc: IntPtr): UInt32 := z_GetSyncValuesOML_ovr14(hdc, ust, msc, sbc);
    private static function _z_GetSyncValuesOML_ovr15(hdc: GDI_DC; var ust: Int64; msc: IntPtr; [MarshalAs(UnmanagedType.LPArray)] sbc: array of Int64): UInt32;
    external 'opengl32.dll' name 'wglGetSyncValuesOML';
    public static z_GetSyncValuesOML_ovr15 := _z_GetSyncValuesOML_ovr15;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function GetSyncValuesOML(hdc: GDI_DC; var ust: Int64; msc: IntPtr; sbc: array of Int64): UInt32 := z_GetSyncValuesOML_ovr15(hdc, ust, msc, sbc);
    private static function _z_GetSyncValuesOML_ovr16(hdc: GDI_DC; var ust: Int64; msc: IntPtr; var sbc: Int64): UInt32;
    external 'opengl32.dll' name 'wglGetSyncValuesOML';
    public static z_GetSyncValuesOML_ovr16 := _z_GetSyncValuesOML_ovr16;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function GetSyncValuesOML(hdc: GDI_DC; var ust: Int64; msc: IntPtr; var sbc: Int64): UInt32 := z_GetSyncValuesOML_ovr16(hdc, ust, msc, sbc);
    private static function _z_GetSyncValuesOML_ovr17(hdc: GDI_DC; var ust: Int64; msc: IntPtr; sbc: IntPtr): UInt32;
    external 'opengl32.dll' name 'wglGetSyncValuesOML';
    public static z_GetSyncValuesOML_ovr17 := _z_GetSyncValuesOML_ovr17;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function GetSyncValuesOML(hdc: GDI_DC; var ust: Int64; msc: IntPtr; sbc: IntPtr): UInt32 := z_GetSyncValuesOML_ovr17(hdc, ust, msc, sbc);
    private static function _z_GetSyncValuesOML_ovr18(hdc: GDI_DC; ust: IntPtr; [MarshalAs(UnmanagedType.LPArray)] msc: array of Int64; [MarshalAs(UnmanagedType.LPArray)] sbc: array of Int64): UInt32;
    external 'opengl32.dll' name 'wglGetSyncValuesOML';
    public static z_GetSyncValuesOML_ovr18 := _z_GetSyncValuesOML_ovr18;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function GetSyncValuesOML(hdc: GDI_DC; ust: IntPtr; msc: array of Int64; sbc: array of Int64): UInt32 := z_GetSyncValuesOML_ovr18(hdc, ust, msc, sbc);
    private static function _z_GetSyncValuesOML_ovr19(hdc: GDI_DC; ust: IntPtr; [MarshalAs(UnmanagedType.LPArray)] msc: array of Int64; var sbc: Int64): UInt32;
    external 'opengl32.dll' name 'wglGetSyncValuesOML';
    public static z_GetSyncValuesOML_ovr19 := _z_GetSyncValuesOML_ovr19;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function GetSyncValuesOML(hdc: GDI_DC; ust: IntPtr; msc: array of Int64; var sbc: Int64): UInt32 := z_GetSyncValuesOML_ovr19(hdc, ust, msc, sbc);
    private static function _z_GetSyncValuesOML_ovr20(hdc: GDI_DC; ust: IntPtr; [MarshalAs(UnmanagedType.LPArray)] msc: array of Int64; sbc: IntPtr): UInt32;
    external 'opengl32.dll' name 'wglGetSyncValuesOML';
    public static z_GetSyncValuesOML_ovr20 := _z_GetSyncValuesOML_ovr20;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function GetSyncValuesOML(hdc: GDI_DC; ust: IntPtr; msc: array of Int64; sbc: IntPtr): UInt32 := z_GetSyncValuesOML_ovr20(hdc, ust, msc, sbc);
    private static function _z_GetSyncValuesOML_ovr21(hdc: GDI_DC; ust: IntPtr; var msc: Int64; [MarshalAs(UnmanagedType.LPArray)] sbc: array of Int64): UInt32;
    external 'opengl32.dll' name 'wglGetSyncValuesOML';
    public static z_GetSyncValuesOML_ovr21 := _z_GetSyncValuesOML_ovr21;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function GetSyncValuesOML(hdc: GDI_DC; ust: IntPtr; var msc: Int64; sbc: array of Int64): UInt32 := z_GetSyncValuesOML_ovr21(hdc, ust, msc, sbc);
    private static function _z_GetSyncValuesOML_ovr22(hdc: GDI_DC; ust: IntPtr; var msc: Int64; var sbc: Int64): UInt32;
    external 'opengl32.dll' name 'wglGetSyncValuesOML';
    public static z_GetSyncValuesOML_ovr22 := _z_GetSyncValuesOML_ovr22;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function GetSyncValuesOML(hdc: GDI_DC; ust: IntPtr; var msc: Int64; var sbc: Int64): UInt32 := z_GetSyncValuesOML_ovr22(hdc, ust, msc, sbc);
    private static function _z_GetSyncValuesOML_ovr23(hdc: GDI_DC; ust: IntPtr; var msc: Int64; sbc: IntPtr): UInt32;
    external 'opengl32.dll' name 'wglGetSyncValuesOML';
    public static z_GetSyncValuesOML_ovr23 := _z_GetSyncValuesOML_ovr23;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function GetSyncValuesOML(hdc: GDI_DC; ust: IntPtr; var msc: Int64; sbc: IntPtr): UInt32 := z_GetSyncValuesOML_ovr23(hdc, ust, msc, sbc);
    private static function _z_GetSyncValuesOML_ovr24(hdc: GDI_DC; ust: IntPtr; msc: IntPtr; [MarshalAs(UnmanagedType.LPArray)] sbc: array of Int64): UInt32;
    external 'opengl32.dll' name 'wglGetSyncValuesOML';
    public static z_GetSyncValuesOML_ovr24 := _z_GetSyncValuesOML_ovr24;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function GetSyncValuesOML(hdc: GDI_DC; ust: IntPtr; msc: IntPtr; sbc: array of Int64): UInt32 := z_GetSyncValuesOML_ovr24(hdc, ust, msc, sbc);
    private static function _z_GetSyncValuesOML_ovr25(hdc: GDI_DC; ust: IntPtr; msc: IntPtr; var sbc: Int64): UInt32;
    external 'opengl32.dll' name 'wglGetSyncValuesOML';
    public static z_GetSyncValuesOML_ovr25 := _z_GetSyncValuesOML_ovr25;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function GetSyncValuesOML(hdc: GDI_DC; ust: IntPtr; msc: IntPtr; var sbc: Int64): UInt32 := z_GetSyncValuesOML_ovr25(hdc, ust, msc, sbc);
    private static function _z_GetSyncValuesOML_ovr26(hdc: GDI_DC; ust: IntPtr; msc: IntPtr; sbc: IntPtr): UInt32;
    external 'opengl32.dll' name 'wglGetSyncValuesOML';
    public static z_GetSyncValuesOML_ovr26 := _z_GetSyncValuesOML_ovr26;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function GetSyncValuesOML(hdc: GDI_DC; ust: IntPtr; msc: IntPtr; sbc: IntPtr): UInt32 := z_GetSyncValuesOML_ovr26(hdc, ust, msc, sbc);
    
    private static function _z_GetMscRateOML_ovr0(hdc: GDI_DC; [MarshalAs(UnmanagedType.LPArray)] numerator: array of Int32; [MarshalAs(UnmanagedType.LPArray)] denominator: array of Int32): UInt32;
    external 'opengl32.dll' name 'wglGetMscRateOML';
    public static z_GetMscRateOML_ovr0 := _z_GetMscRateOML_ovr0;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function GetMscRateOML(hdc: GDI_DC; numerator: array of Int32; denominator: array of Int32): UInt32 := z_GetMscRateOML_ovr0(hdc, numerator, denominator);
    private static function _z_GetMscRateOML_ovr1(hdc: GDI_DC; [MarshalAs(UnmanagedType.LPArray)] numerator: array of Int32; var denominator: Int32): UInt32;
    external 'opengl32.dll' name 'wglGetMscRateOML';
    public static z_GetMscRateOML_ovr1 := _z_GetMscRateOML_ovr1;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function GetMscRateOML(hdc: GDI_DC; numerator: array of Int32; var denominator: Int32): UInt32 := z_GetMscRateOML_ovr1(hdc, numerator, denominator);
    private static function _z_GetMscRateOML_ovr2(hdc: GDI_DC; [MarshalAs(UnmanagedType.LPArray)] numerator: array of Int32; denominator: IntPtr): UInt32;
    external 'opengl32.dll' name 'wglGetMscRateOML';
    public static z_GetMscRateOML_ovr2 := _z_GetMscRateOML_ovr2;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function GetMscRateOML(hdc: GDI_DC; numerator: array of Int32; denominator: IntPtr): UInt32 := z_GetMscRateOML_ovr2(hdc, numerator, denominator);
    private static function _z_GetMscRateOML_ovr3(hdc: GDI_DC; var numerator: Int32; [MarshalAs(UnmanagedType.LPArray)] denominator: array of Int32): UInt32;
    external 'opengl32.dll' name 'wglGetMscRateOML';
    public static z_GetMscRateOML_ovr3 := _z_GetMscRateOML_ovr3;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function GetMscRateOML(hdc: GDI_DC; var numerator: Int32; denominator: array of Int32): UInt32 := z_GetMscRateOML_ovr3(hdc, numerator, denominator);
    private static function _z_GetMscRateOML_ovr4(hdc: GDI_DC; var numerator: Int32; var denominator: Int32): UInt32;
    external 'opengl32.dll' name 'wglGetMscRateOML';
    public static z_GetMscRateOML_ovr4 := _z_GetMscRateOML_ovr4;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function GetMscRateOML(hdc: GDI_DC; var numerator: Int32; var denominator: Int32): UInt32 := z_GetMscRateOML_ovr4(hdc, numerator, denominator);
    private static function _z_GetMscRateOML_ovr5(hdc: GDI_DC; var numerator: Int32; denominator: IntPtr): UInt32;
    external 'opengl32.dll' name 'wglGetMscRateOML';
    public static z_GetMscRateOML_ovr5 := _z_GetMscRateOML_ovr5;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function GetMscRateOML(hdc: GDI_DC; var numerator: Int32; denominator: IntPtr): UInt32 := z_GetMscRateOML_ovr5(hdc, numerator, denominator);
    private static function _z_GetMscRateOML_ovr6(hdc: GDI_DC; numerator: IntPtr; [MarshalAs(UnmanagedType.LPArray)] denominator: array of Int32): UInt32;
    external 'opengl32.dll' name 'wglGetMscRateOML';
    public static z_GetMscRateOML_ovr6 := _z_GetMscRateOML_ovr6;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function GetMscRateOML(hdc: GDI_DC; numerator: IntPtr; denominator: array of Int32): UInt32 := z_GetMscRateOML_ovr6(hdc, numerator, denominator);
    private static function _z_GetMscRateOML_ovr7(hdc: GDI_DC; numerator: IntPtr; var denominator: Int32): UInt32;
    external 'opengl32.dll' name 'wglGetMscRateOML';
    public static z_GetMscRateOML_ovr7 := _z_GetMscRateOML_ovr7;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function GetMscRateOML(hdc: GDI_DC; numerator: IntPtr; var denominator: Int32): UInt32 := z_GetMscRateOML_ovr7(hdc, numerator, denominator);
    private static function _z_GetMscRateOML_ovr8(hdc: GDI_DC; numerator: IntPtr; denominator: IntPtr): UInt32;
    external 'opengl32.dll' name 'wglGetMscRateOML';
    public static z_GetMscRateOML_ovr8 := _z_GetMscRateOML_ovr8;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function GetMscRateOML(hdc: GDI_DC; numerator: IntPtr; denominator: IntPtr): UInt32 := z_GetMscRateOML_ovr8(hdc, numerator, denominator);
    
    private static function _z_SwapBuffersMscOML_ovr0(hdc: GDI_DC; target_msc: Int64; divisor: Int64; remainder: Int64): Int64;
    external 'opengl32.dll' name 'wglSwapBuffersMscOML';
    public static z_SwapBuffersMscOML_ovr0 := _z_SwapBuffersMscOML_ovr0;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function SwapBuffersMscOML(hdc: GDI_DC; target_msc: Int64; divisor: Int64; remainder: Int64): Int64 := z_SwapBuffersMscOML_ovr0(hdc, target_msc, divisor, remainder);
    
    private static function _z_SwapLayerBuffersMscOML_ovr0(hdc: GDI_DC; fuPlanes: Int32; target_msc: Int64; divisor: Int64; remainder: Int64): Int64;
    external 'opengl32.dll' name 'wglSwapLayerBuffersMscOML';
    public static z_SwapLayerBuffersMscOML_ovr0 := _z_SwapLayerBuffersMscOML_ovr0;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function SwapLayerBuffersMscOML(hdc: GDI_DC; fuPlanes: Int32; target_msc: Int64; divisor: Int64; remainder: Int64): Int64 := z_SwapLayerBuffersMscOML_ovr0(hdc, fuPlanes, target_msc, divisor, remainder);
    
    private static function _z_WaitForMscOML_ovr0(hdc: GDI_DC; target_msc: Int64; divisor: Int64; remainder: Int64; [MarshalAs(UnmanagedType.LPArray)] ust: array of Int64; [MarshalAs(UnmanagedType.LPArray)] msc: array of Int64; [MarshalAs(UnmanagedType.LPArray)] sbc: array of Int64): UInt32;
    external 'opengl32.dll' name 'wglWaitForMscOML';
    public static z_WaitForMscOML_ovr0 := _z_WaitForMscOML_ovr0;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function WaitForMscOML(hdc: GDI_DC; target_msc: Int64; divisor: Int64; remainder: Int64; ust: array of Int64; msc: array of Int64; sbc: array of Int64): UInt32 := z_WaitForMscOML_ovr0(hdc, target_msc, divisor, remainder, ust, msc, sbc);
    private static function _z_WaitForMscOML_ovr1(hdc: GDI_DC; target_msc: Int64; divisor: Int64; remainder: Int64; [MarshalAs(UnmanagedType.LPArray)] ust: array of Int64; [MarshalAs(UnmanagedType.LPArray)] msc: array of Int64; var sbc: Int64): UInt32;
    external 'opengl32.dll' name 'wglWaitForMscOML';
    public static z_WaitForMscOML_ovr1 := _z_WaitForMscOML_ovr1;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function WaitForMscOML(hdc: GDI_DC; target_msc: Int64; divisor: Int64; remainder: Int64; ust: array of Int64; msc: array of Int64; var sbc: Int64): UInt32 := z_WaitForMscOML_ovr1(hdc, target_msc, divisor, remainder, ust, msc, sbc);
    private static function _z_WaitForMscOML_ovr2(hdc: GDI_DC; target_msc: Int64; divisor: Int64; remainder: Int64; [MarshalAs(UnmanagedType.LPArray)] ust: array of Int64; [MarshalAs(UnmanagedType.LPArray)] msc: array of Int64; sbc: IntPtr): UInt32;
    external 'opengl32.dll' name 'wglWaitForMscOML';
    public static z_WaitForMscOML_ovr2 := _z_WaitForMscOML_ovr2;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function WaitForMscOML(hdc: GDI_DC; target_msc: Int64; divisor: Int64; remainder: Int64; ust: array of Int64; msc: array of Int64; sbc: IntPtr): UInt32 := z_WaitForMscOML_ovr2(hdc, target_msc, divisor, remainder, ust, msc, sbc);
    private static function _z_WaitForMscOML_ovr3(hdc: GDI_DC; target_msc: Int64; divisor: Int64; remainder: Int64; [MarshalAs(UnmanagedType.LPArray)] ust: array of Int64; var msc: Int64; [MarshalAs(UnmanagedType.LPArray)] sbc: array of Int64): UInt32;
    external 'opengl32.dll' name 'wglWaitForMscOML';
    public static z_WaitForMscOML_ovr3 := _z_WaitForMscOML_ovr3;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function WaitForMscOML(hdc: GDI_DC; target_msc: Int64; divisor: Int64; remainder: Int64; ust: array of Int64; var msc: Int64; sbc: array of Int64): UInt32 := z_WaitForMscOML_ovr3(hdc, target_msc, divisor, remainder, ust, msc, sbc);
    private static function _z_WaitForMscOML_ovr4(hdc: GDI_DC; target_msc: Int64; divisor: Int64; remainder: Int64; [MarshalAs(UnmanagedType.LPArray)] ust: array of Int64; var msc: Int64; var sbc: Int64): UInt32;
    external 'opengl32.dll' name 'wglWaitForMscOML';
    public static z_WaitForMscOML_ovr4 := _z_WaitForMscOML_ovr4;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function WaitForMscOML(hdc: GDI_DC; target_msc: Int64; divisor: Int64; remainder: Int64; ust: array of Int64; var msc: Int64; var sbc: Int64): UInt32 := z_WaitForMscOML_ovr4(hdc, target_msc, divisor, remainder, ust, msc, sbc);
    private static function _z_WaitForMscOML_ovr5(hdc: GDI_DC; target_msc: Int64; divisor: Int64; remainder: Int64; [MarshalAs(UnmanagedType.LPArray)] ust: array of Int64; var msc: Int64; sbc: IntPtr): UInt32;
    external 'opengl32.dll' name 'wglWaitForMscOML';
    public static z_WaitForMscOML_ovr5 := _z_WaitForMscOML_ovr5;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function WaitForMscOML(hdc: GDI_DC; target_msc: Int64; divisor: Int64; remainder: Int64; ust: array of Int64; var msc: Int64; sbc: IntPtr): UInt32 := z_WaitForMscOML_ovr5(hdc, target_msc, divisor, remainder, ust, msc, sbc);
    private static function _z_WaitForMscOML_ovr6(hdc: GDI_DC; target_msc: Int64; divisor: Int64; remainder: Int64; [MarshalAs(UnmanagedType.LPArray)] ust: array of Int64; msc: IntPtr; [MarshalAs(UnmanagedType.LPArray)] sbc: array of Int64): UInt32;
    external 'opengl32.dll' name 'wglWaitForMscOML';
    public static z_WaitForMscOML_ovr6 := _z_WaitForMscOML_ovr6;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function WaitForMscOML(hdc: GDI_DC; target_msc: Int64; divisor: Int64; remainder: Int64; ust: array of Int64; msc: IntPtr; sbc: array of Int64): UInt32 := z_WaitForMscOML_ovr6(hdc, target_msc, divisor, remainder, ust, msc, sbc);
    private static function _z_WaitForMscOML_ovr7(hdc: GDI_DC; target_msc: Int64; divisor: Int64; remainder: Int64; [MarshalAs(UnmanagedType.LPArray)] ust: array of Int64; msc: IntPtr; var sbc: Int64): UInt32;
    external 'opengl32.dll' name 'wglWaitForMscOML';
    public static z_WaitForMscOML_ovr7 := _z_WaitForMscOML_ovr7;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function WaitForMscOML(hdc: GDI_DC; target_msc: Int64; divisor: Int64; remainder: Int64; ust: array of Int64; msc: IntPtr; var sbc: Int64): UInt32 := z_WaitForMscOML_ovr7(hdc, target_msc, divisor, remainder, ust, msc, sbc);
    private static function _z_WaitForMscOML_ovr8(hdc: GDI_DC; target_msc: Int64; divisor: Int64; remainder: Int64; [MarshalAs(UnmanagedType.LPArray)] ust: array of Int64; msc: IntPtr; sbc: IntPtr): UInt32;
    external 'opengl32.dll' name 'wglWaitForMscOML';
    public static z_WaitForMscOML_ovr8 := _z_WaitForMscOML_ovr8;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function WaitForMscOML(hdc: GDI_DC; target_msc: Int64; divisor: Int64; remainder: Int64; ust: array of Int64; msc: IntPtr; sbc: IntPtr): UInt32 := z_WaitForMscOML_ovr8(hdc, target_msc, divisor, remainder, ust, msc, sbc);
    private static function _z_WaitForMscOML_ovr9(hdc: GDI_DC; target_msc: Int64; divisor: Int64; remainder: Int64; var ust: Int64; [MarshalAs(UnmanagedType.LPArray)] msc: array of Int64; [MarshalAs(UnmanagedType.LPArray)] sbc: array of Int64): UInt32;
    external 'opengl32.dll' name 'wglWaitForMscOML';
    public static z_WaitForMscOML_ovr9 := _z_WaitForMscOML_ovr9;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function WaitForMscOML(hdc: GDI_DC; target_msc: Int64; divisor: Int64; remainder: Int64; var ust: Int64; msc: array of Int64; sbc: array of Int64): UInt32 := z_WaitForMscOML_ovr9(hdc, target_msc, divisor, remainder, ust, msc, sbc);
    private static function _z_WaitForMscOML_ovr10(hdc: GDI_DC; target_msc: Int64; divisor: Int64; remainder: Int64; var ust: Int64; [MarshalAs(UnmanagedType.LPArray)] msc: array of Int64; var sbc: Int64): UInt32;
    external 'opengl32.dll' name 'wglWaitForMscOML';
    public static z_WaitForMscOML_ovr10 := _z_WaitForMscOML_ovr10;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function WaitForMscOML(hdc: GDI_DC; target_msc: Int64; divisor: Int64; remainder: Int64; var ust: Int64; msc: array of Int64; var sbc: Int64): UInt32 := z_WaitForMscOML_ovr10(hdc, target_msc, divisor, remainder, ust, msc, sbc);
    private static function _z_WaitForMscOML_ovr11(hdc: GDI_DC; target_msc: Int64; divisor: Int64; remainder: Int64; var ust: Int64; [MarshalAs(UnmanagedType.LPArray)] msc: array of Int64; sbc: IntPtr): UInt32;
    external 'opengl32.dll' name 'wglWaitForMscOML';
    public static z_WaitForMscOML_ovr11 := _z_WaitForMscOML_ovr11;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function WaitForMscOML(hdc: GDI_DC; target_msc: Int64; divisor: Int64; remainder: Int64; var ust: Int64; msc: array of Int64; sbc: IntPtr): UInt32 := z_WaitForMscOML_ovr11(hdc, target_msc, divisor, remainder, ust, msc, sbc);
    private static function _z_WaitForMscOML_ovr12(hdc: GDI_DC; target_msc: Int64; divisor: Int64; remainder: Int64; var ust: Int64; var msc: Int64; [MarshalAs(UnmanagedType.LPArray)] sbc: array of Int64): UInt32;
    external 'opengl32.dll' name 'wglWaitForMscOML';
    public static z_WaitForMscOML_ovr12 := _z_WaitForMscOML_ovr12;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function WaitForMscOML(hdc: GDI_DC; target_msc: Int64; divisor: Int64; remainder: Int64; var ust: Int64; var msc: Int64; sbc: array of Int64): UInt32 := z_WaitForMscOML_ovr12(hdc, target_msc, divisor, remainder, ust, msc, sbc);
    private static function _z_WaitForMscOML_ovr13(hdc: GDI_DC; target_msc: Int64; divisor: Int64; remainder: Int64; var ust: Int64; var msc: Int64; var sbc: Int64): UInt32;
    external 'opengl32.dll' name 'wglWaitForMscOML';
    public static z_WaitForMscOML_ovr13 := _z_WaitForMscOML_ovr13;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function WaitForMscOML(hdc: GDI_DC; target_msc: Int64; divisor: Int64; remainder: Int64; var ust: Int64; var msc: Int64; var sbc: Int64): UInt32 := z_WaitForMscOML_ovr13(hdc, target_msc, divisor, remainder, ust, msc, sbc);
    private static function _z_WaitForMscOML_ovr14(hdc: GDI_DC; target_msc: Int64; divisor: Int64; remainder: Int64; var ust: Int64; var msc: Int64; sbc: IntPtr): UInt32;
    external 'opengl32.dll' name 'wglWaitForMscOML';
    public static z_WaitForMscOML_ovr14 := _z_WaitForMscOML_ovr14;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function WaitForMscOML(hdc: GDI_DC; target_msc: Int64; divisor: Int64; remainder: Int64; var ust: Int64; var msc: Int64; sbc: IntPtr): UInt32 := z_WaitForMscOML_ovr14(hdc, target_msc, divisor, remainder, ust, msc, sbc);
    private static function _z_WaitForMscOML_ovr15(hdc: GDI_DC; target_msc: Int64; divisor: Int64; remainder: Int64; var ust: Int64; msc: IntPtr; [MarshalAs(UnmanagedType.LPArray)] sbc: array of Int64): UInt32;
    external 'opengl32.dll' name 'wglWaitForMscOML';
    public static z_WaitForMscOML_ovr15 := _z_WaitForMscOML_ovr15;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function WaitForMscOML(hdc: GDI_DC; target_msc: Int64; divisor: Int64; remainder: Int64; var ust: Int64; msc: IntPtr; sbc: array of Int64): UInt32 := z_WaitForMscOML_ovr15(hdc, target_msc, divisor, remainder, ust, msc, sbc);
    private static function _z_WaitForMscOML_ovr16(hdc: GDI_DC; target_msc: Int64; divisor: Int64; remainder: Int64; var ust: Int64; msc: IntPtr; var sbc: Int64): UInt32;
    external 'opengl32.dll' name 'wglWaitForMscOML';
    public static z_WaitForMscOML_ovr16 := _z_WaitForMscOML_ovr16;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function WaitForMscOML(hdc: GDI_DC; target_msc: Int64; divisor: Int64; remainder: Int64; var ust: Int64; msc: IntPtr; var sbc: Int64): UInt32 := z_WaitForMscOML_ovr16(hdc, target_msc, divisor, remainder, ust, msc, sbc);
    private static function _z_WaitForMscOML_ovr17(hdc: GDI_DC; target_msc: Int64; divisor: Int64; remainder: Int64; var ust: Int64; msc: IntPtr; sbc: IntPtr): UInt32;
    external 'opengl32.dll' name 'wglWaitForMscOML';
    public static z_WaitForMscOML_ovr17 := _z_WaitForMscOML_ovr17;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function WaitForMscOML(hdc: GDI_DC; target_msc: Int64; divisor: Int64; remainder: Int64; var ust: Int64; msc: IntPtr; sbc: IntPtr): UInt32 := z_WaitForMscOML_ovr17(hdc, target_msc, divisor, remainder, ust, msc, sbc);
    private static function _z_WaitForMscOML_ovr18(hdc: GDI_DC; target_msc: Int64; divisor: Int64; remainder: Int64; ust: IntPtr; [MarshalAs(UnmanagedType.LPArray)] msc: array of Int64; [MarshalAs(UnmanagedType.LPArray)] sbc: array of Int64): UInt32;
    external 'opengl32.dll' name 'wglWaitForMscOML';
    public static z_WaitForMscOML_ovr18 := _z_WaitForMscOML_ovr18;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function WaitForMscOML(hdc: GDI_DC; target_msc: Int64; divisor: Int64; remainder: Int64; ust: IntPtr; msc: array of Int64; sbc: array of Int64): UInt32 := z_WaitForMscOML_ovr18(hdc, target_msc, divisor, remainder, ust, msc, sbc);
    private static function _z_WaitForMscOML_ovr19(hdc: GDI_DC; target_msc: Int64; divisor: Int64; remainder: Int64; ust: IntPtr; [MarshalAs(UnmanagedType.LPArray)] msc: array of Int64; var sbc: Int64): UInt32;
    external 'opengl32.dll' name 'wglWaitForMscOML';
    public static z_WaitForMscOML_ovr19 := _z_WaitForMscOML_ovr19;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function WaitForMscOML(hdc: GDI_DC; target_msc: Int64; divisor: Int64; remainder: Int64; ust: IntPtr; msc: array of Int64; var sbc: Int64): UInt32 := z_WaitForMscOML_ovr19(hdc, target_msc, divisor, remainder, ust, msc, sbc);
    private static function _z_WaitForMscOML_ovr20(hdc: GDI_DC; target_msc: Int64; divisor: Int64; remainder: Int64; ust: IntPtr; [MarshalAs(UnmanagedType.LPArray)] msc: array of Int64; sbc: IntPtr): UInt32;
    external 'opengl32.dll' name 'wglWaitForMscOML';
    public static z_WaitForMscOML_ovr20 := _z_WaitForMscOML_ovr20;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function WaitForMscOML(hdc: GDI_DC; target_msc: Int64; divisor: Int64; remainder: Int64; ust: IntPtr; msc: array of Int64; sbc: IntPtr): UInt32 := z_WaitForMscOML_ovr20(hdc, target_msc, divisor, remainder, ust, msc, sbc);
    private static function _z_WaitForMscOML_ovr21(hdc: GDI_DC; target_msc: Int64; divisor: Int64; remainder: Int64; ust: IntPtr; var msc: Int64; [MarshalAs(UnmanagedType.LPArray)] sbc: array of Int64): UInt32;
    external 'opengl32.dll' name 'wglWaitForMscOML';
    public static z_WaitForMscOML_ovr21 := _z_WaitForMscOML_ovr21;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function WaitForMscOML(hdc: GDI_DC; target_msc: Int64; divisor: Int64; remainder: Int64; ust: IntPtr; var msc: Int64; sbc: array of Int64): UInt32 := z_WaitForMscOML_ovr21(hdc, target_msc, divisor, remainder, ust, msc, sbc);
    private static function _z_WaitForMscOML_ovr22(hdc: GDI_DC; target_msc: Int64; divisor: Int64; remainder: Int64; ust: IntPtr; var msc: Int64; var sbc: Int64): UInt32;
    external 'opengl32.dll' name 'wglWaitForMscOML';
    public static z_WaitForMscOML_ovr22 := _z_WaitForMscOML_ovr22;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function WaitForMscOML(hdc: GDI_DC; target_msc: Int64; divisor: Int64; remainder: Int64; ust: IntPtr; var msc: Int64; var sbc: Int64): UInt32 := z_WaitForMscOML_ovr22(hdc, target_msc, divisor, remainder, ust, msc, sbc);
    private static function _z_WaitForMscOML_ovr23(hdc: GDI_DC; target_msc: Int64; divisor: Int64; remainder: Int64; ust: IntPtr; var msc: Int64; sbc: IntPtr): UInt32;
    external 'opengl32.dll' name 'wglWaitForMscOML';
    public static z_WaitForMscOML_ovr23 := _z_WaitForMscOML_ovr23;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function WaitForMscOML(hdc: GDI_DC; target_msc: Int64; divisor: Int64; remainder: Int64; ust: IntPtr; var msc: Int64; sbc: IntPtr): UInt32 := z_WaitForMscOML_ovr23(hdc, target_msc, divisor, remainder, ust, msc, sbc);
    private static function _z_WaitForMscOML_ovr24(hdc: GDI_DC; target_msc: Int64; divisor: Int64; remainder: Int64; ust: IntPtr; msc: IntPtr; [MarshalAs(UnmanagedType.LPArray)] sbc: array of Int64): UInt32;
    external 'opengl32.dll' name 'wglWaitForMscOML';
    public static z_WaitForMscOML_ovr24 := _z_WaitForMscOML_ovr24;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function WaitForMscOML(hdc: GDI_DC; target_msc: Int64; divisor: Int64; remainder: Int64; ust: IntPtr; msc: IntPtr; sbc: array of Int64): UInt32 := z_WaitForMscOML_ovr24(hdc, target_msc, divisor, remainder, ust, msc, sbc);
    private static function _z_WaitForMscOML_ovr25(hdc: GDI_DC; target_msc: Int64; divisor: Int64; remainder: Int64; ust: IntPtr; msc: IntPtr; var sbc: Int64): UInt32;
    external 'opengl32.dll' name 'wglWaitForMscOML';
    public static z_WaitForMscOML_ovr25 := _z_WaitForMscOML_ovr25;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function WaitForMscOML(hdc: GDI_DC; target_msc: Int64; divisor: Int64; remainder: Int64; ust: IntPtr; msc: IntPtr; var sbc: Int64): UInt32 := z_WaitForMscOML_ovr25(hdc, target_msc, divisor, remainder, ust, msc, sbc);
    private static function _z_WaitForMscOML_ovr26(hdc: GDI_DC; target_msc: Int64; divisor: Int64; remainder: Int64; ust: IntPtr; msc: IntPtr; sbc: IntPtr): UInt32;
    external 'opengl32.dll' name 'wglWaitForMscOML';
    public static z_WaitForMscOML_ovr26 := _z_WaitForMscOML_ovr26;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function WaitForMscOML(hdc: GDI_DC; target_msc: Int64; divisor: Int64; remainder: Int64; ust: IntPtr; msc: IntPtr; sbc: IntPtr): UInt32 := z_WaitForMscOML_ovr26(hdc, target_msc, divisor, remainder, ust, msc, sbc);
    
    private static function _z_WaitForSbcOML_ovr0(hdc: GDI_DC; target_sbc: Int64; [MarshalAs(UnmanagedType.LPArray)] ust: array of Int64; [MarshalAs(UnmanagedType.LPArray)] msc: array of Int64; [MarshalAs(UnmanagedType.LPArray)] sbc: array of Int64): UInt32;
    external 'opengl32.dll' name 'wglWaitForSbcOML';
    public static z_WaitForSbcOML_ovr0 := _z_WaitForSbcOML_ovr0;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function WaitForSbcOML(hdc: GDI_DC; target_sbc: Int64; ust: array of Int64; msc: array of Int64; sbc: array of Int64): UInt32 := z_WaitForSbcOML_ovr0(hdc, target_sbc, ust, msc, sbc);
    private static function _z_WaitForSbcOML_ovr1(hdc: GDI_DC; target_sbc: Int64; [MarshalAs(UnmanagedType.LPArray)] ust: array of Int64; [MarshalAs(UnmanagedType.LPArray)] msc: array of Int64; var sbc: Int64): UInt32;
    external 'opengl32.dll' name 'wglWaitForSbcOML';
    public static z_WaitForSbcOML_ovr1 := _z_WaitForSbcOML_ovr1;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function WaitForSbcOML(hdc: GDI_DC; target_sbc: Int64; ust: array of Int64; msc: array of Int64; var sbc: Int64): UInt32 := z_WaitForSbcOML_ovr1(hdc, target_sbc, ust, msc, sbc);
    private static function _z_WaitForSbcOML_ovr2(hdc: GDI_DC; target_sbc: Int64; [MarshalAs(UnmanagedType.LPArray)] ust: array of Int64; [MarshalAs(UnmanagedType.LPArray)] msc: array of Int64; sbc: IntPtr): UInt32;
    external 'opengl32.dll' name 'wglWaitForSbcOML';
    public static z_WaitForSbcOML_ovr2 := _z_WaitForSbcOML_ovr2;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function WaitForSbcOML(hdc: GDI_DC; target_sbc: Int64; ust: array of Int64; msc: array of Int64; sbc: IntPtr): UInt32 := z_WaitForSbcOML_ovr2(hdc, target_sbc, ust, msc, sbc);
    private static function _z_WaitForSbcOML_ovr3(hdc: GDI_DC; target_sbc: Int64; [MarshalAs(UnmanagedType.LPArray)] ust: array of Int64; var msc: Int64; [MarshalAs(UnmanagedType.LPArray)] sbc: array of Int64): UInt32;
    external 'opengl32.dll' name 'wglWaitForSbcOML';
    public static z_WaitForSbcOML_ovr3 := _z_WaitForSbcOML_ovr3;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function WaitForSbcOML(hdc: GDI_DC; target_sbc: Int64; ust: array of Int64; var msc: Int64; sbc: array of Int64): UInt32 := z_WaitForSbcOML_ovr3(hdc, target_sbc, ust, msc, sbc);
    private static function _z_WaitForSbcOML_ovr4(hdc: GDI_DC; target_sbc: Int64; [MarshalAs(UnmanagedType.LPArray)] ust: array of Int64; var msc: Int64; var sbc: Int64): UInt32;
    external 'opengl32.dll' name 'wglWaitForSbcOML';
    public static z_WaitForSbcOML_ovr4 := _z_WaitForSbcOML_ovr4;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function WaitForSbcOML(hdc: GDI_DC; target_sbc: Int64; ust: array of Int64; var msc: Int64; var sbc: Int64): UInt32 := z_WaitForSbcOML_ovr4(hdc, target_sbc, ust, msc, sbc);
    private static function _z_WaitForSbcOML_ovr5(hdc: GDI_DC; target_sbc: Int64; [MarshalAs(UnmanagedType.LPArray)] ust: array of Int64; var msc: Int64; sbc: IntPtr): UInt32;
    external 'opengl32.dll' name 'wglWaitForSbcOML';
    public static z_WaitForSbcOML_ovr5 := _z_WaitForSbcOML_ovr5;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function WaitForSbcOML(hdc: GDI_DC; target_sbc: Int64; ust: array of Int64; var msc: Int64; sbc: IntPtr): UInt32 := z_WaitForSbcOML_ovr5(hdc, target_sbc, ust, msc, sbc);
    private static function _z_WaitForSbcOML_ovr6(hdc: GDI_DC; target_sbc: Int64; [MarshalAs(UnmanagedType.LPArray)] ust: array of Int64; msc: IntPtr; [MarshalAs(UnmanagedType.LPArray)] sbc: array of Int64): UInt32;
    external 'opengl32.dll' name 'wglWaitForSbcOML';
    public static z_WaitForSbcOML_ovr6 := _z_WaitForSbcOML_ovr6;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function WaitForSbcOML(hdc: GDI_DC; target_sbc: Int64; ust: array of Int64; msc: IntPtr; sbc: array of Int64): UInt32 := z_WaitForSbcOML_ovr6(hdc, target_sbc, ust, msc, sbc);
    private static function _z_WaitForSbcOML_ovr7(hdc: GDI_DC; target_sbc: Int64; [MarshalAs(UnmanagedType.LPArray)] ust: array of Int64; msc: IntPtr; var sbc: Int64): UInt32;
    external 'opengl32.dll' name 'wglWaitForSbcOML';
    public static z_WaitForSbcOML_ovr7 := _z_WaitForSbcOML_ovr7;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function WaitForSbcOML(hdc: GDI_DC; target_sbc: Int64; ust: array of Int64; msc: IntPtr; var sbc: Int64): UInt32 := z_WaitForSbcOML_ovr7(hdc, target_sbc, ust, msc, sbc);
    private static function _z_WaitForSbcOML_ovr8(hdc: GDI_DC; target_sbc: Int64; [MarshalAs(UnmanagedType.LPArray)] ust: array of Int64; msc: IntPtr; sbc: IntPtr): UInt32;
    external 'opengl32.dll' name 'wglWaitForSbcOML';
    public static z_WaitForSbcOML_ovr8 := _z_WaitForSbcOML_ovr8;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function WaitForSbcOML(hdc: GDI_DC; target_sbc: Int64; ust: array of Int64; msc: IntPtr; sbc: IntPtr): UInt32 := z_WaitForSbcOML_ovr8(hdc, target_sbc, ust, msc, sbc);
    private static function _z_WaitForSbcOML_ovr9(hdc: GDI_DC; target_sbc: Int64; var ust: Int64; [MarshalAs(UnmanagedType.LPArray)] msc: array of Int64; [MarshalAs(UnmanagedType.LPArray)] sbc: array of Int64): UInt32;
    external 'opengl32.dll' name 'wglWaitForSbcOML';
    public static z_WaitForSbcOML_ovr9 := _z_WaitForSbcOML_ovr9;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function WaitForSbcOML(hdc: GDI_DC; target_sbc: Int64; var ust: Int64; msc: array of Int64; sbc: array of Int64): UInt32 := z_WaitForSbcOML_ovr9(hdc, target_sbc, ust, msc, sbc);
    private static function _z_WaitForSbcOML_ovr10(hdc: GDI_DC; target_sbc: Int64; var ust: Int64; [MarshalAs(UnmanagedType.LPArray)] msc: array of Int64; var sbc: Int64): UInt32;
    external 'opengl32.dll' name 'wglWaitForSbcOML';
    public static z_WaitForSbcOML_ovr10 := _z_WaitForSbcOML_ovr10;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function WaitForSbcOML(hdc: GDI_DC; target_sbc: Int64; var ust: Int64; msc: array of Int64; var sbc: Int64): UInt32 := z_WaitForSbcOML_ovr10(hdc, target_sbc, ust, msc, sbc);
    private static function _z_WaitForSbcOML_ovr11(hdc: GDI_DC; target_sbc: Int64; var ust: Int64; [MarshalAs(UnmanagedType.LPArray)] msc: array of Int64; sbc: IntPtr): UInt32;
    external 'opengl32.dll' name 'wglWaitForSbcOML';
    public static z_WaitForSbcOML_ovr11 := _z_WaitForSbcOML_ovr11;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function WaitForSbcOML(hdc: GDI_DC; target_sbc: Int64; var ust: Int64; msc: array of Int64; sbc: IntPtr): UInt32 := z_WaitForSbcOML_ovr11(hdc, target_sbc, ust, msc, sbc);
    private static function _z_WaitForSbcOML_ovr12(hdc: GDI_DC; target_sbc: Int64; var ust: Int64; var msc: Int64; [MarshalAs(UnmanagedType.LPArray)] sbc: array of Int64): UInt32;
    external 'opengl32.dll' name 'wglWaitForSbcOML';
    public static z_WaitForSbcOML_ovr12 := _z_WaitForSbcOML_ovr12;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function WaitForSbcOML(hdc: GDI_DC; target_sbc: Int64; var ust: Int64; var msc: Int64; sbc: array of Int64): UInt32 := z_WaitForSbcOML_ovr12(hdc, target_sbc, ust, msc, sbc);
    private static function _z_WaitForSbcOML_ovr13(hdc: GDI_DC; target_sbc: Int64; var ust: Int64; var msc: Int64; var sbc: Int64): UInt32;
    external 'opengl32.dll' name 'wglWaitForSbcOML';
    public static z_WaitForSbcOML_ovr13 := _z_WaitForSbcOML_ovr13;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function WaitForSbcOML(hdc: GDI_DC; target_sbc: Int64; var ust: Int64; var msc: Int64; var sbc: Int64): UInt32 := z_WaitForSbcOML_ovr13(hdc, target_sbc, ust, msc, sbc);
    private static function _z_WaitForSbcOML_ovr14(hdc: GDI_DC; target_sbc: Int64; var ust: Int64; var msc: Int64; sbc: IntPtr): UInt32;
    external 'opengl32.dll' name 'wglWaitForSbcOML';
    public static z_WaitForSbcOML_ovr14 := _z_WaitForSbcOML_ovr14;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function WaitForSbcOML(hdc: GDI_DC; target_sbc: Int64; var ust: Int64; var msc: Int64; sbc: IntPtr): UInt32 := z_WaitForSbcOML_ovr14(hdc, target_sbc, ust, msc, sbc);
    private static function _z_WaitForSbcOML_ovr15(hdc: GDI_DC; target_sbc: Int64; var ust: Int64; msc: IntPtr; [MarshalAs(UnmanagedType.LPArray)] sbc: array of Int64): UInt32;
    external 'opengl32.dll' name 'wglWaitForSbcOML';
    public static z_WaitForSbcOML_ovr15 := _z_WaitForSbcOML_ovr15;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function WaitForSbcOML(hdc: GDI_DC; target_sbc: Int64; var ust: Int64; msc: IntPtr; sbc: array of Int64): UInt32 := z_WaitForSbcOML_ovr15(hdc, target_sbc, ust, msc, sbc);
    private static function _z_WaitForSbcOML_ovr16(hdc: GDI_DC; target_sbc: Int64; var ust: Int64; msc: IntPtr; var sbc: Int64): UInt32;
    external 'opengl32.dll' name 'wglWaitForSbcOML';
    public static z_WaitForSbcOML_ovr16 := _z_WaitForSbcOML_ovr16;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function WaitForSbcOML(hdc: GDI_DC; target_sbc: Int64; var ust: Int64; msc: IntPtr; var sbc: Int64): UInt32 := z_WaitForSbcOML_ovr16(hdc, target_sbc, ust, msc, sbc);
    private static function _z_WaitForSbcOML_ovr17(hdc: GDI_DC; target_sbc: Int64; var ust: Int64; msc: IntPtr; sbc: IntPtr): UInt32;
    external 'opengl32.dll' name 'wglWaitForSbcOML';
    public static z_WaitForSbcOML_ovr17 := _z_WaitForSbcOML_ovr17;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function WaitForSbcOML(hdc: GDI_DC; target_sbc: Int64; var ust: Int64; msc: IntPtr; sbc: IntPtr): UInt32 := z_WaitForSbcOML_ovr17(hdc, target_sbc, ust, msc, sbc);
    private static function _z_WaitForSbcOML_ovr18(hdc: GDI_DC; target_sbc: Int64; ust: IntPtr; [MarshalAs(UnmanagedType.LPArray)] msc: array of Int64; [MarshalAs(UnmanagedType.LPArray)] sbc: array of Int64): UInt32;
    external 'opengl32.dll' name 'wglWaitForSbcOML';
    public static z_WaitForSbcOML_ovr18 := _z_WaitForSbcOML_ovr18;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function WaitForSbcOML(hdc: GDI_DC; target_sbc: Int64; ust: IntPtr; msc: array of Int64; sbc: array of Int64): UInt32 := z_WaitForSbcOML_ovr18(hdc, target_sbc, ust, msc, sbc);
    private static function _z_WaitForSbcOML_ovr19(hdc: GDI_DC; target_sbc: Int64; ust: IntPtr; [MarshalAs(UnmanagedType.LPArray)] msc: array of Int64; var sbc: Int64): UInt32;
    external 'opengl32.dll' name 'wglWaitForSbcOML';
    public static z_WaitForSbcOML_ovr19 := _z_WaitForSbcOML_ovr19;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function WaitForSbcOML(hdc: GDI_DC; target_sbc: Int64; ust: IntPtr; msc: array of Int64; var sbc: Int64): UInt32 := z_WaitForSbcOML_ovr19(hdc, target_sbc, ust, msc, sbc);
    private static function _z_WaitForSbcOML_ovr20(hdc: GDI_DC; target_sbc: Int64; ust: IntPtr; [MarshalAs(UnmanagedType.LPArray)] msc: array of Int64; sbc: IntPtr): UInt32;
    external 'opengl32.dll' name 'wglWaitForSbcOML';
    public static z_WaitForSbcOML_ovr20 := _z_WaitForSbcOML_ovr20;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function WaitForSbcOML(hdc: GDI_DC; target_sbc: Int64; ust: IntPtr; msc: array of Int64; sbc: IntPtr): UInt32 := z_WaitForSbcOML_ovr20(hdc, target_sbc, ust, msc, sbc);
    private static function _z_WaitForSbcOML_ovr21(hdc: GDI_DC; target_sbc: Int64; ust: IntPtr; var msc: Int64; [MarshalAs(UnmanagedType.LPArray)] sbc: array of Int64): UInt32;
    external 'opengl32.dll' name 'wglWaitForSbcOML';
    public static z_WaitForSbcOML_ovr21 := _z_WaitForSbcOML_ovr21;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function WaitForSbcOML(hdc: GDI_DC; target_sbc: Int64; ust: IntPtr; var msc: Int64; sbc: array of Int64): UInt32 := z_WaitForSbcOML_ovr21(hdc, target_sbc, ust, msc, sbc);
    private static function _z_WaitForSbcOML_ovr22(hdc: GDI_DC; target_sbc: Int64; ust: IntPtr; var msc: Int64; var sbc: Int64): UInt32;
    external 'opengl32.dll' name 'wglWaitForSbcOML';
    public static z_WaitForSbcOML_ovr22 := _z_WaitForSbcOML_ovr22;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function WaitForSbcOML(hdc: GDI_DC; target_sbc: Int64; ust: IntPtr; var msc: Int64; var sbc: Int64): UInt32 := z_WaitForSbcOML_ovr22(hdc, target_sbc, ust, msc, sbc);
    private static function _z_WaitForSbcOML_ovr23(hdc: GDI_DC; target_sbc: Int64; ust: IntPtr; var msc: Int64; sbc: IntPtr): UInt32;
    external 'opengl32.dll' name 'wglWaitForSbcOML';
    public static z_WaitForSbcOML_ovr23 := _z_WaitForSbcOML_ovr23;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function WaitForSbcOML(hdc: GDI_DC; target_sbc: Int64; ust: IntPtr; var msc: Int64; sbc: IntPtr): UInt32 := z_WaitForSbcOML_ovr23(hdc, target_sbc, ust, msc, sbc);
    private static function _z_WaitForSbcOML_ovr24(hdc: GDI_DC; target_sbc: Int64; ust: IntPtr; msc: IntPtr; [MarshalAs(UnmanagedType.LPArray)] sbc: array of Int64): UInt32;
    external 'opengl32.dll' name 'wglWaitForSbcOML';
    public static z_WaitForSbcOML_ovr24 := _z_WaitForSbcOML_ovr24;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function WaitForSbcOML(hdc: GDI_DC; target_sbc: Int64; ust: IntPtr; msc: IntPtr; sbc: array of Int64): UInt32 := z_WaitForSbcOML_ovr24(hdc, target_sbc, ust, msc, sbc);
    private static function _z_WaitForSbcOML_ovr25(hdc: GDI_DC; target_sbc: Int64; ust: IntPtr; msc: IntPtr; var sbc: Int64): UInt32;
    external 'opengl32.dll' name 'wglWaitForSbcOML';
    public static z_WaitForSbcOML_ovr25 := _z_WaitForSbcOML_ovr25;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function WaitForSbcOML(hdc: GDI_DC; target_sbc: Int64; ust: IntPtr; msc: IntPtr; var sbc: Int64): UInt32 := z_WaitForSbcOML_ovr25(hdc, target_sbc, ust, msc, sbc);
    private static function _z_WaitForSbcOML_ovr26(hdc: GDI_DC; target_sbc: Int64; ust: IntPtr; msc: IntPtr; sbc: IntPtr): UInt32;
    external 'opengl32.dll' name 'wglWaitForSbcOML';
    public static z_WaitForSbcOML_ovr26 := _z_WaitForSbcOML_ovr26;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function WaitForSbcOML(hdc: GDI_DC; target_sbc: Int64; ust: IntPtr; msc: IntPtr; sbc: IntPtr): UInt32 := z_WaitForSbcOML_ovr26(hdc, target_sbc, ust, msc, sbc);
    
  end;
  
  {endregion Extensions}
  
  
  