


# GetData!AutoSize
!ResultType
IntPtr
!Enqueue
var res := Marshal.AllocHGlobal(IntPtr(pointer(o.Size))); !set_res!(res);
//TODO А что если результат уже получен и освобождёт сдедующей .ThenConvert
// - Вообще .WhenError тут (и в +1 месте) - говнокод
tsk.WhenErrorBase((tsk,err)->Marshal.FreeHGlobal(res));
cl.EnqueueReadBuffer(
  cq, o.Native, Bool.NON_BLOCKING,
  UIntPtr.Zero, o.Size,
  res,
  !evs!
);

# GetData
mem_offset, len: CommandQueue<integer>
!ResultType
IntPtr
!Enqueue
var res := Marshal.AllocHGlobal(IntPtr(pointer(o.Size))); !set_res!(res);
tsk.WhenErrorBase((tsk,err)->Marshal.FreeHGlobal(res));
cl.EnqueueReadBuffer(
  cq, o.Native, Bool.NON_BLOCKING,
  new UIntPtr(!mem_offset!), new UIntPtr(!len!),
  res,
  !evs!
).RaiseIfError;



# GetValue
!ResultType
TRecord
!ShortDef
GetValue&<TRecord>(0);

# GetValue
mem_offset: CommandQueue<integer>
!ResultType
TRecord
!Enqueue
cl.EnqueueReadBuffer(
  cq, o.Native, Bool.NON_BLOCKING,
  new UIntPtr(!mem_offset!), new UIntPtr(Marshal.SizeOf&<TRecord>),
  new IntPtr(!res_ptr!),
  !evs!
).RaiseIfError;
!ForcePtrQr



# GetArray1!AutoSize
!ResultType
array of TRecord
!Enqueue
var len := o.Size64 div Marshal.SizeOf&<TRecord>;
var res := new TRecord[len]; !set_res!(res);
cl.EnqueueReadBuffer(
  cq, o.Native, Bool.BLOCKING,
  new UIntPtr(0), new UIntPtr(len * Marshal.SizeOf&<TRecord>),
  res[0],
  !evs!
).RaiseIfError;
!NeedThread

# GetArray[%rank:1,2,3%]
{%rank? len : len1,len2 : len1,len2,len3 %}: CommandQueue<integer>
!ResultType
array{%rank? : [,] : [,,] %} of TRecord
!Enqueue
var res := new TRecord[{%rank? !len! : !len1!,!len2! : !len1!,!len2!,!len3! %}]; !set_res!(res);
cl.EnqueueReadBuffer(
  cq, o.Native, Bool.BLOCKING,
  new UIntPtr(0), new UIntPtr({%rank? int64(!len!) : int64(!len1!)*!len2! : int64(!len1!)*!len2!*!len3! %} * Marshal.SizeOf&<TRecord>),
  res[{%rank? 0 : 0,0 : 0,0,0 %}],
  !evs!
).RaiseIfError;
!NeedThread


