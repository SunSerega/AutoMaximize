


{$region 1#Write&Read}

function CLArray<T>.WriteData(ptr: CommandQueue<IntPtr>): CLArray<T>;
begin
  Result := Context.Default.SyncInvoke(self.NewQueue.ThenWriteData(ptr));
end;

function CLArray<T>.WriteData(ptr: CommandQueue<IntPtr>; ind, len: CommandQueue<integer>): CLArray<T>;
begin
  Result := Context.Default.SyncInvoke(self.NewQueue.ThenWriteData(ptr, ind, len));
end;

function CLArray<T>.ReadData(ptr: CommandQueue<IntPtr>): CLArray<T>;
begin
  Result := Context.Default.SyncInvoke(self.NewQueue.ThenReadData(ptr));
end;

function CLArray<T>.ReadData(ptr: CommandQueue<IntPtr>; ind, len: CommandQueue<integer>): CLArray<T>;
begin
  Result := Context.Default.SyncInvoke(self.NewQueue.ThenReadData(ptr, ind, len));
end;

function CLArray<T>.WriteData(ptr: pointer): CLArray<T>;
begin
  Result := WriteData(IntPtr(ptr));
end;

function CLArray<T>.WriteData(ptr: pointer; ind, len: CommandQueue<integer>): CLArray<T>;
begin
  Result := WriteData(IntPtr(ptr), ind, len);
end;

function CLArray<T>.ReadData(ptr: pointer): CLArray<T>;
begin
  Result := ReadData(IntPtr(ptr));
end;

function CLArray<T>.ReadData(ptr: pointer; ind, len: CommandQueue<integer>): CLArray<T>;
begin
  Result := ReadData(IntPtr(ptr), ind, len);
end;

function CLArray<T>.WriteValue(val: &T; ind: CommandQueue<integer>): CLArray<T>;
begin
  Result := Context.Default.SyncInvoke(self.NewQueue.ThenWriteValue(val, ind));
end;

function CLArray<T>.WriteValue(val: CommandQueue<&T>; ind: CommandQueue<integer>): CLArray<T>;
begin
  Result := Context.Default.SyncInvoke(self.NewQueue.ThenWriteValue(val, ind));
end;

function CLArray<T>.WriteValue(val: NativeValue<&T>; ind: CommandQueue<integer>): CLArray<T>;
begin
  Result := Context.Default.SyncInvoke(self.NewQueue.ThenWriteValue(val, ind));
end;

function CLArray<T>.WriteValue(val: CommandQueue<NativeValue<&T>>; ind: CommandQueue<integer>): CLArray<T>;
begin
  Result := Context.Default.SyncInvoke(self.NewQueue.ThenWriteValue(val, ind));
end;

function CLArray<T>.ReadValue(val: NativeValue<&T>; ind: CommandQueue<integer>): CLArray<T>;
begin
  Result := Context.Default.SyncInvoke(self.NewQueue.ThenReadValue(val, ind));
end;

function CLArray<T>.ReadValue(val: CommandQueue<NativeValue<&T>>; ind: CommandQueue<integer>): CLArray<T>;
begin
  Result := Context.Default.SyncInvoke(self.NewQueue.ThenReadValue(val, ind));
end;

function CLArray<T>.WriteArray(a: CommandQueue<array of &T>): CLArray<T>;
begin
  Result := Context.Default.SyncInvoke(self.NewQueue.ThenWriteArray(a));
end;

function CLArray<T>.WriteArray(a: CommandQueue<array of &T>; ind, len, a_ind: CommandQueue<integer>): CLArray<T>;
begin
  Result := Context.Default.SyncInvoke(self.NewQueue.ThenWriteArray(a, ind, len, a_ind));
end;

function CLArray<T>.ReadArray(a: CommandQueue<array of &T>): CLArray<T>;
begin
  Result := Context.Default.SyncInvoke(self.NewQueue.ThenReadArray(a));
end;

function CLArray<T>.ReadArray(a: CommandQueue<array of &T>; ind, len, a_ind: CommandQueue<integer>): CLArray<T>;
begin
  Result := Context.Default.SyncInvoke(self.NewQueue.ThenReadArray(a, ind, len, a_ind));
end;

{$endregion 1#Write&Read}

{$region 2#Fill}

function CLArray<T>.FillData(ptr: CommandQueue<IntPtr>; pattern_len: CommandQueue<integer>): CLArray<T>;
begin
  Result := Context.Default.SyncInvoke(self.NewQueue.ThenFillData(ptr, pattern_len));
end;

function CLArray<T>.FillData(ptr: CommandQueue<IntPtr>; pattern_len, ind, len: CommandQueue<integer>): CLArray<T>;
begin
  Result := Context.Default.SyncInvoke(self.NewQueue.ThenFillData(ptr, pattern_len, ind, len));
end;

function CLArray<T>.FillData(ptr: pointer; pattern_len: CommandQueue<integer>): CLArray<T>;
begin
  Result := FillData(IntPtr(ptr), pattern_len);
end;

function CLArray<T>.FillData(ptr: pointer; pattern_len, ind, len: CommandQueue<integer>): CLArray<T>;
begin
  Result := FillData(IntPtr(ptr), pattern_len, ind, len);
end;

function CLArray<T>.FillValue(val: &T): CLArray<T>;
begin
  Result := Context.Default.SyncInvoke(self.NewQueue.ThenFillValue(val));
end;

function CLArray<T>.FillValue(val: CommandQueue<&T>): CLArray<T>;
begin
  Result := Context.Default.SyncInvoke(self.NewQueue.ThenFillValue(val));
end;

function CLArray<T>.FillValue(val: &T; ind, len: CommandQueue<integer>): CLArray<T>;
begin
  Result := Context.Default.SyncInvoke(self.NewQueue.ThenFillValue(val, ind, len));
end;

function CLArray<T>.FillValue(val: CommandQueue<&T>; ind, len: CommandQueue<integer>): CLArray<T>;
begin
  Result := Context.Default.SyncInvoke(self.NewQueue.ThenFillValue(val, ind, len));
end;

function CLArray<T>.FillArray(a: CommandQueue<array of &T>): CLArray<T>;
begin
  Result := Context.Default.SyncInvoke(self.NewQueue.ThenFillArray(a));
end;

function CLArray<T>.FillArray(a: CommandQueue<array of &T>; a_offset,pattern_len, ind,len: CommandQueue<integer>): CLArray<T>;
begin
  Result := Context.Default.SyncInvoke(self.NewQueue.ThenFillArray(a, a_offset, pattern_len, ind, len));
end;

{$endregion 2#Fill}

{$region 3#Copy}

function CLArray<T>.CopyTo(a: CommandQueue<CLArray<T>>): CLArray<T>;
begin
  Result := Context.Default.SyncInvoke(self.NewQueue.ThenCopyTo(a));
end;

function CLArray<T>.CopyTo(a: CommandQueue<CLArray<T>>; from_ind, to_ind, len: CommandQueue<integer>): CLArray<T>;
begin
  Result := Context.Default.SyncInvoke(self.NewQueue.ThenCopyTo(a, from_ind, to_ind, len));
end;

function CLArray<T>.CopyFrom(a: CommandQueue<CLArray<T>>): CLArray<T>;
begin
  Result := Context.Default.SyncInvoke(self.NewQueue.ThenCopyFrom(a));
end;

function CLArray<T>.CopyFrom(a: CommandQueue<CLArray<T>>; from_ind, to_ind, len: CommandQueue<integer>): CLArray<T>;
begin
  Result := Context.Default.SyncInvoke(self.NewQueue.ThenCopyFrom(a, from_ind, to_ind, len));
end;

{$endregion 3#Copy}


