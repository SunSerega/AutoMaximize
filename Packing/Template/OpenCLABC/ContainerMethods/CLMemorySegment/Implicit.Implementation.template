


{$region 1#Write&Read}

function CLMemorySegment.WriteValue<TRecord>(val: TRecord): CLMemorySegment; where TRecord: record;
begin
  Result := WriteValue(val, 0);
end;

function CLMemorySegment.WriteValue<TRecord>(val: CommandQueue<TRecord>): CLMemorySegment; where TRecord: record;
begin
  Result := WriteValue(val, 0);
end;

function CLMemorySegment.WriteValue<TRecord>(val: TRecord; mem_offset: CommandQueue<integer>): CLMemorySegment; where TRecord: record;
begin
  Result := Context.Default.SyncInvoke(self.NewQueue.ThenWriteValue&<TRecord>(val, mem_offset));
end;

function CLMemorySegment.WriteValue<TRecord>(val: CommandQueue<TRecord>; mem_offset: CommandQueue<integer>): CLMemorySegment; where TRecord: record;
begin
  Result := Context.Default.SyncInvoke(self.NewQueue.ThenWriteValue&<TRecord>(val, mem_offset));
end;

function CLMemorySegment.WriteArray1<TRecord>(a: array of TRecord): CLMemorySegment; where TRecord: record;
begin
  Result := WriteArray1(CQ(a));
end;

function CLMemorySegment.WriteArray2<TRecord>(a: array[,] of TRecord): CLMemorySegment; where TRecord: record;
begin
  Result := WriteArray2(CQ(a));
end;

function CLMemorySegment.WriteArray3<TRecord>(a: array[,,] of TRecord): CLMemorySegment; where TRecord: record;
begin
  Result := WriteArray3(CQ(a));
end;

function CLMemorySegment.ReadArray1<TRecord>(a: array of TRecord): CLMemorySegment; where TRecord: record;
begin
  Result := ReadArray1(CQ(a));
end;

function CLMemorySegment.ReadArray2<TRecord>(a: array[,] of TRecord): CLMemorySegment; where TRecord: record;
begin
  Result := ReadArray2(CQ(a));
end;

function CLMemorySegment.ReadArray3<TRecord>(a: array[,,] of TRecord): CLMemorySegment; where TRecord: record;
begin
  Result := ReadArray3(CQ(a));
end;

function CLMemorySegment.WriteArray1<TRecord>(a: array of TRecord; a_ind, el_count, mem_offset: CommandQueue<integer>): CLMemorySegment; where TRecord: record;
begin
  Result := WriteArray1(CQ(a), a_ind, el_count, mem_offset);
end;

function CLMemorySegment.WriteArray2<TRecord>(a: array[,] of TRecord; a_ind1,a_ind2, el_count, mem_offset: CommandQueue<integer>): CLMemorySegment; where TRecord: record;
begin
  Result := WriteArray2(CQ(a), a_ind1,a_ind2, el_count, mem_offset);
end;

function CLMemorySegment.WriteArray3<TRecord>(a: array[,,] of TRecord; a_ind1,a_ind2,a_ind3, el_count, mem_offset: CommandQueue<integer>): CLMemorySegment; where TRecord: record;
begin
  Result := WriteArray3(CQ(a), a_ind1,a_ind2,a_ind3, el_count, mem_offset);
end;

function CLMemorySegment.ReadArray1<TRecord>(a: array of TRecord; a_ind, el_count, mem_offset: CommandQueue<integer>): CLMemorySegment; where TRecord: record;
begin
  Result := ReadArray1(CQ(a), a_ind, el_count, mem_offset);
end;

function CLMemorySegment.ReadArray2<TRecord>(a: array[,] of TRecord; a_ind1,a_ind2, el_count, mem_offset: CommandQueue<integer>): CLMemorySegment; where TRecord: record;
begin
  Result := ReadArray2(CQ(a), a_ind1,a_ind2, el_count, mem_offset);
end;

function CLMemorySegment.ReadArray3<TRecord>(a: array[,,] of TRecord; a_ind1,a_ind2,a_ind3, el_count, mem_offset: CommandQueue<integer>): CLMemorySegment; where TRecord: record;
begin
  Result := ReadArray3(CQ(a), a_ind1,a_ind2,a_ind3, el_count, mem_offset);
end;

function CLMemorySegment.WriteArray1<TRecord>(a: CommandQueue<array of TRecord>): CLMemorySegment; where TRecord: record;
begin
  Result := Context.Default.SyncInvoke(self.NewQueue.ThenWriteArray1&<TRecord>(a));
end;

function CLMemorySegment.WriteArray2<TRecord>(a: CommandQueue<array[,] of TRecord>): CLMemorySegment; where TRecord: record;
begin
  Result := Context.Default.SyncInvoke(self.NewQueue.ThenWriteArray2&<TRecord>(a));
end;

function CLMemorySegment.WriteArray3<TRecord>(a: CommandQueue<array[,,] of TRecord>): CLMemorySegment; where TRecord: record;
begin
  Result := Context.Default.SyncInvoke(self.NewQueue.ThenWriteArray3&<TRecord>(a));
end;

function CLMemorySegment.ReadArray1<TRecord>(a: CommandQueue<array of TRecord>): CLMemorySegment; where TRecord: record;
begin
  Result := Context.Default.SyncInvoke(self.NewQueue.ThenReadArray1&<TRecord>(a));
end;

function CLMemorySegment.ReadArray2<TRecord>(a: CommandQueue<array[,] of TRecord>): CLMemorySegment; where TRecord: record;
begin
  Result := Context.Default.SyncInvoke(self.NewQueue.ThenReadArray2&<TRecord>(a));
end;

function CLMemorySegment.ReadArray3<TRecord>(a: CommandQueue<array[,,] of TRecord>): CLMemorySegment; where TRecord: record;
begin
  Result := Context.Default.SyncInvoke(self.NewQueue.ThenReadArray3&<TRecord>(a));
end;

function CLMemorySegment.WriteArray1<TRecord>(a: CommandQueue<array of TRecord>; a_ind, el_count, mem_offset: CommandQueue<integer>): CLMemorySegment; where TRecord: record;
begin
  Result := Context.Default.SyncInvoke(self.NewQueue.ThenWriteArray1&<TRecord>(a, a_ind, el_count, mem_offset));
end;

function CLMemorySegment.WriteArray2<TRecord>(a: CommandQueue<array[,] of TRecord>; a_ind1,a_ind2, el_count, mem_offset: CommandQueue<integer>): CLMemorySegment; where TRecord: record;
begin
  Result := Context.Default.SyncInvoke(self.NewQueue.ThenWriteArray2&<TRecord>(a, a_ind1, a_ind2, el_count, mem_offset));
end;

function CLMemorySegment.WriteArray3<TRecord>(a: CommandQueue<array[,,] of TRecord>; a_ind1,a_ind2,a_ind3, el_count, mem_offset: CommandQueue<integer>): CLMemorySegment; where TRecord: record;
begin
  Result := Context.Default.SyncInvoke(self.NewQueue.ThenWriteArray3&<TRecord>(a, a_ind1, a_ind2, a_ind3, el_count, mem_offset));
end;

function CLMemorySegment.ReadArray1<TRecord>(a: CommandQueue<array of TRecord>; a_ind, el_count, mem_offset: CommandQueue<integer>): CLMemorySegment; where TRecord: record;
begin
  Result := Context.Default.SyncInvoke(self.NewQueue.ThenReadArray1&<TRecord>(a, a_ind, el_count, mem_offset));
end;

function CLMemorySegment.ReadArray2<TRecord>(a: CommandQueue<array[,] of TRecord>; a_ind1,a_ind2, el_count, mem_offset: CommandQueue<integer>): CLMemorySegment; where TRecord: record;
begin
  Result := Context.Default.SyncInvoke(self.NewQueue.ThenReadArray2&<TRecord>(a, a_ind1, a_ind2, el_count, mem_offset));
end;

function CLMemorySegment.ReadArray3<TRecord>(a: CommandQueue<array[,,] of TRecord>; a_ind1,a_ind2,a_ind3, el_count, mem_offset: CommandQueue<integer>): CLMemorySegment; where TRecord: record;
begin
  Result := Context.Default.SyncInvoke(self.NewQueue.ThenReadArray3&<TRecord>(a, a_ind1, a_ind2, a_ind3, el_count, mem_offset));
end;

function CLMemorySegment.WriteArraySegment<TRecord>(a: ArraySegment<TRecord>; mem_offset: CommandQueue<integer>): CLMemorySegment; where TRecord: record;
begin
  Result := WriteArray1(CQ(a.Array), a.Offset, a.Count, mem_offset);
end;

function CLMemorySegment.ReadArraySegment<TRecord>(a: ArraySegment<TRecord>; mem_offset: CommandQueue<integer>): CLMemorySegment; where TRecord: record;
begin
  Result := ReadArray1(CQ(a.Array), a.Offset, a.Count, mem_offset);
end;

function CLMemorySegment.WriteData(ptr: CommandQueue<IntPtr>): CLMemorySegment;
begin
  Result := Context.Default.SyncInvoke(self.NewQueue.ThenWriteData(ptr));
end;

function CLMemorySegment.WriteData(ptr: CommandQueue<IntPtr>; mem_offset, len: CommandQueue<integer>): CLMemorySegment;
begin
  Result := Context.Default.SyncInvoke(self.NewQueue.ThenWriteData(ptr, mem_offset, len));
end;

function CLMemorySegment.ReadData(ptr: CommandQueue<IntPtr>): CLMemorySegment;
begin
  Result := Context.Default.SyncInvoke(self.NewQueue.ThenReadData(ptr));
end;

function CLMemorySegment.ReadData(ptr: CommandQueue<IntPtr>; mem_offset, len: CommandQueue<integer>): CLMemorySegment;
begin
  Result := Context.Default.SyncInvoke(self.NewQueue.ThenReadData(ptr, mem_offset, len));
end;

function CLMemorySegment.WriteData(ptr: pointer): CLMemorySegment;
begin
  Result := WriteData(IntPtr(ptr));
end;

function CLMemorySegment.WriteData(ptr: pointer; mem_offset, len: CommandQueue<integer>): CLMemorySegment;
begin
  Result := WriteData(IntPtr(ptr), mem_offset, len);
end;

function CLMemorySegment.ReadData(ptr: pointer): CLMemorySegment;
begin
  Result := ReadData(IntPtr(ptr));
end;

function CLMemorySegment.ReadData(ptr: pointer; mem_offset, len: CommandQueue<integer>): CLMemorySegment;
begin
  Result := ReadData(IntPtr(ptr), mem_offset, len);
end;

function CLMemorySegment.WriteNativeMemoryArea(native_data: NativeMemoryArea): CLMemorySegment;
begin
  Result := WriteNativeMemoryArea(CQ(native_data), 0);
end;

function CLMemorySegment.WriteNativeMemoryArea(native_data: NativeMemoryArea; mem_offset: CommandQueue<integer>): CLMemorySegment;
begin
  Result := WriteNativeMemoryArea(CQ(native_data), mem_offset);
end;

function CLMemorySegment.WriteNativeMemory(native_data: NativeMemory): CLMemorySegment;
begin
  Result := WriteNativeMemory(CQ(native_data), 0);
end;

function CLMemorySegment.WriteNativeMemory(native_data: NativeMemory; mem_offset: CommandQueue<integer>): CLMemorySegment;
begin
  Result := WriteNativeMemory(CQ(native_data), mem_offset);
end;

function CLMemorySegment.WriteNativeValueArea<TRecord>(native_data: NativeValueArea<TRecord>): CLMemorySegment; where TRecord: record;
begin
  Result := WriteNativeValueArea(CQ(native_data), 0);
end;

function CLMemorySegment.WriteNativeValueArea<TRecord>(native_data: NativeValueArea<TRecord>; mem_offset: CommandQueue<integer>): CLMemorySegment; where TRecord: record;
begin
  Result := WriteNativeValueArea(CQ(native_data), mem_offset);
end;

function CLMemorySegment.WriteNativeValue<TRecord>(native_data: NativeValue<TRecord>): CLMemorySegment; where TRecord: record;
begin
  Result := WriteNativeValue(CQ(native_data), 0);
end;

function CLMemorySegment.WriteNativeValue<TRecord>(native_data: NativeValue<TRecord>; mem_offset: CommandQueue<integer>): CLMemorySegment; where TRecord: record;
begin
  Result := WriteNativeValue(CQ(native_data), mem_offset);
end;

function CLMemorySegment.WriteNativeArrayArea<TRecord>(native_data: NativeArrayArea<TRecord>): CLMemorySegment; where TRecord: record;
begin
  Result := WriteNativeArrayArea(CQ(native_data), 0);
end;

function CLMemorySegment.WriteNativeArrayArea<TRecord>(native_data: NativeArrayArea<TRecord>; mem_offset: CommandQueue<integer>): CLMemorySegment; where TRecord: record;
begin
  Result := WriteNativeArrayArea(CQ(native_data), mem_offset);
end;

function CLMemorySegment.WriteNativeArray<TRecord>(native_data: NativeArray<TRecord>): CLMemorySegment; where TRecord: record;
begin
  Result := WriteNativeArray(CQ(native_data), 0);
end;

function CLMemorySegment.WriteNativeArray<TRecord>(native_data: NativeArray<TRecord>; mem_offset: CommandQueue<integer>): CLMemorySegment; where TRecord: record;
begin
  Result := WriteNativeArray(CQ(native_data), mem_offset);
end;

function CLMemorySegment.ReadNativeMemoryArea(native_data: NativeMemoryArea): CLMemorySegment;
begin
  Result := ReadNativeMemoryArea(CQ(native_data), 0);
end;

function CLMemorySegment.ReadNativeMemoryArea(native_data: NativeMemoryArea; mem_offset: CommandQueue<integer>): CLMemorySegment;
begin
  Result := ReadNativeMemoryArea(CQ(native_data), mem_offset);
end;

function CLMemorySegment.ReadNativeMemory(native_data: NativeMemory): CLMemorySegment;
begin
  Result := ReadNativeMemory(CQ(native_data), 0);
end;

function CLMemorySegment.ReadNativeMemory(native_data: NativeMemory; mem_offset: CommandQueue<integer>): CLMemorySegment;
begin
  Result := ReadNativeMemory(CQ(native_data), mem_offset);
end;

function CLMemorySegment.ReadNativeValueArea<TRecord>(native_data: NativeValueArea<TRecord>): CLMemorySegment; where TRecord: record;
begin
  Result := ReadNativeValueArea(CQ(native_data), 0);
end;

function CLMemorySegment.ReadNativeValueArea<TRecord>(native_data: NativeValueArea<TRecord>; mem_offset: CommandQueue<integer>): CLMemorySegment; where TRecord: record;
begin
  Result := ReadNativeValueArea(CQ(native_data), mem_offset);
end;

function CLMemorySegment.ReadNativeValue<TRecord>(native_data: NativeValue<TRecord>): CLMemorySegment; where TRecord: record;
begin
  Result := ReadNativeValue(CQ(native_data), 0);
end;

function CLMemorySegment.ReadNativeValue<TRecord>(native_data: NativeValue<TRecord>; mem_offset: CommandQueue<integer>): CLMemorySegment; where TRecord: record;
begin
  Result := ReadNativeValue(CQ(native_data), mem_offset);
end;

function CLMemorySegment.ReadNativeArrayArea<TRecord>(native_data: NativeArrayArea<TRecord>): CLMemorySegment; where TRecord: record;
begin
  Result := ReadNativeArrayArea(CQ(native_data), 0);
end;

function CLMemorySegment.ReadNativeArrayArea<TRecord>(native_data: NativeArrayArea<TRecord>; mem_offset: CommandQueue<integer>): CLMemorySegment; where TRecord: record;
begin
  Result := ReadNativeArrayArea(CQ(native_data), mem_offset);
end;

function CLMemorySegment.ReadNativeArray<TRecord>(native_data: NativeArray<TRecord>): CLMemorySegment; where TRecord: record;
begin
  Result := ReadNativeArray(CQ(native_data), 0);
end;

function CLMemorySegment.ReadNativeArray<TRecord>(native_data: NativeArray<TRecord>; mem_offset: CommandQueue<integer>): CLMemorySegment; where TRecord: record;
begin
  Result := ReadNativeArray(CQ(native_data), mem_offset);
end;

function CLMemorySegment.WriteNativeMemoryArea(native_data: CommandQueue<NativeMemoryArea>): CLMemorySegment;
begin
  Result := WriteNativeMemoryArea(native_data, 0);
end;

function CLMemorySegment.WriteNativeMemory(native_data: CommandQueue<NativeMemory>): CLMemorySegment;
begin
  Result := WriteNativeMemory(native_data, 0);
end;

function CLMemorySegment.WriteNativeValueArea<TRecord>(native_data: CommandQueue<NativeValueArea<TRecord>>): CLMemorySegment; where TRecord: record;
begin
  Result := WriteNativeValueArea(native_data, 0);
end;

function CLMemorySegment.WriteNativeValue<TRecord>(native_data: CommandQueue<NativeValue<TRecord>>): CLMemorySegment; where TRecord: record;
begin
  Result := WriteNativeValue(native_data, 0);
end;

function CLMemorySegment.WriteNativeArrayArea<TRecord>(native_data: CommandQueue<NativeArrayArea<TRecord>>): CLMemorySegment; where TRecord: record;
begin
  Result := WriteNativeArrayArea(native_data, 0);
end;

function CLMemorySegment.WriteNativeArray<TRecord>(native_data: CommandQueue<NativeArray<TRecord>>): CLMemorySegment; where TRecord: record;
begin
  Result := WriteNativeArray(native_data, 0);
end;

function CLMemorySegment.ReadNativeMemoryArea(native_data: CommandQueue<NativeMemoryArea>): CLMemorySegment;
begin
  Result := ReadNativeMemoryArea(native_data, 0);
end;

function CLMemorySegment.ReadNativeMemory(native_data: CommandQueue<NativeMemory>): CLMemorySegment;
begin
  Result := ReadNativeMemory(native_data, 0);
end;

function CLMemorySegment.ReadNativeValueArea<TRecord>(native_data: CommandQueue<NativeValueArea<TRecord>>): CLMemorySegment; where TRecord: record;
begin
  Result := ReadNativeValueArea(native_data, 0);
end;

function CLMemorySegment.ReadNativeValue<TRecord>(native_data: CommandQueue<NativeValue<TRecord>>): CLMemorySegment; where TRecord: record;
begin
  Result := ReadNativeValue(native_data, 0);
end;

function CLMemorySegment.ReadNativeArrayArea<TRecord>(native_data: CommandQueue<NativeArrayArea<TRecord>>): CLMemorySegment; where TRecord: record;
begin
  Result := ReadNativeArrayArea(native_data, 0);
end;

function CLMemorySegment.ReadNativeArray<TRecord>(native_data: CommandQueue<NativeArray<TRecord>>): CLMemorySegment; where TRecord: record;
begin
  Result := ReadNativeArray(native_data, 0);
end;

function CLMemorySegment.WriteNativeMemoryArea(native_data: CommandQueue<NativeMemoryArea>; mem_offset: CommandQueue<integer>): CLMemorySegment;
begin
  Result := Context.Default.SyncInvoke(self.NewQueue.ThenWriteNativeMemoryArea(native_data, mem_offset));
end;

function CLMemorySegment.WriteNativeMemory(native_data: CommandQueue<NativeMemory>; mem_offset: CommandQueue<integer>): CLMemorySegment;
begin
  Result := Context.Default.SyncInvoke(self.NewQueue.ThenWriteNativeMemory(native_data, mem_offset));
end;

function CLMemorySegment.WriteNativeValueArea<TRecord>(native_data: CommandQueue<NativeValueArea<TRecord>>; mem_offset: CommandQueue<integer>): CLMemorySegment; where TRecord: record;
begin
  Result := Context.Default.SyncInvoke(self.NewQueue.ThenWriteNativeValueArea&<TRecord>(native_data, mem_offset));
end;

function CLMemorySegment.WriteNativeValue<TRecord>(native_data: CommandQueue<NativeValue<TRecord>>; mem_offset: CommandQueue<integer>): CLMemorySegment; where TRecord: record;
begin
  Result := Context.Default.SyncInvoke(self.NewQueue.ThenWriteNativeValue&<TRecord>(native_data, mem_offset));
end;

function CLMemorySegment.WriteNativeArrayArea<TRecord>(native_data: CommandQueue<NativeArrayArea<TRecord>>; mem_offset: CommandQueue<integer>): CLMemorySegment; where TRecord: record;
begin
  Result := Context.Default.SyncInvoke(self.NewQueue.ThenWriteNativeArrayArea&<TRecord>(native_data, mem_offset));
end;

function CLMemorySegment.WriteNativeArray<TRecord>(native_data: CommandQueue<NativeArray<TRecord>>; mem_offset: CommandQueue<integer>): CLMemorySegment; where TRecord: record;
begin
  Result := Context.Default.SyncInvoke(self.NewQueue.ThenWriteNativeArray&<TRecord>(native_data, mem_offset));
end;

function CLMemorySegment.ReadNativeMemoryArea(native_data: CommandQueue<NativeMemoryArea>; mem_offset: CommandQueue<integer>): CLMemorySegment;
begin
  Result := Context.Default.SyncInvoke(self.NewQueue.ThenReadNativeMemoryArea(native_data, mem_offset));
end;

function CLMemorySegment.ReadNativeMemory(native_data: CommandQueue<NativeMemory>; mem_offset: CommandQueue<integer>): CLMemorySegment;
begin
  Result := Context.Default.SyncInvoke(self.NewQueue.ThenReadNativeMemory(native_data, mem_offset));
end;

function CLMemorySegment.ReadNativeValueArea<TRecord>(native_data: CommandQueue<NativeValueArea<TRecord>>; mem_offset: CommandQueue<integer>): CLMemorySegment; where TRecord: record;
begin
  Result := Context.Default.SyncInvoke(self.NewQueue.ThenReadNativeValueArea&<TRecord>(native_data, mem_offset));
end;

function CLMemorySegment.ReadNativeValue<TRecord>(native_data: CommandQueue<NativeValue<TRecord>>; mem_offset: CommandQueue<integer>): CLMemorySegment; where TRecord: record;
begin
  Result := Context.Default.SyncInvoke(self.NewQueue.ThenReadNativeValue&<TRecord>(native_data, mem_offset));
end;

function CLMemorySegment.ReadNativeArrayArea<TRecord>(native_data: CommandQueue<NativeArrayArea<TRecord>>; mem_offset: CommandQueue<integer>): CLMemorySegment; where TRecord: record;
begin
  Result := Context.Default.SyncInvoke(self.NewQueue.ThenReadNativeArrayArea&<TRecord>(native_data, mem_offset));
end;

function CLMemorySegment.ReadNativeArray<TRecord>(native_data: CommandQueue<NativeArray<TRecord>>; mem_offset: CommandQueue<integer>): CLMemorySegment; where TRecord: record;
begin
  Result := Context.Default.SyncInvoke(self.NewQueue.ThenReadNativeArray&<TRecord>(native_data, mem_offset));
end;

{$endregion 1#Write&Read}

{$region 2#Fill}

function CLMemorySegment.FillValue<TRecord>(val: TRecord): CLMemorySegment; where TRecord: record;
begin
  Result := Context.Default.SyncInvoke(self.NewQueue.ThenFillValue&<TRecord>(val));
end;

function CLMemorySegment.FillValue<TRecord>(val: CommandQueue<TRecord>): CLMemorySegment; where TRecord: record;
begin
  Result := Context.Default.SyncInvoke(self.NewQueue.ThenFillValue&<TRecord>(val));
end;

function CLMemorySegment.FillValue<TRecord>(val: TRecord; mem_offset, fill_byte_len: CommandQueue<integer>): CLMemorySegment; where TRecord: record;
begin
  Result := Context.Default.SyncInvoke(self.NewQueue.ThenFillValue&<TRecord>(val, mem_offset, fill_byte_len));
end;

function CLMemorySegment.FillValue<TRecord>(val: CommandQueue<TRecord>; mem_offset, fill_byte_len: CommandQueue<integer>): CLMemorySegment; where TRecord: record;
begin
  Result := Context.Default.SyncInvoke(self.NewQueue.ThenFillValue&<TRecord>(val, mem_offset, fill_byte_len));
end;

function CLMemorySegment.FillArray1<TRecord>(a: array of TRecord): CLMemorySegment; where TRecord: record;
begin
  Result := FillArray1(CQ(a));
end;

function CLMemorySegment.FillArray2<TRecord>(a: array[,] of TRecord): CLMemorySegment; where TRecord: record;
begin
  Result := FillArray2(CQ(a));
end;

function CLMemorySegment.FillArray3<TRecord>(a: array[,,] of TRecord): CLMemorySegment; where TRecord: record;
begin
  Result := FillArray3(CQ(a));
end;

function CLMemorySegment.FillArray1<TRecord>(a: array of TRecord; a_ind, pattern_byte_len, mem_offset, fill_byte_len: CommandQueue<integer>): CLMemorySegment; where TRecord: record;
begin
  Result := FillArray1(CQ(a), a_ind, pattern_byte_len, mem_offset, fill_byte_len);
end;

function CLMemorySegment.FillArray2<TRecord>(a: array[,] of TRecord; a_ind1,a_ind2, pattern_byte_len, mem_offset, fill_byte_len: CommandQueue<integer>): CLMemorySegment; where TRecord: record;
begin
  Result := FillArray2(CQ(a), a_ind1,a_ind2, pattern_byte_len, mem_offset, fill_byte_len);
end;

function CLMemorySegment.FillArray3<TRecord>(a: array[,,] of TRecord; a_ind1,a_ind2,a_ind3, pattern_byte_len, mem_offset, fill_byte_len: CommandQueue<integer>): CLMemorySegment; where TRecord: record;
begin
  Result := FillArray3(CQ(a), a_ind1,a_ind2,a_ind3, pattern_byte_len, mem_offset, fill_byte_len);
end;

function CLMemorySegment.FillArray1<TRecord>(a: CommandQueue<array of TRecord>): CLMemorySegment; where TRecord: record;
begin
  Result := Context.Default.SyncInvoke(self.NewQueue.ThenFillArray1&<TRecord>(a));
end;

function CLMemorySegment.FillArray2<TRecord>(a: CommandQueue<array[,] of TRecord>): CLMemorySegment; where TRecord: record;
begin
  Result := Context.Default.SyncInvoke(self.NewQueue.ThenFillArray2&<TRecord>(a));
end;

function CLMemorySegment.FillArray3<TRecord>(a: CommandQueue<array[,,] of TRecord>): CLMemorySegment; where TRecord: record;
begin
  Result := Context.Default.SyncInvoke(self.NewQueue.ThenFillArray3&<TRecord>(a));
end;

function CLMemorySegment.FillArray1<TRecord>(a: CommandQueue<array of TRecord>; a_ind, pattern_byte_len, mem_offset, fill_byte_len: CommandQueue<integer>): CLMemorySegment; where TRecord: record;
begin
  Result := Context.Default.SyncInvoke(self.NewQueue.ThenFillArray1&<TRecord>(a, a_ind, pattern_byte_len, mem_offset, fill_byte_len));
end;

function CLMemorySegment.FillArray2<TRecord>(a: CommandQueue<array[,] of TRecord>; a_ind1,a_ind2, pattern_byte_len, mem_offset, fill_byte_len: CommandQueue<integer>): CLMemorySegment; where TRecord: record;
begin
  Result := Context.Default.SyncInvoke(self.NewQueue.ThenFillArray2&<TRecord>(a, a_ind1, a_ind2, pattern_byte_len, mem_offset, fill_byte_len));
end;

function CLMemorySegment.FillArray3<TRecord>(a: CommandQueue<array[,,] of TRecord>; a_ind1,a_ind2,a_ind3, pattern_byte_len, mem_offset, fill_byte_len: CommandQueue<integer>): CLMemorySegment; where TRecord: record;
begin
  Result := Context.Default.SyncInvoke(self.NewQueue.ThenFillArray3&<TRecord>(a, a_ind1, a_ind2, a_ind3, pattern_byte_len, mem_offset, fill_byte_len));
end;

function CLMemorySegment.FillArraySegment<TRecord>(a: ArraySegment<TRecord>): CLMemorySegment; where TRecord: record;
begin
  Result := Context.Default.SyncInvoke(self.NewQueue.ThenFillArraySegment&<TRecord>(a));
end;

function CLMemorySegment.FillArraySegment<TRecord>(a: ArraySegment<TRecord>; mem_offset, fill_byte_len: CommandQueue<integer>): CLMemorySegment; where TRecord: record;
begin
  Result := Context.Default.SyncInvoke(self.NewQueue.ThenFillArraySegment&<TRecord>(a, mem_offset, fill_byte_len));
end;

function CLMemorySegment.FillData(ptr: CommandQueue<IntPtr>; pattern_byte_len: CommandQueue<integer>): CLMemorySegment;
begin
  Result := Context.Default.SyncInvoke(self.NewQueue.ThenFillData(ptr, pattern_byte_len));
end;

function CLMemorySegment.FillData(ptr: CommandQueue<IntPtr>; pattern_byte_len, mem_offset, fill_byte_len: CommandQueue<integer>): CLMemorySegment;
begin
  Result := Context.Default.SyncInvoke(self.NewQueue.ThenFillData(ptr, pattern_byte_len, mem_offset, fill_byte_len));
end;

function CLMemorySegment.FillData(ptr: pointer; pattern_byte_len: CommandQueue<integer>): CLMemorySegment;
begin
  Result := FillData(IntPtr(ptr), pattern_byte_len);
end;

function CLMemorySegment.FillData(ptr: pointer; pattern_byte_len, mem_offset, fill_byte_len: CommandQueue<integer>): CLMemorySegment;
begin
  Result := FillData(IntPtr(ptr), pattern_byte_len, mem_offset, fill_byte_len);
end;

function CLMemorySegment.FillNativeMemoryArea(native_data: NativeMemoryArea): CLMemorySegment;
begin
  Result := FillNativeMemoryArea(CQ(native_data));
end;

function CLMemorySegment.FillNativeMemoryArea(native_data: NativeMemoryArea; mem_offset, fill_byte_len: CommandQueue<integer>): CLMemorySegment;
begin
  Result := FillNativeMemoryArea(CQ(native_data),mem_offset,fill_byte_len);
end;

function CLMemorySegment.FillNativeMemory(native_data: NativeMemory): CLMemorySegment;
begin
  Result := FillNativeMemory(CQ(native_data));
end;

function CLMemorySegment.FillNativeMemory(native_data: NativeMemory; mem_offset, fill_byte_len: CommandQueue<integer>): CLMemorySegment;
begin
  Result := FillNativeMemory(CQ(native_data),mem_offset,fill_byte_len);
end;

function CLMemorySegment.FillNativeValueArea<TRecord>(native_data: NativeValueArea<TRecord>): CLMemorySegment; where TRecord: record;
begin
  Result := FillNativeValueArea(CQ(native_data));
end;

function CLMemorySegment.FillNativeValueArea<TRecord>(native_data: NativeValueArea<TRecord>; mem_offset, fill_byte_len: CommandQueue<integer>): CLMemorySegment; where TRecord: record;
begin
  Result := FillNativeValueArea(CQ(native_data),mem_offset,fill_byte_len);
end;

function CLMemorySegment.FillNativeValue<TRecord>(native_data: NativeValue<TRecord>): CLMemorySegment; where TRecord: record;
begin
  Result := FillNativeValue(CQ(native_data));
end;

function CLMemorySegment.FillNativeValue<TRecord>(native_data: NativeValue<TRecord>; mem_offset, fill_byte_len: CommandQueue<integer>): CLMemorySegment; where TRecord: record;
begin
  Result := FillNativeValue(CQ(native_data),mem_offset,fill_byte_len);
end;

function CLMemorySegment.FillNativeArrayArea<TRecord>(native_data: NativeArrayArea<TRecord>): CLMemorySegment; where TRecord: record;
begin
  Result := FillNativeArrayArea(CQ(native_data));
end;

function CLMemorySegment.FillNativeArrayArea<TRecord>(native_data: NativeArrayArea<TRecord>; mem_offset, fill_byte_len: CommandQueue<integer>): CLMemorySegment; where TRecord: record;
begin
  Result := FillNativeArrayArea(CQ(native_data),mem_offset,fill_byte_len);
end;

function CLMemorySegment.FillNativeArray<TRecord>(native_data: NativeArray<TRecord>): CLMemorySegment; where TRecord: record;
begin
  Result := FillNativeArray(CQ(native_data));
end;

function CLMemorySegment.FillNativeArray<TRecord>(native_data: NativeArray<TRecord>; mem_offset, fill_byte_len: CommandQueue<integer>): CLMemorySegment; where TRecord: record;
begin
  Result := FillNativeArray(CQ(native_data),mem_offset,fill_byte_len);
end;

function CLMemorySegment.FillNativeMemoryArea(native_data: CommandQueue<NativeMemoryArea>): CLMemorySegment;
begin
  Result := Context.Default.SyncInvoke(self.NewQueue.ThenFillNativeMemoryArea(native_data));
end;

function CLMemorySegment.FillNativeMemoryArea(native_data: CommandQueue<NativeMemoryArea>; mem_offset, fill_byte_len: CommandQueue<integer>): CLMemorySegment;
begin
  Result := Context.Default.SyncInvoke(self.NewQueue.ThenFillNativeMemoryArea(native_data, mem_offset, fill_byte_len));
end;

function CLMemorySegment.FillNativeMemory(native_data: CommandQueue<NativeMemory>): CLMemorySegment;
begin
  Result := Context.Default.SyncInvoke(self.NewQueue.ThenFillNativeMemory(native_data));
end;

function CLMemorySegment.FillNativeMemory(native_data: CommandQueue<NativeMemory>; mem_offset, fill_byte_len: CommandQueue<integer>): CLMemorySegment;
begin
  Result := Context.Default.SyncInvoke(self.NewQueue.ThenFillNativeMemory(native_data, mem_offset, fill_byte_len));
end;

function CLMemorySegment.FillNativeValueArea<TRecord>(native_data: CommandQueue<NativeValueArea<TRecord>>): CLMemorySegment; where TRecord: record;
begin
  Result := Context.Default.SyncInvoke(self.NewQueue.ThenFillNativeValueArea&<TRecord>(native_data));
end;

function CLMemorySegment.FillNativeValueArea<TRecord>(native_data: CommandQueue<NativeValueArea<TRecord>>; mem_offset, fill_byte_len: CommandQueue<integer>): CLMemorySegment; where TRecord: record;
begin
  Result := Context.Default.SyncInvoke(self.NewQueue.ThenFillNativeValueArea&<TRecord>(native_data, mem_offset, fill_byte_len));
end;

function CLMemorySegment.FillNativeValue<TRecord>(native_data: CommandQueue<NativeValue<TRecord>>): CLMemorySegment; where TRecord: record;
begin
  Result := Context.Default.SyncInvoke(self.NewQueue.ThenFillNativeValue&<TRecord>(native_data));
end;

function CLMemorySegment.FillNativeValue<TRecord>(native_data: CommandQueue<NativeValue<TRecord>>; mem_offset, fill_byte_len: CommandQueue<integer>): CLMemorySegment; where TRecord: record;
begin
  Result := Context.Default.SyncInvoke(self.NewQueue.ThenFillNativeValue&<TRecord>(native_data, mem_offset, fill_byte_len));
end;

function CLMemorySegment.FillNativeArrayArea<TRecord>(native_data: CommandQueue<NativeArrayArea<TRecord>>): CLMemorySegment; where TRecord: record;
begin
  Result := Context.Default.SyncInvoke(self.NewQueue.ThenFillNativeArrayArea&<TRecord>(native_data));
end;

function CLMemorySegment.FillNativeArrayArea<TRecord>(native_data: CommandQueue<NativeArrayArea<TRecord>>; mem_offset, fill_byte_len: CommandQueue<integer>): CLMemorySegment; where TRecord: record;
begin
  Result := Context.Default.SyncInvoke(self.NewQueue.ThenFillNativeArrayArea&<TRecord>(native_data, mem_offset, fill_byte_len));
end;

function CLMemorySegment.FillNativeArray<TRecord>(native_data: CommandQueue<NativeArray<TRecord>>): CLMemorySegment; where TRecord: record;
begin
  Result := Context.Default.SyncInvoke(self.NewQueue.ThenFillNativeArray&<TRecord>(native_data));
end;

function CLMemorySegment.FillNativeArray<TRecord>(native_data: CommandQueue<NativeArray<TRecord>>; mem_offset, fill_byte_len: CommandQueue<integer>): CLMemorySegment; where TRecord: record;
begin
  Result := Context.Default.SyncInvoke(self.NewQueue.ThenFillNativeArray&<TRecord>(native_data, mem_offset, fill_byte_len));
end;

{$endregion 2#Fill}

{$region 3#Copy}

function CLMemorySegment.CopyTo(mem: CommandQueue<CLMemorySegment>): CLMemorySegment;
begin
  Result := Context.Default.SyncInvoke(self.NewQueue.ThenCopyTo(mem));
end;

function CLMemorySegment.CopyTo(mem: CommandQueue<CLMemorySegment>; from_offset, to_offset, len: CommandQueue<integer>): CLMemorySegment;
begin
  Result := Context.Default.SyncInvoke(self.NewQueue.ThenCopyTo(mem, from_offset, to_offset, len));
end;

function CLMemorySegment.CopyFrom(mem: CommandQueue<CLMemorySegment>): CLMemorySegment;
begin
  Result := Context.Default.SyncInvoke(self.NewQueue.ThenCopyFrom(mem));
end;

function CLMemorySegment.CopyFrom(mem: CommandQueue<CLMemorySegment>; from_offset, to_offset, len: CommandQueue<integer>): CLMemorySegment;
begin
  Result := Context.Default.SyncInvoke(self.NewQueue.ThenCopyFrom(mem, from_offset, to_offset, len));
end;

{$endregion 3#Copy}


