


# FillData!AutoSize
ptr: CommandQueue<IntPtr>; pattern_len: CommandQueue<integer>
!Enqueue
cl.EnqueueFillBuffer(
  cq, o.ntv,
  !ptr!, new UIntPtr(!pattern_len!),
  UIntPtr.Zero, o.Size,
  !evs!
).RaiseIfError;

# FillData
ptr: CommandQueue<IntPtr>; pattern_len, buff_offset, len: CommandQueue<integer>
!Enqueue
cl.EnqueueFillBuffer(
  cq, o.ntv,
  !ptr!, new UIntPtr(!pattern_len!),
  new UIntPtr(!buff_offset!), new UIntPtr(!len!),
  !evs!
).RaiseIfError;



# FillValue[%auto sz: !AutoSize, %]
val: TRecord{%auto sz?:; buff_offset, len\: CommandQueue<integer>%}
!Enqueue
cl.EnqueueFillBuffer(
  cq, o.ntv,
  new IntPtr(!val:ptr!), new UIntPtr(Marshal.SizeOf&<TRecord>),
  {%auto sz? UIntPtr.Zero, o.Size : new UIntPtr(!buff_offset!), new UIntPtr(!len!) %},
  !evs!
).RaiseIfError;

# FillValue![%auto sz: AutoSize, %]Q
val: CommandQueue<TRecord>{%auto sz?:; buff_offset, len\: CommandQueue<integer>%}
!Enqueue
cl.EnqueueFillBuffer(
  cq, o.ntv,
  new IntPtr(!val:ptr!), new UIntPtr(Marshal.SizeOf&<TRecord>),
  {%auto sz? UIntPtr.Zero, o.Size : new UIntPtr(!buff_offset!), new UIntPtr(!len!) %},
  !evs!
).RaiseIfError;


