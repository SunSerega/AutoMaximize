


{$region Managed}

{$region Value}

type
  KernelArgPrivateSetterValue<T> = sealed class(KernelArgSetterTyped<T>)
  where T: record;
    
    public procedure ApplyImpl(k: cl_kernel; ind: UInt32); override :=
    OpenCLABCInternalException.RaiseIfError( cl.SetKernelArg(k, ind, new UIntPtr(Marshal.SizeOf&<T>), self.o) );
    
  end;
  KernelArgPrivateValue<T> = sealed class(KernelArgPrivate)
  where T: record;
    private data: KernelArgPrivateCommon<T>;
    
    static constructor := BlittableHelper.RaiseIfBad(typeof(T), $'%Err:Blittable:Source:KernelArgPrivate:Value%');
    
    public constructor(val: CommandQueue<T>) :=
    data := new KernelArgPrivateCommon<T>(val);
    
    protected procedure InitBeforeInvoke(g: CLTaskGlobalData; inited_hubs: HashSet<IMultiusableCommandQueueHub>); override :=
    data.q.InitBeforeInvoke(g, inited_hubs);
    
    protected function Invoke(inv: CLTaskBranchInvoker): ValueTuple<KernelArgSetter, EventList>; override :=
    data.Invoke(inv, o->new KernelArgPrivateSetterValue<T>(o), ()->new KernelArgPrivateSetterValue<T>);
    
    protected procedure ToStringImpl(sb: StringBuilder; tabs: integer; index: Dictionary<object,integer>; delayed: HashSet<CommandQueueBase>); override :=
    data.ToString(sb, tabs, index, delayed);
    
  end;
  
static function KernelArgPrivate.FromValue<T>(val: CommandQueue<T>): KernelArgPrivate; where T: record;
begin Result := new KernelArgPrivateValue<T>(val) end;

{$endregion Value}

{$region Array}

type
  KernelArgPrivateSetterArray<T> = sealed class(KernelArgSetterTyped<array of T>)
  where T: record;
    
    public procedure ApplyImpl(k: cl_kernel; ind: UInt32); override :=
    OpenCLABCInternalException.RaiseIfError( cl.SetKernelArg(k, ind, new UIntPtr(UInt32(self.o.Length)*uint64(Marshal.SizeOf&<T>)), self.o[0]) );
    
  end;
  KernelArgPrivateArray<T> = sealed class(KernelArgPrivate)
  where T: record;
    private data: KernelArgPrivateCommon<array of T>;
    
    static constructor := BlittableHelper.RaiseIfBad(typeof(T), $'%Err:Blittable:Source:KernelArgPrivate:Array%');
    
    public constructor(a: CommandQueue<array of T>) :=
    data := new KernelArgPrivateCommon<array of T>(a);
    
    protected procedure InitBeforeInvoke(g: CLTaskGlobalData; inited_hubs: HashSet<IMultiusableCommandQueueHub>); override :=
    data.q.InitBeforeInvoke(g, inited_hubs);
    
    protected function Invoke(inv: CLTaskBranchInvoker): ValueTuple<KernelArgSetter, EventList>; override :=
    data.Invoke(inv, o->new KernelArgPrivateSetterArray<T>(o), ()->new KernelArgPrivateSetterArray<T>);
    
    protected procedure ToStringImpl(sb: StringBuilder; tabs: integer; index: Dictionary<object,integer>; delayed: HashSet<CommandQueueBase>); override :=
    data.ToString(sb, tabs, index, delayed);
    
  end;
  
static function KernelArgPrivate.FromArray<T>(a: CommandQueue<array of T>): KernelArgPrivate; where T: record;
begin Result := new KernelArgPrivateArray<T>(a) end;

{$endregion Array}

{$region Array2}

type
  KernelArgPrivateSetterArray2<T> = sealed class(KernelArgSetterTyped<array[,] of T>)
  where T: record;
    
    public procedure ApplyImpl(k: cl_kernel; ind: UInt32); override :=
    OpenCLABCInternalException.RaiseIfError( cl.SetKernelArg(k, ind, new UIntPtr(UInt32(self.o.Length)*uint64(Marshal.SizeOf&<T>)), self.o[0,0]) );
    
  end;
  KernelArgPrivateArray2<T> = sealed class(KernelArgPrivate)
  where T: record;
    private data: KernelArgPrivateCommon<array[,] of T>;
    
    static constructor := BlittableHelper.RaiseIfBad(typeof(T), $'%Err:Blittable:Source:KernelArgPrivate:Array2%');
    
    public constructor(a: CommandQueue<array[,] of T>) :=
    data := new KernelArgPrivateCommon<array[,] of T>(a);
    
    protected procedure InitBeforeInvoke(g: CLTaskGlobalData; inited_hubs: HashSet<IMultiusableCommandQueueHub>); override :=
    data.q.InitBeforeInvoke(g, inited_hubs);
    
    protected function Invoke(inv: CLTaskBranchInvoker): ValueTuple<KernelArgSetter, EventList>; override :=
    data.Invoke(inv, o->new KernelArgPrivateSetterArray2<T>(o), ()->new KernelArgPrivateSetterArray2<T>);
    
    protected procedure ToStringImpl(sb: StringBuilder; tabs: integer; index: Dictionary<object,integer>; delayed: HashSet<CommandQueueBase>); override :=
    data.ToString(sb, tabs, index, delayed);
    
  end;
  
static function KernelArgPrivate.FromArray2<T>(a: CommandQueue<array[,] of T>): KernelArgPrivate; where T: record;
begin Result := new KernelArgPrivateArray2<T>(a) end;

{$endregion Array2}

{$region Array3}

type
  KernelArgPrivateSetterArray3<T> = sealed class(KernelArgSetterTyped<array[,,] of T>)
  where T: record;
    
    public procedure ApplyImpl(k: cl_kernel; ind: UInt32); override :=
    OpenCLABCInternalException.RaiseIfError( cl.SetKernelArg(k, ind, new UIntPtr(UInt32(self.o.Length)*uint64(Marshal.SizeOf&<T>)), self.o[0,0,0]) );
    
  end;
  KernelArgPrivateArray3<T> = sealed class(KernelArgPrivate)
  where T: record;
    private data: KernelArgPrivateCommon<array[,,] of T>;
    
    static constructor := BlittableHelper.RaiseIfBad(typeof(T), $'%Err:Blittable:Source:KernelArgPrivate:Array3%');
    
    public constructor(a: CommandQueue<array[,,] of T>) :=
    data := new KernelArgPrivateCommon<array[,,] of T>(a);
    
    protected procedure InitBeforeInvoke(g: CLTaskGlobalData; inited_hubs: HashSet<IMultiusableCommandQueueHub>); override :=
    data.q.InitBeforeInvoke(g, inited_hubs);
    
    protected function Invoke(inv: CLTaskBranchInvoker): ValueTuple<KernelArgSetter, EventList>; override :=
    data.Invoke(inv, o->new KernelArgPrivateSetterArray3<T>(o), ()->new KernelArgPrivateSetterArray3<T>);
    
    protected procedure ToStringImpl(sb: StringBuilder; tabs: integer; index: Dictionary<object,integer>; delayed: HashSet<CommandQueueBase>); override :=
    data.ToString(sb, tabs, index, delayed);
    
  end;
  
static function KernelArgPrivate.FromArray3<T>(a: CommandQueue<array[,,] of T>): KernelArgPrivate; where T: record;
begin Result := new KernelArgPrivateArray3<T>(a) end;

{$endregion Array3}

{$region ArraySegment}

type
  KernelArgPrivateSetterArraySegment<T> = sealed class(KernelArgSetterTyped<ArraySegment<T>>)
  where T: record;
    
    public procedure ApplyImpl(k: cl_kernel; ind: UInt32); override :=
    OpenCLABCInternalException.RaiseIfError( cl.SetKernelArg(k, ind, new UIntPtr(UInt32(self.o.Count)*uint64(Marshal.SizeOf&<T>)), self.o.Array[self.o.Offset]) );
    
  end;
  KernelArgPrivateArraySegment<T> = sealed class(KernelArgPrivate)
  where T: record;
    private data: KernelArgPrivateCommon<ArraySegment<T>>;
    
    static constructor := BlittableHelper.RaiseIfBad(typeof(T), $'%Err:Blittable:Source:KernelArgPrivate:ArraySegment%');
    
    public constructor(seg: CommandQueue<ArraySegment<T>>) :=
    data := new KernelArgPrivateCommon<ArraySegment<T>>(seg);
    
    protected procedure InitBeforeInvoke(g: CLTaskGlobalData; inited_hubs: HashSet<IMultiusableCommandQueueHub>); override :=
    data.q.InitBeforeInvoke(g, inited_hubs);
    
    protected function Invoke(inv: CLTaskBranchInvoker): ValueTuple<KernelArgSetter, EventList>; override :=
    data.Invoke(inv, o->new KernelArgPrivateSetterArraySegment<T>(o), ()->new KernelArgPrivateSetterArraySegment<T>);
    
    protected procedure ToStringImpl(sb: StringBuilder; tabs: integer; index: Dictionary<object,integer>; delayed: HashSet<CommandQueueBase>); override :=
    data.ToString(sb, tabs, index, delayed);
    
  end;
  
static function KernelArgPrivate.FromArraySegment<T>(seg: CommandQueue<ArraySegment<T>>): KernelArgPrivate; where T: record;
begin Result := new KernelArgPrivateArraySegment<T>(seg) end;

{$endregion ArraySegment}

{$endregion Managed}

{$region NativeArea}

{$region NativeMemoryArea}

type
  KernelArgPrivateSetterNativeMemoryArea = sealed class(KernelArgSetterTyped<NativeMemoryArea>)
    
    public procedure ApplyImpl(k: cl_kernel; ind: UInt32); override :=
    OpenCLABCInternalException.RaiseIfError( cl.SetKernelArg(k, ind, self.o.sz, self.o.ptr) );
    
  end;
  KernelArgPrivateNativeMemoryArea = sealed class(KernelArgPrivate)
    private data: KernelArgPrivateCommon<NativeMemoryArea>;
    
    public constructor(ntv_mem_area: CommandQueue<NativeMemoryArea>) :=
    data := new KernelArgPrivateCommon<NativeMemoryArea>(ntv_mem_area);
    
    protected procedure InitBeforeInvoke(g: CLTaskGlobalData; inited_hubs: HashSet<IMultiusableCommandQueueHub>); override :=
    data.q.InitBeforeInvoke(g, inited_hubs);
    
    protected function Invoke(inv: CLTaskBranchInvoker): ValueTuple<KernelArgSetter, EventList>; override :=
    data.Invoke(inv, o->new KernelArgPrivateSetterNativeMemoryArea(o), ()->new KernelArgPrivateSetterNativeMemoryArea);
    
    protected procedure ToStringImpl(sb: StringBuilder; tabs: integer; index: Dictionary<object,integer>; delayed: HashSet<CommandQueueBase>); override :=
    data.ToString(sb, tabs, index, delayed);
    
  end;
  
static function KernelArgPrivate.FromNativeMemoryArea(ntv_mem_area: CommandQueue<NativeMemoryArea>): KernelArgPrivate;
begin Result := new KernelArgPrivateNativeMemoryArea(ntv_mem_area) end;

{$endregion NativeMemoryArea}

{$region NativeValueArea}

type
  KernelArgPrivateSetterNativeValueArea<T> = sealed class(KernelArgSetterTyped<NativeValueArea<T>>)
  where T: record;
    
    public procedure ApplyImpl(k: cl_kernel; ind: UInt32); override :=
    OpenCLABCInternalException.RaiseIfError( cl.SetKernelArg(k, ind, self.o.ByteSize, self.o.ptr) );
    
  end;
  KernelArgPrivateNativeValueArea<T> = sealed class(KernelArgPrivate)
  where T: record;
    private data: KernelArgPrivateCommon<NativeValueArea<T>>;
    
    static constructor := BlittableHelper.RaiseIfBad(typeof(T), $'%Err:Blittable:Source:KernelArgPrivate:NativeValueArea%');
    
    public constructor(ntv_val_area: CommandQueue<NativeValueArea<T>>) :=
    data := new KernelArgPrivateCommon<NativeValueArea<T>>(ntv_val_area);
    
    protected procedure InitBeforeInvoke(g: CLTaskGlobalData; inited_hubs: HashSet<IMultiusableCommandQueueHub>); override :=
    data.q.InitBeforeInvoke(g, inited_hubs);
    
    protected function Invoke(inv: CLTaskBranchInvoker): ValueTuple<KernelArgSetter, EventList>; override :=
    data.Invoke(inv, o->new KernelArgPrivateSetterNativeValueArea<T>(o), ()->new KernelArgPrivateSetterNativeValueArea<T>);
    
    protected procedure ToStringImpl(sb: StringBuilder; tabs: integer; index: Dictionary<object,integer>; delayed: HashSet<CommandQueueBase>); override :=
    data.ToString(sb, tabs, index, delayed);
    
  end;
  
static function KernelArgPrivate.FromNativeValueArea<T>(ntv_val_area: CommandQueue<NativeValueArea<T>>): KernelArgPrivate; where T: record;
begin Result := new KernelArgPrivateNativeValueArea<T>(ntv_val_area) end;

{$endregion NativeValueArea}

{$region NativeArrayArea}

type
  KernelArgPrivateSetterNativeArrayArea<T> = sealed class(KernelArgSetterTyped<NativeArrayArea<T>>)
  where T: record;
    
    public procedure ApplyImpl(k: cl_kernel; ind: UInt32); override :=
    OpenCLABCInternalException.RaiseIfError( cl.SetKernelArg(k, ind, self.o.ByteSize, self.o.first_ptr) );
    
  end;
  KernelArgPrivateNativeArrayArea<T> = sealed class(KernelArgPrivate)
  where T: record;
    private data: KernelArgPrivateCommon<NativeArrayArea<T>>;
    
    static constructor := BlittableHelper.RaiseIfBad(typeof(T), $'%Err:Blittable:Source:KernelArgPrivate:NativeArrayArea%');
    
    public constructor(ntv_arr_area: CommandQueue<NativeArrayArea<T>>) :=
    data := new KernelArgPrivateCommon<NativeArrayArea<T>>(ntv_arr_area);
    
    protected procedure InitBeforeInvoke(g: CLTaskGlobalData; inited_hubs: HashSet<IMultiusableCommandQueueHub>); override :=
    data.q.InitBeforeInvoke(g, inited_hubs);
    
    protected function Invoke(inv: CLTaskBranchInvoker): ValueTuple<KernelArgSetter, EventList>; override :=
    data.Invoke(inv, o->new KernelArgPrivateSetterNativeArrayArea<T>(o), ()->new KernelArgPrivateSetterNativeArrayArea<T>);
    
    protected procedure ToStringImpl(sb: StringBuilder; tabs: integer; index: Dictionary<object,integer>; delayed: HashSet<CommandQueueBase>); override :=
    data.ToString(sb, tabs, index, delayed);
    
  end;
  
static function KernelArgPrivate.FromNativeArrayArea<T>(ntv_arr_area: CommandQueue<NativeArrayArea<T>>): KernelArgPrivate; where T: record;
begin Result := new KernelArgPrivateNativeArrayArea<T>(ntv_arr_area) end;

{$endregion NativeArrayArea}

{$endregion NativeArea}

{$region Native}

{$region NativeMemory}

type
  KernelArgPrivateSetterNativeMemory = sealed class(KernelArgSetterTyped<NativeMemory>)
    
    public procedure ApplyImpl(k: cl_kernel; ind: UInt32); override :=
    OpenCLABCInternalException.RaiseIfError( cl.SetKernelArg(k, ind, self.o.Area.sz, self.o.Area.ptr) );
    
  end;
  KernelArgPrivateNativeMemory = sealed class(KernelArgPrivate)
    private data: KernelArgPrivateCommon<NativeMemory>;
    
    public constructor(ntv_mem: CommandQueue<NativeMemory>) :=
    data := new KernelArgPrivateCommon<NativeMemory>(ntv_mem);
    
    protected procedure InitBeforeInvoke(g: CLTaskGlobalData; inited_hubs: HashSet<IMultiusableCommandQueueHub>); override :=
    data.q.InitBeforeInvoke(g, inited_hubs);
    
    protected function Invoke(inv: CLTaskBranchInvoker): ValueTuple<KernelArgSetter, EventList>; override :=
    data.Invoke(inv, o->new KernelArgPrivateSetterNativeMemory(o), ()->new KernelArgPrivateSetterNativeMemory);
    
    protected procedure ToStringImpl(sb: StringBuilder; tabs: integer; index: Dictionary<object,integer>; delayed: HashSet<CommandQueueBase>); override :=
    data.ToString(sb, tabs, index, delayed);
    
  end;
  
static function KernelArgPrivate.FromNativeMemory(ntv_mem: CommandQueue<NativeMemory>): KernelArgPrivate;
begin Result := new KernelArgPrivateNativeMemory(ntv_mem) end;

{$endregion NativeMemory}

{$region NativeValue}

type
  KernelArgPrivateSetterNativeValue<T> = sealed class(KernelArgSetterTyped<NativeValue<T>>)
  where T: record;
    
    public procedure ApplyImpl(k: cl_kernel; ind: UInt32); override :=
    OpenCLABCInternalException.RaiseIfError( cl.SetKernelArg(k, ind, self.o.Area.ByteSize, self.o.Area.ptr) );
    
  end;
  KernelArgPrivateNativeValue<T> = sealed class(KernelArgPrivate)
  where T: record;
    private data: KernelArgPrivateCommon<NativeValue<T>>;
    
    static constructor := BlittableHelper.RaiseIfBad(typeof(T), $'%Err:Blittable:Source:KernelArgPrivate:NativeValue%');
    
    public constructor(ntv_val: CommandQueue<NativeValue<T>>) :=
    data := new KernelArgPrivateCommon<NativeValue<T>>(ntv_val);
    
    protected procedure InitBeforeInvoke(g: CLTaskGlobalData; inited_hubs: HashSet<IMultiusableCommandQueueHub>); override :=
    data.q.InitBeforeInvoke(g, inited_hubs);
    
    protected function Invoke(inv: CLTaskBranchInvoker): ValueTuple<KernelArgSetter, EventList>; override :=
    data.Invoke(inv, o->new KernelArgPrivateSetterNativeValue<T>(o), ()->new KernelArgPrivateSetterNativeValue<T>);
    
    protected procedure ToStringImpl(sb: StringBuilder; tabs: integer; index: Dictionary<object,integer>; delayed: HashSet<CommandQueueBase>); override :=
    data.ToString(sb, tabs, index, delayed);
    
  end;
  
static function KernelArgPrivate.FromNativeValue<T>(ntv_val: CommandQueue<NativeValue<T>>): KernelArgPrivate; where T: record;
begin Result := new KernelArgPrivateNativeValue<T>(ntv_val) end;

{$endregion NativeValue}

{$region NativeArray}

type
  KernelArgPrivateSetterNativeArray<T> = sealed class(KernelArgSetterTyped<NativeArray<T>>)
  where T: record;
    
    public procedure ApplyImpl(k: cl_kernel; ind: UInt32); override :=
    OpenCLABCInternalException.RaiseIfError( cl.SetKernelArg(k, ind, self.o.Area.ByteSize, self.o.Area.first_ptr) );
    
  end;
  KernelArgPrivateNativeArray<T> = sealed class(KernelArgPrivate)
  where T: record;
    private data: KernelArgPrivateCommon<NativeArray<T>>;
    
    static constructor := BlittableHelper.RaiseIfBad(typeof(T), $'%Err:Blittable:Source:KernelArgPrivate:NativeArray%');
    
    public constructor(ntv_arr: CommandQueue<NativeArray<T>>) :=
    data := new KernelArgPrivateCommon<NativeArray<T>>(ntv_arr);
    
    protected procedure InitBeforeInvoke(g: CLTaskGlobalData; inited_hubs: HashSet<IMultiusableCommandQueueHub>); override :=
    data.q.InitBeforeInvoke(g, inited_hubs);
    
    protected function Invoke(inv: CLTaskBranchInvoker): ValueTuple<KernelArgSetter, EventList>; override :=
    data.Invoke(inv, o->new KernelArgPrivateSetterNativeArray<T>(o), ()->new KernelArgPrivateSetterNativeArray<T>);
    
    protected procedure ToStringImpl(sb: StringBuilder; tabs: integer; index: Dictionary<object,integer>; delayed: HashSet<CommandQueueBase>); override :=
    data.ToString(sb, tabs, index, delayed);
    
  end;
  
static function KernelArgPrivate.FromNativeArray<T>(ntv_arr: CommandQueue<NativeArray<T>>): KernelArgPrivate; where T: record;
begin Result := new KernelArgPrivateNativeArray<T>(ntv_arr) end;

{$endregion NativeArray}

{$endregion Native}


