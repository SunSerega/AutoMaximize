  
  
  
  Platform = partial class
    
    public property Native: cl_platform_id read ntv;
    
    private prop: PlatformProperties;
    private function GetProperties: PlatformProperties;
    begin
      if prop=nil then prop := new PlatformProperties(ntv);
      Result := prop;
    end;
    public property Properties: PlatformProperties read GetProperties;
    
    public static function operator=(wr1, wr2: Platform): boolean :=
    if ReferenceEquals(wr1,nil) then ReferenceEquals(wr2,nil) else not ReferenceEquals(wr2,nil) and (wr1.ntv = wr2.ntv);
    public static function operator<>(wr1, wr2: Platform): boolean := false=
    if ReferenceEquals(wr1,nil) then ReferenceEquals(wr2,nil) else not ReferenceEquals(wr2,nil) and (wr1.ntv = wr2.ntv);
    
    public function Equals(obj: object): boolean; override :=
    (obj is Platform(var wr)) and (self = wr);
    
    public function ToString: string; override :=
    $'{TypeName(self)}[{ntv.val}]';
    
  end;
  
  Device = partial class
    
    public property Native: cl_device_id read ntv;
    
    private prop: DeviceProperties;
    private function GetProperties: DeviceProperties;
    begin
      if prop=nil then prop := new DeviceProperties(ntv);
      Result := prop;
    end;
    public property Properties: DeviceProperties read GetProperties;
    
    public static function operator=(wr1, wr2: Device): boolean :=
    if ReferenceEquals(wr1,nil) then ReferenceEquals(wr2,nil) else not ReferenceEquals(wr2,nil) and (wr1.ntv = wr2.ntv);
    public static function operator<>(wr1, wr2: Device): boolean := false=
    if ReferenceEquals(wr1,nil) then ReferenceEquals(wr2,nil) else not ReferenceEquals(wr2,nil) and (wr1.ntv = wr2.ntv);
    
    public function Equals(obj: object): boolean; override :=
    (obj is Device(var wr)) and (self = wr);
    
    public function ToString: string; override :=
    $'{TypeName(self)}[{ntv.val}]';
    
  end;
  
  SubDevice = partial class(Device)
    
    private prop: SubDeviceProperties;
    private function GetProperties: SubDeviceProperties;
    begin
      if prop=nil then prop := new SubDeviceProperties(ntv);
      Result := prop;
    end;
    public property Properties: SubDeviceProperties read GetProperties;
    
    public function ToString: string; override :=
    $'{inherited ToString} of {Parent}';
    
  end;
  
  Context = partial class
    
    public property Native: cl_context read ntv;
    
    private prop: ContextProperties;
    private function GetProperties: ContextProperties;
    begin
      if prop=nil then prop := new ContextProperties(ntv);
      Result := prop;
    end;
    public property Properties: ContextProperties read GetProperties;
    
    public static function operator=(wr1, wr2: Context): boolean :=
    if ReferenceEquals(wr1,nil) then ReferenceEquals(wr2,nil) else not ReferenceEquals(wr2,nil) and (wr1.ntv = wr2.ntv);
    public static function operator<>(wr1, wr2: Context): boolean := false=
    if ReferenceEquals(wr1,nil) then ReferenceEquals(wr2,nil) else not ReferenceEquals(wr2,nil) and (wr1.ntv = wr2.ntv);
    
    public function Equals(obj: object): boolean; override :=
    (obj is Context(var wr)) and (self = wr);
    
    public function ToString: string; override :=
    $'{TypeName(self)}[{ntv.val}] on devices: [{AllDevices.JoinToString('', '')}]; Main device: {MainDevice}';
    
  end;
  
  ProgramCode = partial class
    
    public property Native: cl_program read ntv;
    
    private prop: ProgramCodeProperties;
    private function GetProperties: ProgramCodeProperties;
    begin
      if prop=nil then prop := new ProgramCodeProperties(ntv);
      Result := prop;
    end;
    public property Properties: ProgramCodeProperties read GetProperties;
    
    public static function operator=(wr1, wr2: ProgramCode): boolean :=
    if ReferenceEquals(wr1,nil) then ReferenceEquals(wr2,nil) else not ReferenceEquals(wr2,nil) and (wr1.ntv = wr2.ntv);
    public static function operator<>(wr1, wr2: ProgramCode): boolean := false=
    if ReferenceEquals(wr1,nil) then ReferenceEquals(wr2,nil) else not ReferenceEquals(wr2,nil) and (wr1.ntv = wr2.ntv);
    
    public function Equals(obj: object): boolean; override :=
    (obj is ProgramCode(var wr)) and (self = wr);
    
    public function ToString: string; override :=
    $'{TypeName(self)}[{ntv.val}]';
    
  end;
  
  Kernel = partial class
    
    public property Native: cl_kernel read ntv;
    
    private prop: KernelProperties;
    private function GetProperties: KernelProperties;
    begin
      if prop=nil then prop := new KernelProperties(ntv);
      Result := prop;
    end;
    public property Properties: KernelProperties read GetProperties;
    
    public static function operator=(wr1, wr2: Kernel): boolean :=
    if ReferenceEquals(wr1,nil) then ReferenceEquals(wr2,nil) else not ReferenceEquals(wr2,nil) and (wr1.Name=wr2.Name) and (wr1.CodeContainer=wr2.CodeContainer);
    public static function operator<>(wr1, wr2: Kernel): boolean := false=
    if ReferenceEquals(wr1,nil) then ReferenceEquals(wr2,nil) else not ReferenceEquals(wr2,nil) and (wr1.Name=wr2.Name) and (wr1.CodeContainer=wr2.CodeContainer);
    
    public function Equals(obj: object): boolean; override :=
    (obj is Kernel(var wr)) and (self = wr);
    
    public function ToString: string; override :=
    $'{TypeName(self)}[{Name}] from {code}';
    
  end;
  
  CLMemorySegment = partial class
    
    public property Native: cl_mem read ntv;
    
    private prop: CLMemorySegmentProperties;
    private function GetProperties: CLMemorySegmentProperties;
    begin
      if prop=nil then prop := new CLMemorySegmentProperties(ntv);
      Result := prop;
    end;
    public property Properties: CLMemorySegmentProperties read GetProperties;
    
    public static function operator=(wr1, wr2: CLMemorySegment): boolean :=
    if ReferenceEquals(wr1,nil) then ReferenceEquals(wr2,nil) else not ReferenceEquals(wr2,nil) and (wr1.ntv = wr2.ntv);
    public static function operator<>(wr1, wr2: CLMemorySegment): boolean := false=
    if ReferenceEquals(wr1,nil) then ReferenceEquals(wr2,nil) else not ReferenceEquals(wr2,nil) and (wr1.ntv = wr2.ntv);
    
    public function Equals(obj: object): boolean; override :=
    (obj is CLMemorySegment(var wr)) and (self = wr);
    
    public function ToString: string; override :=
    $'{TypeName(self)}[{ntv.val}] of size {Size}';
    
  end;
  
  CLMemorySubSegment = partial class(CLMemorySegment)
    
    private prop: CLMemorySubSegmentProperties;
    private function GetProperties: CLMemorySubSegmentProperties;
    begin
      if prop=nil then prop := new CLMemorySubSegmentProperties(ntv);
      Result := prop;
    end;
    public property Properties: CLMemorySubSegmentProperties read GetProperties;
    
    public function ToString: string; override :=
    $'{inherited ToString} inside {Parent}';
    
  end;
  
  CLValue<T> = partial class
    
    public property Native: cl_mem read ntv;
    
    private prop: CLValueProperties;
    private function GetProperties: CLValueProperties;
    begin
      if prop=nil then prop := new CLValueProperties(ntv);
      Result := prop;
    end;
    public property Properties: CLValueProperties read GetProperties;
    
    public static function operator=(wr1, wr2: CLValue<T>): boolean :=
    if ReferenceEquals(wr1,nil) then ReferenceEquals(wr2,nil) else not ReferenceEquals(wr2,nil) and (wr1.ntv = wr2.ntv);
    public static function operator<>(wr1, wr2: CLValue<T>): boolean := false=
    if ReferenceEquals(wr1,nil) then ReferenceEquals(wr2,nil) else not ReferenceEquals(wr2,nil) and (wr1.ntv = wr2.ntv);
    
    public function Equals(obj: object): boolean; override :=
    (obj is CLValue<T>(var wr)) and (self = wr);
    
    public function ToString: string; override :=
    $'{TypeName(self)}[{ntv.val}]';
    
  end;
  
  CLArray<T> = partial class
    
    public property Native: cl_mem read ntv;
    
    private prop: CLArrayProperties;
    private function GetProperties: CLArrayProperties;
    begin
      if prop=nil then prop := new CLArrayProperties(ntv);
      Result := prop;
    end;
    public property Properties: CLArrayProperties read GetProperties;
    
    public static function operator=(wr1, wr2: CLArray<T>): boolean :=
    if ReferenceEquals(wr1,nil) then ReferenceEquals(wr2,nil) else not ReferenceEquals(wr2,nil) and (wr1.ntv = wr2.ntv);
    public static function operator<>(wr1, wr2: CLArray<T>): boolean := false=
    if ReferenceEquals(wr1,nil) then ReferenceEquals(wr2,nil) else not ReferenceEquals(wr2,nil) and (wr1.ntv = wr2.ntv);
    
    public function Equals(obj: object): boolean; override :=
    (obj is CLArray<T>(var wr)) and (self = wr);
    
    public function ToString: string; override :=
    $'{TypeName(self)}[{ntv.val}] of length {Length}';
    
  end;
  
  
  