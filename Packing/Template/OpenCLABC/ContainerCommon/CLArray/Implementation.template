


constructor CLArrayCCQ<T>.Create(o: CLArray<T>) := inherited;
constructor CLArrayCCQ<T>.Create(q: CommandQueue<CLArray<T>>) := inherited;
constructor CLArrayCCQ<T>.Create := inherited;

{$region Special .Add's}

function CLArrayCCQ<T>.AddQueue(q: CommandQueueBase): CLArrayCCQ<T>;
begin
  Result := self;
  //TODO UseTyped
//  if q is IConstQueue then raise new System.ArgumentException($'%Err:AddQueue(Const)%');
//  if q is ICastQueue(var cq) then q := cq.GetQ;
  commands.Add( BasicGPUCommand&<CLArray<T>>.MakeQueue(q) );
end;

function CLArrayCCQ<T>.AddProc(p: CLArray<T>->()) := AddCommand(self, BasicGPUCommand&<CLArray<T>>.MakeProc((o,c)->p(o)));
function CLArrayCCQ<T>.AddProc(p: (CLArray<T>, Context)->()) := AddCommand(self, BasicGPUCommand&<CLArray<T>>.MakeProc(p));

function CLArrayCCQ<T>.AddWait(marker: WaitMarker) := AddCommand(self, BasicGPUCommand&<CLArray<T>>.MakeWait(marker));

{$endregion Special .Add's}


