


# Context
Представляет контекст для хранения данных и выполнения команд на GPU



# Context.AllDevices
Возвращает список устройств, используемых данным контекстом

# Context.MainDevice
Возвращает главное устройство контекста, на котором выделяется память под буферы и внутренние объекты очередей

# Context.Default
Возвращает или задаёт главный контекст, используемый там, где контекст не указывается явно (как неявные очереди)
При первом обращении к данному свойству OpenCLABC пытается создать новый контекст
При создании главного контекста приоритет отдаётся полноценным GPU, но если таких нет - берётся любое устройство, поддерживающее OpenCL

Если устройств поддерживающих OpenCL нет, то Context.Default изначально будет nil
Но это свидетельствует скорее об отсутствии драйверов, чем отстутсвии устройств



# Context.(IList<Device>, Device)
Создаёт контекст с указанными AllDevices и MainDevice

# Context.(array of Device)
Создаёт контекст с указанными AllDevices
В качестве MainDevice берётся первое устройство из массива



# Context.MakeSibling(Device)
Создаёт совместимый контекст, равный данному с одним отличием - MainDevice заменён на dvc

# Context.BeginInvoke<T>(CommandQueue<T>)
# Context.BeginInvoke(CommandQueueBase)
Запускает данную очередь и все её подочереди
Как только всё запущено: возвращает объект типа CLTask<>, через который можно следить за процессом выполнения

# Context.SyncInvoke<T>(CommandQueue<T>)
# Context.SyncInvoke(CommandQueueBase)
Запускает данную очередь и все её подочереди
Затем ожидает окончания выполнения и возвращает полученный результат



